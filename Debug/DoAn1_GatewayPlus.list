
DoAn1_GatewayPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c438  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001510  0800c5e8  0800c5e8  0001c5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf8  0800daf8  000202b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf8  0800daf8  0001daf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db00  0800db00  000202b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b4  20000000  0800db30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202b4  2**0
                  CONTENTS
 10 .bss          0000b6e0  200002b8  200002b8  000202b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000b998  2000b998  000202b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005c029  00000000  00000000  000202e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009831  00000000  00000000  0007c30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00028b83  00000000  00000000  00085b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001af8  00000000  00000000  000ae6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00007728  00000000  00000000  000b01c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011265  00000000  00000000  000b78e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d826  00000000  00000000  000c8b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104a72  00000000  00000000  00106373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020ade5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006ffc  00000000  00000000  0020ae38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b8 	.word	0x200002b8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c5d0 	.word	0x0800c5d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002bc 	.word	0x200002bc
 80001ec:	0800c5d0 	.word	0x0800c5d0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <HAL_Driver_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8000fcc:	b086      	sub	sp, #24
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_Driver_Init+0x70>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9201      	str	r2, [sp, #4]
 8000fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000fda:	6319      	str	r1, [r3, #48]	; 0x30
 8000fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fde:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000fe2:	9101      	str	r1, [sp, #4]
 8000fe4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	9202      	str	r2, [sp, #8]
 8000fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fea:	f041 0104 	orr.w	r1, r1, #4
 8000fee:	6319      	str	r1, [r3, #48]	; 0x30
 8000ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff2:	f001 0104 	and.w	r1, r1, #4
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	9203      	str	r2, [sp, #12]
 8000ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffe:	f041 0101 	orr.w	r1, r1, #1
 8001002:	6319      	str	r1, [r3, #48]	; 0x30
 8001004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001006:	f001 0101 	and.w	r1, r1, #1
 800100a:	9103      	str	r1, [sp, #12]
 800100c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	9204      	str	r2, [sp, #16]
 8001010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001012:	f041 0102 	orr.w	r1, r1, #2
 8001016:	6319      	str	r1, [r3, #48]	; 0x30
 8001018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800101a:	f001 0102 	and.w	r1, r1, #2
 800101e:	9104      	str	r1, [sp, #16]
 8001020:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	9205      	str	r2, [sp, #20]
 8001024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	9305      	str	r3, [sp, #20]
 8001034:	9b05      	ldr	r3, [sp, #20]
}
 8001036:	b006      	add	sp, #24
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <main>:
	return main_application();
 8001040:	f007 bc9a 	b.w	8008978 <main_application>

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was handle(call NMI_Handler)...");
 8001046:	4902      	ldr	r1, [pc, #8]	; (8001050 <NMI_Handler+0xc>)
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <NMI_Handler+0x10>)
 800104a:	f008 f8a3 	bl	8009194 <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104e:	e7fe      	b.n	800104e <NMI_Handler+0xa>
 8001050:	0800c5e8 	.word	0x0800c5e8
 8001054:	0800c620 	.word	0x0800c620

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was handle(call HardFault_Handler)...");
 800105a:	4902      	ldr	r1, [pc, #8]	; (8001064 <HardFault_Handler+0xc>)
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <HardFault_Handler+0x10>)
 800105e:	f008 f899 	bl	8009194 <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0xa>
 8001064:	0800c62c 	.word	0x0800c62c
 8001068:	0800c668 	.word	0x0800c668

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was handle(call MemManage_Handler)...");
 800106e:	4902      	ldr	r1, [pc, #8]	; (8001078 <MemManage_Handler+0xc>)
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <MemManage_Handler+0x10>)
 8001072:	f008 f88f 	bl	8009194 <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <MemManage_Handler+0xa>
 8001078:	0800c674 	.word	0x0800c674
 800107c:	0800c620 	.word	0x0800c620

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was handle(call BusFault_Handler)...");
 8001082:	4902      	ldr	r1, [pc, #8]	; (800108c <BusFault_Handler+0xc>)
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <BusFault_Handler+0x10>)
 8001086:	f008 f885 	bl	8009194 <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0xa>
 800108c:	0800c6b8 	.word	0x0800c6b8
 8001090:	0800c668 	.word	0x0800c668

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was handle(call UsageFault_Handler)...");
 8001096:	4902      	ldr	r1, [pc, #8]	; (80010a0 <UsageFault_Handler+0xc>)
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <UsageFault_Handler+0x10>)
 800109a:	f008 f87b 	bl	8009194 <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <UsageFault_Handler+0xa>
 80010a0:	0800c6f4 	.word	0x0800c6f4
 80010a4:	0800c668 	.word	0x0800c668

080010a8 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was handle(call DebugMon_Handler)...");
 80010a8:	4901      	ldr	r1, [pc, #4]	; (80010b0 <DebugMon_Handler+0x8>)
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DebugMon_Handler+0xc>)
 80010ac:	f008 b872 	b.w	8009194 <exception_interrupt_handler>
 80010b0:	0800c734 	.word	0x0800c734
 80010b4:	0800c620 	.word	0x0800c620

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 80010ba:	f006 fcfb 	bl	8007ab4 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8e7 	bl	8001290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010c2:	f002 f899 	bl	80031f8 <xTaskGetSchedulerState>
 80010c6:	2801      	cmp	r0, #1
 80010c8:	d100      	bne.n	80010cc <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80010d0:	f002 bc48 	b.w	8003964 <xPortSysTickHandler>

080010d4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <DMA2_Stream3_IRQHandler+0x8>)
 80010d6:	f000 b8e7 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010da:	bf00      	nop
 80010dc:	200002d4 	.word	0x200002d4

080010e0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010e0:	4801      	ldr	r0, [pc, #4]	; (80010e8 <ETH_IRQHandler+0x8>)
 80010e2:	f000 b9d5 	b.w	8001490 <HAL_ETH_IRQHandler>
 80010e6:	bf00      	nop
 80010e8:	200003a4 	.word	0x200003a4

080010ec <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <DMA2_Stream6_IRQHandler+0x8>)
 80010ee:	f000 b8db 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010f2:	bf00      	nop
 80010f4:	20000334 	.word	0x20000334

080010f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80010f8:	2001      	movs	r0, #1
 80010fa:	4770      	bx	lr

080010fc <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <_kill+0xc>)
 80010fe:	2216      	movs	r2, #22
 8001100:	601a      	str	r2, [r3, #0]
  return -1;
}
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	2000b1c0 	.word	0x2000b1c0

0800110c <_exit>:
  errno = EINVAL;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <_exit+0x8>)
 800110e:	2216      	movs	r2, #22
 8001110:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x6>
 8001114:	2000b1c0 	.word	0x2000b1c0

08001118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	1e16      	subs	r6, r2, #0
 800111c:	dd07      	ble.n	800112e <_read+0x16>
 800111e:	460c      	mov	r4, r1
 8001120:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001122:	f3af 8000 	nop.w
 8001126:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	42a5      	cmp	r5, r4
 800112c:	d1f9      	bne.n	8001122 <_read+0xa>
  }

  return len;
}
 800112e:	4630      	mov	r0, r6
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	bf00      	nop

08001134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	1e16      	subs	r6, r2, #0
 8001138:	dd07      	ble.n	800114a <_write+0x16>
 800113a:	460c      	mov	r4, r1
 800113c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800113e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001142:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	42ac      	cmp	r4, r5
 8001148:	d1f9      	bne.n	800113e <_write+0xa>
  }
  return len;
}
 800114a:	4630      	mov	r0, r6
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	bf00      	nop

08001150 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800115e:	2000      	movs	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001168:	2000      	movs	r0, #0
 800116a:	4770      	bx	lr

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <_sbrk+0x3c>)
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001174:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001176:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001178:	b182      	cbz	r2, 800119c <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4410      	add	r0, r2
 800117c:	4288      	cmp	r0, r1
 800117e:	d804      	bhi.n	800118a <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001180:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001182:	4610      	mov	r0, r2
 8001184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001188:	4770      	bx	lr
    errno = ENOMEM;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <_sbrk+0x44>)
}
 800118c:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001190:	220c      	movs	r2, #12
 8001192:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001198:	4610      	mov	r0, r2
 800119a:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x48>)
 800119e:	6022      	str	r2, [r4, #0]
 80011a0:	e7eb      	b.n	800117a <_sbrk+0xe>
 80011a2:	bf00      	nop
 80011a4:	20000394 	.word	0x20000394
 80011a8:	20030000 	.word	0x20030000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000b1c0 	.word	0x2000b1c0
 80011b4:	2000b998 	.word	0x2000b998

080011b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <SystemInit+0x10>)
 80011ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011cc:	4a16      	ldr	r2, [pc, #88]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d00c      	beq.n	80011f2 <SystemCoreClockUpdate+0x26>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d00c      	beq.n	80011f6 <SystemCoreClockUpdate+0x2a>
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <SystemCoreClockUpdate+0x64>)
 80011e2:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80011ea:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 80011ec:	40d3      	lsrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
}
 80011f0:	4770      	bx	lr
  switch (tmp)
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemCoreClockUpdate+0x6c>)
 80011f4:	e7f3      	b.n	80011de <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011f6:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 80011fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001202:	6853      	ldr	r3, [r2, #4]
 8001204:	bf14      	ite	ne
 8001206:	4a0c      	ldrne	r2, [pc, #48]	; (8001238 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001208:	4a08      	ldreq	r2, [pc, #32]	; (800122c <SystemCoreClockUpdate+0x60>)
 800120a:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 8001210:	6852      	ldr	r2, [r2, #4]
 8001212:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001216:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800121a:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800121c:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001220:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001222:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001226:	e7da      	b.n	80011de <SystemCoreClockUpdate+0x12>
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400
 8001230:	0800c774 	.word	0x0800c774
 8001234:	20000000 	.word	0x20000000
 8001238:	017d7840 	.word	0x017d7840

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001266:	f7ff ffa7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f008 f9b1 	bl	80095d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fee7 	bl	8001040 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001274:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	200002b4 	.word	0x200002b4
  ldr r2, =_sidata
 8001280:	0800db30 	.word	0x0800db30
  ldr r2, =_sbss
 8001284:	200002b8 	.word	0x200002b8
  ldr r4, =_ebss
 8001288:	2000b998 	.word	0x2000b998

0800128c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <CAN1_RX0_IRQHandler>
	...

08001290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x10>)
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_IncTick+0x14>)
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	440b      	add	r3, r1
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000398 	.word	0x20000398
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ac:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ae:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b2:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80012ba:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	2208      	movs	r2, #8
 80012be:	409a      	lsls	r2, r3
 80012c0:	4222      	tst	r2, r4
{
 80012c2:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	d004      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012c6:	6801      	ldr	r1, [r0, #0]
 80012c8:	680f      	ldr	r7, [r1, #0]
 80012ca:	0778      	lsls	r0, r7, #29
 80012cc:	f100 808a 	bmi.w	80013e4 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4222      	tst	r2, r4
 80012d6:	d004      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012d8:	f8d8 1000 	ldr.w	r1, [r8]
 80012dc:	6949      	ldr	r1, [r1, #20]
 80012de:	0609      	lsls	r1, r1, #24
 80012e0:	d478      	bmi.n	80013d4 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	2204      	movs	r2, #4
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4222      	tst	r2, r4
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	f8d8 1000 	ldr.w	r1, [r8]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	078f      	lsls	r7, r1, #30
 80012f2:	d467      	bmi.n	80013c4 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	2210      	movs	r2, #16
 80012f6:	409a      	lsls	r2, r3
 80012f8:	4222      	tst	r2, r4
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012fc:	f8d8 1000 	ldr.w	r1, [r8]
 8001300:	680f      	ldr	r7, [r1, #0]
 8001302:	0738      	lsls	r0, r7, #28
 8001304:	d449      	bmi.n	800139a <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001306:	2220      	movs	r2, #32
 8001308:	409a      	lsls	r2, r3
 800130a:	4222      	tst	r2, r4
 800130c:	d017      	beq.n	800133e <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130e:	f8d8 1000 	ldr.w	r1, [r8]
 8001312:	680c      	ldr	r4, [r1, #0]
 8001314:	06e0      	lsls	r0, r4, #27
 8001316:	d512      	bpl.n	800133e <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001318:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800131e:	2a05      	cmp	r2, #5
 8001320:	d073      	beq.n	800140a <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001322:	680b      	ldr	r3, [r1, #0]
 8001324:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001328:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	f000 8090 	beq.w	800144e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800132e:	0319      	lsls	r1, r3, #12
 8001330:	f140 809b 	bpl.w	800146a <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 8001334:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001338:	b10b      	cbz	r3, 800133e <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800133a:	4640      	mov	r0, r8
 800133c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800133e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001342:	b33b      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001344:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001348:	07da      	lsls	r2, r3, #31
 800134a:	d51b      	bpl.n	8001384 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800134c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001350:	494c      	ldr	r1, [pc, #304]	; (8001484 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001352:	2305      	movs	r3, #5
 8001354:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001358:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800135a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800135e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001362:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e002      	b.n	800136e <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d504      	bpl.n	8001378 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	42ab      	cmp	r3, r5
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	d9f7      	bls.n	8001368 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001378:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800137c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001380:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001384:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001388:	b123      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	4640      	mov	r0, r8
    }
  }
}
 800138c:	b002      	add	sp, #8
 800138e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8001392:	4718      	bx	r3
}
 8001394:	b002      	add	sp, #8
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800139a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	680a      	ldr	r2, [r1, #0]
 800139e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a4:	d12a      	bne.n	80013fc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a6:	05d7      	lsls	r7, r2, #23
 80013a8:	d403      	bmi.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013aa:	680a      	ldr	r2, [r1, #0]
 80013ac:	f022 0208 	bic.w	r2, r2, #8
 80013b0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80013b2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d0a5      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80013ba:	4640      	mov	r0, r8
 80013bc:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013be:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80013c2:	e7a0      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013d2:	e78f      	b.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013e2:	e77e      	b.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013e4:	680f      	ldr	r7, [r1, #0]
 80013e6:	f027 0704 	bic.w	r7, r7, #4
 80013ea:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013ec:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013ee:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013fa:	e769      	b.n	80012d0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fc:	0312      	lsls	r2, r2, #12
 80013fe:	d5d8      	bpl.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001400:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001404:	2a00      	cmp	r2, #0
 8001406:	d1d8      	bne.n	80013ba <HAL_DMA_IRQHandler+0x112>
 8001408:	e77d      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	680a      	ldr	r2, [r1, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	694a      	ldr	r2, [r1, #20]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800141e:	b352      	cbz	r2, 8001476 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001420:	680a      	ldr	r2, [r1, #0]
 8001422:	f022 0208 	bic.w	r2, r2, #8
 8001426:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800142e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001432:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001434:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001436:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001438:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800143c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001440:	2900      	cmp	r1, #0
 8001442:	d0a7      	beq.n	8001394 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8001444:	4640      	mov	r0, r8
}
 8001446:	b002      	add	sp, #8
 8001448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800144c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800144e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001452:	f47f af6f 	bne.w	8001334 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001456:	680a      	ldr	r2, [r1, #0]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800145e:	2201      	movs	r2, #1
 8001460:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001464:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8001468:	e764      	b.n	8001334 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800146a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af63 	bne.w	800133a <HAL_DMA_IRQHandler+0x92>
 8001474:	e763      	b.n	800133e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800147a:	2a00      	cmp	r2, #0
 800147c:	d1d0      	bne.n	8001420 <HAL_DMA_IRQHandler+0x178>
 800147e:	e7d3      	b.n	8001428 <HAL_DMA_IRQHandler+0x180>
 8001480:	20000000 	.word	0x20000000
 8001484:	1b4e81b5 	.word	0x1b4e81b5

08001488 <HAL_ETH_PMTCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_ETH_WakeUpCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001490:	6802      	ldr	r2, [r0, #0]
 8001492:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001496:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	0649      	lsls	r1, r1, #25
{
 800149c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800149e:	d502      	bpl.n	80014a6 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80014a0:	69d9      	ldr	r1, [r3, #28]
 80014a2:	0649      	lsls	r1, r1, #25
 80014a4:	d448      	bmi.n	8001538 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	07c9      	lsls	r1, r1, #31
 80014aa:	d502      	bpl.n	80014b2 <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80014ac:	69d9      	ldr	r1, [r3, #28]
 80014ae:	07c8      	lsls	r0, r1, #31
 80014b0:	d438      	bmi.n	8001524 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80014b2:	6959      	ldr	r1, [r3, #20]
 80014b4:	0409      	lsls	r1, r1, #16
 80014b6:	d502      	bpl.n	80014be <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80014b8:	69d9      	ldr	r1, [r3, #28]
 80014ba:	0408      	lsls	r0, r1, #16
 80014bc:	d40e      	bmi.n	80014dc <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80014be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80014c0:	0719      	lsls	r1, r3, #28
 80014c2:	d423      	bmi.n	800150c <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_ETH_IRQHandler+0xd0>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	0312      	lsls	r2, r2, #12
 80014ca:	d400      	bmi.n	80014ce <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80014cc:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80014ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d2:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ffd9 	bl	800148c <HAL_ETH_WakeUpCallback>
}
 80014da:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014dc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80014e0:	f042 0208 	orr.w	r2, r2, #8
 80014e4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80014ee:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014f0:	d12a      	bne.n	8001548 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014f2:	f248 6180 	movw	r1, #34432	; 0x8680
 80014f6:	400a      	ands	r2, r1
 80014f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014fc:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 f844 	bl	800158c <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001508:	0719      	lsls	r1, r3, #28
 800150a:	d5db      	bpl.n	80014c4 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800150c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800150e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001512:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff ffb6 	bl	8001488 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800151c:	2300      	movs	r3, #0
 800151e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001522:	e7cf      	b.n	80014c4 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001524:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001528:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 800152a:	4620      	mov	r0, r4
 800152c:	f000 f828 	bl	8001580 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001536:	e7bc      	b.n	80014b2 <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_ETH_IRQHandler+0xd4>)
 800153a:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 800153c:	f000 f81a 	bl	8001574 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001546:	e7ae      	b.n	80014a6 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_ETH_IRQHandler+0xd8>)
 800154a:	4002      	ands	r2, r0
 800154c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001550:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001552:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001554:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001558:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 800155a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800155e:	e7ce      	b.n	80014fe <HAL_ETH_IRQHandler+0x6e>
 8001560:	40013c00 	.word	0x40013c00
 8001564:	00010040 	.word	0x00010040
 8001568:	007e2000 	.word	0x007e2000

0800156c <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 800156c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_ETH_RxCpltCallback+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f000 b816 	b.w	80015a8 <osSemaphoreRelease>
 800157c:	2000039c 	.word	0x2000039c

08001580 <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_ETH_TxCpltCallback+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f000 b810 	b.w	80015a8 <osSemaphoreRelease>
 8001588:	200003a0 	.word	0x200003a0

0800158c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800158c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800158e:	f7ff ffed 	bl	800156c <HAL_ETH_GetDMAError>
 8001592:	0603      	lsls	r3, r0, #24
 8001594:	d400      	bmi.n	8001598 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001596:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_ETH_ErrorCallback+0x18>)
 800159a:	6818      	ldr	r0, [r3, #0]
}
 800159c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80015a0:	f000 b802 	b.w	80015a8 <osSemaphoreRelease>
 80015a4:	2000039c 	.word	0x2000039c

080015a8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80015a8:	b330      	cbz	r0, 80015f8 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80015aa:	b510      	push	{r4, lr}
 80015ac:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015ae:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80015b2:	b1ab      	cbz	r3, 80015e0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 80015b4:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015b6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80015b8:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015ba:	f000 fb99 	bl	8001cf0 <xQueueGiveFromISR>
 80015be:	2801      	cmp	r0, #1
 80015c0:	d117      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	b193      	cbz	r3, 80015ec <osSemaphoreRelease+0x44>
 80015c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80015da:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80015dc:	b002      	add	sp, #8
 80015de:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80015e0:	461a      	mov	r2, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	f000 f968 	bl	80018b8 <xQueueGenericSend>
 80015e8:	2801      	cmp	r0, #1
 80015ea:	d102      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
  stat = osOK;
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	b002      	add	sp, #8
 80015f0:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 80015f2:	f06f 0002 	mvn.w	r0, #2
 80015f6:	e7fa      	b.n	80015ee <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80015f8:	f06f 0003 	mvn.w	r0, #3
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <vApplicationGetIdleTaskMemory+0x14>)
 8001602:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001604:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001606:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001608:	4c03      	ldr	r4, [pc, #12]	; (8001618 <vApplicationGetIdleTaskMemory+0x18>)
 800160a:	600c      	str	r4, [r1, #0]
}
 800160c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	4770      	bx	lr
 8001614:	20000654 	.word	0x20000654
 8001618:	20000454 	.word	0x20000454

0800161c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <vApplicationGetTimerTaskMemory+0x18>)
 800161e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001620:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001626:	4c04      	ldr	r4, [pc, #16]	; (8001638 <vApplicationGetTimerTaskMemory+0x1c>)
 8001628:	600c      	str	r4, [r1, #0]
}
 800162a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000ac0 	.word	0x20000ac0
 8001638:	200006c0 	.word	0x200006c0

0800163c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800163c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001644:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001646:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800164a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800164e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001654:	2300      	movs	r3, #0
 8001656:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800165c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001662:	6802      	ldr	r2, [r0, #0]
{
 8001664:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001666:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001668:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800166a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800166c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800166e:	6099      	str	r1, [r3, #8]
}
 8001670:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8001674:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001676:	6002      	str	r2, [r0, #0]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800167c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800167e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	d010      	beq.n	80016a6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001684:	f100 0308 	add.w	r3, r0, #8
 8001688:	461c      	mov	r4, r3
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	42aa      	cmp	r2, r5
 8001690:	d9fa      	bls.n	8001688 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001692:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8001694:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8001696:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001698:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800169a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800169c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800169e:	6108      	str	r0, [r1, #16]
}
 80016a0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80016a2:	6002      	str	r2, [r0, #0]
}
 80016a4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80016a6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	e7f2      	b.n	8001692 <vListInsert+0x16>

080016ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80016ac:	6903      	ldr	r3, [r0, #16]
{
 80016ae:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016b0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80016b4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016b6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80016b8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016ba:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016bc:	bf08      	it	eq
 80016be:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80016c0:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80016c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 80016c6:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80016c8:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 80016ca:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80016cc:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80016ce:	6818      	ldr	r0, [r3, #0]
}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop

080016d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016dc:	b920      	cbnz	r0, 80016e8 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016de:	6825      	ldr	r5, [r4, #0]
 80016e0:	b34d      	cbz	r5, 8001736 <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016e2:	3601      	adds	r6, #1
 80016e4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80016e8:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016ea:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80016ec:	b97d      	cbnz	r5, 800170e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016ee:	6860      	ldr	r0, [r4, #4]
 80016f0:	f007 ffa2 	bl	8009638 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016fa:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016fc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016fe:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001700:	bf24      	itt	cs
 8001702:	6823      	ldrcs	r3, [r4, #0]
 8001704:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001706:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001708:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800170a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800170c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800170e:	68e0      	ldr	r0, [r4, #12]
 8001710:	f007 ff92 	bl	8009638 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001714:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001716:	68e3      	ldr	r3, [r4, #12]
 8001718:	4251      	negs	r1, r2
 800171a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800171c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800171e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001720:	4293      	cmp	r3, r2
 8001722:	d202      	bcs.n	800172a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001724:	68a3      	ldr	r3, [r4, #8]
 8001726:	440b      	add	r3, r1
 8001728:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800172a:	2d02      	cmp	r5, #2
 800172c:	d008      	beq.n	8001740 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800172e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001730:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001732:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001734:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001736:	68a0      	ldr	r0, [r4, #8]
 8001738:	f001 fdb4 	bl	80032a4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800173c:	60a5      	str	r5, [r4, #8]
 800173e:	e7d0      	b.n	80016e2 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001740:	2e01      	cmp	r6, #1
 8001742:	bf38      	it	cc
 8001744:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8001746:	2000      	movs	r0, #0
 8001748:	e7cc      	b.n	80016e4 <prvCopyDataToQueue+0x10>
 800174a:	bf00      	nop

0800174c <xQueueGenericCreateStatic>:
	{
 800174c:	b530      	push	{r4, r5, lr}
 800174e:	b083      	sub	sp, #12
 8001750:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001754:	b940      	cbnz	r0, 8001768 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001756:	f04f 0340 	mov.w	r3, #64	; 0x40
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	e7fe      	b.n	8001766 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8001768:	461d      	mov	r5, r3
 800176a:	b17b      	cbz	r3, 800178c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800176c:	b302      	cbz	r2, 80017b0 <xQueueGenericCreateStatic+0x64>
 800176e:	b1b1      	cbz	r1, 800179e <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001770:	2350      	movs	r3, #80	; 0x50
 8001772:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	2b50      	cmp	r3, #80	; 0x50
 8001778:	d027      	beq.n	80017ca <xQueueGenericCreateStatic+0x7e>
 800177a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	e7fe      	b.n	800178a <xQueueGenericCreateStatic+0x3e>
 800178c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800179c:	e7fe      	b.n	800179c <xQueueGenericCreateStatic+0x50>
 800179e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80017ae:	e7fe      	b.n	80017ae <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d135      	bne.n	8001820 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017b4:	2250      	movs	r2, #80	; 0x50
 80017b6:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017b8:	9a01      	ldr	r2, [sp, #4]
 80017ba:	2a50      	cmp	r2, #80	; 0x50
 80017bc:	d1dd      	bne.n	800177a <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017be:	2201      	movs	r2, #1
 80017c0:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80017c4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017c6:	462a      	mov	r2, r5
 80017c8:	e004      	b.n	80017d4 <xQueueGenericCreateStatic+0x88>
 80017ca:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80017ce:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017d0:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80017d4:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 80017d8:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 80017da:	f002 f85b 	bl	8003894 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017de:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 80017e2:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017e4:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017e6:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ea:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ec:	4401      	add	r1, r0
 80017ee:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017f0:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017f2:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017f4:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80017f6:	21ff      	movs	r1, #255	; 0xff
 80017f8:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017fc:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80017fe:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001802:	f105 0010 	add.w	r0, r5, #16
 8001806:	f7ff ff19 	bl	800163c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800180a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800180e:	f7ff ff15 	bl	800163c <vListInitialise>
	taskEXIT_CRITICAL();
 8001812:	f002 f861 	bl	80038d8 <vPortExitCritical>
	}
 8001816:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 8001818:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 800181c:	b003      	add	sp, #12
 800181e:	bd30      	pop	{r4, r5, pc}
 8001820:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001830:	e7fe      	b.n	8001830 <xQueueGenericCreateStatic+0xe4>
 8001832:	bf00      	nop

08001834 <xQueueGenericCreate>:
	{
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001836:	b940      	cbnz	r0, 800184a <xQueueGenericCreate+0x16>
 8001838:	f04f 0340 	mov.w	r3, #64	; 0x40
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	e7fe      	b.n	8001848 <xQueueGenericCreate+0x14>
 800184a:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800184c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001850:	3050      	adds	r0, #80	; 0x50
 8001852:	460e      	mov	r6, r1
 8001854:	4617      	mov	r7, r2
 8001856:	f002 f97d 	bl	8003b54 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800185a:	4604      	mov	r4, r0
 800185c:	b340      	cbz	r0, 80018b0 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800185e:	2300      	movs	r3, #0
 8001860:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001864:	b336      	cbz	r6, 80018b4 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001866:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800186a:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800186c:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001870:	f002 f810 	bl	8003894 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001874:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001878:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800187a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800187c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001880:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001882:	440a      	add	r2, r1
 8001884:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001886:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001888:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800188a:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001892:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001894:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001898:	f104 0010 	add.w	r0, r4, #16
 800189c:	f7ff fece 	bl	800163c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80018a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018a4:	f7ff feca 	bl	800163c <vListInitialise>
	taskEXIT_CRITICAL();
 80018a8:	f002 f816 	bl	80038d8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 80018ac:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80018b0:	4620      	mov	r0, r4
 80018b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b4:	4603      	mov	r3, r0
 80018b6:	e7d8      	b.n	800186a <xQueueGenericCreate+0x36>

080018b8 <xQueueGenericSend>:
{
 80018b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018bc:	b085      	sub	sp, #20
 80018be:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80018c0:	2800      	cmp	r0, #0
 80018c2:	f000 80a4 	beq.w	8001a0e <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018c6:	4688      	mov	r8, r1
 80018c8:	461f      	mov	r7, r3
 80018ca:	4604      	mov	r4, r0
 80018cc:	2900      	cmp	r1, #0
 80018ce:	f000 8091 	beq.w	80019f4 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018d2:	2f02      	cmp	r7, #2
 80018d4:	d10b      	bne.n	80018ee <xQueueGenericSend+0x36>
 80018d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d008      	beq.n	80018ee <xQueueGenericSend+0x36>
 80018dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	e7fe      	b.n	80018ec <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018ee:	f001 fc83 	bl	80031f8 <xTaskGetSchedulerState>
 80018f2:	4605      	mov	r5, r0
 80018f4:	2800      	cmp	r0, #0
 80018f6:	f000 8093 	beq.w	8001a20 <xQueueGenericSend+0x168>
 80018fa:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018fc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8001900:	f001 ffc8 	bl	8003894 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001908:	429a      	cmp	r2, r3
 800190a:	f0c0 80ef 	bcc.w	8001aec <xQueueGenericSend+0x234>
 800190e:	2f02      	cmp	r7, #2
 8001910:	f000 80ec 	beq.w	8001aec <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001914:	9801      	ldr	r0, [sp, #4]
 8001916:	2800      	cmp	r0, #0
 8001918:	f000 8101 	beq.w	8001b1e <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 800191c:	2d00      	cmp	r5, #0
 800191e:	f000 80e1 	beq.w	8001ae4 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8001922:	f001 ffd9 	bl	80038d8 <vPortExitCritical>
		vTaskSuspendAll();
 8001926:	f001 fae5 	bl	8002ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800192a:	f001 ffb3 	bl	8003894 <vPortEnterCritical>
 800192e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	bf04      	itt	eq
 8001936:	2300      	moveq	r3, #0
 8001938:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800193c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	bf04      	itt	eq
 8001944:	2300      	moveq	r3, #0
 8001946:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800194a:	f001 ffc5 	bl	80038d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800194e:	a901      	add	r1, sp, #4
 8001950:	a802      	add	r0, sp, #8
 8001952:	f001 fbf7 	bl	8003144 <xTaskCheckForTimeOut>
 8001956:	2800      	cmp	r0, #0
 8001958:	f040 80e6 	bne.w	8001b28 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800195c:	f001 ff9a 	bl	8003894 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001960:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001964:	429a      	cmp	r2, r3
 8001966:	d068      	beq.n	8001a3a <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001968:	f001 ffb6 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800196c:	f001 ff92 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001970:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001974:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001976:	2d00      	cmp	r5, #0
 8001978:	dc04      	bgt.n	8001984 <xQueueGenericSend+0xcc>
 800197a:	e011      	b.n	80019a0 <xQueueGenericSend+0xe8>
			--cTxLock;
 800197c:	1e6a      	subs	r2, r5, #1
 800197e:	b2d3      	uxtb	r3, r2
 8001980:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001982:	b16b      	cbz	r3, 80019a0 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001984:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001986:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001988:	b153      	cbz	r3, 80019a0 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800198a:	f001 fb87 	bl	800309c <xTaskRemoveFromEventList>
 800198e:	2800      	cmp	r0, #0
 8001990:	d0f4      	beq.n	800197c <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8001992:	f001 fc2b 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 8001996:	1e6a      	subs	r2, r5, #1
 8001998:	b2d3      	uxtb	r3, r2
 800199a:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f1      	bne.n	8001984 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 80019a0:	23ff      	movs	r3, #255	; 0xff
 80019a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80019a6:	f001 ff97 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80019aa:	f001 ff73 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80019ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80019b2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019b4:	2d00      	cmp	r5, #0
 80019b6:	dd14      	ble.n	80019e2 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019b8:	f104 0910 	add.w	r9, r4, #16
 80019bc:	e003      	b.n	80019c6 <xQueueGenericSend+0x10e>
				--cRxLock;
 80019be:	1e6a      	subs	r2, r5, #1
 80019c0:	b2d3      	uxtb	r3, r2
 80019c2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019c4:	b16b      	cbz	r3, 80019e2 <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019c6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019c8:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019ca:	b153      	cbz	r3, 80019e2 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019cc:	f001 fb66 	bl	800309c <xTaskRemoveFromEventList>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d0f4      	beq.n	80019be <xQueueGenericSend+0x106>
					vTaskMissedYield();
 80019d4:	f001 fc0a 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 80019d8:	1e6a      	subs	r2, r5, #1
 80019da:	b2d3      	uxtb	r3, r2
 80019dc:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f1      	bne.n	80019c6 <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 80019e2:	23ff      	movs	r3, #255	; 0xff
 80019e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80019e8:	f001 ff76 	bl	80038d8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80019ec:	f001 fa8a 	bl	8002f04 <xTaskResumeAll>
 80019f0:	2501      	movs	r5, #1
 80019f2:	e785      	b.n	8001900 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f43f af6b 	beq.w	80018d2 <xQueueGenericSend+0x1a>
 80019fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	e7fe      	b.n	8001a0c <xQueueGenericSend+0x154>
 8001a0e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001a1e:	e7fe      	b.n	8001a1e <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f43f af6a 	beq.w	80018fc <xQueueGenericSend+0x44>
 8001a28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a2c:	f383 8811 	msr	BASEPRI, r3
 8001a30:	f3bf 8f6f 	isb	sy
 8001a34:	f3bf 8f4f 	dsb	sy
 8001a38:	e7fe      	b.n	8001a38 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a3a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8001a3e:	f001 ff4b 	bl	80038d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a42:	9901      	ldr	r1, [sp, #4]
 8001a44:	4648      	mov	r0, r9
 8001a46:	f001 fa91 	bl	8002f6c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001a4a:	f001 ff23 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001a4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001a52:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a54:	2d00      	cmp	r5, #0
 8001a56:	dc04      	bgt.n	8001a62 <xQueueGenericSend+0x1aa>
 8001a58:	e011      	b.n	8001a7e <xQueueGenericSend+0x1c6>
			--cTxLock;
 8001a5a:	1e6b      	subs	r3, r5, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a60:	b16a      	cbz	r2, 8001a7e <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a64:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a66:	b153      	cbz	r3, 8001a7e <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a68:	f001 fb18 	bl	800309c <xTaskRemoveFromEventList>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d0f4      	beq.n	8001a5a <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8001a70:	f001 fbbc 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 8001a74:	1e6b      	subs	r3, r5, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d1f1      	bne.n	8001a62 <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8001a7e:	23ff      	movs	r3, #255	; 0xff
 8001a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001a84:	f001 ff28 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001a88:	f001 ff04 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001a8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001a90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	dc04      	bgt.n	8001aa0 <xQueueGenericSend+0x1e8>
 8001a96:	e011      	b.n	8001abc <xQueueGenericSend+0x204>
				--cRxLock;
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a9e:	b16a      	cbz	r2, 8001abc <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aa2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa4:	b153      	cbz	r3, 8001abc <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aa6:	f001 faf9 	bl	800309c <xTaskRemoveFromEventList>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0f4      	beq.n	8001a98 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8001aae:	f001 fb9d 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 8001ab2:	1e6b      	subs	r3, r5, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d1f1      	bne.n	8001aa0 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8001abc:	23ff      	movs	r3, #255	; 0xff
 8001abe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001ac2:	f001 ff09 	bl	80038d8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8001ac6:	f001 fa1d 	bl	8002f04 <xTaskResumeAll>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d190      	bne.n	80019f0 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8001ace:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	e785      	b.n	80019f0 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ae4:	a802      	add	r0, sp, #8
 8001ae6:	f001 fb21 	bl	800312c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001aea:	e71a      	b.n	8001922 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001aec:	463a      	mov	r2, r7
 8001aee:	4641      	mov	r1, r8
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff fdef 	bl	80016d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d153      	bne.n	8001ba4 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8001afc:	b148      	cbz	r0, 8001b12 <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8001afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001b12:	f001 fee1 	bl	80038d8 <vPortExitCritical>
				return pdPASS;
 8001b16:	2001      	movs	r0, #1
}
 8001b18:	b005      	add	sp, #20
 8001b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b1e:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8001b20:	f001 feda 	bl	80038d8 <vPortExitCritical>
					return errQUEUE_FULL;
 8001b24:	9800      	ldr	r0, [sp, #0]
 8001b26:	e7f7      	b.n	8001b18 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8001b28:	f001 feb4 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001b2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b30:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	dd10      	ble.n	8001b58 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b36:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001b3a:	e003      	b.n	8001b44 <xQueueGenericSend+0x28c>
			--cTxLock;
 8001b3c:	1e6b      	subs	r3, r5, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b42:	b14a      	cbz	r2, 8001b58 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b46:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b48:	b133      	cbz	r3, 8001b58 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b4a:	f001 faa7 	bl	800309c <xTaskRemoveFromEventList>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d0f4      	beq.n	8001b3c <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8001b52:	f001 fb4b 	bl	80031ec <vTaskMissedYield>
 8001b56:	e7f1      	b.n	8001b3c <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8001b58:	23ff      	movs	r3, #255	; 0xff
 8001b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001b5e:	f001 febb 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001b62:	f001 fe97 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001b66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b6c:	2d00      	cmp	r5, #0
 8001b6e:	dd10      	ble.n	8001b92 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b70:	f104 0610 	add.w	r6, r4, #16
 8001b74:	e003      	b.n	8001b7e <xQueueGenericSend+0x2c6>
				--cRxLock;
 8001b76:	1e6b      	subs	r3, r5, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b7c:	b14a      	cbz	r2, 8001b92 <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b80:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b82:	b133      	cbz	r3, 8001b92 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b84:	f001 fa8a 	bl	800309c <xTaskRemoveFromEventList>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d0f4      	beq.n	8001b76 <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8001b8c:	f001 fb2e 	bl	80031ec <vTaskMissedYield>
 8001b90:	e7f1      	b.n	8001b76 <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8001b92:	23ff      	movs	r3, #255	; 0xff
 8001b94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001b98:	f001 fe9e 	bl	80038d8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001b9c:	f001 f9b2 	bl	8002f04 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e7b9      	b.n	8001b18 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ba8:	f001 fa78 	bl	800309c <xTaskRemoveFromEventList>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d0b0      	beq.n	8001b12 <xQueueGenericSend+0x25a>
 8001bb0:	e7a5      	b.n	8001afe <xQueueGenericSend+0x246>
 8001bb2:	bf00      	nop

08001bb4 <xQueueCreateMutex>:
	{
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001bb8:	2050      	movs	r0, #80	; 0x50
 8001bba:	f001 ffcb 	bl	8003b54 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	b370      	cbz	r0, 8001c20 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001bc2:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8001bc4:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001bc6:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bca:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001bcc:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001bd0:	f001 fe60 	bl	8003894 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bd4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001bd8:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bda:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bdc:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001be8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bea:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bec:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bee:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8001bf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bfa:	f7ff fd1f 	bl	800163c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c02:	f7ff fd1b 	bl	800163c <vListInitialise>
	taskEXIT_CRITICAL();
 8001c06:	f001 fe67 	bl	80038d8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001c0a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001c0e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001c10:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001c12:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001c14:	462b      	mov	r3, r5
 8001c16:	462a      	mov	r2, r5
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff fe4c 	bl	80018b8 <xQueueGenericSend>
	}
 8001c20:	4620      	mov	r0, r4
 8001c22:	bd70      	pop	{r4, r5, r6, pc}

08001c24 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d04b      	beq.n	8001cc0 <xQueueGenericSendFromISR+0x9c>
{
 8001c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c2c:	460e      	mov	r6, r1
 8001c2e:	4617      	mov	r7, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c34:	b321      	cbz	r1, 8001c80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c36:	2d02      	cmp	r5, #2
 8001c38:	d10b      	bne.n	8001c52 <xQueueGenericSendFromISR+0x2e>
 8001c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d008      	beq.n	8001c52 <xQueueGenericSendFromISR+0x2e>
 8001c40:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	e7fe      	b.n	8001c50 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c52:	f001 ff51 	bl	8003af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c56:	f3ef 8811 	mrs	r8, BASEPRI
 8001c5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d312      	bcc.n	8001c98 <xQueueGenericSendFromISR+0x74>
 8001c72:	2d02      	cmp	r5, #2
 8001c74:	d010      	beq.n	8001c98 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8001c76:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c78:	f388 8811 	msr	BASEPRI, r8
}
 8001c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0d7      	beq.n	8001c36 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8001c86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	e7fe      	b.n	8001c96 <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c98:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8001c9a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ca0:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ca2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff fd15 	bl	80016d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001caa:	1c6b      	adds	r3, r5, #1
 8001cac:	d011      	beq.n	8001cd2 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001cae:	1c6b      	adds	r3, r5, #1
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8001cb6:	2001      	movs	r0, #1
	__asm volatile
 8001cb8:	f388 8811 	msr	BASEPRI, r8
}
 8001cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8001cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001cd0:	e7fe      	b.n	8001cd0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cdc:	f001 f9de 	bl	800309c <xTaskRemoveFromEventList>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d0e8      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8001ce4:	2f00      	cmp	r7, #0
 8001ce6:	d0e6      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ce8:	2001      	movs	r0, #1
 8001cea:	6038      	str	r0, [r7, #0]
 8001cec:	e7c4      	b.n	8001c78 <xQueueGenericSendFromISR+0x54>
 8001cee:	bf00      	nop

08001cf0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8001cf0:	b370      	cbz	r0, 8001d50 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001cf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001cf8:	b143      	cbz	r3, 8001d0c <xQueueGiveFromISR+0x1c>
 8001cfa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	e7fe      	b.n	8001d0a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	460c      	mov	r4, r1
 8001d10:	b33b      	cbz	r3, 8001d62 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d12:	f001 fef1 	bl	8003af8 <vPortValidateInterruptPriority>
	__asm volatile
 8001d16:	f3ef 8511 	mrs	r5, BASEPRI
 8001d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d2a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001d2c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d923      	bls.n	8001d7a <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d32:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001d36:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8001d38:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001d3a:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d3c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8001d3e:	d020      	beq.n	8001d82 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d40:	3301      	adds	r3, #1
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8001d48:	2001      	movs	r0, #1
	__asm volatile
 8001d4a:	f385 8811 	msr	BASEPRI, r5
}
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8001d50:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001d60:	e7fe      	b.n	8001d60 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001d62:	6883      	ldr	r3, [r0, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0d4      	beq.n	8001d12 <xQueueGiveFromISR+0x22>
 8001d68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	e7fe      	b.n	8001d78 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8001d7a:	2000      	movs	r0, #0
	__asm volatile
 8001d7c:	f385 8811 	msr	BASEPRI, r5
}
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0df      	beq.n	8001d48 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d88:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001d8c:	f001 f986 	bl	800309c <xTaskRemoveFromEventList>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d0d9      	beq.n	8001d48 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8001d94:	2c00      	cmp	r4, #0
 8001d96:	d0d7      	beq.n	8001d48 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	6020      	str	r0, [r4, #0]
 8001d9c:	e7ee      	b.n	8001d7c <xQueueGiveFromISR+0x8c>
 8001d9e:	bf00      	nop

08001da0 <xQueueReceive>:
{
 8001da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001da4:	b085      	sub	sp, #20
 8001da6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 815f 	beq.w	800206c <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dae:	460f      	mov	r7, r1
 8001db0:	4604      	mov	r4, r0
 8001db2:	2900      	cmp	r1, #0
 8001db4:	f000 8094 	beq.w	8001ee0 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001db8:	f001 fa1e 	bl	80031f8 <xTaskGetSchedulerState>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f000 809c 	beq.w	8001efa <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001dc2:	f001 fd67 	bl	8003894 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dc6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d172      	bne.n	8001eb2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dcc:	9b01      	ldr	r3, [sp, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80f1 	beq.w	8001fb6 <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001dd4:	a802      	add	r0, sp, #8
 8001dd6:	f001 f9a9 	bl	800312c <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8001dda:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ddc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8001de0:	f001 fd7a 	bl	80038d8 <vPortExitCritical>
		vTaskSuspendAll();
 8001de4:	f001 f886 	bl	8002ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001de8:	f001 fd54 	bl	8003894 <vPortEnterCritical>
 8001dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001df0:	2bff      	cmp	r3, #255	; 0xff
 8001df2:	bf08      	it	eq
 8001df4:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001df8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001dfc:	2bff      	cmp	r3, #255	; 0xff
 8001dfe:	bf08      	it	eq
 8001e00:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001e04:	f001 fd68 	bl	80038d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e08:	a901      	add	r1, sp, #4
 8001e0a:	a802      	add	r0, sp, #8
 8001e0c:	f001 f99a 	bl	8003144 <xTaskCheckForTimeOut>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d17f      	bne.n	8001f14 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8001e14:	f001 fd3e 	bl	8003894 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80d1 	beq.w	8001fc2 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8001e20:	f001 fd5a 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001e24:	f001 fd36 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001e2c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	dc04      	bgt.n	8001e3c <xQueueReceive+0x9c>
 8001e32:	e011      	b.n	8001e58 <xQueueReceive+0xb8>
			--cTxLock;
 8001e34:	1e6b      	subs	r3, r5, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e3a:	b16a      	cbz	r2, 8001e58 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e40:	b153      	cbz	r3, 8001e58 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e42:	f001 f92b 	bl	800309c <xTaskRemoveFromEventList>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d0f4      	beq.n	8001e34 <xQueueReceive+0x94>
						vTaskMissedYield();
 8001e4a:	f001 f9cf 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 8001e4e:	1e6b      	subs	r3, r5, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d1f1      	bne.n	8001e3c <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8001e58:	23ff      	movs	r3, #255	; 0xff
 8001e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001e5e:	f001 fd3b 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001e62:	f001 fd17 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001e66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001e6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	dd14      	ble.n	8001e9a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e70:	f104 0910 	add.w	r9, r4, #16
 8001e74:	e003      	b.n	8001e7e <xQueueReceive+0xde>
				--cRxLock;
 8001e76:	1e6b      	subs	r3, r5, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e7c:	b16a      	cbz	r2, 8001e9a <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e80:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e82:	b153      	cbz	r3, 8001e9a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e84:	f001 f90a 	bl	800309c <xTaskRemoveFromEventList>
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	d0f4      	beq.n	8001e76 <xQueueReceive+0xd6>
					vTaskMissedYield();
 8001e8c:	f001 f9ae 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 8001e90:	1e6b      	subs	r3, r5, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d1f1      	bne.n	8001e7e <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8001e9a:	23ff      	movs	r3, #255	; 0xff
 8001e9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001ea0:	f001 fd1a 	bl	80038d8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001ea4:	f001 f82e 	bl	8002f04 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001ea8:	f001 fcf4 	bl	8003894 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d07d      	beq.n	8001fae <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eb4:	b152      	cbz	r2, 8001ecc <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eb6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001eb8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eba:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ebc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ebe:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001ec0:	bf24      	itt	cs
 8001ec2:	6821      	ldrcs	r1, [r4, #0]
 8001ec4:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	f007 fbb6 	bl	8009638 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ecc:	3d01      	subs	r5, #1
 8001ece:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ed0:	6923      	ldr	r3, [r4, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 80d3 	bne.w	800207e <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8001ed8:	f001 fcfe 	bl	80038d8 <vPortExitCritical>
				return pdPASS;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e06d      	b.n	8001fbc <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ee0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f43f af68 	beq.w	8001db8 <xQueueReceive+0x18>
	__asm volatile
 8001ee8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	e7fe      	b.n	8001ef8 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001efa:	9b01      	ldr	r3, [sp, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f43f af60 	beq.w	8001dc2 <xQueueReceive+0x22>
 8001f02:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	e7fe      	b.n	8001f12 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8001f14:	f001 fcbe 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001f18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001f1c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	dc04      	bgt.n	8001f2c <xQueueReceive+0x18c>
 8001f22:	e011      	b.n	8001f48 <xQueueReceive+0x1a8>
			--cTxLock;
 8001f24:	1e6b      	subs	r3, r5, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f2a:	b16a      	cbz	r2, 8001f48 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f2e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f30:	b153      	cbz	r3, 8001f48 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f32:	f001 f8b3 	bl	800309c <xTaskRemoveFromEventList>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d0f4      	beq.n	8001f24 <xQueueReceive+0x184>
						vTaskMissedYield();
 8001f3a:	f001 f957 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 8001f3e:	1e6b      	subs	r3, r5, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d1f1      	bne.n	8001f2c <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8001f48:	23ff      	movs	r3, #255	; 0xff
 8001f4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001f4e:	f001 fcc3 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001f52:	f001 fc9f 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001f56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001f5a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	dd14      	ble.n	8001f8a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f60:	f104 0910 	add.w	r9, r4, #16
 8001f64:	e003      	b.n	8001f6e <xQueueReceive+0x1ce>
				--cRxLock;
 8001f66:	1e6b      	subs	r3, r5, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f6c:	b16a      	cbz	r2, 8001f8a <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f6e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f70:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f72:	b153      	cbz	r3, 8001f8a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f74:	f001 f892 	bl	800309c <xTaskRemoveFromEventList>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d0f4      	beq.n	8001f66 <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8001f7c:	f001 f936 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 8001f80:	1e6b      	subs	r3, r5, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d1f1      	bne.n	8001f6e <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8001f8a:	23ff      	movs	r3, #255	; 0xff
 8001f8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001f90:	f001 fca2 	bl	80038d8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001f94:	f000 ffb6 	bl	8002f04 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001f98:	f001 fc7c 	bl	8003894 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f9e:	b153      	cbz	r3, 8001fb6 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8001fa0:	f001 fc9a 	bl	80038d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8001fa4:	f001 fc76 	bl	8003894 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fa8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	d181      	bne.n	8001eb2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f af15 	bne.w	8001de0 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8001fb6:	f001 fc8f 	bl	80038d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001fba:	2000      	movs	r0, #0
}
 8001fbc:	b005      	add	sp, #20
 8001fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8001fc2:	f001 fc89 	bl	80038d8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fc6:	9901      	ldr	r1, [sp, #4]
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 ffcf 	bl	8002f6c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001fce:	f001 fc61 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001fd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001fd6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	dc04      	bgt.n	8001fe6 <xQueueReceive+0x246>
 8001fdc:	e011      	b.n	8002002 <xQueueReceive+0x262>
			--cTxLock;
 8001fde:	1e6b      	subs	r3, r5, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fe4:	b16a      	cbz	r2, 8002002 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fe8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fea:	b153      	cbz	r3, 8002002 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fec:	f001 f856 	bl	800309c <xTaskRemoveFromEventList>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d0f4      	beq.n	8001fde <xQueueReceive+0x23e>
						vTaskMissedYield();
 8001ff4:	f001 f8fa 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 8001ff8:	1e6b      	subs	r3, r5, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d1f1      	bne.n	8001fe6 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8002002:	23ff      	movs	r3, #255	; 0xff
 8002004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002008:	f001 fc66 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800200c:	f001 fc42 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002010:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002014:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002016:	2d00      	cmp	r5, #0
 8002018:	dd14      	ble.n	8002044 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800201a:	f104 0910 	add.w	r9, r4, #16
 800201e:	e003      	b.n	8002028 <xQueueReceive+0x288>
				--cRxLock;
 8002020:	1e6b      	subs	r3, r5, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002026:	b16a      	cbz	r2, 8002044 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002028:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800202a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800202c:	b153      	cbz	r3, 8002044 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800202e:	f001 f835 	bl	800309c <xTaskRemoveFromEventList>
 8002032:	2800      	cmp	r0, #0
 8002034:	d0f4      	beq.n	8002020 <xQueueReceive+0x280>
					vTaskMissedYield();
 8002036:	f001 f8d9 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 800203a:	1e6b      	subs	r3, r5, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002040:	2a00      	cmp	r2, #0
 8002042:	d1f1      	bne.n	8002028 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002044:	23ff      	movs	r3, #255	; 0xff
 8002046:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800204a:	f001 fc45 	bl	80038d8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800204e:	f000 ff59 	bl	8002f04 <xTaskResumeAll>
 8002052:	2800      	cmp	r0, #0
 8002054:	d1a6      	bne.n	8001fa4 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8002056:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800205a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800206a:	e79b      	b.n	8001fa4 <xQueueReceive+0x204>
 800206c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800207c:	e7fe      	b.n	800207c <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800207e:	f104 0010 	add.w	r0, r4, #16
 8002082:	f001 f80b 	bl	800309c <xTaskRemoveFromEventList>
 8002086:	2800      	cmp	r0, #0
 8002088:	f43f af26 	beq.w	8001ed8 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800208c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	e71a      	b.n	8001ed8 <xQueueReceive+0x138>
 80020a2:	bf00      	nop

080020a4 <xQueueSemaphoreTake>:
{
 80020a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d05c      	beq.n	800216a <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 80020b0:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80020b2:	4604      	mov	r4, r0
 80020b4:	b147      	cbz	r7, 80020c8 <xQueueSemaphoreTake+0x24>
 80020b6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	e7fe      	b.n	80020c6 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020c8:	f001 f896 	bl	80031f8 <xTaskGetSchedulerState>
 80020cc:	4605      	mov	r5, r0
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d054      	beq.n	800217c <xQueueSemaphoreTake+0xd8>
 80020d2:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020d4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80020d8:	f001 fbdc 	bl	8003894 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80020dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8148 	bne.w	8002374 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e4:	9b01      	ldr	r3, [sp, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 813a 	beq.w	8002360 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	f000 809d 	beq.w	800222c <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 80020f2:	f001 fbf1 	bl	80038d8 <vPortExitCritical>
		vTaskSuspendAll();
 80020f6:	f000 fefd 	bl	8002ef4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020fa:	f001 fbcb 	bl	8003894 <vPortEnterCritical>
 80020fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002102:	2bff      	cmp	r3, #255	; 0xff
 8002104:	bf04      	itt	eq
 8002106:	2300      	moveq	r3, #0
 8002108:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800210c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	bf04      	itt	eq
 8002114:	2300      	moveq	r3, #0
 8002116:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800211a:	f001 fbdd 	bl	80038d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800211e:	a901      	add	r1, sp, #4
 8002120:	a802      	add	r0, sp, #8
 8002122:	f001 f80f 	bl	8003144 <xTaskCheckForTimeOut>
 8002126:	2800      	cmp	r0, #0
 8002128:	d135      	bne.n	8002196 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 800212a:	f001 fbb3 	bl	8003894 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800212e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a4 	beq.w	800227e <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 8002136:	f001 fbcf 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800213a:	f001 fbab 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800213e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002142:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002144:	2d00      	cmp	r5, #0
 8002146:	dc05      	bgt.n	8002154 <xQueueSemaphoreTake+0xb0>
 8002148:	e074      	b.n	8002234 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800214a:	1e6b      	subs	r3, r5, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002150:	2a00      	cmp	r2, #0
 8002152:	d06f      	beq.n	8002234 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002154:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002156:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002158:	2b00      	cmp	r3, #0
 800215a:	d06b      	beq.n	8002234 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800215c:	f000 ff9e 	bl	800309c <xTaskRemoveFromEventList>
 8002160:	2800      	cmp	r0, #0
 8002162:	d0f2      	beq.n	800214a <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8002164:	f001 f842 	bl	80031ec <vTaskMissedYield>
 8002168:	e7ef      	b.n	800214a <xQueueSemaphoreTake+0xa6>
 800216a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800217a:	e7fe      	b.n	800217a <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800217c:	9b01      	ldr	r3, [sp, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80d4 	beq.w	800232c <xQueueSemaphoreTake+0x288>
 8002184:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	e7fe      	b.n	8002194 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 8002196:	f001 fb7d 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800219a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800219e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	dc04      	bgt.n	80021ae <xQueueSemaphoreTake+0x10a>
 80021a4:	e011      	b.n	80021ca <xQueueSemaphoreTake+0x126>
			--cTxLock;
 80021a6:	1e6b      	subs	r3, r5, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ac:	b16a      	cbz	r2, 80021ca <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021b0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021b2:	b153      	cbz	r3, 80021ca <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021b4:	f000 ff72 	bl	800309c <xTaskRemoveFromEventList>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d0f4      	beq.n	80021a6 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 80021bc:	f001 f816 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 80021c0:	1e6b      	subs	r3, r5, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d1f1      	bne.n	80021ae <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80021d0:	f001 fb82 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80021d4:	f001 fb5e 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80021d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80021dc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021de:	2d00      	cmp	r5, #0
 80021e0:	dd14      	ble.n	800220c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021e2:	f104 0810 	add.w	r8, r4, #16
 80021e6:	e003      	b.n	80021f0 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 80021e8:	1e6b      	subs	r3, r5, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ee:	b16a      	cbz	r2, 800220c <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021f0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021f2:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021f4:	b153      	cbz	r3, 800220c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021f6:	f000 ff51 	bl	800309c <xTaskRemoveFromEventList>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d0f4      	beq.n	80021e8 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 80021fe:	f000 fff5 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 8002202:	1e6b      	subs	r3, r5, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002208:	2a00      	cmp	r2, #0
 800220a:	d1f1      	bne.n	80021f0 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 800220c:	23ff      	movs	r3, #255	; 0xff
 800220e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002212:	f001 fb61 	bl	80038d8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002216:	f000 fe75 	bl	8002f04 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800221a:	f001 fb3b 	bl	8003894 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800221e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002220:	2b00      	cmp	r3, #0
 8002222:	d07c      	beq.n	800231e <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 8002224:	f001 fb58 	bl	80038d8 <vPortExitCritical>
	return xReturn;
 8002228:	2501      	movs	r5, #1
 800222a:	e755      	b.n	80020d8 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800222c:	a802      	add	r0, sp, #8
 800222e:	f000 ff7d 	bl	800312c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002232:	e75e      	b.n	80020f2 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002234:	23ff      	movs	r3, #255	; 0xff
 8002236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800223a:	f001 fb4d 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800223e:	f001 fb29 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002242:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002246:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002248:	2d00      	cmp	r5, #0
 800224a:	dd10      	ble.n	800226e <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800224c:	f104 0810 	add.w	r8, r4, #16
 8002250:	e003      	b.n	800225a <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002252:	1e6b      	subs	r3, r5, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002258:	b14a      	cbz	r2, 800226e <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800225a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225c:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800225e:	b133      	cbz	r3, 800226e <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002260:	f000 ff1c 	bl	800309c <xTaskRemoveFromEventList>
 8002264:	2800      	cmp	r0, #0
 8002266:	d0f4      	beq.n	8002252 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 8002268:	f000 ffc0 	bl	80031ec <vTaskMissedYield>
 800226c:	e7f1      	b.n	8002252 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 800226e:	23ff      	movs	r3, #255	; 0xff
 8002270:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002274:	f001 fb30 	bl	80038d8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002278:	f000 fe44 	bl	8002f04 <xTaskResumeAll>
 800227c:	e7d4      	b.n	8002228 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 800227e:	f001 fb2b 	bl	80038d8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d062      	beq.n	800234e <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002288:	9901      	ldr	r1, [sp, #4]
 800228a:	4630      	mov	r0, r6
 800228c:	f000 fe6e 	bl	8002f6c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002290:	f001 fb00 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002294:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002298:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800229a:	2d00      	cmp	r5, #0
 800229c:	dc04      	bgt.n	80022a8 <xQueueSemaphoreTake+0x204>
 800229e:	e00d      	b.n	80022bc <xQueueSemaphoreTake+0x218>
			--cTxLock;
 80022a0:	1e6b      	subs	r3, r5, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022a6:	b14a      	cbz	r2, 80022bc <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022aa:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ac:	b133      	cbz	r3, 80022bc <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ae:	f000 fef5 	bl	800309c <xTaskRemoveFromEventList>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d0f4      	beq.n	80022a0 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 80022b6:	f000 ff99 	bl	80031ec <vTaskMissedYield>
 80022ba:	e7f1      	b.n	80022a0 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 80022bc:	23ff      	movs	r3, #255	; 0xff
 80022be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80022c2:	f001 fb09 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80022c6:	f001 fae5 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80022ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022ce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022d0:	2d00      	cmp	r5, #0
 80022d2:	dd10      	ble.n	80022f6 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d4:	f104 0810 	add.w	r8, r4, #16
 80022d8:	e003      	b.n	80022e2 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 80022da:	1e6b      	subs	r3, r5, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022e0:	b14a      	cbz	r2, 80022f6 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e4:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e6:	b133      	cbz	r3, 80022f6 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e8:	f000 fed8 	bl	800309c <xTaskRemoveFromEventList>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d0f4      	beq.n	80022da <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 80022f0:	f000 ff7c 	bl	80031ec <vTaskMissedYield>
 80022f4:	e7f1      	b.n	80022da <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 80022f6:	23ff      	movs	r3, #255	; 0xff
 80022f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80022fc:	f001 faec 	bl	80038d8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002300:	f000 fe00 	bl	8002f04 <xTaskResumeAll>
 8002304:	2800      	cmp	r0, #0
 8002306:	d18f      	bne.n	8002228 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 8002308:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800230c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002310:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	e784      	b.n	8002228 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 800231e:	f001 fadb 	bl	80038d8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8002322:	b92f      	cbnz	r7, 8002330 <xQueueSemaphoreTake+0x28c>
}
 8002324:	4638      	mov	r0, r7
 8002326:	b004      	add	sp, #16
 8002328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800232c:	4607      	mov	r7, r0
 800232e:	e6d1      	b.n	80020d4 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002330:	f001 fab0 	bl	8003894 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002334:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002336:	b119      	cbz	r1, 8002340 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002338:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002340:	68a0      	ldr	r0, [r4, #8]
 8002342:	f000 fff5 	bl	8003330 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002346:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 8002348:	f001 fac6 	bl	80038d8 <vPortExitCritical>
 800234c:	e7ea      	b.n	8002324 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 800234e:	f001 faa1 	bl	8003894 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002352:	68a0      	ldr	r0, [r4, #8]
 8002354:	f000 ff60 	bl	8003218 <xTaskPriorityInherit>
 8002358:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800235a:	f001 fabd 	bl	80038d8 <vPortExitCritical>
 800235e:	e793      	b.n	8002288 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002360:	b197      	cbz	r7, 8002388 <xQueueSemaphoreTake+0x2e4>
 8002362:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	e7fe      	b.n	8002372 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002374:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002376:	3b01      	subs	r3, #1
 8002378:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800237a:	b1ca      	cbz	r2, 80023b0 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	b933      	cbnz	r3, 800238e <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 8002380:	f001 faaa 	bl	80038d8 <vPortExitCritical>
				return pdPASS;
 8002384:	2701      	movs	r7, #1
 8002386:	e7cd      	b.n	8002324 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 8002388:	f001 faa6 	bl	80038d8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800238c:	e7ca      	b.n	8002324 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238e:	f104 0010 	add.w	r0, r4, #16
 8002392:	f000 fe83 	bl	800309c <xTaskRemoveFromEventList>
 8002396:	2800      	cmp	r0, #0
 8002398:	d0f2      	beq.n	8002380 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 800239a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	e7e7      	b.n	8002380 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80023b0:	f001 f812 	bl	80033d8 <pvTaskIncrementMutexHeldCount>
 80023b4:	60a0      	str	r0, [r4, #8]
 80023b6:	e7e1      	b.n	800237c <xQueueSemaphoreTake+0x2d8>

080023b8 <xQueueReceiveFromISR>:
{
 80023b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80023bc:	b310      	cbz	r0, 8002404 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023be:	460e      	mov	r6, r1
 80023c0:	4617      	mov	r7, r2
 80023c2:	4604      	mov	r4, r0
 80023c4:	b191      	cbz	r1, 80023ec <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023c6:	f001 fb97 	bl	8003af8 <vPortValidateInterruptPriority>
	__asm volatile
 80023ca:	f3ef 8911 	mrs	r9, BASEPRI
 80023ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e0:	b9cd      	cbnz	r5, 8002416 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80023e2:	4628      	mov	r0, r5
	__asm volatile
 80023e4:	f389 8811 	msr	BASEPRI, r9
}
 80023e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0e9      	beq.n	80023c6 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80023f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	e7fe      	b.n	8002402 <xQueueReceiveFromISR+0x4a>
 8002404:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002414:	e7fe      	b.n	8002414 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002416:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800241a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800241c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002420:	b152      	cbz	r2, 8002438 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002422:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002424:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002426:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002428:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800242a:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800242c:	bf24      	itt	cs
 800242e:	6821      	ldrcs	r1, [r4, #0]
 8002430:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002432:	4630      	mov	r0, r6
 8002434:	f007 f900 	bl	8009638 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002438:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800243a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800243e:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002440:	d009      	beq.n	8002456 <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002442:	f108 0301 	add.w	r3, r8, #1
 8002446:	b25b      	sxtb	r3, r3
 8002448:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800244c:	2001      	movs	r0, #1
	__asm volatile
 800244e:	f389 8811 	msr	BASEPRI, r9
}
 8002452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002456:	6923      	ldr	r3, [r4, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f7      	beq.n	800244c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245c:	f104 0010 	add.w	r0, r4, #16
 8002460:	f000 fe1c 	bl	800309c <xTaskRemoveFromEventList>
 8002464:	2800      	cmp	r0, #0
 8002466:	d0f1      	beq.n	800244c <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 8002468:	2f00      	cmp	r7, #0
 800246a:	d0ef      	beq.n	800244c <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800246c:	2001      	movs	r0, #1
 800246e:	6038      	str	r0, [r7, #0]
 8002470:	e7b8      	b.n	80023e4 <xQueueReceiveFromISR+0x2c>
 8002472:	bf00      	nop

08002474 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8002474:	b158      	cbz	r0, 800248e <uxQueueMessagesWaiting+0x1a>
{
 8002476:	b510      	push	{r4, lr}
 8002478:	4604      	mov	r4, r0
 800247a:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 800247c:	f001 fa0a 	bl	8003894 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002480:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002482:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002484:	f001 fa28 	bl	80038d8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002488:	9801      	ldr	r0, [sp, #4]
 800248a:	b002      	add	sp, #8
 800248c:	bd10      	pop	{r4, pc}
	__asm volatile
 800248e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 800249e:	e7fe      	b.n	800249e <uxQueueMessagesWaiting+0x2a>

080024a0 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <vQueueAddToRegistry+0x4c>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	b17a      	cbz	r2, 80024c6 <vQueueAddToRegistry+0x26>
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	b162      	cbz	r2, 80024c4 <vQueueAddToRegistry+0x24>
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	b192      	cbz	r2, 80024d4 <vQueueAddToRegistry+0x34>
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	b192      	cbz	r2, 80024d8 <vQueueAddToRegistry+0x38>
 80024b2:	6a1a      	ldr	r2, [r3, #32]
 80024b4:	b192      	cbz	r2, 80024dc <vQueueAddToRegistry+0x3c>
 80024b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024b8:	b192      	cbz	r2, 80024e0 <vQueueAddToRegistry+0x40>
 80024ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024bc:	b192      	cbz	r2, 80024e4 <vQueueAddToRegistry+0x44>
 80024be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024c0:	b192      	cbz	r2, 80024e8 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024c2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024c4:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024c6:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024ce:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 80024d2:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024d4:	2202      	movs	r2, #2
 80024d6:	e7f6      	b.n	80024c6 <vQueueAddToRegistry+0x26>
 80024d8:	2203      	movs	r2, #3
 80024da:	e7f4      	b.n	80024c6 <vQueueAddToRegistry+0x26>
 80024dc:	2204      	movs	r2, #4
 80024de:	e7f2      	b.n	80024c6 <vQueueAddToRegistry+0x26>
 80024e0:	2205      	movs	r2, #5
 80024e2:	e7f0      	b.n	80024c6 <vQueueAddToRegistry+0x26>
 80024e4:	2206      	movs	r2, #6
 80024e6:	e7ee      	b.n	80024c6 <vQueueAddToRegistry+0x26>
 80024e8:	2207      	movs	r2, #7
 80024ea:	e7ec      	b.n	80024c6 <vQueueAddToRegistry+0x26>
 80024ec:	20000b30 	.word	0x20000b30

080024f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	4605      	mov	r5, r0
 80024f4:	460e      	mov	r6, r1
 80024f6:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024f8:	f001 f9cc 	bl	8003894 <vPortEnterCritical>
 80024fc:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002500:	2bff      	cmp	r3, #255	; 0xff
 8002502:	bf04      	itt	eq
 8002504:	2300      	moveq	r3, #0
 8002506:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800250a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800250e:	2bff      	cmp	r3, #255	; 0xff
 8002510:	bf04      	itt	eq
 8002512:	2300      	moveq	r3, #0
 8002514:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8002518:	f001 f9de 	bl	80038d8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800251c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800251e:	2b00      	cmp	r3, #0
 8002520:	d043      	beq.n	80025aa <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8002522:	f001 f9b7 	bl	8003894 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002526:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800252a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800252c:	2c00      	cmp	r4, #0
 800252e:	dd14      	ble.n	800255a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002530:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002534:	e003      	b.n	800253e <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8002536:	1e63      	subs	r3, r4, #1
 8002538:	b2da      	uxtb	r2, r3
 800253a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800253c:	b16a      	cbz	r2, 800255a <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800253e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002540:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002542:	b153      	cbz	r3, 800255a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002544:	f000 fdaa 	bl	800309c <xTaskRemoveFromEventList>
 8002548:	2800      	cmp	r0, #0
 800254a:	d0f4      	beq.n	8002536 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 800254c:	f000 fe4e 	bl	80031ec <vTaskMissedYield>
			--cTxLock;
 8002550:	1e63      	subs	r3, r4, #1
 8002552:	b2da      	uxtb	r2, r3
 8002554:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002556:	2a00      	cmp	r2, #0
 8002558:	d1f1      	bne.n	800253e <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800255a:	23ff      	movs	r3, #255	; 0xff
 800255c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002560:	f001 f9ba 	bl	80038d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002564:	f001 f996 	bl	8003894 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002568:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800256c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800256e:	2c00      	cmp	r4, #0
 8002570:	dd14      	ble.n	800259c <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002572:	f105 0610 	add.w	r6, r5, #16
 8002576:	e003      	b.n	8002580 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8002578:	1e63      	subs	r3, r4, #1
 800257a:	b2da      	uxtb	r2, r3
 800257c:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800257e:	b16a      	cbz	r2, 800259c <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002580:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002582:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002584:	b153      	cbz	r3, 800259c <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002586:	f000 fd89 	bl	800309c <xTaskRemoveFromEventList>
 800258a:	2800      	cmp	r0, #0
 800258c:	d0f4      	beq.n	8002578 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 800258e:	f000 fe2d 	bl	80031ec <vTaskMissedYield>
				--cRxLock;
 8002592:	1e63      	subs	r3, r4, #1
 8002594:	b2da      	uxtb	r2, r3
 8002596:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002598:	2a00      	cmp	r2, #0
 800259a:	d1f1      	bne.n	8002580 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 800259c:	23ff      	movs	r3, #255	; 0xff
 800259e:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80025a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80025a6:	f001 b997 	b.w	80038d8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80025aa:	4622      	mov	r2, r4
 80025ac:	4631      	mov	r1, r6
 80025ae:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80025b2:	f000 fd23 	bl	8002ffc <vTaskPlaceOnEventListRestricted>
 80025b6:	e7b4      	b.n	8002522 <vQueueWaitForMessageRestricted+0x32>

080025b8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025bc:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025be:	f001 f969 	bl	8003894 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025c2:	4a34      	ldr	r2, [pc, #208]	; (8002694 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 80025c4:	4e34      	ldr	r6, [pc, #208]	; (8002698 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 80025c6:	6813      	ldr	r3, [r2, #0]
 80025c8:	3301      	adds	r3, #1
 80025ca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025cc:	6833      	ldr	r3, [r6, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d032      	beq.n	8002638 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025d2:	4c32      	ldr	r4, [pc, #200]	; (800269c <prvAddNewTaskToReadyList+0xe4>)
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	b33b      	cbz	r3, 8002628 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80025da:	4f31      	ldr	r7, [pc, #196]	; (80026a0 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80025de:	4932      	ldr	r1, [pc, #200]	; (80026a8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80025e0:	6813      	ldr	r3, [r2, #0]
 80025e2:	3301      	adds	r3, #1
 80025e4:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025e6:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 80025e8:	680b      	ldr	r3, [r1, #0]
 80025ea:	4283      	cmp	r3, r0
 80025ec:	bf38      	it	cc
 80025ee:	6008      	strcc	r0, [r1, #0]
 80025f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025f4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80025f8:	1d29      	adds	r1, r5, #4
 80025fa:	f7ff f82f 	bl	800165c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025fe:	f001 f96b 	bl	80038d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002602:	6823      	ldr	r3, [r4, #0]
 8002604:	b173      	cbz	r3, 8002624 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002606:	6832      	ldr	r2, [r6, #0]
 8002608:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800260a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d209      	bcs.n	8002624 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002610:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002618:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002628:	6833      	ldr	r3, [r6, #0]
 800262a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4f1c      	ldr	r7, [pc, #112]	; (80026a0 <prvAddNewTaskToReadyList+0xe8>)
 8002630:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002632:	bf98      	it	ls
 8002634:	6035      	strls	r5, [r6, #0]
 8002636:	e7d1      	b.n	80025dc <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8002638:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800263a:	6813      	ldr	r3, [r2, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d003      	beq.n	8002648 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002640:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002642:	4f17      	ldr	r7, [pc, #92]	; (80026a0 <prvAddNewTaskToReadyList+0xe8>)
 8002644:	4c15      	ldr	r4, [pc, #84]	; (800269c <prvAddNewTaskToReadyList+0xe4>)
 8002646:	e7c9      	b.n	80025dc <prvAddNewTaskToReadyList+0x24>
 8002648:	4f15      	ldr	r7, [pc, #84]	; (80026a0 <prvAddNewTaskToReadyList+0xe8>)
 800264a:	463c      	mov	r4, r7
 800264c:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002650:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002652:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002654:	f7fe fff2 	bl	800163c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002658:	45a0      	cmp	r8, r4
 800265a:	d1f9      	bne.n	8002650 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 800265c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80026c0 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8002660:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80026c4 <prvAddNewTaskToReadyList+0x10c>
 8002664:	4c0d      	ldr	r4, [pc, #52]	; (800269c <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8002666:	4648      	mov	r0, r9
 8002668:	f7fe ffe8 	bl	800163c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800266c:	4640      	mov	r0, r8
 800266e:	f7fe ffe5 	bl	800163c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002672:	480e      	ldr	r0, [pc, #56]	; (80026ac <prvAddNewTaskToReadyList+0xf4>)
 8002674:	f7fe ffe2 	bl	800163c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <prvAddNewTaskToReadyList+0xf8>)
 800267a:	f7fe ffdf 	bl	800163c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800267e:	480d      	ldr	r0, [pc, #52]	; (80026b4 <prvAddNewTaskToReadyList+0xfc>)
 8002680:	f7fe ffdc 	bl	800163c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8002686:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8002688:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <prvAddNewTaskToReadyList+0x104>)
 800268e:	f8c3 8000 	str.w	r8, [r3]
}
 8002692:	e7a3      	b.n	80025dc <prvAddNewTaskToReadyList+0x24>
 8002694:	20000fdc 	.word	0x20000fdc
 8002698:	20000b70 	.word	0x20000b70
 800269c:	20001038 	.word	0x20001038
 80026a0:	20000b7c 	.word	0x20000b7c
 80026a4:	20000fe8 	.word	0x20000fe8
 80026a8:	20000fec 	.word	0x20000fec
 80026ac:	20001024 	.word	0x20001024
 80026b0:	20001050 	.word	0x20001050
 80026b4:	2000103c 	.word	0x2000103c
 80026b8:	20000b74 	.word	0x20000b74
 80026bc:	20000b78 	.word	0x20000b78
 80026c0:	20000ff0 	.word	0x20000ff0
 80026c4:	20001004 	.word	0x20001004

080026c8 <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 80026c8:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <vTaskSwitchContext.part.0+0x90>)
		taskCHECK_FOR_STACK_OVERFLOW();
 80026cc:	4c23      	ldr	r4, [pc, #140]	; (800275c <vTaskSwitchContext.part.0+0x94>)
		xYieldPending = pdFALSE;
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80026dc:	d103      	bne.n	80026e6 <vTaskSwitchContext.part.0+0x1e>
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80026e4:	d02f      	beq.n	8002746 <vTaskSwitchContext.part.0+0x7e>
 80026e6:	6820      	ldr	r0, [r4, #0]
 80026e8:	6821      	ldr	r1, [r4, #0]
 80026ea:	3134      	adds	r1, #52	; 0x34
 80026ec:	f006 fa70 	bl	8008bd0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026f0:	4d1b      	ldr	r5, [pc, #108]	; (8002760 <vTaskSwitchContext.part.0+0x98>)
 80026f2:	491c      	ldr	r1, [pc, #112]	; (8002764 <vTaskSwitchContext.part.0+0x9c>)
 80026f4:	682b      	ldr	r3, [r5, #0]
 80026f6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80026fa:	0092      	lsls	r2, r2, #2
 80026fc:	0098      	lsls	r0, r3, #2
 80026fe:	588a      	ldr	r2, [r1, r2]
 8002700:	b942      	cbnz	r2, 8002714 <vTaskSwitchContext.part.0+0x4c>
 8002702:	b1bb      	cbz	r3, 8002734 <vTaskSwitchContext.part.0+0x6c>
 8002704:	3b01      	subs	r3, #1
 8002706:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800270a:	0098      	lsls	r0, r3, #2
 800270c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002710:	2a00      	cmp	r2, #0
 8002712:	d0f6      	beq.n	8002702 <vTaskSwitchContext.part.0+0x3a>
 8002714:	18c2      	adds	r2, r0, r3
 8002716:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800271a:	4602      	mov	r2, r0
 800271c:	6841      	ldr	r1, [r0, #4]
 800271e:	6849      	ldr	r1, [r1, #4]
 8002720:	6041      	str	r1, [r0, #4]
 8002722:	3208      	adds	r2, #8
 8002724:	4291      	cmp	r1, r2
 8002726:	bf04      	itt	eq
 8002728:	6849      	ldreq	r1, [r1, #4]
 800272a:	6041      	streq	r1, [r0, #4]
 800272c:	68ca      	ldr	r2, [r1, #12]
 800272e:	6022      	str	r2, [r4, #0]
 8002730:	602b      	str	r3, [r5, #0]
}
 8002732:	bd38      	pop	{r3, r4, r5, pc}
 8002734:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002744:	e7fe      	b.n	8002744 <vTaskSwitchContext.part.0+0x7c>
		taskCHECK_FOR_STACK_OVERFLOW();
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800274c:	d1cb      	bne.n	80026e6 <vTaskSwitchContext.part.0+0x1e>
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002754:	d1c7      	bne.n	80026e6 <vTaskSwitchContext.part.0+0x1e>
 8002756:	e7cb      	b.n	80026f0 <vTaskSwitchContext.part.0+0x28>
 8002758:	20001068 	.word	0x20001068
 800275c:	20000b70 	.word	0x20000b70
 8002760:	20000fec 	.word	0x20000fec
 8002764:	20000b7c 	.word	0x20000b7c

08002768 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800276c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800276e:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002772:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8002776:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002778:	4606      	mov	r6, r0
 800277a:	460c      	mov	r4, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800277c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800277e:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002780:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002782:	f006 ff81 	bl	8009688 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002786:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002788:	f1a9 0904 	sub.w	r9, r9, #4
 800278c:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800278e:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8002792:	2c00      	cmp	r4, #0
 8002794:	d03a      	beq.n	800280c <prvInitialiseNewTask.constprop.0+0xa4>
 8002796:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800279a:	f104 011f 	add.w	r1, r4, #31
 800279e:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 80027a2:	e001      	b.n	80027a8 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a4:	458c      	cmp	ip, r1
 80027a6:	d005      	beq.n	80027b4 <prvInitialiseNewTask.constprop.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027a8:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80027ac:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80027b0:	2c00      	cmp	r4, #0
 80027b2:	d1f7      	bne.n	80027a4 <prvInitialiseNewTask.constprop.0+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027b4:	2300      	movs	r3, #0
 80027b6:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027ba:	9c08      	ldr	r4, [sp, #32]
 80027bc:	2c37      	cmp	r4, #55	; 0x37
 80027be:	bf28      	it	cs
 80027c0:	2437      	movcs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80027c2:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80027c6:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80027c8:	65ec      	str	r4, [r5, #92]	; 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027ca:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 80027cc:	f8c5 a060 	str.w	sl, [r5, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027d0:	f7fe ff40 	bl	8001654 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d4:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027d8:	f105 0018 	add.w	r0, r5, #24
 80027dc:	f7fe ff3a 	bl	8001654 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80027e0:	f8c5 a064 	str.w	sl, [r5, #100]	; 0x64
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027e4:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027e6:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027e8:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027ea:	f885 a068 	strb.w	sl, [r5, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 80027ee:	f885 a06a 	strb.w	sl, [r5, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027f2:	463a      	mov	r2, r7
 80027f4:	4631      	mov	r1, r6
 80027f6:	4648      	mov	r0, r9
 80027f8:	f001 f826 	bl	8003848 <pxPortInitialiseStack>
 80027fc:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 80027fe:	f1b8 0f00 	cmp.w	r8, #0
 8002802:	d001      	beq.n	8002808 <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002804:	f8c8 5000 	str.w	r5, [r8]
}
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800280c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8002810:	e7d3      	b.n	80027ba <prvInitialiseNewTask.constprop.0+0x52>
 8002812:	bf00      	nop

08002814 <prvIdleTask>:
{
 8002814:	b580      	push	{r7, lr}
 8002816:	4c22      	ldr	r4, [pc, #136]	; (80028a0 <prvIdleTask+0x8c>)
 8002818:	4e22      	ldr	r6, [pc, #136]	; (80028a4 <prvIdleTask+0x90>)
 800281a:	4d23      	ldr	r5, [pc, #140]	; (80028a8 <prvIdleTask+0x94>)
 800281c:	4f23      	ldr	r7, [pc, #140]	; (80028ac <prvIdleTask+0x98>)
				taskYIELD();
 800281e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8002822:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	b353      	cbz	r3, 8002880 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 800282a:	f001 f833 	bl	8003894 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282e:	68f3      	ldr	r3, [r6, #12]
 8002830:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002834:	f10a 0004 	add.w	r0, sl, #4
 8002838:	f7fe ff38 	bl	80016ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	3b01      	subs	r3, #1
 8002840:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	3b01      	subs	r3, #1
 8002846:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8002848:	f001 f846 	bl	80038d8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800284c:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
 8002850:	b163      	cbz	r3, 800286c <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002852:	2b01      	cmp	r3, #1
 8002854:	d020      	beq.n	8002898 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002856:	2b02      	cmp	r3, #2
 8002858:	d0e5      	beq.n	8002826 <prvIdleTask+0x12>
 800285a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800285e:	f383 8811 	msr	BASEPRI, r3
 8002862:	f3bf 8f6f 	isb	sy
 8002866:	f3bf 8f4f 	dsb	sy
 800286a:	e7fe      	b.n	800286a <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 800286c:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8002870:	f001 fa2a 	bl	8003cc8 <vPortFree>
				vPortFree( pxTCB );
 8002874:	4650      	mov	r0, sl
 8002876:	f001 fa27 	bl	8003cc8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1d4      	bne.n	800282a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d905      	bls.n	8002892 <prvIdleTask+0x7e>
				taskYIELD();
 8002886:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8002892:	f006 f99b 	bl	8008bcc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002896:	e7c6      	b.n	8002826 <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8002898:	4650      	mov	r0, sl
 800289a:	f001 fa15 	bl	8003cc8 <vPortFree>
 800289e:	e7c2      	b.n	8002826 <prvIdleTask+0x12>
 80028a0:	20000fe0 	.word	0x20000fe0
 80028a4:	20001050 	.word	0x20001050
 80028a8:	20000fdc 	.word	0x20000fdc
 80028ac:	20000b7c 	.word	0x20000b7c

080028b0 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 80028b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028b4:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <xTaskIncrementTick.part.0+0x124>)
 80028b6:	681e      	ldr	r6, [r3, #0]
 80028b8:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 80028ba:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 80028bc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028be:	2e00      	cmp	r6, #0
 80028c0:	d040      	beq.n	8002944 <xTaskIncrementTick.part.0+0x94>
 80028c2:	f8df b124 	ldr.w	fp, [pc, #292]	; 80029e8 <xTaskIncrementTick.part.0+0x138>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028c6:	f8db 3000 	ldr.w	r3, [fp]
 80028ca:	429e      	cmp	r6, r3
 80028cc:	d347      	bcc.n	800295e <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028ce:	4f42      	ldr	r7, [pc, #264]	; (80029d8 <xTaskIncrementTick.part.0+0x128>)
 80028d0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80029ec <xTaskIncrementTick.part.0+0x13c>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f8df a118 	ldr.w	sl, [pc, #280]	; 80029f0 <xTaskIncrementTick.part.0+0x140>
 80028da:	681d      	ldr	r5, [r3, #0]
 80028dc:	2d00      	cmp	r5, #0
 80028de:	d073      	beq.n	80029c8 <xTaskIncrementTick.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 80028e0:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80029f4 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 80028e4:	2500      	movs	r5, #0
 80028e6:	e022      	b.n	800292e <xTaskIncrementTick.part.0+0x7e>
 80028e8:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028ea:	f7fe fedf 	bl	80016ac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f0:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028f2:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028f6:	b113      	cbz	r3, 80028fe <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028f8:	f7fe fed8 	bl	80016ac <uxListRemove>
 80028fc:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80028fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002900:	f8d8 2000 	ldr.w	r2, [r8]
 8002904:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002908:	4293      	cmp	r3, r2
 800290a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800290e:	bf88      	it	hi
 8002910:	f8c8 3000 	strhi.w	r3, [r8]
 8002914:	f7fe fea2 	bl	800165c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002918:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800291c:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800291e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002920:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002922:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8002924:	4291      	cmp	r1, r2
 8002926:	bf28      	it	cs
 8002928:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800292a:	2b00      	cmp	r3, #0
 800292c:	d04c      	beq.n	80029c8 <xTaskIncrementTick.part.0+0x118>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002934:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002936:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8002938:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800293a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 800293c:	d2d4      	bcs.n	80028e8 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 800293e:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002942:	e011      	b.n	8002968 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <xTaskIncrementTick.part.0+0x128>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	b30a      	cbz	r2, 8002990 <xTaskIncrementTick.part.0+0xe0>
 800294c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	e7fe      	b.n	800295c <xTaskIncrementTick.part.0+0xac>
 800295e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80029ec <xTaskIncrementTick.part.0+0x13c>
 8002962:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80029f0 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8002966:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002968:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 800296c:	491b      	ldr	r1, [pc, #108]	; (80029dc <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 800297a:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 800297c:	2a02      	cmp	r2, #2
 800297e:	bf28      	it	cs
 8002980:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8002982:	2b00      	cmp	r3, #0
}
 8002984:	bf0c      	ite	eq
 8002986:	4628      	moveq	r0, r5
 8002988:	2001      	movne	r0, #1
 800298a:	b003      	add	sp, #12
 800298c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002990:	4a13      	ldr	r2, [pc, #76]	; (80029e0 <xTaskIncrementTick.part.0+0x130>)
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	6811      	ldr	r1, [r2, #0]
 8002996:	6019      	str	r1, [r3, #0]
 8002998:	4912      	ldr	r1, [pc, #72]	; (80029e4 <xTaskIncrementTick.part.0+0x134>)
 800299a:	6010      	str	r0, [r2, #0]
 800299c:	680a      	ldr	r2, [r1, #0]
 800299e:	3201      	adds	r2, #1
 80029a0:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	b932      	cbnz	r2, 80029b6 <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80029a8:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80029e8 <xTaskIncrementTick.part.0+0x138>
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029b0:	f8cb 3000 	str.w	r3, [fp]
 80029b4:	e787      	b.n	80028c6 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029b6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029b8:	f8df b02c 	ldr.w	fp, [pc, #44]	; 80029e8 <xTaskIncrementTick.part.0+0x138>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80029bc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f8cb 3000 	str.w	r3, [fp]
	}
}
 80029c6:	e77e      	b.n	80028c6 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029cc:	f8cb 3000 	str.w	r3, [fp]
					break;
 80029d0:	e7ca      	b.n	8002968 <xTaskIncrementTick.part.0+0xb8>
 80029d2:	bf00      	nop
 80029d4:	20001064 	.word	0x20001064
 80029d8:	20000b74 	.word	0x20000b74
 80029dc:	20001068 	.word	0x20001068
 80029e0:	20000b78 	.word	0x20000b78
 80029e4:	2000101c 	.word	0x2000101c
 80029e8:	20001018 	.word	0x20001018
 80029ec:	20000b7c 	.word	0x20000b7c
 80029f0:	20000b70 	.word	0x20000b70
 80029f4:	20000fec 	.word	0x20000fec

080029f8 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80029f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 80029fc:	4d41      	ldr	r5, [pc, #260]	; (8002b04 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 80029fe:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8002a00:	f000 ff48 	bl	8003894 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a0a:	682b      	ldr	r3, [r5, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d161      	bne.n	8002ad4 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <xTaskResumeAll.part.0+0x110>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05d      	beq.n	8002ad4 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a18:	4e3c      	ldr	r6, [pc, #240]	; (8002b0c <xTaskResumeAll.part.0+0x114>)
 8002a1a:	6833      	ldr	r3, [r6, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d06e      	beq.n	8002afe <xTaskResumeAll.part.0+0x106>
 8002a20:	4f3b      	ldr	r7, [pc, #236]	; (8002b10 <xTaskResumeAll.part.0+0x118>)
 8002a22:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002b20 <xTaskResumeAll.part.0+0x128>
 8002a26:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002b24 <xTaskResumeAll.part.0+0x12c>
 8002a2a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002b28 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a2e:	68f3      	ldr	r3, [r6, #12]
 8002a30:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a32:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a36:	f104 0018 	add.w	r0, r4, #24
 8002a3a:	f7fe fe37 	bl	80016ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a3e:	4658      	mov	r0, fp
 8002a40:	f7fe fe34 	bl	80016ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	4659      	mov	r1, fp
 8002a50:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002a54:	bf88      	it	hi
 8002a56:	603b      	strhi	r3, [r7, #0]
 8002a58:	f7fe fe00 	bl	800165c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8002a60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d33d      	bcc.n	8002ae4 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a6e:	6833      	ldr	r3, [r6, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1dc      	bne.n	8002a2e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a74:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <xTaskResumeAll.part.0+0x11c>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	2a00      	cmp	r2, #0
 8002a7c:	d03a      	beq.n	8002af4 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a7e:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a80:	4b25      	ldr	r3, [pc, #148]	; (8002b18 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a82:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a84:	68d2      	ldr	r2, [r2, #12]
 8002a86:	6852      	ldr	r2, [r2, #4]
 8002a88:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a8a:	4e24      	ldr	r6, [pc, #144]	; (8002b1c <xTaskResumeAll.part.0+0x124>)
 8002a8c:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002a8e:	b194      	cbz	r4, 8002ab6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8002a90:	2701      	movs	r7, #1
 8002a92:	e006      	b.n	8002aa2 <xTaskResumeAll.part.0+0xaa>
 8002a94:	f7ff ff0c 	bl	80028b0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8002a98:	b108      	cbz	r0, 8002a9e <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8002a9a:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a9e:	3c01      	subs	r4, #1
 8002aa0:	d008      	beq.n	8002ab4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aa2:	682b      	ldr	r3, [r5, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f5      	beq.n	8002a94 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8002aa8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002aaa:	3c01      	subs	r4, #1
		++xPendedTicks;
 8002aac:	f103 0301 	add.w	r3, r3, #1
 8002ab0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002ab2:	d1f6      	bne.n	8002aa2 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8002ab4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8002ab6:	f8da 3000 	ldr.w	r3, [sl]
 8002aba:	b15b      	cbz	r3, 8002ad4 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8002abc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ac0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ac4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	e000      	b.n	8002ad6 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002ad8:	f000 fefe 	bl	80038d8 <vPortExitCritical>
}
 8002adc:	9801      	ldr	r0, [sp, #4]
 8002ade:	b003      	add	sp, #12
 8002ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ae4:	6833      	ldr	r3, [r6, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1a1      	bne.n	8002a2e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aea:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <xTaskResumeAll.part.0+0x11c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	2a00      	cmp	r2, #0
 8002af2:	d1c4      	bne.n	8002a7e <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <xTaskResumeAll.part.0+0x120>)
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	e7c5      	b.n	8002a8a <xTaskResumeAll.part.0+0x92>
 8002afe:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002b28 <xTaskResumeAll.part.0+0x130>
 8002b02:	e7c2      	b.n	8002a8a <xTaskResumeAll.part.0+0x92>
 8002b04:	20000fe4 	.word	0x20000fe4
 8002b08:	20000fdc 	.word	0x20000fdc
 8002b0c:	20001024 	.word	0x20001024
 8002b10:	20000fec 	.word	0x20000fec
 8002b14:	20000b74 	.word	0x20000b74
 8002b18:	20001018 	.word	0x20001018
 8002b1c:	20001020 	.word	0x20001020
 8002b20:	20000b7c 	.word	0x20000b7c
 8002b24:	20000b70 	.word	0x20000b70
 8002b28:	20001068 	.word	0x20001068

08002b2c <xTaskCreateStatic>:
	{
 8002b2c:	b530      	push	{r4, r5, lr}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002b32:	b1c4      	cbz	r4, 8002b66 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8002b34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b36:	b16d      	cbz	r5, 8002b54 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b38:	256c      	movs	r5, #108	; 0x6c
 8002b3a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b3c:	9d05      	ldr	r5, [sp, #20]
 8002b3e:	2d6c      	cmp	r5, #108	; 0x6c
 8002b40:	d01a      	beq.n	8002b78 <xTaskCreateStatic+0x4c>
 8002b42:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	e7fe      	b.n	8002b52 <xTaskCreateStatic+0x26>
 8002b54:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002b64:	e7fe      	b.n	8002b64 <xTaskCreateStatic+0x38>
 8002b66:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002b76:	e7fe      	b.n	8002b76 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b7a:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b7c:	2402      	movs	r4, #2
 8002b7e:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b82:	ac04      	add	r4, sp, #16
 8002b84:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002b88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002b8a:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b8c:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b8e:	f7ff fdeb 	bl	8002768 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b92:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b94:	f7ff fd10 	bl	80025b8 <prvAddNewTaskToReadyList>
	}
 8002b98:	9804      	ldr	r0, [sp, #16]
 8002b9a:	b007      	add	sp, #28
 8002b9c:	bd30      	pop	{r4, r5, pc}
 8002b9e:	bf00      	nop

08002ba0 <xTaskCreate>:
	{
 8002ba0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba4:	4607      	mov	r7, r0
 8002ba6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ba8:	0090      	lsls	r0, r2, #2
	{
 8002baa:	4615      	mov	r5, r2
 8002bac:	4688      	mov	r8, r1
 8002bae:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bb0:	f000 ffd0 	bl	8003b54 <pvPortMalloc>
			if( pxStack != NULL )
 8002bb4:	b1d8      	cbz	r0, 8002bee <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bb6:	4604      	mov	r4, r0
 8002bb8:	206c      	movs	r0, #108	; 0x6c
 8002bba:	f000 ffcb 	bl	8003b54 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002bbe:	4606      	mov	r6, r0
 8002bc0:	b1d0      	cbz	r0, 8002bf8 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8002bc2:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bc4:	2400      	movs	r4, #0
 8002bc6:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002bca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002bcc:	9401      	str	r4, [sp, #4]
 8002bce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002bd0:	9602      	str	r6, [sp, #8]
 8002bd2:	464b      	mov	r3, r9
 8002bd4:	462a      	mov	r2, r5
 8002bd6:	4641      	mov	r1, r8
 8002bd8:	4638      	mov	r0, r7
 8002bda:	9400      	str	r4, [sp, #0]
 8002bdc:	f7ff fdc4 	bl	8002768 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002be0:	4630      	mov	r0, r6
 8002be2:	f7ff fce9 	bl	80025b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002be6:	2001      	movs	r0, #1
	}
 8002be8:	b005      	add	sp, #20
 8002bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8002bf2:	b005      	add	sp, #20
 8002bf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f001 f865 	bl	8003cc8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c02:	e7f1      	b.n	8002be8 <xTaskCreate+0x48>

08002c04 <vTaskDelete>:
	{
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c08:	4d36      	ldr	r5, [pc, #216]	; (8002ce4 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 8002c0a:	f000 fe43 	bl	8003894 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c0e:	2c00      	cmp	r4, #0
 8002c10:	d044      	beq.n	8002c9c <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c12:	1d26      	adds	r6, r4, #4
 8002c14:	4630      	mov	r0, r6
 8002c16:	f7fe fd49 	bl	80016ac <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002c1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002c1c:	b11b      	cbz	r3, 8002c26 <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c1e:	f104 0018 	add.w	r0, r4, #24
 8002c22:	f7fe fd43 	bl	80016ac <uxListRemove>
			uxTaskNumber++;
 8002c26:	4a30      	ldr	r2, [pc, #192]	; (8002ce8 <vTaskDelete+0xe4>)
 8002c28:	6813      	ldr	r3, [r2, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8002c2e:	682b      	ldr	r3, [r5, #0]
 8002c30:	42a3      	cmp	r3, r4
 8002c32:	d02a      	beq.n	8002c8a <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8002c34:	492d      	ldr	r1, [pc, #180]	; (8002cec <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c36:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				--uxCurrentNumberOfTasks;
 8002c3a:	680b      	ldr	r3, [r1, #0]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c40:	b162      	cbz	r2, 8002c5c <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c42:	2a01      	cmp	r2, #1
 8002c44:	d03f      	beq.n	8002cc6 <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c46:	2a02      	cmp	r2, #2
 8002c48:	d00e      	beq.n	8002c68 <vTaskDelete+0x64>
 8002c4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	e7fe      	b.n	8002c5a <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8002c5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c5e:	f001 f833 	bl	8003cc8 <vPortFree>
				vPortFree( pxTCB );
 8002c62:	4620      	mov	r0, r4
 8002c64:	f001 f830 	bl	8003cc8 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c68:	4b21      	ldr	r3, [pc, #132]	; (8002cf0 <vTaskDelete+0xec>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	b9ba      	cbnz	r2, 8002ca0 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c70:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <vTaskDelete+0xf0>)
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c76:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002c78:	f000 fe2e 	bl	80038d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002c7c:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <vTaskDelete+0xf4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b113      	cbz	r3, 8002c88 <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8002c82:	682b      	ldr	r3, [r5, #0]
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d012      	beq.n	8002cae <vTaskDelete+0xaa>
	}
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002c8a:	481c      	ldr	r0, [pc, #112]	; (8002cfc <vTaskDelete+0xf8>)
 8002c8c:	4631      	mov	r1, r6
 8002c8e:	f7fe fce5 	bl	800165c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002c92:	4a1b      	ldr	r2, [pc, #108]	; (8002d00 <vTaskDelete+0xfc>)
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	3301      	adds	r3, #1
 8002c98:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8002c9a:	e7ed      	b.n	8002c78 <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c9c:	682c      	ldr	r4, [r5, #0]
 8002c9e:	e7b8      	b.n	8002c12 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ca4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ca6:	68d2      	ldr	r2, [r2, #12]
 8002ca8:	6852      	ldr	r2, [r2, #4]
 8002caa:	601a      	str	r2, [r3, #0]
}
 8002cac:	e7e4      	b.n	8002c78 <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8002cae:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <vTaskDelete+0x100>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	b163      	cbz	r3, 8002cce <vTaskDelete+0xca>
 8002cb4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	e7fe      	b.n	8002cc4 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f000 fffe 	bl	8003cc8 <vPortFree>
 8002ccc:	e7cc      	b.n	8002c68 <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8002cce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	f3bf 8f6f 	isb	sy
	}
 8002ce2:	bd70      	pop	{r4, r5, r6, pc}
 8002ce4:	20000b70 	.word	0x20000b70
 8002ce8:	20000fe8 	.word	0x20000fe8
 8002cec:	20000fdc 	.word	0x20000fdc
 8002cf0:	20000b74 	.word	0x20000b74
 8002cf4:	20001018 	.word	0x20001018
 8002cf8:	20001038 	.word	0x20001038
 8002cfc:	20001050 	.word	0x20001050
 8002d00:	20000fe0 	.word	0x20000fe0
 8002d04:	20000fe4 	.word	0x20000fe4

08002d08 <vTaskDelay>:
	{
 8002d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002d0a:	b950      	cbnz	r0, 8002d22 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002d0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
	}
 8002d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002d22:	4d20      	ldr	r5, [pc, #128]	; (8002da4 <vTaskDelay+0x9c>)
 8002d24:	682b      	ldr	r3, [r5, #0]
 8002d26:	b143      	cbz	r3, 8002d3a <vTaskDelay+0x32>
 8002d28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
 8002d38:	e7fe      	b.n	8002d38 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8002d3a:	682a      	ldr	r2, [r5, #0]
 8002d3c:	3201      	adds	r2, #1
 8002d3e:	4604      	mov	r4, r0
 8002d40:	602a      	str	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002d42:	4e19      	ldr	r6, [pc, #100]	; (8002da8 <vTaskDelay+0xa0>)
const TickType_t xConstTickCount = xTickCount;
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <vTaskDelay+0xa4>)
 8002d46:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002d48:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d4a:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002d4c:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d50:	3004      	adds	r0, #4
 8002d52:	f7fe fcab 	bl	80016ac <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d56:	6833      	ldr	r3, [r6, #0]
 8002d58:	19e4      	adds	r4, r4, r7
 8002d5a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002d5c:	d310      	bcc.n	8002d80 <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <vTaskDelay+0xa8>)
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	6831      	ldr	r1, [r6, #0]
 8002d64:	3104      	adds	r1, #4
 8002d66:	f7fe fc89 	bl	800167c <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8002d6a:	682b      	ldr	r3, [r5, #0]
 8002d6c:	b9a3      	cbnz	r3, 8002d98 <vTaskDelay+0x90>
 8002d6e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	e7fe      	b.n	8002d7e <vTaskDelay+0x76>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d80:	4b0c      	ldr	r3, [pc, #48]	; (8002db4 <vTaskDelay+0xac>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	6831      	ldr	r1, [r6, #0]
 8002d86:	3104      	adds	r1, #4
 8002d88:	f7fe fc78 	bl	800167c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <vTaskDelay+0xb0>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002d92:	bf38      	it	cc
 8002d94:	601c      	strcc	r4, [r3, #0]
 8002d96:	e7e8      	b.n	8002d6a <vTaskDelay+0x62>
 8002d98:	f7ff fe2e 	bl	80029f8 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d0b5      	beq.n	8002d0c <vTaskDelay+0x4>
	}
 8002da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000fe4 	.word	0x20000fe4
 8002da8:	20000b70 	.word	0x20000b70
 8002dac:	20001064 	.word	0x20001064
 8002db0:	20000b78 	.word	0x20000b78
 8002db4:	20000b74 	.word	0x20000b74
 8002db8:	20001018 	.word	0x20001018

08002dbc <vTaskStartScheduler>:
{
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dc0:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dc2:	4668      	mov	r0, sp
 8002dc4:	aa02      	add	r2, sp, #8
 8002dc6:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dc8:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dcc:	f7fe fc18 	bl	8001600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dd0:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8002dd2:	b1c8      	cbz	r0, 8002e08 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dd4:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 8002dd6:	b174      	cbz	r4, 8002df6 <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dd8:	236c      	movs	r3, #108	; 0x6c
 8002dda:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ddc:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002dde:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d01a      	beq.n	8002e1a <vTaskStartScheduler+0x5e>
 8002de4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	e7fe      	b.n	8002df4 <vTaskStartScheduler+0x38>
 8002df6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002e06:	e7fe      	b.n	8002e06 <vTaskStartScheduler+0x4a>
 8002e08:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002e18:	e7fe      	b.n	8002e18 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e1a:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e1c:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e1e:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002e20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e24:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e26:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002e28:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e2a:	f006 fc2d 	bl	8009688 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e30:	4b2b      	ldr	r3, [pc, #172]	; (8002ee0 <vTaskStartScheduler+0x124>)
 8002e32:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e34:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e36:	4415      	add	r5, r2
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e38:	2249      	movs	r2, #73	; 0x49
 8002e3a:	f801 2f34 	strb.w	r2, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e3e:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 8002e42:	f103 001f 	add.w	r0, r3, #31
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e46:	4298      	cmp	r0, r3
 8002e48:	d005      	beq.n	8002e56 <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e4a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002e4e:	f801 2f01 	strb.w	r2, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d1f7      	bne.n	8002e46 <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e56:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e58:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002e5a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e5e:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 8002e62:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e64:	f7fe fbf6 	bl	8001654 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e68:	f104 0018 	add.w	r0, r4, #24
 8002e6c:	f7fe fbf2 	bl	8001654 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e70:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e72:	491c      	ldr	r1, [pc, #112]	; (8002ee4 <vTaskStartScheduler+0x128>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e74:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e76:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 8002e78:	6665      	str	r5, [r4, #100]	; 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e7a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e7c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e7e:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002e82:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e86:	4630      	mov	r0, r6
 8002e88:	f000 fcde 	bl	8003848 <pxPortInitialiseStack>
 8002e8c:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e8e:	4620      	mov	r0, r4
 8002e90:	f7ff fb92 	bl	80025b8 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8002e94:	f000 fc3c 	bl	8003710 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002e98:	2801      	cmp	r0, #1
 8002e9a:	d00c      	beq.n	8002eb6 <vTaskStartScheduler+0xfa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e9c:	3001      	adds	r0, #1
 8002e9e:	d001      	beq.n	8002ea4 <vTaskStartScheduler+0xe8>
}
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eb4:	e7fe      	b.n	8002eb4 <vTaskStartScheduler+0xf8>
 8002eb6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002eba:	f383 8811 	msr	BASEPRI, r3
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ec6:	4908      	ldr	r1, [pc, #32]	; (8002ee8 <vTaskStartScheduler+0x12c>)
		xSchedulerRunning = pdTRUE;
 8002ec8:	4a08      	ldr	r2, [pc, #32]	; (8002eec <vTaskStartScheduler+0x130>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002eca:	4b09      	ldr	r3, [pc, #36]	; (8002ef0 <vTaskStartScheduler+0x134>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ecc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ed0:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8002ed2:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ed4:	601d      	str	r5, [r3, #0]
}
 8002ed6:	b004      	add	sp, #16
 8002ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002edc:	f000 bd6c 	b.w	80039b8 <xPortStartScheduler>
 8002ee0:	0800c78c 	.word	0x0800c78c
 8002ee4:	08002815 	.word	0x08002815
 8002ee8:	20001018 	.word	0x20001018
 8002eec:	20001038 	.word	0x20001038
 8002ef0:	20001064 	.word	0x20001064

08002ef4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002ef4:	4a02      	ldr	r2, [pc, #8]	; (8002f00 <vTaskSuspendAll+0xc>)
 8002ef6:	6813      	ldr	r3, [r2, #0]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	20000fe4 	.word	0x20000fe4

08002f04 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <xTaskResumeAll+0x1c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b943      	cbnz	r3, 8002f1c <xTaskResumeAll+0x18>
 8002f0a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	e7fe      	b.n	8002f1a <xTaskResumeAll+0x16>
 8002f1c:	f7ff bd6c 	b.w	80029f8 <xTaskResumeAll.part.0>
 8002f20:	20000fe4 	.word	0x20000fe4

08002f24 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002f24:	4b01      	ldr	r3, [pc, #4]	; (8002f2c <xTaskGetTickCount+0x8>)
 8002f26:	6818      	ldr	r0, [r3, #0]
}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20001064 	.word	0x20001064

08002f30 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <xTaskIncrementTick+0x18>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b90b      	cbnz	r3, 8002f3a <xTaskIncrementTick+0xa>
 8002f36:	f7ff bcbb 	b.w	80028b0 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	; (8002f4c <xTaskIncrementTick+0x1c>)
 8002f3c:	6813      	ldr	r3, [r2, #0]
 8002f3e:	3301      	adds	r3, #1
}
 8002f40:	2000      	movs	r0, #0
		++xPendedTicks;
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	20000fe4 	.word	0x20000fe4
 8002f4c:	20001020 	.word	0x20001020

08002f50 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f50:	4b04      	ldr	r3, [pc, #16]	; (8002f64 <vTaskSwitchContext+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	b11b      	cbz	r3, 8002f5e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8002f56:	4b04      	ldr	r3, [pc, #16]	; (8002f68 <vTaskSwitchContext+0x18>)
 8002f58:	2201      	movs	r2, #1
 8002f5a:	601a      	str	r2, [r3, #0]
}
 8002f5c:	4770      	bx	lr
 8002f5e:	f7ff bbb3 	b.w	80026c8 <vTaskSwitchContext.part.0>
 8002f62:	bf00      	nop
 8002f64:	20000fe4 	.word	0x20000fe4
 8002f68:	20001068 	.word	0x20001068

08002f6c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002f6c:	b1f0      	cbz	r0, 8002fac <vTaskPlaceOnEventList+0x40>
{
 8002f6e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f70:	4d1c      	ldr	r5, [pc, #112]	; (8002fe4 <vTaskPlaceOnEventList+0x78>)
 8002f72:	460c      	mov	r4, r1
 8002f74:	6829      	ldr	r1, [r5, #0]
 8002f76:	3118      	adds	r1, #24
 8002f78:	f7fe fb80 	bl	800167c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <vTaskPlaceOnEventList+0x7c>)
 8002f7e:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f80:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f82:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f8a:	3004      	adds	r0, #4
 8002f8c:	f7fe fb8e 	bl	80016ac <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f90:	1c63      	adds	r3, r4, #1
 8002f92:	d014      	beq.n	8002fbe <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	19a4      	adds	r4, r4, r6
 8002f98:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f9a:	d317      	bcc.n	8002fcc <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9c:	4b13      	ldr	r3, [pc, #76]	; (8002fec <vTaskPlaceOnEventList+0x80>)
 8002f9e:	6818      	ldr	r0, [r3, #0]
 8002fa0:	6829      	ldr	r1, [r5, #0]
}
 8002fa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fa6:	3104      	adds	r1, #4
 8002fa8:	f7fe bb68 	b.w	800167c <vListInsert>
 8002fac:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8002fbc:	e7fe      	b.n	8002fbc <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fbe:	6829      	ldr	r1, [r5, #0]
 8002fc0:	480b      	ldr	r0, [pc, #44]	; (8002ff0 <vTaskPlaceOnEventList+0x84>)
}
 8002fc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc6:	3104      	adds	r1, #4
 8002fc8:	f7fe bb48 	b.w	800165c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <vTaskPlaceOnEventList+0x88>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	6829      	ldr	r1, [r5, #0]
 8002fd2:	3104      	adds	r1, #4
 8002fd4:	f7fe fb52 	bl	800167c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fd8:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <vTaskPlaceOnEventList+0x8c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002fde:	bf38      	it	cc
 8002fe0:	601c      	strcc	r4, [r3, #0]
}
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	20000b70 	.word	0x20000b70
 8002fe8:	20001064 	.word	0x20001064
 8002fec:	20000b78 	.word	0x20000b78
 8002ff0:	2000103c 	.word	0x2000103c
 8002ff4:	20000b74 	.word	0x20000b74
 8002ff8:	20001018 	.word	0x20001018

08002ffc <vTaskPlaceOnEventListRestricted>:
	{
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8002ffe:	b360      	cbz	r0, 800305a <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003000:	4e20      	ldr	r6, [pc, #128]	; (8003084 <vTaskPlaceOnEventListRestricted+0x88>)
 8003002:	460c      	mov	r4, r1
 8003004:	6831      	ldr	r1, [r6, #0]
 8003006:	4615      	mov	r5, r2
 8003008:	3118      	adds	r1, #24
 800300a:	f7fe fb27 	bl	800165c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 8003010:	b99d      	cbnz	r5, 800303a <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 8003012:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003014:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003016:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003018:	f883 506a 	strb.w	r5, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800301c:	3004      	adds	r0, #4
 800301e:	f7fe fb45 	bl	80016ac <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003022:	6833      	ldr	r3, [r6, #0]
 8003024:	19e4      	adds	r4, r4, r7
 8003026:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003028:	d320      	bcc.n	800306c <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800302a:	4b18      	ldr	r3, [pc, #96]	; (800308c <vTaskPlaceOnEventListRestricted+0x90>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	6831      	ldr	r1, [r6, #0]
	}
 8003030:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003034:	3104      	adds	r1, #4
 8003036:	f7fe bb21 	b.w	800167c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800303a:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800303c:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800303e:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003040:	2200      	movs	r2, #0
 8003042:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003046:	3004      	adds	r0, #4
 8003048:	f7fe fb30 	bl	80016ac <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800304c:	6831      	ldr	r1, [r6, #0]
 800304e:	4810      	ldr	r0, [pc, #64]	; (8003090 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 8003050:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003054:	3104      	adds	r1, #4
 8003056:	f7fe bb01 	b.w	800165c <vListInsertEnd>
 800305a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800306a:	e7fe      	b.n	800306a <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <vTaskPlaceOnEventListRestricted+0x98>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	6831      	ldr	r1, [r6, #0]
 8003072:	3104      	adds	r1, #4
 8003074:	f7fe fb02 	bl	800167c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003078:	4b07      	ldr	r3, [pc, #28]	; (8003098 <vTaskPlaceOnEventListRestricted+0x9c>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800307e:	bf38      	it	cc
 8003080:	601c      	strcc	r4, [r3, #0]
	}
 8003082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003084:	20000b70 	.word	0x20000b70
 8003088:	20001064 	.word	0x20001064
 800308c:	20000b78 	.word	0x20000b78
 8003090:	2000103c 	.word	0x2000103c
 8003094:	20000b74 	.word	0x20000b74
 8003098:	20001018 	.word	0x20001018

0800309c <xTaskRemoveFromEventList>:
{
 800309c:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800309e:	68c3      	ldr	r3, [r0, #12]
 80030a0:	68dc      	ldr	r4, [r3, #12]
{
 80030a2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80030a4:	2c00      	cmp	r4, #0
 80030a6:	d02b      	beq.n	8003100 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030a8:	f104 0518 	add.w	r5, r4, #24
 80030ac:	4628      	mov	r0, r5
 80030ae:	f7fe fafd 	bl	80016ac <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030b2:	4b18      	ldr	r3, [pc, #96]	; (8003114 <xTaskRemoveFromEventList+0x78>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	b17b      	cbz	r3, 80030d8 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80030b8:	4817      	ldr	r0, [pc, #92]	; (8003118 <xTaskRemoveFromEventList+0x7c>)
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fe face 	bl	800165c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030c0:	4b16      	ldr	r3, [pc, #88]	; (800311c <xTaskRemoveFromEventList+0x80>)
 80030c2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80030ca:	bf85      	ittet	hi
 80030cc:	4b14      	ldrhi	r3, [pc, #80]	; (8003120 <xTaskRemoveFromEventList+0x84>)
 80030ce:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 80030d0:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80030d2:	6018      	strhi	r0, [r3, #0]
}
 80030d4:	b003      	add	sp, #12
 80030d6:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030d8:	1d21      	adds	r1, r4, #4
 80030da:	4608      	mov	r0, r1
 80030dc:	9101      	str	r1, [sp, #4]
 80030de:	f7fe fae5 	bl	80016ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <xTaskRemoveFromEventList+0x88>)
 80030e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030e6:	6810      	ldr	r0, [r2, #0]
 80030e8:	9901      	ldr	r1, [sp, #4]
 80030ea:	4283      	cmp	r3, r0
 80030ec:	480e      	ldr	r0, [pc, #56]	; (8003128 <xTaskRemoveFromEventList+0x8c>)
 80030ee:	bf88      	it	hi
 80030f0:	6013      	strhi	r3, [r2, #0]
 80030f2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80030fa:	f7fe faaf 	bl	800165c <vListInsertEnd>
 80030fe:	e7df      	b.n	80030c0 <xTaskRemoveFromEventList+0x24>
 8003100:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003104:	f383 8811 	msr	BASEPRI, r3
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003110:	e7fe      	b.n	8003110 <xTaskRemoveFromEventList+0x74>
 8003112:	bf00      	nop
 8003114:	20000fe4 	.word	0x20000fe4
 8003118:	20001024 	.word	0x20001024
 800311c:	20000b70 	.word	0x20000b70
 8003120:	20001068 	.word	0x20001068
 8003124:	20000fec 	.word	0x20000fec
 8003128:	20000b7c 	.word	0x20000b7c

0800312c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800312c:	4a03      	ldr	r2, [pc, #12]	; (800313c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003130:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	e9c0 2300 	strd	r2, r3, [r0]
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000101c 	.word	0x2000101c
 8003140:	20001064 	.word	0x20001064

08003144 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8003144:	b328      	cbz	r0, 8003192 <xTaskCheckForTimeOut+0x4e>
{
 8003146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003148:	460d      	mov	r5, r1
 800314a:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 800314c:	b1c1      	cbz	r1, 8003180 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 800314e:	4604      	mov	r4, r0
 8003150:	f000 fba0 	bl	8003894 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003154:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <xTaskCheckForTimeOut+0x9c>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8003156:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <xTaskCheckForTimeOut+0xa0>)
		const TickType_t xConstTickCount = xTickCount;
 8003158:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
 8003160:	bb00      	cbnz	r0, 80031a4 <xTaskCheckForTimeOut+0x60>
			if( *pxTicksToWait == portMAX_DELAY )
 8003162:	682b      	ldr	r3, [r5, #0]
 8003164:	1c59      	adds	r1, r3, #1
 8003166:	d022      	beq.n	80031ae <xTaskCheckForTimeOut+0x6a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003168:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80031e8 <xTaskCheckForTimeOut+0xa4>
 800316c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003170:	f8de 7000 	ldr.w	r7, [lr]
 8003174:	42b8      	cmp	r0, r7
 8003176:	d020      	beq.n	80031ba <xTaskCheckForTimeOut+0x76>
 8003178:	42b1      	cmp	r1, r6
 800317a:	d81e      	bhi.n	80031ba <xTaskCheckForTimeOut+0x76>
			xReturn = pdTRUE;
 800317c:	2001      	movs	r0, #1
 800317e:	e016      	b.n	80031ae <xTaskCheckForTimeOut+0x6a>
 8003180:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003190:	e7fe      	b.n	8003190 <xTaskCheckForTimeOut+0x4c>
 8003192:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80031a2:	e7fe      	b.n	80031a2 <xTaskCheckForTimeOut+0x5e>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 80031ac:	2001      	movs	r0, #1
 80031ae:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80031b0:	f000 fb92 	bl	80038d8 <vPortExitCritical>
}
 80031b4:	9801      	ldr	r0, [sp, #4]
 80031b6:	b003      	add	sp, #12
 80031b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80031ba:	eba6 0c01 	sub.w	ip, r6, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80031be:	4563      	cmp	r3, ip
 80031c0:	d909      	bls.n	80031d6 <xTaskCheckForTimeOut+0x92>
			*pxTicksToWait -= xElapsedTime;
 80031c2:	1b9b      	subs	r3, r3, r6
 80031c4:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80031c6:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031ca:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80031cc:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 80031ce:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031d0:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80031d4:	e7eb      	b.n	80031ae <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80031da:	2001      	movs	r0, #1
 80031dc:	e7e7      	b.n	80031ae <xTaskCheckForTimeOut+0x6a>
 80031de:	bf00      	nop
 80031e0:	20001064 	.word	0x20001064
 80031e4:	20000b70 	.word	0x20000b70
 80031e8:	2000101c 	.word	0x2000101c

080031ec <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80031ec:	4b01      	ldr	r3, [pc, #4]	; (80031f4 <vTaskMissedYield+0x8>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	4770      	bx	lr
 80031f4:	20001068 	.word	0x20001068

080031f8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80031f8:	4b05      	ldr	r3, [pc, #20]	; (8003210 <xTaskGetSchedulerState+0x18>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	b133      	cbz	r3, 800320c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031fe:	4b05      	ldr	r3, [pc, #20]	; (8003214 <xTaskGetSchedulerState+0x1c>)
 8003200:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2002      	moveq	r0, #2
 8003208:	2000      	movne	r0, #0
 800320a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800320c:	2001      	movs	r0, #1
	}
 800320e:	4770      	bx	lr
 8003210:	20001038 	.word	0x20001038
 8003214:	20000fe4 	.word	0x20000fe4

08003218 <xTaskPriorityInherit>:
	{
 8003218:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800321a:	4604      	mov	r4, r0
	{
 800321c:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 800321e:	b1c8      	cbz	r0, 8003254 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003220:	4d1d      	ldr	r5, [pc, #116]	; (8003298 <xTaskPriorityInherit+0x80>)
 8003222:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003224:	682a      	ldr	r2, [r5, #0]
 8003226:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003228:	4293      	cmp	r3, r2
 800322a:	d215      	bcs.n	8003258 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800322c:	6982      	ldr	r2, [r0, #24]
 800322e:	2a00      	cmp	r2, #0
 8003230:	db04      	blt.n	800323c <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003232:	682a      	ldr	r2, [r5, #0]
 8003234:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003236:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800323a:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800323c:	4e17      	ldr	r6, [pc, #92]	; (800329c <xTaskPriorityInherit+0x84>)
 800323e:	6962      	ldr	r2, [r4, #20]
 8003240:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003244:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003248:	429a      	cmp	r2, r3
 800324a:	d00e      	beq.n	800326a <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800324c:	682b      	ldr	r3, [r5, #0]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003252:	2001      	movs	r0, #1
	}
 8003254:	b002      	add	sp, #8
 8003256:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003258:	682b      	ldr	r3, [r5, #0]
 800325a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	4298      	cmp	r0, r3
 8003260:	bf2c      	ite	cs
 8003262:	2000      	movcs	r0, #0
 8003264:	2001      	movcc	r0, #1
	}
 8003266:	b002      	add	sp, #8
 8003268:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800326a:	1d21      	adds	r1, r4, #4
 800326c:	4608      	mov	r0, r1
 800326e:	9101      	str	r1, [sp, #4]
 8003270:	f7fe fa1c 	bl	80016ac <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003274:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003278:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800327a:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800327c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800327e:	4290      	cmp	r0, r2
 8003280:	bf88      	it	hi
 8003282:	6018      	strhi	r0, [r3, #0]
 8003284:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003288:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 800328c:	9901      	ldr	r1, [sp, #4]
 800328e:	f7fe f9e5 	bl	800165c <vListInsertEnd>
				xReturn = pdTRUE;
 8003292:	2001      	movs	r0, #1
 8003294:	e7de      	b.n	8003254 <xTaskPriorityInherit+0x3c>
 8003296:	bf00      	nop
 8003298:	20000b70 	.word	0x20000b70
 800329c:	20000b7c 	.word	0x20000b7c
 80032a0:	20000fec 	.word	0x20000fec

080032a4 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80032a4:	b318      	cbz	r0, 80032ee <xTaskPriorityDisinherit+0x4a>
	{
 80032a6:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80032a8:	4b1e      	ldr	r3, [pc, #120]	; (8003324 <xTaskPriorityDisinherit+0x80>)
 80032aa:	681c      	ldr	r4, [r3, #0]
 80032ac:	4284      	cmp	r4, r0
	{
 80032ae:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80032b0:	d008      	beq.n	80032c4 <xTaskPriorityDisinherit+0x20>
 80032b2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	e7fe      	b.n	80032c2 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80032c4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032c6:	b14b      	cbz	r3, 80032dc <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80032ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 80032cc:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032ce:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80032d0:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032d2:	d000      	beq.n	80032d6 <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032d4:	b16b      	cbz	r3, 80032f2 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80032d6:	2000      	movs	r0, #0
	}
 80032d8:	b002      	add	sp, #8
 80032da:	bd10      	pop	{r4, pc}
 80032dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032e0:	f383 8811 	msr	BASEPRI, r3
 80032e4:	f3bf 8f6f 	isb	sy
 80032e8:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80032ec:	e7fe      	b.n	80032ec <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80032ee:	2000      	movs	r0, #0
	}
 80032f0:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032f2:	1d21      	adds	r1, r4, #4
 80032f4:	4608      	mov	r0, r1
 80032f6:	9101      	str	r1, [sp, #4]
 80032f8:	f7fe f9d8 	bl	80016ac <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 80032fe:	4a0a      	ldr	r2, [pc, #40]	; (8003328 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003300:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003302:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 8003306:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003308:	6810      	ldr	r0, [r2, #0]
 800330a:	9901      	ldr	r1, [sp, #4]
 800330c:	4283      	cmp	r3, r0
 800330e:	4807      	ldr	r0, [pc, #28]	; (800332c <xTaskPriorityDisinherit+0x88>)
 8003310:	bf88      	it	hi
 8003312:	6013      	strhi	r3, [r2, #0]
 8003314:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003318:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800331c:	f7fe f99e 	bl	800165c <vListInsertEnd>
					xReturn = pdTRUE;
 8003320:	2001      	movs	r0, #1
		return xReturn;
 8003322:	e7d9      	b.n	80032d8 <xTaskPriorityDisinherit+0x34>
 8003324:	20000b70 	.word	0x20000b70
 8003328:	20000fec 	.word	0x20000fec
 800332c:	20000b7c 	.word	0x20000b7c

08003330 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003330:	2800      	cmp	r0, #0
 8003332:	d041      	beq.n	80033b8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8003334:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 8003336:	6e03      	ldr	r3, [r0, #96]	; 0x60
	{
 8003338:	b083      	sub	sp, #12
 800333a:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800333c:	b153      	cbz	r3, 8003354 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800333e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003340:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003342:	4281      	cmp	r1, r0
 8003344:	bf38      	it	cc
 8003346:	4601      	movcc	r1, r0
 8003348:	428a      	cmp	r2, r1
 800334a:	d001      	beq.n	8003350 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800334c:	2b01      	cmp	r3, #1
 800334e:	d00a      	beq.n	8003366 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8003350:	b003      	add	sp, #12
 8003352:	bd30      	pop	{r4, r5, pc}
 8003354:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003364:	e7fe      	b.n	8003364 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 8003366:	4b19      	ldr	r3, [pc, #100]	; (80033cc <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	42a3      	cmp	r3, r4
 800336c:	d025      	beq.n	80033ba <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800336e:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003370:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003372:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003374:	bfa8      	it	ge
 8003376:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800337a:	4d15      	ldr	r5, [pc, #84]	; (80033d0 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800337c:	bfa8      	it	ge
 800337e:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003380:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003384:	6961      	ldr	r1, [r4, #20]
 8003386:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800338a:	4299      	cmp	r1, r3
 800338c:	d1e0      	bne.n	8003350 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800338e:	1d21      	adds	r1, r4, #4
 8003390:	4608      	mov	r0, r1
 8003392:	9101      	str	r1, [sp, #4]
 8003394:	f7fe f98a 	bl	80016ac <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8003398:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 800339a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	9901      	ldr	r1, [sp, #4]
 80033a0:	4290      	cmp	r0, r2
 80033a2:	bf88      	it	hi
 80033a4:	6018      	strhi	r0, [r3, #0]
 80033a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80033aa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80033ae:	b003      	add	sp, #12
 80033b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80033b4:	f7fe b952 	b.w	800165c <vListInsertEnd>
 80033b8:	4770      	bx	lr
 80033ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80033ca:	e7fe      	b.n	80033ca <vTaskPriorityDisinheritAfterTimeout+0x9a>
 80033cc:	20000b70 	.word	0x20000b70
 80033d0:	20000b7c 	.word	0x20000b7c
 80033d4:	20000fec 	.word	0x20000fec

080033d8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80033d8:	4b04      	ldr	r3, [pc, #16]	; (80033ec <pvTaskIncrementMutexHeldCount+0x14>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	b11a      	cbz	r2, 80033e6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80033e2:	3201      	adds	r2, #1
 80033e4:	660a      	str	r2, [r1, #96]	; 0x60
		return pxCurrentTCB;
 80033e6:	6818      	ldr	r0, [r3, #0]
	}
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000b70 	.word	0x20000b70

080033f0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80033f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033f4:	4e22      	ldr	r6, [pc, #136]	; (8003480 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 80033f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003488 <prvSwitchTimerLists+0x98>
{
 80033fa:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80033fc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003400:	e00d      	b.n	800341e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003402:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003404:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003406:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003408:	1d25      	adds	r5, r4, #4
 800340a:	4628      	mov	r0, r5
 800340c:	f7fe f94e 	bl	80016ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003410:	6a23      	ldr	r3, [r4, #32]
 8003412:	4620      	mov	r0, r4
 8003414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003416:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800341a:	075b      	lsls	r3, r3, #29
 800341c:	d40a      	bmi.n	8003434 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800341e:	6833      	ldr	r3, [r6, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2a00      	cmp	r2, #0
 8003424:	d1ed      	bne.n	8003402 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003426:	4a17      	ldr	r2, [pc, #92]	; (8003484 <prvSwitchTimerLists+0x94>)
 8003428:	6811      	ldr	r1, [r2, #0]
 800342a:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 800342c:	6013      	str	r3, [r2, #0]
}
 800342e:	b005      	add	sp, #20
 8003430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003434:	69a3      	ldr	r3, [r4, #24]
 8003436:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8003438:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800343a:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 800343c:	d205      	bcs.n	800344a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800343e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003440:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003442:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003444:	f7fe f91a 	bl	800167c <vListInsert>
 8003448:	e7e9      	b.n	800341e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 800344a:	f8d9 3000 	ldr.w	r3, [r9]
 800344e:	b16b      	cbz	r3, 800346c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003450:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003454:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003456:	f7ff fecf 	bl	80031f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800345a:	2300      	movs	r3, #0
 800345c:	f8d9 0000 	ldr.w	r0, [r9]
 8003460:	461a      	mov	r2, r3
 8003462:	4669      	mov	r1, sp
 8003464:	f7fe fa28 	bl	80018b8 <xQueueGenericSend>
				configASSERT( xResult );
 8003468:	2800      	cmp	r0, #0
 800346a:	d1d8      	bne.n	800341e <prvSwitchTimerLists+0x2e>
 800346c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	e7fe      	b.n	800347c <prvSwitchTimerLists+0x8c>
 800347e:	bf00      	nop
 8003480:	2000106c 	.word	0x2000106c
 8003484:	20001070 	.word	0x20001070
 8003488:	20001190 	.word	0x20001190

0800348c <prvTimerTask>:
{
 800348c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003490:	4e9b      	ldr	r6, [pc, #620]	; (8003700 <prvTimerTask+0x274>)
 8003492:	4d9c      	ldr	r5, [pc, #624]	; (8003704 <prvTimerTask+0x278>)
 8003494:	4c9c      	ldr	r4, [pc, #624]	; (8003708 <prvTimerTask+0x27c>)
 8003496:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 8003498:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 800349c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80034a0:	6833      	ldr	r3, [r6, #0]
 80034a2:	681f      	ldr	r7, [r3, #0]
 80034a4:	2f00      	cmp	r7, #0
 80034a6:	f000 80a8 	beq.w	80035fa <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80034ae:	f7ff fd21 	bl	8002ef4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80034b2:	f7ff fd37 	bl	8002f24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80034b6:	682a      	ldr	r2, [r5, #0]
 80034b8:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 80034ba:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80034bc:	f0c0 80ae 	bcc.w	800361c <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034c0:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 80034c2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80034c4:	f080 80b4 	bcs.w	8003630 <prvTimerTask+0x1a4>
 80034c8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034ca:	6820      	ldr	r0, [r4, #0]
 80034cc:	eba7 010a 	sub.w	r1, r7, sl
 80034d0:	f7ff f80e 	bl	80024f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80034d4:	f7ff fd16 	bl	8002f04 <xTaskResumeAll>
 80034d8:	b928      	cbnz	r0, 80034e6 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 80034da:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034e6:	6820      	ldr	r0, [r4, #0]
 80034e8:	2200      	movs	r2, #0
 80034ea:	a902      	add	r1, sp, #8
 80034ec:	f7fe fc58 	bl	8001da0 <xQueueReceive>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d0d5      	beq.n	80034a0 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80034f4:	9b02      	ldr	r3, [sp, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db76      	blt.n	80035e8 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034fa:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	b113      	cbz	r3, 8003506 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003500:	1d38      	adds	r0, r7, #4
 8003502:	f7fe f8d3 	bl	80016ac <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003506:	f7ff fd0d 	bl	8002f24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800350a:	682b      	ldr	r3, [r5, #0]
 800350c:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 800350e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003510:	f0c0 808b 	bcc.w	800362a <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 8003514:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8003516:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 800351a:	2b09      	cmp	r3, #9
 800351c:	d8e3      	bhi.n	80034e6 <prvTimerTask+0x5a>
 800351e:	e8df f003 	tbb	[pc, r3]
 8003522:	0505      	.short	0x0505
 8003524:	5a3d5305 	.word	0x5a3d5305
 8003528:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800352c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003530:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003532:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800353c:	9b03      	ldr	r3, [sp, #12]
 800353e:	1899      	adds	r1, r3, r2
 8003540:	bf2c      	ite	cs
 8003542:	2001      	movcs	r0, #1
 8003544:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8003546:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003548:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800354a:	f200 808c 	bhi.w	8003666 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800354e:	ebaa 0303 	sub.w	r3, sl, r3
 8003552:	429a      	cmp	r2, r3
 8003554:	d832      	bhi.n	80035bc <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	4638      	mov	r0, r7
 800355a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800355c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003560:	075b      	lsls	r3, r3, #29
 8003562:	d5c0      	bpl.n	80034e6 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	b183      	cbz	r3, 800358a <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8003568:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800356a:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 800356c:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800356e:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003570:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003572:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003574:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003576:	f7ff fe3f 	bl	80031f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800357a:	2300      	movs	r3, #0
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	a906      	add	r1, sp, #24
 8003582:	f7fe f999 	bl	80018b8 <xQueueGenericSend>
							configASSERT( xResult );
 8003586:	2800      	cmp	r0, #0
 8003588:	d1ad      	bne.n	80034e6 <prvTimerTask+0x5a>
 800358a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	e7fe      	b.n	800359a <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800359c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035a0:	f043 0301 	orr.w	r3, r3, #1
 80035a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80035a8:	9b03      	ldr	r3, [sp, #12]
 80035aa:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 809d 	beq.w	80036ec <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80035b2:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 80035b4:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80035b6:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035b8:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 80035ba:	d85e      	bhi.n	800367a <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <prvTimerTask+0x280>)
 80035be:	1d39      	adds	r1, r7, #4
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	f7fe f85b 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 80035c6:	e78e      	b.n	80034e6 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 80035d4:	e787      	b.n	80034e6 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80035d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035da:	079a      	lsls	r2, r3, #30
 80035dc:	d552      	bpl.n	8003684 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80035e6:	e77e      	b.n	80034e6 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80035e8:	9b03      	ldr	r3, [sp, #12]
 80035ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035ee:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035f0:	9b02      	ldr	r3, [sp, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f6ff af77 	blt.w	80034e6 <prvTimerTask+0x5a>
 80035f8:	e77f      	b.n	80034fa <prvTimerTask+0x6e>
	vTaskSuspendAll();
 80035fa:	f7ff fc7b 	bl	8002ef4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80035fe:	f7ff fc91 	bl	8002f24 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003602:	682a      	ldr	r2, [r5, #0]
 8003604:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8003606:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003608:	d808      	bhi.n	800361c <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800360a:	4b40      	ldr	r3, [pc, #256]	; (800370c <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 800360c:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	fab2 f282 	clz	r2, r2
 8003618:	0952      	lsrs	r2, r2, #5
 800361a:	e756      	b.n	80034ca <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 800361c:	f7ff fee8 	bl	80033f0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003620:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8003624:	f7ff fc6e 	bl	8002f04 <xTaskResumeAll>
 8003628:	e75d      	b.n	80034e6 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 800362a:	f7ff fee1 	bl	80033f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800362e:	e771      	b.n	8003514 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003630:	f7ff fc68 	bl	8002f04 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003634:	6832      	ldr	r2, [r6, #0]
 8003636:	68d2      	ldr	r2, [r2, #12]
 8003638:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800363c:	f10b 0104 	add.w	r1, fp, #4
 8003640:	4608      	mov	r0, r1
 8003642:	9101      	str	r1, [sp, #4]
 8003644:	f7fe f832 	bl	80016ac <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003648:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 800364c:	9901      	ldr	r1, [sp, #4]
 800364e:	f010 0f04 	tst.w	r0, #4
 8003652:	d11b      	bne.n	800368c <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003654:	f020 0001 	bic.w	r0, r0, #1
 8003658:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800365c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003660:	4658      	mov	r0, fp
 8003662:	4798      	blx	r3
}
 8003664:	e73f      	b.n	80034e6 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003666:	4553      	cmp	r3, sl
 8003668:	d902      	bls.n	8003670 <prvTimerTask+0x1e4>
 800366a:	2800      	cmp	r0, #0
 800366c:	f43f af73 	beq.w	8003556 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003670:	6830      	ldr	r0, [r6, #0]
 8003672:	1d39      	adds	r1, r7, #4
 8003674:	f7fe f802 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 8003678:	e735      	b.n	80034e6 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800367a:	6830      	ldr	r0, [r6, #0]
 800367c:	1d39      	adds	r1, r7, #4
 800367e:	f7fd fffd 	bl	800167c <vListInsert>
 8003682:	e730      	b.n	80034e6 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8003684:	4638      	mov	r0, r7
 8003686:	f000 fb1f 	bl	8003cc8 <vPortFree>
 800368a:	e72c      	b.n	80034e6 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800368c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003690:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003694:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8003696:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003698:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800369c:	d203      	bcs.n	80036a6 <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800369e:	6830      	ldr	r0, [r6, #0]
 80036a0:	f7fd ffec 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 80036a4:	e7da      	b.n	800365c <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a6:	ebaa 0307 	sub.w	r3, sl, r7
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d819      	bhi.n	80036e2 <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 80036ae:	6823      	ldr	r3, [r4, #0]
 80036b0:	b173      	cbz	r3, 80036d0 <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 80036b2:	2300      	movs	r3, #0
 80036b4:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80036b6:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80036b8:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80036bc:	f7ff fd9c 	bl	80031f8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80036c0:	2300      	movs	r3, #0
 80036c2:	6820      	ldr	r0, [r4, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	a906      	add	r1, sp, #24
 80036c8:	f7fe f8f6 	bl	80018b8 <xQueueGenericSend>
			configASSERT( xResult );
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d1c5      	bne.n	800365c <prvTimerTask+0x1d0>
 80036d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	e7fe      	b.n	80036e0 <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036e2:	4b0a      	ldr	r3, [pc, #40]	; (800370c <prvTimerTask+0x280>)
 80036e4:	6818      	ldr	r0, [r3, #0]
 80036e6:	f7fd ffc9 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 80036ea:	e7b7      	b.n	800365c <prvTimerTask+0x1d0>
 80036ec:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036fc:	e7fe      	b.n	80036fc <prvTimerTask+0x270>
 80036fe:	bf00      	nop
 8003700:	2000106c 	.word	0x2000106c
 8003704:	2000113c 	.word	0x2000113c
 8003708:	20001190 	.word	0x20001190
 800370c:	20001070 	.word	0x20001070

08003710 <xTimerCreateTimerTask>:
{
 8003710:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003712:	4c23      	ldr	r4, [pc, #140]	; (80037a0 <xTimerCreateTimerTask+0x90>)
{
 8003714:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8003716:	f000 f8bd 	bl	8003894 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800371a:	6825      	ldr	r5, [r4, #0]
 800371c:	b335      	cbz	r5, 800376c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800371e:	f000 f8db 	bl	80038d8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	b1cb      	cbz	r3, 800375a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003726:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003728:	aa07      	add	r2, sp, #28
 800372a:	a906      	add	r1, sp, #24
 800372c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800372e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003732:	f7fd ff73 	bl	800161c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003736:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800373a:	2302      	movs	r3, #2
 800373c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	9a07      	ldr	r2, [sp, #28]
 8003744:	4917      	ldr	r1, [pc, #92]	; (80037a4 <xTimerCreateTimerTask+0x94>)
 8003746:	4818      	ldr	r0, [pc, #96]	; (80037a8 <xTimerCreateTimerTask+0x98>)
 8003748:	4623      	mov	r3, r4
 800374a:	f7ff f9ef 	bl	8002b2c <xTaskCreateStatic>
 800374e:	4b17      	ldr	r3, [pc, #92]	; (80037ac <xTimerCreateTimerTask+0x9c>)
 8003750:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003752:	b110      	cbz	r0, 800375a <xTimerCreateTimerTask+0x4a>
}
 8003754:	2001      	movs	r0, #1
 8003756:	b009      	add	sp, #36	; 0x24
 8003758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800376a:	e7fe      	b.n	800376a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 800376c:	4f10      	ldr	r7, [pc, #64]	; (80037b0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800376e:	4e11      	ldr	r6, [pc, #68]	; (80037b4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8003770:	4638      	mov	r0, r7
 8003772:	f7fd ff63 	bl	800163c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003776:	4630      	mov	r0, r6
 8003778:	f7fd ff60 	bl	800163c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800377e:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8003780:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003782:	4a0e      	ldr	r2, [pc, #56]	; (80037bc <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8003786:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003788:	2110      	movs	r1, #16
 800378a:	4a0e      	ldr	r2, [pc, #56]	; (80037c4 <xTimerCreateTimerTask+0xb4>)
 800378c:	200a      	movs	r0, #10
 800378e:	f7fd ffdd 	bl	800174c <xQueueGenericCreateStatic>
 8003792:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8003794:	2800      	cmp	r0, #0
 8003796:	d0c2      	beq.n	800371e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003798:	490b      	ldr	r1, [pc, #44]	; (80037c8 <xTimerCreateTimerTask+0xb8>)
 800379a:	f7fe fe81 	bl	80024a0 <vQueueAddToRegistry>
 800379e:	e7be      	b.n	800371e <xTimerCreateTimerTask+0xe>
 80037a0:	20001190 	.word	0x20001190
 80037a4:	0800c79c 	.word	0x0800c79c
 80037a8:	0800348d 	.word	0x0800348d
 80037ac:	20001194 	.word	0x20001194
 80037b0:	20001114 	.word	0x20001114
 80037b4:	20001128 	.word	0x20001128
 80037b8:	2000106c 	.word	0x2000106c
 80037bc:	20001070 	.word	0x20001070
 80037c0:	20001140 	.word	0x20001140
 80037c4:	20001074 	.word	0x20001074
 80037c8:	0800c794 	.word	0x0800c794

080037cc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037cc:	4808      	ldr	r0, [pc, #32]	; (80037f0 <prvPortStartFirstTask+0x24>)
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	6800      	ldr	r0, [r0, #0]
 80037d2:	f380 8808 	msr	MSP, r0
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f380 8814 	msr	CONTROL, r0
 80037de:	b662      	cpsie	i
 80037e0:	b661      	cpsie	f
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	df00      	svc	0
 80037ec:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037ee:	0000      	.short	0x0000
 80037f0:	e000ed08 	.word	0xe000ed08

080037f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003804 <vPortEnableVFP+0x10>
 80037f8:	6801      	ldr	r1, [r0, #0]
 80037fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037fe:	6001      	str	r1, [r0, #0]
 8003800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003802:	0000      	.short	0x0000
 8003804:	e000ed88 	.word	0xe000ed88

08003808 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8003808:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <prvTaskExitError+0x3c>)
 800380a:	681b      	ldr	r3, [r3, #0]
{
 800380c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800380e:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8003810:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8003812:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8003814:	d008      	beq.n	8003828 <prvTaskExitError+0x20>
 8003816:	f04f 0340 	mov.w	r3, #64	; 0x40
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	e7fe      	b.n	8003826 <prvTaskExitError+0x1e>
 8003828:	f04f 0340 	mov.w	r3, #64	; 0x40
 800382c:	f383 8811 	msr	BASEPRI, r3
 8003830:	f3bf 8f6f 	isb	sy
 8003834:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003838:	9b01      	ldr	r3, [sp, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d0fc      	beq.n	8003838 <prvTaskExitError+0x30>
}
 800383e:	b002      	add	sp, #8
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	20000008 	.word	0x20000008

08003848 <pxPortInitialiseStack>:
{
 8003848:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800384a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800384e:	4c07      	ldr	r4, [pc, #28]	; (800386c <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003850:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003854:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003858:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800385c:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003860:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8003864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003868:	3844      	subs	r0, #68	; 0x44
 800386a:	4770      	bx	lr
 800386c:	08003809 	.word	0x08003809

08003870 <SVC_Handler>:
	__asm volatile (
 8003870:	4b07      	ldr	r3, [pc, #28]	; (8003890 <pxCurrentTCBConst2>)
 8003872:	6819      	ldr	r1, [r3, #0]
 8003874:	6808      	ldr	r0, [r1, #0]
 8003876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800387a:	f380 8809 	msr	PSP, r0
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f04f 0000 	mov.w	r0, #0
 8003886:	f380 8811 	msr	BASEPRI, r0
 800388a:	4770      	bx	lr
 800388c:	f3af 8000 	nop.w

08003890 <pxCurrentTCBConst2>:
 8003890:	20000b70 	.word	0x20000b70

08003894 <vPortEnterCritical>:
 8003894:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003898:	f383 8811 	msr	BASEPRI, r3
 800389c:	f3bf 8f6f 	isb	sy
 80038a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80038a4:	4a0b      	ldr	r2, [pc, #44]	; (80038d4 <vPortEnterCritical+0x40>)
 80038a6:	6813      	ldr	r3, [r2, #0]
 80038a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80038aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80038ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80038ae:	d000      	beq.n	80038b2 <vPortEnterCritical+0x1e>
}
 80038b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80038b6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f7      	beq.n	80038b0 <vPortEnterCritical+0x1c>
 80038c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038c4:	f383 8811 	msr	BASEPRI, r3
 80038c8:	f3bf 8f6f 	isb	sy
 80038cc:	f3bf 8f4f 	dsb	sy
 80038d0:	e7fe      	b.n	80038d0 <vPortEnterCritical+0x3c>
 80038d2:	bf00      	nop
 80038d4:	20000008 	.word	0x20000008

080038d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <vPortExitCritical+0x24>)
 80038da:	6813      	ldr	r3, [r2, #0]
 80038dc:	b943      	cbnz	r3, 80038f0 <vPortExitCritical+0x18>
 80038de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038e2:	f383 8811 	msr	BASEPRI, r3
 80038e6:	f3bf 8f6f 	isb	sy
 80038ea:	f3bf 8f4f 	dsb	sy
 80038ee:	e7fe      	b.n	80038ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80038f0:	3b01      	subs	r3, #1
 80038f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038f4:	b90b      	cbnz	r3, 80038fa <vPortExitCritical+0x22>
	__asm volatile
 80038f6:	f383 8811 	msr	BASEPRI, r3
}
 80038fa:	4770      	bx	lr
 80038fc:	20000008 	.word	0x20000008

08003900 <PendSV_Handler>:
	__asm volatile
 8003900:	f3ef 8009 	mrs	r0, PSP
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	4b15      	ldr	r3, [pc, #84]	; (8003960 <pxCurrentTCBConst>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	f01e 0f10 	tst.w	lr, #16
 8003910:	bf08      	it	eq
 8003912:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003916:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800391a:	6010      	str	r0, [r2, #0]
 800391c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003920:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003924:	f380 8811 	msr	BASEPRI, r0
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f7ff fb0e 	bl	8002f50 <vTaskSwitchContext>
 8003934:	f04f 0000 	mov.w	r0, #0
 8003938:	f380 8811 	msr	BASEPRI, r0
 800393c:	bc09      	pop	{r0, r3}
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	6808      	ldr	r0, [r1, #0]
 8003942:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003946:	f01e 0f10 	tst.w	lr, #16
 800394a:	bf08      	it	eq
 800394c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003950:	f380 8809 	msr	PSP, r0
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	f3af 8000 	nop.w

08003960 <pxCurrentTCBConst>:
 8003960:	20000b70 	.word	0x20000b70

08003964 <xPortSysTickHandler>:
{
 8003964:	b508      	push	{r3, lr}
	__asm volatile
 8003966:	f04f 0340 	mov.w	r3, #64	; 0x40
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003976:	f7ff fadb 	bl	8002f30 <xTaskIncrementTick>
 800397a:	b128      	cbz	r0, 8003988 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800397c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003984:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003988:	2300      	movs	r3, #0
 800398a:	f383 8811 	msr	BASEPRI, r3
}
 800398e:	bd08      	pop	{r3, pc}

08003990 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003990:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003994:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003996:	4906      	ldr	r1, [pc, #24]	; (80039b0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003998:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800399a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800399c:	680b      	ldr	r3, [r1, #0]
 800399e:	4805      	ldr	r0, [pc, #20]	; (80039b4 <vPortSetupTimerInterrupt+0x24>)
 80039a0:	fba0 0303 	umull	r0, r3, r0, r3
 80039a4:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039a6:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039a8:	3b01      	subs	r3, #1
 80039aa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80039ac:	6111      	str	r1, [r2, #16]
}
 80039ae:	4770      	bx	lr
 80039b0:	20000000 	.word	0x20000000
 80039b4:	10624dd3 	.word	0x10624dd3

080039b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80039bc:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <xPortStartScheduler+0x128>)
 80039be:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80039c2:	4291      	cmp	r1, r2
 80039c4:	d041      	beq.n	8003a4a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80039ca:	4b46      	ldr	r3, [pc, #280]	; (8003ae4 <xPortStartScheduler+0x12c>)
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d033      	beq.n	8003a38 <xPortStartScheduler+0x80>
{
 80039d0:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039d2:	4b45      	ldr	r3, [pc, #276]	; (8003ae8 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d4:	4c45      	ldr	r4, [pc, #276]	; (8003aec <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039d6:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039d8:	4845      	ldr	r0, [pc, #276]	; (8003af0 <xPortStartScheduler+0x138>)
{
 80039da:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039dc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039e2:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039f0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039f8:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039fa:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039fc:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039fe:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a00:	bf48      	it	mi
 8003a02:	2206      	movmi	r2, #6
 8003a04:	d50f      	bpl.n	8003a26 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003a06:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003a16:	061b      	lsls	r3, r3, #24
 8003a18:	4611      	mov	r1, r2
 8003a1a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003a1e:	d4f2      	bmi.n	8003a06 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a20:	2903      	cmp	r1, #3
 8003a22:	d01b      	beq.n	8003a5c <xPortStartScheduler+0xa4>
 8003a24:	6001      	str	r1, [r0, #0]
	__asm volatile
 8003a26:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	e7fe      	b.n	8003a36 <xPortStartScheduler+0x7e>
 8003a38:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a48:	e7fe      	b.n	8003a48 <xPortStartScheduler+0x90>
 8003a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a5a:	e7fe      	b.n	8003a5a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a5c:	9b02      	ldr	r3, [sp, #8]
 8003a5e:	4a22      	ldr	r2, [pc, #136]	; (8003ae8 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8003a60:	4d24      	ldr	r5, [pc, #144]	; (8003af4 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a62:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a66:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a6a:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a6c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a6e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a70:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003a74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a78:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a7c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003a80:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a84:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8003a88:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8003a8a:	f7ff ff81 	bl	8003990 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003a8e:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8003a90:	f7ff feb0 	bl	80037f4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a94:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003a98:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a9c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8003aa0:	f7ff fe94 	bl	80037cc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003aa4:	f7ff fa54 	bl	8002f50 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8003aa8:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8003aaa:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8003aac:	3301      	adds	r3, #1
 8003aae:	d008      	beq.n	8003ac2 <xPortStartScheduler+0x10a>
 8003ab0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	e7fe      	b.n	8003ac0 <xPortStartScheduler+0x108>
 8003ac2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ac6:	f383 8811 	msr	BASEPRI, r3
 8003aca:	f3bf 8f6f 	isb	sy
 8003ace:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0fc      	beq.n	8003ad2 <xPortStartScheduler+0x11a>
}
 8003ad8:	2000      	movs	r0, #0
 8003ada:	b004      	add	sp, #16
 8003adc:	bd70      	pop	{r4, r5, r6, pc}
 8003ade:	bf00      	nop
 8003ae0:	410fc271 	.word	0x410fc271
 8003ae4:	410fc270 	.word	0x410fc270
 8003ae8:	e000e400 	.word	0xe000e400
 8003aec:	20001198 	.word	0x20001198
 8003af0:	2000119c 	.word	0x2000119c
 8003af4:	20000008 	.word	0x20000008

08003af8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003af8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003afc:	2b0f      	cmp	r3, #15
 8003afe:	d90e      	bls.n	8003b1e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b00:	4911      	ldr	r1, [pc, #68]	; (8003b48 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b02:	4a12      	ldr	r2, [pc, #72]	; (8003b4c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003b04:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d908      	bls.n	8003b1e <vPortValidateInterruptPriority+0x26>
 8003b0c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	e7fe      	b.n	8003b1c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003b1e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <vPortValidateInterruptPriority+0x58>)
 8003b24:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d908      	bls.n	8003b44 <vPortValidateInterruptPriority+0x4c>
 8003b32:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	e7fe      	b.n	8003b42 <vPortValidateInterruptPriority+0x4a>
	}
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	e000e3f0 	.word	0xe000e3f0
 8003b4c:	20001198 	.word	0x20001198
 8003b50:	2000119c 	.word	0x2000119c

08003b54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8003b5a:	f7ff f9cb 	bl	8002ef4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b5e:	4b53      	ldr	r3, [pc, #332]	; (8003cac <pvPortMalloc+0x158>)
 8003b60:	681d      	ldr	r5, [r3, #0]
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d070      	beq.n	8003c48 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b66:	4b52      	ldr	r3, [pc, #328]	; (8003cb0 <pvPortMalloc+0x15c>)
 8003b68:	681f      	ldr	r7, [r3, #0]
 8003b6a:	423e      	tst	r6, r7
 8003b6c:	d12e      	bne.n	8003bcc <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b6e:	b36e      	cbz	r6, 8003bcc <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8003b70:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b74:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b76:	bf1c      	itt	ne
 8003b78:	f024 0407 	bicne.w	r4, r4, #7
 8003b7c:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b7e:	b32c      	cbz	r4, 8003bcc <pvPortMalloc+0x78>
 8003b80:	f8df c140 	ldr.w	ip, [pc, #320]	; 8003cc4 <pvPortMalloc+0x170>
 8003b84:	f8dc 6000 	ldr.w	r6, [ip]
 8003b88:	42a6      	cmp	r6, r4
 8003b8a:	d31f      	bcc.n	8003bcc <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003b8c:	4849      	ldr	r0, [pc, #292]	; (8003cb4 <pvPortMalloc+0x160>)
 8003b8e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b90:	e003      	b.n	8003b9a <pvPortMalloc+0x46>
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	b122      	cbz	r2, 8003ba0 <pvPortMalloc+0x4c>
 8003b96:	4618      	mov	r0, r3
 8003b98:	4613      	mov	r3, r2
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	42a1      	cmp	r1, r4
 8003b9e:	d3f8      	bcc.n	8003b92 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003ba0:	42ab      	cmp	r3, r5
 8003ba2:	d013      	beq.n	8003bcc <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003ba4:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003ba6:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003ba8:	f858 eb08 	ldr.w	lr, [r8], #8
 8003bac:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003bb0:	2a10      	cmp	r2, #16
 8003bb2:	d92b      	bls.n	8003c0c <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bb4:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bb6:	0748      	lsls	r0, r1, #29
 8003bb8:	d011      	beq.n	8003bde <pvPortMalloc+0x8a>
 8003bba:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	e7fe      	b.n	8003bca <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bcc:	f7ff f99a 	bl	8002f04 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003bd0:	f04f 0800 	mov.w	r8, #0
 8003bd4:	f005 f80e 	bl	8008bf4 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8003bd8:	4640      	mov	r0, r8
 8003bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bde:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003be0:	4a34      	ldr	r2, [pc, #208]	; (8003cb4 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 8003be2:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003be4:	4614      	mov	r4, r2
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	4291      	cmp	r1, r2
 8003bea:	d8fb      	bhi.n	8003be4 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bec:	6860      	ldr	r0, [r4, #4]
 8003bee:	eb04 0e00 	add.w	lr, r4, r0
 8003bf2:	4571      	cmp	r1, lr
 8003bf4:	d04a      	beq.n	8003c8c <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bf6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8003bfa:	eb01 000e 	add.w	r0, r1, lr
 8003bfe:	4282      	cmp	r2, r0
 8003c00:	d04b      	beq.n	8003c9a <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003c02:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c04:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c06:	bf18      	it	ne
 8003c08:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c0a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c0c:	482a      	ldr	r0, [pc, #168]	; (8003cb8 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 8003c0e:	4a2b      	ldr	r2, [pc, #172]	; (8003cbc <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c10:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c12:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c14:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c16:	bf38      	it	cc
 8003c18:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c1a:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8003c22:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c24:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 8003c28:	3301      	adds	r3, #1
 8003c2a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8003c2c:	f7ff f96a 	bl	8002f04 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c30:	f018 0f07 	tst.w	r8, #7
 8003c34:	d0d0      	beq.n	8003bd8 <pvPortMalloc+0x84>
 8003c36:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	e7fe      	b.n	8003c46 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 8003c48:	491d      	ldr	r1, [pc, #116]	; (8003cc0 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c4a:	4c19      	ldr	r4, [pc, #100]	; (8003cb0 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c4c:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c4e:	bf14      	ite	ne
 8003c50:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c52:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c54:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 8003c58:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c5c:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c60:	bf18      	it	ne
 8003c62:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c66:	4914      	ldr	r1, [pc, #80]	; (8003cb8 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 8003c68:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c6a:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c6c:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c6e:	4a15      	ldr	r2, [pc, #84]	; (8003cc4 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c70:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c72:	4910      	ldr	r1, [pc, #64]	; (8003cb4 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c74:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c76:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8003c7a:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c7c:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c7e:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c80:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003c82:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c86:	e9c0 5300 	strd	r5, r3, [r0]
}
 8003c8a:	e76e      	b.n	8003b6a <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c8c:	6849      	ldr	r1, [r1, #4]
 8003c8e:	eb00 0e01 	add.w	lr, r0, r1
 8003c92:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8003c96:	4621      	mov	r1, r4
 8003c98:	e7af      	b.n	8003bfa <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c9a:	42aa      	cmp	r2, r5
 8003c9c:	d0b1      	beq.n	8003c02 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c9e:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ca4:	4470      	add	r0, lr
 8003ca6:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ca8:	e7ac      	b.n	8003c04 <pvPortMalloc+0xb0>
 8003caa:	bf00      	nop
 8003cac:	200011a0 	.word	0x200011a0
 8003cb0:	2000b1a4 	.word	0x2000b1a4
 8003cb4:	2000b1b8 	.word	0x2000b1b8
 8003cb8:	2000b1ac 	.word	0x2000b1ac
 8003cbc:	2000b1b0 	.word	0x2000b1b0
 8003cc0:	200011a4 	.word	0x200011a4
 8003cc4:	2000b1a8 	.word	0x2000b1a8

08003cc8 <vPortFree>:
	if( pv != NULL )
 8003cc8:	b1d0      	cbz	r0, 8003d00 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cca:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <vPortFree+0xb0>)
 8003ccc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	4213      	tst	r3, r2
 8003cd4:	d00b      	beq.n	8003cee <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cd6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003cda:	b191      	cbz	r1, 8003d02 <vPortFree+0x3a>
 8003cdc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ce0:	f383 8811 	msr	BASEPRI, r3
 8003ce4:	f3bf 8f6f 	isb	sy
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	e7fe      	b.n	8003cec <vPortFree+0x24>
 8003cee:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cfe:	e7fe      	b.n	8003cfe <vPortFree+0x36>
 8003d00:	4770      	bx	lr
{
 8003d02:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d04:	ea23 0302 	bic.w	r3, r3, r2
{
 8003d08:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d0a:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d0e:	4c1b      	ldr	r4, [pc, #108]	; (8003d7c <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003d10:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8003d12:	f7ff f8ef 	bl	8002ef4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d16:	9801      	ldr	r0, [sp, #4]
 8003d18:	6822      	ldr	r2, [r4, #0]
 8003d1a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d1e:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d20:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8003d22:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d24:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d26:	461a      	mov	r2, r3
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4298      	cmp	r0, r3
 8003d2c:	d8fb      	bhi.n	8003d26 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d2e:	6854      	ldr	r4, [r2, #4]
 8003d30:	eb02 0e04 	add.w	lr, r2, r4
 8003d34:	4570      	cmp	r0, lr
 8003d36:	d01a      	beq.n	8003d6e <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d38:	eb00 0c01 	add.w	ip, r0, r1
 8003d3c:	4563      	cmp	r3, ip
 8003d3e:	d00c      	beq.n	8003d5a <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d40:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003d42:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d44:	bf18      	it	ne
 8003d46:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8003d48:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <vPortFree+0xbc>)
 8003d4a:	6813      	ldr	r3, [r2, #0]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]
}
 8003d50:	b002      	add	sp, #8
 8003d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003d56:	f7ff b8d5 	b.w	8002f04 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d5a:	4c0b      	ldr	r4, [pc, #44]	; (8003d88 <vPortFree+0xc0>)
 8003d5c:	6824      	ldr	r4, [r4, #0]
 8003d5e:	42a3      	cmp	r3, r4
 8003d60:	d0ee      	beq.n	8003d40 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d62:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d66:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d68:	e9c0 3100 	strd	r3, r1, [r0]
 8003d6c:	e7e9      	b.n	8003d42 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d6e:	4421      	add	r1, r4
 8003d70:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003d72:	4610      	mov	r0, r2
 8003d74:	e7e0      	b.n	8003d38 <vPortFree+0x70>
 8003d76:	bf00      	nop
 8003d78:	2000b1a4 	.word	0x2000b1a4
 8003d7c:	2000b1a8 	.word	0x2000b1a8
 8003d80:	2000b1b8 	.word	0x2000b1b8
 8003d84:	2000b1b4 	.word	0x2000b1b4
 8003d88:	200011a0 	.word	0x200011a0

08003d8c <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 8003d8c:	b199      	cbz	r1, 8003db6 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 8003d8e:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 8003d90:	22ff      	movs	r2, #255	; 0xff
 8003d92:	4d0a      	ldr	r5, [pc, #40]	; (8003dbc <cal_crc16+0x30>)
 8003d94:	4c0a      	ldr	r4, [pc, #40]	; (8003dc0 <cal_crc16+0x34>)
 8003d96:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 8003d9a:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 8003d9c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003da0:	4053      	eors	r3, r2
    while(length--) {
 8003da2:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8003da4:	5cea      	ldrb	r2, [r5, r3]
 8003da6:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 8003daa:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 8003dac:	d1f6      	bne.n	8003d9c <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 8003dae:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8003db2:	bc30      	pop	{r4, r5}
 8003db4:	4770      	bx	lr
    while(length--) {
 8003db6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8003dba:	4770      	bx	lr
 8003dbc:	0800c7a4 	.word	0x0800c7a4
 8003dc0:	0800c8a4 	.word	0x0800c8a4

08003dc4 <_ZL15set_response_okm12lora_event_t>:
//		LOG_LEVEL(TAG, "LoRa transmit: %s", str);
		xSemaphoreGive(tranfer_smp);
	}
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	460a      	mov	r2, r1
 8003dc8:	b086      	sub	sp, #24
 8003dca:	4603      	mov	r3, r0
	uint16_t crc = 0;
	char *temp;
	char *response_to_device;
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003dcc:	4919      	ldr	r1, [pc, #100]	; (8003e34 <_ZL15set_response_okm12lora_event_t+0x70>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8003dce:	9302      	str	r3, [sp, #8]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f000 febd 	bl	8004b50 <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 8003dd6:	9b02      	ldr	r3, [sp, #8]
 8003dd8:	4917      	ldr	r1, [pc, #92]	; (8003e38 <_ZL15set_response_okm12lora_event_t+0x74>)
 8003dda:	e9cd 0302 	strd	r0, r3, [sp, #8]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003dde:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 8003de0:	a804      	add	r0, sp, #16
 8003de2:	f005 fbd1 	bl	8009588 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8003de6:	9c04      	ldr	r4, [sp, #16]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7fc fa0b 	bl	8000204 <strlen>
 8003dee:	b281      	uxth	r1, r0
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7ff ffcb 	bl	8003d8c <cal_crc16>
 8003df6:	4604      	mov	r4, r0
	free(temp);
 8003df8:	9804      	ldr	r0, [sp, #16]
 8003dfa:	f005 fc15 	bl	8009628 <free>

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, (unsigned int)addr, crc);
 8003dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e02:	490e      	ldr	r1, [pc, #56]	; (8003e3c <_ZL15set_response_okm12lora_event_t+0x78>)
 8003e04:	9400      	str	r4, [sp, #0]
 8003e06:	a805      	add	r0, sp, #20
 8003e08:	f005 fbbe 	bl	8009588 <asiprintf>

	if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 8003e0c:	4a0c      	ldr	r2, [pc, #48]	; (8003e40 <_ZL15set_response_okm12lora_event_t+0x7c>)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	6810      	ldr	r0, [r2, #0]
 8003e12:	a905      	add	r1, sp, #20
 8003e14:	2202      	movs	r2, #2
 8003e16:	f7fd fd4f 	bl	80018b8 <xQueueGenericSend>
 8003e1a:	b108      	cbz	r0, 8003e20 <_ZL15set_response_okm12lora_event_t+0x5c>
		loraif_debug((char *)"Can't send to response_queue", __LINE__, __FUNCTION__);
	}
}
 8003e1c:	b006      	add	sp, #24
 8003e1e:	bd10      	pop	{r4, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <_ZL15set_response_okm12lora_event_t+0x80>)
 8003e22:	9300      	str	r3, [sp, #0]
 8003e24:	4a08      	ldr	r2, [pc, #32]	; (8003e48 <_ZL15set_response_okm12lora_event_t+0x84>)
 8003e26:	4909      	ldr	r1, [pc, #36]	; (8003e4c <_ZL15set_response_okm12lora_event_t+0x88>)
 8003e28:	4809      	ldr	r0, [pc, #36]	; (8003e50 <_ZL15set_response_okm12lora_event_t+0x8c>)
 8003e2a:	23ac      	movs	r3, #172	; 0xac
 8003e2c:	f004 ffae 	bl	8008d8c <LOG_DEBUG>
}
 8003e30:	b006      	add	sp, #24
 8003e32:	bd10      	pop	{r4, pc}
 8003e34:	2000000c 	.word	0x2000000c
 8003e38:	0800c9a4 	.word	0x0800c9a4
 8003e3c:	0800c9c4 	.word	0x0800c9c4
 8003e40:	2000b1e0 	.word	0x2000b1e0
 8003e44:	0800ca34 	.word	0x0800ca34
 8003e48:	0800c9f0 	.word	0x0800c9f0
 8003e4c:	0800ca10 	.word	0x0800ca10
 8003e50:	0800ca2c 	.word	0x0800ca2c
 8003e54:	00000000 	.word	0x00000000

08003e58 <loraif_init>:
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e58:	b5f0      	push	{r4, r5, r6, r7, lr}
	tim_config_t conf = {
 8003e5a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8003ed0 <loraif_init+0x78>
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e5e:	461d      	mov	r5, r3
	loraif = lora;
 8003e60:	4b1d      	ldr	r3, [pc, #116]	; (8003ed8 <loraif_init+0x80>)
	timer = tim;
 8003e62:	4f1e      	ldr	r7, [pc, #120]	; (8003edc <loraif_init+0x84>)
	loraif = lora;
 8003e64:	6018      	str	r0, [r3, #0]
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e66:	b08d      	sub	sp, #52	; 0x34
	tim_config_t conf = {
 8003e68:	2400      	movs	r4, #0
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e6a:	4616      	mov	r6, r2
	timer->init(&conf);
 8003e6c:	4668      	mov	r0, sp
 8003e6e:	aa02      	add	r2, sp, #8
	tim_config_t conf = {
 8003e70:	ed8d 7b02 	vstr	d7, [sp, #8]
	timer = tim;
 8003e74:	6039      	str	r1, [r7, #0]
	tim_config_t conf = {
 8003e76:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003e7a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003e7e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003e82:	940a      	str	r4, [sp, #40]	; 0x28
	timer->init(&conf);
 8003e84:	f003 fe52 	bl	8007b2c <_ZN3tim4initEP12tim_config_t>
	timer->start();
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	4668      	mov	r0, sp
 8003e8c:	f003 ff68 	bl	8007d60 <_ZN3tim5startEv>
	resp_timeout = timeout;
 8003e90:	4a13      	ldr	r2, [pc, #76]	; (8003ee0 <loraif_init+0x88>)
	max_not_resp = max_not_response;
 8003e92:	4b14      	ldr	r3, [pc, #80]	; (8003ee4 <loraif_init+0x8c>)
	resp_timeout = timeout;
 8003e94:	6016      	str	r6, [r2, #0]
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 8003e96:	2104      	movs	r1, #4
 8003e98:	4622      	mov	r2, r4
 8003e9a:	201e      	movs	r0, #30
	max_not_resp = max_not_response;
 8003e9c:	701d      	strb	r5, [r3, #0]
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 8003e9e:	f7fd fcc9 	bl	8001834 <xQueueGenericCreate>
 8003ea2:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <loraif_init+0x90>)
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8003ea4:	4622      	mov	r2, r4
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 8003ea6:	6018      	str	r0, [r3, #0]
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8003ea8:	2104      	movs	r1, #4
 8003eaa:	201e      	movs	r0, #30
 8003eac:	f7fd fcc2 	bl	8001834 <xQueueGenericCreate>
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <loraif_init+0x94>)
	tranfer_smp = xSemaphoreCreateBinary();
 8003eb2:	4621      	mov	r1, r4
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8003eb4:	6018      	str	r0, [r3, #0]
	tranfer_smp = xSemaphoreCreateBinary();
 8003eb6:	2203      	movs	r2, #3
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7fd fcbb 	bl	8001834 <xQueueGenericCreate>
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <loraif_init+0x98>)
	xSemaphoreGive(tranfer_smp);
 8003ec0:	4623      	mov	r3, r4
	tranfer_smp = xSemaphoreCreateBinary();
 8003ec2:	6010      	str	r0, [r2, #0]
	xSemaphoreGive(tranfer_smp);
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	f7fd fcf6 	bl	80018b8 <xQueueGenericSend>
}
 8003ecc:	b00d      	add	sp, #52	; 0x34
 8003ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ed0:	0000a8c0 	.word	0x0000a8c0
 8003ed4:	0000ffff 	.word	0x0000ffff
 8003ed8:	2000b1d4 	.word	0x2000b1d4
 8003edc:	2000b1e4 	.word	0x2000b1e4
 8003ee0:	2000b1dc 	.word	0x2000b1dc
 8003ee4:	2000b1d8 	.word	0x2000b1d8
 8003ee8:	2000b1ec 	.word	0x2000b1ec
 8003eec:	2000b1e0 	.word	0x2000b1e0
 8003ef0:	2000b1e8 	.word	0x2000b1e8

08003ef4 <loraif_register_event_handler>:
	fpeventhandler = peventhandler;
 8003ef4:	4b01      	ldr	r3, [pc, #4]	; (8003efc <loraif_register_event_handler+0x8>)
 8003ef6:	6018      	str	r0, [r3, #0]
}
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	2000b1d0 	.word	0x2000b1d0

08003f00 <loraif_check_crc>:
bool loraif_check_crc(char *data){
 8003f00:	b570      	push	{r4, r5, r6, lr}
 8003f02:	b086      	sub	sp, #24
	pkt_json_t json;
 8003f04:	2300      	movs	r3, #0
	pkt_t pkt;
 8003f06:	2500      	movs	r5, #0
 8003f08:	2400      	movs	r4, #0
	crc_start = strstr(src_cpy, "\"crc\"");
 8003f0a:	4919      	ldr	r1, [pc, #100]	; (8003f70 <loraif_check_crc+0x70>)
	pkt_json_t json;
 8003f0c:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 8003f0e:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 8003f12:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_crc(char *data){
 8003f16:	4605      	mov	r5, r0
	pkt_json_t json;
 8003f18:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 8003f1a:	f006 fb0b 	bl	800a534 <strstr>
	if(crc_start == NULL) return false;
 8003f1e:	b128      	cbz	r0, 8003f2c <loraif_check_crc+0x2c>
	err = parse_packet(src_cpy, &pkt);
 8003f20:	4604      	mov	r4, r0
 8003f22:	4669      	mov	r1, sp
 8003f24:	4628      	mov	r0, r5
 8003f26:	f000 fd93 	bl	8004a50 <parse_packet>
	if(err != PKT_ERR_OK) return false;
 8003f2a:	b110      	cbz	r0, 8003f32 <loraif_check_crc+0x32>
	if(crc_start == NULL) return false;
 8003f2c:	2000      	movs	r0, #0
}
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <loraif_check_crc+0x74>)
 8003f34:	9801      	ldr	r0, [sp, #4]
 8003f36:	a903      	add	r1, sp, #12
 8003f38:	f000 fc60 	bl	80047fc <json_get_object>
	if(err != PKT_ERR_OK) return false;
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1f5      	bne.n	8003f2c <loraif_check_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 8003f40:	4601      	mov	r1, r0
 8003f42:	2210      	movs	r2, #16
 8003f44:	9805      	ldr	r0, [sp, #20]
 8003f46:	f006 fb8d 	bl	800a664 <strtol>
 8003f4a:	4606      	mov	r6, r0
	json_release_object(&json);
 8003f4c:	a803      	add	r0, sp, #12
 8003f4e:	f000 fd6d 	bl	8004a2c <json_release_object>
	release_packet(&pkt);
 8003f52:	4668      	mov	r0, sp
 8003f54:	f000 fdd6 	bl	8004b04 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 8003f58:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 8003f5a:	b289      	uxth	r1, r1
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	f7ff ff15 	bl	8003d8c <cal_crc16>
	if(crc != icrc) return false;
 8003f62:	b2b6      	uxth	r6, r6
 8003f64:	1a30      	subs	r0, r6, r0
 8003f66:	fab0 f080 	clz	r0, r0
 8003f6a:	0940      	lsrs	r0, r0, #5
}
 8003f6c:	b006      	add	sp, #24
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
 8003f70:	0800ca44 	.word	0x0800ca44
 8003f74:	0800ca4c 	.word	0x0800ca4c

08003f78 <loraif_request>:

void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 8003f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f7c:	460f      	mov	r7, r1
 8003f7e:	b08a      	sub	sp, #40	; 0x28
 8003f80:	4605      	mov	r5, r0
	uint16_t crc = 0;
	char *req_data, *temp;
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003f82:	4959      	ldr	r1, [pc, #356]	; (80040e8 <loraif_request+0x170>)
 8003f84:	4638      	mov	r0, r7
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 8003f86:	461c      	mov	r4, r3
 8003f88:	4616      	mov	r6, r2
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003f8a:	f000 fde1 	bl	8004b50 <cmd_to_str>
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 8003f8e:	462b      	mov	r3, r5
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003f90:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 8003f92:	4956      	ldr	r1, [pc, #344]	; (80040ec <loraif_request+0x174>)
 8003f94:	9005      	str	r0, [sp, #20]
 8003f96:	e9cd 6400 	strd	r6, r4, [sp]
 8003f9a:	a807      	add	r0, sp, #28
 8003f9c:	f005 faf4 	bl	8009588 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8003fa0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003fa4:	4640      	mov	r0, r8
 8003fa6:	f7fc f92d 	bl	8000204 <strlen>
 8003faa:	b281      	uxth	r1, r0
 8003fac:	4640      	mov	r0, r8
 8003fae:	f7ff feed 	bl	8003d8c <cal_crc16>
 8003fb2:	4680      	mov	r8, r0
	free(temp);
 8003fb4:	9807      	ldr	r0, [sp, #28]
 8003fb6:	f005 fb37 	bl	8009628 <free>

	asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,\"crc\":0x%04x}", cmd_str, (unsigned int)dev_address, data, require_resp, crc);
 8003fba:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8003fbe:	9a05      	ldr	r2, [sp, #20]
 8003fc0:	494b      	ldr	r1, [pc, #300]	; (80040f0 <loraif_request+0x178>)
 8003fc2:	9600      	str	r6, [sp, #0]
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	a806      	add	r0, sp, #24
 8003fc8:	f005 fade 	bl	8009588 <asiprintf>

	if(require_resp != 0){
 8003fcc:	b974      	cbnz	r4, 8003fec <loraif_request+0x74>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8003fce:	4c49      	ldr	r4, [pc, #292]	; (80040f4 <loraif_request+0x17c>)
		if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
			loraif_debug((char *)"Can't send to wait_response_queue", __LINE__, __FUNCTION__);
		}
	}

	loraif_transmit(req_data);
 8003fd0:	9d06      	ldr	r5, [sp, #24]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8003fd2:	6820      	ldr	r0, [r4, #0]
 8003fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003fd8:	f7fe f864 	bl	80020a4 <xQueueSemaphoreTake>
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	d161      	bne.n	80040a4 <loraif_request+0x12c>

	free(req_data);
 8003fe0:	9806      	ldr	r0, [sp, #24]
 8003fe2:	f005 fb21 	bl	8009628 <free>
}
 8003fe6:	b00a      	add	sp, #40	; 0x28
 8003fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		loraif_request_prop_t *require_resp_prop = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 8003fec:	200c      	movs	r0, #12
 8003fee:	f005 fb13 	bl	8009618 <malloc>
		require_resp_prop->address = dev_address;
 8003ff2:	6005      	str	r5, [r0, #0]
		require_resp_prop->cmd = cmd;
 8003ff4:	7107      	strb	r7, [r0, #4]
		loraif_request_prop_t *require_resp_prop = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 8003ff6:	4604      	mov	r4, r0
 8003ff8:	9008      	str	r0, [sp, #32]
		require_resp_prop->tick_start = get_tick();
 8003ffa:	f003 fd4f 	bl	8007a9c <get_tick>
 8003ffe:	4d3e      	ldr	r5, [pc, #248]	; (80040f8 <loraif_request+0x180>)
 8004000:	60a0      	str	r0, [r4, #8]
				LOG_ERROR(TAG, "Address = 0x%08x, Command = %d, time start = %lu", tmp_require_resp_prop->address, tmp_require_resp_prop->cmd, tmp_require_resp_prop->tick_start);
 8004002:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8004110 <loraif_request+0x198>
 8004006:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004108 <loraif_request+0x190>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800400a:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8004104 <loraif_request+0x18c>
		require_resp_prop->tick_start = get_tick();
 800400e:	2400      	movs	r4, #0
 8004010:	e000      	b.n	8004014 <loraif_request+0x9c>
		for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 8004012:	3401      	adds	r4, #1
 8004014:	6828      	ldr	r0, [r5, #0]
 8004016:	f7fe fa2d 	bl	8002474 <uxQueueMessagesWaiting>
 800401a:	b2e3      	uxtb	r3, r4
 800401c:	4298      	cmp	r0, r3
			if(xQueueReceive(wait_response_queue, &tmp_require_resp_prop, 2) == pdTRUE){
 800401e:	f04f 0202 	mov.w	r2, #2
 8004022:	a909      	add	r1, sp, #36	; 0x24
		for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 8004024:	d92d      	bls.n	8004082 <loraif_request+0x10a>
			if(xQueueReceive(wait_response_queue, &tmp_require_resp_prop, 2) == pdTRUE){
 8004026:	6828      	ldr	r0, [r5, #0]
 8004028:	f7fd feba 	bl	8001da0 <xQueueReceive>
 800402c:	2801      	cmp	r0, #1
 800402e:	d1f0      	bne.n	8004012 <loraif_request+0x9a>
				LOG_ERROR(TAG, "Address = 0x%08x, Command = %d, time start = %lu", tmp_require_resp_prop->address, tmp_require_resp_prop->cmd, tmp_require_resp_prop->tick_start);
 8004030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004032:	7903      	ldrb	r3, [r0, #4]
 8004034:	6802      	ldr	r2, [r0, #0]
 8004036:	6880      	ldr	r0, [r0, #8]
 8004038:	9000      	str	r0, [sp, #0]
 800403a:	4651      	mov	r1, sl
 800403c:	4648      	mov	r0, r9
 800403e:	f004 fe67 	bl	8008d10 <LOG_ERROR>
				if(tmp_require_resp_prop->address == require_resp_prop->address && tmp_require_resp_prop->cmd == require_resp_prop->cmd){
 8004042:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004044:	9a08      	ldr	r2, [sp, #32]
 8004046:	6807      	ldr	r7, [r0, #0]
 8004048:	6816      	ldr	r6, [r2, #0]
 800404a:	42b7      	cmp	r7, r6
					if(xQueueSend(wait_response_queue, &tmp_require_resp_prop, 2) != pdTRUE){
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	a909      	add	r1, sp, #36	; 0x24
				if(tmp_require_resp_prop->address == require_resp_prop->address && tmp_require_resp_prop->cmd == require_resp_prop->cmd){
 8004052:	d104      	bne.n	800405e <loraif_request+0xe6>
 8004054:	7912      	ldrb	r2, [r2, #4]
 8004056:	f890 c004 	ldrb.w	ip, [r0, #4]
 800405a:	4594      	cmp	ip, r2
 800405c:	d00f      	beq.n	800407e <loraif_request+0x106>
					if(xQueueSend(wait_response_queue, &tmp_require_resp_prop, 2) != pdTRUE){
 800405e:	2202      	movs	r2, #2
 8004060:	6828      	ldr	r0, [r5, #0]
 8004062:	f7fd fc29 	bl	80018b8 <xQueueGenericSend>
 8004066:	2801      	cmp	r0, #1
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004068:	4a24      	ldr	r2, [pc, #144]	; (80040fc <loraif_request+0x184>)
 800406a:	f04f 03cc 	mov.w	r3, #204	; 0xcc
					if(xQueueSend(wait_response_queue, &tmp_require_resp_prop, 2) != pdTRUE){
 800406e:	d0d0      	beq.n	8004012 <loraif_request+0x9a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004070:	4923      	ldr	r1, [pc, #140]	; (8004100 <loraif_request+0x188>)
 8004072:	f8cd 8000 	str.w	r8, [sp]
 8004076:	4648      	mov	r0, r9
 8004078:	f004 fe88 	bl	8008d8c <LOG_DEBUG>
}
 800407c:	e7c9      	b.n	8004012 <loraif_request+0x9a>
					free(tmp_require_resp_prop);
 800407e:	f005 fad3 	bl	8009628 <free>
		if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
 8004082:	6828      	ldr	r0, [r5, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	2202      	movs	r2, #2
 8004088:	a908      	add	r1, sp, #32
 800408a:	f7fd fc15 	bl	80018b8 <xQueueGenericSend>
 800408e:	2801      	cmp	r0, #1
 8004090:	d09d      	beq.n	8003fce <loraif_request+0x56>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004092:	4b1c      	ldr	r3, [pc, #112]	; (8004104 <loraif_request+0x18c>)
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4a19      	ldr	r2, [pc, #100]	; (80040fc <loraif_request+0x184>)
 8004098:	4919      	ldr	r1, [pc, #100]	; (8004100 <loraif_request+0x188>)
 800409a:	481b      	ldr	r0, [pc, #108]	; (8004108 <loraif_request+0x190>)
 800409c:	23d3      	movs	r3, #211	; 0xd3
 800409e:	f004 fe75 	bl	8008d8c <LOG_DEBUG>
}
 80040a2:	e794      	b.n	8003fce <loraif_request+0x56>
		loraif->beginPacket();
 80040a4:	4e19      	ldr	r6, [pc, #100]	; (800410c <loraif_request+0x194>)
 80040a6:	2100      	movs	r1, #0
 80040a8:	6830      	ldr	r0, [r6, #0]
 80040aa:	f000 fffd 	bl	80050a8 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 80040ae:	4628      	mov	r0, r5
 80040b0:	f7fc f8a8 	bl	8000204 <strlen>
 80040b4:	4629      	mov	r1, r5
 80040b6:	4602      	mov	r2, r0
 80040b8:	6830      	ldr	r0, [r6, #0]
 80040ba:	f001 fa25 	bl	8005508 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 80040be:	6830      	ldr	r0, [r6, #0]
 80040c0:	2100      	movs	r1, #0
 80040c2:	f001 f931 	bl	8005328 <_ZN6sx127x9endPacketEb>
		loraif->Receive(0);
 80040c6:	6830      	ldr	r0, [r6, #0]
 80040c8:	2100      	movs	r1, #0
 80040ca:	f001 faf1 	bl	80056b0 <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 80040ce:	2300      	movs	r3, #0
 80040d0:	461a      	mov	r2, r3
 80040d2:	4619      	mov	r1, r3
 80040d4:	6820      	ldr	r0, [r4, #0]
 80040d6:	f7fd fbef 	bl	80018b8 <xQueueGenericSend>
	free(req_data);
 80040da:	9806      	ldr	r0, [sp, #24]
 80040dc:	f005 faa4 	bl	8009628 <free>
}
 80040e0:	b00a      	add	sp, #40	; 0x28
 80040e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c
 80040ec:	0800ca50 	.word	0x0800ca50
 80040f0:	0800ca84 	.word	0x0800ca84
 80040f4:	2000b1e8 	.word	0x2000b1e8
 80040f8:	2000b1ec 	.word	0x2000b1ec
 80040fc:	0800cafc 	.word	0x0800cafc
 8004100:	0800ca10 	.word	0x0800ca10
 8004104:	0800cb20 	.word	0x0800cb20
 8004108:	0800ca2c 	.word	0x0800ca2c
 800410c:	2000b1d4 	.word	0x2000b1d4
 8004110:	0800cac8 	.word	0x0800cac8

08004114 <loraif_request_data>:
			}
		}
	}
}

void loraif_request_data(void){
 8004114:	b570      	push	{r4, r5, r6, lr}
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004116:	4d0a      	ldr	r5, [pc, #40]	; (8004140 <loraif_request_data+0x2c>)
 8004118:	682c      	ldr	r4, [r5, #0]
    if(loraif_device_list.empty()) {
 800411a:	42ac      	cmp	r4, r5
 800411c:	d00e      	beq.n	800413c <loraif_request_data+0x28>
        return;
    }

    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
    	vTaskDelay(1000);
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800411e:	4e09      	ldr	r6, [pc, #36]	; (8004144 <loraif_request_data+0x30>)
    	vTaskDelay(1000);
 8004120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004124:	f7fe fdf0 	bl	8002d08 <vTaskDelay>
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 8004128:	68a2      	ldr	r2, [r4, #8]
 800412a:	2301      	movs	r3, #1
 800412c:	6810      	ldr	r0, [r2, #0]
 800412e:	2105      	movs	r1, #5
 8004130:	4632      	mov	r2, r6
 8004132:	f7ff ff21 	bl	8003f78 <loraif_request>
	_M_node = _M_node->_M_next;
 8004136:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004138:	42ac      	cmp	r4, r5
 800413a:	d1f1      	bne.n	8004120 <loraif_request_data+0xc>
    }
}
 800413c:	bd70      	pop	{r4, r5, r6, pc}
 800413e:	bf00      	nop
 8004140:	2000b1c4 	.word	0x2000b1c4
 8004144:	0800cb30 	.word	0x0800cb30

08004148 <loraif_new_device>:


void loraif_new_device(char *jdata, void *dev_data){
 8004148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800414a:	b089      	sub	sp, #36	; 0x24
	pkt_err_t err;
	pkt_json_t json;
 800414c:	2600      	movs	r6, #0
void loraif_new_device(char *jdata, void *dev_data){
 800414e:	4605      	mov	r5, r0
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004150:	2010      	movs	r0, #16
void loraif_new_device(char *jdata, void *dev_data){
 8004152:	460f      	mov	r7, r1
	pkt_json_t json;
 8004154:	9605      	str	r6, [sp, #20]
 8004156:	f88d 6018 	strb.w	r6, [sp, #24]
 800415a:	9607      	str	r6, [sp, #28]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 800415c:	f005 fa5c 	bl	8009618 <malloc>

    newdev->err_count = 0;
    newdev->data = dev_data;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004160:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <loraif_new_device+0xcc>)
    newdev->err_count = 0;
 8004162:	7206      	strb	r6, [r0, #8]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004164:	4604      	mov	r4, r0
    newdev->data = dev_data;
 8004166:	60c7      	str	r7, [r0, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004168:	a905      	add	r1, sp, #20
 800416a:	4628      	mov	r0, r5
 800416c:	f000 fb46 	bl	80047fc <json_get_object>
	if(err == PKT_ERR_OK)
 8004170:	2800      	cmp	r0, #0
 8004172:	d041      	beq.n	80041f8 <loraif_new_device+0xb0>
		newdev->address = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004174:	a805      	add	r0, sp, #20
 8004176:	f000 fc59 	bl	8004a2c <json_release_object>

	err = json_get_object(jdata, &json, (char *)"name");
 800417a:	4a27      	ldr	r2, [pc, #156]	; (8004218 <loraif_new_device+0xd0>)
 800417c:	a905      	add	r1, sp, #20
 800417e:	4628      	mov	r0, r5
 8004180:	f000 fb3c 	bl	80047fc <json_get_object>
	if(err == PKT_ERR_OK)
 8004184:	2800      	cmp	r0, #0
 8004186:	d03e      	beq.n	8004206 <loraif_new_device+0xbe>
		asprintf(&newdev->name, "%s", json.value);
	json_release_object(&json);
 8004188:	a805      	add	r0, sp, #20
 800418a:	f000 fc4f 	bl	8004a2c <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800418e:	200c      	movs	r0, #12
 8004190:	f005 f988 	bl	80094a4 <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8004194:	4d21      	ldr	r5, [pc, #132]	; (800421c <loraif_new_device+0xd4>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004196:	6084      	str	r4, [r0, #8]
 8004198:	4629      	mov	r1, r5
 800419a:	f005 f994 	bl	80094c6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800419e:	68a9      	ldr	r1, [r5, #8]
 80041a0:	3101      	adds	r1, #1

	loraif_device_list.push_back(newdev);

	char *tmp;
	asprintf(&tmp, "Add device 0x%08x(%s)", (unsigned int)newdev->address, newdev->name);
 80041a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80041a6:	60a9      	str	r1, [r5, #8]
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80041a8:	4c1d      	ldr	r4, [pc, #116]	; (8004220 <loraif_new_device+0xd8>)
	asprintf(&tmp, "Add device 0x%08x(%s)", (unsigned int)newdev->address, newdev->name);
 80041aa:	491e      	ldr	r1, [pc, #120]	; (8004224 <loraif_new_device+0xdc>)
 80041ac:	a803      	add	r0, sp, #12
 80041ae:	f005 f9eb 	bl	8009588 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80041b2:	9a03      	ldr	r2, [sp, #12]
 80041b4:	491c      	ldr	r1, [pc, #112]	; (8004228 <loraif_new_device+0xe0>)
 80041b6:	481d      	ldr	r0, [pc, #116]	; (800422c <loraif_new_device+0xe4>)
 80041b8:	9400      	str	r4, [sp, #0]
 80041ba:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 80041be:	f004 fde5 	bl	8008d8c <LOG_DEBUG>
	loraif_debug(tmp, __LINE__, __FUNCTION__);
	free(tmp);
 80041c2:	9803      	ldr	r0, [sp, #12]
 80041c4:	f005 fa30 	bl	8009628 <free>
      { return iterator(this->_M_impl._M_node._M_next); }
 80041c8:	682c      	ldr	r4, [r5, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80041ca:	42ac      	cmp	r4, r5
 80041cc:	d012      	beq.n	80041f4 <loraif_new_device+0xac>
    	asprintf(&tmp, "Device 0x%08x name \"%s\".", (unsigned int)(*device)->address, (*device)->name);
 80041ce:	4f18      	ldr	r7, [pc, #96]	; (8004230 <loraif_new_device+0xe8>)
    	LOG_MEM("LoRaIF Device properties", tmp);
 80041d0:	4e18      	ldr	r6, [pc, #96]	; (8004234 <loraif_new_device+0xec>)
    	asprintf(&tmp, "Device 0x%08x name \"%s\".", (unsigned int)(*device)->address, (*device)->name);
 80041d2:	68a2      	ldr	r2, [r4, #8]
 80041d4:	4639      	mov	r1, r7
 80041d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80041da:	a804      	add	r0, sp, #16
 80041dc:	f005 f9d4 	bl	8009588 <asiprintf>
    	LOG_MEM("LoRaIF Device properties", tmp);
 80041e0:	9904      	ldr	r1, [sp, #16]
 80041e2:	4630      	mov	r0, r6
 80041e4:	f004 fe10 	bl	8008e08 <LOG_MEM>
    	free(tmp);
 80041e8:	9804      	ldr	r0, [sp, #16]
 80041ea:	f005 fa1d 	bl	8009628 <free>
	_M_node = _M_node->_M_next;
 80041ee:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80041f0:	42ac      	cmp	r4, r5
 80041f2:	d1ee      	bne.n	80041d2 <loraif_new_device+0x8a>

	show_device_list();
}
 80041f4:	b009      	add	sp, #36	; 0x24
 80041f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		newdev->address = strtol(json.value, NULL, 16);
 80041f8:	4601      	mov	r1, r0
 80041fa:	2210      	movs	r2, #16
 80041fc:	9807      	ldr	r0, [sp, #28]
 80041fe:	f006 fa31 	bl	800a664 <strtol>
 8004202:	6020      	str	r0, [r4, #0]
 8004204:	e7b6      	b.n	8004174 <loraif_new_device+0x2c>
		asprintf(&newdev->name, "%s", json.value);
 8004206:	9a07      	ldr	r2, [sp, #28]
 8004208:	490b      	ldr	r1, [pc, #44]	; (8004238 <loraif_new_device+0xf0>)
 800420a:	1d20      	adds	r0, r4, #4
 800420c:	f005 f9bc 	bl	8009588 <asiprintf>
 8004210:	e7ba      	b.n	8004188 <loraif_new_device+0x40>
 8004212:	bf00      	nop
 8004214:	0800cb34 	.word	0x0800cb34
 8004218:	0800cb3c 	.word	0x0800cb3c
 800421c:	2000b1c4 	.word	0x2000b1c4
 8004220:	0800cb5c 	.word	0x0800cb5c
 8004224:	0800cb44 	.word	0x0800cb44
 8004228:	0800ca10 	.word	0x0800ca10
 800422c:	0800ca2c 	.word	0x0800ca2c
 8004230:	0800cb70 	.word	0x0800cb70
 8004234:	0800cb8c 	.word	0x0800cb8c
 8004238:	0800d270 	.word	0x0800d270

0800423c <loraif_remove_device>:

void loraif_remove_device(char *jdata){
 800423c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800423e:	b087      	sub	sp, #28
	pkt_err_t err;
	pkt_json_t json;
 8004240:	2600      	movs	r6, #0
	uint32_t del_addr = 0x00U;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004242:	4a2e      	ldr	r2, [pc, #184]	; (80042fc <loraif_remove_device+0xc0>)
	pkt_json_t json;
 8004244:	9603      	str	r6, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004246:	a903      	add	r1, sp, #12
	pkt_json_t json;
 8004248:	f88d 6010 	strb.w	r6, [sp, #16]
 800424c:	9605      	str	r6, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 800424e:	f000 fad5 	bl	80047fc <json_get_object>
	if(err == PKT_ERR_OK)
 8004252:	2800      	cmp	r0, #0
 8004254:	d040      	beq.n	80042d8 <loraif_remove_device+0x9c>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004256:	4d2a      	ldr	r5, [pc, #168]	; (8004300 <loraif_remove_device+0xc4>)
		del_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004258:	a803      	add	r0, sp, #12
 800425a:	f000 fbe7 	bl	8004a2c <json_release_object>
 800425e:	682c      	ldr	r4, [r5, #0]

    if (loraif_device_list.empty()) {
 8004260:	42ac      	cmp	r4, r5
 8004262:	d040      	beq.n	80042e6 <loraif_remove_device+0xaa>
        return;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == del_addr) {
 8004264:	68a3      	ldr	r3, [r4, #8]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	42b2      	cmp	r2, r6
 800426a:	d00d      	beq.n	8004288 <loraif_remove_device+0x4c>
	_M_node = _M_node->_M_next;
 800426c:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 800426e:	42ac      	cmp	r4, r5
 8004270:	d1f8      	bne.n	8004264 <loraif_remove_device+0x28>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004272:	4b24      	ldr	r3, [pc, #144]	; (8004304 <loraif_remove_device+0xc8>)
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	4a24      	ldr	r2, [pc, #144]	; (8004308 <loraif_remove_device+0xcc>)
 8004278:	4924      	ldr	r1, [pc, #144]	; (800430c <loraif_remove_device+0xd0>)
 800427a:	4825      	ldr	r0, [pc, #148]	; (8004310 <loraif_remove_device+0xd4>)
 800427c:	f44f 73ec 	mov.w	r3, #472	; 0x1d8
 8004280:	f004 fd84 	bl	8008d8c <LOG_DEBUG>
    free(*device);

    loraif_device_list.erase(device);

	show_device_list();
}
 8004284:	b007      	add	sp, #28
 8004286:	bdf0      	pop	{r4, r5, r6, r7, pc}
    free((*device)->name);
 8004288:	6858      	ldr	r0, [r3, #4]
 800428a:	f005 f9cd 	bl	8009628 <free>
    free(*device);
 800428e:	68a0      	ldr	r0, [r4, #8]
 8004290:	f005 f9ca 	bl	8009628 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004294:	68ab      	ldr	r3, [r5, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004296:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004298:	3b01      	subs	r3, #1
 800429a:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800429c:	f005 f91a 	bl	80094d4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 80042a0:	4620      	mov	r0, r4
 80042a2:	210c      	movs	r1, #12
 80042a4:	f005 f8fc 	bl	80094a0 <_ZdlPvj>
      { return iterator(this->_M_impl._M_node._M_next); }
 80042a8:	682c      	ldr	r4, [r5, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80042aa:	42ac      	cmp	r4, r5
 80042ac:	d0ea      	beq.n	8004284 <loraif_remove_device+0x48>
    	asprintf(&tmp, "Device 0x%08x name \"%s\".", (unsigned int)(*device)->address, (*device)->name);
 80042ae:	4f19      	ldr	r7, [pc, #100]	; (8004314 <loraif_remove_device+0xd8>)
    	LOG_MEM("LoRaIF Device properties", tmp);
 80042b0:	4e19      	ldr	r6, [pc, #100]	; (8004318 <loraif_remove_device+0xdc>)
    	asprintf(&tmp, "Device 0x%08x name \"%s\".", (unsigned int)(*device)->address, (*device)->name);
 80042b2:	68a2      	ldr	r2, [r4, #8]
 80042b4:	4639      	mov	r1, r7
 80042b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80042ba:	a802      	add	r0, sp, #8
 80042bc:	f005 f964 	bl	8009588 <asiprintf>
    	LOG_MEM("LoRaIF Device properties", tmp);
 80042c0:	9902      	ldr	r1, [sp, #8]
 80042c2:	4630      	mov	r0, r6
 80042c4:	f004 fda0 	bl	8008e08 <LOG_MEM>
    	free(tmp);
 80042c8:	9802      	ldr	r0, [sp, #8]
 80042ca:	f005 f9ad 	bl	8009628 <free>
	_M_node = _M_node->_M_next;
 80042ce:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80042d0:	42ac      	cmp	r4, r5
 80042d2:	d1ee      	bne.n	80042b2 <loraif_remove_device+0x76>
}
 80042d4:	b007      	add	sp, #28
 80042d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		del_addr = strtol(json.value, NULL, 16);
 80042d8:	4601      	mov	r1, r0
 80042da:	2210      	movs	r2, #16
 80042dc:	9805      	ldr	r0, [sp, #20]
 80042de:	f006 f9c1 	bl	800a664 <strtol>
 80042e2:	4606      	mov	r6, r0
 80042e4:	e7b7      	b.n	8004256 <loraif_remove_device+0x1a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <loraif_remove_device+0xc8>)
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4a0c      	ldr	r2, [pc, #48]	; (800431c <loraif_remove_device+0xe0>)
 80042ec:	4907      	ldr	r1, [pc, #28]	; (800430c <loraif_remove_device+0xd0>)
 80042ee:	4808      	ldr	r0, [pc, #32]	; (8004310 <loraif_remove_device+0xd4>)
 80042f0:	f240 13cb 	movw	r3, #459	; 0x1cb
 80042f4:	f004 fd4a 	bl	8008d8c <LOG_DEBUG>
        return;
 80042f8:	e7c4      	b.n	8004284 <loraif_remove_device+0x48>
 80042fa:	bf00      	nop
 80042fc:	0800cb34 	.word	0x0800cb34
 8004300:	2000b1c4 	.word	0x2000b1c4
 8004304:	0800cbbc 	.word	0x0800cbbc
 8004308:	0800cbd4 	.word	0x0800cbd4
 800430c:	0800ca10 	.word	0x0800ca10
 8004310:	0800ca2c 	.word	0x0800ca2c
 8004314:	0800cb70 	.word	0x0800cb70
 8004318:	0800cb8c 	.word	0x0800cb8c
 800431c:	0800cba8 	.word	0x0800cba8

08004320 <loraif_select_device>:

loraif_dev_t *loraif_select_device(char *jdata){
 8004320:	b510      	push	{r4, lr}
 8004322:	b086      	sub	sp, #24
	pkt_err_t err;
	pkt_json_t json;
 8004324:	2400      	movs	r4, #0
	uint32_t sel_addr = 0x00;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004326:	4a1a      	ldr	r2, [pc, #104]	; (8004390 <loraif_select_device+0x70>)
	pkt_json_t json;
 8004328:	9403      	str	r4, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 800432a:	a903      	add	r1, sp, #12
	pkt_json_t json;
 800432c:	f88d 4010 	strb.w	r4, [sp, #16]
 8004330:	9405      	str	r4, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004332:	f000 fa63 	bl	80047fc <json_get_object>
	if(err == PKT_ERR_OK)
 8004336:	b1c8      	cbz	r0, 800436c <loraif_select_device+0x4c>
		sel_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004338:	a803      	add	r0, sp, #12
 800433a:	f000 fb77 	bl	8004a2c <json_release_object>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800433e:	4915      	ldr	r1, [pc, #84]	; (8004394 <loraif_select_device+0x74>)
 8004340:	680b      	ldr	r3, [r1, #0]

    if (loraif_device_list.empty()) {
 8004342:	428b      	cmp	r3, r1
 8004344:	d019      	beq.n	800437a <loraif_select_device+0x5a>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == sel_addr) {
 8004346:	6898      	ldr	r0, [r3, #8]
 8004348:	6802      	ldr	r2, [r0, #0]
 800434a:	42a2      	cmp	r2, r4
 800434c:	d00c      	beq.n	8004368 <loraif_select_device+0x48>
	_M_node = _M_node->_M_next;
 800434e:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004350:	428b      	cmp	r3, r1
 8004352:	d1f8      	bne.n	8004346 <loraif_select_device+0x26>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004354:	4b10      	ldr	r3, [pc, #64]	; (8004398 <loraif_select_device+0x78>)
 8004356:	4811      	ldr	r0, [pc, #68]	; (800439c <loraif_select_device+0x7c>)
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	4a11      	ldr	r2, [pc, #68]	; (80043a0 <loraif_select_device+0x80>)
 800435c:	4911      	ldr	r1, [pc, #68]	; (80043a4 <loraif_select_device+0x84>)
 800435e:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8004362:	f004 fd13 	bl	8008d8c <LOG_DEBUG>
        ++device;
    }

    if (device == loraif_device_list.end()) {
    	loraif_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
        return NULL;
 8004366:	2000      	movs	r0, #0
    }

    return (*device);
}
 8004368:	b006      	add	sp, #24
 800436a:	bd10      	pop	{r4, pc}
		sel_addr = strtol(json.value, NULL, 16);
 800436c:	4601      	mov	r1, r0
 800436e:	2210      	movs	r2, #16
 8004370:	9805      	ldr	r0, [sp, #20]
 8004372:	f006 f977 	bl	800a664 <strtol>
 8004376:	4604      	mov	r4, r0
 8004378:	e7de      	b.n	8004338 <loraif_select_device+0x18>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800437a:	4b07      	ldr	r3, [pc, #28]	; (8004398 <loraif_select_device+0x78>)
 800437c:	4807      	ldr	r0, [pc, #28]	; (800439c <loraif_select_device+0x7c>)
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <loraif_select_device+0x88>)
 8004382:	4908      	ldr	r1, [pc, #32]	; (80043a4 <loraif_select_device+0x84>)
 8004384:	f240 13ef 	movw	r3, #495	; 0x1ef
 8004388:	f004 fd00 	bl	8008d8c <LOG_DEBUG>
        return NULL;
 800438c:	2000      	movs	r0, #0
 800438e:	e7eb      	b.n	8004368 <loraif_select_device+0x48>
 8004390:	0800cb34 	.word	0x0800cb34
 8004394:	2000b1c4 	.word	0x2000b1c4
 8004398:	0800cc00 	.word	0x0800cc00
 800439c:	0800ca2c 	.word	0x0800ca2c
 80043a0:	0800cbd4 	.word	0x0800cbd4
 80043a4:	0800ca10 	.word	0x0800ca10
 80043a8:	0800cba8 	.word	0x0800cba8

080043ac <loraif_rx_process>:
void loraif_rx_process(void *param){
 80043ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043b0:	b08f      	sub	sp, #60	; 0x3c
	if(xQueueReceive(*queue, &rx_full, 2)){
 80043b2:	6800      	ldr	r0, [r0, #0]
 80043b4:	2202      	movs	r2, #2
 80043b6:	a904      	add	r1, sp, #16
 80043b8:	f7fd fcf2 	bl	8001da0 <xQueueReceive>
 80043bc:	b910      	cbnz	r0, 80043c4 <loraif_rx_process+0x18>
}
 80043be:	b00f      	add	sp, #60	; 0x3c
 80043c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt_json_t json;
 80043c4:	2300      	movs	r3, #0
		pkt_t pkt;
 80043c6:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 80043c8:	9804      	ldr	r0, [sp, #16]
		pkt_json_t json;
 80043ca:	930b      	str	r3, [sp, #44]	; 0x2c
		pkt_t pkt;
 80043cc:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 80043ce:	a908      	add	r1, sp, #32
		pkt_t pkt;
 80043d0:	e9cd 4508 	strd	r4, r5, [sp, #32]
		pkt_json_t json;
 80043d4:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80043d8:	930d      	str	r3, [sp, #52]	; 0x34
		char *evt_data = NULL;
 80043da:	9305      	str	r3, [sp, #20]
		err = parse_packet(rx_full, &pkt);
 80043dc:	f000 fb38 	bl	8004a50 <parse_packet>
		if(err == PKT_ERR_OK){
 80043e0:	4605      	mov	r5, r0
 80043e2:	2800      	cmp	r0, #0
 80043e4:	d154      	bne.n	8004490 <loraif_rx_process+0xe4>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 80043e6:	4986      	ldr	r1, [pc, #536]	; (8004600 <loraif_rx_process+0x254>)
 80043e8:	9808      	ldr	r0, [sp, #32]
 80043ea:	2209      	movs	r2, #9
 80043ec:	f000 fb9a 	bl	8004b24 <str_to_cmd>
 80043f0:	b2c6      	uxtb	r6, r0
			if(cmd == LORA_REQ_ADDRESS){
 80043f2:	2e01      	cmp	r6, #1
				err = json_get_object(pkt.data_str, &json, (char *)"random_number");
 80043f4:	af0b      	add	r7, sp, #44	; 0x2c
			if(cmd == LORA_REQ_ADDRESS){
 80043f6:	d061      	beq.n	80044bc <loraif_rx_process+0x110>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 80043f8:	4a82      	ldr	r2, [pc, #520]	; (8004604 <loraif_rx_process+0x258>)
 80043fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043fc:	4639      	mov	r1, r7
 80043fe:	f000 f9fd 	bl	80047fc <json_get_object>
				uint32_t addr = strtol(json.value, NULL, 16);
 8004402:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004404:	4604      	mov	r4, r0
				uint32_t addr = strtol(json.value, NULL, 16);
 8004406:	4629      	mov	r1, r5
 8004408:	980d      	ldr	r0, [sp, #52]	; 0x34
 800440a:	f006 f92b 	bl	800a664 <strtol>
 800440e:	4680      	mov	r8, r0
				if(err == PKT_ERR_OK){
 8004410:	2c00      	cmp	r4, #0
 8004412:	f040 80c6 	bne.w	80045a2 <loraif_rx_process+0x1f6>
					if(cmd == LORA_ERR){
 8004416:	2e00      	cmp	r6, #0
 8004418:	d071      	beq.n	80044fe <loraif_rx_process+0x152>
					else if(cmd == LORA_UPDATE_ADDRESS){
 800441a:	2e02      	cmp	r6, #2
 800441c:	f000 80c8 	beq.w	80045b0 <loraif_rx_process+0x204>
					else if(cmd == LORA_UPDATE_STATE){
 8004420:	2e03      	cmp	r6, #3
 8004422:	f000 80df 	beq.w	80045e4 <loraif_rx_process+0x238>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 8004426:	2e06      	cmp	r6, #6
 8004428:	4d77      	ldr	r5, [pc, #476]	; (8004608 <loraif_rx_process+0x25c>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800442a:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8004610 <loraif_rx_process+0x264>
 800442e:	f8df a220 	ldr.w	sl, [pc, #544]	; 8004650 <loraif_rx_process+0x2a4>
 8004432:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 8004618 <loraif_rx_process+0x26c>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 8004436:	bf08      	it	eq
 8004438:	2605      	moveq	r6, #5
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 800443a:	6828      	ldr	r0, [r5, #0]
 800443c:	f7fe f81a 	bl	8002474 <uxQueueMessagesWaiting>
 8004440:	b2e3      	uxtb	r3, r4
 8004442:	4298      	cmp	r0, r3
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 2) == pdTRUE){
 8004444:	f04f 0202 	mov.w	r2, #2
 8004448:	a907      	add	r1, sp, #28
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 800444a:	d946      	bls.n	80044da <loraif_rx_process+0x12e>
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 2) == pdTRUE){
 800444c:	6828      	ldr	r0, [r5, #0]
 800444e:	f7fd fca7 	bl	8001da0 <xQueueReceive>
 8004452:	2801      	cmp	r0, #1
 8004454:	f104 0401 	add.w	r4, r4, #1
 8004458:	d1ef      	bne.n	800443a <loraif_rx_process+0x8e>
								if(require_resp_prop->address == addr && require_resp_prop->cmd == cmd){
 800445a:	9807      	ldr	r0, [sp, #28]
 800445c:	6802      	ldr	r2, [r0, #0]
 800445e:	4542      	cmp	r2, r8
									if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
 8004460:	f04f 0300 	mov.w	r3, #0
 8004464:	a907      	add	r1, sp, #28
								if(require_resp_prop->address == addr && require_resp_prop->cmd == cmd){
 8004466:	d103      	bne.n	8004470 <loraif_rx_process+0xc4>
 8004468:	7902      	ldrb	r2, [r0, #4]
 800446a:	42b2      	cmp	r2, r6
 800446c:	f000 80ad 	beq.w	80045ca <loraif_rx_process+0x21e>
									if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
 8004470:	6828      	ldr	r0, [r5, #0]
 8004472:	2202      	movs	r2, #2
 8004474:	f7fd fa20 	bl	80018b8 <xQueueGenericSend>
 8004478:	2801      	cmp	r0, #1
 800447a:	d0de      	beq.n	800443a <loraif_rx_process+0x8e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800447c:	4863      	ldr	r0, [pc, #396]	; (800460c <loraif_rx_process+0x260>)
 800447e:	f8cd b000 	str.w	fp, [sp]
 8004482:	f240 133b 	movw	r3, #315	; 0x13b
 8004486:	4652      	mov	r2, sl
 8004488:	4649      	mov	r1, r9
 800448a:	f004 fc7f 	bl	8008d8c <LOG_DEBUG>
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 800448e:	e7d4      	b.n	800443a <loraif_rx_process+0x8e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004490:	4b5f      	ldr	r3, [pc, #380]	; (8004610 <loraif_rx_process+0x264>)
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	4a5f      	ldr	r2, [pc, #380]	; (8004614 <loraif_rx_process+0x268>)
 8004496:	4960      	ldr	r1, [pc, #384]	; (8004618 <loraif_rx_process+0x26c>)
 8004498:	485c      	ldr	r0, [pc, #368]	; (800460c <loraif_rx_process+0x260>)
 800449a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
 800449e:	f004 fc75 	bl	8008d8c <LOG_DEBUG>
 80044a2:	af0b      	add	r7, sp, #44	; 0x2c
		json_release_object(&json);
 80044a4:	4638      	mov	r0, r7
 80044a6:	f000 fac1 	bl	8004a2c <json_release_object>
		release_packet(&pkt);
 80044aa:	a808      	add	r0, sp, #32
 80044ac:	f000 fb2a 	bl	8004b04 <release_packet>
		free(rx_full);
 80044b0:	9804      	ldr	r0, [sp, #16]
 80044b2:	f005 f8b9 	bl	8009628 <free>
}
 80044b6:	b00f      	add	sp, #60	; 0x3c
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"random_number");
 80044bc:	4a57      	ldr	r2, [pc, #348]	; (800461c <loraif_rx_process+0x270>)
 80044be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044c0:	4639      	mov	r1, r7
 80044c2:	f000 f99b 	bl	80047fc <json_get_object>
				if(err == PKT_ERR_OK){
 80044c6:	b320      	cbz	r0, 8004512 <loraif_rx_process+0x166>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80044c8:	4b51      	ldr	r3, [pc, #324]	; (8004610 <loraif_rx_process+0x264>)
 80044ca:	4a55      	ldr	r2, [pc, #340]	; (8004620 <loraif_rx_process+0x274>)
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	f240 130f 	movw	r3, #271	; 0x10f
 80044d2:	4951      	ldr	r1, [pc, #324]	; (8004618 <loraif_rx_process+0x26c>)
 80044d4:	484d      	ldr	r0, [pc, #308]	; (800460c <loraif_rx_process+0x260>)
 80044d6:	f004 fc59 	bl	8008d8c <LOG_DEBUG>
				json_release_object(&json);
 80044da:	4638      	mov	r0, r7
 80044dc:	f000 faa6 	bl	8004a2c <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 80044e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044e2:	4950      	ldr	r1, [pc, #320]	; (8004624 <loraif_rx_process+0x278>)
 80044e4:	a805      	add	r0, sp, #20
 80044e6:	f005 f84f 	bl	8009588 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, evt_data);
 80044ea:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <loraif_rx_process+0x27c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	b113      	cbz	r3, 80044f6 <loraif_rx_process+0x14a>
 80044f0:	9905      	ldr	r1, [sp, #20]
 80044f2:	4630      	mov	r0, r6
 80044f4:	4798      	blx	r3
			free(evt_data);
 80044f6:	9805      	ldr	r0, [sp, #20]
 80044f8:	f005 f896 	bl	8009628 <free>
 80044fc:	e7d2      	b.n	80044a4 <loraif_rx_process+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80044fe:	4b44      	ldr	r3, [pc, #272]	; (8004610 <loraif_rx_process+0x264>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	4a4a      	ldr	r2, [pc, #296]	; (800462c <loraif_rx_process+0x280>)
 8004504:	4944      	ldr	r1, [pc, #272]	; (8004618 <loraif_rx_process+0x26c>)
 8004506:	4841      	ldr	r0, [pc, #260]	; (800460c <loraif_rx_process+0x260>)
 8004508:	f44f 738e 	mov.w	r3, #284	; 0x11c
 800450c:	f004 fc3e 	bl	8008d8c <LOG_DEBUG>
						cmd = LORA_ERR;
 8004510:	e7e3      	b.n	80044da <loraif_rx_process+0x12e>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 8004512:	4601      	mov	r1, r0
 8004514:	2210      	movs	r2, #16
 8004516:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004518:	4c45      	ldr	r4, [pc, #276]	; (8004630 <loraif_rx_process+0x284>)
 800451a:	f006 f8a3 	bl	800a664 <strtol>
					rng_set_seed(rand_num);
 800451e:	f002 fc65 	bl	8006dec <rng_set_seed>
						new_addr = rng_generate_random_number();
 8004522:	f002 fc69 	bl	8006df8 <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004526:	6823      	ldr	r3, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004528:	42a3      	cmp	r3, r4
 800452a:	d006      	beq.n	800453a <loraif_rx_process+0x18e>
        if ((*device)->address == num) {
 800452c:	6899      	ldr	r1, [r3, #8]
 800452e:	6809      	ldr	r1, [r1, #0]
 8004530:	4288      	cmp	r0, r1
 8004532:	d0f6      	beq.n	8004522 <loraif_rx_process+0x176>
	_M_node = _M_node->_M_next;
 8004534:	681b      	ldr	r3, [r3, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004536:	42a3      	cmp	r3, r4
 8004538:	d1f8      	bne.n	800452c <loraif_rx_process+0x180>
					new_addr &= 0x7FFFFFFFU;
 800453a:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,", (unsigned int)new_addr);
 800453e:	493d      	ldr	r1, [pc, #244]	; (8004634 <loraif_rx_process+0x288>)
 8004540:	9203      	str	r2, [sp, #12]
 8004542:	a807      	add	r0, sp, #28
 8004544:	f005 f820 	bl	8009588 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004548:	9c07      	ldr	r4, [sp, #28]
 800454a:	4620      	mov	r0, r4
 800454c:	f7fb fe5a 	bl	8000204 <strlen>
 8004550:	b281      	uxth	r1, r0
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff fc1a 	bl	8003d8c <cal_crc16>
 8004558:	9002      	str	r0, [sp, #8]
					free(temp);
 800455a:	9807      	ldr	r0, [sp, #28]
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800455c:	4c2c      	ldr	r4, [pc, #176]	; (8004610 <loraif_rx_process+0x264>)
					free(temp);
 800455e:	f005 f863 	bl	8009628 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"crc\":0x%04x}", (unsigned int)new_addr, crc);
 8004562:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004566:	4934      	ldr	r1, [pc, #208]	; (8004638 <loraif_rx_process+0x28c>)
 8004568:	a806      	add	r0, sp, #24
 800456a:	f005 f80d 	bl	8009588 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800456e:	9a06      	ldr	r2, [sp, #24]
 8004570:	4929      	ldr	r1, [pc, #164]	; (8004618 <loraif_rx_process+0x26c>)
 8004572:	4826      	ldr	r0, [pc, #152]	; (800460c <loraif_rx_process+0x260>)
 8004574:	9400      	str	r4, [sp, #0]
 8004576:	f240 1307 	movw	r3, #263	; 0x107
 800457a:	f004 fc07 	bl	8008d8c <LOG_DEBUG>
					if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 800457e:	4b2f      	ldr	r3, [pc, #188]	; (800463c <loraif_rx_process+0x290>)
 8004580:	a906      	add	r1, sp, #24
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	2202      	movs	r2, #2
 8004586:	2300      	movs	r3, #0
 8004588:	f7fd f996 	bl	80018b8 <xQueueGenericSend>
 800458c:	2800      	cmp	r0, #0
 800458e:	d1a7      	bne.n	80044e0 <loraif_rx_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004590:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <loraif_rx_process+0x294>)
 8004592:	4921      	ldr	r1, [pc, #132]	; (8004618 <loraif_rx_process+0x26c>)
 8004594:	481d      	ldr	r0, [pc, #116]	; (800460c <loraif_rx_process+0x260>)
 8004596:	9400      	str	r4, [sp, #0]
 8004598:	f240 1309 	movw	r3, #265	; 0x109
 800459c:	f004 fbf6 	bl	8008d8c <LOG_DEBUG>
}
 80045a0:	e79e      	b.n	80044e0 <loraif_rx_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045a2:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <loraif_rx_process+0x264>)
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	4a27      	ldr	r2, [pc, #156]	; (8004644 <loraif_rx_process+0x298>)
 80045a8:	f240 134b 	movw	r3, #331	; 0x14b
					cmd = LORA_ERR;
 80045ac:	462e      	mov	r6, r5
 80045ae:	e790      	b.n	80044d2 <loraif_rx_process+0x126>
							set_response_ok(addr, cmd);
 80045b0:	4631      	mov	r1, r6
 80045b2:	f7ff fc07 	bl	8003dc4 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <loraif_rx_process+0x264>)
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	4a23      	ldr	r2, [pc, #140]	; (8004648 <loraif_rx_process+0x29c>)
 80045bc:	4916      	ldr	r1, [pc, #88]	; (8004618 <loraif_rx_process+0x26c>)
 80045be:	4813      	ldr	r0, [pc, #76]	; (800460c <loraif_rx_process+0x260>)
 80045c0:	f44f 7391 	mov.w	r3, #290	; 0x122
 80045c4:	f004 fbe2 	bl	8008d8c <LOG_DEBUG>
							goto event_handle;
 80045c8:	e78a      	b.n	80044e0 <loraif_rx_process+0x134>
									free(require_resp_prop);
 80045ca:	f005 f82d 	bl	8009628 <free>
							loraif_dev_t *err_dev = loraif_select_device(pkt.data_str);
 80045ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045d0:	f7ff fea6 	bl	8004320 <loraif_select_device>
 80045d4:	4603      	mov	r3, r0
							err_dev->err_count = 0;
 80045d6:	2200      	movs	r2, #0
							set_response_ok(addr, cmd);
 80045d8:	4640      	mov	r0, r8
							err_dev->err_count = 0;
 80045da:	721a      	strb	r2, [r3, #8]
							set_response_ok(addr, cmd);
 80045dc:	4631      	mov	r1, r6
 80045de:	f7ff fbf1 	bl	8003dc4 <_ZL15set_response_okm12lora_event_t>
							goto event_handle;
 80045e2:	e77d      	b.n	80044e0 <loraif_rx_process+0x134>
							set_response_ok(addr, cmd);
 80045e4:	4631      	mov	r1, r6
 80045e6:	f7ff fbed 	bl	8003dc4 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <loraif_rx_process+0x264>)
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	4a17      	ldr	r2, [pc, #92]	; (800464c <loraif_rx_process+0x2a0>)
 80045f0:	4909      	ldr	r1, [pc, #36]	; (8004618 <loraif_rx_process+0x26c>)
 80045f2:	4806      	ldr	r0, [pc, #24]	; (800460c <loraif_rx_process+0x260>)
 80045f4:	f44f 7394 	mov.w	r3, #296	; 0x128
 80045f8:	f004 fbc8 	bl	8008d8c <LOG_DEBUG>
							goto event_handle;
 80045fc:	e770      	b.n	80044e0 <loraif_rx_process+0x134>
 80045fe:	bf00      	nop
 8004600:	2000000c 	.word	0x2000000c
 8004604:	0800cb34 	.word	0x0800cb34
 8004608:	2000b1ec 	.word	0x2000b1ec
 800460c:	0800ca2c 	.word	0x0800ca2c
 8004610:	0800cc4c 	.word	0x0800cc4c
 8004614:	0800ccd4 	.word	0x0800ccd4
 8004618:	0800ca10 	.word	0x0800ca10
 800461c:	0800cc18 	.word	0x0800cc18
 8004620:	0800cc60 	.word	0x0800cc60
 8004624:	0800d270 	.word	0x0800d270
 8004628:	2000b1d0 	.word	0x2000b1d0
 800462c:	0800cc84 	.word	0x0800cc84
 8004630:	2000b1c4 	.word	0x2000b1c4
 8004634:	0800ccf0 	.word	0x0800ccf0
 8004638:	0800cd14 	.word	0x0800cd14
 800463c:	2000b1e0 	.word	0x2000b1e0
 8004640:	0800cc28 	.word	0x0800cc28
 8004644:	0800ccc4 	.word	0x0800ccc4
 8004648:	0800cc94 	.word	0x0800cc94
 800464c:	0800ccb0 	.word	0x0800ccb0
 8004650:	0800cafc 	.word	0x0800cafc

08004654 <loraif_check_timeout>:
void loraif_check_timeout(void){
 8004654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004658:	4d32      	ldr	r5, [pc, #200]	; (8004724 <loraif_check_timeout+0xd0>)
			asprintf(&tmp_dbg, "Check Device 0x%08x time = %lu", (unsigned int)require_resp_prop->address, dt);
 800465a:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8004748 <loraif_check_timeout+0xf4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800465e:	4f32      	ldr	r7, [pc, #200]	; (8004728 <loraif_check_timeout+0xd4>)
 8004660:	4e32      	ldr	r6, [pc, #200]	; (800472c <loraif_check_timeout+0xd8>)
void loraif_check_timeout(void){
 8004662:	b087      	sub	sp, #28
 8004664:	2400      	movs	r4, #0
 8004666:	e000      	b.n	800466a <loraif_check_timeout+0x16>
	for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 8004668:	3401      	adds	r4, #1
 800466a:	6828      	ldr	r0, [r5, #0]
 800466c:	f7fd ff02 	bl	8002474 <uxQueueMessagesWaiting>
 8004670:	b2e3      	uxtb	r3, r4
 8004672:	4298      	cmp	r0, r3
 8004674:	d93b      	bls.n	80046ee <loraif_check_timeout+0x9a>
		if(xQueueReceive(wait_response_queue, &require_resp_prop, 2) == pdTRUE){
 8004676:	6828      	ldr	r0, [r5, #0]
 8004678:	2202      	movs	r2, #2
 800467a:	a903      	add	r1, sp, #12
 800467c:	f7fd fb90 	bl	8001da0 <xQueueReceive>
 8004680:	2801      	cmp	r0, #1
 8004682:	d1f1      	bne.n	8004668 <loraif_check_timeout+0x14>
			uint32_t dt = 0, tick_now = get_tick();
 8004684:	f003 fa0a 	bl	8007a9c <get_tick>
			if(tick_now >= require_resp_prop->tick_start) dt = tick_now - require_resp_prop->tick_start;
 8004688:	9a03      	ldr	r2, [sp, #12]
 800468a:	6893      	ldr	r3, [r2, #8]
			asprintf(&tmp_dbg, "Check Device 0x%08x time = %lu", (unsigned int)require_resp_prop->address, dt);
 800468c:	6812      	ldr	r2, [r2, #0]
			if(tick_now >= require_resp_prop->tick_start) dt = tick_now - require_resp_prop->tick_start;
 800468e:	4283      	cmp	r3, r0
				dt = (4294967295 - require_resp_prop->tick_start) + tick_now;
 8004690:	bf8a      	itet	hi
 8004692:	ea6f 0903 	mvnhi.w	r9, r3
			if(tick_now >= require_resp_prop->tick_start) dt = tick_now - require_resp_prop->tick_start;
 8004696:	eba0 0903 	subls.w	r9, r0, r3
				dt = (4294967295 - require_resp_prop->tick_start) + tick_now;
 800469a:	4481      	addhi	r9, r0
			asprintf(&tmp_dbg, "Check Device 0x%08x time = %lu", (unsigned int)require_resp_prop->address, dt);
 800469c:	464b      	mov	r3, r9
 800469e:	4641      	mov	r1, r8
 80046a0:	a804      	add	r0, sp, #16
 80046a2:	f004 ff71 	bl	8009588 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80046a6:	f240 137d 	movw	r3, #381	; 0x17d
 80046aa:	9a04      	ldr	r2, [sp, #16]
 80046ac:	4820      	ldr	r0, [pc, #128]	; (8004730 <loraif_check_timeout+0xdc>)
 80046ae:	9700      	str	r7, [sp, #0]
 80046b0:	4631      	mov	r1, r6
 80046b2:	f004 fb6b 	bl	8008d8c <LOG_DEBUG>
			free(tmp_dbg);
 80046b6:	9804      	ldr	r0, [sp, #16]
 80046b8:	f004 ffb6 	bl	8009628 <free>
			if(dt >= resp_timeout){
 80046bc:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <loraif_check_timeout+0xe0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	454b      	cmp	r3, r9
 80046c2:	d817      	bhi.n	80046f4 <loraif_check_timeout+0xa0>
				asprintf(&evt_data, "{\"addr\":0x%08x}", (unsigned int)require_resp_prop->address);
 80046c4:	9b03      	ldr	r3, [sp, #12]
 80046c6:	491c      	ldr	r1, [pc, #112]	; (8004738 <loraif_check_timeout+0xe4>)
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	a805      	add	r0, sp, #20
 80046cc:	f004 ff5c 	bl	8009588 <asiprintf>
				loraif_dev_t *err_dev = loraif_select_device(evt_data);
 80046d0:	9805      	ldr	r0, [sp, #20]
 80046d2:	f7ff fe25 	bl	8004320 <loraif_select_device>
				if(err_dev->err_count >= max_not_resp){
 80046d6:	4b19      	ldr	r3, [pc, #100]	; (800473c <loraif_check_timeout+0xe8>)
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	7a03      	ldrb	r3, [r0, #8]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d81a      	bhi.n	8004716 <loraif_check_timeout+0xc2>
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEL_DEVICE, evt_data);
 80046e0:	4b17      	ldr	r3, [pc, #92]	; (8004740 <loraif_check_timeout+0xec>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	b1cb      	cbz	r3, 800471a <loraif_check_timeout+0xc6>
 80046e6:	9905      	ldr	r1, [sp, #20]
 80046e8:	2008      	movs	r0, #8
 80046ea:	4798      	blx	r3
 80046ec:	e015      	b.n	800471a <loraif_check_timeout+0xc6>
}
 80046ee:	b007      	add	sp, #28
 80046f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
 80046f4:	6828      	ldr	r0, [r5, #0]
 80046f6:	a903      	add	r1, sp, #12
 80046f8:	2300      	movs	r3, #0
 80046fa:	2202      	movs	r2, #2
 80046fc:	f7fd f8dc 	bl	80018b8 <xQueueGenericSend>
 8004700:	2801      	cmp	r0, #1
 8004702:	d0b1      	beq.n	8004668 <loraif_check_timeout+0x14>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004704:	4a0f      	ldr	r2, [pc, #60]	; (8004744 <loraif_check_timeout+0xf0>)
 8004706:	480a      	ldr	r0, [pc, #40]	; (8004730 <loraif_check_timeout+0xdc>)
 8004708:	9700      	str	r7, [sp, #0]
 800470a:	f240 1391 	movw	r3, #401	; 0x191
 800470e:	4631      	mov	r1, r6
 8004710:	f004 fb3c 	bl	8008d8c <LOG_DEBUG>
}
 8004714:	e7a8      	b.n	8004668 <loraif_check_timeout+0x14>
					err_dev->err_count++;
 8004716:	3301      	adds	r3, #1
 8004718:	7203      	strb	r3, [r0, #8]
				free(evt_data);
 800471a:	9805      	ldr	r0, [sp, #20]
 800471c:	f004 ff84 	bl	8009628 <free>
 8004720:	e7a2      	b.n	8004668 <loraif_check_timeout+0x14>
 8004722:	bf00      	nop
 8004724:	2000b1ec 	.word	0x2000b1ec
 8004728:	0800cd64 	.word	0x0800cd64
 800472c:	0800ca10 	.word	0x0800ca10
 8004730:	0800ca2c 	.word	0x0800ca2c
 8004734:	2000b1dc 	.word	0x2000b1dc
 8004738:	0800cd7c 	.word	0x0800cd7c
 800473c:	2000b1d8 	.word	0x2000b1d8
 8004740:	2000b1d0 	.word	0x2000b1d0
 8004744:	0800cafc 	.word	0x0800cafc
 8004748:	0800cd44 	.word	0x0800cd44

0800474c <loraif_response>:
void loraif_response(void){
 800474c:	b570      	push	{r4, r5, r6, lr}
	if(xQueueReceive(response_queue, &response, 2)){
 800474e:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <loraif_response+0x74>)
void loraif_response(void){
 8004750:	b082      	sub	sp, #8
	if(xQueueReceive(response_queue, &response, 2)){
 8004752:	6818      	ldr	r0, [r3, #0]
 8004754:	2202      	movs	r2, #2
 8004756:	a901      	add	r1, sp, #4
 8004758:	f7fd fb22 	bl	8001da0 <xQueueReceive>
 800475c:	b938      	cbnz	r0, 800476e <loraif_response+0x22>
	loraif_check_timeout();
 800475e:	f7ff ff79 	bl	8004654 <loraif_check_timeout>
	vTaskDelay(500);
 8004762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004766:	f7fe facf 	bl	8002d08 <vTaskDelay>
}
 800476a:	b002      	add	sp, #8
 800476c:	bd70      	pop	{r4, r5, r6, pc}
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 800476e:	4c15      	ldr	r4, [pc, #84]	; (80047c4 <loraif_response+0x78>)
		loraif_transmit(response);
 8004770:	9d01      	ldr	r5, [sp, #4]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004772:	6820      	ldr	r0, [r4, #0]
 8004774:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004778:	f7fd fc94 	bl	80020a4 <xQueueSemaphoreTake>
 800477c:	b918      	cbnz	r0, 8004786 <loraif_response+0x3a>
		free(response);
 800477e:	9801      	ldr	r0, [sp, #4]
 8004780:	f004 ff52 	bl	8009628 <free>
 8004784:	e7eb      	b.n	800475e <loraif_response+0x12>
		loraif->beginPacket();
 8004786:	4e10      	ldr	r6, [pc, #64]	; (80047c8 <loraif_response+0x7c>)
 8004788:	2100      	movs	r1, #0
 800478a:	6830      	ldr	r0, [r6, #0]
 800478c:	f000 fc8c 	bl	80050a8 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 8004790:	4628      	mov	r0, r5
 8004792:	f7fb fd37 	bl	8000204 <strlen>
 8004796:	4629      	mov	r1, r5
 8004798:	4602      	mov	r2, r0
 800479a:	6830      	ldr	r0, [r6, #0]
 800479c:	f000 feb4 	bl	8005508 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 80047a0:	6830      	ldr	r0, [r6, #0]
 80047a2:	2100      	movs	r1, #0
 80047a4:	f000 fdc0 	bl	8005328 <_ZN6sx127x9endPacketEb>
		loraif->Receive(0);
 80047a8:	6830      	ldr	r0, [r6, #0]
 80047aa:	2100      	movs	r1, #0
 80047ac:	f000 ff80 	bl	80056b0 <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 80047b0:	2300      	movs	r3, #0
 80047b2:	6820      	ldr	r0, [r4, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4619      	mov	r1, r3
 80047b8:	f7fd f87e 	bl	80018b8 <xQueueGenericSend>
}
 80047bc:	e7df      	b.n	800477e <loraif_response+0x32>
 80047be:	bf00      	nop
 80047c0:	2000b1e0 	.word	0x2000b1e0
 80047c4:	2000b1e8 	.word	0x2000b1e8
 80047c8:	2000b1d4 	.word	0x2000b1d4

080047cc <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 80047cc:	4b02      	ldr	r3, [pc, #8]	; (80047d8 <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 80047ce:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 80047d0:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 80047d4:	609a      	str	r2, [r3, #8]
}
 80047d6:	4770      	bx	lr
 80047d8:	2000b1c4 	.word	0x2000b1c4

080047dc <_GLOBAL__sub_D_loraif>:
 80047dc:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80047de:	4d06      	ldr	r5, [pc, #24]	; (80047f8 <_GLOBAL__sub_D_loraif+0x1c>)
 80047e0:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 80047e2:	42ac      	cmp	r4, r5
 80047e4:	d006      	beq.n	80047f4 <_GLOBAL__sub_D_loraif+0x18>
 80047e6:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 80047e8:	6824      	ldr	r4, [r4, #0]
 80047ea:	210c      	movs	r1, #12
 80047ec:	f004 fe58 	bl	80094a0 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 80047f0:	42ac      	cmp	r4, r5
 80047f2:	d1f8      	bne.n	80047e6 <_GLOBAL__sub_D_loraif+0xa>
 80047f4:	bd38      	pop	{r3, r4, r5, pc}
 80047f6:	bf00      	nop
 80047f8:	2000b1c4 	.word	0x2000b1c4

080047fc <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 80047fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004800:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004802:	2900      	cmp	r1, #0
 8004804:	d079      	beq.n	80048fa <json_get_object+0xfe>
 8004806:	4614      	mov	r4, r2
 8004808:	2a00      	cmp	r2, #0
 800480a:	d076      	beq.n	80048fa <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 800480c:	7803      	ldrb	r3, [r0, #0]
 800480e:	2b7b      	cmp	r3, #123	; 0x7b
 8004810:	4605      	mov	r5, r0
 8004812:	d166      	bne.n	80048e2 <json_get_object+0xe6>
 8004814:	460e      	mov	r6, r1
	int src_len = strlen(src);
 8004816:	f7fb fcf5 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 800481a:	182b      	adds	r3, r5, r0
	int src_len = strlen(src);
 800481c:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 800481e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004822:	2b7d      	cmp	r3, #125	; 0x7d
 8004824:	d15d      	bne.n	80048e2 <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 8004826:	4622      	mov	r2, r4
 8004828:	4977      	ldr	r1, [pc, #476]	; (8004a08 <json_get_object+0x20c>)
 800482a:	a805      	add	r0, sp, #20
 800482c:	f004 feac 	bl	8009588 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8004830:	9905      	ldr	r1, [sp, #20]
 8004832:	9103      	str	r1, [sp, #12]
 8004834:	4628      	mov	r0, r5
 8004836:	f005 fe7d 	bl	800a534 <strstr>
	free(tmp);
 800483a:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 800483c:	4604      	mov	r4, r0
	free(tmp);
 800483e:	4608      	mov	r0, r1
 8004840:	f004 fef2 	bl	8009628 <free>
	if(pkstart == NULL){
 8004844:	2c00      	cmp	r4, #0
 8004846:	f000 80b3 	beq.w	80049b0 <json_get_object+0x1b4>
		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 800484a:	f104 0801 	add.w	r8, r4, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 800484e:	4640      	mov	r0, r8
 8004850:	f7fb fcd8 	bl	8000204 <strlen>
 8004854:	4623      	mov	r3, r4
 8004856:	2400      	movs	r4, #0
 8004858:	e004      	b.n	8004864 <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 800485a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800485e:	2a22      	cmp	r2, #34	; 0x22
 8004860:	d002      	beq.n	8004868 <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004862:	3401      	adds	r4, #1
 8004864:	42a0      	cmp	r0, r4
 8004866:	dcf8      	bgt.n	800485a <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 8004868:	1c60      	adds	r0, r4, #1
 800486a:	f004 fed5 	bl	8009618 <malloc>
 800486e:	4681      	mov	r9, r0
 8004870:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 8004872:	2800      	cmp	r0, #0
 8004874:	f000 80a9 	beq.w	80049ca <json_get_object+0x1ce>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 8004878:	4622      	mov	r2, r4
 800487a:	4641      	mov	r1, r8
 800487c:	f004 fedc 	bl	8009638 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004880:	1ca3      	adds	r3, r4, #2
	dest->key[key_len] = '\0';
 8004882:	2200      	movs	r2, #0
 8004884:	f809 2004 	strb.w	r2, [r9, r4]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004888:	f818 2003 	ldrb.w	r2, [r8, r3]
 800488c:	2a7b      	cmp	r2, #123	; 0x7b
 800488e:	eb08 0903 	add.w	r9, r8, r3
 8004892:	d03e      	beq.n	8004912 <json_get_object+0x116>
		dest->leaf = true;
 8004894:	2201      	movs	r2, #1
 8004896:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 8004898:	f818 3003 	ldrb.w	r3, [r8, r3]
 800489c:	2b22      	cmp	r3, #34	; 0x22
 800489e:	d06d      	beq.n	800497c <json_get_object+0x180>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 80048a0:	4648      	mov	r0, r9
 80048a2:	f7fb fcaf 	bl	8000204 <strlen>
 80048a6:	2400      	movs	r4, #0
 80048a8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80048ac:	e006      	b.n	80048bc <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 80048ae:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80048b2:	2b7d      	cmp	r3, #125	; 0x7d
 80048b4:	d004      	beq.n	80048c0 <json_get_object+0xc4>
 80048b6:	2b2c      	cmp	r3, #44	; 0x2c
 80048b8:	d002      	beq.n	80048c0 <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 80048ba:	3401      	adds	r4, #1
 80048bc:	42a0      	cmp	r0, r4
 80048be:	dcf6      	bgt.n	80048ae <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 80048c0:	2c00      	cmp	r4, #0
 80048c2:	d06b      	beq.n	800499c <json_get_object+0x1a0>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 80048c4:	1c60      	adds	r0, r4, #1
 80048c6:	f004 fea7 	bl	8009618 <malloc>
 80048ca:	4605      	mov	r5, r0
 80048cc:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 80048ce:	2800      	cmp	r0, #0
 80048d0:	f000 808f 	beq.w	80049f2 <json_get_object+0x1f6>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 80048d4:	4622      	mov	r2, r4
 80048d6:	4649      	mov	r1, r9
 80048d8:	f004 feae 	bl	8009638 <memcpy>
		dest->value[val_len] = '\0';
 80048dc:	2000      	movs	r0, #0
 80048de:	5528      	strb	r0, [r5, r4]
 80048e0:	e008      	b.n	80048f4 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048e2:	4b4a      	ldr	r3, [pc, #296]	; (8004a0c <json_get_object+0x210>)
 80048e4:	484a      	ldr	r0, [pc, #296]	; (8004a10 <json_get_object+0x214>)
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	4a4a      	ldr	r2, [pc, #296]	; (8004a14 <json_get_object+0x218>)
 80048ea:	494b      	ldr	r1, [pc, #300]	; (8004a18 <json_get_object+0x21c>)
 80048ec:	232b      	movs	r3, #43	; 0x2b
 80048ee:	f004 fa4d 	bl	8008d8c <LOG_DEBUG>
		return ret;
 80048f2:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 80048f4:	b007      	add	sp, #28
 80048f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048fa:	4b44      	ldr	r3, [pc, #272]	; (8004a0c <json_get_object+0x210>)
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	4a47      	ldr	r2, [pc, #284]	; (8004a1c <json_get_object+0x220>)
 8004900:	4945      	ldr	r1, [pc, #276]	; (8004a18 <json_get_object+0x21c>)
 8004902:	4843      	ldr	r0, [pc, #268]	; (8004a10 <json_get_object+0x214>)
 8004904:	2326      	movs	r3, #38	; 0x26
 8004906:	f004 fa41 	bl	8008d8c <LOG_DEBUG>
		return ret;
 800490a:	2001      	movs	r0, #1
}
 800490c:	b007      	add	sp, #28
 800490e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 8004912:	7931      	ldrb	r1, [r6, #4]
 8004914:	2900      	cmp	r1, #0
 8004916:	d1bf      	bne.n	8004898 <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 8004918:	eba8 0805 	sub.w	r8, r8, r5
 800491c:	4444      	add	r4, r8
 800491e:	f104 0c02 	add.w	ip, r4, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004922:	4567      	cmp	r7, ip
 8004924:	dd4e      	ble.n	80049c4 <json_get_object+0x1c8>
 8004926:	3401      	adds	r4, #1
 8004928:	4425      	add	r5, r4
 800492a:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 800492c:	4608      	mov	r0, r1
 800492e:	e007      	b.n	8004940 <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8004930:	2a7d      	cmp	r2, #125	; 0x7d
 8004932:	bf08      	it	eq
 8004934:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 8004936:	4281      	cmp	r1, r0
 8004938:	d008      	beq.n	800494c <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 800493a:	3301      	adds	r3, #1
 800493c:	429f      	cmp	r7, r3
 800493e:	d018      	beq.n	8004972 <json_get_object+0x176>
			if(src_cpy[ivend] == '{') l_brace++;
 8004940:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004944:	2a7b      	cmp	r2, #123	; 0x7b
 8004946:	d1f3      	bne.n	8004930 <json_get_object+0x134>
 8004948:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 800494a:	e7f4      	b.n	8004936 <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 800494c:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8004950:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 8004952:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 8004954:	f004 fe60 	bl	8009618 <malloc>
 8004958:	4604      	mov	r4, r0
 800495a:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 800495c:	2800      	cmp	r0, #0
 800495e:	d03e      	beq.n	80049de <json_get_object+0x1e2>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004960:	463a      	mov	r2, r7
 8004962:	4649      	mov	r1, r9
 8004964:	f004 fe68 	bl	8009638 <memcpy>
		dest->value[val_len] = '\0';
 8004968:	2000      	movs	r0, #0
 800496a:	55e0      	strb	r0, [r4, r7]
}
 800496c:	b007      	add	sp, #28
 800496e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 8004972:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 8004976:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 8004978:	3701      	adds	r7, #1
 800497a:	e7eb      	b.n	8004954 <json_get_object+0x158>
			pvstart++;
 800497c:	f109 0501 	add.w	r5, r9, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004980:	4628      	mov	r0, r5
 8004982:	f7fb fc3f 	bl	8000204 <strlen>
 8004986:	2400      	movs	r4, #0
 8004988:	e004      	b.n	8004994 <json_get_object+0x198>
				if(pvstart[val_len] == '"') break;
 800498a:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 800498e:	2b22      	cmp	r3, #34	; 0x22
 8004990:	d002      	beq.n	8004998 <json_get_object+0x19c>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004992:	3401      	adds	r4, #1
 8004994:	42a0      	cmp	r0, r4
 8004996:	dcf8      	bgt.n	800498a <json_get_object+0x18e>
 8004998:	46a9      	mov	r9, r5
 800499a:	e791      	b.n	80048c0 <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800499c:	4b1b      	ldr	r3, [pc, #108]	; (8004a0c <json_get_object+0x210>)
 800499e:	481c      	ldr	r0, [pc, #112]	; (8004a10 <json_get_object+0x214>)
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <json_get_object+0x224>)
 80049a4:	491c      	ldr	r1, [pc, #112]	; (8004a18 <json_get_object+0x21c>)
 80049a6:	2366      	movs	r3, #102	; 0x66
 80049a8:	f004 f9f0 	bl	8008d8c <LOG_DEBUG>
			return ret;
 80049ac:	2008      	movs	r0, #8
 80049ae:	e7a1      	b.n	80048f4 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <json_get_object+0x210>)
 80049b2:	4817      	ldr	r0, [pc, #92]	; (8004a10 <json_get_object+0x214>)
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <json_get_object+0x228>)
 80049b8:	4917      	ldr	r1, [pc, #92]	; (8004a18 <json_get_object+0x21c>)
 80049ba:	2336      	movs	r3, #54	; 0x36
 80049bc:	f004 f9e6 	bl	8008d8c <LOG_DEBUG>
		return ret;
 80049c0:	2004      	movs	r0, #4
 80049c2:	e797      	b.n	80048f4 <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 80049c4:	2701      	movs	r7, #1
 80049c6:	2002      	movs	r0, #2
 80049c8:	e7c4      	b.n	8004954 <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049ca:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <json_get_object+0x210>)
 80049cc:	4810      	ldr	r0, [pc, #64]	; (8004a10 <json_get_object+0x214>)
 80049ce:	9300      	str	r3, [sp, #0]
 80049d0:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <json_get_object+0x22c>)
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <json_get_object+0x21c>)
 80049d4:	2344      	movs	r3, #68	; 0x44
 80049d6:	f004 f9d9 	bl	8008d8c <LOG_DEBUG>
		return ret;
 80049da:	2010      	movs	r0, #16
 80049dc:	e78a      	b.n	80048f4 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049de:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <json_get_object+0x210>)
 80049e0:	480b      	ldr	r0, [pc, #44]	; (8004a10 <json_get_object+0x214>)
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <json_get_object+0x22c>)
 80049e6:	490c      	ldr	r1, [pc, #48]	; (8004a18 <json_get_object+0x21c>)
 80049e8:	237e      	movs	r3, #126	; 0x7e
 80049ea:	f004 f9cf 	bl	8008d8c <LOG_DEBUG>
			return ret;
 80049ee:	2010      	movs	r0, #16
 80049f0:	e780      	b.n	80048f4 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <json_get_object+0x210>)
 80049f4:	4806      	ldr	r0, [pc, #24]	; (8004a10 <json_get_object+0x214>)
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	4a0b      	ldr	r2, [pc, #44]	; (8004a28 <json_get_object+0x22c>)
 80049fa:	4907      	ldr	r1, [pc, #28]	; (8004a18 <json_get_object+0x21c>)
 80049fc:	236c      	movs	r3, #108	; 0x6c
 80049fe:	f004 f9c5 	bl	8008d8c <LOG_DEBUG>
			return ret;
 8004a02:	2010      	movs	r0, #16
 8004a04:	e776      	b.n	80048f4 <json_get_object+0xf8>
 8004a06:	bf00      	nop
 8004a08:	0800ce7c 	.word	0x0800ce7c
 8004a0c:	0800ce6c 	.word	0x0800ce6c
 8004a10:	0800ce5c 	.word	0x0800ce5c
 8004a14:	0800ce84 	.word	0x0800ce84
 8004a18:	0800ca10 	.word	0x0800ca10
 8004a1c:	0800ce40 	.word	0x0800ce40
 8004a20:	0800cefc 	.word	0x0800cefc
 8004a24:	0800cea8 	.word	0x0800cea8
 8004a28:	0800cedc 	.word	0x0800cedc

08004a2c <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 8004a2c:	b510      	push	{r4, lr}
 8004a2e:	4604      	mov	r4, r0
	if(json->key != NULL) {
 8004a30:	6800      	ldr	r0, [r0, #0]
 8004a32:	b118      	cbz	r0, 8004a3c <json_release_object+0x10>
		free(json->key);
 8004a34:	f004 fdf8 	bl	8009628 <free>
		json->key = NULL;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	6023      	str	r3, [r4, #0]
	}
	if(json->value != NULL) {
 8004a3c:	68a0      	ldr	r0, [r4, #8]
 8004a3e:	b118      	cbz	r0, 8004a48 <json_release_object+0x1c>
		free(json->value);
 8004a40:	f004 fdf2 	bl	8009628 <free>
		json->value = NULL;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60a3      	str	r3, [r4, #8]
	}
	json->leaf = false;
 8004a48:	2000      	movs	r0, #0
 8004a4a:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 8004a4c:	bd10      	pop	{r4, pc}
 8004a4e:	bf00      	nop

08004a50 <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 8004a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a54:	4688      	mov	r8, r1
 8004a56:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8004a58:	4924      	ldr	r1, [pc, #144]	; (8004aec <parse_packet+0x9c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 8004a5a:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 8004a5c:	f005 fd6a 	bl	800a534 <strstr>
	if(pvstart == NULL){
 8004a60:	b318      	cbz	r0, 8004aaa <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 8004a62:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8004a64:	4604      	mov	r4, r0
 8004a66:	1c78      	adds	r0, r7, #1
 8004a68:	f004 fdd6 	bl	8009618 <malloc>
 8004a6c:	4606      	mov	r6, r0
 8004a6e:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 8004a72:	b330      	cbz	r0, 8004ac2 <parse_packet+0x72>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8004a74:	4629      	mov	r1, r5
 8004a76:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 8004a78:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 8004a7a:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8004a7c:	f004 fddc 	bl	8009638 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 8004a80:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 8004a82:	4620      	mov	r0, r4
 8004a84:	f7fb fbbe 	bl	8000204 <strlen>
 8004a88:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	f004 fdc4 	bl	8009618 <malloc>
 8004a90:	4607      	mov	r7, r0
 8004a92:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 8004a96:	b1f0      	cbz	r0, 8004ad6 <parse_packet+0x86>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4632      	mov	r2, r6
 8004a9c:	f004 fdcc 	bl	8009638 <memcpy>
	dest->data_str[data_len] = '\0';
 8004aa0:	55bd      	strb	r5, [r7, r6]

	return ret;
 8004aa2:	4628      	mov	r0, r5
}
 8004aa4:	b002      	add	sp, #8
 8004aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004aaa:	4b11      	ldr	r3, [pc, #68]	; (8004af0 <parse_packet+0xa0>)
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	4a11      	ldr	r2, [pc, #68]	; (8004af4 <parse_packet+0xa4>)
 8004ab0:	4911      	ldr	r1, [pc, #68]	; (8004af8 <parse_packet+0xa8>)
 8004ab2:	4812      	ldr	r0, [pc, #72]	; (8004afc <parse_packet+0xac>)
 8004ab4:	23a0      	movs	r3, #160	; 0xa0
 8004ab6:	f004 f969 	bl	8008d8c <LOG_DEBUG>
		return ret;
 8004aba:	2002      	movs	r0, #2
}
 8004abc:	b002      	add	sp, #8
 8004abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <parse_packet+0xa0>)
 8004ac4:	480d      	ldr	r0, [pc, #52]	; (8004afc <parse_packet+0xac>)
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	4a0d      	ldr	r2, [pc, #52]	; (8004b00 <parse_packet+0xb0>)
 8004aca:	490b      	ldr	r1, [pc, #44]	; (8004af8 <parse_packet+0xa8>)
 8004acc:	23ab      	movs	r3, #171	; 0xab
 8004ace:	f004 f95d 	bl	8008d8c <LOG_DEBUG>
		return ret;
 8004ad2:	2010      	movs	r0, #16
 8004ad4:	e7e6      	b.n	8004aa4 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ad6:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <parse_packet+0xa0>)
 8004ad8:	4808      	ldr	r0, [pc, #32]	; (8004afc <parse_packet+0xac>)
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	4a08      	ldr	r2, [pc, #32]	; (8004b00 <parse_packet+0xb0>)
 8004ade:	4906      	ldr	r1, [pc, #24]	; (8004af8 <parse_packet+0xa8>)
 8004ae0:	23b8      	movs	r3, #184	; 0xb8
 8004ae2:	f004 f953 	bl	8008d8c <LOG_DEBUG>
		return ret;
 8004ae6:	2010      	movs	r0, #16
 8004ae8:	e7dc      	b.n	8004aa4 <parse_packet+0x54>
 8004aea:	bf00      	nop
 8004aec:	0800cf10 	.word	0x0800cf10
 8004af0:	0800cf28 	.word	0x0800cf28
 8004af4:	0800cf14 	.word	0x0800cf14
 8004af8:	0800ca10 	.word	0x0800ca10
 8004afc:	0800ce5c 	.word	0x0800ce5c
 8004b00:	0800cedc 	.word	0x0800cedc

08004b04 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 8004b04:	b510      	push	{r4, lr}
 8004b06:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) {
 8004b08:	6800      	ldr	r0, [r0, #0]
 8004b0a:	b118      	cbz	r0, 8004b14 <release_packet+0x10>
		free(packet->cmd_str);
 8004b0c:	f004 fd8c 	bl	8009628 <free>
		packet->cmd_str = NULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	6023      	str	r3, [r4, #0]
	}
	if(packet->data_str != NULL) {
 8004b14:	6860      	ldr	r0, [r4, #4]
 8004b16:	b118      	cbz	r0, 8004b20 <release_packet+0x1c>
		free(packet->data_str);
 8004b18:	f004 fd86 	bl	8009628 <free>
		packet->data_str = NULL;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6063      	str	r3, [r4, #4]
	}

	return PKT_ERR_OK;
}
 8004b20:	2000      	movs	r0, #0
 8004b22:	bd10      	pop	{r4, pc}

08004b24 <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 8004b26:	1e16      	subs	r6, r2, #0
 8004b28:	dd0f      	ble.n	8004b4a <str_to_cmd+0x26>
 8004b2a:	4607      	mov	r7, r0
 8004b2c:	1f0d      	subs	r5, r1, #4
 8004b2e:	2400      	movs	r4, #0
 8004b30:	e002      	b.n	8004b38 <str_to_cmd+0x14>
 8004b32:	3401      	adds	r4, #1
 8004b34:	42a6      	cmp	r6, r4
 8004b36:	d008      	beq.n	8004b4a <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 8004b38:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	f7fb fb57 	bl	80001f0 <strcmp>
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d1f5      	bne.n	8004b32 <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 8004b46:	4620      	mov	r0, r4
 8004b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 8004b4a:	2400      	movs	r4, #0
}
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004b50 <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 8004b50:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop

08004b58 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 8004b58:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8004b62:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8004b66:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 8004b6a:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 8004b6c:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8004b6e:	9a01      	ldr	r2, [sp, #4]
 8004b70:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 8004b74:	6142      	str	r2, [r0, #20]
	_it = itpin;
 8004b76:	8103      	strh	r3, [r0, #8]
}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop

08004b7c <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8004b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b80:	4604      	mov	r4, r0
 8004b82:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 8004b84:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 8004b86:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8004b88:	4698      	mov	r8, r3
 8004b8a:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 8004b8c:	f001 fd8c 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 8004b90:	6920      	ldr	r0, [r4, #16]
 8004b92:	f001 fd89 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 8004b96:	6960      	ldr	r0, [r4, #20]
 8004b98:	f001 fd86 	bl	80066a8 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 8004b9c:	2207      	movs	r2, #7
 8004b9e:	88a1      	ldrh	r1, [r4, #4]
 8004ba0:	68e0      	ldr	r0, [r4, #12]
 8004ba2:	f001 fde7 	bl	8006774 <gpio_set_mode>
	gpio_set(_csport, _cs);
 8004ba6:	88a1      	ldrh	r1, [r4, #4]
 8004ba8:	68e0      	ldr	r0, [r4, #12]
 8004baa:	f001 fec5 	bl	8006938 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 8004bae:	2207      	movs	r2, #7
 8004bb0:	88e1      	ldrh	r1, [r4, #6]
 8004bb2:	6920      	ldr	r0, [r4, #16]
 8004bb4:	f001 fdde 	bl	8006774 <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 8004bb8:	88e1      	ldrh	r1, [r4, #6]
 8004bba:	6920      	ldr	r0, [r4, #16]
 8004bbc:	f001 fec4 	bl	8006948 <gpio_reset>
    delay_ms(50);
 8004bc0:	2032      	movs	r0, #50	; 0x32
 8004bc2:	f002 ff71 	bl	8007aa8 <delay_ms>
    gpio_set(_rstport, _rst);
 8004bc6:	88e1      	ldrh	r1, [r4, #6]
 8004bc8:	6920      	ldr	r0, [r4, #16]
 8004bca:	f001 feb5 	bl	8006938 <gpio_set>
    delay_ms(50);
 8004bce:	2032      	movs	r0, #50	; 0x32
 8004bd0:	f002 ff6a 	bl	8007aa8 <delay_ms>

    if(_it >= 0 && _itport != NULL){
 8004bd4:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	db0e      	blt.n	8004bfa <_ZN6sx127x4initEP3spilhm+0x7e>
 8004bdc:	6961      	ldr	r1, [r4, #20]
 8004bde:	b161      	cbz	r1, 8004bfa <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 8004be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	ad04      	add	r5, sp, #16
 8004be6:	4628      	mov	r0, r5
 8004be8:	b292      	uxth	r2, r2
 8004bea:	2301      	movs	r3, #1
 8004bec:	f001 f89a 	bl	8005d24 <exti_init>
		gpio_set_pulldown(_itport, _it);
 8004bf0:	8921      	ldrh	r1, [r4, #8]
 8004bf2:	6960      	ldr	r0, [r4, #20]
 8004bf4:	f001 fe92 	bl	800691c <gpio_set_pulldown>
 8004bf8:	e000      	b.n	8004bfc <_ZN6sx127x4initEP3spilhm+0x80>
 8004bfa:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 8004bfc:	88a1      	ldrh	r1, [r4, #4]
 8004bfe:	68e0      	ldr	r0, [r4, #12]
 8004c00:	f001 fea2 	bl	8006948 <gpio_reset>

  txdt = address;
 8004c04:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c06:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004c08:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c0c:	f10d 020f 	add.w	r2, sp, #15
 8004c10:	2301      	movs	r3, #1
 8004c12:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c14:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c16:	f002 fa89 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c1a:	9600      	str	r6, [sp, #0]
 8004c1c:	f10d 030e 	add.w	r3, sp, #14
 8004c20:	6821      	ldr	r1, [r4, #0]
 8004c22:	f10d 020f 	add.w	r2, sp, #15
 8004c26:	4628      	mov	r0, r5
  txdt = value;
 8004c28:	2700      	movs	r7, #0
 8004c2a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c2e:	f002 fb29 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 8004c32:	88a1      	ldrh	r1, [r4, #4]
 8004c34:	68e0      	ldr	r0, [r4, #12]
 8004c36:	f001 fe7f 	bl	8006938 <gpio_set>

  return response;
 8004c3a:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 8004c3e:	2b12      	cmp	r3, #18
 8004c40:	d003      	beq.n	8004c4a <_ZN6sx127x4initEP3spilhm+0xce>
 8004c42:	4638      	mov	r0, r7
}
 8004c44:	b006      	add	sp, #24
 8004c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 8004c4a:	88a1      	ldrh	r1, [r4, #4]
 8004c4c:	68e0      	ldr	r0, [r4, #12]
 8004c4e:	f001 fe7b 	bl	8006948 <gpio_reset>
  txdt = address;
 8004c52:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c56:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004c58:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c5c:	4633      	mov	r3, r6
 8004c5e:	f10d 020f 	add.w	r2, sp, #15
 8004c62:	4628      	mov	r0, r5
 8004c64:	f002 fa62 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c68:	9600      	str	r6, [sp, #0]
  txdt = value;
 8004c6a:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c6e:	f10d 030e 	add.w	r3, sp, #14
 8004c72:	f10d 020f 	add.w	r2, sp, #15
 8004c76:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004c78:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	f002 fb01 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004c82:	88a1      	ldrh	r1, [r4, #4]
 8004c84:	68e0      	ldr	r0, [r4, #12]
 8004c86:	f001 fe57 	bl	8006938 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004c8a:	ea4f 71e9 	mov.w	r1, r9, asr #31
 8004c8e:	04c9      	lsls	r1, r1, #19
 8004c90:	4a9e      	ldr	r2, [pc, #632]	; (8004f0c <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 8004c92:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004c96:	2300      	movs	r3, #0
 8004c98:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 8004c9c:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 8004ca0:	f7fc f812 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 8004ca4:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004ca6:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 8004ca8:	68e0      	ldr	r0, [r4, #12]
 8004caa:	f001 fe4d 	bl	8006948 <gpio_reset>
  txdt = address;
 8004cae:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004cb2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004cb4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004cb8:	4633      	mov	r3, r6
 8004cba:	f10d 020f 	add.w	r2, sp, #15
 8004cbe:	4628      	mov	r0, r5
 8004cc0:	f002 fa34 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004cc4:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004cc6:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004cca:	f10d 030e 	add.w	r3, sp, #14
 8004cce:	f10d 020f 	add.w	r2, sp, #15
 8004cd2:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004cd4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004cd8:	4628      	mov	r0, r5
 8004cda:	f002 fad3 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004cde:	88a1      	ldrh	r1, [r4, #4]
 8004ce0:	68e0      	ldr	r0, [r4, #12]
 8004ce2:	f001 fe29 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004ce6:	88a1      	ldrh	r1, [r4, #4]
 8004ce8:	68e0      	ldr	r0, [r4, #12]
 8004cea:	f001 fe2d 	bl	8006948 <gpio_reset>
  txdt = address;
 8004cee:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004cf2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004cf4:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004cf8:	4633      	mov	r3, r6
 8004cfa:	f10d 020f 	add.w	r2, sp, #15
 8004cfe:	4628      	mov	r0, r5
 8004d00:	f002 fa14 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d04:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004d06:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d0a:	f10d 030e 	add.w	r3, sp, #14
 8004d0e:	f10d 020f 	add.w	r2, sp, #15
 8004d12:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004d14:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d18:	4628      	mov	r0, r5
 8004d1a:	f002 fab3 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004d1e:	88a1      	ldrh	r1, [r4, #4]
 8004d20:	68e0      	ldr	r0, [r4, #12]
 8004d22:	f001 fe09 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004d26:	88a1      	ldrh	r1, [r4, #4]
 8004d28:	68e0      	ldr	r0, [r4, #12]
 8004d2a:	f001 fe0d 	bl	8006948 <gpio_reset>
  txdt = address;
 8004d2e:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d32:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004d34:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d38:	4633      	mov	r3, r6
 8004d3a:	f10d 020f 	add.w	r2, sp, #15
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f002 f9f4 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d44:	9600      	str	r6, [sp, #0]
 8004d46:	f10d 030e 	add.w	r3, sp, #14
 8004d4a:	f10d 020f 	add.w	r2, sp, #15
 8004d4e:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8004d50:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d54:	4628      	mov	r0, r5
 8004d56:	f002 fa95 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004d5a:	88a1      	ldrh	r1, [r4, #4]
 8004d5c:	68e0      	ldr	r0, [r4, #12]
 8004d5e:	f001 fdeb 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004d62:	88a1      	ldrh	r1, [r4, #4]
 8004d64:	68e0      	ldr	r0, [r4, #12]
 8004d66:	f001 fdef 	bl	8006948 <gpio_reset>
  txdt = address;
 8004d6a:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d6e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004d70:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d74:	4633      	mov	r3, r6
 8004d76:	f10d 020f 	add.w	r2, sp, #15
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f002 f9d6 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d80:	9600      	str	r6, [sp, #0]
 8004d82:	f10d 030e 	add.w	r3, sp, #14
 8004d86:	f10d 020f 	add.w	r2, sp, #15
 8004d8a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004d8c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d90:	4628      	mov	r0, r5
 8004d92:	f002 fa77 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004d96:	88a1      	ldrh	r1, [r4, #4]
 8004d98:	68e0      	ldr	r0, [r4, #12]
 8004d9a:	f001 fdcd 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004d9e:	88a1      	ldrh	r1, [r4, #4]
 8004da0:	68e0      	ldr	r0, [r4, #12]
 8004da2:	f001 fdd1 	bl	8006948 <gpio_reset>
  txdt = address;
 8004da6:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004daa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004dac:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004db0:	4633      	mov	r3, r6
 8004db2:	f10d 020f 	add.w	r2, sp, #15
 8004db6:	4628      	mov	r0, r5
 8004db8:	f002 f9b8 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004dbc:	9600      	str	r6, [sp, #0]
 8004dbe:	f10d 030e 	add.w	r3, sp, #14
 8004dc2:	f10d 020f 	add.w	r2, sp, #15
 8004dc6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004dc8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f002 fa59 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004dd2:	88a1      	ldrh	r1, [r4, #4]
 8004dd4:	68e0      	ldr	r0, [r4, #12]
 8004dd6:	f001 fdaf 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004dda:	88a1      	ldrh	r1, [r4, #4]
 8004ddc:	68e0      	ldr	r0, [r4, #12]
 8004dde:	f001 fdb3 	bl	8006948 <gpio_reset>
  txdt = address;
 8004de2:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004de6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004de8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004dec:	4633      	mov	r3, r6
 8004dee:	f10d 020f 	add.w	r2, sp, #15
 8004df2:	4628      	mov	r0, r5
 8004df4:	f002 f99a 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004df8:	9600      	str	r6, [sp, #0]
 8004dfa:	f10d 030e 	add.w	r3, sp, #14
 8004dfe:	f10d 020f 	add.w	r2, sp, #15
 8004e02:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004e04:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f002 fa3b 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004e0e:	88a1      	ldrh	r1, [r4, #4]
 8004e10:	68e0      	ldr	r0, [r4, #12]
 8004e12:	f001 fd91 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004e16:	88a1      	ldrh	r1, [r4, #4]
 8004e18:	68e0      	ldr	r0, [r4, #12]
  return response;
 8004e1a:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8004e1e:	f001 fd93 	bl	8006948 <gpio_reset>
  txdt = address;
 8004e22:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e26:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004e28:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e2c:	4633      	mov	r3, r6
 8004e2e:	f10d 020f 	add.w	r2, sp, #15
 8004e32:	4628      	mov	r0, r5
 8004e34:	f002 f97a 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e38:	9600      	str	r6, [sp, #0]
 8004e3a:	f10d 030e 	add.w	r3, sp, #14
 8004e3e:	f10d 020f 	add.w	r2, sp, #15
 8004e42:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8004e44:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e48:	4628      	mov	r0, r5
  txdt = value;
 8004e4a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e4e:	f002 fa19 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004e52:	88a1      	ldrh	r1, [r4, #4]
 8004e54:	68e0      	ldr	r0, [r4, #12]
 8004e56:	f001 fd6f 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004e5a:	88a1      	ldrh	r1, [r4, #4]
 8004e5c:	68e0      	ldr	r0, [r4, #12]
 8004e5e:	f001 fd73 	bl	8006948 <gpio_reset>
  txdt = address;
 8004e62:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e64:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004e66:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e6a:	4633      	mov	r3, r6
 8004e6c:	f10d 020f 	add.w	r2, sp, #15
 8004e70:	4628      	mov	r0, r5
 8004e72:	f002 f95b 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e76:	9600      	str	r6, [sp, #0]
  txdt = value;
 8004e78:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e7a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004e7c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e80:	4628      	mov	r0, r5
 8004e82:	f10d 030e 	add.w	r3, sp, #14
 8004e86:	f10d 020f 	add.w	r2, sp, #15
 8004e8a:	f002 f9fb 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004e8e:	88a1      	ldrh	r1, [r4, #4]
 8004e90:	68e0      	ldr	r0, [r4, #12]
 8004e92:	f001 fd51 	bl	8006938 <gpio_set>
		if(level > 17){
 8004e96:	f1b8 0f11 	cmp.w	r8, #17
 8004e9a:	f200 80c8 	bhi.w	800502e <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 8004e9e:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 8004ea2:	88a1      	ldrh	r1, [r4, #4]
 8004ea4:	68e0      	ldr	r0, [r4, #12]
 8004ea6:	bf38      	it	cc
 8004ea8:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 8004eac:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 8004eae:	f001 fd4b 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004eb2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004eb4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004eb8:	4633      	mov	r3, r6
 8004eba:	f10d 020f 	add.w	r2, sp, #15
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f002 f934 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ec4:	9600      	str	r6, [sp, #0]
 8004ec6:	f10d 030e 	add.w	r3, sp, #14
 8004eca:	f10d 020f 	add.w	r2, sp, #15
 8004ece:	6821      	ldr	r1, [r4, #0]
 8004ed0:	4628      	mov	r0, r5
  txdt = value;
 8004ed2:	2784      	movs	r7, #132	; 0x84
 8004ed4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ed8:	f002 f9d4 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004edc:	88a1      	ldrh	r1, [r4, #4]
 8004ede:	68e0      	ldr	r0, [r4, #12]
 8004ee0:	f001 fd2a 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004ee4:	88a1      	ldrh	r1, [r4, #4]
 8004ee6:	68e0      	ldr	r0, [r4, #12]
 8004ee8:	f001 fd2e 	bl	8006948 <gpio_reset>
  txdt = address;
 8004eec:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004eee:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004ef0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ef4:	4633      	mov	r3, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f10d 020f 	add.w	r2, sp, #15
 8004efc:	f002 f916 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f00:	9600      	str	r6, [sp, #0]
 8004f02:	6821      	ldr	r1, [r4, #0]
 8004f04:	4628      	mov	r0, r5
  txdt = value;
 8004f06:	232b      	movs	r3, #43	; 0x2b
 8004f08:	e002      	b.n	8004f10 <_ZN6sx127x4initEP3spilhm+0x394>
 8004f0a:	bf00      	nop
 8004f0c:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f10:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8004f14:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f18:	f10d 030e 	add.w	r3, sp, #14
 8004f1c:	f002 f9b2 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004f20:	88a1      	ldrh	r1, [r4, #4]
 8004f22:	68e0      	ldr	r0, [r4, #12]
 8004f24:	f001 fd08 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004f28:	88a1      	ldrh	r1, [r4, #4]
 8004f2a:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f2c:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8004f2e:	f001 fd0b 	bl	8006948 <gpio_reset>
  txdt = address;
 8004f32:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f34:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004f36:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f3a:	f10d 020f 	add.w	r2, sp, #15
 8004f3e:	4628      	mov	r0, r5
 8004f40:	2301      	movs	r3, #1
 8004f42:	f002 f8f3 	bl	800712c <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8004f46:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f4a:	9700      	str	r7, [sp, #0]
 8004f4c:	f10d 030e 	add.w	r3, sp, #14
 8004f50:	f10d 020f 	add.w	r2, sp, #15
 8004f54:	6821      	ldr	r1, [r4, #0]
 8004f56:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8004f58:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 8004f5c:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f60:	f002 f990 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004f64:	88a1      	ldrh	r1, [r4, #4]
 8004f66:	68e0      	ldr	r0, [r4, #12]
 8004f68:	f001 fce6 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004f6c:	88a1      	ldrh	r1, [r4, #4]
 8004f6e:	68e0      	ldr	r0, [r4, #12]
 8004f70:	f001 fcea 	bl	8006948 <gpio_reset>
  txdt = address;
 8004f74:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f76:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004f78:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f7c:	463b      	mov	r3, r7
 8004f7e:	f10d 020f 	add.w	r2, sp, #15
 8004f82:	4628      	mov	r0, r5
 8004f84:	f002 f8d2 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f88:	9700      	str	r7, [sp, #0]
 8004f8a:	f10d 030e 	add.w	r3, sp, #14
 8004f8e:	f10d 020f 	add.w	r2, sp, #15
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	4628      	mov	r0, r5
  txdt = value;
 8004f96:	2600      	movs	r6, #0
 8004f98:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f9c:	f002 f972 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004fa0:	88a1      	ldrh	r1, [r4, #4]
 8004fa2:	68e0      	ldr	r0, [r4, #12]
 8004fa4:	f001 fcc8 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004fa8:	88a1      	ldrh	r1, [r4, #4]
 8004faa:	68e0      	ldr	r0, [r4, #12]
  return response;
 8004fac:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8004fb0:	f001 fcca 	bl	8006948 <gpio_reset>
  txdt = address;
 8004fb4:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004fb8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004fba:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004fbe:	463b      	mov	r3, r7
 8004fc0:	f10d 020f 	add.w	r2, sp, #15
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	f002 f8b1 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004fca:	9700      	str	r7, [sp, #0]
 8004fcc:	f10d 030e 	add.w	r3, sp, #14
 8004fd0:	f10d 020f 	add.w	r2, sp, #15
 8004fd4:	6821      	ldr	r1, [r4, #0]
 8004fd6:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8004fd8:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 8004fdc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004fe0:	f002 f950 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004fe4:	88a1      	ldrh	r1, [r4, #4]
 8004fe6:	68e0      	ldr	r0, [r4, #12]
 8004fe8:	f001 fca6 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8004fec:	88a1      	ldrh	r1, [r4, #4]
 8004fee:	68e0      	ldr	r0, [r4, #12]
 8004ff0:	f001 fcaa 	bl	8006948 <gpio_reset>
  txdt = address;
 8004ff4:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ff6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004ff8:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ffc:	463b      	mov	r3, r7
 8004ffe:	f10d 020f 	add.w	r2, sp, #15
 8005002:	4628      	mov	r0, r5
 8005004:	f002 f892 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005008:	9700      	str	r7, [sp, #0]
 800500a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800500c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005010:	f10d 030e 	add.w	r3, sp, #14
 8005014:	f10d 020f 	add.w	r2, sp, #15
 8005018:	4628      	mov	r0, r5
 800501a:	f002 f933 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800501e:	68e0      	ldr	r0, [r4, #12]
 8005020:	88a1      	ldrh	r1, [r4, #4]
 8005022:	f001 fc89 	bl	8006938 <gpio_set>
	return true;
 8005026:	4638      	mov	r0, r7
}
 8005028:	b006      	add	sp, #24
 800502a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 800502e:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 8005032:	88a1      	ldrh	r1, [r4, #4]
 8005034:	68e0      	ldr	r0, [r4, #12]
 8005036:	bf28      	it	cs
 8005038:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 800503c:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 800503e:	f001 fc83 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005042:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005044:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005048:	4633      	mov	r3, r6
 800504a:	f10d 020f 	add.w	r2, sp, #15
 800504e:	4628      	mov	r0, r5
 8005050:	f002 f86c 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005054:	9600      	str	r6, [sp, #0]
 8005056:	f10d 030e 	add.w	r3, sp, #14
 800505a:	f10d 020f 	add.w	r2, sp, #15
 800505e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005060:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005064:	4628      	mov	r0, r5
 8005066:	f002 f90d 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800506a:	88a1      	ldrh	r1, [r4, #4]
 800506c:	68e0      	ldr	r0, [r4, #12]
 800506e:	f001 fc63 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8005072:	88a1      	ldrh	r1, [r4, #4]
 8005074:	68e0      	ldr	r0, [r4, #12]
 8005076:	f001 fc67 	bl	8006948 <gpio_reset>
  txdt = address;
 800507a:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 800507c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800507e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005082:	4633      	mov	r3, r6
 8005084:	4628      	mov	r0, r5
 8005086:	f10d 020f 	add.w	r2, sp, #15
 800508a:	f002 f84f 	bl	800712c <_ZN3spi8transmitEmm>
			level -= 3;
 800508e:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005092:	9600      	str	r6, [sp, #0]
 8005094:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 8005096:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800509a:	4628      	mov	r0, r5
  txdt = value;
 800509c:	2331      	movs	r3, #49	; 0x31
 800509e:	e737      	b.n	8004f10 <_ZN6sx127x4initEP3spilhm+0x394>

080050a0 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 80050a0:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop

080050a8 <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 80050a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050aa:	4604      	mov	r4, r0
 80050ac:	b087      	sub	sp, #28
  txdt = address;
 80050ae:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 80050b0:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 80050b2:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 80050b4:	88a1      	ldrh	r1, [r4, #4]
 80050b6:	f001 fc47 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80050ba:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80050bc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80050c0:	4633      	mov	r3, r6
 80050c2:	f10d 020f 	add.w	r2, sp, #15
 80050c6:	a804      	add	r0, sp, #16
 80050c8:	f002 f830 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80050cc:	9600      	str	r6, [sp, #0]
 80050ce:	f10d 030e 	add.w	r3, sp, #14
 80050d2:	6821      	ldr	r1, [r4, #0]
 80050d4:	f10d 020f 	add.w	r2, sp, #15
 80050d8:	a804      	add	r0, sp, #16
  txdt = value;
 80050da:	2500      	movs	r5, #0
 80050dc:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80050e0:	f002 f8d0 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80050e4:	88a1      	ldrh	r1, [r4, #4]
 80050e6:	68e0      	ldr	r0, [r4, #12]
 80050e8:	f001 fc26 	bl	8006938 <gpio_set>
  return response;
 80050ec:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	2b03      	cmp	r3, #3
 80050f6:	f000 80e1 	beq.w	80052bc <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 80050fa:	88a1      	ldrh	r1, [r4, #4]
 80050fc:	68e0      	ldr	r0, [r4, #12]
 80050fe:	f001 fc23 	bl	8006948 <gpio_reset>
  txdt = address;
 8005102:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005106:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005108:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800510c:	4633      	mov	r3, r6
 800510e:	f10d 020f 	add.w	r2, sp, #15
 8005112:	a804      	add	r0, sp, #16
 8005114:	f002 f80a 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005118:	9600      	str	r6, [sp, #0]
 800511a:	f10d 030e 	add.w	r3, sp, #14
 800511e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005120:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005124:	f10d 020f 	add.w	r2, sp, #15
 8005128:	a804      	add	r0, sp, #16
 800512a:	f002 f8ab 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800512e:	88a1      	ldrh	r1, [r4, #4]
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	f001 fc01 	bl	8006938 <gpio_set>
  return response;
 8005136:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800513a:	071b      	lsls	r3, r3, #28
 800513c:	f100 809f 	bmi.w	800527e <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 8005140:	88a1      	ldrh	r1, [r4, #4]
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	f001 fc00 	bl	8006948 <gpio_reset>
  txdt = address;
 8005148:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 800514a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800514c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005150:	2301      	movs	r3, #1
 8005152:	f10d 020f 	add.w	r2, sp, #15
 8005156:	a804      	add	r0, sp, #16
 8005158:	f001 ffe8 	bl	800712c <_ZN3spi8transmitEmm>
  txdt = value;
 800515c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005160:	2501      	movs	r5, #1
 8005162:	9500      	str	r5, [sp, #0]
 8005164:	6821      	ldr	r1, [r4, #0]
 8005166:	a804      	add	r0, sp, #16
 8005168:	f10d 030e 	add.w	r3, sp, #14
 800516c:	f10d 020f 	add.w	r2, sp, #15
 8005170:	f002 f888 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005174:	88a1      	ldrh	r1, [r4, #4]
 8005176:	68e0      	ldr	r0, [r4, #12]
 8005178:	f001 fbde 	bl	8006938 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 800517c:	2f00      	cmp	r7, #0
 800517e:	f000 80a0 	beq.w	80052c2 <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 8005182:	88a1      	ldrh	r1, [r4, #4]
 8005184:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005186:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005188:	f001 fbde 	bl	8006948 <gpio_reset>
  txdt = address;
 800518c:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 800518e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005190:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005194:	462b      	mov	r3, r5
 8005196:	f10d 020f 	add.w	r2, sp, #15
 800519a:	a804      	add	r0, sp, #16
 800519c:	f001 ffc6 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051a0:	9500      	str	r5, [sp, #0]
 80051a2:	f10d 030e 	add.w	r3, sp, #14
 80051a6:	f10d 020f 	add.w	r2, sp, #15
 80051aa:	6821      	ldr	r1, [r4, #0]
 80051ac:	a804      	add	r0, sp, #16
  txdt = value;
 80051ae:	2600      	movs	r6, #0
 80051b0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051b4:	f002 f866 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80051b8:	88a1      	ldrh	r1, [r4, #4]
 80051ba:	68e0      	ldr	r0, [r4, #12]
 80051bc:	f001 fbbc 	bl	8006938 <gpio_set>
  return response;
 80051c0:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 80051c4:	88a1      	ldrh	r1, [r4, #4]
 80051c6:	68e0      	ldr	r0, [r4, #12]
 80051c8:	f001 fbbe 	bl	8006948 <gpio_reset>
  txdt = address;
 80051cc:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80051d0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051d4:	462b      	mov	r3, r5
 80051d6:	f10d 020f 	add.w	r2, sp, #15
 80051da:	a804      	add	r0, sp, #16
 80051dc:	f001 ffa6 	bl	800712c <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80051e0:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051e2:	9500      	str	r5, [sp, #0]
 80051e4:	f10d 030e 	add.w	r3, sp, #14
 80051e8:	f10d 020f 	add.w	r2, sp, #15
 80051ec:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80051ee:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051f2:	a804      	add	r0, sp, #16
 80051f4:	f002 f846 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80051f8:	88a1      	ldrh	r1, [r4, #4]
 80051fa:	68e0      	ldr	r0, [r4, #12]
 80051fc:	f001 fb9c 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8005200:	88a1      	ldrh	r1, [r4, #4]
 8005202:	68e0      	ldr	r0, [r4, #12]
 8005204:	f001 fba0 	bl	8006948 <gpio_reset>
  txdt = address;
 8005208:	238d      	movs	r3, #141	; 0x8d
 800520a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800520e:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005210:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005212:	6821      	ldr	r1, [r4, #0]
 8005214:	f10d 020f 	add.w	r2, sp, #15
 8005218:	a804      	add	r0, sp, #16
 800521a:	f001 ff87 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800521e:	9500      	str	r5, [sp, #0]
 8005220:	f10d 030e 	add.w	r3, sp, #14
 8005224:	f10d 020f 	add.w	r2, sp, #15
 8005228:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800522a:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800522c:	a804      	add	r0, sp, #16
  txdt = value;
 800522e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005232:	f002 f827 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005236:	88a1      	ldrh	r1, [r4, #4]
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	f001 fb7d 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 800523e:	88a1      	ldrh	r1, [r4, #4]
 8005240:	68e0      	ldr	r0, [r4, #12]
 8005242:	f001 fb81 	bl	8006948 <gpio_reset>
  txdt = address;
 8005246:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005248:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800524a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800524e:	462b      	mov	r3, r5
 8005250:	f10d 020f 	add.w	r2, sp, #15
 8005254:	a804      	add	r0, sp, #16
 8005256:	f001 ff69 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800525a:	9500      	str	r5, [sp, #0]
 800525c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800525e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005262:	f10d 030e 	add.w	r3, sp, #14
 8005266:	f10d 020f 	add.w	r2, sp, #15
 800526a:	a804      	add	r0, sp, #16
 800526c:	f002 f80a 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005270:	68e0      	ldr	r0, [r4, #12]
 8005272:	88a1      	ldrh	r1, [r4, #4]
 8005274:	f001 fb60 	bl	8006938 <gpio_set>
	return true;
 8005278:	4628      	mov	r0, r5
}
 800527a:	b007      	add	sp, #28
 800527c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 800527e:	88a1      	ldrh	r1, [r4, #4]
 8005280:	68e0      	ldr	r0, [r4, #12]
 8005282:	f001 fb61 	bl	8006948 <gpio_reset>
  txdt = address;
 8005286:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005288:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800528a:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800528e:	4633      	mov	r3, r6
 8005290:	f10d 020f 	add.w	r2, sp, #15
 8005294:	a804      	add	r0, sp, #16
 8005296:	f001 ff49 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800529a:	9600      	str	r6, [sp, #0]
  txdt = value;
 800529c:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800529e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80052a0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052a4:	a804      	add	r0, sp, #16
 80052a6:	f10d 030e 	add.w	r3, sp, #14
 80052aa:	f10d 020f 	add.w	r2, sp, #15
 80052ae:	f001 ffe9 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052b2:	88a1      	ldrh	r1, [r4, #4]
 80052b4:	68e0      	ldr	r0, [r4, #12]
 80052b6:	f001 fb3f 	bl	8006938 <gpio_set>
  return response;
 80052ba:	e741      	b.n	8005140 <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 80052bc:	4628      	mov	r0, r5
}
 80052be:	b007      	add	sp, #28
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 80052c2:	88a1      	ldrh	r1, [r4, #4]
 80052c4:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 80052c6:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 80052c8:	f001 fb3e 	bl	8006948 <gpio_reset>
  txdt = address;
 80052cc:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052d0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052d4:	462b      	mov	r3, r5
 80052d6:	f10d 020f 	add.w	r2, sp, #15
 80052da:	a804      	add	r0, sp, #16
 80052dc:	f001 ff26 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052e0:	9500      	str	r5, [sp, #0]
 80052e2:	f10d 030e 	add.w	r3, sp, #14
 80052e6:	f10d 020f 	add.w	r2, sp, #15
 80052ea:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80052ec:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052f0:	a804      	add	r0, sp, #16
 80052f2:	f001 ffc7 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052f6:	88a1      	ldrh	r1, [r4, #4]
 80052f8:	68e0      	ldr	r0, [r4, #12]
 80052fa:	f001 fb1d 	bl	8006938 <gpio_set>
  return response;
 80052fe:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005302:	88a1      	ldrh	r1, [r4, #4]
 8005304:	68e0      	ldr	r0, [r4, #12]
 8005306:	f001 fb1f 	bl	8006948 <gpio_reset>
  txdt = address;
 800530a:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 800530c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800530e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005312:	462b      	mov	r3, r5
 8005314:	f10d 020f 	add.w	r2, sp, #15
 8005318:	a804      	add	r0, sp, #16
 800531a:	f001 ff07 	bl	800712c <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 800531e:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005322:	9500      	str	r5, [sp, #0]
 8005324:	e75e      	b.n	80051e4 <_ZN6sx127x11beginPacketEb+0x13c>
 8005326:	bf00      	nop

08005328 <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 8005328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800532c:	4604      	mov	r4, r0
 800532e:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 8005330:	460f      	mov	r7, r1
 8005332:	b319      	cbz	r1, 800537c <_ZN6sx127x9endPacketEb+0x54>
 8005334:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005336:	b30b      	cbz	r3, 800537c <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 8005338:	8881      	ldrh	r1, [r0, #4]
 800533a:	68c0      	ldr	r0, [r0, #12]
 800533c:	f001 fb04 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005340:	f10d 050f 	add.w	r5, sp, #15
 8005344:	ae04      	add	r6, sp, #16
  txdt = address;
 8005346:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005348:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800534a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800534e:	462a      	mov	r2, r5
 8005350:	4630      	mov	r0, r6
 8005352:	2301      	movs	r3, #1
 8005354:	f001 feea 	bl	800712c <_ZN3spi8transmitEmm>
  txdt = value;
 8005358:	2340      	movs	r3, #64	; 0x40
 800535a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800535e:	2301      	movs	r3, #1
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	f10d 080e 	add.w	r8, sp, #14
 8005366:	6821      	ldr	r1, [r4, #0]
 8005368:	4630      	mov	r0, r6
 800536a:	4643      	mov	r3, r8
 800536c:	462a      	mov	r2, r5
 800536e:	f001 ff89 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005372:	88a1      	ldrh	r1, [r4, #4]
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	f001 fadf 	bl	8006938 <gpio_set>
  return response;
 800537a:	e004      	b.n	8005386 <_ZN6sx127x9endPacketEb+0x5e>
 800537c:	f10d 050f 	add.w	r5, sp, #15
 8005380:	ae04      	add	r6, sp, #16
 8005382:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 8005386:	88a1      	ldrh	r1, [r4, #4]
 8005388:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800538a:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 800538e:	f001 fadb 	bl	8006948 <gpio_reset>
  txdt = address;
 8005392:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005396:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005398:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800539c:	464b      	mov	r3, r9
 800539e:	462a      	mov	r2, r5
 80053a0:	4630      	mov	r0, r6
 80053a2:	f001 fec3 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053a6:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 80053aa:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053ac:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80053ae:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053b2:	4630      	mov	r0, r6
 80053b4:	4643      	mov	r3, r8
 80053b6:	462a      	mov	r2, r5
 80053b8:	f001 ff64 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053bc:	88a1      	ldrh	r1, [r4, #4]
 80053be:	68e0      	ldr	r0, [r4, #12]
 80053c0:	f001 faba 	bl	8006938 <gpio_set>
	if(!async){
 80053c4:	2f00      	cmp	r7, #0
 80053c6:	d13b      	bne.n	8005440 <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 80053c8:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 80053cc:	88a1      	ldrh	r1, [r4, #4]
 80053ce:	68e0      	ldr	r0, [r4, #12]
 80053d0:	f001 faba 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053d4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053d6:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053da:	2301      	movs	r3, #1
 80053dc:	462a      	mov	r2, r5
 80053de:	4630      	mov	r0, r6
 80053e0:	f001 fea4 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053e4:	6821      	ldr	r1, [r4, #0]
 80053e6:	f8cd 9000 	str.w	r9, [sp]
 80053ea:	4643      	mov	r3, r8
 80053ec:	462a      	mov	r2, r5
 80053ee:	4630      	mov	r0, r6
  txdt = value;
 80053f0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053f4:	f001 ff46 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053f8:	88a1      	ldrh	r1, [r4, #4]
 80053fa:	68e0      	ldr	r0, [r4, #12]
 80053fc:	f001 fa9c 	bl	8006938 <gpio_set>
  return response;
 8005400:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 8005404:	071b      	lsls	r3, r3, #28
 8005406:	d5e1      	bpl.n	80053cc <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 8005408:	88a1      	ldrh	r1, [r4, #4]
 800540a:	68e0      	ldr	r0, [r4, #12]
 800540c:	f001 fa9c 	bl	8006948 <gpio_reset>
  txdt = address;
 8005410:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005412:	462a      	mov	r2, r5
 8005414:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005416:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800541a:	2301      	movs	r3, #1
 800541c:	4630      	mov	r0, r6
 800541e:	f001 fe85 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005422:	f8cd 9000 	str.w	r9, [sp]
 8005426:	6821      	ldr	r1, [r4, #0]
 8005428:	4630      	mov	r0, r6
 800542a:	462a      	mov	r2, r5
 800542c:	4643      	mov	r3, r8
  txdt = value;
 800542e:	2508      	movs	r5, #8
 8005430:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005434:	f001 ff26 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005438:	88a1      	ldrh	r1, [r4, #4]
 800543a:	68e0      	ldr	r0, [r4, #12]
 800543c:	f001 fa7c 	bl	8006938 <gpio_set>
}
 8005440:	2001      	movs	r0, #1
 8005442:	b006      	add	sp, #24
 8005444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005448 <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 8005448:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 800544a:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 800544c:	b087      	sub	sp, #28
 800544e:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005450:	68c0      	ldr	r0, [r0, #12]
 8005452:	f001 fa79 	bl	8006948 <gpio_reset>
  txdt = address;
 8005456:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005458:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800545a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800545e:	f10d 020f 	add.w	r2, sp, #15
 8005462:	a804      	add	r0, sp, #16
 8005464:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005466:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005468:	f001 fe60 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800546c:	6821      	ldr	r1, [r4, #0]
 800546e:	9500      	str	r5, [sp, #0]
 8005470:	f10d 030e 	add.w	r3, sp, #14
 8005474:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005478:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800547c:	a804      	add	r0, sp, #16
  txdt = value;
 800547e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005482:	f001 feff 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005486:	68e0      	ldr	r0, [r4, #12]
 8005488:	88a1      	ldrh	r1, [r4, #4]
 800548a:	f001 fa55 	bl	8006938 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 800548e:	4a05      	ldr	r2, [pc, #20]	; (80054a4 <_ZN6sx127x10packetRssiEv+0x5c>)
 8005490:	6a23      	ldr	r3, [r4, #32]
  return response;
 8005492:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005496:	4293      	cmp	r3, r2
 8005498:	bfd4      	ite	le
 800549a:	23a4      	movle	r3, #164	; 0xa4
 800549c:	239d      	movgt	r3, #157	; 0x9d
}
 800549e:	1ac0      	subs	r0, r0, r3
 80054a0:	b007      	add	sp, #28
 80054a2:	bd30      	pop	{r4, r5, pc}
 80054a4:	1f4add3f 	.word	0x1f4add3f

080054a8 <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 80054a8:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 80054aa:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 80054ac:	b087      	sub	sp, #28
 80054ae:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 80054b0:	68c0      	ldr	r0, [r0, #12]
 80054b2:	f001 fa49 	bl	8006948 <gpio_reset>
  txdt = address;
 80054b6:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054b8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054ba:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054be:	f10d 020f 	add.w	r2, sp, #15
 80054c2:	a804      	add	r0, sp, #16
 80054c4:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054c6:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054c8:	f001 fe30 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054cc:	6821      	ldr	r1, [r4, #0]
 80054ce:	9500      	str	r5, [sp, #0]
 80054d0:	f10d 030e 	add.w	r3, sp, #14
 80054d4:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 80054d8:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054dc:	a804      	add	r0, sp, #16
  txdt = value;
 80054de:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054e2:	f001 fecf 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054e6:	68e0      	ldr	r0, [r4, #12]
 80054e8:	88a1      	ldrh	r1, [r4, #4]
 80054ea:	f001 fa25 	bl	8006938 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 80054ee:	4a05      	ldr	r2, [pc, #20]	; (8005504 <_ZN6sx127x4rssiEv+0x5c>)
 80054f0:	6a23      	ldr	r3, [r4, #32]
 80054f2:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80054f6:	4293      	cmp	r3, r2
 80054f8:	bfd4      	ite	le
 80054fa:	23a4      	movle	r3, #164	; 0xa4
 80054fc:	239d      	movgt	r3, #157	; 0x9d
}
 80054fe:	1ac0      	subs	r0, r0, r3
 8005500:	b007      	add	sp, #28
 8005502:	bd30      	pop	{r4, r5, pc}
 8005504:	1f4add3f 	.word	0x1f4add3f

08005508 <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800550c:	4604      	mov	r4, r0
 800550e:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005510:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005512:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005514:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005516:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005518:	f001 fa16 	bl	8006948 <gpio_reset>
  txdt = address;
 800551c:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 800551e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005520:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005524:	f10d 020f 	add.w	r2, sp, #15
 8005528:	2301      	movs	r3, #1
 800552a:	a804      	add	r0, sp, #16
 800552c:	f001 fdfe 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005530:	2301      	movs	r3, #1
 8005532:	9300      	str	r3, [sp, #0]
 8005534:	6821      	ldr	r1, [r4, #0]
 8005536:	f10d 030e 	add.w	r3, sp, #14
 800553a:	f10d 020f 	add.w	r2, sp, #15
 800553e:	a804      	add	r0, sp, #16
  txdt = value;
 8005540:	2600      	movs	r6, #0
 8005542:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005546:	f001 fe9d 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800554a:	88a1      	ldrh	r1, [r4, #4]
 800554c:	68e0      	ldr	r0, [r4, #12]
 800554e:	f001 f9f3 	bl	8006938 <gpio_set>
  return response;
 8005552:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 8005556:	eb03 0a09 	add.w	sl, r3, r9
 800555a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800555e:	bf84      	itt	hi
 8005560:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005564:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 8005568:	f1b9 0f00 	cmp.w	r9, #0
 800556c:	d025      	beq.n	80055ba <_ZN6sx127x8transmitEPKhj+0xb2>
 800556e:	3d01      	subs	r5, #1
 8005570:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 8005574:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005578:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 800557a:	88a1      	ldrh	r1, [r4, #4]
 800557c:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 800557e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 8005582:	f001 f9e1 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005586:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005588:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800558c:	2301      	movs	r3, #1
 800558e:	f10d 020f 	add.w	r2, sp, #15
 8005592:	a804      	add	r0, sp, #16
 8005594:	f001 fdca 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	9700      	str	r7, [sp, #0]
 800559c:	a804      	add	r0, sp, #16
 800559e:	f10d 030e 	add.w	r3, sp, #14
 80055a2:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 80055a6:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055aa:	f001 fe6b 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055ae:	88a1      	ldrh	r1, [r4, #4]
 80055b0:	68e0      	ldr	r0, [r4, #12]
 80055b2:	f001 f9c1 	bl	8006938 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 80055b6:	45ab      	cmp	fp, r5
 80055b8:	d1df      	bne.n	800557a <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 80055ba:	88a1      	ldrh	r1, [r4, #4]
 80055bc:	68e0      	ldr	r0, [r4, #12]
 80055be:	f001 f9c3 	bl	8006948 <gpio_reset>
  txdt = address;
 80055c2:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055c4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055c6:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055ca:	f10d 020f 	add.w	r2, sp, #15
 80055ce:	a804      	add	r0, sp, #16
 80055d0:	2301      	movs	r3, #1
 80055d2:	f001 fdab 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055d6:	2101      	movs	r1, #1
 80055d8:	9100      	str	r1, [sp, #0]
 80055da:	6821      	ldr	r1, [r4, #0]
 80055dc:	a804      	add	r0, sp, #16
 80055de:	f10d 030e 	add.w	r3, sp, #14
 80055e2:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 80055e6:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 80055ea:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055ee:	f001 fe49 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	88a1      	ldrh	r1, [r4, #4]
 80055f6:	f001 f99f 	bl	8006938 <gpio_set>
}
 80055fa:	4648      	mov	r0, r9
 80055fc:	b007      	add	sp, #28
 80055fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005602:	bf00      	nop

08005604 <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 8005604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005608:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 800560a:	b086      	sub	sp, #24
 800560c:	4604      	mov	r4, r0
 800560e:	4689      	mov	r9, r1
  txdt = address;
 8005610:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005614:	2701      	movs	r7, #1
  txdt = value;
 8005616:	462e      	mov	r6, r5
 8005618:	e020      	b.n	800565c <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 800561a:	88a1      	ldrh	r1, [r4, #4]
 800561c:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 800561e:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005620:	f001 f992 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005624:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005626:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800562a:	2301      	movs	r3, #1
 800562c:	f10d 020f 	add.w	r2, sp, #15
 8005630:	a804      	add	r0, sp, #16
 8005632:	f001 fd7b 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005636:	6821      	ldr	r1, [r4, #0]
 8005638:	9700      	str	r7, [sp, #0]
 800563a:	f10d 030e 	add.w	r3, sp, #14
 800563e:	f10d 020f 	add.w	r2, sp, #15
 8005642:	a804      	add	r0, sp, #16
  txdt = value;
 8005644:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005648:	f001 fe1c 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800564c:	88a1      	ldrh	r1, [r4, #4]
 800564e:	68e0      	ldr	r0, [r4, #12]
 8005650:	f001 f972 	bl	8006938 <gpio_set>
  return response;
 8005654:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 8005658:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 800565c:	88a1      	ldrh	r1, [r4, #4]
 800565e:	68e0      	ldr	r0, [r4, #12]
 8005660:	f001 f972 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005664:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005666:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800566a:	f10d 020f 	add.w	r2, sp, #15
 800566e:	a804      	add	r0, sp, #16
 8005670:	2301      	movs	r3, #1
 8005672:	f001 fd5b 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005676:	6821      	ldr	r1, [r4, #0]
 8005678:	9700      	str	r7, [sp, #0]
 800567a:	f10d 030e 	add.w	r3, sp, #14
 800567e:	f10d 020f 	add.w	r2, sp, #15
 8005682:	a804      	add	r0, sp, #16
  txdt = value;
 8005684:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005688:	f001 fdfc 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800568c:	68e0      	ldr	r0, [r4, #12]
 800568e:	88a1      	ldrh	r1, [r4, #4]
 8005690:	f001 f952 	bl	8006938 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005694:	69a0      	ldr	r0, [r4, #24]
  return response;
 8005696:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 800569a:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800569c:	b2c0      	uxtb	r0, r0
	while(available()){
 800569e:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 80056a0:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 80056a4:	f105 0501 	add.w	r5, r5, #1
 80056a8:	d1b7      	bne.n	800561a <_ZN6sx127x7receiveEPc+0x16>
}
 80056aa:	b006      	add	sp, #24
 80056ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080056b0 <_ZN6sx127x7ReceiveEh>:
void sx127x::Receive(uint8_t size){
 80056b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 80056b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::Receive(uint8_t size){
 80056b6:	b086      	sub	sp, #24
 80056b8:	4604      	mov	r4, r0
 80056ba:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80d4 	beq.w	800586a <_ZN6sx127x7ReceiveEh+0x1ba>
  gpio_reset(_csport, _cs);
 80056c2:	8881      	ldrh	r1, [r0, #4]
 80056c4:	68c0      	ldr	r0, [r0, #12]
 80056c6:	f001 f93f 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056ca:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 80056ce:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056d0:	ae04      	add	r6, sp, #16
 80056d2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056d4:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056d8:	462a      	mov	r2, r5
 80056da:	2301      	movs	r3, #1
 80056dc:	4630      	mov	r0, r6
 80056de:	f001 fd25 	bl	800712c <_ZN3spi8transmitEmm>
  txdt = value;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056e8:	2301      	movs	r3, #1
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	f10d 080e 	add.w	r8, sp, #14
 80056f0:	6821      	ldr	r1, [r4, #0]
 80056f2:	4630      	mov	r0, r6
 80056f4:	4643      	mov	r3, r8
 80056f6:	462a      	mov	r2, r5
 80056f8:	f001 fdc4 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056fc:	88a1      	ldrh	r1, [r4, #4]
 80056fe:	68e0      	ldr	r0, [r4, #12]
 8005700:	f001 f91a 	bl	8006938 <gpio_set>
	if (size > 0) {
 8005704:	2f00      	cmp	r7, #0
 8005706:	d07c      	beq.n	8005802 <_ZN6sx127x7ReceiveEh+0x152>
	_implicitHeaderMode = 1;
 8005708:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 800570c:	88a1      	ldrh	r1, [r4, #4]
 800570e:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005710:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 8005714:	f001 f918 	bl	8006948 <gpio_reset>
  txdt = address;
 8005718:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 800571c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800571e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005722:	464b      	mov	r3, r9
 8005724:	462a      	mov	r2, r5
 8005726:	4630      	mov	r0, r6
 8005728:	f001 fd00 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800572c:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005730:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005734:	4643      	mov	r3, r8
 8005736:	462a      	mov	r2, r5
 8005738:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800573a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800573e:	4630      	mov	r0, r6
 8005740:	f001 fda0 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005744:	88a1      	ldrh	r1, [r4, #4]
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	f001 f8f6 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 800574c:	88a1      	ldrh	r1, [r4, #4]
 800574e:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005750:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 8005754:	f001 f8f8 	bl	8006948 <gpio_reset>
  txdt = address;
 8005758:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 800575c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800575e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005762:	464b      	mov	r3, r9
 8005764:	462a      	mov	r2, r5
 8005766:	4630      	mov	r0, r6
 8005768:	f001 fce0 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800576c:	f8cd 9000 	str.w	r9, [sp]
 8005770:	4643      	mov	r3, r8
 8005772:	462a      	mov	r2, r5
 8005774:	6821      	ldr	r1, [r4, #0]
 8005776:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005778:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 800577c:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005780:	f001 fd80 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005784:	88a1      	ldrh	r1, [r4, #4]
 8005786:	68e0      	ldr	r0, [r4, #12]
 8005788:	f001 f8d6 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 800578c:	88a1      	ldrh	r1, [r4, #4]
 800578e:	68e0      	ldr	r0, [r4, #12]
 8005790:	f001 f8da 	bl	8006948 <gpio_reset>
  txdt = address;
 8005794:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005798:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800579a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800579e:	464b      	mov	r3, r9
 80057a0:	462a      	mov	r2, r5
 80057a2:	4630      	mov	r0, r6
 80057a4:	f001 fcc2 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a8:	f8cd 9000 	str.w	r9, [sp]
 80057ac:	4643      	mov	r3, r8
 80057ae:	462a      	mov	r2, r5
 80057b0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057b2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057b6:	4630      	mov	r0, r6
 80057b8:	f001 fd64 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057bc:	88a1      	ldrh	r1, [r4, #4]
 80057be:	68e0      	ldr	r0, [r4, #12]
 80057c0:	f001 f8ba 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 80057c4:	88a1      	ldrh	r1, [r4, #4]
 80057c6:	68e0      	ldr	r0, [r4, #12]
 80057c8:	f001 f8be 	bl	8006948 <gpio_reset>
  txdt = address;
 80057cc:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057d0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057d4:	462a      	mov	r2, r5
 80057d6:	4630      	mov	r0, r6
 80057d8:	2301      	movs	r3, #1
 80057da:	f001 fca7 	bl	800712c <_ZN3spi8transmitEmm>
  txdt = value;
 80057de:	2185      	movs	r1, #133	; 0x85
 80057e0:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057e4:	2101      	movs	r1, #1
 80057e6:	9100      	str	r1, [sp, #0]
 80057e8:	6821      	ldr	r1, [r4, #0]
 80057ea:	4630      	mov	r0, r6
 80057ec:	4643      	mov	r3, r8
 80057ee:	462a      	mov	r2, r5
 80057f0:	f001 fd48 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057f4:	88a1      	ldrh	r1, [r4, #4]
 80057f6:	68e0      	ldr	r0, [r4, #12]
 80057f8:	f001 f89e 	bl	8006938 <gpio_set>
}
 80057fc:	b006      	add	sp, #24
 80057fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005802:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005806:	88a1      	ldrh	r1, [r4, #4]
 8005808:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 800580a:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 800580c:	f001 f89c 	bl	8006948 <gpio_reset>
  txdt = address;
 8005810:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005814:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005816:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800581a:	464b      	mov	r3, r9
 800581c:	462a      	mov	r2, r5
 800581e:	4630      	mov	r0, r6
 8005820:	f001 fc84 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005824:	f8cd 9000 	str.w	r9, [sp]
 8005828:	4643      	mov	r3, r8
 800582a:	462a      	mov	r2, r5
 800582c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800582e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005832:	4630      	mov	r0, r6
 8005834:	f001 fd26 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005838:	88a1      	ldrh	r1, [r4, #4]
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	f001 f87c 	bl	8006938 <gpio_set>
  return response;
 8005840:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8005844:	88a1      	ldrh	r1, [r4, #4]
 8005846:	68e0      	ldr	r0, [r4, #12]
 8005848:	f001 f87e 	bl	8006948 <gpio_reset>
  txdt = address;
 800584c:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005850:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005852:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005856:	464b      	mov	r3, r9
 8005858:	462a      	mov	r2, r5
 800585a:	4630      	mov	r0, r6
 800585c:	f001 fc66 	bl	800712c <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005860:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005864:	f8cd 9000 	str.w	r9, [sp]
 8005868:	e7a0      	b.n	80057ac <_ZN6sx127x7ReceiveEh+0xfc>
 800586a:	f10d 050f 	add.w	r5, sp, #15
 800586e:	ae04      	add	r6, sp, #16
 8005870:	f10d 080e 	add.w	r8, sp, #14
 8005874:	e746      	b.n	8005704 <_ZN6sx127x7ReceiveEh+0x54>
 8005876:	bf00      	nop

08005878 <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 8005878:	b530      	push	{r4, r5, lr}
 800587a:	4604      	mov	r4, r0
 800587c:	b087      	sub	sp, #28
 800587e:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005880:	68c0      	ldr	r0, [r0, #12]
 8005882:	88a1      	ldrh	r1, [r4, #4]
 8005884:	f001 f860 	bl	8006948 <gpio_reset>
  txdt = address;
 8005888:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 800588a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800588c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005890:	f10d 020f 	add.w	r2, sp, #15
 8005894:	a804      	add	r0, sp, #16
 8005896:	2301      	movs	r3, #1
 8005898:	f001 fc48 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800589c:	2301      	movs	r3, #1
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058a2:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058a6:	a804      	add	r0, sp, #16
 80058a8:	f10d 030e 	add.w	r3, sp, #14
 80058ac:	f10d 020f 	add.w	r2, sp, #15
 80058b0:	f001 fce8 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058b4:	88a1      	ldrh	r1, [r4, #4]
 80058b6:	68e0      	ldr	r0, [r4, #12]
 80058b8:	f001 f83e 	bl	8006938 <gpio_set>
}
 80058bc:	b007      	add	sp, #28
 80058be:	bd30      	pop	{r4, r5, pc}

080058c0 <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 80058c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 80058c4:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 80058c6:	b086      	sub	sp, #24
 80058c8:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 80058ca:	68c0      	ldr	r0, [r0, #12]
 80058cc:	f001 f83c 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058d0:	2301      	movs	r3, #1
  txdt = address;
 80058d2:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058d4:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058d6:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 80058da:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058de:	a804      	add	r0, sp, #16
 80058e0:	6821      	ldr	r1, [r4, #0]
 80058e2:	f001 fc23 	bl	800712c <_ZN3spi8transmitEmm>
  txdt = value;
 80058e6:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058e8:	9600      	str	r6, [sp, #0]
 80058ea:	f10d 020f 	add.w	r2, sp, #15
 80058ee:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058f0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058f4:	a804      	add	r0, sp, #16
 80058f6:	f10d 030e 	add.w	r3, sp, #14
 80058fa:	f001 fcc3 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058fe:	88a1      	ldrh	r1, [r4, #4]
 8005900:	68e0      	ldr	r0, [r4, #12]
 8005902:	f001 f819 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 8005906:	88a1      	ldrh	r1, [r4, #4]
 8005908:	68e0      	ldr	r0, [r4, #12]
  return response;
 800590a:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 800590e:	f001 f81b 	bl	8006948 <gpio_reset>
  txdt = address;
 8005912:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005916:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005918:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800591c:	4633      	mov	r3, r6
 800591e:	f10d 020f 	add.w	r2, sp, #15
 8005922:	a804      	add	r0, sp, #16
 8005924:	f001 fc02 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005928:	9600      	str	r6, [sp, #0]
 800592a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800592c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005930:	a804      	add	r0, sp, #16
 8005932:	f10d 030e 	add.w	r3, sp, #14
 8005936:	f10d 020f 	add.w	r2, sp, #15
 800593a:	f001 fca3 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800593e:	88a1      	ldrh	r1, [r4, #4]
 8005940:	68e0      	ldr	r0, [r4, #12]
 8005942:	f000 fff9 	bl	8006938 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8005946:	f015 0720 	ands.w	r7, r5, #32
 800594a:	d16d      	bne.n	8005a28 <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 800594c:	066a      	lsls	r2, r5, #25
 800594e:	d569      	bpl.n	8005a24 <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005950:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005952:	88a1      	ldrh	r1, [r4, #4]
 8005954:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 8005956:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005958:	2d00      	cmp	r5, #0
 800595a:	d168      	bne.n	8005a2e <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 800595c:	f000 fff4 	bl	8006948 <gpio_reset>
  txdt = address;
 8005960:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005962:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005964:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005968:	4633      	mov	r3, r6
 800596a:	f10d 020f 	add.w	r2, sp, #15
 800596e:	a804      	add	r0, sp, #16
 8005970:	f001 fbdc 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005974:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005976:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800597a:	f10d 030e 	add.w	r3, sp, #14
 800597e:	f10d 020f 	add.w	r2, sp, #15
 8005982:	6821      	ldr	r1, [r4, #0]
 8005984:	a804      	add	r0, sp, #16
 8005986:	f001 fc7d 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800598a:	88a1      	ldrh	r1, [r4, #4]
 800598c:	68e0      	ldr	r0, [r4, #12]
 800598e:	f000 ffd3 	bl	8006938 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005992:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 8005994:	88a1      	ldrh	r1, [r4, #4]
 8005996:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005998:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 800599c:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 800599e:	f000 ffd3 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059a2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059a4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059a8:	462b      	mov	r3, r5
 80059aa:	f10d 020f 	add.w	r2, sp, #15
 80059ae:	a804      	add	r0, sp, #16
 80059b0:	f001 fbbc 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059b4:	9500      	str	r5, [sp, #0]
 80059b6:	f10d 030e 	add.w	r3, sp, #14
 80059ba:	f10d 020f 	add.w	r2, sp, #15
 80059be:	eb0d 0006 	add.w	r0, sp, r6
 80059c2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80059c4:	2600      	movs	r6, #0
 80059c6:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059ca:	f001 fc5b 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059ce:	88a1      	ldrh	r1, [r4, #4]
 80059d0:	68e0      	ldr	r0, [r4, #12]
 80059d2:	f000 ffb1 	bl	8006938 <gpio_set>
  gpio_reset(_csport, _cs);
 80059d6:	88a1      	ldrh	r1, [r4, #4]
 80059d8:	68e0      	ldr	r0, [r4, #12]
  return response;
 80059da:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 80059de:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 80059e0:	f000 ffb2 	bl	8006948 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059e4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059e6:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059ea:	462b      	mov	r3, r5
 80059ec:	f10d 020f 	add.w	r2, sp, #15
 80059f0:	a804      	add	r0, sp, #16
 80059f2:	f001 fb9b 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059f6:	9500      	str	r5, [sp, #0]
 80059f8:	f10d 030e 	add.w	r3, sp, #14
 80059fc:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80059fe:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a02:	f10d 020f 	add.w	r2, sp, #15
 8005a06:	a804      	add	r0, sp, #16
 8005a08:	f001 fc3c 	bl	8007284 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a0c:	88a1      	ldrh	r1, [r4, #4]
 8005a0e:	68e0      	ldr	r0, [r4, #12]
 8005a10:	f000 ff92 	bl	8006938 <gpio_set>
			if (RxDoneHandler) {
 8005a14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005a16:	b13b      	cbz	r3, 8005a28 <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4620      	mov	r0, r4
}
 8005a1c:	b006      	add	sp, #24
 8005a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 8005a22:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 8005a24:	072b      	lsls	r3, r5, #28
 8005a26:	d412      	bmi.n	8005a4e <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 8005a28:	b006      	add	sp, #24
 8005a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 8005a2e:	f000 ff8b 	bl	8006948 <gpio_reset>
  txdt = address;
 8005a32:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a34:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a36:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a3a:	4633      	mov	r3, r6
 8005a3c:	f10d 020f 	add.w	r2, sp, #15
 8005a40:	a804      	add	r0, sp, #16
 8005a42:	f001 fb73 	bl	800712c <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a46:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005a48:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a4c:	e795      	b.n	800597a <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 8005a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0e9      	beq.n	8005a28 <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 8005a54:	4620      	mov	r0, r4
}
 8005a56:	b006      	add	sp, #24
 8005a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 8005a5c:	4718      	bx	r3
 8005a5e:	bf00      	nop

08005a60 <ADC_IRQHandler>:



void ADC_IRQHandler(adc *adc){

}
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	0000      	movs	r0, r0
	...

08005a68 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef>:
	_adc = adc;
 8005a68:	a10f      	add	r1, pc, #60	; (adr r1, 8005aa8 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x40>)
 8005a6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a6e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8005a90 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x28>
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x30>)
 8005a74:	4a09      	ldr	r2, [pc, #36]	; (8005a9c <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x34>)
 8005a76:	ed83 7b00 	vstr	d7, [r3]
 8005a7a:	e9c2 0100 	strd	r0, r1, [r2]
 8005a7e:	4b08      	ldr	r3, [pc, #32]	; (8005aa0 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x38>)
 8005a80:	4808      	ldr	r0, [pc, #32]	; (8005aa4 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x3c>)
 8005a82:	2100      	movs	r1, #0
 8005a84:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(ADC3)
adc adc_3(ADC3);
adc_t adc3;
void ADC3_IRQHandler(void){
	ADC_IRQHandler(adc3);
}
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	f3af 8000 	nop.w
 8005a90:	40012000 	.word	0x40012000
 8005a94:	00000000 	.word	0x00000000
 8005a98:	2000b1f0 	.word	0x2000b1f0
 8005a9c:	2000b1f8 	.word	0x2000b1f8
 8005aa0:	2000b200 	.word	0x2000b200
 8005aa4:	40012200 	.word	0x40012200
 8005aa8:	40012100 	.word	0x40012100
 8005aac:	00000000 	.word	0x00000000

08005ab0 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 8005ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab2:	460e      	mov	r6, r1
	stm_ret_t ret;
 8005ab4:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 8005ab6:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 8005ab8:	7002      	strb	r2, [r0, #0]
 8005aba:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 8005abc:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 8005abe:	b085      	sub	sp, #20
 8005ac0:	4604      	mov	r4, r0
	stm_ret_t ret;
 8005ac2:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 8005ac4:	d006      	beq.n	8005ad4 <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 8005ac6:	f240 122b 	movw	r2, #299	; 0x12b
 8005aca:	f003 fa55 	bl	8008f78 <set_return>
		return ret;
	}

	return ret;
}
 8005ace:	4620      	mov	r0, r4
 8005ad0:	b005      	add	sp, #20
 8005ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8005ad4:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8005ad6:	68f1      	ldr	r1, [r6, #12]
 8005ad8:	680d      	ldr	r5, [r1, #0]
 8005ada:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 8005adc:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8005ade:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 8005ae2:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8005ae4:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 8005ae6:	6969      	ldr	r1, [r5, #20]
 8005ae8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005aec:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 8005aee:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8005af0:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 8005af2:	f021 0101 	bic.w	r1, r1, #1
 8005af6:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8005af8:	9000      	str	r0, [sp, #0]
 8005afa:	4629      	mov	r1, r5
 8005afc:	4638      	mov	r0, r7
 8005afe:	f003 f9ff 	bl	8008f00 <wait_flag_in_register_timeout>
 8005b02:	e897 0003 	ldmia.w	r7, {r0, r1}
 8005b06:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f003 fa42 	bl	8008f94 <is_timeout>
 8005b10:	bb20      	cbnz	r0, 8005b5c <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8005b12:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 8005b14:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8005b16:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 8005b18:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8005b1c:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 8005b1e:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8005b22:	bf94      	ite	ls
 8005b24:	6093      	strls	r3, [r2, #8]
 8005b26:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 8005b28:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8005b2c:	2a00      	cmp	r2, #0
 8005b2e:	dbce      	blt.n	8005ace <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b30:	0953      	lsrs	r3, r2, #5
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8005b38:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	f002 021f 	and.w	r2, r2, #31
 8005b42:	fa01 f202 	lsl.w	r2, r1, r2
 8005b46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005b52:	f3bf 8f6f 	isb	sy
}
 8005b56:	4620      	mov	r0, r4
 8005b58:	b005      	add	sp, #20
 8005b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f240 1119 	movw	r1, #281	; 0x119
 8005b62:	f003 fa0d 	bl	8008f80 <set_return_line>
}
 8005b66:	4620      	mov	r0, r4
 8005b68:	b005      	add	sp, #20
 8005b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b6c <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 8005b6c:	68c3      	ldr	r3, [r0, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 8005b72:	b280      	uxth	r0, r0
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop

08005b78 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 8005b78:	68c0      	ldr	r0, [r0, #12]
 8005b7a:	4770      	bx	lr

08005b7c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 8005b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 8005b80:	4857      	ldr	r0, [pc, #348]	; (8005ce0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 8005b82:	f8df e188 	ldr.w	lr, [pc, #392]	; 8005d0c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 8005b86:	4f57      	ldr	r7, [pc, #348]	; (8005ce4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 8005b88:	4e57      	ldr	r6, [pc, #348]	; (8005ce8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 8005b8a:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005d10 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 8005b8e:	f8df a184 	ldr.w	sl, [pc, #388]	; 8005d14 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 8005b92:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8005d18 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 8005b96:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8005d1c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 8005b9a:	f8df c184 	ldr.w	ip, [pc, #388]	; 8005d20 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 8005b9e:	4953      	ldr	r1, [pc, #332]	; (8005cec <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 8005ba0:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	2205      	movs	r2, #5
 8005ba8:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 8005bac:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 8005bb0:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 8005bb4:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 8005bb8:	f8c9 3014 	str.w	r3, [r9, #20]
 8005bbc:	e9cb 3308 	strd	r3, r3, [fp, #32]
 8005bc0:	f8c8 3014 	str.w	r3, [r8, #20]
 8005bc4:	e9ca 3308 	strd	r3, r3, [sl, #32]
 8005bc8:	e9c9 3308 	strd	r3, r3, [r9, #32]
 8005bcc:	e9c8 3308 	strd	r3, r3, [r8, #32]
 8005bd0:	f8cb 2010 	str.w	r2, [fp, #16]
 8005bd4:	f8cb 3018 	str.w	r3, [fp, #24]
 8005bd8:	f88b 301c 	strb.w	r3, [fp, #28]
 8005bdc:	f8ca 2010 	str.w	r2, [sl, #16]
 8005be0:	f8ca 3018 	str.w	r3, [sl, #24]
 8005be4:	f88a 301c 	strb.w	r3, [sl, #28]
 8005be8:	f8c9 2010 	str.w	r2, [r9, #16]
 8005bec:	f8c9 3018 	str.w	r3, [r9, #24]
 8005bf0:	f889 301c 	strb.w	r3, [r9, #28]
 8005bf4:	f8c8 2010 	str.w	r2, [r8, #16]
 8005bf8:	f8c8 3018 	str.w	r3, [r8, #24]
 8005bfc:	f888 301c 	strb.w	r3, [r8, #28]
 8005c00:	f8ce 2010 	str.w	r2, [lr, #16]
 8005c04:	f8ce 3014 	str.w	r3, [lr, #20]
 8005c08:	f8ce 3018 	str.w	r3, [lr, #24]
 8005c0c:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 8005c10:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 8005c14:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 8005c18:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	6102      	str	r2, [r0, #16]
 8005c1e:	6173      	str	r3, [r6, #20]
 8005c20:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8005c24:	6143      	str	r3, [r0, #20]
 8005c26:	6132      	str	r2, [r6, #16]
 8005c28:	61b3      	str	r3, [r6, #24]
 8005c2a:	7733      	strb	r3, [r6, #28]
 8005c2c:	6183      	str	r3, [r0, #24]
 8005c2e:	4606      	mov	r6, r0
 8005c30:	7703      	strb	r3, [r0, #28]
 8005c32:	6203      	str	r3, [r0, #32]
 8005c34:	6243      	str	r3, [r0, #36]	; 0x24
 8005c36:	482e      	ldr	r0, [pc, #184]	; (8005cf0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	f8ce 1008 	str.w	r1, [lr, #8]
 8005c3e:	f8cc 1008 	str.w	r1, [ip, #8]
 8005c42:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 8005c46:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8005c4a:	613a      	str	r2, [r7, #16]
 8005c4c:	61bb      	str	r3, [r7, #24]
 8005c4e:	773b      	strb	r3, [r7, #28]
 8005c50:	6102      	str	r2, [r0, #16]
 8005c52:	6143      	str	r3, [r0, #20]
 8005c54:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8005c58:	f8ce 3020 	str.w	r3, [lr, #32]
 8005c5c:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 8005c60:	f8cc 2010 	str.w	r2, [ip, #16]
 8005c64:	f8cc 3018 	str.w	r3, [ip, #24]
 8005c68:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 8005c6c:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005c6e:	4e21      	ldr	r6, [pc, #132]	; (8005cf4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8005c70:	4f21      	ldr	r7, [pc, #132]	; (8005cf8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 8005c72:	6173      	str	r3, [r6, #20]
 8005c74:	4e21      	ldr	r6, [pc, #132]	; (8005cfc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8005c76:	617b      	str	r3, [r7, #20]
 8005c78:	6173      	str	r3, [r6, #20]
 8005c7a:	4e1e      	ldr	r6, [pc, #120]	; (8005cf4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8005c7c:	4d20      	ldr	r5, [pc, #128]	; (8005d00 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 8005c7e:	6132      	str	r2, [r6, #16]
 8005c80:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8005c84:	61b3      	str	r3, [r6, #24]
 8005c86:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8005c88:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005c8a:	6183      	str	r3, [r0, #24]
 8005c8c:	4e1b      	ldr	r6, [pc, #108]	; (8005cfc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8005c8e:	7703      	strb	r3, [r0, #28]
 8005c90:	6203      	str	r3, [r0, #32]
 8005c92:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 8005c94:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 8005c96:	481b      	ldr	r0, [pc, #108]	; (8005d04 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 8005c98:	4c1b      	ldr	r4, [pc, #108]	; (8005d08 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 8005c9a:	613a      	str	r2, [r7, #16]
 8005c9c:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8005ca0:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8005ca4:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 8005cac:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 8005cae:	6132      	str	r2, [r6, #16]
 8005cb0:	61b3      	str	r3, [r6, #24]
 8005cb2:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8005cb4:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005cb6:	612a      	str	r2, [r5, #16]
 8005cb8:	616b      	str	r3, [r5, #20]
 8005cba:	61ab      	str	r3, [r5, #24]
 8005cbc:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 8005cbe:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 8005cc0:	6102      	str	r2, [r0, #16]
 8005cc2:	7703      	strb	r3, [r0, #28]
 8005cc4:	6163      	str	r3, [r4, #20]
 8005cc6:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8005cca:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8005cce:	6122      	str	r2, [r4, #16]
 8005cd0:	61a3      	str	r3, [r4, #24]
 8005cd2:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 8005cd4:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 8005cd6:	6143      	str	r3, [r0, #20]
 8005cd8:	6183      	str	r3, [r0, #24]
	_dma = dma;
 8005cda:	6081      	str	r1, [r0, #8]
}
 8005cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce0:	2000b348 	.word	0x2000b348
 8005ce4:	2000b2f8 	.word	0x2000b2f8
 8005ce8:	2000b320 	.word	0x2000b320
 8005cec:	40026000 	.word	0x40026000
 8005cf0:	2000b370 	.word	0x2000b370
 8005cf4:	2000b398 	.word	0x2000b398
 8005cf8:	2000b3c0 	.word	0x2000b3c0
 8005cfc:	2000b3e8 	.word	0x2000b3e8
 8005d00:	2000b410 	.word	0x2000b410
 8005d04:	2000b460 	.word	0x2000b460
 8005d08:	2000b438 	.word	0x2000b438
 8005d0c:	2000b2a8 	.word	0x2000b2a8
 8005d10:	2000b208 	.word	0x2000b208
 8005d14:	2000b230 	.word	0x2000b230
 8005d18:	2000b258 	.word	0x2000b258
 8005d1c:	2000b280 	.word	0x2000b280
 8005d20:	2000b2d0 	.word	0x2000b2d0

08005d24 <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8005d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d28:	b083      	sub	sp, #12
	stm_ret_t ret;
 8005d2a:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8005d2e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 8005d32:	f880 c000 	strb.w	ip, [r0]
 8005d36:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8005d38:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 8005d3c:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8005d3e:	f240 8085 	bls.w	8005e4c <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 8005d42:	2a03      	cmp	r2, #3
 8005d44:	4604      	mov	r4, r0
 8005d46:	d84b      	bhi.n	8005de0 <exti_init+0xbc>
 8005d48:	46ae      	mov	lr, r5
 8005d4a:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8005d4c:	1d97      	adds	r7, r2, #6
 8005d4e:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d50:	2501      	movs	r5, #1
 8005d52:	40bd      	lsls	r5, r7
 8005d54:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005d56:	484d      	ldr	r0, [pc, #308]	; (8005e8c <exti_init+0x168>)
 8005d58:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8005d5c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8005d60:	d105      	bne.n	8005d6e <exti_init+0x4a>
 8005d62:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8005d66:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 8005d6a:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8005d6e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005d72:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8005d76:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005d7a:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8005d7e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8005d82:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005d84:	9801      	ldr	r0, [sp, #4]
 8005d86:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8005d8a:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005d8e:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8005d92:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005d96:	fa09 fe0e 	lsl.w	lr, r9, lr
 8005d9a:	ea20 000e 	bic.w	r0, r0, lr
 8005d9e:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8005da0:	9801      	ldr	r0, [sp, #4]
 8005da2:	4301      	orrs	r1, r0
 8005da4:	9101      	str	r1, [sp, #4]

	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 8005da6:	9901      	ldr	r1, [sp, #4]
 8005da8:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8005dac:	07db      	lsls	r3, r3, #31
 8005dae:	d423      	bmi.n	8005df8 <exti_init+0xd4>
 8005db0:	2101      	movs	r1, #1
 8005db2:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 8005db6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005e94 <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 8005dba:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dbc:	4c34      	ldr	r4, [pc, #208]	; (8005e90 <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 8005dbe:	f8dc 1000 	ldr.w	r1, [ip]
 8005dc2:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8005dc6:	19e2      	adds	r2, r4, r7
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	ea41 010e 	orr.w	r1, r1, lr
 8005dce:	f8cc 1000 	str.w	r1, [ip]
 8005dd2:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dd6:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 8005dda:	b003      	add	sp, #12
 8005ddc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 8005de0:	1f10      	subs	r0, r2, #4
 8005de2:	2803      	cmp	r0, #3
 8005de4:	d915      	bls.n	8005e12 <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 8005de6:	f1a2 0008 	sub.w	r0, r2, #8
 8005dea:	2803      	cmp	r0, #3
 8005dec:	d825      	bhi.n	8005e3a <exti_init+0x116>
 8005dee:	f04f 0e08 	mov.w	lr, #8
 8005df2:	f04f 0c02 	mov.w	ip, #2
 8005df6:	e012      	b.n	8005e1e <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8005df8:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <exti_init+0x170>)
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	fa01 fe02 	lsl.w	lr, r1, r2
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	ea42 020e 	orr.w	r2, r2, lr
 8005e06:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	ea4e 0202 	orr.w	r2, lr, r2
 8005e0e:	60da      	str	r2, [r3, #12]
 8005e10:	e7d1      	b.n	8005db6 <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8005e12:	2a04      	cmp	r2, #4
 8005e14:	bf08      	it	eq
 8005e16:	4696      	moveq	lr, r2
 8005e18:	d098      	beq.n	8005d4c <exti_init+0x28>
 8005e1a:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 8005e1e:	1f50      	subs	r0, r2, #5
 8005e20:	b280      	uxth	r0, r0
 8005e22:	2804      	cmp	r0, #4
 8005e24:	bf35      	itete	cc
 8005e26:	2717      	movcc	r7, #23
 8005e28:	2728      	movcs	r7, #40	; 0x28
 8005e2a:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 8005e2e:	f44f 7580 	movcs.w	r5, #256	; 0x100
 8005e32:	bf34      	ite	cc
 8005e34:	2600      	movcc	r6, #0
 8005e36:	2601      	movcs	r6, #1
 8005e38:	e78d      	b.n	8005d56 <exti_init+0x32>
 8005e3a:	4666      	mov	r6, ip
 8005e3c:	2728      	movs	r7, #40	; 0x28
 8005e3e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005e42:	f04f 0e0c 	mov.w	lr, #12
 8005e46:	f04f 0c03 	mov.w	ip, #3
 8005e4a:	e784      	b.n	8005d56 <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 8005e4c:	4629      	mov	r1, r5
 8005e4e:	223a      	movs	r2, #58	; 0x3a
 8005e50:	f003 f892 	bl	8008f78 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8005e54:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <exti_init+0x174>)
 8005e56:	4a11      	ldr	r2, [pc, #68]	; (8005e9c <exti_init+0x178>)
 8005e58:	4911      	ldr	r1, [pc, #68]	; (8005ea0 <exti_init+0x17c>)
 8005e5a:	4812      	ldr	r0, [pc, #72]	; (8005ea4 <exti_init+0x180>)
 8005e5c:	f002 ff58 	bl	8008d10 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8005e60:	4911      	ldr	r1, [pc, #68]	; (8005ea8 <exti_init+0x184>)
 8005e62:	4810      	ldr	r0, [pc, #64]	; (8005ea4 <exti_init+0x180>)
 8005e64:	2205      	movs	r2, #5
 8005e66:	f002 fed7 	bl	8008c18 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8005e6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8005e6e:	f001 fde5 	bl	8007a3c <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e72:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005e76:	490d      	ldr	r1, [pc, #52]	; (8005eac <exti_init+0x188>)
 8005e78:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <exti_init+0x18c>)
 8005e7a:	68ca      	ldr	r2, [r1, #12]
 8005e7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005e80:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005e82:	60cb      	str	r3, [r1, #12]
 8005e84:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005e88:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005e8a:	e7fd      	b.n	8005e88 <exti_init+0x164>
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	e000e100 	.word	0xe000e100
 8005e94:	40013c00 	.word	0x40013c00
 8005e98:	0800cf38 	.word	0x0800cf38
 8005e9c:	0800cf44 	.word	0x0800cf44
 8005ea0:	0800cf6c 	.word	0x0800cf6c
 8005ea4:	0800cfb0 	.word	0x0800cfb0
 8005ea8:	0800cfb8 	.word	0x0800cfb8
 8005eac:	e000ed00 	.word	0xe000ed00
 8005eb0:	05fa0004 	.word	0x05fa0004

08005eb4 <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 8005eb4:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 8005eb6:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 8005eb8:	4c04      	ldr	r4, [pc, #16]	; (8005ecc <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 8005eba:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 8005ebe:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 8005ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ec6:	4770      	bx	lr
 8005ec8:	2000b4c8 	.word	0x2000b4c8
 8005ecc:	2000b488 	.word	0x2000b488

08005ed0 <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <EXTI0_IRQHandler+0x1c>)
 8005ed2:	695a      	ldr	r2, [r3, #20]
 8005ed4:	07d2      	lsls	r2, r2, #31
 8005ed6:	d507      	bpl.n	8005ee8 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ed8:	4a05      	ldr	r2, [pc, #20]	; (8005ef0 <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 8005eda:	2101      	movs	r1, #1
 8005edc:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ede:	6813      	ldr	r3, [r2, #0]
 8005ee0:	b113      	cbz	r3, 8005ee8 <EXTI0_IRQHandler+0x18>
 8005ee2:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <EXTI0_IRQHandler+0x24>)
 8005ee4:	6810      	ldr	r0, [r2, #0]
 8005ee6:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40013c00 	.word	0x40013c00
 8005ef0:	2000b488 	.word	0x2000b488
 8005ef4:	2000b4c8 	.word	0x2000b4c8

08005ef8 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <EXTI1_IRQHandler+0x1c>)
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	0792      	lsls	r2, r2, #30
 8005efe:	d507      	bpl.n	8005f10 <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f00:	4a05      	ldr	r2, [pc, #20]	; (8005f18 <EXTI1_IRQHandler+0x20>)
 8005f02:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 8005f04:	2102      	movs	r1, #2
 8005f06:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f08:	b112      	cbz	r2, 8005f10 <EXTI1_IRQHandler+0x18>
 8005f0a:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <EXTI1_IRQHandler+0x24>)
 8005f0c:	6858      	ldr	r0, [r3, #4]
 8005f0e:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40013c00 	.word	0x40013c00
 8005f18:	2000b488 	.word	0x2000b488
 8005f1c:	2000b4c8 	.word	0x2000b4c8

08005f20 <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005f20:	4b06      	ldr	r3, [pc, #24]	; (8005f3c <EXTI2_IRQHandler+0x1c>)
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	0752      	lsls	r2, r2, #29
 8005f26:	d507      	bpl.n	8005f38 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f28:	4a05      	ldr	r2, [pc, #20]	; (8005f40 <EXTI2_IRQHandler+0x20>)
 8005f2a:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 8005f2c:	2104      	movs	r1, #4
 8005f2e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f30:	b112      	cbz	r2, 8005f38 <EXTI2_IRQHandler+0x18>
 8005f32:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <EXTI2_IRQHandler+0x24>)
 8005f34:	6898      	ldr	r0, [r3, #8]
 8005f36:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	40013c00 	.word	0x40013c00
 8005f40:	2000b488 	.word	0x2000b488
 8005f44:	2000b4c8 	.word	0x2000b4c8

08005f48 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005f48:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <EXTI3_IRQHandler+0x1c>)
 8005f4a:	695a      	ldr	r2, [r3, #20]
 8005f4c:	0712      	lsls	r2, r2, #28
 8005f4e:	d507      	bpl.n	8005f60 <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f50:	4a05      	ldr	r2, [pc, #20]	; (8005f68 <EXTI3_IRQHandler+0x20>)
 8005f52:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 8005f54:	2108      	movs	r1, #8
 8005f56:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f58:	b112      	cbz	r2, 8005f60 <EXTI3_IRQHandler+0x18>
 8005f5a:	4b04      	ldr	r3, [pc, #16]	; (8005f6c <EXTI3_IRQHandler+0x24>)
 8005f5c:	68d8      	ldr	r0, [r3, #12]
 8005f5e:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40013c00 	.word	0x40013c00
 8005f68:	2000b488 	.word	0x2000b488
 8005f6c:	2000b4c8 	.word	0x2000b4c8

08005f70 <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005f70:	4b06      	ldr	r3, [pc, #24]	; (8005f8c <EXTI4_IRQHandler+0x1c>)
 8005f72:	695a      	ldr	r2, [r3, #20]
 8005f74:	06d2      	lsls	r2, r2, #27
 8005f76:	d507      	bpl.n	8005f88 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f78:	4a05      	ldr	r2, [pc, #20]	; (8005f90 <EXTI4_IRQHandler+0x20>)
 8005f7a:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 8005f7c:	2110      	movs	r1, #16
 8005f7e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f80:	b112      	cbz	r2, 8005f88 <EXTI4_IRQHandler+0x18>
 8005f82:	4b04      	ldr	r3, [pc, #16]	; (8005f94 <EXTI4_IRQHandler+0x24>)
 8005f84:	6918      	ldr	r0, [r3, #16]
 8005f86:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40013c00 	.word	0x40013c00
 8005f90:	2000b488 	.word	0x2000b488
 8005f94:	2000b4c8 	.word	0x2000b4c8

08005f98 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005f98:	4b20      	ldr	r3, [pc, #128]	; (800601c <EXTI9_5_IRQHandler+0x84>)
 8005f9a:	695a      	ldr	r2, [r3, #20]
 8005f9c:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 8005f9e:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8005fa0:	d507      	bpl.n	8005fb2 <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005fa2:	4a1f      	ldr	r2, [pc, #124]	; (8006020 <EXTI9_5_IRQHandler+0x88>)
 8005fa4:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 8005fa6:	2120      	movs	r1, #32
 8005fa8:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005faa:	b112      	cbz	r2, 8005fb2 <EXTI9_5_IRQHandler+0x1a>
 8005fac:	4b1d      	ldr	r3, [pc, #116]	; (8006024 <EXTI9_5_IRQHandler+0x8c>)
 8005fae:	6958      	ldr	r0, [r3, #20]
 8005fb0:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005fb2:	4b1a      	ldr	r3, [pc, #104]	; (800601c <EXTI9_5_IRQHandler+0x84>)
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	0654      	lsls	r4, r2, #25
 8005fb8:	d507      	bpl.n	8005fca <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005fba:	4a19      	ldr	r2, [pc, #100]	; (8006020 <EXTI9_5_IRQHandler+0x88>)
 8005fbc:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 8005fbe:	2140      	movs	r1, #64	; 0x40
 8005fc0:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005fc2:	b112      	cbz	r2, 8005fca <EXTI9_5_IRQHandler+0x32>
 8005fc4:	4b17      	ldr	r3, [pc, #92]	; (8006024 <EXTI9_5_IRQHandler+0x8c>)
 8005fc6:	6998      	ldr	r0, [r3, #24]
 8005fc8:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <EXTI9_5_IRQHandler+0x84>)
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	0610      	lsls	r0, r2, #24
 8005fd0:	d507      	bpl.n	8005fe2 <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <EXTI9_5_IRQHandler+0x88>)
 8005fd4:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 8005fd6:	2180      	movs	r1, #128	; 0x80
 8005fd8:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005fda:	b112      	cbz	r2, 8005fe2 <EXTI9_5_IRQHandler+0x4a>
 8005fdc:	4b11      	ldr	r3, [pc, #68]	; (8006024 <EXTI9_5_IRQHandler+0x8c>)
 8005fde:	69d8      	ldr	r0, [r3, #28]
 8005fe0:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005fe2:	4b0e      	ldr	r3, [pc, #56]	; (800601c <EXTI9_5_IRQHandler+0x84>)
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	05d1      	lsls	r1, r2, #23
 8005fe8:	d508      	bpl.n	8005ffc <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005fea:	4a0d      	ldr	r2, [pc, #52]	; (8006020 <EXTI9_5_IRQHandler+0x88>)
 8005fec:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 8005fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ff2:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ff4:	b112      	cbz	r2, 8005ffc <EXTI9_5_IRQHandler+0x64>
 8005ff6:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <EXTI9_5_IRQHandler+0x8c>)
 8005ff8:	6a18      	ldr	r0, [r3, #32]
 8005ffa:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005ffc:	4b07      	ldr	r3, [pc, #28]	; (800601c <EXTI9_5_IRQHandler+0x84>)
 8005ffe:	695a      	ldr	r2, [r3, #20]
 8006000:	0592      	lsls	r2, r2, #22
 8006002:	d50a      	bpl.n	800601a <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006004:	4a06      	ldr	r2, [pc, #24]	; (8006020 <EXTI9_5_IRQHandler+0x88>)
 8006006:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 8006008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800600c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800600e:	b122      	cbz	r2, 800601a <EXTI9_5_IRQHandler+0x82>
 8006010:	4b04      	ldr	r3, [pc, #16]	; (8006024 <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 8006012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006016:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006018:	4710      	bx	r2
}
 800601a:	bd10      	pop	{r4, pc}
 800601c:	40013c00 	.word	0x40013c00
 8006020:	2000b488 	.word	0x2000b488
 8006024:	2000b4c8 	.word	0x2000b4c8

08006028 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006028:	4b28      	ldr	r3, [pc, #160]	; (80060cc <EXTI15_10_IRQHandler+0xa4>)
 800602a:	695a      	ldr	r2, [r3, #20]
 800602c:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 800602e:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006030:	d508      	bpl.n	8006044 <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006032:	4a27      	ldr	r2, [pc, #156]	; (80060d0 <EXTI15_10_IRQHandler+0xa8>)
 8006034:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 8006036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800603a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800603c:	b112      	cbz	r2, 8006044 <EXTI15_10_IRQHandler+0x1c>
 800603e:	4b25      	ldr	r3, [pc, #148]	; (80060d4 <EXTI15_10_IRQHandler+0xac>)
 8006040:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006042:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006044:	4b21      	ldr	r3, [pc, #132]	; (80060cc <EXTI15_10_IRQHandler+0xa4>)
 8006046:	695a      	ldr	r2, [r3, #20]
 8006048:	0512      	lsls	r2, r2, #20
 800604a:	d508      	bpl.n	800605e <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800604c:	4a20      	ldr	r2, [pc, #128]	; (80060d0 <EXTI15_10_IRQHandler+0xa8>)
 800604e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 8006050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006054:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006056:	b112      	cbz	r2, 800605e <EXTI15_10_IRQHandler+0x36>
 8006058:	4b1e      	ldr	r3, [pc, #120]	; (80060d4 <EXTI15_10_IRQHandler+0xac>)
 800605a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800605c:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 800605e:	4b1b      	ldr	r3, [pc, #108]	; (80060cc <EXTI15_10_IRQHandler+0xa4>)
 8006060:	695a      	ldr	r2, [r3, #20]
 8006062:	04d4      	lsls	r4, r2, #19
 8006064:	d508      	bpl.n	8006078 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006066:	4a1a      	ldr	r2, [pc, #104]	; (80060d0 <EXTI15_10_IRQHandler+0xa8>)
 8006068:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 800606a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800606e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006070:	b112      	cbz	r2, 8006078 <EXTI15_10_IRQHandler+0x50>
 8006072:	4b18      	ldr	r3, [pc, #96]	; (80060d4 <EXTI15_10_IRQHandler+0xac>)
 8006074:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006076:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006078:	4b14      	ldr	r3, [pc, #80]	; (80060cc <EXTI15_10_IRQHandler+0xa4>)
 800607a:	695a      	ldr	r2, [r3, #20]
 800607c:	0490      	lsls	r0, r2, #18
 800607e:	d508      	bpl.n	8006092 <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006080:	4a13      	ldr	r2, [pc, #76]	; (80060d0 <EXTI15_10_IRQHandler+0xa8>)
 8006082:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8006084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006088:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800608a:	b112      	cbz	r2, 8006092 <EXTI15_10_IRQHandler+0x6a>
 800608c:	4b11      	ldr	r3, [pc, #68]	; (80060d4 <EXTI15_10_IRQHandler+0xac>)
 800608e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006090:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006092:	4b0e      	ldr	r3, [pc, #56]	; (80060cc <EXTI15_10_IRQHandler+0xa4>)
 8006094:	695a      	ldr	r2, [r3, #20]
 8006096:	0451      	lsls	r1, r2, #17
 8006098:	d508      	bpl.n	80060ac <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800609a:	4a0d      	ldr	r2, [pc, #52]	; (80060d0 <EXTI15_10_IRQHandler+0xa8>)
 800609c:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 800609e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80060a2:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80060a4:	b112      	cbz	r2, 80060ac <EXTI15_10_IRQHandler+0x84>
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <EXTI15_10_IRQHandler+0xac>)
 80060a8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80060aa:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80060ac:	4b07      	ldr	r3, [pc, #28]	; (80060cc <EXTI15_10_IRQHandler+0xa4>)
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	0412      	lsls	r2, r2, #16
 80060b2:	d50a      	bpl.n	80060ca <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <EXTI15_10_IRQHandler+0xa8>)
 80060b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 80060b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060bc:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80060be:	b122      	cbz	r2, 80060ca <EXTI15_10_IRQHandler+0xa2>
 80060c0:	4b04      	ldr	r3, [pc, #16]	; (80060d4 <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 80060c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80060c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80060c8:	4710      	bx	r2
}
 80060ca:	bd10      	pop	{r4, pc}
 80060cc:	40013c00 	.word	0x40013c00
 80060d0:	2000b488 	.word	0x2000b488
 80060d4:	2000b4c8 	.word	0x2000b4c8

080060d8 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 80060d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 80060dc:	4c3a      	ldr	r4, [pc, #232]	; (80061c8 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 80060de:	4d3b      	ldr	r5, [pc, #236]	; (80061cc <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 80060e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 80060e2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80061d4 <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 80060e6:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 80060e8:	4939      	ldr	r1, [pc, #228]	; (80061d0 <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 80060ea:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 80060ec:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 80060ee:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 80060f0:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 80060f2:	9b05      	ldr	r3, [sp, #20]
 80060f4:	ea03 0308 	and.w	r3, r3, r8
 80060f8:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 80060fa:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 80060fc:	bf0c      	ite	eq
 80060fe:	2710      	moveq	r7, #16
 8006100:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006102:	433b      	orrs	r3, r7
 8006104:	f043 0301 	orr.w	r3, r3, #1
 8006108:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800610a:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006112:	2220      	movs	r2, #32
 8006114:	2300      	movs	r3, #0
 8006116:	a806      	add	r0, sp, #24
 8006118:	9600      	str	r6, [sp, #0]
 800611a:	f002 fef1 	bl	8008f00 <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 800611e:	2001      	movs	r0, #1
 8006120:	f001 fcc2 	bl	8007aa8 <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006124:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006126:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006128:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800612a:	4929      	ldr	r1, [pc, #164]	; (80061d0 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 800612c:	ea03 0308 	and.w	r3, r3, r8
 8006130:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006132:	9b04      	ldr	r3, [sp, #16]
 8006134:	433b      	orrs	r3, r7
 8006136:	f043 0302 	orr.w	r3, r3, #2
 800613a:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 800613c:	9b04      	ldr	r3, [sp, #16]
 800613e:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006140:	a806      	add	r0, sp, #24
 8006142:	9600      	str	r6, [sp, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	2220      	movs	r2, #32
 8006148:	f002 feda 	bl	8008f00 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 800614c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800614e:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006150:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006152:	491f      	ldr	r1, [pc, #124]	; (80061d0 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006154:	ea03 0308 	and.w	r3, r3, r8
 8006158:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 800615a:	9b03      	ldr	r3, [sp, #12]
 800615c:	433b      	orrs	r3, r7
 800615e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8006162:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006164:	9b03      	ldr	r3, [sp, #12]
 8006166:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006168:	a806      	add	r0, sp, #24
 800616a:	9600      	str	r6, [sp, #0]
 800616c:	2300      	movs	r3, #0
 800616e:	2220      	movs	r2, #32
 8006170:	f002 fec6 	bl	8008f00 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006174:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006176:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006178:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800617a:	4915      	ldr	r1, [pc, #84]	; (80061d0 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 800617c:	ea03 0308 	and.w	r3, r3, r8
 8006180:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006182:	9b02      	ldr	r3, [sp, #8]
 8006184:	433b      	orrs	r3, r7
 8006186:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 800618a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 800618e:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006194:	a806      	add	r0, sp, #24
 8006196:	2300      	movs	r3, #0
 8006198:	9600      	str	r6, [sp, #0]
 800619a:	2220      	movs	r2, #32
 800619c:	f002 feb0 	bl	8008f00 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 80061a0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80061a2:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 80061a4:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 80061a6:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 80061a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80061ac:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80061b0:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 80061b2:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 80061b4:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 80061b6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80061ba:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 80061bc:	9b06      	ldr	r3, [sp, #24]
 80061be:	6563      	str	r3, [r4, #84]	; 0x54
}
 80061c0:	b008      	add	sp, #32
 80061c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c6:	bf00      	nop
 80061c8:	a0000100 	.word	0xa0000100
 80061cc:	2000b508 	.word	0x2000b508
 80061d0:	a0000158 	.word	0xa0000158
 80061d4:	ffc00000 	.word	0xffc00000

080061d8 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 80061d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 80061dc:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8006514 <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 80061e0:	4ec8      	ldr	r6, [pc, #800]	; (8006504 <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 80061e2:	4dc9      	ldr	r5, [pc, #804]	; (8006508 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 80061e4:	4cc9      	ldr	r4, [pc, #804]	; (800650c <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 80061e6:	4fca      	ldr	r7, [pc, #808]	; (8006510 <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 80061e8:	4640      	mov	r0, r8
 80061ea:	f000 fa5d 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 80061ee:	4630      	mov	r0, r6
 80061f0:	f000 fa5a 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 fa57 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 fa54 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006200:	4638      	mov	r0, r7
 8006202:	f000 fa51 	bl	80066a8 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 8006206:	4620      	mov	r0, r4
 8006208:	220c      	movs	r2, #12
 800620a:	2100      	movs	r1, #0
 800620c:	f000 fb34 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006210:	4620      	mov	r0, r4
 8006212:	2207      	movs	r2, #7
 8006214:	2100      	movs	r1, #0
 8006216:	f000 fb6d 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 800621a:	4620      	mov	r0, r4
 800621c:	220c      	movs	r2, #12
 800621e:	2101      	movs	r1, #1
 8006220:	f000 fb2a 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 8006224:	4620      	mov	r0, r4
 8006226:	2207      	movs	r2, #7
 8006228:	2101      	movs	r1, #1
 800622a:	f000 fb63 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 800622e:	4620      	mov	r0, r4
 8006230:	220c      	movs	r2, #12
 8006232:	2102      	movs	r1, #2
 8006234:	f000 fb20 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 8006238:	4620      	mov	r0, r4
 800623a:	2207      	movs	r2, #7
 800623c:	2102      	movs	r1, #2
 800623e:	f000 fb59 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 8006242:	4620      	mov	r0, r4
 8006244:	220c      	movs	r2, #12
 8006246:	2103      	movs	r1, #3
 8006248:	f000 fb16 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 800624c:	4620      	mov	r0, r4
 800624e:	2207      	movs	r2, #7
 8006250:	2103      	movs	r1, #3
 8006252:	f000 fb4f 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 8006256:	4620      	mov	r0, r4
 8006258:	220c      	movs	r2, #12
 800625a:	2104      	movs	r1, #4
 800625c:	f000 fb0c 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 8006260:	4620      	mov	r0, r4
 8006262:	2207      	movs	r2, #7
 8006264:	2104      	movs	r1, #4
 8006266:	f000 fb45 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 800626a:	4620      	mov	r0, r4
 800626c:	220c      	movs	r2, #12
 800626e:	2105      	movs	r1, #5
 8006270:	f000 fb02 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 8006274:	4620      	mov	r0, r4
 8006276:	2207      	movs	r2, #7
 8006278:	2105      	movs	r1, #5
 800627a:	f000 fb3b 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 800627e:	220c      	movs	r2, #12
 8006280:	4611      	mov	r1, r2
 8006282:	4620      	mov	r0, r4
 8006284:	f000 faf8 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006288:	4620      	mov	r0, r4
 800628a:	2207      	movs	r2, #7
 800628c:	210c      	movs	r1, #12
 800628e:	f000 fb31 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 8006292:	4620      	mov	r0, r4
 8006294:	220c      	movs	r2, #12
 8006296:	210d      	movs	r1, #13
 8006298:	f000 faee 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 800629c:	4620      	mov	r0, r4
 800629e:	2207      	movs	r2, #7
 80062a0:	210d      	movs	r1, #13
 80062a2:	f000 fb27 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 80062a6:	4620      	mov	r0, r4
 80062a8:	220c      	movs	r2, #12
 80062aa:	210e      	movs	r1, #14
 80062ac:	f000 fae4 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 80062b0:	4620      	mov	r0, r4
 80062b2:	2207      	movs	r2, #7
 80062b4:	210e      	movs	r1, #14
 80062b6:	f000 fb1d 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 80062ba:	4620      	mov	r0, r4
 80062bc:	220c      	movs	r2, #12
 80062be:	210f      	movs	r1, #15
 80062c0:	f000 fada 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 80062c4:	4620      	mov	r0, r4
 80062c6:	2207      	movs	r2, #7
 80062c8:	210f      	movs	r1, #15
 80062ca:	f000 fb13 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 80062ce:	4638      	mov	r0, r7
 80062d0:	220c      	movs	r2, #12
 80062d2:	2100      	movs	r1, #0
 80062d4:	f000 fad0 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 80062d8:	4638      	mov	r0, r7
 80062da:	2207      	movs	r2, #7
 80062dc:	2100      	movs	r1, #0
 80062de:	f000 fb09 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 80062e2:	4638      	mov	r0, r7
 80062e4:	220c      	movs	r2, #12
 80062e6:	2101      	movs	r1, #1
 80062e8:	f000 fac6 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 80062ec:	4638      	mov	r0, r7
 80062ee:	2207      	movs	r2, #7
 80062f0:	2101      	movs	r1, #1
 80062f2:	f000 faff 	bl	80068f4 <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 80062f6:	4630      	mov	r0, r6
 80062f8:	220c      	movs	r2, #12
 80062fa:	210e      	movs	r1, #14
 80062fc:	f000 fabc 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006300:	4630      	mov	r0, r6
 8006302:	2207      	movs	r2, #7
 8006304:	210e      	movs	r1, #14
 8006306:	f000 faf5 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 800630a:	4630      	mov	r0, r6
 800630c:	220c      	movs	r2, #12
 800630e:	210f      	movs	r1, #15
 8006310:	f000 fab2 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 8006314:	4630      	mov	r0, r6
 8006316:	2207      	movs	r2, #7
 8006318:	210f      	movs	r1, #15
 800631a:	f000 faeb 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 800631e:	4630      	mov	r0, r6
 8006320:	220c      	movs	r2, #12
 8006322:	2100      	movs	r1, #0
 8006324:	f000 faa8 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006328:	4630      	mov	r0, r6
 800632a:	2207      	movs	r2, #7
 800632c:	2100      	movs	r1, #0
 800632e:	f000 fae1 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 8006332:	4630      	mov	r0, r6
 8006334:	220c      	movs	r2, #12
 8006336:	2101      	movs	r1, #1
 8006338:	f000 fa9e 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 800633c:	4630      	mov	r0, r6
 800633e:	2207      	movs	r2, #7
 8006340:	2101      	movs	r1, #1
 8006342:	f000 fad7 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 8006346:	4628      	mov	r0, r5
 8006348:	220c      	movs	r2, #12
 800634a:	2107      	movs	r1, #7
 800634c:	f000 fa94 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 8006350:	2207      	movs	r2, #7
 8006352:	4611      	mov	r1, r2
 8006354:	4628      	mov	r0, r5
 8006356:	f000 facd 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 800635a:	4628      	mov	r0, r5
 800635c:	220c      	movs	r2, #12
 800635e:	2108      	movs	r1, #8
 8006360:	f000 fa8a 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 8006364:	4628      	mov	r0, r5
 8006366:	2207      	movs	r2, #7
 8006368:	2108      	movs	r1, #8
 800636a:	f000 fac3 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 800636e:	4628      	mov	r0, r5
 8006370:	220c      	movs	r2, #12
 8006372:	2109      	movs	r1, #9
 8006374:	f000 fa80 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 8006378:	4628      	mov	r0, r5
 800637a:	2207      	movs	r2, #7
 800637c:	2109      	movs	r1, #9
 800637e:	f000 fab9 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 8006382:	4628      	mov	r0, r5
 8006384:	220c      	movs	r2, #12
 8006386:	210a      	movs	r1, #10
 8006388:	f000 fa76 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 800638c:	4628      	mov	r0, r5
 800638e:	2207      	movs	r2, #7
 8006390:	210a      	movs	r1, #10
 8006392:	f000 faaf 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 8006396:	4628      	mov	r0, r5
 8006398:	220c      	movs	r2, #12
 800639a:	210b      	movs	r1, #11
 800639c:	f000 fa6c 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 80063a0:	4628      	mov	r0, r5
 80063a2:	2207      	movs	r2, #7
 80063a4:	210b      	movs	r1, #11
 80063a6:	f000 faa5 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 80063aa:	220c      	movs	r2, #12
 80063ac:	4611      	mov	r1, r2
 80063ae:	4628      	mov	r0, r5
 80063b0:	f000 fa62 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 80063b4:	4628      	mov	r0, r5
 80063b6:	2207      	movs	r2, #7
 80063b8:	210c      	movs	r1, #12
 80063ba:	f000 fa9b 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 80063be:	4628      	mov	r0, r5
 80063c0:	220c      	movs	r2, #12
 80063c2:	210d      	movs	r1, #13
 80063c4:	f000 fa58 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 80063c8:	4628      	mov	r0, r5
 80063ca:	2207      	movs	r2, #7
 80063cc:	210d      	movs	r1, #13
 80063ce:	f000 fa91 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 80063d2:	4628      	mov	r0, r5
 80063d4:	220c      	movs	r2, #12
 80063d6:	210e      	movs	r1, #14
 80063d8:	f000 fa4e 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 80063dc:	4628      	mov	r0, r5
 80063de:	2207      	movs	r2, #7
 80063e0:	210e      	movs	r1, #14
 80063e2:	f000 fa87 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 80063e6:	4628      	mov	r0, r5
 80063e8:	220c      	movs	r2, #12
 80063ea:	210f      	movs	r1, #15
 80063ec:	f000 fa44 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 80063f0:	4628      	mov	r0, r5
 80063f2:	2207      	movs	r2, #7
 80063f4:	210f      	movs	r1, #15
 80063f6:	f000 fa7d 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 80063fa:	4630      	mov	r0, r6
 80063fc:	220c      	movs	r2, #12
 80063fe:	2108      	movs	r1, #8
 8006400:	f000 fa3a 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006404:	4630      	mov	r0, r6
 8006406:	2207      	movs	r2, #7
 8006408:	2108      	movs	r1, #8
 800640a:	f000 fa73 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 800640e:	4630      	mov	r0, r6
 8006410:	220c      	movs	r2, #12
 8006412:	2109      	movs	r1, #9
 8006414:	f000 fa30 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006418:	4630      	mov	r0, r6
 800641a:	2207      	movs	r2, #7
 800641c:	2109      	movs	r1, #9
 800641e:	f000 fa69 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006422:	4630      	mov	r0, r6
 8006424:	220c      	movs	r2, #12
 8006426:	210a      	movs	r1, #10
 8006428:	f000 fa26 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 800642c:	4630      	mov	r0, r6
 800642e:	2207      	movs	r2, #7
 8006430:	210a      	movs	r1, #10
 8006432:	f000 fa5f 	bl	80068f4 <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006436:	4628      	mov	r0, r5
 8006438:	220c      	movs	r2, #12
 800643a:	2100      	movs	r1, #0
 800643c:	f000 fa1c 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006440:	4628      	mov	r0, r5
 8006442:	2207      	movs	r2, #7
 8006444:	2100      	movs	r1, #0
 8006446:	f000 fa55 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 800644a:	4628      	mov	r0, r5
 800644c:	220c      	movs	r2, #12
 800644e:	2101      	movs	r1, #1
 8006450:	f000 fa12 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006454:	4628      	mov	r0, r5
 8006456:	2207      	movs	r2, #7
 8006458:	2101      	movs	r1, #1
 800645a:	f000 fa4b 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 800645e:	4638      	mov	r0, r7
 8006460:	220c      	movs	r2, #12
 8006462:	2104      	movs	r1, #4
 8006464:	f000 fa08 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006468:	4638      	mov	r0, r7
 800646a:	2207      	movs	r2, #7
 800646c:	2104      	movs	r1, #4
 800646e:	f000 fa41 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006472:	4638      	mov	r0, r7
 8006474:	220c      	movs	r2, #12
 8006476:	2105      	movs	r1, #5
 8006478:	f000 f9fe 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 800647c:	4638      	mov	r0, r7
 800647e:	2207      	movs	r2, #7
 8006480:	2105      	movs	r1, #5
 8006482:	f000 fa37 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006486:	4638      	mov	r0, r7
 8006488:	220c      	movs	r2, #12
 800648a:	210f      	movs	r1, #15
 800648c:	f000 f9f4 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006490:	4638      	mov	r0, r7
 8006492:	2207      	movs	r2, #7
 8006494:	210f      	movs	r1, #15
 8006496:	f000 fa2d 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 800649a:	4620      	mov	r0, r4
 800649c:	220c      	movs	r2, #12
 800649e:	210b      	movs	r1, #11
 80064a0:	f000 f9ea 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 80064a4:	4620      	mov	r0, r4
 80064a6:	2207      	movs	r2, #7
 80064a8:	210b      	movs	r1, #11
 80064aa:	f000 fa23 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 80064ae:	4638      	mov	r0, r7
 80064b0:	220c      	movs	r2, #12
 80064b2:	2108      	movs	r1, #8
 80064b4:	f000 f9e0 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 80064b8:	4638      	mov	r0, r7
 80064ba:	2207      	movs	r2, #7
 80064bc:	2108      	movs	r1, #8
 80064be:	f000 fa19 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 80064c2:	4640      	mov	r0, r8
 80064c4:	220c      	movs	r2, #12
 80064c6:	2100      	movs	r1, #0
 80064c8:	f000 f9d6 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 80064cc:	4640      	mov	r0, r8
 80064ce:	2207      	movs	r2, #7
 80064d0:	2100      	movs	r1, #0
 80064d2:	f000 fa0f 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 80064d6:	4640      	mov	r0, r8
 80064d8:	220c      	movs	r2, #12
 80064da:	2102      	movs	r1, #2
 80064dc:	f000 f9cc 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 80064e0:	4640      	mov	r0, r8
 80064e2:	2207      	movs	r2, #7
 80064e4:	2102      	movs	r1, #2
 80064e6:	f000 fa05 	bl	80068f4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 80064ea:	4640      	mov	r0, r8
 80064ec:	220c      	movs	r2, #12
 80064ee:	2103      	movs	r1, #3
 80064f0:	f000 f9c2 	bl	8006878 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 80064f4:	4640      	mov	r0, r8
 80064f6:	2207      	movs	r2, #7

}
 80064f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 80064fc:	2103      	movs	r1, #3
 80064fe:	f000 b9f9 	b.w	80068f4 <gpio_set_alternatefunction_type>
 8006502:	bf00      	nop
 8006504:	40020c00 	.word	0x40020c00
 8006508:	40021000 	.word	0x40021000
 800650c:	40021400 	.word	0x40021400
 8006510:	40021800 	.word	0x40021800
 8006514:	40020800 	.word	0x40020800

08006518 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006518:	b530      	push	{r4, r5, lr}
	_conf = conf;
 800651a:	4c60      	ldr	r4, [pc, #384]	; (800669c <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 800651c:	b083      	sub	sp, #12
	_conf = conf;
 800651e:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006520:	f7ff fe5a 	bl	80061d8 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006524:	4a5e      	ldr	r2, [pc, #376]	; (80066a0 <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006526:	495f      	ldr	r1, [pc, #380]	; (80066a4 <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006528:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	781a      	ldrb	r2, [r3, #0]
 8006534:	2a00      	cmp	r2, #0
 8006536:	d148      	bne.n	80065ca <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006538:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800653a:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 800653c:	7a9c      	ldrb	r4, [r3, #10]
 800653e:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 8006540:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 8006542:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006544:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 8006546:	7b1c      	ldrb	r4, [r3, #12]
 8006548:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 800654a:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 800654c:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 800654e:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006550:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 8006552:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 8006554:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006556:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 8006558:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 800655a:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 800655c:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 800655e:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006560:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006562:	4302      	orrs	r2, r0
 8006564:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006566:	b119      	cbz	r1, 8006570 <fmc_sdram_init+0x58>
 8006568:	9a00      	ldr	r2, [sp, #0]
 800656a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800656e:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006570:	7cda      	ldrb	r2, [r3, #19]
 8006572:	2a00      	cmp	r2, #0
 8006574:	f040 808c 	bne.w	8006690 <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006578:	494a      	ldr	r1, [pc, #296]	; (80066a4 <fmc_sdram_init+0x18c>)
 800657a:	9a00      	ldr	r2, [sp, #0]
 800657c:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 800657e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006580:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 8006582:	2000      	movs	r0, #0
 8006584:	9a00      	ldr	r2, [sp, #0]
 8006586:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006588:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 800658a:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800658c:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 800658e:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006590:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006592:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006594:	432a      	orrs	r2, r5
 8006596:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 800659a:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800659c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80065a0:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 80065a4:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80065a6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80065aa:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80065ac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80065b0:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 80065b4:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80065b6:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80065ba:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80065bc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80065c0:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 80065c2:	9b00      	ldr	r3, [sp, #0]
 80065c4:	648b      	str	r3, [r1, #72]	; 0x48
}
 80065c6:	b003      	add	sp, #12
 80065c8:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 80065ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80065cc:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 80065ce:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 80065d0:	891a      	ldrh	r2, [r3, #8]
 80065d2:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 80065d4:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80065d8:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 80065da:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80065dc:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 80065de:	4322      	orrs	r2, r4
 80065e0:	b292      	uxth	r2, r2
 80065e2:	4302      	orrs	r2, r0
 80065e4:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80065e6:	b119      	cbz	r1, 80065f0 <fmc_sdram_init+0xd8>
 80065e8:	9a01      	ldr	r2, [sp, #4]
 80065ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065ee:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 80065f0:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <fmc_sdram_init+0x18c>)
 80065f2:	9901      	ldr	r1, [sp, #4]
 80065f4:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 80065f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80065f8:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 80065fa:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 80065fc:	7adc      	ldrb	r4, [r3, #11]
 80065fe:	7a9a      	ldrb	r2, [r3, #10]
 8006600:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 8006602:	0c09      	lsrs	r1, r1, #16
 8006604:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006606:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 8006608:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 800660a:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 800660c:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 800660e:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 8006610:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 8006612:	4322      	orrs	r2, r4
 8006614:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006616:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 8006618:	4302      	orrs	r2, r0
 800661a:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 800661c:	b119      	cbz	r1, 8006626 <fmc_sdram_init+0x10e>
 800661e:	9a01      	ldr	r2, [sp, #4]
 8006620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006624:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 8006626:	491f      	ldr	r1, [pc, #124]	; (80066a4 <fmc_sdram_init+0x18c>)
 8006628:	9a01      	ldr	r2, [sp, #4]
 800662a:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 800662c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800662e:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8006630:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006634:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8006636:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 800663a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 800663e:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006640:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006642:	9801      	ldr	r0, [sp, #4]
 8006644:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006646:	0512      	lsls	r2, r2, #20
 8006648:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800664c:	4302      	orrs	r2, r0
 800664e:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8006650:	9a01      	ldr	r2, [sp, #4]
 8006652:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 8006654:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006656:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 8006658:	2000      	movs	r0, #0
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800665e:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006660:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006662:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006664:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006666:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006668:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800666a:	432a      	orrs	r2, r5
 800666c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006670:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006672:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006674:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006678:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 800667a:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800667c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006680:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006682:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006686:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800668c:	b003      	add	sp, #12
 800668e:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006690:	9a00      	ldr	r2, [sp, #0]
 8006692:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006696:	9200      	str	r2, [sp, #0]
 8006698:	e76e      	b.n	8006578 <fmc_sdram_init+0x60>
 800669a:	bf00      	nop
 800669c:	2000b508 	.word	0x2000b508
 80066a0:	40023800 	.word	0x40023800
 80066a4:	a0000100 	.word	0xa0000100

080066a8 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 80066a8:	4b28      	ldr	r3, [pc, #160]	; (800674c <gpio_port_clock_enable+0xa4>)
 80066aa:	4298      	cmp	r0, r3
 80066ac:	d01e      	beq.n	80066ec <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 80066ae:	4b28      	ldr	r3, [pc, #160]	; (8006750 <gpio_port_clock_enable+0xa8>)
 80066b0:	4298      	cmp	r0, r3
 80066b2:	d021      	beq.n	80066f8 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 80066b4:	4b27      	ldr	r3, [pc, #156]	; (8006754 <gpio_port_clock_enable+0xac>)
 80066b6:	4298      	cmp	r0, r3
 80066b8:	d024      	beq.n	8006704 <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 80066ba:	4b27      	ldr	r3, [pc, #156]	; (8006758 <gpio_port_clock_enable+0xb0>)
 80066bc:	4298      	cmp	r0, r3
 80066be:	d00f      	beq.n	80066e0 <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 80066c0:	4b26      	ldr	r3, [pc, #152]	; (800675c <gpio_port_clock_enable+0xb4>)
 80066c2:	4298      	cmp	r0, r3
 80066c4:	d024      	beq.n	8006710 <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 80066c6:	4b26      	ldr	r3, [pc, #152]	; (8006760 <gpio_port_clock_enable+0xb8>)
 80066c8:	4298      	cmp	r0, r3
 80066ca:	d027      	beq.n	800671c <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 80066cc:	4b25      	ldr	r3, [pc, #148]	; (8006764 <gpio_port_clock_enable+0xbc>)
 80066ce:	4298      	cmp	r0, r3
 80066d0:	d02a      	beq.n	8006728 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 80066d2:	4b25      	ldr	r3, [pc, #148]	; (8006768 <gpio_port_clock_enable+0xc0>)
 80066d4:	4298      	cmp	r0, r3
 80066d6:	d033      	beq.n	8006740 <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 80066d8:	4b24      	ldr	r3, [pc, #144]	; (800676c <gpio_port_clock_enable+0xc4>)
 80066da:	4298      	cmp	r0, r3
 80066dc:	d02a      	beq.n	8006734 <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 80066de:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 80066e0:	4a23      	ldr	r2, [pc, #140]	; (8006770 <gpio_port_clock_enable+0xc8>)
 80066e2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80066e4:	f043 0308 	orr.w	r3, r3, #8
 80066e8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ea:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 80066ec:	4a20      	ldr	r2, [pc, #128]	; (8006770 <gpio_port_clock_enable+0xc8>)
 80066ee:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	6313      	str	r3, [r2, #48]	; 0x30
 80066f6:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <gpio_port_clock_enable+0xc8>)
 80066fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80066fc:	f043 0302 	orr.w	r3, r3, #2
 8006700:	6313      	str	r3, [r2, #48]	; 0x30
 8006702:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 8006704:	4a1a      	ldr	r2, [pc, #104]	; (8006770 <gpio_port_clock_enable+0xc8>)
 8006706:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006708:	f043 0304 	orr.w	r3, r3, #4
 800670c:	6313      	str	r3, [r2, #48]	; 0x30
 800670e:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8006710:	4a17      	ldr	r2, [pc, #92]	; (8006770 <gpio_port_clock_enable+0xc8>)
 8006712:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006714:	f043 0310 	orr.w	r3, r3, #16
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 800671c:	4a14      	ldr	r2, [pc, #80]	; (8006770 <gpio_port_clock_enable+0xc8>)
 800671e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006720:	f043 0320 	orr.w	r3, r3, #32
 8006724:	6313      	str	r3, [r2, #48]	; 0x30
 8006726:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8006728:	4a11      	ldr	r2, [pc, #68]	; (8006770 <gpio_port_clock_enable+0xc8>)
 800672a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800672c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006730:	6313      	str	r3, [r2, #48]	; 0x30
 8006732:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8006734:	4a0e      	ldr	r2, [pc, #56]	; (8006770 <gpio_port_clock_enable+0xc8>)
 8006736:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673c:	6313      	str	r3, [r2, #48]	; 0x30
 800673e:	e7ce      	b.n	80066de <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8006740:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <gpio_port_clock_enable+0xc8>)
 8006742:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	6313      	str	r3, [r2, #48]	; 0x30
 800674a:	4770      	bx	lr
 800674c:	40020000 	.word	0x40020000
 8006750:	40020400 	.word	0x40020400
 8006754:	40020800 	.word	0x40020800
 8006758:	40020c00 	.word	0x40020c00
 800675c:	40021000 	.word	0x40021000
 8006760:	40021400 	.word	0x40021400
 8006764:	40021800 	.word	0x40021800
 8006768:	40021c00 	.word	0x40021c00
 800676c:	40022000 	.word	0x40022000
 8006770:	40023800 	.word	0x40023800

08006774 <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 8006774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006776:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 8006778:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 800677a:	2a03      	cmp	r2, #3
	__IO uint32_t tmpreg = 0U;
 800677c:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 800677e:	d81c      	bhi.n	80067ba <gpio_set_mode+0x46>
		port -> MODER &=~ (3U << (pin * 2));
 8006780:	6804      	ldr	r4, [r0, #0]
 8006782:	0049      	lsls	r1, r1, #1
 8006784:	2303      	movs	r3, #3
 8006786:	408b      	lsls	r3, r1
 8006788:	ea24 0403 	bic.w	r4, r4, r3
 800678c:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 800678e:	68c4      	ldr	r4, [r0, #12]
 8006790:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8006792:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 8006794:	2a02      	cmp	r2, #2
		tmpreg &=~ (3U << (pin * 2));
 8006796:	ea24 0303 	bic.w	r3, r4, r3
 800679a:	9301      	str	r3, [sp, #4]
		switch(mode){
 800679c:	d046      	beq.n	800682c <gpio_set_mode+0xb8>
 800679e:	2a03      	cmp	r2, #3
 80067a0:	d105      	bne.n	80067ae <gpio_set_mode+0x3a>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 80067a2:	9a01      	ldr	r2, [sp, #4]
 80067a4:	2302      	movs	r3, #2
 80067a6:	fa03 f101 	lsl.w	r1, r3, r1
 80067aa:	4311      	orrs	r1, r2
 80067ac:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 80067ae:	9a01      	ldr	r2, [sp, #4]
 80067b0:	68c3      	ldr	r3, [r0, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 80067b6:	b003      	add	sp, #12
 80067b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 80067ba:	1f13      	subs	r3, r2, #4
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	2b05      	cmp	r3, #5
 80067c0:	d82b      	bhi.n	800681a <gpio_set_mode+0xa6>
		port -> MODER &=~ (3U << (pin * 2));
 80067c2:	6804      	ldr	r4, [r0, #0]
 80067c4:	004d      	lsls	r5, r1, #1
 80067c6:	f04f 0c03 	mov.w	ip, #3
 80067ca:	fa0c fc05 	lsl.w	ip, ip, r5
 80067ce:	ea24 040c 	bic.w	r4, r4, ip
 80067d2:	6004      	str	r4, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 80067d4:	6807      	ldr	r7, [r0, #0]
 80067d6:	2401      	movs	r4, #1
 80067d8:	fa04 f605 	lsl.w	r6, r4, r5
 80067dc:	4337      	orrs	r7, r6
 80067de:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	fa04 f101 	lsl.w	r1, r4, r1
		port -> MODER &=~ (3U << (pin * 2));
 80067e6:	ea6f 0e0c 	mvn.w	lr, ip
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80067ea:	6844      	ldr	r4, [r0, #4]
 80067ec:	d825      	bhi.n	800683a <gpio_set_mode+0xc6>
 80067ee:	4321      	orrs	r1, r4
 80067f0:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 80067f2:	6883      	ldr	r3, [r0, #8]
 80067f4:	ea0e 0303 	and.w	r3, lr, r3
 80067f8:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80067fa:	6883      	ldr	r3, [r0, #8]
 80067fc:	ea4c 0303 	orr.w	r3, ip, r3
 8006800:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8006802:	68c3      	ldr	r3, [r0, #12]
 8006804:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8006806:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006808:	2a05      	cmp	r2, #5
		tmpreg &=~ (3U << (pin * 2));
 800680a:	ea0e 0303 	and.w	r3, lr, r3
 800680e:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006810:	d12f      	bne.n	8006872 <gpio_set_mode+0xfe>
 8006812:	9b01      	ldr	r3, [sp, #4]
 8006814:	431e      	orrs	r6, r3
 8006816:	9601      	str	r6, [sp, #4]
 8006818:	e7c9      	b.n	80067ae <gpio_set_mode+0x3a>
		port -> MODER |= (3U << (pin * 2));
 800681a:	6802      	ldr	r2, [r0, #0]
 800681c:	2303      	movs	r3, #3
 800681e:	0049      	lsls	r1, r1, #1
 8006820:	fa03 f101 	lsl.w	r1, r3, r1
 8006824:	4311      	orrs	r1, r2
 8006826:	6001      	str	r1, [r0, #0]
}
 8006828:	b003      	add	sp, #12
 800682a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmpreg |=  (1U << (pin * 2));
 800682c:	9a01      	ldr	r2, [sp, #4]
 800682e:	2301      	movs	r3, #1
 8006830:	fa03 f101 	lsl.w	r1, r3, r1
 8006834:	4311      	orrs	r1, r2
 8006836:	9101      	str	r1, [sp, #4]
			break;
 8006838:	e7b9      	b.n	80067ae <gpio_set_mode+0x3a>
		else port -> OTYPER &=~ (1U << pin);
 800683a:	ea24 0101 	bic.w	r1, r4, r1
 800683e:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8006840:	6883      	ldr	r3, [r0, #8]
 8006842:	ea0e 0303 	and.w	r3, lr, r3
 8006846:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8006848:	6883      	ldr	r3, [r0, #8]
 800684a:	ea4c 0303 	orr.w	r3, ip, r3
 800684e:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8006850:	68c3      	ldr	r3, [r0, #12]
 8006852:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8006854:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006856:	2a08      	cmp	r2, #8
		tmpreg &=~ (3U << (pin * 2));
 8006858:	ea0e 0303 	and.w	r3, lr, r3
 800685c:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 800685e:	d0d8      	beq.n	8006812 <gpio_set_mode+0x9e>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 8006860:	2a09      	cmp	r2, #9
 8006862:	d1a4      	bne.n	80067ae <gpio_set_mode+0x3a>
 8006864:	9a01      	ldr	r2, [sp, #4]
 8006866:	2302      	movs	r3, #2
 8006868:	fa03 f505 	lsl.w	r5, r3, r5
 800686c:	4315      	orrs	r5, r2
 800686e:	9501      	str	r5, [sp, #4]
 8006870:	e79d      	b.n	80067ae <gpio_set_mode+0x3a>
 8006872:	2a06      	cmp	r2, #6
 8006874:	d0f6      	beq.n	8006864 <gpio_set_mode+0xf0>
 8006876:	e79a      	b.n	80067ae <gpio_set_mode+0x3a>

08006878 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 8006878:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 800687c:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 800687e:	2303      	movs	r3, #3
 8006880:	6805      	ldr	r5, [r0, #0]
 8006882:	fa03 f30c 	lsl.w	r3, r3, ip
 8006886:	ea25 0503 	bic.w	r5, r5, r3
 800688a:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 800688c:	6805      	ldr	r5, [r0, #0]
 800688e:	2402      	movs	r4, #2
 8006890:	fa04 f40c 	lsl.w	r4, r4, ip
 8006894:	432c      	orrs	r4, r5
 8006896:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 8006898:	6844      	ldr	r4, [r0, #4]
 800689a:	f04f 0c01 	mov.w	ip, #1
 800689e:	fa0c fc01 	lsl.w	ip, ip, r1
 80068a2:	ea24 040c 	bic.w	r4, r4, ip
 80068a6:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 80068a8:	6884      	ldr	r4, [r0, #8]
 80068aa:	ea24 0403 	bic.w	r4, r4, r3
 80068ae:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80068b0:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 80068b2:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80068b4:	ea43 0304 	orr.w	r3, r3, r4
 80068b8:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 80068ba:	d80d      	bhi.n	80068d8 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 80068bc:	6a03      	ldr	r3, [r0, #32]
 80068be:	0089      	lsls	r1, r1, #2
 80068c0:	240f      	movs	r4, #15
 80068c2:	408c      	lsls	r4, r1
 80068c4:	ea23 0304 	bic.w	r3, r3, r4
 80068c8:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 80068ca:	6a03      	ldr	r3, [r0, #32]
 80068cc:	fa02 f101 	lsl.w	r1, r2, r1
 80068d0:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 80068d2:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 80068d4:	6201      	str	r1, [r0, #32]
}
 80068d6:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 80068d8:	3908      	subs	r1, #8
 80068da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068dc:	0089      	lsls	r1, r1, #2
 80068de:	240f      	movs	r4, #15
 80068e0:	408c      	lsls	r4, r1
 80068e2:	ea23 0304 	bic.w	r3, r3, r4
 80068e6:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80068e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80068ea:	408a      	lsls	r2, r1
 80068ec:	431a      	orrs	r2, r3
}
 80068ee:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80068f0:	6242      	str	r2, [r0, #36]	; 0x24
}
 80068f2:	4770      	bx	lr

080068f4 <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80068f4:	2a04      	cmp	r2, #4
 80068f6:	d00a      	beq.n	800690e <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80068f8:	2a07      	cmp	r2, #7
 80068fa:	d000      	beq.n	80068fe <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 80068fc:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80068fe:	6843      	ldr	r3, [r0, #4]
 8006900:	2201      	movs	r2, #1
 8006902:	fa02 f101 	lsl.w	r1, r2, r1
 8006906:	ea23 0101 	bic.w	r1, r3, r1
 800690a:	6041      	str	r1, [r0, #4]
}
 800690c:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 800690e:	6842      	ldr	r2, [r0, #4]
 8006910:	2301      	movs	r3, #1
 8006912:	fa03 f101 	lsl.w	r1, r3, r1
 8006916:	4311      	orrs	r1, r2
 8006918:	6041      	str	r1, [r0, #4]
 800691a:	4770      	bx	lr

0800691c <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 800691c:	68c3      	ldr	r3, [r0, #12]
 800691e:	0049      	lsls	r1, r1, #1
 8006920:	2203      	movs	r2, #3
 8006922:	408a      	lsls	r2, r1
 8006924:	ea23 0302 	bic.w	r3, r3, r2
 8006928:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 800692a:	68c2      	ldr	r2, [r0, #12]
 800692c:	2302      	movs	r3, #2
 800692e:	fa03 f101 	lsl.w	r1, r3, r1
 8006932:	4311      	orrs	r1, r2
 8006934:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 8006936:	4770      	bx	lr

08006938 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 8006938:	6982      	ldr	r2, [r0, #24]
 800693a:	2301      	movs	r3, #1
 800693c:	fa03 f101 	lsl.w	r1, r3, r1
 8006940:	4311      	orrs	r1, r2
 8006942:	6181      	str	r1, [r0, #24]
}
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop

08006948 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 8006948:	6982      	ldr	r2, [r0, #24]
 800694a:	3110      	adds	r1, #16
 800694c:	2301      	movs	r3, #1
 800694e:	fa03 f101 	lsl.w	r1, r3, r1
 8006952:	4311      	orrs	r1, r2
 8006954:	6181      	str	r1, [r0, #24]
}
 8006956:	4770      	bx	lr

08006958 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8006958:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 800695a:	2301      	movs	r3, #1
 800695c:	6944      	ldr	r4, [r0, #20]
 800695e:	fa03 f201 	lsl.w	r2, r3, r1
 8006962:	4214      	tst	r4, r2
 8006964:	d008      	beq.n	8006978 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 8006966:	6982      	ldr	r2, [r0, #24]
}
 8006968:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 800696c:	3110      	adds	r1, #16
 800696e:	fa03 f101 	lsl.w	r1, r3, r1
 8006972:	4311      	orrs	r1, r2
 8006974:	6181      	str	r1, [r0, #24]
}
 8006976:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 8006978:	6983      	ldr	r3, [r0, #24]
}
 800697a:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 800697e:	431a      	orrs	r2, r3
 8006980:	6182      	str	r2, [r0, #24]
}
 8006982:	4770      	bx	lr

08006984 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 8006984:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 8006986:	480a      	ldr	r0, [pc, #40]	; (80069b0 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 8006988:	4c0a      	ldr	r4, [pc, #40]	; (80069b4 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 800698a:	490b      	ldr	r1, [pc, #44]	; (80069b8 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 800698c:	2200      	movs	r2, #0
 800698e:	2300      	movs	r3, #0
 8006990:	e9c4 2300 	strd	r2, r3, [r4]
 8006994:	e9c0 2300 	strd	r2, r3, [r0]
 8006998:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 800699c:	4b07      	ldr	r3, [pc, #28]	; (80069bc <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 800699e:	60a3      	str	r3, [r4, #8]
 80069a0:	4a07      	ldr	r2, [pc, #28]	; (80069c0 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 80069a2:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 80069a6:	6082      	str	r2, [r0, #8]
 80069a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80069ac:	608b      	str	r3, [r1, #8]
}
 80069ae:	4770      	bx	lr
 80069b0:	2000b510 	.word	0x2000b510
 80069b4:	2000b530 	.word	0x2000b530
 80069b8:	2000b520 	.word	0x2000b520
 80069bc:	40005c00 	.word	0x40005c00
 80069c0:	40005400 	.word	0x40005400

080069c4 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80069c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c8:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 80069ca:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80069cc:	4ab9      	ldr	r2, [pc, #740]	; (8006cb4 <rcc_init+0x2f0>)
	stm_ret_t ret;
 80069ce:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 80069d0:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 80069d2:	2301      	movs	r3, #1
 80069d4:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80069d6:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 80069d8:	4eb7      	ldr	r6, [pc, #732]	; (8006cb8 <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80069da:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80069dc:	4604      	mov	r4, r0
	_conf = rcc_conf;
 80069de:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80069e0:	d412      	bmi.n	8006a08 <rcc_init+0x44>
 80069e2:	6893      	ldr	r3, [r2, #8]
 80069e4:	071f      	lsls	r7, r3, #28
 80069e6:	d40c      	bmi.n	8006a02 <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 80069e8:	7b0b      	ldrb	r3, [r1, #12]
 80069ea:	b1db      	cbz	r3, 8006a24 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d03b      	beq.n	8006a68 <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 80069f0:	2255      	movs	r2, #85	; 0x55
 80069f2:	2100      	movs	r1, #0
 80069f4:	4620      	mov	r0, r4
 80069f6:	f002 fabf 	bl	8008f78 <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 80069fa:	4620      	mov	r0, r4
 80069fc:	b006      	add	sp, #24
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8006a02:	6853      	ldr	r3, [r2, #4]
 8006a04:	025d      	lsls	r5, r3, #9
 8006a06:	d5ef      	bpl.n	80069e8 <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8006a08:	4baa      	ldr	r3, [pc, #680]	; (8006cb4 <rcc_init+0x2f0>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8006a10:	d1ea      	bne.n	80069e8 <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 8006a12:	4620      	mov	r0, r4
 8006a14:	2234      	movs	r2, #52	; 0x34
 8006a16:	4619      	mov	r1, r3
 8006a18:	f002 faae 	bl	8008f78 <set_return>
}
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	b006      	add	sp, #24
 8006a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 8006a24:	4fa3      	ldr	r7, [pc, #652]	; (8006cb4 <rcc_init+0x2f0>)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f043 0301 	orr.w	r3, r3, #1
 8006a2c:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 8006a2e:	ad02      	add	r5, sp, #8
 8006a30:	2364      	movs	r3, #100	; 0x64
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4639      	mov	r1, r7
 8006a36:	4628      	mov	r0, r5
 8006a38:	2301      	movs	r3, #1
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f002 fa60 	bl	8008f00 <wait_flag_in_register_timeout>
 8006a40:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a44:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 8006a48:	4620      	mov	r0, r4
 8006a4a:	f002 faa3 	bl	8008f94 <is_timeout>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d155      	bne.n	8006afe <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8006a52:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8006a54:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8006a56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a5a:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	6891      	ldr	r1, [r2, #8]
 8006a60:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	e016      	b.n	8006a96 <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 8006a68:	4992      	ldr	r1, [pc, #584]	; (8006cb4 <rcc_init+0x2f0>)
 8006a6a:	680a      	ldr	r2, [r1, #0]
 8006a6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006a70:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 8006a72:	ad02      	add	r5, sp, #8
 8006a74:	22c8      	movs	r2, #200	; 0xc8
 8006a76:	9200      	str	r2, [sp, #0]
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a7e:	f002 fa3f 	bl	8008f00 <wait_flag_in_register_timeout>
 8006a82:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a86:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f002 fa82 	bl	8008f94 <is_timeout>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d17c      	bne.n	8006b8e <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 8006a94:	6832      	ldr	r2, [r6, #0]
 8006a96:	7b53      	ldrb	r3, [r2, #13]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d104      	bne.n	8006aa6 <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 8006a9c:	4f85      	ldr	r7, [pc, #532]	; (8006cb4 <rcc_init+0x2f0>)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f013 0308 	ands.w	r3, r3, #8
 8006aa4:	d078      	beq.n	8006b98 <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 8006aa6:	6910      	ldr	r0, [r2, #16]
 8006aa8:	f002 face 	bl	8009048 <embedded_flash_calculate_latency>
 8006aac:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 8006aae:	f002 faf7 	bl	80090a0 <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8006ab2:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 8006ab4:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8006ab6:	d866      	bhi.n	8006b86 <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 8006ab8:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8006cc8 <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8006abc:	497f      	ldr	r1, [pc, #508]	; (8006cbc <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 8006abe:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8006ac2:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 8006ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aca:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f8cd a000 	str.w	sl, [sp]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ada:	f002 fa11 	bl	8008f00 <wait_flag_in_register_timeout>
 8006ade:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006ae2:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f002 fa54 	bl	8008f94 <is_timeout>
 8006aec:	b160      	cbz	r0, 8006b08 <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 8006aee:	4620      	mov	r0, r4
 8006af0:	2188      	movs	r1, #136	; 0x88
 8006af2:	f002 fa45 	bl	8008f80 <set_return_line>
}
 8006af6:	4620      	mov	r0, r4
 8006af8:	b006      	add	sp, #24
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 8006afe:	2141      	movs	r1, #65	; 0x41
 8006b00:	4620      	mov	r0, r4
 8006b02:	f002 fa3d 	bl	8008f80 <set_return_line>
			return ret;
 8006b06:	e778      	b.n	80069fa <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 8006b08:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8006b0c:	496b      	ldr	r1, [pc, #428]	; (8006cbc <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 8006b0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b12:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8006b16:	4628      	mov	r0, r5
 8006b18:	f8cd a000 	str.w	sl, [sp]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b22:	f002 f9ed 	bl	8008f00 <wait_flag_in_register_timeout>
 8006b26:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006b2a:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f002 fa30 	bl	8008f94 <is_timeout>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	f040 8087 	bne.w	8006c48 <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 8006b3a:	6833      	ldr	r3, [r6, #0]
 8006b3c:	7b5a      	ldrb	r2, [r3, #13]
 8006b3e:	2a00      	cmp	r2, #0
 8006b40:	d074      	beq.n	8006c2c <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	f000 80a8 	beq.w	8006c98 <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 8006b48:	2a02      	cmp	r2, #2
 8006b4a:	f000 80bf 	beq.w	8006ccc <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8006b4e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8006cb4 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8006b52:	495b      	ldr	r1, [pc, #364]	; (8006cc0 <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8006b54:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006b58:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8006b5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	4628      	mov	r0, r5
 8006b64:	2301      	movs	r3, #1
 8006b66:	f002 f9cb 	bl	8008f00 <wait_flag_in_register_timeout>
 8006b6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006b6e:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8006b72:	4620      	mov	r0, r4
 8006b74:	f002 fa0e 	bl	8008f94 <is_timeout>
 8006b78:	2800      	cmp	r0, #0
 8006b7a:	d06a      	beq.n	8006c52 <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 8006b7c:	21ad      	movs	r1, #173	; 0xad
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f002 f9fe 	bl	8008f80 <set_return_line>
		return ret;
 8006b84:	e739      	b.n	80069fa <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8006b86:	4638      	mov	r0, r7
 8006b88:	f002 fa54 	bl	8009034 <embedded_flash_set_latency>
 8006b8c:	e794      	b.n	8006ab8 <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 8006b8e:	2150      	movs	r1, #80	; 0x50
 8006b90:	4620      	mov	r0, r4
 8006b92:	f002 f9f5 	bl	8008f80 <set_return_line>
			return ret;
 8006b96:	e730      	b.n	80069fa <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 8006b98:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8006b9a:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 8006b9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006ba2:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8006ba4:	4639      	mov	r1, r7
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f8cd 8000 	str.w	r8, [sp]
 8006bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006bb0:	f002 f9a6 	bl	8008f00 <wait_flag_in_register_timeout>
 8006bb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006bb8:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f002 f9e9 	bl	8008f94 <is_timeout>
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d13b      	bne.n	8006c3e <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	4a3d      	ldr	r2, [pc, #244]	; (8006cc4 <rcc_init+0x300>)
 8006bce:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006bd0:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 8006bd2:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006bd4:	9b05      	ldr	r3, [sp, #20]
 8006bd6:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8006bd8:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006bda:	430b      	orrs	r3, r1
 8006bdc:	69d1      	ldr	r1, [r2, #28]
 8006bde:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006be2:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8006be4:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006be6:	0849      	lsrs	r1, r1, #1
 8006be8:	3901      	subs	r1, #1
 8006bea:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006bf2:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8006bf6:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 8006bf8:	9b05      	ldr	r3, [sp, #20]
 8006bfa:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c02:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8006c04:	4639      	mov	r1, r7
 8006c06:	4628      	mov	r0, r5
 8006c08:	f8cd 8000 	str.w	r8, [sp]
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006c12:	f002 f975 	bl	8008f00 <wait_flag_in_register_timeout>
 8006c16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006c1a:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8006c1e:	4620      	mov	r0, r4
 8006c20:	f002 f9b8 	bl	8008f94 <is_timeout>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	d15b      	bne.n	8006ce0 <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 8006c28:	6832      	ldr	r2, [r6, #0]
 8006c2a:	e73c      	b.n	8006aa6 <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 8006c2c:	4b21      	ldr	r3, [pc, #132]	; (8006cb4 <rcc_init+0x2f0>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	0798      	lsls	r0, r3, #30
 8006c32:	d48c      	bmi.n	8006b4e <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8006c34:	2199      	movs	r1, #153	; 0x99
 8006c36:	4620      	mov	r0, r4
 8006c38:	f002 f9a2 	bl	8008f80 <set_return_line>
			return ret;
 8006c3c:	e6dd      	b.n	80069fa <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8006c3e:	2161      	movs	r1, #97	; 0x61
 8006c40:	4620      	mov	r0, r4
 8006c42:	f002 f99d 	bl	8008f80 <set_return_line>
				return ret;
 8006c46:	e6d8      	b.n	80069fa <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 8006c48:	218f      	movs	r1, #143	; 0x8f
 8006c4a:	4620      	mov	r0, r4
 8006c4c:	f002 f998 	bl	8008f80 <set_return_line>
		return ret;
 8006c50:	e6d3      	b.n	80069fa <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 8006c52:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006c56:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8006c58:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8006c5a:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8006c5c:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8006c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c64:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8006c66:	7d53      	ldrb	r3, [r2, #21]
 8006c68:	7d11      	ldrb	r1, [r2, #20]
 8006c6a:	7d92      	ldrb	r2, [r2, #22]
 8006c6c:	3303      	adds	r3, #3
 8006c6e:	3107      	adds	r1, #7
 8006c70:	029b      	lsls	r3, r3, #10
 8006c72:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006c76:	9905      	ldr	r1, [sp, #20]
 8006c78:	3203      	adds	r2, #3
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8006c80:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 8006c82:	9b05      	ldr	r3, [sp, #20]
 8006c84:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 8006c88:	f7fa faa0 	bl	80011cc <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8006c8c:	4547      	cmp	r7, r8
 8006c8e:	d30d      	bcc.n	8006cac <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 8006c90:	200f      	movs	r0, #15
 8006c92:	f000 fee1 	bl	8007a58 <systick_init>
	return ret;
 8006c96:	e6b0      	b.n	80069fa <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <rcc_init+0x2f0>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	0399      	lsls	r1, r3, #14
 8006c9e:	f53f af56 	bmi.w	8006b4e <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8006ca2:	219f      	movs	r1, #159	; 0x9f
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f002 f96b 	bl	8008f80 <set_return_line>
			return ret;
 8006caa:	e6a6      	b.n	80069fa <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8006cac:	4638      	mov	r0, r7
 8006cae:	f002 f9c1 	bl	8009034 <embedded_flash_set_latency>
 8006cb2:	e7ed      	b.n	8006c90 <rcc_init+0x2cc>
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	2000b540 	.word	0x2000b540
 8006cbc:	40007004 	.word	0x40007004
 8006cc0:	40023808 	.word	0x40023808
 8006cc4:	f0bc8000 	.word	0xf0bc8000
 8006cc8:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 8006ccc:	4b07      	ldr	r3, [pc, #28]	; (8006cec <rcc_init+0x328>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	019b      	lsls	r3, r3, #6
 8006cd2:	f53f af3c 	bmi.w	8006b4e <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8006cd6:	21a5      	movs	r1, #165	; 0xa5
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f002 f951 	bl	8008f80 <set_return_line>
			return ret;
 8006cde:	e68c      	b.n	80069fa <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8006ce0:	2172      	movs	r1, #114	; 0x72
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f002 f94c 	bl	8008f80 <set_return_line>
				return ret;
 8006ce8:	e687      	b.n	80069fa <rcc_init+0x36>
 8006cea:	bf00      	nop
 8006cec:	40023800 	.word	0x40023800

08006cf0 <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 8006cf0:	2805      	cmp	r0, #5
 8006cf2:	d819      	bhi.n	8006d28 <rcc_get_bus_frequency+0x38>
 8006cf4:	e8df f000 	tbb	[pc, r0]
 8006cf8:	2f251a0e 	.word	0x2f251a0e
 8006cfc:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 8006cfe:	4b2a      	ldr	r3, [pc, #168]	; (8006da8 <rcc_get_bus_frequency+0xb8>)
 8006d00:	492a      	ldr	r1, [pc, #168]	; (8006dac <rcc_get_bus_frequency+0xbc>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <rcc_get_bus_frequency+0xc0>)
 8006d06:	6808      	ldr	r0, [r1, #0]
 8006d08:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006d0c:	5cd3      	ldrb	r3, [r2, r3]
 8006d0e:	40d8      	lsrs	r0, r3
 8006d10:	0040      	lsls	r0, r0, #1
 8006d12:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8006d14:	4b27      	ldr	r3, [pc, #156]	; (8006db4 <rcc_get_bus_frequency+0xc4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	7b1a      	ldrb	r2, [r3, #12]
 8006d1a:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8006d1c:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8006d1e:	d02f      	beq.n	8006d80 <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8006d20:	2a00      	cmp	r2, #0
 8006d22:	d03f      	beq.n	8006da4 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8006d24:	2a02      	cmp	r2, #2
 8006d26:	d032      	beq.n	8006d8e <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 8006d28:	2000      	movs	r0, #0
}
 8006d2a:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8006d2c:	4b21      	ldr	r3, [pc, #132]	; (8006db4 <rcc_get_bus_frequency+0xc4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	7d18      	ldrb	r0, [r3, #20]
 8006d32:	2807      	cmp	r0, #7
 8006d34:	d928      	bls.n	8006d88 <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 8006d36:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <rcc_get_bus_frequency+0xbc>)
 8006d38:	1f83      	subs	r3, r0, #6
 8006d3a:	6810      	ldr	r0, [r2, #0]
 8006d3c:	fbb0 f0f3 	udiv	r0, r0, r3
 8006d40:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d42:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <rcc_get_bus_frequency+0xb8>)
 8006d44:	4919      	ldr	r1, [pc, #100]	; (8006dac <rcc_get_bus_frequency+0xbc>)
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4a19      	ldr	r2, [pc, #100]	; (8006db0 <rcc_get_bus_frequency+0xc0>)
 8006d4a:	6808      	ldr	r0, [r1, #0]
 8006d4c:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006d50:	5cd3      	ldrb	r3, [r2, r3]
 8006d52:	40d8      	lsrs	r0, r3
 8006d54:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d56:	4b14      	ldr	r3, [pc, #80]	; (8006da8 <rcc_get_bus_frequency+0xb8>)
 8006d58:	4914      	ldr	r1, [pc, #80]	; (8006dac <rcc_get_bus_frequency+0xbc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <rcc_get_bus_frequency+0xc0>)
 8006d5e:	6808      	ldr	r0, [r1, #0]
 8006d60:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006d64:	5cd3      	ldrb	r3, [r2, r3]
 8006d66:	40d8      	lsrs	r0, r3
 8006d68:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <rcc_get_bus_frequency+0xb8>)
 8006d6c:	490f      	ldr	r1, [pc, #60]	; (8006dac <rcc_get_bus_frequency+0xbc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <rcc_get_bus_frequency+0xc0>)
 8006d72:	6808      	ldr	r0, [r1, #0]
 8006d74:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006d78:	5cd3      	ldrb	r3, [r2, r3]
 8006d7a:	40d8      	lsrs	r0, r3
 8006d7c:	0040      	lsls	r0, r0, #1
 8006d7e:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8006d80:	2a01      	cmp	r2, #1
 8006d82:	d1cf      	bne.n	8006d24 <rcc_get_bus_frequency+0x34>
 8006d84:	480c      	ldr	r0, [pc, #48]	; (8006db8 <rcc_get_bus_frequency+0xc8>)
 8006d86:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <rcc_get_bus_frequency+0xbc>)
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8006d8e:	69da      	ldr	r2, [r3, #28]
 8006d90:	6999      	ldr	r1, [r3, #24]
 8006d92:	4809      	ldr	r0, [pc, #36]	; (8006db8 <rcc_get_bus_frequency+0xc8>)
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	fbb0 f0f1 	udiv	r0, r0, r1
 8006d9a:	fb02 f000 	mul.w	r0, r2, r0
 8006d9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006da2:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8006da4:	4805      	ldr	r0, [pc, #20]	; (8006dbc <rcc_get_bus_frequency+0xcc>)
 8006da6:	4770      	bx	lr
 8006da8:	40023800 	.word	0x40023800
 8006dac:	20000000 	.word	0x20000000
 8006db0:	0800c784 	.word	0x0800c784
 8006db4:	2000b540 	.word	0x2000b540
 8006db8:	017d7840 	.word	0x017d7840
 8006dbc:	00f42400 	.word	0x00f42400

08006dc0 <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8006dc0:	4907      	ldr	r1, [pc, #28]	; (8006de0 <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 8006dc2:	4a08      	ldr	r2, [pc, #32]	; (8006de4 <rng_init+0x24>)
void rng_init(void){
 8006dc4:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8006dc6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dcc:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 8006dce:	6813      	ldr	r3, [r2, #0]
 8006dd0:	f043 0304 	orr.w	r3, r3, #4
 8006dd4:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 8006dd6:	f002 f9af 	bl	8009138 <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 8006dda:	4b03      	ldr	r3, [pc, #12]	; (8006de8 <rng_init+0x28>)
 8006ddc:	6018      	str	r0, [r3, #0]
}
 8006dde:	bd08      	pop	{r3, pc}
 8006de0:	40023800 	.word	0x40023800
 8006de4:	50060800 	.word	0x50060800
 8006de8:	2000b544 	.word	0x2000b544

08006dec <rng_set_seed>:
	_seed = seed;
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <rng_set_seed+0x8>)
 8006dee:	6018      	str	r0, [r3, #0]
}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	2000b544 	.word	0x2000b544

08006df8 <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 8006df8:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 8006dfa:	4b1b      	ldr	r3, [pc, #108]	; (8006e68 <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8006dfc:	4c1b      	ldr	r4, [pc, #108]	; (8006e6c <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 8006dfe:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 8006e00:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 8006e02:	2602      	movs	r6, #2
 8006e04:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 8006e06:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 8006e08:	f000 fe48 	bl	8007a9c <get_tick>
 8006e0c:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 8006e0e:	9505      	str	r5, [sp, #20]
 8006e10:	e005      	b.n	8006e1e <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 8006e12:	f000 fe43 	bl	8007a9c <get_tick>
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	1ac0      	subs	r0, r0, r3
 8006e1a:	2802      	cmp	r0, #2
 8006e1c:	d802      	bhi.n	8006e24 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8006e1e:	6863      	ldr	r3, [r4, #4]
 8006e20:	07da      	lsls	r2, r3, #31
 8006e22:	d5f6      	bpl.n	8006e12 <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	9305      	str	r3, [sp, #20]
	return random_number;
 8006e28:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 8006e2a:	9b01      	ldr	r3, [sp, #4]
 8006e2c:	4053      	eors	r3, r2
 8006e2e:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 8006e30:	f000 fe34 	bl	8007a9c <get_tick>
 8006e34:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 8006e36:	9503      	str	r5, [sp, #12]
 8006e38:	e005      	b.n	8006e46 <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 8006e3a:	f000 fe2f 	bl	8007a9c <get_tick>
 8006e3e:	9b02      	ldr	r3, [sp, #8]
 8006e40:	1ac0      	subs	r0, r0, r3
 8006e42:	2802      	cmp	r0, #2
 8006e44:	d802      	bhi.n	8006e4c <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8006e46:	6863      	ldr	r3, [r4, #4]
 8006e48:	07db      	lsls	r3, r3, #31
 8006e4a:	d5f6      	bpl.n	8006e3a <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 8006e4c:	68a3      	ldr	r3, [r4, #8]
 8006e4e:	9303      	str	r3, [sp, #12]
	return random_number;
 8006e50:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 8006e52:	9b01      	ldr	r3, [sp, #4]
 8006e54:	4053      	eors	r3, r2
 8006e56:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 8006e58:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 8006e5a:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 8006e5c:	d102      	bne.n	8006e64 <rng_generate_random_number+0x6c>
	}
	return rand;
 8006e5e:	9801      	ldr	r0, [sp, #4]
}
 8006e60:	b006      	add	sp, #24
 8006e62:	bd70      	pop	{r4, r5, r6, pc}
 8006e64:	2601      	movs	r6, #1
 8006e66:	e7cf      	b.n	8006e08 <rng_generate_random_number+0x10>
 8006e68:	2000b544 	.word	0x2000b544
 8006e6c:	50060800 	.word	0x50060800

08006e70 <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	460c      	mov	r4, r1
 8006e74:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 8006e76:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006e78:	68cb      	ldr	r3, [r1, #12]
 8006e7a:	499e      	ldr	r1, [pc, #632]	; (80070f4 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 8006e7c:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 8006e7e:	2001      	movs	r0, #1
 8006e80:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 8006e82:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8006e84:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006e86:	428b      	cmp	r3, r1
	stm_ret_t ret;
 8006e88:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 8006e8c:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 8006e8e:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006e90:	f000 80cd 	beq.w	800702e <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8006e94:	4998      	ldr	r1, [pc, #608]	; (80070f8 <_ZN3spi4initEP12spi_config_t+0x288>)
 8006e96:	428b      	cmp	r3, r1
 8006e98:	d015      	beq.n	8006ec6 <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006e9a:	4998      	ldr	r1, [pc, #608]	; (80070fc <_ZN3spi4initEP12spi_config_t+0x28c>)
 8006e9c:	428b      	cmp	r3, r1
 8006e9e:	f000 810b 	beq.w	80070b8 <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006ea2:	4997      	ldr	r1, [pc, #604]	; (8007100 <_ZN3spi4initEP12spi_config_t+0x290>)
 8006ea4:	428b      	cmp	r3, r1
 8006ea6:	f000 8112 	beq.w	80070ce <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8006eaa:	4996      	ldr	r1, [pc, #600]	; (8007104 <_ZN3spi4initEP12spi_config_t+0x294>)
 8006eac:	428b      	cmp	r3, r1
 8006eae:	f000 80d5 	beq.w	800705c <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 8006eb2:	4995      	ldr	r1, [pc, #596]	; (8007108 <_ZN3spi4initEP12spi_config_t+0x298>)
 8006eb4:	428b      	cmp	r3, r1
 8006eb6:	d10c      	bne.n	8006ed2 <_ZN3spi4initEP12spi_config_t+0x62>
 8006eb8:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 8006ebc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006ebe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ec2:	644b      	str	r3, [r1, #68]	; 0x44
 8006ec4:	e005      	b.n	8006ed2 <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8006ec6:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8006eca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006ecc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ed0:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 8006ed2:	6910      	ldr	r0, [r2, #16]
 8006ed4:	f7ff fbe8 	bl	80066a8 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 8006ed8:	68a3      	ldr	r3, [r4, #8]
 8006eda:	2205      	movs	r2, #5
 8006edc:	8a99      	ldrh	r1, [r3, #20]
 8006ede:	6918      	ldr	r0, [r3, #16]
 8006ee0:	f7ff fcca 	bl	8006878 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	8a99      	ldrh	r1, [r3, #20]
 8006eea:	6918      	ldr	r0, [r3, #16]
 8006eec:	f7ff fd02 	bl	80068f4 <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 8006ef0:	68a2      	ldr	r2, [r4, #8]
 8006ef2:	7813      	ldrb	r3, [r2, #0]
 8006ef4:	f013 0f0d 	tst.w	r3, #13
 8006ef8:	f040 8087 	bne.w	800700a <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8006efc:	075b      	lsls	r3, r3, #29
 8006efe:	d15f      	bne.n	8006fc0 <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8006f00:	7b10      	ldrb	r0, [r2, #12]
 8006f02:	2801      	cmp	r0, #1
 8006f04:	d06f      	beq.n	8006fe6 <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 8006f06:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8006f08:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8006f0e:	7991      	ldrb	r1, [r2, #6]
 8006f10:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8006f14:	681e      	ldr	r6, [r3, #0]
 8006f16:	4331      	orrs	r1, r6
 8006f18:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 8006f1a:	7911      	ldrb	r1, [r2, #4]
 8006f1c:	78d6      	ldrb	r6, [r2, #3]
 8006f1e:	01c9      	lsls	r1, r1, #7
 8006f20:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8006f24:	681e      	ldr	r6, [r3, #0]
 8006f26:	4331      	orrs	r1, r6
 8006f28:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 8006f2a:	7811      	ldrb	r1, [r2, #0]
 8006f2c:	f011 0703 	ands.w	r7, r1, #3
 8006f30:	d003      	beq.n	8006f3a <_ZN3spi4initEP12spi_config_t+0xca>
 8006f32:	681e      	ldr	r6, [r3, #0]
 8006f34:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 8006f38:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 8006f3a:	f011 0f0a 	tst.w	r1, #10
 8006f3e:	d003      	beq.n	8006f48 <_ZN3spi4initEP12spi_config_t+0xd8>
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006f46:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8006f48:	bb78      	cbnz	r0, 8006faa <_ZN3spi4initEP12spi_config_t+0x13a>
 8006f4a:	6819      	ldr	r1, [r3, #0]
 8006f4c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006f50:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 8006f52:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 8006f54:	7851      	ldrb	r1, [r2, #1]
 8006f56:	f011 0f05 	tst.w	r1, #5
 8006f5a:	d024      	beq.n	8006fa6 <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8006f5c:	4965      	ldr	r1, [pc, #404]	; (80070f4 <_ZN3spi4initEP12spi_config_t+0x284>)
 8006f5e:	428b      	cmp	r3, r1
 8006f60:	f000 8083 	beq.w	800706a <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8006f64:	4964      	ldr	r1, [pc, #400]	; (80070f8 <_ZN3spi4initEP12spi_config_t+0x288>)
 8006f66:	428b      	cmp	r3, r1
 8006f68:	f000 80ad 	beq.w	80070c6 <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8006f6c:	4963      	ldr	r1, [pc, #396]	; (80070fc <_ZN3spi4initEP12spi_config_t+0x28c>)
 8006f6e:	428b      	cmp	r3, r1
 8006f70:	d064      	beq.n	800703c <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8006f72:	4963      	ldr	r1, [pc, #396]	; (8007100 <_ZN3spi4initEP12spi_config_t+0x290>)
 8006f74:	428b      	cmp	r3, r1
 8006f76:	f000 80b1 	beq.w	80070dc <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8006f7a:	4962      	ldr	r1, [pc, #392]	; (8007104 <_ZN3spi4initEP12spi_config_t+0x294>)
 8006f7c:	428b      	cmp	r3, r1
 8006f7e:	f000 80b1 	beq.w	80070e4 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8006f82:	4961      	ldr	r1, [pc, #388]	; (8007108 <_ZN3spi4initEP12spi_config_t+0x298>)
 8006f84:	428b      	cmp	r3, r1
 8006f86:	f000 80b1 	beq.w	80070ec <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006f8a:	6892      	ldr	r2, [r2, #8]
 8006f8c:	2a03      	cmp	r2, #3
 8006f8e:	d972      	bls.n	8007076 <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8006f90:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	da57      	bge.n	8007048 <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f98:	495c      	ldr	r1, [pc, #368]	; (800710c <_ZN3spi4initEP12spi_config_t+0x29c>)
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	0112      	lsls	r2, r2, #4
 8006fa0:	4419      	add	r1, r3
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 8006faa:	2100      	movs	r1, #0
 8006fac:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 8006fae:	2f00      	cmp	r7, #0
 8006fb0:	d0d0      	beq.n	8006f54 <_ZN3spi4initEP12spi_config_t+0xe4>
 8006fb2:	2801      	cmp	r0, #1
 8006fb4:	d1ce      	bne.n	8006f54 <_ZN3spi4initEP12spi_config_t+0xe4>
 8006fb6:	6859      	ldr	r1, [r3, #4]
 8006fb8:	f041 0104 	orr.w	r1, r1, #4
 8006fbc:	6059      	str	r1, [r3, #4]
 8006fbe:	e7c9      	b.n	8006f54 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 8006fc0:	6a10      	ldr	r0, [r2, #32]
 8006fc2:	f7ff fb71 	bl	80066a8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 8006fc6:	68a3      	ldr	r3, [r4, #8]
 8006fc8:	2205      	movs	r2, #5
 8006fca:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8006fcc:	6a18      	ldr	r0, [r3, #32]
 8006fce:	f7ff fc53 	bl	8006878 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	2207      	movs	r2, #7
 8006fd6:	6a18      	ldr	r0, [r3, #32]
 8006fd8:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8006fda:	f7ff fc8b 	bl	80068f4 <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8006fde:	68a2      	ldr	r2, [r4, #8]
 8006fe0:	7b10      	ldrb	r0, [r2, #12]
 8006fe2:	2801      	cmp	r0, #1
 8006fe4:	d18f      	bne.n	8006f06 <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 8006fe6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8006fe8:	f7ff fb5e 	bl	80066a8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	2205      	movs	r2, #5
 8006ff0:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8006ff2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ff4:	f7ff fc40 	bl	8006878 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 8006ff8:	68a3      	ldr	r3, [r4, #8]
 8006ffa:	2207      	movs	r2, #7
 8006ffc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ffe:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007000:	f7ff fc78 	bl	80068f4 <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007004:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007006:	7b10      	ldrb	r0, [r2, #12]
 8007008:	e77d      	b.n	8006f06 <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 800700a:	6990      	ldr	r0, [r2, #24]
 800700c:	f7ff fb4c 	bl	80066a8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8007010:	68a3      	ldr	r3, [r4, #8]
 8007012:	2205      	movs	r2, #5
 8007014:	8b99      	ldrh	r1, [r3, #28]
 8007016:	6998      	ldr	r0, [r3, #24]
 8007018:	f7ff fc2e 	bl	8006878 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 800701c:	68a3      	ldr	r3, [r4, #8]
 800701e:	2207      	movs	r2, #7
 8007020:	8b99      	ldrh	r1, [r3, #28]
 8007022:	6998      	ldr	r0, [r3, #24]
 8007024:	f7ff fc66 	bl	80068f4 <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007028:	68a2      	ldr	r2, [r4, #8]
 800702a:	7813      	ldrb	r3, [r2, #0]
 800702c:	e766      	b.n	8006efc <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 800702e:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8007032:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007034:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007038:	644b      	str	r3, [r1, #68]	; 0x44
 800703a:	e74a      	b.n	8006ed2 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 800703c:	2333      	movs	r3, #51	; 0x33
 800703e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007042:	6892      	ldr	r2, [r2, #8]
 8007044:	2a03      	cmp	r2, #3
 8007046:	d916      	bls.n	8007076 <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007048:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800704c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8007050:	0112      	lsls	r2, r2, #4
 8007052:	b2d2      	uxtb	r2, r2
 8007054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007058:	4628      	mov	r0, r5
 800705a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 800705c:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8007060:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007066:	644b      	str	r3, [r1, #68]	; 0x44
 8007068:	e733      	b.n	8006ed2 <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 800706a:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 800706c:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 800706e:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007070:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007074:	d8e8      	bhi.n	8007048 <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 8007076:	4628      	mov	r0, r5
 8007078:	22b0      	movs	r2, #176	; 0xb0
 800707a:	2100      	movs	r1, #0
 800707c:	f001 ff7c 	bl	8008f78 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8007080:	4b23      	ldr	r3, [pc, #140]	; (8007110 <_ZN3spi4initEP12spi_config_t+0x2a0>)
 8007082:	4a24      	ldr	r2, [pc, #144]	; (8007114 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 8007084:	4924      	ldr	r1, [pc, #144]	; (8007118 <_ZN3spi4initEP12spi_config_t+0x2a8>)
 8007086:	4825      	ldr	r0, [pc, #148]	; (800711c <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007088:	f001 fe42 	bl	8008d10 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 800708c:	4924      	ldr	r1, [pc, #144]	; (8007120 <_ZN3spi4initEP12spi_config_t+0x2b0>)
 800708e:	4823      	ldr	r0, [pc, #140]	; (800711c <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007090:	2205      	movs	r2, #5
 8007092:	f001 fdc1 	bl	8008c18 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8007096:	f241 3088 	movw	r0, #5000	; 0x1388
 800709a:	f000 fccf 	bl	8007a3c <systick_delay_ms>
 800709e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80070a2:	4920      	ldr	r1, [pc, #128]	; (8007124 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 80070a4:	4b20      	ldr	r3, [pc, #128]	; (8007128 <_ZN3spi4initEP12spi_config_t+0x2b8>)
 80070a6:	68ca      	ldr	r2, [r1, #12]
 80070a8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80070ac:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80070ae:	60cb      	str	r3, [r1, #12]
 80070b0:	f3bf 8f4f 	dsb	sy
    __NOP();
 80070b4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80070b6:	e7fd      	b.n	80070b4 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80070b8:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 80070bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c2:	640b      	str	r3, [r1, #64]	; 0x40
 80070c4:	e705      	b.n	8006ed2 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 80070c6:	2324      	movs	r3, #36	; 0x24
 80070c8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80070cc:	e7b9      	b.n	8007042 <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 80070ce:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 80070d2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80070d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80070d8:	644b      	str	r3, [r1, #68]	; 0x44
 80070da:	e6fa      	b.n	8006ed2 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 80070dc:	2354      	movs	r3, #84	; 0x54
 80070de:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80070e2:	e7ae      	b.n	8007042 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 80070e4:	2355      	movs	r3, #85	; 0x55
 80070e6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80070ea:	e7aa      	b.n	8007042 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 80070ec:	2356      	movs	r3, #86	; 0x56
 80070ee:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80070f2:	e7a6      	b.n	8007042 <_ZN3spi4initEP12spi_config_t+0x1d2>
 80070f4:	40013000 	.word	0x40013000
 80070f8:	40003800 	.word	0x40003800
 80070fc:	40003c00 	.word	0x40003c00
 8007100:	40013400 	.word	0x40013400
 8007104:	40015000 	.word	0x40015000
 8007108:	40015400 	.word	0x40015400
 800710c:	e000ecfc 	.word	0xe000ecfc
 8007110:	0800cfd4 	.word	0x0800cfd4
 8007114:	0800cfdc 	.word	0x0800cfdc
 8007118:	0800cf6c 	.word	0x0800cf6c
 800711c:	0800d004 	.word	0x0800d004
 8007120:	0800cfb8 	.word	0x0800cfb8
 8007124:	e000ed00 	.word	0xe000ed00
 8007128:	05fa0004 	.word	0x05fa0004

0800712c <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 800712c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007130:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007132:	2101      	movs	r1, #1
 8007134:	7001      	strb	r1, [r0, #0]
 8007136:	2100      	movs	r1, #0
 8007138:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 800713a:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 800713c:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 800713e:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007140:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007142:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007144:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007146:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007148:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 800714a:	d463      	bmi.n	8007214 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 800714c:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007150:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007152:	d007      	beq.n	8007164 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007154:	680a      	ldr	r2, [r1, #0]
 8007156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715a:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 800715c:	680a      	ldr	r2, [r1, #0]
 800715e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007162:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007164:	680a      	ldr	r2, [r1, #0]
 8007166:	0652      	lsls	r2, r2, #25
 8007168:	d54f      	bpl.n	800720a <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 800716a:	ae02      	add	r6, sp, #8
 800716c:	b36b      	cbz	r3, 80071ca <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 800716e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007172:	e006      	b.n	8007182 <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007174:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 8007178:	3301      	adds	r3, #1
	while(txcount < txlen){
 800717a:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 800717c:	61a0      	str	r0, [r4, #24]
		txcount++;
 800717e:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007180:	d923      	bls.n	80071ca <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007182:	3108      	adds	r1, #8
 8007184:	4630      	mov	r0, r6
 8007186:	2301      	movs	r3, #1
 8007188:	2202      	movs	r2, #2
 800718a:	f8cd 8000 	str.w	r8, [sp]
 800718e:	f001 feb7 	bl	8008f00 <wait_flag_in_register_timeout>
 8007192:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007196:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 800719a:	4628      	mov	r0, r5
 800719c:	f001 fef2 	bl	8008f84 <is_oke>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d047      	beq.n	8007234 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80071a4:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 80071a6:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80071a8:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 80071aa:	68e1      	ldr	r1, [r4, #12]
 80071ac:	681f      	ldr	r7, [r3, #0]
 80071ae:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 80071b0:	1c58      	adds	r0, r3, #1
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	d0de      	beq.n	8007174 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 80071b6:	2a01      	cmp	r2, #1
 80071b8:	bf04      	itt	eq
 80071ba:	3302      	addeq	r3, #2
 80071bc:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 80071be:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 80071c2:	3301      	adds	r3, #1
	while(txcount < txlen){
 80071c4:	429a      	cmp	r2, r3
		txcount++;
 80071c6:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 80071c8:	d8db      	bhi.n	8007182 <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 80071ca:	2364      	movs	r3, #100	; 0x64
 80071cc:	3108      	adds	r1, #8
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4630      	mov	r0, r6
 80071d2:	2300      	movs	r3, #0
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	f001 fe93 	bl	8008f00 <wait_flag_in_register_timeout>
 80071da:	e896 0003 	ldmia.w	r6, {r0, r1}
 80071de:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 80071e2:	4628      	mov	r0, r5
 80071e4:	f001 fece 	bl	8008f84 <is_oke>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d032      	beq.n	8007252 <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80071ec:	68a3      	ldr	r3, [r4, #8]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	f013 0f0a 	tst.w	r3, #10
 80071f4:	d105      	bne.n	8007202 <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 80071f6:	68e3      	ldr	r3, [r4, #12]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007200:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 8007202:	4628      	mov	r0, r5
 8007204:	b006      	add	sp, #24
 8007206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 800720a:	680a      	ldr	r2, [r1, #0]
 800720c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007210:	600a      	str	r2, [r1, #0]
 8007212:	e7aa      	b.n	800716a <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 8007214:	4b16      	ldr	r3, [pc, #88]	; (8007270 <_ZN3spi8transmitEmm+0x144>)
 8007216:	4a17      	ldr	r2, [pc, #92]	; (8007274 <_ZN3spi8transmitEmm+0x148>)
 8007218:	4917      	ldr	r1, [pc, #92]	; (8007278 <_ZN3spi8transmitEmm+0x14c>)
 800721a:	4818      	ldr	r0, [pc, #96]	; (800727c <_ZN3spi8transmitEmm+0x150>)
 800721c:	f001 fd78 	bl	8008d10 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007220:	4628      	mov	r0, r5
 8007222:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007226:	2103      	movs	r1, #3
 8007228:	f001 fea6 	bl	8008f78 <set_return>
}
 800722c:	4628      	mov	r0, r5
 800722e:	b006      	add	sp, #24
 8007230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007234:	4b0e      	ldr	r3, [pc, #56]	; (8007270 <_ZN3spi8transmitEmm+0x144>)
 8007236:	4a0f      	ldr	r2, [pc, #60]	; (8007274 <_ZN3spi8transmitEmm+0x148>)
 8007238:	4911      	ldr	r1, [pc, #68]	; (8007280 <_ZN3spi8transmitEmm+0x154>)
 800723a:	4810      	ldr	r0, [pc, #64]	; (800727c <_ZN3spi8transmitEmm+0x150>)
 800723c:	f001 fd68 	bl	8008d10 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007240:	4628      	mov	r0, r5
 8007242:	f240 1123 	movw	r1, #291	; 0x123
 8007246:	f001 fe9b 	bl	8008f80 <set_return_line>
}
 800724a:	4628      	mov	r0, r5
 800724c:	b006      	add	sp, #24
 800724e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007252:	4b07      	ldr	r3, [pc, #28]	; (8007270 <_ZN3spi8transmitEmm+0x144>)
 8007254:	4a07      	ldr	r2, [pc, #28]	; (8007274 <_ZN3spi8transmitEmm+0x148>)
 8007256:	490a      	ldr	r1, [pc, #40]	; (8007280 <_ZN3spi8transmitEmm+0x154>)
 8007258:	4808      	ldr	r0, [pc, #32]	; (800727c <_ZN3spi8transmitEmm+0x150>)
 800725a:	f001 fd59 	bl	8008d10 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 800725e:	4628      	mov	r0, r5
 8007260:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007264:	f001 fe8c 	bl	8008f80 <set_return_line>
}
 8007268:	4628      	mov	r0, r5
 800726a:	b006      	add	sp, #24
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007270:	0800d008 	.word	0x0800d008
 8007274:	0800cfdc 	.word	0x0800cfdc
 8007278:	0800d014 	.word	0x0800d014
 800727c:	0800d004 	.word	0x0800d004
 8007280:	0800d058 	.word	0x0800d058

08007284 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 8007288:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 800728a:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 800728c:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 800728e:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007290:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007292:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007294:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007296:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 8007298:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 800729a:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 800729c:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 800729e:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 80072a2:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 80072a6:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 80072a8:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 80072aa:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 80072ac:	d158      	bne.n	8007360 <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 80072ae:	460c      	mov	r4, r1
 80072b0:	68c9      	ldr	r1, [r1, #12]
 80072b2:	680b      	ldr	r3, [r1, #0]
 80072b4:	065b      	lsls	r3, r3, #25
 80072b6:	d54e      	bpl.n	8007356 <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 80072b8:	ae02      	add	r6, sp, #8
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d060      	beq.n	8007380 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 80072be:	f04f 0864 	mov.w	r8, #100	; 0x64
 80072c2:	e00e      	b.n	80072e2 <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 80072c4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 80072c8:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 80072ca:	3301      	adds	r3, #1
 80072cc:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 80072d0:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 80072d4:	6a23      	ldr	r3, [r4, #32]
 80072d6:	3301      	adds	r3, #1
		rxcount++;
 80072d8:	3201      	adds	r2, #1
	while(txcount < txlen){
 80072da:	4298      	cmp	r0, r3
		txcount++;
 80072dc:	6223      	str	r3, [r4, #32]
		rxcount++;
 80072de:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 80072e0:	d94e      	bls.n	8007380 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 80072e2:	2301      	movs	r3, #1
 80072e4:	2202      	movs	r2, #2
 80072e6:	3108      	adds	r1, #8
 80072e8:	4630      	mov	r0, r6
 80072ea:	f8cd 8000 	str.w	r8, [sp]
 80072ee:	f001 fe07 	bl	8008f00 <wait_flag_in_register_timeout>
 80072f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80072f6:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 80072fa:	4628      	mov	r0, r5
 80072fc:	f001 fe42 	bl	8008f84 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007300:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 8007302:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007304:	461a      	mov	r2, r3
 8007306:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 8007308:	2900      	cmp	r1, #0
 800730a:	d055      	beq.n	80073b8 <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 800730c:	69a7      	ldr	r7, [r4, #24]
 800730e:	68e1      	ldr	r1, [r4, #12]
 8007310:	f8d7 c000 	ldr.w	ip, [r7]
 8007314:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007318:	3108      	adds	r1, #8
 800731a:	f8cd 8000 	str.w	r8, [sp]
 800731e:	f001 fdef 	bl	8008f00 <wait_flag_in_register_timeout>
 8007322:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007326:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 800732a:	4628      	mov	r0, r5
 800732c:	f001 fe2a 	bl	8008f84 <is_oke>
 8007330:	2800      	cmp	r0, #0
 8007332:	d050      	beq.n	80073d6 <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007334:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007338:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 800733a:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 800733c:	68c8      	ldr	r0, [r1, #12]
 800733e:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007340:	2b00      	cmp	r3, #0
 8007342:	d0bf      	beq.n	80072c4 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007344:	2b01      	cmp	r3, #1
 8007346:	d1c3      	bne.n	80072d0 <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 8007348:	69a3      	ldr	r3, [r4, #24]
 800734a:	3302      	adds	r3, #2
 800734c:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 800734e:	69e3      	ldr	r3, [r4, #28]
 8007350:	3302      	adds	r3, #2
 8007352:	61e3      	str	r3, [r4, #28]
 8007354:	e7bc      	b.n	80072d0 <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007356:	680b      	ldr	r3, [r1, #0]
 8007358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800735c:	600b      	str	r3, [r1, #0]
 800735e:	e7ab      	b.n	80072b8 <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007360:	4a2a      	ldr	r2, [pc, #168]	; (800740c <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007362:	492b      	ldr	r1, [pc, #172]	; (8007410 <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007364:	482b      	ldr	r0, [pc, #172]	; (8007414 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007366:	4b2c      	ldr	r3, [pc, #176]	; (8007418 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007368:	f001 fcd2 	bl	8008d10 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 800736c:	f240 1293 	movw	r2, #403	; 0x193
 8007370:	2103      	movs	r1, #3
 8007372:	4628      	mov	r0, r5
 8007374:	f001 fe00 	bl	8008f78 <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 8007378:	4628      	mov	r0, r5
 800737a:	b006      	add	sp, #24
 800737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007380:	2364      	movs	r3, #100	; 0x64
 8007382:	3108      	adds	r1, #8
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4630      	mov	r0, r6
 8007388:	2300      	movs	r3, #0
 800738a:	2280      	movs	r2, #128	; 0x80
 800738c:	f001 fdb8 	bl	8008f00 <wait_flag_in_register_timeout>
 8007390:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007394:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007398:	4628      	mov	r0, r5
 800739a:	f001 fdf3 	bl	8008f84 <is_oke>
 800739e:	b348      	cbz	r0, 80073f4 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80073a0:	68a3      	ldr	r3, [r4, #8]
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f013 0f0a 	tst.w	r3, #10
 80073a8:	d1e6      	bne.n	8007378 <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	9305      	str	r3, [sp, #20]
		(void)tmp;
 80073b4:	9b05      	ldr	r3, [sp, #20]
 80073b6:	e7df      	b.n	8007378 <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80073b8:	4b17      	ldr	r3, [pc, #92]	; (8007418 <_ZN3spi16transmit_receiveEmmm+0x194>)
 80073ba:	4a14      	ldr	r2, [pc, #80]	; (800740c <_ZN3spi16transmit_receiveEmmm+0x188>)
 80073bc:	4917      	ldr	r1, [pc, #92]	; (800741c <_ZN3spi16transmit_receiveEmmm+0x198>)
 80073be:	4815      	ldr	r0, [pc, #84]	; (8007414 <_ZN3spi16transmit_receiveEmmm+0x190>)
 80073c0:	f001 fca6 	bl	8008d10 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 80073c4:	4628      	mov	r0, r5
 80073c6:	f240 119f 	movw	r1, #415	; 0x19f
 80073ca:	f001 fdd9 	bl	8008f80 <set_return_line>
}
 80073ce:	4628      	mov	r0, r5
 80073d0:	b006      	add	sp, #24
 80073d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80073d6:	4b10      	ldr	r3, [pc, #64]	; (8007418 <_ZN3spi16transmit_receiveEmmm+0x194>)
 80073d8:	4a0c      	ldr	r2, [pc, #48]	; (800740c <_ZN3spi16transmit_receiveEmmm+0x188>)
 80073da:	4910      	ldr	r1, [pc, #64]	; (800741c <_ZN3spi16transmit_receiveEmmm+0x198>)
 80073dc:	480d      	ldr	r0, [pc, #52]	; (8007414 <_ZN3spi16transmit_receiveEmmm+0x190>)
 80073de:	f001 fc97 	bl	8008d10 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 80073e2:	4628      	mov	r0, r5
 80073e4:	f240 11a9 	movw	r1, #425	; 0x1a9
 80073e8:	f001 fdca 	bl	8008f80 <set_return_line>
}
 80073ec:	4628      	mov	r0, r5
 80073ee:	b006      	add	sp, #24
 80073f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80073f4:	4b08      	ldr	r3, [pc, #32]	; (8007418 <_ZN3spi16transmit_receiveEmmm+0x194>)
 80073f6:	4a05      	ldr	r2, [pc, #20]	; (800740c <_ZN3spi16transmit_receiveEmmm+0x188>)
 80073f8:	4908      	ldr	r1, [pc, #32]	; (800741c <_ZN3spi16transmit_receiveEmmm+0x198>)
 80073fa:	4806      	ldr	r0, [pc, #24]	; (8007414 <_ZN3spi16transmit_receiveEmmm+0x190>)
 80073fc:	f001 fc88 	bl	8008d10 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007400:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007404:	4628      	mov	r0, r5
 8007406:	f001 fdbb 	bl	8008f80 <set_return_line>
		return ret;
 800740a:	e7b5      	b.n	8007378 <_ZN3spi16transmit_receiveEmmm+0xf4>
 800740c:	0800cfdc 	.word	0x0800cfdc
 8007410:	0800d08c 	.word	0x0800d08c
 8007414:	0800d004 	.word	0x0800d004
 8007418:	0800d078 	.word	0x0800d078
 800741c:	0800d058 	.word	0x0800d058

08007420 <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007424:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007426:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007428:	68c9      	ldr	r1, [r1, #12]
 800742a:	6813      	ldr	r3, [r2, #0]
 800742c:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 800742e:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007430:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007432:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007434:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 8007436:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007438:	b088      	sub	sp, #32
	spi -> txcount++;
 800743a:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 800743c:	b960      	cbnz	r0, 8007458 <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 800743e:	3201      	adds	r2, #1
 8007440:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007442:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007444:	4293      	cmp	r3, r2
 8007446:	d00e      	beq.n	8007466 <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007448:	2201      	movs	r2, #1
 800744a:	2300      	movs	r3, #0
 800744c:	702a      	strb	r2, [r5, #0]
 800744e:	606b      	str	r3, [r5, #4]
}
 8007450:	4628      	mov	r0, r5
 8007452:	b008      	add	sp, #32
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007458:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 800745a:	bf04      	itt	eq
 800745c:	3202      	addeq	r2, #2
 800745e:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007460:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007462:	4293      	cmp	r3, r2
 8007464:	d1f0      	bne.n	8007448 <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007466:	ae06      	add	r6, sp, #24
 8007468:	2764      	movs	r7, #100	; 0x64
 800746a:	4630      	mov	r0, r6
 800746c:	3108      	adds	r1, #8
 800746e:	9700      	str	r7, [sp, #0]
 8007470:	2301      	movs	r3, #1
 8007472:	2202      	movs	r2, #2
 8007474:	f001 fd44 	bl	8008f00 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007478:	4630      	mov	r0, r6
 800747a:	f001 fd83 	bl	8008f84 <is_oke>
 800747e:	b1f8      	cbz	r0, 80074c0 <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007480:	68e1      	ldr	r1, [r4, #12]
 8007482:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007484:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800748c:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 800748e:	4640      	mov	r0, r8
 8007490:	3108      	adds	r1, #8
 8007492:	2300      	movs	r3, #0
 8007494:	2280      	movs	r2, #128	; 0x80
 8007496:	9700      	str	r7, [sp, #0]
 8007498:	f001 fd32 	bl	8008f00 <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 800749c:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 800749e:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 80074a6:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 80074aa:	d11c      	bne.n	80074e6 <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80074ac:	f013 0f0a 	tst.w	r3, #10
 80074b0:	d1ca      	bne.n	8007448 <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	9305      	str	r3, [sp, #20]
			(void)tmp;
 80074bc:	9b05      	ldr	r3, [sp, #20]
 80074be:	e7c3      	b.n	8007448 <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 80074c0:	4630      	mov	r0, r6
 80074c2:	f240 3129 	movw	r1, #809	; 0x329
 80074c6:	f001 fd5b 	bl	8008f80 <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80074ca:	4919      	ldr	r1, [pc, #100]	; (8007530 <_Z10SPI_Tx_ISRP3spi+0x110>)
 80074cc:	4819      	ldr	r0, [pc, #100]	; (8007534 <_Z10SPI_Tx_ISRP3spi+0x114>)
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <_Z10SPI_Tx_ISRP3spi+0x118>)
 80074d0:	4a1a      	ldr	r2, [pc, #104]	; (800753c <_Z10SPI_Tx_ISRP3spi+0x11c>)
 80074d2:	f001 fc1d 	bl	8008d10 <LOG_ERROR>
			return ret;
 80074d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80074da:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80074de:	4628      	mov	r0, r5
 80074e0:	b008      	add	sp, #32
 80074e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 80074e6:	4630      	mov	r0, r6
 80074e8:	f001 fd4c 	bl	8008f84 <is_oke>
 80074ec:	b110      	cbz	r0, 80074f4 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80074ee:	68a3      	ldr	r3, [r4, #8]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	e7db      	b.n	80074ac <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80074f4:	4b10      	ldr	r3, [pc, #64]	; (8007538 <_Z10SPI_Tx_ISRP3spi+0x118>)
 80074f6:	4a11      	ldr	r2, [pc, #68]	; (800753c <_Z10SPI_Tx_ISRP3spi+0x11c>)
 80074f8:	490d      	ldr	r1, [pc, #52]	; (8007530 <_Z10SPI_Tx_ISRP3spi+0x110>)
 80074fa:	480e      	ldr	r0, [pc, #56]	; (8007534 <_Z10SPI_Tx_ISRP3spi+0x114>)
 80074fc:	f001 fc08 	bl	8008d10 <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 8007500:	f44f 714e 	mov.w	r1, #824	; 0x338
 8007504:	4630      	mov	r0, r6
 8007506:	f001 fd3b 	bl	8008f80 <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 800750a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 800750e:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007510:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007512:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 8007516:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007518:	078b      	lsls	r3, r1, #30
 800751a:	d503      	bpl.n	8007524 <_Z10SPI_Tx_ISRP3spi+0x104>
 800751c:	6813      	ldr	r3, [r2, #0]
 800751e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007522:	6013      	str	r3, [r2, #0]
				return ret;
 8007524:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007528:	e885 0003 	stmia.w	r5, {r0, r1}
 800752c:	e790      	b.n	8007450 <_Z10SPI_Tx_ISRP3spi+0x30>
 800752e:	bf00      	nop
 8007530:	0800d058 	.word	0x0800d058
 8007534:	0800d004 	.word	0x0800d004
 8007538:	0800d0e4 	.word	0x0800d0e4
 800753c:	0800cfdc 	.word	0x0800cfdc

08007540 <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007544:	68c9      	ldr	r1, [r1, #12]
 8007546:	69e3      	ldr	r3, [r4, #28]
 8007548:	68ca      	ldr	r2, [r1, #12]
 800754a:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 800754c:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 800754e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007550:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8007552:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8007554:	b086      	sub	sp, #24
 8007556:	4605      	mov	r5, r0
	spi -> rxcount++;
 8007558:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 800755a:	b962      	cbnz	r2, 8007576 <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 800755c:	69e2      	ldr	r2, [r4, #28]
 800755e:	3201      	adds	r2, #1
 8007560:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8007562:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007568:	2201      	movs	r2, #1
 800756a:	2300      	movs	r3, #0
 800756c:	702a      	strb	r2, [r5, #0]
 800756e:	606b      	str	r3, [r5, #4]
}
 8007570:	4628      	mov	r0, r5
 8007572:	b006      	add	sp, #24
 8007574:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007576:	2a01      	cmp	r2, #1
 8007578:	d1f3      	bne.n	8007562 <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 800757a:	69e2      	ldr	r2, [r4, #28]
 800757c:	3202      	adds	r2, #2
 800757e:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 8007580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007582:	4293      	cmp	r3, r2
 8007584:	d1f0      	bne.n	8007568 <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8007586:	684b      	ldr	r3, [r1, #4]
 8007588:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800758c:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 800758e:	ae04      	add	r6, sp, #16
 8007590:	2364      	movs	r3, #100	; 0x64
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	4630      	mov	r0, r6
 8007596:	3108      	adds	r1, #8
 8007598:	2300      	movs	r3, #0
 800759a:	2201      	movs	r2, #1
 800759c:	f001 fcb0 	bl	8008f00 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 80075a0:	4630      	mov	r0, r6
 80075a2:	f001 fcef 	bl	8008f84 <is_oke>
 80075a6:	b158      	cbz	r0, 80075c0 <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80075a8:	68a3      	ldr	r3, [r4, #8]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	f013 0f0a 	tst.w	r3, #10
 80075b0:	d1da      	bne.n	8007568 <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 80075b2:	68e3      	ldr	r3, [r4, #12]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	9303      	str	r3, [sp, #12]
			(void)tmp;
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	e7d3      	b.n	8007568 <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80075c0:	4b07      	ldr	r3, [pc, #28]	; (80075e0 <_Z10SPI_Rx_ISRP3spi+0xa0>)
 80075c2:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 80075c4:	4908      	ldr	r1, [pc, #32]	; (80075e8 <_Z10SPI_Rx_ISRP3spi+0xa8>)
 80075c6:	4809      	ldr	r0, [pc, #36]	; (80075ec <_Z10SPI_Rx_ISRP3spi+0xac>)
 80075c8:	f001 fba2 	bl	8008d10 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 80075cc:	f240 315d 	movw	r1, #861	; 0x35d
 80075d0:	4630      	mov	r0, r6
 80075d2:	f001 fcd5 	bl	8008f80 <set_return_line>
			return ret;
 80075d6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80075da:	e885 0003 	stmia.w	r5, {r0, r1}
 80075de:	e7c7      	b.n	8007570 <_Z10SPI_Rx_ISRP3spi+0x30>
 80075e0:	0800d0f0 	.word	0x0800d0f0
 80075e4:	0800cfdc 	.word	0x0800cfdc
 80075e8:	0800d058 	.word	0x0800d058
 80075ec:	0800d004 	.word	0x0800d004

080075f0 <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 80075f0:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80075f2:	4c22      	ldr	r4, [pc, #136]	; (800767c <SPI1_IRQHandler+0x8c>)
 80075f4:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 80075f6:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007600:	9a00      	ldr	r2, [sp, #0]
 8007602:	0611      	lsls	r1, r2, #24
 8007604:	d502      	bpl.n	800760c <SPI1_IRQHandler+0x1c>
 8007606:	9a01      	ldr	r2, [sp, #4]
 8007608:	0792      	lsls	r2, r2, #30
 800760a:	d41e      	bmi.n	800764a <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 800760c:	9a00      	ldr	r2, [sp, #0]
 800760e:	0650      	lsls	r0, r2, #25
 8007610:	d502      	bpl.n	8007618 <SPI1_IRQHandler+0x28>
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	07d1      	lsls	r1, r2, #31
 8007616:	d424      	bmi.n	8007662 <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007618:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800761a:	0652      	lsls	r2, r2, #25
 800761c:	d40a      	bmi.n	8007634 <SPI1_IRQHandler+0x44>
 800761e:	9801      	ldr	r0, [sp, #4]
 8007620:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007624:	d106      	bne.n	8007634 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007626:	6963      	ldr	r3, [r4, #20]
 8007628:	b16b      	cbz	r3, 8007646 <SPI1_IRQHandler+0x56>
 800762a:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 800762c:	b004      	add	sp, #16
 800762e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007632:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	9302      	str	r3, [sp, #8]
		(void)tmp;
 800763c:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800763e:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007640:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1f1      	bne.n	800762a <SPI1_IRQHandler+0x3a>
}
 8007646:	b004      	add	sp, #16
 8007648:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800764a:	4621      	mov	r1, r4
 800764c:	a802      	add	r0, sp, #8
 800764e:	f7ff fee7 	bl	8007420 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007652:	a802      	add	r0, sp, #8
 8007654:	f001 fc96 	bl	8008f84 <is_oke>
			event = SPI_EVENT_ERROR;
 8007658:	2800      	cmp	r0, #0
 800765a:	bf14      	ite	ne
 800765c:	2001      	movne	r0, #1
 800765e:	2003      	moveq	r0, #3
 8007660:	e7e1      	b.n	8007626 <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007662:	4906      	ldr	r1, [pc, #24]	; (800767c <SPI1_IRQHandler+0x8c>)
 8007664:	a802      	add	r0, sp, #8
 8007666:	f7ff ff6b 	bl	8007540 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800766a:	a802      	add	r0, sp, #8
 800766c:	f001 fc8a 	bl	8008f84 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007670:	2800      	cmp	r0, #0
 8007672:	bf0c      	ite	eq
 8007674:	2003      	moveq	r0, #3
 8007676:	2002      	movne	r0, #2
 8007678:	e7d5      	b.n	8007626 <SPI1_IRQHandler+0x36>
 800767a:	bf00      	nop
 800767c:	2000b548 	.word	0x2000b548

08007680 <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 8007680:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007682:	4c22      	ldr	r4, [pc, #136]	; (800770c <SPI2_IRQHandler+0x8c>)
 8007684:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 8007686:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 800768c:	689a      	ldr	r2, [r3, #8]
 800768e:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007690:	9a00      	ldr	r2, [sp, #0]
 8007692:	0611      	lsls	r1, r2, #24
 8007694:	d502      	bpl.n	800769c <SPI2_IRQHandler+0x1c>
 8007696:	9a01      	ldr	r2, [sp, #4]
 8007698:	0792      	lsls	r2, r2, #30
 800769a:	d41e      	bmi.n	80076da <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 800769c:	9a00      	ldr	r2, [sp, #0]
 800769e:	0650      	lsls	r0, r2, #25
 80076a0:	d502      	bpl.n	80076a8 <SPI2_IRQHandler+0x28>
 80076a2:	9a01      	ldr	r2, [sp, #4]
 80076a4:	07d1      	lsls	r1, r2, #31
 80076a6:	d424      	bmi.n	80076f2 <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80076a8:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80076aa:	0652      	lsls	r2, r2, #25
 80076ac:	d40a      	bmi.n	80076c4 <SPI2_IRQHandler+0x44>
 80076ae:	9801      	ldr	r0, [sp, #4]
 80076b0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80076b4:	d106      	bne.n	80076c4 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076b6:	6963      	ldr	r3, [r4, #20]
 80076b8:	b16b      	cbz	r3, 80076d6 <SPI2_IRQHandler+0x56>
 80076ba:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 80076bc:	b004      	add	sp, #16
 80076be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076c2:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80076c4:	68da      	ldr	r2, [r3, #12]
 80076c6:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80076cc:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076ce:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80076d0:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f1      	bne.n	80076ba <SPI2_IRQHandler+0x3a>
}
 80076d6:	b004      	add	sp, #16
 80076d8:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80076da:	4621      	mov	r1, r4
 80076dc:	a802      	add	r0, sp, #8
 80076de:	f7ff fe9f 	bl	8007420 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80076e2:	a802      	add	r0, sp, #8
 80076e4:	f001 fc4e 	bl	8008f84 <is_oke>
			event = SPI_EVENT_ERROR;
 80076e8:	2800      	cmp	r0, #0
 80076ea:	bf14      	ite	ne
 80076ec:	2001      	movne	r0, #1
 80076ee:	2003      	moveq	r0, #3
 80076f0:	e7e1      	b.n	80076b6 <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80076f2:	4906      	ldr	r1, [pc, #24]	; (800770c <SPI2_IRQHandler+0x8c>)
 80076f4:	a802      	add	r0, sp, #8
 80076f6:	f7ff ff23 	bl	8007540 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80076fa:	a802      	add	r0, sp, #8
 80076fc:	f001 fc42 	bl	8008f84 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007700:	2800      	cmp	r0, #0
 8007702:	bf0c      	ite	eq
 8007704:	2003      	moveq	r0, #3
 8007706:	2002      	movne	r0, #2
 8007708:	e7d5      	b.n	80076b6 <SPI2_IRQHandler+0x36>
 800770a:	bf00      	nop
 800770c:	2000b57c 	.word	0x2000b57c

08007710 <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 8007710:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007712:	4c22      	ldr	r4, [pc, #136]	; (800779c <SPI3_IRQHandler+0x8c>)
 8007714:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 8007716:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 800771c:	689a      	ldr	r2, [r3, #8]
 800771e:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007720:	9a00      	ldr	r2, [sp, #0]
 8007722:	0611      	lsls	r1, r2, #24
 8007724:	d502      	bpl.n	800772c <SPI3_IRQHandler+0x1c>
 8007726:	9a01      	ldr	r2, [sp, #4]
 8007728:	0792      	lsls	r2, r2, #30
 800772a:	d41e      	bmi.n	800776a <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 800772c:	9a00      	ldr	r2, [sp, #0]
 800772e:	0650      	lsls	r0, r2, #25
 8007730:	d502      	bpl.n	8007738 <SPI3_IRQHandler+0x28>
 8007732:	9a01      	ldr	r2, [sp, #4]
 8007734:	07d1      	lsls	r1, r2, #31
 8007736:	d424      	bmi.n	8007782 <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007738:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800773a:	0652      	lsls	r2, r2, #25
 800773c:	d40a      	bmi.n	8007754 <SPI3_IRQHandler+0x44>
 800773e:	9801      	ldr	r0, [sp, #4]
 8007740:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007744:	d106      	bne.n	8007754 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007746:	6963      	ldr	r3, [r4, #20]
 8007748:	b16b      	cbz	r3, 8007766 <SPI3_IRQHandler+0x56>
 800774a:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 800774c:	b004      	add	sp, #16
 800774e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007752:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	9302      	str	r3, [sp, #8]
		(void)tmp;
 800775c:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800775e:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007760:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1f1      	bne.n	800774a <SPI3_IRQHandler+0x3a>
}
 8007766:	b004      	add	sp, #16
 8007768:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800776a:	4621      	mov	r1, r4
 800776c:	a802      	add	r0, sp, #8
 800776e:	f7ff fe57 	bl	8007420 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007772:	a802      	add	r0, sp, #8
 8007774:	f001 fc06 	bl	8008f84 <is_oke>
			event = SPI_EVENT_ERROR;
 8007778:	2800      	cmp	r0, #0
 800777a:	bf14      	ite	ne
 800777c:	2001      	movne	r0, #1
 800777e:	2003      	moveq	r0, #3
 8007780:	e7e1      	b.n	8007746 <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007782:	4906      	ldr	r1, [pc, #24]	; (800779c <SPI3_IRQHandler+0x8c>)
 8007784:	a802      	add	r0, sp, #8
 8007786:	f7ff fedb 	bl	8007540 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800778a:	a802      	add	r0, sp, #8
 800778c:	f001 fbfa 	bl	8008f84 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007790:	2800      	cmp	r0, #0
 8007792:	bf0c      	ite	eq
 8007794:	2003      	moveq	r0, #3
 8007796:	2002      	movne	r0, #2
 8007798:	e7d5      	b.n	8007746 <SPI3_IRQHandler+0x36>
 800779a:	bf00      	nop
 800779c:	2000b5b0 	.word	0x2000b5b0

080077a0 <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 80077a0:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80077a2:	4c22      	ldr	r4, [pc, #136]	; (800782c <SPI4_IRQHandler+0x8c>)
 80077a4:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 80077a6:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80077b0:	9a00      	ldr	r2, [sp, #0]
 80077b2:	0611      	lsls	r1, r2, #24
 80077b4:	d502      	bpl.n	80077bc <SPI4_IRQHandler+0x1c>
 80077b6:	9a01      	ldr	r2, [sp, #4]
 80077b8:	0792      	lsls	r2, r2, #30
 80077ba:	d41e      	bmi.n	80077fa <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80077bc:	9a00      	ldr	r2, [sp, #0]
 80077be:	0650      	lsls	r0, r2, #25
 80077c0:	d502      	bpl.n	80077c8 <SPI4_IRQHandler+0x28>
 80077c2:	9a01      	ldr	r2, [sp, #4]
 80077c4:	07d1      	lsls	r1, r2, #31
 80077c6:	d424      	bmi.n	8007812 <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80077c8:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80077ca:	0652      	lsls	r2, r2, #25
 80077cc:	d40a      	bmi.n	80077e4 <SPI4_IRQHandler+0x44>
 80077ce:	9801      	ldr	r0, [sp, #4]
 80077d0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80077d4:	d106      	bne.n	80077e4 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077d6:	6963      	ldr	r3, [r4, #20]
 80077d8:	b16b      	cbz	r3, 80077f6 <SPI4_IRQHandler+0x56>
 80077da:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 80077dc:	b004      	add	sp, #16
 80077de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077e2:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80077ec:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077ee:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80077f0:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f1      	bne.n	80077da <SPI4_IRQHandler+0x3a>
}
 80077f6:	b004      	add	sp, #16
 80077f8:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80077fa:	4621      	mov	r1, r4
 80077fc:	a802      	add	r0, sp, #8
 80077fe:	f7ff fe0f 	bl	8007420 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007802:	a802      	add	r0, sp, #8
 8007804:	f001 fbbe 	bl	8008f84 <is_oke>
			event = SPI_EVENT_ERROR;
 8007808:	2800      	cmp	r0, #0
 800780a:	bf14      	ite	ne
 800780c:	2001      	movne	r0, #1
 800780e:	2003      	moveq	r0, #3
 8007810:	e7e1      	b.n	80077d6 <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007812:	4906      	ldr	r1, [pc, #24]	; (800782c <SPI4_IRQHandler+0x8c>)
 8007814:	a802      	add	r0, sp, #8
 8007816:	f7ff fe93 	bl	8007540 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800781a:	a802      	add	r0, sp, #8
 800781c:	f001 fbb2 	bl	8008f84 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007820:	2800      	cmp	r0, #0
 8007822:	bf0c      	ite	eq
 8007824:	2003      	moveq	r0, #3
 8007826:	2002      	movne	r0, #2
 8007828:	e7d5      	b.n	80077d6 <SPI4_IRQHandler+0x36>
 800782a:	bf00      	nop
 800782c:	2000b5e4 	.word	0x2000b5e4

08007830 <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 8007830:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007832:	4c22      	ldr	r4, [pc, #136]	; (80078bc <SPI5_IRQHandler+0x8c>)
 8007834:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 8007836:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007840:	9a00      	ldr	r2, [sp, #0]
 8007842:	0611      	lsls	r1, r2, #24
 8007844:	d502      	bpl.n	800784c <SPI5_IRQHandler+0x1c>
 8007846:	9a01      	ldr	r2, [sp, #4]
 8007848:	0792      	lsls	r2, r2, #30
 800784a:	d41e      	bmi.n	800788a <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 800784c:	9a00      	ldr	r2, [sp, #0]
 800784e:	0650      	lsls	r0, r2, #25
 8007850:	d502      	bpl.n	8007858 <SPI5_IRQHandler+0x28>
 8007852:	9a01      	ldr	r2, [sp, #4]
 8007854:	07d1      	lsls	r1, r2, #31
 8007856:	d424      	bmi.n	80078a2 <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8007858:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800785a:	0652      	lsls	r2, r2, #25
 800785c:	d40a      	bmi.n	8007874 <SPI5_IRQHandler+0x44>
 800785e:	9801      	ldr	r0, [sp, #4]
 8007860:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007864:	d106      	bne.n	8007874 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007866:	6963      	ldr	r3, [r4, #20]
 8007868:	b16b      	cbz	r3, 8007886 <SPI5_IRQHandler+0x56>
 800786a:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 800786c:	b004      	add	sp, #16
 800786e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007872:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	9302      	str	r3, [sp, #8]
		(void)tmp;
 800787c:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800787e:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007880:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007882:	2b00      	cmp	r3, #0
 8007884:	d1f1      	bne.n	800786a <SPI5_IRQHandler+0x3a>
}
 8007886:	b004      	add	sp, #16
 8007888:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800788a:	4621      	mov	r1, r4
 800788c:	a802      	add	r0, sp, #8
 800788e:	f7ff fdc7 	bl	8007420 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007892:	a802      	add	r0, sp, #8
 8007894:	f001 fb76 	bl	8008f84 <is_oke>
			event = SPI_EVENT_ERROR;
 8007898:	2800      	cmp	r0, #0
 800789a:	bf14      	ite	ne
 800789c:	2001      	movne	r0, #1
 800789e:	2003      	moveq	r0, #3
 80078a0:	e7e1      	b.n	8007866 <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80078a2:	4906      	ldr	r1, [pc, #24]	; (80078bc <SPI5_IRQHandler+0x8c>)
 80078a4:	a802      	add	r0, sp, #8
 80078a6:	f7ff fe4b 	bl	8007540 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80078aa:	a802      	add	r0, sp, #8
 80078ac:	f001 fb6a 	bl	8008f84 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80078b0:	2800      	cmp	r0, #0
 80078b2:	bf0c      	ite	eq
 80078b4:	2003      	moveq	r0, #3
 80078b6:	2002      	movne	r0, #2
 80078b8:	e7d5      	b.n	8007866 <SPI5_IRQHandler+0x36>
 80078ba:	bf00      	nop
 80078bc:	2000b618 	.word	0x2000b618

080078c0 <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 80078c0:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80078c2:	4c22      	ldr	r4, [pc, #136]	; (800794c <SPI6_IRQHandler+0x8c>)
 80078c4:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 80078c6:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80078d0:	9a00      	ldr	r2, [sp, #0]
 80078d2:	0611      	lsls	r1, r2, #24
 80078d4:	d502      	bpl.n	80078dc <SPI6_IRQHandler+0x1c>
 80078d6:	9a01      	ldr	r2, [sp, #4]
 80078d8:	0792      	lsls	r2, r2, #30
 80078da:	d41e      	bmi.n	800791a <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80078dc:	9a00      	ldr	r2, [sp, #0]
 80078de:	0650      	lsls	r0, r2, #25
 80078e0:	d502      	bpl.n	80078e8 <SPI6_IRQHandler+0x28>
 80078e2:	9a01      	ldr	r2, [sp, #4]
 80078e4:	07d1      	lsls	r1, r2, #31
 80078e6:	d424      	bmi.n	8007932 <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80078e8:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80078ea:	0652      	lsls	r2, r2, #25
 80078ec:	d40a      	bmi.n	8007904 <SPI6_IRQHandler+0x44>
 80078ee:	9801      	ldr	r0, [sp, #4]
 80078f0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80078f4:	d106      	bne.n	8007904 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80078f6:	6963      	ldr	r3, [r4, #20]
 80078f8:	b16b      	cbz	r3, 8007916 <SPI6_IRQHandler+0x56>
 80078fa:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 80078fc:	b004      	add	sp, #16
 80078fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007902:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007904:	68da      	ldr	r2, [r3, #12]
 8007906:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	9302      	str	r3, [sp, #8]
		(void)tmp;
 800790c:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800790e:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007910:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1f1      	bne.n	80078fa <SPI6_IRQHandler+0x3a>
}
 8007916:	b004      	add	sp, #16
 8007918:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800791a:	4621      	mov	r1, r4
 800791c:	a802      	add	r0, sp, #8
 800791e:	f7ff fd7f 	bl	8007420 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007922:	a802      	add	r0, sp, #8
 8007924:	f001 fb2e 	bl	8008f84 <is_oke>
			event = SPI_EVENT_ERROR;
 8007928:	2800      	cmp	r0, #0
 800792a:	bf14      	ite	ne
 800792c:	2001      	movne	r0, #1
 800792e:	2003      	moveq	r0, #3
 8007930:	e7e1      	b.n	80078f6 <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007932:	4906      	ldr	r1, [pc, #24]	; (800794c <SPI6_IRQHandler+0x8c>)
 8007934:	a802      	add	r0, sp, #8
 8007936:	f7ff fe03 	bl	8007540 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800793a:	a802      	add	r0, sp, #8
 800793c:	f001 fb22 	bl	8008f84 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007940:	2800      	cmp	r0, #0
 8007942:	bf0c      	ite	eq
 8007944:	2003      	moveq	r0, #3
 8007946:	2002      	movne	r0, #2
 8007948:	e7d5      	b.n	80078f6 <SPI6_IRQHandler+0x36>
 800794a:	bf00      	nop
 800794c:	2000b64c 	.word	0x2000b64c

08007950 <_GLOBAL__sub_I_cc>:
}
 8007950:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8007952:	4e2c      	ldr	r6, [pc, #176]	; (8007a04 <_GLOBAL__sub_I_cc+0xb4>)
 8007954:	4c2c      	ldr	r4, [pc, #176]	; (8007a08 <_GLOBAL__sub_I_cc+0xb8>)
 8007956:	4d2d      	ldr	r5, [pc, #180]	; (8007a0c <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 8007958:	4f2d      	ldr	r7, [pc, #180]	; (8007a10 <_GLOBAL__sub_I_cc+0xc0>)
 800795a:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 800795c:	2300      	movs	r3, #0
 800795e:	e9c6 3300 	strd	r3, r3, [r6]
 8007962:	e9c6 3304 	strd	r3, r3, [r6, #16]
 8007966:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800796a:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800796e:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 8007972:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 8007974:	4e27      	ldr	r6, [pc, #156]	; (8007a14 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 8007976:	60ab      	str	r3, [r5, #8]
 8007978:	e9c5 3300 	strd	r3, r3, [r5]
 800797c:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8007980:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8007984:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8007988:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800798c:	e9c4 3300 	strd	r3, r3, [r4]
 8007990:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8007994:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8007998:	60a3      	str	r3, [r4, #8]
 800799a:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 800799c:	60ee      	str	r6, [r5, #12]
 800799e:	4d1e      	ldr	r5, [pc, #120]	; (8007a18 <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 80079a0:	481e      	ldr	r0, [pc, #120]	; (8007a1c <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 80079a2:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 80079a4:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80079a8:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 80079aa:	4c1d      	ldr	r4, [pc, #116]	; (8007a20 <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 80079ac:	491d      	ldr	r1, [pc, #116]	; (8007a24 <_GLOBAL__sub_I_cc+0xd4>)
 80079ae:	4a1e      	ldr	r2, [pc, #120]	; (8007a28 <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 80079b0:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 80079b2:	e9c0 3300 	strd	r3, r3, [r0]
 80079b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80079be:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80079c2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80079c6:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 80079c8:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80079cc:	4817      	ldr	r0, [pc, #92]	; (8007a2c <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 80079ce:	608b      	str	r3, [r1, #8]
 80079d0:	e9c1 3300 	strd	r3, r3, [r1]
 80079d4:	e9c1 3304 	strd	r3, r3, [r1, #16]
 80079d8:	e9c1 3306 	strd	r3, r3, [r1, #24]
 80079dc:	e9c1 3308 	strd	r3, r3, [r1, #32]
 80079e0:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 80079e4:	e9c2 3300 	strd	r3, r3, [r2]
 80079e8:	e9c2 3304 	strd	r3, r3, [r2, #16]
 80079ec:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 80079ee:	60cc      	str	r4, [r1, #12]
}
 80079f0:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 80079f2:	e9c2 3306 	strd	r3, r3, [r2, #24]
 80079f6:	e9c2 3308 	strd	r3, r3, [r2, #32]
 80079fa:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 80079fe:	60d0      	str	r0, [r2, #12]
}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	2000b548 	.word	0x2000b548
 8007a08:	2000b5b0 	.word	0x2000b5b0
 8007a0c:	2000b57c 	.word	0x2000b57c
 8007a10:	40013000 	.word	0x40013000
 8007a14:	40003800 	.word	0x40003800
 8007a18:	40003c00 	.word	0x40003c00
 8007a1c:	2000b5e4 	.word	0x2000b5e4
 8007a20:	40013400 	.word	0x40013400
 8007a24:	2000b618 	.word	0x2000b618
 8007a28:	2000b64c 	.word	0x2000b64c
 8007a2c:	40015400 	.word	0x40015400

08007a30 <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 8007a30:	4b01      	ldr	r3, [pc, #4]	; (8007a38 <systick_get_tick+0x8>)
 8007a32:	6818      	ldr	r0, [r3, #0]
}
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	2000b680 	.word	0x2000b680

08007a3c <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 8007a3c:	4a05      	ldr	r2, [pc, #20]	; (8007a54 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 8007a3e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007a42:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 8007a44:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 8007a46:	bf38      	it	cc
 8007a48:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 8007a4a:	6813      	ldr	r3, [r2, #0]
 8007a4c:	1a5b      	subs	r3, r3, r1
 8007a4e:	4283      	cmp	r3, r0
 8007a50:	d3fb      	bcc.n	8007a4a <systick_delay_ms+0xe>
}
 8007a52:	4770      	bx	lr
 8007a54:	2000b680 	.word	0x2000b680

08007a58 <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 8007a58:	4b0d      	ldr	r3, [pc, #52]	; (8007a90 <systick_init+0x38>)
 8007a5a:	4a0e      	ldr	r2, [pc, #56]	; (8007a94 <systick_init+0x3c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a62:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007a64:	3b01      	subs	r3, #1
 8007a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 8007a6a:	4601      	mov	r1, r0
 8007a6c:	d20b      	bcs.n	8007a86 <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a6e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a72:	4809      	ldr	r0, [pc, #36]	; (8007a98 <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007a74:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a76:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8007a7a:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a7e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007a80:	2000      	movs	r0, #0
 8007a82:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007a84:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 8007a86:	2200      	movs	r2, #0
 8007a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a8c:	f001 bb10 	b.w	80090b0 <NVIC_Set_Priority>
 8007a90:	20000000 	.word	0x20000000
 8007a94:	10624dd3 	.word	0x10624dd3
 8007a98:	e000ed00 	.word	0xe000ed00

08007a9c <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 8007a9c:	4b01      	ldr	r3, [pc, #4]	; (8007aa4 <get_tick+0x8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4718      	bx	r3
 8007aa2:	bf00      	nop
 8007aa4:	2000003c 	.word	0x2000003c

08007aa8 <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 8007aa8:	4b01      	ldr	r3, [pc, #4]	; (8007ab0 <delay_ms+0x8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4718      	bx	r3
 8007aae:	bf00      	nop
 8007ab0:	20000038 	.word	0x20000038

08007ab4 <app_systick_process>:
	sdk_tick++;
 8007ab4:	4a17      	ldr	r2, [pc, #92]	; (8007b14 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 8007ab6:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 8007ab8:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 8007aba:	4c17      	ldr	r4, [pc, #92]	; (8007b18 <app_systick_process+0x64>)
	sdk_tick++;
 8007abc:	3301      	adds	r3, #1
 8007abe:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 8007ac0:	6823      	ldr	r3, [r4, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007acc:	d000      	beq.n	8007ad0 <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 8007ad0:	4d12      	ldr	r5, [pc, #72]	; (8007b1c <app_systick_process+0x68>)
 8007ad2:	ed95 7a00 	vldr	s14, [r5]
 8007ad6:	edd4 7a00 	vldr	s15, [r4]
 8007ada:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ae2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8007ae6:	ee17 0a90 	vmov	r0, s15
 8007aea:	f7f8 fd4d 	bl	8000588 <__aeabi_f2d>
 8007aee:	4602      	mov	r2, r0
 8007af0:	460b      	mov	r3, r1
 8007af2:	2000      	movs	r0, #0
 8007af4:	490a      	ldr	r1, [pc, #40]	; (8007b20 <app_systick_process+0x6c>)
 8007af6:	f7f8 fbe7 	bl	80002c8 <__aeabi_dsub>
 8007afa:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <app_systick_process+0x70>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	f7f8 fd9b 	bl	8000638 <__aeabi_dmul>
 8007b02:	f7f9 f891 	bl	8000c28 <__aeabi_d2f>
 8007b06:	4a08      	ldr	r2, [pc, #32]	; (8007b28 <app_systick_process+0x74>)
			systick_total_ticks = 0;
 8007b08:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 8007b0a:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 8007b0c:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 8007b0e:	602b      	str	r3, [r5, #0]
	}
 8007b10:	bd38      	pop	{r3, r4, r5, pc}
 8007b12:	bf00      	nop
 8007b14:	2000b680 	.word	0x2000b680
 8007b18:	2000b92c 	.word	0x2000b92c
 8007b1c:	2000b928 	.word	0x2000b928
 8007b20:	3ff00000 	.word	0x3ff00000
 8007b24:	40590000 	.word	0x40590000
 8007b28:	2000b920 	.word	0x2000b920

08007b2c <_ZN3tim4initEP12tim_config_t>:
tim::tim(TIM_TypeDef *Timer){
	_tim = Timer;
}

/* TIM Basic */
stm_ret_t tim::init(tim_config_t *conf){
 8007b2c:	b470      	push	{r4, r5, r6}
	stm_ret_t ret;

	_conf = conf;

#if defined(TIM1)
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007b2e:	684b      	ldr	r3, [r1, #4]
 8007b30:	4c7d      	ldr	r4, [pc, #500]	; (8007d28 <_ZN3tim4initEP12tim_config_t+0x1fc>)
	_conf = conf;
 8007b32:	610a      	str	r2, [r1, #16]
	stm_ret_t ret;
 8007b34:	2501      	movs	r5, #1
 8007b36:	7005      	strb	r5, [r0, #0]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007b38:	42a3      	cmp	r3, r4
	stm_ret_t ret;
 8007b3a:	f04f 0500 	mov.w	r5, #0
 8007b3e:	6045      	str	r5, [r0, #4]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007b40:	f000 8087 	beq.w	8007c52 <_ZN3tim4initEP12tim_config_t+0x126>
#endif
#if defined(TIM2)
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b48:	d033      	beq.n	8007bb2 <_ZN3tim4initEP12tim_config_t+0x86>
#endif
#if defined(TIM3)
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8007b4a:	4c78      	ldr	r4, [pc, #480]	; (8007d2c <_ZN3tim4initEP12tim_config_t+0x200>)
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	f000 808f 	beq.w	8007c70 <_ZN3tim4initEP12tim_config_t+0x144>
#endif
#if defined(TIM4)
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007b52:	4c77      	ldr	r4, [pc, #476]	; (8007d30 <_ZN3tim4initEP12tim_config_t+0x204>)
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	f000 8095 	beq.w	8007c84 <_ZN3tim4initEP12tim_config_t+0x158>
#endif
#if defined(TIM5)
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8007b5a:	4c76      	ldr	r4, [pc, #472]	; (8007d34 <_ZN3tim4initEP12tim_config_t+0x208>)
 8007b5c:	42a3      	cmp	r3, r4
 8007b5e:	d07e      	beq.n	8007c5e <_ZN3tim4initEP12tim_config_t+0x132>
#endif
#if defined(TIM6)
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8007b60:	4c75      	ldr	r4, [pc, #468]	; (8007d38 <_ZN3tim4initEP12tim_config_t+0x20c>)
 8007b62:	42a3      	cmp	r3, r4
 8007b64:	f000 8094 	beq.w	8007c90 <_ZN3tim4initEP12tim_config_t+0x164>
#endif
#if defined(TIM7)
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8007b68:	4c74      	ldr	r4, [pc, #464]	; (8007d3c <_ZN3tim4initEP12tim_config_t+0x210>)
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	f000 80a2 	beq.w	8007cb4 <_ZN3tim4initEP12tim_config_t+0x188>
#endif
#if defined(TIM8)
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8007b70:	4c73      	ldr	r4, [pc, #460]	; (8007d40 <_ZN3tim4initEP12tim_config_t+0x214>)
 8007b72:	42a3      	cmp	r3, r4
 8007b74:	f000 80a7 	beq.w	8007cc6 <_ZN3tim4initEP12tim_config_t+0x19a>
#endif
#if defined(TIM9)
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 8007b78:	4c72      	ldr	r4, [pc, #456]	; (8007d44 <_ZN3tim4initEP12tim_config_t+0x218>)
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	f000 808e 	beq.w	8007c9c <_ZN3tim4initEP12tim_config_t+0x170>
#endif
#if defined(TIM10)
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8007b80:	4c71      	ldr	r4, [pc, #452]	; (8007d48 <_ZN3tim4initEP12tim_config_t+0x21c>)
 8007b82:	42a3      	cmp	r3, r4
 8007b84:	f000 80a8 	beq.w	8007cd8 <_ZN3tim4initEP12tim_config_t+0x1ac>
#endif
#if defined(TIM11)
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8007b88:	4c70      	ldr	r4, [pc, #448]	; (8007d4c <_ZN3tim4initEP12tim_config_t+0x220>)
 8007b8a:	42a3      	cmp	r3, r4
 8007b8c:	f000 80b0 	beq.w	8007cf0 <_ZN3tim4initEP12tim_config_t+0x1c4>
#endif
#if defined(TIM12)
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8007b90:	4c6f      	ldr	r4, [pc, #444]	; (8007d50 <_ZN3tim4initEP12tim_config_t+0x224>)
 8007b92:	42a3      	cmp	r3, r4
 8007b94:	f000 80b5 	beq.w	8007d02 <_ZN3tim4initEP12tim_config_t+0x1d6>
#endif
#if defined(TIM13)
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8007b98:	4c6e      	ldr	r4, [pc, #440]	; (8007d54 <_ZN3tim4initEP12tim_config_t+0x228>)
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	f000 80b7 	beq.w	8007d0e <_ZN3tim4initEP12tim_config_t+0x1e2>
#endif
#if defined(TIM14)
	else if(_tim == TIM14) RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 8007ba0:	4c6d      	ldr	r4, [pc, #436]	; (8007d58 <_ZN3tim4initEP12tim_config_t+0x22c>)
 8007ba2:	42a3      	cmp	r3, r4
 8007ba4:	d10a      	bne.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
 8007ba6:	4d6d      	ldr	r5, [pc, #436]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007ba8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007baa:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007bae:	642c      	str	r4, [r5, #64]	; 0x40
 8007bb0:	e004      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007bb2:	4d6a      	ldr	r5, [pc, #424]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007bb4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007bb6:	f044 0401 	orr.w	r4, r4, #1
 8007bba:	642c      	str	r4, [r5, #64]	; 0x40
#endif

	/* BASIC TIMER */
	_tim -> CR1 = 0U;
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8007bbc:	7a94      	ldrb	r4, [r2, #10]
 8007bbe:	7a16      	ldrb	r6, [r2, #8]
 8007bc0:	01e4      	lsls	r4, r4, #7
	_tim -> CR1 = 0U;
 8007bc2:	2500      	movs	r5, #0
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8007bc4:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8007bc8:	7a56      	ldrb	r6, [r2, #9]
	_tim -> CR1 = 0U;
 8007bca:	601d      	str	r5, [r3, #0]
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8007bcc:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 8007bd0:	681e      	ldr	r6, [r3, #0]
 8007bd2:	4334      	orrs	r4, r6
 8007bd4:	601c      	str	r4, [r3, #0]

	_tim -> ARR = 0U;
	_tim -> ARR = _conf -> reload - 1;
 8007bd6:	6854      	ldr	r4, [r2, #4]
	_tim -> ARR = 0U;
 8007bd8:	62dd      	str	r5, [r3, #44]	; 0x2c
	_tim -> ARR = _conf -> reload - 1;
 8007bda:	3c01      	subs	r4, #1
 8007bdc:	62dc      	str	r4, [r3, #44]	; 0x2c
	_tim -> PSC = 0U;
	_tim -> PSC = _conf -> prescaler - 1;
 8007bde:	6814      	ldr	r4, [r2, #0]
	_tim -> PSC = 0U;
 8007be0:	629d      	str	r5, [r3, #40]	; 0x28

	_tim -> EGR = TIM_EGR_UG;

	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8007be2:	7ad5      	ldrb	r5, [r2, #11]
	_tim -> EGR = TIM_EGR_UG;
 8007be4:	2201      	movs	r2, #1
	_tim -> PSC = _conf -> prescaler - 1;
 8007be6:	3c01      	subs	r4, #1
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8007be8:	4295      	cmp	r5, r2
	_tim -> PSC = _conf -> prescaler - 1;
 8007bea:	629c      	str	r4, [r3, #40]	; 0x28
	_tim -> EGR = TIM_EGR_UG;
 8007bec:	615a      	str	r2, [r3, #20]
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8007bee:	d001      	beq.n	8007bf4 <_ZN3tim4initEP12tim_config_t+0xc8>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
#endif
	}

	return ret;
}
 8007bf0:	bc70      	pop	{r4, r5, r6}
 8007bf2:	4770      	bx	lr
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8007bf4:	4a4c      	ldr	r2, [pc, #304]	; (8007d28 <_ZN3tim4initEP12tim_config_t+0x1fc>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d040      	beq.n	8007c7c <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 8007bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfe:	d034      	beq.n	8007c6a <_ZN3tim4initEP12tim_config_t+0x13e>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 8007c00:	4a4a      	ldr	r2, [pc, #296]	; (8007d2c <_ZN3tim4initEP12tim_config_t+0x200>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d053      	beq.n	8007cae <_ZN3tim4initEP12tim_config_t+0x182>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8007c06:	4a4a      	ldr	r2, [pc, #296]	; (8007d30 <_ZN3tim4initEP12tim_config_t+0x204>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d059      	beq.n	8007cc0 <_ZN3tim4initEP12tim_config_t+0x194>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8007c0c:	4a49      	ldr	r2, [pc, #292]	; (8007d34 <_ZN3tim4initEP12tim_config_t+0x208>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d05f      	beq.n	8007cd2 <_ZN3tim4initEP12tim_config_t+0x1a6>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8007c12:	4a49      	ldr	r2, [pc, #292]	; (8007d38 <_ZN3tim4initEP12tim_config_t+0x20c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d047      	beq.n	8007ca8 <_ZN3tim4initEP12tim_config_t+0x17c>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8007c18:	4a48      	ldr	r2, [pc, #288]	; (8007d3c <_ZN3tim4initEP12tim_config_t+0x210>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d062      	beq.n	8007ce4 <_ZN3tim4initEP12tim_config_t+0x1b8>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 8007c1e:	4a48      	ldr	r2, [pc, #288]	; (8007d40 <_ZN3tim4initEP12tim_config_t+0x214>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d062      	beq.n	8007cea <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8007c24:	4a47      	ldr	r2, [pc, #284]	; (8007d44 <_ZN3tim4initEP12tim_config_t+0x218>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d068      	beq.n	8007cfc <_ZN3tim4initEP12tim_config_t+0x1d0>
		else if(_tim == TIM10) IRQn = TIM1_UP_TIM10_IRQn;
 8007c2a:	4a47      	ldr	r2, [pc, #284]	; (8007d48 <_ZN3tim4initEP12tim_config_t+0x21c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d025      	beq.n	8007c7c <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 8007c30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d070      	beq.n	8007d1a <_ZN3tim4initEP12tim_config_t+0x1ee>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8007c38:	4a45      	ldr	r2, [pc, #276]	; (8007d50 <_ZN3tim4initEP12tim_config_t+0x224>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d070      	beq.n	8007d20 <_ZN3tim4initEP12tim_config_t+0x1f4>
		else if(_tim == TIM13) IRQn = TIM8_UP_TIM13_IRQn;
 8007c3e:	4a45      	ldr	r2, [pc, #276]	; (8007d54 <_ZN3tim4initEP12tim_config_t+0x228>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d052      	beq.n	8007cea <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
 8007c44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	bf04      	itt	eq
 8007c4c:	232d      	moveq	r3, #45	; 0x2d
 8007c4e:	750b      	strbeq	r3, [r1, #20]
	return ret;
 8007c50:	e7ce      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007c52:	4d42      	ldr	r5, [pc, #264]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007c54:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007c56:	f044 0401 	orr.w	r4, r4, #1
 8007c5a:	646c      	str	r4, [r5, #68]	; 0x44
 8007c5c:	e7ae      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8007c5e:	4d3f      	ldr	r5, [pc, #252]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007c60:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007c62:	f044 0408 	orr.w	r4, r4, #8
 8007c66:	642c      	str	r4, [r5, #64]	; 0x40
 8007c68:	e7a8      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 8007c6a:	231c      	movs	r3, #28
 8007c6c:	750b      	strb	r3, [r1, #20]
 8007c6e:	e7bf      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8007c70:	4d3a      	ldr	r5, [pc, #232]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007c72:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007c74:	f044 0402 	orr.w	r4, r4, #2
 8007c78:	642c      	str	r4, [r5, #64]	; 0x40
 8007c7a:	e79f      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8007c7c:	2319      	movs	r3, #25
}
 8007c7e:	bc70      	pop	{r4, r5, r6}
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8007c80:	750b      	strb	r3, [r1, #20]
}
 8007c82:	4770      	bx	lr
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007c84:	4d35      	ldr	r5, [pc, #212]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007c86:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007c88:	f044 0404 	orr.w	r4, r4, #4
 8007c8c:	642c      	str	r4, [r5, #64]	; 0x40
 8007c8e:	e795      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8007c90:	4d32      	ldr	r5, [pc, #200]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007c92:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007c94:	f044 0410 	orr.w	r4, r4, #16
 8007c98:	642c      	str	r4, [r5, #64]	; 0x40
 8007c9a:	e78f      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 8007c9c:	4d2f      	ldr	r5, [pc, #188]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007c9e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007ca0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8007ca4:	646c      	str	r4, [r5, #68]	; 0x44
 8007ca6:	e789      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8007ca8:	2336      	movs	r3, #54	; 0x36
 8007caa:	750b      	strb	r3, [r1, #20]
 8007cac:	e7a0      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 8007cae:	231d      	movs	r3, #29
 8007cb0:	750b      	strb	r3, [r1, #20]
 8007cb2:	e79d      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8007cb4:	4d29      	ldr	r5, [pc, #164]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007cb6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007cb8:	f044 0420 	orr.w	r4, r4, #32
 8007cbc:	642c      	str	r4, [r5, #64]	; 0x40
 8007cbe:	e77d      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8007cc0:	231e      	movs	r3, #30
 8007cc2:	750b      	strb	r3, [r1, #20]
 8007cc4:	e794      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8007cc6:	4d25      	ldr	r5, [pc, #148]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007cc8:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007cca:	f044 0402 	orr.w	r4, r4, #2
 8007cce:	646c      	str	r4, [r5, #68]	; 0x44
 8007cd0:	e774      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8007cd2:	2332      	movs	r3, #50	; 0x32
 8007cd4:	750b      	strb	r3, [r1, #20]
 8007cd6:	e78b      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8007cd8:	4d20      	ldr	r5, [pc, #128]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007cda:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007cdc:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8007ce0:	646c      	str	r4, [r5, #68]	; 0x44
 8007ce2:	e76b      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8007ce4:	2337      	movs	r3, #55	; 0x37
 8007ce6:	750b      	strb	r3, [r1, #20]
 8007ce8:	e782      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 8007cea:	232c      	movs	r3, #44	; 0x2c
 8007cec:	750b      	strb	r3, [r1, #20]
 8007cee:	e77f      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8007cf0:	4d1a      	ldr	r5, [pc, #104]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007cf2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007cf4:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8007cf8:	646c      	str	r4, [r5, #68]	; 0x44
 8007cfa:	e75f      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8007cfc:	2318      	movs	r3, #24
 8007cfe:	750b      	strb	r3, [r1, #20]
 8007d00:	e776      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8007d02:	4d16      	ldr	r5, [pc, #88]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007d04:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007d06:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8007d0a:	642c      	str	r4, [r5, #64]	; 0x40
 8007d0c:	e756      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8007d0e:	4d13      	ldr	r5, [pc, #76]	; (8007d5c <_ZN3tim4initEP12tim_config_t+0x230>)
 8007d10:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007d12:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8007d16:	642c      	str	r4, [r5, #64]	; 0x40
 8007d18:	e750      	b.n	8007bbc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 8007d1a:	231a      	movs	r3, #26
 8007d1c:	750b      	strb	r3, [r1, #20]
 8007d1e:	e767      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8007d20:	232b      	movs	r3, #43	; 0x2b
 8007d22:	750b      	strb	r3, [r1, #20]
 8007d24:	e764      	b.n	8007bf0 <_ZN3tim4initEP12tim_config_t+0xc4>
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40001000 	.word	0x40001000
 8007d3c:	40001400 	.word	0x40001400
 8007d40:	40010400 	.word	0x40010400
 8007d44:	40014000 	.word	0x40014000
 8007d48:	40014400 	.word	0x40014400
 8007d4c:	40014800 	.word	0x40014800
 8007d50:	40001800 	.word	0x40001800
 8007d54:	40001c00 	.word	0x40001c00
 8007d58:	40002000 	.word	0x40002000
 8007d5c:	40023800 	.word	0x40023800

08007d60 <_ZN3tim5startEv>:
}

stm_ret_t tim::start(void){
	stm_ret_t ret;

	if(_tim -> CR1 & TIM_CR1_CEN){
 8007d60:	684b      	ldr	r3, [r1, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
	stm_ret_t ret;
 8007d64:	2101      	movs	r1, #1
stm_ret_t tim::start(void){
 8007d66:	b510      	push	{r4, lr}
	if(_tim -> CR1 & TIM_CR1_CEN){
 8007d68:	07d2      	lsls	r2, r2, #31
	stm_ret_t ret;
 8007d6a:	7001      	strb	r1, [r0, #0]
 8007d6c:	f04f 0100 	mov.w	r1, #0
stm_ret_t tim::start(void){
 8007d70:	4604      	mov	r4, r0
	stm_ret_t ret;
 8007d72:	6041      	str	r1, [r0, #4]
	if(_tim -> CR1 & TIM_CR1_CEN){
 8007d74:	d405      	bmi.n	8007d82 <_ZN3tim5startEv+0x22>
#if CONFIG_USE_LOG_MONITOR && TIM_LOG
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}
	_tim -> CR1 |= TIM_CR1_CEN;
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	f042 0201 	orr.w	r2, r2, #1
 8007d7c:	601a      	str	r2, [r3, #0]

	return ret;
}
 8007d7e:	4620      	mov	r0, r4
 8007d80:	bd10      	pop	{r4, pc}
		set_return(&ret, STM_BUSY, __LINE__);
 8007d82:	22d3      	movs	r2, #211	; 0xd3
 8007d84:	2104      	movs	r1, #4
 8007d86:	f001 f8f7 	bl	8008f78 <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart.", __FILE__, __FUNCTION__);
 8007d8a:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <_ZN3tim5startEv+0x3c>)
 8007d8c:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <_ZN3tim5startEv+0x40>)
 8007d8e:	4905      	ldr	r1, [pc, #20]	; (8007da4 <_ZN3tim5startEv+0x44>)
 8007d90:	4805      	ldr	r0, [pc, #20]	; (8007da8 <_ZN3tim5startEv+0x48>)
 8007d92:	f000 ff7f 	bl	8008c94 <LOG_WARN>
}
 8007d96:	4620      	mov	r0, r4
 8007d98:	bd10      	pop	{r4, pc}
 8007d9a:	bf00      	nop
 8007d9c:	0800d18c 	.word	0x0800d18c
 8007da0:	0800d114 	.word	0x0800d114
 8007da4:	0800d194 	.word	0x0800d194
 8007da8:	0800d188 	.word	0x0800d188

08007dac <TIM1_CC_IRQHandler>:

void TIM_IRQHandler(tim *timptr){
	tim_event_t event = TIM_EVENT_NOEVENT;
	tim_channel_t channel = TIM_NOCHANNEL;

	timptr -> counter = timptr -> _tim -> CNT;
 8007dac:	4a2f      	ldr	r2, [pc, #188]	; (8007e6c <TIM1_CC_IRQHandler+0xc0>)
 8007dae:	6853      	ldr	r3, [r2, #4]
 8007db0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007db2:	60d1      	str	r1, [r2, #12]

	/* TIMER CAPTURE-COMPARE 1 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8007db4:	6919      	ldr	r1, [r3, #16]
 8007db6:	0788      	lsls	r0, r1, #30
 8007db8:	d502      	bpl.n	8007dc0 <TIM1_CC_IRQHandler+0x14>
 8007dba:	68d9      	ldr	r1, [r3, #12]
 8007dbc:	0789      	lsls	r1, r1, #30
 8007dbe:	d433      	bmi.n	8007e28 <TIM1_CC_IRQHandler+0x7c>
		channel = TIM_CHANNEL1;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 2 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8007dc0:	6919      	ldr	r1, [r3, #16]
 8007dc2:	0748      	lsls	r0, r1, #29
 8007dc4:	d502      	bpl.n	8007dcc <TIM1_CC_IRQHandler+0x20>
 8007dc6:	68d9      	ldr	r1, [r3, #12]
 8007dc8:	0749      	lsls	r1, r1, #29
 8007dca:	d43c      	bmi.n	8007e46 <TIM1_CC_IRQHandler+0x9a>
		channel = TIM_CHANNEL2;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 3 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8007dcc:	6919      	ldr	r1, [r3, #16]
 8007dce:	0708      	lsls	r0, r1, #28
 8007dd0:	d502      	bpl.n	8007dd8 <TIM1_CC_IRQHandler+0x2c>
 8007dd2:	68d9      	ldr	r1, [r3, #12]
 8007dd4:	0709      	lsls	r1, r1, #28
 8007dd6:	d43c      	bmi.n	8007e52 <TIM1_CC_IRQHandler+0xa6>
		channel = TIM_CHANNEL3;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 4 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8007dd8:	6919      	ldr	r1, [r3, #16]
 8007dda:	06c8      	lsls	r0, r1, #27
 8007ddc:	d411      	bmi.n	8007e02 <TIM1_CC_IRQHandler+0x56>
		channel = TIM_CHANNEL4;
		goto EventCB;
	}

	/* TIMER UPDATE INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8007dde:	6919      	ldr	r1, [r3, #16]
 8007de0:	07c8      	lsls	r0, r1, #31
 8007de2:	d502      	bpl.n	8007dea <TIM1_CC_IRQHandler+0x3e>
 8007de4:	68d9      	ldr	r1, [r3, #12]
 8007de6:	07c9      	lsls	r1, r1, #31
 8007de8:	d439      	bmi.n	8007e5e <TIM1_CC_IRQHandler+0xb2>
		event = TIM_EVENT_UPDATE;
		goto EventCB;
	}

	/* TIMER BREAK INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8007dea:	6919      	ldr	r1, [r3, #16]
 8007dec:	0608      	lsls	r0, r1, #24
 8007dee:	d511      	bpl.n	8007e14 <TIM1_CC_IRQHandler+0x68>
 8007df0:	68d9      	ldr	r1, [r3, #12]
 8007df2:	0609      	lsls	r1, r1, #24
 8007df4:	d50e      	bpl.n	8007e14 <TIM1_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8007df6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8007dfa:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8007dfc:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8007dfe:	2101      	movs	r1, #1
		goto EventCB;
 8007e00:	e00d      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8007e02:	68d9      	ldr	r1, [r3, #12]
 8007e04:	06c9      	lsls	r1, r1, #27
 8007e06:	d5ea      	bpl.n	8007dde <TIM1_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8007e08:	f06f 0110 	mvn.w	r1, #16
 8007e0c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8007e0e:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8007e10:	2106      	movs	r1, #6
		goto EventCB;
 8007e12:	e004      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
	}

	/* TIMER TRIGER INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8007e14:	6919      	ldr	r1, [r3, #16]
 8007e16:	0648      	lsls	r0, r1, #25
 8007e18:	d40c      	bmi.n	8007e34 <TIM1_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8007e1a:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8007e1c:	2107      	movs	r1, #7
		event = TIM_EVENT_TRIGER;
		goto EventCB;
	}

	EventCB:
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8007e1e:	6813      	ldr	r3, [r2, #0]
 8007e20:	b10b      	cbz	r3, 8007e26 <TIM1_CC_IRQHandler+0x7a>
 8007e22:	6892      	ldr	r2, [r2, #8]
 8007e24:	4718      	bx	r3
#if defined(TIM1)
tim tim_1(TIM1);
tim_t tim1 = &tim_1;
void TIM1_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_1);
}
 8007e26:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8007e28:	f06f 0102 	mvn.w	r1, #2
 8007e2c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8007e2e:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8007e30:	2103      	movs	r1, #3
		goto EventCB;
 8007e32:	e7f4      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8007e34:	68d9      	ldr	r1, [r3, #12]
 8007e36:	0649      	lsls	r1, r1, #25
 8007e38:	d5ef      	bpl.n	8007e1a <TIM1_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8007e3a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8007e3e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8007e40:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8007e42:	2102      	movs	r1, #2
		goto EventCB;
 8007e44:	e7eb      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8007e46:	f06f 0104 	mvn.w	r1, #4
 8007e4a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8007e4c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8007e4e:	2104      	movs	r1, #4
		goto EventCB;
 8007e50:	e7e5      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8007e52:	f06f 0108 	mvn.w	r1, #8
 8007e56:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8007e58:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8007e5a:	2105      	movs	r1, #5
		goto EventCB;
 8007e5c:	e7df      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8007e5e:	f06f 0101 	mvn.w	r1, #1
 8007e62:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8007e64:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8007e66:	2100      	movs	r1, #0
		goto EventCB;
 8007e68:	e7d9      	b.n	8007e1e <TIM1_CC_IRQHandler+0x72>
 8007e6a:	bf00      	nop
 8007e6c:	2000b684 	.word	0x2000b684

08007e70 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 8007e74:	f8df a154 	ldr.w	sl, [pc, #340]	; 8007fcc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 8007e78:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8007fd0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 8007e7c:	4f4a      	ldr	r7, [pc, #296]	; (8007fa8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 8007e7e:	4a4b      	ldr	r2, [pc, #300]	; (8007fac <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 8007e80:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8007fd4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 8007e84:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f8ca 300c 	str.w	r3, [sl, #12]
 8007e8e:	f8ca 3000 	str.w	r3, [sl]
 8007e92:	f8ca 3008 	str.w	r3, [sl, #8]
 8007e96:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 8007e9a:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8007fd8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 8007e9e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8007fdc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 8007ea2:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8007ea4:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 8007ea8:	f8c9 300c 	str.w	r3, [r9, #12]
 8007eac:	f8c9 3000 	str.w	r3, [r9]
 8007eb0:	f8c9 3008 	str.w	r3, [r9, #8]
 8007eb4:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 8007eb8:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8007fe0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 8007ebc:	f8df c124 	ldr.w	ip, [pc, #292]	; 8007fe4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 8007ec0:	4e3b      	ldr	r6, [pc, #236]	; (8007fb0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 8007ec2:	4d3c      	ldr	r5, [pc, #240]	; (8007fb4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 8007ec4:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 8007ec8:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 8007ecc:	f8c8 3000 	str.w	r3, [r8]
 8007ed0:	f8c8 3008 	str.w	r3, [r8, #8]
 8007ed4:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 8007ed8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007fe8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 8007edc:	4c36      	ldr	r4, [pc, #216]	; (8007fb8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 8007ede:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 8007ee2:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 8007ee6:	f8ce 3000 	str.w	r3, [lr]
 8007eea:	f8ce 3008 	str.w	r3, [lr, #8]
 8007eee:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 8007ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007ef6:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8007fec <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 8007efa:	4830      	ldr	r0, [pc, #192]	; (8007fbc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 8007efc:	f8cc e004 	str.w	lr, [ip, #4]
 8007f00:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 8007f04:	f8cc 3000 	str.w	r3, [ip]
 8007f08:	f8cc 3008 	str.w	r3, [ip, #8]
 8007f0c:	f8cc 300c 	str.w	r3, [ip, #12]
 8007f10:	f8cc 3010 	str.w	r3, [ip, #16]
 8007f14:	6033      	str	r3, [r6, #0]
 8007f16:	60b3      	str	r3, [r6, #8]
 8007f18:	603b      	str	r3, [r7, #0]
 8007f1a:	60bb      	str	r3, [r7, #8]
 8007f1c:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 8007f1e:	f8c7 9004 	str.w	r9, [r7, #4]
 8007f22:	606a      	str	r2, [r5, #4]
 8007f24:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 8007f28:	4925      	ldr	r1, [pc, #148]	; (8007fc0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 8007f2a:	6062      	str	r2, [r4, #4]
 8007f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f30:	6042      	str	r2, [r0, #4]
 8007f32:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8007f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 8007f3a:	60f3      	str	r3, [r6, #12]
 8007f3c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8007ff0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 8007f40:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8007f44:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 8007f46:	604a      	str	r2, [r1, #4]
 8007f48:	4e1e      	ldr	r6, [pc, #120]	; (8007fc4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 8007f4a:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 8007f4c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8007ff4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 8007f50:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 8007f52:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 8007f56:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 8007f5a:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 8007f5c:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 8007f60:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 8007f62:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8007f66:	60cb      	str	r3, [r1, #12]
 8007f68:	602b      	str	r3, [r5, #0]
 8007f6a:	60d3      	str	r3, [r2, #12]
 8007f6c:	60ab      	str	r3, [r5, #8]
 8007f6e:	612b      	str	r3, [r5, #16]
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	60a3      	str	r3, [r4, #8]
 8007f74:	6123      	str	r3, [r4, #16]
 8007f76:	6003      	str	r3, [r0, #0]
 8007f78:	6083      	str	r3, [r0, #8]
 8007f7a:	6103      	str	r3, [r0, #16]
 8007f7c:	600b      	str	r3, [r1, #0]
 8007f7e:	608b      	str	r3, [r1, #8]
 8007f80:	610b      	str	r3, [r1, #16]
 8007f82:	6013      	str	r3, [r2, #0]
 8007f84:	6093      	str	r3, [r2, #8]
 8007f86:	6113      	str	r3, [r2, #16]
 8007f88:	6033      	str	r3, [r6, #0]
 8007f8a:	60b3      	str	r3, [r6, #8]
 8007f8c:	60f3      	str	r3, [r6, #12]
 8007f8e:	6133      	str	r3, [r6, #16]
 8007f90:	f8cb 3000 	str.w	r3, [fp]
 8007f94:	f8cb 3008 	str.w	r3, [fp, #8]
 8007f98:	f8cb 300c 	str.w	r3, [fp, #12]
 8007f9c:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 8007fa0:	f8cb c004 	str.w	ip, [fp, #4]
}
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa8:	2000b714 	.word	0x2000b714
 8007fac:	40010000 	.word	0x40010000
 8007fb0:	2000b78c 	.word	0x2000b78c
 8007fb4:	2000b7a4 	.word	0x2000b7a4
 8007fb8:	2000b7bc 	.word	0x2000b7bc
 8007fbc:	2000b69c 	.word	0x2000b69c
 8007fc0:	2000b6b4 	.word	0x2000b6b4
 8007fc4:	2000b6e4 	.word	0x2000b6e4
 8007fc8:	2000b6cc 	.word	0x2000b6cc
 8007fcc:	2000b684 	.word	0x2000b684
 8007fd0:	2000b72c 	.word	0x2000b72c
 8007fd4:	2000b744 	.word	0x2000b744
 8007fd8:	40000400 	.word	0x40000400
 8007fdc:	2000b75c 	.word	0x2000b75c
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	2000b774 	.word	0x2000b774
 8007fe8:	40000c00 	.word	0x40000c00
 8007fec:	40001000 	.word	0x40001000
 8007ff0:	2000b6fc 	.word	0x2000b6fc
 8007ff4:	40002000 	.word	0x40002000

08007ff8 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 8007ff8:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8007ffa:	4c3c      	ldr	r4, [pc, #240]	; (80080ec <USART1_IRQHandler+0xf4>)
 8007ffc:	6823      	ldr	r3, [r4, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008002:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 8008004:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008006:	d51a      	bpl.n	800803e <USART1_IRQHandler+0x46>
 8008008:	068d      	lsls	r5, r1, #26
 800800a:	d518      	bpl.n	800803e <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008010:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008012:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008014:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008016:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008018:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800801c:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800801e:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008020:	d93a      	bls.n	8008098 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008022:	6962      	ldr	r2, [r4, #20]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008028:	7f63      	ldrb	r3, [r4, #29]
 800802a:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800802c:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800802e:	d04c      	beq.n	80080ca <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008030:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008032:	3301      	adds	r3, #1
 8008034:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008036:	6923      	ldr	r3, [r4, #16]
 8008038:	b95b      	cbnz	r3, 8008052 <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 800803a:	b005      	add	sp, #20
 800803c:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800803e:	0650      	lsls	r0, r2, #25
 8008040:	d501      	bpl.n	8008046 <USART1_IRQHandler+0x4e>
 8008042:	064d      	lsls	r5, r1, #25
 8008044:	d41d      	bmi.n	8008082 <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008046:	06d0      	lsls	r0, r2, #27
 8008048:	d408      	bmi.n	800805c <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800804a:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800804c:	6923      	ldr	r3, [r4, #16]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f3      	beq.n	800803a <USART1_IRQHandler+0x42>
 8008052:	68e1      	ldr	r1, [r4, #12]
}
 8008054:	b005      	add	sp, #20
 8008056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800805a:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800805c:	06ca      	lsls	r2, r1, #27
 800805e:	d5f4      	bpl.n	800804a <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008064:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008066:	6859      	ldr	r1, [r3, #4]
 8008068:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800806a:	2a02      	cmp	r2, #2
		(void)tmp;
 800806c:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800806e:	d1ec      	bne.n	800804a <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008076:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008078:	695b      	ldr	r3, [r3, #20]
 800807a:	065b      	lsls	r3, r3, #25
 800807c:	d40e      	bmi.n	800809c <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800807e:	2004      	movs	r0, #4
 8008080:	e7e4      	b.n	800804c <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800808a:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008092:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008094:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008096:	e7d9      	b.n	800804c <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008098:	2003      	movs	r0, #3
 800809a:	e7d7      	b.n	800804c <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800809c:	68a0      	ldr	r0, [r4, #8]
 800809e:	8b25      	ldrh	r5, [r4, #24]
 80080a0:	f7fd fd64 	bl	8005b6c <_ZN3dma11get_counterEv>
 80080a4:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80080a6:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80080a8:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80080aa:	f7fd fd65 	bl	8005b78 <_ZN3dma10get_configEv>
 80080ae:	7983      	ldrb	r3, [r0, #6]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d0e4      	beq.n	800807e <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 80080b4:	a802      	add	r0, sp, #8
 80080b6:	68a1      	ldr	r1, [r4, #8]
 80080b8:	f7fd fcfa 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80080bc:	6822      	ldr	r2, [r4, #0]
 80080be:	6953      	ldr	r3, [r2, #20]
 80080c0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 80080c4:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80080c6:	6153      	str	r3, [r2, #20]
 80080c8:	e7c0      	b.n	800804c <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80080ca:	6961      	ldr	r1, [r4, #20]
 80080cc:	7f22      	ldrb	r2, [r4, #28]
 80080ce:	5cc9      	ldrb	r1, [r1, r3]
 80080d0:	4291      	cmp	r1, r2
 80080d2:	d1ad      	bne.n	8008030 <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80080d4:	6822      	ldr	r2, [r4, #0]
 80080d6:	68d1      	ldr	r1, [r2, #12]
 80080d8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80080dc:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80080de:	6951      	ldr	r1, [r2, #20]
 80080e0:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80080e4:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80080e6:	6151      	str	r1, [r2, #20]
 80080e8:	e7a3      	b.n	8008032 <USART1_IRQHandler+0x3a>
 80080ea:	bf00      	nop
 80080ec:	2000b874 	.word	0x2000b874

080080f0 <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 80080f0:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80080f2:	4c3c      	ldr	r4, [pc, #240]	; (80081e4 <USART2_IRQHandler+0xf4>)
 80080f4:	6823      	ldr	r3, [r4, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80080fa:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 80080fc:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80080fe:	d51a      	bpl.n	8008136 <USART2_IRQHandler+0x46>
 8008100:	068d      	lsls	r5, r1, #26
 8008102:	d518      	bpl.n	8008136 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008108:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800810a:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800810c:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800810e:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008110:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008114:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008116:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008118:	d93a      	bls.n	8008190 <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800811a:	6962      	ldr	r2, [r4, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008120:	7f63      	ldrb	r3, [r4, #29]
 8008122:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008124:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008126:	d04c      	beq.n	80081c2 <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008128:	2002      	movs	r0, #2
		usart -> rxcount++;
 800812a:	3301      	adds	r3, #1
 800812c:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800812e:	6923      	ldr	r3, [r4, #16]
 8008130:	b95b      	cbnz	r3, 800814a <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 8008132:	b005      	add	sp, #20
 8008134:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008136:	0650      	lsls	r0, r2, #25
 8008138:	d501      	bpl.n	800813e <USART2_IRQHandler+0x4e>
 800813a:	064d      	lsls	r5, r1, #25
 800813c:	d41d      	bmi.n	800817a <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800813e:	06d0      	lsls	r0, r2, #27
 8008140:	d408      	bmi.n	8008154 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008142:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0f3      	beq.n	8008132 <USART2_IRQHandler+0x42>
 800814a:	68e1      	ldr	r1, [r4, #12]
}
 800814c:	b005      	add	sp, #20
 800814e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008152:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008154:	06ca      	lsls	r2, r1, #27
 8008156:	d5f4      	bpl.n	8008142 <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800815c:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800815e:	6859      	ldr	r1, [r3, #4]
 8008160:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008162:	2a02      	cmp	r2, #2
		(void)tmp;
 8008164:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008166:	d1ec      	bne.n	8008142 <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800816e:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	065b      	lsls	r3, r3, #25
 8008174:	d40e      	bmi.n	8008194 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008176:	2004      	movs	r0, #4
 8008178:	e7e4      	b.n	8008144 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008182:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800818a:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800818c:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800818e:	e7d9      	b.n	8008144 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008190:	2003      	movs	r0, #3
 8008192:	e7d7      	b.n	8008144 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008194:	68a0      	ldr	r0, [r4, #8]
 8008196:	8b25      	ldrh	r5, [r4, #24]
 8008198:	f7fd fce8 	bl	8005b6c <_ZN3dma11get_counterEv>
 800819c:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800819e:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80081a0:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80081a2:	f7fd fce9 	bl	8005b78 <_ZN3dma10get_configEv>
 80081a6:	7983      	ldrb	r3, [r0, #6]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d0e4      	beq.n	8008176 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 80081ac:	a802      	add	r0, sp, #8
 80081ae:	68a1      	ldr	r1, [r4, #8]
 80081b0:	f7fd fc7e 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80081b4:	6822      	ldr	r2, [r4, #0]
 80081b6:	6953      	ldr	r3, [r2, #20]
 80081b8:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 80081bc:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80081be:	6153      	str	r3, [r2, #20]
 80081c0:	e7c0      	b.n	8008144 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80081c2:	6961      	ldr	r1, [r4, #20]
 80081c4:	7f22      	ldrb	r2, [r4, #28]
 80081c6:	5cc9      	ldrb	r1, [r1, r3]
 80081c8:	4291      	cmp	r1, r2
 80081ca:	d1ad      	bne.n	8008128 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	68d1      	ldr	r1, [r2, #12]
 80081d0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80081d4:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80081d6:	6951      	ldr	r1, [r2, #20]
 80081d8:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80081dc:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80081de:	6151      	str	r1, [r2, #20]
 80081e0:	e7a3      	b.n	800812a <USART2_IRQHandler+0x3a>
 80081e2:	bf00      	nop
 80081e4:	2000b89c 	.word	0x2000b89c

080081e8 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 80081e8:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80081ea:	4c3c      	ldr	r4, [pc, #240]	; (80082dc <USART3_IRQHandler+0xf4>)
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80081f2:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 80081f4:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80081f6:	d51a      	bpl.n	800822e <USART3_IRQHandler+0x46>
 80081f8:	068d      	lsls	r5, r1, #26
 80081fa:	d518      	bpl.n	800822e <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008200:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008202:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008204:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008206:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008208:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800820c:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800820e:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008210:	d93a      	bls.n	8008288 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008212:	6962      	ldr	r2, [r4, #20]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008218:	7f63      	ldrb	r3, [r4, #29]
 800821a:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800821c:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800821e:	d04c      	beq.n	80082ba <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008220:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008222:	3301      	adds	r3, #1
 8008224:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008226:	6923      	ldr	r3, [r4, #16]
 8008228:	b95b      	cbnz	r3, 8008242 <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 800822a:	b005      	add	sp, #20
 800822c:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800822e:	0650      	lsls	r0, r2, #25
 8008230:	d501      	bpl.n	8008236 <USART3_IRQHandler+0x4e>
 8008232:	064d      	lsls	r5, r1, #25
 8008234:	d41d      	bmi.n	8008272 <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008236:	06d0      	lsls	r0, r2, #27
 8008238:	d408      	bmi.n	800824c <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800823a:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800823c:	6923      	ldr	r3, [r4, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d0f3      	beq.n	800822a <USART3_IRQHandler+0x42>
 8008242:	68e1      	ldr	r1, [r4, #12]
}
 8008244:	b005      	add	sp, #20
 8008246:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800824a:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800824c:	06ca      	lsls	r2, r1, #27
 800824e:	d5f4      	bpl.n	800823a <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008254:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008256:	6859      	ldr	r1, [r3, #4]
 8008258:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800825a:	2a02      	cmp	r2, #2
		(void)tmp;
 800825c:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800825e:	d1ec      	bne.n	800823a <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008266:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	065b      	lsls	r3, r3, #25
 800826c:	d40e      	bmi.n	800828c <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800826e:	2004      	movs	r0, #4
 8008270:	e7e4      	b.n	800823c <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800827a:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008282:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008284:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008286:	e7d9      	b.n	800823c <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008288:	2003      	movs	r0, #3
 800828a:	e7d7      	b.n	800823c <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800828c:	68a0      	ldr	r0, [r4, #8]
 800828e:	8b25      	ldrh	r5, [r4, #24]
 8008290:	f7fd fc6c 	bl	8005b6c <_ZN3dma11get_counterEv>
 8008294:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008296:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008298:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800829a:	f7fd fc6d 	bl	8005b78 <_ZN3dma10get_configEv>
 800829e:	7983      	ldrb	r3, [r0, #6]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d0e4      	beq.n	800826e <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 80082a4:	a802      	add	r0, sp, #8
 80082a6:	68a1      	ldr	r1, [r4, #8]
 80082a8:	f7fd fc02 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	6953      	ldr	r3, [r2, #20]
 80082b0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 80082b4:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80082b6:	6153      	str	r3, [r2, #20]
 80082b8:	e7c0      	b.n	800823c <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80082ba:	6961      	ldr	r1, [r4, #20]
 80082bc:	7f22      	ldrb	r2, [r4, #28]
 80082be:	5cc9      	ldrb	r1, [r1, r3]
 80082c0:	4291      	cmp	r1, r2
 80082c2:	d1ad      	bne.n	8008220 <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	68d1      	ldr	r1, [r2, #12]
 80082c8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80082cc:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80082ce:	6951      	ldr	r1, [r2, #20]
 80082d0:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80082d4:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80082d6:	6151      	str	r1, [r2, #20]
 80082d8:	e7a3      	b.n	8008222 <USART3_IRQHandler+0x3a>
 80082da:	bf00      	nop
 80082dc:	2000b8c4 	.word	0x2000b8c4

080082e0 <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 80082e0:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80082e2:	4c3c      	ldr	r4, [pc, #240]	; (80083d4 <UART4_IRQHandler+0xf4>)
 80082e4:	6823      	ldr	r3, [r4, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80082ea:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 80082ec:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80082ee:	d51a      	bpl.n	8008326 <UART4_IRQHandler+0x46>
 80082f0:	068d      	lsls	r5, r1, #26
 80082f2:	d518      	bpl.n	8008326 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80082f8:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80082fa:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80082fc:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80082fe:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008300:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008304:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008306:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008308:	d93a      	bls.n	8008380 <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800830a:	6962      	ldr	r2, [r4, #20]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008310:	7f63      	ldrb	r3, [r4, #29]
 8008312:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008314:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008316:	d04c      	beq.n	80083b2 <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008318:	2002      	movs	r0, #2
		usart -> rxcount++;
 800831a:	3301      	adds	r3, #1
 800831c:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	b95b      	cbnz	r3, 800833a <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 8008322:	b005      	add	sp, #20
 8008324:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008326:	0650      	lsls	r0, r2, #25
 8008328:	d501      	bpl.n	800832e <UART4_IRQHandler+0x4e>
 800832a:	064d      	lsls	r5, r1, #25
 800832c:	d41d      	bmi.n	800836a <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800832e:	06d0      	lsls	r0, r2, #27
 8008330:	d408      	bmi.n	8008344 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008332:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008334:	6923      	ldr	r3, [r4, #16]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0f3      	beq.n	8008322 <UART4_IRQHandler+0x42>
 800833a:	68e1      	ldr	r1, [r4, #12]
}
 800833c:	b005      	add	sp, #20
 800833e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008342:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008344:	06ca      	lsls	r2, r1, #27
 8008346:	d5f4      	bpl.n	8008332 <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800834c:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800834e:	6859      	ldr	r1, [r3, #4]
 8008350:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008352:	2a02      	cmp	r2, #2
		(void)tmp;
 8008354:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008356:	d1ec      	bne.n	8008332 <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800835e:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	065b      	lsls	r3, r3, #25
 8008364:	d40e      	bmi.n	8008384 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008366:	2004      	movs	r0, #4
 8008368:	e7e4      	b.n	8008334 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008372:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800837a:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800837c:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800837e:	e7d9      	b.n	8008334 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008380:	2003      	movs	r0, #3
 8008382:	e7d7      	b.n	8008334 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008384:	68a0      	ldr	r0, [r4, #8]
 8008386:	8b25      	ldrh	r5, [r4, #24]
 8008388:	f7fd fbf0 	bl	8005b6c <_ZN3dma11get_counterEv>
 800838c:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800838e:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008390:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008392:	f7fd fbf1 	bl	8005b78 <_ZN3dma10get_configEv>
 8008396:	7983      	ldrb	r3, [r0, #6]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d0e4      	beq.n	8008366 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800839c:	a802      	add	r0, sp, #8
 800839e:	68a1      	ldr	r1, [r4, #8]
 80083a0:	f7fd fb86 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	6953      	ldr	r3, [r2, #20]
 80083a8:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 80083ac:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80083ae:	6153      	str	r3, [r2, #20]
 80083b0:	e7c0      	b.n	8008334 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80083b2:	6961      	ldr	r1, [r4, #20]
 80083b4:	7f22      	ldrb	r2, [r4, #28]
 80083b6:	5cc9      	ldrb	r1, [r1, r3]
 80083b8:	4291      	cmp	r1, r2
 80083ba:	d1ad      	bne.n	8008318 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80083bc:	6822      	ldr	r2, [r4, #0]
 80083be:	68d1      	ldr	r1, [r2, #12]
 80083c0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80083c4:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80083c6:	6951      	ldr	r1, [r2, #20]
 80083c8:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80083cc:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80083ce:	6151      	str	r1, [r2, #20]
 80083d0:	e7a3      	b.n	800831a <UART4_IRQHandler+0x3a>
 80083d2:	bf00      	nop
 80083d4:	2000b7d4 	.word	0x2000b7d4

080083d8 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 80083d8:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80083da:	4c3c      	ldr	r4, [pc, #240]	; (80084cc <UART5_IRQHandler+0xf4>)
 80083dc:	6823      	ldr	r3, [r4, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80083e2:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 80083e4:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80083e6:	d51a      	bpl.n	800841e <UART5_IRQHandler+0x46>
 80083e8:	068d      	lsls	r5, r1, #26
 80083ea:	d518      	bpl.n	800841e <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80083ec:	681a      	ldr	r2, [r3, #0]
 80083ee:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80083f0:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80083f2:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80083f4:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80083f6:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80083f8:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80083fc:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80083fe:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008400:	d93a      	bls.n	8008478 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008402:	6962      	ldr	r2, [r4, #20]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008408:	7f63      	ldrb	r3, [r4, #29]
 800840a:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800840c:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800840e:	d04c      	beq.n	80084aa <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008410:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008412:	3301      	adds	r3, #1
 8008414:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	b95b      	cbnz	r3, 8008432 <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 800841a:	b005      	add	sp, #20
 800841c:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800841e:	0650      	lsls	r0, r2, #25
 8008420:	d501      	bpl.n	8008426 <UART5_IRQHandler+0x4e>
 8008422:	064d      	lsls	r5, r1, #25
 8008424:	d41d      	bmi.n	8008462 <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008426:	06d0      	lsls	r0, r2, #27
 8008428:	d408      	bmi.n	800843c <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800842a:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800842c:	6923      	ldr	r3, [r4, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0f3      	beq.n	800841a <UART5_IRQHandler+0x42>
 8008432:	68e1      	ldr	r1, [r4, #12]
}
 8008434:	b005      	add	sp, #20
 8008436:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800843a:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800843c:	06ca      	lsls	r2, r1, #27
 800843e:	d5f4      	bpl.n	800842a <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008444:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008446:	6859      	ldr	r1, [r3, #4]
 8008448:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800844a:	2a02      	cmp	r2, #2
		(void)tmp;
 800844c:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800844e:	d1ec      	bne.n	800842a <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008456:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	065b      	lsls	r3, r3, #25
 800845c:	d40e      	bmi.n	800847c <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800845e:	2004      	movs	r0, #4
 8008460:	e7e4      	b.n	800842c <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008466:	685a      	ldr	r2, [r3, #4]
 8008468:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800846a:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008472:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008474:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008476:	e7d9      	b.n	800842c <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008478:	2003      	movs	r0, #3
 800847a:	e7d7      	b.n	800842c <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800847c:	68a0      	ldr	r0, [r4, #8]
 800847e:	8b25      	ldrh	r5, [r4, #24]
 8008480:	f7fd fb74 	bl	8005b6c <_ZN3dma11get_counterEv>
 8008484:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008486:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008488:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800848a:	f7fd fb75 	bl	8005b78 <_ZN3dma10get_configEv>
 800848e:	7983      	ldrb	r3, [r0, #6]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d0e4      	beq.n	800845e <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008494:	a802      	add	r0, sp, #8
 8008496:	68a1      	ldr	r1, [r4, #8]
 8008498:	f7fd fb0a 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	6953      	ldr	r3, [r2, #20]
 80084a0:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 80084a4:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80084a6:	6153      	str	r3, [r2, #20]
 80084a8:	e7c0      	b.n	800842c <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80084aa:	6961      	ldr	r1, [r4, #20]
 80084ac:	7f22      	ldrb	r2, [r4, #28]
 80084ae:	5cc9      	ldrb	r1, [r1, r3]
 80084b0:	4291      	cmp	r1, r2
 80084b2:	d1ad      	bne.n	8008410 <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80084b4:	6822      	ldr	r2, [r4, #0]
 80084b6:	68d1      	ldr	r1, [r2, #12]
 80084b8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80084bc:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80084be:	6951      	ldr	r1, [r2, #20]
 80084c0:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80084c4:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80084c6:	6151      	str	r1, [r2, #20]
 80084c8:	e7a3      	b.n	8008412 <UART5_IRQHandler+0x3a>
 80084ca:	bf00      	nop
 80084cc:	2000b7fc 	.word	0x2000b7fc

080084d0 <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 80084d0:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80084d2:	4c3c      	ldr	r4, [pc, #240]	; (80085c4 <USART6_IRQHandler+0xf4>)
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80084da:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 80084dc:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80084de:	d51a      	bpl.n	8008516 <USART6_IRQHandler+0x46>
 80084e0:	068d      	lsls	r5, r1, #26
 80084e2:	d518      	bpl.n	8008516 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80084e8:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80084ea:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80084ec:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80084ee:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80084f0:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80084f4:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80084f6:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80084f8:	d93a      	bls.n	8008570 <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80084fa:	6962      	ldr	r2, [r4, #20]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008500:	7f63      	ldrb	r3, [r4, #29]
 8008502:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008504:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008506:	d04c      	beq.n	80085a2 <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008508:	2002      	movs	r0, #2
		usart -> rxcount++;
 800850a:	3301      	adds	r3, #1
 800850c:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	b95b      	cbnz	r3, 800852a <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 8008512:	b005      	add	sp, #20
 8008514:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008516:	0650      	lsls	r0, r2, #25
 8008518:	d501      	bpl.n	800851e <USART6_IRQHandler+0x4e>
 800851a:	064d      	lsls	r5, r1, #25
 800851c:	d41d      	bmi.n	800855a <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800851e:	06d0      	lsls	r0, r2, #27
 8008520:	d408      	bmi.n	8008534 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008522:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008524:	6923      	ldr	r3, [r4, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0f3      	beq.n	8008512 <USART6_IRQHandler+0x42>
 800852a:	68e1      	ldr	r1, [r4, #12]
}
 800852c:	b005      	add	sp, #20
 800852e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008532:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008534:	06ca      	lsls	r2, r1, #27
 8008536:	d5f4      	bpl.n	8008522 <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800853c:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800853e:	6859      	ldr	r1, [r3, #4]
 8008540:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008542:	2a02      	cmp	r2, #2
		(void)tmp;
 8008544:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008546:	d1ec      	bne.n	8008522 <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800854e:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	065b      	lsls	r3, r3, #25
 8008554:	d40e      	bmi.n	8008574 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008556:	2004      	movs	r0, #4
 8008558:	e7e4      	b.n	8008524 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008562:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800856a:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800856c:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800856e:	e7d9      	b.n	8008524 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008570:	2003      	movs	r0, #3
 8008572:	e7d7      	b.n	8008524 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008574:	68a0      	ldr	r0, [r4, #8]
 8008576:	8b25      	ldrh	r5, [r4, #24]
 8008578:	f7fd faf8 	bl	8005b6c <_ZN3dma11get_counterEv>
 800857c:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800857e:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008580:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008582:	f7fd faf9 	bl	8005b78 <_ZN3dma10get_configEv>
 8008586:	7983      	ldrb	r3, [r0, #6]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d0e4      	beq.n	8008556 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800858c:	a802      	add	r0, sp, #8
 800858e:	68a1      	ldr	r1, [r4, #8]
 8008590:	f7fd fa8e 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008594:	6822      	ldr	r2, [r4, #0]
 8008596:	6953      	ldr	r3, [r2, #20]
 8008598:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800859c:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800859e:	6153      	str	r3, [r2, #20]
 80085a0:	e7c0      	b.n	8008524 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80085a2:	6961      	ldr	r1, [r4, #20]
 80085a4:	7f22      	ldrb	r2, [r4, #28]
 80085a6:	5cc9      	ldrb	r1, [r1, r3]
 80085a8:	4291      	cmp	r1, r2
 80085aa:	d1ad      	bne.n	8008508 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80085ac:	6822      	ldr	r2, [r4, #0]
 80085ae:	68d1      	ldr	r1, [r2, #12]
 80085b0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80085b4:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80085b6:	6951      	ldr	r1, [r2, #20]
 80085b8:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80085bc:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80085be:	6151      	str	r1, [r2, #20]
 80085c0:	e7a3      	b.n	800850a <USART6_IRQHandler+0x3a>
 80085c2:	bf00      	nop
 80085c4:	2000b8ec 	.word	0x2000b8ec

080085c8 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 80085c8:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80085ca:	4c3c      	ldr	r4, [pc, #240]	; (80086bc <UART7_IRQHandler+0xf4>)
 80085cc:	6823      	ldr	r3, [r4, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80085d2:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 80085d4:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80085d6:	d51a      	bpl.n	800860e <UART7_IRQHandler+0x46>
 80085d8:	068d      	lsls	r5, r1, #26
 80085da:	d518      	bpl.n	800860e <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80085e0:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80085e2:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80085e4:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80085e6:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80085e8:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80085ec:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80085ee:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80085f0:	d93a      	bls.n	8008668 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80085f2:	6962      	ldr	r2, [r4, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80085f8:	7f63      	ldrb	r3, [r4, #29]
 80085fa:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80085fc:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80085fe:	d04c      	beq.n	800869a <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008600:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008602:	3301      	adds	r3, #1
 8008604:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008606:	6923      	ldr	r3, [r4, #16]
 8008608:	b95b      	cbnz	r3, 8008622 <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 800860a:	b005      	add	sp, #20
 800860c:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800860e:	0650      	lsls	r0, r2, #25
 8008610:	d501      	bpl.n	8008616 <UART7_IRQHandler+0x4e>
 8008612:	064d      	lsls	r5, r1, #25
 8008614:	d41d      	bmi.n	8008652 <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008616:	06d0      	lsls	r0, r2, #27
 8008618:	d408      	bmi.n	800862c <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800861a:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d0f3      	beq.n	800860a <UART7_IRQHandler+0x42>
 8008622:	68e1      	ldr	r1, [r4, #12]
}
 8008624:	b005      	add	sp, #20
 8008626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800862a:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800862c:	06ca      	lsls	r2, r1, #27
 800862e:	d5f4      	bpl.n	800861a <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008634:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008636:	6859      	ldr	r1, [r3, #4]
 8008638:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800863a:	2a02      	cmp	r2, #2
		(void)tmp;
 800863c:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800863e:	d1ec      	bne.n	800861a <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008646:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	065b      	lsls	r3, r3, #25
 800864c:	d40e      	bmi.n	800866c <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800864e:	2004      	movs	r0, #4
 8008650:	e7e4      	b.n	800861c <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800865a:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008662:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008664:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008666:	e7d9      	b.n	800861c <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008668:	2003      	movs	r0, #3
 800866a:	e7d7      	b.n	800861c <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800866c:	68a0      	ldr	r0, [r4, #8]
 800866e:	8b25      	ldrh	r5, [r4, #24]
 8008670:	f7fd fa7c 	bl	8005b6c <_ZN3dma11get_counterEv>
 8008674:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008676:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008678:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800867a:	f7fd fa7d 	bl	8005b78 <_ZN3dma10get_configEv>
 800867e:	7983      	ldrb	r3, [r0, #6]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d0e4      	beq.n	800864e <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008684:	a802      	add	r0, sp, #8
 8008686:	68a1      	ldr	r1, [r4, #8]
 8008688:	f7fd fa12 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800868c:	6822      	ldr	r2, [r4, #0]
 800868e:	6953      	ldr	r3, [r2, #20]
 8008690:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008694:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008696:	6153      	str	r3, [r2, #20]
 8008698:	e7c0      	b.n	800861c <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800869a:	6961      	ldr	r1, [r4, #20]
 800869c:	7f22      	ldrb	r2, [r4, #28]
 800869e:	5cc9      	ldrb	r1, [r1, r3]
 80086a0:	4291      	cmp	r1, r2
 80086a2:	d1ad      	bne.n	8008600 <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	68d1      	ldr	r1, [r2, #12]
 80086a8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80086ac:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80086ae:	6951      	ldr	r1, [r2, #20]
 80086b0:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80086b4:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80086b6:	6151      	str	r1, [r2, #20]
 80086b8:	e7a3      	b.n	8008602 <UART7_IRQHandler+0x3a>
 80086ba:	bf00      	nop
 80086bc:	2000b824 	.word	0x2000b824

080086c0 <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 80086c0:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 80086c2:	4c3c      	ldr	r4, [pc, #240]	; (80087b4 <UART8_IRQHandler+0xf4>)
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80086ca:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 80086cc:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80086ce:	d51a      	bpl.n	8008706 <UART8_IRQHandler+0x46>
 80086d0:	068d      	lsls	r5, r1, #26
 80086d2:	d518      	bpl.n	8008706 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80086d8:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80086da:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80086dc:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80086de:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80086e0:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80086e4:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80086e6:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80086e8:	d93a      	bls.n	8008760 <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80086ea:	6962      	ldr	r2, [r4, #20]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80086f0:	7f63      	ldrb	r3, [r4, #29]
 80086f2:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80086f4:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80086f6:	d04c      	beq.n	8008792 <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80086f8:	2002      	movs	r0, #2
		usart -> rxcount++;
 80086fa:	3301      	adds	r3, #1
 80086fc:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80086fe:	6923      	ldr	r3, [r4, #16]
 8008700:	b95b      	cbnz	r3, 800871a <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 8008702:	b005      	add	sp, #20
 8008704:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008706:	0650      	lsls	r0, r2, #25
 8008708:	d501      	bpl.n	800870e <UART8_IRQHandler+0x4e>
 800870a:	064d      	lsls	r5, r1, #25
 800870c:	d41d      	bmi.n	800874a <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800870e:	06d0      	lsls	r0, r2, #27
 8008710:	d408      	bmi.n	8008724 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008712:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f3      	beq.n	8008702 <UART8_IRQHandler+0x42>
 800871a:	68e1      	ldr	r1, [r4, #12]
}
 800871c:	b005      	add	sp, #20
 800871e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008722:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008724:	06ca      	lsls	r2, r1, #27
 8008726:	d5f4      	bpl.n	8008712 <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800872c:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800872e:	6859      	ldr	r1, [r3, #4]
 8008730:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008732:	2a02      	cmp	r2, #2
		(void)tmp;
 8008734:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008736:	d1ec      	bne.n	8008712 <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800873e:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	065b      	lsls	r3, r3, #25
 8008744:	d40e      	bmi.n	8008764 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008746:	2004      	movs	r0, #4
 8008748:	e7e4      	b.n	8008714 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008752:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800875a:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800875c:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800875e:	e7d9      	b.n	8008714 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008760:	2003      	movs	r0, #3
 8008762:	e7d7      	b.n	8008714 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008764:	68a0      	ldr	r0, [r4, #8]
 8008766:	8b25      	ldrh	r5, [r4, #24]
 8008768:	f7fd fa00 	bl	8005b6c <_ZN3dma11get_counterEv>
 800876c:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800876e:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008770:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008772:	f7fd fa01 	bl	8005b78 <_ZN3dma10get_configEv>
 8008776:	7983      	ldrb	r3, [r0, #6]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d0e4      	beq.n	8008746 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800877c:	a802      	add	r0, sp, #8
 800877e:	68a1      	ldr	r1, [r4, #8]
 8008780:	f7fd f996 	bl	8005ab0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008784:	6822      	ldr	r2, [r4, #0]
 8008786:	6953      	ldr	r3, [r2, #20]
 8008788:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800878c:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800878e:	6153      	str	r3, [r2, #20]
 8008790:	e7c0      	b.n	8008714 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008792:	6961      	ldr	r1, [r4, #20]
 8008794:	7f22      	ldrb	r2, [r4, #28]
 8008796:	5cc9      	ldrb	r1, [r1, r3]
 8008798:	4291      	cmp	r1, r2
 800879a:	d1ad      	bne.n	80086f8 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800879c:	6822      	ldr	r2, [r4, #0]
 800879e:	68d1      	ldr	r1, [r2, #12]
 80087a0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80087a4:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80087a6:	6951      	ldr	r1, [r2, #20]
 80087a8:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 80087ac:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 80087ae:	6151      	str	r1, [r2, #20]
 80087b0:	e7a3      	b.n	80086fa <UART8_IRQHandler+0x3a>
 80087b2:	bf00      	nop
 80087b4:	2000b84c 	.word	0x2000b84c

080087b8 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 80087b8:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80088a0 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 80087bc:	482d      	ldr	r0, [pc, #180]	; (8008874 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 80087be:	492e      	ldr	r1, [pc, #184]	; (8008878 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 80087c0:	4a2e      	ldr	r2, [pc, #184]	; (800887c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 80087c6:	4f2e      	ldr	r7, [pc, #184]	; (8008880 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 80087c8:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80088a4 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 80087cc:	4e2d      	ldr	r6, [pc, #180]	; (8008884 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 80087ce:	f8cc 3014 	str.w	r3, [ip, #20]
 80087d2:	e9cc 3301 	strd	r3, r3, [ip, #4]
 80087d6:	e9cc 3303 	strd	r3, r3, [ip, #12]
 80087da:	f8ac 301c 	strh.w	r3, [ip, #28]
 80087de:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 80087e2:	f8cc e000 	str.w	lr, [ip]
 80087e6:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80088a8 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 80087ea:	4c27      	ldr	r4, [pc, #156]	; (8008888 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 80087ec:	4d27      	ldr	r5, [pc, #156]	; (800888c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e9c7 3301 	strd	r3, r3, [r7, #4]
 80087f4:	e9c7 3303 	strd	r3, r3, [r7, #12]
 80087f8:	83bb      	strh	r3, [r7, #28]
 80087fa:	623b      	str	r3, [r7, #32]
	_usart = usart;
 80087fc:	f8c7 c000 	str.w	ip, [r7]
 8008800:	4f23      	ldr	r7, [pc, #140]	; (8008890 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 8008802:	6173      	str	r3, [r6, #20]
 8008804:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8008808:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800880c:	83b3      	strh	r3, [r6, #28]
 800880e:	6233      	str	r3, [r6, #32]
	_usart = usart;
 8008810:	6037      	str	r7, [r6, #0]
 8008812:	4e20      	ldr	r6, [pc, #128]	; (8008894 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 8008814:	616b      	str	r3, [r5, #20]
 8008816:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800881a:	e9c5 3303 	strd	r3, r3, [r5, #12]
 800881e:	83ab      	strh	r3, [r5, #28]
 8008820:	622b      	str	r3, [r5, #32]
	_usart = usart;
 8008822:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 8008824:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8008828:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800882c:	6163      	str	r3, [r4, #20]
 800882e:	83a3      	strh	r3, [r4, #28]
 8008830:	6223      	str	r3, [r4, #32]
 8008832:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8008836:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800883a:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800883e:	e9c1 3303 	strd	r3, r3, [r1, #12]
 8008842:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8008846:	e9c2 3303 	strd	r3, r3, [r2, #12]
 800884a:	6143      	str	r3, [r0, #20]
 800884c:	8383      	strh	r3, [r0, #28]
 800884e:	6203      	str	r3, [r0, #32]
 8008850:	614b      	str	r3, [r1, #20]
 8008852:	838b      	strh	r3, [r1, #28]
 8008854:	620b      	str	r3, [r1, #32]
 8008856:	6153      	str	r3, [r2, #20]
 8008858:	8393      	strh	r3, [r2, #28]
 800885a:	6213      	str	r3, [r2, #32]
	_usart = usart;
 800885c:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8008864:	4c0d      	ldr	r4, [pc, #52]	; (800889c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 8008866:	6003      	str	r3, [r0, #0]
 8008868:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800886c:	600c      	str	r4, [r1, #0]
 800886e:	6013      	str	r3, [r2, #0]
}
 8008870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008872:	bf00      	nop
 8008874:	2000b7fc 	.word	0x2000b7fc
 8008878:	2000b8ec 	.word	0x2000b8ec
 800887c:	2000b824 	.word	0x2000b824
 8008880:	2000b89c 	.word	0x2000b89c
 8008884:	2000b8c4 	.word	0x2000b8c4
 8008888:	2000b84c 	.word	0x2000b84c
 800888c:	2000b7d4 	.word	0x2000b7d4
 8008890:	40004800 	.word	0x40004800
 8008894:	40004c00 	.word	0x40004c00
 8008898:	40007c00 	.word	0x40007c00
 800889c:	40011400 	.word	0x40011400
 80088a0:	2000b874 	.word	0x2000b874
 80088a4:	40011000 	.word	0x40011000
 80088a8:	40004400 	.word	0x40004400

080088ac <__NVIC_SystemReset>:
 80088ac:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80088b0:	4905      	ldr	r1, [pc, #20]	; (80088c8 <__NVIC_SystemReset+0x1c>)
 80088b2:	4b06      	ldr	r3, [pc, #24]	; (80088cc <__NVIC_SystemReset+0x20>)
 80088b4:	68ca      	ldr	r2, [r1, #12]
 80088b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80088ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80088bc:	60cb      	str	r3, [r1, #12]
 80088be:	f3bf 8f4f 	dsb	sy
    __NOP();
 80088c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80088c4:	e7fd      	b.n	80088c2 <__NVIC_SystemReset+0x16>
 80088c6:	bf00      	nop
 80088c8:	e000ed00 	.word	0xe000ed00
 80088cc:	05fa0004 	.word	0x05fa0004

080088d0 <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 80088d0:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 80088d2:	4807      	ldr	r0, [pc, #28]	; (80088f0 <app_main_task+0x20>)
 80088d4:	4907      	ldr	r1, [pc, #28]	; (80088f4 <app_main_task+0x24>)
 80088d6:	f000 f99f 	bl	8008c18 <LOG_INFO>
	extern void app_main(void);
	app_main();
 80088da:	f000 fd91 	bl	8009400 <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 80088de:	4804      	ldr	r0, [pc, #16]	; (80088f0 <app_main_task+0x20>)
 80088e0:	4905      	ldr	r1, [pc, #20]	; (80088f8 <app_main_task+0x28>)
 80088e2:	f000 f999 	bl	8008c18 <LOG_INFO>
	vTaskDelete(NULL);
}
 80088e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 80088ea:	2000      	movs	r0, #0
 80088ec:	f7fa b98a 	b.w	8002c04 <vTaskDelete>
 80088f0:	0800d1d0 	.word	0x0800d1d0
 80088f4:	0800d1bc 	.word	0x0800d1bc
 80088f8:	0800d1d8 	.word	0x0800d1d8

080088fc <uart_log>:
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 80088fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088fe:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008900:	2100      	movs	r1, #0
static void uart_log(char *log){
 8008902:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008904:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008906:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800890a:	4d19      	ldr	r5, [pc, #100]	; (8008970 <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 800890c:	b93c      	cbnz	r4, 800891e <uart_log+0x22>
 800890e:	6828      	ldr	r0, [r5, #0]
 8008910:	210a      	movs	r1, #10
 8008912:	f7f9 fbc7 	bl	80020a4 <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 8008916:	2801      	cmp	r0, #1
 8008918:	d01f      	beq.n	800895a <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 800891a:	b003      	add	sp, #12
 800891c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800891e:	af01      	add	r7, sp, #4
 8008920:	6828      	ldr	r0, [r5, #0]
 8008922:	463a      	mov	r2, r7
 8008924:	f7f9 fd48 	bl	80023b8 <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 8008928:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800892a:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 800892c:	d1f5      	bne.n	800891a <uart_log+0x1e>
		while(*log) {
 800892e:	7833      	ldrb	r3, [r6, #0]
 8008930:	b1c3      	cbz	r3, 8008964 <uart_log+0x68>
			log_uart -> DR = *log++;
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <uart_log+0x78>)
 8008934:	4631      	mov	r1, r6
 8008936:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 8008938:	6813      	ldr	r3, [r2, #0]
 800893a:	065b      	lsls	r3, r3, #25
 800893c:	d5fc      	bpl.n	8008938 <uart_log+0x3c>
		while(*log) {
 800893e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f7      	bne.n	8008936 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8008946:	2c01      	cmp	r4, #1
 8008948:	d00b      	beq.n	8008962 <uart_log+0x66>
 800894a:	2300      	movs	r3, #0
 800894c:	6828      	ldr	r0, [r5, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	4619      	mov	r1, r3
 8008952:	f7f8 ffb1 	bl	80018b8 <xQueueGenericSend>
}
 8008956:	b003      	add	sp, #12
 8008958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 800895a:	7833      	ldrb	r3, [r6, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1e8      	bne.n	8008932 <uart_log+0x36>
 8008960:	e7f3      	b.n	800894a <uart_log+0x4e>
 8008962:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8008964:	6828      	ldr	r0, [r5, #0]
 8008966:	4639      	mov	r1, r7
 8008968:	f7f9 f9c2 	bl	8001cf0 <xQueueGiveFromISR>
}
 800896c:	b003      	add	sp, #12
 800896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008970:	2000b914 	.word	0x2000b914
 8008974:	40011400 	.word	0x40011400

08008978 <main_application>:
int main_application(void){
 8008978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800897a:	b085      	sub	sp, #20
	system_init();
 800897c:	f000 fb26 	bl	8008fcc <system_init>
	rcc_init(&rcc);
 8008980:	4975      	ldr	r1, [pc, #468]	; (8008b58 <main_application+0x1e0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008982:	4e76      	ldr	r6, [pc, #472]	; (8008b5c <main_application+0x1e4>)
	rcc_init(&rcc);
 8008984:	a802      	add	r0, sp, #8
 8008986:	f7fe f81d 	bl	80069c4 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 800898a:	4875      	ldr	r0, [pc, #468]	; (8008b60 <main_application+0x1e8>)
 800898c:	f7fd fe8c 	bl	80066a8 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 8008990:	4874      	ldr	r0, [pc, #464]	; (8008b64 <main_application+0x1ec>)
 8008992:	f7fd fdc1 	bl	8006518 <fmc_sdram_init>
	sdram_init();
 8008996:	f7fd fb9f 	bl	80060d8 <sdram_init>
	rng_init();
 800899a:	f7fe fa11 	bl	8006dc0 <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800899e:	2001      	movs	r0, #1
 80089a0:	f7f9 f908 	bl	8001bb4 <xQueueCreateMutex>
 80089a4:	4b70      	ldr	r3, [pc, #448]	; (8008b68 <main_application+0x1f0>)
 80089a6:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 80089a8:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 80089aa:	4870      	ldr	r0, [pc, #448]	; (8008b6c <main_application+0x1f4>)
	log_semaph = xSemaphoreCreateMutex();
 80089ac:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 80089ae:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 80089b0:	f7fd fe7a 	bl	80066a8 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 80089b4:	486d      	ldr	r0, [pc, #436]	; (8008b6c <main_application+0x1f4>)
 80089b6:	f7fd fe77 	bl	80066a8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 80089ba:	486c      	ldr	r0, [pc, #432]	; (8008b6c <main_application+0x1f4>)
 80089bc:	2208      	movs	r2, #8
 80089be:	210e      	movs	r1, #14
 80089c0:	f7fd ff5a 	bl	8006878 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 80089c4:	2109      	movs	r1, #9
 80089c6:	4869      	ldr	r0, [pc, #420]	; (8008b6c <main_application+0x1f4>)
 80089c8:	2208      	movs	r2, #8
 80089ca:	f7fd ff55 	bl	8006878 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80089ce:	4a68      	ldr	r2, [pc, #416]	; (8008b70 <main_application+0x1f8>)
 80089d0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80089d2:	f043 0320 	orr.w	r3, r3, #32
 80089d6:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 80089d8:	2003      	movs	r0, #3
 80089da:	f7fe f989 	bl	8006cf0 <rcc_get_bus_frequency>
 80089de:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80089e0:	68f3      	ldr	r3, [r6, #12]
 80089e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089e6:	f043 030c 	orr.w	r3, r3, #12
 80089ea:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 80089ec:	9802      	ldr	r0, [sp, #8]
 80089ee:	f7f7 fda9 	bl	8000544 <__aeabi_ui2d>
 80089f2:	a355      	add	r3, pc, #340	; (adr r3, 8008b48 <main_application+0x1d0>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f7f7 fe1e 	bl	8000638 <__aeabi_dmul>
 80089fc:	f7f8 f914 	bl	8000c28 <__aeabi_d2f>
 8008a00:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 8008a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 8008a08:	ee17 3a90 	vmov	r3, s15
 8008a0c:	b29c      	uxth	r4, r3
 8008a0e:	f7f7 fdbb 	bl	8000588 <__aeabi_f2d>
 8008a12:	4b58      	ldr	r3, [pc, #352]	; (8008b74 <main_application+0x1fc>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	f7f7 fe0f 	bl	8000638 <__aeabi_dmul>
 8008a1a:	f7f8 f8e5 	bl	8000be8 <__aeabi_d2uiz>
 8008a1e:	4607      	mov	r7, r0
 8008a20:	4620      	mov	r0, r4
 8008a22:	f7f7 fd9f 	bl	8000564 <__aeabi_i2d>
 8008a26:	4b53      	ldr	r3, [pc, #332]	; (8008b74 <main_application+0x1fc>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f7f7 fe05 	bl	8000638 <__aeabi_dmul>
 8008a2e:	f7f8 f8db 	bl	8000be8 <__aeabi_d2uiz>
 8008a32:	b2bf      	uxth	r7, r7
 8008a34:	b280      	uxth	r0, r0
 8008a36:	1a38      	subs	r0, r7, r0
 8008a38:	f7f7 fd94 	bl	8000564 <__aeabi_i2d>
 8008a3c:	a344      	add	r3, pc, #272	; (adr r3, 8008b50 <main_application+0x1d8>)
 8008a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a42:	f7f7 fdf9 	bl	8000638 <__aeabi_dmul>
 8008a46:	f7f8 f8ef 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8008a4a:	ee07 0a90 	vmov	s15, r0
 8008a4e:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8008a52:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008a56:	f000 fd4d 	bl	80094f4 <ceilf>
	DIV_Fraction = ceil(Fraction);
 8008a5a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 8008a5e:	4846      	ldr	r0, [pc, #280]	; (8008b78 <main_application+0x200>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8008a60:	ee10 3a10 	vmov	r3, s0
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8008a6a:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 8008a6c:	f7ff ff46 	bl	80088fc <uart_log>
	log_init(uart_log);
 8008a70:	4842      	ldr	r0, [pc, #264]	; (8008b7c <main_application+0x204>)
 8008a72:	f000 f8cb 	bl	8008c0c <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 8008a76:	4942      	ldr	r1, [pc, #264]	; (8008b80 <main_application+0x208>)
 8008a78:	4a42      	ldr	r2, [pc, #264]	; (8008b84 <main_application+0x20c>)
 8008a7a:	4843      	ldr	r0, [pc, #268]	; (8008b88 <main_application+0x210>)
 8008a7c:	f000 f8cc 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 8008a80:	f000 fa90 	bl	8008fa4 <get_revid>
 8008a84:	4941      	ldr	r1, [pc, #260]	; (8008b8c <main_application+0x214>)
 8008a86:	4602      	mov	r2, r0
 8008a88:	483f      	ldr	r0, [pc, #252]	; (8008b88 <main_application+0x210>)
 8008a8a:	f000 f8c5 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 8008a8e:	f000 fa8f 	bl	8008fb0 <get_devid>
 8008a92:	493f      	ldr	r1, [pc, #252]	; (8008b90 <main_application+0x218>)
 8008a94:	4602      	mov	r2, r0
 8008a96:	483c      	ldr	r0, [pc, #240]	; (8008b88 <main_application+0x210>)
 8008a98:	f000 f8be 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 8008a9c:	f000 fa90 	bl	8008fc0 <get_flashsize>
 8008aa0:	493c      	ldr	r1, [pc, #240]	; (8008b94 <main_application+0x21c>)
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	4838      	ldr	r0, [pc, #224]	; (8008b88 <main_application+0x210>)
 8008aa6:	f000 f8b7 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 8008aaa:	493b      	ldr	r1, [pc, #236]	; (8008b98 <main_application+0x220>)
 8008aac:	4836      	ldr	r0, [pc, #216]	; (8008b88 <main_application+0x210>)
 8008aae:	2280      	movs	r2, #128	; 0x80
 8008ab0:	f000 f8b2 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 8008ab4:	4939      	ldr	r1, [pc, #228]	; (8008b9c <main_application+0x224>)
 8008ab6:	4a3a      	ldr	r2, [pc, #232]	; (8008ba0 <main_application+0x228>)
 8008ab8:	4833      	ldr	r0, [pc, #204]	; (8008b88 <main_application+0x210>)
 8008aba:	f000 f8ad 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f7fe f916 	bl	8006cf0 <rcc_get_bus_frequency>
 8008ac4:	4937      	ldr	r1, [pc, #220]	; (8008ba4 <main_application+0x22c>)
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	482f      	ldr	r0, [pc, #188]	; (8008b88 <main_application+0x210>)
 8008aca:	f000 f8a5 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 8008ace:	2001      	movs	r0, #1
 8008ad0:	f7fe f90e 	bl	8006cf0 <rcc_get_bus_frequency>
 8008ad4:	4934      	ldr	r1, [pc, #208]	; (8008ba8 <main_application+0x230>)
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	482b      	ldr	r0, [pc, #172]	; (8008b88 <main_application+0x210>)
 8008ada:	f000 f89d 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 8008ade:	2002      	movs	r0, #2
 8008ae0:	f7fe f906 	bl	8006cf0 <rcc_get_bus_frequency>
 8008ae4:	4931      	ldr	r1, [pc, #196]	; (8008bac <main_application+0x234>)
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	4827      	ldr	r0, [pc, #156]	; (8008b88 <main_application+0x210>)
 8008aea:	f000 f895 	bl	8008c18 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 8008aee:	2003      	movs	r0, #3
 8008af0:	f7fe f8fe 	bl	8006cf0 <rcc_get_bus_frequency>
 8008af4:	492e      	ldr	r1, [pc, #184]	; (8008bb0 <main_application+0x238>)
 8008af6:	4602      	mov	r2, r0
 8008af8:	4823      	ldr	r0, [pc, #140]	; (8008b88 <main_application+0x210>)
 8008afa:	f000 f88d 	bl	8008c18 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 8008afe:	2301      	movs	r3, #1
 8008b00:	e9cd 3500 	strd	r3, r5, [sp]
 8008b04:	492b      	ldr	r1, [pc, #172]	; (8008bb4 <main_application+0x23c>)
 8008b06:	482c      	ldr	r0, [pc, #176]	; (8008bb8 <main_application+0x240>)
 8008b08:	462b      	mov	r3, r5
 8008b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b0e:	f7fa f847 	bl	8002ba0 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 8008b12:	2801      	cmp	r0, #1
 8008b14:	d00b      	beq.n	8008b2e <main_application+0x1b6>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 8008b16:	206a      	movs	r0, #106	; 0x6a
 8008b18:	9000      	str	r0, [sp, #0]
 8008b1a:	4b28      	ldr	r3, [pc, #160]	; (8008bbc <main_application+0x244>)
 8008b1c:	4a28      	ldr	r2, [pc, #160]	; (8008bc0 <main_application+0x248>)
 8008b1e:	4929      	ldr	r1, [pc, #164]	; (8008bc4 <main_application+0x24c>)
 8008b20:	4819      	ldr	r0, [pc, #100]	; (8008b88 <main_application+0x210>)
 8008b22:	f000 f8f5 	bl	8008d10 <LOG_ERROR>
		return 0;
 8008b26:	462c      	mov	r4, r5
}
 8008b28:	4620      	mov	r0, r4
 8008b2a:	b005      	add	sp, #20
 8008b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 8008b2e:	4926      	ldr	r1, [pc, #152]	; (8008bc8 <main_application+0x250>)
 8008b30:	4604      	mov	r4, r0
 8008b32:	4815      	ldr	r0, [pc, #84]	; (8008b88 <main_application+0x210>)
 8008b34:	f000 f870 	bl	8008c18 <LOG_INFO>
	vTaskStartScheduler();
 8008b38:	f7fa f940 	bl	8002dbc <vTaskStartScheduler>
}
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	b005      	add	sp, #20
 8008b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b42:	bf00      	nop
 8008b44:	f3af 8000 	nop.w
 8008b48:	789abcdf 	.word	0x789abcdf
 8008b4c:	3ea23456 	.word	0x3ea23456
 8008b50:	47ae147b 	.word	0x47ae147b
 8008b54:	3f847ae1 	.word	0x3f847ae1
 8008b58:	20000044 	.word	0x20000044
 8008b5c:	40011400 	.word	0x40011400
 8008b60:	40021c00 	.word	0x40021c00
 8008b64:	2000006c 	.word	0x2000006c
 8008b68:	2000b914 	.word	0x2000b914
 8008b6c:	40021800 	.word	0x40021800
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40590000 	.word	0x40590000
 8008b78:	0800d1f4 	.word	0x0800d1f4
 8008b7c:	080088fd 	.word	0x080088fd
 8008b80:	0800d260 	.word	0x0800d260
 8008b84:	0800d254 	.word	0x0800d254
 8008b88:	0800d1d0 	.word	0x0800d1d0
 8008b8c:	0800d274 	.word	0x0800d274
 8008b90:	0800d28c 	.word	0x0800d28c
 8008b94:	0800d2a4 	.word	0x0800d2a4
 8008b98:	0800d2bc 	.word	0x0800d2bc
 8008b9c:	0800d2dc 	.word	0x0800d2dc
 8008ba0:	0800d2d4 	.word	0x0800d2d4
 8008ba4:	0800d2f0 	.word	0x0800d2f0
 8008ba8:	0800d308 	.word	0x0800d308
 8008bac:	0800d320 	.word	0x0800d320
 8008bb0:	0800d338 	.word	0x0800d338
 8008bb4:	0800d350 	.word	0x0800d350
 8008bb8:	080088d1 	.word	0x080088d1
 8008bbc:	0800d360 	.word	0x0800d360
 8008bc0:	0800d374 	.word	0x0800d374
 8008bc4:	0800d394 	.word	0x0800d394
 8008bc8:	0800d3cc 	.word	0x0800d3cc

08008bcc <vApplicationIdleHook>:
		sys_calculate_cpu_load_percent();
 8008bcc:	f000 bace 	b.w	800916c <sys_calculate_cpu_load_percent>

08008bd0 <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 8008bd0:	b508      	push	{r3, lr}
 8008bd2:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 8008bd4:	4804      	ldr	r0, [pc, #16]	; (8008be8 <vApplicationStackOverflowHook+0x18>)
 8008bd6:	4905      	ldr	r1, [pc, #20]	; (8008bec <vApplicationStackOverflowHook+0x1c>)
 8008bd8:	f000 f89a 	bl	8008d10 <LOG_ERROR>
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 8008bde:	bf00      	nop
 8008be0:	3b01      	subs	r3, #1
 8008be2:	d1fc      	bne.n	8008bde <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 8008be4:	f7ff fe62 	bl	80088ac <__NVIC_SystemReset>
 8008be8:	0800d1d0 	.word	0x0800d1d0
 8008bec:	0800d3e8 	.word	0x0800d3e8
 8008bf0:	003d0900 	.word	0x003d0900

08008bf4 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 8008bf4:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 8008bf6:	4903      	ldr	r1, [pc, #12]	; (8008c04 <vApplicationMallocFailedHook+0x10>)
 8008bf8:	4803      	ldr	r0, [pc, #12]	; (8008c08 <vApplicationMallocFailedHook+0x14>)
 8008bfa:	f000 f889 	bl	8008d10 <LOG_ERROR>
		__NVIC_SystemReset();
 8008bfe:	f7ff fe55 	bl	80088ac <__NVIC_SystemReset>
 8008c02:	bf00      	nop
 8008c04:	0800d400 	.word	0x0800d400
 8008c08:	0800d1d0 	.word	0x0800d1d0

08008c0c <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 8008c0c:	4b01      	ldr	r3, [pc, #4]	; (8008c14 <log_init+0x8>)
 8008c0e:	6018      	str	r0, [r3, #0]
}
 8008c10:	4770      	bx	lr
 8008c12:	bf00      	nop
 8008c14:	2000b918 	.word	0x2000b918

08008c18 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8008c18:	b40e      	push	{r1, r2, r3}
 8008c1a:	b570      	push	{r4, r5, r6, lr}
 8008c1c:	b08b      	sub	sp, #44	; 0x2c
 8008c1e:	ac0f      	add	r4, sp, #60	; 0x3c
 8008c20:	4606      	mov	r6, r0
 8008c22:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c26:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008c28:	f7fe ff38 	bl	8007a9c <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008c2c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008c2e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008c30:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008c32:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008c34:	4622      	mov	r2, r4
 8008c36:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008c38:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008c3a:	f001 fd3d 	bl	800a6b8 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <LOG_INFO+0x64>)
 8008c40:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <LOG_INFO+0x68>)
 8008c42:	7819      	ldrb	r1, [r3, #0]
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <LOG_INFO+0x6c>)
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	9b07      	ldr	r3, [sp, #28]
 8008c4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008c4e:	9302      	str	r3, [sp, #8]
 8008c50:	490d      	ldr	r1, [pc, #52]	; (8008c88 <LOG_INFO+0x70>)
 8008c52:	4b0e      	ldr	r3, [pc, #56]	; (8008c8c <LOG_INFO+0x74>)
 8008c54:	e9cd 5600 	strd	r5, r6, [sp]
 8008c58:	a809      	add	r0, sp, #36	; 0x24
 8008c5a:	f000 fc95 	bl	8009588 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <LOG_INFO+0x78>)
 8008c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4798      	blx	r3
	free(Temp_buffer);
 8008c66:	9807      	ldr	r0, [sp, #28]
 8008c68:	f000 fcde 	bl	8009628 <free>
	free(Output_buffer);
 8008c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6e:	f000 fcdb 	bl	8009628 <free>
}
 8008c72:	b00b      	add	sp, #44	; 0x2c
 8008c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c78:	b003      	add	sp, #12
 8008c7a:	4770      	bx	lr
 8008c7c:	200000a2 	.word	0x200000a2
 8008c80:	0800d5a8 	.word	0x0800d5a8
 8008c84:	0800d430 	.word	0x0800d430
 8008c88:	0800d43c 	.word	0x0800d43c
 8008c8c:	0800d438 	.word	0x0800d438
 8008c90:	2000b918 	.word	0x2000b918

08008c94 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8008c94:	b40e      	push	{r1, r2, r3}
 8008c96:	b570      	push	{r4, r5, r6, lr}
 8008c98:	b08b      	sub	sp, #44	; 0x2c
 8008c9a:	ac0f      	add	r4, sp, #60	; 0x3c
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ca2:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008ca4:	f7fe fefa 	bl	8007a9c <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008ca8:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008caa:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008cac:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008cae:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008cb0:	4622      	mov	r2, r4
 8008cb2:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008cb4:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008cb6:	f001 fcff 	bl	800a6b8 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <LOG_WARN+0x64>)
 8008cbc:	4a0f      	ldr	r2, [pc, #60]	; (8008cfc <LOG_WARN+0x68>)
 8008cbe:	7819      	ldrb	r1, [r3, #0]
 8008cc0:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <LOG_WARN+0x6c>)
 8008cc2:	9303      	str	r3, [sp, #12]
 8008cc4:	9b07      	ldr	r3, [sp, #28]
 8008cc6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008cca:	9302      	str	r3, [sp, #8]
 8008ccc:	490d      	ldr	r1, [pc, #52]	; (8008d04 <LOG_WARN+0x70>)
 8008cce:	4b0e      	ldr	r3, [pc, #56]	; (8008d08 <LOG_WARN+0x74>)
 8008cd0:	e9cd 5600 	strd	r5, r6, [sp]
 8008cd4:	a809      	add	r0, sp, #36	; 0x24
 8008cd6:	f000 fc57 	bl	8009588 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008cda:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <LOG_WARN+0x78>)
 8008cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4798      	blx	r3
	free(Temp_buffer);
 8008ce2:	9807      	ldr	r0, [sp, #28]
 8008ce4:	f000 fca0 	bl	8009628 <free>
	free(Output_buffer);
 8008ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cea:	f000 fc9d 	bl	8009628 <free>
}
 8008cee:	b00b      	add	sp, #44	; 0x2c
 8008cf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008cf4:	b003      	add	sp, #12
 8008cf6:	4770      	bx	lr
 8008cf8:	200000a5 	.word	0x200000a5
 8008cfc:	0800d5a8 	.word	0x0800d5a8
 8008d00:	0800d430 	.word	0x0800d430
 8008d04:	0800d43c 	.word	0x0800d43c
 8008d08:	0800d454 	.word	0x0800d454
 8008d0c:	2000b918 	.word	0x2000b918

08008d10 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8008d10:	b40e      	push	{r1, r2, r3}
 8008d12:	b570      	push	{r4, r5, r6, lr}
 8008d14:	b08b      	sub	sp, #44	; 0x2c
 8008d16:	ac0f      	add	r4, sp, #60	; 0x3c
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d1e:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008d20:	f7fe febc 	bl	8007a9c <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008d24:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008d26:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008d28:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008d2a:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008d2c:	4622      	mov	r2, r4
 8008d2e:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008d30:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008d32:	f001 fcc1 	bl	800a6b8 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8008d36:	4b0f      	ldr	r3, [pc, #60]	; (8008d74 <LOG_ERROR+0x64>)
 8008d38:	4a0f      	ldr	r2, [pc, #60]	; (8008d78 <LOG_ERROR+0x68>)
 8008d3a:	7819      	ldrb	r1, [r3, #0]
 8008d3c:	4b0f      	ldr	r3, [pc, #60]	; (8008d7c <LOG_ERROR+0x6c>)
 8008d3e:	9303      	str	r3, [sp, #12]
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008d46:	9302      	str	r3, [sp, #8]
 8008d48:	490d      	ldr	r1, [pc, #52]	; (8008d80 <LOG_ERROR+0x70>)
 8008d4a:	4b0e      	ldr	r3, [pc, #56]	; (8008d84 <LOG_ERROR+0x74>)
 8008d4c:	e9cd 5600 	strd	r5, r6, [sp]
 8008d50:	a809      	add	r0, sp, #36	; 0x24
 8008d52:	f000 fc19 	bl	8009588 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008d56:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <LOG_ERROR+0x78>)
 8008d58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4798      	blx	r3
	free(Temp_buffer);
 8008d5e:	9807      	ldr	r0, [sp, #28]
 8008d60:	f000 fc62 	bl	8009628 <free>
	free(Output_buffer);
 8008d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d66:	f000 fc5f 	bl	8009628 <free>
}
 8008d6a:	b00b      	add	sp, #44	; 0x2c
 8008d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d70:	b003      	add	sp, #12
 8008d72:	4770      	bx	lr
 8008d74:	200000a1 	.word	0x200000a1
 8008d78:	0800d5a8 	.word	0x0800d5a8
 8008d7c:	0800d430 	.word	0x0800d430
 8008d80:	0800d43c 	.word	0x0800d43c
 8008d84:	0800cdd0 	.word	0x0800cdd0
 8008d88:	2000b918 	.word	0x2000b918

08008d8c <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 8008d8c:	b40e      	push	{r1, r2, r3}
 8008d8e:	b570      	push	{r4, r5, r6, lr}
 8008d90:	b08b      	sub	sp, #44	; 0x2c
 8008d92:	ac0f      	add	r4, sp, #60	; 0x3c
 8008d94:	4606      	mov	r6, r0
 8008d96:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d9a:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008d9c:	f7fe fe7e 	bl	8007a9c <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008da0:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008da2:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008da4:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008da6:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008da8:	4622      	mov	r2, r4
 8008daa:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008dac:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008dae:	f001 fc83 	bl	800a6b8 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 8008db2:	4b0f      	ldr	r3, [pc, #60]	; (8008df0 <LOG_DEBUG+0x64>)
 8008db4:	4a0f      	ldr	r2, [pc, #60]	; (8008df4 <LOG_DEBUG+0x68>)
 8008db6:	7819      	ldrb	r1, [r3, #0]
 8008db8:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <LOG_DEBUG+0x6c>)
 8008dba:	9303      	str	r3, [sp, #12]
 8008dbc:	9b07      	ldr	r3, [sp, #28]
 8008dbe:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008dc2:	9302      	str	r3, [sp, #8]
 8008dc4:	490d      	ldr	r1, [pc, #52]	; (8008dfc <LOG_DEBUG+0x70>)
 8008dc6:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <LOG_DEBUG+0x74>)
 8008dc8:	e9cd 5600 	strd	r5, r6, [sp]
 8008dcc:	a809      	add	r0, sp, #36	; 0x24
 8008dce:	f000 fbdb 	bl	8009588 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <LOG_DEBUG+0x78>)
 8008dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4798      	blx	r3
	free(Temp_buffer);
 8008dda:	9807      	ldr	r0, [sp, #28]
 8008ddc:	f000 fc24 	bl	8009628 <free>
	free(Output_buffer);
 8008de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008de2:	f000 fc21 	bl	8009628 <free>
}
 8008de6:	b00b      	add	sp, #44	; 0x2c
 8008de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008dec:	b003      	add	sp, #12
 8008dee:	4770      	bx	lr
 8008df0:	200000a0 	.word	0x200000a0
 8008df4:	0800d5a8 	.word	0x0800d5a8
 8008df8:	0800d430 	.word	0x0800d430
 8008dfc:	0800d43c 	.word	0x0800d43c
 8008e00:	0800d458 	.word	0x0800d458
 8008e04:	2000b918 	.word	0x2000b918

08008e08 <LOG_MEM>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_MEM(const char *tag,  const char *format, ...){
 8008e08:	b40e      	push	{r1, r2, r3}
 8008e0a:	b570      	push	{r4, r5, r6, lr}
 8008e0c:	b08b      	sub	sp, #44	; 0x2c
 8008e0e:	ac0f      	add	r4, sp, #60	; 0x3c
 8008e10:	4606      	mov	r6, r0
 8008e12:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e16:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008e18:	f7fe fe40 	bl	8007a9c <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008e1c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008e1e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008e20:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008e22:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008e24:	4622      	mov	r2, r4
 8008e26:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008e28:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008e2a:	f001 fc45 	bl	800a6b8 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logm], log_level_str[4], time, tag, Temp_buffer, COLOR_END);
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <LOG_MEM+0x64>)
 8008e30:	4a0f      	ldr	r2, [pc, #60]	; (8008e70 <LOG_MEM+0x68>)
 8008e32:	7819      	ldrb	r1, [r3, #0]
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <LOG_MEM+0x6c>)
 8008e36:	9303      	str	r3, [sp, #12]
 8008e38:	9b07      	ldr	r3, [sp, #28]
 8008e3a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008e3e:	9302      	str	r3, [sp, #8]
 8008e40:	490d      	ldr	r1, [pc, #52]	; (8008e78 <LOG_MEM+0x70>)
 8008e42:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <LOG_MEM+0x74>)
 8008e44:	e9cd 5600 	strd	r5, r6, [sp]
 8008e48:	a809      	add	r0, sp, #36	; 0x24
 8008e4a:	f000 fb9d 	bl	8009588 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logm], log_level_str[4], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008e4e:	4b0c      	ldr	r3, [pc, #48]	; (8008e80 <LOG_MEM+0x78>)
 8008e50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4798      	blx	r3
	free(Temp_buffer);
 8008e56:	9807      	ldr	r0, [sp, #28]
 8008e58:	f000 fbe6 	bl	8009628 <free>
	free(Output_buffer);
 8008e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5e:	f000 fbe3 	bl	8009628 <free>
}
 8008e62:	b00b      	add	sp, #44	; 0x2c
 8008e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e68:	b003      	add	sp, #12
 8008e6a:	4770      	bx	lr
 8008e6c:	200000a3 	.word	0x200000a3
 8008e70:	0800d5a8 	.word	0x0800d5a8
 8008e74:	0800d430 	.word	0x0800d430
 8008e78:	0800d43c 	.word	0x0800d43c
 8008e7c:	0800d45c 	.word	0x0800d45c
 8008e80:	2000b918 	.word	0x2000b918

08008e84 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 8008e84:	b40e      	push	{r1, r2, r3}
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	b08b      	sub	sp, #44	; 0x2c
 8008e8a:	ac0f      	add	r4, sp, #60	; 0x3c
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e92:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008e94:	f7fe fe02 	bl	8007a9c <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008e98:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008e9a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008e9c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008e9e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008ea0:	4622      	mov	r2, r4
 8008ea2:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008ea4:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008ea6:	f001 fc07 	bl	800a6b8 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 8008eaa:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <LOG_EVENT+0x64>)
 8008eac:	4a0f      	ldr	r2, [pc, #60]	; (8008eec <LOG_EVENT+0x68>)
 8008eae:	7819      	ldrb	r1, [r3, #0]
 8008eb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ef0 <LOG_EVENT+0x6c>)
 8008eb2:	9303      	str	r3, [sp, #12]
 8008eb4:	9b07      	ldr	r3, [sp, #28]
 8008eb6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	490d      	ldr	r1, [pc, #52]	; (8008ef4 <LOG_EVENT+0x70>)
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <LOG_EVENT+0x74>)
 8008ec0:	e9cd 5600 	strd	r5, r6, [sp]
 8008ec4:	a809      	add	r0, sp, #36	; 0x24
 8008ec6:	f000 fb5f 	bl	8009588 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logp], log_level_str[5], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008eca:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <LOG_EVENT+0x78>)
 8008ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4798      	blx	r3
	free(Temp_buffer);
 8008ed2:	9807      	ldr	r0, [sp, #28]
 8008ed4:	f000 fba8 	bl	8009628 <free>
	free(Output_buffer);
 8008ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eda:	f000 fba5 	bl	8009628 <free>
}
 8008ede:	b00b      	add	sp, #44	; 0x2c
 8008ee0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ee4:	b003      	add	sp, #12
 8008ee6:	4770      	bx	lr
 8008ee8:	200000a4 	.word	0x200000a4
 8008eec:	0800d5a8 	.word	0x0800d5a8
 8008ef0:	0800d430 	.word	0x0800d430
 8008ef4:	0800d43c 	.word	0x0800d43c
 8008ef8:	0800d460 	.word	0x0800d460
 8008efc:	2000b918 	.word	0x2000b918

08008f00 <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 8008f04:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8008f74 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008f08:	b083      	sub	sp, #12
 8008f0a:	461f      	mov	r7, r3
	stm_ret_t res;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008f10:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 8008f12:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008f16:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 8008f1a:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	460d      	mov	r5, r1
	stm_ret_t res;
 8008f20:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 8008f22:	4798      	blx	r3
 8008f24:	9001      	str	r0, [sp, #4]
 8008f26:	b14f      	cbz	r7, 8008f3c <wait_flag_in_register_timeout+0x3c>
 8008f28:	f1b8 0f00 	cmp.w	r8, #0
 8008f2c:	d110      	bne.n	8008f50 <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008f2e:	682b      	ldr	r3, [r5, #0]
 8008f30:	421c      	tst	r4, r3
 8008f32:	d0fc      	beq.n	8008f2e <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 8008f34:	4630      	mov	r0, r6
 8008f36:	b003      	add	sp, #12
 8008f38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f3c:	f1b8 0f00 	cmp.w	r8, #0
 8008f40:	d113      	bne.n	8008f6a <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008f42:	682b      	ldr	r3, [r5, #0]
 8008f44:	421c      	tst	r4, r3
 8008f46:	d1fc      	bne.n	8008f42 <wait_flag_in_register_timeout+0x42>
}
 8008f48:	4630      	mov	r0, r6
 8008f4a:	b003      	add	sp, #12
 8008f4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	4223      	tst	r3, r4
 8008f54:	d1ee      	bne.n	8008f34 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 8008f56:	f8d9 3000 	ldr.w	r3, [r9]
 8008f5a:	4798      	blx	r3
 8008f5c:	9b01      	ldr	r3, [sp, #4]
 8008f5e:	1ac0      	subs	r0, r0, r3
 8008f60:	4540      	cmp	r0, r8
 8008f62:	d3e0      	bcc.n	8008f26 <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 8008f64:	2302      	movs	r3, #2
 8008f66:	7033      	strb	r3, [r6, #0]
				return res;
 8008f68:	e7e4      	b.n	8008f34 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	4223      	tst	r3, r4
 8008f6e:	d1f2      	bne.n	8008f56 <wait_flag_in_register_timeout+0x56>
 8008f70:	e7e0      	b.n	8008f34 <wait_flag_in_register_timeout+0x34>
 8008f72:	bf00      	nop
 8008f74:	200000a8 	.word	0x200000a8

08008f78 <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 8008f78:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 8008f7a:	6042      	str	r2, [r0, #4]
}
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop

08008f80 <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 8008f80:	6041      	str	r1, [r0, #4]
}
 8008f82:	4770      	bx	lr

08008f84 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 8008f84:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8008f86:	f1a0 0001 	sub.w	r0, r0, #1
 8008f8a:	fab0 f080 	clz	r0, r0
 8008f8e:	0940      	lsrs	r0, r0, #5
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop

08008f94 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 8008f94:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8008f96:	f1a0 0002 	sub.w	r0, r0, #2
 8008f9a:	fab0 f080 	clz	r0, r0
 8008f9e:	0940      	lsrs	r0, r0, #5
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop

08008fa4 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 8008fa4:	4b01      	ldr	r3, [pc, #4]	; (8008fac <get_revid+0x8>)
 8008fa6:	6818      	ldr	r0, [r3, #0]
}
 8008fa8:	0c00      	lsrs	r0, r0, #16
 8008faa:	4770      	bx	lr
 8008fac:	e0042000 	.word	0xe0042000

08008fb0 <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 8008fb0:	4b02      	ldr	r3, [pc, #8]	; (8008fbc <get_devid+0xc>)
 8008fb2:	6818      	ldr	r0, [r3, #0]
}
 8008fb4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	e0042000 	.word	0xe0042000

08008fc0 <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <get_flashsize+0x8>)
 8008fc2:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 8008fc4:	b280      	uxth	r0, r0
 8008fc6:	4770      	bx	lr
 8008fc8:	1fff7a00 	.word	0x1fff7a00

08008fcc <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8008fcc:	4b14      	ldr	r3, [pc, #80]	; (8009020 <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <system_init+0x58>)
 8008fd0:	6819      	ldr	r1, [r3, #0]
 8008fd2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 8008fd6:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8008fd8:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 8008fda:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fdc:	4c12      	ldr	r4, [pc, #72]	; (8009028 <system_init+0x5c>)
 8008fde:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008fe2:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 8008fe4:	6819      	ldr	r1, [r3, #0]
 8008fe6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008fea:	6019      	str	r1, [r3, #0]
 8008fec:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fee:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8008ff2:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 8008ff6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8008ff8:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 8008ffa:	200f      	movs	r0, #15
 8008ffc:	f7fe fd2c 	bl	8007a58 <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 8009002:	490b      	ldr	r1, [pc, #44]	; (8009030 <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8009004:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009006:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800900a:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800900c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800900e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009012:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 8009014:	680b      	ldr	r3, [r1, #0]
 8009016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800901a:	600b      	str	r3, [r1, #0]
}
 800901c:	bd10      	pop	{r4, pc}
 800901e:	bf00      	nop
 8009020:	40023c00 	.word	0x40023c00
 8009024:	05fa0300 	.word	0x05fa0300
 8009028:	e000ed00 	.word	0xe000ed00
 800902c:	40023800 	.word	0x40023800
 8009030:	40007000 	.word	0x40007000

08009034 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 8009034:	4a03      	ldr	r2, [pc, #12]	; (8009044 <embedded_flash_set_latency+0x10>)
 8009036:	6813      	ldr	r3, [r2, #0]
 8009038:	f023 030f 	bic.w	r3, r3, #15
 800903c:	4318      	orrs	r0, r3
 800903e:	6010      	str	r0, [r2, #0]
}
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	40023c00 	.word	0x40023c00

08009048 <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8009048:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800904a:	490e      	ldr	r1, [pc, #56]	; (8009084 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800904c:	4c0e      	ldr	r4, [pc, #56]	; (8009088 <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800904e:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009050:	09c3      	lsrs	r3, r0, #7
 8009052:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009056:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009058:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800905c:	d00e      	beq.n	800907c <embedded_flash_calculate_latency+0x34>
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <embedded_flash_calculate_latency+0x44>)
 8009060:	429a      	cmp	r2, r3
 8009062:	d00b      	beq.n	800907c <embedded_flash_calculate_latency+0x34>
 8009064:	4b0a      	ldr	r3, [pc, #40]	; (8009090 <embedded_flash_calculate_latency+0x48>)
 8009066:	429a      	cmp	r2, r3
 8009068:	d008      	beq.n	800907c <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 800906a:	4b0a      	ldr	r3, [pc, #40]	; (8009094 <embedded_flash_calculate_latency+0x4c>)
 800906c:	429a      	cmp	r2, r3
 800906e:	d005      	beq.n	800907c <embedded_flash_calculate_latency+0x34>
 8009070:	4b09      	ldr	r3, [pc, #36]	; (8009098 <embedded_flash_calculate_latency+0x50>)
 8009072:	429a      	cmp	r2, r3
 8009074:	d002      	beq.n	800907c <embedded_flash_calculate_latency+0x34>
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <embedded_flash_calculate_latency+0x54>)
 8009078:	429a      	cmp	r2, r3
 800907a:	d100      	bne.n	800907e <embedded_flash_calculate_latency+0x36>
 800907c:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 800907e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009082:	4770      	bx	lr
 8009084:	01c9c380 	.word	0x01c9c380
 8009088:	011e54c7 	.word	0x011e54c7
 800908c:	03938700 	.word	0x03938700
 8009090:	055d4a80 	.word	0x055d4a80
 8009094:	07270e00 	.word	0x07270e00
 8009098:	08f0d180 	.word	0x08f0d180
 800909c:	0aba9500 	.word	0x0aba9500

080090a0 <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 80090a0:	4b02      	ldr	r3, [pc, #8]	; (80090ac <embedded_flash_get_latency+0xc>)
 80090a2:	6818      	ldr	r0, [r3, #0]
}
 80090a4:	f000 000f 	and.w	r0, r0, #15
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	40023c00 	.word	0x40023c00

080090b0 <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090b0:	4b1f      	ldr	r3, [pc, #124]	; (8009130 <NVIC_Set_Priority+0x80>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80090b8:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 80090ba:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090bc:	f1c3 0e07 	rsb	lr, r3, #7
 80090c0:	bf28      	it	cs
 80090c2:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090c4:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090c8:	f1be 0f04 	cmp.w	lr, #4
 80090cc:	bf28      	it	cs
 80090ce:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090d2:	f1bc 0f06 	cmp.w	ip, #6
 80090d6:	d91f      	bls.n	8009118 <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090d8:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090da:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80090de:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80090e2:	bf28      	it	cs
 80090e4:	220f      	movcs	r2, #15
 80090e6:	fa0c fc03 	lsl.w	ip, ip, r3
 80090ea:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090ee:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80090f2:	fa0c fc0e 	lsl.w	ip, ip, lr
 80090f6:	ea21 010c 	bic.w	r1, r1, ip
 80090fa:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80090fc:	2800      	cmp	r0, #0
         );
 80090fe:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8009102:	db0c      	blt.n	800911e <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009104:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009108:	0109      	lsls	r1, r1, #4
 800910a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800910e:	b2c9      	uxtb	r1, r1
 8009110:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009114:	f85d fb04 	ldr.w	pc, [sp], #4
 8009118:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800911a:	4613      	mov	r3, r2
 800911c:	e7e7      	b.n	80090ee <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800911e:	4b05      	ldr	r3, [pc, #20]	; (8009134 <NVIC_Set_Priority+0x84>)
 8009120:	f000 000f 	and.w	r0, r0, #15
 8009124:	0109      	lsls	r1, r1, #4
 8009126:	4403      	add	r3, r0
 8009128:	b2c9      	uxtb	r1, r1
 800912a:	7619      	strb	r1, [r3, #24]
 800912c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009130:	e000ed00 	.word	0xe000ed00
 8009134:	e000ecfc 	.word	0xe000ecfc

08009138 <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 8009138:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 800913a:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 800913c:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 800913e:	f001 fa9b 	bl	800a678 <sbrk>
 8009142:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8009144:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 8009148:	4668      	mov	r0, sp
 800914a:	f000 faa5 	bl	8009698 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 800914e:	4b06      	ldr	r3, [pc, #24]	; (8009168 <sys_get_free_heap_size+0x30>)
 8009150:	9808      	ldr	r0, [sp, #32]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	42ab      	cmp	r3, r5
 8009156:	bf94      	ite	ls
 8009158:	ebc4 0403 	rsbls	r4, r4, r3
 800915c:	ebc4 0405 	rsbhi	r4, r4, r5
}
 8009160:	4420      	add	r0, r4
 8009162:	b00b      	add	sp, #44	; 0x2c
 8009164:	bd30      	pop	{r4, r5, pc}
 8009166:	bf00      	nop
 8009168:	2000b91c 	.word	0x2000b91c

0800916c <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 800916c:	4a06      	ldr	r2, [pc, #24]	; (8009188 <sys_calculate_cpu_load_percent+0x1c>)
 800916e:	4b07      	ldr	r3, [pc, #28]	; (800918c <sys_calculate_cpu_load_percent+0x20>)
 8009170:	6810      	ldr	r0, [r2, #0]
 8009172:	6819      	ldr	r1, [r3, #0]
 8009174:	4288      	cmp	r0, r1
 8009176:	d005      	beq.n	8009184 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 8009178:	4805      	ldr	r0, [pc, #20]	; (8009190 <sys_calculate_cpu_load_percent+0x24>)
 800917a:	6801      	ldr	r1, [r0, #0]
 800917c:	3101      	adds	r1, #1
 800917e:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 8009180:	6812      	ldr	r2, [r2, #0]
 8009182:	601a      	str	r2, [r3, #0]
    }
}
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	2000b680 	.word	0x2000b680
 800918c:	2000b924 	.word	0x2000b924
 8009190:	2000b928 	.word	0x2000b928

08009194 <exception_interrupt_handler>:
}


void exception_interrupt_handler(const char *tag, char *message){
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 8009194:	f7ff bdbc 	b.w	8008d10 <LOG_ERROR>

08009198 <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 8009198:	4b02      	ldr	r3, [pc, #8]	; (80091a4 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 800919a:	4903      	ldr	r1, [pc, #12]	; (80091a8 <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 800919c:	4a03      	ldr	r2, [pc, #12]	; (80091ac <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 800919e:	1a5b      	subs	r3, r3, r1
 80091a0:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_USE_LOG_MONITOR */
}
 80091a2:	4770      	bx	lr
 80091a4:	20030000 	.word	0x20030000
 80091a8:	00000400 	.word	0x00000400
 80091ac:	2000b91c 	.word	0x2000b91c

080091b0 <_Z11task_loratxPv>:
	}
}



void task_loratx(void *){
 80091b0:	b508      	push	{r3, lr}

	while(1){
		loraif_request_data();
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 80091b2:	4d08      	ldr	r5, [pc, #32]	; (80091d4 <_Z11task_loratxPv+0x24>)
 80091b4:	4c08      	ldr	r4, [pc, #32]	; (80091d8 <_Z11task_loratxPv+0x28>)
		loraif_request_data();
 80091b6:	f7fa ffad 	bl	8004114 <loraif_request_data>
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 80091ba:	f7ff ffbd 	bl	8009138 <sys_get_free_heap_size>
 80091be:	4629      	mov	r1, r5
 80091c0:	4602      	mov	r2, r0
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7ff fe20 	bl	8008e08 <LOG_MEM>
		vTaskDelay(5000);
 80091c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80091cc:	f7f9 fd9c 	bl	8002d08 <vTaskDelay>
	while(1){
 80091d0:	e7f1      	b.n	80091b6 <_Z11task_loratxPv+0x6>
 80091d2:	bf00      	nop
 80091d4:	0800d628 	.word	0x0800d628
 80091d8:	0800d63c 	.word	0x0800d63c

080091dc <_Z11task_lorarxPv>:
	}
}

void task_lorarx(void *){
 80091dc:	b500      	push	{lr}
	spi5->init(&spi5_conf);
 80091de:	4c23      	ldr	r4, [pc, #140]	; (800926c <_Z11task_lorarxPv+0x90>)
 80091e0:	4a23      	ldr	r2, [pc, #140]	; (8009270 <_Z11task_lorarxPv+0x94>)
 80091e2:	6821      	ldr	r1, [r4, #0]
void task_lorarx(void *){
 80091e4:	b085      	sub	sp, #20
	spi5->init(&spi5_conf);
 80091e6:	a802      	add	r0, sp, #8
 80091e8:	f7fd fe42 	bl	8006e70 <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, gpioA0_event_handler, NULL);
 80091ec:	2200      	movs	r2, #0
 80091ee:	4610      	mov	r0, r2
 80091f0:	4920      	ldr	r1, [pc, #128]	; (8009274 <_Z11task_lorarxPv+0x98>)
 80091f2:	f7fc fe5f 	bl	8005eb4 <exti_register_event_handler>

	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize OKE.");
 80091f6:	2307      	movs	r3, #7
 80091f8:	6821      	ldr	r1, [r4, #0]
 80091fa:	4a1f      	ldr	r2, [pc, #124]	; (8009278 <_Z11task_lorarxPv+0x9c>)
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	481f      	ldr	r0, [pc, #124]	; (800927c <_Z11task_lorarxPv+0xa0>)
 8009200:	2314      	movs	r3, #20
 8009202:	f7fb fcbb 	bl	8004b7c <_ZN6sx127x4initEP3spilhm>
 8009206:	b358      	cbz	r0, 8009260 <_Z11task_lorarxPv+0x84>
 8009208:	491d      	ldr	r1, [pc, #116]	; (8009280 <_Z11task_lorarxPv+0xa4>)
 800920a:	481e      	ldr	r0, [pc, #120]	; (8009284 <_Z11task_lorarxPv+0xa8>)
 800920c:	f7ff fd04 	bl	8008c18 <LOG_INFO>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");

	lora_queue = xQueueCreate(10, sizeof(uint32_t));
 8009210:	2200      	movs	r2, #0
 8009212:	2104      	movs	r1, #4
 8009214:	200a      	movs	r0, #10
 8009216:	f7f8 fb0d 	bl	8001834 <xQueueGenericCreate>
 800921a:	4c1b      	ldr	r4, [pc, #108]	; (8009288 <_Z11task_lorarxPv+0xac>)
	loraif_init(&lora, tim2, 10000, 3);
 800921c:	491b      	ldr	r1, [pc, #108]	; (800928c <_Z11task_lorarxPv+0xb0>)
	lora_queue = xQueueCreate(10, sizeof(uint32_t));
 800921e:	6020      	str	r0, [r4, #0]
	loraif_init(&lora, tim2, 10000, 3);
 8009220:	2303      	movs	r3, #3
 8009222:	f242 7210 	movw	r2, #10000	; 0x2710
 8009226:	6809      	ldr	r1, [r1, #0]
 8009228:	4814      	ldr	r0, [pc, #80]	; (800927c <_Z11task_lorarxPv+0xa0>)
 800922a:	f7fa fe15 	bl	8003e58 <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 800922e:	4818      	ldr	r0, [pc, #96]	; (8009290 <_Z11task_lorarxPv+0xb4>)
 8009230:	f7fa fe60 	bl	8003ef4 <loraif_register_event_handler>

	lora.setSyncWord(0x3F);
 8009234:	4811      	ldr	r0, [pc, #68]	; (800927c <_Z11task_lorarxPv+0xa0>)
 8009236:	213f      	movs	r1, #63	; 0x3f
 8009238:	f7fc fb1e 	bl	8005878 <_ZN6sx127x11setSyncWordEh>
	lora.register_event_handler(NULL, lora_event_handler);
 800923c:	480f      	ldr	r0, [pc, #60]	; (800927c <_Z11task_lorarxPv+0xa0>)
 800923e:	4a15      	ldr	r2, [pc, #84]	; (8009294 <_Z11task_lorarxPv+0xb8>)
 8009240:	2100      	movs	r1, #0
 8009242:	f7fb ff2d 	bl	80050a0 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	lora.Receive(0);
 8009246:	480d      	ldr	r0, [pc, #52]	; (800927c <_Z11task_lorarxPv+0xa0>)
 8009248:	2100      	movs	r1, #0
 800924a:	f7fc fa31 	bl	80056b0 <_ZN6sx127x7ReceiveEh>

	while(1){
		loraif_rx_process(&lora_queue);
 800924e:	4620      	mov	r0, r4
 8009250:	f7fb f8ac 	bl	80043ac <loraif_rx_process>
		loraif_response();
 8009254:	f7fb fa7a 	bl	800474c <loraif_response>
		vTaskDelay(20);
 8009258:	2014      	movs	r0, #20
 800925a:	f7f9 fd55 	bl	8002d08 <vTaskDelay>
	while(1){
 800925e:	e7f6      	b.n	800924e <_Z11task_lorarxPv+0x72>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 8009260:	490d      	ldr	r1, [pc, #52]	; (8009298 <_Z11task_lorarxPv+0xbc>)
 8009262:	4808      	ldr	r0, [pc, #32]	; (8009284 <_Z11task_lorarxPv+0xa8>)
 8009264:	f7ff fd54 	bl	8008d10 <LOG_ERROR>
 8009268:	e7d2      	b.n	8009210 <_Z11task_lorarxPv+0x34>
 800926a:	bf00      	nop
 800926c:	20000034 	.word	0x20000034
 8009270:	200000ac 	.word	0x200000ac
 8009274:	0800929d 	.word	0x0800929d
 8009278:	19cf0e40 	.word	0x19cf0e40
 800927c:	2000b930 	.word	0x2000b930
 8009280:	0800d644 	.word	0x0800d644
 8009284:	0800d63c 	.word	0x0800d63c
 8009288:	2000b95c 	.word	0x2000b95c
 800928c:	20000040 	.word	0x20000040
 8009290:	080092a9 	.word	0x080092a9
 8009294:	08009375 	.word	0x08009375
 8009298:	0800d65c 	.word	0x0800d65c

0800929c <_Z20gpioA0_event_handlerPv>:
	}
}

void gpioA0_event_handler(void *){
	lora.IRQHandler();
 800929c:	4801      	ldr	r0, [pc, #4]	; (80092a4 <_Z20gpioA0_event_handlerPv+0x8>)
 800929e:	f7fc bb0f 	b.w	80058c0 <_ZN6sx127x10IRQHandlerEv>
 80092a2:	bf00      	nop
 80092a4:	2000b930 	.word	0x2000b930

080092a8 <_Z20loraif_event_handler12lora_event_tPc>:
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
		}
	}
}

void loraif_event_handler(lora_event_t event, char *data){
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4604      	mov	r4, r0
	if(data != NULL) LOG_WARN(TAG, "LoRa data: %s", data);
 80092ac:	460d      	mov	r5, r1
 80092ae:	b121      	cbz	r1, 80092ba <_Z20loraif_event_handler12lora_event_tPc+0x12>
 80092b0:	4925      	ldr	r1, [pc, #148]	; (8009348 <_Z20loraif_event_handler12lora_event_tPc+0xa0>)
 80092b2:	4826      	ldr	r0, [pc, #152]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 80092b4:	462a      	mov	r2, r5
 80092b6:	f7ff fced 	bl	8008c94 <LOG_WARN>
	switch(event){
 80092ba:	2c08      	cmp	r4, #8
 80092bc:	d83d      	bhi.n	800933a <_Z20loraif_event_handler12lora_event_tPc+0x92>
 80092be:	e8df f004 	tbb	[pc, r4]
 80092c2:	140e      	.short	0x140e
 80092c4:	302a241a 	.word	0x302a241a
 80092c8:	363c      	.short	0x363c
 80092ca:	05          	.byte	0x05
 80092cb:	00          	.byte	0x00
		break;
		case LORA_UPDATE_DATA:
			LOG_EVENT(TAG, "LORA_UPDATE_DATA");
		break;
		case LORA_DEL_DEVICE:
			LOG_EVENT(TAG, "LORA_DEL_DEVICE");
 80092cc:	481f      	ldr	r0, [pc, #124]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 80092ce:	4920      	ldr	r1, [pc, #128]	; (8009350 <_Z20loraif_event_handler12lora_event_tPc+0xa8>)
 80092d0:	f7ff fdd8 	bl	8008e84 <LOG_EVENT>
			loraif_remove_device(data);
 80092d4:	4628      	mov	r0, r5
		default:
			LOG_EVENT(TAG, "LoRa other event.");
		break;

	}
}
 80092d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			loraif_remove_device(data);
 80092da:	f7fa bfaf 	b.w	800423c <loraif_remove_device>
}
 80092de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LORA_ERR");
 80092e2:	491c      	ldr	r1, [pc, #112]	; (8009354 <_Z20loraif_event_handler12lora_event_tPc+0xac>)
 80092e4:	4819      	ldr	r0, [pc, #100]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 80092e6:	f7ff bdcd 	b.w	8008e84 <LOG_EVENT>
}
 80092ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LORA_REQ_ADDRESS");
 80092ee:	491a      	ldr	r1, [pc, #104]	; (8009358 <_Z20loraif_event_handler12lora_event_tPc+0xb0>)
 80092f0:	4816      	ldr	r0, [pc, #88]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 80092f2:	f7ff bdc7 	b.w	8008e84 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_UPDATE_ADDRESS");
 80092f6:	4919      	ldr	r1, [pc, #100]	; (800935c <_Z20loraif_event_handler12lora_event_tPc+0xb4>)
 80092f8:	4814      	ldr	r0, [pc, #80]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 80092fa:	f7ff fdc3 	bl	8008e84 <LOG_EVENT>
			loraif_new_device(data, NULL);
 80092fe:	4628      	mov	r0, r5
 8009300:	2100      	movs	r1, #0
}
 8009302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			loraif_new_device(data, NULL);
 8009306:	f7fa bf1f 	b.w	8004148 <loraif_new_device>
}
 800930a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LORA_UPDATE_STATE");
 800930e:	4914      	ldr	r1, [pc, #80]	; (8009360 <_Z20loraif_event_handler12lora_event_tPc+0xb8>)
 8009310:	480e      	ldr	r0, [pc, #56]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 8009312:	f7ff bdb7 	b.w	8008e84 <LOG_EVENT>
}
 8009316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LORA_UPDATE_SETTINGS");
 800931a:	4912      	ldr	r1, [pc, #72]	; (8009364 <_Z20loraif_event_handler12lora_event_tPc+0xbc>)
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 800931e:	f7ff bdb1 	b.w	8008e84 <LOG_EVENT>
}
 8009322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LORA_REQ_DATA");
 8009326:	4910      	ldr	r1, [pc, #64]	; (8009368 <_Z20loraif_event_handler12lora_event_tPc+0xc0>)
 8009328:	4808      	ldr	r0, [pc, #32]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 800932a:	f7ff bdab 	b.w	8008e84 <LOG_EVENT>
}
 800932e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LORA_UPDATE_DATA");
 8009332:	490e      	ldr	r1, [pc, #56]	; (800936c <_Z20loraif_event_handler12lora_event_tPc+0xc4>)
 8009334:	4805      	ldr	r0, [pc, #20]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 8009336:	f7ff bda5 	b.w	8008e84 <LOG_EVENT>
}
 800933a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800933e:	490c      	ldr	r1, [pc, #48]	; (8009370 <_Z20loraif_event_handler12lora_event_tPc+0xc8>)
 8009340:	4802      	ldr	r0, [pc, #8]	; (800934c <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 8009342:	f7ff bd9f 	b.w	8008e84 <LOG_EVENT>
 8009346:	bf00      	nop
 8009348:	0800d674 	.word	0x0800d674
 800934c:	0800d63c 	.word	0x0800d63c
 8009350:	0800ce20 	.word	0x0800ce20
 8009354:	0800cd8c 	.word	0x0800cd8c
 8009358:	0800cd98 	.word	0x0800cd98
 800935c:	0800cdac 	.word	0x0800cdac
 8009360:	0800cdc0 	.word	0x0800cdc0
 8009364:	0800cdd4 	.word	0x0800cdd4
 8009368:	0800cdec 	.word	0x0800cdec
 800936c:	0800ce0c 	.word	0x0800ce0c
 8009370:	0800d684 	.word	0x0800d684

08009374 <_Z18lora_event_handlerPvh>:
	if(packetSize){
 8009374:	b901      	cbnz	r1, 8009378 <_Z18lora_event_handlerPvh+0x4>
 8009376:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 8009378:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 800937a:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 800937c:	b087      	sub	sp, #28
 800937e:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 8009380:	f000 f94a 	bl	8009618 <malloc>
 8009384:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 8009386:	4818      	ldr	r0, [pc, #96]	; (80093e8 <_Z18lora_event_handlerPvh+0x74>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 8009388:	9104      	str	r1, [sp, #16]
		lora.receive(lora_RxBuf);
 800938a:	f7fc f93b 	bl	8005604 <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 800938e:	9b04      	ldr	r3, [sp, #16]
		LOG_INFO(TAG, "Receive: %s, packet RSSI = %d, RSSI = %d", lora_RxBuf, lora.packetRssi(), lora.rssi());
 8009390:	4815      	ldr	r0, [pc, #84]	; (80093e8 <_Z18lora_event_handlerPvh+0x74>)
		lora_RxBuf[packetSize] = '\0';
 8009392:	2500      	movs	r5, #0
 8009394:	551d      	strb	r5, [r3, r4]
		LOG_INFO(TAG, "Receive: %s, packet RSSI = %d, RSSI = %d", lora_RxBuf, lora.packetRssi(), lora.rssi());
 8009396:	9a04      	ldr	r2, [sp, #16]
 8009398:	9203      	str	r2, [sp, #12]
 800939a:	f7fc f855 	bl	8005448 <_ZN6sx127x10packetRssiEv>
 800939e:	4603      	mov	r3, r0
 80093a0:	4811      	ldr	r0, [pc, #68]	; (80093e8 <_Z18lora_event_handlerPvh+0x74>)
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	f7fc f880 	bl	80054a8 <_ZN6sx127x4rssiEv>
 80093a8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80093ac:	9000      	str	r0, [sp, #0]
 80093ae:	490f      	ldr	r1, [pc, #60]	; (80093ec <_Z18lora_event_handlerPvh+0x78>)
 80093b0:	480f      	ldr	r0, [pc, #60]	; (80093f0 <_Z18lora_event_handlerPvh+0x7c>)
 80093b2:	f7ff fc31 	bl	8008c18 <LOG_INFO>
		if(loraif_check_crc(lora_RxBuf) == true){
 80093b6:	9804      	ldr	r0, [sp, #16]
 80093b8:	f7fa fda2 	bl	8003f00 <loraif_check_crc>
 80093bc:	b170      	cbz	r0, 80093dc <_Z18lora_event_handlerPvh+0x68>
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 80093be:	4a0d      	ldr	r2, [pc, #52]	; (80093f4 <_Z18lora_event_handlerPvh+0x80>)
			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80093c0:	9505      	str	r5, [sp, #20]
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 80093c2:	6810      	ldr	r0, [r2, #0]
 80093c4:	462b      	mov	r3, r5
 80093c6:	aa05      	add	r2, sp, #20
 80093c8:	a904      	add	r1, sp, #16
 80093ca:	f7f8 fc2b 	bl	8001c24 <xQueueGenericSendFromISR>
 80093ce:	2801      	cmp	r0, #1
 80093d0:	d008      	beq.n	80093e4 <_Z18lora_event_handlerPvh+0x70>
				LOG_ERROR(TAG, "LoRa error queue receive.");
 80093d2:	4909      	ldr	r1, [pc, #36]	; (80093f8 <_Z18lora_event_handlerPvh+0x84>)
 80093d4:	4806      	ldr	r0, [pc, #24]	; (80093f0 <_Z18lora_event_handlerPvh+0x7c>)
 80093d6:	f7ff fc9b 	bl	8008d10 <LOG_ERROR>
 80093da:	e003      	b.n	80093e4 <_Z18lora_event_handlerPvh+0x70>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 80093dc:	4907      	ldr	r1, [pc, #28]	; (80093fc <_Z18lora_event_handlerPvh+0x88>)
 80093de:	4804      	ldr	r0, [pc, #16]	; (80093f0 <_Z18lora_event_handlerPvh+0x7c>)
 80093e0:	f7ff fc96 	bl	8008d10 <LOG_ERROR>
}
 80093e4:	b007      	add	sp, #28
 80093e6:	bd30      	pop	{r4, r5, pc}
 80093e8:	2000b930 	.word	0x2000b930
 80093ec:	0800d698 	.word	0x0800d698
 80093f0:	0800d63c 	.word	0x0800d63c
 80093f4:	2000b95c 	.word	0x2000b95c
 80093f8:	0800d6c4 	.word	0x0800d6c4
 80093fc:	0800d6e0 	.word	0x0800d6e0

08009400 <_Z8app_mainv>:
void app_main(void){
 8009400:	b500      	push	{lr}
 8009402:	b083      	sub	sp, #12
	HAL_Driver_Init();
 8009404:	f7f7 fde2 	bl	8000fcc <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOC);
 8009408:	4814      	ldr	r0, [pc, #80]	; (800945c <_Z8app_mainv+0x5c>)
 800940a:	f7fd f94d 	bl	80066a8 <gpio_port_clock_enable>
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 800940e:	4813      	ldr	r0, [pc, #76]	; (800945c <_Z8app_mainv+0x5c>)
 8009410:	2207      	movs	r2, #7
 8009412:	210d      	movs	r1, #13
 8009414:	f7fd f9ae 	bl	8006774 <gpio_set_mode>
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 8, NULL);
 8009418:	2400      	movs	r4, #0
 800941a:	2008      	movs	r0, #8
 800941c:	e9cd 0400 	strd	r0, r4, [sp]
 8009420:	4623      	mov	r3, r4
 8009422:	490f      	ldr	r1, [pc, #60]	; (8009460 <_Z8app_mainv+0x60>)
 8009424:	480f      	ldr	r0, [pc, #60]	; (8009464 <_Z8app_mainv+0x64>)
 8009426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800942a:	f7f9 fbb9 	bl	8002ba0 <xTaskCreate>
	xTaskCreate(task_loratx, "task_loratx", byte_to_word(8192), NULL, 5, NULL);
 800942e:	2305      	movs	r3, #5
 8009430:	e9cd 3400 	strd	r3, r4, [sp]
 8009434:	490c      	ldr	r1, [pc, #48]	; (8009468 <_Z8app_mainv+0x68>)
 8009436:	480d      	ldr	r0, [pc, #52]	; (800946c <_Z8app_mainv+0x6c>)
 8009438:	4623      	mov	r3, r4
 800943a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800943e:	f7f9 fbaf 	bl	8002ba0 <xTaskCreate>
		gpio_toggle(GPIOC, 13);
 8009442:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8009446:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 800944a:	4620      	mov	r0, r4
 800944c:	210d      	movs	r1, #13
 800944e:	f7fd fa83 	bl	8006958 <gpio_toggle>
		vTaskDelay(100);
 8009452:	2064      	movs	r0, #100	; 0x64
 8009454:	f7f9 fc58 	bl	8002d08 <vTaskDelay>
	while(1){
 8009458:	e7f7      	b.n	800944a <_Z8app_mainv+0x4a>
 800945a:	bf00      	nop
 800945c:	40020800 	.word	0x40020800
 8009460:	0800d700 	.word	0x0800d700
 8009464:	080091dd 	.word	0x080091dd
 8009468:	0800d70c 	.word	0x0800d70c
 800946c:	080091b1 	.word	0x080091b1

08009470 <_GLOBAL__sub_I_spi5_conf>:

		wifiif_set_response_state(rxdata);

		usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
	}
}
 8009470:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 8009472:	4908      	ldr	r1, [pc, #32]	; (8009494 <_GLOBAL__sub_I_spi5_conf+0x24>)
 8009474:	4b08      	ldr	r3, [pc, #32]	; (8009498 <_GLOBAL__sub_I_spi5_conf+0x28>)
}
 8009476:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 8009478:	2000      	movs	r0, #0
 800947a:	2203      	movs	r2, #3
 800947c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8009480:	9200      	str	r2, [sp, #0]
 8009482:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8009486:	2206      	movs	r2, #6
 8009488:	4804      	ldr	r0, [pc, #16]	; (800949c <_GLOBAL__sub_I_spi5_conf+0x2c>)
 800948a:	f7fb fb65 	bl	8004b58 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 800948e:	b005      	add	sp, #20
 8009490:	f85d fb04 	ldr.w	pc, [sp], #4
 8009494:	40020000 	.word	0x40020000
 8009498:	40021000 	.word	0x40021000
 800949c:	2000b930 	.word	0x2000b930

080094a0 <_ZdlPvj>:
 80094a0:	f000 b81d 	b.w	80094de <_ZdlPv>

080094a4 <_Znwj>:
 80094a4:	2801      	cmp	r0, #1
 80094a6:	bf38      	it	cc
 80094a8:	2001      	movcc	r0, #1
 80094aa:	b510      	push	{r4, lr}
 80094ac:	4604      	mov	r4, r0
 80094ae:	4620      	mov	r0, r4
 80094b0:	f000 f8b2 	bl	8009618 <malloc>
 80094b4:	b930      	cbnz	r0, 80094c4 <_Znwj+0x20>
 80094b6:	f000 f815 	bl	80094e4 <_ZSt15get_new_handlerv>
 80094ba:	b908      	cbnz	r0, 80094c0 <_Znwj+0x1c>
 80094bc:	f000 f85c 	bl	8009578 <abort>
 80094c0:	4780      	blx	r0
 80094c2:	e7f4      	b.n	80094ae <_Znwj+0xa>
 80094c4:	bd10      	pop	{r4, pc}

080094c6 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 80094c6:	684b      	ldr	r3, [r1, #4]
 80094c8:	6043      	str	r3, [r0, #4]
 80094ca:	684b      	ldr	r3, [r1, #4]
 80094cc:	6001      	str	r1, [r0, #0]
 80094ce:	6018      	str	r0, [r3, #0]
 80094d0:	6048      	str	r0, [r1, #4]
 80094d2:	4770      	bx	lr

080094d4 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 80094d4:	e9d0 3200 	ldrd	r3, r2, [r0]
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	605a      	str	r2, [r3, #4]
 80094dc:	4770      	bx	lr

080094de <_ZdlPv>:
 80094de:	f000 b8a3 	b.w	8009628 <free>
	...

080094e4 <_ZSt15get_new_handlerv>:
 80094e4:	4b02      	ldr	r3, [pc, #8]	; (80094f0 <_ZSt15get_new_handlerv+0xc>)
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	f3bf 8f5b 	dmb	ish
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	2000b960 	.word	0x2000b960

080094f4 <ceilf>:
 80094f4:	ee10 3a10 	vmov	r3, s0
 80094f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80094fc:	3a7f      	subs	r2, #127	; 0x7f
 80094fe:	2a16      	cmp	r2, #22
 8009500:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009504:	dc2a      	bgt.n	800955c <ceilf+0x68>
 8009506:	2a00      	cmp	r2, #0
 8009508:	da11      	bge.n	800952e <ceilf+0x3a>
 800950a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009570 <ceilf+0x7c>
 800950e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009512:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951a:	dd05      	ble.n	8009528 <ceilf+0x34>
 800951c:	2b00      	cmp	r3, #0
 800951e:	db23      	blt.n	8009568 <ceilf+0x74>
 8009520:	2900      	cmp	r1, #0
 8009522:	bf18      	it	ne
 8009524:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8009528:	ee00 3a10 	vmov	s0, r3
 800952c:	4770      	bx	lr
 800952e:	4911      	ldr	r1, [pc, #68]	; (8009574 <ceilf+0x80>)
 8009530:	4111      	asrs	r1, r2
 8009532:	420b      	tst	r3, r1
 8009534:	d0fa      	beq.n	800952c <ceilf+0x38>
 8009536:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009570 <ceilf+0x7c>
 800953a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800953e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009546:	ddef      	ble.n	8009528 <ceilf+0x34>
 8009548:	2b00      	cmp	r3, #0
 800954a:	bfc2      	ittt	gt
 800954c:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8009550:	fa40 f202 	asrgt.w	r2, r0, r2
 8009554:	189b      	addgt	r3, r3, r2
 8009556:	ea23 0301 	bic.w	r3, r3, r1
 800955a:	e7e5      	b.n	8009528 <ceilf+0x34>
 800955c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009560:	d3e4      	bcc.n	800952c <ceilf+0x38>
 8009562:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009566:	4770      	bx	lr
 8009568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800956c:	e7dc      	b.n	8009528 <ceilf+0x34>
 800956e:	bf00      	nop
 8009570:	7149f2ca 	.word	0x7149f2ca
 8009574:	007fffff 	.word	0x007fffff

08009578 <abort>:
 8009578:	b508      	push	{r3, lr}
 800957a:	2006      	movs	r0, #6
 800957c:	f000 ffbe 	bl	800a4fc <raise>
 8009580:	2001      	movs	r0, #1
 8009582:	f7f7 fdc3 	bl	800110c <_exit>
	...

08009588 <asiprintf>:
 8009588:	b40e      	push	{r1, r2, r3}
 800958a:	b530      	push	{r4, r5, lr}
 800958c:	b09c      	sub	sp, #112	; 0x70
 800958e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009590:	4605      	mov	r5, r0
 8009592:	490d      	ldr	r1, [pc, #52]	; (80095c8 <asiprintf+0x40>)
 8009594:	480d      	ldr	r0, [pc, #52]	; (80095cc <asiprintf+0x44>)
 8009596:	f853 2b04 	ldr.w	r2, [r3], #4
 800959a:	6800      	ldr	r0, [r0, #0]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	2400      	movs	r4, #0
 80095a0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80095a4:	a902      	add	r1, sp, #8
 80095a6:	9402      	str	r4, [sp, #8]
 80095a8:	9404      	str	r4, [sp, #16]
 80095aa:	9407      	str	r4, [sp, #28]
 80095ac:	f000 fa04 	bl	80099b8 <_svfiprintf_r>
 80095b0:	2800      	cmp	r0, #0
 80095b2:	bfa1      	itttt	ge
 80095b4:	9b02      	ldrge	r3, [sp, #8]
 80095b6:	701c      	strbge	r4, [r3, #0]
 80095b8:	9b06      	ldrge	r3, [sp, #24]
 80095ba:	602b      	strge	r3, [r5, #0]
 80095bc:	b01c      	add	sp, #112	; 0x70
 80095be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095c2:	b003      	add	sp, #12
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	ffff0288 	.word	0xffff0288
 80095cc:	200000e4 	.word	0x200000e4

080095d0 <__libc_init_array>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4d0d      	ldr	r5, [pc, #52]	; (8009608 <__libc_init_array+0x38>)
 80095d4:	4c0d      	ldr	r4, [pc, #52]	; (800960c <__libc_init_array+0x3c>)
 80095d6:	1b64      	subs	r4, r4, r5
 80095d8:	10a4      	asrs	r4, r4, #2
 80095da:	2600      	movs	r6, #0
 80095dc:	42a6      	cmp	r6, r4
 80095de:	d109      	bne.n	80095f4 <__libc_init_array+0x24>
 80095e0:	4d0b      	ldr	r5, [pc, #44]	; (8009610 <__libc_init_array+0x40>)
 80095e2:	4c0c      	ldr	r4, [pc, #48]	; (8009614 <__libc_init_array+0x44>)
 80095e4:	f002 fff4 	bl	800c5d0 <_init>
 80095e8:	1b64      	subs	r4, r4, r5
 80095ea:	10a4      	asrs	r4, r4, #2
 80095ec:	2600      	movs	r6, #0
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	d105      	bne.n	80095fe <__libc_init_array+0x2e>
 80095f2:	bd70      	pop	{r4, r5, r6, pc}
 80095f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f8:	4798      	blx	r3
 80095fa:	3601      	adds	r6, #1
 80095fc:	e7ee      	b.n	80095dc <__libc_init_array+0xc>
 80095fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009602:	4798      	blx	r3
 8009604:	3601      	adds	r6, #1
 8009606:	e7f2      	b.n	80095ee <__libc_init_array+0x1e>
 8009608:	0800db00 	.word	0x0800db00
 800960c:	0800db00 	.word	0x0800db00
 8009610:	0800db00 	.word	0x0800db00
 8009614:	0800db28 	.word	0x0800db28

08009618 <malloc>:
 8009618:	4b02      	ldr	r3, [pc, #8]	; (8009624 <malloc+0xc>)
 800961a:	4601      	mov	r1, r0
 800961c:	6818      	ldr	r0, [r3, #0]
 800961e:	f000 b8fb 	b.w	8009818 <_malloc_r>
 8009622:	bf00      	nop
 8009624:	200000e4 	.word	0x200000e4

08009628 <free>:
 8009628:	4b02      	ldr	r3, [pc, #8]	; (8009634 <free+0xc>)
 800962a:	4601      	mov	r1, r0
 800962c:	6818      	ldr	r0, [r3, #0]
 800962e:	f000 b853 	b.w	80096d8 <_free_r>
 8009632:	bf00      	nop
 8009634:	200000e4 	.word	0x200000e4

08009638 <memcpy>:
 8009638:	440a      	add	r2, r1
 800963a:	4291      	cmp	r1, r2
 800963c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009640:	d100      	bne.n	8009644 <memcpy+0xc>
 8009642:	4770      	bx	lr
 8009644:	b510      	push	{r4, lr}
 8009646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800964a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800964e:	4291      	cmp	r1, r2
 8009650:	d1f9      	bne.n	8009646 <memcpy+0xe>
 8009652:	bd10      	pop	{r4, pc}

08009654 <memmove>:
 8009654:	4288      	cmp	r0, r1
 8009656:	b510      	push	{r4, lr}
 8009658:	eb01 0402 	add.w	r4, r1, r2
 800965c:	d902      	bls.n	8009664 <memmove+0x10>
 800965e:	4284      	cmp	r4, r0
 8009660:	4623      	mov	r3, r4
 8009662:	d807      	bhi.n	8009674 <memmove+0x20>
 8009664:	1e43      	subs	r3, r0, #1
 8009666:	42a1      	cmp	r1, r4
 8009668:	d008      	beq.n	800967c <memmove+0x28>
 800966a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800966e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009672:	e7f8      	b.n	8009666 <memmove+0x12>
 8009674:	4402      	add	r2, r0
 8009676:	4601      	mov	r1, r0
 8009678:	428a      	cmp	r2, r1
 800967a:	d100      	bne.n	800967e <memmove+0x2a>
 800967c:	bd10      	pop	{r4, pc}
 800967e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009682:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009686:	e7f7      	b.n	8009678 <memmove+0x24>

08009688 <memset>:
 8009688:	4402      	add	r2, r0
 800968a:	4603      	mov	r3, r0
 800968c:	4293      	cmp	r3, r2
 800968e:	d100      	bne.n	8009692 <memset+0xa>
 8009690:	4770      	bx	lr
 8009692:	f803 1b01 	strb.w	r1, [r3], #1
 8009696:	e7f9      	b.n	800968c <memset+0x4>

08009698 <mallinfo>:
 8009698:	b510      	push	{r4, lr}
 800969a:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <mallinfo+0x10>)
 800969c:	4604      	mov	r4, r0
 800969e:	6819      	ldr	r1, [r3, #0]
 80096a0:	f000 f866 	bl	8009770 <_mallinfo_r>
 80096a4:	4620      	mov	r0, r4
 80096a6:	bd10      	pop	{r4, pc}
 80096a8:	200000e4 	.word	0x200000e4

080096ac <_calloc_r>:
 80096ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096ae:	fba1 2402 	umull	r2, r4, r1, r2
 80096b2:	b94c      	cbnz	r4, 80096c8 <_calloc_r+0x1c>
 80096b4:	4611      	mov	r1, r2
 80096b6:	9201      	str	r2, [sp, #4]
 80096b8:	f000 f8ae 	bl	8009818 <_malloc_r>
 80096bc:	9a01      	ldr	r2, [sp, #4]
 80096be:	4605      	mov	r5, r0
 80096c0:	b930      	cbnz	r0, 80096d0 <_calloc_r+0x24>
 80096c2:	4628      	mov	r0, r5
 80096c4:	b003      	add	sp, #12
 80096c6:	bd30      	pop	{r4, r5, pc}
 80096c8:	220c      	movs	r2, #12
 80096ca:	6002      	str	r2, [r0, #0]
 80096cc:	2500      	movs	r5, #0
 80096ce:	e7f8      	b.n	80096c2 <_calloc_r+0x16>
 80096d0:	4621      	mov	r1, r4
 80096d2:	f7ff ffd9 	bl	8009688 <memset>
 80096d6:	e7f4      	b.n	80096c2 <_calloc_r+0x16>

080096d8 <_free_r>:
 80096d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096da:	2900      	cmp	r1, #0
 80096dc:	d044      	beq.n	8009768 <_free_r+0x90>
 80096de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e2:	9001      	str	r0, [sp, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f1a1 0404 	sub.w	r4, r1, #4
 80096ea:	bfb8      	it	lt
 80096ec:	18e4      	addlt	r4, r4, r3
 80096ee:	f001 ff9b 	bl	800b628 <__malloc_lock>
 80096f2:	4a1e      	ldr	r2, [pc, #120]	; (800976c <_free_r+0x94>)
 80096f4:	9801      	ldr	r0, [sp, #4]
 80096f6:	6813      	ldr	r3, [r2, #0]
 80096f8:	b933      	cbnz	r3, 8009708 <_free_r+0x30>
 80096fa:	6063      	str	r3, [r4, #4]
 80096fc:	6014      	str	r4, [r2, #0]
 80096fe:	b003      	add	sp, #12
 8009700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009704:	f001 bf96 	b.w	800b634 <__malloc_unlock>
 8009708:	42a3      	cmp	r3, r4
 800970a:	d908      	bls.n	800971e <_free_r+0x46>
 800970c:	6825      	ldr	r5, [r4, #0]
 800970e:	1961      	adds	r1, r4, r5
 8009710:	428b      	cmp	r3, r1
 8009712:	bf01      	itttt	eq
 8009714:	6819      	ldreq	r1, [r3, #0]
 8009716:	685b      	ldreq	r3, [r3, #4]
 8009718:	1949      	addeq	r1, r1, r5
 800971a:	6021      	streq	r1, [r4, #0]
 800971c:	e7ed      	b.n	80096fa <_free_r+0x22>
 800971e:	461a      	mov	r2, r3
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	b10b      	cbz	r3, 8009728 <_free_r+0x50>
 8009724:	42a3      	cmp	r3, r4
 8009726:	d9fa      	bls.n	800971e <_free_r+0x46>
 8009728:	6811      	ldr	r1, [r2, #0]
 800972a:	1855      	adds	r5, r2, r1
 800972c:	42a5      	cmp	r5, r4
 800972e:	d10b      	bne.n	8009748 <_free_r+0x70>
 8009730:	6824      	ldr	r4, [r4, #0]
 8009732:	4421      	add	r1, r4
 8009734:	1854      	adds	r4, r2, r1
 8009736:	42a3      	cmp	r3, r4
 8009738:	6011      	str	r1, [r2, #0]
 800973a:	d1e0      	bne.n	80096fe <_free_r+0x26>
 800973c:	681c      	ldr	r4, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	6053      	str	r3, [r2, #4]
 8009742:	4421      	add	r1, r4
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	e7da      	b.n	80096fe <_free_r+0x26>
 8009748:	d902      	bls.n	8009750 <_free_r+0x78>
 800974a:	230c      	movs	r3, #12
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	e7d6      	b.n	80096fe <_free_r+0x26>
 8009750:	6825      	ldr	r5, [r4, #0]
 8009752:	1961      	adds	r1, r4, r5
 8009754:	428b      	cmp	r3, r1
 8009756:	bf04      	itt	eq
 8009758:	6819      	ldreq	r1, [r3, #0]
 800975a:	685b      	ldreq	r3, [r3, #4]
 800975c:	6063      	str	r3, [r4, #4]
 800975e:	bf04      	itt	eq
 8009760:	1949      	addeq	r1, r1, r5
 8009762:	6021      	streq	r1, [r4, #0]
 8009764:	6054      	str	r4, [r2, #4]
 8009766:	e7ca      	b.n	80096fe <_free_r+0x26>
 8009768:	b003      	add	sp, #12
 800976a:	bd30      	pop	{r4, r5, pc}
 800976c:	2000b98c 	.word	0x2000b98c

08009770 <_mallinfo_r>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	4c16      	ldr	r4, [pc, #88]	; (80097cc <_mallinfo_r+0x5c>)
 8009774:	4605      	mov	r5, r0
 8009776:	4608      	mov	r0, r1
 8009778:	460e      	mov	r6, r1
 800977a:	f001 ff55 	bl	800b628 <__malloc_lock>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	b143      	cbz	r3, 8009794 <_mallinfo_r+0x24>
 8009782:	2100      	movs	r1, #0
 8009784:	4630      	mov	r0, r6
 8009786:	f000 fe81 	bl	800a48c <_sbrk_r>
 800978a:	1c42      	adds	r2, r0, #1
 800978c:	4603      	mov	r3, r0
 800978e:	bf1c      	itt	ne
 8009790:	6820      	ldrne	r0, [r4, #0]
 8009792:	1a1b      	subne	r3, r3, r0
 8009794:	4a0e      	ldr	r2, [pc, #56]	; (80097d0 <_mallinfo_r+0x60>)
 8009796:	6812      	ldr	r2, [r2, #0]
 8009798:	2000      	movs	r0, #0
 800979a:	b992      	cbnz	r2, 80097c2 <_mallinfo_r+0x52>
 800979c:	4c0d      	ldr	r4, [pc, #52]	; (80097d4 <_mallinfo_r+0x64>)
 800979e:	6023      	str	r3, [r4, #0]
 80097a0:	6220      	str	r0, [r4, #32]
 80097a2:	1a1b      	subs	r3, r3, r0
 80097a4:	4630      	mov	r0, r6
 80097a6:	61e3      	str	r3, [r4, #28]
 80097a8:	f001 ff44 	bl	800b634 <__malloc_unlock>
 80097ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097ae:	462e      	mov	r6, r5
 80097b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80097b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80097b4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80097b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80097ba:	e886 0003 	stmia.w	r6, {r0, r1}
 80097be:	4628      	mov	r0, r5
 80097c0:	bd70      	pop	{r4, r5, r6, pc}
 80097c2:	6811      	ldr	r1, [r2, #0]
 80097c4:	6852      	ldr	r2, [r2, #4]
 80097c6:	4408      	add	r0, r1
 80097c8:	e7e7      	b.n	800979a <_mallinfo_r+0x2a>
 80097ca:	bf00      	nop
 80097cc:	2000b990 	.word	0x2000b990
 80097d0:	2000b98c 	.word	0x2000b98c
 80097d4:	2000b964 	.word	0x2000b964

080097d8 <sbrk_aligned>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	4e0e      	ldr	r6, [pc, #56]	; (8009814 <sbrk_aligned+0x3c>)
 80097dc:	460c      	mov	r4, r1
 80097de:	6831      	ldr	r1, [r6, #0]
 80097e0:	4605      	mov	r5, r0
 80097e2:	b911      	cbnz	r1, 80097ea <sbrk_aligned+0x12>
 80097e4:	f000 fe52 	bl	800a48c <_sbrk_r>
 80097e8:	6030      	str	r0, [r6, #0]
 80097ea:	4621      	mov	r1, r4
 80097ec:	4628      	mov	r0, r5
 80097ee:	f000 fe4d 	bl	800a48c <_sbrk_r>
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d00a      	beq.n	800980c <sbrk_aligned+0x34>
 80097f6:	1cc4      	adds	r4, r0, #3
 80097f8:	f024 0403 	bic.w	r4, r4, #3
 80097fc:	42a0      	cmp	r0, r4
 80097fe:	d007      	beq.n	8009810 <sbrk_aligned+0x38>
 8009800:	1a21      	subs	r1, r4, r0
 8009802:	4628      	mov	r0, r5
 8009804:	f000 fe42 	bl	800a48c <_sbrk_r>
 8009808:	3001      	adds	r0, #1
 800980a:	d101      	bne.n	8009810 <sbrk_aligned+0x38>
 800980c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009810:	4620      	mov	r0, r4
 8009812:	bd70      	pop	{r4, r5, r6, pc}
 8009814:	2000b990 	.word	0x2000b990

08009818 <_malloc_r>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	1ccd      	adds	r5, r1, #3
 800981e:	f025 0503 	bic.w	r5, r5, #3
 8009822:	3508      	adds	r5, #8
 8009824:	2d0c      	cmp	r5, #12
 8009826:	bf38      	it	cc
 8009828:	250c      	movcc	r5, #12
 800982a:	2d00      	cmp	r5, #0
 800982c:	4607      	mov	r7, r0
 800982e:	db01      	blt.n	8009834 <_malloc_r+0x1c>
 8009830:	42a9      	cmp	r1, r5
 8009832:	d905      	bls.n	8009840 <_malloc_r+0x28>
 8009834:	230c      	movs	r3, #12
 8009836:	603b      	str	r3, [r7, #0]
 8009838:	2600      	movs	r6, #0
 800983a:	4630      	mov	r0, r6
 800983c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009840:	4e2e      	ldr	r6, [pc, #184]	; (80098fc <_malloc_r+0xe4>)
 8009842:	f001 fef1 	bl	800b628 <__malloc_lock>
 8009846:	6833      	ldr	r3, [r6, #0]
 8009848:	461c      	mov	r4, r3
 800984a:	bb34      	cbnz	r4, 800989a <_malloc_r+0x82>
 800984c:	4629      	mov	r1, r5
 800984e:	4638      	mov	r0, r7
 8009850:	f7ff ffc2 	bl	80097d8 <sbrk_aligned>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	4604      	mov	r4, r0
 8009858:	d14d      	bne.n	80098f6 <_malloc_r+0xde>
 800985a:	6834      	ldr	r4, [r6, #0]
 800985c:	4626      	mov	r6, r4
 800985e:	2e00      	cmp	r6, #0
 8009860:	d140      	bne.n	80098e4 <_malloc_r+0xcc>
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	4631      	mov	r1, r6
 8009866:	4638      	mov	r0, r7
 8009868:	eb04 0803 	add.w	r8, r4, r3
 800986c:	f000 fe0e 	bl	800a48c <_sbrk_r>
 8009870:	4580      	cmp	r8, r0
 8009872:	d13a      	bne.n	80098ea <_malloc_r+0xd2>
 8009874:	6821      	ldr	r1, [r4, #0]
 8009876:	3503      	adds	r5, #3
 8009878:	1a6d      	subs	r5, r5, r1
 800987a:	f025 0503 	bic.w	r5, r5, #3
 800987e:	3508      	adds	r5, #8
 8009880:	2d0c      	cmp	r5, #12
 8009882:	bf38      	it	cc
 8009884:	250c      	movcc	r5, #12
 8009886:	4629      	mov	r1, r5
 8009888:	4638      	mov	r0, r7
 800988a:	f7ff ffa5 	bl	80097d8 <sbrk_aligned>
 800988e:	3001      	adds	r0, #1
 8009890:	d02b      	beq.n	80098ea <_malloc_r+0xd2>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	442b      	add	r3, r5
 8009896:	6023      	str	r3, [r4, #0]
 8009898:	e00e      	b.n	80098b8 <_malloc_r+0xa0>
 800989a:	6822      	ldr	r2, [r4, #0]
 800989c:	1b52      	subs	r2, r2, r5
 800989e:	d41e      	bmi.n	80098de <_malloc_r+0xc6>
 80098a0:	2a0b      	cmp	r2, #11
 80098a2:	d916      	bls.n	80098d2 <_malloc_r+0xba>
 80098a4:	1961      	adds	r1, r4, r5
 80098a6:	42a3      	cmp	r3, r4
 80098a8:	6025      	str	r5, [r4, #0]
 80098aa:	bf18      	it	ne
 80098ac:	6059      	strne	r1, [r3, #4]
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	bf08      	it	eq
 80098b2:	6031      	streq	r1, [r6, #0]
 80098b4:	5162      	str	r2, [r4, r5]
 80098b6:	604b      	str	r3, [r1, #4]
 80098b8:	4638      	mov	r0, r7
 80098ba:	f104 060b 	add.w	r6, r4, #11
 80098be:	f001 feb9 	bl	800b634 <__malloc_unlock>
 80098c2:	f026 0607 	bic.w	r6, r6, #7
 80098c6:	1d23      	adds	r3, r4, #4
 80098c8:	1af2      	subs	r2, r6, r3
 80098ca:	d0b6      	beq.n	800983a <_malloc_r+0x22>
 80098cc:	1b9b      	subs	r3, r3, r6
 80098ce:	50a3      	str	r3, [r4, r2]
 80098d0:	e7b3      	b.n	800983a <_malloc_r+0x22>
 80098d2:	6862      	ldr	r2, [r4, #4]
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	bf0c      	ite	eq
 80098d8:	6032      	streq	r2, [r6, #0]
 80098da:	605a      	strne	r2, [r3, #4]
 80098dc:	e7ec      	b.n	80098b8 <_malloc_r+0xa0>
 80098de:	4623      	mov	r3, r4
 80098e0:	6864      	ldr	r4, [r4, #4]
 80098e2:	e7b2      	b.n	800984a <_malloc_r+0x32>
 80098e4:	4634      	mov	r4, r6
 80098e6:	6876      	ldr	r6, [r6, #4]
 80098e8:	e7b9      	b.n	800985e <_malloc_r+0x46>
 80098ea:	230c      	movs	r3, #12
 80098ec:	603b      	str	r3, [r7, #0]
 80098ee:	4638      	mov	r0, r7
 80098f0:	f001 fea0 	bl	800b634 <__malloc_unlock>
 80098f4:	e7a1      	b.n	800983a <_malloc_r+0x22>
 80098f6:	6025      	str	r5, [r4, #0]
 80098f8:	e7de      	b.n	80098b8 <_malloc_r+0xa0>
 80098fa:	bf00      	nop
 80098fc:	2000b98c 	.word	0x2000b98c

08009900 <__ssputs_r>:
 8009900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009904:	688e      	ldr	r6, [r1, #8]
 8009906:	429e      	cmp	r6, r3
 8009908:	4682      	mov	sl, r0
 800990a:	460c      	mov	r4, r1
 800990c:	4690      	mov	r8, r2
 800990e:	461f      	mov	r7, r3
 8009910:	d838      	bhi.n	8009984 <__ssputs_r+0x84>
 8009912:	898a      	ldrh	r2, [r1, #12]
 8009914:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009918:	d032      	beq.n	8009980 <__ssputs_r+0x80>
 800991a:	6825      	ldr	r5, [r4, #0]
 800991c:	6909      	ldr	r1, [r1, #16]
 800991e:	eba5 0901 	sub.w	r9, r5, r1
 8009922:	6965      	ldr	r5, [r4, #20]
 8009924:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009928:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800992c:	3301      	adds	r3, #1
 800992e:	444b      	add	r3, r9
 8009930:	106d      	asrs	r5, r5, #1
 8009932:	429d      	cmp	r5, r3
 8009934:	bf38      	it	cc
 8009936:	461d      	movcc	r5, r3
 8009938:	0553      	lsls	r3, r2, #21
 800993a:	d531      	bpl.n	80099a0 <__ssputs_r+0xa0>
 800993c:	4629      	mov	r1, r5
 800993e:	f7ff ff6b 	bl	8009818 <_malloc_r>
 8009942:	4606      	mov	r6, r0
 8009944:	b950      	cbnz	r0, 800995c <__ssputs_r+0x5c>
 8009946:	230c      	movs	r3, #12
 8009948:	f8ca 3000 	str.w	r3, [sl]
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800995c:	6921      	ldr	r1, [r4, #16]
 800995e:	464a      	mov	r2, r9
 8009960:	f7ff fe6a 	bl	8009638 <memcpy>
 8009964:	89a3      	ldrh	r3, [r4, #12]
 8009966:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800996a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	6126      	str	r6, [r4, #16]
 8009972:	6165      	str	r5, [r4, #20]
 8009974:	444e      	add	r6, r9
 8009976:	eba5 0509 	sub.w	r5, r5, r9
 800997a:	6026      	str	r6, [r4, #0]
 800997c:	60a5      	str	r5, [r4, #8]
 800997e:	463e      	mov	r6, r7
 8009980:	42be      	cmp	r6, r7
 8009982:	d900      	bls.n	8009986 <__ssputs_r+0x86>
 8009984:	463e      	mov	r6, r7
 8009986:	6820      	ldr	r0, [r4, #0]
 8009988:	4632      	mov	r2, r6
 800998a:	4641      	mov	r1, r8
 800998c:	f7ff fe62 	bl	8009654 <memmove>
 8009990:	68a3      	ldr	r3, [r4, #8]
 8009992:	1b9b      	subs	r3, r3, r6
 8009994:	60a3      	str	r3, [r4, #8]
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	4433      	add	r3, r6
 800999a:	6023      	str	r3, [r4, #0]
 800999c:	2000      	movs	r0, #0
 800999e:	e7db      	b.n	8009958 <__ssputs_r+0x58>
 80099a0:	462a      	mov	r2, r5
 80099a2:	f002 f9d1 	bl	800bd48 <_realloc_r>
 80099a6:	4606      	mov	r6, r0
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d1e1      	bne.n	8009970 <__ssputs_r+0x70>
 80099ac:	6921      	ldr	r1, [r4, #16]
 80099ae:	4650      	mov	r0, sl
 80099b0:	f7ff fe92 	bl	80096d8 <_free_r>
 80099b4:	e7c7      	b.n	8009946 <__ssputs_r+0x46>
	...

080099b8 <_svfiprintf_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	4698      	mov	r8, r3
 80099be:	898b      	ldrh	r3, [r1, #12]
 80099c0:	061b      	lsls	r3, r3, #24
 80099c2:	b09d      	sub	sp, #116	; 0x74
 80099c4:	4607      	mov	r7, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	4614      	mov	r4, r2
 80099ca:	d50e      	bpl.n	80099ea <_svfiprintf_r+0x32>
 80099cc:	690b      	ldr	r3, [r1, #16]
 80099ce:	b963      	cbnz	r3, 80099ea <_svfiprintf_r+0x32>
 80099d0:	2140      	movs	r1, #64	; 0x40
 80099d2:	f7ff ff21 	bl	8009818 <_malloc_r>
 80099d6:	6028      	str	r0, [r5, #0]
 80099d8:	6128      	str	r0, [r5, #16]
 80099da:	b920      	cbnz	r0, 80099e6 <_svfiprintf_r+0x2e>
 80099dc:	230c      	movs	r3, #12
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099e4:	e0d1      	b.n	8009b8a <_svfiprintf_r+0x1d2>
 80099e6:	2340      	movs	r3, #64	; 0x40
 80099e8:	616b      	str	r3, [r5, #20]
 80099ea:	2300      	movs	r3, #0
 80099ec:	9309      	str	r3, [sp, #36]	; 0x24
 80099ee:	2320      	movs	r3, #32
 80099f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f8:	2330      	movs	r3, #48	; 0x30
 80099fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ba4 <_svfiprintf_r+0x1ec>
 80099fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a02:	f04f 0901 	mov.w	r9, #1
 8009a06:	4623      	mov	r3, r4
 8009a08:	469a      	mov	sl, r3
 8009a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a0e:	b10a      	cbz	r2, 8009a14 <_svfiprintf_r+0x5c>
 8009a10:	2a25      	cmp	r2, #37	; 0x25
 8009a12:	d1f9      	bne.n	8009a08 <_svfiprintf_r+0x50>
 8009a14:	ebba 0b04 	subs.w	fp, sl, r4
 8009a18:	d00b      	beq.n	8009a32 <_svfiprintf_r+0x7a>
 8009a1a:	465b      	mov	r3, fp
 8009a1c:	4622      	mov	r2, r4
 8009a1e:	4629      	mov	r1, r5
 8009a20:	4638      	mov	r0, r7
 8009a22:	f7ff ff6d 	bl	8009900 <__ssputs_r>
 8009a26:	3001      	adds	r0, #1
 8009a28:	f000 80aa 	beq.w	8009b80 <_svfiprintf_r+0x1c8>
 8009a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a2e:	445a      	add	r2, fp
 8009a30:	9209      	str	r2, [sp, #36]	; 0x24
 8009a32:	f89a 3000 	ldrb.w	r3, [sl]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80a2 	beq.w	8009b80 <_svfiprintf_r+0x1c8>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a46:	f10a 0a01 	add.w	sl, sl, #1
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	9307      	str	r3, [sp, #28]
 8009a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a52:	931a      	str	r3, [sp, #104]	; 0x68
 8009a54:	4654      	mov	r4, sl
 8009a56:	2205      	movs	r2, #5
 8009a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a5c:	4851      	ldr	r0, [pc, #324]	; (8009ba4 <_svfiprintf_r+0x1ec>)
 8009a5e:	f7f6 fbdf 	bl	8000220 <memchr>
 8009a62:	9a04      	ldr	r2, [sp, #16]
 8009a64:	b9d8      	cbnz	r0, 8009a9e <_svfiprintf_r+0xe6>
 8009a66:	06d0      	lsls	r0, r2, #27
 8009a68:	bf44      	itt	mi
 8009a6a:	2320      	movmi	r3, #32
 8009a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a70:	0711      	lsls	r1, r2, #28
 8009a72:	bf44      	itt	mi
 8009a74:	232b      	movmi	r3, #43	; 0x2b
 8009a76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a7a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a80:	d015      	beq.n	8009aae <_svfiprintf_r+0xf6>
 8009a82:	9a07      	ldr	r2, [sp, #28]
 8009a84:	4654      	mov	r4, sl
 8009a86:	2000      	movs	r0, #0
 8009a88:	f04f 0c0a 	mov.w	ip, #10
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a92:	3b30      	subs	r3, #48	; 0x30
 8009a94:	2b09      	cmp	r3, #9
 8009a96:	d94e      	bls.n	8009b36 <_svfiprintf_r+0x17e>
 8009a98:	b1b0      	cbz	r0, 8009ac8 <_svfiprintf_r+0x110>
 8009a9a:	9207      	str	r2, [sp, #28]
 8009a9c:	e014      	b.n	8009ac8 <_svfiprintf_r+0x110>
 8009a9e:	eba0 0308 	sub.w	r3, r0, r8
 8009aa2:	fa09 f303 	lsl.w	r3, r9, r3
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	46a2      	mov	sl, r4
 8009aac:	e7d2      	b.n	8009a54 <_svfiprintf_r+0x9c>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	1d19      	adds	r1, r3, #4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	9103      	str	r1, [sp, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	bfbb      	ittet	lt
 8009aba:	425b      	neglt	r3, r3
 8009abc:	f042 0202 	orrlt.w	r2, r2, #2
 8009ac0:	9307      	strge	r3, [sp, #28]
 8009ac2:	9307      	strlt	r3, [sp, #28]
 8009ac4:	bfb8      	it	lt
 8009ac6:	9204      	strlt	r2, [sp, #16]
 8009ac8:	7823      	ldrb	r3, [r4, #0]
 8009aca:	2b2e      	cmp	r3, #46	; 0x2e
 8009acc:	d10c      	bne.n	8009ae8 <_svfiprintf_r+0x130>
 8009ace:	7863      	ldrb	r3, [r4, #1]
 8009ad0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ad2:	d135      	bne.n	8009b40 <_svfiprintf_r+0x188>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	1d1a      	adds	r2, r3, #4
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	9203      	str	r2, [sp, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	bfb8      	it	lt
 8009ae0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009ae4:	3402      	adds	r4, #2
 8009ae6:	9305      	str	r3, [sp, #20]
 8009ae8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009bb4 <_svfiprintf_r+0x1fc>
 8009aec:	7821      	ldrb	r1, [r4, #0]
 8009aee:	2203      	movs	r2, #3
 8009af0:	4650      	mov	r0, sl
 8009af2:	f7f6 fb95 	bl	8000220 <memchr>
 8009af6:	b140      	cbz	r0, 8009b0a <_svfiprintf_r+0x152>
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	eba0 000a 	sub.w	r0, r0, sl
 8009afe:	fa03 f000 	lsl.w	r0, r3, r0
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	4303      	orrs	r3, r0
 8009b06:	3401      	adds	r4, #1
 8009b08:	9304      	str	r3, [sp, #16]
 8009b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0e:	4826      	ldr	r0, [pc, #152]	; (8009ba8 <_svfiprintf_r+0x1f0>)
 8009b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b14:	2206      	movs	r2, #6
 8009b16:	f7f6 fb83 	bl	8000220 <memchr>
 8009b1a:	2800      	cmp	r0, #0
 8009b1c:	d038      	beq.n	8009b90 <_svfiprintf_r+0x1d8>
 8009b1e:	4b23      	ldr	r3, [pc, #140]	; (8009bac <_svfiprintf_r+0x1f4>)
 8009b20:	bb1b      	cbnz	r3, 8009b6a <_svfiprintf_r+0x1b2>
 8009b22:	9b03      	ldr	r3, [sp, #12]
 8009b24:	3307      	adds	r3, #7
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	3308      	adds	r3, #8
 8009b2c:	9303      	str	r3, [sp, #12]
 8009b2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b30:	4433      	add	r3, r6
 8009b32:	9309      	str	r3, [sp, #36]	; 0x24
 8009b34:	e767      	b.n	8009a06 <_svfiprintf_r+0x4e>
 8009b36:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b3a:	460c      	mov	r4, r1
 8009b3c:	2001      	movs	r0, #1
 8009b3e:	e7a5      	b.n	8009a8c <_svfiprintf_r+0xd4>
 8009b40:	2300      	movs	r3, #0
 8009b42:	3401      	adds	r4, #1
 8009b44:	9305      	str	r3, [sp, #20]
 8009b46:	4619      	mov	r1, r3
 8009b48:	f04f 0c0a 	mov.w	ip, #10
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b52:	3a30      	subs	r2, #48	; 0x30
 8009b54:	2a09      	cmp	r2, #9
 8009b56:	d903      	bls.n	8009b60 <_svfiprintf_r+0x1a8>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d0c5      	beq.n	8009ae8 <_svfiprintf_r+0x130>
 8009b5c:	9105      	str	r1, [sp, #20]
 8009b5e:	e7c3      	b.n	8009ae8 <_svfiprintf_r+0x130>
 8009b60:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b64:	4604      	mov	r4, r0
 8009b66:	2301      	movs	r3, #1
 8009b68:	e7f0      	b.n	8009b4c <_svfiprintf_r+0x194>
 8009b6a:	ab03      	add	r3, sp, #12
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	462a      	mov	r2, r5
 8009b70:	4b0f      	ldr	r3, [pc, #60]	; (8009bb0 <_svfiprintf_r+0x1f8>)
 8009b72:	a904      	add	r1, sp, #16
 8009b74:	4638      	mov	r0, r7
 8009b76:	f000 f8bf 	bl	8009cf8 <_printf_float>
 8009b7a:	1c42      	adds	r2, r0, #1
 8009b7c:	4606      	mov	r6, r0
 8009b7e:	d1d6      	bne.n	8009b2e <_svfiprintf_r+0x176>
 8009b80:	89ab      	ldrh	r3, [r5, #12]
 8009b82:	065b      	lsls	r3, r3, #25
 8009b84:	f53f af2c 	bmi.w	80099e0 <_svfiprintf_r+0x28>
 8009b88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b8a:	b01d      	add	sp, #116	; 0x74
 8009b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4b06      	ldr	r3, [pc, #24]	; (8009bb0 <_svfiprintf_r+0x1f8>)
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f000 fb50 	bl	800a240 <_printf_i>
 8009ba0:	e7eb      	b.n	8009b7a <_svfiprintf_r+0x1c2>
 8009ba2:	bf00      	nop
 8009ba4:	0800d820 	.word	0x0800d820
 8009ba8:	0800d82a 	.word	0x0800d82a
 8009bac:	08009cf9 	.word	0x08009cf9
 8009bb0:	08009901 	.word	0x08009901
 8009bb4:	0800d826 	.word	0x0800d826

08009bb8 <__cvt>:
 8009bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bbc:	ec55 4b10 	vmov	r4, r5, d0
 8009bc0:	2d00      	cmp	r5, #0
 8009bc2:	460e      	mov	r6, r1
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	bfbb      	ittet	lt
 8009bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009bce:	461d      	movlt	r5, r3
 8009bd0:	2300      	movge	r3, #0
 8009bd2:	232d      	movlt	r3, #45	; 0x2d
 8009bd4:	700b      	strb	r3, [r1, #0]
 8009bd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009bdc:	4691      	mov	r9, r2
 8009bde:	f023 0820 	bic.w	r8, r3, #32
 8009be2:	bfbc      	itt	lt
 8009be4:	4622      	movlt	r2, r4
 8009be6:	4614      	movlt	r4, r2
 8009be8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009bec:	d005      	beq.n	8009bfa <__cvt+0x42>
 8009bee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009bf2:	d100      	bne.n	8009bf6 <__cvt+0x3e>
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	e000      	b.n	8009bfc <__cvt+0x44>
 8009bfa:	2103      	movs	r1, #3
 8009bfc:	ab03      	add	r3, sp, #12
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	ab02      	add	r3, sp, #8
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	ec45 4b10 	vmov	d0, r4, r5
 8009c08:	4653      	mov	r3, sl
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	f000 fe08 	bl	800a820 <_dtoa_r>
 8009c10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c14:	4607      	mov	r7, r0
 8009c16:	d102      	bne.n	8009c1e <__cvt+0x66>
 8009c18:	f019 0f01 	tst.w	r9, #1
 8009c1c:	d022      	beq.n	8009c64 <__cvt+0xac>
 8009c1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c22:	eb07 0906 	add.w	r9, r7, r6
 8009c26:	d110      	bne.n	8009c4a <__cvt+0x92>
 8009c28:	783b      	ldrb	r3, [r7, #0]
 8009c2a:	2b30      	cmp	r3, #48	; 0x30
 8009c2c:	d10a      	bne.n	8009c44 <__cvt+0x8c>
 8009c2e:	2200      	movs	r2, #0
 8009c30:	2300      	movs	r3, #0
 8009c32:	4620      	mov	r0, r4
 8009c34:	4629      	mov	r1, r5
 8009c36:	f7f6 ff67 	bl	8000b08 <__aeabi_dcmpeq>
 8009c3a:	b918      	cbnz	r0, 8009c44 <__cvt+0x8c>
 8009c3c:	f1c6 0601 	rsb	r6, r6, #1
 8009c40:	f8ca 6000 	str.w	r6, [sl]
 8009c44:	f8da 3000 	ldr.w	r3, [sl]
 8009c48:	4499      	add	r9, r3
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4629      	mov	r1, r5
 8009c52:	f7f6 ff59 	bl	8000b08 <__aeabi_dcmpeq>
 8009c56:	b108      	cbz	r0, 8009c5c <__cvt+0xa4>
 8009c58:	f8cd 900c 	str.w	r9, [sp, #12]
 8009c5c:	2230      	movs	r2, #48	; 0x30
 8009c5e:	9b03      	ldr	r3, [sp, #12]
 8009c60:	454b      	cmp	r3, r9
 8009c62:	d307      	bcc.n	8009c74 <__cvt+0xbc>
 8009c64:	9b03      	ldr	r3, [sp, #12]
 8009c66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c68:	1bdb      	subs	r3, r3, r7
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	b004      	add	sp, #16
 8009c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c74:	1c59      	adds	r1, r3, #1
 8009c76:	9103      	str	r1, [sp, #12]
 8009c78:	701a      	strb	r2, [r3, #0]
 8009c7a:	e7f0      	b.n	8009c5e <__cvt+0xa6>

08009c7c <__exponent>:
 8009c7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2900      	cmp	r1, #0
 8009c82:	bfb8      	it	lt
 8009c84:	4249      	neglt	r1, r1
 8009c86:	f803 2b02 	strb.w	r2, [r3], #2
 8009c8a:	bfb4      	ite	lt
 8009c8c:	222d      	movlt	r2, #45	; 0x2d
 8009c8e:	222b      	movge	r2, #43	; 0x2b
 8009c90:	2909      	cmp	r1, #9
 8009c92:	7042      	strb	r2, [r0, #1]
 8009c94:	dd2a      	ble.n	8009cec <__exponent+0x70>
 8009c96:	f10d 0407 	add.w	r4, sp, #7
 8009c9a:	46a4      	mov	ip, r4
 8009c9c:	270a      	movs	r7, #10
 8009c9e:	46a6      	mov	lr, r4
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ca6:	fb07 1516 	mls	r5, r7, r6, r1
 8009caa:	3530      	adds	r5, #48	; 0x30
 8009cac:	2a63      	cmp	r2, #99	; 0x63
 8009cae:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009cb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	dcf1      	bgt.n	8009c9e <__exponent+0x22>
 8009cba:	3130      	adds	r1, #48	; 0x30
 8009cbc:	f1ae 0502 	sub.w	r5, lr, #2
 8009cc0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009cc4:	1c44      	adds	r4, r0, #1
 8009cc6:	4629      	mov	r1, r5
 8009cc8:	4561      	cmp	r1, ip
 8009cca:	d30a      	bcc.n	8009ce2 <__exponent+0x66>
 8009ccc:	f10d 0209 	add.w	r2, sp, #9
 8009cd0:	eba2 020e 	sub.w	r2, r2, lr
 8009cd4:	4565      	cmp	r5, ip
 8009cd6:	bf88      	it	hi
 8009cd8:	2200      	movhi	r2, #0
 8009cda:	4413      	add	r3, r2
 8009cdc:	1a18      	subs	r0, r3, r0
 8009cde:	b003      	add	sp, #12
 8009ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ce6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009cea:	e7ed      	b.n	8009cc8 <__exponent+0x4c>
 8009cec:	2330      	movs	r3, #48	; 0x30
 8009cee:	3130      	adds	r1, #48	; 0x30
 8009cf0:	7083      	strb	r3, [r0, #2]
 8009cf2:	70c1      	strb	r1, [r0, #3]
 8009cf4:	1d03      	adds	r3, r0, #4
 8009cf6:	e7f1      	b.n	8009cdc <__exponent+0x60>

08009cf8 <_printf_float>:
 8009cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cfc:	ed2d 8b02 	vpush	{d8}
 8009d00:	b08d      	sub	sp, #52	; 0x34
 8009d02:	460c      	mov	r4, r1
 8009d04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d08:	4616      	mov	r6, r2
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	f001 fc83 	bl	800b618 <_localeconv_r>
 8009d12:	f8d0 a000 	ldr.w	sl, [r0]
 8009d16:	4650      	mov	r0, sl
 8009d18:	f7f6 fa74 	bl	8000204 <strlen>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	f8d8 3000 	ldr.w	r3, [r8]
 8009d28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d2c:	3307      	adds	r3, #7
 8009d2e:	f023 0307 	bic.w	r3, r3, #7
 8009d32:	f103 0208 	add.w	r2, r3, #8
 8009d36:	f8c8 2000 	str.w	r2, [r8]
 8009d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009d50:	ee08 0a10 	vmov	s16, r0
 8009d54:	4b9f      	ldr	r3, [pc, #636]	; (8009fd4 <_printf_float+0x2dc>)
 8009d56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d5e:	f7f6 ff05 	bl	8000b6c <__aeabi_dcmpun>
 8009d62:	bb88      	cbnz	r0, 8009dc8 <_printf_float+0xd0>
 8009d64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d68:	4b9a      	ldr	r3, [pc, #616]	; (8009fd4 <_printf_float+0x2dc>)
 8009d6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d6e:	f7f6 fedf 	bl	8000b30 <__aeabi_dcmple>
 8009d72:	bb48      	cbnz	r0, 8009dc8 <_printf_float+0xd0>
 8009d74:	2200      	movs	r2, #0
 8009d76:	2300      	movs	r3, #0
 8009d78:	4640      	mov	r0, r8
 8009d7a:	4649      	mov	r1, r9
 8009d7c:	f7f6 fece 	bl	8000b1c <__aeabi_dcmplt>
 8009d80:	b110      	cbz	r0, 8009d88 <_printf_float+0x90>
 8009d82:	232d      	movs	r3, #45	; 0x2d
 8009d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d88:	4b93      	ldr	r3, [pc, #588]	; (8009fd8 <_printf_float+0x2e0>)
 8009d8a:	4894      	ldr	r0, [pc, #592]	; (8009fdc <_printf_float+0x2e4>)
 8009d8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009d90:	bf94      	ite	ls
 8009d92:	4698      	movls	r8, r3
 8009d94:	4680      	movhi	r8, r0
 8009d96:	2303      	movs	r3, #3
 8009d98:	6123      	str	r3, [r4, #16]
 8009d9a:	9b05      	ldr	r3, [sp, #20]
 8009d9c:	f023 0204 	bic.w	r2, r3, #4
 8009da0:	6022      	str	r2, [r4, #0]
 8009da2:	f04f 0900 	mov.w	r9, #0
 8009da6:	9700      	str	r7, [sp, #0]
 8009da8:	4633      	mov	r3, r6
 8009daa:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dac:	4621      	mov	r1, r4
 8009dae:	4628      	mov	r0, r5
 8009db0:	f000 f9d8 	bl	800a164 <_printf_common>
 8009db4:	3001      	adds	r0, #1
 8009db6:	f040 8090 	bne.w	8009eda <_printf_float+0x1e2>
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009dbe:	b00d      	add	sp, #52	; 0x34
 8009dc0:	ecbd 8b02 	vpop	{d8}
 8009dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc8:	4642      	mov	r2, r8
 8009dca:	464b      	mov	r3, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	4649      	mov	r1, r9
 8009dd0:	f7f6 fecc 	bl	8000b6c <__aeabi_dcmpun>
 8009dd4:	b140      	cbz	r0, 8009de8 <_printf_float+0xf0>
 8009dd6:	464b      	mov	r3, r9
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	bfbc      	itt	lt
 8009ddc:	232d      	movlt	r3, #45	; 0x2d
 8009dde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009de2:	487f      	ldr	r0, [pc, #508]	; (8009fe0 <_printf_float+0x2e8>)
 8009de4:	4b7f      	ldr	r3, [pc, #508]	; (8009fe4 <_printf_float+0x2ec>)
 8009de6:	e7d1      	b.n	8009d8c <_printf_float+0x94>
 8009de8:	6863      	ldr	r3, [r4, #4]
 8009dea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009dee:	9206      	str	r2, [sp, #24]
 8009df0:	1c5a      	adds	r2, r3, #1
 8009df2:	d13f      	bne.n	8009e74 <_printf_float+0x17c>
 8009df4:	2306      	movs	r3, #6
 8009df6:	6063      	str	r3, [r4, #4]
 8009df8:	9b05      	ldr	r3, [sp, #20]
 8009dfa:	6861      	ldr	r1, [r4, #4]
 8009dfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e00:	2300      	movs	r3, #0
 8009e02:	9303      	str	r3, [sp, #12]
 8009e04:	ab0a      	add	r3, sp, #40	; 0x28
 8009e06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e0a:	ab09      	add	r3, sp, #36	; 0x24
 8009e0c:	ec49 8b10 	vmov	d0, r8, r9
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	6022      	str	r2, [r4, #0]
 8009e14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e18:	4628      	mov	r0, r5
 8009e1a:	f7ff fecd 	bl	8009bb8 <__cvt>
 8009e1e:	9b06      	ldr	r3, [sp, #24]
 8009e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e22:	2b47      	cmp	r3, #71	; 0x47
 8009e24:	4680      	mov	r8, r0
 8009e26:	d108      	bne.n	8009e3a <_printf_float+0x142>
 8009e28:	1cc8      	adds	r0, r1, #3
 8009e2a:	db02      	blt.n	8009e32 <_printf_float+0x13a>
 8009e2c:	6863      	ldr	r3, [r4, #4]
 8009e2e:	4299      	cmp	r1, r3
 8009e30:	dd41      	ble.n	8009eb6 <_printf_float+0x1be>
 8009e32:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e36:	fa5f fb8b 	uxtb.w	fp, fp
 8009e3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e3e:	d820      	bhi.n	8009e82 <_printf_float+0x18a>
 8009e40:	3901      	subs	r1, #1
 8009e42:	465a      	mov	r2, fp
 8009e44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e48:	9109      	str	r1, [sp, #36]	; 0x24
 8009e4a:	f7ff ff17 	bl	8009c7c <__exponent>
 8009e4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e50:	1813      	adds	r3, r2, r0
 8009e52:	2a01      	cmp	r2, #1
 8009e54:	4681      	mov	r9, r0
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	dc02      	bgt.n	8009e60 <_printf_float+0x168>
 8009e5a:	6822      	ldr	r2, [r4, #0]
 8009e5c:	07d2      	lsls	r2, r2, #31
 8009e5e:	d501      	bpl.n	8009e64 <_printf_float+0x16c>
 8009e60:	3301      	adds	r3, #1
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d09c      	beq.n	8009da6 <_printf_float+0xae>
 8009e6c:	232d      	movs	r3, #45	; 0x2d
 8009e6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e72:	e798      	b.n	8009da6 <_printf_float+0xae>
 8009e74:	9a06      	ldr	r2, [sp, #24]
 8009e76:	2a47      	cmp	r2, #71	; 0x47
 8009e78:	d1be      	bne.n	8009df8 <_printf_float+0x100>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1bc      	bne.n	8009df8 <_printf_float+0x100>
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e7b9      	b.n	8009df6 <_printf_float+0xfe>
 8009e82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009e86:	d118      	bne.n	8009eba <_printf_float+0x1c2>
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	6863      	ldr	r3, [r4, #4]
 8009e8c:	dd0b      	ble.n	8009ea6 <_printf_float+0x1ae>
 8009e8e:	6121      	str	r1, [r4, #16]
 8009e90:	b913      	cbnz	r3, 8009e98 <_printf_float+0x1a0>
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	07d0      	lsls	r0, r2, #31
 8009e96:	d502      	bpl.n	8009e9e <_printf_float+0x1a6>
 8009e98:	3301      	adds	r3, #1
 8009e9a:	440b      	add	r3, r1
 8009e9c:	6123      	str	r3, [r4, #16]
 8009e9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ea0:	f04f 0900 	mov.w	r9, #0
 8009ea4:	e7de      	b.n	8009e64 <_printf_float+0x16c>
 8009ea6:	b913      	cbnz	r3, 8009eae <_printf_float+0x1b6>
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	07d2      	lsls	r2, r2, #31
 8009eac:	d501      	bpl.n	8009eb2 <_printf_float+0x1ba>
 8009eae:	3302      	adds	r3, #2
 8009eb0:	e7f4      	b.n	8009e9c <_printf_float+0x1a4>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e7f2      	b.n	8009e9c <_printf_float+0x1a4>
 8009eb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	db05      	blt.n	8009ecc <_printf_float+0x1d4>
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	6121      	str	r1, [r4, #16]
 8009ec4:	07d8      	lsls	r0, r3, #31
 8009ec6:	d5ea      	bpl.n	8009e9e <_printf_float+0x1a6>
 8009ec8:	1c4b      	adds	r3, r1, #1
 8009eca:	e7e7      	b.n	8009e9c <_printf_float+0x1a4>
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	bfd4      	ite	le
 8009ed0:	f1c1 0202 	rsble	r2, r1, #2
 8009ed4:	2201      	movgt	r2, #1
 8009ed6:	4413      	add	r3, r2
 8009ed8:	e7e0      	b.n	8009e9c <_printf_float+0x1a4>
 8009eda:	6823      	ldr	r3, [r4, #0]
 8009edc:	055a      	lsls	r2, r3, #21
 8009ede:	d407      	bmi.n	8009ef0 <_printf_float+0x1f8>
 8009ee0:	6923      	ldr	r3, [r4, #16]
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	4631      	mov	r1, r6
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	47b8      	blx	r7
 8009eea:	3001      	adds	r0, #1
 8009eec:	d12c      	bne.n	8009f48 <_printf_float+0x250>
 8009eee:	e764      	b.n	8009dba <_printf_float+0xc2>
 8009ef0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ef4:	f240 80e0 	bls.w	800a0b8 <_printf_float+0x3c0>
 8009ef8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009efc:	2200      	movs	r2, #0
 8009efe:	2300      	movs	r3, #0
 8009f00:	f7f6 fe02 	bl	8000b08 <__aeabi_dcmpeq>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	d034      	beq.n	8009f72 <_printf_float+0x27a>
 8009f08:	4a37      	ldr	r2, [pc, #220]	; (8009fe8 <_printf_float+0x2f0>)
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	4628      	mov	r0, r5
 8009f10:	47b8      	blx	r7
 8009f12:	3001      	adds	r0, #1
 8009f14:	f43f af51 	beq.w	8009dba <_printf_float+0xc2>
 8009f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	db02      	blt.n	8009f26 <_printf_float+0x22e>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	07d8      	lsls	r0, r3, #31
 8009f24:	d510      	bpl.n	8009f48 <_printf_float+0x250>
 8009f26:	ee18 3a10 	vmov	r3, s16
 8009f2a:	4652      	mov	r2, sl
 8009f2c:	4631      	mov	r1, r6
 8009f2e:	4628      	mov	r0, r5
 8009f30:	47b8      	blx	r7
 8009f32:	3001      	adds	r0, #1
 8009f34:	f43f af41 	beq.w	8009dba <_printf_float+0xc2>
 8009f38:	f04f 0800 	mov.w	r8, #0
 8009f3c:	f104 091a 	add.w	r9, r4, #26
 8009f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f42:	3b01      	subs	r3, #1
 8009f44:	4543      	cmp	r3, r8
 8009f46:	dc09      	bgt.n	8009f5c <_printf_float+0x264>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	079b      	lsls	r3, r3, #30
 8009f4c:	f100 8105 	bmi.w	800a15a <_printf_float+0x462>
 8009f50:	68e0      	ldr	r0, [r4, #12]
 8009f52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f54:	4298      	cmp	r0, r3
 8009f56:	bfb8      	it	lt
 8009f58:	4618      	movlt	r0, r3
 8009f5a:	e730      	b.n	8009dbe <_printf_float+0xc6>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	464a      	mov	r2, r9
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	f43f af27 	beq.w	8009dba <_printf_float+0xc2>
 8009f6c:	f108 0801 	add.w	r8, r8, #1
 8009f70:	e7e6      	b.n	8009f40 <_printf_float+0x248>
 8009f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dc39      	bgt.n	8009fec <_printf_float+0x2f4>
 8009f78:	4a1b      	ldr	r2, [pc, #108]	; (8009fe8 <_printf_float+0x2f0>)
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	f43f af19 	beq.w	8009dba <_printf_float+0xc2>
 8009f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	d102      	bne.n	8009f96 <_printf_float+0x29e>
 8009f90:	6823      	ldr	r3, [r4, #0]
 8009f92:	07d9      	lsls	r1, r3, #31
 8009f94:	d5d8      	bpl.n	8009f48 <_printf_float+0x250>
 8009f96:	ee18 3a10 	vmov	r3, s16
 8009f9a:	4652      	mov	r2, sl
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	47b8      	blx	r7
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	f43f af09 	beq.w	8009dba <_printf_float+0xc2>
 8009fa8:	f04f 0900 	mov.w	r9, #0
 8009fac:	f104 0a1a 	add.w	sl, r4, #26
 8009fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb2:	425b      	negs	r3, r3
 8009fb4:	454b      	cmp	r3, r9
 8009fb6:	dc01      	bgt.n	8009fbc <_printf_float+0x2c4>
 8009fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fba:	e792      	b.n	8009ee2 <_printf_float+0x1ea>
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	4652      	mov	r2, sl
 8009fc0:	4631      	mov	r1, r6
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	47b8      	blx	r7
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	f43f aef7 	beq.w	8009dba <_printf_float+0xc2>
 8009fcc:	f109 0901 	add.w	r9, r9, #1
 8009fd0:	e7ee      	b.n	8009fb0 <_printf_float+0x2b8>
 8009fd2:	bf00      	nop
 8009fd4:	7fefffff 	.word	0x7fefffff
 8009fd8:	0800d831 	.word	0x0800d831
 8009fdc:	0800d835 	.word	0x0800d835
 8009fe0:	0800d83d 	.word	0x0800d83d
 8009fe4:	0800d839 	.word	0x0800d839
 8009fe8:	0800d841 	.word	0x0800d841
 8009fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	bfa8      	it	ge
 8009ff4:	461a      	movge	r2, r3
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	4691      	mov	r9, r2
 8009ffa:	dc37      	bgt.n	800a06c <_printf_float+0x374>
 8009ffc:	f04f 0b00 	mov.w	fp, #0
 800a000:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a004:	f104 021a 	add.w	r2, r4, #26
 800a008:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	eba3 0309 	sub.w	r3, r3, r9
 800a010:	455b      	cmp	r3, fp
 800a012:	dc33      	bgt.n	800a07c <_printf_float+0x384>
 800a014:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a018:	429a      	cmp	r2, r3
 800a01a:	db3b      	blt.n	800a094 <_printf_float+0x39c>
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	07da      	lsls	r2, r3, #31
 800a020:	d438      	bmi.n	800a094 <_printf_float+0x39c>
 800a022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a024:	9a05      	ldr	r2, [sp, #20]
 800a026:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a028:	1a9a      	subs	r2, r3, r2
 800a02a:	eba3 0901 	sub.w	r9, r3, r1
 800a02e:	4591      	cmp	r9, r2
 800a030:	bfa8      	it	ge
 800a032:	4691      	movge	r9, r2
 800a034:	f1b9 0f00 	cmp.w	r9, #0
 800a038:	dc35      	bgt.n	800a0a6 <_printf_float+0x3ae>
 800a03a:	f04f 0800 	mov.w	r8, #0
 800a03e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a042:	f104 0a1a 	add.w	sl, r4, #26
 800a046:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a04a:	1a9b      	subs	r3, r3, r2
 800a04c:	eba3 0309 	sub.w	r3, r3, r9
 800a050:	4543      	cmp	r3, r8
 800a052:	f77f af79 	ble.w	8009f48 <_printf_float+0x250>
 800a056:	2301      	movs	r3, #1
 800a058:	4652      	mov	r2, sl
 800a05a:	4631      	mov	r1, r6
 800a05c:	4628      	mov	r0, r5
 800a05e:	47b8      	blx	r7
 800a060:	3001      	adds	r0, #1
 800a062:	f43f aeaa 	beq.w	8009dba <_printf_float+0xc2>
 800a066:	f108 0801 	add.w	r8, r8, #1
 800a06a:	e7ec      	b.n	800a046 <_printf_float+0x34e>
 800a06c:	4613      	mov	r3, r2
 800a06e:	4631      	mov	r1, r6
 800a070:	4642      	mov	r2, r8
 800a072:	4628      	mov	r0, r5
 800a074:	47b8      	blx	r7
 800a076:	3001      	adds	r0, #1
 800a078:	d1c0      	bne.n	8009ffc <_printf_float+0x304>
 800a07a:	e69e      	b.n	8009dba <_printf_float+0xc2>
 800a07c:	2301      	movs	r3, #1
 800a07e:	4631      	mov	r1, r6
 800a080:	4628      	mov	r0, r5
 800a082:	9205      	str	r2, [sp, #20]
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f ae97 	beq.w	8009dba <_printf_float+0xc2>
 800a08c:	9a05      	ldr	r2, [sp, #20]
 800a08e:	f10b 0b01 	add.w	fp, fp, #1
 800a092:	e7b9      	b.n	800a008 <_printf_float+0x310>
 800a094:	ee18 3a10 	vmov	r3, s16
 800a098:	4652      	mov	r2, sl
 800a09a:	4631      	mov	r1, r6
 800a09c:	4628      	mov	r0, r5
 800a09e:	47b8      	blx	r7
 800a0a0:	3001      	adds	r0, #1
 800a0a2:	d1be      	bne.n	800a022 <_printf_float+0x32a>
 800a0a4:	e689      	b.n	8009dba <_printf_float+0xc2>
 800a0a6:	9a05      	ldr	r2, [sp, #20]
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	4442      	add	r2, r8
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d1c1      	bne.n	800a03a <_printf_float+0x342>
 800a0b6:	e680      	b.n	8009dba <_printf_float+0xc2>
 800a0b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ba:	2a01      	cmp	r2, #1
 800a0bc:	dc01      	bgt.n	800a0c2 <_printf_float+0x3ca>
 800a0be:	07db      	lsls	r3, r3, #31
 800a0c0:	d538      	bpl.n	800a134 <_printf_float+0x43c>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4642      	mov	r2, r8
 800a0c6:	4631      	mov	r1, r6
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	47b8      	blx	r7
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	f43f ae74 	beq.w	8009dba <_printf_float+0xc2>
 800a0d2:	ee18 3a10 	vmov	r3, s16
 800a0d6:	4652      	mov	r2, sl
 800a0d8:	4631      	mov	r1, r6
 800a0da:	4628      	mov	r0, r5
 800a0dc:	47b8      	blx	r7
 800a0de:	3001      	adds	r0, #1
 800a0e0:	f43f ae6b 	beq.w	8009dba <_printf_float+0xc2>
 800a0e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	f7f6 fd0c 	bl	8000b08 <__aeabi_dcmpeq>
 800a0f0:	b9d8      	cbnz	r0, 800a12a <_printf_float+0x432>
 800a0f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0f4:	f108 0201 	add.w	r2, r8, #1
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b8      	blx	r7
 800a100:	3001      	adds	r0, #1
 800a102:	d10e      	bne.n	800a122 <_printf_float+0x42a>
 800a104:	e659      	b.n	8009dba <_printf_float+0xc2>
 800a106:	2301      	movs	r3, #1
 800a108:	4652      	mov	r2, sl
 800a10a:	4631      	mov	r1, r6
 800a10c:	4628      	mov	r0, r5
 800a10e:	47b8      	blx	r7
 800a110:	3001      	adds	r0, #1
 800a112:	f43f ae52 	beq.w	8009dba <_printf_float+0xc2>
 800a116:	f108 0801 	add.w	r8, r8, #1
 800a11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11c:	3b01      	subs	r3, #1
 800a11e:	4543      	cmp	r3, r8
 800a120:	dcf1      	bgt.n	800a106 <_printf_float+0x40e>
 800a122:	464b      	mov	r3, r9
 800a124:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a128:	e6dc      	b.n	8009ee4 <_printf_float+0x1ec>
 800a12a:	f04f 0800 	mov.w	r8, #0
 800a12e:	f104 0a1a 	add.w	sl, r4, #26
 800a132:	e7f2      	b.n	800a11a <_printf_float+0x422>
 800a134:	2301      	movs	r3, #1
 800a136:	4642      	mov	r2, r8
 800a138:	e7df      	b.n	800a0fa <_printf_float+0x402>
 800a13a:	2301      	movs	r3, #1
 800a13c:	464a      	mov	r2, r9
 800a13e:	4631      	mov	r1, r6
 800a140:	4628      	mov	r0, r5
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f ae38 	beq.w	8009dba <_printf_float+0xc2>
 800a14a:	f108 0801 	add.w	r8, r8, #1
 800a14e:	68e3      	ldr	r3, [r4, #12]
 800a150:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a152:	1a5b      	subs	r3, r3, r1
 800a154:	4543      	cmp	r3, r8
 800a156:	dcf0      	bgt.n	800a13a <_printf_float+0x442>
 800a158:	e6fa      	b.n	8009f50 <_printf_float+0x258>
 800a15a:	f04f 0800 	mov.w	r8, #0
 800a15e:	f104 0919 	add.w	r9, r4, #25
 800a162:	e7f4      	b.n	800a14e <_printf_float+0x456>

0800a164 <_printf_common>:
 800a164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a168:	4616      	mov	r6, r2
 800a16a:	4699      	mov	r9, r3
 800a16c:	688a      	ldr	r2, [r1, #8]
 800a16e:	690b      	ldr	r3, [r1, #16]
 800a170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a174:	4293      	cmp	r3, r2
 800a176:	bfb8      	it	lt
 800a178:	4613      	movlt	r3, r2
 800a17a:	6033      	str	r3, [r6, #0]
 800a17c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a180:	4607      	mov	r7, r0
 800a182:	460c      	mov	r4, r1
 800a184:	b10a      	cbz	r2, 800a18a <_printf_common+0x26>
 800a186:	3301      	adds	r3, #1
 800a188:	6033      	str	r3, [r6, #0]
 800a18a:	6823      	ldr	r3, [r4, #0]
 800a18c:	0699      	lsls	r1, r3, #26
 800a18e:	bf42      	ittt	mi
 800a190:	6833      	ldrmi	r3, [r6, #0]
 800a192:	3302      	addmi	r3, #2
 800a194:	6033      	strmi	r3, [r6, #0]
 800a196:	6825      	ldr	r5, [r4, #0]
 800a198:	f015 0506 	ands.w	r5, r5, #6
 800a19c:	d106      	bne.n	800a1ac <_printf_common+0x48>
 800a19e:	f104 0a19 	add.w	sl, r4, #25
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	6832      	ldr	r2, [r6, #0]
 800a1a6:	1a9b      	subs	r3, r3, r2
 800a1a8:	42ab      	cmp	r3, r5
 800a1aa:	dc26      	bgt.n	800a1fa <_printf_common+0x96>
 800a1ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1b0:	1e13      	subs	r3, r2, #0
 800a1b2:	6822      	ldr	r2, [r4, #0]
 800a1b4:	bf18      	it	ne
 800a1b6:	2301      	movne	r3, #1
 800a1b8:	0692      	lsls	r2, r2, #26
 800a1ba:	d42b      	bmi.n	800a214 <_printf_common+0xb0>
 800a1bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	4638      	mov	r0, r7
 800a1c4:	47c0      	blx	r8
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d01e      	beq.n	800a208 <_printf_common+0xa4>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	68e5      	ldr	r5, [r4, #12]
 800a1ce:	6832      	ldr	r2, [r6, #0]
 800a1d0:	f003 0306 	and.w	r3, r3, #6
 800a1d4:	2b04      	cmp	r3, #4
 800a1d6:	bf08      	it	eq
 800a1d8:	1aad      	subeq	r5, r5, r2
 800a1da:	68a3      	ldr	r3, [r4, #8]
 800a1dc:	6922      	ldr	r2, [r4, #16]
 800a1de:	bf0c      	ite	eq
 800a1e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1e4:	2500      	movne	r5, #0
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	bfc4      	itt	gt
 800a1ea:	1a9b      	subgt	r3, r3, r2
 800a1ec:	18ed      	addgt	r5, r5, r3
 800a1ee:	2600      	movs	r6, #0
 800a1f0:	341a      	adds	r4, #26
 800a1f2:	42b5      	cmp	r5, r6
 800a1f4:	d11a      	bne.n	800a22c <_printf_common+0xc8>
 800a1f6:	2000      	movs	r0, #0
 800a1f8:	e008      	b.n	800a20c <_printf_common+0xa8>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	4652      	mov	r2, sl
 800a1fe:	4649      	mov	r1, r9
 800a200:	4638      	mov	r0, r7
 800a202:	47c0      	blx	r8
 800a204:	3001      	adds	r0, #1
 800a206:	d103      	bne.n	800a210 <_printf_common+0xac>
 800a208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a210:	3501      	adds	r5, #1
 800a212:	e7c6      	b.n	800a1a2 <_printf_common+0x3e>
 800a214:	18e1      	adds	r1, r4, r3
 800a216:	1c5a      	adds	r2, r3, #1
 800a218:	2030      	movs	r0, #48	; 0x30
 800a21a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a21e:	4422      	add	r2, r4
 800a220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a228:	3302      	adds	r3, #2
 800a22a:	e7c7      	b.n	800a1bc <_printf_common+0x58>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4622      	mov	r2, r4
 800a230:	4649      	mov	r1, r9
 800a232:	4638      	mov	r0, r7
 800a234:	47c0      	blx	r8
 800a236:	3001      	adds	r0, #1
 800a238:	d0e6      	beq.n	800a208 <_printf_common+0xa4>
 800a23a:	3601      	adds	r6, #1
 800a23c:	e7d9      	b.n	800a1f2 <_printf_common+0x8e>
	...

0800a240 <_printf_i>:
 800a240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a244:	7e0f      	ldrb	r7, [r1, #24]
 800a246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a248:	2f78      	cmp	r7, #120	; 0x78
 800a24a:	4691      	mov	r9, r2
 800a24c:	4680      	mov	r8, r0
 800a24e:	460c      	mov	r4, r1
 800a250:	469a      	mov	sl, r3
 800a252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a256:	d807      	bhi.n	800a268 <_printf_i+0x28>
 800a258:	2f62      	cmp	r7, #98	; 0x62
 800a25a:	d80a      	bhi.n	800a272 <_printf_i+0x32>
 800a25c:	2f00      	cmp	r7, #0
 800a25e:	f000 80d8 	beq.w	800a412 <_printf_i+0x1d2>
 800a262:	2f58      	cmp	r7, #88	; 0x58
 800a264:	f000 80a3 	beq.w	800a3ae <_printf_i+0x16e>
 800a268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a26c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a270:	e03a      	b.n	800a2e8 <_printf_i+0xa8>
 800a272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a276:	2b15      	cmp	r3, #21
 800a278:	d8f6      	bhi.n	800a268 <_printf_i+0x28>
 800a27a:	a101      	add	r1, pc, #4	; (adr r1, 800a280 <_printf_i+0x40>)
 800a27c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a280:	0800a2d9 	.word	0x0800a2d9
 800a284:	0800a2ed 	.word	0x0800a2ed
 800a288:	0800a269 	.word	0x0800a269
 800a28c:	0800a269 	.word	0x0800a269
 800a290:	0800a269 	.word	0x0800a269
 800a294:	0800a269 	.word	0x0800a269
 800a298:	0800a2ed 	.word	0x0800a2ed
 800a29c:	0800a269 	.word	0x0800a269
 800a2a0:	0800a269 	.word	0x0800a269
 800a2a4:	0800a269 	.word	0x0800a269
 800a2a8:	0800a269 	.word	0x0800a269
 800a2ac:	0800a3f9 	.word	0x0800a3f9
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a3db 	.word	0x0800a3db
 800a2b8:	0800a269 	.word	0x0800a269
 800a2bc:	0800a269 	.word	0x0800a269
 800a2c0:	0800a41b 	.word	0x0800a41b
 800a2c4:	0800a269 	.word	0x0800a269
 800a2c8:	0800a31d 	.word	0x0800a31d
 800a2cc:	0800a269 	.word	0x0800a269
 800a2d0:	0800a269 	.word	0x0800a269
 800a2d4:	0800a3e3 	.word	0x0800a3e3
 800a2d8:	682b      	ldr	r3, [r5, #0]
 800a2da:	1d1a      	adds	r2, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	602a      	str	r2, [r5, #0]
 800a2e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	e0a3      	b.n	800a434 <_printf_i+0x1f4>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	6829      	ldr	r1, [r5, #0]
 800a2f0:	0606      	lsls	r6, r0, #24
 800a2f2:	f101 0304 	add.w	r3, r1, #4
 800a2f6:	d50a      	bpl.n	800a30e <_printf_i+0xce>
 800a2f8:	680e      	ldr	r6, [r1, #0]
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	2e00      	cmp	r6, #0
 800a2fe:	da03      	bge.n	800a308 <_printf_i+0xc8>
 800a300:	232d      	movs	r3, #45	; 0x2d
 800a302:	4276      	negs	r6, r6
 800a304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a308:	485e      	ldr	r0, [pc, #376]	; (800a484 <_printf_i+0x244>)
 800a30a:	230a      	movs	r3, #10
 800a30c:	e019      	b.n	800a342 <_printf_i+0x102>
 800a30e:	680e      	ldr	r6, [r1, #0]
 800a310:	602b      	str	r3, [r5, #0]
 800a312:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a316:	bf18      	it	ne
 800a318:	b236      	sxthne	r6, r6
 800a31a:	e7ef      	b.n	800a2fc <_printf_i+0xbc>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	6820      	ldr	r0, [r4, #0]
 800a320:	1d19      	adds	r1, r3, #4
 800a322:	6029      	str	r1, [r5, #0]
 800a324:	0601      	lsls	r1, r0, #24
 800a326:	d501      	bpl.n	800a32c <_printf_i+0xec>
 800a328:	681e      	ldr	r6, [r3, #0]
 800a32a:	e002      	b.n	800a332 <_printf_i+0xf2>
 800a32c:	0646      	lsls	r6, r0, #25
 800a32e:	d5fb      	bpl.n	800a328 <_printf_i+0xe8>
 800a330:	881e      	ldrh	r6, [r3, #0]
 800a332:	4854      	ldr	r0, [pc, #336]	; (800a484 <_printf_i+0x244>)
 800a334:	2f6f      	cmp	r7, #111	; 0x6f
 800a336:	bf0c      	ite	eq
 800a338:	2308      	moveq	r3, #8
 800a33a:	230a      	movne	r3, #10
 800a33c:	2100      	movs	r1, #0
 800a33e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a342:	6865      	ldr	r5, [r4, #4]
 800a344:	60a5      	str	r5, [r4, #8]
 800a346:	2d00      	cmp	r5, #0
 800a348:	bfa2      	ittt	ge
 800a34a:	6821      	ldrge	r1, [r4, #0]
 800a34c:	f021 0104 	bicge.w	r1, r1, #4
 800a350:	6021      	strge	r1, [r4, #0]
 800a352:	b90e      	cbnz	r6, 800a358 <_printf_i+0x118>
 800a354:	2d00      	cmp	r5, #0
 800a356:	d04d      	beq.n	800a3f4 <_printf_i+0x1b4>
 800a358:	4615      	mov	r5, r2
 800a35a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a35e:	fb03 6711 	mls	r7, r3, r1, r6
 800a362:	5dc7      	ldrb	r7, [r0, r7]
 800a364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a368:	4637      	mov	r7, r6
 800a36a:	42bb      	cmp	r3, r7
 800a36c:	460e      	mov	r6, r1
 800a36e:	d9f4      	bls.n	800a35a <_printf_i+0x11a>
 800a370:	2b08      	cmp	r3, #8
 800a372:	d10b      	bne.n	800a38c <_printf_i+0x14c>
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	07de      	lsls	r6, r3, #31
 800a378:	d508      	bpl.n	800a38c <_printf_i+0x14c>
 800a37a:	6923      	ldr	r3, [r4, #16]
 800a37c:	6861      	ldr	r1, [r4, #4]
 800a37e:	4299      	cmp	r1, r3
 800a380:	bfde      	ittt	le
 800a382:	2330      	movle	r3, #48	; 0x30
 800a384:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a388:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a38c:	1b52      	subs	r2, r2, r5
 800a38e:	6122      	str	r2, [r4, #16]
 800a390:	f8cd a000 	str.w	sl, [sp]
 800a394:	464b      	mov	r3, r9
 800a396:	aa03      	add	r2, sp, #12
 800a398:	4621      	mov	r1, r4
 800a39a:	4640      	mov	r0, r8
 800a39c:	f7ff fee2 	bl	800a164 <_printf_common>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d14c      	bne.n	800a43e <_printf_i+0x1fe>
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3a8:	b004      	add	sp, #16
 800a3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ae:	4835      	ldr	r0, [pc, #212]	; (800a484 <_printf_i+0x244>)
 800a3b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3b4:	6829      	ldr	r1, [r5, #0]
 800a3b6:	6823      	ldr	r3, [r4, #0]
 800a3b8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3bc:	6029      	str	r1, [r5, #0]
 800a3be:	061d      	lsls	r5, r3, #24
 800a3c0:	d514      	bpl.n	800a3ec <_printf_i+0x1ac>
 800a3c2:	07df      	lsls	r7, r3, #31
 800a3c4:	bf44      	itt	mi
 800a3c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ca:	6023      	strmi	r3, [r4, #0]
 800a3cc:	b91e      	cbnz	r6, 800a3d6 <_printf_i+0x196>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	f023 0320 	bic.w	r3, r3, #32
 800a3d4:	6023      	str	r3, [r4, #0]
 800a3d6:	2310      	movs	r3, #16
 800a3d8:	e7b0      	b.n	800a33c <_printf_i+0xfc>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	f043 0320 	orr.w	r3, r3, #32
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	2378      	movs	r3, #120	; 0x78
 800a3e4:	4828      	ldr	r0, [pc, #160]	; (800a488 <_printf_i+0x248>)
 800a3e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ea:	e7e3      	b.n	800a3b4 <_printf_i+0x174>
 800a3ec:	0659      	lsls	r1, r3, #25
 800a3ee:	bf48      	it	mi
 800a3f0:	b2b6      	uxthmi	r6, r6
 800a3f2:	e7e6      	b.n	800a3c2 <_printf_i+0x182>
 800a3f4:	4615      	mov	r5, r2
 800a3f6:	e7bb      	b.n	800a370 <_printf_i+0x130>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	6826      	ldr	r6, [r4, #0]
 800a3fc:	6961      	ldr	r1, [r4, #20]
 800a3fe:	1d18      	adds	r0, r3, #4
 800a400:	6028      	str	r0, [r5, #0]
 800a402:	0635      	lsls	r5, r6, #24
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	d501      	bpl.n	800a40c <_printf_i+0x1cc>
 800a408:	6019      	str	r1, [r3, #0]
 800a40a:	e002      	b.n	800a412 <_printf_i+0x1d2>
 800a40c:	0670      	lsls	r0, r6, #25
 800a40e:	d5fb      	bpl.n	800a408 <_printf_i+0x1c8>
 800a410:	8019      	strh	r1, [r3, #0]
 800a412:	2300      	movs	r3, #0
 800a414:	6123      	str	r3, [r4, #16]
 800a416:	4615      	mov	r5, r2
 800a418:	e7ba      	b.n	800a390 <_printf_i+0x150>
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	1d1a      	adds	r2, r3, #4
 800a41e:	602a      	str	r2, [r5, #0]
 800a420:	681d      	ldr	r5, [r3, #0]
 800a422:	6862      	ldr	r2, [r4, #4]
 800a424:	2100      	movs	r1, #0
 800a426:	4628      	mov	r0, r5
 800a428:	f7f5 fefa 	bl	8000220 <memchr>
 800a42c:	b108      	cbz	r0, 800a432 <_printf_i+0x1f2>
 800a42e:	1b40      	subs	r0, r0, r5
 800a430:	6060      	str	r0, [r4, #4]
 800a432:	6863      	ldr	r3, [r4, #4]
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	2300      	movs	r3, #0
 800a438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a43c:	e7a8      	b.n	800a390 <_printf_i+0x150>
 800a43e:	6923      	ldr	r3, [r4, #16]
 800a440:	462a      	mov	r2, r5
 800a442:	4649      	mov	r1, r9
 800a444:	4640      	mov	r0, r8
 800a446:	47d0      	blx	sl
 800a448:	3001      	adds	r0, #1
 800a44a:	d0ab      	beq.n	800a3a4 <_printf_i+0x164>
 800a44c:	6823      	ldr	r3, [r4, #0]
 800a44e:	079b      	lsls	r3, r3, #30
 800a450:	d413      	bmi.n	800a47a <_printf_i+0x23a>
 800a452:	68e0      	ldr	r0, [r4, #12]
 800a454:	9b03      	ldr	r3, [sp, #12]
 800a456:	4298      	cmp	r0, r3
 800a458:	bfb8      	it	lt
 800a45a:	4618      	movlt	r0, r3
 800a45c:	e7a4      	b.n	800a3a8 <_printf_i+0x168>
 800a45e:	2301      	movs	r3, #1
 800a460:	4632      	mov	r2, r6
 800a462:	4649      	mov	r1, r9
 800a464:	4640      	mov	r0, r8
 800a466:	47d0      	blx	sl
 800a468:	3001      	adds	r0, #1
 800a46a:	d09b      	beq.n	800a3a4 <_printf_i+0x164>
 800a46c:	3501      	adds	r5, #1
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	9903      	ldr	r1, [sp, #12]
 800a472:	1a5b      	subs	r3, r3, r1
 800a474:	42ab      	cmp	r3, r5
 800a476:	dcf2      	bgt.n	800a45e <_printf_i+0x21e>
 800a478:	e7eb      	b.n	800a452 <_printf_i+0x212>
 800a47a:	2500      	movs	r5, #0
 800a47c:	f104 0619 	add.w	r6, r4, #25
 800a480:	e7f5      	b.n	800a46e <_printf_i+0x22e>
 800a482:	bf00      	nop
 800a484:	0800d843 	.word	0x0800d843
 800a488:	0800d854 	.word	0x0800d854

0800a48c <_sbrk_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	; (800a4a8 <_sbrk_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f6 fe68 	bl	800116c <_sbrk>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_sbrk_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_sbrk_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	2000b1c0 	.word	0x2000b1c0

0800a4ac <_raise_r>:
 800a4ac:	291f      	cmp	r1, #31
 800a4ae:	b538      	push	{r3, r4, r5, lr}
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	d904      	bls.n	800a4c0 <_raise_r+0x14>
 800a4b6:	2316      	movs	r3, #22
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a4c2:	b112      	cbz	r2, 800a4ca <_raise_r+0x1e>
 800a4c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a4c8:	b94b      	cbnz	r3, 800a4de <_raise_r+0x32>
 800a4ca:	4620      	mov	r0, r4
 800a4cc:	f000 f830 	bl	800a530 <_getpid_r>
 800a4d0:	462a      	mov	r2, r5
 800a4d2:	4601      	mov	r1, r0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4da:	f000 b817 	b.w	800a50c <_kill_r>
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d00a      	beq.n	800a4f8 <_raise_r+0x4c>
 800a4e2:	1c59      	adds	r1, r3, #1
 800a4e4:	d103      	bne.n	800a4ee <_raise_r+0x42>
 800a4e6:	2316      	movs	r3, #22
 800a4e8:	6003      	str	r3, [r0, #0]
 800a4ea:	2001      	movs	r0, #1
 800a4ec:	e7e7      	b.n	800a4be <_raise_r+0x12>
 800a4ee:	2400      	movs	r4, #0
 800a4f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	4798      	blx	r3
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	e7e0      	b.n	800a4be <_raise_r+0x12>

0800a4fc <raise>:
 800a4fc:	4b02      	ldr	r3, [pc, #8]	; (800a508 <raise+0xc>)
 800a4fe:	4601      	mov	r1, r0
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	f7ff bfd3 	b.w	800a4ac <_raise_r>
 800a506:	bf00      	nop
 800a508:	200000e4 	.word	0x200000e4

0800a50c <_kill_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d07      	ldr	r5, [pc, #28]	; (800a52c <_kill_r+0x20>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	602b      	str	r3, [r5, #0]
 800a51a:	f7f6 fdef 	bl	80010fc <_kill>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	d102      	bne.n	800a528 <_kill_r+0x1c>
 800a522:	682b      	ldr	r3, [r5, #0]
 800a524:	b103      	cbz	r3, 800a528 <_kill_r+0x1c>
 800a526:	6023      	str	r3, [r4, #0]
 800a528:	bd38      	pop	{r3, r4, r5, pc}
 800a52a:	bf00      	nop
 800a52c:	2000b1c0 	.word	0x2000b1c0

0800a530 <_getpid_r>:
 800a530:	f7f6 bde2 	b.w	80010f8 <_getpid>

0800a534 <strstr>:
 800a534:	780a      	ldrb	r2, [r1, #0]
 800a536:	b570      	push	{r4, r5, r6, lr}
 800a538:	b96a      	cbnz	r2, 800a556 <strstr+0x22>
 800a53a:	bd70      	pop	{r4, r5, r6, pc}
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d109      	bne.n	800a554 <strstr+0x20>
 800a540:	460c      	mov	r4, r1
 800a542:	4605      	mov	r5, r0
 800a544:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d0f6      	beq.n	800a53a <strstr+0x6>
 800a54c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a550:	429e      	cmp	r6, r3
 800a552:	d0f7      	beq.n	800a544 <strstr+0x10>
 800a554:	3001      	adds	r0, #1
 800a556:	7803      	ldrb	r3, [r0, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1ef      	bne.n	800a53c <strstr+0x8>
 800a55c:	4618      	mov	r0, r3
 800a55e:	e7ec      	b.n	800a53a <strstr+0x6>

0800a560 <_strtol_l.constprop.0>:
 800a560:	2b01      	cmp	r3, #1
 800a562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a566:	d001      	beq.n	800a56c <_strtol_l.constprop.0+0xc>
 800a568:	2b24      	cmp	r3, #36	; 0x24
 800a56a:	d906      	bls.n	800a57a <_strtol_l.constprop.0+0x1a>
 800a56c:	f000 ff46 	bl	800b3fc <__errno>
 800a570:	2316      	movs	r3, #22
 800a572:	6003      	str	r3, [r0, #0]
 800a574:	2000      	movs	r0, #0
 800a576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a660 <_strtol_l.constprop.0+0x100>
 800a57e:	460d      	mov	r5, r1
 800a580:	462e      	mov	r6, r5
 800a582:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a586:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a58a:	f017 0708 	ands.w	r7, r7, #8
 800a58e:	d1f7      	bne.n	800a580 <_strtol_l.constprop.0+0x20>
 800a590:	2c2d      	cmp	r4, #45	; 0x2d
 800a592:	d132      	bne.n	800a5fa <_strtol_l.constprop.0+0x9a>
 800a594:	782c      	ldrb	r4, [r5, #0]
 800a596:	2701      	movs	r7, #1
 800a598:	1cb5      	adds	r5, r6, #2
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d05b      	beq.n	800a656 <_strtol_l.constprop.0+0xf6>
 800a59e:	2b10      	cmp	r3, #16
 800a5a0:	d109      	bne.n	800a5b6 <_strtol_l.constprop.0+0x56>
 800a5a2:	2c30      	cmp	r4, #48	; 0x30
 800a5a4:	d107      	bne.n	800a5b6 <_strtol_l.constprop.0+0x56>
 800a5a6:	782c      	ldrb	r4, [r5, #0]
 800a5a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a5ac:	2c58      	cmp	r4, #88	; 0x58
 800a5ae:	d14d      	bne.n	800a64c <_strtol_l.constprop.0+0xec>
 800a5b0:	786c      	ldrb	r4, [r5, #1]
 800a5b2:	2310      	movs	r3, #16
 800a5b4:	3502      	adds	r5, #2
 800a5b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a5ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a5be:	f04f 0c00 	mov.w	ip, #0
 800a5c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800a5c6:	4666      	mov	r6, ip
 800a5c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800a5cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a5d0:	f1be 0f09 	cmp.w	lr, #9
 800a5d4:	d816      	bhi.n	800a604 <_strtol_l.constprop.0+0xa4>
 800a5d6:	4674      	mov	r4, lr
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	dd24      	ble.n	800a626 <_strtol_l.constprop.0+0xc6>
 800a5dc:	f1bc 0f00 	cmp.w	ip, #0
 800a5e0:	db1e      	blt.n	800a620 <_strtol_l.constprop.0+0xc0>
 800a5e2:	45b1      	cmp	r9, r6
 800a5e4:	d31c      	bcc.n	800a620 <_strtol_l.constprop.0+0xc0>
 800a5e6:	d101      	bne.n	800a5ec <_strtol_l.constprop.0+0x8c>
 800a5e8:	45a2      	cmp	sl, r4
 800a5ea:	db19      	blt.n	800a620 <_strtol_l.constprop.0+0xc0>
 800a5ec:	fb06 4603 	mla	r6, r6, r3, r4
 800a5f0:	f04f 0c01 	mov.w	ip, #1
 800a5f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5f8:	e7e8      	b.n	800a5cc <_strtol_l.constprop.0+0x6c>
 800a5fa:	2c2b      	cmp	r4, #43	; 0x2b
 800a5fc:	bf04      	itt	eq
 800a5fe:	782c      	ldrbeq	r4, [r5, #0]
 800a600:	1cb5      	addeq	r5, r6, #2
 800a602:	e7ca      	b.n	800a59a <_strtol_l.constprop.0+0x3a>
 800a604:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a608:	f1be 0f19 	cmp.w	lr, #25
 800a60c:	d801      	bhi.n	800a612 <_strtol_l.constprop.0+0xb2>
 800a60e:	3c37      	subs	r4, #55	; 0x37
 800a610:	e7e2      	b.n	800a5d8 <_strtol_l.constprop.0+0x78>
 800a612:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a616:	f1be 0f19 	cmp.w	lr, #25
 800a61a:	d804      	bhi.n	800a626 <_strtol_l.constprop.0+0xc6>
 800a61c:	3c57      	subs	r4, #87	; 0x57
 800a61e:	e7db      	b.n	800a5d8 <_strtol_l.constprop.0+0x78>
 800a620:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a624:	e7e6      	b.n	800a5f4 <_strtol_l.constprop.0+0x94>
 800a626:	f1bc 0f00 	cmp.w	ip, #0
 800a62a:	da05      	bge.n	800a638 <_strtol_l.constprop.0+0xd8>
 800a62c:	2322      	movs	r3, #34	; 0x22
 800a62e:	6003      	str	r3, [r0, #0]
 800a630:	4646      	mov	r6, r8
 800a632:	b942      	cbnz	r2, 800a646 <_strtol_l.constprop.0+0xe6>
 800a634:	4630      	mov	r0, r6
 800a636:	e79e      	b.n	800a576 <_strtol_l.constprop.0+0x16>
 800a638:	b107      	cbz	r7, 800a63c <_strtol_l.constprop.0+0xdc>
 800a63a:	4276      	negs	r6, r6
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	d0f9      	beq.n	800a634 <_strtol_l.constprop.0+0xd4>
 800a640:	f1bc 0f00 	cmp.w	ip, #0
 800a644:	d000      	beq.n	800a648 <_strtol_l.constprop.0+0xe8>
 800a646:	1e69      	subs	r1, r5, #1
 800a648:	6011      	str	r1, [r2, #0]
 800a64a:	e7f3      	b.n	800a634 <_strtol_l.constprop.0+0xd4>
 800a64c:	2430      	movs	r4, #48	; 0x30
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1b1      	bne.n	800a5b6 <_strtol_l.constprop.0+0x56>
 800a652:	2308      	movs	r3, #8
 800a654:	e7af      	b.n	800a5b6 <_strtol_l.constprop.0+0x56>
 800a656:	2c30      	cmp	r4, #48	; 0x30
 800a658:	d0a5      	beq.n	800a5a6 <_strtol_l.constprop.0+0x46>
 800a65a:	230a      	movs	r3, #10
 800a65c:	e7ab      	b.n	800a5b6 <_strtol_l.constprop.0+0x56>
 800a65e:	bf00      	nop
 800a660:	0800d719 	.word	0x0800d719

0800a664 <strtol>:
 800a664:	4613      	mov	r3, r2
 800a666:	460a      	mov	r2, r1
 800a668:	4601      	mov	r1, r0
 800a66a:	4802      	ldr	r0, [pc, #8]	; (800a674 <strtol+0x10>)
 800a66c:	6800      	ldr	r0, [r0, #0]
 800a66e:	f7ff bf77 	b.w	800a560 <_strtol_l.constprop.0>
 800a672:	bf00      	nop
 800a674:	200000e4 	.word	0x200000e4

0800a678 <sbrk>:
 800a678:	4b02      	ldr	r3, [pc, #8]	; (800a684 <sbrk+0xc>)
 800a67a:	4601      	mov	r1, r0
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	f7ff bf05 	b.w	800a48c <_sbrk_r>
 800a682:	bf00      	nop
 800a684:	200000e4 	.word	0x200000e4

0800a688 <_vasiprintf_r>:
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	460d      	mov	r5, r1
 800a68c:	4909      	ldr	r1, [pc, #36]	; (800a6b4 <_vasiprintf_r+0x2c>)
 800a68e:	b09b      	sub	sp, #108	; 0x6c
 800a690:	2400      	movs	r4, #0
 800a692:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800a696:	4669      	mov	r1, sp
 800a698:	9400      	str	r4, [sp, #0]
 800a69a:	9402      	str	r4, [sp, #8]
 800a69c:	9405      	str	r4, [sp, #20]
 800a69e:	f7ff f98b 	bl	80099b8 <_svfiprintf_r>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	bfa1      	itttt	ge
 800a6a6:	9b00      	ldrge	r3, [sp, #0]
 800a6a8:	701c      	strbge	r4, [r3, #0]
 800a6aa:	9b04      	ldrge	r3, [sp, #16]
 800a6ac:	602b      	strge	r3, [r5, #0]
 800a6ae:	b01b      	add	sp, #108	; 0x6c
 800a6b0:	bd30      	pop	{r4, r5, pc}
 800a6b2:	bf00      	nop
 800a6b4:	ffff0288 	.word	0xffff0288

0800a6b8 <vasiprintf>:
 800a6b8:	4613      	mov	r3, r2
 800a6ba:	460a      	mov	r2, r1
 800a6bc:	4601      	mov	r1, r0
 800a6be:	4802      	ldr	r0, [pc, #8]	; (800a6c8 <vasiprintf+0x10>)
 800a6c0:	6800      	ldr	r0, [r0, #0]
 800a6c2:	f7ff bfe1 	b.w	800a688 <_vasiprintf_r>
 800a6c6:	bf00      	nop
 800a6c8:	200000e4 	.word	0x200000e4

0800a6cc <__assert_func>:
 800a6cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6ce:	4614      	mov	r4, r2
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <__assert_func+0x2c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4605      	mov	r5, r0
 800a6d8:	68d8      	ldr	r0, [r3, #12]
 800a6da:	b14c      	cbz	r4, 800a6f0 <__assert_func+0x24>
 800a6dc:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <__assert_func+0x30>)
 800a6de:	9100      	str	r1, [sp, #0]
 800a6e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a6e4:	4906      	ldr	r1, [pc, #24]	; (800a700 <__assert_func+0x34>)
 800a6e6:	462b      	mov	r3, r5
 800a6e8:	f000 ff64 	bl	800b5b4 <fiprintf>
 800a6ec:	f7fe ff44 	bl	8009578 <abort>
 800a6f0:	4b04      	ldr	r3, [pc, #16]	; (800a704 <__assert_func+0x38>)
 800a6f2:	461c      	mov	r4, r3
 800a6f4:	e7f3      	b.n	800a6de <__assert_func+0x12>
 800a6f6:	bf00      	nop
 800a6f8:	200000e4 	.word	0x200000e4
 800a6fc:	0800d865 	.word	0x0800d865
 800a700:	0800d872 	.word	0x0800d872
 800a704:	0800d8a0 	.word	0x0800d8a0

0800a708 <quorem>:
 800a708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	6903      	ldr	r3, [r0, #16]
 800a70e:	690c      	ldr	r4, [r1, #16]
 800a710:	42a3      	cmp	r3, r4
 800a712:	4607      	mov	r7, r0
 800a714:	f2c0 8081 	blt.w	800a81a <quorem+0x112>
 800a718:	3c01      	subs	r4, #1
 800a71a:	f101 0814 	add.w	r8, r1, #20
 800a71e:	f100 0514 	add.w	r5, r0, #20
 800a722:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a726:	9301      	str	r3, [sp, #4]
 800a728:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a72c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a730:	3301      	adds	r3, #1
 800a732:	429a      	cmp	r2, r3
 800a734:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a738:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a73c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a740:	d331      	bcc.n	800a7a6 <quorem+0x9e>
 800a742:	f04f 0e00 	mov.w	lr, #0
 800a746:	4640      	mov	r0, r8
 800a748:	46ac      	mov	ip, r5
 800a74a:	46f2      	mov	sl, lr
 800a74c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a750:	b293      	uxth	r3, r2
 800a752:	fb06 e303 	mla	r3, r6, r3, lr
 800a756:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	ebaa 0303 	sub.w	r3, sl, r3
 800a760:	f8dc a000 	ldr.w	sl, [ip]
 800a764:	0c12      	lsrs	r2, r2, #16
 800a766:	fa13 f38a 	uxtah	r3, r3, sl
 800a76a:	fb06 e202 	mla	r2, r6, r2, lr
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	9b00      	ldr	r3, [sp, #0]
 800a772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a776:	b292      	uxth	r2, r2
 800a778:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a77c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a780:	f8bd 3000 	ldrh.w	r3, [sp]
 800a784:	4581      	cmp	r9, r0
 800a786:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a78a:	f84c 3b04 	str.w	r3, [ip], #4
 800a78e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a792:	d2db      	bcs.n	800a74c <quorem+0x44>
 800a794:	f855 300b 	ldr.w	r3, [r5, fp]
 800a798:	b92b      	cbnz	r3, 800a7a6 <quorem+0x9e>
 800a79a:	9b01      	ldr	r3, [sp, #4]
 800a79c:	3b04      	subs	r3, #4
 800a79e:	429d      	cmp	r5, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	d32e      	bcc.n	800a802 <quorem+0xfa>
 800a7a4:	613c      	str	r4, [r7, #16]
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	f001 f9cc 	bl	800bb44 <__mcmp>
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	db24      	blt.n	800a7fa <quorem+0xf2>
 800a7b0:	3601      	adds	r6, #1
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	f04f 0c00 	mov.w	ip, #0
 800a7b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a7c0:	b293      	uxth	r3, r2
 800a7c2:	ebac 0303 	sub.w	r3, ip, r3
 800a7c6:	0c12      	lsrs	r2, r2, #16
 800a7c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a7cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a7d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7da:	45c1      	cmp	r9, r8
 800a7dc:	f840 3b04 	str.w	r3, [r0], #4
 800a7e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a7e4:	d2e8      	bcs.n	800a7b8 <quorem+0xb0>
 800a7e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7ee:	b922      	cbnz	r2, 800a7fa <quorem+0xf2>
 800a7f0:	3b04      	subs	r3, #4
 800a7f2:	429d      	cmp	r5, r3
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	d30a      	bcc.n	800a80e <quorem+0x106>
 800a7f8:	613c      	str	r4, [r7, #16]
 800a7fa:	4630      	mov	r0, r6
 800a7fc:	b003      	add	sp, #12
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	6812      	ldr	r2, [r2, #0]
 800a804:	3b04      	subs	r3, #4
 800a806:	2a00      	cmp	r2, #0
 800a808:	d1cc      	bne.n	800a7a4 <quorem+0x9c>
 800a80a:	3c01      	subs	r4, #1
 800a80c:	e7c7      	b.n	800a79e <quorem+0x96>
 800a80e:	6812      	ldr	r2, [r2, #0]
 800a810:	3b04      	subs	r3, #4
 800a812:	2a00      	cmp	r2, #0
 800a814:	d1f0      	bne.n	800a7f8 <quorem+0xf0>
 800a816:	3c01      	subs	r4, #1
 800a818:	e7eb      	b.n	800a7f2 <quorem+0xea>
 800a81a:	2000      	movs	r0, #0
 800a81c:	e7ee      	b.n	800a7fc <quorem+0xf4>
	...

0800a820 <_dtoa_r>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	ed2d 8b04 	vpush	{d8-d9}
 800a828:	ec57 6b10 	vmov	r6, r7, d0
 800a82c:	b093      	sub	sp, #76	; 0x4c
 800a82e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a830:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a834:	9106      	str	r1, [sp, #24]
 800a836:	ee10 aa10 	vmov	sl, s0
 800a83a:	4604      	mov	r4, r0
 800a83c:	9209      	str	r2, [sp, #36]	; 0x24
 800a83e:	930c      	str	r3, [sp, #48]	; 0x30
 800a840:	46bb      	mov	fp, r7
 800a842:	b975      	cbnz	r5, 800a862 <_dtoa_r+0x42>
 800a844:	2010      	movs	r0, #16
 800a846:	f7fe fee7 	bl	8009618 <malloc>
 800a84a:	4602      	mov	r2, r0
 800a84c:	6260      	str	r0, [r4, #36]	; 0x24
 800a84e:	b920      	cbnz	r0, 800a85a <_dtoa_r+0x3a>
 800a850:	4ba7      	ldr	r3, [pc, #668]	; (800aaf0 <_dtoa_r+0x2d0>)
 800a852:	21ea      	movs	r1, #234	; 0xea
 800a854:	48a7      	ldr	r0, [pc, #668]	; (800aaf4 <_dtoa_r+0x2d4>)
 800a856:	f7ff ff39 	bl	800a6cc <__assert_func>
 800a85a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a85e:	6005      	str	r5, [r0, #0]
 800a860:	60c5      	str	r5, [r0, #12]
 800a862:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a864:	6819      	ldr	r1, [r3, #0]
 800a866:	b151      	cbz	r1, 800a87e <_dtoa_r+0x5e>
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	604a      	str	r2, [r1, #4]
 800a86c:	2301      	movs	r3, #1
 800a86e:	4093      	lsls	r3, r2
 800a870:	608b      	str	r3, [r1, #8]
 800a872:	4620      	mov	r0, r4
 800a874:	f000 ff24 	bl	800b6c0 <_Bfree>
 800a878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
 800a87e:	1e3b      	subs	r3, r7, #0
 800a880:	bfaa      	itet	ge
 800a882:	2300      	movge	r3, #0
 800a884:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a888:	f8c8 3000 	strge.w	r3, [r8]
 800a88c:	4b9a      	ldr	r3, [pc, #616]	; (800aaf8 <_dtoa_r+0x2d8>)
 800a88e:	bfbc      	itt	lt
 800a890:	2201      	movlt	r2, #1
 800a892:	f8c8 2000 	strlt.w	r2, [r8]
 800a896:	ea33 030b 	bics.w	r3, r3, fp
 800a89a:	d11b      	bne.n	800a8d4 <_dtoa_r+0xb4>
 800a89c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a89e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8a2:	6013      	str	r3, [r2, #0]
 800a8a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8a8:	4333      	orrs	r3, r6
 800a8aa:	f000 8592 	beq.w	800b3d2 <_dtoa_r+0xbb2>
 800a8ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8b0:	b963      	cbnz	r3, 800a8cc <_dtoa_r+0xac>
 800a8b2:	4b92      	ldr	r3, [pc, #584]	; (800aafc <_dtoa_r+0x2dc>)
 800a8b4:	e022      	b.n	800a8fc <_dtoa_r+0xdc>
 800a8b6:	4b92      	ldr	r3, [pc, #584]	; (800ab00 <_dtoa_r+0x2e0>)
 800a8b8:	9301      	str	r3, [sp, #4]
 800a8ba:	3308      	adds	r3, #8
 800a8bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8be:	6013      	str	r3, [r2, #0]
 800a8c0:	9801      	ldr	r0, [sp, #4]
 800a8c2:	b013      	add	sp, #76	; 0x4c
 800a8c4:	ecbd 8b04 	vpop	{d8-d9}
 800a8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8cc:	4b8b      	ldr	r3, [pc, #556]	; (800aafc <_dtoa_r+0x2dc>)
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	3303      	adds	r3, #3
 800a8d2:	e7f3      	b.n	800a8bc <_dtoa_r+0x9c>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4650      	mov	r0, sl
 800a8da:	4659      	mov	r1, fp
 800a8dc:	f7f6 f914 	bl	8000b08 <__aeabi_dcmpeq>
 800a8e0:	ec4b ab19 	vmov	d9, sl, fp
 800a8e4:	4680      	mov	r8, r0
 800a8e6:	b158      	cbz	r0, 800a900 <_dtoa_r+0xe0>
 800a8e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	f000 856b 	beq.w	800b3cc <_dtoa_r+0xbac>
 800a8f6:	4883      	ldr	r0, [pc, #524]	; (800ab04 <_dtoa_r+0x2e4>)
 800a8f8:	6018      	str	r0, [r3, #0]
 800a8fa:	1e43      	subs	r3, r0, #1
 800a8fc:	9301      	str	r3, [sp, #4]
 800a8fe:	e7df      	b.n	800a8c0 <_dtoa_r+0xa0>
 800a900:	ec4b ab10 	vmov	d0, sl, fp
 800a904:	aa10      	add	r2, sp, #64	; 0x40
 800a906:	a911      	add	r1, sp, #68	; 0x44
 800a908:	4620      	mov	r0, r4
 800a90a:	f001 f9c1 	bl	800bc90 <__d2b>
 800a90e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a912:	ee08 0a10 	vmov	s16, r0
 800a916:	2d00      	cmp	r5, #0
 800a918:	f000 8084 	beq.w	800aa24 <_dtoa_r+0x204>
 800a91c:	ee19 3a90 	vmov	r3, s19
 800a920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a924:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a928:	4656      	mov	r6, sl
 800a92a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a92e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a932:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a936:	4b74      	ldr	r3, [pc, #464]	; (800ab08 <_dtoa_r+0x2e8>)
 800a938:	2200      	movs	r2, #0
 800a93a:	4630      	mov	r0, r6
 800a93c:	4639      	mov	r1, r7
 800a93e:	f7f5 fcc3 	bl	80002c8 <__aeabi_dsub>
 800a942:	a365      	add	r3, pc, #404	; (adr r3, 800aad8 <_dtoa_r+0x2b8>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f7f5 fe76 	bl	8000638 <__aeabi_dmul>
 800a94c:	a364      	add	r3, pc, #400	; (adr r3, 800aae0 <_dtoa_r+0x2c0>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	f7f5 fcbb 	bl	80002cc <__adddf3>
 800a956:	4606      	mov	r6, r0
 800a958:	4628      	mov	r0, r5
 800a95a:	460f      	mov	r7, r1
 800a95c:	f7f5 fe02 	bl	8000564 <__aeabi_i2d>
 800a960:	a361      	add	r3, pc, #388	; (adr r3, 800aae8 <_dtoa_r+0x2c8>)
 800a962:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a966:	f7f5 fe67 	bl	8000638 <__aeabi_dmul>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4630      	mov	r0, r6
 800a970:	4639      	mov	r1, r7
 800a972:	f7f5 fcab 	bl	80002cc <__adddf3>
 800a976:	4606      	mov	r6, r0
 800a978:	460f      	mov	r7, r1
 800a97a:	f7f6 f90d 	bl	8000b98 <__aeabi_d2iz>
 800a97e:	2200      	movs	r2, #0
 800a980:	9000      	str	r0, [sp, #0]
 800a982:	2300      	movs	r3, #0
 800a984:	4630      	mov	r0, r6
 800a986:	4639      	mov	r1, r7
 800a988:	f7f6 f8c8 	bl	8000b1c <__aeabi_dcmplt>
 800a98c:	b150      	cbz	r0, 800a9a4 <_dtoa_r+0x184>
 800a98e:	9800      	ldr	r0, [sp, #0]
 800a990:	f7f5 fde8 	bl	8000564 <__aeabi_i2d>
 800a994:	4632      	mov	r2, r6
 800a996:	463b      	mov	r3, r7
 800a998:	f7f6 f8b6 	bl	8000b08 <__aeabi_dcmpeq>
 800a99c:	b910      	cbnz	r0, 800a9a4 <_dtoa_r+0x184>
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	9b00      	ldr	r3, [sp, #0]
 800a9a6:	2b16      	cmp	r3, #22
 800a9a8:	d85a      	bhi.n	800aa60 <_dtoa_r+0x240>
 800a9aa:	9a00      	ldr	r2, [sp, #0]
 800a9ac:	4b57      	ldr	r3, [pc, #348]	; (800ab0c <_dtoa_r+0x2ec>)
 800a9ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	ec51 0b19 	vmov	r0, r1, d9
 800a9ba:	f7f6 f8af 	bl	8000b1c <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	d050      	beq.n	800aa64 <_dtoa_r+0x244>
 800a9c2:	9b00      	ldr	r3, [sp, #0]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	9300      	str	r3, [sp, #0]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9ce:	1b5d      	subs	r5, r3, r5
 800a9d0:	1e6b      	subs	r3, r5, #1
 800a9d2:	9305      	str	r3, [sp, #20]
 800a9d4:	bf45      	ittet	mi
 800a9d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a9da:	9304      	strmi	r3, [sp, #16]
 800a9dc:	2300      	movpl	r3, #0
 800a9de:	2300      	movmi	r3, #0
 800a9e0:	bf4c      	ite	mi
 800a9e2:	9305      	strmi	r3, [sp, #20]
 800a9e4:	9304      	strpl	r3, [sp, #16]
 800a9e6:	9b00      	ldr	r3, [sp, #0]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	db3d      	blt.n	800aa68 <_dtoa_r+0x248>
 800a9ec:	9b05      	ldr	r3, [sp, #20]
 800a9ee:	9a00      	ldr	r2, [sp, #0]
 800a9f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a9f2:	4413      	add	r3, r2
 800a9f4:	9305      	str	r3, [sp, #20]
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	9307      	str	r3, [sp, #28]
 800a9fa:	9b06      	ldr	r3, [sp, #24]
 800a9fc:	2b09      	cmp	r3, #9
 800a9fe:	f200 8089 	bhi.w	800ab14 <_dtoa_r+0x2f4>
 800aa02:	2b05      	cmp	r3, #5
 800aa04:	bfc4      	itt	gt
 800aa06:	3b04      	subgt	r3, #4
 800aa08:	9306      	strgt	r3, [sp, #24]
 800aa0a:	9b06      	ldr	r3, [sp, #24]
 800aa0c:	f1a3 0302 	sub.w	r3, r3, #2
 800aa10:	bfcc      	ite	gt
 800aa12:	2500      	movgt	r5, #0
 800aa14:	2501      	movle	r5, #1
 800aa16:	2b03      	cmp	r3, #3
 800aa18:	f200 8087 	bhi.w	800ab2a <_dtoa_r+0x30a>
 800aa1c:	e8df f003 	tbb	[pc, r3]
 800aa20:	59383a2d 	.word	0x59383a2d
 800aa24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aa28:	441d      	add	r5, r3
 800aa2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aa2e:	2b20      	cmp	r3, #32
 800aa30:	bfc1      	itttt	gt
 800aa32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aa36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800aa3a:	fa0b f303 	lslgt.w	r3, fp, r3
 800aa3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800aa42:	bfda      	itte	le
 800aa44:	f1c3 0320 	rsble	r3, r3, #32
 800aa48:	fa06 f003 	lslle.w	r0, r6, r3
 800aa4c:	4318      	orrgt	r0, r3
 800aa4e:	f7f5 fd79 	bl	8000544 <__aeabi_ui2d>
 800aa52:	2301      	movs	r3, #1
 800aa54:	4606      	mov	r6, r0
 800aa56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800aa5a:	3d01      	subs	r5, #1
 800aa5c:	930e      	str	r3, [sp, #56]	; 0x38
 800aa5e:	e76a      	b.n	800a936 <_dtoa_r+0x116>
 800aa60:	2301      	movs	r3, #1
 800aa62:	e7b2      	b.n	800a9ca <_dtoa_r+0x1aa>
 800aa64:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa66:	e7b1      	b.n	800a9cc <_dtoa_r+0x1ac>
 800aa68:	9b04      	ldr	r3, [sp, #16]
 800aa6a:	9a00      	ldr	r2, [sp, #0]
 800aa6c:	1a9b      	subs	r3, r3, r2
 800aa6e:	9304      	str	r3, [sp, #16]
 800aa70:	4253      	negs	r3, r2
 800aa72:	9307      	str	r3, [sp, #28]
 800aa74:	2300      	movs	r3, #0
 800aa76:	930a      	str	r3, [sp, #40]	; 0x28
 800aa78:	e7bf      	b.n	800a9fa <_dtoa_r+0x1da>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	9308      	str	r3, [sp, #32]
 800aa7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	dc55      	bgt.n	800ab30 <_dtoa_r+0x310>
 800aa84:	2301      	movs	r3, #1
 800aa86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa8e:	e00c      	b.n	800aaaa <_dtoa_r+0x28a>
 800aa90:	2301      	movs	r3, #1
 800aa92:	e7f3      	b.n	800aa7c <_dtoa_r+0x25c>
 800aa94:	2300      	movs	r3, #0
 800aa96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa98:	9308      	str	r3, [sp, #32]
 800aa9a:	9b00      	ldr	r3, [sp, #0]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	9302      	str	r3, [sp, #8]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	9303      	str	r3, [sp, #12]
 800aaa6:	bfb8      	it	lt
 800aaa8:	2301      	movlt	r3, #1
 800aaaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800aaac:	2200      	movs	r2, #0
 800aaae:	6042      	str	r2, [r0, #4]
 800aab0:	2204      	movs	r2, #4
 800aab2:	f102 0614 	add.w	r6, r2, #20
 800aab6:	429e      	cmp	r6, r3
 800aab8:	6841      	ldr	r1, [r0, #4]
 800aaba:	d93d      	bls.n	800ab38 <_dtoa_r+0x318>
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 fdbf 	bl	800b640 <_Balloc>
 800aac2:	9001      	str	r0, [sp, #4]
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d13b      	bne.n	800ab40 <_dtoa_r+0x320>
 800aac8:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <_dtoa_r+0x2f0>)
 800aaca:	4602      	mov	r2, r0
 800aacc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aad0:	e6c0      	b.n	800a854 <_dtoa_r+0x34>
 800aad2:	2301      	movs	r3, #1
 800aad4:	e7df      	b.n	800aa96 <_dtoa_r+0x276>
 800aad6:	bf00      	nop
 800aad8:	636f4361 	.word	0x636f4361
 800aadc:	3fd287a7 	.word	0x3fd287a7
 800aae0:	8b60c8b3 	.word	0x8b60c8b3
 800aae4:	3fc68a28 	.word	0x3fc68a28
 800aae8:	509f79fb 	.word	0x509f79fb
 800aaec:	3fd34413 	.word	0x3fd34413
 800aaf0:	0800d8ae 	.word	0x0800d8ae
 800aaf4:	0800d8c5 	.word	0x0800d8c5
 800aaf8:	7ff00000 	.word	0x7ff00000
 800aafc:	0800d8aa 	.word	0x0800d8aa
 800ab00:	0800d8a1 	.word	0x0800d8a1
 800ab04:	0800d842 	.word	0x0800d842
 800ab08:	3ff80000 	.word	0x3ff80000
 800ab0c:	0800da18 	.word	0x0800da18
 800ab10:	0800d920 	.word	0x0800d920
 800ab14:	2501      	movs	r5, #1
 800ab16:	2300      	movs	r3, #0
 800ab18:	9306      	str	r3, [sp, #24]
 800ab1a:	9508      	str	r5, [sp, #32]
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab24:	2200      	movs	r2, #0
 800ab26:	2312      	movs	r3, #18
 800ab28:	e7b0      	b.n	800aa8c <_dtoa_r+0x26c>
 800ab2a:	2301      	movs	r3, #1
 800ab2c:	9308      	str	r3, [sp, #32]
 800ab2e:	e7f5      	b.n	800ab1c <_dtoa_r+0x2fc>
 800ab30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab32:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ab36:	e7b8      	b.n	800aaaa <_dtoa_r+0x28a>
 800ab38:	3101      	adds	r1, #1
 800ab3a:	6041      	str	r1, [r0, #4]
 800ab3c:	0052      	lsls	r2, r2, #1
 800ab3e:	e7b8      	b.n	800aab2 <_dtoa_r+0x292>
 800ab40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab42:	9a01      	ldr	r2, [sp, #4]
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	9b03      	ldr	r3, [sp, #12]
 800ab48:	2b0e      	cmp	r3, #14
 800ab4a:	f200 809d 	bhi.w	800ac88 <_dtoa_r+0x468>
 800ab4e:	2d00      	cmp	r5, #0
 800ab50:	f000 809a 	beq.w	800ac88 <_dtoa_r+0x468>
 800ab54:	9b00      	ldr	r3, [sp, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	dd32      	ble.n	800abc0 <_dtoa_r+0x3a0>
 800ab5a:	4ab7      	ldr	r2, [pc, #732]	; (800ae38 <_dtoa_r+0x618>)
 800ab5c:	f003 030f 	and.w	r3, r3, #15
 800ab60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ab64:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab68:	9b00      	ldr	r3, [sp, #0]
 800ab6a:	05d8      	lsls	r0, r3, #23
 800ab6c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ab70:	d516      	bpl.n	800aba0 <_dtoa_r+0x380>
 800ab72:	4bb2      	ldr	r3, [pc, #712]	; (800ae3c <_dtoa_r+0x61c>)
 800ab74:	ec51 0b19 	vmov	r0, r1, d9
 800ab78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab7c:	f7f5 fe86 	bl	800088c <__aeabi_ddiv>
 800ab80:	f007 070f 	and.w	r7, r7, #15
 800ab84:	4682      	mov	sl, r0
 800ab86:	468b      	mov	fp, r1
 800ab88:	2503      	movs	r5, #3
 800ab8a:	4eac      	ldr	r6, [pc, #688]	; (800ae3c <_dtoa_r+0x61c>)
 800ab8c:	b957      	cbnz	r7, 800aba4 <_dtoa_r+0x384>
 800ab8e:	4642      	mov	r2, r8
 800ab90:	464b      	mov	r3, r9
 800ab92:	4650      	mov	r0, sl
 800ab94:	4659      	mov	r1, fp
 800ab96:	f7f5 fe79 	bl	800088c <__aeabi_ddiv>
 800ab9a:	4682      	mov	sl, r0
 800ab9c:	468b      	mov	fp, r1
 800ab9e:	e028      	b.n	800abf2 <_dtoa_r+0x3d2>
 800aba0:	2502      	movs	r5, #2
 800aba2:	e7f2      	b.n	800ab8a <_dtoa_r+0x36a>
 800aba4:	07f9      	lsls	r1, r7, #31
 800aba6:	d508      	bpl.n	800abba <_dtoa_r+0x39a>
 800aba8:	4640      	mov	r0, r8
 800abaa:	4649      	mov	r1, r9
 800abac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800abb0:	f7f5 fd42 	bl	8000638 <__aeabi_dmul>
 800abb4:	3501      	adds	r5, #1
 800abb6:	4680      	mov	r8, r0
 800abb8:	4689      	mov	r9, r1
 800abba:	107f      	asrs	r7, r7, #1
 800abbc:	3608      	adds	r6, #8
 800abbe:	e7e5      	b.n	800ab8c <_dtoa_r+0x36c>
 800abc0:	f000 809b 	beq.w	800acfa <_dtoa_r+0x4da>
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	4f9d      	ldr	r7, [pc, #628]	; (800ae3c <_dtoa_r+0x61c>)
 800abc8:	425e      	negs	r6, r3
 800abca:	4b9b      	ldr	r3, [pc, #620]	; (800ae38 <_dtoa_r+0x618>)
 800abcc:	f006 020f 	and.w	r2, r6, #15
 800abd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	ec51 0b19 	vmov	r0, r1, d9
 800abdc:	f7f5 fd2c 	bl	8000638 <__aeabi_dmul>
 800abe0:	1136      	asrs	r6, r6, #4
 800abe2:	4682      	mov	sl, r0
 800abe4:	468b      	mov	fp, r1
 800abe6:	2300      	movs	r3, #0
 800abe8:	2502      	movs	r5, #2
 800abea:	2e00      	cmp	r6, #0
 800abec:	d17a      	bne.n	800ace4 <_dtoa_r+0x4c4>
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1d3      	bne.n	800ab9a <_dtoa_r+0x37a>
 800abf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f000 8082 	beq.w	800acfe <_dtoa_r+0x4de>
 800abfa:	4b91      	ldr	r3, [pc, #580]	; (800ae40 <_dtoa_r+0x620>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	4650      	mov	r0, sl
 800ac00:	4659      	mov	r1, fp
 800ac02:	f7f5 ff8b 	bl	8000b1c <__aeabi_dcmplt>
 800ac06:	2800      	cmp	r0, #0
 800ac08:	d079      	beq.n	800acfe <_dtoa_r+0x4de>
 800ac0a:	9b03      	ldr	r3, [sp, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d076      	beq.n	800acfe <_dtoa_r+0x4de>
 800ac10:	9b02      	ldr	r3, [sp, #8]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	dd36      	ble.n	800ac84 <_dtoa_r+0x464>
 800ac16:	9b00      	ldr	r3, [sp, #0]
 800ac18:	4650      	mov	r0, sl
 800ac1a:	4659      	mov	r1, fp
 800ac1c:	1e5f      	subs	r7, r3, #1
 800ac1e:	2200      	movs	r2, #0
 800ac20:	4b88      	ldr	r3, [pc, #544]	; (800ae44 <_dtoa_r+0x624>)
 800ac22:	f7f5 fd09 	bl	8000638 <__aeabi_dmul>
 800ac26:	9e02      	ldr	r6, [sp, #8]
 800ac28:	4682      	mov	sl, r0
 800ac2a:	468b      	mov	fp, r1
 800ac2c:	3501      	adds	r5, #1
 800ac2e:	4628      	mov	r0, r5
 800ac30:	f7f5 fc98 	bl	8000564 <__aeabi_i2d>
 800ac34:	4652      	mov	r2, sl
 800ac36:	465b      	mov	r3, fp
 800ac38:	f7f5 fcfe 	bl	8000638 <__aeabi_dmul>
 800ac3c:	4b82      	ldr	r3, [pc, #520]	; (800ae48 <_dtoa_r+0x628>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f7f5 fb44 	bl	80002cc <__adddf3>
 800ac44:	46d0      	mov	r8, sl
 800ac46:	46d9      	mov	r9, fp
 800ac48:	4682      	mov	sl, r0
 800ac4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ac4e:	2e00      	cmp	r6, #0
 800ac50:	d158      	bne.n	800ad04 <_dtoa_r+0x4e4>
 800ac52:	4b7e      	ldr	r3, [pc, #504]	; (800ae4c <_dtoa_r+0x62c>)
 800ac54:	2200      	movs	r2, #0
 800ac56:	4640      	mov	r0, r8
 800ac58:	4649      	mov	r1, r9
 800ac5a:	f7f5 fb35 	bl	80002c8 <__aeabi_dsub>
 800ac5e:	4652      	mov	r2, sl
 800ac60:	465b      	mov	r3, fp
 800ac62:	4680      	mov	r8, r0
 800ac64:	4689      	mov	r9, r1
 800ac66:	f7f5 ff77 	bl	8000b58 <__aeabi_dcmpgt>
 800ac6a:	2800      	cmp	r0, #0
 800ac6c:	f040 8295 	bne.w	800b19a <_dtoa_r+0x97a>
 800ac70:	4652      	mov	r2, sl
 800ac72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ac76:	4640      	mov	r0, r8
 800ac78:	4649      	mov	r1, r9
 800ac7a:	f7f5 ff4f 	bl	8000b1c <__aeabi_dcmplt>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	f040 8289 	bne.w	800b196 <_dtoa_r+0x976>
 800ac84:	ec5b ab19 	vmov	sl, fp, d9
 800ac88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f2c0 8148 	blt.w	800af20 <_dtoa_r+0x700>
 800ac90:	9a00      	ldr	r2, [sp, #0]
 800ac92:	2a0e      	cmp	r2, #14
 800ac94:	f300 8144 	bgt.w	800af20 <_dtoa_r+0x700>
 800ac98:	4b67      	ldr	r3, [pc, #412]	; (800ae38 <_dtoa_r+0x618>)
 800ac9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aca2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f280 80d5 	bge.w	800ae54 <_dtoa_r+0x634>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	f300 80d1 	bgt.w	800ae54 <_dtoa_r+0x634>
 800acb2:	f040 826f 	bne.w	800b194 <_dtoa_r+0x974>
 800acb6:	4b65      	ldr	r3, [pc, #404]	; (800ae4c <_dtoa_r+0x62c>)
 800acb8:	2200      	movs	r2, #0
 800acba:	4640      	mov	r0, r8
 800acbc:	4649      	mov	r1, r9
 800acbe:	f7f5 fcbb 	bl	8000638 <__aeabi_dmul>
 800acc2:	4652      	mov	r2, sl
 800acc4:	465b      	mov	r3, fp
 800acc6:	f7f5 ff3d 	bl	8000b44 <__aeabi_dcmpge>
 800acca:	9e03      	ldr	r6, [sp, #12]
 800accc:	4637      	mov	r7, r6
 800acce:	2800      	cmp	r0, #0
 800acd0:	f040 8245 	bne.w	800b15e <_dtoa_r+0x93e>
 800acd4:	9d01      	ldr	r5, [sp, #4]
 800acd6:	2331      	movs	r3, #49	; 0x31
 800acd8:	f805 3b01 	strb.w	r3, [r5], #1
 800acdc:	9b00      	ldr	r3, [sp, #0]
 800acde:	3301      	adds	r3, #1
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	e240      	b.n	800b166 <_dtoa_r+0x946>
 800ace4:	07f2      	lsls	r2, r6, #31
 800ace6:	d505      	bpl.n	800acf4 <_dtoa_r+0x4d4>
 800ace8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acec:	f7f5 fca4 	bl	8000638 <__aeabi_dmul>
 800acf0:	3501      	adds	r5, #1
 800acf2:	2301      	movs	r3, #1
 800acf4:	1076      	asrs	r6, r6, #1
 800acf6:	3708      	adds	r7, #8
 800acf8:	e777      	b.n	800abea <_dtoa_r+0x3ca>
 800acfa:	2502      	movs	r5, #2
 800acfc:	e779      	b.n	800abf2 <_dtoa_r+0x3d2>
 800acfe:	9f00      	ldr	r7, [sp, #0]
 800ad00:	9e03      	ldr	r6, [sp, #12]
 800ad02:	e794      	b.n	800ac2e <_dtoa_r+0x40e>
 800ad04:	9901      	ldr	r1, [sp, #4]
 800ad06:	4b4c      	ldr	r3, [pc, #304]	; (800ae38 <_dtoa_r+0x618>)
 800ad08:	4431      	add	r1, r6
 800ad0a:	910d      	str	r1, [sp, #52]	; 0x34
 800ad0c:	9908      	ldr	r1, [sp, #32]
 800ad0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ad12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad16:	2900      	cmp	r1, #0
 800ad18:	d043      	beq.n	800ada2 <_dtoa_r+0x582>
 800ad1a:	494d      	ldr	r1, [pc, #308]	; (800ae50 <_dtoa_r+0x630>)
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	f7f5 fdb5 	bl	800088c <__aeabi_ddiv>
 800ad22:	4652      	mov	r2, sl
 800ad24:	465b      	mov	r3, fp
 800ad26:	f7f5 facf 	bl	80002c8 <__aeabi_dsub>
 800ad2a:	9d01      	ldr	r5, [sp, #4]
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	468b      	mov	fp, r1
 800ad30:	4649      	mov	r1, r9
 800ad32:	4640      	mov	r0, r8
 800ad34:	f7f5 ff30 	bl	8000b98 <__aeabi_d2iz>
 800ad38:	4606      	mov	r6, r0
 800ad3a:	f7f5 fc13 	bl	8000564 <__aeabi_i2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	4640      	mov	r0, r8
 800ad44:	4649      	mov	r1, r9
 800ad46:	f7f5 fabf 	bl	80002c8 <__aeabi_dsub>
 800ad4a:	3630      	adds	r6, #48	; 0x30
 800ad4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ad50:	4652      	mov	r2, sl
 800ad52:	465b      	mov	r3, fp
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	f7f5 fee0 	bl	8000b1c <__aeabi_dcmplt>
 800ad5c:	2800      	cmp	r0, #0
 800ad5e:	d163      	bne.n	800ae28 <_dtoa_r+0x608>
 800ad60:	4642      	mov	r2, r8
 800ad62:	464b      	mov	r3, r9
 800ad64:	4936      	ldr	r1, [pc, #216]	; (800ae40 <_dtoa_r+0x620>)
 800ad66:	2000      	movs	r0, #0
 800ad68:	f7f5 faae 	bl	80002c8 <__aeabi_dsub>
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	465b      	mov	r3, fp
 800ad70:	f7f5 fed4 	bl	8000b1c <__aeabi_dcmplt>
 800ad74:	2800      	cmp	r0, #0
 800ad76:	f040 80b5 	bne.w	800aee4 <_dtoa_r+0x6c4>
 800ad7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad7c:	429d      	cmp	r5, r3
 800ad7e:	d081      	beq.n	800ac84 <_dtoa_r+0x464>
 800ad80:	4b30      	ldr	r3, [pc, #192]	; (800ae44 <_dtoa_r+0x624>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	4650      	mov	r0, sl
 800ad86:	4659      	mov	r1, fp
 800ad88:	f7f5 fc56 	bl	8000638 <__aeabi_dmul>
 800ad8c:	4b2d      	ldr	r3, [pc, #180]	; (800ae44 <_dtoa_r+0x624>)
 800ad8e:	4682      	mov	sl, r0
 800ad90:	468b      	mov	fp, r1
 800ad92:	4640      	mov	r0, r8
 800ad94:	4649      	mov	r1, r9
 800ad96:	2200      	movs	r2, #0
 800ad98:	f7f5 fc4e 	bl	8000638 <__aeabi_dmul>
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4689      	mov	r9, r1
 800ada0:	e7c6      	b.n	800ad30 <_dtoa_r+0x510>
 800ada2:	4650      	mov	r0, sl
 800ada4:	4659      	mov	r1, fp
 800ada6:	f7f5 fc47 	bl	8000638 <__aeabi_dmul>
 800adaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adac:	9d01      	ldr	r5, [sp, #4]
 800adae:	930f      	str	r3, [sp, #60]	; 0x3c
 800adb0:	4682      	mov	sl, r0
 800adb2:	468b      	mov	fp, r1
 800adb4:	4649      	mov	r1, r9
 800adb6:	4640      	mov	r0, r8
 800adb8:	f7f5 feee 	bl	8000b98 <__aeabi_d2iz>
 800adbc:	4606      	mov	r6, r0
 800adbe:	f7f5 fbd1 	bl	8000564 <__aeabi_i2d>
 800adc2:	3630      	adds	r6, #48	; 0x30
 800adc4:	4602      	mov	r2, r0
 800adc6:	460b      	mov	r3, r1
 800adc8:	4640      	mov	r0, r8
 800adca:	4649      	mov	r1, r9
 800adcc:	f7f5 fa7c 	bl	80002c8 <__aeabi_dsub>
 800add0:	f805 6b01 	strb.w	r6, [r5], #1
 800add4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800add6:	429d      	cmp	r5, r3
 800add8:	4680      	mov	r8, r0
 800adda:	4689      	mov	r9, r1
 800addc:	f04f 0200 	mov.w	r2, #0
 800ade0:	d124      	bne.n	800ae2c <_dtoa_r+0x60c>
 800ade2:	4b1b      	ldr	r3, [pc, #108]	; (800ae50 <_dtoa_r+0x630>)
 800ade4:	4650      	mov	r0, sl
 800ade6:	4659      	mov	r1, fp
 800ade8:	f7f5 fa70 	bl	80002cc <__adddf3>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4640      	mov	r0, r8
 800adf2:	4649      	mov	r1, r9
 800adf4:	f7f5 feb0 	bl	8000b58 <__aeabi_dcmpgt>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	d173      	bne.n	800aee4 <_dtoa_r+0x6c4>
 800adfc:	4652      	mov	r2, sl
 800adfe:	465b      	mov	r3, fp
 800ae00:	4913      	ldr	r1, [pc, #76]	; (800ae50 <_dtoa_r+0x630>)
 800ae02:	2000      	movs	r0, #0
 800ae04:	f7f5 fa60 	bl	80002c8 <__aeabi_dsub>
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	4640      	mov	r0, r8
 800ae0e:	4649      	mov	r1, r9
 800ae10:	f7f5 fe84 	bl	8000b1c <__aeabi_dcmplt>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	f43f af35 	beq.w	800ac84 <_dtoa_r+0x464>
 800ae1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ae1c:	1e6b      	subs	r3, r5, #1
 800ae1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ae24:	2b30      	cmp	r3, #48	; 0x30
 800ae26:	d0f8      	beq.n	800ae1a <_dtoa_r+0x5fa>
 800ae28:	9700      	str	r7, [sp, #0]
 800ae2a:	e049      	b.n	800aec0 <_dtoa_r+0x6a0>
 800ae2c:	4b05      	ldr	r3, [pc, #20]	; (800ae44 <_dtoa_r+0x624>)
 800ae2e:	f7f5 fc03 	bl	8000638 <__aeabi_dmul>
 800ae32:	4680      	mov	r8, r0
 800ae34:	4689      	mov	r9, r1
 800ae36:	e7bd      	b.n	800adb4 <_dtoa_r+0x594>
 800ae38:	0800da18 	.word	0x0800da18
 800ae3c:	0800d9f0 	.word	0x0800d9f0
 800ae40:	3ff00000 	.word	0x3ff00000
 800ae44:	40240000 	.word	0x40240000
 800ae48:	401c0000 	.word	0x401c0000
 800ae4c:	40140000 	.word	0x40140000
 800ae50:	3fe00000 	.word	0x3fe00000
 800ae54:	9d01      	ldr	r5, [sp, #4]
 800ae56:	4656      	mov	r6, sl
 800ae58:	465f      	mov	r7, fp
 800ae5a:	4642      	mov	r2, r8
 800ae5c:	464b      	mov	r3, r9
 800ae5e:	4630      	mov	r0, r6
 800ae60:	4639      	mov	r1, r7
 800ae62:	f7f5 fd13 	bl	800088c <__aeabi_ddiv>
 800ae66:	f7f5 fe97 	bl	8000b98 <__aeabi_d2iz>
 800ae6a:	4682      	mov	sl, r0
 800ae6c:	f7f5 fb7a 	bl	8000564 <__aeabi_i2d>
 800ae70:	4642      	mov	r2, r8
 800ae72:	464b      	mov	r3, r9
 800ae74:	f7f5 fbe0 	bl	8000638 <__aeabi_dmul>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	4639      	mov	r1, r7
 800ae80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ae84:	f7f5 fa20 	bl	80002c8 <__aeabi_dsub>
 800ae88:	f805 6b01 	strb.w	r6, [r5], #1
 800ae8c:	9e01      	ldr	r6, [sp, #4]
 800ae8e:	9f03      	ldr	r7, [sp, #12]
 800ae90:	1bae      	subs	r6, r5, r6
 800ae92:	42b7      	cmp	r7, r6
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	d135      	bne.n	800af06 <_dtoa_r+0x6e6>
 800ae9a:	f7f5 fa17 	bl	80002cc <__adddf3>
 800ae9e:	4642      	mov	r2, r8
 800aea0:	464b      	mov	r3, r9
 800aea2:	4606      	mov	r6, r0
 800aea4:	460f      	mov	r7, r1
 800aea6:	f7f5 fe57 	bl	8000b58 <__aeabi_dcmpgt>
 800aeaa:	b9d0      	cbnz	r0, 800aee2 <_dtoa_r+0x6c2>
 800aeac:	4642      	mov	r2, r8
 800aeae:	464b      	mov	r3, r9
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 fe28 	bl	8000b08 <__aeabi_dcmpeq>
 800aeb8:	b110      	cbz	r0, 800aec0 <_dtoa_r+0x6a0>
 800aeba:	f01a 0f01 	tst.w	sl, #1
 800aebe:	d110      	bne.n	800aee2 <_dtoa_r+0x6c2>
 800aec0:	4620      	mov	r0, r4
 800aec2:	ee18 1a10 	vmov	r1, s16
 800aec6:	f000 fbfb 	bl	800b6c0 <_Bfree>
 800aeca:	2300      	movs	r3, #0
 800aecc:	9800      	ldr	r0, [sp, #0]
 800aece:	702b      	strb	r3, [r5, #0]
 800aed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aed2:	3001      	adds	r0, #1
 800aed4:	6018      	str	r0, [r3, #0]
 800aed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	f43f acf1 	beq.w	800a8c0 <_dtoa_r+0xa0>
 800aede:	601d      	str	r5, [r3, #0]
 800aee0:	e4ee      	b.n	800a8c0 <_dtoa_r+0xa0>
 800aee2:	9f00      	ldr	r7, [sp, #0]
 800aee4:	462b      	mov	r3, r5
 800aee6:	461d      	mov	r5, r3
 800aee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeec:	2a39      	cmp	r2, #57	; 0x39
 800aeee:	d106      	bne.n	800aefe <_dtoa_r+0x6de>
 800aef0:	9a01      	ldr	r2, [sp, #4]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d1f7      	bne.n	800aee6 <_dtoa_r+0x6c6>
 800aef6:	9901      	ldr	r1, [sp, #4]
 800aef8:	2230      	movs	r2, #48	; 0x30
 800aefa:	3701      	adds	r7, #1
 800aefc:	700a      	strb	r2, [r1, #0]
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	3201      	adds	r2, #1
 800af02:	701a      	strb	r2, [r3, #0]
 800af04:	e790      	b.n	800ae28 <_dtoa_r+0x608>
 800af06:	4ba6      	ldr	r3, [pc, #664]	; (800b1a0 <_dtoa_r+0x980>)
 800af08:	2200      	movs	r2, #0
 800af0a:	f7f5 fb95 	bl	8000638 <__aeabi_dmul>
 800af0e:	2200      	movs	r2, #0
 800af10:	2300      	movs	r3, #0
 800af12:	4606      	mov	r6, r0
 800af14:	460f      	mov	r7, r1
 800af16:	f7f5 fdf7 	bl	8000b08 <__aeabi_dcmpeq>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d09d      	beq.n	800ae5a <_dtoa_r+0x63a>
 800af1e:	e7cf      	b.n	800aec0 <_dtoa_r+0x6a0>
 800af20:	9a08      	ldr	r2, [sp, #32]
 800af22:	2a00      	cmp	r2, #0
 800af24:	f000 80d7 	beq.w	800b0d6 <_dtoa_r+0x8b6>
 800af28:	9a06      	ldr	r2, [sp, #24]
 800af2a:	2a01      	cmp	r2, #1
 800af2c:	f300 80ba 	bgt.w	800b0a4 <_dtoa_r+0x884>
 800af30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af32:	2a00      	cmp	r2, #0
 800af34:	f000 80b2 	beq.w	800b09c <_dtoa_r+0x87c>
 800af38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800af3c:	9e07      	ldr	r6, [sp, #28]
 800af3e:	9d04      	ldr	r5, [sp, #16]
 800af40:	9a04      	ldr	r2, [sp, #16]
 800af42:	441a      	add	r2, r3
 800af44:	9204      	str	r2, [sp, #16]
 800af46:	9a05      	ldr	r2, [sp, #20]
 800af48:	2101      	movs	r1, #1
 800af4a:	441a      	add	r2, r3
 800af4c:	4620      	mov	r0, r4
 800af4e:	9205      	str	r2, [sp, #20]
 800af50:	f000 fc6e 	bl	800b830 <__i2b>
 800af54:	4607      	mov	r7, r0
 800af56:	2d00      	cmp	r5, #0
 800af58:	dd0c      	ble.n	800af74 <_dtoa_r+0x754>
 800af5a:	9b05      	ldr	r3, [sp, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dd09      	ble.n	800af74 <_dtoa_r+0x754>
 800af60:	42ab      	cmp	r3, r5
 800af62:	9a04      	ldr	r2, [sp, #16]
 800af64:	bfa8      	it	ge
 800af66:	462b      	movge	r3, r5
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	9204      	str	r2, [sp, #16]
 800af6c:	9a05      	ldr	r2, [sp, #20]
 800af6e:	1aed      	subs	r5, r5, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	9305      	str	r3, [sp, #20]
 800af74:	9b07      	ldr	r3, [sp, #28]
 800af76:	b31b      	cbz	r3, 800afc0 <_dtoa_r+0x7a0>
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 80af 	beq.w	800b0de <_dtoa_r+0x8be>
 800af80:	2e00      	cmp	r6, #0
 800af82:	dd13      	ble.n	800afac <_dtoa_r+0x78c>
 800af84:	4639      	mov	r1, r7
 800af86:	4632      	mov	r2, r6
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fd11 	bl	800b9b0 <__pow5mult>
 800af8e:	ee18 2a10 	vmov	r2, s16
 800af92:	4601      	mov	r1, r0
 800af94:	4607      	mov	r7, r0
 800af96:	4620      	mov	r0, r4
 800af98:	f000 fc60 	bl	800b85c <__multiply>
 800af9c:	ee18 1a10 	vmov	r1, s16
 800afa0:	4680      	mov	r8, r0
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fb8c 	bl	800b6c0 <_Bfree>
 800afa8:	ee08 8a10 	vmov	s16, r8
 800afac:	9b07      	ldr	r3, [sp, #28]
 800afae:	1b9a      	subs	r2, r3, r6
 800afb0:	d006      	beq.n	800afc0 <_dtoa_r+0x7a0>
 800afb2:	ee18 1a10 	vmov	r1, s16
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 fcfa 	bl	800b9b0 <__pow5mult>
 800afbc:	ee08 0a10 	vmov	s16, r0
 800afc0:	2101      	movs	r1, #1
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 fc34 	bl	800b830 <__i2b>
 800afc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afca:	2b00      	cmp	r3, #0
 800afcc:	4606      	mov	r6, r0
 800afce:	f340 8088 	ble.w	800b0e2 <_dtoa_r+0x8c2>
 800afd2:	461a      	mov	r2, r3
 800afd4:	4601      	mov	r1, r0
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 fcea 	bl	800b9b0 <__pow5mult>
 800afdc:	9b06      	ldr	r3, [sp, #24]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	4606      	mov	r6, r0
 800afe2:	f340 8081 	ble.w	800b0e8 <_dtoa_r+0x8c8>
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	6933      	ldr	r3, [r6, #16]
 800afec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aff0:	6918      	ldr	r0, [r3, #16]
 800aff2:	f000 fbcd 	bl	800b790 <__hi0bits>
 800aff6:	f1c0 0020 	rsb	r0, r0, #32
 800affa:	9b05      	ldr	r3, [sp, #20]
 800affc:	4418      	add	r0, r3
 800affe:	f010 001f 	ands.w	r0, r0, #31
 800b002:	f000 8092 	beq.w	800b12a <_dtoa_r+0x90a>
 800b006:	f1c0 0320 	rsb	r3, r0, #32
 800b00a:	2b04      	cmp	r3, #4
 800b00c:	f340 808a 	ble.w	800b124 <_dtoa_r+0x904>
 800b010:	f1c0 001c 	rsb	r0, r0, #28
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	4403      	add	r3, r0
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	9b05      	ldr	r3, [sp, #20]
 800b01c:	4403      	add	r3, r0
 800b01e:	4405      	add	r5, r0
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	9b04      	ldr	r3, [sp, #16]
 800b024:	2b00      	cmp	r3, #0
 800b026:	dd07      	ble.n	800b038 <_dtoa_r+0x818>
 800b028:	ee18 1a10 	vmov	r1, s16
 800b02c:	461a      	mov	r2, r3
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fd18 	bl	800ba64 <__lshift>
 800b034:	ee08 0a10 	vmov	s16, r0
 800b038:	9b05      	ldr	r3, [sp, #20]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dd05      	ble.n	800b04a <_dtoa_r+0x82a>
 800b03e:	4631      	mov	r1, r6
 800b040:	461a      	mov	r2, r3
 800b042:	4620      	mov	r0, r4
 800b044:	f000 fd0e 	bl	800ba64 <__lshift>
 800b048:	4606      	mov	r6, r0
 800b04a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d06e      	beq.n	800b12e <_dtoa_r+0x90e>
 800b050:	ee18 0a10 	vmov	r0, s16
 800b054:	4631      	mov	r1, r6
 800b056:	f000 fd75 	bl	800bb44 <__mcmp>
 800b05a:	2800      	cmp	r0, #0
 800b05c:	da67      	bge.n	800b12e <_dtoa_r+0x90e>
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	3b01      	subs	r3, #1
 800b062:	ee18 1a10 	vmov	r1, s16
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	220a      	movs	r2, #10
 800b06a:	2300      	movs	r3, #0
 800b06c:	4620      	mov	r0, r4
 800b06e:	f000 fb49 	bl	800b704 <__multadd>
 800b072:	9b08      	ldr	r3, [sp, #32]
 800b074:	ee08 0a10 	vmov	s16, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 81b1 	beq.w	800b3e0 <_dtoa_r+0xbc0>
 800b07e:	2300      	movs	r3, #0
 800b080:	4639      	mov	r1, r7
 800b082:	220a      	movs	r2, #10
 800b084:	4620      	mov	r0, r4
 800b086:	f000 fb3d 	bl	800b704 <__multadd>
 800b08a:	9b02      	ldr	r3, [sp, #8]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	4607      	mov	r7, r0
 800b090:	f300 808e 	bgt.w	800b1b0 <_dtoa_r+0x990>
 800b094:	9b06      	ldr	r3, [sp, #24]
 800b096:	2b02      	cmp	r3, #2
 800b098:	dc51      	bgt.n	800b13e <_dtoa_r+0x91e>
 800b09a:	e089      	b.n	800b1b0 <_dtoa_r+0x990>
 800b09c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b09e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b0a2:	e74b      	b.n	800af3c <_dtoa_r+0x71c>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	1e5e      	subs	r6, r3, #1
 800b0a8:	9b07      	ldr	r3, [sp, #28]
 800b0aa:	42b3      	cmp	r3, r6
 800b0ac:	bfbf      	itttt	lt
 800b0ae:	9b07      	ldrlt	r3, [sp, #28]
 800b0b0:	9607      	strlt	r6, [sp, #28]
 800b0b2:	1af2      	sublt	r2, r6, r3
 800b0b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b0b6:	bfb6      	itet	lt
 800b0b8:	189b      	addlt	r3, r3, r2
 800b0ba:	1b9e      	subge	r6, r3, r6
 800b0bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b0be:	9b03      	ldr	r3, [sp, #12]
 800b0c0:	bfb8      	it	lt
 800b0c2:	2600      	movlt	r6, #0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	bfb7      	itett	lt
 800b0c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b0cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b0d0:	1a9d      	sublt	r5, r3, r2
 800b0d2:	2300      	movlt	r3, #0
 800b0d4:	e734      	b.n	800af40 <_dtoa_r+0x720>
 800b0d6:	9e07      	ldr	r6, [sp, #28]
 800b0d8:	9d04      	ldr	r5, [sp, #16]
 800b0da:	9f08      	ldr	r7, [sp, #32]
 800b0dc:	e73b      	b.n	800af56 <_dtoa_r+0x736>
 800b0de:	9a07      	ldr	r2, [sp, #28]
 800b0e0:	e767      	b.n	800afb2 <_dtoa_r+0x792>
 800b0e2:	9b06      	ldr	r3, [sp, #24]
 800b0e4:	2b01      	cmp	r3, #1
 800b0e6:	dc18      	bgt.n	800b11a <_dtoa_r+0x8fa>
 800b0e8:	f1ba 0f00 	cmp.w	sl, #0
 800b0ec:	d115      	bne.n	800b11a <_dtoa_r+0x8fa>
 800b0ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0f2:	b993      	cbnz	r3, 800b11a <_dtoa_r+0x8fa>
 800b0f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0f8:	0d1b      	lsrs	r3, r3, #20
 800b0fa:	051b      	lsls	r3, r3, #20
 800b0fc:	b183      	cbz	r3, 800b120 <_dtoa_r+0x900>
 800b0fe:	9b04      	ldr	r3, [sp, #16]
 800b100:	3301      	adds	r3, #1
 800b102:	9304      	str	r3, [sp, #16]
 800b104:	9b05      	ldr	r3, [sp, #20]
 800b106:	3301      	adds	r3, #1
 800b108:	9305      	str	r3, [sp, #20]
 800b10a:	f04f 0801 	mov.w	r8, #1
 800b10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b110:	2b00      	cmp	r3, #0
 800b112:	f47f af6a 	bne.w	800afea <_dtoa_r+0x7ca>
 800b116:	2001      	movs	r0, #1
 800b118:	e76f      	b.n	800affa <_dtoa_r+0x7da>
 800b11a:	f04f 0800 	mov.w	r8, #0
 800b11e:	e7f6      	b.n	800b10e <_dtoa_r+0x8ee>
 800b120:	4698      	mov	r8, r3
 800b122:	e7f4      	b.n	800b10e <_dtoa_r+0x8ee>
 800b124:	f43f af7d 	beq.w	800b022 <_dtoa_r+0x802>
 800b128:	4618      	mov	r0, r3
 800b12a:	301c      	adds	r0, #28
 800b12c:	e772      	b.n	800b014 <_dtoa_r+0x7f4>
 800b12e:	9b03      	ldr	r3, [sp, #12]
 800b130:	2b00      	cmp	r3, #0
 800b132:	dc37      	bgt.n	800b1a4 <_dtoa_r+0x984>
 800b134:	9b06      	ldr	r3, [sp, #24]
 800b136:	2b02      	cmp	r3, #2
 800b138:	dd34      	ble.n	800b1a4 <_dtoa_r+0x984>
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	9302      	str	r3, [sp, #8]
 800b13e:	9b02      	ldr	r3, [sp, #8]
 800b140:	b96b      	cbnz	r3, 800b15e <_dtoa_r+0x93e>
 800b142:	4631      	mov	r1, r6
 800b144:	2205      	movs	r2, #5
 800b146:	4620      	mov	r0, r4
 800b148:	f000 fadc 	bl	800b704 <__multadd>
 800b14c:	4601      	mov	r1, r0
 800b14e:	4606      	mov	r6, r0
 800b150:	ee18 0a10 	vmov	r0, s16
 800b154:	f000 fcf6 	bl	800bb44 <__mcmp>
 800b158:	2800      	cmp	r0, #0
 800b15a:	f73f adbb 	bgt.w	800acd4 <_dtoa_r+0x4b4>
 800b15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b160:	9d01      	ldr	r5, [sp, #4]
 800b162:	43db      	mvns	r3, r3
 800b164:	9300      	str	r3, [sp, #0]
 800b166:	f04f 0800 	mov.w	r8, #0
 800b16a:	4631      	mov	r1, r6
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 faa7 	bl	800b6c0 <_Bfree>
 800b172:	2f00      	cmp	r7, #0
 800b174:	f43f aea4 	beq.w	800aec0 <_dtoa_r+0x6a0>
 800b178:	f1b8 0f00 	cmp.w	r8, #0
 800b17c:	d005      	beq.n	800b18a <_dtoa_r+0x96a>
 800b17e:	45b8      	cmp	r8, r7
 800b180:	d003      	beq.n	800b18a <_dtoa_r+0x96a>
 800b182:	4641      	mov	r1, r8
 800b184:	4620      	mov	r0, r4
 800b186:	f000 fa9b 	bl	800b6c0 <_Bfree>
 800b18a:	4639      	mov	r1, r7
 800b18c:	4620      	mov	r0, r4
 800b18e:	f000 fa97 	bl	800b6c0 <_Bfree>
 800b192:	e695      	b.n	800aec0 <_dtoa_r+0x6a0>
 800b194:	2600      	movs	r6, #0
 800b196:	4637      	mov	r7, r6
 800b198:	e7e1      	b.n	800b15e <_dtoa_r+0x93e>
 800b19a:	9700      	str	r7, [sp, #0]
 800b19c:	4637      	mov	r7, r6
 800b19e:	e599      	b.n	800acd4 <_dtoa_r+0x4b4>
 800b1a0:	40240000 	.word	0x40240000
 800b1a4:	9b08      	ldr	r3, [sp, #32]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	f000 80ca 	beq.w	800b340 <_dtoa_r+0xb20>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	9302      	str	r3, [sp, #8]
 800b1b0:	2d00      	cmp	r5, #0
 800b1b2:	dd05      	ble.n	800b1c0 <_dtoa_r+0x9a0>
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	4620      	mov	r0, r4
 800b1ba:	f000 fc53 	bl	800ba64 <__lshift>
 800b1be:	4607      	mov	r7, r0
 800b1c0:	f1b8 0f00 	cmp.w	r8, #0
 800b1c4:	d05b      	beq.n	800b27e <_dtoa_r+0xa5e>
 800b1c6:	6879      	ldr	r1, [r7, #4]
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	f000 fa39 	bl	800b640 <_Balloc>
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	b928      	cbnz	r0, 800b1de <_dtoa_r+0x9be>
 800b1d2:	4b87      	ldr	r3, [pc, #540]	; (800b3f0 <_dtoa_r+0xbd0>)
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b1da:	f7ff bb3b 	b.w	800a854 <_dtoa_r+0x34>
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	3202      	adds	r2, #2
 800b1e2:	0092      	lsls	r2, r2, #2
 800b1e4:	f107 010c 	add.w	r1, r7, #12
 800b1e8:	300c      	adds	r0, #12
 800b1ea:	f7fe fa25 	bl	8009638 <memcpy>
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f000 fc36 	bl	800ba64 <__lshift>
 800b1f8:	9b01      	ldr	r3, [sp, #4]
 800b1fa:	f103 0901 	add.w	r9, r3, #1
 800b1fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b202:	4413      	add	r3, r2
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	f00a 0301 	and.w	r3, sl, #1
 800b20a:	46b8      	mov	r8, r7
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	4607      	mov	r7, r0
 800b210:	4631      	mov	r1, r6
 800b212:	ee18 0a10 	vmov	r0, s16
 800b216:	f7ff fa77 	bl	800a708 <quorem>
 800b21a:	4641      	mov	r1, r8
 800b21c:	9002      	str	r0, [sp, #8]
 800b21e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b222:	ee18 0a10 	vmov	r0, s16
 800b226:	f000 fc8d 	bl	800bb44 <__mcmp>
 800b22a:	463a      	mov	r2, r7
 800b22c:	9003      	str	r0, [sp, #12]
 800b22e:	4631      	mov	r1, r6
 800b230:	4620      	mov	r0, r4
 800b232:	f000 fca3 	bl	800bb7c <__mdiff>
 800b236:	68c2      	ldr	r2, [r0, #12]
 800b238:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800b23c:	4605      	mov	r5, r0
 800b23e:	bb02      	cbnz	r2, 800b282 <_dtoa_r+0xa62>
 800b240:	4601      	mov	r1, r0
 800b242:	ee18 0a10 	vmov	r0, s16
 800b246:	f000 fc7d 	bl	800bb44 <__mcmp>
 800b24a:	4602      	mov	r2, r0
 800b24c:	4629      	mov	r1, r5
 800b24e:	4620      	mov	r0, r4
 800b250:	9207      	str	r2, [sp, #28]
 800b252:	f000 fa35 	bl	800b6c0 <_Bfree>
 800b256:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b25a:	ea43 0102 	orr.w	r1, r3, r2
 800b25e:	9b04      	ldr	r3, [sp, #16]
 800b260:	430b      	orrs	r3, r1
 800b262:	464d      	mov	r5, r9
 800b264:	d10f      	bne.n	800b286 <_dtoa_r+0xa66>
 800b266:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b26a:	d02a      	beq.n	800b2c2 <_dtoa_r+0xaa2>
 800b26c:	9b03      	ldr	r3, [sp, #12]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dd02      	ble.n	800b278 <_dtoa_r+0xa58>
 800b272:	9b02      	ldr	r3, [sp, #8]
 800b274:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b278:	f88b a000 	strb.w	sl, [fp]
 800b27c:	e775      	b.n	800b16a <_dtoa_r+0x94a>
 800b27e:	4638      	mov	r0, r7
 800b280:	e7ba      	b.n	800b1f8 <_dtoa_r+0x9d8>
 800b282:	2201      	movs	r2, #1
 800b284:	e7e2      	b.n	800b24c <_dtoa_r+0xa2c>
 800b286:	9b03      	ldr	r3, [sp, #12]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	db04      	blt.n	800b296 <_dtoa_r+0xa76>
 800b28c:	9906      	ldr	r1, [sp, #24]
 800b28e:	430b      	orrs	r3, r1
 800b290:	9904      	ldr	r1, [sp, #16]
 800b292:	430b      	orrs	r3, r1
 800b294:	d122      	bne.n	800b2dc <_dtoa_r+0xabc>
 800b296:	2a00      	cmp	r2, #0
 800b298:	ddee      	ble.n	800b278 <_dtoa_r+0xa58>
 800b29a:	ee18 1a10 	vmov	r1, s16
 800b29e:	2201      	movs	r2, #1
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fbdf 	bl	800ba64 <__lshift>
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	ee08 0a10 	vmov	s16, r0
 800b2ac:	f000 fc4a 	bl	800bb44 <__mcmp>
 800b2b0:	2800      	cmp	r0, #0
 800b2b2:	dc03      	bgt.n	800b2bc <_dtoa_r+0xa9c>
 800b2b4:	d1e0      	bne.n	800b278 <_dtoa_r+0xa58>
 800b2b6:	f01a 0f01 	tst.w	sl, #1
 800b2ba:	d0dd      	beq.n	800b278 <_dtoa_r+0xa58>
 800b2bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2c0:	d1d7      	bne.n	800b272 <_dtoa_r+0xa52>
 800b2c2:	2339      	movs	r3, #57	; 0x39
 800b2c4:	f88b 3000 	strb.w	r3, [fp]
 800b2c8:	462b      	mov	r3, r5
 800b2ca:	461d      	mov	r5, r3
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b2d2:	2a39      	cmp	r2, #57	; 0x39
 800b2d4:	d071      	beq.n	800b3ba <_dtoa_r+0xb9a>
 800b2d6:	3201      	adds	r2, #1
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e746      	b.n	800b16a <_dtoa_r+0x94a>
 800b2dc:	2a00      	cmp	r2, #0
 800b2de:	dd07      	ble.n	800b2f0 <_dtoa_r+0xad0>
 800b2e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b2e4:	d0ed      	beq.n	800b2c2 <_dtoa_r+0xaa2>
 800b2e6:	f10a 0301 	add.w	r3, sl, #1
 800b2ea:	f88b 3000 	strb.w	r3, [fp]
 800b2ee:	e73c      	b.n	800b16a <_dtoa_r+0x94a>
 800b2f0:	9b05      	ldr	r3, [sp, #20]
 800b2f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b2f6:	4599      	cmp	r9, r3
 800b2f8:	d047      	beq.n	800b38a <_dtoa_r+0xb6a>
 800b2fa:	ee18 1a10 	vmov	r1, s16
 800b2fe:	2300      	movs	r3, #0
 800b300:	220a      	movs	r2, #10
 800b302:	4620      	mov	r0, r4
 800b304:	f000 f9fe 	bl	800b704 <__multadd>
 800b308:	45b8      	cmp	r8, r7
 800b30a:	ee08 0a10 	vmov	s16, r0
 800b30e:	f04f 0300 	mov.w	r3, #0
 800b312:	f04f 020a 	mov.w	r2, #10
 800b316:	4641      	mov	r1, r8
 800b318:	4620      	mov	r0, r4
 800b31a:	d106      	bne.n	800b32a <_dtoa_r+0xb0a>
 800b31c:	f000 f9f2 	bl	800b704 <__multadd>
 800b320:	4680      	mov	r8, r0
 800b322:	4607      	mov	r7, r0
 800b324:	f109 0901 	add.w	r9, r9, #1
 800b328:	e772      	b.n	800b210 <_dtoa_r+0x9f0>
 800b32a:	f000 f9eb 	bl	800b704 <__multadd>
 800b32e:	4639      	mov	r1, r7
 800b330:	4680      	mov	r8, r0
 800b332:	2300      	movs	r3, #0
 800b334:	220a      	movs	r2, #10
 800b336:	4620      	mov	r0, r4
 800b338:	f000 f9e4 	bl	800b704 <__multadd>
 800b33c:	4607      	mov	r7, r0
 800b33e:	e7f1      	b.n	800b324 <_dtoa_r+0xb04>
 800b340:	9b03      	ldr	r3, [sp, #12]
 800b342:	9302      	str	r3, [sp, #8]
 800b344:	9d01      	ldr	r5, [sp, #4]
 800b346:	ee18 0a10 	vmov	r0, s16
 800b34a:	4631      	mov	r1, r6
 800b34c:	f7ff f9dc 	bl	800a708 <quorem>
 800b350:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b354:	9b01      	ldr	r3, [sp, #4]
 800b356:	f805 ab01 	strb.w	sl, [r5], #1
 800b35a:	1aea      	subs	r2, r5, r3
 800b35c:	9b02      	ldr	r3, [sp, #8]
 800b35e:	4293      	cmp	r3, r2
 800b360:	dd09      	ble.n	800b376 <_dtoa_r+0xb56>
 800b362:	ee18 1a10 	vmov	r1, s16
 800b366:	2300      	movs	r3, #0
 800b368:	220a      	movs	r2, #10
 800b36a:	4620      	mov	r0, r4
 800b36c:	f000 f9ca 	bl	800b704 <__multadd>
 800b370:	ee08 0a10 	vmov	s16, r0
 800b374:	e7e7      	b.n	800b346 <_dtoa_r+0xb26>
 800b376:	9b02      	ldr	r3, [sp, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bfc8      	it	gt
 800b37c:	461d      	movgt	r5, r3
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	bfd8      	it	le
 800b382:	2501      	movle	r5, #1
 800b384:	441d      	add	r5, r3
 800b386:	f04f 0800 	mov.w	r8, #0
 800b38a:	ee18 1a10 	vmov	r1, s16
 800b38e:	2201      	movs	r2, #1
 800b390:	4620      	mov	r0, r4
 800b392:	f000 fb67 	bl	800ba64 <__lshift>
 800b396:	4631      	mov	r1, r6
 800b398:	ee08 0a10 	vmov	s16, r0
 800b39c:	f000 fbd2 	bl	800bb44 <__mcmp>
 800b3a0:	2800      	cmp	r0, #0
 800b3a2:	dc91      	bgt.n	800b2c8 <_dtoa_r+0xaa8>
 800b3a4:	d102      	bne.n	800b3ac <_dtoa_r+0xb8c>
 800b3a6:	f01a 0f01 	tst.w	sl, #1
 800b3aa:	d18d      	bne.n	800b2c8 <_dtoa_r+0xaa8>
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3b4:	2a30      	cmp	r2, #48	; 0x30
 800b3b6:	d0fa      	beq.n	800b3ae <_dtoa_r+0xb8e>
 800b3b8:	e6d7      	b.n	800b16a <_dtoa_r+0x94a>
 800b3ba:	9a01      	ldr	r2, [sp, #4]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d184      	bne.n	800b2ca <_dtoa_r+0xaaa>
 800b3c0:	9b00      	ldr	r3, [sp, #0]
 800b3c2:	3301      	adds	r3, #1
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	2331      	movs	r3, #49	; 0x31
 800b3c8:	7013      	strb	r3, [r2, #0]
 800b3ca:	e6ce      	b.n	800b16a <_dtoa_r+0x94a>
 800b3cc:	4b09      	ldr	r3, [pc, #36]	; (800b3f4 <_dtoa_r+0xbd4>)
 800b3ce:	f7ff ba95 	b.w	800a8fc <_dtoa_r+0xdc>
 800b3d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f47f aa6e 	bne.w	800a8b6 <_dtoa_r+0x96>
 800b3da:	4b07      	ldr	r3, [pc, #28]	; (800b3f8 <_dtoa_r+0xbd8>)
 800b3dc:	f7ff ba8e 	b.w	800a8fc <_dtoa_r+0xdc>
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dcae      	bgt.n	800b344 <_dtoa_r+0xb24>
 800b3e6:	9b06      	ldr	r3, [sp, #24]
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	f73f aea8 	bgt.w	800b13e <_dtoa_r+0x91e>
 800b3ee:	e7a9      	b.n	800b344 <_dtoa_r+0xb24>
 800b3f0:	0800d920 	.word	0x0800d920
 800b3f4:	0800d841 	.word	0x0800d841
 800b3f8:	0800d8a1 	.word	0x0800d8a1

0800b3fc <__errno>:
 800b3fc:	4b01      	ldr	r3, [pc, #4]	; (800b404 <__errno+0x8>)
 800b3fe:	6818      	ldr	r0, [r3, #0]
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	200000e4 	.word	0x200000e4

0800b408 <std>:
 800b408:	2300      	movs	r3, #0
 800b40a:	b510      	push	{r4, lr}
 800b40c:	4604      	mov	r4, r0
 800b40e:	e9c0 3300 	strd	r3, r3, [r0]
 800b412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b416:	6083      	str	r3, [r0, #8]
 800b418:	8181      	strh	r1, [r0, #12]
 800b41a:	6643      	str	r3, [r0, #100]	; 0x64
 800b41c:	81c2      	strh	r2, [r0, #14]
 800b41e:	6183      	str	r3, [r0, #24]
 800b420:	4619      	mov	r1, r3
 800b422:	2208      	movs	r2, #8
 800b424:	305c      	adds	r0, #92	; 0x5c
 800b426:	f7fe f92f 	bl	8009688 <memset>
 800b42a:	4b05      	ldr	r3, [pc, #20]	; (800b440 <std+0x38>)
 800b42c:	6263      	str	r3, [r4, #36]	; 0x24
 800b42e:	4b05      	ldr	r3, [pc, #20]	; (800b444 <std+0x3c>)
 800b430:	62a3      	str	r3, [r4, #40]	; 0x28
 800b432:	4b05      	ldr	r3, [pc, #20]	; (800b448 <std+0x40>)
 800b434:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b436:	4b05      	ldr	r3, [pc, #20]	; (800b44c <std+0x44>)
 800b438:	6224      	str	r4, [r4, #32]
 800b43a:	6323      	str	r3, [r4, #48]	; 0x30
 800b43c:	bd10      	pop	{r4, pc}
 800b43e:	bf00      	nop
 800b440:	0800c059 	.word	0x0800c059
 800b444:	0800c07b 	.word	0x0800c07b
 800b448:	0800c0b3 	.word	0x0800c0b3
 800b44c:	0800c0d7 	.word	0x0800c0d7

0800b450 <_cleanup_r>:
 800b450:	4901      	ldr	r1, [pc, #4]	; (800b458 <_cleanup_r+0x8>)
 800b452:	f000 b8c1 	b.w	800b5d8 <_fwalk_reent>
 800b456:	bf00      	nop
 800b458:	0800c3b1 	.word	0x0800c3b1

0800b45c <__sfmoreglue>:
 800b45c:	b570      	push	{r4, r5, r6, lr}
 800b45e:	2268      	movs	r2, #104	; 0x68
 800b460:	1e4d      	subs	r5, r1, #1
 800b462:	4355      	muls	r5, r2
 800b464:	460e      	mov	r6, r1
 800b466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b46a:	f7fe f9d5 	bl	8009818 <_malloc_r>
 800b46e:	4604      	mov	r4, r0
 800b470:	b140      	cbz	r0, 800b484 <__sfmoreglue+0x28>
 800b472:	2100      	movs	r1, #0
 800b474:	e9c0 1600 	strd	r1, r6, [r0]
 800b478:	300c      	adds	r0, #12
 800b47a:	60a0      	str	r0, [r4, #8]
 800b47c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b480:	f7fe f902 	bl	8009688 <memset>
 800b484:	4620      	mov	r0, r4
 800b486:	bd70      	pop	{r4, r5, r6, pc}

0800b488 <__sfp_lock_acquire>:
 800b488:	4801      	ldr	r0, [pc, #4]	; (800b490 <__sfp_lock_acquire+0x8>)
 800b48a:	f000 b8ca 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800b48e:	bf00      	nop
 800b490:	2000b995 	.word	0x2000b995

0800b494 <__sfp_lock_release>:
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <__sfp_lock_release+0x8>)
 800b496:	f000 b8c5 	b.w	800b624 <__retarget_lock_release_recursive>
 800b49a:	bf00      	nop
 800b49c:	2000b995 	.word	0x2000b995

0800b4a0 <__sinit_lock_acquire>:
 800b4a0:	4801      	ldr	r0, [pc, #4]	; (800b4a8 <__sinit_lock_acquire+0x8>)
 800b4a2:	f000 b8be 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800b4a6:	bf00      	nop
 800b4a8:	2000b996 	.word	0x2000b996

0800b4ac <__sinit_lock_release>:
 800b4ac:	4801      	ldr	r0, [pc, #4]	; (800b4b4 <__sinit_lock_release+0x8>)
 800b4ae:	f000 b8b9 	b.w	800b624 <__retarget_lock_release_recursive>
 800b4b2:	bf00      	nop
 800b4b4:	2000b996 	.word	0x2000b996

0800b4b8 <__sinit>:
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	4604      	mov	r4, r0
 800b4bc:	f7ff fff0 	bl	800b4a0 <__sinit_lock_acquire>
 800b4c0:	69a3      	ldr	r3, [r4, #24]
 800b4c2:	b11b      	cbz	r3, 800b4cc <__sinit+0x14>
 800b4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4c8:	f7ff bff0 	b.w	800b4ac <__sinit_lock_release>
 800b4cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b4d0:	6523      	str	r3, [r4, #80]	; 0x50
 800b4d2:	4b13      	ldr	r3, [pc, #76]	; (800b520 <__sinit+0x68>)
 800b4d4:	4a13      	ldr	r2, [pc, #76]	; (800b524 <__sinit+0x6c>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b4da:	42a3      	cmp	r3, r4
 800b4dc:	bf04      	itt	eq
 800b4de:	2301      	moveq	r3, #1
 800b4e0:	61a3      	streq	r3, [r4, #24]
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f000 f820 	bl	800b528 <__sfp>
 800b4e8:	6060      	str	r0, [r4, #4]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f000 f81c 	bl	800b528 <__sfp>
 800b4f0:	60a0      	str	r0, [r4, #8]
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 f818 	bl	800b528 <__sfp>
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	60e0      	str	r0, [r4, #12]
 800b4fc:	2104      	movs	r1, #4
 800b4fe:	6860      	ldr	r0, [r4, #4]
 800b500:	f7ff ff82 	bl	800b408 <std>
 800b504:	68a0      	ldr	r0, [r4, #8]
 800b506:	2201      	movs	r2, #1
 800b508:	2109      	movs	r1, #9
 800b50a:	f7ff ff7d 	bl	800b408 <std>
 800b50e:	68e0      	ldr	r0, [r4, #12]
 800b510:	2202      	movs	r2, #2
 800b512:	2112      	movs	r1, #18
 800b514:	f7ff ff78 	bl	800b408 <std>
 800b518:	2301      	movs	r3, #1
 800b51a:	61a3      	str	r3, [r4, #24]
 800b51c:	e7d2      	b.n	800b4c4 <__sinit+0xc>
 800b51e:	bf00      	nop
 800b520:	0800d81c 	.word	0x0800d81c
 800b524:	0800b451 	.word	0x0800b451

0800b528 <__sfp>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	4607      	mov	r7, r0
 800b52c:	f7ff ffac 	bl	800b488 <__sfp_lock_acquire>
 800b530:	4b1e      	ldr	r3, [pc, #120]	; (800b5ac <__sfp+0x84>)
 800b532:	681e      	ldr	r6, [r3, #0]
 800b534:	69b3      	ldr	r3, [r6, #24]
 800b536:	b913      	cbnz	r3, 800b53e <__sfp+0x16>
 800b538:	4630      	mov	r0, r6
 800b53a:	f7ff ffbd 	bl	800b4b8 <__sinit>
 800b53e:	3648      	adds	r6, #72	; 0x48
 800b540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b544:	3b01      	subs	r3, #1
 800b546:	d503      	bpl.n	800b550 <__sfp+0x28>
 800b548:	6833      	ldr	r3, [r6, #0]
 800b54a:	b30b      	cbz	r3, 800b590 <__sfp+0x68>
 800b54c:	6836      	ldr	r6, [r6, #0]
 800b54e:	e7f7      	b.n	800b540 <__sfp+0x18>
 800b550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b554:	b9d5      	cbnz	r5, 800b58c <__sfp+0x64>
 800b556:	4b16      	ldr	r3, [pc, #88]	; (800b5b0 <__sfp+0x88>)
 800b558:	60e3      	str	r3, [r4, #12]
 800b55a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b55e:	6665      	str	r5, [r4, #100]	; 0x64
 800b560:	f000 f85e 	bl	800b620 <__retarget_lock_init_recursive>
 800b564:	f7ff ff96 	bl	800b494 <__sfp_lock_release>
 800b568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b56c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b570:	6025      	str	r5, [r4, #0]
 800b572:	61a5      	str	r5, [r4, #24]
 800b574:	2208      	movs	r2, #8
 800b576:	4629      	mov	r1, r5
 800b578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b57c:	f7fe f884 	bl	8009688 <memset>
 800b580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b588:	4620      	mov	r0, r4
 800b58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b58c:	3468      	adds	r4, #104	; 0x68
 800b58e:	e7d9      	b.n	800b544 <__sfp+0x1c>
 800b590:	2104      	movs	r1, #4
 800b592:	4638      	mov	r0, r7
 800b594:	f7ff ff62 	bl	800b45c <__sfmoreglue>
 800b598:	4604      	mov	r4, r0
 800b59a:	6030      	str	r0, [r6, #0]
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d1d5      	bne.n	800b54c <__sfp+0x24>
 800b5a0:	f7ff ff78 	bl	800b494 <__sfp_lock_release>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	e7ee      	b.n	800b588 <__sfp+0x60>
 800b5aa:	bf00      	nop
 800b5ac:	0800d81c 	.word	0x0800d81c
 800b5b0:	ffff0001 	.word	0xffff0001

0800b5b4 <fiprintf>:
 800b5b4:	b40e      	push	{r1, r2, r3}
 800b5b6:	b503      	push	{r0, r1, lr}
 800b5b8:	4601      	mov	r1, r0
 800b5ba:	ab03      	add	r3, sp, #12
 800b5bc:	4805      	ldr	r0, [pc, #20]	; (800b5d4 <fiprintf+0x20>)
 800b5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c2:	6800      	ldr	r0, [r0, #0]
 800b5c4:	9301      	str	r3, [sp, #4]
 800b5c6:	f000 fc17 	bl	800bdf8 <_vfiprintf_r>
 800b5ca:	b002      	add	sp, #8
 800b5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5d0:	b003      	add	sp, #12
 800b5d2:	4770      	bx	lr
 800b5d4:	200000e4 	.word	0x200000e4

0800b5d8 <_fwalk_reent>:
 800b5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5dc:	4606      	mov	r6, r0
 800b5de:	4688      	mov	r8, r1
 800b5e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b5e4:	2700      	movs	r7, #0
 800b5e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b5ea:	f1b9 0901 	subs.w	r9, r9, #1
 800b5ee:	d505      	bpl.n	800b5fc <_fwalk_reent+0x24>
 800b5f0:	6824      	ldr	r4, [r4, #0]
 800b5f2:	2c00      	cmp	r4, #0
 800b5f4:	d1f7      	bne.n	800b5e6 <_fwalk_reent+0xe>
 800b5f6:	4638      	mov	r0, r7
 800b5f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5fc:	89ab      	ldrh	r3, [r5, #12]
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d907      	bls.n	800b612 <_fwalk_reent+0x3a>
 800b602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b606:	3301      	adds	r3, #1
 800b608:	d003      	beq.n	800b612 <_fwalk_reent+0x3a>
 800b60a:	4629      	mov	r1, r5
 800b60c:	4630      	mov	r0, r6
 800b60e:	47c0      	blx	r8
 800b610:	4307      	orrs	r7, r0
 800b612:	3568      	adds	r5, #104	; 0x68
 800b614:	e7e9      	b.n	800b5ea <_fwalk_reent+0x12>
	...

0800b618 <_localeconv_r>:
 800b618:	4800      	ldr	r0, [pc, #0]	; (800b61c <_localeconv_r+0x4>)
 800b61a:	4770      	bx	lr
 800b61c:	20000238 	.word	0x20000238

0800b620 <__retarget_lock_init_recursive>:
 800b620:	4770      	bx	lr

0800b622 <__retarget_lock_acquire_recursive>:
 800b622:	4770      	bx	lr

0800b624 <__retarget_lock_release_recursive>:
 800b624:	4770      	bx	lr
	...

0800b628 <__malloc_lock>:
 800b628:	4801      	ldr	r0, [pc, #4]	; (800b630 <__malloc_lock+0x8>)
 800b62a:	f7ff bffa 	b.w	800b622 <__retarget_lock_acquire_recursive>
 800b62e:	bf00      	nop
 800b630:	2000b994 	.word	0x2000b994

0800b634 <__malloc_unlock>:
 800b634:	4801      	ldr	r0, [pc, #4]	; (800b63c <__malloc_unlock+0x8>)
 800b636:	f7ff bff5 	b.w	800b624 <__retarget_lock_release_recursive>
 800b63a:	bf00      	nop
 800b63c:	2000b994 	.word	0x2000b994

0800b640 <_Balloc>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b644:	4604      	mov	r4, r0
 800b646:	460d      	mov	r5, r1
 800b648:	b976      	cbnz	r6, 800b668 <_Balloc+0x28>
 800b64a:	2010      	movs	r0, #16
 800b64c:	f7fd ffe4 	bl	8009618 <malloc>
 800b650:	4602      	mov	r2, r0
 800b652:	6260      	str	r0, [r4, #36]	; 0x24
 800b654:	b920      	cbnz	r0, 800b660 <_Balloc+0x20>
 800b656:	4b18      	ldr	r3, [pc, #96]	; (800b6b8 <_Balloc+0x78>)
 800b658:	4818      	ldr	r0, [pc, #96]	; (800b6bc <_Balloc+0x7c>)
 800b65a:	2166      	movs	r1, #102	; 0x66
 800b65c:	f7ff f836 	bl	800a6cc <__assert_func>
 800b660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b664:	6006      	str	r6, [r0, #0]
 800b666:	60c6      	str	r6, [r0, #12]
 800b668:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b66a:	68f3      	ldr	r3, [r6, #12]
 800b66c:	b183      	cbz	r3, 800b690 <_Balloc+0x50>
 800b66e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b676:	b9b8      	cbnz	r0, 800b6a8 <_Balloc+0x68>
 800b678:	2101      	movs	r1, #1
 800b67a:	fa01 f605 	lsl.w	r6, r1, r5
 800b67e:	1d72      	adds	r2, r6, #5
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	4620      	mov	r0, r4
 800b684:	f7fe f812 	bl	80096ac <_calloc_r>
 800b688:	b160      	cbz	r0, 800b6a4 <_Balloc+0x64>
 800b68a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b68e:	e00e      	b.n	800b6ae <_Balloc+0x6e>
 800b690:	2221      	movs	r2, #33	; 0x21
 800b692:	2104      	movs	r1, #4
 800b694:	4620      	mov	r0, r4
 800b696:	f7fe f809 	bl	80096ac <_calloc_r>
 800b69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b69c:	60f0      	str	r0, [r6, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e4      	bne.n	800b66e <_Balloc+0x2e>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	6802      	ldr	r2, [r0, #0]
 800b6aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6b4:	e7f7      	b.n	800b6a6 <_Balloc+0x66>
 800b6b6:	bf00      	nop
 800b6b8:	0800d8ae 	.word	0x0800d8ae
 800b6bc:	0800d994 	.word	0x0800d994

0800b6c0 <_Bfree>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	b976      	cbnz	r6, 800b6e8 <_Bfree+0x28>
 800b6ca:	2010      	movs	r0, #16
 800b6cc:	f7fd ffa4 	bl	8009618 <malloc>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	6268      	str	r0, [r5, #36]	; 0x24
 800b6d4:	b920      	cbnz	r0, 800b6e0 <_Bfree+0x20>
 800b6d6:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <_Bfree+0x3c>)
 800b6d8:	4809      	ldr	r0, [pc, #36]	; (800b700 <_Bfree+0x40>)
 800b6da:	218a      	movs	r1, #138	; 0x8a
 800b6dc:	f7fe fff6 	bl	800a6cc <__assert_func>
 800b6e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6e4:	6006      	str	r6, [r0, #0]
 800b6e6:	60c6      	str	r6, [r0, #12]
 800b6e8:	b13c      	cbz	r4, 800b6fa <_Bfree+0x3a>
 800b6ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b6ec:	6862      	ldr	r2, [r4, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6f4:	6021      	str	r1, [r4, #0]
 800b6f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
 800b6fc:	0800d8ae 	.word	0x0800d8ae
 800b700:	0800d994 	.word	0x0800d994

0800b704 <__multadd>:
 800b704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b708:	690d      	ldr	r5, [r1, #16]
 800b70a:	4607      	mov	r7, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	461e      	mov	r6, r3
 800b710:	f101 0c14 	add.w	ip, r1, #20
 800b714:	2000      	movs	r0, #0
 800b716:	f8dc 3000 	ldr.w	r3, [ip]
 800b71a:	b299      	uxth	r1, r3
 800b71c:	fb02 6101 	mla	r1, r2, r1, r6
 800b720:	0c1e      	lsrs	r6, r3, #16
 800b722:	0c0b      	lsrs	r3, r1, #16
 800b724:	fb02 3306 	mla	r3, r2, r6, r3
 800b728:	b289      	uxth	r1, r1
 800b72a:	3001      	adds	r0, #1
 800b72c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b730:	4285      	cmp	r5, r0
 800b732:	f84c 1b04 	str.w	r1, [ip], #4
 800b736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b73a:	dcec      	bgt.n	800b716 <__multadd+0x12>
 800b73c:	b30e      	cbz	r6, 800b782 <__multadd+0x7e>
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	42ab      	cmp	r3, r5
 800b742:	dc19      	bgt.n	800b778 <__multadd+0x74>
 800b744:	6861      	ldr	r1, [r4, #4]
 800b746:	4638      	mov	r0, r7
 800b748:	3101      	adds	r1, #1
 800b74a:	f7ff ff79 	bl	800b640 <_Balloc>
 800b74e:	4680      	mov	r8, r0
 800b750:	b928      	cbnz	r0, 800b75e <__multadd+0x5a>
 800b752:	4602      	mov	r2, r0
 800b754:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <__multadd+0x84>)
 800b756:	480d      	ldr	r0, [pc, #52]	; (800b78c <__multadd+0x88>)
 800b758:	21b5      	movs	r1, #181	; 0xb5
 800b75a:	f7fe ffb7 	bl	800a6cc <__assert_func>
 800b75e:	6922      	ldr	r2, [r4, #16]
 800b760:	3202      	adds	r2, #2
 800b762:	f104 010c 	add.w	r1, r4, #12
 800b766:	0092      	lsls	r2, r2, #2
 800b768:	300c      	adds	r0, #12
 800b76a:	f7fd ff65 	bl	8009638 <memcpy>
 800b76e:	4621      	mov	r1, r4
 800b770:	4638      	mov	r0, r7
 800b772:	f7ff ffa5 	bl	800b6c0 <_Bfree>
 800b776:	4644      	mov	r4, r8
 800b778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b77c:	3501      	adds	r5, #1
 800b77e:	615e      	str	r6, [r3, #20]
 800b780:	6125      	str	r5, [r4, #16]
 800b782:	4620      	mov	r0, r4
 800b784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b788:	0800d920 	.word	0x0800d920
 800b78c:	0800d994 	.word	0x0800d994

0800b790 <__hi0bits>:
 800b790:	0c03      	lsrs	r3, r0, #16
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	b9d3      	cbnz	r3, 800b7cc <__hi0bits+0x3c>
 800b796:	0400      	lsls	r0, r0, #16
 800b798:	2310      	movs	r3, #16
 800b79a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b79e:	bf04      	itt	eq
 800b7a0:	0200      	lsleq	r0, r0, #8
 800b7a2:	3308      	addeq	r3, #8
 800b7a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7a8:	bf04      	itt	eq
 800b7aa:	0100      	lsleq	r0, r0, #4
 800b7ac:	3304      	addeq	r3, #4
 800b7ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7b2:	bf04      	itt	eq
 800b7b4:	0080      	lsleq	r0, r0, #2
 800b7b6:	3302      	addeq	r3, #2
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	db05      	blt.n	800b7c8 <__hi0bits+0x38>
 800b7bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b7c0:	f103 0301 	add.w	r3, r3, #1
 800b7c4:	bf08      	it	eq
 800b7c6:	2320      	moveq	r3, #32
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	4770      	bx	lr
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	e7e4      	b.n	800b79a <__hi0bits+0xa>

0800b7d0 <__lo0bits>:
 800b7d0:	6803      	ldr	r3, [r0, #0]
 800b7d2:	f013 0207 	ands.w	r2, r3, #7
 800b7d6:	4601      	mov	r1, r0
 800b7d8:	d00b      	beq.n	800b7f2 <__lo0bits+0x22>
 800b7da:	07da      	lsls	r2, r3, #31
 800b7dc:	d423      	bmi.n	800b826 <__lo0bits+0x56>
 800b7de:	0798      	lsls	r0, r3, #30
 800b7e0:	bf49      	itett	mi
 800b7e2:	085b      	lsrmi	r3, r3, #1
 800b7e4:	089b      	lsrpl	r3, r3, #2
 800b7e6:	2001      	movmi	r0, #1
 800b7e8:	600b      	strmi	r3, [r1, #0]
 800b7ea:	bf5c      	itt	pl
 800b7ec:	600b      	strpl	r3, [r1, #0]
 800b7ee:	2002      	movpl	r0, #2
 800b7f0:	4770      	bx	lr
 800b7f2:	b298      	uxth	r0, r3
 800b7f4:	b9a8      	cbnz	r0, 800b822 <__lo0bits+0x52>
 800b7f6:	0c1b      	lsrs	r3, r3, #16
 800b7f8:	2010      	movs	r0, #16
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	b90a      	cbnz	r2, 800b802 <__lo0bits+0x32>
 800b7fe:	3008      	adds	r0, #8
 800b800:	0a1b      	lsrs	r3, r3, #8
 800b802:	071a      	lsls	r2, r3, #28
 800b804:	bf04      	itt	eq
 800b806:	091b      	lsreq	r3, r3, #4
 800b808:	3004      	addeq	r0, #4
 800b80a:	079a      	lsls	r2, r3, #30
 800b80c:	bf04      	itt	eq
 800b80e:	089b      	lsreq	r3, r3, #2
 800b810:	3002      	addeq	r0, #2
 800b812:	07da      	lsls	r2, r3, #31
 800b814:	d403      	bmi.n	800b81e <__lo0bits+0x4e>
 800b816:	085b      	lsrs	r3, r3, #1
 800b818:	f100 0001 	add.w	r0, r0, #1
 800b81c:	d005      	beq.n	800b82a <__lo0bits+0x5a>
 800b81e:	600b      	str	r3, [r1, #0]
 800b820:	4770      	bx	lr
 800b822:	4610      	mov	r0, r2
 800b824:	e7e9      	b.n	800b7fa <__lo0bits+0x2a>
 800b826:	2000      	movs	r0, #0
 800b828:	4770      	bx	lr
 800b82a:	2020      	movs	r0, #32
 800b82c:	4770      	bx	lr
	...

0800b830 <__i2b>:
 800b830:	b510      	push	{r4, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	2101      	movs	r1, #1
 800b836:	f7ff ff03 	bl	800b640 <_Balloc>
 800b83a:	4602      	mov	r2, r0
 800b83c:	b928      	cbnz	r0, 800b84a <__i2b+0x1a>
 800b83e:	4b05      	ldr	r3, [pc, #20]	; (800b854 <__i2b+0x24>)
 800b840:	4805      	ldr	r0, [pc, #20]	; (800b858 <__i2b+0x28>)
 800b842:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b846:	f7fe ff41 	bl	800a6cc <__assert_func>
 800b84a:	2301      	movs	r3, #1
 800b84c:	6144      	str	r4, [r0, #20]
 800b84e:	6103      	str	r3, [r0, #16]
 800b850:	bd10      	pop	{r4, pc}
 800b852:	bf00      	nop
 800b854:	0800d920 	.word	0x0800d920
 800b858:	0800d994 	.word	0x0800d994

0800b85c <__multiply>:
 800b85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b860:	4691      	mov	r9, r2
 800b862:	690a      	ldr	r2, [r1, #16]
 800b864:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b868:	429a      	cmp	r2, r3
 800b86a:	bfb8      	it	lt
 800b86c:	460b      	movlt	r3, r1
 800b86e:	460c      	mov	r4, r1
 800b870:	bfbc      	itt	lt
 800b872:	464c      	movlt	r4, r9
 800b874:	4699      	movlt	r9, r3
 800b876:	6927      	ldr	r7, [r4, #16]
 800b878:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	6861      	ldr	r1, [r4, #4]
 800b880:	eb07 060a 	add.w	r6, r7, sl
 800b884:	42b3      	cmp	r3, r6
 800b886:	b085      	sub	sp, #20
 800b888:	bfb8      	it	lt
 800b88a:	3101      	addlt	r1, #1
 800b88c:	f7ff fed8 	bl	800b640 <_Balloc>
 800b890:	b930      	cbnz	r0, 800b8a0 <__multiply+0x44>
 800b892:	4602      	mov	r2, r0
 800b894:	4b44      	ldr	r3, [pc, #272]	; (800b9a8 <__multiply+0x14c>)
 800b896:	4845      	ldr	r0, [pc, #276]	; (800b9ac <__multiply+0x150>)
 800b898:	f240 115d 	movw	r1, #349	; 0x15d
 800b89c:	f7fe ff16 	bl	800a6cc <__assert_func>
 800b8a0:	f100 0514 	add.w	r5, r0, #20
 800b8a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	4543      	cmp	r3, r8
 800b8ae:	d321      	bcc.n	800b8f4 <__multiply+0x98>
 800b8b0:	f104 0314 	add.w	r3, r4, #20
 800b8b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8b8:	f109 0314 	add.w	r3, r9, #20
 800b8bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b8c0:	9202      	str	r2, [sp, #8]
 800b8c2:	1b3a      	subs	r2, r7, r4
 800b8c4:	3a15      	subs	r2, #21
 800b8c6:	f022 0203 	bic.w	r2, r2, #3
 800b8ca:	3204      	adds	r2, #4
 800b8cc:	f104 0115 	add.w	r1, r4, #21
 800b8d0:	428f      	cmp	r7, r1
 800b8d2:	bf38      	it	cc
 800b8d4:	2204      	movcc	r2, #4
 800b8d6:	9201      	str	r2, [sp, #4]
 800b8d8:	9a02      	ldr	r2, [sp, #8]
 800b8da:	9303      	str	r3, [sp, #12]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d80c      	bhi.n	800b8fa <__multiply+0x9e>
 800b8e0:	2e00      	cmp	r6, #0
 800b8e2:	dd03      	ble.n	800b8ec <__multiply+0x90>
 800b8e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d05a      	beq.n	800b9a2 <__multiply+0x146>
 800b8ec:	6106      	str	r6, [r0, #16]
 800b8ee:	b005      	add	sp, #20
 800b8f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f4:	f843 2b04 	str.w	r2, [r3], #4
 800b8f8:	e7d8      	b.n	800b8ac <__multiply+0x50>
 800b8fa:	f8b3 a000 	ldrh.w	sl, [r3]
 800b8fe:	f1ba 0f00 	cmp.w	sl, #0
 800b902:	d024      	beq.n	800b94e <__multiply+0xf2>
 800b904:	f104 0e14 	add.w	lr, r4, #20
 800b908:	46a9      	mov	r9, r5
 800b90a:	f04f 0c00 	mov.w	ip, #0
 800b90e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b912:	f8d9 1000 	ldr.w	r1, [r9]
 800b916:	fa1f fb82 	uxth.w	fp, r2
 800b91a:	b289      	uxth	r1, r1
 800b91c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b920:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b924:	f8d9 2000 	ldr.w	r2, [r9]
 800b928:	4461      	add	r1, ip
 800b92a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b92e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b932:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b936:	b289      	uxth	r1, r1
 800b938:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b93c:	4577      	cmp	r7, lr
 800b93e:	f849 1b04 	str.w	r1, [r9], #4
 800b942:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b946:	d8e2      	bhi.n	800b90e <__multiply+0xb2>
 800b948:	9a01      	ldr	r2, [sp, #4]
 800b94a:	f845 c002 	str.w	ip, [r5, r2]
 800b94e:	9a03      	ldr	r2, [sp, #12]
 800b950:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b954:	3304      	adds	r3, #4
 800b956:	f1b9 0f00 	cmp.w	r9, #0
 800b95a:	d020      	beq.n	800b99e <__multiply+0x142>
 800b95c:	6829      	ldr	r1, [r5, #0]
 800b95e:	f104 0c14 	add.w	ip, r4, #20
 800b962:	46ae      	mov	lr, r5
 800b964:	f04f 0a00 	mov.w	sl, #0
 800b968:	f8bc b000 	ldrh.w	fp, [ip]
 800b96c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b970:	fb09 220b 	mla	r2, r9, fp, r2
 800b974:	4492      	add	sl, r2
 800b976:	b289      	uxth	r1, r1
 800b978:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b97c:	f84e 1b04 	str.w	r1, [lr], #4
 800b980:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b984:	f8be 1000 	ldrh.w	r1, [lr]
 800b988:	0c12      	lsrs	r2, r2, #16
 800b98a:	fb09 1102 	mla	r1, r9, r2, r1
 800b98e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b992:	4567      	cmp	r7, ip
 800b994:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b998:	d8e6      	bhi.n	800b968 <__multiply+0x10c>
 800b99a:	9a01      	ldr	r2, [sp, #4]
 800b99c:	50a9      	str	r1, [r5, r2]
 800b99e:	3504      	adds	r5, #4
 800b9a0:	e79a      	b.n	800b8d8 <__multiply+0x7c>
 800b9a2:	3e01      	subs	r6, #1
 800b9a4:	e79c      	b.n	800b8e0 <__multiply+0x84>
 800b9a6:	bf00      	nop
 800b9a8:	0800d920 	.word	0x0800d920
 800b9ac:	0800d994 	.word	0x0800d994

0800b9b0 <__pow5mult>:
 800b9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b4:	4615      	mov	r5, r2
 800b9b6:	f012 0203 	ands.w	r2, r2, #3
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460f      	mov	r7, r1
 800b9be:	d007      	beq.n	800b9d0 <__pow5mult+0x20>
 800b9c0:	4c25      	ldr	r4, [pc, #148]	; (800ba58 <__pow5mult+0xa8>)
 800b9c2:	3a01      	subs	r2, #1
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b9ca:	f7ff fe9b 	bl	800b704 <__multadd>
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	10ad      	asrs	r5, r5, #2
 800b9d2:	d03d      	beq.n	800ba50 <__pow5mult+0xa0>
 800b9d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b9d6:	b97c      	cbnz	r4, 800b9f8 <__pow5mult+0x48>
 800b9d8:	2010      	movs	r0, #16
 800b9da:	f7fd fe1d 	bl	8009618 <malloc>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	6270      	str	r0, [r6, #36]	; 0x24
 800b9e2:	b928      	cbnz	r0, 800b9f0 <__pow5mult+0x40>
 800b9e4:	4b1d      	ldr	r3, [pc, #116]	; (800ba5c <__pow5mult+0xac>)
 800b9e6:	481e      	ldr	r0, [pc, #120]	; (800ba60 <__pow5mult+0xb0>)
 800b9e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b9ec:	f7fe fe6e 	bl	800a6cc <__assert_func>
 800b9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b9f4:	6004      	str	r4, [r0, #0]
 800b9f6:	60c4      	str	r4, [r0, #12]
 800b9f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba00:	b94c      	cbnz	r4, 800ba16 <__pow5mult+0x66>
 800ba02:	f240 2171 	movw	r1, #625	; 0x271
 800ba06:	4630      	mov	r0, r6
 800ba08:	f7ff ff12 	bl	800b830 <__i2b>
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba12:	4604      	mov	r4, r0
 800ba14:	6003      	str	r3, [r0, #0]
 800ba16:	f04f 0900 	mov.w	r9, #0
 800ba1a:	07eb      	lsls	r3, r5, #31
 800ba1c:	d50a      	bpl.n	800ba34 <__pow5mult+0x84>
 800ba1e:	4639      	mov	r1, r7
 800ba20:	4622      	mov	r2, r4
 800ba22:	4630      	mov	r0, r6
 800ba24:	f7ff ff1a 	bl	800b85c <__multiply>
 800ba28:	4639      	mov	r1, r7
 800ba2a:	4680      	mov	r8, r0
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f7ff fe47 	bl	800b6c0 <_Bfree>
 800ba32:	4647      	mov	r7, r8
 800ba34:	106d      	asrs	r5, r5, #1
 800ba36:	d00b      	beq.n	800ba50 <__pow5mult+0xa0>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	b938      	cbnz	r0, 800ba4c <__pow5mult+0x9c>
 800ba3c:	4622      	mov	r2, r4
 800ba3e:	4621      	mov	r1, r4
 800ba40:	4630      	mov	r0, r6
 800ba42:	f7ff ff0b 	bl	800b85c <__multiply>
 800ba46:	6020      	str	r0, [r4, #0]
 800ba48:	f8c0 9000 	str.w	r9, [r0]
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	e7e4      	b.n	800ba1a <__pow5mult+0x6a>
 800ba50:	4638      	mov	r0, r7
 800ba52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba56:	bf00      	nop
 800ba58:	0800dae0 	.word	0x0800dae0
 800ba5c:	0800d8ae 	.word	0x0800d8ae
 800ba60:	0800d994 	.word	0x0800d994

0800ba64 <__lshift>:
 800ba64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba68:	460c      	mov	r4, r1
 800ba6a:	6849      	ldr	r1, [r1, #4]
 800ba6c:	6923      	ldr	r3, [r4, #16]
 800ba6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	4607      	mov	r7, r0
 800ba76:	4691      	mov	r9, r2
 800ba78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ba7c:	f108 0601 	add.w	r6, r8, #1
 800ba80:	42b3      	cmp	r3, r6
 800ba82:	db0b      	blt.n	800ba9c <__lshift+0x38>
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff fddb 	bl	800b640 <_Balloc>
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	b948      	cbnz	r0, 800baa2 <__lshift+0x3e>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	4b2a      	ldr	r3, [pc, #168]	; (800bb3c <__lshift+0xd8>)
 800ba92:	482b      	ldr	r0, [pc, #172]	; (800bb40 <__lshift+0xdc>)
 800ba94:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ba98:	f7fe fe18 	bl	800a6cc <__assert_func>
 800ba9c:	3101      	adds	r1, #1
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	e7ee      	b.n	800ba80 <__lshift+0x1c>
 800baa2:	2300      	movs	r3, #0
 800baa4:	f100 0114 	add.w	r1, r0, #20
 800baa8:	f100 0210 	add.w	r2, r0, #16
 800baac:	4618      	mov	r0, r3
 800baae:	4553      	cmp	r3, sl
 800bab0:	db37      	blt.n	800bb22 <__lshift+0xbe>
 800bab2:	6920      	ldr	r0, [r4, #16]
 800bab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bab8:	f104 0314 	add.w	r3, r4, #20
 800babc:	f019 091f 	ands.w	r9, r9, #31
 800bac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bac4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bac8:	d02f      	beq.n	800bb2a <__lshift+0xc6>
 800baca:	f1c9 0e20 	rsb	lr, r9, #32
 800bace:	468a      	mov	sl, r1
 800bad0:	f04f 0c00 	mov.w	ip, #0
 800bad4:	681a      	ldr	r2, [r3, #0]
 800bad6:	fa02 f209 	lsl.w	r2, r2, r9
 800bada:	ea42 020c 	orr.w	r2, r2, ip
 800bade:	f84a 2b04 	str.w	r2, [sl], #4
 800bae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bae6:	4298      	cmp	r0, r3
 800bae8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800baec:	d8f2      	bhi.n	800bad4 <__lshift+0x70>
 800baee:	1b03      	subs	r3, r0, r4
 800baf0:	3b15      	subs	r3, #21
 800baf2:	f023 0303 	bic.w	r3, r3, #3
 800baf6:	3304      	adds	r3, #4
 800baf8:	f104 0215 	add.w	r2, r4, #21
 800bafc:	4290      	cmp	r0, r2
 800bafe:	bf38      	it	cc
 800bb00:	2304      	movcc	r3, #4
 800bb02:	f841 c003 	str.w	ip, [r1, r3]
 800bb06:	f1bc 0f00 	cmp.w	ip, #0
 800bb0a:	d001      	beq.n	800bb10 <__lshift+0xac>
 800bb0c:	f108 0602 	add.w	r6, r8, #2
 800bb10:	3e01      	subs	r6, #1
 800bb12:	4638      	mov	r0, r7
 800bb14:	612e      	str	r6, [r5, #16]
 800bb16:	4621      	mov	r1, r4
 800bb18:	f7ff fdd2 	bl	800b6c0 <_Bfree>
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb26:	3301      	adds	r3, #1
 800bb28:	e7c1      	b.n	800baae <__lshift+0x4a>
 800bb2a:	3904      	subs	r1, #4
 800bb2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb30:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb34:	4298      	cmp	r0, r3
 800bb36:	d8f9      	bhi.n	800bb2c <__lshift+0xc8>
 800bb38:	e7ea      	b.n	800bb10 <__lshift+0xac>
 800bb3a:	bf00      	nop
 800bb3c:	0800d920 	.word	0x0800d920
 800bb40:	0800d994 	.word	0x0800d994

0800bb44 <__mcmp>:
 800bb44:	b530      	push	{r4, r5, lr}
 800bb46:	6902      	ldr	r2, [r0, #16]
 800bb48:	690c      	ldr	r4, [r1, #16]
 800bb4a:	1b12      	subs	r2, r2, r4
 800bb4c:	d10e      	bne.n	800bb6c <__mcmp+0x28>
 800bb4e:	f100 0314 	add.w	r3, r0, #20
 800bb52:	3114      	adds	r1, #20
 800bb54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bb60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bb64:	42a5      	cmp	r5, r4
 800bb66:	d003      	beq.n	800bb70 <__mcmp+0x2c>
 800bb68:	d305      	bcc.n	800bb76 <__mcmp+0x32>
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	4610      	mov	r0, r2
 800bb6e:	bd30      	pop	{r4, r5, pc}
 800bb70:	4283      	cmp	r3, r0
 800bb72:	d3f3      	bcc.n	800bb5c <__mcmp+0x18>
 800bb74:	e7fa      	b.n	800bb6c <__mcmp+0x28>
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb7a:	e7f7      	b.n	800bb6c <__mcmp+0x28>

0800bb7c <__mdiff>:
 800bb7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb80:	460c      	mov	r4, r1
 800bb82:	4606      	mov	r6, r0
 800bb84:	4611      	mov	r1, r2
 800bb86:	4620      	mov	r0, r4
 800bb88:	4690      	mov	r8, r2
 800bb8a:	f7ff ffdb 	bl	800bb44 <__mcmp>
 800bb8e:	1e05      	subs	r5, r0, #0
 800bb90:	d110      	bne.n	800bbb4 <__mdiff+0x38>
 800bb92:	4629      	mov	r1, r5
 800bb94:	4630      	mov	r0, r6
 800bb96:	f7ff fd53 	bl	800b640 <_Balloc>
 800bb9a:	b930      	cbnz	r0, 800bbaa <__mdiff+0x2e>
 800bb9c:	4b3a      	ldr	r3, [pc, #232]	; (800bc88 <__mdiff+0x10c>)
 800bb9e:	4602      	mov	r2, r0
 800bba0:	f240 2132 	movw	r1, #562	; 0x232
 800bba4:	4839      	ldr	r0, [pc, #228]	; (800bc8c <__mdiff+0x110>)
 800bba6:	f7fe fd91 	bl	800a6cc <__assert_func>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb4:	bfa4      	itt	ge
 800bbb6:	4643      	movge	r3, r8
 800bbb8:	46a0      	movge	r8, r4
 800bbba:	4630      	mov	r0, r6
 800bbbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bbc0:	bfa6      	itte	ge
 800bbc2:	461c      	movge	r4, r3
 800bbc4:	2500      	movge	r5, #0
 800bbc6:	2501      	movlt	r5, #1
 800bbc8:	f7ff fd3a 	bl	800b640 <_Balloc>
 800bbcc:	b920      	cbnz	r0, 800bbd8 <__mdiff+0x5c>
 800bbce:	4b2e      	ldr	r3, [pc, #184]	; (800bc88 <__mdiff+0x10c>)
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bbd6:	e7e5      	b.n	800bba4 <__mdiff+0x28>
 800bbd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bbdc:	6926      	ldr	r6, [r4, #16]
 800bbde:	60c5      	str	r5, [r0, #12]
 800bbe0:	f104 0914 	add.w	r9, r4, #20
 800bbe4:	f108 0514 	add.w	r5, r8, #20
 800bbe8:	f100 0e14 	add.w	lr, r0, #20
 800bbec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bbf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bbf4:	f108 0210 	add.w	r2, r8, #16
 800bbf8:	46f2      	mov	sl, lr
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc04:	fa1f f883 	uxth.w	r8, r3
 800bc08:	fa11 f18b 	uxtah	r1, r1, fp
 800bc0c:	0c1b      	lsrs	r3, r3, #16
 800bc0e:	eba1 0808 	sub.w	r8, r1, r8
 800bc12:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc16:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc1a:	fa1f f888 	uxth.w	r8, r8
 800bc1e:	1419      	asrs	r1, r3, #16
 800bc20:	454e      	cmp	r6, r9
 800bc22:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc26:	f84a 3b04 	str.w	r3, [sl], #4
 800bc2a:	d8e7      	bhi.n	800bbfc <__mdiff+0x80>
 800bc2c:	1b33      	subs	r3, r6, r4
 800bc2e:	3b15      	subs	r3, #21
 800bc30:	f023 0303 	bic.w	r3, r3, #3
 800bc34:	3304      	adds	r3, #4
 800bc36:	3415      	adds	r4, #21
 800bc38:	42a6      	cmp	r6, r4
 800bc3a:	bf38      	it	cc
 800bc3c:	2304      	movcc	r3, #4
 800bc3e:	441d      	add	r5, r3
 800bc40:	4473      	add	r3, lr
 800bc42:	469e      	mov	lr, r3
 800bc44:	462e      	mov	r6, r5
 800bc46:	4566      	cmp	r6, ip
 800bc48:	d30e      	bcc.n	800bc68 <__mdiff+0xec>
 800bc4a:	f10c 0203 	add.w	r2, ip, #3
 800bc4e:	1b52      	subs	r2, r2, r5
 800bc50:	f022 0203 	bic.w	r2, r2, #3
 800bc54:	3d03      	subs	r5, #3
 800bc56:	45ac      	cmp	ip, r5
 800bc58:	bf38      	it	cc
 800bc5a:	2200      	movcc	r2, #0
 800bc5c:	441a      	add	r2, r3
 800bc5e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bc62:	b17b      	cbz	r3, 800bc84 <__mdiff+0x108>
 800bc64:	6107      	str	r7, [r0, #16]
 800bc66:	e7a3      	b.n	800bbb0 <__mdiff+0x34>
 800bc68:	f856 8b04 	ldr.w	r8, [r6], #4
 800bc6c:	fa11 f288 	uxtah	r2, r1, r8
 800bc70:	1414      	asrs	r4, r2, #16
 800bc72:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bc76:	b292      	uxth	r2, r2
 800bc78:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bc7c:	f84e 2b04 	str.w	r2, [lr], #4
 800bc80:	1421      	asrs	r1, r4, #16
 800bc82:	e7e0      	b.n	800bc46 <__mdiff+0xca>
 800bc84:	3f01      	subs	r7, #1
 800bc86:	e7ea      	b.n	800bc5e <__mdiff+0xe2>
 800bc88:	0800d920 	.word	0x0800d920
 800bc8c:	0800d994 	.word	0x0800d994

0800bc90 <__d2b>:
 800bc90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	4689      	mov	r9, r1
 800bc96:	2101      	movs	r1, #1
 800bc98:	ec57 6b10 	vmov	r6, r7, d0
 800bc9c:	4690      	mov	r8, r2
 800bc9e:	f7ff fccf 	bl	800b640 <_Balloc>
 800bca2:	4604      	mov	r4, r0
 800bca4:	b930      	cbnz	r0, 800bcb4 <__d2b+0x24>
 800bca6:	4602      	mov	r2, r0
 800bca8:	4b25      	ldr	r3, [pc, #148]	; (800bd40 <__d2b+0xb0>)
 800bcaa:	4826      	ldr	r0, [pc, #152]	; (800bd44 <__d2b+0xb4>)
 800bcac:	f240 310a 	movw	r1, #778	; 0x30a
 800bcb0:	f7fe fd0c 	bl	800a6cc <__assert_func>
 800bcb4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bcb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bcbc:	bb35      	cbnz	r5, 800bd0c <__d2b+0x7c>
 800bcbe:	2e00      	cmp	r6, #0
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	d028      	beq.n	800bd16 <__d2b+0x86>
 800bcc4:	4668      	mov	r0, sp
 800bcc6:	9600      	str	r6, [sp, #0]
 800bcc8:	f7ff fd82 	bl	800b7d0 <__lo0bits>
 800bccc:	9900      	ldr	r1, [sp, #0]
 800bcce:	b300      	cbz	r0, 800bd12 <__d2b+0x82>
 800bcd0:	9a01      	ldr	r2, [sp, #4]
 800bcd2:	f1c0 0320 	rsb	r3, r0, #32
 800bcd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcda:	430b      	orrs	r3, r1
 800bcdc:	40c2      	lsrs	r2, r0
 800bcde:	6163      	str	r3, [r4, #20]
 800bce0:	9201      	str	r2, [sp, #4]
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	61a3      	str	r3, [r4, #24]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bf14      	ite	ne
 800bcea:	2202      	movne	r2, #2
 800bcec:	2201      	moveq	r2, #1
 800bcee:	6122      	str	r2, [r4, #16]
 800bcf0:	b1d5      	cbz	r5, 800bd28 <__d2b+0x98>
 800bcf2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bcf6:	4405      	add	r5, r0
 800bcf8:	f8c9 5000 	str.w	r5, [r9]
 800bcfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bd00:	f8c8 0000 	str.w	r0, [r8]
 800bd04:	4620      	mov	r0, r4
 800bd06:	b003      	add	sp, #12
 800bd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bd0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd10:	e7d5      	b.n	800bcbe <__d2b+0x2e>
 800bd12:	6161      	str	r1, [r4, #20]
 800bd14:	e7e5      	b.n	800bce2 <__d2b+0x52>
 800bd16:	a801      	add	r0, sp, #4
 800bd18:	f7ff fd5a 	bl	800b7d0 <__lo0bits>
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	6163      	str	r3, [r4, #20]
 800bd20:	2201      	movs	r2, #1
 800bd22:	6122      	str	r2, [r4, #16]
 800bd24:	3020      	adds	r0, #32
 800bd26:	e7e3      	b.n	800bcf0 <__d2b+0x60>
 800bd28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bd2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bd30:	f8c9 0000 	str.w	r0, [r9]
 800bd34:	6918      	ldr	r0, [r3, #16]
 800bd36:	f7ff fd2b 	bl	800b790 <__hi0bits>
 800bd3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bd3e:	e7df      	b.n	800bd00 <__d2b+0x70>
 800bd40:	0800d920 	.word	0x0800d920
 800bd44:	0800d994 	.word	0x0800d994

0800bd48 <_realloc_r>:
 800bd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4c:	4680      	mov	r8, r0
 800bd4e:	4614      	mov	r4, r2
 800bd50:	460e      	mov	r6, r1
 800bd52:	b921      	cbnz	r1, 800bd5e <_realloc_r+0x16>
 800bd54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd58:	4611      	mov	r1, r2
 800bd5a:	f7fd bd5d 	b.w	8009818 <_malloc_r>
 800bd5e:	b92a      	cbnz	r2, 800bd6c <_realloc_r+0x24>
 800bd60:	f7fd fcba 	bl	80096d8 <_free_r>
 800bd64:	4625      	mov	r5, r4
 800bd66:	4628      	mov	r0, r5
 800bd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd6c:	f000 fbe6 	bl	800c53c <_malloc_usable_size_r>
 800bd70:	4284      	cmp	r4, r0
 800bd72:	4607      	mov	r7, r0
 800bd74:	d802      	bhi.n	800bd7c <_realloc_r+0x34>
 800bd76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd7a:	d812      	bhi.n	800bda2 <_realloc_r+0x5a>
 800bd7c:	4621      	mov	r1, r4
 800bd7e:	4640      	mov	r0, r8
 800bd80:	f7fd fd4a 	bl	8009818 <_malloc_r>
 800bd84:	4605      	mov	r5, r0
 800bd86:	2800      	cmp	r0, #0
 800bd88:	d0ed      	beq.n	800bd66 <_realloc_r+0x1e>
 800bd8a:	42bc      	cmp	r4, r7
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	4631      	mov	r1, r6
 800bd90:	bf28      	it	cs
 800bd92:	463a      	movcs	r2, r7
 800bd94:	f7fd fc50 	bl	8009638 <memcpy>
 800bd98:	4631      	mov	r1, r6
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	f7fd fc9c 	bl	80096d8 <_free_r>
 800bda0:	e7e1      	b.n	800bd66 <_realloc_r+0x1e>
 800bda2:	4635      	mov	r5, r6
 800bda4:	e7df      	b.n	800bd66 <_realloc_r+0x1e>

0800bda6 <__sfputc_r>:
 800bda6:	6893      	ldr	r3, [r2, #8]
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	b410      	push	{r4}
 800bdae:	6093      	str	r3, [r2, #8]
 800bdb0:	da08      	bge.n	800bdc4 <__sfputc_r+0x1e>
 800bdb2:	6994      	ldr	r4, [r2, #24]
 800bdb4:	42a3      	cmp	r3, r4
 800bdb6:	db01      	blt.n	800bdbc <__sfputc_r+0x16>
 800bdb8:	290a      	cmp	r1, #10
 800bdba:	d103      	bne.n	800bdc4 <__sfputc_r+0x1e>
 800bdbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdc0:	f000 b98e 	b.w	800c0e0 <__swbuf_r>
 800bdc4:	6813      	ldr	r3, [r2, #0]
 800bdc6:	1c58      	adds	r0, r3, #1
 800bdc8:	6010      	str	r0, [r2, #0]
 800bdca:	7019      	strb	r1, [r3, #0]
 800bdcc:	4608      	mov	r0, r1
 800bdce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <__sfputs_r>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	4606      	mov	r6, r0
 800bdd8:	460f      	mov	r7, r1
 800bdda:	4614      	mov	r4, r2
 800bddc:	18d5      	adds	r5, r2, r3
 800bdde:	42ac      	cmp	r4, r5
 800bde0:	d101      	bne.n	800bde6 <__sfputs_r+0x12>
 800bde2:	2000      	movs	r0, #0
 800bde4:	e007      	b.n	800bdf6 <__sfputs_r+0x22>
 800bde6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdea:	463a      	mov	r2, r7
 800bdec:	4630      	mov	r0, r6
 800bdee:	f7ff ffda 	bl	800bda6 <__sfputc_r>
 800bdf2:	1c43      	adds	r3, r0, #1
 800bdf4:	d1f3      	bne.n	800bdde <__sfputs_r+0xa>
 800bdf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bdf8 <_vfiprintf_r>:
 800bdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdfc:	460d      	mov	r5, r1
 800bdfe:	b09d      	sub	sp, #116	; 0x74
 800be00:	4614      	mov	r4, r2
 800be02:	4698      	mov	r8, r3
 800be04:	4606      	mov	r6, r0
 800be06:	b118      	cbz	r0, 800be10 <_vfiprintf_r+0x18>
 800be08:	6983      	ldr	r3, [r0, #24]
 800be0a:	b90b      	cbnz	r3, 800be10 <_vfiprintf_r+0x18>
 800be0c:	f7ff fb54 	bl	800b4b8 <__sinit>
 800be10:	4b89      	ldr	r3, [pc, #548]	; (800c038 <_vfiprintf_r+0x240>)
 800be12:	429d      	cmp	r5, r3
 800be14:	d11b      	bne.n	800be4e <_vfiprintf_r+0x56>
 800be16:	6875      	ldr	r5, [r6, #4]
 800be18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be1a:	07d9      	lsls	r1, r3, #31
 800be1c:	d405      	bmi.n	800be2a <_vfiprintf_r+0x32>
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	059a      	lsls	r2, r3, #22
 800be22:	d402      	bmi.n	800be2a <_vfiprintf_r+0x32>
 800be24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be26:	f7ff fbfc 	bl	800b622 <__retarget_lock_acquire_recursive>
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	071b      	lsls	r3, r3, #28
 800be2e:	d501      	bpl.n	800be34 <_vfiprintf_r+0x3c>
 800be30:	692b      	ldr	r3, [r5, #16]
 800be32:	b9eb      	cbnz	r3, 800be70 <_vfiprintf_r+0x78>
 800be34:	4629      	mov	r1, r5
 800be36:	4630      	mov	r0, r6
 800be38:	f000 f9b6 	bl	800c1a8 <__swsetup_r>
 800be3c:	b1c0      	cbz	r0, 800be70 <_vfiprintf_r+0x78>
 800be3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be40:	07dc      	lsls	r4, r3, #31
 800be42:	d50e      	bpl.n	800be62 <_vfiprintf_r+0x6a>
 800be44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800be48:	b01d      	add	sp, #116	; 0x74
 800be4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	4b7b      	ldr	r3, [pc, #492]	; (800c03c <_vfiprintf_r+0x244>)
 800be50:	429d      	cmp	r5, r3
 800be52:	d101      	bne.n	800be58 <_vfiprintf_r+0x60>
 800be54:	68b5      	ldr	r5, [r6, #8]
 800be56:	e7df      	b.n	800be18 <_vfiprintf_r+0x20>
 800be58:	4b79      	ldr	r3, [pc, #484]	; (800c040 <_vfiprintf_r+0x248>)
 800be5a:	429d      	cmp	r5, r3
 800be5c:	bf08      	it	eq
 800be5e:	68f5      	ldreq	r5, [r6, #12]
 800be60:	e7da      	b.n	800be18 <_vfiprintf_r+0x20>
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	0598      	lsls	r0, r3, #22
 800be66:	d4ed      	bmi.n	800be44 <_vfiprintf_r+0x4c>
 800be68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be6a:	f7ff fbdb 	bl	800b624 <__retarget_lock_release_recursive>
 800be6e:	e7e9      	b.n	800be44 <_vfiprintf_r+0x4c>
 800be70:	2300      	movs	r3, #0
 800be72:	9309      	str	r3, [sp, #36]	; 0x24
 800be74:	2320      	movs	r3, #32
 800be76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be7e:	2330      	movs	r3, #48	; 0x30
 800be80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c044 <_vfiprintf_r+0x24c>
 800be84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be88:	f04f 0901 	mov.w	r9, #1
 800be8c:	4623      	mov	r3, r4
 800be8e:	469a      	mov	sl, r3
 800be90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be94:	b10a      	cbz	r2, 800be9a <_vfiprintf_r+0xa2>
 800be96:	2a25      	cmp	r2, #37	; 0x25
 800be98:	d1f9      	bne.n	800be8e <_vfiprintf_r+0x96>
 800be9a:	ebba 0b04 	subs.w	fp, sl, r4
 800be9e:	d00b      	beq.n	800beb8 <_vfiprintf_r+0xc0>
 800bea0:	465b      	mov	r3, fp
 800bea2:	4622      	mov	r2, r4
 800bea4:	4629      	mov	r1, r5
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7ff ff94 	bl	800bdd4 <__sfputs_r>
 800beac:	3001      	adds	r0, #1
 800beae:	f000 80aa 	beq.w	800c006 <_vfiprintf_r+0x20e>
 800beb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beb4:	445a      	add	r2, fp
 800beb6:	9209      	str	r2, [sp, #36]	; 0x24
 800beb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 80a2 	beq.w	800c006 <_vfiprintf_r+0x20e>
 800bec2:	2300      	movs	r3, #0
 800bec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800becc:	f10a 0a01 	add.w	sl, sl, #1
 800bed0:	9304      	str	r3, [sp, #16]
 800bed2:	9307      	str	r3, [sp, #28]
 800bed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bed8:	931a      	str	r3, [sp, #104]	; 0x68
 800beda:	4654      	mov	r4, sl
 800bedc:	2205      	movs	r2, #5
 800bede:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee2:	4858      	ldr	r0, [pc, #352]	; (800c044 <_vfiprintf_r+0x24c>)
 800bee4:	f7f4 f99c 	bl	8000220 <memchr>
 800bee8:	9a04      	ldr	r2, [sp, #16]
 800beea:	b9d8      	cbnz	r0, 800bf24 <_vfiprintf_r+0x12c>
 800beec:	06d1      	lsls	r1, r2, #27
 800beee:	bf44      	itt	mi
 800bef0:	2320      	movmi	r3, #32
 800bef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bef6:	0713      	lsls	r3, r2, #28
 800bef8:	bf44      	itt	mi
 800befa:	232b      	movmi	r3, #43	; 0x2b
 800befc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf00:	f89a 3000 	ldrb.w	r3, [sl]
 800bf04:	2b2a      	cmp	r3, #42	; 0x2a
 800bf06:	d015      	beq.n	800bf34 <_vfiprintf_r+0x13c>
 800bf08:	9a07      	ldr	r2, [sp, #28]
 800bf0a:	4654      	mov	r4, sl
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	f04f 0c0a 	mov.w	ip, #10
 800bf12:	4621      	mov	r1, r4
 800bf14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf18:	3b30      	subs	r3, #48	; 0x30
 800bf1a:	2b09      	cmp	r3, #9
 800bf1c:	d94e      	bls.n	800bfbc <_vfiprintf_r+0x1c4>
 800bf1e:	b1b0      	cbz	r0, 800bf4e <_vfiprintf_r+0x156>
 800bf20:	9207      	str	r2, [sp, #28]
 800bf22:	e014      	b.n	800bf4e <_vfiprintf_r+0x156>
 800bf24:	eba0 0308 	sub.w	r3, r0, r8
 800bf28:	fa09 f303 	lsl.w	r3, r9, r3
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	46a2      	mov	sl, r4
 800bf32:	e7d2      	b.n	800beda <_vfiprintf_r+0xe2>
 800bf34:	9b03      	ldr	r3, [sp, #12]
 800bf36:	1d19      	adds	r1, r3, #4
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	9103      	str	r1, [sp, #12]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	bfbb      	ittet	lt
 800bf40:	425b      	neglt	r3, r3
 800bf42:	f042 0202 	orrlt.w	r2, r2, #2
 800bf46:	9307      	strge	r3, [sp, #28]
 800bf48:	9307      	strlt	r3, [sp, #28]
 800bf4a:	bfb8      	it	lt
 800bf4c:	9204      	strlt	r2, [sp, #16]
 800bf4e:	7823      	ldrb	r3, [r4, #0]
 800bf50:	2b2e      	cmp	r3, #46	; 0x2e
 800bf52:	d10c      	bne.n	800bf6e <_vfiprintf_r+0x176>
 800bf54:	7863      	ldrb	r3, [r4, #1]
 800bf56:	2b2a      	cmp	r3, #42	; 0x2a
 800bf58:	d135      	bne.n	800bfc6 <_vfiprintf_r+0x1ce>
 800bf5a:	9b03      	ldr	r3, [sp, #12]
 800bf5c:	1d1a      	adds	r2, r3, #4
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	9203      	str	r2, [sp, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	bfb8      	it	lt
 800bf66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bf6a:	3402      	adds	r4, #2
 800bf6c:	9305      	str	r3, [sp, #20]
 800bf6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c054 <_vfiprintf_r+0x25c>
 800bf72:	7821      	ldrb	r1, [r4, #0]
 800bf74:	2203      	movs	r2, #3
 800bf76:	4650      	mov	r0, sl
 800bf78:	f7f4 f952 	bl	8000220 <memchr>
 800bf7c:	b140      	cbz	r0, 800bf90 <_vfiprintf_r+0x198>
 800bf7e:	2340      	movs	r3, #64	; 0x40
 800bf80:	eba0 000a 	sub.w	r0, r0, sl
 800bf84:	fa03 f000 	lsl.w	r0, r3, r0
 800bf88:	9b04      	ldr	r3, [sp, #16]
 800bf8a:	4303      	orrs	r3, r0
 800bf8c:	3401      	adds	r4, #1
 800bf8e:	9304      	str	r3, [sp, #16]
 800bf90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf94:	482c      	ldr	r0, [pc, #176]	; (800c048 <_vfiprintf_r+0x250>)
 800bf96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf9a:	2206      	movs	r2, #6
 800bf9c:	f7f4 f940 	bl	8000220 <memchr>
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	d03f      	beq.n	800c024 <_vfiprintf_r+0x22c>
 800bfa4:	4b29      	ldr	r3, [pc, #164]	; (800c04c <_vfiprintf_r+0x254>)
 800bfa6:	bb1b      	cbnz	r3, 800bff0 <_vfiprintf_r+0x1f8>
 800bfa8:	9b03      	ldr	r3, [sp, #12]
 800bfaa:	3307      	adds	r3, #7
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	3308      	adds	r3, #8
 800bfb2:	9303      	str	r3, [sp, #12]
 800bfb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfb6:	443b      	add	r3, r7
 800bfb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfba:	e767      	b.n	800be8c <_vfiprintf_r+0x94>
 800bfbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	2001      	movs	r0, #1
 800bfc4:	e7a5      	b.n	800bf12 <_vfiprintf_r+0x11a>
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	3401      	adds	r4, #1
 800bfca:	9305      	str	r3, [sp, #20]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	f04f 0c0a 	mov.w	ip, #10
 800bfd2:	4620      	mov	r0, r4
 800bfd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd8:	3a30      	subs	r2, #48	; 0x30
 800bfda:	2a09      	cmp	r2, #9
 800bfdc:	d903      	bls.n	800bfe6 <_vfiprintf_r+0x1ee>
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0c5      	beq.n	800bf6e <_vfiprintf_r+0x176>
 800bfe2:	9105      	str	r1, [sp, #20]
 800bfe4:	e7c3      	b.n	800bf6e <_vfiprintf_r+0x176>
 800bfe6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfea:	4604      	mov	r4, r0
 800bfec:	2301      	movs	r3, #1
 800bfee:	e7f0      	b.n	800bfd2 <_vfiprintf_r+0x1da>
 800bff0:	ab03      	add	r3, sp, #12
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	462a      	mov	r2, r5
 800bff6:	4b16      	ldr	r3, [pc, #88]	; (800c050 <_vfiprintf_r+0x258>)
 800bff8:	a904      	add	r1, sp, #16
 800bffa:	4630      	mov	r0, r6
 800bffc:	f7fd fe7c 	bl	8009cf8 <_printf_float>
 800c000:	4607      	mov	r7, r0
 800c002:	1c78      	adds	r0, r7, #1
 800c004:	d1d6      	bne.n	800bfb4 <_vfiprintf_r+0x1bc>
 800c006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c008:	07d9      	lsls	r1, r3, #31
 800c00a:	d405      	bmi.n	800c018 <_vfiprintf_r+0x220>
 800c00c:	89ab      	ldrh	r3, [r5, #12]
 800c00e:	059a      	lsls	r2, r3, #22
 800c010:	d402      	bmi.n	800c018 <_vfiprintf_r+0x220>
 800c012:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c014:	f7ff fb06 	bl	800b624 <__retarget_lock_release_recursive>
 800c018:	89ab      	ldrh	r3, [r5, #12]
 800c01a:	065b      	lsls	r3, r3, #25
 800c01c:	f53f af12 	bmi.w	800be44 <_vfiprintf_r+0x4c>
 800c020:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c022:	e711      	b.n	800be48 <_vfiprintf_r+0x50>
 800c024:	ab03      	add	r3, sp, #12
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	462a      	mov	r2, r5
 800c02a:	4b09      	ldr	r3, [pc, #36]	; (800c050 <_vfiprintf_r+0x258>)
 800c02c:	a904      	add	r1, sp, #16
 800c02e:	4630      	mov	r0, r6
 800c030:	f7fe f906 	bl	800a240 <_printf_i>
 800c034:	e7e4      	b.n	800c000 <_vfiprintf_r+0x208>
 800c036:	bf00      	nop
 800c038:	0800d954 	.word	0x0800d954
 800c03c:	0800d974 	.word	0x0800d974
 800c040:	0800d934 	.word	0x0800d934
 800c044:	0800d820 	.word	0x0800d820
 800c048:	0800d82a 	.word	0x0800d82a
 800c04c:	08009cf9 	.word	0x08009cf9
 800c050:	0800bdd5 	.word	0x0800bdd5
 800c054:	0800d826 	.word	0x0800d826

0800c058 <__sread>:
 800c058:	b510      	push	{r4, lr}
 800c05a:	460c      	mov	r4, r1
 800c05c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c060:	f000 fa74 	bl	800c54c <_read_r>
 800c064:	2800      	cmp	r0, #0
 800c066:	bfab      	itete	ge
 800c068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c06a:	89a3      	ldrhlt	r3, [r4, #12]
 800c06c:	181b      	addge	r3, r3, r0
 800c06e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c072:	bfac      	ite	ge
 800c074:	6563      	strge	r3, [r4, #84]	; 0x54
 800c076:	81a3      	strhlt	r3, [r4, #12]
 800c078:	bd10      	pop	{r4, pc}

0800c07a <__swrite>:
 800c07a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c07e:	461f      	mov	r7, r3
 800c080:	898b      	ldrh	r3, [r1, #12]
 800c082:	05db      	lsls	r3, r3, #23
 800c084:	4605      	mov	r5, r0
 800c086:	460c      	mov	r4, r1
 800c088:	4616      	mov	r6, r2
 800c08a:	d505      	bpl.n	800c098 <__swrite+0x1e>
 800c08c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c090:	2302      	movs	r3, #2
 800c092:	2200      	movs	r2, #0
 800c094:	f000 f9c8 	bl	800c428 <_lseek_r>
 800c098:	89a3      	ldrh	r3, [r4, #12]
 800c09a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c0a2:	81a3      	strh	r3, [r4, #12]
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	463b      	mov	r3, r7
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ae:	f000 b869 	b.w	800c184 <_write_r>

0800c0b2 <__sseek>:
 800c0b2:	b510      	push	{r4, lr}
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ba:	f000 f9b5 	bl	800c428 <_lseek_r>
 800c0be:	1c43      	adds	r3, r0, #1
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	bf15      	itete	ne
 800c0c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c0c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c0ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c0ce:	81a3      	strheq	r3, [r4, #12]
 800c0d0:	bf18      	it	ne
 800c0d2:	81a3      	strhne	r3, [r4, #12]
 800c0d4:	bd10      	pop	{r4, pc}

0800c0d6 <__sclose>:
 800c0d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0da:	f000 b8d3 	b.w	800c284 <_close_r>
	...

0800c0e0 <__swbuf_r>:
 800c0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0e2:	460e      	mov	r6, r1
 800c0e4:	4614      	mov	r4, r2
 800c0e6:	4605      	mov	r5, r0
 800c0e8:	b118      	cbz	r0, 800c0f2 <__swbuf_r+0x12>
 800c0ea:	6983      	ldr	r3, [r0, #24]
 800c0ec:	b90b      	cbnz	r3, 800c0f2 <__swbuf_r+0x12>
 800c0ee:	f7ff f9e3 	bl	800b4b8 <__sinit>
 800c0f2:	4b21      	ldr	r3, [pc, #132]	; (800c178 <__swbuf_r+0x98>)
 800c0f4:	429c      	cmp	r4, r3
 800c0f6:	d12b      	bne.n	800c150 <__swbuf_r+0x70>
 800c0f8:	686c      	ldr	r4, [r5, #4]
 800c0fa:	69a3      	ldr	r3, [r4, #24]
 800c0fc:	60a3      	str	r3, [r4, #8]
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	071a      	lsls	r2, r3, #28
 800c102:	d52f      	bpl.n	800c164 <__swbuf_r+0x84>
 800c104:	6923      	ldr	r3, [r4, #16]
 800c106:	b36b      	cbz	r3, 800c164 <__swbuf_r+0x84>
 800c108:	6923      	ldr	r3, [r4, #16]
 800c10a:	6820      	ldr	r0, [r4, #0]
 800c10c:	1ac0      	subs	r0, r0, r3
 800c10e:	6963      	ldr	r3, [r4, #20]
 800c110:	b2f6      	uxtb	r6, r6
 800c112:	4283      	cmp	r3, r0
 800c114:	4637      	mov	r7, r6
 800c116:	dc04      	bgt.n	800c122 <__swbuf_r+0x42>
 800c118:	4621      	mov	r1, r4
 800c11a:	4628      	mov	r0, r5
 800c11c:	f000 f948 	bl	800c3b0 <_fflush_r>
 800c120:	bb30      	cbnz	r0, 800c170 <__swbuf_r+0x90>
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	3b01      	subs	r3, #1
 800c126:	60a3      	str	r3, [r4, #8]
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	1c5a      	adds	r2, r3, #1
 800c12c:	6022      	str	r2, [r4, #0]
 800c12e:	701e      	strb	r6, [r3, #0]
 800c130:	6963      	ldr	r3, [r4, #20]
 800c132:	3001      	adds	r0, #1
 800c134:	4283      	cmp	r3, r0
 800c136:	d004      	beq.n	800c142 <__swbuf_r+0x62>
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	07db      	lsls	r3, r3, #31
 800c13c:	d506      	bpl.n	800c14c <__swbuf_r+0x6c>
 800c13e:	2e0a      	cmp	r6, #10
 800c140:	d104      	bne.n	800c14c <__swbuf_r+0x6c>
 800c142:	4621      	mov	r1, r4
 800c144:	4628      	mov	r0, r5
 800c146:	f000 f933 	bl	800c3b0 <_fflush_r>
 800c14a:	b988      	cbnz	r0, 800c170 <__swbuf_r+0x90>
 800c14c:	4638      	mov	r0, r7
 800c14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c150:	4b0a      	ldr	r3, [pc, #40]	; (800c17c <__swbuf_r+0x9c>)
 800c152:	429c      	cmp	r4, r3
 800c154:	d101      	bne.n	800c15a <__swbuf_r+0x7a>
 800c156:	68ac      	ldr	r4, [r5, #8]
 800c158:	e7cf      	b.n	800c0fa <__swbuf_r+0x1a>
 800c15a:	4b09      	ldr	r3, [pc, #36]	; (800c180 <__swbuf_r+0xa0>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	bf08      	it	eq
 800c160:	68ec      	ldreq	r4, [r5, #12]
 800c162:	e7ca      	b.n	800c0fa <__swbuf_r+0x1a>
 800c164:	4621      	mov	r1, r4
 800c166:	4628      	mov	r0, r5
 800c168:	f000 f81e 	bl	800c1a8 <__swsetup_r>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d0cb      	beq.n	800c108 <__swbuf_r+0x28>
 800c170:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c174:	e7ea      	b.n	800c14c <__swbuf_r+0x6c>
 800c176:	bf00      	nop
 800c178:	0800d954 	.word	0x0800d954
 800c17c:	0800d974 	.word	0x0800d974
 800c180:	0800d934 	.word	0x0800d934

0800c184 <_write_r>:
 800c184:	b538      	push	{r3, r4, r5, lr}
 800c186:	4d07      	ldr	r5, [pc, #28]	; (800c1a4 <_write_r+0x20>)
 800c188:	4604      	mov	r4, r0
 800c18a:	4608      	mov	r0, r1
 800c18c:	4611      	mov	r1, r2
 800c18e:	2200      	movs	r2, #0
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	461a      	mov	r2, r3
 800c194:	f7f4 ffce 	bl	8001134 <_write>
 800c198:	1c43      	adds	r3, r0, #1
 800c19a:	d102      	bne.n	800c1a2 <_write_r+0x1e>
 800c19c:	682b      	ldr	r3, [r5, #0]
 800c19e:	b103      	cbz	r3, 800c1a2 <_write_r+0x1e>
 800c1a0:	6023      	str	r3, [r4, #0]
 800c1a2:	bd38      	pop	{r3, r4, r5, pc}
 800c1a4:	2000b1c0 	.word	0x2000b1c0

0800c1a8 <__swsetup_r>:
 800c1a8:	4b32      	ldr	r3, [pc, #200]	; (800c274 <__swsetup_r+0xcc>)
 800c1aa:	b570      	push	{r4, r5, r6, lr}
 800c1ac:	681d      	ldr	r5, [r3, #0]
 800c1ae:	4606      	mov	r6, r0
 800c1b0:	460c      	mov	r4, r1
 800c1b2:	b125      	cbz	r5, 800c1be <__swsetup_r+0x16>
 800c1b4:	69ab      	ldr	r3, [r5, #24]
 800c1b6:	b913      	cbnz	r3, 800c1be <__swsetup_r+0x16>
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f7ff f97d 	bl	800b4b8 <__sinit>
 800c1be:	4b2e      	ldr	r3, [pc, #184]	; (800c278 <__swsetup_r+0xd0>)
 800c1c0:	429c      	cmp	r4, r3
 800c1c2:	d10f      	bne.n	800c1e4 <__swsetup_r+0x3c>
 800c1c4:	686c      	ldr	r4, [r5, #4]
 800c1c6:	89a3      	ldrh	r3, [r4, #12]
 800c1c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c1cc:	0719      	lsls	r1, r3, #28
 800c1ce:	d42c      	bmi.n	800c22a <__swsetup_r+0x82>
 800c1d0:	06dd      	lsls	r5, r3, #27
 800c1d2:	d411      	bmi.n	800c1f8 <__swsetup_r+0x50>
 800c1d4:	2309      	movs	r3, #9
 800c1d6:	6033      	str	r3, [r6, #0]
 800c1d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c1dc:	81a3      	strh	r3, [r4, #12]
 800c1de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1e2:	e03e      	b.n	800c262 <__swsetup_r+0xba>
 800c1e4:	4b25      	ldr	r3, [pc, #148]	; (800c27c <__swsetup_r+0xd4>)
 800c1e6:	429c      	cmp	r4, r3
 800c1e8:	d101      	bne.n	800c1ee <__swsetup_r+0x46>
 800c1ea:	68ac      	ldr	r4, [r5, #8]
 800c1ec:	e7eb      	b.n	800c1c6 <__swsetup_r+0x1e>
 800c1ee:	4b24      	ldr	r3, [pc, #144]	; (800c280 <__swsetup_r+0xd8>)
 800c1f0:	429c      	cmp	r4, r3
 800c1f2:	bf08      	it	eq
 800c1f4:	68ec      	ldreq	r4, [r5, #12]
 800c1f6:	e7e6      	b.n	800c1c6 <__swsetup_r+0x1e>
 800c1f8:	0758      	lsls	r0, r3, #29
 800c1fa:	d512      	bpl.n	800c222 <__swsetup_r+0x7a>
 800c1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1fe:	b141      	cbz	r1, 800c212 <__swsetup_r+0x6a>
 800c200:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c204:	4299      	cmp	r1, r3
 800c206:	d002      	beq.n	800c20e <__swsetup_r+0x66>
 800c208:	4630      	mov	r0, r6
 800c20a:	f7fd fa65 	bl	80096d8 <_free_r>
 800c20e:	2300      	movs	r3, #0
 800c210:	6363      	str	r3, [r4, #52]	; 0x34
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c218:	81a3      	strh	r3, [r4, #12]
 800c21a:	2300      	movs	r3, #0
 800c21c:	6063      	str	r3, [r4, #4]
 800c21e:	6923      	ldr	r3, [r4, #16]
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	89a3      	ldrh	r3, [r4, #12]
 800c224:	f043 0308 	orr.w	r3, r3, #8
 800c228:	81a3      	strh	r3, [r4, #12]
 800c22a:	6923      	ldr	r3, [r4, #16]
 800c22c:	b94b      	cbnz	r3, 800c242 <__swsetup_r+0x9a>
 800c22e:	89a3      	ldrh	r3, [r4, #12]
 800c230:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c238:	d003      	beq.n	800c242 <__swsetup_r+0x9a>
 800c23a:	4621      	mov	r1, r4
 800c23c:	4630      	mov	r0, r6
 800c23e:	f000 f92b 	bl	800c498 <__smakebuf_r>
 800c242:	89a0      	ldrh	r0, [r4, #12]
 800c244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c248:	f010 0301 	ands.w	r3, r0, #1
 800c24c:	d00a      	beq.n	800c264 <__swsetup_r+0xbc>
 800c24e:	2300      	movs	r3, #0
 800c250:	60a3      	str	r3, [r4, #8]
 800c252:	6963      	ldr	r3, [r4, #20]
 800c254:	425b      	negs	r3, r3
 800c256:	61a3      	str	r3, [r4, #24]
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	b943      	cbnz	r3, 800c26e <__swsetup_r+0xc6>
 800c25c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c260:	d1ba      	bne.n	800c1d8 <__swsetup_r+0x30>
 800c262:	bd70      	pop	{r4, r5, r6, pc}
 800c264:	0781      	lsls	r1, r0, #30
 800c266:	bf58      	it	pl
 800c268:	6963      	ldrpl	r3, [r4, #20]
 800c26a:	60a3      	str	r3, [r4, #8]
 800c26c:	e7f4      	b.n	800c258 <__swsetup_r+0xb0>
 800c26e:	2000      	movs	r0, #0
 800c270:	e7f7      	b.n	800c262 <__swsetup_r+0xba>
 800c272:	bf00      	nop
 800c274:	200000e4 	.word	0x200000e4
 800c278:	0800d954 	.word	0x0800d954
 800c27c:	0800d974 	.word	0x0800d974
 800c280:	0800d934 	.word	0x0800d934

0800c284 <_close_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d06      	ldr	r5, [pc, #24]	; (800c2a0 <_close_r+0x1c>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	f7f4 ff5e 	bl	8001150 <_close>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_close_r+0x1a>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_close_r+0x1a>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	2000b1c0 	.word	0x2000b1c0

0800c2a4 <__sflush_r>:
 800c2a4:	898a      	ldrh	r2, [r1, #12]
 800c2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	0710      	lsls	r0, r2, #28
 800c2ae:	460c      	mov	r4, r1
 800c2b0:	d458      	bmi.n	800c364 <__sflush_r+0xc0>
 800c2b2:	684b      	ldr	r3, [r1, #4]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dc05      	bgt.n	800c2c4 <__sflush_r+0x20>
 800c2b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	dc02      	bgt.n	800c2c4 <__sflush_r+0x20>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2c6:	2e00      	cmp	r6, #0
 800c2c8:	d0f9      	beq.n	800c2be <__sflush_r+0x1a>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c2d0:	682f      	ldr	r7, [r5, #0]
 800c2d2:	602b      	str	r3, [r5, #0]
 800c2d4:	d032      	beq.n	800c33c <__sflush_r+0x98>
 800c2d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	075a      	lsls	r2, r3, #29
 800c2dc:	d505      	bpl.n	800c2ea <__sflush_r+0x46>
 800c2de:	6863      	ldr	r3, [r4, #4]
 800c2e0:	1ac0      	subs	r0, r0, r3
 800c2e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c2e4:	b10b      	cbz	r3, 800c2ea <__sflush_r+0x46>
 800c2e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c2e8:	1ac0      	subs	r0, r0, r3
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c2f0:	6a21      	ldr	r1, [r4, #32]
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	47b0      	blx	r6
 800c2f6:	1c43      	adds	r3, r0, #1
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	d106      	bne.n	800c30a <__sflush_r+0x66>
 800c2fc:	6829      	ldr	r1, [r5, #0]
 800c2fe:	291d      	cmp	r1, #29
 800c300:	d82c      	bhi.n	800c35c <__sflush_r+0xb8>
 800c302:	4a2a      	ldr	r2, [pc, #168]	; (800c3ac <__sflush_r+0x108>)
 800c304:	40ca      	lsrs	r2, r1
 800c306:	07d6      	lsls	r6, r2, #31
 800c308:	d528      	bpl.n	800c35c <__sflush_r+0xb8>
 800c30a:	2200      	movs	r2, #0
 800c30c:	6062      	str	r2, [r4, #4]
 800c30e:	04d9      	lsls	r1, r3, #19
 800c310:	6922      	ldr	r2, [r4, #16]
 800c312:	6022      	str	r2, [r4, #0]
 800c314:	d504      	bpl.n	800c320 <__sflush_r+0x7c>
 800c316:	1c42      	adds	r2, r0, #1
 800c318:	d101      	bne.n	800c31e <__sflush_r+0x7a>
 800c31a:	682b      	ldr	r3, [r5, #0]
 800c31c:	b903      	cbnz	r3, 800c320 <__sflush_r+0x7c>
 800c31e:	6560      	str	r0, [r4, #84]	; 0x54
 800c320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c322:	602f      	str	r7, [r5, #0]
 800c324:	2900      	cmp	r1, #0
 800c326:	d0ca      	beq.n	800c2be <__sflush_r+0x1a>
 800c328:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c32c:	4299      	cmp	r1, r3
 800c32e:	d002      	beq.n	800c336 <__sflush_r+0x92>
 800c330:	4628      	mov	r0, r5
 800c332:	f7fd f9d1 	bl	80096d8 <_free_r>
 800c336:	2000      	movs	r0, #0
 800c338:	6360      	str	r0, [r4, #52]	; 0x34
 800c33a:	e7c1      	b.n	800c2c0 <__sflush_r+0x1c>
 800c33c:	6a21      	ldr	r1, [r4, #32]
 800c33e:	2301      	movs	r3, #1
 800c340:	4628      	mov	r0, r5
 800c342:	47b0      	blx	r6
 800c344:	1c41      	adds	r1, r0, #1
 800c346:	d1c7      	bne.n	800c2d8 <__sflush_r+0x34>
 800c348:	682b      	ldr	r3, [r5, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d0c4      	beq.n	800c2d8 <__sflush_r+0x34>
 800c34e:	2b1d      	cmp	r3, #29
 800c350:	d001      	beq.n	800c356 <__sflush_r+0xb2>
 800c352:	2b16      	cmp	r3, #22
 800c354:	d101      	bne.n	800c35a <__sflush_r+0xb6>
 800c356:	602f      	str	r7, [r5, #0]
 800c358:	e7b1      	b.n	800c2be <__sflush_r+0x1a>
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	e7ad      	b.n	800c2c0 <__sflush_r+0x1c>
 800c364:	690f      	ldr	r7, [r1, #16]
 800c366:	2f00      	cmp	r7, #0
 800c368:	d0a9      	beq.n	800c2be <__sflush_r+0x1a>
 800c36a:	0793      	lsls	r3, r2, #30
 800c36c:	680e      	ldr	r6, [r1, #0]
 800c36e:	bf08      	it	eq
 800c370:	694b      	ldreq	r3, [r1, #20]
 800c372:	600f      	str	r7, [r1, #0]
 800c374:	bf18      	it	ne
 800c376:	2300      	movne	r3, #0
 800c378:	eba6 0807 	sub.w	r8, r6, r7
 800c37c:	608b      	str	r3, [r1, #8]
 800c37e:	f1b8 0f00 	cmp.w	r8, #0
 800c382:	dd9c      	ble.n	800c2be <__sflush_r+0x1a>
 800c384:	6a21      	ldr	r1, [r4, #32]
 800c386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c388:	4643      	mov	r3, r8
 800c38a:	463a      	mov	r2, r7
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b0      	blx	r6
 800c390:	2800      	cmp	r0, #0
 800c392:	dc06      	bgt.n	800c3a2 <__sflush_r+0xfe>
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3a0:	e78e      	b.n	800c2c0 <__sflush_r+0x1c>
 800c3a2:	4407      	add	r7, r0
 800c3a4:	eba8 0800 	sub.w	r8, r8, r0
 800c3a8:	e7e9      	b.n	800c37e <__sflush_r+0xda>
 800c3aa:	bf00      	nop
 800c3ac:	20400001 	.word	0x20400001

0800c3b0 <_fflush_r>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	690b      	ldr	r3, [r1, #16]
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	b913      	cbnz	r3, 800c3c0 <_fflush_r+0x10>
 800c3ba:	2500      	movs	r5, #0
 800c3bc:	4628      	mov	r0, r5
 800c3be:	bd38      	pop	{r3, r4, r5, pc}
 800c3c0:	b118      	cbz	r0, 800c3ca <_fflush_r+0x1a>
 800c3c2:	6983      	ldr	r3, [r0, #24]
 800c3c4:	b90b      	cbnz	r3, 800c3ca <_fflush_r+0x1a>
 800c3c6:	f7ff f877 	bl	800b4b8 <__sinit>
 800c3ca:	4b14      	ldr	r3, [pc, #80]	; (800c41c <_fflush_r+0x6c>)
 800c3cc:	429c      	cmp	r4, r3
 800c3ce:	d11b      	bne.n	800c408 <_fflush_r+0x58>
 800c3d0:	686c      	ldr	r4, [r5, #4]
 800c3d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0ef      	beq.n	800c3ba <_fflush_r+0xa>
 800c3da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c3dc:	07d0      	lsls	r0, r2, #31
 800c3de:	d404      	bmi.n	800c3ea <_fflush_r+0x3a>
 800c3e0:	0599      	lsls	r1, r3, #22
 800c3e2:	d402      	bmi.n	800c3ea <_fflush_r+0x3a>
 800c3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3e6:	f7ff f91c 	bl	800b622 <__retarget_lock_acquire_recursive>
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f7ff ff59 	bl	800c2a4 <__sflush_r>
 800c3f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3f4:	07da      	lsls	r2, r3, #31
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	d4e0      	bmi.n	800c3bc <_fflush_r+0xc>
 800c3fa:	89a3      	ldrh	r3, [r4, #12]
 800c3fc:	059b      	lsls	r3, r3, #22
 800c3fe:	d4dd      	bmi.n	800c3bc <_fflush_r+0xc>
 800c400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c402:	f7ff f90f 	bl	800b624 <__retarget_lock_release_recursive>
 800c406:	e7d9      	b.n	800c3bc <_fflush_r+0xc>
 800c408:	4b05      	ldr	r3, [pc, #20]	; (800c420 <_fflush_r+0x70>)
 800c40a:	429c      	cmp	r4, r3
 800c40c:	d101      	bne.n	800c412 <_fflush_r+0x62>
 800c40e:	68ac      	ldr	r4, [r5, #8]
 800c410:	e7df      	b.n	800c3d2 <_fflush_r+0x22>
 800c412:	4b04      	ldr	r3, [pc, #16]	; (800c424 <_fflush_r+0x74>)
 800c414:	429c      	cmp	r4, r3
 800c416:	bf08      	it	eq
 800c418:	68ec      	ldreq	r4, [r5, #12]
 800c41a:	e7da      	b.n	800c3d2 <_fflush_r+0x22>
 800c41c:	0800d954 	.word	0x0800d954
 800c420:	0800d974 	.word	0x0800d974
 800c424:	0800d934 	.word	0x0800d934

0800c428 <_lseek_r>:
 800c428:	b538      	push	{r3, r4, r5, lr}
 800c42a:	4d07      	ldr	r5, [pc, #28]	; (800c448 <_lseek_r+0x20>)
 800c42c:	4604      	mov	r4, r0
 800c42e:	4608      	mov	r0, r1
 800c430:	4611      	mov	r1, r2
 800c432:	2200      	movs	r2, #0
 800c434:	602a      	str	r2, [r5, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	f7f4 fe96 	bl	8001168 <_lseek>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d102      	bne.n	800c446 <_lseek_r+0x1e>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	b103      	cbz	r3, 800c446 <_lseek_r+0x1e>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	2000b1c0 	.word	0x2000b1c0

0800c44c <__swhatbuf_r>:
 800c44c:	b570      	push	{r4, r5, r6, lr}
 800c44e:	460e      	mov	r6, r1
 800c450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c454:	2900      	cmp	r1, #0
 800c456:	b096      	sub	sp, #88	; 0x58
 800c458:	4614      	mov	r4, r2
 800c45a:	461d      	mov	r5, r3
 800c45c:	da08      	bge.n	800c470 <__swhatbuf_r+0x24>
 800c45e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	602a      	str	r2, [r5, #0]
 800c466:	061a      	lsls	r2, r3, #24
 800c468:	d410      	bmi.n	800c48c <__swhatbuf_r+0x40>
 800c46a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c46e:	e00e      	b.n	800c48e <__swhatbuf_r+0x42>
 800c470:	466a      	mov	r2, sp
 800c472:	f000 f88b 	bl	800c58c <_fstat_r>
 800c476:	2800      	cmp	r0, #0
 800c478:	dbf1      	blt.n	800c45e <__swhatbuf_r+0x12>
 800c47a:	9a01      	ldr	r2, [sp, #4]
 800c47c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c480:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c484:	425a      	negs	r2, r3
 800c486:	415a      	adcs	r2, r3
 800c488:	602a      	str	r2, [r5, #0]
 800c48a:	e7ee      	b.n	800c46a <__swhatbuf_r+0x1e>
 800c48c:	2340      	movs	r3, #64	; 0x40
 800c48e:	2000      	movs	r0, #0
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	b016      	add	sp, #88	; 0x58
 800c494:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c498 <__smakebuf_r>:
 800c498:	898b      	ldrh	r3, [r1, #12]
 800c49a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c49c:	079d      	lsls	r5, r3, #30
 800c49e:	4606      	mov	r6, r0
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	d507      	bpl.n	800c4b4 <__smakebuf_r+0x1c>
 800c4a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4a8:	6023      	str	r3, [r4, #0]
 800c4aa:	6123      	str	r3, [r4, #16]
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	6163      	str	r3, [r4, #20]
 800c4b0:	b002      	add	sp, #8
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	ab01      	add	r3, sp, #4
 800c4b6:	466a      	mov	r2, sp
 800c4b8:	f7ff ffc8 	bl	800c44c <__swhatbuf_r>
 800c4bc:	9900      	ldr	r1, [sp, #0]
 800c4be:	4605      	mov	r5, r0
 800c4c0:	4630      	mov	r0, r6
 800c4c2:	f7fd f9a9 	bl	8009818 <_malloc_r>
 800c4c6:	b948      	cbnz	r0, 800c4dc <__smakebuf_r+0x44>
 800c4c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4cc:	059a      	lsls	r2, r3, #22
 800c4ce:	d4ef      	bmi.n	800c4b0 <__smakebuf_r+0x18>
 800c4d0:	f023 0303 	bic.w	r3, r3, #3
 800c4d4:	f043 0302 	orr.w	r3, r3, #2
 800c4d8:	81a3      	strh	r3, [r4, #12]
 800c4da:	e7e3      	b.n	800c4a4 <__smakebuf_r+0xc>
 800c4dc:	4b0d      	ldr	r3, [pc, #52]	; (800c514 <__smakebuf_r+0x7c>)
 800c4de:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	6020      	str	r0, [r4, #0]
 800c4e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4e8:	81a3      	strh	r3, [r4, #12]
 800c4ea:	9b00      	ldr	r3, [sp, #0]
 800c4ec:	6163      	str	r3, [r4, #20]
 800c4ee:	9b01      	ldr	r3, [sp, #4]
 800c4f0:	6120      	str	r0, [r4, #16]
 800c4f2:	b15b      	cbz	r3, 800c50c <__smakebuf_r+0x74>
 800c4f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4f8:	4630      	mov	r0, r6
 800c4fa:	f000 f859 	bl	800c5b0 <_isatty_r>
 800c4fe:	b128      	cbz	r0, 800c50c <__smakebuf_r+0x74>
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	f023 0303 	bic.w	r3, r3, #3
 800c506:	f043 0301 	orr.w	r3, r3, #1
 800c50a:	81a3      	strh	r3, [r4, #12]
 800c50c:	89a0      	ldrh	r0, [r4, #12]
 800c50e:	4305      	orrs	r5, r0
 800c510:	81a5      	strh	r5, [r4, #12]
 800c512:	e7cd      	b.n	800c4b0 <__smakebuf_r+0x18>
 800c514:	0800b451 	.word	0x0800b451

0800c518 <__ascii_mbtowc>:
 800c518:	b082      	sub	sp, #8
 800c51a:	b901      	cbnz	r1, 800c51e <__ascii_mbtowc+0x6>
 800c51c:	a901      	add	r1, sp, #4
 800c51e:	b142      	cbz	r2, 800c532 <__ascii_mbtowc+0x1a>
 800c520:	b14b      	cbz	r3, 800c536 <__ascii_mbtowc+0x1e>
 800c522:	7813      	ldrb	r3, [r2, #0]
 800c524:	600b      	str	r3, [r1, #0]
 800c526:	7812      	ldrb	r2, [r2, #0]
 800c528:	1e10      	subs	r0, r2, #0
 800c52a:	bf18      	it	ne
 800c52c:	2001      	movne	r0, #1
 800c52e:	b002      	add	sp, #8
 800c530:	4770      	bx	lr
 800c532:	4610      	mov	r0, r2
 800c534:	e7fb      	b.n	800c52e <__ascii_mbtowc+0x16>
 800c536:	f06f 0001 	mvn.w	r0, #1
 800c53a:	e7f8      	b.n	800c52e <__ascii_mbtowc+0x16>

0800c53c <_malloc_usable_size_r>:
 800c53c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c540:	1f18      	subs	r0, r3, #4
 800c542:	2b00      	cmp	r3, #0
 800c544:	bfbc      	itt	lt
 800c546:	580b      	ldrlt	r3, [r1, r0]
 800c548:	18c0      	addlt	r0, r0, r3
 800c54a:	4770      	bx	lr

0800c54c <_read_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_read_r+0x20>)
 800c550:	4604      	mov	r4, r0
 800c552:	4608      	mov	r0, r1
 800c554:	4611      	mov	r1, r2
 800c556:	2200      	movs	r2, #0
 800c558:	602a      	str	r2, [r5, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f7f4 fddc 	bl	8001118 <_read>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_read_r+0x1e>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_read_r+0x1e>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	2000b1c0 	.word	0x2000b1c0

0800c570 <__ascii_wctomb>:
 800c570:	b149      	cbz	r1, 800c586 <__ascii_wctomb+0x16>
 800c572:	2aff      	cmp	r2, #255	; 0xff
 800c574:	bf85      	ittet	hi
 800c576:	238a      	movhi	r3, #138	; 0x8a
 800c578:	6003      	strhi	r3, [r0, #0]
 800c57a:	700a      	strbls	r2, [r1, #0]
 800c57c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c580:	bf98      	it	ls
 800c582:	2001      	movls	r0, #1
 800c584:	4770      	bx	lr
 800c586:	4608      	mov	r0, r1
 800c588:	4770      	bx	lr
	...

0800c58c <_fstat_r>:
 800c58c:	b538      	push	{r3, r4, r5, lr}
 800c58e:	4d07      	ldr	r5, [pc, #28]	; (800c5ac <_fstat_r+0x20>)
 800c590:	2300      	movs	r3, #0
 800c592:	4604      	mov	r4, r0
 800c594:	4608      	mov	r0, r1
 800c596:	4611      	mov	r1, r2
 800c598:	602b      	str	r3, [r5, #0]
 800c59a:	f7f4 fddd 	bl	8001158 <_fstat>
 800c59e:	1c43      	adds	r3, r0, #1
 800c5a0:	d102      	bne.n	800c5a8 <_fstat_r+0x1c>
 800c5a2:	682b      	ldr	r3, [r5, #0]
 800c5a4:	b103      	cbz	r3, 800c5a8 <_fstat_r+0x1c>
 800c5a6:	6023      	str	r3, [r4, #0]
 800c5a8:	bd38      	pop	{r3, r4, r5, pc}
 800c5aa:	bf00      	nop
 800c5ac:	2000b1c0 	.word	0x2000b1c0

0800c5b0 <_isatty_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d06      	ldr	r5, [pc, #24]	; (800c5cc <_isatty_r+0x1c>)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4608      	mov	r0, r1
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	f7f4 fdd2 	bl	8001164 <_isatty>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d102      	bne.n	800c5ca <_isatty_r+0x1a>
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	b103      	cbz	r3, 800c5ca <_isatty_r+0x1a>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	2000b1c0 	.word	0x2000b1c0

0800c5d0 <_init>:
 800c5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5d2:	bf00      	nop
 800c5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5d6:	bc08      	pop	{r3}
 800c5d8:	469e      	mov	lr, r3
 800c5da:	4770      	bx	lr

0800c5dc <_fini>:
 800c5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5de:	bf00      	nop
 800c5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e2:	bc08      	pop	{r3}
 800c5e4:	469e      	mov	lr, r3
 800c5e6:	4770      	bx	lr
