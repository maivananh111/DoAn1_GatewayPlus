
DoAn1_GatewayPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da18  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c38  0800dbc8  0800dbc8  0001dbc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f800  0800f800  0002033c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f800  0800f800  0001f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f808  0800f808  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  0800f808  0800f808  0001f808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800f834  0800f834  0001f834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0800f840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002033c  2**0
                  CONTENTS
 10 .bss          0000b714  20000340  20000340  00020340  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000ba54  2000ba54  00020340  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000628ea  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aca5  00000000  00000000  00082c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002b1a5  00000000  00000000  0008d8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d08  00000000  00000000  000b8aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00007dc8  00000000  00000000  000ba7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000124a3  00000000  00000000  000c2570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042285  00000000  00000000  000d4a13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108d52  00000000  00000000  00116c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021f9ea  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007660  00000000  00000000  0021fa3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000340 	.word	0x20000340
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dbb0 	.word	0x0800dbb0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000344 	.word	0x20000344
 80001ec:	0800dbb0 	.word	0x0800dbb0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <HAL_Driver_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8000fcc:	b086      	sub	sp, #24
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_Driver_Init+0x70>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9201      	str	r2, [sp, #4]
 8000fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000fda:	6319      	str	r1, [r3, #48]	; 0x30
 8000fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fde:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000fe2:	9101      	str	r1, [sp, #4]
 8000fe4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	9202      	str	r2, [sp, #8]
 8000fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fea:	f041 0104 	orr.w	r1, r1, #4
 8000fee:	6319      	str	r1, [r3, #48]	; 0x30
 8000ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff2:	f001 0104 	and.w	r1, r1, #4
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	9203      	str	r2, [sp, #12]
 8000ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffe:	f041 0101 	orr.w	r1, r1, #1
 8001002:	6319      	str	r1, [r3, #48]	; 0x30
 8001004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001006:	f001 0101 	and.w	r1, r1, #1
 800100a:	9103      	str	r1, [sp, #12]
 800100c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	9204      	str	r2, [sp, #16]
 8001010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001012:	f041 0102 	orr.w	r1, r1, #2
 8001016:	6319      	str	r1, [r3, #48]	; 0x30
 8001018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800101a:	f001 0102 	and.w	r1, r1, #2
 800101e:	9104      	str	r1, [sp, #16]
 8001020:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	9205      	str	r2, [sp, #20]
 8001024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	9305      	str	r3, [sp, #20]
 8001034:	9b05      	ldr	r3, [sp, #20]
}
 8001036:	b006      	add	sp, #24
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <main>:
	return main_application();
 8001040:	f008 bbf2 	b.w	8009828 <main_application>

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was handle(call NMI_Handler)...");
 8001046:	4902      	ldr	r1, [pc, #8]	; (8001050 <NMI_Handler+0xc>)
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <NMI_Handler+0x10>)
 800104a:	f009 f811 	bl	800a070 <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104e:	e7fe      	b.n	800104e <NMI_Handler+0xa>
 8001050:	0800dbc8 	.word	0x0800dbc8
 8001054:	0800dc00 	.word	0x0800dc00

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was handle(call HardFault_Handler)...");
 800105a:	4902      	ldr	r1, [pc, #8]	; (8001064 <HardFault_Handler+0xc>)
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <HardFault_Handler+0x10>)
 800105e:	f009 f807 	bl	800a070 <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0xa>
 8001064:	0800dc0c 	.word	0x0800dc0c
 8001068:	0800dc48 	.word	0x0800dc48

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was handle(call MemManage_Handler)...");
 800106e:	4902      	ldr	r1, [pc, #8]	; (8001078 <MemManage_Handler+0xc>)
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <MemManage_Handler+0x10>)
 8001072:	f008 fffd 	bl	800a070 <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <MemManage_Handler+0xa>
 8001078:	0800dc54 	.word	0x0800dc54
 800107c:	0800dc00 	.word	0x0800dc00

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was handle(call BusFault_Handler)...");
 8001082:	4902      	ldr	r1, [pc, #8]	; (800108c <BusFault_Handler+0xc>)
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <BusFault_Handler+0x10>)
 8001086:	f008 fff3 	bl	800a070 <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0xa>
 800108c:	0800dc98 	.word	0x0800dc98
 8001090:	0800dc48 	.word	0x0800dc48

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was handle(call UsageFault_Handler)...");
 8001096:	4902      	ldr	r1, [pc, #8]	; (80010a0 <UsageFault_Handler+0xc>)
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <UsageFault_Handler+0x10>)
 800109a:	f008 ffe9 	bl	800a070 <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <UsageFault_Handler+0xa>
 80010a0:	0800dcd4 	.word	0x0800dcd4
 80010a4:	0800dc48 	.word	0x0800dc48

080010a8 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was handle(call DebugMon_Handler)...");
 80010a8:	4901      	ldr	r1, [pc, #4]	; (80010b0 <DebugMon_Handler+0x8>)
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DebugMon_Handler+0xc>)
 80010ac:	f008 bfe0 	b.w	800a070 <exception_interrupt_handler>
 80010b0:	0800dd14 	.word	0x0800dd14
 80010b4:	0800dc00 	.word	0x0800dc00

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 80010ba:	f007 fa8d 	bl	80085d8 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8e7 	bl	8001290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010c2:	f002 fb9d 	bl	8003800 <xTaskGetSchedulerState>
 80010c6:	2801      	cmp	r0, #1
 80010c8:	d100      	bne.n	80010cc <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80010d0:	f002 bf70 	b.w	8003fb4 <xPortSysTickHandler>

080010d4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <DMA2_Stream3_IRQHandler+0x8>)
 80010d6:	f000 b8e7 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010da:	bf00      	nop
 80010dc:	2000035c 	.word	0x2000035c

080010e0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010e0:	4801      	ldr	r0, [pc, #4]	; (80010e8 <ETH_IRQHandler+0x8>)
 80010e2:	f000 b9d5 	b.w	8001490 <HAL_ETH_IRQHandler>
 80010e6:	bf00      	nop
 80010e8:	2000042c 	.word	0x2000042c

080010ec <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <DMA2_Stream6_IRQHandler+0x8>)
 80010ee:	f000 b8db 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010f2:	bf00      	nop
 80010f4:	200003bc 	.word	0x200003bc

080010f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80010f8:	2001      	movs	r0, #1
 80010fa:	4770      	bx	lr

080010fc <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <_kill+0xc>)
 80010fe:	2216      	movs	r2, #22
 8001100:	601a      	str	r2, [r3, #0]
  return -1;
}
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	2000b248 	.word	0x2000b248

0800110c <_exit>:
  errno = EINVAL;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <_exit+0x8>)
 800110e:	2216      	movs	r2, #22
 8001110:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x6>
 8001114:	2000b248 	.word	0x2000b248

08001118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	1e16      	subs	r6, r2, #0
 800111c:	dd07      	ble.n	800112e <_read+0x16>
 800111e:	460c      	mov	r4, r1
 8001120:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001122:	f3af 8000 	nop.w
 8001126:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	42a5      	cmp	r5, r4
 800112c:	d1f9      	bne.n	8001122 <_read+0xa>
  }

  return len;
}
 800112e:	4630      	mov	r0, r6
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	bf00      	nop

08001134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	1e16      	subs	r6, r2, #0
 8001138:	dd07      	ble.n	800114a <_write+0x16>
 800113a:	460c      	mov	r4, r1
 800113c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800113e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001142:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	42ac      	cmp	r4, r5
 8001148:	d1f9      	bne.n	800113e <_write+0xa>
  }
  return len;
}
 800114a:	4630      	mov	r0, r6
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	bf00      	nop

08001150 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800115e:	2000      	movs	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001168:	2000      	movs	r0, #0
 800116a:	4770      	bx	lr

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <_sbrk+0x3c>)
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001174:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001176:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001178:	b182      	cbz	r2, 800119c <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4410      	add	r0, r2
 800117c:	4288      	cmp	r0, r1
 800117e:	d804      	bhi.n	800118a <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001180:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001182:	4610      	mov	r0, r2
 8001184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001188:	4770      	bx	lr
    errno = ENOMEM;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <_sbrk+0x44>)
}
 800118c:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001190:	220c      	movs	r2, #12
 8001192:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001198:	4610      	mov	r0, r2
 800119a:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x48>)
 800119e:	6022      	str	r2, [r4, #0]
 80011a0:	e7eb      	b.n	800117a <_sbrk+0xe>
 80011a2:	bf00      	nop
 80011a4:	2000041c 	.word	0x2000041c
 80011a8:	20030000 	.word	0x20030000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000b248 	.word	0x2000b248
 80011b4:	2000ba58 	.word	0x2000ba58

080011b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <SystemInit+0x10>)
 80011ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011cc:	4a16      	ldr	r2, [pc, #88]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d00c      	beq.n	80011f2 <SystemCoreClockUpdate+0x26>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d00c      	beq.n	80011f6 <SystemCoreClockUpdate+0x2a>
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <SystemCoreClockUpdate+0x64>)
 80011e2:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80011ea:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 80011ec:	40d3      	lsrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
}
 80011f0:	4770      	bx	lr
  switch (tmp)
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemCoreClockUpdate+0x6c>)
 80011f4:	e7f3      	b.n	80011de <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011f6:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 80011fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001202:	6853      	ldr	r3, [r2, #4]
 8001204:	bf14      	ite	ne
 8001206:	4a0c      	ldrne	r2, [pc, #48]	; (8001238 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001208:	4a08      	ldreq	r2, [pc, #32]	; (800122c <SystemCoreClockUpdate+0x60>)
 800120a:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 8001210:	6852      	ldr	r2, [r2, #4]
 8001212:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001216:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800121a:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800121c:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001220:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001222:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001226:	e7da      	b.n	80011de <SystemCoreClockUpdate+0x12>
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400
 8001230:	0800dd54 	.word	0x0800dd54
 8001234:	20000000 	.word	0x20000000
 8001238:	017d7840 	.word	0x017d7840

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001266:	f7ff ffa7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f009 fc9f 	bl	800abac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fee7 	bl	8001040 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001274:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8001280:	0800f840 	.word	0x0800f840
  ldr r2, =_sbss
 8001284:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8001288:	2000ba54 	.word	0x2000ba54

0800128c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <CAN1_RX0_IRQHandler>
	...

08001290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x10>)
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_IncTick+0x14>)
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	440b      	add	r3, r1
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000420 	.word	0x20000420
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ac:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ae:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b2:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80012ba:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	2208      	movs	r2, #8
 80012be:	409a      	lsls	r2, r3
 80012c0:	4222      	tst	r2, r4
{
 80012c2:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	d004      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012c6:	6801      	ldr	r1, [r0, #0]
 80012c8:	680f      	ldr	r7, [r1, #0]
 80012ca:	0778      	lsls	r0, r7, #29
 80012cc:	f100 808a 	bmi.w	80013e4 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4222      	tst	r2, r4
 80012d6:	d004      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012d8:	f8d8 1000 	ldr.w	r1, [r8]
 80012dc:	6949      	ldr	r1, [r1, #20]
 80012de:	0609      	lsls	r1, r1, #24
 80012e0:	d478      	bmi.n	80013d4 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	2204      	movs	r2, #4
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4222      	tst	r2, r4
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	f8d8 1000 	ldr.w	r1, [r8]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	078f      	lsls	r7, r1, #30
 80012f2:	d467      	bmi.n	80013c4 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	2210      	movs	r2, #16
 80012f6:	409a      	lsls	r2, r3
 80012f8:	4222      	tst	r2, r4
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012fc:	f8d8 1000 	ldr.w	r1, [r8]
 8001300:	680f      	ldr	r7, [r1, #0]
 8001302:	0738      	lsls	r0, r7, #28
 8001304:	d449      	bmi.n	800139a <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001306:	2220      	movs	r2, #32
 8001308:	409a      	lsls	r2, r3
 800130a:	4222      	tst	r2, r4
 800130c:	d017      	beq.n	800133e <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130e:	f8d8 1000 	ldr.w	r1, [r8]
 8001312:	680c      	ldr	r4, [r1, #0]
 8001314:	06e0      	lsls	r0, r4, #27
 8001316:	d512      	bpl.n	800133e <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001318:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800131e:	2a05      	cmp	r2, #5
 8001320:	d073      	beq.n	800140a <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001322:	680b      	ldr	r3, [r1, #0]
 8001324:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001328:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	f000 8090 	beq.w	800144e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800132e:	0319      	lsls	r1, r3, #12
 8001330:	f140 809b 	bpl.w	800146a <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 8001334:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001338:	b10b      	cbz	r3, 800133e <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800133a:	4640      	mov	r0, r8
 800133c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800133e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001342:	b33b      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001344:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001348:	07da      	lsls	r2, r3, #31
 800134a:	d51b      	bpl.n	8001384 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800134c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001350:	494c      	ldr	r1, [pc, #304]	; (8001484 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001352:	2305      	movs	r3, #5
 8001354:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001358:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800135a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800135e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001362:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e002      	b.n	800136e <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d504      	bpl.n	8001378 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	42ab      	cmp	r3, r5
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	d9f7      	bls.n	8001368 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001378:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800137c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001380:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001384:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001388:	b123      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	4640      	mov	r0, r8
    }
  }
}
 800138c:	b002      	add	sp, #8
 800138e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8001392:	4718      	bx	r3
}
 8001394:	b002      	add	sp, #8
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800139a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	680a      	ldr	r2, [r1, #0]
 800139e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a4:	d12a      	bne.n	80013fc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a6:	05d7      	lsls	r7, r2, #23
 80013a8:	d403      	bmi.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013aa:	680a      	ldr	r2, [r1, #0]
 80013ac:	f022 0208 	bic.w	r2, r2, #8
 80013b0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80013b2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d0a5      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80013ba:	4640      	mov	r0, r8
 80013bc:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013be:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80013c2:	e7a0      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013d2:	e78f      	b.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013e2:	e77e      	b.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013e4:	680f      	ldr	r7, [r1, #0]
 80013e6:	f027 0704 	bic.w	r7, r7, #4
 80013ea:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013ec:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013ee:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013fa:	e769      	b.n	80012d0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fc:	0312      	lsls	r2, r2, #12
 80013fe:	d5d8      	bpl.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001400:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001404:	2a00      	cmp	r2, #0
 8001406:	d1d8      	bne.n	80013ba <HAL_DMA_IRQHandler+0x112>
 8001408:	e77d      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	680a      	ldr	r2, [r1, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	694a      	ldr	r2, [r1, #20]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800141e:	b352      	cbz	r2, 8001476 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001420:	680a      	ldr	r2, [r1, #0]
 8001422:	f022 0208 	bic.w	r2, r2, #8
 8001426:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800142e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001432:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001434:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001436:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001438:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800143c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001440:	2900      	cmp	r1, #0
 8001442:	d0a7      	beq.n	8001394 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8001444:	4640      	mov	r0, r8
}
 8001446:	b002      	add	sp, #8
 8001448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800144c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800144e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001452:	f47f af6f 	bne.w	8001334 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001456:	680a      	ldr	r2, [r1, #0]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800145e:	2201      	movs	r2, #1
 8001460:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001464:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8001468:	e764      	b.n	8001334 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800146a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af63 	bne.w	800133a <HAL_DMA_IRQHandler+0x92>
 8001474:	e763      	b.n	800133e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800147a:	2a00      	cmp	r2, #0
 800147c:	d1d0      	bne.n	8001420 <HAL_DMA_IRQHandler+0x178>
 800147e:	e7d3      	b.n	8001428 <HAL_DMA_IRQHandler+0x180>
 8001480:	20000000 	.word	0x20000000
 8001484:	1b4e81b5 	.word	0x1b4e81b5

08001488 <HAL_ETH_PMTCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_ETH_WakeUpCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001490:	6802      	ldr	r2, [r0, #0]
 8001492:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001496:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	0649      	lsls	r1, r1, #25
{
 800149c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800149e:	d502      	bpl.n	80014a6 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80014a0:	69d9      	ldr	r1, [r3, #28]
 80014a2:	0649      	lsls	r1, r1, #25
 80014a4:	d448      	bmi.n	8001538 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	07c9      	lsls	r1, r1, #31
 80014aa:	d502      	bpl.n	80014b2 <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80014ac:	69d9      	ldr	r1, [r3, #28]
 80014ae:	07c8      	lsls	r0, r1, #31
 80014b0:	d438      	bmi.n	8001524 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80014b2:	6959      	ldr	r1, [r3, #20]
 80014b4:	0409      	lsls	r1, r1, #16
 80014b6:	d502      	bpl.n	80014be <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80014b8:	69d9      	ldr	r1, [r3, #28]
 80014ba:	0408      	lsls	r0, r1, #16
 80014bc:	d40e      	bmi.n	80014dc <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80014be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80014c0:	0719      	lsls	r1, r3, #28
 80014c2:	d423      	bmi.n	800150c <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_ETH_IRQHandler+0xd0>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	0312      	lsls	r2, r2, #12
 80014ca:	d400      	bmi.n	80014ce <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80014cc:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80014ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d2:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ffd9 	bl	800148c <HAL_ETH_WakeUpCallback>
}
 80014da:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014dc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80014e0:	f042 0208 	orr.w	r2, r2, #8
 80014e4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80014ee:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014f0:	d12a      	bne.n	8001548 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014f2:	f248 6180 	movw	r1, #34432	; 0x8680
 80014f6:	400a      	ands	r2, r1
 80014f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014fc:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 f844 	bl	800158c <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001508:	0719      	lsls	r1, r3, #28
 800150a:	d5db      	bpl.n	80014c4 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800150c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800150e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001512:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff ffb6 	bl	8001488 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800151c:	2300      	movs	r3, #0
 800151e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001522:	e7cf      	b.n	80014c4 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001524:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001528:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 800152a:	4620      	mov	r0, r4
 800152c:	f000 f828 	bl	8001580 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001536:	e7bc      	b.n	80014b2 <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_ETH_IRQHandler+0xd4>)
 800153a:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 800153c:	f000 f81a 	bl	8001574 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001546:	e7ae      	b.n	80014a6 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_ETH_IRQHandler+0xd8>)
 800154a:	4002      	ands	r2, r0
 800154c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001550:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001552:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001554:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001558:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 800155a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800155e:	e7ce      	b.n	80014fe <HAL_ETH_IRQHandler+0x6e>
 8001560:	40013c00 	.word	0x40013c00
 8001564:	00010040 	.word	0x00010040
 8001568:	007e2000 	.word	0x007e2000

0800156c <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 800156c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_ETH_RxCpltCallback+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f000 b816 	b.w	80015a8 <osSemaphoreRelease>
 800157c:	20000424 	.word	0x20000424

08001580 <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_ETH_TxCpltCallback+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f000 b810 	b.w	80015a8 <osSemaphoreRelease>
 8001588:	20000428 	.word	0x20000428

0800158c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800158c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800158e:	f7ff ffed 	bl	800156c <HAL_ETH_GetDMAError>
 8001592:	0603      	lsls	r3, r0, #24
 8001594:	d400      	bmi.n	8001598 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001596:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_ETH_ErrorCallback+0x18>)
 800159a:	6818      	ldr	r0, [r3, #0]
}
 800159c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80015a0:	f000 b802 	b.w	80015a8 <osSemaphoreRelease>
 80015a4:	20000424 	.word	0x20000424

080015a8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80015a8:	b330      	cbz	r0, 80015f8 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80015aa:	b510      	push	{r4, lr}
 80015ac:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015ae:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80015b2:	b1ab      	cbz	r3, 80015e0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 80015b4:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015b6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80015b8:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015ba:	f000 fc83 	bl	8001ec4 <xQueueGiveFromISR>
 80015be:	2801      	cmp	r0, #1
 80015c0:	d117      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	b193      	cbz	r3, 80015ec <osSemaphoreRelease+0x44>
 80015c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80015da:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80015dc:	b002      	add	sp, #8
 80015de:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80015e0:	461a      	mov	r2, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	f000 fa52 	bl	8001a8c <xQueueGenericSend>
 80015e8:	2801      	cmp	r0, #1
 80015ea:	d102      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
  stat = osOK;
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	b002      	add	sp, #8
 80015f0:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 80015f2:	f06f 0002 	mvn.w	r0, #2
 80015f6:	e7fa      	b.n	80015ee <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80015f8:	f06f 0003 	mvn.w	r0, #3
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <vApplicationGetIdleTaskMemory+0x14>)
 8001602:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001604:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001606:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001608:	4c03      	ldr	r4, [pc, #12]	; (8001618 <vApplicationGetIdleTaskMemory+0x18>)
 800160a:	600c      	str	r4, [r1, #0]
}
 800160c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	4770      	bx	lr
 8001614:	200006dc 	.word	0x200006dc
 8001618:	200004dc 	.word	0x200004dc

0800161c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <vApplicationGetTimerTaskMemory+0x18>)
 800161e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001620:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001626:	4c04      	ldr	r4, [pc, #16]	; (8001638 <vApplicationGetTimerTaskMemory+0x1c>)
 8001628:	600c      	str	r4, [r1, #0]
}
 800162a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000b48 	.word	0x20000b48
 8001638:	20000748 	.word	0x20000748

0800163c <vEventGroupSetBitsCallback>:
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800163c:	2800      	cmp	r0, #0
 800163e:	d03d      	beq.n	80016bc <vEventGroupSetBitsCallback+0x80>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001644:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
 8001648:	4688      	mov	r8, r1
 800164a:	d008      	beq.n	800165e <vEventGroupSetBitsCallback+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800164c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001650:	f383 8811 	msr	BASEPRI, r3
 8001654:	f3bf 8f6f 	isb	sy
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	e7fe      	b.n	800165c <vEventGroupSetBitsCallback+0x20>
 800165e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8001660:	f001 feac 	bl	80033bc <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001664:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8001666:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001668:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 800166c:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
 8001670:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001672:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8001674:	d10c      	bne.n	8001690 <vEventGroupSetBitsCallback+0x54>
 8001676:	e01c      	b.n	80016b2 <vEventGroupSetBitsCallback+0x76>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001678:	ea13 0f0c 	tst.w	r3, ip
 800167c:	d006      	beq.n	800168c <vEventGroupSetBitsCallback+0x50>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800167e:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 8001680:	bf48      	it	mi
 8001682:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001686:	f002 f811 	bl	80036ac <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800168a:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 800168c:	42a7      	cmp	r7, r4
 800168e:	d00e      	beq.n	80016ae <vEventGroupSetBitsCallback+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001690:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001692:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001696:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8001698:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800169a:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800169e:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80016a2:	d0e9      	beq.n	8001678 <vEventGroupSetBitsCallback+0x3c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80016a4:	ea3c 0e03 	bics.w	lr, ip, r3
 80016a8:	d0e9      	beq.n	800167e <vEventGroupSetBitsCallback+0x42>
		while( pxListItem != pxListEnd )
 80016aa:	42a7      	cmp	r7, r4
 80016ac:	d1f0      	bne.n	8001690 <vEventGroupSetBitsCallback+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80016ae:	ea23 0306 	bic.w	r3, r3, r6
 80016b2:	602b      	str	r3, [r5, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
 80016b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
 80016b8:	f001 be88 	b.w	80033cc <xTaskResumeAll>
 80016bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80016cc:	e7fe      	b.n	80016cc <vEventGroupSetBitsCallback+0x90>
 80016ce:	bf00      	nop

080016d0 <xEventGroupCreate>:
	{
 80016d0:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80016d2:	2020      	movs	r0, #32
 80016d4:	f002 fd66 	bl	80041a4 <pvPortMalloc>
		if( pxEventBits != NULL )
 80016d8:	4604      	mov	r4, r0
 80016da:	b128      	cbz	r0, 80016e8 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 80016dc:	2500      	movs	r5, #0
 80016de:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80016e2:	f000 f895 	bl	8001810 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80016e6:	7725      	strb	r5, [r4, #28]
	}
 80016e8:	4620      	mov	r0, r4
 80016ea:	bd38      	pop	{r3, r4, r5, pc}

080016ec <xEventGroupWaitBits>:
{
 80016ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 80016f0:	b1b0      	cbz	r0, 8001720 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80016f2:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80016f6:	460c      	mov	r4, r1
 80016f8:	d109      	bne.n	800170e <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 80016fa:	b9d1      	cbnz	r1, 8001732 <xEventGroupWaitBits+0x46>
 80016fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001700:	f383 8811 	msr	BASEPRI, r3
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	e7fe      	b.n	800170c <xEventGroupWaitBits+0x20>
 800170e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800171e:	e7fe      	b.n	800171e <xEventGroupWaitBits+0x32>
 8001720:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8001730:	e7fe      	b.n	8001730 <xEventGroupWaitBits+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001732:	4617      	mov	r7, r2
 8001734:	461e      	mov	r6, r3
 8001736:	4605      	mov	r5, r0
 8001738:	f002 f862 	bl	8003800 <xTaskGetSchedulerState>
 800173c:	b910      	cbnz	r0, 8001744 <xEventGroupWaitBits+0x58>
 800173e:	9b08      	ldr	r3, [sp, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d13c      	bne.n	80017be <xEventGroupWaitBits+0xd2>
	vTaskSuspendAll();
 8001744:	f001 fe3a 	bl	80033bc <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8001748:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800174c:	b36e      	cbz	r6, 80017aa <xEventGroupWaitBits+0xbe>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800174e:	ea34 0309 	bics.w	r3, r4, r9
 8001752:	d02d      	beq.n	80017b0 <xEventGroupWaitBits+0xc4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8001754:	9b08      	ldr	r3, [sp, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d03a      	beq.n	80017d0 <xEventGroupWaitBits+0xe4>
			if( xClearOnExit != pdFALSE )
 800175a:	2f00      	cmp	r7, #0
 800175c:	bf16      	itet	ne
 800175e:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
 8001762:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 8001766:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
 800176a:	2e00      	cmp	r6, #0
 800176c:	bf08      	it	eq
 800176e:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8001770:	4321      	orrs	r1, r4
 8001772:	461a      	mov	r2, r3
 8001774:	1d28      	adds	r0, r5, #4
 8001776:	f001 fea5 	bl	80034c4 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 800177a:	f001 fe27 	bl	80033cc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800177e:	b948      	cbnz	r0, 8001794 <xEventGroupWaitBits+0xa8>
			portYIELD_WITHIN_API();
 8001780:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001788:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800178c:	f3bf 8f4f 	dsb	sy
 8001790:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8001794:	f002 f924 	bl	80039e0 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001798:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 800179c:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800179e:	d01a      	beq.n	80017d6 <xEventGroupWaitBits+0xea>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80017a0:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 80017a4:	4648      	mov	r0, r9
 80017a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80017aa:	ea14 0f09 	tst.w	r4, r9
 80017ae:	d0d1      	beq.n	8001754 <xEventGroupWaitBits+0x68>
			if( xClearOnExit != pdFALSE )
 80017b0:	b177      	cbz	r7, 80017d0 <xEventGroupWaitBits+0xe4>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80017b2:	ea29 0404 	bic.w	r4, r9, r4
 80017b6:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
 80017b8:	f001 fe08 	bl	80033cc <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80017bc:	e7f2      	b.n	80017a4 <xEventGroupWaitBits+0xb8>
 80017be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017ce:	e7fe      	b.n	80017ce <xEventGroupWaitBits+0xe2>
	xAlreadyYielded = xTaskResumeAll();
 80017d0:	f001 fdfc 	bl	80033cc <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80017d4:	e7e6      	b.n	80017a4 <xEventGroupWaitBits+0xb8>
			taskENTER_CRITICAL();
 80017d6:	f002 fb85 	bl	8003ee4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80017da:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
 80017de:	b94e      	cbnz	r6, 80017f4 <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80017e0:	ea14 0f09 	tst.w	r4, r9
 80017e4:	d003      	beq.n	80017ee <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80017e6:	b117      	cbz	r7, 80017ee <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80017e8:	ea29 0404 	bic.w	r4, r9, r4
 80017ec:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
 80017ee:	f002 fb9b 	bl	8003f28 <vPortExitCritical>
 80017f2:	e7d5      	b.n	80017a0 <xEventGroupWaitBits+0xb4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80017f4:	ea34 0309 	bics.w	r3, r4, r9
 80017f8:	d1f9      	bne.n	80017ee <xEventGroupWaitBits+0x102>
 80017fa:	e7f4      	b.n	80017e6 <xEventGroupWaitBits+0xfa>

080017fc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80017fc:	4684      	mov	ip, r0
 80017fe:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <xEventGroupSetBitsFromISR+0x10>)
 8001802:	460a      	mov	r2, r1
 8001804:	4661      	mov	r1, ip
 8001806:	f002 baf1 	b.w	8003dec <xTimerPendFunctionCallFromISR>
 800180a:	bf00      	nop
 800180c:	0800163d 	.word	0x0800163d

08001810 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001810:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001818:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800181a:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800181e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001822:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001830:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001836:	6802      	ldr	r2, [r0, #0]
{
 8001838:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800183a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800183c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800183e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001840:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001842:	6099      	str	r1, [r3, #8]
}
 8001844:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8001848:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800184a:	6002      	str	r2, [r0, #0]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001850:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001852:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001854:	1c6b      	adds	r3, r5, #1
 8001856:	d010      	beq.n	800187a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001858:	f100 0308 	add.w	r3, r0, #8
 800185c:	461c      	mov	r4, r3
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	42aa      	cmp	r2, r5
 8001864:	d9fa      	bls.n	800185c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001866:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8001868:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800186a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800186c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800186e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001870:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8001872:	6108      	str	r0, [r1, #16]
}
 8001874:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8001876:	6002      	str	r2, [r0, #0]
}
 8001878:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800187a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	e7f2      	b.n	8001866 <vListInsert+0x16>

08001880 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001880:	6903      	ldr	r3, [r0, #16]
{
 8001882:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001884:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001888:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800188a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800188c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800188e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001890:	bf08      	it	eq
 8001892:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001894:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001896:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800189a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800189c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800189e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80018a0:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80018a2:	6818      	ldr	r0, [r3, #0]
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018b0:	b920      	cbnz	r0, 80018bc <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018b2:	6825      	ldr	r5, [r4, #0]
 80018b4:	b34d      	cbz	r5, 800190a <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018b6:	3601      	adds	r6, #1
 80018b8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80018bc:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018be:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80018c0:	b97d      	cbnz	r5, 80018e2 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018c2:	6860      	ldr	r0, [r4, #4]
 80018c4:	f009 f9a6 	bl	800ac14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018c8:	6863      	ldr	r3, [r4, #4]
 80018ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018cc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018ce:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018d0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018d2:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018d4:	bf24      	itt	cs
 80018d6:	6823      	ldrcs	r3, [r4, #0]
 80018d8:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018da:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80018dc:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018de:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80018e2:	68e0      	ldr	r0, [r4, #12]
 80018e4:	f009 f996 	bl	800ac14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80018e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018ea:	68e3      	ldr	r3, [r4, #12]
 80018ec:	4251      	negs	r1, r2
 80018ee:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018f0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80018f2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d202      	bcs.n	80018fe <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80018f8:	68a3      	ldr	r3, [r4, #8]
 80018fa:	440b      	add	r3, r1
 80018fc:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80018fe:	2d02      	cmp	r5, #2
 8001900:	d008      	beq.n	8001914 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001902:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001904:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001906:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001908:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800190a:	68a0      	ldr	r0, [r4, #8]
 800190c:	f001 ffce 	bl	80038ac <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001910:	60a5      	str	r5, [r4, #8]
 8001912:	e7d0      	b.n	80018b6 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001914:	2e01      	cmp	r6, #1
 8001916:	bf38      	it	cc
 8001918:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 800191a:	2000      	movs	r0, #0
 800191c:	e7cc      	b.n	80018b8 <prvCopyDataToQueue+0x10>
 800191e:	bf00      	nop

08001920 <xQueueGenericCreateStatic>:
	{
 8001920:	b530      	push	{r4, r5, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001928:	b940      	cbnz	r0, 800193c <xQueueGenericCreateStatic+0x1c>
 800192a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	e7fe      	b.n	800193a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800193c:	461d      	mov	r5, r3
 800193e:	b17b      	cbz	r3, 8001960 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001940:	b302      	cbz	r2, 8001984 <xQueueGenericCreateStatic+0x64>
 8001942:	b1b1      	cbz	r1, 8001972 <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001944:	2350      	movs	r3, #80	; 0x50
 8001946:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001948:	9b01      	ldr	r3, [sp, #4]
 800194a:	2b50      	cmp	r3, #80	; 0x50
 800194c:	d027      	beq.n	800199e <xQueueGenericCreateStatic+0x7e>
 800194e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001952:	f383 8811 	msr	BASEPRI, r3
 8001956:	f3bf 8f6f 	isb	sy
 800195a:	f3bf 8f4f 	dsb	sy
 800195e:	e7fe      	b.n	800195e <xQueueGenericCreateStatic+0x3e>
 8001960:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001964:	f383 8811 	msr	BASEPRI, r3
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001970:	e7fe      	b.n	8001970 <xQueueGenericCreateStatic+0x50>
 8001972:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001976:	f383 8811 	msr	BASEPRI, r3
 800197a:	f3bf 8f6f 	isb	sy
 800197e:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001982:	e7fe      	b.n	8001982 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001984:	2900      	cmp	r1, #0
 8001986:	d135      	bne.n	80019f4 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001988:	2250      	movs	r2, #80	; 0x50
 800198a:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800198c:	9a01      	ldr	r2, [sp, #4]
 800198e:	2a50      	cmp	r2, #80	; 0x50
 8001990:	d1dd      	bne.n	800194e <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001992:	2201      	movs	r2, #1
 8001994:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001998:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800199a:	462a      	mov	r2, r5
 800199c:	e004      	b.n	80019a8 <xQueueGenericCreateStatic+0x88>
 800199e:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80019a2:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80019a4:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80019a8:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 80019ac:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 80019ae:	f002 fa99 	bl	8003ee4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019b2:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 80019b6:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019b8:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019ba:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019be:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019c0:	4401      	add	r1, r0
 80019c2:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019c4:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019c6:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019c8:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80019ca:	21ff      	movs	r1, #255	; 0xff
 80019cc:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019d0:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80019d2:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019d6:	f105 0010 	add.w	r0, r5, #16
 80019da:	f7ff ff19 	bl	8001810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019de:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80019e2:	f7ff ff15 	bl	8001810 <vListInitialise>
	taskEXIT_CRITICAL();
 80019e6:	f002 fa9f 	bl	8003f28 <vPortExitCritical>
	}
 80019ea:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 80019ec:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 80019f0:	b003      	add	sp, #12
 80019f2:	bd30      	pop	{r4, r5, pc}
 80019f4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a04:	e7fe      	b.n	8001a04 <xQueueGenericCreateStatic+0xe4>
 8001a06:	bf00      	nop

08001a08 <xQueueGenericCreate>:
	{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a0a:	b940      	cbnz	r0, 8001a1e <xQueueGenericCreate+0x16>
 8001a0c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a10:	f383 8811 	msr	BASEPRI, r3
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	e7fe      	b.n	8001a1c <xQueueGenericCreate+0x14>
 8001a1e:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a20:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a24:	3050      	adds	r0, #80	; 0x50
 8001a26:	460e      	mov	r6, r1
 8001a28:	4617      	mov	r7, r2
 8001a2a:	f002 fbbb 	bl	80041a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001a2e:	4604      	mov	r4, r0
 8001a30:	b340      	cbz	r0, 8001a84 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a38:	b336      	cbz	r6, 8001a88 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a3a:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a3e:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001a40:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001a44:	f002 fa4e 	bl	8003ee4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a48:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001a4c:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a4e:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a50:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a54:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a56:	440a      	add	r2, r1
 8001a58:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a5a:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a5c:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a5e:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a60:	22ff      	movs	r2, #255	; 0xff
 8001a62:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a66:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001a68:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a6c:	f104 0010 	add.w	r0, r4, #16
 8001a70:	f7ff fece 	bl	8001810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a78:	f7ff feca 	bl	8001810 <vListInitialise>
	taskEXIT_CRITICAL();
 8001a7c:	f002 fa54 	bl	8003f28 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001a80:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8001a84:	4620      	mov	r0, r4
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a88:	4603      	mov	r3, r0
 8001a8a:	e7d8      	b.n	8001a3e <xQueueGenericCreate+0x36>

08001a8c <xQueueGenericSend>:
{
 8001a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a90:	b085      	sub	sp, #20
 8001a92:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001a94:	2800      	cmp	r0, #0
 8001a96:	f000 80a4 	beq.w	8001be2 <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a9a:	4688      	mov	r8, r1
 8001a9c:	461f      	mov	r7, r3
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	f000 8091 	beq.w	8001bc8 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001aa6:	2f02      	cmp	r7, #2
 8001aa8:	d10b      	bne.n	8001ac2 <xQueueGenericSend+0x36>
 8001aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d008      	beq.n	8001ac2 <xQueueGenericSend+0x36>
 8001ab0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	e7fe      	b.n	8001ac0 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ac2:	f001 fe9d 	bl	8003800 <xTaskGetSchedulerState>
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	f000 8093 	beq.w	8001bf4 <xQueueGenericSend+0x168>
 8001ace:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ad0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8001ad4:	f002 fa06 	bl	8003ee4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f0c0 80ef 	bcc.w	8001cc0 <xQueueGenericSend+0x234>
 8001ae2:	2f02      	cmp	r7, #2
 8001ae4:	f000 80ec 	beq.w	8001cc0 <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ae8:	9801      	ldr	r0, [sp, #4]
 8001aea:	2800      	cmp	r0, #0
 8001aec:	f000 8101 	beq.w	8001cf2 <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	f000 80e1 	beq.w	8001cb8 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8001af6:	f002 fa17 	bl	8003f28 <vPortExitCritical>
		vTaskSuspendAll();
 8001afa:	f001 fc5f 	bl	80033bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001afe:	f002 f9f1 	bl	8003ee4 <vPortEnterCritical>
 8001b02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	bf04      	itt	eq
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001b10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b14:	2bff      	cmp	r3, #255	; 0xff
 8001b16:	bf04      	itt	eq
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001b1e:	f002 fa03 	bl	8003f28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b22:	a901      	add	r1, sp, #4
 8001b24:	a802      	add	r0, sp, #8
 8001b26:	f001 fe11 	bl	800374c <xTaskCheckForTimeOut>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f040 80e6 	bne.w	8001cfc <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b30:	f002 f9d8 	bl	8003ee4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d068      	beq.n	8001c0e <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001b3c:	f002 f9f4 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001b40:	f002 f9d0 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001b44:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001b48:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b4a:	2d00      	cmp	r5, #0
 8001b4c:	dc04      	bgt.n	8001b58 <xQueueGenericSend+0xcc>
 8001b4e:	e011      	b.n	8001b74 <xQueueGenericSend+0xe8>
			--cTxLock;
 8001b50:	1e6a      	subs	r2, r5, #1
 8001b52:	b2d3      	uxtb	r3, r2
 8001b54:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b56:	b16b      	cbz	r3, 8001b74 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b5c:	b153      	cbz	r3, 8001b74 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5e:	f001 fd5d 	bl	800361c <xTaskRemoveFromEventList>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d0f4      	beq.n	8001b50 <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8001b66:	f001 fe45 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 8001b6a:	1e6a      	subs	r2, r5, #1
 8001b6c:	b2d3      	uxtb	r3, r2
 8001b6e:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f1      	bne.n	8001b58 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 8001b74:	23ff      	movs	r3, #255	; 0xff
 8001b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001b7a:	f002 f9d5 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001b7e:	f002 f9b1 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001b82:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001b86:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	dd14      	ble.n	8001bb6 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b8c:	f104 0910 	add.w	r9, r4, #16
 8001b90:	e003      	b.n	8001b9a <xQueueGenericSend+0x10e>
				--cRxLock;
 8001b92:	1e6a      	subs	r2, r5, #1
 8001b94:	b2d3      	uxtb	r3, r2
 8001b96:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b98:	b16b      	cbz	r3, 8001bb6 <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b9a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b9c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b9e:	b153      	cbz	r3, 8001bb6 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ba0:	f001 fd3c 	bl	800361c <xTaskRemoveFromEventList>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d0f4      	beq.n	8001b92 <xQueueGenericSend+0x106>
					vTaskMissedYield();
 8001ba8:	f001 fe24 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 8001bac:	1e6a      	subs	r2, r5, #1
 8001bae:	b2d3      	uxtb	r3, r2
 8001bb0:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f1      	bne.n	8001b9a <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 8001bb6:	23ff      	movs	r3, #255	; 0xff
 8001bb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001bbc:	f002 f9b4 	bl	8003f28 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001bc0:	f001 fc04 	bl	80033cc <xTaskResumeAll>
 8001bc4:	2501      	movs	r5, #1
 8001bc6:	e785      	b.n	8001ad4 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f43f af6b 	beq.w	8001aa6 <xQueueGenericSend+0x1a>
 8001bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001bd4:	f383 8811 	msr	BASEPRI, r3
 8001bd8:	f3bf 8f6f 	isb	sy
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	e7fe      	b.n	8001be0 <xQueueGenericSend+0x154>
 8001be2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001bf2:	e7fe      	b.n	8001bf2 <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bf4:	9b01      	ldr	r3, [sp, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f43f af6a 	beq.w	8001ad0 <xQueueGenericSend+0x44>
 8001bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	e7fe      	b.n	8001c0c <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c0e:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8001c12:	f002 f989 	bl	8003f28 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c16:	9901      	ldr	r1, [sp, #4]
 8001c18:	4648      	mov	r0, r9
 8001c1a:	f001 fc0b 	bl	8003434 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001c1e:	f002 f961 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001c22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c26:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c28:	2d00      	cmp	r5, #0
 8001c2a:	dc04      	bgt.n	8001c36 <xQueueGenericSend+0x1aa>
 8001c2c:	e011      	b.n	8001c52 <xQueueGenericSend+0x1c6>
			--cTxLock;
 8001c2e:	1e6b      	subs	r3, r5, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c34:	b16a      	cbz	r2, 8001c52 <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c38:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c3a:	b153      	cbz	r3, 8001c52 <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c3c:	f001 fcee 	bl	800361c <xTaskRemoveFromEventList>
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d0f4      	beq.n	8001c2e <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8001c44:	f001 fdd6 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 8001c48:	1e6b      	subs	r3, r5, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d1f1      	bne.n	8001c36 <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8001c52:	23ff      	movs	r3, #255	; 0xff
 8001c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001c58:	f002 f966 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001c5c:	f002 f942 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001c60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c64:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	dc04      	bgt.n	8001c74 <xQueueGenericSend+0x1e8>
 8001c6a:	e011      	b.n	8001c90 <xQueueGenericSend+0x204>
				--cRxLock;
 8001c6c:	1e6b      	subs	r3, r5, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c72:	b16a      	cbz	r2, 8001c90 <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c74:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c76:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c78:	b153      	cbz	r3, 8001c90 <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c7a:	f001 fccf 	bl	800361c <xTaskRemoveFromEventList>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d0f4      	beq.n	8001c6c <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8001c82:	f001 fdb7 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 8001c86:	1e6b      	subs	r3, r5, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d1f1      	bne.n	8001c74 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001c96:	f002 f947 	bl	8003f28 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8001c9a:	f001 fb97 	bl	80033cc <xTaskResumeAll>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d190      	bne.n	8001bc4 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8001ca2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001caa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	e785      	b.n	8001bc4 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cb8:	a802      	add	r0, sp, #8
 8001cba:	f001 fd3b 	bl	8003734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cbe:	e71a      	b.n	8001af6 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cc0:	463a      	mov	r2, r7
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fdef 	bl	80018a8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d153      	bne.n	8001d78 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8001cd0:	b148      	cbz	r0, 8001ce6 <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8001cd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001ce6:	f002 f91f 	bl	8003f28 <vPortExitCritical>
				return pdPASS;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	b005      	add	sp, #20
 8001cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cf2:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8001cf4:	f002 f918 	bl	8003f28 <vPortExitCritical>
					return errQUEUE_FULL;
 8001cf8:	9800      	ldr	r0, [sp, #0]
 8001cfa:	e7f7      	b.n	8001cec <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8001cfc:	f002 f8f2 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001d00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d04:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	dd10      	ble.n	8001d2c <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001d0e:	e003      	b.n	8001d18 <xQueueGenericSend+0x28c>
			--cTxLock;
 8001d10:	1e6b      	subs	r3, r5, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d16:	b14a      	cbz	r2, 8001d2c <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d1a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d1c:	b133      	cbz	r3, 8001d2c <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d1e:	f001 fc7d 	bl	800361c <xTaskRemoveFromEventList>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d0f4      	beq.n	8001d10 <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8001d26:	f001 fd65 	bl	80037f4 <vTaskMissedYield>
 8001d2a:	e7f1      	b.n	8001d10 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8001d2c:	23ff      	movs	r3, #255	; 0xff
 8001d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001d32:	f002 f8f9 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001d36:	f002 f8d5 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001d3e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	dd10      	ble.n	8001d66 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d44:	f104 0610 	add.w	r6, r4, #16
 8001d48:	e003      	b.n	8001d52 <xQueueGenericSend+0x2c6>
				--cRxLock;
 8001d4a:	1e6b      	subs	r3, r5, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d50:	b14a      	cbz	r2, 8001d66 <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d52:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d54:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d56:	b133      	cbz	r3, 8001d66 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d58:	f001 fc60 	bl	800361c <xTaskRemoveFromEventList>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d0f4      	beq.n	8001d4a <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8001d60:	f001 fd48 	bl	80037f4 <vTaskMissedYield>
 8001d64:	e7f1      	b.n	8001d4a <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8001d66:	23ff      	movs	r3, #255	; 0xff
 8001d68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001d6c:	f002 f8dc 	bl	8003f28 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001d70:	f001 fb2c 	bl	80033cc <xTaskResumeAll>
			return errQUEUE_FULL;
 8001d74:	2000      	movs	r0, #0
 8001d76:	e7b9      	b.n	8001cec <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d7c:	f001 fc4e 	bl	800361c <xTaskRemoveFromEventList>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d0b0      	beq.n	8001ce6 <xQueueGenericSend+0x25a>
 8001d84:	e7a5      	b.n	8001cd2 <xQueueGenericSend+0x246>
 8001d86:	bf00      	nop

08001d88 <xQueueCreateMutex>:
	{
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d8c:	2050      	movs	r0, #80	; 0x50
 8001d8e:	f002 fa09 	bl	80041a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001d92:	4604      	mov	r4, r0
 8001d94:	b370      	cbz	r0, 8001df4 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d96:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8001d98:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d9a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d9e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001da0:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001da4:	f002 f89e 	bl	8003ee4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da8:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001dac:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dae:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db0:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dba:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dbc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dbe:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dc0:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dc2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8001dc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dce:	f7ff fd1f 	bl	8001810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001dd6:	f7ff fd1b 	bl	8001810 <vListInitialise>
	taskEXIT_CRITICAL();
 8001dda:	f002 f8a5 	bl	8003f28 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001dde:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001de2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001de4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001de6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001de8:	462b      	mov	r3, r5
 8001dea:	462a      	mov	r2, r5
 8001dec:	4629      	mov	r1, r5
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff fe4c 	bl	8001a8c <xQueueGenericSend>
	}
 8001df4:	4620      	mov	r0, r4
 8001df6:	bd70      	pop	{r4, r5, r6, pc}

08001df8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d04b      	beq.n	8001e94 <xQueueGenericSendFromISR+0x9c>
{
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	460e      	mov	r6, r1
 8001e02:	4617      	mov	r7, r2
 8001e04:	461d      	mov	r5, r3
 8001e06:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e08:	b321      	cbz	r1, 8001e54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e0a:	2d02      	cmp	r5, #2
 8001e0c:	d10b      	bne.n	8001e26 <xQueueGenericSendFromISR+0x2e>
 8001e0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d008      	beq.n	8001e26 <xQueueGenericSendFromISR+0x2e>
 8001e14:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	e7fe      	b.n	8001e24 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e26:	f002 f98f 	bl	8004148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e2a:	f3ef 8811 	mrs	r8, BASEPRI
 8001e2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d312      	bcc.n	8001e6c <xQueueGenericSendFromISR+0x74>
 8001e46:	2d02      	cmp	r5, #2
 8001e48:	d010      	beq.n	8001e6c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8001e4a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e4c:	f388 8811 	msr	BASEPRI, r8
}
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0d7      	beq.n	8001e0a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8001e5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e6c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e74:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e76:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fd15 	bl	80018a8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001e7e:	1c6b      	adds	r3, r5, #1
 8001e80:	d011      	beq.n	8001ea6 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e82:	1c6b      	adds	r3, r5, #1
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8001e8a:	2001      	movs	r0, #1
	__asm volatile
 8001e8c:	f388 8811 	msr	BASEPRI, r8
}
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8001e94:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001eb0:	f001 fbb4 	bl	800361c <xTaskRemoveFromEventList>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d0e8      	beq.n	8001e8a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8001eb8:	2f00      	cmp	r7, #0
 8001eba:	d0e6      	beq.n	8001e8a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	6038      	str	r0, [r7, #0]
 8001ec0:	e7c4      	b.n	8001e4c <xQueueGenericSendFromISR+0x54>
 8001ec2:	bf00      	nop

08001ec4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8001ec4:	b370      	cbz	r0, 8001f24 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001ec6:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001ecc:	b143      	cbz	r3, 8001ee0 <xQueueGiveFromISR+0x1c>
 8001ece:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	e7fe      	b.n	8001ede <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	b33b      	cbz	r3, 8001f36 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ee6:	f002 f92f 	bl	8004148 <vPortValidateInterruptPriority>
	__asm volatile
 8001eea:	f3ef 8511 	mrs	r5, BASEPRI
 8001eee:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001efe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001f00:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d923      	bls.n	8001f4e <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f06:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f0a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8001f0c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f0e:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f10:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8001f12:	d020      	beq.n	8001f56 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f14:	3301      	adds	r3, #1
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8001f1c:	2001      	movs	r0, #1
	__asm volatile
 8001f1e:	f385 8811 	msr	BASEPRI, r5
}
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8001f24:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001f34:	e7fe      	b.n	8001f34 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001f36:	6883      	ldr	r3, [r0, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0d4      	beq.n	8001ee6 <xQueueGiveFromISR+0x22>
 8001f3c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8001f4e:	2000      	movs	r0, #0
	__asm volatile
 8001f50:	f385 8811 	msr	BASEPRI, r5
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0df      	beq.n	8001f1c <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f5c:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001f60:	f001 fb5c 	bl	800361c <xTaskRemoveFromEventList>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d0d9      	beq.n	8001f1c <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d0d7      	beq.n	8001f1c <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	6020      	str	r0, [r4, #0]
 8001f70:	e7ee      	b.n	8001f50 <xQueueGiveFromISR+0x8c>
 8001f72:	bf00      	nop

08001f74 <xQueueReceive>:
{
 8001f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	f000 815f 	beq.w	8002240 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f82:	460f      	mov	r7, r1
 8001f84:	4604      	mov	r4, r0
 8001f86:	2900      	cmp	r1, #0
 8001f88:	f000 8094 	beq.w	80020b4 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f8c:	f001 fc38 	bl	8003800 <xTaskGetSchedulerState>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	f000 809c 	beq.w	80020ce <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001f96:	f001 ffa5 	bl	8003ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	d172      	bne.n	8002086 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fa0:	9b01      	ldr	r3, [sp, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80f1 	beq.w	800218a <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fa8:	a802      	add	r0, sp, #8
 8001faa:	f001 fbc3 	bl	8003734 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8001fae:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fb0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8001fb4:	f001 ffb8 	bl	8003f28 <vPortExitCritical>
		vTaskSuspendAll();
 8001fb8:	f001 fa00 	bl	80033bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fbc:	f001 ff92 	bl	8003ee4 <vPortEnterCritical>
 8001fc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001fc4:	2bff      	cmp	r3, #255	; 0xff
 8001fc6:	bf08      	it	eq
 8001fc8:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001fcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001fd0:	2bff      	cmp	r3, #255	; 0xff
 8001fd2:	bf08      	it	eq
 8001fd4:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001fd8:	f001 ffa6 	bl	8003f28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fdc:	a901      	add	r1, sp, #4
 8001fde:	a802      	add	r0, sp, #8
 8001fe0:	f001 fbb4 	bl	800374c <xTaskCheckForTimeOut>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d17f      	bne.n	80020e8 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8001fe8:	f001 ff7c 	bl	8003ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001fec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80d1 	beq.w	8002196 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8001ff4:	f001 ff98 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001ff8:	f001 ff74 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001ffc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002000:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002002:	2d00      	cmp	r5, #0
 8002004:	dc04      	bgt.n	8002010 <xQueueReceive+0x9c>
 8002006:	e011      	b.n	800202c <xQueueReceive+0xb8>
			--cTxLock;
 8002008:	1e6b      	subs	r3, r5, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800200e:	b16a      	cbz	r2, 800202c <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002010:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002012:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002014:	b153      	cbz	r3, 800202c <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002016:	f001 fb01 	bl	800361c <xTaskRemoveFromEventList>
 800201a:	2800      	cmp	r0, #0
 800201c:	d0f4      	beq.n	8002008 <xQueueReceive+0x94>
						vTaskMissedYield();
 800201e:	f001 fbe9 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 8002022:	1e6b      	subs	r3, r5, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002028:	2a00      	cmp	r2, #0
 800202a:	d1f1      	bne.n	8002010 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 800202c:	23ff      	movs	r3, #255	; 0xff
 800202e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002032:	f001 ff79 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002036:	f001 ff55 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800203a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800203e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002040:	2d00      	cmp	r5, #0
 8002042:	dd14      	ble.n	800206e <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002044:	f104 0910 	add.w	r9, r4, #16
 8002048:	e003      	b.n	8002052 <xQueueReceive+0xde>
				--cRxLock;
 800204a:	1e6b      	subs	r3, r5, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002050:	b16a      	cbz	r2, 800206e <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002052:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002054:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002056:	b153      	cbz	r3, 800206e <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002058:	f001 fae0 	bl	800361c <xTaskRemoveFromEventList>
 800205c:	2800      	cmp	r0, #0
 800205e:	d0f4      	beq.n	800204a <xQueueReceive+0xd6>
					vTaskMissedYield();
 8002060:	f001 fbc8 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 8002064:	1e6b      	subs	r3, r5, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800206a:	2a00      	cmp	r2, #0
 800206c:	d1f1      	bne.n	8002052 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 800206e:	23ff      	movs	r3, #255	; 0xff
 8002070:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002074:	f001 ff58 	bl	8003f28 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002078:	f001 f9a8 	bl	80033cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 800207c:	f001 ff32 	bl	8003ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002080:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002082:	2d00      	cmp	r5, #0
 8002084:	d07d      	beq.n	8002182 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002086:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002088:	b152      	cbz	r2, 80020a0 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800208a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800208c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800208e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002090:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002092:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002094:	bf24      	itt	cs
 8002096:	6821      	ldrcs	r1, [r4, #0]
 8002098:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800209a:	4638      	mov	r0, r7
 800209c:	f008 fdba 	bl	800ac14 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020a0:	3d01      	subs	r5, #1
 80020a2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020a4:	6923      	ldr	r3, [r4, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80d3 	bne.w	8002252 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 80020ac:	f001 ff3c 	bl	8003f28 <vPortExitCritical>
				return pdPASS;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e06d      	b.n	8002190 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f43f af68 	beq.w	8001f8c <xQueueReceive+0x18>
	__asm volatile
 80020bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	e7fe      	b.n	80020cc <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f43f af60 	beq.w	8001f96 <xQueueReceive+0x22>
 80020d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	e7fe      	b.n	80020e6 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 80020e8:	f001 fefc 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80020ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80020f0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020f2:	2d00      	cmp	r5, #0
 80020f4:	dc04      	bgt.n	8002100 <xQueueReceive+0x18c>
 80020f6:	e011      	b.n	800211c <xQueueReceive+0x1a8>
			--cTxLock;
 80020f8:	1e6b      	subs	r3, r5, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020fe:	b16a      	cbz	r2, 800211c <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002100:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002102:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002104:	b153      	cbz	r3, 800211c <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002106:	f001 fa89 	bl	800361c <xTaskRemoveFromEventList>
 800210a:	2800      	cmp	r0, #0
 800210c:	d0f4      	beq.n	80020f8 <xQueueReceive+0x184>
						vTaskMissedYield();
 800210e:	f001 fb71 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 8002112:	1e6b      	subs	r3, r5, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002118:	2a00      	cmp	r2, #0
 800211a:	d1f1      	bne.n	8002100 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 800211c:	23ff      	movs	r3, #255	; 0xff
 800211e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002122:	f001 ff01 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002126:	f001 fedd 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800212a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800212e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002130:	2d00      	cmp	r5, #0
 8002132:	dd14      	ble.n	800215e <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002134:	f104 0910 	add.w	r9, r4, #16
 8002138:	e003      	b.n	8002142 <xQueueReceive+0x1ce>
				--cRxLock;
 800213a:	1e6b      	subs	r3, r5, #1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002140:	b16a      	cbz	r2, 800215e <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002142:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002144:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002146:	b153      	cbz	r3, 800215e <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002148:	f001 fa68 	bl	800361c <xTaskRemoveFromEventList>
 800214c:	2800      	cmp	r0, #0
 800214e:	d0f4      	beq.n	800213a <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8002150:	f001 fb50 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 8002154:	1e6b      	subs	r3, r5, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800215a:	2a00      	cmp	r2, #0
 800215c:	d1f1      	bne.n	8002142 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002164:	f001 fee0 	bl	8003f28 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002168:	f001 f930 	bl	80033cc <xTaskResumeAll>
	taskENTER_CRITICAL();
 800216c:	f001 feba 	bl	8003ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002172:	b153      	cbz	r3, 800218a <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8002174:	f001 fed8 	bl	8003f28 <vPortExitCritical>
		taskENTER_CRITICAL();
 8002178:	f001 feb4 	bl	8003ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800217c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800217e:	2d00      	cmp	r5, #0
 8002180:	d181      	bne.n	8002086 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002182:	9b01      	ldr	r3, [sp, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af15 	bne.w	8001fb4 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 800218a:	f001 fecd 	bl	8003f28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800218e:	2000      	movs	r0, #0
}
 8002190:	b005      	add	sp, #20
 8002192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002196:	f001 fec7 	bl	8003f28 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800219a:	9901      	ldr	r1, [sp, #4]
 800219c:	4630      	mov	r0, r6
 800219e:	f001 f949 	bl	8003434 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80021a2:	f001 fe9f 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80021a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80021aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	dc04      	bgt.n	80021ba <xQueueReceive+0x246>
 80021b0:	e011      	b.n	80021d6 <xQueueReceive+0x262>
			--cTxLock;
 80021b2:	1e6b      	subs	r3, r5, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021b8:	b16a      	cbz	r2, 80021d6 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021bc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021be:	b153      	cbz	r3, 80021d6 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021c0:	f001 fa2c 	bl	800361c <xTaskRemoveFromEventList>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d0f4      	beq.n	80021b2 <xQueueReceive+0x23e>
						vTaskMissedYield();
 80021c8:	f001 fb14 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 80021cc:	1e6b      	subs	r3, r5, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d1f1      	bne.n	80021ba <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 80021d6:	23ff      	movs	r3, #255	; 0xff
 80021d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80021dc:	f001 fea4 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 80021e0:	f001 fe80 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80021e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80021e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	dd14      	ble.n	8002218 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ee:	f104 0910 	add.w	r9, r4, #16
 80021f2:	e003      	b.n	80021fc <xQueueReceive+0x288>
				--cRxLock;
 80021f4:	1e6b      	subs	r3, r5, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021fa:	b16a      	cbz	r2, 8002218 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021fe:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002200:	b153      	cbz	r3, 8002218 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002202:	f001 fa0b 	bl	800361c <xTaskRemoveFromEventList>
 8002206:	2800      	cmp	r0, #0
 8002208:	d0f4      	beq.n	80021f4 <xQueueReceive+0x280>
					vTaskMissedYield();
 800220a:	f001 faf3 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 800220e:	1e6b      	subs	r3, r5, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002214:	2a00      	cmp	r2, #0
 8002216:	d1f1      	bne.n	80021fc <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002218:	23ff      	movs	r3, #255	; 0xff
 800221a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800221e:	f001 fe83 	bl	8003f28 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002222:	f001 f8d3 	bl	80033cc <xTaskResumeAll>
 8002226:	2800      	cmp	r0, #0
 8002228:	d1a6      	bne.n	8002178 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 800222a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800223e:	e79b      	b.n	8002178 <xQueueReceive+0x204>
 8002240:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002250:	e7fe      	b.n	8002250 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002252:	f104 0010 	add.w	r0, r4, #16
 8002256:	f001 f9e1 	bl	800361c <xTaskRemoveFromEventList>
 800225a:	2800      	cmp	r0, #0
 800225c:	f43f af26 	beq.w	80020ac <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8002260:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002268:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	e71a      	b.n	80020ac <xQueueReceive+0x138>
 8002276:	bf00      	nop

08002278 <xQueueSemaphoreTake>:
{
 8002278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002280:	2800      	cmp	r0, #0
 8002282:	d05c      	beq.n	800233e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002284:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8002286:	4604      	mov	r4, r0
 8002288:	b147      	cbz	r7, 800229c <xQueueSemaphoreTake+0x24>
 800228a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	e7fe      	b.n	800229a <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800229c:	f001 fab0 	bl	8003800 <xTaskGetSchedulerState>
 80022a0:	4605      	mov	r5, r0
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d054      	beq.n	8002350 <xQueueSemaphoreTake+0xd8>
 80022a6:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022a8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80022ac:	f001 fe1a 	bl	8003ee4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80022b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8148 	bne.w	8002548 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 813a 	beq.w	8002534 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	f000 809d 	beq.w	8002400 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 80022c6:	f001 fe2f 	bl	8003f28 <vPortExitCritical>
		vTaskSuspendAll();
 80022ca:	f001 f877 	bl	80033bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ce:	f001 fe09 	bl	8003ee4 <vPortEnterCritical>
 80022d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	bf04      	itt	eq
 80022da:	2300      	moveq	r3, #0
 80022dc:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80022e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80022e4:	2bff      	cmp	r3, #255	; 0xff
 80022e6:	bf04      	itt	eq
 80022e8:	2300      	moveq	r3, #0
 80022ea:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80022ee:	f001 fe1b 	bl	8003f28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022f2:	a901      	add	r1, sp, #4
 80022f4:	a802      	add	r0, sp, #8
 80022f6:	f001 fa29 	bl	800374c <xTaskCheckForTimeOut>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d135      	bne.n	800236a <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 80022fe:	f001 fdf1 	bl	8003ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a4 	beq.w	8002452 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 800230a:	f001 fe0d 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 800230e:	f001 fde9 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002312:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002316:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002318:	2d00      	cmp	r5, #0
 800231a:	dc05      	bgt.n	8002328 <xQueueSemaphoreTake+0xb0>
 800231c:	e074      	b.n	8002408 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800231e:	1e6b      	subs	r3, r5, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002324:	2a00      	cmp	r2, #0
 8002326:	d06f      	beq.n	8002408 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002328:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800232a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800232c:	2b00      	cmp	r3, #0
 800232e:	d06b      	beq.n	8002408 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002330:	f001 f974 	bl	800361c <xTaskRemoveFromEventList>
 8002334:	2800      	cmp	r0, #0
 8002336:	d0f2      	beq.n	800231e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8002338:	f001 fa5c 	bl	80037f4 <vTaskMissedYield>
 800233c:	e7ef      	b.n	800231e <xQueueSemaphoreTake+0xa6>
 800233e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800234e:	e7fe      	b.n	800234e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002350:	9b01      	ldr	r3, [sp, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80d4 	beq.w	8002500 <xQueueSemaphoreTake+0x288>
 8002358:	f04f 0340 	mov.w	r3, #64	; 0x40
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	e7fe      	b.n	8002368 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 800236a:	f001 fdbb 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800236e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002372:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002374:	2d00      	cmp	r5, #0
 8002376:	dc04      	bgt.n	8002382 <xQueueSemaphoreTake+0x10a>
 8002378:	e011      	b.n	800239e <xQueueSemaphoreTake+0x126>
			--cTxLock;
 800237a:	1e6b      	subs	r3, r5, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002380:	b16a      	cbz	r2, 800239e <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002382:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002384:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002386:	b153      	cbz	r3, 800239e <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002388:	f001 f948 	bl	800361c <xTaskRemoveFromEventList>
 800238c:	2800      	cmp	r0, #0
 800238e:	d0f4      	beq.n	800237a <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 8002390:	f001 fa30 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 8002394:	1e6b      	subs	r3, r5, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800239a:	2a00      	cmp	r2, #0
 800239c:	d1f1      	bne.n	8002382 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 800239e:	23ff      	movs	r3, #255	; 0xff
 80023a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80023a4:	f001 fdc0 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 80023a8:	f001 fd9c 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80023ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80023b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	dd14      	ble.n	80023e0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b6:	f104 0810 	add.w	r8, r4, #16
 80023ba:	e003      	b.n	80023c4 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 80023bc:	1e6b      	subs	r3, r5, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023c2:	b16a      	cbz	r2, 80023e0 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c6:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c8:	b153      	cbz	r3, 80023e0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ca:	f001 f927 	bl	800361c <xTaskRemoveFromEventList>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d0f4      	beq.n	80023bc <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 80023d2:	f001 fa0f 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 80023d6:	1e6b      	subs	r3, r5, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d1f1      	bne.n	80023c4 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 80023e0:	23ff      	movs	r3, #255	; 0xff
 80023e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80023e6:	f001 fd9f 	bl	8003f28 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80023ea:	f000 ffef 	bl	80033cc <xTaskResumeAll>
	taskENTER_CRITICAL();
 80023ee:	f001 fd79 	bl	8003ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d07c      	beq.n	80024f2 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 80023f8:	f001 fd96 	bl	8003f28 <vPortExitCritical>
	return xReturn;
 80023fc:	2501      	movs	r5, #1
 80023fe:	e755      	b.n	80022ac <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002400:	a802      	add	r0, sp, #8
 8002402:	f001 f997 	bl	8003734 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002406:	e75e      	b.n	80022c6 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002408:	23ff      	movs	r3, #255	; 0xff
 800240a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800240e:	f001 fd8b 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002412:	f001 fd67 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002416:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800241a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800241c:	2d00      	cmp	r5, #0
 800241e:	dd10      	ble.n	8002442 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002420:	f104 0810 	add.w	r8, r4, #16
 8002424:	e003      	b.n	800242e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002426:	1e6b      	subs	r3, r5, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800242c:	b14a      	cbz	r2, 8002442 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800242e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002430:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002432:	b133      	cbz	r3, 8002442 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002434:	f001 f8f2 	bl	800361c <xTaskRemoveFromEventList>
 8002438:	2800      	cmp	r0, #0
 800243a:	d0f4      	beq.n	8002426 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 800243c:	f001 f9da 	bl	80037f4 <vTaskMissedYield>
 8002440:	e7f1      	b.n	8002426 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 8002442:	23ff      	movs	r3, #255	; 0xff
 8002444:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002448:	f001 fd6e 	bl	8003f28 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800244c:	f000 ffbe 	bl	80033cc <xTaskResumeAll>
 8002450:	e7d4      	b.n	80023fc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 8002452:	f001 fd69 	bl	8003f28 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d062      	beq.n	8002522 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800245c:	9901      	ldr	r1, [sp, #4]
 800245e:	4630      	mov	r0, r6
 8002460:	f000 ffe8 	bl	8003434 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002464:	f001 fd3e 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002468:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800246c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800246e:	2d00      	cmp	r5, #0
 8002470:	dc04      	bgt.n	800247c <xQueueSemaphoreTake+0x204>
 8002472:	e00d      	b.n	8002490 <xQueueSemaphoreTake+0x218>
			--cTxLock;
 8002474:	1e6b      	subs	r3, r5, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800247a:	b14a      	cbz	r2, 8002490 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800247c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002480:	b133      	cbz	r3, 8002490 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002482:	f001 f8cb 	bl	800361c <xTaskRemoveFromEventList>
 8002486:	2800      	cmp	r0, #0
 8002488:	d0f4      	beq.n	8002474 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 800248a:	f001 f9b3 	bl	80037f4 <vTaskMissedYield>
 800248e:	e7f1      	b.n	8002474 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 8002490:	23ff      	movs	r3, #255	; 0xff
 8002492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002496:	f001 fd47 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 800249a:	f001 fd23 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800249e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80024a2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	dd10      	ble.n	80024ca <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a8:	f104 0810 	add.w	r8, r4, #16
 80024ac:	e003      	b.n	80024b6 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 80024ae:	1e6b      	subs	r3, r5, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024b4:	b14a      	cbz	r2, 80024ca <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ba:	b133      	cbz	r3, 80024ca <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024bc:	f001 f8ae 	bl	800361c <xTaskRemoveFromEventList>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d0f4      	beq.n	80024ae <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 80024c4:	f001 f996 	bl	80037f4 <vTaskMissedYield>
 80024c8:	e7f1      	b.n	80024ae <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80024d0:	f001 fd2a 	bl	8003f28 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80024d4:	f000 ff7a 	bl	80033cc <xTaskResumeAll>
 80024d8:	2800      	cmp	r0, #0
 80024da:	d18f      	bne.n	80023fc <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 80024dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80024e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	e784      	b.n	80023fc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 80024f2:	f001 fd19 	bl	8003f28 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80024f6:	b92f      	cbnz	r7, 8002504 <xQueueSemaphoreTake+0x28c>
}
 80024f8:	4638      	mov	r0, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002500:	4607      	mov	r7, r0
 8002502:	e6d1      	b.n	80022a8 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002504:	f001 fcee 	bl	8003ee4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800250a:	b119      	cbz	r1, 8002514 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800250c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002514:	68a0      	ldr	r0, [r4, #8]
 8002516:	f001 fa0f 	bl	8003938 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800251a:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 800251c:	f001 fd04 	bl	8003f28 <vPortExitCritical>
 8002520:	e7ea      	b.n	80024f8 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 8002522:	f001 fcdf 	bl	8003ee4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002526:	68a0      	ldr	r0, [r4, #8]
 8002528:	f001 f97a 	bl	8003820 <xTaskPriorityInherit>
 800252c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800252e:	f001 fcfb 	bl	8003f28 <vPortExitCritical>
 8002532:	e793      	b.n	800245c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002534:	b197      	cbz	r7, 800255c <xQueueSemaphoreTake+0x2e4>
 8002536:	f04f 0340 	mov.w	r3, #64	; 0x40
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	e7fe      	b.n	8002546 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002548:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800254a:	3b01      	subs	r3, #1
 800254c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800254e:	b1ca      	cbz	r2, 8002584 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002550:	6923      	ldr	r3, [r4, #16]
 8002552:	b933      	cbnz	r3, 8002562 <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 8002554:	f001 fce8 	bl	8003f28 <vPortExitCritical>
				return pdPASS;
 8002558:	2701      	movs	r7, #1
 800255a:	e7cd      	b.n	80024f8 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 800255c:	f001 fce4 	bl	8003f28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002560:	e7ca      	b.n	80024f8 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002562:	f104 0010 	add.w	r0, r4, #16
 8002566:	f001 f859 	bl	800361c <xTaskRemoveFromEventList>
 800256a:	2800      	cmp	r0, #0
 800256c:	d0f2      	beq.n	8002554 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 800256e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002576:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	e7e7      	b.n	8002554 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002584:	f001 fa38 	bl	80039f8 <pvTaskIncrementMutexHeldCount>
 8002588:	60a0      	str	r0, [r4, #8]
 800258a:	e7e1      	b.n	8002550 <xQueueSemaphoreTake+0x2d8>

0800258c <xQueuePeek>:
{
 800258c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002590:	b085      	sub	sp, #20
 8002592:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002594:	2800      	cmp	r0, #0
 8002596:	f000 8144 	beq.w	8002822 <xQueuePeek+0x296>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800259a:	460f      	mov	r7, r1
 800259c:	4604      	mov	r4, r0
 800259e:	2900      	cmp	r1, #0
 80025a0:	d07a      	beq.n	8002698 <xQueuePeek+0x10c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025a2:	f001 f92d 	bl	8003800 <xTaskGetSchedulerState>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	f000 8082 	beq.w	80026b0 <xQueuePeek+0x124>
		taskENTER_CRITICAL();
 80025ac:	f001 fc9a 	bl	8003ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b0:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025b4:	f1b8 0f00 	cmp.w	r8, #0
 80025b8:	f040 813c 	bne.w	8002834 <xQueuePeek+0x2a8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80025bc:	9b01      	ldr	r3, [sp, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 80d4 	beq.w	800276c <xQueuePeek+0x1e0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025c4:	a802      	add	r0, sp, #8
 80025c6:	f001 f8b5 	bl	8003734 <vTaskInternalSetTimeOutState>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025ca:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 80025ce:	f001 fcab 	bl	8003f28 <vPortExitCritical>
		vTaskSuspendAll();
 80025d2:	f000 fef3 	bl	80033bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025d6:	f001 fc85 	bl	8003ee4 <vPortEnterCritical>
 80025da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80025de:	2bff      	cmp	r3, #255	; 0xff
 80025e0:	bf08      	it	eq
 80025e2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80025e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80025ea:	2bff      	cmp	r3, #255	; 0xff
 80025ec:	bf08      	it	eq
 80025ee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80025f2:	f001 fc99 	bl	8003f28 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025f6:	a901      	add	r1, sp, #4
 80025f8:	a802      	add	r0, sp, #8
 80025fa:	f001 f8a7 	bl	800374c <xTaskCheckForTimeOut>
 80025fe:	2800      	cmp	r0, #0
 8002600:	d163      	bne.n	80026ca <xQueuePeek+0x13e>
	taskENTER_CRITICAL();
 8002602:	f001 fc6f 	bl	8003ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002606:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80b5 	beq.w	8002778 <xQueuePeek+0x1ec>
	taskEXIT_CRITICAL();
 800260e:	f001 fc8b 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002612:	f001 fc67 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002616:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800261a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800261c:	2d00      	cmp	r5, #0
 800261e:	dc04      	bgt.n	800262a <xQueuePeek+0x9e>
 8002620:	e011      	b.n	8002646 <xQueuePeek+0xba>
			--cTxLock;
 8002622:	1e6b      	subs	r3, r5, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002628:	b16a      	cbz	r2, 8002646 <xQueuePeek+0xba>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800262c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800262e:	b153      	cbz	r3, 8002646 <xQueuePeek+0xba>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002630:	f000 fff4 	bl	800361c <xTaskRemoveFromEventList>
 8002634:	2800      	cmp	r0, #0
 8002636:	d0f4      	beq.n	8002622 <xQueuePeek+0x96>
						vTaskMissedYield();
 8002638:	f001 f8dc 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 800263c:	1e6b      	subs	r3, r5, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002642:	2a00      	cmp	r2, #0
 8002644:	d1f1      	bne.n	800262a <xQueuePeek+0x9e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002646:	23ff      	movs	r3, #255	; 0xff
 8002648:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800264c:	f001 fc6c 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002650:	f001 fc48 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002654:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002658:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800265a:	2d00      	cmp	r5, #0
 800265c:	dd14      	ble.n	8002688 <xQueuePeek+0xfc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800265e:	f104 0910 	add.w	r9, r4, #16
 8002662:	e003      	b.n	800266c <xQueuePeek+0xe0>
				--cRxLock;
 8002664:	1e6b      	subs	r3, r5, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800266a:	b16a      	cbz	r2, 8002688 <xQueuePeek+0xfc>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266e:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002670:	b153      	cbz	r3, 8002688 <xQueuePeek+0xfc>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002672:	f000 ffd3 	bl	800361c <xTaskRemoveFromEventList>
 8002676:	2800      	cmp	r0, #0
 8002678:	d0f4      	beq.n	8002664 <xQueuePeek+0xd8>
					vTaskMissedYield();
 800267a:	f001 f8bb 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 800267e:	1e6b      	subs	r3, r5, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002684:	2a00      	cmp	r2, #0
 8002686:	d1f1      	bne.n	800266c <xQueuePeek+0xe0>
		pxQueue->cRxLock = queueUNLOCKED;
 8002688:	23ff      	movs	r3, #255	; 0xff
 800268a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800268e:	f001 fc4b 	bl	8003f28 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002692:	f000 fe9b 	bl	80033cc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002696:	e060      	b.n	800275a <xQueuePeek+0x1ce>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002698:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d081      	beq.n	80025a2 <xQueuePeek+0x16>
 800269e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	e7fe      	b.n	80026ae <xQueuePeek+0x122>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f43f af7a 	beq.w	80025ac <xQueuePeek+0x20>
 80026b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	e7fe      	b.n	80026c8 <xQueuePeek+0x13c>
	taskENTER_CRITICAL();
 80026ca:	f001 fc0b 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80026ce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80026d2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026d4:	2d00      	cmp	r5, #0
 80026d6:	dc04      	bgt.n	80026e2 <xQueuePeek+0x156>
 80026d8:	e011      	b.n	80026fe <xQueuePeek+0x172>
			--cTxLock;
 80026da:	1e6b      	subs	r3, r5, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026e0:	b16a      	cbz	r2, 80026fe <xQueuePeek+0x172>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e6:	b153      	cbz	r3, 80026fe <xQueuePeek+0x172>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026e8:	f000 ff98 	bl	800361c <xTaskRemoveFromEventList>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d0f4      	beq.n	80026da <xQueuePeek+0x14e>
						vTaskMissedYield();
 80026f0:	f001 f880 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 80026f4:	1e6b      	subs	r3, r5, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026fa:	2a00      	cmp	r2, #0
 80026fc:	d1f1      	bne.n	80026e2 <xQueuePeek+0x156>
		pxQueue->cTxLock = queueUNLOCKED;
 80026fe:	23ff      	movs	r3, #255	; 0xff
 8002700:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002704:	f001 fc10 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002708:	f001 fbec 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800270c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002710:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002712:	2d00      	cmp	r5, #0
 8002714:	dd14      	ble.n	8002740 <xQueuePeek+0x1b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002716:	f104 0910 	add.w	r9, r4, #16
 800271a:	e003      	b.n	8002724 <xQueuePeek+0x198>
				--cRxLock;
 800271c:	1e6b      	subs	r3, r5, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002722:	b16a      	cbz	r2, 8002740 <xQueuePeek+0x1b4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002724:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002726:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002728:	b153      	cbz	r3, 8002740 <xQueuePeek+0x1b4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800272a:	f000 ff77 	bl	800361c <xTaskRemoveFromEventList>
 800272e:	2800      	cmp	r0, #0
 8002730:	d0f4      	beq.n	800271c <xQueuePeek+0x190>
					vTaskMissedYield();
 8002732:	f001 f85f 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 8002736:	1e6b      	subs	r3, r5, #1
 8002738:	b2da      	uxtb	r2, r3
 800273a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800273c:	2a00      	cmp	r2, #0
 800273e:	d1f1      	bne.n	8002724 <xQueuePeek+0x198>
		pxQueue->cRxLock = queueUNLOCKED;
 8002740:	23ff      	movs	r3, #255	; 0xff
 8002742:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002746:	f001 fbef 	bl	8003f28 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800274a:	f000 fe3f 	bl	80033cc <xTaskResumeAll>
	taskENTER_CRITICAL();
 800274e:	f001 fbc9 	bl	8003ee4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002754:	b153      	cbz	r3, 800276c <xQueuePeek+0x1e0>
	taskEXIT_CRITICAL();
 8002756:	f001 fbe7 	bl	8003f28 <vPortExitCritical>
		taskENTER_CRITICAL();
 800275a:	f001 fbc3 	bl	8003ee4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800275e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002760:	2b00      	cmp	r3, #0
 8002762:	d167      	bne.n	8002834 <xQueuePeek+0x2a8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002764:	9b01      	ldr	r3, [sp, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f47f af31 	bne.w	80025ce <xQueuePeek+0x42>
					taskEXIT_CRITICAL();
 800276c:	f001 fbdc 	bl	8003f28 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002770:	2000      	movs	r0, #0
}
 8002772:	b005      	add	sp, #20
 8002774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002778:	f001 fbd6 	bl	8003f28 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800277c:	9901      	ldr	r1, [sp, #4]
 800277e:	4630      	mov	r0, r6
 8002780:	f000 fe58 	bl	8003434 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002784:	f001 fbae 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002788:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800278c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800278e:	2d00      	cmp	r5, #0
 8002790:	dc04      	bgt.n	800279c <xQueuePeek+0x210>
 8002792:	e011      	b.n	80027b8 <xQueuePeek+0x22c>
			--cTxLock;
 8002794:	1e6b      	subs	r3, r5, #1
 8002796:	b2da      	uxtb	r2, r3
 8002798:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800279a:	b16a      	cbz	r2, 80027b8 <xQueuePeek+0x22c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800279c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800279e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027a0:	b153      	cbz	r3, 80027b8 <xQueuePeek+0x22c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027a2:	f000 ff3b 	bl	800361c <xTaskRemoveFromEventList>
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d0f4      	beq.n	8002794 <xQueuePeek+0x208>
						vTaskMissedYield();
 80027aa:	f001 f823 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 80027ae:	1e6b      	subs	r3, r5, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027b4:	2a00      	cmp	r2, #0
 80027b6:	d1f1      	bne.n	800279c <xQueuePeek+0x210>
		pxQueue->cTxLock = queueUNLOCKED;
 80027b8:	23ff      	movs	r3, #255	; 0xff
 80027ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80027be:	f001 fbb3 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 80027c2:	f001 fb8f 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80027c6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027ca:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027cc:	2d00      	cmp	r5, #0
 80027ce:	dd14      	ble.n	80027fa <xQueuePeek+0x26e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d0:	f104 0910 	add.w	r9, r4, #16
 80027d4:	e003      	b.n	80027de <xQueuePeek+0x252>
				--cRxLock;
 80027d6:	1e6b      	subs	r3, r5, #1
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027dc:	b16a      	cbz	r2, 80027fa <xQueuePeek+0x26e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027de:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027e2:	b153      	cbz	r3, 80027fa <xQueuePeek+0x26e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027e4:	f000 ff1a 	bl	800361c <xTaskRemoveFromEventList>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d0f4      	beq.n	80027d6 <xQueuePeek+0x24a>
					vTaskMissedYield();
 80027ec:	f001 f802 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 80027f0:	1e6b      	subs	r3, r5, #1
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f6:	2a00      	cmp	r2, #0
 80027f8:	d1f1      	bne.n	80027de <xQueuePeek+0x252>
		pxQueue->cRxLock = queueUNLOCKED;
 80027fa:	23ff      	movs	r3, #255	; 0xff
 80027fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002800:	f001 fb92 	bl	8003f28 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002804:	f000 fde2 	bl	80033cc <xTaskResumeAll>
 8002808:	2800      	cmp	r0, #0
 800280a:	d1a6      	bne.n	800275a <xQueuePeek+0x1ce>
					portYIELD_WITHIN_API();
 800280c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002810:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002814:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8002820:	e79b      	b.n	800275a <xQueuePeek+0x1ce>
 8002822:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002826:	f383 8811 	msr	BASEPRI, r3
 800282a:	f3bf 8f6f 	isb	sy
 800282e:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002832:	e7fe      	b.n	8002832 <xQueuePeek+0x2a6>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002834:	6c22      	ldr	r2, [r4, #64]	; 0x40
				pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8002836:	68e5      	ldr	r5, [r4, #12]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002838:	b14a      	cbz	r2, 800284e <xQueuePeek+0x2c2>
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800283a:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800283c:	18a9      	adds	r1, r5, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800283e:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002840:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002842:	bf24      	itt	cs
 8002844:	6821      	ldrcs	r1, [r4, #0]
 8002846:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002848:	4638      	mov	r0, r7
 800284a:	f008 f9e3 	bl	800ac14 <memcpy>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800284e:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8002850:	60e5      	str	r5, [r4, #12]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002852:	b91b      	cbnz	r3, 800285c <xQueuePeek+0x2d0>
				taskEXIT_CRITICAL();
 8002854:	f001 fb68 	bl	8003f28 <vPortExitCritical>
				return pdPASS;
 8002858:	2001      	movs	r0, #1
 800285a:	e78a      	b.n	8002772 <xQueuePeek+0x1e6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800285c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002860:	f000 fedc 	bl	800361c <xTaskRemoveFromEventList>
 8002864:	2800      	cmp	r0, #0
 8002866:	d0f5      	beq.n	8002854 <xQueuePeek+0x2c8>
						queueYIELD_IF_USING_PREEMPTION();
 8002868:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800286c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002870:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	e7ea      	b.n	8002854 <xQueuePeek+0x2c8>
 800287e:	bf00      	nop

08002880 <xQueueReceiveFromISR>:
{
 8002880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002884:	b310      	cbz	r0, 80028cc <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002886:	460e      	mov	r6, r1
 8002888:	4617      	mov	r7, r2
 800288a:	4604      	mov	r4, r0
 800288c:	b191      	cbz	r1, 80028b4 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800288e:	f001 fc5b 	bl	8004148 <vPortValidateInterruptPriority>
	__asm volatile
 8002892:	f3ef 8911 	mrs	r9, BASEPRI
 8002896:	f04f 0340 	mov.w	r3, #64	; 0x40
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028a6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028a8:	b9cd      	cbnz	r5, 80028de <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80028aa:	4628      	mov	r0, r5
	__asm volatile
 80028ac:	f389 8811 	msr	BASEPRI, r9
}
 80028b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0e9      	beq.n	800288e <xQueueReceiveFromISR+0xe>
	__asm volatile
 80028ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	e7fe      	b.n	80028ca <xQueueReceiveFromISR+0x4a>
 80028cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80028dc:	e7fe      	b.n	80028dc <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80028de:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80028e4:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028e8:	b152      	cbz	r2, 8002900 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028ea:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028ec:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028ee:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028f0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028f2:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028f4:	bf24      	itt	cs
 80028f6:	6821      	ldrcs	r1, [r4, #0]
 80028f8:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028fa:	4630      	mov	r0, r6
 80028fc:	f008 f98a 	bl	800ac14 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002900:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8002902:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002906:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002908:	d009      	beq.n	800291e <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800290a:	f108 0301 	add.w	r3, r8, #1
 800290e:	b25b      	sxtb	r3, r3
 8002910:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8002914:	2001      	movs	r0, #1
	__asm volatile
 8002916:	f389 8811 	msr	BASEPRI, r9
}
 800291a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800291e:	6923      	ldr	r3, [r4, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f7      	beq.n	8002914 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002924:	f104 0010 	add.w	r0, r4, #16
 8002928:	f000 fe78 	bl	800361c <xTaskRemoveFromEventList>
 800292c:	2800      	cmp	r0, #0
 800292e:	d0f1      	beq.n	8002914 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 8002930:	2f00      	cmp	r7, #0
 8002932:	d0ef      	beq.n	8002914 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002934:	2001      	movs	r0, #1
 8002936:	6038      	str	r0, [r7, #0]
 8002938:	e7b8      	b.n	80028ac <xQueueReceiveFromISR+0x2c>
 800293a:	bf00      	nop

0800293c <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 800293c:	b158      	cbz	r0, 8002956 <uxQueueMessagesWaiting+0x1a>
{
 800293e:	b510      	push	{r4, lr}
 8002940:	4604      	mov	r4, r0
 8002942:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 8002944:	f001 face 	bl	8003ee4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002948:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800294a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 800294c:	f001 faec 	bl	8003f28 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002950:	9801      	ldr	r0, [sp, #4]
 8002952:	b002      	add	sp, #8
 8002954:	bd10      	pop	{r4, pc}
	__asm volatile
 8002956:	f04f 0340 	mov.w	r3, #64	; 0x40
 800295a:	f383 8811 	msr	BASEPRI, r3
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8002966:	e7fe      	b.n	8002966 <uxQueueMessagesWaiting+0x2a>

08002968 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <vQueueAddToRegistry+0x4c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	b17a      	cbz	r2, 800298e <vQueueAddToRegistry+0x26>
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	b162      	cbz	r2, 800298c <vQueueAddToRegistry+0x24>
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	b192      	cbz	r2, 800299c <vQueueAddToRegistry+0x34>
 8002976:	699a      	ldr	r2, [r3, #24]
 8002978:	b192      	cbz	r2, 80029a0 <vQueueAddToRegistry+0x38>
 800297a:	6a1a      	ldr	r2, [r3, #32]
 800297c:	b192      	cbz	r2, 80029a4 <vQueueAddToRegistry+0x3c>
 800297e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002980:	b192      	cbz	r2, 80029a8 <vQueueAddToRegistry+0x40>
 8002982:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002984:	b192      	cbz	r2, 80029ac <vQueueAddToRegistry+0x44>
 8002986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002988:	b192      	cbz	r2, 80029b0 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800298a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800298c:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 800298e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002992:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002996:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 800299a:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800299c:	2202      	movs	r2, #2
 800299e:	e7f6      	b.n	800298e <vQueueAddToRegistry+0x26>
 80029a0:	2203      	movs	r2, #3
 80029a2:	e7f4      	b.n	800298e <vQueueAddToRegistry+0x26>
 80029a4:	2204      	movs	r2, #4
 80029a6:	e7f2      	b.n	800298e <vQueueAddToRegistry+0x26>
 80029a8:	2205      	movs	r2, #5
 80029aa:	e7f0      	b.n	800298e <vQueueAddToRegistry+0x26>
 80029ac:	2206      	movs	r2, #6
 80029ae:	e7ee      	b.n	800298e <vQueueAddToRegistry+0x26>
 80029b0:	2207      	movs	r2, #7
 80029b2:	e7ec      	b.n	800298e <vQueueAddToRegistry+0x26>
 80029b4:	20000bb8 	.word	0x20000bb8

080029b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80029b8:	b570      	push	{r4, r5, r6, lr}
 80029ba:	4605      	mov	r5, r0
 80029bc:	460e      	mov	r6, r1
 80029be:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80029c0:	f001 fa90 	bl	8003ee4 <vPortEnterCritical>
 80029c4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80029c8:	2bff      	cmp	r3, #255	; 0xff
 80029ca:	bf04      	itt	eq
 80029cc:	2300      	moveq	r3, #0
 80029ce:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 80029d2:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80029d6:	2bff      	cmp	r3, #255	; 0xff
 80029d8:	bf04      	itt	eq
 80029da:	2300      	moveq	r3, #0
 80029dc:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 80029e0:	f001 faa2 	bl	8003f28 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d043      	beq.n	8002a72 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 80029ea:	f001 fa7b 	bl	8003ee4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80029ee:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80029f2:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f4:	2c00      	cmp	r4, #0
 80029f6:	dd14      	ble.n	8002a22 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029f8:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80029fc:	e003      	b.n	8002a06 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 80029fe:	1e63      	subs	r3, r4, #1
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a04:	b16a      	cbz	r2, 8002a22 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a08:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a0a:	b153      	cbz	r3, 8002a22 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a0c:	f000 fe06 	bl	800361c <xTaskRemoveFromEventList>
 8002a10:	2800      	cmp	r0, #0
 8002a12:	d0f4      	beq.n	80029fe <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8002a14:	f000 feee 	bl	80037f4 <vTaskMissedYield>
			--cTxLock;
 8002a18:	1e63      	subs	r3, r4, #1
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a1e:	2a00      	cmp	r2, #0
 8002a20:	d1f1      	bne.n	8002a06 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002a28:	f001 fa7e 	bl	8003f28 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002a2c:	f001 fa5a 	bl	8003ee4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002a30:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002a34:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a36:	2c00      	cmp	r4, #0
 8002a38:	dd14      	ble.n	8002a64 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a3a:	f105 0610 	add.w	r6, r5, #16
 8002a3e:	e003      	b.n	8002a48 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8002a40:	1e63      	subs	r3, r4, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a46:	b16a      	cbz	r2, 8002a64 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a48:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4a:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a4c:	b153      	cbz	r3, 8002a64 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a4e:	f000 fde5 	bl	800361c <xTaskRemoveFromEventList>
 8002a52:	2800      	cmp	r0, #0
 8002a54:	d0f4      	beq.n	8002a40 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8002a56:	f000 fecd 	bl	80037f4 <vTaskMissedYield>
				--cRxLock;
 8002a5a:	1e63      	subs	r3, r4, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a60:	2a00      	cmp	r2, #0
 8002a62:	d1f1      	bne.n	8002a48 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8002a64:	23ff      	movs	r3, #255	; 0xff
 8002a66:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8002a6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002a6e:	f001 ba5b 	b.w	8003f28 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a72:	4622      	mov	r2, r4
 8002a74:	4631      	mov	r1, r6
 8002a76:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002a7a:	f000 fd7f 	bl	800357c <vTaskPlaceOnEventListRestricted>
 8002a7e:	e7b4      	b.n	80029ea <vQueueWaitForMessageRestricted+0x32>

08002a80 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a84:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002a86:	f001 fa2d 	bl	8003ee4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002a8a:	4a34      	ldr	r2, [pc, #208]	; (8002b5c <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002a8c:	4e34      	ldr	r6, [pc, #208]	; (8002b60 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8002a8e:	6813      	ldr	r3, [r2, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002a94:	6833      	ldr	r3, [r6, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d032      	beq.n	8002b00 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002a9a:	4c32      	ldr	r4, [pc, #200]	; (8002b64 <prvAddNewTaskToReadyList+0xe4>)
 8002a9c:	6823      	ldr	r3, [r4, #0]
 8002a9e:	b33b      	cbz	r3, 8002af0 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002aa0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002aa2:	4f31      	ldr	r7, [pc, #196]	; (8002b68 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8002aa4:	4a31      	ldr	r2, [pc, #196]	; (8002b6c <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8002aa6:	4932      	ldr	r1, [pc, #200]	; (8002b70 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8002aa8:	6813      	ldr	r3, [r2, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002aae:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 8002ab0:	680b      	ldr	r3, [r1, #0]
 8002ab2:	4283      	cmp	r3, r0
 8002ab4:	bf38      	it	cc
 8002ab6:	6008      	strcc	r0, [r1, #0]
 8002ab8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002abc:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002ac0:	1d29      	adds	r1, r5, #4
 8002ac2:	f7fe feb5 	bl	8001830 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002ac6:	f001 fa2f 	bl	8003f28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	b173      	cbz	r3, 8002aec <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ace:	6832      	ldr	r2, [r6, #0]
 8002ad0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002ad2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d209      	bcs.n	8002aec <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ad8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002adc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ae0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002aec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002af0:	6833      	ldr	r3, [r6, #0]
 8002af2:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4f1c      	ldr	r7, [pc, #112]	; (8002b68 <prvAddNewTaskToReadyList+0xe8>)
 8002af8:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002afa:	bf98      	it	ls
 8002afc:	6035      	strls	r5, [r6, #0]
 8002afe:	e7d1      	b.n	8002aa4 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8002b00:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d003      	beq.n	8002b10 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002b08:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002b0a:	4f17      	ldr	r7, [pc, #92]	; (8002b68 <prvAddNewTaskToReadyList+0xe8>)
 8002b0c:	4c15      	ldr	r4, [pc, #84]	; (8002b64 <prvAddNewTaskToReadyList+0xe4>)
 8002b0e:	e7c9      	b.n	8002aa4 <prvAddNewTaskToReadyList+0x24>
 8002b10:	4f15      	ldr	r7, [pc, #84]	; (8002b68 <prvAddNewTaskToReadyList+0xe8>)
 8002b12:	463c      	mov	r4, r7
 8002b14:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b18:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b1a:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b1c:	f7fe fe78 	bl	8001810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b20:	45a0      	cmp	r8, r4
 8002b22:	d1f9      	bne.n	8002b18 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b24:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002b88 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8002b28:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002b8c <prvAddNewTaskToReadyList+0x10c>
 8002b2c:	4c0d      	ldr	r4, [pc, #52]	; (8002b64 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 8002b2e:	4648      	mov	r0, r9
 8002b30:	f7fe fe6e 	bl	8001810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b34:	4640      	mov	r0, r8
 8002b36:	f7fe fe6b 	bl	8001810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b3a:	480e      	ldr	r0, [pc, #56]	; (8002b74 <prvAddNewTaskToReadyList+0xf4>)
 8002b3c:	f7fe fe68 	bl	8001810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b40:	480d      	ldr	r0, [pc, #52]	; (8002b78 <prvAddNewTaskToReadyList+0xf8>)
 8002b42:	f7fe fe65 	bl	8001810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b46:	480d      	ldr	r0, [pc, #52]	; (8002b7c <prvAddNewTaskToReadyList+0xfc>)
 8002b48:	f7fe fe62 	bl	8001810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 8002b4e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b50:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <prvAddNewTaskToReadyList+0x104>)
 8002b56:	f8c3 8000 	str.w	r8, [r3]
}
 8002b5a:	e7a3      	b.n	8002aa4 <prvAddNewTaskToReadyList+0x24>
 8002b5c:	20001064 	.word	0x20001064
 8002b60:	20000bf8 	.word	0x20000bf8
 8002b64:	200010c0 	.word	0x200010c0
 8002b68:	20000c04 	.word	0x20000c04
 8002b6c:	20001070 	.word	0x20001070
 8002b70:	20001074 	.word	0x20001074
 8002b74:	200010ac 	.word	0x200010ac
 8002b78:	200010d8 	.word	0x200010d8
 8002b7c:	200010c4 	.word	0x200010c4
 8002b80:	20000bfc 	.word	0x20000bfc
 8002b84:	20000c00 	.word	0x20000c00
 8002b88:	20001078 	.word	0x20001078
 8002b8c:	2000108c 	.word	0x2000108c

08002b90 <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 8002b90:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <vTaskSwitchContext.part.0+0x90>)
		taskCHECK_FOR_STACK_OVERFLOW();
 8002b94:	4c23      	ldr	r4, [pc, #140]	; (8002c24 <vTaskSwitchContext.part.0+0x94>)
		xYieldPending = pdFALSE;
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002ba4:	d103      	bne.n	8002bae <vTaskSwitchContext.part.0+0x1e>
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002bac:	d02f      	beq.n	8002c0e <vTaskSwitchContext.part.0+0x7e>
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	6821      	ldr	r1, [r4, #0]
 8002bb2:	3134      	adds	r1, #52	; 0x34
 8002bb4:	f006 ff74 	bl	8009aa0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bb8:	4d1b      	ldr	r5, [pc, #108]	; (8002c28 <vTaskSwitchContext.part.0+0x98>)
 8002bba:	491c      	ldr	r1, [pc, #112]	; (8002c2c <vTaskSwitchContext.part.0+0x9c>)
 8002bbc:	682b      	ldr	r3, [r5, #0]
 8002bbe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	0098      	lsls	r0, r3, #2
 8002bc6:	588a      	ldr	r2, [r1, r2]
 8002bc8:	b942      	cbnz	r2, 8002bdc <vTaskSwitchContext.part.0+0x4c>
 8002bca:	b1bb      	cbz	r3, 8002bfc <vTaskSwitchContext.part.0+0x6c>
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8002bd2:	0098      	lsls	r0, r3, #2
 8002bd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002bd8:	2a00      	cmp	r2, #0
 8002bda:	d0f6      	beq.n	8002bca <vTaskSwitchContext.part.0+0x3a>
 8002bdc:	18c2      	adds	r2, r0, r3
 8002bde:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8002be2:	4602      	mov	r2, r0
 8002be4:	6841      	ldr	r1, [r0, #4]
 8002be6:	6849      	ldr	r1, [r1, #4]
 8002be8:	6041      	str	r1, [r0, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	4291      	cmp	r1, r2
 8002bee:	bf04      	itt	eq
 8002bf0:	6849      	ldreq	r1, [r1, #4]
 8002bf2:	6041      	streq	r1, [r0, #4]
 8002bf4:	68ca      	ldr	r2, [r1, #12]
 8002bf6:	6022      	str	r2, [r4, #0]
 8002bf8:	602b      	str	r3, [r5, #0]
}
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002c00:	f383 8811 	msr	BASEPRI, r3
 8002c04:	f3bf 8f6f 	isb	sy
 8002c08:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c0c:	e7fe      	b.n	8002c0c <vTaskSwitchContext.part.0+0x7c>
		taskCHECK_FOR_STACK_OVERFLOW();
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002c14:	d1cb      	bne.n	8002bae <vTaskSwitchContext.part.0+0x1e>
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002c1c:	d1c7      	bne.n	8002bae <vTaskSwitchContext.part.0+0x1e>
 8002c1e:	e7cb      	b.n	8002bb8 <vTaskSwitchContext.part.0+0x28>
 8002c20:	200010f0 	.word	0x200010f0
 8002c24:	20000bf8 	.word	0x20000bf8
 8002c28:	20001074 	.word	0x20001074
 8002c2c:	20000c04 	.word	0x20000c04

08002c30 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c34:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002c36:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c3a:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8002c3e:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002c40:	4606      	mov	r6, r0
 8002c42:	460c      	mov	r4, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c44:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002c46:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002c48:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c4a:	f008 f80b 	bl	800ac64 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002c50:	f1a9 0904 	sub.w	r9, r9, #4
 8002c54:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c56:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8002c5a:	2c00      	cmp	r4, #0
 8002c5c:	d03a      	beq.n	8002cd4 <prvInitialiseNewTask.constprop.0+0xa4>
 8002c5e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8002c62:	f104 011f 	add.w	r1, r4, #31
 8002c66:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 8002c6a:	e001      	b.n	8002c70 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c6c:	458c      	cmp	ip, r1
 8002c6e:	d005      	beq.n	8002c7c <prvInitialiseNewTask.constprop.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c70:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8002c74:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002c78:	2c00      	cmp	r4, #0
 8002c7a:	d1f7      	bne.n	8002c6c <prvInitialiseNewTask.constprop.0+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c82:	9c08      	ldr	r4, [sp, #32]
 8002c84:	2c37      	cmp	r4, #55	; 0x37
 8002c86:	bf28      	it	cs
 8002c88:	2437      	movcs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8002c8a:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8002c8e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002c90:	65ec      	str	r4, [r5, #92]	; 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c92:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002c94:	f8c5 a060 	str.w	sl, [r5, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c98:	f7fe fdc6 	bl	8001828 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c9c:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ca0:	f105 0018 	add.w	r0, r5, #24
 8002ca4:	f7fe fdc0 	bl	8001828 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002ca8:	f8c5 a064 	str.w	sl, [r5, #100]	; 0x64
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cac:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cae:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cb0:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002cb2:	f885 a068 	strb.w	sl, [r5, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002cb6:	f885 a06a 	strb.w	sl, [r5, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cba:	463a      	mov	r2, r7
 8002cbc:	4631      	mov	r1, r6
 8002cbe:	4648      	mov	r0, r9
 8002cc0:	f001 f8e6 	bl	8003e90 <pxPortInitialiseStack>
 8002cc4:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8002cc6:	f1b8 0f00 	cmp.w	r8, #0
 8002cca:	d001      	beq.n	8002cd0 <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ccc:	f8c8 5000 	str.w	r5, [r8]
}
 8002cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cd4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8002cd8:	e7d3      	b.n	8002c82 <prvInitialiseNewTask.constprop.0+0x52>
 8002cda:	bf00      	nop

08002cdc <prvIdleTask>:
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	4c22      	ldr	r4, [pc, #136]	; (8002d68 <prvIdleTask+0x8c>)
 8002ce0:	4e22      	ldr	r6, [pc, #136]	; (8002d6c <prvIdleTask+0x90>)
 8002ce2:	4d23      	ldr	r5, [pc, #140]	; (8002d70 <prvIdleTask+0x94>)
 8002ce4:	4f23      	ldr	r7, [pc, #140]	; (8002d74 <prvIdleTask+0x98>)
				taskYIELD();
 8002ce6:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8002cea:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	b353      	cbz	r3, 8002d48 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8002cf2:	f001 f8f7 	bl	8003ee4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cf6:	68f3      	ldr	r3, [r6, #12]
 8002cf8:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cfc:	f10a 0004 	add.w	r0, sl, #4
 8002d00:	f7fe fdbe 	bl	8001880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002d04:	682b      	ldr	r3, [r5, #0]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002d0a:	6823      	ldr	r3, [r4, #0]
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8002d10:	f001 f90a 	bl	8003f28 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002d14:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
 8002d18:	b163      	cbz	r3, 8002d34 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d020      	beq.n	8002d60 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d0e5      	beq.n	8002cee <prvIdleTask+0x12>
 8002d22:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	e7fe      	b.n	8002d32 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8002d34:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8002d38:	f001 faee 	bl	8004318 <vPortFree>
				vPortFree( pxTCB );
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	f001 faeb 	bl	8004318 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1d4      	bne.n	8002cf2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d905      	bls.n	8002d5a <prvIdleTask+0x7e>
				taskYIELD();
 8002d4e:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8002d5a:	f006 fe99 	bl	8009a90 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002d5e:	e7c6      	b.n	8002cee <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8002d60:	4650      	mov	r0, sl
 8002d62:	f001 fad9 	bl	8004318 <vPortFree>
 8002d66:	e7c2      	b.n	8002cee <prvIdleTask+0x12>
 8002d68:	20001068 	.word	0x20001068
 8002d6c:	200010d8 	.word	0x200010d8
 8002d70:	20001064 	.word	0x20001064
 8002d74:	20000c04 	.word	0x20000c04

08002d78 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8002d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d7c:	4b47      	ldr	r3, [pc, #284]	; (8002e9c <xTaskIncrementTick.part.0+0x124>)
 8002d7e:	681e      	ldr	r6, [r3, #0]
 8002d80:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8002d82:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8002d84:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d86:	2e00      	cmp	r6, #0
 8002d88:	d040      	beq.n	8002e0c <xTaskIncrementTick.part.0+0x94>
 8002d8a:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002eb0 <xTaskIncrementTick.part.0+0x138>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d8e:	f8db 3000 	ldr.w	r3, [fp]
 8002d92:	429e      	cmp	r6, r3
 8002d94:	d347      	bcc.n	8002e26 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d96:	4f42      	ldr	r7, [pc, #264]	; (8002ea0 <xTaskIncrementTick.part.0+0x128>)
 8002d98:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002eb4 <xTaskIncrementTick.part.0+0x13c>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002eb8 <xTaskIncrementTick.part.0+0x140>
 8002da2:	681d      	ldr	r5, [r3, #0]
 8002da4:	2d00      	cmp	r5, #0
 8002da6:	d073      	beq.n	8002e90 <xTaskIncrementTick.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 8002da8:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002ebc <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8002dac:	2500      	movs	r5, #0
 8002dae:	e022      	b.n	8002df6 <xTaskIncrementTick.part.0+0x7e>
 8002db0:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db2:	f7fe fd65 	bl	8001880 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002db6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002db8:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dba:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dbe:	b113      	cbz	r3, 8002dc6 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc0:	f7fe fd5e 	bl	8001880 <uxListRemove>
 8002dc4:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8002dc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc8:	f8d8 2000 	ldr.w	r2, [r8]
 8002dcc:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002dd6:	bf88      	it	hi
 8002dd8:	f8c8 3000 	strhi.w	r3, [r8]
 8002ddc:	f7fe fd28 	bl	8001830 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002de0:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002de4:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002de6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002dea:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8002dec:	4291      	cmp	r1, r2
 8002dee:	bf28      	it	cs
 8002df0:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d04c      	beq.n	8002e90 <xTaskIncrementTick.part.0+0x118>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002dfc:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dfe:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8002e00:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e02:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8002e04:	d2d4      	bcs.n	8002db0 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8002e06:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002e0a:	e011      	b.n	8002e30 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <xTaskIncrementTick.part.0+0x128>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	b30a      	cbz	r2, 8002e58 <xTaskIncrementTick.part.0+0xe0>
 8002e14:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	e7fe      	b.n	8002e24 <xTaskIncrementTick.part.0+0xac>
 8002e26:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002eb4 <xTaskIncrementTick.part.0+0x13c>
 8002e2a:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002eb8 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8002e2e:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e30:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8002e34:	491b      	ldr	r1, [pc, #108]	; (8002ea4 <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8002e42:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8002e44:	2a02      	cmp	r2, #2
 8002e46:	bf28      	it	cs
 8002e48:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8002e4a:	2b00      	cmp	r3, #0
}
 8002e4c:	bf0c      	ite	eq
 8002e4e:	4628      	moveq	r0, r5
 8002e50:	2001      	movne	r0, #1
 8002e52:	b003      	add	sp, #12
 8002e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002e58:	4a13      	ldr	r2, [pc, #76]	; (8002ea8 <xTaskIncrementTick.part.0+0x130>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	6811      	ldr	r1, [r2, #0]
 8002e5e:	6019      	str	r1, [r3, #0]
 8002e60:	4912      	ldr	r1, [pc, #72]	; (8002eac <xTaskIncrementTick.part.0+0x134>)
 8002e62:	6010      	str	r0, [r2, #0]
 8002e64:	680a      	ldr	r2, [r1, #0]
 8002e66:	3201      	adds	r2, #1
 8002e68:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	6812      	ldr	r2, [r2, #0]
 8002e6e:	b932      	cbnz	r2, 8002e7e <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e70:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8002eb0 <xTaskIncrementTick.part.0+0x138>
 8002e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e78:	f8cb 3000 	str.w	r3, [fp]
 8002e7c:	e787      	b.n	8002d8e <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e7e:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e80:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8002eb0 <xTaskIncrementTick.part.0+0x138>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e84:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8002e8e:	e77e      	b.n	8002d8e <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e94:	f8cb 3000 	str.w	r3, [fp]
					break;
 8002e98:	e7ca      	b.n	8002e30 <xTaskIncrementTick.part.0+0xb8>
 8002e9a:	bf00      	nop
 8002e9c:	200010ec 	.word	0x200010ec
 8002ea0:	20000bfc 	.word	0x20000bfc
 8002ea4:	200010f0 	.word	0x200010f0
 8002ea8:	20000c00 	.word	0x20000c00
 8002eac:	200010a4 	.word	0x200010a4
 8002eb0:	200010a0 	.word	0x200010a0
 8002eb4:	20000c04 	.word	0x20000c04
 8002eb8:	20000bf8 	.word	0x20000bf8
 8002ebc:	20001074 	.word	0x20001074

08002ec0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8002ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8002ec4:	4d41      	ldr	r5, [pc, #260]	; (8002fcc <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8002ec6:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8002ec8:	f001 f80c 	bl	8003ee4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002ecc:	682b      	ldr	r3, [r5, #0]
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ed2:	682b      	ldr	r3, [r5, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d161      	bne.n	8002f9c <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ed8:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <xTaskResumeAll.part.0+0x110>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d05d      	beq.n	8002f9c <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ee0:	4e3c      	ldr	r6, [pc, #240]	; (8002fd4 <xTaskResumeAll.part.0+0x114>)
 8002ee2:	6833      	ldr	r3, [r6, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d06e      	beq.n	8002fc6 <xTaskResumeAll.part.0+0x106>
 8002ee8:	4f3b      	ldr	r7, [pc, #236]	; (8002fd8 <xTaskResumeAll.part.0+0x118>)
 8002eea:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002fe8 <xTaskResumeAll.part.0+0x128>
 8002eee:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002fec <xTaskResumeAll.part.0+0x12c>
 8002ef2:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002ff0 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef6:	68f3      	ldr	r3, [r6, #12]
 8002ef8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002efa:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002efe:	f104 0018 	add.w	r0, r4, #24
 8002f02:	f7fe fcbd 	bl	8001880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f06:	4658      	mov	r0, fp
 8002f08:	f7fe fcba 	bl	8001880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f0c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002f14:	4293      	cmp	r3, r2
 8002f16:	4659      	mov	r1, fp
 8002f18:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002f1c:	bf88      	it	hi
 8002f1e:	603b      	strhi	r3, [r7, #0]
 8002f20:	f7fe fc86 	bl	8001830 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f24:	f8d8 3000 	ldr.w	r3, [r8]
 8002f28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d33d      	bcc.n	8002fac <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8002f30:	2301      	movs	r3, #1
 8002f32:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f36:	6833      	ldr	r3, [r6, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1dc      	bne.n	8002ef6 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <xTaskResumeAll.part.0+0x11c>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	d03a      	beq.n	8002fbc <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f46:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f4a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002f4c:	68d2      	ldr	r2, [r2, #12]
 8002f4e:	6852      	ldr	r2, [r2, #4]
 8002f50:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f52:	4e24      	ldr	r6, [pc, #144]	; (8002fe4 <xTaskResumeAll.part.0+0x124>)
 8002f54:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002f56:	b194      	cbz	r4, 8002f7e <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8002f58:	2701      	movs	r7, #1
 8002f5a:	e006      	b.n	8002f6a <xTaskResumeAll.part.0+0xaa>
 8002f5c:	f7ff ff0c 	bl	8002d78 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8002f60:	b108      	cbz	r0, 8002f66 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8002f62:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f66:	3c01      	subs	r4, #1
 8002f68:	d008      	beq.n	8002f7c <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f5      	beq.n	8002f5c <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8002f70:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f72:	3c01      	subs	r4, #1
		++xPendedTicks;
 8002f74:	f103 0301 	add.w	r3, r3, #1
 8002f78:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f7a:	d1f6      	bne.n	8002f6a <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8002f7c:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8002f7e:	f8da 3000 	ldr.w	r3, [sl]
 8002f82:	b15b      	cbz	r3, 8002f9c <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8002f84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e000      	b.n	8002f9e <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002fa0:	f000 ffc2 	bl	8003f28 <vPortExitCritical>
}
 8002fa4:	9801      	ldr	r0, [sp, #4]
 8002fa6:	b003      	add	sp, #12
 8002fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fac:	6833      	ldr	r3, [r6, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1a1      	bne.n	8002ef6 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb2:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <xTaskResumeAll.part.0+0x11c>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	2a00      	cmp	r2, #0
 8002fba:	d1c4      	bne.n	8002f46 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <xTaskResumeAll.part.0+0x120>)
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e7c5      	b.n	8002f52 <xTaskResumeAll.part.0+0x92>
 8002fc6:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002ff0 <xTaskResumeAll.part.0+0x130>
 8002fca:	e7c2      	b.n	8002f52 <xTaskResumeAll.part.0+0x92>
 8002fcc:	2000106c 	.word	0x2000106c
 8002fd0:	20001064 	.word	0x20001064
 8002fd4:	200010ac 	.word	0x200010ac
 8002fd8:	20001074 	.word	0x20001074
 8002fdc:	20000bfc 	.word	0x20000bfc
 8002fe0:	200010a0 	.word	0x200010a0
 8002fe4:	200010a8 	.word	0x200010a8
 8002fe8:	20000c04 	.word	0x20000c04
 8002fec:	20000bf8 	.word	0x20000bf8
 8002ff0:	200010f0 	.word	0x200010f0

08002ff4 <xTaskCreateStatic>:
	{
 8002ff4:	b530      	push	{r4, r5, lr}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002ffa:	b1c4      	cbz	r4, 800302e <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8002ffc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ffe:	b16d      	cbz	r5, 800301c <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003000:	256c      	movs	r5, #108	; 0x6c
 8003002:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003004:	9d05      	ldr	r5, [sp, #20]
 8003006:	2d6c      	cmp	r5, #108	; 0x6c
 8003008:	d01a      	beq.n	8003040 <xTaskCreateStatic+0x4c>
 800300a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	e7fe      	b.n	800301a <xTaskCreateStatic+0x26>
 800301c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800302c:	e7fe      	b.n	800302c <xTaskCreateStatic+0x38>
 800302e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800303e:	e7fe      	b.n	800303e <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003040:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003042:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003044:	2402      	movs	r4, #2
 8003046:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800304a:	ac04      	add	r4, sp, #16
 800304c:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8003050:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8003052:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003054:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003056:	f7ff fdeb 	bl	8002c30 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800305a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800305c:	f7ff fd10 	bl	8002a80 <prvAddNewTaskToReadyList>
	}
 8003060:	9804      	ldr	r0, [sp, #16]
 8003062:	b007      	add	sp, #28
 8003064:	bd30      	pop	{r4, r5, pc}
 8003066:	bf00      	nop

08003068 <xTaskCreate>:
	{
 8003068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800306c:	4607      	mov	r7, r0
 800306e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003070:	0090      	lsls	r0, r2, #2
	{
 8003072:	4615      	mov	r5, r2
 8003074:	4688      	mov	r8, r1
 8003076:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003078:	f001 f894 	bl	80041a4 <pvPortMalloc>
			if( pxStack != NULL )
 800307c:	b1d8      	cbz	r0, 80030b6 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800307e:	4604      	mov	r4, r0
 8003080:	206c      	movs	r0, #108	; 0x6c
 8003082:	f001 f88f 	bl	80041a4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003086:	4606      	mov	r6, r0
 8003088:	b1d0      	cbz	r0, 80030c0 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 800308a:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800308c:	2400      	movs	r4, #0
 800308e:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003092:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003094:	9401      	str	r4, [sp, #4]
 8003096:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003098:	9602      	str	r6, [sp, #8]
 800309a:	464b      	mov	r3, r9
 800309c:	462a      	mov	r2, r5
 800309e:	4641      	mov	r1, r8
 80030a0:	4638      	mov	r0, r7
 80030a2:	9400      	str	r4, [sp, #0]
 80030a4:	f7ff fdc4 	bl	8002c30 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030a8:	4630      	mov	r0, r6
 80030aa:	f7ff fce9 	bl	8002a80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030ae:	2001      	movs	r0, #1
	}
 80030b0:	b005      	add	sp, #20
 80030b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 80030ba:	b005      	add	sp, #20
 80030bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80030c0:	4620      	mov	r0, r4
 80030c2:	f001 f929 	bl	8004318 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030ca:	e7f1      	b.n	80030b0 <xTaskCreate+0x48>

080030cc <vTaskDelete>:
	{
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80030d0:	4d36      	ldr	r5, [pc, #216]	; (80031ac <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 80030d2:	f000 ff07 	bl	8003ee4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80030d6:	2c00      	cmp	r4, #0
 80030d8:	d044      	beq.n	8003164 <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030da:	1d26      	adds	r6, r4, #4
 80030dc:	4630      	mov	r0, r6
 80030de:	f7fe fbcf 	bl	8001880 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030e4:	b11b      	cbz	r3, 80030ee <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030e6:	f104 0018 	add.w	r0, r4, #24
 80030ea:	f7fe fbc9 	bl	8001880 <uxListRemove>
			uxTaskNumber++;
 80030ee:	4a30      	ldr	r2, [pc, #192]	; (80031b0 <vTaskDelete+0xe4>)
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	3301      	adds	r3, #1
 80030f4:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80030f6:	682b      	ldr	r3, [r5, #0]
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	d02a      	beq.n	8003152 <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 80030fc:	492d      	ldr	r1, [pc, #180]	; (80031b4 <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030fe:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				--uxCurrentNumberOfTasks;
 8003102:	680b      	ldr	r3, [r1, #0]
 8003104:	3b01      	subs	r3, #1
 8003106:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003108:	b162      	cbz	r2, 8003124 <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800310a:	2a01      	cmp	r2, #1
 800310c:	d03f      	beq.n	800318e <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800310e:	2a02      	cmp	r2, #2
 8003110:	d00e      	beq.n	8003130 <vTaskDelete+0x64>
 8003112:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	e7fe      	b.n	8003122 <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8003124:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003126:	f001 f8f7 	bl	8004318 <vPortFree>
				vPortFree( pxTCB );
 800312a:	4620      	mov	r0, r4
 800312c:	f001 f8f4 	bl	8004318 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <vTaskDelete+0xec>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	b9ba      	cbnz	r2, 8003168 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <vTaskDelete+0xf0>)
 800313a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800313e:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8003140:	f000 fef2 	bl	8003f28 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003144:	4b1e      	ldr	r3, [pc, #120]	; (80031c0 <vTaskDelete+0xf4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b113      	cbz	r3, 8003150 <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 800314a:	682b      	ldr	r3, [r5, #0]
 800314c:	42a3      	cmp	r3, r4
 800314e:	d012      	beq.n	8003176 <vTaskDelete+0xaa>
	}
 8003150:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003152:	481c      	ldr	r0, [pc, #112]	; (80031c4 <vTaskDelete+0xf8>)
 8003154:	4631      	mov	r1, r6
 8003156:	f7fe fb6b 	bl	8001830 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 800315a:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <vTaskDelete+0xfc>)
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	3301      	adds	r3, #1
 8003160:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8003162:	e7ed      	b.n	8003140 <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003164:	682c      	ldr	r4, [r5, #0]
 8003166:	e7b8      	b.n	80030da <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003168:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800316c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800316e:	68d2      	ldr	r2, [r2, #12]
 8003170:	6852      	ldr	r2, [r2, #4]
 8003172:	601a      	str	r2, [r3, #0]
}
 8003174:	e7e4      	b.n	8003140 <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8003176:	4b15      	ldr	r3, [pc, #84]	; (80031cc <vTaskDelete+0x100>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b163      	cbz	r3, 8003196 <vTaskDelete+0xca>
 800317c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	e7fe      	b.n	800318c <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 800318e:	4620      	mov	r0, r4
 8003190:	f001 f8c2 	bl	8004318 <vPortFree>
 8003194:	e7cc      	b.n	8003130 <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8003196:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800319a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	f3bf 8f6f 	isb	sy
	}
 80031aa:	bd70      	pop	{r4, r5, r6, pc}
 80031ac:	20000bf8 	.word	0x20000bf8
 80031b0:	20001070 	.word	0x20001070
 80031b4:	20001064 	.word	0x20001064
 80031b8:	20000bfc 	.word	0x20000bfc
 80031bc:	200010a0 	.word	0x200010a0
 80031c0:	200010c0 	.word	0x200010c0
 80031c4:	200010d8 	.word	0x200010d8
 80031c8:	20001068 	.word	0x20001068
 80031cc:	2000106c 	.word	0x2000106c

080031d0 <vTaskDelay>:
	{
 80031d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80031d2:	b950      	cbnz	r0, 80031ea <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80031d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80031d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
	}
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80031ea:	4d20      	ldr	r5, [pc, #128]	; (800326c <vTaskDelay+0x9c>)
 80031ec:	682b      	ldr	r3, [r5, #0]
 80031ee:	b143      	cbz	r3, 8003202 <vTaskDelay+0x32>
 80031f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	e7fe      	b.n	8003200 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8003202:	682a      	ldr	r2, [r5, #0]
 8003204:	3201      	adds	r2, #1
 8003206:	4604      	mov	r4, r0
 8003208:	602a      	str	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800320a:	4e19      	ldr	r6, [pc, #100]	; (8003270 <vTaskDelay+0xa0>)
const TickType_t xConstTickCount = xTickCount;
 800320c:	4a19      	ldr	r2, [pc, #100]	; (8003274 <vTaskDelay+0xa4>)
 800320e:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003210:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003212:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003214:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003218:	3004      	adds	r0, #4
 800321a:	f7fe fb31 	bl	8001880 <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800321e:	6833      	ldr	r3, [r6, #0]
 8003220:	19e4      	adds	r4, r4, r7
 8003222:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8003224:	d310      	bcc.n	8003248 <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003226:	4b14      	ldr	r3, [pc, #80]	; (8003278 <vTaskDelay+0xa8>)
 8003228:	6818      	ldr	r0, [r3, #0]
 800322a:	6831      	ldr	r1, [r6, #0]
 800322c:	3104      	adds	r1, #4
 800322e:	f7fe fb0f 	bl	8001850 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8003232:	682b      	ldr	r3, [r5, #0]
 8003234:	b9a3      	cbnz	r3, 8003260 <vTaskDelay+0x90>
 8003236:	f04f 0340 	mov.w	r3, #64	; 0x40
 800323a:	f383 8811 	msr	BASEPRI, r3
 800323e:	f3bf 8f6f 	isb	sy
 8003242:	f3bf 8f4f 	dsb	sy
 8003246:	e7fe      	b.n	8003246 <vTaskDelay+0x76>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <vTaskDelay+0xac>)
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	6831      	ldr	r1, [r6, #0]
 800324e:	3104      	adds	r1, #4
 8003250:	f7fe fafe 	bl	8001850 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8003254:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <vTaskDelay+0xb0>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800325a:	bf38      	it	cc
 800325c:	601c      	strcc	r4, [r3, #0]
 800325e:	e7e8      	b.n	8003232 <vTaskDelay+0x62>
 8003260:	f7ff fe2e 	bl	8002ec0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8003264:	2800      	cmp	r0, #0
 8003266:	d0b5      	beq.n	80031d4 <vTaskDelay+0x4>
	}
 8003268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800326a:	bf00      	nop
 800326c:	2000106c 	.word	0x2000106c
 8003270:	20000bf8 	.word	0x20000bf8
 8003274:	200010ec 	.word	0x200010ec
 8003278:	20000c00 	.word	0x20000c00
 800327c:	20000bfc 	.word	0x20000bfc
 8003280:	200010a0 	.word	0x200010a0

08003284 <vTaskStartScheduler>:
{
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003288:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800328a:	4668      	mov	r0, sp
 800328c:	aa02      	add	r2, sp, #8
 800328e:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003290:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003294:	f7fe f9b4 	bl	8001600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003298:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 800329a:	b1c8      	cbz	r0, 80032d0 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800329c:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 800329e:	b174      	cbz	r4, 80032be <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80032a0:	236c      	movs	r3, #108	; 0x6c
 80032a2:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032a4:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032a6:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d01a      	beq.n	80032e2 <vTaskStartScheduler+0x5e>
 80032ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	e7fe      	b.n	80032bc <vTaskStartScheduler+0x38>
 80032be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80032ce:	e7fe      	b.n	80032ce <vTaskStartScheduler+0x4a>
 80032d0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80032e0:	e7fe      	b.n	80032e0 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032e2:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032e4:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032e6:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032e8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032ec:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032ee:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80032f0:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032f2:	f007 fcb7 	bl	800ac64 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032f8:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <vTaskStartScheduler+0x124>)
 80032fa:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032fc:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032fe:	4415      	add	r5, r2
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003300:	2249      	movs	r2, #73	; 0x49
 8003302:	f801 2f34 	strb.w	r2, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003306:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 800330a:	f103 001f 	add.w	r0, r3, #31
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800330e:	4298      	cmp	r0, r3
 8003310:	d005      	beq.n	800331e <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003312:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003316:	f801 2f01 	strb.w	r2, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800331a:	2a00      	cmp	r2, #0
 800331c:	d1f7      	bne.n	800330e <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800331e:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003320:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8003322:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003326:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 800332a:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800332c:	f7fe fa7c 	bl	8001828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003330:	f104 0018 	add.w	r0, r4, #24
 8003334:	f7fe fa78 	bl	8001828 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003338:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800333a:	491c      	ldr	r1, [pc, #112]	; (80033ac <vTaskStartScheduler+0x128>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333c:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800333e:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 8003340:	6665      	str	r5, [r4, #100]	; 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003342:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003344:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003346:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 800334a:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800334e:	4630      	mov	r0, r6
 8003350:	f000 fd9e 	bl	8003e90 <pxPortInitialiseStack>
 8003354:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fb92 	bl	8002a80 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 800335c:	f000 fce8 	bl	8003d30 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003360:	2801      	cmp	r0, #1
 8003362:	d00c      	beq.n	800337e <vTaskStartScheduler+0xfa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003364:	3001      	adds	r0, #1
 8003366:	d001      	beq.n	800336c <vTaskStartScheduler+0xe8>
}
 8003368:	b004      	add	sp, #16
 800336a:	bd70      	pop	{r4, r5, r6, pc}
 800336c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800337c:	e7fe      	b.n	800337c <vTaskStartScheduler+0xf8>
 800337e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800338e:	4908      	ldr	r1, [pc, #32]	; (80033b0 <vTaskStartScheduler+0x12c>)
		xSchedulerRunning = pdTRUE;
 8003390:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <vTaskStartScheduler+0x130>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003392:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <vTaskStartScheduler+0x134>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8003394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003398:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800339a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800339c:	601d      	str	r5, [r3, #0]
}
 800339e:	b004      	add	sp, #16
 80033a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80033a4:	f000 be30 	b.w	8004008 <xPortStartScheduler>
 80033a8:	0800dd6c 	.word	0x0800dd6c
 80033ac:	08002cdd 	.word	0x08002cdd
 80033b0:	200010a0 	.word	0x200010a0
 80033b4:	200010c0 	.word	0x200010c0
 80033b8:	200010ec 	.word	0x200010ec

080033bc <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80033bc:	4a02      	ldr	r2, [pc, #8]	; (80033c8 <vTaskSuspendAll+0xc>)
 80033be:	6813      	ldr	r3, [r2, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000106c 	.word	0x2000106c

080033cc <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <xTaskResumeAll+0x1c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b943      	cbnz	r3, 80033e4 <xTaskResumeAll+0x18>
 80033d2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	e7fe      	b.n	80033e2 <xTaskResumeAll+0x16>
 80033e4:	f7ff bd6c 	b.w	8002ec0 <xTaskResumeAll.part.0>
 80033e8:	2000106c 	.word	0x2000106c

080033ec <xTaskGetTickCount>:
		xTicks = xTickCount;
 80033ec:	4b01      	ldr	r3, [pc, #4]	; (80033f4 <xTaskGetTickCount+0x8>)
 80033ee:	6818      	ldr	r0, [r3, #0]
}
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	200010ec 	.word	0x200010ec

080033f8 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <xTaskIncrementTick+0x18>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	b90b      	cbnz	r3, 8003402 <xTaskIncrementTick+0xa>
 80033fe:	f7ff bcbb 	b.w	8002d78 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8003402:	4a04      	ldr	r2, [pc, #16]	; (8003414 <xTaskIncrementTick+0x1c>)
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	3301      	adds	r3, #1
}
 8003408:	2000      	movs	r0, #0
		++xPendedTicks;
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	2000106c 	.word	0x2000106c
 8003414:	200010a8 	.word	0x200010a8

08003418 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003418:	4b04      	ldr	r3, [pc, #16]	; (800342c <vTaskSwitchContext+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b11b      	cbz	r3, 8003426 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800341e:	4b04      	ldr	r3, [pc, #16]	; (8003430 <vTaskSwitchContext+0x18>)
 8003420:	2201      	movs	r2, #1
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	4770      	bx	lr
 8003426:	f7ff bbb3 	b.w	8002b90 <vTaskSwitchContext.part.0>
 800342a:	bf00      	nop
 800342c:	2000106c 	.word	0x2000106c
 8003430:	200010f0 	.word	0x200010f0

08003434 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003434:	b1f0      	cbz	r0, 8003474 <vTaskPlaceOnEventList+0x40>
{
 8003436:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003438:	4d1c      	ldr	r5, [pc, #112]	; (80034ac <vTaskPlaceOnEventList+0x78>)
 800343a:	460c      	mov	r4, r1
 800343c:	6829      	ldr	r1, [r5, #0]
 800343e:	3118      	adds	r1, #24
 8003440:	f7fe fa06 	bl	8001850 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <vTaskPlaceOnEventList+0x7c>)
 8003446:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003448:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800344a:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800344c:	2200      	movs	r2, #0
 800344e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003452:	3004      	adds	r0, #4
 8003454:	f7fe fa14 	bl	8001880 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003458:	1c63      	adds	r3, r4, #1
 800345a:	d014      	beq.n	8003486 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800345c:	682b      	ldr	r3, [r5, #0]
 800345e:	19a4      	adds	r4, r4, r6
 8003460:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003462:	d317      	bcc.n	8003494 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <vTaskPlaceOnEventList+0x80>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	6829      	ldr	r1, [r5, #0]
}
 800346a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346e:	3104      	adds	r1, #4
 8003470:	f7fe b9ee 	b.w	8001850 <vListInsert>
 8003474:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003478:	f383 8811 	msr	BASEPRI, r3
 800347c:	f3bf 8f6f 	isb	sy
 8003480:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003484:	e7fe      	b.n	8003484 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003486:	6829      	ldr	r1, [r5, #0]
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <vTaskPlaceOnEventList+0x84>)
}
 800348a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348e:	3104      	adds	r1, #4
 8003490:	f7fe b9ce 	b.w	8001830 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <vTaskPlaceOnEventList+0x88>)
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	6829      	ldr	r1, [r5, #0]
 800349a:	3104      	adds	r1, #4
 800349c:	f7fe f9d8 	bl	8001850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <vTaskPlaceOnEventList+0x8c>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80034a6:	bf38      	it	cc
 80034a8:	601c      	strcc	r4, [r3, #0]
}
 80034aa:	bd70      	pop	{r4, r5, r6, pc}
 80034ac:	20000bf8 	.word	0x20000bf8
 80034b0:	200010ec 	.word	0x200010ec
 80034b4:	20000c00 	.word	0x20000c00
 80034b8:	200010c4 	.word	0x200010c4
 80034bc:	20000bfc 	.word	0x20000bfc
 80034c0:	200010a0 	.word	0x200010a0

080034c4 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d02e      	beq.n	8003526 <vTaskPlaceOnUnorderedEventList+0x62>
	configASSERT( uxSchedulerSuspended != 0 );
 80034c8:	4b25      	ldr	r3, [pc, #148]	; (8003560 <vTaskPlaceOnUnorderedEventList+0x9c>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	b943      	cbnz	r3, 80034e0 <vTaskPlaceOnUnorderedEventList+0x1c>
 80034ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	e7fe      	b.n	80034de <vTaskPlaceOnUnorderedEventList+0x1a>
{
 80034e0:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80034e2:	4d20      	ldr	r5, [pc, #128]	; (8003564 <vTaskPlaceOnUnorderedEventList+0xa0>)
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80034ea:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ec:	6829      	ldr	r1, [r5, #0]
 80034ee:	3118      	adds	r1, #24
 80034f0:	4614      	mov	r4, r2
 80034f2:	f7fe f99d 	bl	8001830 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 80034f6:	4b1c      	ldr	r3, [pc, #112]	; (8003568 <vTaskPlaceOnUnorderedEventList+0xa4>)
 80034f8:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034fa:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034fc:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003504:	3004      	adds	r0, #4
 8003506:	f7fe f9bb 	bl	8001880 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800350a:	1c63      	adds	r3, r4, #1
 800350c:	d014      	beq.n	8003538 <vTaskPlaceOnUnorderedEventList+0x74>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800350e:	682b      	ldr	r3, [r5, #0]
 8003510:	19a4      	adds	r4, r4, r6
 8003512:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003514:	d317      	bcc.n	8003546 <vTaskPlaceOnUnorderedEventList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <vTaskPlaceOnUnorderedEventList+0xa8>)
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	6829      	ldr	r1, [r5, #0]
}
 800351c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003520:	3104      	adds	r1, #4
 8003522:	f7fe b995 	b.w	8001850 <vListInsert>
 8003526:	f04f 0340 	mov.w	r3, #64	; 0x40
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003536:	e7fe      	b.n	8003536 <vTaskPlaceOnUnorderedEventList+0x72>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003538:	6829      	ldr	r1, [r5, #0]
 800353a:	480d      	ldr	r0, [pc, #52]	; (8003570 <vTaskPlaceOnUnorderedEventList+0xac>)
}
 800353c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003540:	3104      	adds	r1, #4
 8003542:	f7fe b975 	b.w	8001830 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	6829      	ldr	r1, [r5, #0]
 800354c:	3104      	adds	r1, #4
 800354e:	f7fe f97f 	bl	8001850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003558:	bf38      	it	cc
 800355a:	601c      	strcc	r4, [r3, #0]
}
 800355c:	bd70      	pop	{r4, r5, r6, pc}
 800355e:	bf00      	nop
 8003560:	2000106c 	.word	0x2000106c
 8003564:	20000bf8 	.word	0x20000bf8
 8003568:	200010ec 	.word	0x200010ec
 800356c:	20000c00 	.word	0x20000c00
 8003570:	200010c4 	.word	0x200010c4
 8003574:	20000bfc 	.word	0x20000bfc
 8003578:	200010a0 	.word	0x200010a0

0800357c <vTaskPlaceOnEventListRestricted>:
	{
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800357e:	b360      	cbz	r0, 80035da <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003580:	4e20      	ldr	r6, [pc, #128]	; (8003604 <vTaskPlaceOnEventListRestricted+0x88>)
 8003582:	460c      	mov	r4, r1
 8003584:	6831      	ldr	r1, [r6, #0]
 8003586:	4615      	mov	r5, r2
 8003588:	3118      	adds	r1, #24
 800358a:	f7fe f951 	bl	8001830 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 8003590:	b99d      	cbnz	r5, 80035ba <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 8003592:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003594:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003596:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003598:	f883 506a 	strb.w	r5, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800359c:	3004      	adds	r0, #4
 800359e:	f7fe f96f 	bl	8001880 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035a2:	6833      	ldr	r3, [r6, #0]
 80035a4:	19e4      	adds	r4, r4, r7
 80035a6:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035a8:	d320      	bcc.n	80035ec <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035aa:	4b18      	ldr	r3, [pc, #96]	; (800360c <vTaskPlaceOnEventListRestricted+0x90>)
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	6831      	ldr	r1, [r6, #0]
	}
 80035b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035b4:	3104      	adds	r1, #4
 80035b6:	f7fe b94b 	b.w	8001850 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80035ba:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80035bc:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035be:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c6:	3004      	adds	r0, #4
 80035c8:	f7fe f95a 	bl	8001880 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035cc:	6831      	ldr	r1, [r6, #0]
 80035ce:	4810      	ldr	r0, [pc, #64]	; (8003610 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 80035d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d4:	3104      	adds	r1, #4
 80035d6:	f7fe b92b 	b.w	8001830 <vListInsertEnd>
 80035da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80035ea:	e7fe      	b.n	80035ea <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <vTaskPlaceOnEventListRestricted+0x98>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	6831      	ldr	r1, [r6, #0]
 80035f2:	3104      	adds	r1, #4
 80035f4:	f7fe f92c 	bl	8001850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <vTaskPlaceOnEventListRestricted+0x9c>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80035fe:	bf38      	it	cc
 8003600:	601c      	strcc	r4, [r3, #0]
	}
 8003602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003604:	20000bf8 	.word	0x20000bf8
 8003608:	200010ec 	.word	0x200010ec
 800360c:	20000c00 	.word	0x20000c00
 8003610:	200010c4 	.word	0x200010c4
 8003614:	20000bfc 	.word	0x20000bfc
 8003618:	200010a0 	.word	0x200010a0

0800361c <xTaskRemoveFromEventList>:
{
 800361c:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800361e:	68c3      	ldr	r3, [r0, #12]
 8003620:	68dc      	ldr	r4, [r3, #12]
{
 8003622:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8003624:	2c00      	cmp	r4, #0
 8003626:	d02b      	beq.n	8003680 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003628:	f104 0518 	add.w	r5, r4, #24
 800362c:	4628      	mov	r0, r5
 800362e:	f7fe f927 	bl	8001880 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003632:	4b18      	ldr	r3, [pc, #96]	; (8003694 <xTaskRemoveFromEventList+0x78>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b17b      	cbz	r3, 8003658 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003638:	4817      	ldr	r0, [pc, #92]	; (8003698 <xTaskRemoveFromEventList+0x7c>)
 800363a:	4629      	mov	r1, r5
 800363c:	f7fe f8f8 	bl	8001830 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003640:	4b16      	ldr	r3, [pc, #88]	; (800369c <xTaskRemoveFromEventList+0x80>)
 8003642:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800364a:	bf85      	ittet	hi
 800364c:	4b14      	ldrhi	r3, [pc, #80]	; (80036a0 <xTaskRemoveFromEventList+0x84>)
 800364e:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 8003650:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003652:	6018      	strhi	r0, [r3, #0]
}
 8003654:	b003      	add	sp, #12
 8003656:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003658:	1d21      	adds	r1, r4, #4
 800365a:	4608      	mov	r0, r1
 800365c:	9101      	str	r1, [sp, #4]
 800365e:	f7fe f90f 	bl	8001880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003662:	4a10      	ldr	r2, [pc, #64]	; (80036a4 <xTaskRemoveFromEventList+0x88>)
 8003664:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003666:	6810      	ldr	r0, [r2, #0]
 8003668:	9901      	ldr	r1, [sp, #4]
 800366a:	4283      	cmp	r3, r0
 800366c:	480e      	ldr	r0, [pc, #56]	; (80036a8 <xTaskRemoveFromEventList+0x8c>)
 800366e:	bf88      	it	hi
 8003670:	6013      	strhi	r3, [r2, #0]
 8003672:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003676:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800367a:	f7fe f8d9 	bl	8001830 <vListInsertEnd>
 800367e:	e7df      	b.n	8003640 <xTaskRemoveFromEventList+0x24>
 8003680:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003684:	f383 8811 	msr	BASEPRI, r3
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003690:	e7fe      	b.n	8003690 <xTaskRemoveFromEventList+0x74>
 8003692:	bf00      	nop
 8003694:	2000106c 	.word	0x2000106c
 8003698:	200010ac 	.word	0x200010ac
 800369c:	20000bf8 	.word	0x20000bf8
 80036a0:	200010f0 	.word	0x200010f0
 80036a4:	20001074 	.word	0x20001074
 80036a8:	20000c04 	.word	0x20000c04

080036ac <vTaskRemoveFromUnorderedEventList>:
{
 80036ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80036ae:	4b1c      	ldr	r3, [pc, #112]	; (8003720 <vTaskRemoveFromUnorderedEventList+0x74>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	b942      	cbnz	r2, 80036c6 <vTaskRemoveFromUnorderedEventList+0x1a>
 80036b4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	e7fe      	b.n	80036c4 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036c6:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80036c8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80036cc:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 80036ce:	b1ec      	cbz	r4, 800370c <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036d0:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 80036d2:	f7fe f8d5 	bl	8001880 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036d6:	4628      	mov	r0, r5
 80036d8:	f7fe f8d2 	bl	8001880 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80036dc:	4a11      	ldr	r2, [pc, #68]	; (8003724 <vTaskRemoveFromUnorderedEventList+0x78>)
 80036de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036e0:	6811      	ldr	r1, [r2, #0]
 80036e2:	4811      	ldr	r0, [pc, #68]	; (8003728 <vTaskRemoveFromUnorderedEventList+0x7c>)
 80036e4:	428b      	cmp	r3, r1
 80036e6:	bf88      	it	hi
 80036e8:	6013      	strhi	r3, [r2, #0]
 80036ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ee:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80036f2:	4629      	mov	r1, r5
 80036f4:	f7fe f89c 	bl	8001830 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <vTaskRemoveFromUnorderedEventList+0x80>)
 80036fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003700:	429a      	cmp	r2, r3
 8003702:	d902      	bls.n	800370a <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <vTaskRemoveFromUnorderedEventList+0x84>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bd38      	pop	{r3, r4, r5, pc}
 800370c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003710:	f383 8811 	msr	BASEPRI, r3
 8003714:	f3bf 8f6f 	isb	sy
 8003718:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800371c:	e7fe      	b.n	800371c <vTaskRemoveFromUnorderedEventList+0x70>
 800371e:	bf00      	nop
 8003720:	2000106c 	.word	0x2000106c
 8003724:	20001074 	.word	0x20001074
 8003728:	20000c04 	.word	0x20000c04
 800372c:	20000bf8 	.word	0x20000bf8
 8003730:	200010f0 	.word	0x200010f0

08003734 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003734:	4a03      	ldr	r2, [pc, #12]	; (8003744 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003738:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	e9c0 2300 	strd	r2, r3, [r0]
}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	200010a4 	.word	0x200010a4
 8003748:	200010ec 	.word	0x200010ec

0800374c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 800374c:	b328      	cbz	r0, 800379a <xTaskCheckForTimeOut+0x4e>
{
 800374e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003750:	460d      	mov	r5, r1
 8003752:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8003754:	b1c1      	cbz	r1, 8003788 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 8003756:	4604      	mov	r4, r0
 8003758:	f000 fbc4 	bl	8003ee4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800375c:	4a22      	ldr	r2, [pc, #136]	; (80037e8 <xTaskCheckForTimeOut+0x9c>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <xTaskCheckForTimeOut+0xa0>)
		const TickType_t xConstTickCount = xTickCount;
 8003760:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
 8003768:	bb00      	cbnz	r0, 80037ac <xTaskCheckForTimeOut+0x60>
			if( *pxTicksToWait == portMAX_DELAY )
 800376a:	682b      	ldr	r3, [r5, #0]
 800376c:	1c59      	adds	r1, r3, #1
 800376e:	d022      	beq.n	80037b6 <xTaskCheckForTimeOut+0x6a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003770:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80037f0 <xTaskCheckForTimeOut+0xa4>
 8003774:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003778:	f8de 7000 	ldr.w	r7, [lr]
 800377c:	42b8      	cmp	r0, r7
 800377e:	d020      	beq.n	80037c2 <xTaskCheckForTimeOut+0x76>
 8003780:	42b1      	cmp	r1, r6
 8003782:	d81e      	bhi.n	80037c2 <xTaskCheckForTimeOut+0x76>
			xReturn = pdTRUE;
 8003784:	2001      	movs	r0, #1
 8003786:	e016      	b.n	80037b6 <xTaskCheckForTimeOut+0x6a>
 8003788:	f04f 0340 	mov.w	r3, #64	; 0x40
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003798:	e7fe      	b.n	8003798 <xTaskCheckForTimeOut+0x4c>
 800379a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80037aa:	e7fe      	b.n	80037aa <xTaskCheckForTimeOut+0x5e>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 80037b4:	2001      	movs	r0, #1
 80037b6:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80037b8:	f000 fbb6 	bl	8003f28 <vPortExitCritical>
}
 80037bc:	9801      	ldr	r0, [sp, #4]
 80037be:	b003      	add	sp, #12
 80037c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037c2:	eba6 0c01 	sub.w	ip, r6, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80037c6:	4563      	cmp	r3, ip
 80037c8:	d909      	bls.n	80037de <xTaskCheckForTimeOut+0x92>
			*pxTicksToWait -= xElapsedTime;
 80037ca:	1b9b      	subs	r3, r3, r6
 80037cc:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037ce:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037d2:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80037d4:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 80037d6:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 80037d8:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80037dc:	e7eb      	b.n	80037b6 <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait = 0;
 80037de:	2300      	movs	r3, #0
 80037e0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80037e2:	2001      	movs	r0, #1
 80037e4:	e7e7      	b.n	80037b6 <xTaskCheckForTimeOut+0x6a>
 80037e6:	bf00      	nop
 80037e8:	200010ec 	.word	0x200010ec
 80037ec:	20000bf8 	.word	0x20000bf8
 80037f0:	200010a4 	.word	0x200010a4

080037f4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80037f4:	4b01      	ldr	r3, [pc, #4]	; (80037fc <vTaskMissedYield+0x8>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	4770      	bx	lr
 80037fc:	200010f0 	.word	0x200010f0

08003800 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003800:	4b05      	ldr	r3, [pc, #20]	; (8003818 <xTaskGetSchedulerState+0x18>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	b133      	cbz	r3, 8003814 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003806:	4b05      	ldr	r3, [pc, #20]	; (800381c <xTaskGetSchedulerState+0x1c>)
 8003808:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2002      	moveq	r0, #2
 8003810:	2000      	movne	r0, #0
 8003812:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003814:	2001      	movs	r0, #1
	}
 8003816:	4770      	bx	lr
 8003818:	200010c0 	.word	0x200010c0
 800381c:	2000106c 	.word	0x2000106c

08003820 <xTaskPriorityInherit>:
	{
 8003820:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8003822:	4604      	mov	r4, r0
	{
 8003824:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8003826:	b1c8      	cbz	r0, 800385c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003828:	4d1d      	ldr	r5, [pc, #116]	; (80038a0 <xTaskPriorityInherit+0x80>)
 800382a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800382c:	682a      	ldr	r2, [r5, #0]
 800382e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003830:	4293      	cmp	r3, r2
 8003832:	d215      	bcs.n	8003860 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003834:	6982      	ldr	r2, [r0, #24]
 8003836:	2a00      	cmp	r2, #0
 8003838:	db04      	blt.n	8003844 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800383a:	682a      	ldr	r2, [r5, #0]
 800383c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800383e:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8003842:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003844:	4e17      	ldr	r6, [pc, #92]	; (80038a4 <xTaskPriorityInherit+0x84>)
 8003846:	6962      	ldr	r2, [r4, #20]
 8003848:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800384c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d00e      	beq.n	8003872 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 800385a:	2001      	movs	r0, #1
	}
 800385c:	b002      	add	sp, #8
 800385e:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003860:	682b      	ldr	r3, [r5, #0]
 8003862:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4298      	cmp	r0, r3
 8003868:	bf2c      	ite	cs
 800386a:	2000      	movcs	r0, #0
 800386c:	2001      	movcc	r0, #1
	}
 800386e:	b002      	add	sp, #8
 8003870:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003872:	1d21      	adds	r1, r4, #4
 8003874:	4608      	mov	r0, r1
 8003876:	9101      	str	r1, [sp, #4]
 8003878:	f7fe f802 	bl	8001880 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800387c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800387e:	4b0a      	ldr	r3, [pc, #40]	; (80038a8 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003880:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003882:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003884:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003886:	4290      	cmp	r0, r2
 8003888:	bf88      	it	hi
 800388a:	6018      	strhi	r0, [r3, #0]
 800388c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003890:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003894:	9901      	ldr	r1, [sp, #4]
 8003896:	f7fd ffcb 	bl	8001830 <vListInsertEnd>
				xReturn = pdTRUE;
 800389a:	2001      	movs	r0, #1
 800389c:	e7de      	b.n	800385c <xTaskPriorityInherit+0x3c>
 800389e:	bf00      	nop
 80038a0:	20000bf8 	.word	0x20000bf8
 80038a4:	20000c04 	.word	0x20000c04
 80038a8:	20001074 	.word	0x20001074

080038ac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80038ac:	b318      	cbz	r0, 80038f6 <xTaskPriorityDisinherit+0x4a>
	{
 80038ae:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80038b0:	4b1e      	ldr	r3, [pc, #120]	; (800392c <xTaskPriorityDisinherit+0x80>)
 80038b2:	681c      	ldr	r4, [r3, #0]
 80038b4:	4284      	cmp	r4, r0
	{
 80038b6:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80038b8:	d008      	beq.n	80038cc <xTaskPriorityDisinherit+0x20>
 80038ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	e7fe      	b.n	80038ca <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80038cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80038ce:	b14b      	cbz	r3, 80038e4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 80038d4:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038d6:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80038d8:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038da:	d000      	beq.n	80038de <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80038dc:	b16b      	cbz	r3, 80038fa <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80038de:	2000      	movs	r0, #0
	}
 80038e0:	b002      	add	sp, #8
 80038e2:	bd10      	pop	{r4, pc}
 80038e4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038e8:	f383 8811 	msr	BASEPRI, r3
 80038ec:	f3bf 8f6f 	isb	sy
 80038f0:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80038f4:	e7fe      	b.n	80038f4 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80038f6:	2000      	movs	r0, #0
	}
 80038f8:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038fa:	1d21      	adds	r1, r4, #4
 80038fc:	4608      	mov	r0, r1
 80038fe:	9101      	str	r1, [sp, #4]
 8003900:	f7fd ffbe 	bl	8001880 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003904:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 8003906:	4a0a      	ldr	r2, [pc, #40]	; (8003930 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003908:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800390a:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 800390e:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003910:	6810      	ldr	r0, [r2, #0]
 8003912:	9901      	ldr	r1, [sp, #4]
 8003914:	4283      	cmp	r3, r0
 8003916:	4807      	ldr	r0, [pc, #28]	; (8003934 <xTaskPriorityDisinherit+0x88>)
 8003918:	bf88      	it	hi
 800391a:	6013      	strhi	r3, [r2, #0]
 800391c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003920:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003924:	f7fd ff84 	bl	8001830 <vListInsertEnd>
					xReturn = pdTRUE;
 8003928:	2001      	movs	r0, #1
		return xReturn;
 800392a:	e7d9      	b.n	80038e0 <xTaskPriorityDisinherit+0x34>
 800392c:	20000bf8 	.word	0x20000bf8
 8003930:	20001074 	.word	0x20001074
 8003934:	20000c04 	.word	0x20000c04

08003938 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003938:	2800      	cmp	r0, #0
 800393a:	d041      	beq.n	80039c0 <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 800393c:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800393e:	6e03      	ldr	r3, [r0, #96]	; 0x60
	{
 8003940:	b083      	sub	sp, #12
 8003942:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8003944:	b153      	cbz	r3, 800395c <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003946:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003948:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800394a:	4281      	cmp	r1, r0
 800394c:	bf38      	it	cc
 800394e:	4601      	movcc	r1, r0
 8003950:	428a      	cmp	r2, r1
 8003952:	d001      	beq.n	8003958 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003954:	2b01      	cmp	r3, #1
 8003956:	d00a      	beq.n	800396e <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8003958:	b003      	add	sp, #12
 800395a:	bd30      	pop	{r4, r5, pc}
 800395c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800396c:	e7fe      	b.n	800396c <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 800396e:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	42a3      	cmp	r3, r4
 8003974:	d025      	beq.n	80039c2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003976:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003978:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800397a:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800397c:	bfa8      	it	ge
 800397e:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003982:	4d15      	ldr	r5, [pc, #84]	; (80039d8 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003984:	bfa8      	it	ge
 8003986:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003988:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800398c:	6961      	ldr	r1, [r4, #20]
 800398e:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8003992:	4299      	cmp	r1, r3
 8003994:	d1e0      	bne.n	8003958 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003996:	1d21      	adds	r1, r4, #4
 8003998:	4608      	mov	r0, r1
 800399a:	9101      	str	r1, [sp, #4]
 800399c:	f7fd ff70 	bl	8001880 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80039a0:	4b0e      	ldr	r3, [pc, #56]	; (80039dc <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80039a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	9901      	ldr	r1, [sp, #4]
 80039a8:	4290      	cmp	r0, r2
 80039aa:	bf88      	it	hi
 80039ac:	6018      	strhi	r0, [r3, #0]
 80039ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80039b2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80039b6:	b003      	add	sp, #12
 80039b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80039bc:	f7fd bf38 	b.w	8001830 <vListInsertEnd>
 80039c0:	4770      	bx	lr
 80039c2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80039c6:	f383 8811 	msr	BASEPRI, r3
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80039d2:	e7fe      	b.n	80039d2 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 80039d4:	20000bf8 	.word	0x20000bf8
 80039d8:	20000c04 	.word	0x20000c04
 80039dc:	20001074 	.word	0x20001074

080039e0 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <uxTaskResetEventItemValue+0x14>)
 80039e2:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e4:	6813      	ldr	r3, [r2, #0]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80039ea:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ec:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80039f0:	6193      	str	r3, [r2, #24]
}
 80039f2:	4770      	bx	lr
 80039f4:	20000bf8 	.word	0x20000bf8

080039f8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80039f8:	4b04      	ldr	r3, [pc, #16]	; (8003a0c <pvTaskIncrementMutexHeldCount+0x14>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	b11a      	cbz	r2, 8003a06 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80039fe:	6819      	ldr	r1, [r3, #0]
 8003a00:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 8003a02:	3201      	adds	r2, #1
 8003a04:	660a      	str	r2, [r1, #96]	; 0x60
		return pxCurrentTCB;
 8003a06:	6818      	ldr	r0, [r3, #0]
	}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	20000bf8 	.word	0x20000bf8

08003a10 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a14:	4e22      	ldr	r6, [pc, #136]	; (8003aa0 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8003a16:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003aa8 <prvSwitchTimerLists+0x98>
{
 8003a1a:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003a1c:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a20:	e00d      	b.n	8003a3e <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a22:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a24:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a26:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a28:	1d25      	adds	r5, r4, #4
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7fd ff28 	bl	8001880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a30:	6a23      	ldr	r3, [r4, #32]
 8003a32:	4620      	mov	r0, r4
 8003a34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a36:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003a3a:	075b      	lsls	r3, r3, #29
 8003a3c:	d40a      	bmi.n	8003a54 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a3e:	6833      	ldr	r3, [r6, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2a00      	cmp	r2, #0
 8003a44:	d1ed      	bne.n	8003a22 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <prvSwitchTimerLists+0x94>)
 8003a48:	6811      	ldr	r1, [r2, #0]
 8003a4a:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8003a4c:	6013      	str	r3, [r2, #0]
}
 8003a4e:	b005      	add	sp, #20
 8003a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003a54:	69a3      	ldr	r3, [r4, #24]
 8003a56:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8003a58:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a5a:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8003a5c:	d205      	bcs.n	8003a6a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a5e:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003a60:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a62:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a64:	f7fd fef4 	bl	8001850 <vListInsert>
 8003a68:	e7e9      	b.n	8003a3e <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8003a6a:	f8d9 3000 	ldr.w	r3, [r9]
 8003a6e:	b16b      	cbz	r3, 8003a8c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a70:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a74:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a76:	f7ff fec3 	bl	8003800 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f8d9 0000 	ldr.w	r0, [r9]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4669      	mov	r1, sp
 8003a84:	f7fe f802 	bl	8001a8c <xQueueGenericSend>
				configASSERT( xResult );
 8003a88:	2800      	cmp	r0, #0
 8003a8a:	d1d8      	bne.n	8003a3e <prvSwitchTimerLists+0x2e>
 8003a8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	e7fe      	b.n	8003a9c <prvSwitchTimerLists+0x8c>
 8003a9e:	bf00      	nop
 8003aa0:	200010f4 	.word	0x200010f4
 8003aa4:	200010f8 	.word	0x200010f8
 8003aa8:	20001218 	.word	0x20001218

08003aac <prvTimerTask>:
{
 8003aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	4e9b      	ldr	r6, [pc, #620]	; (8003d20 <prvTimerTask+0x274>)
 8003ab2:	4d9c      	ldr	r5, [pc, #624]	; (8003d24 <prvTimerTask+0x278>)
 8003ab4:	4c9c      	ldr	r4, [pc, #624]	; (8003d28 <prvTimerTask+0x27c>)
 8003ab6:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 8003ab8:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8003abc:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ac0:	6833      	ldr	r3, [r6, #0]
 8003ac2:	681f      	ldr	r7, [r3, #0]
 8003ac4:	2f00      	cmp	r7, #0
 8003ac6:	f000 80a8 	beq.w	8003c1a <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8003ace:	f7ff fc75 	bl	80033bc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003ad2:	f7ff fc8b 	bl	80033ec <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003ad6:	682a      	ldr	r2, [r5, #0]
 8003ad8:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8003ada:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003adc:	f0c0 80ae 	bcc.w	8003c3c <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ae0:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 8003ae2:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ae4:	f080 80b4 	bcs.w	8003c50 <prvTimerTask+0x1a4>
 8003ae8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003aea:	6820      	ldr	r0, [r4, #0]
 8003aec:	eba7 010a 	sub.w	r1, r7, sl
 8003af0:	f7fe ff62 	bl	80029b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003af4:	f7ff fc6a 	bl	80033cc <xTaskResumeAll>
 8003af8:	b928      	cbnz	r0, 8003b06 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8003afa:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003b06:	6820      	ldr	r0, [r4, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	a902      	add	r1, sp, #8
 8003b0c:	f7fe fa32 	bl	8001f74 <xQueueReceive>
 8003b10:	2800      	cmp	r0, #0
 8003b12:	d0d5      	beq.n	8003ac0 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003b14:	9b02      	ldr	r3, [sp, #8]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	db76      	blt.n	8003c08 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b1a:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	b113      	cbz	r3, 8003b26 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b20:	1d38      	adds	r0, r7, #4
 8003b22:	f7fd fead 	bl	8001880 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003b26:	f7ff fc61 	bl	80033ec <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003b2a:	682b      	ldr	r3, [r5, #0]
 8003b2c:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003b2e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003b30:	f0c0 808b 	bcc.w	8003c4a <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 8003b34:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8003b36:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d8e3      	bhi.n	8003b06 <prvTimerTask+0x5a>
 8003b3e:	e8df f003 	tbb	[pc, r3]
 8003b42:	0505      	.short	0x0505
 8003b44:	5a3d5305 	.word	0x5a3d5305
 8003b48:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b50:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b52:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	1899      	adds	r1, r3, r2
 8003b60:	bf2c      	ite	cs
 8003b62:	2001      	movcs	r0, #1
 8003b64:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8003b66:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b68:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003b6a:	f200 808c 	bhi.w	8003c86 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6e:	ebaa 0303 	sub.w	r3, sl, r3
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d832      	bhi.n	8003bdc <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	4638      	mov	r0, r7
 8003b7a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b80:	075b      	lsls	r3, r3, #29
 8003b82:	d5c0      	bpl.n	8003b06 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	b183      	cbz	r3, 8003baa <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8003b88:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b8a:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8003b8c:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b8e:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b90:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b92:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b94:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b96:	f7ff fe33 	bl	8003800 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6820      	ldr	r0, [r4, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	a906      	add	r1, sp, #24
 8003ba2:	f7fd ff73 	bl	8001a8c <xQueueGenericSend>
							configASSERT( xResult );
 8003ba6:	2800      	cmp	r0, #0
 8003ba8:	d1ad      	bne.n	8003b06 <prvTimerTask+0x5a>
 8003baa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	e7fe      	b.n	8003bba <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003bbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 809d 	beq.w	8003d0c <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bd2:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8003bd4:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bd6:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bd8:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003bda:	d85e      	bhi.n	8003c9a <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003bdc:	4b53      	ldr	r3, [pc, #332]	; (8003d2c <prvTimerTask+0x280>)
 8003bde:	1d39      	adds	r1, r7, #4
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	f7fd fe35 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003be6:	e78e      	b.n	8003b06 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003be8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bec:	f023 0301 	bic.w	r3, r3, #1
 8003bf0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8003bf4:	e787      	b.n	8003b06 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bf6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003bfa:	079a      	lsls	r2, r3, #30
 8003bfc:	d552      	bpl.n	8003ca4 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003c06:	e77e      	b.n	8003b06 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003c08:	9b03      	ldr	r3, [sp, #12]
 8003c0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003c0e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c10:	9b02      	ldr	r3, [sp, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f6ff af77 	blt.w	8003b06 <prvTimerTask+0x5a>
 8003c18:	e77f      	b.n	8003b1a <prvTimerTask+0x6e>
	vTaskSuspendAll();
 8003c1a:	f7ff fbcf 	bl	80033bc <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003c1e:	f7ff fbe5 	bl	80033ec <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003c22:	682a      	ldr	r2, [r5, #0]
 8003c24:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8003c26:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003c28:	d808      	bhi.n	8003c3c <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c2a:	4b40      	ldr	r3, [pc, #256]	; (8003d2c <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 8003c2c:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	6812      	ldr	r2, [r2, #0]
 8003c34:	fab2 f282 	clz	r2, r2
 8003c38:	0952      	lsrs	r2, r2, #5
 8003c3a:	e756      	b.n	8003aea <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8003c3c:	f7ff fee8 	bl	8003a10 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003c40:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8003c44:	f7ff fbc2 	bl	80033cc <xTaskResumeAll>
 8003c48:	e75d      	b.n	8003b06 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8003c4a:	f7ff fee1 	bl	8003a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c4e:	e771      	b.n	8003b34 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003c50:	f7ff fbbc 	bl	80033cc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c54:	6832      	ldr	r2, [r6, #0]
 8003c56:	68d2      	ldr	r2, [r2, #12]
 8003c58:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c5c:	f10b 0104 	add.w	r1, fp, #4
 8003c60:	4608      	mov	r0, r1
 8003c62:	9101      	str	r1, [sp, #4]
 8003c64:	f7fd fe0c 	bl	8001880 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c68:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8003c6c:	9901      	ldr	r1, [sp, #4]
 8003c6e:	f010 0f04 	tst.w	r0, #4
 8003c72:	d11b      	bne.n	8003cac <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c74:	f020 0001 	bic.w	r0, r0, #1
 8003c78:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c7c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003c80:	4658      	mov	r0, fp
 8003c82:	4798      	blx	r3
}
 8003c84:	e73f      	b.n	8003b06 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003c86:	4553      	cmp	r3, sl
 8003c88:	d902      	bls.n	8003c90 <prvTimerTask+0x1e4>
 8003c8a:	2800      	cmp	r0, #0
 8003c8c:	f43f af73 	beq.w	8003b76 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c90:	6830      	ldr	r0, [r6, #0]
 8003c92:	1d39      	adds	r1, r7, #4
 8003c94:	f7fd fddc 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003c98:	e735      	b.n	8003b06 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c9a:	6830      	ldr	r0, [r6, #0]
 8003c9c:	1d39      	adds	r1, r7, #4
 8003c9e:	f7fd fdd7 	bl	8001850 <vListInsert>
 8003ca2:	e730      	b.n	8003b06 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8003ca4:	4638      	mov	r0, r7
 8003ca6:	f000 fb37 	bl	8004318 <vPortFree>
 8003caa:	e72c      	b.n	8003b06 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cac:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cb0:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cb4:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8003cb6:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cb8:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003cbc:	d203      	bcs.n	8003cc6 <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cbe:	6830      	ldr	r0, [r6, #0]
 8003cc0:	f7fd fdc6 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003cc4:	e7da      	b.n	8003c7c <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc6:	ebaa 0307 	sub.w	r3, sl, r7
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d819      	bhi.n	8003d02 <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	b173      	cbz	r3, 8003cf0 <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003cd6:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003cd8:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cdc:	f7ff fd90 	bl	8003800 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	a906      	add	r1, sp, #24
 8003ce8:	f7fd fed0 	bl	8001a8c <xQueueGenericSend>
			configASSERT( xResult );
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d1c5      	bne.n	8003c7c <prvTimerTask+0x1d0>
 8003cf0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	e7fe      	b.n	8003d00 <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <prvTimerTask+0x280>)
 8003d04:	6818      	ldr	r0, [r3, #0]
 8003d06:	f7fd fda3 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003d0a:	e7b7      	b.n	8003c7c <prvTimerTask+0x1d0>
 8003d0c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d1c:	e7fe      	b.n	8003d1c <prvTimerTask+0x270>
 8003d1e:	bf00      	nop
 8003d20:	200010f4 	.word	0x200010f4
 8003d24:	200011c4 	.word	0x200011c4
 8003d28:	20001218 	.word	0x20001218
 8003d2c:	200010f8 	.word	0x200010f8

08003d30 <xTimerCreateTimerTask>:
{
 8003d30:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003d32:	4c23      	ldr	r4, [pc, #140]	; (8003dc0 <xTimerCreateTimerTask+0x90>)
{
 8003d34:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8003d36:	f000 f8d5 	bl	8003ee4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003d3a:	6825      	ldr	r5, [r4, #0]
 8003d3c:	b335      	cbz	r5, 8003d8c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d3e:	f000 f8f3 	bl	8003f28 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	b1cb      	cbz	r3, 8003d7a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d46:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d48:	aa07      	add	r2, sp, #28
 8003d4a:	a906      	add	r1, sp, #24
 8003d4c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d4e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d52:	f7fd fc63 	bl	800161c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d56:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	9a07      	ldr	r2, [sp, #28]
 8003d64:	4917      	ldr	r1, [pc, #92]	; (8003dc4 <xTimerCreateTimerTask+0x94>)
 8003d66:	4818      	ldr	r0, [pc, #96]	; (8003dc8 <xTimerCreateTimerTask+0x98>)
 8003d68:	4623      	mov	r3, r4
 8003d6a:	f7ff f943 	bl	8002ff4 <xTaskCreateStatic>
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <xTimerCreateTimerTask+0x9c>)
 8003d70:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003d72:	b110      	cbz	r0, 8003d7a <xTimerCreateTimerTask+0x4a>
}
 8003d74:	2001      	movs	r0, #1
 8003d76:	b009      	add	sp, #36	; 0x24
 8003d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d7a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003d8a:	e7fe      	b.n	8003d8a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8003d8c:	4f10      	ldr	r7, [pc, #64]	; (8003dd0 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8003d8e:	4e11      	ldr	r6, [pc, #68]	; (8003dd4 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8003d90:	4638      	mov	r0, r7
 8003d92:	f7fd fd3d 	bl	8001810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d96:	4630      	mov	r0, r6
 8003d98:	f7fd fd3a 	bl	8001810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d9e:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8003da0:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003da2:	4a0e      	ldr	r2, [pc, #56]	; (8003ddc <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8003da6:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003da8:	2110      	movs	r1, #16
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <xTimerCreateTimerTask+0xb4>)
 8003dac:	200a      	movs	r0, #10
 8003dae:	f7fd fdb7 	bl	8001920 <xQueueGenericCreateStatic>
 8003db2:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8003db4:	2800      	cmp	r0, #0
 8003db6:	d0c2      	beq.n	8003d3e <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003db8:	490b      	ldr	r1, [pc, #44]	; (8003de8 <xTimerCreateTimerTask+0xb8>)
 8003dba:	f7fe fdd5 	bl	8002968 <vQueueAddToRegistry>
 8003dbe:	e7be      	b.n	8003d3e <xTimerCreateTimerTask+0xe>
 8003dc0:	20001218 	.word	0x20001218
 8003dc4:	0800dd7c 	.word	0x0800dd7c
 8003dc8:	08003aad 	.word	0x08003aad
 8003dcc:	2000121c 	.word	0x2000121c
 8003dd0:	2000119c 	.word	0x2000119c
 8003dd4:	200011b0 	.word	0x200011b0
 8003dd8:	200010f4 	.word	0x200010f4
 8003ddc:	200010f8 	.word	0x200010f8
 8003de0:	200011c8 	.word	0x200011c8
 8003de4:	200010fc 	.word	0x200010fc
 8003de8:	0800dd74 	.word	0x0800dd74

08003dec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003dec:	b530      	push	{r4, r5, lr}
 8003dee:	4614      	mov	r4, r2
 8003df0:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003df2:	461a      	mov	r2, r3
 8003df4:	4b06      	ldr	r3, [pc, #24]	; (8003e10 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8003df6:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8003df8:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003dfa:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8003dfc:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003dfe:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e02:	2300      	movs	r3, #0
 8003e04:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003e06:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e08:	f7fd fff6 	bl	8001df8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8003e0c:	b005      	add	sp, #20
 8003e0e:	bd30      	pop	{r4, r5, pc}
 8003e10:	20001218 	.word	0x20001218

08003e14 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e14:	4808      	ldr	r0, [pc, #32]	; (8003e38 <prvPortStartFirstTask+0x24>)
 8003e16:	6800      	ldr	r0, [r0, #0]
 8003e18:	6800      	ldr	r0, [r0, #0]
 8003e1a:	f380 8808 	msr	MSP, r0
 8003e1e:	f04f 0000 	mov.w	r0, #0
 8003e22:	f380 8814 	msr	CONTROL, r0
 8003e26:	b662      	cpsie	i
 8003e28:	b661      	cpsie	f
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	df00      	svc	0
 8003e34:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e36:	0000      	.short	0x0000
 8003e38:	e000ed08 	.word	0xe000ed08

08003e3c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003e3c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003e4c <vPortEnableVFP+0x10>
 8003e40:	6801      	ldr	r1, [r0, #0]
 8003e42:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e46:	6001      	str	r1, [r0, #0]
 8003e48:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003e4a:	0000      	.short	0x0000
 8003e4c:	e000ed88 	.word	0xe000ed88

08003e50 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8003e50:	4b0e      	ldr	r3, [pc, #56]	; (8003e8c <prvTaskExitError+0x3c>)
 8003e52:	681b      	ldr	r3, [r3, #0]
{
 8003e54:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003e56:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8003e58:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8003e5a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8003e5c:	d008      	beq.n	8003e70 <prvTaskExitError+0x20>
 8003e5e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	e7fe      	b.n	8003e6e <prvTaskExitError+0x1e>
 8003e70:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003e80:	9b01      	ldr	r3, [sp, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d0fc      	beq.n	8003e80 <prvTaskExitError+0x30>
}
 8003e86:	b002      	add	sp, #8
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	20000008 	.word	0x20000008

08003e90 <pxPortInitialiseStack>:
{
 8003e90:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e96:	4c07      	ldr	r4, [pc, #28]	; (8003eb4 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e98:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e9c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ea0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ea4:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ea8:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8003eac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003eb0:	3844      	subs	r0, #68	; 0x44
 8003eb2:	4770      	bx	lr
 8003eb4:	08003e51 	.word	0x08003e51
	...

08003ec0 <SVC_Handler>:
	__asm volatile (
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <pxCurrentTCBConst2>)
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	6808      	ldr	r0, [r1, #0]
 8003ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eca:	f380 8809 	msr	PSP, r0
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f04f 0000 	mov.w	r0, #0
 8003ed6:	f380 8811 	msr	BASEPRI, r0
 8003eda:	4770      	bx	lr
 8003edc:	f3af 8000 	nop.w

08003ee0 <pxCurrentTCBConst2>:
 8003ee0:	20000bf8 	.word	0x20000bf8

08003ee4 <vPortEnterCritical>:
 8003ee4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003ee8:	f383 8811 	msr	BASEPRI, r3
 8003eec:	f3bf 8f6f 	isb	sy
 8003ef0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003ef4:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <vPortEnterCritical+0x40>)
 8003ef6:	6813      	ldr	r3, [r2, #0]
 8003ef8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003efa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003efc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003efe:	d000      	beq.n	8003f02 <vPortEnterCritical+0x1e>
}
 8003f00:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f02:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f06:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f7      	beq.n	8003f00 <vPortEnterCritical+0x1c>
 8003f10:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	e7fe      	b.n	8003f20 <vPortEnterCritical+0x3c>
 8003f22:	bf00      	nop
 8003f24:	20000008 	.word	0x20000008

08003f28 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <vPortExitCritical+0x24>)
 8003f2a:	6813      	ldr	r3, [r2, #0]
 8003f2c:	b943      	cbnz	r3, 8003f40 <vPortExitCritical+0x18>
 8003f2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	e7fe      	b.n	8003f3e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003f40:	3b01      	subs	r3, #1
 8003f42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f44:	b90b      	cbnz	r3, 8003f4a <vPortExitCritical+0x22>
	__asm volatile
 8003f46:	f383 8811 	msr	BASEPRI, r3
}
 8003f4a:	4770      	bx	lr
 8003f4c:	20000008 	.word	0x20000008

08003f50 <PendSV_Handler>:
	__asm volatile
 8003f50:	f3ef 8009 	mrs	r0, PSP
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <pxCurrentTCBConst>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f01e 0f10 	tst.w	lr, #16
 8003f60:	bf08      	it	eq
 8003f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	6010      	str	r0, [r2, #0]
 8003f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f70:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003f74:	f380 8811 	msr	BASEPRI, r0
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f7ff fa4a 	bl	8003418 <vTaskSwitchContext>
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f380 8811 	msr	BASEPRI, r0
 8003f8c:	bc09      	pop	{r0, r3}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f01e 0f10 	tst.w	lr, #16
 8003f9a:	bf08      	it	eq
 8003f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fa0:	f380 8809 	msr	PSP, r0
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w

08003fb0 <pxCurrentTCBConst>:
 8003fb0:	20000bf8 	.word	0x20000bf8

08003fb4 <xPortSysTickHandler>:
{
 8003fb4:	b508      	push	{r3, lr}
	__asm volatile
 8003fb6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003fc6:	f7ff fa17 	bl	80033f8 <xTaskIncrementTick>
 8003fca:	b128      	cbz	r0, 8003fd8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f383 8811 	msr	BASEPRI, r3
}
 8003fde:	bd08      	pop	{r3, pc}

08003fe0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fe0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003fe4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fe6:	4906      	ldr	r1, [pc, #24]	; (8004000 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fe8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fea:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fec:	680b      	ldr	r3, [r1, #0]
 8003fee:	4805      	ldr	r0, [pc, #20]	; (8004004 <vPortSetupTimerInterrupt+0x24>)
 8003ff0:	fba0 0303 	umull	r0, r3, r0, r3
 8003ff4:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ff6:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003ffc:	6111      	str	r1, [r2, #16]
}
 8003ffe:	4770      	bx	lr
 8004000:	20000000 	.word	0x20000000
 8004004:	10624dd3 	.word	0x10624dd3

08004008 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004008:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800400c:	4a48      	ldr	r2, [pc, #288]	; (8004130 <xPortStartScheduler+0x128>)
 800400e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8004012:	4291      	cmp	r1, r2
 8004014:	d041      	beq.n	800409a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004016:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800401a:	4b46      	ldr	r3, [pc, #280]	; (8004134 <xPortStartScheduler+0x12c>)
 800401c:	429a      	cmp	r2, r3
 800401e:	d033      	beq.n	8004088 <xPortStartScheduler+0x80>
{
 8004020:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004022:	4b45      	ldr	r3, [pc, #276]	; (8004138 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004024:	4c45      	ldr	r4, [pc, #276]	; (800413c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004026:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004028:	4845      	ldr	r0, [pc, #276]	; (8004140 <xPortStartScheduler+0x138>)
{
 800402a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800402c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004032:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800403c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004040:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004044:	f003 0340 	and.w	r3, r3, #64	; 0x40
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004048:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800404a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800404c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800404e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004050:	bf48      	it	mi
 8004052:	2206      	movmi	r2, #6
 8004054:	d50f      	bpl.n	8004076 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004056:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800405a:	005b      	lsls	r3, r3, #1
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004062:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	4611      	mov	r1, r2
 800406a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800406e:	d4f2      	bmi.n	8004056 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004070:	2903      	cmp	r1, #3
 8004072:	d01b      	beq.n	80040ac <xPortStartScheduler+0xa4>
 8004074:	6001      	str	r1, [r0, #0]
	__asm volatile
 8004076:	f04f 0340 	mov.w	r3, #64	; 0x40
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	e7fe      	b.n	8004086 <xPortStartScheduler+0x7e>
 8004088:	f04f 0340 	mov.w	r3, #64	; 0x40
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004098:	e7fe      	b.n	8004098 <xPortStartScheduler+0x90>
 800409a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040aa:	e7fe      	b.n	80040aa <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040ac:	9b02      	ldr	r3, [sp, #8]
 80040ae:	4a22      	ldr	r2, [pc, #136]	; (8004138 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 80040b0:	4d24      	ldr	r5, [pc, #144]	; (8004144 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040b2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040b6:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040ba:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040bc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040be:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040c0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80040c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040c8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040cc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80040d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040d4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 80040d8:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 80040da:	f7ff ff81 	bl	8003fe0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80040de:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 80040e0:	f7ff feac 	bl	8003e3c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040e4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 80040e8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040ec:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 80040f0:	f7ff fe90 	bl	8003e14 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80040f4:	f7ff f990 	bl	8003418 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 80040f8:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 80040fa:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 80040fc:	3301      	adds	r3, #1
 80040fe:	d008      	beq.n	8004112 <xPortStartScheduler+0x10a>
 8004100:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	e7fe      	b.n	8004110 <xPortStartScheduler+0x108>
 8004112:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0fc      	beq.n	8004122 <xPortStartScheduler+0x11a>
}
 8004128:	2000      	movs	r0, #0
 800412a:	b004      	add	sp, #16
 800412c:	bd70      	pop	{r4, r5, r6, pc}
 800412e:	bf00      	nop
 8004130:	410fc271 	.word	0x410fc271
 8004134:	410fc270 	.word	0x410fc270
 8004138:	e000e400 	.word	0xe000e400
 800413c:	20001220 	.word	0x20001220
 8004140:	20001224 	.word	0x20001224
 8004144:	20000008 	.word	0x20000008

08004148 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004148:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800414c:	2b0f      	cmp	r3, #15
 800414e:	d90e      	bls.n	800416e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004150:	4911      	ldr	r1, [pc, #68]	; (8004198 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004152:	4a12      	ldr	r2, [pc, #72]	; (800419c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004154:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <vPortValidateInterruptPriority+0x26>
 800415c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	e7fe      	b.n	800416c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800416e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004172:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <vPortValidateInterruptPriority+0x58>)
 8004174:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004178:	6812      	ldr	r2, [r2, #0]
 800417a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800417e:	4293      	cmp	r3, r2
 8004180:	d908      	bls.n	8004194 <vPortValidateInterruptPriority+0x4c>
 8004182:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	e7fe      	b.n	8004192 <vPortValidateInterruptPriority+0x4a>
	}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	e000e3f0 	.word	0xe000e3f0
 800419c:	20001220 	.word	0x20001220
 80041a0:	20001224 	.word	0x20001224

080041a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a8:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80041aa:	f7ff f907 	bl	80033bc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041ae:	4b53      	ldr	r3, [pc, #332]	; (80042fc <pvPortMalloc+0x158>)
 80041b0:	681d      	ldr	r5, [r3, #0]
 80041b2:	2d00      	cmp	r5, #0
 80041b4:	d070      	beq.n	8004298 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041b6:	4b52      	ldr	r3, [pc, #328]	; (8004300 <pvPortMalloc+0x15c>)
 80041b8:	681f      	ldr	r7, [r3, #0]
 80041ba:	423e      	tst	r6, r7
 80041bc:	d12e      	bne.n	800421c <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041be:	b36e      	cbz	r6, 800421c <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80041c0:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041c4:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041c6:	bf1c      	itt	ne
 80041c8:	f024 0407 	bicne.w	r4, r4, #7
 80041cc:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ce:	b32c      	cbz	r4, 800421c <pvPortMalloc+0x78>
 80041d0:	f8df c140 	ldr.w	ip, [pc, #320]	; 8004314 <pvPortMalloc+0x170>
 80041d4:	f8dc 6000 	ldr.w	r6, [ip]
 80041d8:	42a6      	cmp	r6, r4
 80041da:	d31f      	bcc.n	800421c <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80041dc:	4849      	ldr	r0, [pc, #292]	; (8004304 <pvPortMalloc+0x160>)
 80041de:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041e0:	e003      	b.n	80041ea <pvPortMalloc+0x46>
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	b122      	cbz	r2, 80041f0 <pvPortMalloc+0x4c>
 80041e6:	4618      	mov	r0, r3
 80041e8:	4613      	mov	r3, r2
 80041ea:	6859      	ldr	r1, [r3, #4]
 80041ec:	42a1      	cmp	r1, r4
 80041ee:	d3f8      	bcc.n	80041e2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041f0:	42ab      	cmp	r3, r5
 80041f2:	d013      	beq.n	800421c <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041f4:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80041f6:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041f8:	f858 eb08 	ldr.w	lr, [r8], #8
 80041fc:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004200:	2a10      	cmp	r2, #16
 8004202:	d92b      	bls.n	800425c <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004204:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004206:	0748      	lsls	r0, r1, #29
 8004208:	d011      	beq.n	800422e <pvPortMalloc+0x8a>
 800420a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800420e:	f383 8811 	msr	BASEPRI, r3
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	e7fe      	b.n	800421a <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800421c:	f7ff f8d6 	bl	80033cc <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004220:	f04f 0800 	mov.w	r8, #0
 8004224:	f005 fc4e 	bl	8009ac4 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8004228:	4640      	mov	r0, r8
 800422a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800422e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004230:	4a34      	ldr	r2, [pc, #208]	; (8004304 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 8004232:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004234:	4614      	mov	r4, r2
 8004236:	6812      	ldr	r2, [r2, #0]
 8004238:	4291      	cmp	r1, r2
 800423a:	d8fb      	bhi.n	8004234 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800423c:	6860      	ldr	r0, [r4, #4]
 800423e:	eb04 0e00 	add.w	lr, r4, r0
 8004242:	4571      	cmp	r1, lr
 8004244:	d04a      	beq.n	80042dc <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004246:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800424a:	eb01 000e 	add.w	r0, r1, lr
 800424e:	4282      	cmp	r2, r0
 8004250:	d04b      	beq.n	80042ea <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004252:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004254:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004256:	bf18      	it	ne
 8004258:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800425a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800425c:	482a      	ldr	r0, [pc, #168]	; (8004308 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 800425e:	4a2b      	ldr	r2, [pc, #172]	; (800430c <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004260:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004262:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004264:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004266:	bf38      	it	cc
 8004268:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800426a:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 800426c:	2000      	movs	r0, #0
 800426e:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8004272:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004274:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 8004278:	3301      	adds	r3, #1
 800427a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800427c:	f7ff f8a6 	bl	80033cc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004280:	f018 0f07 	tst.w	r8, #7
 8004284:	d0d0      	beq.n	8004228 <pvPortMalloc+0x84>
 8004286:	f04f 0340 	mov.w	r3, #64	; 0x40
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	e7fe      	b.n	8004296 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 8004298:	491d      	ldr	r1, [pc, #116]	; (8004310 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800429a:	4c19      	ldr	r4, [pc, #100]	; (8004300 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800429c:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800429e:	bf14      	ite	ne
 80042a0:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80042a2:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042a4:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 80042a8:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042ac:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80042b0:	bf18      	it	ne
 80042b2:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042b6:	4914      	ldr	r1, [pc, #80]	; (8004308 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 80042b8:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80042ba:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80042bc:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042c0:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042c2:	4910      	ldr	r1, [pc, #64]	; (8004304 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042c4:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042c6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 80042ca:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80042cc:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80042ce:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80042d0:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80042d2:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80042d6:	e9c0 5300 	strd	r5, r3, [r0]
}
 80042da:	e76e      	b.n	80041ba <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042dc:	6849      	ldr	r1, [r1, #4]
 80042de:	eb00 0e01 	add.w	lr, r0, r1
 80042e2:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 80042e6:	4621      	mov	r1, r4
 80042e8:	e7af      	b.n	800424a <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ea:	42aa      	cmp	r2, r5
 80042ec:	d0b1      	beq.n	8004252 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042ee:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042f4:	4470      	add	r0, lr
 80042f6:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042f8:	e7ac      	b.n	8004254 <pvPortMalloc+0xb0>
 80042fa:	bf00      	nop
 80042fc:	20001228 	.word	0x20001228
 8004300:	2000b22c 	.word	0x2000b22c
 8004304:	2000b240 	.word	0x2000b240
 8004308:	2000b234 	.word	0x2000b234
 800430c:	2000b238 	.word	0x2000b238
 8004310:	2000122c 	.word	0x2000122c
 8004314:	2000b230 	.word	0x2000b230

08004318 <vPortFree>:
	if( pv != NULL )
 8004318:	b1d0      	cbz	r0, 8004350 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800431a:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <vPortFree+0xb0>)
 800431c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004320:	6812      	ldr	r2, [r2, #0]
 8004322:	4213      	tst	r3, r2
 8004324:	d00b      	beq.n	800433e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004326:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800432a:	b191      	cbz	r1, 8004352 <vPortFree+0x3a>
 800432c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	e7fe      	b.n	800433c <vPortFree+0x24>
 800433e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800434e:	e7fe      	b.n	800434e <vPortFree+0x36>
 8004350:	4770      	bx	lr
{
 8004352:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004354:	ea23 0302 	bic.w	r3, r3, r2
{
 8004358:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800435a:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 800435e:	4c1b      	ldr	r4, [pc, #108]	; (80043cc <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004360:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8004362:	f7ff f82b 	bl	80033bc <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004366:	9801      	ldr	r0, [sp, #4]
 8004368:	6822      	ldr	r2, [r4, #0]
 800436a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800436e:	4b18      	ldr	r3, [pc, #96]	; (80043d0 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004370:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8004372:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004374:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004376:	461a      	mov	r2, r3
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4298      	cmp	r0, r3
 800437c:	d8fb      	bhi.n	8004376 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800437e:	6854      	ldr	r4, [r2, #4]
 8004380:	eb02 0e04 	add.w	lr, r2, r4
 8004384:	4570      	cmp	r0, lr
 8004386:	d01a      	beq.n	80043be <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004388:	eb00 0c01 	add.w	ip, r0, r1
 800438c:	4563      	cmp	r3, ip
 800438e:	d00c      	beq.n	80043aa <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004390:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8004392:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004394:	bf18      	it	ne
 8004396:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8004398:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <vPortFree+0xbc>)
 800439a:	6813      	ldr	r3, [r2, #0]
 800439c:	3301      	adds	r3, #1
 800439e:	6013      	str	r3, [r2, #0]
}
 80043a0:	b002      	add	sp, #8
 80043a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80043a6:	f7ff b811 	b.w	80033cc <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80043aa:	4c0b      	ldr	r4, [pc, #44]	; (80043d8 <vPortFree+0xc0>)
 80043ac:	6824      	ldr	r4, [r4, #0]
 80043ae:	42a3      	cmp	r3, r4
 80043b0:	d0ee      	beq.n	8004390 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043b2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80043b6:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80043b8:	e9c0 3100 	strd	r3, r1, [r0]
 80043bc:	e7e9      	b.n	8004392 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043be:	4421      	add	r1, r4
 80043c0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80043c2:	4610      	mov	r0, r2
 80043c4:	e7e0      	b.n	8004388 <vPortFree+0x70>
 80043c6:	bf00      	nop
 80043c8:	2000b22c 	.word	0x2000b22c
 80043cc:	2000b230 	.word	0x2000b230
 80043d0:	2000b240 	.word	0x2000b240
 80043d4:	2000b23c 	.word	0x2000b23c
 80043d8:	20001228 	.word	0x20001228

080043dc <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 80043dc:	b199      	cbz	r1, 8004406 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 80043de:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 80043e0:	22ff      	movs	r2, #255	; 0xff
 80043e2:	4d0a      	ldr	r5, [pc, #40]	; (800440c <cal_crc16+0x30>)
 80043e4:	4c0a      	ldr	r4, [pc, #40]	; (8004410 <cal_crc16+0x34>)
 80043e6:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 80043ea:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 80043ec:	f810 3b01 	ldrb.w	r3, [r0], #1
 80043f0:	4053      	eors	r3, r2
    while(length--) {
 80043f2:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 80043f4:	5cea      	ldrb	r2, [r5, r3]
 80043f6:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 80043fa:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 80043fc:	d1f6      	bne.n	80043ec <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 80043fe:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8004402:	bc30      	pop	{r4, r5}
 8004404:	4770      	bx	lr
    while(length--) {
 8004406:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800440a:	4770      	bx	lr
 800440c:	0800dd84 	.word	0x0800dd84
 8004410:	0800de84 	.word	0x0800de84

08004414 <_ZL15set_response_okm12lora_event_t>:
		loraif->Receive(0);
		xSemaphoreGive(tranfer_smp);
	}
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8004414:	b530      	push	{r4, r5, lr}
 8004416:	460a      	mov	r2, r1
 8004418:	b087      	sub	sp, #28
	uint16_t crc = 0;
	char *temp = NULL;
 800441a:	2300      	movs	r3, #0
	char *response_to_device = NULL;
	char *cmd_str = cmd_to_str(cmd, command_string);
 800441c:	491b      	ldr	r1, [pc, #108]	; (800448c <_ZL15set_response_okm12lora_event_t+0x78>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 800441e:	4604      	mov	r4, r0
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004420:	4610      	mov	r0, r2
	char *response_to_device = NULL;
 8004422:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004426:	f000 feb3 	bl	8005190 <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 800442a:	4623      	mov	r3, r4
	char *cmd_str = cmd_to_str(cmd, command_string);
 800442c:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 800442e:	4918      	ldr	r1, [pc, #96]	; (8004490 <_ZL15set_response_okm12lora_event_t+0x7c>)
 8004430:	9003      	str	r0, [sp, #12]
 8004432:	a804      	add	r0, sp, #16
 8004434:	f006 fb8e 	bl	800ab54 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004438:	9d04      	ldr	r5, [sp, #16]
 800443a:	4628      	mov	r0, r5
 800443c:	f7fb fee2 	bl	8000204 <strlen>
 8004440:	b281      	uxth	r1, r0
 8004442:	4628      	mov	r0, r5
 8004444:	f7ff ffca 	bl	80043dc <cal_crc16>
	if(temp != NULL) free(temp);
 8004448:	9b04      	ldr	r3, [sp, #16]
 800444a:	9a03      	ldr	r2, [sp, #12]
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 800444c:	4605      	mov	r5, r0
	if(temp != NULL) free(temp);
 800444e:	b11b      	cbz	r3, 8004458 <_ZL15set_response_okm12lora_event_t+0x44>
 8004450:	4618      	mov	r0, r3
 8004452:	f006 fbd7 	bl	800ac04 <free>
 8004456:	9a03      	ldr	r2, [sp, #12]

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, (unsigned int)addr, crc);
 8004458:	490e      	ldr	r1, [pc, #56]	; (8004494 <_ZL15set_response_okm12lora_event_t+0x80>)
 800445a:	9500      	str	r5, [sp, #0]
 800445c:	4623      	mov	r3, r4
 800445e:	a805      	add	r0, sp, #20
 8004460:	f006 fb78 	bl	800ab54 <asiprintf>

	if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 8004464:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <_ZL15set_response_okm12lora_event_t+0x84>)
 8004466:	2300      	movs	r3, #0
 8004468:	6810      	ldr	r0, [r2, #0]
 800446a:	a905      	add	r1, sp, #20
 800446c:	2202      	movs	r2, #2
 800446e:	f7fd fb0d 	bl	8001a8c <xQueueGenericSend>
 8004472:	b108      	cbz	r0, 8004478 <_ZL15set_response_okm12lora_event_t+0x64>
		loraif_debug((char *)"Can't send to response_queue", __LINE__, __FUNCTION__);
	}
}
 8004474:	b007      	add	sp, #28
 8004476:	bd30      	pop	{r4, r5, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <_ZL15set_response_okm12lora_event_t+0x88>)
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <_ZL15set_response_okm12lora_event_t+0x8c>)
 800447e:	4909      	ldr	r1, [pc, #36]	; (80044a4 <_ZL15set_response_okm12lora_event_t+0x90>)
 8004480:	4809      	ldr	r0, [pc, #36]	; (80044a8 <_ZL15set_response_okm12lora_event_t+0x94>)
 8004482:	23a8      	movs	r3, #168	; 0xa8
 8004484:	f005 fbea 	bl	8009c5c <LOG_DEBUG>
}
 8004488:	b007      	add	sp, #28
 800448a:	bd30      	pop	{r4, r5, pc}
 800448c:	2000000c 	.word	0x2000000c
 8004490:	0800df84 	.word	0x0800df84
 8004494:	0800dfa4 	.word	0x0800dfa4
 8004498:	2000b270 	.word	0x2000b270
 800449c:	0800e014 	.word	0x0800e014
 80044a0:	0800dfd0 	.word	0x0800dfd0
 80044a4:	0800dff0 	.word	0x0800dff0
 80044a8:	0800e00c 	.word	0x0800e00c

080044ac <_ZL15loraif_transmitPc.part.0>:
static void loraif_transmit(char *str){
 80044ac:	b570      	push	{r4, r5, r6, lr}
		loraif->setSyncWord(_send_syncword);
 80044ae:	4b16      	ldr	r3, [pc, #88]	; (8004508 <_ZL15loraif_transmitPc.part.0+0x5c>)
 80044b0:	4c16      	ldr	r4, [pc, #88]	; (800450c <_ZL15loraif_transmitPc.part.0+0x60>)
 80044b2:	7819      	ldrb	r1, [r3, #0]
static void loraif_transmit(char *str){
 80044b4:	4605      	mov	r5, r0
		loraif->setSyncWord(_send_syncword);
 80044b6:	6820      	ldr	r0, [r4, #0]
 80044b8:	f001 fcfe 	bl	8005eb8 <_ZN6sx127x11setSyncWordEh>
		loraif->beginPacket();
 80044bc:	2100      	movs	r1, #0
 80044be:	6820      	ldr	r0, [r4, #0]
 80044c0:	f001 f912 	bl	80056e8 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 80044c4:	4628      	mov	r0, r5
 80044c6:	f7fb fe9d 	bl	8000204 <strlen>
 80044ca:	4629      	mov	r1, r5
 80044cc:	4602      	mov	r2, r0
 80044ce:	6820      	ldr	r0, [r4, #0]
 80044d0:	f001 fb3a 	bl	8005b48 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	2100      	movs	r1, #0
 80044d8:	f001 fa46 	bl	8005968 <_ZN6sx127x9endPacketEb>
		LOG_LEVEL(TAG, str);
 80044dc:	4629      	mov	r1, r5
 80044de:	480c      	ldr	r0, [pc, #48]	; (8004510 <_ZL15loraif_transmitPc.part.0+0x64>)
 80044e0:	f005 fbbc 	bl	8009c5c <LOG_DEBUG>
		loraif->setSyncWord(_recv_syncword);
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <_ZL15loraif_transmitPc.part.0+0x68>)
 80044e6:	6820      	ldr	r0, [r4, #0]
 80044e8:	7819      	ldrb	r1, [r3, #0]
 80044ea:	f001 fce5 	bl	8005eb8 <_ZN6sx127x11setSyncWordEh>
		loraif->Receive(0);
 80044ee:	6820      	ldr	r0, [r4, #0]
 80044f0:	2100      	movs	r1, #0
 80044f2:	f001 fbfd 	bl	8005cf0 <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 80044f6:	4a08      	ldr	r2, [pc, #32]	; (8004518 <_ZL15loraif_transmitPc.part.0+0x6c>)
 80044f8:	2300      	movs	r3, #0
 80044fa:	6810      	ldr	r0, [r2, #0]
}
 80044fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xSemaphoreGive(tranfer_smp);
 8004500:	461a      	mov	r2, r3
 8004502:	4619      	mov	r1, r3
 8004504:	f7fd bac2 	b.w	8001a8c <xQueueGenericSend>
 8004508:	2000b25d 	.word	0x2000b25d
 800450c:	2000b264 	.word	0x2000b264
 8004510:	0800e00c 	.word	0x0800e00c
 8004514:	2000b25c 	.word	0x2000b25c
 8004518:	2000b274 	.word	0x2000b274

0800451c <loraif_init>:
void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 800451c:	b510      	push	{r4, lr}
 800451e:	4614      	mov	r4, r2
	loraif = lora;
 8004520:	4a15      	ldr	r2, [pc, #84]	; (8004578 <loraif_init+0x5c>)
void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 8004522:	f89d c008 	ldrb.w	ip, [sp, #8]
	loraif = lora;
 8004526:	6010      	str	r0, [r2, #0]
	resp_timeout = timeout;
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <loraif_init+0x60>)
	_send_syncword = send_syncword;
 800452a:	4815      	ldr	r0, [pc, #84]	; (8004580 <loraif_init+0x64>)
	resp_timeout = timeout;
 800452c:	6013      	str	r3, [r2, #0]
	max_not_resp = max_not_response;
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <loraif_init+0x68>)
	_send_syncword = send_syncword;
 8004530:	7001      	strb	r1, [r0, #0]
	max_not_resp = max_not_response;
 8004532:	f883 c000 	strb.w	ip, [r3]
	_recv_syncword = recv_syncword;
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <loraif_init+0x6c>)
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 8004538:	2200      	movs	r2, #0
 800453a:	2104      	movs	r1, #4
 800453c:	201e      	movs	r0, #30
	_recv_syncword = recv_syncword;
 800453e:	701c      	strb	r4, [r3, #0]
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 8004540:	f7fd fa62 	bl	8001a08 <xQueueGenericCreate>
 8004544:	4b11      	ldr	r3, [pc, #68]	; (800458c <loraif_init+0x70>)
 8004546:	4604      	mov	r4, r0
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8004548:	2200      	movs	r2, #0
 800454a:	2104      	movs	r1, #4
 800454c:	201e      	movs	r0, #30
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 800454e:	601c      	str	r4, [r3, #0]
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8004550:	f7fd fa5a 	bl	8001a08 <xQueueGenericCreate>
 8004554:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <loraif_init+0x74>)
 8004556:	4604      	mov	r4, r0
	tranfer_smp = xSemaphoreCreateBinary();
 8004558:	2203      	movs	r2, #3
 800455a:	2100      	movs	r1, #0
 800455c:	2001      	movs	r0, #1
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 800455e:	601c      	str	r4, [r3, #0]
	tranfer_smp = xSemaphoreCreateBinary();
 8004560:	f7fd fa52 	bl	8001a08 <xQueueGenericCreate>
 8004564:	490b      	ldr	r1, [pc, #44]	; (8004594 <loraif_init+0x78>)
	xSemaphoreGive(tranfer_smp);
 8004566:	2300      	movs	r3, #0
	tranfer_smp = xSemaphoreCreateBinary();
 8004568:	6008      	str	r0, [r1, #0]
}
 800456a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	xSemaphoreGive(tranfer_smp);
 800456e:	461a      	mov	r2, r3
 8004570:	4619      	mov	r1, r3
 8004572:	f7fd ba8b 	b.w	8001a8c <xQueueGenericSend>
 8004576:	bf00      	nop
 8004578:	2000b264 	.word	0x2000b264
 800457c:	2000b26c 	.word	0x2000b26c
 8004580:	2000b25d 	.word	0x2000b25d
 8004584:	2000b268 	.word	0x2000b268
 8004588:	2000b25c 	.word	0x2000b25c
 800458c:	2000b278 	.word	0x2000b278
 8004590:	2000b270 	.word	0x2000b270
 8004594:	2000b274 	.word	0x2000b274

08004598 <loraif_register_event_handler>:
	fpeventhandler = peventhandler;
 8004598:	4b01      	ldr	r3, [pc, #4]	; (80045a0 <loraif_register_event_handler+0x8>)
 800459a:	6018      	str	r0, [r3, #0]
}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	2000b258 	.word	0x2000b258

080045a4 <loraif_check_crc>:
bool loraif_check_crc(char *data){
 80045a4:	b570      	push	{r4, r5, r6, lr}
 80045a6:	b086      	sub	sp, #24
	pkt_json_t json;
 80045a8:	2300      	movs	r3, #0
	pkt_t pkt;
 80045aa:	2500      	movs	r5, #0
 80045ac:	2400      	movs	r4, #0
	crc_start = strstr(src_cpy, "\"crc\"");
 80045ae:	4919      	ldr	r1, [pc, #100]	; (8004614 <loraif_check_crc+0x70>)
	pkt_json_t json;
 80045b0:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 80045b2:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 80045b6:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_crc(char *data){
 80045ba:	4605      	mov	r5, r0
	pkt_json_t json;
 80045bc:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 80045be:	f007 faa7 	bl	800bb10 <strstr>
	if(crc_start == NULL) return false;
 80045c2:	b128      	cbz	r0, 80045d0 <loraif_check_crc+0x2c>
	err = parse_packet(src_cpy, &pkt);
 80045c4:	4604      	mov	r4, r0
 80045c6:	4669      	mov	r1, sp
 80045c8:	4628      	mov	r0, r5
 80045ca:	f000 fd61 	bl	8005090 <parse_packet>
	if(err != PKT_ERR_OK) return false;
 80045ce:	b110      	cbz	r0, 80045d6 <loraif_check_crc+0x32>
	if(crc_start == NULL) return false;
 80045d0:	2000      	movs	r0, #0
}
 80045d2:	b006      	add	sp, #24
 80045d4:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <loraif_check_crc+0x74>)
 80045d8:	9801      	ldr	r0, [sp, #4]
 80045da:	a903      	add	r1, sp, #12
 80045dc:	f000 fc2e 	bl	8004e3c <json_get_object>
	if(err != PKT_ERR_OK) return false;
 80045e0:	2800      	cmp	r0, #0
 80045e2:	d1f5      	bne.n	80045d0 <loraif_check_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 80045e4:	4601      	mov	r1, r0
 80045e6:	2210      	movs	r2, #16
 80045e8:	9805      	ldr	r0, [sp, #20]
 80045ea:	f007 fb29 	bl	800bc40 <strtol>
 80045ee:	4606      	mov	r6, r0
	json_release_object(&json);
 80045f0:	a803      	add	r0, sp, #12
 80045f2:	f000 fd3b 	bl	800506c <json_release_object>
	release_packet(&pkt);
 80045f6:	4668      	mov	r0, sp
 80045f8:	f000 fda4 	bl	8005144 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 80045fc:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 80045fe:	b289      	uxth	r1, r1
 8004600:	4628      	mov	r0, r5
 8004602:	f7ff feeb 	bl	80043dc <cal_crc16>
	if(crc != icrc) return false;
 8004606:	b2b6      	uxth	r6, r6
 8004608:	1a30      	subs	r0, r6, r0
 800460a:	fab0 f080 	clz	r0, r0
 800460e:	0940      	lsrs	r0, r0, #5
}
 8004610:	b006      	add	sp, #24
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	0800e024 	.word	0x0800e024
 8004618:	0800e02c 	.word	0x0800e02c

0800461c <loraif_request>:

void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 800461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004620:	460f      	mov	r7, r1
 8004622:	b08a      	sub	sp, #40	; 0x28
 8004624:	4605      	mov	r5, r0
	uint16_t crc = 0;
	char *req_data, *temp;
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004626:	4940      	ldr	r1, [pc, #256]	; (8004728 <loraif_request+0x10c>)
 8004628:	4638      	mov	r0, r7
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 800462a:	461c      	mov	r4, r3
 800462c:	4616      	mov	r6, r2
	char *cmd_str = cmd_to_str(cmd, command_string);
 800462e:	f000 fdaf 	bl	8005190 <cmd_to_str>
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 8004632:	462b      	mov	r3, r5
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004634:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 8004636:	493d      	ldr	r1, [pc, #244]	; (800472c <loraif_request+0x110>)
 8004638:	9005      	str	r0, [sp, #20]
 800463a:	e9cd 6400 	strd	r6, r4, [sp]
 800463e:	a807      	add	r0, sp, #28
 8004640:	f006 fa88 	bl	800ab54 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004644:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004648:	4640      	mov	r0, r8
 800464a:	f7fb fddb 	bl	8000204 <strlen>
 800464e:	b281      	uxth	r1, r0
 8004650:	4640      	mov	r0, r8
 8004652:	f7ff fec3 	bl	80043dc <cal_crc16>
 8004656:	4680      	mov	r8, r0
	free(temp);
 8004658:	9807      	ldr	r0, [sp, #28]
 800465a:	f006 fad3 	bl	800ac04 <free>

	asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,\"crc\":0x%04x}", cmd_str, (unsigned int)dev_address, data, require_resp, crc);
 800465e:	e9cd 4801 	strd	r4, r8, [sp, #4]
 8004662:	9a05      	ldr	r2, [sp, #20]
 8004664:	4932      	ldr	r1, [pc, #200]	; (8004730 <loraif_request+0x114>)
 8004666:	9600      	str	r6, [sp, #0]
 8004668:	462b      	mov	r3, r5
 800466a:	a806      	add	r0, sp, #24
 800466c:	f006 fa72 	bl	800ab54 <asiprintf>

	if(require_resp != 0){
 8004670:	b974      	cbnz	r4, 8004690 <loraif_request+0x74>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004672:	4b30      	ldr	r3, [pc, #192]	; (8004734 <loraif_request+0x118>)
				loraif_debug((char *)"Can't send to wait_response_queue", __LINE__, __FUNCTION__);
			}
		}
	}

	loraif_transmit(req_data);
 8004674:	9c06      	ldr	r4, [sp, #24]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004676:	6818      	ldr	r0, [r3, #0]
 8004678:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800467c:	f7fd fdfc 	bl	8002278 <xQueueSemaphoreTake>
 8004680:	2800      	cmp	r0, #0
 8004682:	d148      	bne.n	8004716 <loraif_request+0xfa>

	free(req_data);
 8004684:	9806      	ldr	r0, [sp, #24]
 8004686:	f006 fabd 	bl	800ac04 <free>
}
 800468a:	b00a      	add	sp, #40	; 0x28
 800468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loraif_request_prop_t *wait_response = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 8004690:	200c      	movs	r0, #12
 8004692:	f006 faaf 	bl	800abf4 <malloc>
		wait_response->address = dev_address;
 8004696:	6005      	str	r5, [r0, #0]
		wait_response->cmd = cmd;
 8004698:	7107      	strb	r7, [r0, #4]
		loraif_request_prop_t *wait_response = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 800469a:	4604      	mov	r4, r0
 800469c:	9008      	str	r0, [sp, #32]
		wait_response->tick_start = get_tick();
 800469e:	f003 ff8f 	bl	80085c0 <get_tick>
		uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 80046a2:	4e25      	ldr	r6, [pc, #148]	; (8004738 <loraif_request+0x11c>)
		wait_response->tick_start = get_tick();
 80046a4:	4603      	mov	r3, r0
 80046a6:	60a3      	str	r3, [r4, #8]
		uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 80046a8:	6830      	ldr	r0, [r6, #0]
 80046aa:	f7fe f947 	bl	800293c <uxQueueMessagesWaiting>
		for(uint8_t i=0; i<queue_len; i++){
 80046ae:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80046b2:	d01c      	beq.n	80046ee <loraif_request+0xd2>
 80046b4:	2400      	movs	r4, #0
					wait_response = NULL;
 80046b6:	4627      	mov	r7, r4
 80046b8:	e002      	b.n	80046c0 <loraif_request+0xa4>
		for(uint8_t i=0; i<queue_len; i++){
 80046ba:	b2e3      	uxtb	r3, r4
 80046bc:	429d      	cmp	r5, r3
 80046be:	d916      	bls.n	80046ee <loraif_request+0xd2>
			if(xQueuePeek(wait_response_queue, &in_queue, 2) == pdTRUE){
 80046c0:	6830      	ldr	r0, [r6, #0]
 80046c2:	2202      	movs	r2, #2
 80046c4:	a909      	add	r1, sp, #36	; 0x24
 80046c6:	f7fd ff61 	bl	800258c <xQueuePeek>
 80046ca:	2801      	cmp	r0, #1
		for(uint8_t i=0; i<queue_len; i++){
 80046cc:	f104 0401 	add.w	r4, r4, #1
			if(xQueuePeek(wait_response_queue, &in_queue, 2) == pdTRUE){
 80046d0:	d1f3      	bne.n	80046ba <loraif_request+0x9e>
				if(in_queue->address == wait_response->address && in_queue->cmd == wait_response->cmd){
 80046d2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
 80046d6:	6802      	ldr	r2, [r0, #0]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	4291      	cmp	r1, r2
 80046dc:	d1ed      	bne.n	80046ba <loraif_request+0x9e>
 80046de:	791a      	ldrb	r2, [r3, #4]
 80046e0:	7903      	ldrb	r3, [r0, #4]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d1e9      	bne.n	80046ba <loraif_request+0x9e>
					free(wait_response);
 80046e6:	f006 fa8d 	bl	800ac04 <free>
					wait_response = NULL;
 80046ea:	9708      	str	r7, [sp, #32]
 80046ec:	e7e5      	b.n	80046ba <loraif_request+0x9e>
		if(wait_response != NULL){
 80046ee:	9b08      	ldr	r3, [sp, #32]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0be      	beq.n	8004672 <loraif_request+0x56>
			if(xQueueSend(wait_response_queue, &wait_response, 2) != pdTRUE){
 80046f4:	6830      	ldr	r0, [r6, #0]
 80046f6:	2300      	movs	r3, #0
 80046f8:	2202      	movs	r2, #2
 80046fa:	a908      	add	r1, sp, #32
 80046fc:	f7fd f9c6 	bl	8001a8c <xQueueGenericSend>
 8004700:	2801      	cmp	r0, #1
 8004702:	d0b6      	beq.n	8004672 <loraif_request+0x56>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <loraif_request+0x120>)
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <loraif_request+0x124>)
 800470a:	490e      	ldr	r1, [pc, #56]	; (8004744 <loraif_request+0x128>)
 800470c:	480e      	ldr	r0, [pc, #56]	; (8004748 <loraif_request+0x12c>)
 800470e:	23c9      	movs	r3, #201	; 0xc9
 8004710:	f005 faa4 	bl	8009c5c <LOG_DEBUG>
}
 8004714:	e7ad      	b.n	8004672 <loraif_request+0x56>
 8004716:	4620      	mov	r0, r4
 8004718:	f7ff fec8 	bl	80044ac <_ZL15loraif_transmitPc.part.0>
	free(req_data);
 800471c:	9806      	ldr	r0, [sp, #24]
 800471e:	f006 fa71 	bl	800ac04 <free>
}
 8004722:	b00a      	add	sp, #40	; 0x28
 8004724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004728:	2000000c 	.word	0x2000000c
 800472c:	0800e030 	.word	0x0800e030
 8004730:	0800e064 	.word	0x0800e064
 8004734:	2000b274 	.word	0x2000b274
 8004738:	2000b278 	.word	0x2000b278
 800473c:	0800e0cc 	.word	0x0800e0cc
 8004740:	0800e0a8 	.word	0x0800e0a8
 8004744:	0800dff0 	.word	0x0800dff0
 8004748:	0800e00c 	.word	0x0800e00c

0800474c <loraif_request_data>:
			}
		}
	}
}

void loraif_request_data(void){
 800474c:	b570      	push	{r4, r5, r6, lr}
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800474e:	4d0a      	ldr	r5, [pc, #40]	; (8004778 <loraif_request_data+0x2c>)
 8004750:	682c      	ldr	r4, [r5, #0]
    if(loraif_device_list.empty()) {
 8004752:	42ac      	cmp	r4, r5
 8004754:	d00e      	beq.n	8004774 <loraif_request_data+0x28>
        return;
    }

    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
    	vTaskDelay(1000);
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 8004756:	4e09      	ldr	r6, [pc, #36]	; (800477c <loraif_request_data+0x30>)
    	vTaskDelay(1000);
 8004758:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800475c:	f7fe fd38 	bl	80031d0 <vTaskDelay>
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 8004760:	68a2      	ldr	r2, [r4, #8]
 8004762:	2301      	movs	r3, #1
 8004764:	6810      	ldr	r0, [r2, #0]
 8004766:	2105      	movs	r1, #5
 8004768:	4632      	mov	r2, r6
 800476a:	f7ff ff57 	bl	800461c <loraif_request>
	_M_node = _M_node->_M_next;
 800476e:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004770:	42ac      	cmp	r4, r5
 8004772:	d1f1      	bne.n	8004758 <loraif_request_data+0xc>
    }
}
 8004774:	bd70      	pop	{r4, r5, r6, pc}
 8004776:	bf00      	nop
 8004778:	2000b24c 	.word	0x2000b24c
 800477c:	0800e0dc 	.word	0x0800e0dc

08004780 <loraif_add_device>:


void loraif_add_device(char *jdata, void *dev_data){
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	b087      	sub	sp, #28
	pkt_err_t err;
	pkt_json_t json;
 8004784:	2600      	movs	r6, #0
void loraif_add_device(char *jdata, void *dev_data){
 8004786:	4605      	mov	r5, r0
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004788:	2010      	movs	r0, #16
void loraif_add_device(char *jdata, void *dev_data){
 800478a:	460f      	mov	r7, r1
	pkt_json_t json;
 800478c:	9603      	str	r6, [sp, #12]
 800478e:	f88d 6010 	strb.w	r6, [sp, #16]
 8004792:	9605      	str	r6, [sp, #20]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004794:	f006 fa2e 	bl	800abf4 <malloc>

    newdev->err_count = 0;
    newdev->data = dev_data;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004798:	4a28      	ldr	r2, [pc, #160]	; (800483c <loraif_add_device+0xbc>)
    newdev->err_count = 0;
 800479a:	7206      	strb	r6, [r0, #8]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 800479c:	4604      	mov	r4, r0
    newdev->data = dev_data;
 800479e:	60c7      	str	r7, [r0, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 80047a0:	a903      	add	r1, sp, #12
 80047a2:	4628      	mov	r0, r5
 80047a4:	f000 fb4a 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d03a      	beq.n	8004822 <loraif_add_device+0xa2>
		newdev->address = strtol(json.value, NULL, 16);
	json_release_object(&json);
 80047ac:	a803      	add	r0, sp, #12
 80047ae:	f000 fc5d 	bl	800506c <json_release_object>

	err = json_get_object(jdata, &json, (char *)"name");
 80047b2:	4a23      	ldr	r2, [pc, #140]	; (8004840 <loraif_add_device+0xc0>)
 80047b4:	a903      	add	r1, sp, #12
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fb40 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 80047bc:	2800      	cmp	r0, #0
 80047be:	d037      	beq.n	8004830 <loraif_add_device+0xb0>
		asprintf(&newdev->name, "%s", json.value);
	json_release_object(&json);
 80047c0:	a803      	add	r0, sp, #12
 80047c2:	f000 fc53 	bl	800506c <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80047c6:	200c      	movs	r0, #12
 80047c8:	f006 f952 	bl	800aa70 <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 80047cc:	4d1d      	ldr	r5, [pc, #116]	; (8004844 <loraif_add_device+0xc4>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80047ce:	6084      	str	r4, [r0, #8]
 80047d0:	4629      	mov	r1, r5
 80047d2:	f006 f95e 	bl	800aa92 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80047d6:	68a9      	ldr	r1, [r5, #8]
 80047d8:	3101      	adds	r1, #1

	loraif_device_list.push_back(newdev);

	char *tmp;
	asprintf(&tmp, "Add device 0x%08x(%s)", (unsigned int)newdev->address, newdev->name);
 80047da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80047de:	60a9      	str	r1, [r5, #8]
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047e0:	4c19      	ldr	r4, [pc, #100]	; (8004848 <loraif_add_device+0xc8>)
	asprintf(&tmp, "Add device 0x%08x(%s)", (unsigned int)newdev->address, newdev->name);
 80047e2:	491a      	ldr	r1, [pc, #104]	; (800484c <loraif_add_device+0xcc>)
 80047e4:	a802      	add	r0, sp, #8
 80047e6:	f006 f9b5 	bl	800ab54 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047ea:	9a02      	ldr	r2, [sp, #8]
 80047ec:	4918      	ldr	r1, [pc, #96]	; (8004850 <loraif_add_device+0xd0>)
 80047ee:	4819      	ldr	r0, [pc, #100]	; (8004854 <loraif_add_device+0xd4>)
 80047f0:	9400      	str	r4, [sp, #0]
 80047f2:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 80047f6:	f005 fa31 	bl	8009c5c <LOG_DEBUG>
	loraif_debug(tmp, __LINE__, __FUNCTION__);
	free(tmp);
 80047fa:	9802      	ldr	r0, [sp, #8]
 80047fc:	f006 fa02 	bl	800ac04 <free>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004800:	682c      	ldr	r4, [r5, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004802:	42ac      	cmp	r4, r5
 8004804:	d00b      	beq.n	800481e <loraif_add_device+0x9e>
    	LOG_WARN(TAG, "Device 0x%08x name \"%s\".", (unsigned int)(*device)->address, (*device)->name);
 8004806:	4f14      	ldr	r7, [pc, #80]	; (8004858 <loraif_add_device+0xd8>)
 8004808:	4e12      	ldr	r6, [pc, #72]	; (8004854 <loraif_add_device+0xd4>)
 800480a:	68a2      	ldr	r2, [r4, #8]
 800480c:	4639      	mov	r1, r7
 800480e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004812:	4630      	mov	r0, r6
 8004814:	f005 f9a6 	bl	8009b64 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004818:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 800481a:	42ac      	cmp	r4, r5
 800481c:	d1f5      	bne.n	800480a <loraif_add_device+0x8a>

	show_device_list();
}
 800481e:	b007      	add	sp, #28
 8004820:	bdf0      	pop	{r4, r5, r6, r7, pc}
		newdev->address = strtol(json.value, NULL, 16);
 8004822:	4601      	mov	r1, r0
 8004824:	2210      	movs	r2, #16
 8004826:	9805      	ldr	r0, [sp, #20]
 8004828:	f007 fa0a 	bl	800bc40 <strtol>
 800482c:	6020      	str	r0, [r4, #0]
 800482e:	e7bd      	b.n	80047ac <loraif_add_device+0x2c>
		asprintf(&newdev->name, "%s", json.value);
 8004830:	9a05      	ldr	r2, [sp, #20]
 8004832:	490a      	ldr	r1, [pc, #40]	; (800485c <loraif_add_device+0xdc>)
 8004834:	1d20      	adds	r0, r4, #4
 8004836:	f006 f98d 	bl	800ab54 <asiprintf>
 800483a:	e7c1      	b.n	80047c0 <loraif_add_device+0x40>
 800483c:	0800e0e0 	.word	0x0800e0e0
 8004840:	0800e0e8 	.word	0x0800e0e8
 8004844:	2000b24c 	.word	0x2000b24c
 8004848:	0800e108 	.word	0x0800e108
 800484c:	0800e0f0 	.word	0x0800e0f0
 8004850:	0800dff0 	.word	0x0800dff0
 8004854:	0800e00c 	.word	0x0800e00c
 8004858:	0800e11c 	.word	0x0800e11c
 800485c:	0800ebec 	.word	0x0800ebec

08004860 <loraif_remove_device>:

void loraif_remove_device(char *jdata){
 8004860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004862:	b087      	sub	sp, #28
	pkt_err_t err;
	pkt_json_t json;
 8004864:	2600      	movs	r6, #0
	uint32_t rm_addr = 0x00U;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004866:	4a2a      	ldr	r2, [pc, #168]	; (8004910 <loraif_remove_device+0xb0>)
	pkt_json_t json;
 8004868:	9603      	str	r6, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 800486a:	a903      	add	r1, sp, #12
	pkt_json_t json;
 800486c:	f88d 6010 	strb.w	r6, [sp, #16]
 8004870:	9605      	str	r6, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004872:	f000 fae3 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 8004876:	2800      	cmp	r0, #0
 8004878:	d039      	beq.n	80048ee <loraif_remove_device+0x8e>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800487a:	4d26      	ldr	r5, [pc, #152]	; (8004914 <loraif_remove_device+0xb4>)
		rm_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 800487c:	a803      	add	r0, sp, #12
 800487e:	f000 fbf5 	bl	800506c <json_release_object>
 8004882:	682c      	ldr	r4, [r5, #0]

    if (loraif_device_list.empty()) {
 8004884:	42ac      	cmp	r4, r5
 8004886:	d039      	beq.n	80048fc <loraif_remove_device+0x9c>
        return;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == rm_addr) {
 8004888:	68a3      	ldr	r3, [r4, #8]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	42b2      	cmp	r2, r6
 800488e:	d00d      	beq.n	80048ac <loraif_remove_device+0x4c>
	_M_node = _M_node->_M_next;
 8004890:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 8004892:	42ac      	cmp	r4, r5
 8004894:	d1f8      	bne.n	8004888 <loraif_remove_device+0x28>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <loraif_remove_device+0xb8>)
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	4a20      	ldr	r2, [pc, #128]	; (800491c <loraif_remove_device+0xbc>)
 800489c:	4920      	ldr	r1, [pc, #128]	; (8004920 <loraif_remove_device+0xc0>)
 800489e:	4821      	ldr	r0, [pc, #132]	; (8004924 <loraif_remove_device+0xc4>)
 80048a0:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 80048a4:	f005 f9da 	bl	8009c5c <LOG_DEBUG>
    free(*device);

    loraif_device_list.erase(device);

	show_device_list();
}
 80048a8:	b007      	add	sp, #28
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    free((*device)->name);
 80048ac:	6858      	ldr	r0, [r3, #4]
 80048ae:	f006 f9a9 	bl	800ac04 <free>
    free(*device);
 80048b2:	68a0      	ldr	r0, [r4, #8]
 80048b4:	f006 f9a6 	bl	800ac04 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80048b8:	68ab      	ldr	r3, [r5, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 80048ba:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80048bc:	3b01      	subs	r3, #1
 80048be:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 80048c0:	f006 f8ee 	bl	800aaa0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 80048c4:	4620      	mov	r0, r4
 80048c6:	210c      	movs	r1, #12
 80048c8:	f006 f8d0 	bl	800aa6c <_ZdlPvj>
      { return iterator(this->_M_impl._M_node._M_next); }
 80048cc:	682c      	ldr	r4, [r5, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80048ce:	42ac      	cmp	r4, r5
 80048d0:	d0ea      	beq.n	80048a8 <loraif_remove_device+0x48>
    	LOG_WARN(TAG, "Device 0x%08x name \"%s\".", (unsigned int)(*device)->address, (*device)->name);
 80048d2:	4f15      	ldr	r7, [pc, #84]	; (8004928 <loraif_remove_device+0xc8>)
 80048d4:	4e13      	ldr	r6, [pc, #76]	; (8004924 <loraif_remove_device+0xc4>)
 80048d6:	68a2      	ldr	r2, [r4, #8]
 80048d8:	4639      	mov	r1, r7
 80048da:	e9d2 2300 	ldrd	r2, r3, [r2]
 80048de:	4630      	mov	r0, r6
 80048e0:	f005 f940 	bl	8009b64 <LOG_WARN>
	_M_node = _M_node->_M_next;
 80048e4:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80048e6:	42ac      	cmp	r4, r5
 80048e8:	d1f5      	bne.n	80048d6 <loraif_remove_device+0x76>
}
 80048ea:	b007      	add	sp, #28
 80048ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rm_addr = strtol(json.value, NULL, 16);
 80048ee:	4601      	mov	r1, r0
 80048f0:	2210      	movs	r2, #16
 80048f2:	9805      	ldr	r0, [sp, #20]
 80048f4:	f007 f9a4 	bl	800bc40 <strtol>
 80048f8:	4606      	mov	r6, r0
 80048fa:	e7be      	b.n	800487a <loraif_remove_device+0x1a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048fc:	4b06      	ldr	r3, [pc, #24]	; (8004918 <loraif_remove_device+0xb8>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	4a0a      	ldr	r2, [pc, #40]	; (800492c <loraif_remove_device+0xcc>)
 8004902:	4907      	ldr	r1, [pc, #28]	; (8004920 <loraif_remove_device+0xc0>)
 8004904:	4807      	ldr	r0, [pc, #28]	; (8004924 <loraif_remove_device+0xc4>)
 8004906:	f240 13c5 	movw	r3, #453	; 0x1c5
 800490a:	f005 f9a7 	bl	8009c5c <LOG_DEBUG>
        return;
 800490e:	e7cb      	b.n	80048a8 <loraif_remove_device+0x48>
 8004910:	0800e0e0 	.word	0x0800e0e0
 8004914:	2000b24c 	.word	0x2000b24c
 8004918:	0800e14c 	.word	0x0800e14c
 800491c:	0800e164 	.word	0x0800e164
 8004920:	0800dff0 	.word	0x0800dff0
 8004924:	0800e00c 	.word	0x0800e00c
 8004928:	0800e11c 	.word	0x0800e11c
 800492c:	0800e138 	.word	0x0800e138

08004930 <loraif_select_device>:

loraif_dev_t *loraif_select_device(char *jdata){
 8004930:	b510      	push	{r4, lr}
 8004932:	b086      	sub	sp, #24
	pkt_err_t err;
	pkt_json_t json;
 8004934:	2400      	movs	r4, #0
	uint32_t sel_addr = 0x00;

	err = json_get_object(jdata, &json, (char *)"addr");
 8004936:	4a1a      	ldr	r2, [pc, #104]	; (80049a0 <loraif_select_device+0x70>)
	pkt_json_t json;
 8004938:	9403      	str	r4, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 800493a:	a903      	add	r1, sp, #12
	pkt_json_t json;
 800493c:	f88d 4010 	strb.w	r4, [sp, #16]
 8004940:	9405      	str	r4, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004942:	f000 fa7b 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 8004946:	b1c8      	cbz	r0, 800497c <loraif_select_device+0x4c>
		sel_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004948:	a803      	add	r0, sp, #12
 800494a:	f000 fb8f 	bl	800506c <json_release_object>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800494e:	4915      	ldr	r1, [pc, #84]	; (80049a4 <loraif_select_device+0x74>)
 8004950:	680b      	ldr	r3, [r1, #0]

    if (loraif_device_list.empty()) {
 8004952:	428b      	cmp	r3, r1
 8004954:	d019      	beq.n	800498a <loraif_select_device+0x5a>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == sel_addr) {
 8004956:	6898      	ldr	r0, [r3, #8]
 8004958:	6802      	ldr	r2, [r0, #0]
 800495a:	42a2      	cmp	r2, r4
 800495c:	d00c      	beq.n	8004978 <loraif_select_device+0x48>
	_M_node = _M_node->_M_next;
 800495e:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004960:	428b      	cmp	r3, r1
 8004962:	d1f8      	bne.n	8004956 <loraif_select_device+0x26>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004964:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <loraif_select_device+0x78>)
 8004966:	4811      	ldr	r0, [pc, #68]	; (80049ac <loraif_select_device+0x7c>)
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	4a11      	ldr	r2, [pc, #68]	; (80049b0 <loraif_select_device+0x80>)
 800496c:	4911      	ldr	r1, [pc, #68]	; (80049b4 <loraif_select_device+0x84>)
 800496e:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 8004972:	f005 f973 	bl	8009c5c <LOG_DEBUG>
        ++device;
    }

    if (device == loraif_device_list.end()) {
    	loraif_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
        return NULL;
 8004976:	2000      	movs	r0, #0
    }

    return (*device);
}
 8004978:	b006      	add	sp, #24
 800497a:	bd10      	pop	{r4, pc}
		sel_addr = strtol(json.value, NULL, 16);
 800497c:	4601      	mov	r1, r0
 800497e:	2210      	movs	r2, #16
 8004980:	9805      	ldr	r0, [sp, #20]
 8004982:	f007 f95d 	bl	800bc40 <strtol>
 8004986:	4604      	mov	r4, r0
 8004988:	e7de      	b.n	8004948 <loraif_select_device+0x18>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <loraif_select_device+0x78>)
 800498c:	4807      	ldr	r0, [pc, #28]	; (80049ac <loraif_select_device+0x7c>)
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <loraif_select_device+0x88>)
 8004992:	4908      	ldr	r1, [pc, #32]	; (80049b4 <loraif_select_device+0x84>)
 8004994:	f240 13e9 	movw	r3, #489	; 0x1e9
 8004998:	f005 f960 	bl	8009c5c <LOG_DEBUG>
        return NULL;
 800499c:	2000      	movs	r0, #0
 800499e:	e7eb      	b.n	8004978 <loraif_select_device+0x48>
 80049a0:	0800e0e0 	.word	0x0800e0e0
 80049a4:	2000b24c 	.word	0x2000b24c
 80049a8:	0800e190 	.word	0x0800e190
 80049ac:	0800e00c 	.word	0x0800e00c
 80049b0:	0800e164 	.word	0x0800e164
 80049b4:	0800dff0 	.word	0x0800dff0
 80049b8:	0800e138 	.word	0x0800e138

080049bc <loraif_rx_process>:
void loraif_rx_process(void *param){
 80049bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c0:	b08d      	sub	sp, #52	; 0x34
	if(xQueueReceive(*queue, &rx_full, 2)){
 80049c2:	6800      	ldr	r0, [r0, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	a902      	add	r1, sp, #8
 80049c8:	f7fd fad4 	bl	8001f74 <xQueueReceive>
 80049cc:	b910      	cbnz	r0, 80049d4 <loraif_rx_process+0x18>
}
 80049ce:	b00d      	add	sp, #52	; 0x34
 80049d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt_json_t json;
 80049d4:	2300      	movs	r3, #0
		pkt_t pkt;
 80049d6:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 80049d8:	9802      	ldr	r0, [sp, #8]
		pkt_json_t json;
 80049da:	9309      	str	r3, [sp, #36]	; 0x24
		pkt_t pkt;
 80049dc:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 80049de:	a906      	add	r1, sp, #24
		pkt_t pkt;
 80049e0:	e9cd 4506 	strd	r4, r5, [sp, #24]
		pkt_json_t json;
 80049e4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80049e8:	930b      	str	r3, [sp, #44]	; 0x2c
		char *evt_data = NULL;
 80049ea:	9303      	str	r3, [sp, #12]
		err = parse_packet(rx_full, &pkt);
 80049ec:	f000 fb50 	bl	8005090 <parse_packet>
		if(err == PKT_ERR_OK){
 80049f0:	4605      	mov	r5, r0
 80049f2:	2800      	cmp	r0, #0
 80049f4:	d154      	bne.n	8004aa0 <loraif_rx_process+0xe4>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 80049f6:	498c      	ldr	r1, [pc, #560]	; (8004c28 <loraif_rx_process+0x26c>)
 80049f8:	9806      	ldr	r0, [sp, #24]
 80049fa:	220b      	movs	r2, #11
 80049fc:	f000 fbb2 	bl	8005164 <str_to_cmd>
 8004a00:	b2c6      	uxtb	r6, r0
			if(cmd == LORA_REQ_ADDRESS){
 8004a02:	2e01      	cmp	r6, #1
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 8004a04:	af09      	add	r7, sp, #36	; 0x24
			if(cmd == LORA_REQ_ADDRESS){
 8004a06:	d061      	beq.n	8004acc <loraif_rx_process+0x110>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004a08:	4a88      	ldr	r2, [pc, #544]	; (8004c2c <loraif_rx_process+0x270>)
 8004a0a:	9807      	ldr	r0, [sp, #28]
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	f000 fa15 	bl	8004e3c <json_get_object>
				uint32_t addr = strtol(json.value, NULL, 16);
 8004a12:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004a14:	4604      	mov	r4, r0
				uint32_t addr = strtol(json.value, NULL, 16);
 8004a16:	4629      	mov	r1, r5
 8004a18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004a1a:	f007 f911 	bl	800bc40 <strtol>
 8004a1e:	4680      	mov	r8, r0
				if(err == PKT_ERR_OK){
 8004a20:	2c00      	cmp	r4, #0
 8004a22:	f040 80cd 	bne.w	8004bc0 <loraif_rx_process+0x204>
					if(cmd == LORA_ERR){
 8004a26:	2e00      	cmp	r6, #0
 8004a28:	d071      	beq.n	8004b0e <loraif_rx_process+0x152>
					else if(cmd == LORA_UPDATE_ADDRESS){
 8004a2a:	2e02      	cmp	r6, #2
 8004a2c:	f000 80cf 	beq.w	8004bce <loraif_rx_process+0x212>
					else if(cmd == LORA_UPDATE_STATE){
 8004a30:	2e03      	cmp	r6, #3
 8004a32:	f000 80eb 	beq.w	8004c0c <loraif_rx_process+0x250>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 8004a36:	2e06      	cmp	r6, #6
 8004a38:	4d7d      	ldr	r5, [pc, #500]	; (8004c30 <loraif_rx_process+0x274>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8004c38 <loraif_rx_process+0x27c>
 8004a3e:	f8df a238 	ldr.w	sl, [pc, #568]	; 8004c78 <loraif_rx_process+0x2bc>
 8004a42:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 8004c40 <loraif_rx_process+0x284>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 8004a46:	bf08      	it	eq
 8004a48:	2605      	moveq	r6, #5
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 8004a4a:	6828      	ldr	r0, [r5, #0]
 8004a4c:	f7fd ff76 	bl	800293c <uxQueueMessagesWaiting>
 8004a50:	b2e3      	uxtb	r3, r4
 8004a52:	4298      	cmp	r0, r3
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 2) == pdTRUE){
 8004a54:	f04f 0202 	mov.w	r2, #2
 8004a58:	a905      	add	r1, sp, #20
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 8004a5a:	d946      	bls.n	8004aea <loraif_rx_process+0x12e>
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 2) == pdTRUE){
 8004a5c:	6828      	ldr	r0, [r5, #0]
 8004a5e:	f7fd fa89 	bl	8001f74 <xQueueReceive>
 8004a62:	2801      	cmp	r0, #1
 8004a64:	f104 0401 	add.w	r4, r4, #1
 8004a68:	d1ef      	bne.n	8004a4a <loraif_rx_process+0x8e>
								if(require_resp_prop->address == addr && require_resp_prop->cmd == cmd){
 8004a6a:	9805      	ldr	r0, [sp, #20]
 8004a6c:	6802      	ldr	r2, [r0, #0]
 8004a6e:	4542      	cmp	r2, r8
									if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	a905      	add	r1, sp, #20
								if(require_resp_prop->address == addr && require_resp_prop->cmd == cmd){
 8004a76:	d103      	bne.n	8004a80 <loraif_rx_process+0xc4>
 8004a78:	7902      	ldrb	r2, [r0, #4]
 8004a7a:	42b2      	cmp	r2, r6
 8004a7c:	f000 80b9 	beq.w	8004bf2 <loraif_rx_process+0x236>
									if(xQueueSend(wait_response_queue, &require_resp_prop, 2) != pdTRUE){
 8004a80:	6828      	ldr	r0, [r5, #0]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f7fd f802 	bl	8001a8c <xQueueGenericSend>
 8004a88:	2801      	cmp	r0, #1
 8004a8a:	d0de      	beq.n	8004a4a <loraif_rx_process+0x8e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a8c:	4869      	ldr	r0, [pc, #420]	; (8004c34 <loraif_rx_process+0x278>)
 8004a8e:	f8cd b000 	str.w	fp, [sp]
 8004a92:	f44f 739a 	mov.w	r3, #308	; 0x134
 8004a96:	4652      	mov	r2, sl
 8004a98:	4649      	mov	r1, r9
 8004a9a:	f005 f8df 	bl	8009c5c <LOG_DEBUG>
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 8004a9e:	e7d4      	b.n	8004a4a <loraif_rx_process+0x8e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004aa0:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <loraif_rx_process+0x27c>)
 8004aa2:	9300      	str	r3, [sp, #0]
 8004aa4:	4a65      	ldr	r2, [pc, #404]	; (8004c3c <loraif_rx_process+0x280>)
 8004aa6:	4966      	ldr	r1, [pc, #408]	; (8004c40 <loraif_rx_process+0x284>)
 8004aa8:	4862      	ldr	r0, [pc, #392]	; (8004c34 <loraif_rx_process+0x278>)
 8004aaa:	f240 1353 	movw	r3, #339	; 0x153
 8004aae:	f005 f8d5 	bl	8009c5c <LOG_DEBUG>
 8004ab2:	af09      	add	r7, sp, #36	; 0x24
		json_release_object(&json);
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f000 fad9 	bl	800506c <json_release_object>
		release_packet(&pkt);
 8004aba:	a806      	add	r0, sp, #24
 8004abc:	f000 fb42 	bl	8005144 <release_packet>
		free(rx_full);
 8004ac0:	9802      	ldr	r0, [sp, #8]
 8004ac2:	f006 f89f 	bl	800ac04 <free>
}
 8004ac6:	b00d      	add	sp, #52	; 0x34
 8004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 8004acc:	4a5d      	ldr	r2, [pc, #372]	; (8004c44 <loraif_rx_process+0x288>)
 8004ace:	9807      	ldr	r0, [sp, #28]
 8004ad0:	4639      	mov	r1, r7
 8004ad2:	f000 f9b3 	bl	8004e3c <json_get_object>
				if(err == PKT_ERR_OK){
 8004ad6:	b320      	cbz	r0, 8004b22 <loraif_rx_process+0x166>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ad8:	4b57      	ldr	r3, [pc, #348]	; (8004c38 <loraif_rx_process+0x27c>)
 8004ada:	4a5b      	ldr	r2, [pc, #364]	; (8004c48 <loraif_rx_process+0x28c>)
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	f240 1305 	movw	r3, #261	; 0x105
 8004ae2:	4957      	ldr	r1, [pc, #348]	; (8004c40 <loraif_rx_process+0x284>)
 8004ae4:	4853      	ldr	r0, [pc, #332]	; (8004c34 <loraif_rx_process+0x278>)
 8004ae6:	f005 f8b9 	bl	8009c5c <LOG_DEBUG>
				json_release_object(&json);
 8004aea:	4638      	mov	r0, r7
 8004aec:	f000 fabe 	bl	800506c <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 8004af0:	9a07      	ldr	r2, [sp, #28]
 8004af2:	4956      	ldr	r1, [pc, #344]	; (8004c4c <loraif_rx_process+0x290>)
 8004af4:	a803      	add	r0, sp, #12
 8004af6:	f006 f82d 	bl	800ab54 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, evt_data);
 8004afa:	4b55      	ldr	r3, [pc, #340]	; (8004c50 <loraif_rx_process+0x294>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b113      	cbz	r3, 8004b06 <loraif_rx_process+0x14a>
 8004b00:	9903      	ldr	r1, [sp, #12]
 8004b02:	4630      	mov	r0, r6
 8004b04:	4798      	blx	r3
			free(evt_data);
 8004b06:	9803      	ldr	r0, [sp, #12]
 8004b08:	f006 f87c 	bl	800ac04 <free>
 8004b0c:	e7d2      	b.n	8004ab4 <loraif_rx_process+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b0e:	4b4a      	ldr	r3, [pc, #296]	; (8004c38 <loraif_rx_process+0x27c>)
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4a50      	ldr	r2, [pc, #320]	; (8004c54 <loraif_rx_process+0x298>)
 8004b14:	494a      	ldr	r1, [pc, #296]	; (8004c40 <loraif_rx_process+0x284>)
 8004b16:	4847      	ldr	r0, [pc, #284]	; (8004c34 <loraif_rx_process+0x278>)
 8004b18:	f44f 7389 	mov.w	r3, #274	; 0x112
 8004b1c:	f005 f89e 	bl	8009c5c <LOG_DEBUG>
						cmd = LORA_ERR;
 8004b20:	e7e3      	b.n	8004aea <loraif_rx_process+0x12e>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 8004b22:	4601      	mov	r1, r0
 8004b24:	2210      	movs	r2, #16
 8004b26:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004b28:	4c4b      	ldr	r4, [pc, #300]	; (8004c58 <loraif_rx_process+0x29c>)
 8004b2a:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8004c7c <loraif_rx_process+0x2c0>
 8004b2e:	f007 f887 	bl	800bc40 <strtol>
 8004b32:	4605      	mov	r5, r0
					rng_set_seed(rand_num);
 8004b34:	f002 feec 	bl	8007910 <rng_set_seed>
						addr_by_gw = rng_generate_random_number();
 8004b38:	f002 fef0 	bl	800791c <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004b3c:	f8d8 2000 	ldr.w	r2, [r8]
 8004b40:	6020      	str	r0, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004b42:	4542      	cmp	r2, r8
 8004b44:	d006      	beq.n	8004b54 <loraif_rx_process+0x198>
        if ((*device)->address == num) {
 8004b46:	6891      	ldr	r1, [r2, #8]
 8004b48:	6809      	ldr	r1, [r1, #0]
 8004b4a:	4288      	cmp	r0, r1
 8004b4c:	d0f4      	beq.n	8004b38 <loraif_rx_process+0x17c>
	_M_node = _M_node->_M_next;
 8004b4e:	6812      	ldr	r2, [r2, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004b50:	4542      	cmp	r2, r8
 8004b52:	d1f8      	bne.n	8004b46 <loraif_rx_process+0x18a>
					addr_by_gw &= 0x7FFFFFFFU;
 8004b54:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 8004b58:	462b      	mov	r3, r5
 8004b5a:	4940      	ldr	r1, [pc, #256]	; (8004c5c <loraif_rx_process+0x2a0>)
					addr_by_gw &= 0x7FFFFFFFU;
 8004b5c:	6022      	str	r2, [r4, #0]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 8004b5e:	a805      	add	r0, sp, #20
 8004b60:	f005 fff8 	bl	800ab54 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004b64:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004b68:	4640      	mov	r0, r8
 8004b6a:	f7fb fb4b 	bl	8000204 <strlen>
 8004b6e:	b281      	uxth	r1, r0
 8004b70:	4640      	mov	r0, r8
 8004b72:	f7ff fc33 	bl	80043dc <cal_crc16>
 8004b76:	4680      	mov	r8, r0
					free(temp);
 8004b78:	9805      	ldr	r0, [sp, #20]
 8004b7a:	f006 f843 	bl	800ac04 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,\"crc\":0x%04x}", (unsigned int)addr_by_gw, (unsigned int)rand_num, crc);
 8004b7e:	f8cd 8000 	str.w	r8, [sp]
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	4936      	ldr	r1, [pc, #216]	; (8004c60 <loraif_rx_process+0x2a4>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b86:	4c2c      	ldr	r4, [pc, #176]	; (8004c38 <loraif_rx_process+0x27c>)
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,\"crc\":0x%04x}", (unsigned int)addr_by_gw, (unsigned int)rand_num, crc);
 8004b88:	462b      	mov	r3, r5
 8004b8a:	a804      	add	r0, sp, #16
 8004b8c:	f005 ffe2 	bl	800ab54 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b90:	9a04      	ldr	r2, [sp, #16]
 8004b92:	492b      	ldr	r1, [pc, #172]	; (8004c40 <loraif_rx_process+0x284>)
 8004b94:	4827      	ldr	r0, [pc, #156]	; (8004c34 <loraif_rx_process+0x278>)
 8004b96:	9400      	str	r4, [sp, #0]
 8004b98:	23fd      	movs	r3, #253	; 0xfd
 8004b9a:	f005 f85f 	bl	8009c5c <LOG_DEBUG>
					if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 8004b9e:	4b31      	ldr	r3, [pc, #196]	; (8004c64 <loraif_rx_process+0x2a8>)
 8004ba0:	a904      	add	r1, sp, #16
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f7fc ff70 	bl	8001a8c <xQueueGenericSend>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d19f      	bne.n	8004af0 <loraif_rx_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004bb0:	4a2d      	ldr	r2, [pc, #180]	; (8004c68 <loraif_rx_process+0x2ac>)
 8004bb2:	4923      	ldr	r1, [pc, #140]	; (8004c40 <loraif_rx_process+0x284>)
 8004bb4:	481f      	ldr	r0, [pc, #124]	; (8004c34 <loraif_rx_process+0x278>)
 8004bb6:	9400      	str	r4, [sp, #0]
 8004bb8:	23ff      	movs	r3, #255	; 0xff
 8004bba:	f005 f84f 	bl	8009c5c <LOG_DEBUG>
}
 8004bbe:	e797      	b.n	8004af0 <loraif_rx_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	; (8004c38 <loraif_rx_process+0x27c>)
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	4a29      	ldr	r2, [pc, #164]	; (8004c6c <loraif_rx_process+0x2b0>)
 8004bc6:	f44f 73a2 	mov.w	r3, #324	; 0x144
					cmd = LORA_ERR;
 8004bca:	462e      	mov	r6, r5
 8004bcc:	e789      	b.n	8004ae2 <loraif_rx_process+0x126>
						if(addr == addr_by_gw){
 8004bce:	4b22      	ldr	r3, [pc, #136]	; (8004c58 <loraif_rx_process+0x29c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4283      	cmp	r3, r0
 8004bd4:	d189      	bne.n	8004aea <loraif_rx_process+0x12e>
							set_response_ok(addr, cmd);
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	f7ff fc1c 	bl	8004414 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <loraif_rx_process+0x27c>)
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <loraif_rx_process+0x2b4>)
 8004be2:	4917      	ldr	r1, [pc, #92]	; (8004c40 <loraif_rx_process+0x284>)
 8004be4:	4813      	ldr	r0, [pc, #76]	; (8004c34 <loraif_rx_process+0x278>)
 8004be6:	f240 1319 	movw	r3, #281	; 0x119
 8004bea:	f005 f837 	bl	8009c5c <LOG_DEBUG>
							cmd = LORA_ADD_DEVICE;
 8004bee:	2608      	movs	r6, #8
							goto event_handle;
 8004bf0:	e77e      	b.n	8004af0 <loraif_rx_process+0x134>
									free(require_resp_prop);
 8004bf2:	f006 f807 	bl	800ac04 <free>
							loraif_dev_t *err_dev = loraif_select_device(pkt.data_str);
 8004bf6:	9807      	ldr	r0, [sp, #28]
 8004bf8:	f7ff fe9a 	bl	8004930 <loraif_select_device>
 8004bfc:	4603      	mov	r3, r0
							err_dev->err_count = 0;
 8004bfe:	2200      	movs	r2, #0
							set_response_ok(addr, cmd);
 8004c00:	4640      	mov	r0, r8
							err_dev->err_count = 0;
 8004c02:	721a      	strb	r2, [r3, #8]
							set_response_ok(addr, cmd);
 8004c04:	4631      	mov	r1, r6
 8004c06:	f7ff fc05 	bl	8004414 <_ZL15set_response_okm12lora_event_t>
							goto event_handle;
 8004c0a:	e771      	b.n	8004af0 <loraif_rx_process+0x134>
							set_response_ok(addr, cmd);
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	f7ff fc01 	bl	8004414 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004c12:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <loraif_rx_process+0x27c>)
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	4a17      	ldr	r2, [pc, #92]	; (8004c74 <loraif_rx_process+0x2b8>)
 8004c18:	4909      	ldr	r1, [pc, #36]	; (8004c40 <loraif_rx_process+0x284>)
 8004c1a:	4806      	ldr	r0, [pc, #24]	; (8004c34 <loraif_rx_process+0x278>)
 8004c1c:	f240 1321 	movw	r3, #289	; 0x121
 8004c20:	f005 f81c 	bl	8009c5c <LOG_DEBUG>
							goto event_handle;
 8004c24:	e764      	b.n	8004af0 <loraif_rx_process+0x134>
 8004c26:	bf00      	nop
 8004c28:	2000000c 	.word	0x2000000c
 8004c2c:	0800e0e0 	.word	0x0800e0e0
 8004c30:	2000b278 	.word	0x2000b278
 8004c34:	0800e00c 	.word	0x0800e00c
 8004c38:	0800e1d0 	.word	0x0800e1d0
 8004c3c:	0800e258 	.word	0x0800e258
 8004c40:	0800dff0 	.word	0x0800dff0
 8004c44:	0800e1a8 	.word	0x0800e1a8
 8004c48:	0800e1e4 	.word	0x0800e1e4
 8004c4c:	0800ebec 	.word	0x0800ebec
 8004c50:	2000b258 	.word	0x2000b258
 8004c54:	0800e208 	.word	0x0800e208
 8004c58:	2000b260 	.word	0x2000b260
 8004c5c:	0800e274 	.word	0x0800e274
 8004c60:	0800e2a4 	.word	0x0800e2a4
 8004c64:	2000b270 	.word	0x2000b270
 8004c68:	0800e1ac 	.word	0x0800e1ac
 8004c6c:	0800e248 	.word	0x0800e248
 8004c70:	0800e218 	.word	0x0800e218
 8004c74:	0800e234 	.word	0x0800e234
 8004c78:	0800e0a8 	.word	0x0800e0a8
 8004c7c:	2000b24c 	.word	0x2000b24c

08004c80 <loraif_check_timeout>:
void loraif_check_timeout(void){
 8004c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 8004c84:	4e43      	ldr	r6, [pc, #268]	; (8004d94 <loraif_check_timeout+0x114>)
void loraif_check_timeout(void){
 8004c86:	b087      	sub	sp, #28
	uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 8004c88:	6830      	ldr	r0, [r6, #0]
 8004c8a:	f7fd fe57 	bl	800293c <uxQueueMessagesWaiting>
	for(uint8_t i=0; i<queue_len; i++){
 8004c8e:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8004c92:	d064      	beq.n	8004d5e <loraif_check_timeout+0xde>
			if(dt >= resp_timeout){
 8004c94:	4f40      	ldr	r7, [pc, #256]	; (8004d98 <loraif_check_timeout+0x118>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004c96:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8004db8 <loraif_check_timeout+0x138>
 8004c9a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8004dbc <loraif_check_timeout+0x13c>
	for(uint8_t i=0; i<queue_len; i++){
 8004c9e:	2400      	movs	r4, #0
 8004ca0:	e003      	b.n	8004caa <loraif_check_timeout+0x2a>
 8004ca2:	3401      	adds	r4, #1
 8004ca4:	b2e3      	uxtb	r3, r4
 8004ca6:	429d      	cmp	r5, r3
 8004ca8:	d959      	bls.n	8004d5e <loraif_check_timeout+0xde>
		if(xQueueReceive(wait_response_queue, &wait_response, 2) == pdTRUE){
 8004caa:	6830      	ldr	r0, [r6, #0]
 8004cac:	2202      	movs	r2, #2
 8004cae:	a903      	add	r1, sp, #12
 8004cb0:	f7fd f960 	bl	8001f74 <xQueueReceive>
 8004cb4:	2801      	cmp	r0, #1
 8004cb6:	d1f4      	bne.n	8004ca2 <loraif_check_timeout+0x22>
			uint32_t dt = 0, tick_now = get_tick();
 8004cb8:	f003 fc82 	bl	80085c0 <get_tick>
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004cbc:	9a03      	ldr	r2, [sp, #12]
 8004cbe:	6893      	ldr	r3, [r2, #8]
 8004cc0:	4283      	cmp	r3, r0
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004cc2:	bf8c      	ite	hi
 8004cc4:	ea6f 0a03 	mvnhi.w	sl, r3
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004cc8:	eba0 0a03 	subls.w	sl, r0, r3
			if(dt >= resp_timeout){
 8004ccc:	683b      	ldr	r3, [r7, #0]
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004cce:	bf88      	it	hi
 8004cd0:	4482      	addhi	sl, r0
			if(dt >= resp_timeout){
 8004cd2:	4553      	cmp	r3, sl
 8004cd4:	d846      	bhi.n	8004d64 <loraif_check_timeout+0xe4>
				asprintf(&evt_data, "{\"addr\":0x%08x}", (unsigned int)wait_response->address);
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	4930      	ldr	r1, [pc, #192]	; (8004d9c <loraif_check_timeout+0x11c>)
 8004cda:	a804      	add	r0, sp, #16
 8004cdc:	f005 ff3a 	bl	800ab54 <asiprintf>
				loraif_dev_t *err_dev = loraif_select_device(evt_data);
 8004ce0:	9804      	ldr	r0, [sp, #16]
 8004ce2:	f7ff fe25 	bl	8004930 <loraif_select_device>
 8004ce6:	4683      	mov	fp, r0
				free(evt_data);
 8004ce8:	9804      	ldr	r0, [sp, #16]
 8004cea:	f005 ff8b 	bl	800ac04 <free>
				asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004cee:	9b03      	ldr	r3, [sp, #12]
 8004cf0:	492b      	ldr	r1, [pc, #172]	; (8004da0 <loraif_check_timeout+0x120>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004cf8:	a804      	add	r0, sp, #16
 8004cfa:	f005 ff2b 	bl	800ab54 <asiprintf>
				err_dev->err_count++;
 8004cfe:	f89b 1008 	ldrb.w	r1, [fp, #8]
				asprintf(&tmp_dbg, "Device 0x%08x time = %lu, %d time not response", (unsigned int)wait_response->address, dt, err_dev->err_count);
 8004d02:	9a03      	ldr	r2, [sp, #12]
				err_dev->err_count++;
 8004d04:	3101      	adds	r1, #1
 8004d06:	b2c9      	uxtb	r1, r1
 8004d08:	f88b 1008 	strb.w	r1, [fp, #8]
				asprintf(&tmp_dbg, "Device 0x%08x time = %lu, %d time not response", (unsigned int)wait_response->address, dt, err_dev->err_count);
 8004d0c:	6812      	ldr	r2, [r2, #0]
 8004d0e:	9100      	str	r1, [sp, #0]
 8004d10:	4653      	mov	r3, sl
 8004d12:	4924      	ldr	r1, [pc, #144]	; (8004da4 <loraif_check_timeout+0x124>)
 8004d14:	a805      	add	r0, sp, #20
 8004d16:	f005 ff1d 	bl	800ab54 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d1a:	9a05      	ldr	r2, [sp, #20]
 8004d1c:	4922      	ldr	r1, [pc, #136]	; (8004da8 <loraif_check_timeout+0x128>)
 8004d1e:	4823      	ldr	r0, [pc, #140]	; (8004dac <loraif_check_timeout+0x12c>)
 8004d20:	f8cd 8000 	str.w	r8, [sp]
 8004d24:	f240 137d 	movw	r3, #381	; 0x17d
 8004d28:	f004 ff98 	bl	8009c5c <LOG_DEBUG>
				free(tmp_dbg);
 8004d2c:	9805      	ldr	r0, [sp, #20]
 8004d2e:	f005 ff69 	bl	800ac04 <free>
				if(err_dev->err_count >= max_not_resp){
 8004d32:	4b1f      	ldr	r3, [pc, #124]	; (8004db0 <loraif_check_timeout+0x130>)
 8004d34:	f89b 2008 	ldrb.w	r2, [fp, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	429a      	cmp	r2, r3
					if(fpeventhandler != NULL) fpeventhandler(LORA_REMOVE_DEVICE, evt_data);
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <loraif_check_timeout+0x134>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
				if(err_dev->err_count >= max_not_resp){
 8004d40:	d222      	bcs.n	8004d88 <loraif_check_timeout+0x108>
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, evt_data);
 8004d42:	b113      	cbz	r3, 8004d4a <loraif_check_timeout+0xca>
 8004d44:	9904      	ldr	r1, [sp, #16]
 8004d46:	200a      	movs	r0, #10
 8004d48:	4798      	blx	r3
				free(evt_data);
 8004d4a:	9804      	ldr	r0, [sp, #16]
 8004d4c:	f005 ff5a 	bl	800ac04 <free>
	for(uint8_t i=0; i<queue_len; i++){
 8004d50:	3401      	adds	r4, #1
				free(wait_response);
 8004d52:	9803      	ldr	r0, [sp, #12]
 8004d54:	f005 ff56 	bl	800ac04 <free>
	for(uint8_t i=0; i<queue_len; i++){
 8004d58:	b2e3      	uxtb	r3, r4
 8004d5a:	429d      	cmp	r5, r3
 8004d5c:	d8a5      	bhi.n	8004caa <loraif_check_timeout+0x2a>
}
 8004d5e:	b007      	add	sp, #28
 8004d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(xQueueSend(wait_response_queue, &wait_response, 2) != pdTRUE){
 8004d64:	6830      	ldr	r0, [r6, #0]
 8004d66:	2300      	movs	r3, #0
 8004d68:	2202      	movs	r2, #2
 8004d6a:	a903      	add	r1, sp, #12
 8004d6c:	f7fc fe8e 	bl	8001a8c <xQueueGenericSend>
 8004d70:	2801      	cmp	r0, #1
 8004d72:	d096      	beq.n	8004ca2 <loraif_check_timeout+0x22>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d74:	490c      	ldr	r1, [pc, #48]	; (8004da8 <loraif_check_timeout+0x128>)
 8004d76:	480d      	ldr	r0, [pc, #52]	; (8004dac <loraif_check_timeout+0x12c>)
 8004d78:	f8cd 8000 	str.w	r8, [sp]
 8004d7c:	f240 138b 	movw	r3, #395	; 0x18b
 8004d80:	464a      	mov	r2, r9
 8004d82:	f004 ff6b 	bl	8009c5c <LOG_DEBUG>
}
 8004d86:	e78c      	b.n	8004ca2 <loraif_check_timeout+0x22>
					if(fpeventhandler != NULL) fpeventhandler(LORA_REMOVE_DEVICE, evt_data);
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0de      	beq.n	8004d4a <loraif_check_timeout+0xca>
 8004d8c:	9904      	ldr	r1, [sp, #16]
 8004d8e:	2009      	movs	r0, #9
 8004d90:	4798      	blx	r3
 8004d92:	e7da      	b.n	8004d4a <loraif_check_timeout+0xca>
 8004d94:	2000b278 	.word	0x2000b278
 8004d98:	2000b26c 	.word	0x2000b26c
 8004d9c:	0800e2e0 	.word	0x0800e2e0
 8004da0:	0800e2f0 	.word	0x0800e2f0
 8004da4:	0800e30c 	.word	0x0800e30c
 8004da8:	0800dff0 	.word	0x0800dff0
 8004dac:	0800e00c 	.word	0x0800e00c
 8004db0:	2000b268 	.word	0x2000b268
 8004db4:	2000b258 	.word	0x2000b258
 8004db8:	0800e33c 	.word	0x0800e33c
 8004dbc:	0800e0a8 	.word	0x0800e0a8

08004dc0 <loraif_response>:
void loraif_response(void){
 8004dc0:	b510      	push	{r4, lr}
	if(xQueueReceive(response_queue, &response, 2)){
 8004dc2:	4b10      	ldr	r3, [pc, #64]	; (8004e04 <loraif_response+0x44>)
void loraif_response(void){
 8004dc4:	b082      	sub	sp, #8
	if(xQueueReceive(response_queue, &response, 2)){
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	a901      	add	r1, sp, #4
 8004dcc:	f7fd f8d2 	bl	8001f74 <xQueueReceive>
 8004dd0:	b938      	cbnz	r0, 8004de2 <loraif_response+0x22>
	loraif_check_timeout();
 8004dd2:	f7ff ff55 	bl	8004c80 <loraif_check_timeout>
	vTaskDelay(500);
 8004dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004dda:	f7fe f9f9 	bl	80031d0 <vTaskDelay>
}
 8004dde:	b002      	add	sp, #8
 8004de0:	bd10      	pop	{r4, pc}
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <loraif_response+0x48>)
		loraif_transmit(response);
 8004de4:	9c01      	ldr	r4, [sp, #4]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dec:	f7fd fa44 	bl	8002278 <xQueueSemaphoreTake>
 8004df0:	b918      	cbnz	r0, 8004dfa <loraif_response+0x3a>
		free(response);
 8004df2:	9801      	ldr	r0, [sp, #4]
 8004df4:	f005 ff06 	bl	800ac04 <free>
 8004df8:	e7eb      	b.n	8004dd2 <loraif_response+0x12>
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7ff fb56 	bl	80044ac <_ZL15loraif_transmitPc.part.0>
 8004e00:	e7f7      	b.n	8004df2 <loraif_response+0x32>
 8004e02:	bf00      	nop
 8004e04:	2000b270 	.word	0x2000b270
 8004e08:	2000b274 	.word	0x2000b274

08004e0c <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 8004e0c:	4b02      	ldr	r3, [pc, #8]	; (8004e18 <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 8004e0e:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8004e10:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8004e14:	609a      	str	r2, [r3, #8]
}
 8004e16:	4770      	bx	lr
 8004e18:	2000b24c 	.word	0x2000b24c

08004e1c <_GLOBAL__sub_D_loraif>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004e1e:	4d06      	ldr	r5, [pc, #24]	; (8004e38 <_GLOBAL__sub_D_loraif+0x1c>)
 8004e20:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 8004e22:	42ac      	cmp	r4, r5
 8004e24:	d006      	beq.n	8004e34 <_GLOBAL__sub_D_loraif+0x18>
 8004e26:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8004e28:	6824      	ldr	r4, [r4, #0]
 8004e2a:	210c      	movs	r1, #12
 8004e2c:	f005 fe1e 	bl	800aa6c <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8004e30:	42ac      	cmp	r4, r5
 8004e32:	d1f8      	bne.n	8004e26 <_GLOBAL__sub_D_loraif+0xa>
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop
 8004e38:	2000b24c 	.word	0x2000b24c

08004e3c <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 8004e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e40:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004e42:	2900      	cmp	r1, #0
 8004e44:	d079      	beq.n	8004f3a <json_get_object+0xfe>
 8004e46:	4614      	mov	r4, r2
 8004e48:	2a00      	cmp	r2, #0
 8004e4a:	d076      	beq.n	8004f3a <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004e4c:	7803      	ldrb	r3, [r0, #0]
 8004e4e:	2b7b      	cmp	r3, #123	; 0x7b
 8004e50:	4605      	mov	r5, r0
 8004e52:	d166      	bne.n	8004f22 <json_get_object+0xe6>
 8004e54:	460e      	mov	r6, r1
	int src_len = strlen(src);
 8004e56:	f7fb f9d5 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004e5a:	182b      	adds	r3, r5, r0
	int src_len = strlen(src);
 8004e5c:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004e5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004e62:	2b7d      	cmp	r3, #125	; 0x7d
 8004e64:	d15d      	bne.n	8004f22 <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 8004e66:	4622      	mov	r2, r4
 8004e68:	4977      	ldr	r1, [pc, #476]	; (8005048 <json_get_object+0x20c>)
 8004e6a:	a805      	add	r0, sp, #20
 8004e6c:	f005 fe72 	bl	800ab54 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8004e70:	9905      	ldr	r1, [sp, #20]
 8004e72:	9103      	str	r1, [sp, #12]
 8004e74:	4628      	mov	r0, r5
 8004e76:	f006 fe4b 	bl	800bb10 <strstr>
	free(tmp);
 8004e7a:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 8004e7c:	4604      	mov	r4, r0
	free(tmp);
 8004e7e:	4608      	mov	r0, r1
 8004e80:	f005 fec0 	bl	800ac04 <free>
	if(pkstart == NULL){
 8004e84:	2c00      	cmp	r4, #0
 8004e86:	f000 80b3 	beq.w	8004ff0 <json_get_object+0x1b4>
		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 8004e8a:	f104 0801 	add.w	r8, r4, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004e8e:	4640      	mov	r0, r8
 8004e90:	f7fb f9b8 	bl	8000204 <strlen>
 8004e94:	4623      	mov	r3, r4
 8004e96:	2400      	movs	r4, #0
 8004e98:	e004      	b.n	8004ea4 <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 8004e9a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004e9e:	2a22      	cmp	r2, #34	; 0x22
 8004ea0:	d002      	beq.n	8004ea8 <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004ea2:	3401      	adds	r4, #1
 8004ea4:	42a0      	cmp	r0, r4
 8004ea6:	dcf8      	bgt.n	8004e9a <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 8004ea8:	1c60      	adds	r0, r4, #1
 8004eaa:	f005 fea3 	bl	800abf4 <malloc>
 8004eae:	4681      	mov	r9, r0
 8004eb0:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	f000 80a9 	beq.w	800500a <json_get_object+0x1ce>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4641      	mov	r1, r8
 8004ebc:	f005 feaa 	bl	800ac14 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004ec0:	1ca3      	adds	r3, r4, #2
	dest->key[key_len] = '\0';
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f809 2004 	strb.w	r2, [r9, r4]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004ec8:	f818 2003 	ldrb.w	r2, [r8, r3]
 8004ecc:	2a7b      	cmp	r2, #123	; 0x7b
 8004ece:	eb08 0903 	add.w	r9, r8, r3
 8004ed2:	d03e      	beq.n	8004f52 <json_get_object+0x116>
		dest->leaf = true;
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 8004ed8:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004edc:	2b22      	cmp	r3, #34	; 0x22
 8004ede:	d06d      	beq.n	8004fbc <json_get_object+0x180>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004ee0:	4648      	mov	r0, r9
 8004ee2:	f7fb f98f 	bl	8000204 <strlen>
 8004ee6:	2400      	movs	r4, #0
 8004ee8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8004eec:	e006      	b.n	8004efc <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 8004eee:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004ef2:	2b7d      	cmp	r3, #125	; 0x7d
 8004ef4:	d004      	beq.n	8004f00 <json_get_object+0xc4>
 8004ef6:	2b2c      	cmp	r3, #44	; 0x2c
 8004ef8:	d002      	beq.n	8004f00 <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004efa:	3401      	adds	r4, #1
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	dcf6      	bgt.n	8004eee <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 8004f00:	2c00      	cmp	r4, #0
 8004f02:	d06b      	beq.n	8004fdc <json_get_object+0x1a0>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 8004f04:	1c60      	adds	r0, r4, #1
 8004f06:	f005 fe75 	bl	800abf4 <malloc>
 8004f0a:	4605      	mov	r5, r0
 8004f0c:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	f000 808f 	beq.w	8005032 <json_get_object+0x1f6>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004f14:	4622      	mov	r2, r4
 8004f16:	4649      	mov	r1, r9
 8004f18:	f005 fe7c 	bl	800ac14 <memcpy>
		dest->value[val_len] = '\0';
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	5528      	strb	r0, [r5, r4]
 8004f20:	e008      	b.n	8004f34 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f22:	4b4a      	ldr	r3, [pc, #296]	; (800504c <json_get_object+0x210>)
 8004f24:	484a      	ldr	r0, [pc, #296]	; (8005050 <json_get_object+0x214>)
 8004f26:	9300      	str	r3, [sp, #0]
 8004f28:	4a4a      	ldr	r2, [pc, #296]	; (8005054 <json_get_object+0x218>)
 8004f2a:	494b      	ldr	r1, [pc, #300]	; (8005058 <json_get_object+0x21c>)
 8004f2c:	232b      	movs	r3, #43	; 0x2b
 8004f2e:	f004 fe95 	bl	8009c5c <LOG_DEBUG>
		return ret;
 8004f32:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 8004f34:	b007      	add	sp, #28
 8004f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f3a:	4b44      	ldr	r3, [pc, #272]	; (800504c <json_get_object+0x210>)
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	4a47      	ldr	r2, [pc, #284]	; (800505c <json_get_object+0x220>)
 8004f40:	4945      	ldr	r1, [pc, #276]	; (8005058 <json_get_object+0x21c>)
 8004f42:	4843      	ldr	r0, [pc, #268]	; (8005050 <json_get_object+0x214>)
 8004f44:	2326      	movs	r3, #38	; 0x26
 8004f46:	f004 fe89 	bl	8009c5c <LOG_DEBUG>
		return ret;
 8004f4a:	2001      	movs	r0, #1
}
 8004f4c:	b007      	add	sp, #28
 8004f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 8004f52:	7931      	ldrb	r1, [r6, #4]
 8004f54:	2900      	cmp	r1, #0
 8004f56:	d1bf      	bne.n	8004ed8 <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 8004f58:	eba8 0805 	sub.w	r8, r8, r5
 8004f5c:	4444      	add	r4, r8
 8004f5e:	f104 0c02 	add.w	ip, r4, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004f62:	4567      	cmp	r7, ip
 8004f64:	dd4e      	ble.n	8005004 <json_get_object+0x1c8>
 8004f66:	3401      	adds	r4, #1
 8004f68:	4425      	add	r5, r4
 8004f6a:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 8004f6c:	4608      	mov	r0, r1
 8004f6e:	e007      	b.n	8004f80 <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8004f70:	2a7d      	cmp	r2, #125	; 0x7d
 8004f72:	bf08      	it	eq
 8004f74:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 8004f76:	4281      	cmp	r1, r0
 8004f78:	d008      	beq.n	8004f8c <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	429f      	cmp	r7, r3
 8004f7e:	d018      	beq.n	8004fb2 <json_get_object+0x176>
			if(src_cpy[ivend] == '{') l_brace++;
 8004f80:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004f84:	2a7b      	cmp	r2, #123	; 0x7b
 8004f86:	d1f3      	bne.n	8004f70 <json_get_object+0x134>
 8004f88:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 8004f8a:	e7f4      	b.n	8004f76 <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 8004f8c:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8004f90:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 8004f92:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 8004f94:	f005 fe2e 	bl	800abf4 <malloc>
 8004f98:	4604      	mov	r4, r0
 8004f9a:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d03e      	beq.n	800501e <json_get_object+0x1e2>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004fa0:	463a      	mov	r2, r7
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	f005 fe36 	bl	800ac14 <memcpy>
		dest->value[val_len] = '\0';
 8004fa8:	2000      	movs	r0, #0
 8004faa:	55e0      	strb	r0, [r4, r7]
}
 8004fac:	b007      	add	sp, #28
 8004fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 8004fb2:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 8004fb6:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 8004fb8:	3701      	adds	r7, #1
 8004fba:	e7eb      	b.n	8004f94 <json_get_object+0x158>
			pvstart++;
 8004fbc:	f109 0501 	add.w	r5, r9, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	f7fb f91f 	bl	8000204 <strlen>
 8004fc6:	2400      	movs	r4, #0
 8004fc8:	e004      	b.n	8004fd4 <json_get_object+0x198>
				if(pvstart[val_len] == '"') break;
 8004fca:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8004fce:	2b22      	cmp	r3, #34	; 0x22
 8004fd0:	d002      	beq.n	8004fd8 <json_get_object+0x19c>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004fd2:	3401      	adds	r4, #1
 8004fd4:	42a0      	cmp	r0, r4
 8004fd6:	dcf8      	bgt.n	8004fca <json_get_object+0x18e>
 8004fd8:	46a9      	mov	r9, r5
 8004fda:	e791      	b.n	8004f00 <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <json_get_object+0x210>)
 8004fde:	481c      	ldr	r0, [pc, #112]	; (8005050 <json_get_object+0x214>)
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	; (8005060 <json_get_object+0x224>)
 8004fe4:	491c      	ldr	r1, [pc, #112]	; (8005058 <json_get_object+0x21c>)
 8004fe6:	2366      	movs	r3, #102	; 0x66
 8004fe8:	f004 fe38 	bl	8009c5c <LOG_DEBUG>
			return ret;
 8004fec:	2008      	movs	r0, #8
 8004fee:	e7a1      	b.n	8004f34 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ff0:	4b16      	ldr	r3, [pc, #88]	; (800504c <json_get_object+0x210>)
 8004ff2:	4817      	ldr	r0, [pc, #92]	; (8005050 <json_get_object+0x214>)
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <json_get_object+0x228>)
 8004ff8:	4917      	ldr	r1, [pc, #92]	; (8005058 <json_get_object+0x21c>)
 8004ffa:	2336      	movs	r3, #54	; 0x36
 8004ffc:	f004 fe2e 	bl	8009c5c <LOG_DEBUG>
		return ret;
 8005000:	2004      	movs	r0, #4
 8005002:	e797      	b.n	8004f34 <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8005004:	2701      	movs	r7, #1
 8005006:	2002      	movs	r0, #2
 8005008:	e7c4      	b.n	8004f94 <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <json_get_object+0x210>)
 800500c:	4810      	ldr	r0, [pc, #64]	; (8005050 <json_get_object+0x214>)
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <json_get_object+0x22c>)
 8005012:	4911      	ldr	r1, [pc, #68]	; (8005058 <json_get_object+0x21c>)
 8005014:	2344      	movs	r3, #68	; 0x44
 8005016:	f004 fe21 	bl	8009c5c <LOG_DEBUG>
		return ret;
 800501a:	2010      	movs	r0, #16
 800501c:	e78a      	b.n	8004f34 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800501e:	4b0b      	ldr	r3, [pc, #44]	; (800504c <json_get_object+0x210>)
 8005020:	480b      	ldr	r0, [pc, #44]	; (8005050 <json_get_object+0x214>)
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	4a10      	ldr	r2, [pc, #64]	; (8005068 <json_get_object+0x22c>)
 8005026:	490c      	ldr	r1, [pc, #48]	; (8005058 <json_get_object+0x21c>)
 8005028:	237e      	movs	r3, #126	; 0x7e
 800502a:	f004 fe17 	bl	8009c5c <LOG_DEBUG>
			return ret;
 800502e:	2010      	movs	r0, #16
 8005030:	e780      	b.n	8004f34 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005032:	4b06      	ldr	r3, [pc, #24]	; (800504c <json_get_object+0x210>)
 8005034:	4806      	ldr	r0, [pc, #24]	; (8005050 <json_get_object+0x214>)
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4a0b      	ldr	r2, [pc, #44]	; (8005068 <json_get_object+0x22c>)
 800503a:	4907      	ldr	r1, [pc, #28]	; (8005058 <json_get_object+0x21c>)
 800503c:	236c      	movs	r3, #108	; 0x6c
 800503e:	f004 fe0d 	bl	8009c5c <LOG_DEBUG>
			return ret;
 8005042:	2010      	movs	r0, #16
 8005044:	e776      	b.n	8004f34 <json_get_object+0xf8>
 8005046:	bf00      	nop
 8005048:	0800e474 	.word	0x0800e474
 800504c:	0800e464 	.word	0x0800e464
 8005050:	0800e454 	.word	0x0800e454
 8005054:	0800e47c 	.word	0x0800e47c
 8005058:	0800dff0 	.word	0x0800dff0
 800505c:	0800e438 	.word	0x0800e438
 8005060:	0800e4f4 	.word	0x0800e4f4
 8005064:	0800e4a0 	.word	0x0800e4a0
 8005068:	0800e4d4 	.word	0x0800e4d4

0800506c <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 800506c:	b510      	push	{r4, lr}
 800506e:	4604      	mov	r4, r0
	if(json->key != NULL) {
 8005070:	6800      	ldr	r0, [r0, #0]
 8005072:	b118      	cbz	r0, 800507c <json_release_object+0x10>
		free(json->key);
 8005074:	f005 fdc6 	bl	800ac04 <free>
		json->key = NULL;
 8005078:	2300      	movs	r3, #0
 800507a:	6023      	str	r3, [r4, #0]
	}
	if(json->value != NULL) {
 800507c:	68a0      	ldr	r0, [r4, #8]
 800507e:	b118      	cbz	r0, 8005088 <json_release_object+0x1c>
		free(json->value);
 8005080:	f005 fdc0 	bl	800ac04 <free>
		json->value = NULL;
 8005084:	2300      	movs	r3, #0
 8005086:	60a3      	str	r3, [r4, #8]
	}
	json->leaf = false;
 8005088:	2000      	movs	r0, #0
 800508a:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 800508c:	bd10      	pop	{r4, pc}
 800508e:	bf00      	nop

08005090 <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 8005090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005094:	4688      	mov	r8, r1
 8005096:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8005098:	4924      	ldr	r1, [pc, #144]	; (800512c <parse_packet+0x9c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 800509a:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 800509c:	f006 fd38 	bl	800bb10 <strstr>
	if(pvstart == NULL){
 80050a0:	b318      	cbz	r0, 80050ea <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 80050a2:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 80050a4:	4604      	mov	r4, r0
 80050a6:	1c78      	adds	r0, r7, #1
 80050a8:	f005 fda4 	bl	800abf4 <malloc>
 80050ac:	4606      	mov	r6, r0
 80050ae:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 80050b2:	b330      	cbz	r0, 8005102 <parse_packet+0x72>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 80050b4:	4629      	mov	r1, r5
 80050b6:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 80050b8:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 80050ba:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 80050bc:	f005 fdaa 	bl	800ac14 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 80050c0:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 80050c2:	4620      	mov	r0, r4
 80050c4:	f7fb f89e 	bl	8000204 <strlen>
 80050c8:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 80050ca:	3001      	adds	r0, #1
 80050cc:	f005 fd92 	bl	800abf4 <malloc>
 80050d0:	4607      	mov	r7, r0
 80050d2:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 80050d6:	b1f0      	cbz	r0, 8005116 <parse_packet+0x86>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 80050d8:	4621      	mov	r1, r4
 80050da:	4632      	mov	r2, r6
 80050dc:	f005 fd9a 	bl	800ac14 <memcpy>
	dest->data_str[data_len] = '\0';
 80050e0:	55bd      	strb	r5, [r7, r6]

	return ret;
 80050e2:	4628      	mov	r0, r5
}
 80050e4:	b002      	add	sp, #8
 80050e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80050ea:	4b11      	ldr	r3, [pc, #68]	; (8005130 <parse_packet+0xa0>)
 80050ec:	9300      	str	r3, [sp, #0]
 80050ee:	4a11      	ldr	r2, [pc, #68]	; (8005134 <parse_packet+0xa4>)
 80050f0:	4911      	ldr	r1, [pc, #68]	; (8005138 <parse_packet+0xa8>)
 80050f2:	4812      	ldr	r0, [pc, #72]	; (800513c <parse_packet+0xac>)
 80050f4:	23a0      	movs	r3, #160	; 0xa0
 80050f6:	f004 fdb1 	bl	8009c5c <LOG_DEBUG>
		return ret;
 80050fa:	2002      	movs	r0, #2
}
 80050fc:	b002      	add	sp, #8
 80050fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005102:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <parse_packet+0xa0>)
 8005104:	480d      	ldr	r0, [pc, #52]	; (800513c <parse_packet+0xac>)
 8005106:	9300      	str	r3, [sp, #0]
 8005108:	4a0d      	ldr	r2, [pc, #52]	; (8005140 <parse_packet+0xb0>)
 800510a:	490b      	ldr	r1, [pc, #44]	; (8005138 <parse_packet+0xa8>)
 800510c:	23ab      	movs	r3, #171	; 0xab
 800510e:	f004 fda5 	bl	8009c5c <LOG_DEBUG>
		return ret;
 8005112:	2010      	movs	r0, #16
 8005114:	e7e6      	b.n	80050e4 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005116:	4b06      	ldr	r3, [pc, #24]	; (8005130 <parse_packet+0xa0>)
 8005118:	4808      	ldr	r0, [pc, #32]	; (800513c <parse_packet+0xac>)
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4a08      	ldr	r2, [pc, #32]	; (8005140 <parse_packet+0xb0>)
 800511e:	4906      	ldr	r1, [pc, #24]	; (8005138 <parse_packet+0xa8>)
 8005120:	23b8      	movs	r3, #184	; 0xb8
 8005122:	f004 fd9b 	bl	8009c5c <LOG_DEBUG>
		return ret;
 8005126:	2010      	movs	r0, #16
 8005128:	e7dc      	b.n	80050e4 <parse_packet+0x54>
 800512a:	bf00      	nop
 800512c:	0800e508 	.word	0x0800e508
 8005130:	0800e520 	.word	0x0800e520
 8005134:	0800e50c 	.word	0x0800e50c
 8005138:	0800dff0 	.word	0x0800dff0
 800513c:	0800e454 	.word	0x0800e454
 8005140:	0800e4d4 	.word	0x0800e4d4

08005144 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 8005144:	b510      	push	{r4, lr}
 8005146:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) {
 8005148:	6800      	ldr	r0, [r0, #0]
 800514a:	b118      	cbz	r0, 8005154 <release_packet+0x10>
		free(packet->cmd_str);
 800514c:	f005 fd5a 	bl	800ac04 <free>
		packet->cmd_str = NULL;
 8005150:	2300      	movs	r3, #0
 8005152:	6023      	str	r3, [r4, #0]
	}
	if(packet->data_str != NULL) {
 8005154:	6860      	ldr	r0, [r4, #4]
 8005156:	b118      	cbz	r0, 8005160 <release_packet+0x1c>
		free(packet->data_str);
 8005158:	f005 fd54 	bl	800ac04 <free>
		packet->data_str = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	6063      	str	r3, [r4, #4]
	}

	return PKT_ERR_OK;
}
 8005160:	2000      	movs	r0, #0
 8005162:	bd10      	pop	{r4, pc}

08005164 <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 8005164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 8005166:	1e16      	subs	r6, r2, #0
 8005168:	dd0f      	ble.n	800518a <str_to_cmd+0x26>
 800516a:	4607      	mov	r7, r0
 800516c:	1f0d      	subs	r5, r1, #4
 800516e:	2400      	movs	r4, #0
 8005170:	e002      	b.n	8005178 <str_to_cmd+0x14>
 8005172:	3401      	adds	r4, #1
 8005174:	42a6      	cmp	r6, r4
 8005176:	d008      	beq.n	800518a <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 8005178:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800517c:	4638      	mov	r0, r7
 800517e:	f7fb f837 	bl	80001f0 <strcmp>
 8005182:	2800      	cmp	r0, #0
 8005184:	d1f5      	bne.n	8005172 <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 8005186:	4620      	mov	r0, r4
 8005188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 800518a:	2400      	movs	r4, #0
}
 800518c:	4620      	mov	r0, r4
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005190 <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 8005190:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop

08005198 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 8005198:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 800519c:	2300      	movs	r3, #0
 800519e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80051a2:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80051a6:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 80051aa:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 80051ac:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 80051ae:	9a01      	ldr	r2, [sp, #4]
 80051b0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 80051b4:	6142      	str	r2, [r0, #20]
	_it = itpin;
 80051b6:	8103      	strh	r3, [r0, #8]
}
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop

080051bc <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 80051bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c0:	4604      	mov	r4, r0
 80051c2:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 80051c4:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 80051c6:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 80051c8:	4698      	mov	r8, r3
 80051ca:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 80051cc:	f001 ffd0 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 80051d0:	6920      	ldr	r0, [r4, #16]
 80051d2:	f001 ffcd 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 80051d6:	6960      	ldr	r0, [r4, #20]
 80051d8:	f001 ffca 	bl	8007170 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 80051dc:	2207      	movs	r2, #7
 80051de:	88a1      	ldrh	r1, [r4, #4]
 80051e0:	68e0      	ldr	r0, [r4, #12]
 80051e2:	f002 f82b 	bl	800723c <gpio_set_mode>
	gpio_set(_csport, _cs);
 80051e6:	88a1      	ldrh	r1, [r4, #4]
 80051e8:	68e0      	ldr	r0, [r4, #12]
 80051ea:	f002 f909 	bl	8007400 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 80051ee:	2207      	movs	r2, #7
 80051f0:	88e1      	ldrh	r1, [r4, #6]
 80051f2:	6920      	ldr	r0, [r4, #16]
 80051f4:	f002 f822 	bl	800723c <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 80051f8:	88e1      	ldrh	r1, [r4, #6]
 80051fa:	6920      	ldr	r0, [r4, #16]
 80051fc:	f002 f908 	bl	8007410 <gpio_reset>
    delay_ms(50);
 8005200:	2032      	movs	r0, #50	; 0x32
 8005202:	f003 f9e3 	bl	80085cc <delay_ms>
    gpio_set(_rstport, _rst);
 8005206:	88e1      	ldrh	r1, [r4, #6]
 8005208:	6920      	ldr	r0, [r4, #16]
 800520a:	f002 f8f9 	bl	8007400 <gpio_set>
    delay_ms(50);
 800520e:	2032      	movs	r0, #50	; 0x32
 8005210:	f003 f9dc 	bl	80085cc <delay_ms>

    if(_it >= 0 && _itport != NULL){
 8005214:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8005218:	2a00      	cmp	r2, #0
 800521a:	db0e      	blt.n	800523a <_ZN6sx127x4initEP3spilhm+0x7e>
 800521c:	6961      	ldr	r1, [r4, #20]
 800521e:	b161      	cbz	r1, 800523a <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 8005220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	ad04      	add	r5, sp, #16
 8005226:	4628      	mov	r0, r5
 8005228:	b292      	uxth	r2, r2
 800522a:	2301      	movs	r3, #1
 800522c:	f001 fade 	bl	80067ec <exti_init>
		gpio_set_pulldown(_itport, _it);
 8005230:	8921      	ldrh	r1, [r4, #8]
 8005232:	6960      	ldr	r0, [r4, #20]
 8005234:	f002 f8d6 	bl	80073e4 <gpio_set_pulldown>
 8005238:	e000      	b.n	800523c <_ZN6sx127x4initEP3spilhm+0x80>
 800523a:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 800523c:	88a1      	ldrh	r1, [r4, #4]
 800523e:	68e0      	ldr	r0, [r4, #12]
 8005240:	f002 f8e6 	bl	8007410 <gpio_reset>

  txdt = address;
 8005244:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005246:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005248:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800524c:	f10d 020f 	add.w	r2, sp, #15
 8005250:	2301      	movs	r3, #1
 8005252:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005254:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005256:	f002 fcfb 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800525a:	9600      	str	r6, [sp, #0]
 800525c:	f10d 030e 	add.w	r3, sp, #14
 8005260:	6821      	ldr	r1, [r4, #0]
 8005262:	f10d 020f 	add.w	r2, sp, #15
 8005266:	4628      	mov	r0, r5
  txdt = value;
 8005268:	2700      	movs	r7, #0
 800526a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800526e:	f002 fd9b 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 8005272:	88a1      	ldrh	r1, [r4, #4]
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	f002 f8c3 	bl	8007400 <gpio_set>

  return response;
 800527a:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 800527e:	2b12      	cmp	r3, #18
 8005280:	d003      	beq.n	800528a <_ZN6sx127x4initEP3spilhm+0xce>
 8005282:	4638      	mov	r0, r7
}
 8005284:	b006      	add	sp, #24
 8005286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 800528a:	88a1      	ldrh	r1, [r4, #4]
 800528c:	68e0      	ldr	r0, [r4, #12]
 800528e:	f002 f8bf 	bl	8007410 <gpio_reset>
  txdt = address;
 8005292:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005296:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005298:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800529c:	4633      	mov	r3, r6
 800529e:	f10d 020f 	add.w	r2, sp, #15
 80052a2:	4628      	mov	r0, r5
 80052a4:	f002 fcd4 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052a8:	9600      	str	r6, [sp, #0]
  txdt = value;
 80052aa:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052ae:	f10d 030e 	add.w	r3, sp, #14
 80052b2:	f10d 020f 	add.w	r2, sp, #15
 80052b6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80052b8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052bc:	4628      	mov	r0, r5
 80052be:	f002 fd73 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052c2:	88a1      	ldrh	r1, [r4, #4]
 80052c4:	68e0      	ldr	r0, [r4, #12]
 80052c6:	f002 f89b 	bl	8007400 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80052ca:	ea4f 71e9 	mov.w	r1, r9, asr #31
 80052ce:	04c9      	lsls	r1, r1, #19
 80052d0:	4a9e      	ldr	r2, [pc, #632]	; (800554c <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 80052d2:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80052d6:	2300      	movs	r3, #0
 80052d8:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 80052dc:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 80052e0:	f7fb fcf2 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 80052e4:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80052e6:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 80052e8:	68e0      	ldr	r0, [r4, #12]
 80052ea:	f002 f891 	bl	8007410 <gpio_reset>
  txdt = address;
 80052ee:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052f2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052f4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052f8:	4633      	mov	r3, r6
 80052fa:	f10d 020f 	add.w	r2, sp, #15
 80052fe:	4628      	mov	r0, r5
 8005300:	f002 fca6 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005304:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8005306:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800530a:	f10d 030e 	add.w	r3, sp, #14
 800530e:	f10d 020f 	add.w	r2, sp, #15
 8005312:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8005314:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005318:	4628      	mov	r0, r5
 800531a:	f002 fd45 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800531e:	88a1      	ldrh	r1, [r4, #4]
 8005320:	68e0      	ldr	r0, [r4, #12]
 8005322:	f002 f86d 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005326:	88a1      	ldrh	r1, [r4, #4]
 8005328:	68e0      	ldr	r0, [r4, #12]
 800532a:	f002 f871 	bl	8007410 <gpio_reset>
  txdt = address;
 800532e:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005332:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005334:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005338:	4633      	mov	r3, r6
 800533a:	f10d 020f 	add.w	r2, sp, #15
 800533e:	4628      	mov	r0, r5
 8005340:	f002 fc86 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005344:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8005346:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800534a:	f10d 030e 	add.w	r3, sp, #14
 800534e:	f10d 020f 	add.w	r2, sp, #15
 8005352:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8005354:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005358:	4628      	mov	r0, r5
 800535a:	f002 fd25 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800535e:	88a1      	ldrh	r1, [r4, #4]
 8005360:	68e0      	ldr	r0, [r4, #12]
 8005362:	f002 f84d 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005366:	88a1      	ldrh	r1, [r4, #4]
 8005368:	68e0      	ldr	r0, [r4, #12]
 800536a:	f002 f851 	bl	8007410 <gpio_reset>
  txdt = address;
 800536e:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005372:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005374:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005378:	4633      	mov	r3, r6
 800537a:	f10d 020f 	add.w	r2, sp, #15
 800537e:	4628      	mov	r0, r5
 8005380:	f002 fc66 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005384:	9600      	str	r6, [sp, #0]
 8005386:	f10d 030e 	add.w	r3, sp, #14
 800538a:	f10d 020f 	add.w	r2, sp, #15
 800538e:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8005390:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005394:	4628      	mov	r0, r5
 8005396:	f002 fd07 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800539a:	88a1      	ldrh	r1, [r4, #4]
 800539c:	68e0      	ldr	r0, [r4, #12]
 800539e:	f002 f82f 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 80053a2:	88a1      	ldrh	r1, [r4, #4]
 80053a4:	68e0      	ldr	r0, [r4, #12]
 80053a6:	f002 f833 	bl	8007410 <gpio_reset>
  txdt = address;
 80053aa:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053ae:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053b0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053b4:	4633      	mov	r3, r6
 80053b6:	f10d 020f 	add.w	r2, sp, #15
 80053ba:	4628      	mov	r0, r5
 80053bc:	f002 fc48 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053c0:	9600      	str	r6, [sp, #0]
 80053c2:	f10d 030e 	add.w	r3, sp, #14
 80053c6:	f10d 020f 	add.w	r2, sp, #15
 80053ca:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80053cc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053d0:	4628      	mov	r0, r5
 80053d2:	f002 fce9 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053d6:	88a1      	ldrh	r1, [r4, #4]
 80053d8:	68e0      	ldr	r0, [r4, #12]
 80053da:	f002 f811 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 80053de:	88a1      	ldrh	r1, [r4, #4]
 80053e0:	68e0      	ldr	r0, [r4, #12]
 80053e2:	f002 f815 	bl	8007410 <gpio_reset>
  txdt = address;
 80053e6:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053ea:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053ec:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053f0:	4633      	mov	r3, r6
 80053f2:	f10d 020f 	add.w	r2, sp, #15
 80053f6:	4628      	mov	r0, r5
 80053f8:	f002 fc2a 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053fc:	9600      	str	r6, [sp, #0]
 80053fe:	f10d 030e 	add.w	r3, sp, #14
 8005402:	f10d 020f 	add.w	r2, sp, #15
 8005406:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005408:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800540c:	4628      	mov	r0, r5
 800540e:	f002 fccb 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005412:	88a1      	ldrh	r1, [r4, #4]
 8005414:	68e0      	ldr	r0, [r4, #12]
 8005416:	f001 fff3 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 800541a:	88a1      	ldrh	r1, [r4, #4]
 800541c:	68e0      	ldr	r0, [r4, #12]
 800541e:	f001 fff7 	bl	8007410 <gpio_reset>
  txdt = address;
 8005422:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005426:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005428:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800542c:	4633      	mov	r3, r6
 800542e:	f10d 020f 	add.w	r2, sp, #15
 8005432:	4628      	mov	r0, r5
 8005434:	f002 fc0c 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005438:	9600      	str	r6, [sp, #0]
 800543a:	f10d 030e 	add.w	r3, sp, #14
 800543e:	f10d 020f 	add.w	r2, sp, #15
 8005442:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005444:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005448:	4628      	mov	r0, r5
 800544a:	f002 fcad 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800544e:	88a1      	ldrh	r1, [r4, #4]
 8005450:	68e0      	ldr	r0, [r4, #12]
 8005452:	f001 ffd5 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005456:	88a1      	ldrh	r1, [r4, #4]
 8005458:	68e0      	ldr	r0, [r4, #12]
  return response;
 800545a:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 800545e:	f001 ffd7 	bl	8007410 <gpio_reset>
  txdt = address;
 8005462:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005466:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005468:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800546c:	4633      	mov	r3, r6
 800546e:	f10d 020f 	add.w	r2, sp, #15
 8005472:	4628      	mov	r0, r5
 8005474:	f002 fbec 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005478:	9600      	str	r6, [sp, #0]
 800547a:	f10d 030e 	add.w	r3, sp, #14
 800547e:	f10d 020f 	add.w	r2, sp, #15
 8005482:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8005484:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005488:	4628      	mov	r0, r5
  txdt = value;
 800548a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800548e:	f002 fc8b 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005492:	88a1      	ldrh	r1, [r4, #4]
 8005494:	68e0      	ldr	r0, [r4, #12]
 8005496:	f001 ffb3 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 800549a:	88a1      	ldrh	r1, [r4, #4]
 800549c:	68e0      	ldr	r0, [r4, #12]
 800549e:	f001 ffb7 	bl	8007410 <gpio_reset>
  txdt = address;
 80054a2:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054a4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054a6:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054aa:	4633      	mov	r3, r6
 80054ac:	f10d 020f 	add.w	r2, sp, #15
 80054b0:	4628      	mov	r0, r5
 80054b2:	f002 fbcd 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054b6:	9600      	str	r6, [sp, #0]
  txdt = value;
 80054b8:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054ba:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80054bc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054c0:	4628      	mov	r0, r5
 80054c2:	f10d 030e 	add.w	r3, sp, #14
 80054c6:	f10d 020f 	add.w	r2, sp, #15
 80054ca:	f002 fc6d 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054ce:	88a1      	ldrh	r1, [r4, #4]
 80054d0:	68e0      	ldr	r0, [r4, #12]
 80054d2:	f001 ff95 	bl	8007400 <gpio_set>
		if(level > 17){
 80054d6:	f1b8 0f11 	cmp.w	r8, #17
 80054da:	f200 80c8 	bhi.w	800566e <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 80054de:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 80054e2:	88a1      	ldrh	r1, [r4, #4]
 80054e4:	68e0      	ldr	r0, [r4, #12]
 80054e6:	bf38      	it	cc
 80054e8:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 80054ec:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 80054ee:	f001 ff8f 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054f2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054f4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054f8:	4633      	mov	r3, r6
 80054fa:	f10d 020f 	add.w	r2, sp, #15
 80054fe:	4628      	mov	r0, r5
 8005500:	f002 fba6 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005504:	9600      	str	r6, [sp, #0]
 8005506:	f10d 030e 	add.w	r3, sp, #14
 800550a:	f10d 020f 	add.w	r2, sp, #15
 800550e:	6821      	ldr	r1, [r4, #0]
 8005510:	4628      	mov	r0, r5
  txdt = value;
 8005512:	2784      	movs	r7, #132	; 0x84
 8005514:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005518:	f002 fc46 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800551c:	88a1      	ldrh	r1, [r4, #4]
 800551e:	68e0      	ldr	r0, [r4, #12]
 8005520:	f001 ff6e 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005524:	88a1      	ldrh	r1, [r4, #4]
 8005526:	68e0      	ldr	r0, [r4, #12]
 8005528:	f001 ff72 	bl	8007410 <gpio_reset>
  txdt = address;
 800552c:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 800552e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005530:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005534:	4633      	mov	r3, r6
 8005536:	4628      	mov	r0, r5
 8005538:	f10d 020f 	add.w	r2, sp, #15
 800553c:	f002 fb88 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005540:	9600      	str	r6, [sp, #0]
 8005542:	6821      	ldr	r1, [r4, #0]
 8005544:	4628      	mov	r0, r5
  txdt = value;
 8005546:	232b      	movs	r3, #43	; 0x2b
 8005548:	e002      	b.n	8005550 <_ZN6sx127x4initEP3spilhm+0x394>
 800554a:	bf00      	nop
 800554c:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005550:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005554:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005558:	f10d 030e 	add.w	r3, sp, #14
 800555c:	f002 fc24 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005560:	88a1      	ldrh	r1, [r4, #4]
 8005562:	68e0      	ldr	r0, [r4, #12]
 8005564:	f001 ff4c 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005568:	88a1      	ldrh	r1, [r4, #4]
 800556a:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800556c:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 800556e:	f001 ff4f 	bl	8007410 <gpio_reset>
  txdt = address;
 8005572:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005574:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005576:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800557a:	f10d 020f 	add.w	r2, sp, #15
 800557e:	4628      	mov	r0, r5
 8005580:	2301      	movs	r3, #1
 8005582:	f002 fb65 	bl	8007c50 <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005586:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800558a:	9700      	str	r7, [sp, #0]
 800558c:	f10d 030e 	add.w	r3, sp, #14
 8005590:	f10d 020f 	add.w	r2, sp, #15
 8005594:	6821      	ldr	r1, [r4, #0]
 8005596:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005598:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 800559c:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055a0:	f002 fc02 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055a4:	88a1      	ldrh	r1, [r4, #4]
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	f001 ff2a 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 80055ac:	88a1      	ldrh	r1, [r4, #4]
 80055ae:	68e0      	ldr	r0, [r4, #12]
 80055b0:	f001 ff2e 	bl	8007410 <gpio_reset>
  txdt = address;
 80055b4:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055b6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055b8:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055bc:	463b      	mov	r3, r7
 80055be:	f10d 020f 	add.w	r2, sp, #15
 80055c2:	4628      	mov	r0, r5
 80055c4:	f002 fb44 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055c8:	9700      	str	r7, [sp, #0]
 80055ca:	f10d 030e 	add.w	r3, sp, #14
 80055ce:	f10d 020f 	add.w	r2, sp, #15
 80055d2:	6821      	ldr	r1, [r4, #0]
 80055d4:	4628      	mov	r0, r5
  txdt = value;
 80055d6:	2600      	movs	r6, #0
 80055d8:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055dc:	f002 fbe4 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055e0:	88a1      	ldrh	r1, [r4, #4]
 80055e2:	68e0      	ldr	r0, [r4, #12]
 80055e4:	f001 ff0c 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 80055e8:	88a1      	ldrh	r1, [r4, #4]
 80055ea:	68e0      	ldr	r0, [r4, #12]
  return response;
 80055ec:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 80055f0:	f001 ff0e 	bl	8007410 <gpio_reset>
  txdt = address;
 80055f4:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055f8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055fa:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055fe:	463b      	mov	r3, r7
 8005600:	f10d 020f 	add.w	r2, sp, #15
 8005604:	4628      	mov	r0, r5
 8005606:	f002 fb23 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800560a:	9700      	str	r7, [sp, #0]
 800560c:	f10d 030e 	add.w	r3, sp, #14
 8005610:	f10d 020f 	add.w	r2, sp, #15
 8005614:	6821      	ldr	r1, [r4, #0]
 8005616:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8005618:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 800561c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005620:	f002 fbc2 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005624:	88a1      	ldrh	r1, [r4, #4]
 8005626:	68e0      	ldr	r0, [r4, #12]
 8005628:	f001 feea 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 800562c:	88a1      	ldrh	r1, [r4, #4]
 800562e:	68e0      	ldr	r0, [r4, #12]
 8005630:	f001 feee 	bl	8007410 <gpio_reset>
  txdt = address;
 8005634:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005636:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005638:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800563c:	463b      	mov	r3, r7
 800563e:	f10d 020f 	add.w	r2, sp, #15
 8005642:	4628      	mov	r0, r5
 8005644:	f002 fb04 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005648:	9700      	str	r7, [sp, #0]
 800564a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800564c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005650:	f10d 030e 	add.w	r3, sp, #14
 8005654:	f10d 020f 	add.w	r2, sp, #15
 8005658:	4628      	mov	r0, r5
 800565a:	f002 fba5 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800565e:	68e0      	ldr	r0, [r4, #12]
 8005660:	88a1      	ldrh	r1, [r4, #4]
 8005662:	f001 fecd 	bl	8007400 <gpio_set>
	return true;
 8005666:	4638      	mov	r0, r7
}
 8005668:	b006      	add	sp, #24
 800566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 800566e:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 8005672:	88a1      	ldrh	r1, [r4, #4]
 8005674:	68e0      	ldr	r0, [r4, #12]
 8005676:	bf28      	it	cs
 8005678:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 800567c:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 800567e:	f001 fec7 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005682:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005684:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005688:	4633      	mov	r3, r6
 800568a:	f10d 020f 	add.w	r2, sp, #15
 800568e:	4628      	mov	r0, r5
 8005690:	f002 fade 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005694:	9600      	str	r6, [sp, #0]
 8005696:	f10d 030e 	add.w	r3, sp, #14
 800569a:	f10d 020f 	add.w	r2, sp, #15
 800569e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80056a0:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056a4:	4628      	mov	r0, r5
 80056a6:	f002 fb7f 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056aa:	88a1      	ldrh	r1, [r4, #4]
 80056ac:	68e0      	ldr	r0, [r4, #12]
 80056ae:	f001 fea7 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 80056b2:	88a1      	ldrh	r1, [r4, #4]
 80056b4:	68e0      	ldr	r0, [r4, #12]
 80056b6:	f001 feab 	bl	8007410 <gpio_reset>
  txdt = address;
 80056ba:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056bc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056be:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056c2:	4633      	mov	r3, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	f10d 020f 	add.w	r2, sp, #15
 80056ca:	f002 fac1 	bl	8007c50 <_ZN3spi8transmitEmm>
			level -= 3;
 80056ce:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056d2:	9600      	str	r6, [sp, #0]
 80056d4:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 80056d6:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056da:	4628      	mov	r0, r5
  txdt = value;
 80056dc:	2331      	movs	r3, #49	; 0x31
 80056de:	e737      	b.n	8005550 <_ZN6sx127x4initEP3spilhm+0x394>

080056e0 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 80056e0:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop

080056e8 <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 80056e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056ea:	4604      	mov	r4, r0
 80056ec:	b087      	sub	sp, #28
  txdt = address;
 80056ee:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 80056f0:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 80056f2:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 80056f4:	88a1      	ldrh	r1, [r4, #4]
 80056f6:	f001 fe8b 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056fa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056fc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005700:	4633      	mov	r3, r6
 8005702:	f10d 020f 	add.w	r2, sp, #15
 8005706:	a804      	add	r0, sp, #16
 8005708:	f002 faa2 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800570c:	9600      	str	r6, [sp, #0]
 800570e:	f10d 030e 	add.w	r3, sp, #14
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	f10d 020f 	add.w	r2, sp, #15
 8005718:	a804      	add	r0, sp, #16
  txdt = value;
 800571a:	2500      	movs	r5, #0
 800571c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005720:	f002 fb42 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005724:	88a1      	ldrh	r1, [r4, #4]
 8005726:	68e0      	ldr	r0, [r4, #12]
 8005728:	f001 fe6a 	bl	8007400 <gpio_set>
  return response;
 800572c:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b03      	cmp	r3, #3
 8005736:	f000 80e1 	beq.w	80058fc <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 800573a:	88a1      	ldrh	r1, [r4, #4]
 800573c:	68e0      	ldr	r0, [r4, #12]
 800573e:	f001 fe67 	bl	8007410 <gpio_reset>
  txdt = address;
 8005742:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005746:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005748:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800574c:	4633      	mov	r3, r6
 800574e:	f10d 020f 	add.w	r2, sp, #15
 8005752:	a804      	add	r0, sp, #16
 8005754:	f002 fa7c 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005758:	9600      	str	r6, [sp, #0]
 800575a:	f10d 030e 	add.w	r3, sp, #14
 800575e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005760:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005764:	f10d 020f 	add.w	r2, sp, #15
 8005768:	a804      	add	r0, sp, #16
 800576a:	f002 fb1d 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800576e:	88a1      	ldrh	r1, [r4, #4]
 8005770:	68e0      	ldr	r0, [r4, #12]
 8005772:	f001 fe45 	bl	8007400 <gpio_set>
  return response;
 8005776:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 800577a:	071b      	lsls	r3, r3, #28
 800577c:	f100 809f 	bmi.w	80058be <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 8005780:	88a1      	ldrh	r1, [r4, #4]
 8005782:	68e0      	ldr	r0, [r4, #12]
 8005784:	f001 fe44 	bl	8007410 <gpio_reset>
  txdt = address;
 8005788:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 800578a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800578c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005790:	2301      	movs	r3, #1
 8005792:	f10d 020f 	add.w	r2, sp, #15
 8005796:	a804      	add	r0, sp, #16
 8005798:	f002 fa5a 	bl	8007c50 <_ZN3spi8transmitEmm>
  txdt = value;
 800579c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a0:	2501      	movs	r5, #1
 80057a2:	9500      	str	r5, [sp, #0]
 80057a4:	6821      	ldr	r1, [r4, #0]
 80057a6:	a804      	add	r0, sp, #16
 80057a8:	f10d 030e 	add.w	r3, sp, #14
 80057ac:	f10d 020f 	add.w	r2, sp, #15
 80057b0:	f002 fafa 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057b4:	88a1      	ldrh	r1, [r4, #4]
 80057b6:	68e0      	ldr	r0, [r4, #12]
 80057b8:	f001 fe22 	bl	8007400 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 80057bc:	2f00      	cmp	r7, #0
 80057be:	f000 80a0 	beq.w	8005902 <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 80057c2:	88a1      	ldrh	r1, [r4, #4]
 80057c4:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 80057c6:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 80057c8:	f001 fe22 	bl	8007410 <gpio_reset>
  txdt = address;
 80057cc:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057d0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057d4:	462b      	mov	r3, r5
 80057d6:	f10d 020f 	add.w	r2, sp, #15
 80057da:	a804      	add	r0, sp, #16
 80057dc:	f002 fa38 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057e0:	9500      	str	r5, [sp, #0]
 80057e2:	f10d 030e 	add.w	r3, sp, #14
 80057e6:	f10d 020f 	add.w	r2, sp, #15
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	a804      	add	r0, sp, #16
  txdt = value;
 80057ee:	2600      	movs	r6, #0
 80057f0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057f4:	f002 fad8 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057f8:	88a1      	ldrh	r1, [r4, #4]
 80057fa:	68e0      	ldr	r0, [r4, #12]
 80057fc:	f001 fe00 	bl	8007400 <gpio_set>
  return response;
 8005800:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005804:	88a1      	ldrh	r1, [r4, #4]
 8005806:	68e0      	ldr	r0, [r4, #12]
 8005808:	f001 fe02 	bl	8007410 <gpio_reset>
  txdt = address;
 800580c:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 800580e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005810:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005814:	462b      	mov	r3, r5
 8005816:	f10d 020f 	add.w	r2, sp, #15
 800581a:	a804      	add	r0, sp, #16
 800581c:	f002 fa18 	bl	8007c50 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005820:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005822:	9500      	str	r5, [sp, #0]
 8005824:	f10d 030e 	add.w	r3, sp, #14
 8005828:	f10d 020f 	add.w	r2, sp, #15
 800582c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800582e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005832:	a804      	add	r0, sp, #16
 8005834:	f002 fab8 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005838:	88a1      	ldrh	r1, [r4, #4]
 800583a:	68e0      	ldr	r0, [r4, #12]
 800583c:	f001 fde0 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005840:	88a1      	ldrh	r1, [r4, #4]
 8005842:	68e0      	ldr	r0, [r4, #12]
 8005844:	f001 fde4 	bl	8007410 <gpio_reset>
  txdt = address;
 8005848:	238d      	movs	r3, #141	; 0x8d
 800584a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800584e:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005850:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005852:	6821      	ldr	r1, [r4, #0]
 8005854:	f10d 020f 	add.w	r2, sp, #15
 8005858:	a804      	add	r0, sp, #16
 800585a:	f002 f9f9 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800585e:	9500      	str	r5, [sp, #0]
 8005860:	f10d 030e 	add.w	r3, sp, #14
 8005864:	f10d 020f 	add.w	r2, sp, #15
 8005868:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800586a:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800586c:	a804      	add	r0, sp, #16
  txdt = value;
 800586e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005872:	f002 fa99 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005876:	88a1      	ldrh	r1, [r4, #4]
 8005878:	68e0      	ldr	r0, [r4, #12]
 800587a:	f001 fdc1 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 800587e:	88a1      	ldrh	r1, [r4, #4]
 8005880:	68e0      	ldr	r0, [r4, #12]
 8005882:	f001 fdc5 	bl	8007410 <gpio_reset>
  txdt = address;
 8005886:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005888:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800588a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800588e:	462b      	mov	r3, r5
 8005890:	f10d 020f 	add.w	r2, sp, #15
 8005894:	a804      	add	r0, sp, #16
 8005896:	f002 f9db 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800589a:	9500      	str	r5, [sp, #0]
 800589c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800589e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058a2:	f10d 030e 	add.w	r3, sp, #14
 80058a6:	f10d 020f 	add.w	r2, sp, #15
 80058aa:	a804      	add	r0, sp, #16
 80058ac:	f002 fa7c 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058b0:	68e0      	ldr	r0, [r4, #12]
 80058b2:	88a1      	ldrh	r1, [r4, #4]
 80058b4:	f001 fda4 	bl	8007400 <gpio_set>
	return true;
 80058b8:	4628      	mov	r0, r5
}
 80058ba:	b007      	add	sp, #28
 80058bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 80058be:	88a1      	ldrh	r1, [r4, #4]
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	f001 fda5 	bl	8007410 <gpio_reset>
  txdt = address;
 80058c6:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058c8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058ca:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058ce:	4633      	mov	r3, r6
 80058d0:	f10d 020f 	add.w	r2, sp, #15
 80058d4:	a804      	add	r0, sp, #16
 80058d6:	f002 f9bb 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058da:	9600      	str	r6, [sp, #0]
  txdt = value;
 80058dc:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058de:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058e0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058e4:	a804      	add	r0, sp, #16
 80058e6:	f10d 030e 	add.w	r3, sp, #14
 80058ea:	f10d 020f 	add.w	r2, sp, #15
 80058ee:	f002 fa5b 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058f2:	88a1      	ldrh	r1, [r4, #4]
 80058f4:	68e0      	ldr	r0, [r4, #12]
 80058f6:	f001 fd83 	bl	8007400 <gpio_set>
  return response;
 80058fa:	e741      	b.n	8005780 <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 80058fc:	4628      	mov	r0, r5
}
 80058fe:	b007      	add	sp, #28
 8005900:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 8005902:	88a1      	ldrh	r1, [r4, #4]
 8005904:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005906:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005908:	f001 fd82 	bl	8007410 <gpio_reset>
  txdt = address;
 800590c:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 800590e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005910:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005914:	462b      	mov	r3, r5
 8005916:	f10d 020f 	add.w	r2, sp, #15
 800591a:	a804      	add	r0, sp, #16
 800591c:	f002 f998 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005920:	9500      	str	r5, [sp, #0]
 8005922:	f10d 030e 	add.w	r3, sp, #14
 8005926:	f10d 020f 	add.w	r2, sp, #15
 800592a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800592c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005930:	a804      	add	r0, sp, #16
 8005932:	f002 fa39 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005936:	88a1      	ldrh	r1, [r4, #4]
 8005938:	68e0      	ldr	r0, [r4, #12]
 800593a:	f001 fd61 	bl	8007400 <gpio_set>
  return response;
 800593e:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005942:	88a1      	ldrh	r1, [r4, #4]
 8005944:	68e0      	ldr	r0, [r4, #12]
 8005946:	f001 fd63 	bl	8007410 <gpio_reset>
  txdt = address;
 800594a:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 800594c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800594e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005952:	462b      	mov	r3, r5
 8005954:	f10d 020f 	add.w	r2, sp, #15
 8005958:	a804      	add	r0, sp, #16
 800595a:	f002 f979 	bl	8007c50 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 800595e:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005962:	9500      	str	r5, [sp, #0]
 8005964:	e75e      	b.n	8005824 <_ZN6sx127x11beginPacketEb+0x13c>
 8005966:	bf00      	nop

08005968 <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 8005970:	460f      	mov	r7, r1
 8005972:	b319      	cbz	r1, 80059bc <_ZN6sx127x9endPacketEb+0x54>
 8005974:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005976:	b30b      	cbz	r3, 80059bc <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 8005978:	8881      	ldrh	r1, [r0, #4]
 800597a:	68c0      	ldr	r0, [r0, #12]
 800597c:	f001 fd48 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005980:	f10d 050f 	add.w	r5, sp, #15
 8005984:	ae04      	add	r6, sp, #16
  txdt = address;
 8005986:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005988:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800598a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800598e:	462a      	mov	r2, r5
 8005990:	4630      	mov	r0, r6
 8005992:	2301      	movs	r3, #1
 8005994:	f002 f95c 	bl	8007c50 <_ZN3spi8transmitEmm>
  txdt = value;
 8005998:	2340      	movs	r3, #64	; 0x40
 800599a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800599e:	2301      	movs	r3, #1
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	f10d 080e 	add.w	r8, sp, #14
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	4630      	mov	r0, r6
 80059aa:	4643      	mov	r3, r8
 80059ac:	462a      	mov	r2, r5
 80059ae:	f002 f9fb 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059b2:	88a1      	ldrh	r1, [r4, #4]
 80059b4:	68e0      	ldr	r0, [r4, #12]
 80059b6:	f001 fd23 	bl	8007400 <gpio_set>
  return response;
 80059ba:	e004      	b.n	80059c6 <_ZN6sx127x9endPacketEb+0x5e>
 80059bc:	f10d 050f 	add.w	r5, sp, #15
 80059c0:	ae04      	add	r6, sp, #16
 80059c2:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 80059c6:	88a1      	ldrh	r1, [r4, #4]
 80059c8:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059ca:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 80059ce:	f001 fd1f 	bl	8007410 <gpio_reset>
  txdt = address;
 80059d2:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059d6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059d8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059dc:	464b      	mov	r3, r9
 80059de:	462a      	mov	r2, r5
 80059e0:	4630      	mov	r0, r6
 80059e2:	f002 f935 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059e6:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 80059ea:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059ec:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80059ee:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059f2:	4630      	mov	r0, r6
 80059f4:	4643      	mov	r3, r8
 80059f6:	462a      	mov	r2, r5
 80059f8:	f002 f9d6 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059fc:	88a1      	ldrh	r1, [r4, #4]
 80059fe:	68e0      	ldr	r0, [r4, #12]
 8005a00:	f001 fcfe 	bl	8007400 <gpio_set>
	if(!async){
 8005a04:	2f00      	cmp	r7, #0
 8005a06:	d13b      	bne.n	8005a80 <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 8005a08:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 8005a0c:	88a1      	ldrh	r1, [r4, #4]
 8005a0e:	68e0      	ldr	r0, [r4, #12]
 8005a10:	f001 fcfe 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a14:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a16:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	462a      	mov	r2, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f002 f916 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	f8cd 9000 	str.w	r9, [sp]
 8005a2a:	4643      	mov	r3, r8
 8005a2c:	462a      	mov	r2, r5
 8005a2e:	4630      	mov	r0, r6
  txdt = value;
 8005a30:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a34:	f002 f9b8 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a38:	88a1      	ldrh	r1, [r4, #4]
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	f001 fce0 	bl	8007400 <gpio_set>
  return response;
 8005a40:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 8005a44:	071b      	lsls	r3, r3, #28
 8005a46:	d5e1      	bpl.n	8005a0c <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 8005a48:	88a1      	ldrh	r1, [r4, #4]
 8005a4a:	68e0      	ldr	r0, [r4, #12]
 8005a4c:	f001 fce0 	bl	8007410 <gpio_reset>
  txdt = address;
 8005a50:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a52:	462a      	mov	r2, r5
 8005a54:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a56:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	f002 f8f7 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a62:	f8cd 9000 	str.w	r9, [sp]
 8005a66:	6821      	ldr	r1, [r4, #0]
 8005a68:	4630      	mov	r0, r6
 8005a6a:	462a      	mov	r2, r5
 8005a6c:	4643      	mov	r3, r8
  txdt = value;
 8005a6e:	2508      	movs	r5, #8
 8005a70:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a74:	f002 f998 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a78:	88a1      	ldrh	r1, [r4, #4]
 8005a7a:	68e0      	ldr	r0, [r4, #12]
 8005a7c:	f001 fcc0 	bl	8007400 <gpio_set>
}
 8005a80:	2001      	movs	r0, #1
 8005a82:	b006      	add	sp, #24
 8005a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a88 <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 8005a88:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005a8a:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005a90:	68c0      	ldr	r0, [r0, #12]
 8005a92:	f001 fcbd 	bl	8007410 <gpio_reset>
  txdt = address;
 8005a96:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a98:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a9a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a9e:	f10d 020f 	add.w	r2, sp, #15
 8005aa2:	a804      	add	r0, sp, #16
 8005aa4:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005aa6:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005aa8:	f002 f8d2 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005aac:	6821      	ldr	r1, [r4, #0]
 8005aae:	9500      	str	r5, [sp, #0]
 8005ab0:	f10d 030e 	add.w	r3, sp, #14
 8005ab4:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005ab8:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005abc:	a804      	add	r0, sp, #16
  txdt = value;
 8005abe:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ac2:	f002 f971 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ac6:	68e0      	ldr	r0, [r4, #12]
 8005ac8:	88a1      	ldrh	r1, [r4, #4]
 8005aca:	f001 fc99 	bl	8007400 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005ace:	4a05      	ldr	r2, [pc, #20]	; (8005ae4 <_ZN6sx127x10packetRssiEv+0x5c>)
 8005ad0:	6a23      	ldr	r3, [r4, #32]
  return response;
 8005ad2:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	bfd4      	ite	le
 8005ada:	23a4      	movle	r3, #164	; 0xa4
 8005adc:	239d      	movgt	r3, #157	; 0x9d
}
 8005ade:	1ac0      	subs	r0, r0, r3
 8005ae0:	b007      	add	sp, #28
 8005ae2:	bd30      	pop	{r4, r5, pc}
 8005ae4:	1f4add3f 	.word	0x1f4add3f

08005ae8 <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 8005ae8:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005aea:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 8005aec:	b087      	sub	sp, #28
 8005aee:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005af0:	68c0      	ldr	r0, [r0, #12]
 8005af2:	f001 fc8d 	bl	8007410 <gpio_reset>
  txdt = address;
 8005af6:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005af8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005afa:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005afe:	f10d 020f 	add.w	r2, sp, #15
 8005b02:	a804      	add	r0, sp, #16
 8005b04:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b06:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b08:	f002 f8a2 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b0c:	6821      	ldr	r1, [r4, #0]
 8005b0e:	9500      	str	r5, [sp, #0]
 8005b10:	f10d 030e 	add.w	r3, sp, #14
 8005b14:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005b18:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b1c:	a804      	add	r0, sp, #16
  txdt = value;
 8005b1e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b22:	f002 f941 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b26:	68e0      	ldr	r0, [r4, #12]
 8005b28:	88a1      	ldrh	r1, [r4, #4]
 8005b2a:	f001 fc69 	bl	8007400 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005b2e:	4a05      	ldr	r2, [pc, #20]	; (8005b44 <_ZN6sx127x4rssiEv+0x5c>)
 8005b30:	6a23      	ldr	r3, [r4, #32]
 8005b32:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bfd4      	ite	le
 8005b3a:	23a4      	movle	r3, #164	; 0xa4
 8005b3c:	239d      	movgt	r3, #157	; 0x9d
}
 8005b3e:	1ac0      	subs	r0, r0, r3
 8005b40:	b007      	add	sp, #28
 8005b42:	bd30      	pop	{r4, r5, pc}
 8005b44:	1f4add3f 	.word	0x1f4add3f

08005b48 <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	4604      	mov	r4, r0
 8005b4e:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005b50:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005b52:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005b54:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005b56:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005b58:	f001 fc5a 	bl	8007410 <gpio_reset>
  txdt = address;
 8005b5c:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b5e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b60:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b64:	f10d 020f 	add.w	r2, sp, #15
 8005b68:	2301      	movs	r3, #1
 8005b6a:	a804      	add	r0, sp, #16
 8005b6c:	f002 f870 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b70:	2301      	movs	r3, #1
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	f10d 030e 	add.w	r3, sp, #14
 8005b7a:	f10d 020f 	add.w	r2, sp, #15
 8005b7e:	a804      	add	r0, sp, #16
  txdt = value;
 8005b80:	2600      	movs	r6, #0
 8005b82:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b86:	f002 f90f 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b8a:	88a1      	ldrh	r1, [r4, #4]
 8005b8c:	68e0      	ldr	r0, [r4, #12]
 8005b8e:	f001 fc37 	bl	8007400 <gpio_set>
  return response;
 8005b92:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 8005b96:	eb03 0a09 	add.w	sl, r3, r9
 8005b9a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8005b9e:	bf84      	itt	hi
 8005ba0:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005ba4:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 8005ba8:	f1b9 0f00 	cmp.w	r9, #0
 8005bac:	d025      	beq.n	8005bfa <_ZN6sx127x8transmitEPKhj+0xb2>
 8005bae:	3d01      	subs	r5, #1
 8005bb0:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 8005bb4:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bb8:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8005bba:	88a1      	ldrh	r1, [r4, #4]
 8005bbc:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005bbe:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 8005bc2:	f001 fc25 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bc6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005bc8:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f10d 020f 	add.w	r2, sp, #15
 8005bd2:	a804      	add	r0, sp, #16
 8005bd4:	f002 f83c 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bd8:	6821      	ldr	r1, [r4, #0]
 8005bda:	9700      	str	r7, [sp, #0]
 8005bdc:	a804      	add	r0, sp, #16
 8005bde:	f10d 030e 	add.w	r3, sp, #14
 8005be2:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005be6:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bea:	f002 f8dd 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005bee:	88a1      	ldrh	r1, [r4, #4]
 8005bf0:	68e0      	ldr	r0, [r4, #12]
 8005bf2:	f001 fc05 	bl	8007400 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005bf6:	45ab      	cmp	fp, r5
 8005bf8:	d1df      	bne.n	8005bba <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 8005bfa:	88a1      	ldrh	r1, [r4, #4]
 8005bfc:	68e0      	ldr	r0, [r4, #12]
 8005bfe:	f001 fc07 	bl	8007410 <gpio_reset>
  txdt = address;
 8005c02:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c04:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c06:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c0a:	f10d 020f 	add.w	r2, sp, #15
 8005c0e:	a804      	add	r0, sp, #16
 8005c10:	2301      	movs	r3, #1
 8005c12:	f002 f81d 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c16:	2101      	movs	r1, #1
 8005c18:	9100      	str	r1, [sp, #0]
 8005c1a:	6821      	ldr	r1, [r4, #0]
 8005c1c:	a804      	add	r0, sp, #16
 8005c1e:	f10d 030e 	add.w	r3, sp, #14
 8005c22:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8005c26:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 8005c2a:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c2e:	f002 f8bb 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c32:	68e0      	ldr	r0, [r4, #12]
 8005c34:	88a1      	ldrh	r1, [r4, #4]
 8005c36:	f001 fbe3 	bl	8007400 <gpio_set>
}
 8005c3a:	4648      	mov	r0, r9
 8005c3c:	b007      	add	sp, #28
 8005c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c42:	bf00      	nop

08005c44 <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 8005c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c48:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4689      	mov	r9, r1
  txdt = address;
 8005c50:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c54:	2701      	movs	r7, #1
  txdt = value;
 8005c56:	462e      	mov	r6, r5
 8005c58:	e020      	b.n	8005c9c <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 8005c5a:	88a1      	ldrh	r1, [r4, #4]
 8005c5c:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 8005c5e:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005c60:	f001 fbd6 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c64:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c66:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	f10d 020f 	add.w	r2, sp, #15
 8005c70:	a804      	add	r0, sp, #16
 8005c72:	f001 ffed 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c76:	6821      	ldr	r1, [r4, #0]
 8005c78:	9700      	str	r7, [sp, #0]
 8005c7a:	f10d 030e 	add.w	r3, sp, #14
 8005c7e:	f10d 020f 	add.w	r2, sp, #15
 8005c82:	a804      	add	r0, sp, #16
  txdt = value;
 8005c84:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c88:	f002 f88e 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c8c:	88a1      	ldrh	r1, [r4, #4]
 8005c8e:	68e0      	ldr	r0, [r4, #12]
 8005c90:	f001 fbb6 	bl	8007400 <gpio_set>
  return response;
 8005c94:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 8005c98:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 8005c9c:	88a1      	ldrh	r1, [r4, #4]
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	f001 fbb6 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ca4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ca6:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005caa:	f10d 020f 	add.w	r2, sp, #15
 8005cae:	a804      	add	r0, sp, #16
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	f001 ffcd 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cb6:	6821      	ldr	r1, [r4, #0]
 8005cb8:	9700      	str	r7, [sp, #0]
 8005cba:	f10d 030e 	add.w	r3, sp, #14
 8005cbe:	f10d 020f 	add.w	r2, sp, #15
 8005cc2:	a804      	add	r0, sp, #16
  txdt = value;
 8005cc4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cc8:	f002 f86e 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ccc:	68e0      	ldr	r0, [r4, #12]
 8005cce:	88a1      	ldrh	r1, [r4, #4]
 8005cd0:	f001 fb96 	bl	8007400 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005cd4:	69a0      	ldr	r0, [r4, #24]
  return response;
 8005cd6:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 8005cda:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005cdc:	b2c0      	uxtb	r0, r0
	while(available()){
 8005cde:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 8005ce0:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 8005ce4:	f105 0501 	add.w	r5, r5, #1
 8005ce8:	d1b7      	bne.n	8005c5a <_ZN6sx127x7receiveEPc+0x16>
}
 8005cea:	b006      	add	sp, #24
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cf0 <_ZN6sx127x7ReceiveEh>:
void sx127x::Receive(uint8_t size){
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005cf4:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::Receive(uint8_t size){
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80d4 	beq.w	8005eaa <_ZN6sx127x7ReceiveEh+0x1ba>
  gpio_reset(_csport, _cs);
 8005d02:	8881      	ldrh	r1, [r0, #4]
 8005d04:	68c0      	ldr	r0, [r0, #12]
 8005d06:	f001 fb83 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d0a:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 8005d0e:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d10:	ae04      	add	r6, sp, #16
 8005d12:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d14:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d18:	462a      	mov	r2, r5
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f001 ff97 	bl	8007c50 <_ZN3spi8transmitEmm>
  txdt = value;
 8005d22:	2300      	movs	r3, #0
 8005d24:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d28:	2301      	movs	r3, #1
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	f10d 080e 	add.w	r8, sp, #14
 8005d30:	6821      	ldr	r1, [r4, #0]
 8005d32:	4630      	mov	r0, r6
 8005d34:	4643      	mov	r3, r8
 8005d36:	462a      	mov	r2, r5
 8005d38:	f002 f836 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d3c:	88a1      	ldrh	r1, [r4, #4]
 8005d3e:	68e0      	ldr	r0, [r4, #12]
 8005d40:	f001 fb5e 	bl	8007400 <gpio_set>
	if (size > 0) {
 8005d44:	2f00      	cmp	r7, #0
 8005d46:	d07c      	beq.n	8005e42 <_ZN6sx127x7ReceiveEh+0x152>
	_implicitHeaderMode = 1;
 8005d48:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005d4c:	88a1      	ldrh	r1, [r4, #4]
 8005d4e:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005d50:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 8005d54:	f001 fb5c 	bl	8007410 <gpio_reset>
  txdt = address;
 8005d58:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d5c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d5e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d62:	464b      	mov	r3, r9
 8005d64:	462a      	mov	r2, r5
 8005d66:	4630      	mov	r0, r6
 8005d68:	f001 ff72 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d6c:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005d70:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d74:	4643      	mov	r3, r8
 8005d76:	462a      	mov	r2, r5
 8005d78:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005d7a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f002 f812 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d84:	88a1      	ldrh	r1, [r4, #4]
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	f001 fb3a 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d8c:	88a1      	ldrh	r1, [r4, #4]
 8005d8e:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005d90:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 8005d94:	f001 fb3c 	bl	8007410 <gpio_reset>
  txdt = address;
 8005d98:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d9c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d9e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005da2:	464b      	mov	r3, r9
 8005da4:	462a      	mov	r2, r5
 8005da6:	4630      	mov	r0, r6
 8005da8:	f001 ff52 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dac:	f8cd 9000 	str.w	r9, [sp]
 8005db0:	4643      	mov	r3, r8
 8005db2:	462a      	mov	r2, r5
 8005db4:	6821      	ldr	r1, [r4, #0]
 8005db6:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005db8:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 8005dbc:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dc0:	f001 fff2 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005dc4:	88a1      	ldrh	r1, [r4, #4]
 8005dc6:	68e0      	ldr	r0, [r4, #12]
 8005dc8:	f001 fb1a 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005dcc:	88a1      	ldrh	r1, [r4, #4]
 8005dce:	68e0      	ldr	r0, [r4, #12]
 8005dd0:	f001 fb1e 	bl	8007410 <gpio_reset>
  txdt = address;
 8005dd4:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005dd8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005dda:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005dde:	464b      	mov	r3, r9
 8005de0:	462a      	mov	r2, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f001 ff34 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005de8:	f8cd 9000 	str.w	r9, [sp]
 8005dec:	4643      	mov	r3, r8
 8005dee:	462a      	mov	r2, r5
 8005df0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005df2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005df6:	4630      	mov	r0, r6
 8005df8:	f001 ffd6 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005dfc:	88a1      	ldrh	r1, [r4, #4]
 8005dfe:	68e0      	ldr	r0, [r4, #12]
 8005e00:	f001 fafe 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005e04:	88a1      	ldrh	r1, [r4, #4]
 8005e06:	68e0      	ldr	r0, [r4, #12]
 8005e08:	f001 fb02 	bl	8007410 <gpio_reset>
  txdt = address;
 8005e0c:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e0e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e10:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e14:	462a      	mov	r2, r5
 8005e16:	4630      	mov	r0, r6
 8005e18:	2301      	movs	r3, #1
 8005e1a:	f001 ff19 	bl	8007c50 <_ZN3spi8transmitEmm>
  txdt = value;
 8005e1e:	2185      	movs	r1, #133	; 0x85
 8005e20:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e24:	2101      	movs	r1, #1
 8005e26:	9100      	str	r1, [sp, #0]
 8005e28:	6821      	ldr	r1, [r4, #0]
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	4643      	mov	r3, r8
 8005e2e:	462a      	mov	r2, r5
 8005e30:	f001 ffba 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e34:	88a1      	ldrh	r1, [r4, #4]
 8005e36:	68e0      	ldr	r0, [r4, #12]
 8005e38:	f001 fae2 	bl	8007400 <gpio_set>
}
 8005e3c:	b006      	add	sp, #24
 8005e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e42:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005e46:	88a1      	ldrh	r1, [r4, #4]
 8005e48:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005e4a:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005e4c:	f001 fae0 	bl	8007410 <gpio_reset>
  txdt = address;
 8005e50:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e54:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e56:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e5a:	464b      	mov	r3, r9
 8005e5c:	462a      	mov	r2, r5
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f001 fef6 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e64:	f8cd 9000 	str.w	r9, [sp]
 8005e68:	4643      	mov	r3, r8
 8005e6a:	462a      	mov	r2, r5
 8005e6c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005e6e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e72:	4630      	mov	r0, r6
 8005e74:	f001 ff98 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e78:	88a1      	ldrh	r1, [r4, #4]
 8005e7a:	68e0      	ldr	r0, [r4, #12]
 8005e7c:	f001 fac0 	bl	8007400 <gpio_set>
  return response;
 8005e80:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8005e84:	88a1      	ldrh	r1, [r4, #4]
 8005e86:	68e0      	ldr	r0, [r4, #12]
 8005e88:	f001 fac2 	bl	8007410 <gpio_reset>
  txdt = address;
 8005e8c:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e90:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e92:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e96:	464b      	mov	r3, r9
 8005e98:	462a      	mov	r2, r5
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f001 fed8 	bl	8007c50 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005ea0:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ea4:	f8cd 9000 	str.w	r9, [sp]
 8005ea8:	e7a0      	b.n	8005dec <_ZN6sx127x7ReceiveEh+0xfc>
 8005eaa:	f10d 050f 	add.w	r5, sp, #15
 8005eae:	ae04      	add	r6, sp, #16
 8005eb0:	f10d 080e 	add.w	r8, sp, #14
 8005eb4:	e746      	b.n	8005d44 <_ZN6sx127x7ReceiveEh+0x54>
 8005eb6:	bf00      	nop

08005eb8 <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 8005eb8:	b530      	push	{r4, r5, lr}
 8005eba:	4604      	mov	r4, r0
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005ec0:	68c0      	ldr	r0, [r0, #12]
 8005ec2:	88a1      	ldrh	r1, [r4, #4]
 8005ec4:	f001 faa4 	bl	8007410 <gpio_reset>
  txdt = address;
 8005ec8:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eca:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ecc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ed0:	f10d 020f 	add.w	r2, sp, #15
 8005ed4:	a804      	add	r0, sp, #16
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f001 feba 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005edc:	2301      	movs	r3, #1
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005ee2:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ee6:	a804      	add	r0, sp, #16
 8005ee8:	f10d 030e 	add.w	r3, sp, #14
 8005eec:	f10d 020f 	add.w	r2, sp, #15
 8005ef0:	f001 ff5a 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ef4:	88a1      	ldrh	r1, [r4, #4]
 8005ef6:	68e0      	ldr	r0, [r4, #12]
 8005ef8:	f001 fa82 	bl	8007400 <gpio_set>
}
 8005efc:	b007      	add	sp, #28
 8005efe:	bd30      	pop	{r4, r5, pc}

08005f00 <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 8005f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 8005f04:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 8005f06:	b086      	sub	sp, #24
 8005f08:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005f0a:	68c0      	ldr	r0, [r0, #12]
 8005f0c:	f001 fa80 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f10:	2301      	movs	r3, #1
  txdt = address;
 8005f12:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f14:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f16:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 8005f1a:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f1e:	a804      	add	r0, sp, #16
 8005f20:	6821      	ldr	r1, [r4, #0]
 8005f22:	f001 fe95 	bl	8007c50 <_ZN3spi8transmitEmm>
  txdt = value;
 8005f26:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f28:	9600      	str	r6, [sp, #0]
 8005f2a:	f10d 020f 	add.w	r2, sp, #15
 8005f2e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f30:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f34:	a804      	add	r0, sp, #16
 8005f36:	f10d 030e 	add.w	r3, sp, #14
 8005f3a:	f001 ff35 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f3e:	88a1      	ldrh	r1, [r4, #4]
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	f001 fa5d 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8005f46:	88a1      	ldrh	r1, [r4, #4]
 8005f48:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005f4a:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 8005f4e:	f001 fa5f 	bl	8007410 <gpio_reset>
  txdt = address;
 8005f52:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f56:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f58:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f5c:	4633      	mov	r3, r6
 8005f5e:	f10d 020f 	add.w	r2, sp, #15
 8005f62:	a804      	add	r0, sp, #16
 8005f64:	f001 fe74 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f68:	9600      	str	r6, [sp, #0]
 8005f6a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f6c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f70:	a804      	add	r0, sp, #16
 8005f72:	f10d 030e 	add.w	r3, sp, #14
 8005f76:	f10d 020f 	add.w	r2, sp, #15
 8005f7a:	f001 ff15 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f7e:	88a1      	ldrh	r1, [r4, #4]
 8005f80:	68e0      	ldr	r0, [r4, #12]
 8005f82:	f001 fa3d 	bl	8007400 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8005f86:	f015 0720 	ands.w	r7, r5, #32
 8005f8a:	d16d      	bne.n	8006068 <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 8005f8c:	066a      	lsls	r2, r5, #25
 8005f8e:	d569      	bpl.n	8006064 <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005f90:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005f92:	88a1      	ldrh	r1, [r4, #4]
 8005f94:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 8005f96:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005f98:	2d00      	cmp	r5, #0
 8005f9a:	d168      	bne.n	800606e <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 8005f9c:	f001 fa38 	bl	8007410 <gpio_reset>
  txdt = address;
 8005fa0:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fa2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005fa4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fa8:	4633      	mov	r3, r6
 8005faa:	f10d 020f 	add.w	r2, sp, #15
 8005fae:	a804      	add	r0, sp, #16
 8005fb0:	f001 fe4e 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fb4:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005fb6:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fba:	f10d 030e 	add.w	r3, sp, #14
 8005fbe:	f10d 020f 	add.w	r2, sp, #15
 8005fc2:	6821      	ldr	r1, [r4, #0]
 8005fc4:	a804      	add	r0, sp, #16
 8005fc6:	f001 feef 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005fca:	88a1      	ldrh	r1, [r4, #4]
 8005fcc:	68e0      	ldr	r0, [r4, #12]
 8005fce:	f001 fa17 	bl	8007400 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fd2:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 8005fd4:	88a1      	ldrh	r1, [r4, #4]
 8005fd6:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005fd8:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 8005fdc:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 8005fde:	f001 fa17 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fe2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005fe4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fe8:	462b      	mov	r3, r5
 8005fea:	f10d 020f 	add.w	r2, sp, #15
 8005fee:	a804      	add	r0, sp, #16
 8005ff0:	f001 fe2e 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ff4:	9500      	str	r5, [sp, #0]
 8005ff6:	f10d 030e 	add.w	r3, sp, #14
 8005ffa:	f10d 020f 	add.w	r2, sp, #15
 8005ffe:	eb0d 0006 	add.w	r0, sp, r6
 8006002:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8006004:	2600      	movs	r6, #0
 8006006:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800600a:	f001 fecd 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800600e:	88a1      	ldrh	r1, [r4, #4]
 8006010:	68e0      	ldr	r0, [r4, #12]
 8006012:	f001 f9f5 	bl	8007400 <gpio_set>
  gpio_reset(_csport, _cs);
 8006016:	88a1      	ldrh	r1, [r4, #4]
 8006018:	68e0      	ldr	r0, [r4, #12]
  return response;
 800601a:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 800601e:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 8006020:	f001 f9f6 	bl	8007410 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006024:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006026:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800602a:	462b      	mov	r3, r5
 800602c:	f10d 020f 	add.w	r2, sp, #15
 8006030:	a804      	add	r0, sp, #16
 8006032:	f001 fe0d 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006036:	9500      	str	r5, [sp, #0]
 8006038:	f10d 030e 	add.w	r3, sp, #14
 800603c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800603e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006042:	f10d 020f 	add.w	r2, sp, #15
 8006046:	a804      	add	r0, sp, #16
 8006048:	f001 feae 	bl	8007da8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800604c:	88a1      	ldrh	r1, [r4, #4]
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	f001 f9d6 	bl	8007400 <gpio_set>
			if (RxDoneHandler) {
 8006054:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006056:	b13b      	cbz	r3, 8006068 <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8006058:	4641      	mov	r1, r8
 800605a:	4620      	mov	r0, r4
}
 800605c:	b006      	add	sp, #24
 800605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 8006062:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 8006064:	072b      	lsls	r3, r5, #28
 8006066:	d412      	bmi.n	800608e <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 8006068:	b006      	add	sp, #24
 800606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 800606e:	f001 f9cf 	bl	8007410 <gpio_reset>
  txdt = address;
 8006072:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006074:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006076:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800607a:	4633      	mov	r3, r6
 800607c:	f10d 020f 	add.w	r2, sp, #15
 8006080:	a804      	add	r0, sp, #16
 8006082:	f001 fde5 	bl	8007c50 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006086:	9600      	str	r6, [sp, #0]
  txdt = value;
 8006088:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800608c:	e795      	b.n	8005fba <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 800608e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0e9      	beq.n	8006068 <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 8006094:	4620      	mov	r0, r4
}
 8006096:	b006      	add	sp, #24
 8006098:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 800609c:	4718      	bx	r3
 800609e:	bf00      	nop

080060a0 <_ZL14wifiif_request10wifi_cmd_tPc>:

static int wifiif_is_err(char *str){
	return strcmp(str, "ERR");
}

static void wifiif_request(wifi_cmd_t cmd, char *data){
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	b08d      	sub	sp, #52	; 0x34
 80060a6:	f8df 8294 	ldr.w	r8, [pc, #660]	; 800633c <_ZL14wifiif_request10wifi_cmd_tPc+0x29c>
 80060aa:	9103      	str	r1, [sp, #12]
	char *cmd_str = cmd_to_str(cmd, command_string);
 80060ac:	4994      	ldr	r1, [pc, #592]	; (8006300 <_ZL14wifiif_request10wifi_cmd_tPc+0x260>)
 80060ae:	f7ff f86f 	bl	8005190 <cmd_to_str>
	char *req_data;
	asprintf(&req_data, "%s: %s", cmd_str, data);
 80060b2:	9b03      	ldr	r3, [sp, #12]
 80060b4:	4993      	ldr	r1, [pc, #588]	; (8006304 <_ZL14wifiif_request10wifi_cmd_tPc+0x264>)
	char *cmd_str = cmd_to_str(cmd, command_string);
 80060b6:	4602      	mov	r2, r0
	asprintf(&req_data, "%s: %s", cmd_str, data);
 80060b8:	a805      	add	r0, sp, #20
 80060ba:	f004 fd4b 	bl	800ab54 <asiprintf>
	wifiif_transmit(req_data);
 80060be:	9d05      	ldr	r5, [sp, #20]
	int16_t len = strlen(str);
 80060c0:	4628      	mov	r0, r5
 80060c2:	f7fa f89f 	bl	8000204 <strlen>
 80060c6:	b204      	sxth	r4, r0
	while(remaining > 0){
 80060c8:	2c00      	cmp	r4, #0
 80060ca:	dd0e      	ble.n	80060ea <_ZL14wifiif_request10wifi_cmd_tPc+0x4a>
		int16_t sendSize = (remaining > MAX_UART_TX_BUFFER_SIZE)? MAX_UART_TX_BUFFER_SIZE : remaining;
 80060cc:	2c64      	cmp	r4, #100	; 0x64
 80060ce:	4626      	mov	r6, r4
 80060d0:	bfa8      	it	ge
 80060d2:	2664      	movge	r6, #100	; 0x64
		fprequest(str, sendSize);
 80060d4:	b2b7      	uxth	r7, r6
		remaining -= sendSize;
 80060d6:	1be4      	subs	r4, r4, r7
		fprequest(str, sendSize);
 80060d8:	4628      	mov	r0, r5
 80060da:	f8d8 3000 	ldr.w	r3, [r8]
 80060de:	4639      	mov	r1, r7
		remaining -= sendSize;
 80060e0:	b224      	sxth	r4, r4
		fprequest(str, sendSize);
 80060e2:	4798      	blx	r3
	while(remaining > 0){
 80060e4:	2c00      	cmp	r4, #0
		str += sendSize;
 80060e6:	4435      	add	r5, r6
	while(remaining > 0){
 80060e8:	dcf0      	bgt.n	80060cc <_ZL14wifiif_request10wifi_cmd_tPc+0x2c>
	delay_ms(1);
 80060ea:	2001      	movs	r0, #1
 80060ec:	f002 fa6e 	bl	80085cc <delay_ms>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80060f0:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006340 <_ZL14wifiif_request10wifi_cmd_tPc+0x2a0>
	fprequest((char *)"\r\nend\r\n", 7);
 80060f4:	4884      	ldr	r0, [pc, #528]	; (8006308 <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
 80060f6:	f8d8 3000 	ldr.w	r3, [r8]
 80060fa:	2107      	movs	r1, #7
 80060fc:	4798      	blx	r3
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80060fe:	9a05      	ldr	r2, [sp, #20]
 8006100:	4982      	ldr	r1, [pc, #520]	; (800630c <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 8006102:	4883      	ldr	r0, [pc, #524]	; (8006310 <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
 8006104:	f8cd 9000 	str.w	r9, [sp]
 8006108:	2389      	movs	r3, #137	; 0x89
 800610a:	f003 fda7 	bl	8009c5c <LOG_DEBUG>
#if ENABLE_COMPONENT_WIFIIF_DEBUG
	wifiif_debug(req_data, __LINE__, __FUNCTION__);
#endif /* ENABLE_COMPONENT_WIFIIF_DEBUG */
	free(req_data);
 800610e:	9805      	ldr	r0, [sp, #20]
 8006110:	f004 fd78 	bl	800ac04 <free>

	EventBits_t bits = xEventGroupWaitBits(data_eventgrp, DATA_EVENTBIT, pdTRUE, pdFALSE, WIFI_DEFAULT_TIMEOUT);
 8006114:	4a7f      	ldr	r2, [pc, #508]	; (8006314 <_ZL14wifiif_request10wifi_cmd_tPc+0x274>)
 8006116:	f242 7310 	movw	r3, #10000	; 0x2710
 800611a:	6810      	ldr	r0, [r2, #0]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	2300      	movs	r3, #0
 8006122:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006126:	f7fb fae1 	bl	80016ec <xEventGroupWaitBits>
	if(bits == DATA_EVENTBIT){
 800612a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800612e:	d012      	beq.n	8006156 <_ZL14wifiif_request10wifi_cmd_tPc+0xb6>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8006130:	4a79      	ldr	r2, [pc, #484]	; (8006318 <_ZL14wifiif_request10wifi_cmd_tPc+0x278>)
 8006132:	4976      	ldr	r1, [pc, #472]	; (800630c <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 8006134:	4876      	ldr	r0, [pc, #472]	; (8006310 <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
 8006136:	f8cd 9000 	str.w	r9, [sp]
 800613a:	23b9      	movs	r3, #185	; 0xb9
 800613c:	f003 fd8e 	bl	8009c5c <LOG_DEBUG>
		if(response_data != NULL) free(response_data);
	}
	else{ // Parse packet fail.
		wifiif_debug((char *)"WiFi module not response the request.", __LINE__, __FUNCTION__);
		wifi_state = false;
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8006140:	4b76      	ldr	r3, [pc, #472]	; (800631c <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
		wifi_state = false;
 8006142:	4a77      	ldr	r2, [pc, #476]	; (8006320 <_ZL14wifiif_request10wifi_cmd_tPc+0x280>)
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8006144:	681b      	ldr	r3, [r3, #0]
		wifi_state = false;
 8006146:	2100      	movs	r1, #0
 8006148:	7011      	strb	r1, [r2, #0]
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 800614a:	b10b      	cbz	r3, 8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0xb0>
 800614c:	4608      	mov	r0, r1
 800614e:	4798      	blx	r3
	}
}
 8006150:	b00d      	add	sp, #52	; 0x34
 8006152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 	   uint8_t queue_len = uxQueueMessagesWaiting(data_queue);
 8006156:	4e73      	ldr	r6, [pc, #460]	; (8006324 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
		pkt_t pkt;
 8006158:	2200      	movs	r2, #0
 800615a:	2300      	movs	r3, #0
 	   uint8_t queue_len = uxQueueMessagesWaiting(data_queue);
 800615c:	6830      	ldr	r0, [r6, #0]
		pkt_t pkt;
 800615e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 	   uint8_t queue_len = uxQueueMessagesWaiting(data_queue);
 8006162:	f7fc fbeb 	bl	800293c <uxQueueMessagesWaiting>
 	   for(uint8_t i=0; i<queue_len; i++){
 8006166:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 800616a:	f000 80a3 	beq.w	80062b4 <_ZL14wifiif_request10wifi_cmd_tPc+0x214>
 800616e:	2400      	movs	r4, #0
 	   uint16_t total_len = 0;
 8006170:	46a0      	mov	r8, r4
 8006172:	af09      	add	r7, sp, #36	; 0x24
 8006174:	e002      	b.n	800617c <_ZL14wifiif_request10wifi_cmd_tPc+0xdc>
 	   for(uint8_t i=0; i<queue_len; i++){
 8006176:	b2e3      	uxtb	r3, r4
 8006178:	429d      	cmp	r5, r3
 800617a:	d917      	bls.n	80061ac <_ZL14wifiif_request10wifi_cmd_tPc+0x10c>
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 800617c:	6830      	ldr	r0, [r6, #0]
 800617e:	2202      	movs	r2, #2
 8006180:	4639      	mov	r1, r7
 8006182:	f7fb fef7 	bl	8001f74 <xQueueReceive>
 8006186:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 8006188:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 800618c:	d1f3      	bne.n	8006176 <_ZL14wifiif_request10wifi_cmd_tPc+0xd6>
 			   total_len += strlen(break_data);
 800618e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006190:	f7fa f838 	bl	8000204 <strlen>
 8006194:	4440      	add	r0, r8
 			   xQueueSend(data_queue, &break_data, 2);
 8006196:	2300      	movs	r3, #0
 			   total_len += strlen(break_data);
 8006198:	fa1f f880 	uxth.w	r8, r0
 			   xQueueSend(data_queue, &break_data, 2);
 800619c:	2202      	movs	r2, #2
 800619e:	6830      	ldr	r0, [r6, #0]
 80061a0:	4639      	mov	r1, r7
 80061a2:	f7fb fc73 	bl	8001a8c <xQueueGenericSend>
 	   for(uint8_t i=0; i<queue_len; i++){
 80061a6:	b2e3      	uxtb	r3, r4
 80061a8:	429d      	cmp	r5, r3
 80061aa:	d8e7      	bhi.n	800617c <_ZL14wifiif_request10wifi_cmd_tPc+0xdc>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 80061ac:	f108 0001 	add.w	r0, r8, #1
 80061b0:	f004 fd20 	bl	800abf4 <malloc>
 80061b4:	2400      	movs	r4, #0
 80061b6:	4682      	mov	sl, r0
 80061b8:	4683      	mov	fp, r0
 80061ba:	e002      	b.n	80061c2 <_ZL14wifiif_request10wifi_cmd_tPc+0x122>
 	   for(uint8_t i=0; i<queue_len; i++){
 80061bc:	b2e3      	uxtb	r3, r4
 80061be:	429d      	cmp	r5, r3
 80061c0:	d91a      	bls.n	80061f8 <_ZL14wifiif_request10wifi_cmd_tPc+0x158>
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 80061c2:	6830      	ldr	r0, [r6, #0]
 80061c4:	2202      	movs	r2, #2
 80061c6:	4639      	mov	r1, r7
 80061c8:	f7fb fed4 	bl	8001f74 <xQueueReceive>
 80061cc:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 80061ce:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 80061d2:	d1f3      	bne.n	80061bc <_ZL14wifiif_request10wifi_cmd_tPc+0x11c>
 			   uint16_t len = strlen(break_data);
 80061d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80061d6:	9103      	str	r1, [sp, #12]
 80061d8:	4608      	mov	r0, r1
 80061da:	f7fa f813 	bl	8000204 <strlen>
 			   memcpy(tmp_data, break_data, len);
 80061de:	9903      	ldr	r1, [sp, #12]
 80061e0:	b282      	uxth	r2, r0
 80061e2:	4658      	mov	r0, fp
 			   tmp_data += len;
 80061e4:	4493      	add	fp, r2
 			   memcpy(tmp_data, break_data, len);
 80061e6:	f004 fd15 	bl	800ac14 <memcpy>
 			   free(break_data);
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	4608      	mov	r0, r1
 80061ee:	f004 fd09 	bl	800ac04 <free>
 	   for(uint8_t i=0; i<queue_len; i++){
 80061f2:	b2e3      	uxtb	r3, r4
 80061f4:	429d      	cmp	r5, r3
 80061f6:	d8e4      	bhi.n	80061c2 <_ZL14wifiif_request10wifi_cmd_tPc+0x122>
 	  (*dest_buffer)[total_len] = '\0';
 80061f8:	44d0      	add	r8, sl
 80061fa:	2300      	movs	r3, #0
 80061fc:	f888 3000 	strb.w	r3, [r8]
		err = parse_packet(response_data, &pkt);
 8006200:	a906      	add	r1, sp, #24
 8006202:	4650      	mov	r0, sl
 8006204:	f7fe ff44 	bl	8005090 <parse_packet>
		if(err != PKT_ERR_OK){
 8006208:	4604      	mov	r4, r0
 800620a:	2800      	cmp	r0, #0
 800620c:	d143      	bne.n	8006296 <_ZL14wifiif_request10wifi_cmd_tPc+0x1f6>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 800620e:	9e07      	ldr	r6, [sp, #28]
	return strcmp(str, "ERR");
 8006210:	4945      	ldr	r1, [pc, #276]	; (8006328 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 8006212:	4630      	mov	r0, r6
 8006214:	f7f9 ffec 	bl	80001f0 <strcmp>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 8006218:	4605      	mov	r5, r0
 800621a:	b308      	cbz	r0, 8006260 <_ZL14wifiif_request10wifi_cmd_tPc+0x1c0>
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 800621c:	4630      	mov	r0, r6
 800621e:	f7f9 fff1 	bl	8000204 <strlen>
 8006222:	4607      	mov	r7, r0
 8006224:	3001      	adds	r0, #1
 8006226:	f004 fce5 	bl	800abf4 <malloc>
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 800622a:	4631      	mov	r1, r6
 800622c:	463a      	mov	r2, r7
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 800622e:	4605      	mov	r5, r0
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 8006230:	f004 fcf0 	bl	800ac14 <memcpy>
			data[strlen(pkt.data_str)] = '\0';
 8006234:	4630      	mov	r0, r6
 8006236:	f7f9 ffe5 	bl	8000204 <strlen>
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 800623a:	4931      	ldr	r1, [pc, #196]	; (8006300 <_ZL14wifiif_request10wifi_cmd_tPc+0x260>)
			data[strlen(pkt.data_str)] = '\0';
 800623c:	542c      	strb	r4, [r5, r0]
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 800623e:	2211      	movs	r2, #17
 8006240:	9806      	ldr	r0, [sp, #24]
 8006242:	f7fe ff8f 	bl	8005164 <str_to_cmd>
 8006246:	b2c6      	uxtb	r6, r0
			if(command == WIFI_ISCONNECTED){ // Check wifi connect state.
 8006248:	2e03      	cmp	r6, #3
 800624a:	d039      	beq.n	80062c0 <_ZL14wifiif_request10wifi_cmd_tPc+0x220>
			if(fpcommand_handler) fpcommand_handler(command, data); // Handle wifiif event.
 800624c:	4b33      	ldr	r3, [pc, #204]	; (800631c <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	b113      	cbz	r3, 8006258 <_ZL14wifiif_request10wifi_cmd_tPc+0x1b8>
 8006252:	4630      	mov	r0, r6
 8006254:	4629      	mov	r1, r5
 8006256:	4798      	blx	r3
			if(data != NULL) free(data);
 8006258:	4628      	mov	r0, r5
 800625a:	f004 fcd3 	bl	800ac04 <free>
 800625e:	e00d      	b.n	800627c <_ZL14wifiif_request10wifi_cmd_tPc+0x1dc>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8006260:	23b2      	movs	r3, #178	; 0xb2
 8006262:	4a32      	ldr	r2, [pc, #200]	; (800632c <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
 8006264:	4929      	ldr	r1, [pc, #164]	; (800630c <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 8006266:	482a      	ldr	r0, [pc, #168]	; (8006310 <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
 8006268:	f8cd 9000 	str.w	r9, [sp]
 800626c:	f003 fcf6 	bl	8009c5c <LOG_DEBUG>
			if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8006270:	4b2a      	ldr	r3, [pc, #168]	; (800631c <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b113      	cbz	r3, 800627c <_ZL14wifiif_request10wifi_cmd_tPc+0x1dc>
 8006276:	4629      	mov	r1, r5
 8006278:	4628      	mov	r0, r5
 800627a:	4798      	blx	r3
		release_packet(&pkt);
 800627c:	a806      	add	r0, sp, #24
 800627e:	f7fe ff61 	bl	8005144 <release_packet>
		if(response_data != NULL) free(response_data);
 8006282:	f1ba 0f00 	cmp.w	sl, #0
 8006286:	f43f af63 	beq.w	8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0xb0>
 800628a:	4650      	mov	r0, sl
}
 800628c:	b00d      	add	sp, #52	; 0x34
 800628e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(response_data != NULL) free(response_data);
 8006292:	f004 bcb7 	b.w	800ac04 <free>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8006296:	481e      	ldr	r0, [pc, #120]	; (8006310 <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
 8006298:	4a25      	ldr	r2, [pc, #148]	; (8006330 <_ZL14wifiif_request10wifi_cmd_tPc+0x290>)
 800629a:	491c      	ldr	r1, [pc, #112]	; (800630c <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 800629c:	f8cd 9000 	str.w	r9, [sp]
 80062a0:	2396      	movs	r3, #150	; 0x96
 80062a2:	f003 fcdb 	bl	8009c5c <LOG_DEBUG>
			release_packet(&pkt);
 80062a6:	a806      	add	r0, sp, #24
 80062a8:	f7fe ff4c 	bl	8005144 <release_packet>
			if(response_data != NULL) free(response_data);
 80062ac:	f1ba 0f00 	cmp.w	sl, #0
 80062b0:	d1eb      	bne.n	800628a <_ZL14wifiif_request10wifi_cmd_tPc+0x1ea>
 80062b2:	e74d      	b.n	8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0xb0>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 80062b4:	2001      	movs	r0, #1
 80062b6:	f004 fc9d 	bl	800abf4 <malloc>
 80062ba:	4682      	mov	sl, r0
 80062bc:	4680      	mov	r8, r0
 80062be:	e79c      	b.n	80061fa <_ZL14wifiif_request10wifi_cmd_tPc+0x15a>
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 80062c0:	af09      	add	r7, sp, #36	; 0x24
 80062c2:	4a1c      	ldr	r2, [pc, #112]	; (8006334 <_ZL14wifiif_request10wifi_cmd_tPc+0x294>)
 80062c4:	9807      	ldr	r0, [sp, #28]
				pkt_json_t json;
 80062c6:	9409      	str	r4, [sp, #36]	; 0x24
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 80062c8:	4639      	mov	r1, r7
				pkt_json_t json;
 80062ca:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 80062ce:	940b      	str	r4, [sp, #44]	; 0x2c
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 80062d0:	f7fe fdb4 	bl	8004e3c <json_get_object>
				if(err == PKT_ERR_OK){
 80062d4:	b940      	cbnz	r0, 80062e8 <_ZL14wifiif_request10wifi_cmd_tPc+0x248>
					if(strcmp(json.value, "1") == 0) wifi_connected = true;
 80062d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	2a31      	cmp	r2, #49	; 0x31
 80062dc:	d108      	bne.n	80062f0 <_ZL14wifiif_request10wifi_cmd_tPc+0x250>
 80062de:	7859      	ldrb	r1, [r3, #1]
 80062e0:	b931      	cbnz	r1, 80062f0 <_ZL14wifiif_request10wifi_cmd_tPc+0x250>
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <_ZL14wifiif_request10wifi_cmd_tPc+0x298>)
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
				json_release_object(&json);
 80062e8:	4638      	mov	r0, r7
 80062ea:	f7fe febf 	bl	800506c <json_release_object>
 80062ee:	e7ad      	b.n	800624c <_ZL14wifiif_request10wifi_cmd_tPc+0x1ac>
					else if(strcmp(json.value, "0") == 0) wifi_connected = false;
 80062f0:	2a30      	cmp	r2, #48	; 0x30
 80062f2:	d1f9      	bne.n	80062e8 <_ZL14wifiif_request10wifi_cmd_tPc+0x248>
 80062f4:	785b      	ldrb	r3, [r3, #1]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f6      	bne.n	80062e8 <_ZL14wifiif_request10wifi_cmd_tPc+0x248>
 80062fa:	4a0f      	ldr	r2, [pc, #60]	; (8006338 <_ZL14wifiif_request10wifi_cmd_tPc+0x298>)
 80062fc:	7013      	strb	r3, [r2, #0]
 80062fe:	e7f3      	b.n	80062e8 <_ZL14wifiif_request10wifi_cmd_tPc+0x248>
 8006300:	2000003c 	.word	0x2000003c
 8006304:	0800e530 	.word	0x0800e530
 8006308:	0800e538 	.word	0x0800e538
 800630c:	0800dff0 	.word	0x0800dff0
 8006310:	0800e540 	.word	0x0800e540
 8006314:	2000b284 	.word	0x2000b284
 8006318:	0800e590 	.word	0x0800e590
 800631c:	2000b28c 	.word	0x2000b28c
 8006320:	2000b280 	.word	0x2000b280
 8006324:	2000b27c 	.word	0x2000b27c
 8006328:	0800eee4 	.word	0x0800eee4
 800632c:	0800e57c 	.word	0x0800e57c
 8006330:	0800e558 	.word	0x0800e558
 8006334:	0800e570 	.word	0x0800e570
 8006338:	2000b288 	.word	0x2000b288
 800633c:	2000b290 	.word	0x2000b290
 8006340:	0800e548 	.word	0x0800e548

08006344 <wifiif_get_break_data>:
void wifiif_get_break_data(char *brk_data){
 8006344:	b530      	push	{r4, r5, lr}
 8006346:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006348:	2500      	movs	r5, #0
    if(strcmp(brk_data, "\r\nend\r\n") != 0) {
 800634a:	4912      	ldr	r1, [pc, #72]	; (8006394 <wifiif_get_break_data+0x50>)
void wifiif_get_break_data(char *brk_data){
 800634c:	9001      	str	r0, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800634e:	9503      	str	r5, [sp, #12]
    if(strcmp(brk_data, "\r\nend\r\n") != 0) {
 8006350:	4604      	mov	r4, r0
 8006352:	f7f9 ff4d 	bl	80001f0 <strcmp>
 8006356:	b150      	cbz	r0, 800636e <wifiif_get_break_data+0x2a>
		if(xQueueSendFromISR(data_queue, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 8006358:	4a0f      	ldr	r2, [pc, #60]	; (8006398 <wifiif_get_break_data+0x54>)
 800635a:	462b      	mov	r3, r5
 800635c:	6810      	ldr	r0, [r2, #0]
 800635e:	a901      	add	r1, sp, #4
 8006360:	aa03      	add	r2, sp, #12
 8006362:	f7fb fd49 	bl	8001df8 <xQueueGenericSendFromISR>
 8006366:	2801      	cmp	r0, #1
 8006368:	d10d      	bne.n	8006386 <wifiif_get_break_data+0x42>
}
 800636a:	b005      	add	sp, #20
 800636c:	bd30      	pop	{r4, r5, pc}
    	free(brk_data);
 800636e:	4620      	mov	r0, r4
 8006370:	f004 fc48 	bl	800ac04 <free>
    	xEventGroupSetBitsFromISR(data_eventgrp, DATA_EVENTBIT, &xHigherPriorityTaskWoken);
 8006374:	4b09      	ldr	r3, [pc, #36]	; (800639c <wifiif_get_break_data+0x58>)
 8006376:	aa03      	add	r2, sp, #12
 8006378:	6818      	ldr	r0, [r3, #0]
 800637a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800637e:	f7fb fa3d 	bl	80017fc <xEventGroupSetBitsFromISR>
}
 8006382:	b005      	add	sp, #20
 8006384:	bd30      	pop	{r4, r5, pc}
		if(xQueueSendFromISR(data_queue, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 8006386:	4906      	ldr	r1, [pc, #24]	; (80063a0 <wifiif_get_break_data+0x5c>)
 8006388:	4806      	ldr	r0, [pc, #24]	; (80063a4 <wifiif_get_break_data+0x60>)
 800638a:	f003 fc29 	bl	8009be0 <LOG_ERROR>
}
 800638e:	b005      	add	sp, #20
 8006390:	bd30      	pop	{r4, r5, pc}
 8006392:	bf00      	nop
 8006394:	0800e538 	.word	0x0800e538
 8006398:	2000b27c 	.word	0x2000b27c
 800639c:	2000b284 	.word	0x2000b284
 80063a0:	0800e5b8 	.word	0x0800e5b8
 80063a4:	0800e540 	.word	0x0800e540

080063a8 <wifiif_init>:

/**
 * WiFi setup function.
 */
void wifiif_init(void (*prequest)(char *, uint16_t)){
	fprequest = prequest;
 80063a8:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <wifiif_init+0x20>)
void wifiif_init(void (*prequest)(char *, uint16_t)){
 80063aa:	b510      	push	{r4, lr}

	data_queue = xQueueCreate(20, sizeof(char *));
 80063ac:	2200      	movs	r2, #0
void wifiif_init(void (*prequest)(char *, uint16_t)){
 80063ae:	4604      	mov	r4, r0
	data_queue = xQueueCreate(20, sizeof(char *));
 80063b0:	2104      	movs	r1, #4
 80063b2:	2014      	movs	r0, #20
	fprequest = prequest;
 80063b4:	601c      	str	r4, [r3, #0]
	data_queue = xQueueCreate(20, sizeof(char *));
 80063b6:	f7fb fb27 	bl	8001a08 <xQueueGenericCreate>
 80063ba:	4b04      	ldr	r3, [pc, #16]	; (80063cc <wifiif_init+0x24>)
 80063bc:	6018      	str	r0, [r3, #0]
	data_eventgrp = xEventGroupCreate();
 80063be:	f7fb f987 	bl	80016d0 <xEventGroupCreate>
 80063c2:	4b03      	ldr	r3, [pc, #12]	; (80063d0 <wifiif_init+0x28>)
 80063c4:	6018      	str	r0, [r3, #0]
}
 80063c6:	bd10      	pop	{r4, pc}
 80063c8:	2000b290 	.word	0x2000b290
 80063cc:	2000b27c 	.word	0x2000b27c
 80063d0:	2000b284 	.word	0x2000b284

080063d4 <wifiif_register_command_handler>:

void wifiif_register_command_handler(void (*pcommand_handler)(wifi_cmd_t cmd, void *param)){
	fpcommand_handler = pcommand_handler;
 80063d4:	4b01      	ldr	r3, [pc, #4]	; (80063dc <wifiif_register_command_handler+0x8>)
 80063d6:	6018      	str	r0, [r3, #0]
}
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	2000b28c 	.word	0x2000b28c

080063e0 <wifiif_restart>:

/**
 * WiFi control.
 */
void wifiif_restart(void){
 80063e0:	b508      	push	{r3, lr}
	wifiif_request(WIFI_RESTART, (char *)"{}");
 80063e2:	4905      	ldr	r1, [pc, #20]	; (80063f8 <wifiif_restart+0x18>)
 80063e4:	2001      	movs	r0, #1
 80063e6:	f7ff fe5b 	bl	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>
	wifi_state = false;
 80063ea:	4904      	ldr	r1, [pc, #16]	; (80063fc <wifiif_restart+0x1c>)
	wifi_connected = false;
 80063ec:	4a04      	ldr	r2, [pc, #16]	; (8006400 <wifiif_restart+0x20>)
	wifi_state = false;
 80063ee:	2300      	movs	r3, #0
 80063f0:	700b      	strb	r3, [r1, #0]
	wifi_connected = false;
 80063f2:	7013      	strb	r3, [r2, #0]
}
 80063f4:	bd08      	pop	{r3, pc}
 80063f6:	bf00      	nop
 80063f8:	0800e5cc 	.word	0x0800e5cc
 80063fc:	2000b280 	.word	0x2000b280
 8006400:	2000b288 	.word	0x2000b288

08006404 <wifiif_checkconnect>:
void wifiif_scan(void){
	wifiif_request(WIFI_SCAN, (char *)"{}");
}
void wifiif_checkconnect(void){
	wifiif_request(WIFI_ISCONNECTED, (char *)"{}");
 8006404:	4901      	ldr	r1, [pc, #4]	; (800640c <wifiif_checkconnect+0x8>)
 8006406:	2003      	movs	r0, #3
 8006408:	f7ff be4a 	b.w	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>
 800640c:	0800e5cc 	.word	0x0800e5cc

08006410 <wifiif_wificonnected>:
}
bool wifiif_wificonnected(void){
	return wifi_connected;
 8006410:	4b01      	ldr	r3, [pc, #4]	; (8006418 <wifiif_wificonnected+0x8>)
 8006412:	7818      	ldrb	r0, [r3, #0]
}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	2000b288 	.word	0x2000b288

0800641c <wifiif_connect>:
void wifiif_connect(char *ssid, char *pass, char *auth){
 800641c:	b510      	push	{r4, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	4614      	mov	r4, r2
 8006422:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"ssid\":\"%s\",\"pass\":\"%s\",\"auth\":\"%s\"}", ssid, pass, auth);
 8006424:	4602      	mov	r2, r0
 8006426:	4907      	ldr	r1, [pc, #28]	; (8006444 <wifiif_connect+0x28>)
 8006428:	9400      	str	r4, [sp, #0]
 800642a:	a803      	add	r0, sp, #12
 800642c:	f004 fb92 	bl	800ab54 <asiprintf>

	wifiif_request(WIFI_CONN, data);
 8006430:	9903      	ldr	r1, [sp, #12]
 8006432:	2004      	movs	r0, #4
 8006434:	f7ff fe34 	bl	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 8006438:	9803      	ldr	r0, [sp, #12]
 800643a:	f004 fbe3 	bl	800ac04 <free>
}
 800643e:	b004      	add	sp, #16
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	0800e5d0 	.word	0x0800e5d0

08006448 <wifiif_http_client_new>:

/**
 * HTTP Client.
 */
void wifiif_http_client_new(void){
	wifiif_request(WIFI_HTTP_CLIENT_NEW, (char *)"{}");
 8006448:	4901      	ldr	r1, [pc, #4]	; (8006450 <wifiif_http_client_new+0x8>)
 800644a:	2007      	movs	r0, #7
 800644c:	f7ff be28 	b.w	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>
 8006450:	0800e5cc 	.word	0x0800e5cc

08006454 <wifiif_http_client_config>:
}

void wifiif_http_client_config(char *config){
 8006454:	4601      	mov	r1, r0
	wifiif_request(WIFI_HTTP_CLIENT_CONFIG, config);
 8006456:	2008      	movs	r0, #8
 8006458:	f7ff be22 	b.w	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>

0800645c <wifiif_http_client_init>:
}

void wifiif_http_client_init(void){
	wifiif_request(WIFI_HTTP_CLIENT_INIT, (char *)"{}");
 800645c:	4901      	ldr	r1, [pc, #4]	; (8006464 <wifiif_http_client_init+0x8>)
 800645e:	2009      	movs	r0, #9
 8006460:	f7ff be1e 	b.w	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>
 8006464:	0800e5cc 	.word	0x0800e5cc

08006468 <wifiif_http_client_set_header>:

void wifiif_http_client_clean(void){
	wifiif_request(WIFI_HTTP_CLIENT_CLEAN, (char *)"{}");
}

void wifiif_http_client_set_header(char *key, char *value){
 8006468:	b500      	push	{lr}
 800646a:	b083      	sub	sp, #12
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"key\":\"%s\",\"value\":\"%s\"}", key, value);
 8006470:	a801      	add	r0, sp, #4
 8006472:	4906      	ldr	r1, [pc, #24]	; (800648c <wifiif_http_client_set_header+0x24>)
 8006474:	f004 fb6e 	bl	800ab54 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_HEADER, data);
 8006478:	9901      	ldr	r1, [sp, #4]
 800647a:	200b      	movs	r0, #11
 800647c:	f7ff fe10 	bl	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 8006480:	9801      	ldr	r0, [sp, #4]
 8006482:	f004 fbbf 	bl	800ac04 <free>
}
 8006486:	b003      	add	sp, #12
 8006488:	f85d fb04 	ldr.w	pc, [sp], #4
 800648c:	0800e5f8 	.word	0x0800e5f8

08006490 <wifiif_http_client_set_url>:

void wifiif_http_client_set_url(char *url){
 8006490:	b500      	push	{lr}
 8006492:	b083      	sub	sp, #12
 8006494:	4602      	mov	r2, r0
	char *tmp;
	asprintf(&tmp, "{\"url\":\"%s\"}", url);
 8006496:	4907      	ldr	r1, [pc, #28]	; (80064b4 <wifiif_http_client_set_url+0x24>)
 8006498:	a801      	add	r0, sp, #4
 800649a:	f004 fb5b 	bl	800ab54 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_URL, tmp);
 800649e:	9901      	ldr	r1, [sp, #4]
 80064a0:	200c      	movs	r0, #12
 80064a2:	f7ff fdfd 	bl	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 80064a6:	9801      	ldr	r0, [sp, #4]
 80064a8:	f004 fbac 	bl	800ac04 <free>
}
 80064ac:	b003      	add	sp, #12
 80064ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80064b2:	bf00      	nop
 80064b4:	0800e614 	.word	0x0800e614

080064b8 <wifiif_http_client_set_method>:

void wifiif_http_client_set_method(char *method){
 80064b8:	b500      	push	{lr}
 80064ba:	b083      	sub	sp, #12
 80064bc:	4602      	mov	r2, r0
	char *tmp;
	asprintf(&tmp, "{\"method\":\"%s\"}", method);
 80064be:	4907      	ldr	r1, [pc, #28]	; (80064dc <wifiif_http_client_set_method+0x24>)
 80064c0:	a801      	add	r0, sp, #4
 80064c2:	f004 fb47 	bl	800ab54 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_METHOD, tmp);
 80064c6:	9901      	ldr	r1, [sp, #4]
 80064c8:	200d      	movs	r0, #13
 80064ca:	f7ff fde9 	bl	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 80064ce:	9801      	ldr	r0, [sp, #4]
 80064d0:	f004 fb98 	bl	800ac04 <free>
}
 80064d4:	b003      	add	sp, #12
 80064d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80064da:	bf00      	nop
 80064dc:	0800e624 	.word	0x0800e624

080064e0 <wifiif_http_client_set_data>:

void wifiif_http_client_set_data(char *data){
 80064e0:	b500      	push	{lr}
 80064e2:	b083      	sub	sp, #12
 80064e4:	4602      	mov	r2, r0
	char *tmp;
	asprintf(&tmp, "{\"data\":%s}", data);
 80064e6:	4907      	ldr	r1, [pc, #28]	; (8006504 <wifiif_http_client_set_data+0x24>)
 80064e8:	a801      	add	r0, sp, #4
 80064ea:	f004 fb33 	bl	800ab54 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_DATA, tmp);
 80064ee:	9901      	ldr	r1, [sp, #4]
 80064f0:	200e      	movs	r0, #14
 80064f2:	f7ff fdd5 	bl	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 80064f6:	9801      	ldr	r0, [sp, #4]
 80064f8:	f004 fb84 	bl	800ac04 <free>
}
 80064fc:	b003      	add	sp, #12
 80064fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006502:	bf00      	nop
 8006504:	0800e634 	.word	0x0800e634

08006508 <wifiif_http_client_request>:

void wifiif_http_client_request(void){
	wifiif_request(WIFI_HTTP_CLIENT_REQUEST, (char *)"{}");
 8006508:	4901      	ldr	r1, [pc, #4]	; (8006510 <wifiif_http_client_request+0x8>)
 800650a:	200f      	movs	r0, #15
 800650c:	f7ff bdc8 	b.w	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc>
 8006510:	0800e5cc 	.word	0x0800e5cc

08006514 <wifiif_state_running>:
}


void wifiif_state_running(bool state){
	wifi_state = state;
 8006514:	4b01      	ldr	r3, [pc, #4]	; (800651c <wifiif_state_running+0x8>)
 8006516:	7018      	strb	r0, [r3, #0]
}
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	2000b280 	.word	0x2000b280

08006520 <wifiif_state_is_running>:
bool wifiif_state_is_running(void){
	return wifi_state;
 8006520:	4b01      	ldr	r3, [pc, #4]	; (8006528 <wifiif_state_is_running+0x8>)
 8006522:	7818      	ldrb	r0, [r3, #0]
}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	2000b280 	.word	0x2000b280

0800652c <ADC_IRQHandler>:



void ADC_IRQHandler(adc *adc){

}
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop

08006530 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef>:
	_adc = adc;
 8006530:	a10f      	add	r1, pc, #60	; (adr r1, 8006570 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x40>)
 8006532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006536:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8006558 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x28>
 800653a:	4b09      	ldr	r3, [pc, #36]	; (8006560 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x30>)
 800653c:	4a09      	ldr	r2, [pc, #36]	; (8006564 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x34>)
 800653e:	ed83 7b00 	vstr	d7, [r3]
 8006542:	e9c2 0100 	strd	r0, r1, [r2]
 8006546:	4b08      	ldr	r3, [pc, #32]	; (8006568 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x38>)
 8006548:	4808      	ldr	r0, [pc, #32]	; (800656c <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x3c>)
 800654a:	2100      	movs	r1, #0
 800654c:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(ADC3)
adc adc_3(ADC3);
adc_t adc3;
void ADC3_IRQHandler(void){
	ADC_IRQHandler(adc3);
}
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	f3af 8000 	nop.w
 8006558:	40012000 	.word	0x40012000
 800655c:	00000000 	.word	0x00000000
 8006560:	2000b298 	.word	0x2000b298
 8006564:	2000b2a0 	.word	0x2000b2a0
 8006568:	2000b2a8 	.word	0x2000b2a8
 800656c:	40012200 	.word	0x40012200
 8006570:	40012100 	.word	0x40012100
 8006574:	00000000 	.word	0x00000000

08006578 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 8006578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800657a:	460e      	mov	r6, r1
	stm_ret_t ret;
 800657c:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 800657e:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 8006580:	7002      	strb	r2, [r0, #0]
 8006582:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 8006584:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 8006586:	b085      	sub	sp, #20
 8006588:	4604      	mov	r4, r0
	stm_ret_t ret;
 800658a:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 800658c:	d006      	beq.n	800659c <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 800658e:	f240 122b 	movw	r2, #299	; 0x12b
 8006592:	f003 fc59 	bl	8009e48 <set_return>
		return ret;
	}

	return ret;
}
 8006596:	4620      	mov	r0, r4
 8006598:	b005      	add	sp, #20
 800659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 800659c:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 800659e:	68f1      	ldr	r1, [r6, #12]
 80065a0:	680d      	ldr	r5, [r1, #0]
 80065a2:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 80065a4:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80065a6:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 80065aa:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80065ac:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 80065ae:	6969      	ldr	r1, [r5, #20]
 80065b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80065b4:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80065b6:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80065b8:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80065ba:	f021 0101 	bic.w	r1, r1, #1
 80065be:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80065c0:	9000      	str	r0, [sp, #0]
 80065c2:	4629      	mov	r1, r5
 80065c4:	4638      	mov	r0, r7
 80065c6:	f003 fc03 	bl	8009dd0 <wait_flag_in_register_timeout>
 80065ca:	e897 0003 	ldmia.w	r7, {r0, r1}
 80065ce:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 80065d2:	4620      	mov	r0, r4
 80065d4:	f003 fc46 	bl	8009e64 <is_timeout>
 80065d8:	bb20      	cbnz	r0, 8006624 <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80065da:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 80065dc:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80065de:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 80065e0:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80065e4:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 80065e6:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80065ea:	bf94      	ite	ls
 80065ec:	6093      	strls	r3, [r2, #8]
 80065ee:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 80065f0:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80065f4:	2a00      	cmp	r2, #0
 80065f6:	dbce      	blt.n	8006596 <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80065f8:	0953      	lsrs	r3, r2, #5
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006600:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8006604:	2101      	movs	r1, #1
 8006606:	f002 021f 	and.w	r2, r2, #31
 800660a:	fa01 f202 	lsl.w	r2, r1, r2
 800660e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006612:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006616:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800661a:	f3bf 8f6f 	isb	sy
}
 800661e:	4620      	mov	r0, r4
 8006620:	b005      	add	sp, #20
 8006622:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 8006624:	4620      	mov	r0, r4
 8006626:	f240 1119 	movw	r1, #281	; 0x119
 800662a:	f003 fc11 	bl	8009e50 <set_return_line>
}
 800662e:	4620      	mov	r0, r4
 8006630:	b005      	add	sp, #20
 8006632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006634 <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 8006634:	68c3      	ldr	r3, [r0, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 800663a:	b280      	uxth	r0, r0
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 8006640:	68c0      	ldr	r0, [r0, #12]
 8006642:	4770      	bx	lr

08006644 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 8006648:	4857      	ldr	r0, [pc, #348]	; (80067a8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 800664a:	f8df e188 	ldr.w	lr, [pc, #392]	; 80067d4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 800664e:	4f57      	ldr	r7, [pc, #348]	; (80067ac <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 8006650:	4e57      	ldr	r6, [pc, #348]	; (80067b0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 8006652:	f8df b184 	ldr.w	fp, [pc, #388]	; 80067d8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 8006656:	f8df a184 	ldr.w	sl, [pc, #388]	; 80067dc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 800665a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80067e0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 800665e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80067e4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 8006662:	f8df c184 	ldr.w	ip, [pc, #388]	; 80067e8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 8006666:	4953      	ldr	r1, [pc, #332]	; (80067b4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 8006668:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 800666c:	2300      	movs	r3, #0
 800666e:	2205      	movs	r2, #5
 8006670:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 8006674:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 8006678:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 800667c:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 8006680:	f8c9 3014 	str.w	r3, [r9, #20]
 8006684:	e9cb 3308 	strd	r3, r3, [fp, #32]
 8006688:	f8c8 3014 	str.w	r3, [r8, #20]
 800668c:	e9ca 3308 	strd	r3, r3, [sl, #32]
 8006690:	e9c9 3308 	strd	r3, r3, [r9, #32]
 8006694:	e9c8 3308 	strd	r3, r3, [r8, #32]
 8006698:	f8cb 2010 	str.w	r2, [fp, #16]
 800669c:	f8cb 3018 	str.w	r3, [fp, #24]
 80066a0:	f88b 301c 	strb.w	r3, [fp, #28]
 80066a4:	f8ca 2010 	str.w	r2, [sl, #16]
 80066a8:	f8ca 3018 	str.w	r3, [sl, #24]
 80066ac:	f88a 301c 	strb.w	r3, [sl, #28]
 80066b0:	f8c9 2010 	str.w	r2, [r9, #16]
 80066b4:	f8c9 3018 	str.w	r3, [r9, #24]
 80066b8:	f889 301c 	strb.w	r3, [r9, #28]
 80066bc:	f8c8 2010 	str.w	r2, [r8, #16]
 80066c0:	f8c8 3018 	str.w	r3, [r8, #24]
 80066c4:	f888 301c 	strb.w	r3, [r8, #28]
 80066c8:	f8ce 2010 	str.w	r2, [lr, #16]
 80066cc:	f8ce 3014 	str.w	r3, [lr, #20]
 80066d0:	f8ce 3018 	str.w	r3, [lr, #24]
 80066d4:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 80066d8:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 80066dc:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 80066e0:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	6102      	str	r2, [r0, #16]
 80066e6:	6173      	str	r3, [r6, #20]
 80066e8:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80066ec:	6143      	str	r3, [r0, #20]
 80066ee:	6132      	str	r2, [r6, #16]
 80066f0:	61b3      	str	r3, [r6, #24]
 80066f2:	7733      	strb	r3, [r6, #28]
 80066f4:	6183      	str	r3, [r0, #24]
 80066f6:	4606      	mov	r6, r0
 80066f8:	7703      	strb	r3, [r0, #28]
 80066fa:	6203      	str	r3, [r0, #32]
 80066fc:	6243      	str	r3, [r0, #36]	; 0x24
 80066fe:	482e      	ldr	r0, [pc, #184]	; (80067b8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	f8ce 1008 	str.w	r1, [lr, #8]
 8006706:	f8cc 1008 	str.w	r1, [ip, #8]
 800670a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 800670e:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8006712:	613a      	str	r2, [r7, #16]
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	773b      	strb	r3, [r7, #28]
 8006718:	6102      	str	r2, [r0, #16]
 800671a:	6143      	str	r3, [r0, #20]
 800671c:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8006720:	f8ce 3020 	str.w	r3, [lr, #32]
 8006724:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 8006728:	f8cc 2010 	str.w	r2, [ip, #16]
 800672c:	f8cc 3018 	str.w	r3, [ip, #24]
 8006730:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 8006734:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006736:	4e21      	ldr	r6, [pc, #132]	; (80067bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8006738:	4f21      	ldr	r7, [pc, #132]	; (80067c0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 800673a:	6173      	str	r3, [r6, #20]
 800673c:	4e21      	ldr	r6, [pc, #132]	; (80067c4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	6173      	str	r3, [r6, #20]
 8006742:	4e1e      	ldr	r6, [pc, #120]	; (80067bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8006744:	4d20      	ldr	r5, [pc, #128]	; (80067c8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 8006746:	6132      	str	r2, [r6, #16]
 8006748:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800674c:	61b3      	str	r3, [r6, #24]
 800674e:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8006750:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006752:	6183      	str	r3, [r0, #24]
 8006754:	4e1b      	ldr	r6, [pc, #108]	; (80067c4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8006756:	7703      	strb	r3, [r0, #28]
 8006758:	6203      	str	r3, [r0, #32]
 800675a:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 800675c:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 800675e:	481b      	ldr	r0, [pc, #108]	; (80067cc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 8006760:	4c1b      	ldr	r4, [pc, #108]	; (80067d0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 8006762:	613a      	str	r2, [r7, #16]
 8006764:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8006768:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800676c:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 8006774:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 8006776:	6132      	str	r2, [r6, #16]
 8006778:	61b3      	str	r3, [r6, #24]
 800677a:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 800677c:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 800677e:	612a      	str	r2, [r5, #16]
 8006780:	616b      	str	r3, [r5, #20]
 8006782:	61ab      	str	r3, [r5, #24]
 8006784:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 8006786:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 8006788:	6102      	str	r2, [r0, #16]
 800678a:	7703      	strb	r3, [r0, #28]
 800678c:	6163      	str	r3, [r4, #20]
 800678e:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8006792:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8006796:	6122      	str	r2, [r4, #16]
 8006798:	61a3      	str	r3, [r4, #24]
 800679a:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 800679c:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 800679e:	6143      	str	r3, [r0, #20]
 80067a0:	6183      	str	r3, [r0, #24]
	_dma = dma;
 80067a2:	6081      	str	r1, [r0, #8]
}
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	2000b3f0 	.word	0x2000b3f0
 80067ac:	2000b3a0 	.word	0x2000b3a0
 80067b0:	2000b3c8 	.word	0x2000b3c8
 80067b4:	40026000 	.word	0x40026000
 80067b8:	2000b418 	.word	0x2000b418
 80067bc:	2000b440 	.word	0x2000b440
 80067c0:	2000b468 	.word	0x2000b468
 80067c4:	2000b490 	.word	0x2000b490
 80067c8:	2000b4b8 	.word	0x2000b4b8
 80067cc:	2000b508 	.word	0x2000b508
 80067d0:	2000b4e0 	.word	0x2000b4e0
 80067d4:	2000b350 	.word	0x2000b350
 80067d8:	2000b2b0 	.word	0x2000b2b0
 80067dc:	2000b2d8 	.word	0x2000b2d8
 80067e0:	2000b300 	.word	0x2000b300
 80067e4:	2000b328 	.word	0x2000b328
 80067e8:	2000b378 	.word	0x2000b378

080067ec <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 80067ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f0:	b083      	sub	sp, #12
	stm_ret_t ret;
 80067f2:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 80067f6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 80067fa:	f880 c000 	strb.w	ip, [r0]
 80067fe:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006800:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 8006804:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006806:	f240 8085 	bls.w	8006914 <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 800680a:	2a03      	cmp	r2, #3
 800680c:	4604      	mov	r4, r0
 800680e:	d84b      	bhi.n	80068a8 <exti_init+0xbc>
 8006810:	46ae      	mov	lr, r5
 8006812:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8006814:	1d97      	adds	r7, r2, #6
 8006816:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006818:	2501      	movs	r5, #1
 800681a:	40bd      	lsls	r5, r7
 800681c:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800681e:	484d      	ldr	r0, [pc, #308]	; (8006954 <exti_init+0x168>)
 8006820:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8006824:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8006828:	d105      	bne.n	8006836 <exti_init+0x4a>
 800682a:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 800682e:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 8006832:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8006836:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800683a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 800683e:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006842:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8006846:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800684a:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800684c:	9801      	ldr	r0, [sp, #4]
 800684e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006852:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006856:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 800685a:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800685e:	fa09 fe0e 	lsl.w	lr, r9, lr
 8006862:	ea20 000e 	bic.w	r0, r0, lr
 8006866:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006868:	9801      	ldr	r0, [sp, #4]
 800686a:	4301      	orrs	r1, r0
 800686c:	9101      	str	r1, [sp, #4]

	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 800686e:	9901      	ldr	r1, [sp, #4]
 8006870:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8006874:	07db      	lsls	r3, r3, #31
 8006876:	d423      	bmi.n	80068c0 <exti_init+0xd4>
 8006878:	2101      	movs	r1, #1
 800687a:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 800687e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800695c <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 8006882:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006884:	4c34      	ldr	r4, [pc, #208]	; (8006958 <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 8006886:	f8dc 1000 	ldr.w	r1, [ip]
 800688a:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800688e:	19e2      	adds	r2, r4, r7
 8006890:	b2db      	uxtb	r3, r3
 8006892:	ea41 010e 	orr.w	r1, r1, lr
 8006896:	f8cc 1000 	str.w	r1, [ip]
 800689a:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800689e:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80068a2:	b003      	add	sp, #12
 80068a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 80068a8:	1f10      	subs	r0, r2, #4
 80068aa:	2803      	cmp	r0, #3
 80068ac:	d915      	bls.n	80068da <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 80068ae:	f1a2 0008 	sub.w	r0, r2, #8
 80068b2:	2803      	cmp	r0, #3
 80068b4:	d825      	bhi.n	8006902 <exti_init+0x116>
 80068b6:	f04f 0e08 	mov.w	lr, #8
 80068ba:	f04f 0c02 	mov.w	ip, #2
 80068be:	e012      	b.n	80068e6 <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 80068c0:	4b26      	ldr	r3, [pc, #152]	; (800695c <exti_init+0x170>)
 80068c2:	2101      	movs	r1, #1
 80068c4:	fa01 fe02 	lsl.w	lr, r1, r2
 80068c8:	689a      	ldr	r2, [r3, #8]
 80068ca:	ea42 020e 	orr.w	r2, r2, lr
 80068ce:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 80068d0:	68da      	ldr	r2, [r3, #12]
 80068d2:	ea4e 0202 	orr.w	r2, lr, r2
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	e7d1      	b.n	800687e <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 80068da:	2a04      	cmp	r2, #4
 80068dc:	bf08      	it	eq
 80068de:	4696      	moveq	lr, r2
 80068e0:	d098      	beq.n	8006814 <exti_init+0x28>
 80068e2:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 80068e6:	1f50      	subs	r0, r2, #5
 80068e8:	b280      	uxth	r0, r0
 80068ea:	2804      	cmp	r0, #4
 80068ec:	bf35      	itete	cc
 80068ee:	2717      	movcc	r7, #23
 80068f0:	2728      	movcs	r7, #40	; 0x28
 80068f2:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 80068f6:	f44f 7580 	movcs.w	r5, #256	; 0x100
 80068fa:	bf34      	ite	cc
 80068fc:	2600      	movcc	r6, #0
 80068fe:	2601      	movcs	r6, #1
 8006900:	e78d      	b.n	800681e <exti_init+0x32>
 8006902:	4666      	mov	r6, ip
 8006904:	2728      	movs	r7, #40	; 0x28
 8006906:	f44f 7580 	mov.w	r5, #256	; 0x100
 800690a:	f04f 0e0c 	mov.w	lr, #12
 800690e:	f04f 0c03 	mov.w	ip, #3
 8006912:	e784      	b.n	800681e <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 8006914:	4629      	mov	r1, r5
 8006916:	223a      	movs	r2, #58	; 0x3a
 8006918:	f003 fa96 	bl	8009e48 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <exti_init+0x174>)
 800691e:	4a11      	ldr	r2, [pc, #68]	; (8006964 <exti_init+0x178>)
 8006920:	4911      	ldr	r1, [pc, #68]	; (8006968 <exti_init+0x17c>)
 8006922:	4812      	ldr	r0, [pc, #72]	; (800696c <exti_init+0x180>)
 8006924:	f003 f95c 	bl	8009be0 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8006928:	4911      	ldr	r1, [pc, #68]	; (8006970 <exti_init+0x184>)
 800692a:	4810      	ldr	r0, [pc, #64]	; (800696c <exti_init+0x180>)
 800692c:	2205      	movs	r2, #5
 800692e:	f003 f8db 	bl	8009ae8 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8006932:	f241 3088 	movw	r0, #5000	; 0x1388
 8006936:	f001 fe13 	bl	8008560 <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 800693a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800693e:	490d      	ldr	r1, [pc, #52]	; (8006974 <exti_init+0x188>)
 8006940:	4b0d      	ldr	r3, [pc, #52]	; (8006978 <exti_init+0x18c>)
 8006942:	68ca      	ldr	r2, [r1, #12]
 8006944:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006948:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800694a:	60cb      	str	r3, [r1, #12]
 800694c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006950:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006952:	e7fd      	b.n	8006950 <exti_init+0x164>
 8006954:	40023800 	.word	0x40023800
 8006958:	e000e100 	.word	0xe000e100
 800695c:	40013c00 	.word	0x40013c00
 8006960:	0800e7bc 	.word	0x0800e7bc
 8006964:	0800e7c8 	.word	0x0800e7c8
 8006968:	0800e7f0 	.word	0x0800e7f0
 800696c:	0800e834 	.word	0x0800e834
 8006970:	0800e83c 	.word	0x0800e83c
 8006974:	e000ed00 	.word	0xe000ed00
 8006978:	05fa0004 	.word	0x05fa0004

0800697c <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 800697c:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 8006980:	4c04      	ldr	r4, [pc, #16]	; (8006994 <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 8006982:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 8006986:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 800698a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	2000b570 	.word	0x2000b570
 8006994:	2000b530 	.word	0x2000b530

08006998 <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <EXTI0_IRQHandler+0x1c>)
 800699a:	695a      	ldr	r2, [r3, #20]
 800699c:	07d2      	lsls	r2, r2, #31
 800699e:	d507      	bpl.n	80069b0 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069a0:	4a05      	ldr	r2, [pc, #20]	; (80069b8 <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 80069a2:	2101      	movs	r1, #1
 80069a4:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	b113      	cbz	r3, 80069b0 <EXTI0_IRQHandler+0x18>
 80069aa:	4a04      	ldr	r2, [pc, #16]	; (80069bc <EXTI0_IRQHandler+0x24>)
 80069ac:	6810      	ldr	r0, [r2, #0]
 80069ae:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	40013c00 	.word	0x40013c00
 80069b8:	2000b530 	.word	0x2000b530
 80069bc:	2000b570 	.word	0x2000b570

080069c0 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <EXTI1_IRQHandler+0x1c>)
 80069c2:	695a      	ldr	r2, [r3, #20]
 80069c4:	0792      	lsls	r2, r2, #30
 80069c6:	d507      	bpl.n	80069d8 <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069c8:	4a05      	ldr	r2, [pc, #20]	; (80069e0 <EXTI1_IRQHandler+0x20>)
 80069ca:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 80069cc:	2102      	movs	r1, #2
 80069ce:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069d0:	b112      	cbz	r2, 80069d8 <EXTI1_IRQHandler+0x18>
 80069d2:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <EXTI1_IRQHandler+0x24>)
 80069d4:	6858      	ldr	r0, [r3, #4]
 80069d6:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40013c00 	.word	0x40013c00
 80069e0:	2000b530 	.word	0x2000b530
 80069e4:	2000b570 	.word	0x2000b570

080069e8 <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80069e8:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <EXTI2_IRQHandler+0x1c>)
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	0752      	lsls	r2, r2, #29
 80069ee:	d507      	bpl.n	8006a00 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069f0:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <EXTI2_IRQHandler+0x20>)
 80069f2:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 80069f4:	2104      	movs	r1, #4
 80069f6:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069f8:	b112      	cbz	r2, 8006a00 <EXTI2_IRQHandler+0x18>
 80069fa:	4b04      	ldr	r3, [pc, #16]	; (8006a0c <EXTI2_IRQHandler+0x24>)
 80069fc:	6898      	ldr	r0, [r3, #8]
 80069fe:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	40013c00 	.word	0x40013c00
 8006a08:	2000b530 	.word	0x2000b530
 8006a0c:	2000b570 	.word	0x2000b570

08006a10 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006a10:	4b06      	ldr	r3, [pc, #24]	; (8006a2c <EXTI3_IRQHandler+0x1c>)
 8006a12:	695a      	ldr	r2, [r3, #20]
 8006a14:	0712      	lsls	r2, r2, #28
 8006a16:	d507      	bpl.n	8006a28 <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a18:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <EXTI3_IRQHandler+0x20>)
 8006a1a:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 8006a1c:	2108      	movs	r1, #8
 8006a1e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a20:	b112      	cbz	r2, 8006a28 <EXTI3_IRQHandler+0x18>
 8006a22:	4b04      	ldr	r3, [pc, #16]	; (8006a34 <EXTI3_IRQHandler+0x24>)
 8006a24:	68d8      	ldr	r0, [r3, #12]
 8006a26:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40013c00 	.word	0x40013c00
 8006a30:	2000b530 	.word	0x2000b530
 8006a34:	2000b570 	.word	0x2000b570

08006a38 <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <EXTI4_IRQHandler+0x1c>)
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	06d2      	lsls	r2, r2, #27
 8006a3e:	d507      	bpl.n	8006a50 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a40:	4a05      	ldr	r2, [pc, #20]	; (8006a58 <EXTI4_IRQHandler+0x20>)
 8006a42:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 8006a44:	2110      	movs	r1, #16
 8006a46:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a48:	b112      	cbz	r2, 8006a50 <EXTI4_IRQHandler+0x18>
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <EXTI4_IRQHandler+0x24>)
 8006a4c:	6918      	ldr	r0, [r3, #16]
 8006a4e:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40013c00 	.word	0x40013c00
 8006a58:	2000b530 	.word	0x2000b530
 8006a5c:	2000b570 	.word	0x2000b570

08006a60 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006a60:	4b20      	ldr	r3, [pc, #128]	; (8006ae4 <EXTI9_5_IRQHandler+0x84>)
 8006a62:	695a      	ldr	r2, [r3, #20]
 8006a64:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 8006a66:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006a68:	d507      	bpl.n	8006a7a <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ae8 <EXTI9_5_IRQHandler+0x88>)
 8006a6c:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 8006a6e:	2120      	movs	r1, #32
 8006a70:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a72:	b112      	cbz	r2, 8006a7a <EXTI9_5_IRQHandler+0x1a>
 8006a74:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <EXTI9_5_IRQHandler+0x8c>)
 8006a76:	6958      	ldr	r0, [r3, #20]
 8006a78:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a7a:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <EXTI9_5_IRQHandler+0x84>)
 8006a7c:	695a      	ldr	r2, [r3, #20]
 8006a7e:	0654      	lsls	r4, r2, #25
 8006a80:	d507      	bpl.n	8006a92 <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a82:	4a19      	ldr	r2, [pc, #100]	; (8006ae8 <EXTI9_5_IRQHandler+0x88>)
 8006a84:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 8006a86:	2140      	movs	r1, #64	; 0x40
 8006a88:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a8a:	b112      	cbz	r2, 8006a92 <EXTI9_5_IRQHandler+0x32>
 8006a8c:	4b17      	ldr	r3, [pc, #92]	; (8006aec <EXTI9_5_IRQHandler+0x8c>)
 8006a8e:	6998      	ldr	r0, [r3, #24]
 8006a90:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a92:	4b14      	ldr	r3, [pc, #80]	; (8006ae4 <EXTI9_5_IRQHandler+0x84>)
 8006a94:	695a      	ldr	r2, [r3, #20]
 8006a96:	0610      	lsls	r0, r2, #24
 8006a98:	d507      	bpl.n	8006aaa <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a9a:	4a13      	ldr	r2, [pc, #76]	; (8006ae8 <EXTI9_5_IRQHandler+0x88>)
 8006a9c:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 8006a9e:	2180      	movs	r1, #128	; 0x80
 8006aa0:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006aa2:	b112      	cbz	r2, 8006aaa <EXTI9_5_IRQHandler+0x4a>
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <EXTI9_5_IRQHandler+0x8c>)
 8006aa6:	69d8      	ldr	r0, [r3, #28]
 8006aa8:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006aaa:	4b0e      	ldr	r3, [pc, #56]	; (8006ae4 <EXTI9_5_IRQHandler+0x84>)
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	05d1      	lsls	r1, r2, #23
 8006ab0:	d508      	bpl.n	8006ac4 <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ab2:	4a0d      	ldr	r2, [pc, #52]	; (8006ae8 <EXTI9_5_IRQHandler+0x88>)
 8006ab4:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 8006ab6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006aba:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006abc:	b112      	cbz	r2, 8006ac4 <EXTI9_5_IRQHandler+0x64>
 8006abe:	4b0b      	ldr	r3, [pc, #44]	; (8006aec <EXTI9_5_IRQHandler+0x8c>)
 8006ac0:	6a18      	ldr	r0, [r3, #32]
 8006ac2:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <EXTI9_5_IRQHandler+0x84>)
 8006ac6:	695a      	ldr	r2, [r3, #20]
 8006ac8:	0592      	lsls	r2, r2, #22
 8006aca:	d50a      	bpl.n	8006ae2 <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006acc:	4a06      	ldr	r2, [pc, #24]	; (8006ae8 <EXTI9_5_IRQHandler+0x88>)
 8006ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 8006ad0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ad4:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ad6:	b122      	cbz	r2, 8006ae2 <EXTI9_5_IRQHandler+0x82>
 8006ad8:	4b04      	ldr	r3, [pc, #16]	; (8006aec <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 8006ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ade:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006ae0:	4710      	bx	r2
}
 8006ae2:	bd10      	pop	{r4, pc}
 8006ae4:	40013c00 	.word	0x40013c00
 8006ae8:	2000b530 	.word	0x2000b530
 8006aec:	2000b570 	.word	0x2000b570

08006af0 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006af0:	4b28      	ldr	r3, [pc, #160]	; (8006b94 <EXTI15_10_IRQHandler+0xa4>)
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 8006af6:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006af8:	d508      	bpl.n	8006b0c <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006afa:	4a27      	ldr	r2, [pc, #156]	; (8006b98 <EXTI15_10_IRQHandler+0xa8>)
 8006afc:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 8006afe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b02:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b04:	b112      	cbz	r2, 8006b0c <EXTI15_10_IRQHandler+0x1c>
 8006b06:	4b25      	ldr	r3, [pc, #148]	; (8006b9c <EXTI15_10_IRQHandler+0xac>)
 8006b08:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006b0a:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006b0c:	4b21      	ldr	r3, [pc, #132]	; (8006b94 <EXTI15_10_IRQHandler+0xa4>)
 8006b0e:	695a      	ldr	r2, [r3, #20]
 8006b10:	0512      	lsls	r2, r2, #20
 8006b12:	d508      	bpl.n	8006b26 <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b14:	4a20      	ldr	r2, [pc, #128]	; (8006b98 <EXTI15_10_IRQHandler+0xa8>)
 8006b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 8006b18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b1c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b1e:	b112      	cbz	r2, 8006b26 <EXTI15_10_IRQHandler+0x36>
 8006b20:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <EXTI15_10_IRQHandler+0xac>)
 8006b22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b24:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006b26:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <EXTI15_10_IRQHandler+0xa4>)
 8006b28:	695a      	ldr	r2, [r3, #20]
 8006b2a:	04d4      	lsls	r4, r2, #19
 8006b2c:	d508      	bpl.n	8006b40 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b2e:	4a1a      	ldr	r2, [pc, #104]	; (8006b98 <EXTI15_10_IRQHandler+0xa8>)
 8006b30:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 8006b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b36:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b38:	b112      	cbz	r2, 8006b40 <EXTI15_10_IRQHandler+0x50>
 8006b3a:	4b18      	ldr	r3, [pc, #96]	; (8006b9c <EXTI15_10_IRQHandler+0xac>)
 8006b3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b3e:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006b40:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <EXTI15_10_IRQHandler+0xa4>)
 8006b42:	695a      	ldr	r2, [r3, #20]
 8006b44:	0490      	lsls	r0, r2, #18
 8006b46:	d508      	bpl.n	8006b5a <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b48:	4a13      	ldr	r2, [pc, #76]	; (8006b98 <EXTI15_10_IRQHandler+0xa8>)
 8006b4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8006b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006b50:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b52:	b112      	cbz	r2, 8006b5a <EXTI15_10_IRQHandler+0x6a>
 8006b54:	4b11      	ldr	r3, [pc, #68]	; (8006b9c <EXTI15_10_IRQHandler+0xac>)
 8006b56:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006b58:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <EXTI15_10_IRQHandler+0xa4>)
 8006b5c:	695a      	ldr	r2, [r3, #20]
 8006b5e:	0451      	lsls	r1, r2, #17
 8006b60:	d508      	bpl.n	8006b74 <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b62:	4a0d      	ldr	r2, [pc, #52]	; (8006b98 <EXTI15_10_IRQHandler+0xa8>)
 8006b64:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 8006b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b6a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b6c:	b112      	cbz	r2, 8006b74 <EXTI15_10_IRQHandler+0x84>
 8006b6e:	4b0b      	ldr	r3, [pc, #44]	; (8006b9c <EXTI15_10_IRQHandler+0xac>)
 8006b70:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006b72:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <EXTI15_10_IRQHandler+0xa4>)
 8006b76:	695a      	ldr	r2, [r3, #20]
 8006b78:	0412      	lsls	r2, r2, #16
 8006b7a:	d50a      	bpl.n	8006b92 <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b7c:	4a06      	ldr	r2, [pc, #24]	; (8006b98 <EXTI15_10_IRQHandler+0xa8>)
 8006b7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 8006b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b84:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b86:	b122      	cbz	r2, 8006b92 <EXTI15_10_IRQHandler+0xa2>
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 8006b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b90:	4710      	bx	r2
}
 8006b92:	bd10      	pop	{r4, pc}
 8006b94:	40013c00 	.word	0x40013c00
 8006b98:	2000b530 	.word	0x2000b530
 8006b9c:	2000b570 	.word	0x2000b570

08006ba0 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ba4:	4c3a      	ldr	r4, [pc, #232]	; (8006c90 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 8006ba6:	4d3b      	ldr	r5, [pc, #236]	; (8006c94 <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ba8:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006baa:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006c9c <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 8006bae:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006bb0:	4939      	ldr	r1, [pc, #228]	; (8006c98 <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 8006bb2:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 8006bb4:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006bb6:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006bb8:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	ea03 0308 	and.w	r3, r3, r8
 8006bc0:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006bc2:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2710      	moveq	r7, #16
 8006bc8:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006bca:	433b      	orrs	r3, r7
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006bd2:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006bd6:	9b05      	ldr	r3, [sp, #20]
 8006bd8:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006bda:	2220      	movs	r2, #32
 8006bdc:	2300      	movs	r3, #0
 8006bde:	a806      	add	r0, sp, #24
 8006be0:	9600      	str	r6, [sp, #0]
 8006be2:	f003 f8f5 	bl	8009dd0 <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 8006be6:	2001      	movs	r0, #1
 8006be8:	f001 fcf0 	bl	80085cc <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006bec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006bee:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006bf0:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006bf2:	4929      	ldr	r1, [pc, #164]	; (8006c98 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006bf4:	ea03 0308 	and.w	r3, r3, r8
 8006bf8:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	433b      	orrs	r3, r7
 8006bfe:	f043 0302 	orr.w	r3, r3, #2
 8006c02:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006c04:	9b04      	ldr	r3, [sp, #16]
 8006c06:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006c08:	a806      	add	r0, sp, #24
 8006c0a:	9600      	str	r6, [sp, #0]
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f003 f8de 	bl	8009dd0 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006c14:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006c16:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006c18:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006c1a:	491f      	ldr	r1, [pc, #124]	; (8006c98 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006c1c:	ea03 0308 	and.w	r3, r3, r8
 8006c20:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	433b      	orrs	r3, r7
 8006c26:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8006c2a:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006c2c:	9b03      	ldr	r3, [sp, #12]
 8006c2e:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006c30:	a806      	add	r0, sp, #24
 8006c32:	9600      	str	r6, [sp, #0]
 8006c34:	2300      	movs	r3, #0
 8006c36:	2220      	movs	r2, #32
 8006c38:	f003 f8ca 	bl	8009dd0 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006c3c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006c3e:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006c40:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006c42:	4915      	ldr	r1, [pc, #84]	; (8006c98 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006c44:	ea03 0308 	and.w	r3, r3, r8
 8006c48:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006c4a:	9b02      	ldr	r3, [sp, #8]
 8006c4c:	433b      	orrs	r3, r7
 8006c4e:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8006c52:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006c56:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006c58:	9b02      	ldr	r3, [sp, #8]
 8006c5a:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006c5c:	a806      	add	r0, sp, #24
 8006c5e:	2300      	movs	r3, #0
 8006c60:	9600      	str	r6, [sp, #0]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f003 f8b4 	bl	8009dd0 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 8006c68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c6a:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006c6c:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006c6e:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006c70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006c74:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006c78:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006c7a:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006c7c:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006c7e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006c82:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006c84:	9b06      	ldr	r3, [sp, #24]
 8006c86:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c88:	b008      	add	sp, #32
 8006c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c8e:	bf00      	nop
 8006c90:	a0000100 	.word	0xa0000100
 8006c94:	2000b5b0 	.word	0x2000b5b0
 8006c98:	a0000158 	.word	0xa0000158
 8006c9c:	ffc00000 	.word	0xffc00000

08006ca0 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 8006ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 8006ca4:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8006fdc <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 8006ca8:	4ec8      	ldr	r6, [pc, #800]	; (8006fcc <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 8006caa:	4dc9      	ldr	r5, [pc, #804]	; (8006fd0 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 8006cac:	4cc9      	ldr	r4, [pc, #804]	; (8006fd4 <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 8006cae:	4fca      	ldr	r7, [pc, #808]	; (8006fd8 <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 8006cb0:	4640      	mov	r0, r8
 8006cb2:	f000 fa5d 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	f000 fa5a 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 fa57 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 fa54 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f000 fa51 	bl	8007170 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 8006cce:	4620      	mov	r0, r4
 8006cd0:	220c      	movs	r2, #12
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	f000 fb34 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006cd8:	4620      	mov	r0, r4
 8006cda:	2207      	movs	r2, #7
 8006cdc:	2100      	movs	r1, #0
 8006cde:	f000 fb6d 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	220c      	movs	r2, #12
 8006ce6:	2101      	movs	r1, #1
 8006ce8:	f000 fb2a 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 8006cec:	4620      	mov	r0, r4
 8006cee:	2207      	movs	r2, #7
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	f000 fb63 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	220c      	movs	r2, #12
 8006cfa:	2102      	movs	r1, #2
 8006cfc:	f000 fb20 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 8006d00:	4620      	mov	r0, r4
 8006d02:	2207      	movs	r2, #7
 8006d04:	2102      	movs	r1, #2
 8006d06:	f000 fb59 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	220c      	movs	r2, #12
 8006d0e:	2103      	movs	r1, #3
 8006d10:	f000 fb16 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 8006d14:	4620      	mov	r0, r4
 8006d16:	2207      	movs	r2, #7
 8006d18:	2103      	movs	r1, #3
 8006d1a:	f000 fb4f 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 8006d1e:	4620      	mov	r0, r4
 8006d20:	220c      	movs	r2, #12
 8006d22:	2104      	movs	r1, #4
 8006d24:	f000 fb0c 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 8006d28:	4620      	mov	r0, r4
 8006d2a:	2207      	movs	r2, #7
 8006d2c:	2104      	movs	r1, #4
 8006d2e:	f000 fb45 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 8006d32:	4620      	mov	r0, r4
 8006d34:	220c      	movs	r2, #12
 8006d36:	2105      	movs	r1, #5
 8006d38:	f000 fb02 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	2207      	movs	r2, #7
 8006d40:	2105      	movs	r1, #5
 8006d42:	f000 fb3b 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 8006d46:	220c      	movs	r2, #12
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f000 faf8 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006d50:	4620      	mov	r0, r4
 8006d52:	2207      	movs	r2, #7
 8006d54:	210c      	movs	r1, #12
 8006d56:	f000 fb31 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 8006d5a:	4620      	mov	r0, r4
 8006d5c:	220c      	movs	r2, #12
 8006d5e:	210d      	movs	r1, #13
 8006d60:	f000 faee 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006d64:	4620      	mov	r0, r4
 8006d66:	2207      	movs	r2, #7
 8006d68:	210d      	movs	r1, #13
 8006d6a:	f000 fb27 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 8006d6e:	4620      	mov	r0, r4
 8006d70:	220c      	movs	r2, #12
 8006d72:	210e      	movs	r1, #14
 8006d74:	f000 fae4 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006d78:	4620      	mov	r0, r4
 8006d7a:	2207      	movs	r2, #7
 8006d7c:	210e      	movs	r1, #14
 8006d7e:	f000 fb1d 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006d82:	4620      	mov	r0, r4
 8006d84:	220c      	movs	r2, #12
 8006d86:	210f      	movs	r1, #15
 8006d88:	f000 fada 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	2207      	movs	r2, #7
 8006d90:	210f      	movs	r1, #15
 8006d92:	f000 fb13 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006d96:	4638      	mov	r0, r7
 8006d98:	220c      	movs	r2, #12
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f000 fad0 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006da0:	4638      	mov	r0, r7
 8006da2:	2207      	movs	r2, #7
 8006da4:	2100      	movs	r1, #0
 8006da6:	f000 fb09 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 8006daa:	4638      	mov	r0, r7
 8006dac:	220c      	movs	r2, #12
 8006dae:	2101      	movs	r1, #1
 8006db0:	f000 fac6 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006db4:	4638      	mov	r0, r7
 8006db6:	2207      	movs	r2, #7
 8006db8:	2101      	movs	r1, #1
 8006dba:	f000 faff 	bl	80073bc <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 8006dbe:	4630      	mov	r0, r6
 8006dc0:	220c      	movs	r2, #12
 8006dc2:	210e      	movs	r1, #14
 8006dc4:	f000 fabc 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006dc8:	4630      	mov	r0, r6
 8006dca:	2207      	movs	r2, #7
 8006dcc:	210e      	movs	r1, #14
 8006dce:	f000 faf5 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	220c      	movs	r2, #12
 8006dd6:	210f      	movs	r1, #15
 8006dd8:	f000 fab2 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 8006ddc:	4630      	mov	r0, r6
 8006dde:	2207      	movs	r2, #7
 8006de0:	210f      	movs	r1, #15
 8006de2:	f000 faeb 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006de6:	4630      	mov	r0, r6
 8006de8:	220c      	movs	r2, #12
 8006dea:	2100      	movs	r1, #0
 8006dec:	f000 faa8 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006df0:	4630      	mov	r0, r6
 8006df2:	2207      	movs	r2, #7
 8006df4:	2100      	movs	r1, #0
 8006df6:	f000 fae1 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	220c      	movs	r2, #12
 8006dfe:	2101      	movs	r1, #1
 8006e00:	f000 fa9e 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 8006e04:	4630      	mov	r0, r6
 8006e06:	2207      	movs	r2, #7
 8006e08:	2101      	movs	r1, #1
 8006e0a:	f000 fad7 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 8006e0e:	4628      	mov	r0, r5
 8006e10:	220c      	movs	r2, #12
 8006e12:	2107      	movs	r1, #7
 8006e14:	f000 fa94 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 8006e18:	2207      	movs	r2, #7
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 facd 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 8006e22:	4628      	mov	r0, r5
 8006e24:	220c      	movs	r2, #12
 8006e26:	2108      	movs	r1, #8
 8006e28:	f000 fa8a 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	2207      	movs	r2, #7
 8006e30:	2108      	movs	r1, #8
 8006e32:	f000 fac3 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 8006e36:	4628      	mov	r0, r5
 8006e38:	220c      	movs	r2, #12
 8006e3a:	2109      	movs	r1, #9
 8006e3c:	f000 fa80 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 8006e40:	4628      	mov	r0, r5
 8006e42:	2207      	movs	r2, #7
 8006e44:	2109      	movs	r1, #9
 8006e46:	f000 fab9 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	220c      	movs	r2, #12
 8006e4e:	210a      	movs	r1, #10
 8006e50:	f000 fa76 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 8006e54:	4628      	mov	r0, r5
 8006e56:	2207      	movs	r2, #7
 8006e58:	210a      	movs	r1, #10
 8006e5a:	f000 faaf 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 8006e5e:	4628      	mov	r0, r5
 8006e60:	220c      	movs	r2, #12
 8006e62:	210b      	movs	r1, #11
 8006e64:	f000 fa6c 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006e68:	4628      	mov	r0, r5
 8006e6a:	2207      	movs	r2, #7
 8006e6c:	210b      	movs	r1, #11
 8006e6e:	f000 faa5 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006e72:	220c      	movs	r2, #12
 8006e74:	4611      	mov	r1, r2
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fa62 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	2207      	movs	r2, #7
 8006e80:	210c      	movs	r1, #12
 8006e82:	f000 fa9b 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006e86:	4628      	mov	r0, r5
 8006e88:	220c      	movs	r2, #12
 8006e8a:	210d      	movs	r1, #13
 8006e8c:	f000 fa58 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006e90:	4628      	mov	r0, r5
 8006e92:	2207      	movs	r2, #7
 8006e94:	210d      	movs	r1, #13
 8006e96:	f000 fa91 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	220c      	movs	r2, #12
 8006e9e:	210e      	movs	r1, #14
 8006ea0:	f000 fa4e 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	210e      	movs	r1, #14
 8006eaa:	f000 fa87 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 8006eae:	4628      	mov	r0, r5
 8006eb0:	220c      	movs	r2, #12
 8006eb2:	210f      	movs	r1, #15
 8006eb4:	f000 fa44 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006eb8:	4628      	mov	r0, r5
 8006eba:	2207      	movs	r2, #7
 8006ebc:	210f      	movs	r1, #15
 8006ebe:	f000 fa7d 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	220c      	movs	r2, #12
 8006ec6:	2108      	movs	r1, #8
 8006ec8:	f000 fa3a 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006ecc:	4630      	mov	r0, r6
 8006ece:	2207      	movs	r2, #7
 8006ed0:	2108      	movs	r1, #8
 8006ed2:	f000 fa73 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	220c      	movs	r2, #12
 8006eda:	2109      	movs	r1, #9
 8006edc:	f000 fa30 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	2207      	movs	r2, #7
 8006ee4:	2109      	movs	r1, #9
 8006ee6:	f000 fa69 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006eea:	4630      	mov	r0, r6
 8006eec:	220c      	movs	r2, #12
 8006eee:	210a      	movs	r1, #10
 8006ef0:	f000 fa26 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	2207      	movs	r2, #7
 8006ef8:	210a      	movs	r1, #10
 8006efa:	f000 fa5f 	bl	80073bc <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006efe:	4628      	mov	r0, r5
 8006f00:	220c      	movs	r2, #12
 8006f02:	2100      	movs	r1, #0
 8006f04:	f000 fa1c 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006f08:	4628      	mov	r0, r5
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	f000 fa55 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 8006f12:	4628      	mov	r0, r5
 8006f14:	220c      	movs	r2, #12
 8006f16:	2101      	movs	r1, #1
 8006f18:	f000 fa12 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	2207      	movs	r2, #7
 8006f20:	2101      	movs	r1, #1
 8006f22:	f000 fa4b 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 8006f26:	4638      	mov	r0, r7
 8006f28:	220c      	movs	r2, #12
 8006f2a:	2104      	movs	r1, #4
 8006f2c:	f000 fa08 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006f30:	4638      	mov	r0, r7
 8006f32:	2207      	movs	r2, #7
 8006f34:	2104      	movs	r1, #4
 8006f36:	f000 fa41 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	220c      	movs	r2, #12
 8006f3e:	2105      	movs	r1, #5
 8006f40:	f000 f9fe 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 8006f44:	4638      	mov	r0, r7
 8006f46:	2207      	movs	r2, #7
 8006f48:	2105      	movs	r1, #5
 8006f4a:	f000 fa37 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006f4e:	4638      	mov	r0, r7
 8006f50:	220c      	movs	r2, #12
 8006f52:	210f      	movs	r1, #15
 8006f54:	f000 f9f4 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006f58:	4638      	mov	r0, r7
 8006f5a:	2207      	movs	r2, #7
 8006f5c:	210f      	movs	r1, #15
 8006f5e:	f000 fa2d 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006f62:	4620      	mov	r0, r4
 8006f64:	220c      	movs	r2, #12
 8006f66:	210b      	movs	r1, #11
 8006f68:	f000 f9ea 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	2207      	movs	r2, #7
 8006f70:	210b      	movs	r1, #11
 8006f72:	f000 fa23 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006f76:	4638      	mov	r0, r7
 8006f78:	220c      	movs	r2, #12
 8006f7a:	2108      	movs	r1, #8
 8006f7c:	f000 f9e0 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006f80:	4638      	mov	r0, r7
 8006f82:	2207      	movs	r2, #7
 8006f84:	2108      	movs	r1, #8
 8006f86:	f000 fa19 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 8006f8a:	4640      	mov	r0, r8
 8006f8c:	220c      	movs	r2, #12
 8006f8e:	2100      	movs	r1, #0
 8006f90:	f000 f9d6 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006f94:	4640      	mov	r0, r8
 8006f96:	2207      	movs	r2, #7
 8006f98:	2100      	movs	r1, #0
 8006f9a:	f000 fa0f 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	220c      	movs	r2, #12
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	f000 f9cc 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006fa8:	4640      	mov	r0, r8
 8006faa:	2207      	movs	r2, #7
 8006fac:	2102      	movs	r1, #2
 8006fae:	f000 fa05 	bl	80073bc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006fb2:	4640      	mov	r0, r8
 8006fb4:	220c      	movs	r2, #12
 8006fb6:	2103      	movs	r1, #3
 8006fb8:	f000 f9c2 	bl	8007340 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006fbc:	4640      	mov	r0, r8
 8006fbe:	2207      	movs	r2, #7

}
 8006fc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006fc4:	2103      	movs	r1, #3
 8006fc6:	f000 b9f9 	b.w	80073bc <gpio_set_alternatefunction_type>
 8006fca:	bf00      	nop
 8006fcc:	40020c00 	.word	0x40020c00
 8006fd0:	40021000 	.word	0x40021000
 8006fd4:	40021400 	.word	0x40021400
 8006fd8:	40021800 	.word	0x40021800
 8006fdc:	40020800 	.word	0x40020800

08006fe0 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006fe0:	b530      	push	{r4, r5, lr}
	_conf = conf;
 8006fe2:	4c60      	ldr	r4, [pc, #384]	; (8007164 <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 8006fe4:	b083      	sub	sp, #12
	_conf = conf;
 8006fe6:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006fe8:	f7ff fe5a 	bl	8006ca0 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006fec:	4a5e      	ldr	r2, [pc, #376]	; (8007168 <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006fee:	495f      	ldr	r1, [pc, #380]	; (800716c <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006ff0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	781a      	ldrb	r2, [r3, #0]
 8006ffc:	2a00      	cmp	r2, #0
 8006ffe:	d148      	bne.n	8007092 <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8007000:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007002:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8007004:	7a9c      	ldrb	r4, [r3, #10]
 8007006:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 8007008:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 800700a:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 800700c:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 800700e:	7b1c      	ldrb	r4, [r3, #12]
 8007010:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 8007012:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 8007014:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8007016:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8007018:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 800701a:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 800701c:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 800701e:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 8007020:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8007022:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8007024:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 8007026:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8007028:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 800702a:	4302      	orrs	r2, r0
 800702c:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 800702e:	b119      	cbz	r1, 8007038 <fmc_sdram_init+0x58>
 8007030:	9a00      	ldr	r2, [sp, #0]
 8007032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007036:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8007038:	7cda      	ldrb	r2, [r3, #19]
 800703a:	2a00      	cmp	r2, #0
 800703c:	f040 808c 	bne.w	8007158 <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8007040:	494a      	ldr	r1, [pc, #296]	; (800716c <fmc_sdram_init+0x18c>)
 8007042:	9a00      	ldr	r2, [sp, #0]
 8007044:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8007046:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8007048:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 800704a:	2000      	movs	r0, #0
 800704c:	9a00      	ldr	r2, [sp, #0]
 800704e:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007050:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8007052:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007054:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8007056:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007058:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 800705a:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800705c:	432a      	orrs	r2, r5
 800705e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007062:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007064:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8007068:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800706c:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800706e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8007072:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007074:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007078:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 800707c:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800707e:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007082:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007084:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007088:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 800708a:	9b00      	ldr	r3, [sp, #0]
 800708c:	648b      	str	r3, [r1, #72]	; 0x48
}
 800708e:	b003      	add	sp, #12
 8007090:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8007092:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007094:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8007096:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8007098:	891a      	ldrh	r2, [r3, #8]
 800709a:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 800709c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 80070a0:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 80070a2:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80070a4:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 80070a6:	4322      	orrs	r2, r4
 80070a8:	b292      	uxth	r2, r2
 80070aa:	4302      	orrs	r2, r0
 80070ac:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80070ae:	b119      	cbz	r1, 80070b8 <fmc_sdram_init+0xd8>
 80070b0:	9a01      	ldr	r2, [sp, #4]
 80070b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070b6:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 80070b8:	4a2c      	ldr	r2, [pc, #176]	; (800716c <fmc_sdram_init+0x18c>)
 80070ba:	9901      	ldr	r1, [sp, #4]
 80070bc:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 80070be:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070c0:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 80070c2:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 80070c4:	7adc      	ldrb	r4, [r3, #11]
 80070c6:	7a9a      	ldrb	r2, [r3, #10]
 80070c8:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 80070ca:	0c09      	lsrs	r1, r1, #16
 80070cc:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 80070ce:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 80070d0:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 80070d2:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 80070d4:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 80070d6:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 80070d8:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 80070da:	4322      	orrs	r2, r4
 80070dc:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 80070de:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 80070e0:	4302      	orrs	r2, r0
 80070e2:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 80070e4:	b119      	cbz	r1, 80070ee <fmc_sdram_init+0x10e>
 80070e6:	9a01      	ldr	r2, [sp, #4]
 80070e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ec:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 80070ee:	491f      	ldr	r1, [pc, #124]	; (800716c <fmc_sdram_init+0x18c>)
 80070f0:	9a01      	ldr	r2, [sp, #4]
 80070f2:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 80070f4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80070f6:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 80070f8:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 80070fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 80070fc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 80070fe:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8007102:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 8007106:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007108:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800710a:	9801      	ldr	r0, [sp, #4]
 800710c:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 800710e:	0512      	lsls	r2, r2, #20
 8007110:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8007114:	4302      	orrs	r2, r0
 8007116:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8007118:	9a01      	ldr	r2, [sp, #4]
 800711a:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 800711c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800711e:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 8007120:	2000      	movs	r0, #0
 8007122:	9a01      	ldr	r2, [sp, #4]
 8007124:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007126:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8007128:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800712a:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 800712c:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800712e:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007130:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007132:	432a      	orrs	r2, r5
 8007134:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007138:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 800713a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800713c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007140:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8007142:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007144:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007148:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800714a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800714e:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 8007150:	9b01      	ldr	r3, [sp, #4]
 8007152:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8007154:	b003      	add	sp, #12
 8007156:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8007158:	9a00      	ldr	r2, [sp, #0]
 800715a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800715e:	9200      	str	r2, [sp, #0]
 8007160:	e76e      	b.n	8007040 <fmc_sdram_init+0x60>
 8007162:	bf00      	nop
 8007164:	2000b5b0 	.word	0x2000b5b0
 8007168:	40023800 	.word	0x40023800
 800716c:	a0000100 	.word	0xa0000100

08007170 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8007170:	4b28      	ldr	r3, [pc, #160]	; (8007214 <gpio_port_clock_enable+0xa4>)
 8007172:	4298      	cmp	r0, r3
 8007174:	d01e      	beq.n	80071b4 <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8007176:	4b28      	ldr	r3, [pc, #160]	; (8007218 <gpio_port_clock_enable+0xa8>)
 8007178:	4298      	cmp	r0, r3
 800717a:	d021      	beq.n	80071c0 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 800717c:	4b27      	ldr	r3, [pc, #156]	; (800721c <gpio_port_clock_enable+0xac>)
 800717e:	4298      	cmp	r0, r3
 8007180:	d024      	beq.n	80071cc <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8007182:	4b27      	ldr	r3, [pc, #156]	; (8007220 <gpio_port_clock_enable+0xb0>)
 8007184:	4298      	cmp	r0, r3
 8007186:	d00f      	beq.n	80071a8 <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8007188:	4b26      	ldr	r3, [pc, #152]	; (8007224 <gpio_port_clock_enable+0xb4>)
 800718a:	4298      	cmp	r0, r3
 800718c:	d024      	beq.n	80071d8 <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 800718e:	4b26      	ldr	r3, [pc, #152]	; (8007228 <gpio_port_clock_enable+0xb8>)
 8007190:	4298      	cmp	r0, r3
 8007192:	d027      	beq.n	80071e4 <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8007194:	4b25      	ldr	r3, [pc, #148]	; (800722c <gpio_port_clock_enable+0xbc>)
 8007196:	4298      	cmp	r0, r3
 8007198:	d02a      	beq.n	80071f0 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 800719a:	4b25      	ldr	r3, [pc, #148]	; (8007230 <gpio_port_clock_enable+0xc0>)
 800719c:	4298      	cmp	r0, r3
 800719e:	d033      	beq.n	8007208 <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 80071a0:	4b24      	ldr	r3, [pc, #144]	; (8007234 <gpio_port_clock_enable+0xc4>)
 80071a2:	4298      	cmp	r0, r3
 80071a4:	d02a      	beq.n	80071fc <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 80071a6:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 80071a8:	4a23      	ldr	r2, [pc, #140]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071aa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	6313      	str	r3, [r2, #48]	; 0x30
 80071b2:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 80071b4:	4a20      	ldr	r2, [pc, #128]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	6313      	str	r3, [r2, #48]	; 0x30
 80071be:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 80071c0:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071c2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071c4:	f043 0302 	orr.w	r3, r3, #2
 80071c8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ca:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 80071cc:	4a1a      	ldr	r2, [pc, #104]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071ce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071d0:	f043 0304 	orr.w	r3, r3, #4
 80071d4:	6313      	str	r3, [r2, #48]	; 0x30
 80071d6:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 80071d8:	4a17      	ldr	r2, [pc, #92]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071dc:	f043 0310 	orr.w	r3, r3, #16
 80071e0:	6313      	str	r3, [r2, #48]	; 0x30
 80071e2:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 80071e4:	4a14      	ldr	r2, [pc, #80]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071e6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071e8:	f043 0320 	orr.w	r3, r3, #32
 80071ec:	6313      	str	r3, [r2, #48]	; 0x30
 80071ee:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 80071f0:	4a11      	ldr	r2, [pc, #68]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80071f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071f8:	6313      	str	r3, [r2, #48]	; 0x30
 80071fa:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 80071fc:	4a0e      	ldr	r2, [pc, #56]	; (8007238 <gpio_port_clock_enable+0xc8>)
 80071fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007204:	6313      	str	r3, [r2, #48]	; 0x30
 8007206:	e7ce      	b.n	80071a6 <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8007208:	4a0b      	ldr	r2, [pc, #44]	; (8007238 <gpio_port_clock_enable+0xc8>)
 800720a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800720c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007210:	6313      	str	r3, [r2, #48]	; 0x30
 8007212:	4770      	bx	lr
 8007214:	40020000 	.word	0x40020000
 8007218:	40020400 	.word	0x40020400
 800721c:	40020800 	.word	0x40020800
 8007220:	40020c00 	.word	0x40020c00
 8007224:	40021000 	.word	0x40021000
 8007228:	40021400 	.word	0x40021400
 800722c:	40021800 	.word	0x40021800
 8007230:	40021c00 	.word	0x40021c00
 8007234:	40022000 	.word	0x40022000
 8007238:	40023800 	.word	0x40023800

0800723c <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 800723c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800723e:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 8007240:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8007242:	2a03      	cmp	r2, #3
	__IO uint32_t tmpreg = 0U;
 8007244:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8007246:	d81c      	bhi.n	8007282 <gpio_set_mode+0x46>
		port -> MODER &=~ (3U << (pin * 2));
 8007248:	6804      	ldr	r4, [r0, #0]
 800724a:	0049      	lsls	r1, r1, #1
 800724c:	2303      	movs	r3, #3
 800724e:	408b      	lsls	r3, r1
 8007250:	ea24 0403 	bic.w	r4, r4, r3
 8007254:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 8007256:	68c4      	ldr	r4, [r0, #12]
 8007258:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800725a:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 800725c:	2a02      	cmp	r2, #2
		tmpreg &=~ (3U << (pin * 2));
 800725e:	ea24 0303 	bic.w	r3, r4, r3
 8007262:	9301      	str	r3, [sp, #4]
		switch(mode){
 8007264:	d046      	beq.n	80072f4 <gpio_set_mode+0xb8>
 8007266:	2a03      	cmp	r2, #3
 8007268:	d105      	bne.n	8007276 <gpio_set_mode+0x3a>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 800726a:	9a01      	ldr	r2, [sp, #4]
 800726c:	2302      	movs	r3, #2
 800726e:	fa03 f101 	lsl.w	r1, r3, r1
 8007272:	4311      	orrs	r1, r2
 8007274:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 8007276:	9a01      	ldr	r2, [sp, #4]
 8007278:	68c3      	ldr	r3, [r0, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 800727e:	b003      	add	sp, #12
 8007280:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 8007282:	1f13      	subs	r3, r2, #4
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b05      	cmp	r3, #5
 8007288:	d82b      	bhi.n	80072e2 <gpio_set_mode+0xa6>
		port -> MODER &=~ (3U << (pin * 2));
 800728a:	6804      	ldr	r4, [r0, #0]
 800728c:	004d      	lsls	r5, r1, #1
 800728e:	f04f 0c03 	mov.w	ip, #3
 8007292:	fa0c fc05 	lsl.w	ip, ip, r5
 8007296:	ea24 040c 	bic.w	r4, r4, ip
 800729a:	6004      	str	r4, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 800729c:	6807      	ldr	r7, [r0, #0]
 800729e:	2401      	movs	r4, #1
 80072a0:	fa04 f605 	lsl.w	r6, r4, r5
 80072a4:	4337      	orrs	r7, r6
 80072a6:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	fa04 f101 	lsl.w	r1, r4, r1
		port -> MODER &=~ (3U << (pin * 2));
 80072ae:	ea6f 0e0c 	mvn.w	lr, ip
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80072b2:	6844      	ldr	r4, [r0, #4]
 80072b4:	d825      	bhi.n	8007302 <gpio_set_mode+0xc6>
 80072b6:	4321      	orrs	r1, r4
 80072b8:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 80072ba:	6883      	ldr	r3, [r0, #8]
 80072bc:	ea0e 0303 	and.w	r3, lr, r3
 80072c0:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80072c2:	6883      	ldr	r3, [r0, #8]
 80072c4:	ea4c 0303 	orr.w	r3, ip, r3
 80072c8:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 80072ca:	68c3      	ldr	r3, [r0, #12]
 80072cc:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 80072ce:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80072d0:	2a05      	cmp	r2, #5
		tmpreg &=~ (3U << (pin * 2));
 80072d2:	ea0e 0303 	and.w	r3, lr, r3
 80072d6:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80072d8:	d12f      	bne.n	800733a <gpio_set_mode+0xfe>
 80072da:	9b01      	ldr	r3, [sp, #4]
 80072dc:	431e      	orrs	r6, r3
 80072de:	9601      	str	r6, [sp, #4]
 80072e0:	e7c9      	b.n	8007276 <gpio_set_mode+0x3a>
		port -> MODER |= (3U << (pin * 2));
 80072e2:	6802      	ldr	r2, [r0, #0]
 80072e4:	2303      	movs	r3, #3
 80072e6:	0049      	lsls	r1, r1, #1
 80072e8:	fa03 f101 	lsl.w	r1, r3, r1
 80072ec:	4311      	orrs	r1, r2
 80072ee:	6001      	str	r1, [r0, #0]
}
 80072f0:	b003      	add	sp, #12
 80072f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmpreg |=  (1U << (pin * 2));
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	2301      	movs	r3, #1
 80072f8:	fa03 f101 	lsl.w	r1, r3, r1
 80072fc:	4311      	orrs	r1, r2
 80072fe:	9101      	str	r1, [sp, #4]
			break;
 8007300:	e7b9      	b.n	8007276 <gpio_set_mode+0x3a>
		else port -> OTYPER &=~ (1U << pin);
 8007302:	ea24 0101 	bic.w	r1, r4, r1
 8007306:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8007308:	6883      	ldr	r3, [r0, #8]
 800730a:	ea0e 0303 	and.w	r3, lr, r3
 800730e:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007310:	6883      	ldr	r3, [r0, #8]
 8007312:	ea4c 0303 	orr.w	r3, ip, r3
 8007316:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8007318:	68c3      	ldr	r3, [r0, #12]
 800731a:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800731c:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 800731e:	2a08      	cmp	r2, #8
		tmpreg &=~ (3U << (pin * 2));
 8007320:	ea0e 0303 	and.w	r3, lr, r3
 8007324:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007326:	d0d8      	beq.n	80072da <gpio_set_mode+0x9e>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 8007328:	2a09      	cmp	r2, #9
 800732a:	d1a4      	bne.n	8007276 <gpio_set_mode+0x3a>
 800732c:	9a01      	ldr	r2, [sp, #4]
 800732e:	2302      	movs	r3, #2
 8007330:	fa03 f505 	lsl.w	r5, r3, r5
 8007334:	4315      	orrs	r5, r2
 8007336:	9501      	str	r5, [sp, #4]
 8007338:	e79d      	b.n	8007276 <gpio_set_mode+0x3a>
 800733a:	2a06      	cmp	r2, #6
 800733c:	d0f6      	beq.n	800732c <gpio_set_mode+0xf0>
 800733e:	e79a      	b.n	8007276 <gpio_set_mode+0x3a>

08007340 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 8007340:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 8007344:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 8007346:	2303      	movs	r3, #3
 8007348:	6805      	ldr	r5, [r0, #0]
 800734a:	fa03 f30c 	lsl.w	r3, r3, ip
 800734e:	ea25 0503 	bic.w	r5, r5, r3
 8007352:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 8007354:	6805      	ldr	r5, [r0, #0]
 8007356:	2402      	movs	r4, #2
 8007358:	fa04 f40c 	lsl.w	r4, r4, ip
 800735c:	432c      	orrs	r4, r5
 800735e:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 8007360:	6844      	ldr	r4, [r0, #4]
 8007362:	f04f 0c01 	mov.w	ip, #1
 8007366:	fa0c fc01 	lsl.w	ip, ip, r1
 800736a:	ea24 040c 	bic.w	r4, r4, ip
 800736e:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 8007370:	6884      	ldr	r4, [r0, #8]
 8007372:	ea24 0403 	bic.w	r4, r4, r3
 8007376:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007378:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 800737a:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 800737c:	ea43 0304 	orr.w	r3, r3, r4
 8007380:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 8007382:	d80d      	bhi.n	80073a0 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 8007384:	6a03      	ldr	r3, [r0, #32]
 8007386:	0089      	lsls	r1, r1, #2
 8007388:	240f      	movs	r4, #15
 800738a:	408c      	lsls	r4, r1
 800738c:	ea23 0304 	bic.w	r3, r3, r4
 8007390:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 8007392:	6a03      	ldr	r3, [r0, #32]
 8007394:	fa02 f101 	lsl.w	r1, r2, r1
 8007398:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 800739a:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 800739c:	6201      	str	r1, [r0, #32]
}
 800739e:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 80073a0:	3908      	subs	r1, #8
 80073a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073a4:	0089      	lsls	r1, r1, #2
 80073a6:	240f      	movs	r4, #15
 80073a8:	408c      	lsls	r4, r1
 80073aa:	ea23 0304 	bic.w	r3, r3, r4
 80073ae:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80073b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80073b2:	408a      	lsls	r2, r1
 80073b4:	431a      	orrs	r2, r3
}
 80073b6:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80073b8:	6242      	str	r2, [r0, #36]	; 0x24
}
 80073ba:	4770      	bx	lr

080073bc <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80073bc:	2a04      	cmp	r2, #4
 80073be:	d00a      	beq.n	80073d6 <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80073c0:	2a07      	cmp	r2, #7
 80073c2:	d000      	beq.n	80073c6 <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 80073c4:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80073c6:	6843      	ldr	r3, [r0, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	fa02 f101 	lsl.w	r1, r2, r1
 80073ce:	ea23 0101 	bic.w	r1, r3, r1
 80073d2:	6041      	str	r1, [r0, #4]
}
 80073d4:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80073d6:	6842      	ldr	r2, [r0, #4]
 80073d8:	2301      	movs	r3, #1
 80073da:	fa03 f101 	lsl.w	r1, r3, r1
 80073de:	4311      	orrs	r1, r2
 80073e0:	6041      	str	r1, [r0, #4]
 80073e2:	4770      	bx	lr

080073e4 <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 80073e4:	68c3      	ldr	r3, [r0, #12]
 80073e6:	0049      	lsls	r1, r1, #1
 80073e8:	2203      	movs	r2, #3
 80073ea:	408a      	lsls	r2, r1
 80073ec:	ea23 0302 	bic.w	r3, r3, r2
 80073f0:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 80073f2:	68c2      	ldr	r2, [r0, #12]
 80073f4:	2302      	movs	r3, #2
 80073f6:	fa03 f101 	lsl.w	r1, r3, r1
 80073fa:	4311      	orrs	r1, r2
 80073fc:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 80073fe:	4770      	bx	lr

08007400 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 8007400:	6982      	ldr	r2, [r0, #24]
 8007402:	2301      	movs	r3, #1
 8007404:	fa03 f101 	lsl.w	r1, r3, r1
 8007408:	4311      	orrs	r1, r2
 800740a:	6181      	str	r1, [r0, #24]
}
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop

08007410 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 8007410:	6982      	ldr	r2, [r0, #24]
 8007412:	3110      	adds	r1, #16
 8007414:	2301      	movs	r3, #1
 8007416:	fa03 f101 	lsl.w	r1, r3, r1
 800741a:	4311      	orrs	r1, r2
 800741c:	6181      	str	r1, [r0, #24]
}
 800741e:	4770      	bx	lr

08007420 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8007420:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 8007422:	2301      	movs	r3, #1
 8007424:	6944      	ldr	r4, [r0, #20]
 8007426:	fa03 f201 	lsl.w	r2, r3, r1
 800742a:	4214      	tst	r4, r2
 800742c:	d008      	beq.n	8007440 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 800742e:	6982      	ldr	r2, [r0, #24]
}
 8007430:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 8007434:	3110      	adds	r1, #16
 8007436:	fa03 f101 	lsl.w	r1, r3, r1
 800743a:	4311      	orrs	r1, r2
 800743c:	6181      	str	r1, [r0, #24]
}
 800743e:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 8007440:	6983      	ldr	r3, [r0, #24]
}
 8007442:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 8007446:	431a      	orrs	r2, r3
 8007448:	6182      	str	r2, [r0, #24]
}
 800744a:	4770      	bx	lr

0800744c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 800744c:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 800744e:	480a      	ldr	r0, [pc, #40]	; (8007478 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 8007450:	4c0a      	ldr	r4, [pc, #40]	; (800747c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 8007452:	490b      	ldr	r1, [pc, #44]	; (8007480 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 8007454:	2200      	movs	r2, #0
 8007456:	2300      	movs	r3, #0
 8007458:	e9c4 2300 	strd	r2, r3, [r4]
 800745c:	e9c0 2300 	strd	r2, r3, [r0]
 8007460:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 8007464:	4b07      	ldr	r3, [pc, #28]	; (8007484 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 8007466:	60a3      	str	r3, [r4, #8]
 8007468:	4a07      	ldr	r2, [pc, #28]	; (8007488 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 800746a:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 800746e:	6082      	str	r2, [r0, #8]
 8007470:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007474:	608b      	str	r3, [r1, #8]
}
 8007476:	4770      	bx	lr
 8007478:	2000b5b8 	.word	0x2000b5b8
 800747c:	2000b5d8 	.word	0x2000b5d8
 8007480:	2000b5c8 	.word	0x2000b5c8
 8007484:	40005c00 	.word	0x40005c00
 8007488:	40005400 	.word	0x40005400

0800748c <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 800748c:	b530      	push	{r4, r5, lr}
	stm_ret_t ret;

	IWDG -> KR = IWDG_KEY_ENABLE;
 800748e:	4c0c      	ldr	r4, [pc, #48]	; (80074c0 <iwdg_init+0x34>)
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007490:	b083      	sub	sp, #12
	IWDG -> KR = IWDG_KEY_ENABLE;
 8007492:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8007496:	6023      	str	r3, [r4, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;

	IWDG -> PR = psc;
	IWDG -> RLR = arr-1;
 8007498:	3a01      	subs	r2, #1
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 800749a:	f245 5355 	movw	r3, #21845	; 0x5555

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 800749e:	2531      	movs	r5, #49	; 0x31
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 80074a0:	6023      	str	r3, [r4, #0]
	IWDG -> PR = psc;
 80074a2:	6061      	str	r1, [r4, #4]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80074a4:	2300      	movs	r3, #0
	IWDG -> RLR = arr-1;
 80074a6:	60a2      	str	r2, [r4, #8]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80074a8:	4906      	ldr	r1, [pc, #24]	; (80074c4 <iwdg_init+0x38>)
 80074aa:	9500      	str	r5, [sp, #0]
 80074ac:	2203      	movs	r2, #3
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 80074ae:	4605      	mov	r5, r0
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80074b0:	f002 fc8e 	bl	8009dd0 <wait_flag_in_register_timeout>

	IWDG -> KR = IWDG_KEY_RELOAD;
 80074b4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa

	return ret;
}
 80074b8:	4628      	mov	r0, r5
	IWDG -> KR = IWDG_KEY_RELOAD;
 80074ba:	6023      	str	r3, [r4, #0]
}
 80074bc:	b003      	add	sp, #12
 80074be:	bd30      	pop	{r4, r5, pc}
 80074c0:	40003000 	.word	0x40003000
 80074c4:	4000300c 	.word	0x4000300c

080074c8 <iwdg_disable_in_debugmode>:

void iwdg_disable_in_debugmode(void){
#if defined(STM32F1)
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP;
#elif defined(STM32F4)
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 80074c8:	4a02      	ldr	r2, [pc, #8]	; (80074d4 <iwdg_disable_in_debugmode+0xc>)
 80074ca:	6893      	ldr	r3, [r2, #8]
 80074cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80074d0:	6093      	str	r3, [r2, #8]
#endif /* STM32F4 */
}
 80074d2:	4770      	bx	lr
 80074d4:	e0042000 	.word	0xe0042000

080074d8 <iwdg_refresh>:

void iwdg_refresh(void){
	IWDG -> KR = IWDG_KEY_RELOAD;
 80074d8:	4b02      	ldr	r3, [pc, #8]	; (80074e4 <iwdg_refresh+0xc>)
 80074da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80074de:	601a      	str	r2, [r3, #0]
}
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40003000 	.word	0x40003000

080074e8 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80074e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074ec:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 80074ee:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80074f0:	4ab9      	ldr	r2, [pc, #740]	; (80077d8 <rcc_init+0x2f0>)
	stm_ret_t ret;
 80074f2:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 80074f4:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 80074f6:	2301      	movs	r3, #1
 80074f8:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80074fa:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 80074fc:	4eb7      	ldr	r6, [pc, #732]	; (80077dc <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80074fe:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8007500:	4604      	mov	r4, r0
	_conf = rcc_conf;
 8007502:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007504:	d412      	bmi.n	800752c <rcc_init+0x44>
 8007506:	6893      	ldr	r3, [r2, #8]
 8007508:	071f      	lsls	r7, r3, #28
 800750a:	d40c      	bmi.n	8007526 <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 800750c:	7b0b      	ldrb	r3, [r1, #12]
 800750e:	b1db      	cbz	r3, 8007548 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 8007510:	2b01      	cmp	r3, #1
 8007512:	d03b      	beq.n	800758c <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 8007514:	2255      	movs	r2, #85	; 0x55
 8007516:	2100      	movs	r1, #0
 8007518:	4620      	mov	r0, r4
 800751a:	f002 fc95 	bl	8009e48 <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 800751e:	4620      	mov	r0, r4
 8007520:	b006      	add	sp, #24
 8007522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007526:	6853      	ldr	r3, [r2, #4]
 8007528:	025d      	lsls	r5, r3, #9
 800752a:	d5ef      	bpl.n	800750c <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 800752c:	4baa      	ldr	r3, [pc, #680]	; (80077d8 <rcc_init+0x2f0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8007534:	d1ea      	bne.n	800750c <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 8007536:	4620      	mov	r0, r4
 8007538:	2234      	movs	r2, #52	; 0x34
 800753a:	4619      	mov	r1, r3
 800753c:	f002 fc84 	bl	8009e48 <set_return>
}
 8007540:	4620      	mov	r0, r4
 8007542:	b006      	add	sp, #24
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 8007548:	4fa3      	ldr	r7, [pc, #652]	; (80077d8 <rcc_init+0x2f0>)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f043 0301 	orr.w	r3, r3, #1
 8007550:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 8007552:	ad02      	add	r5, sp, #8
 8007554:	2364      	movs	r3, #100	; 0x64
 8007556:	9300      	str	r3, [sp, #0]
 8007558:	4639      	mov	r1, r7
 800755a:	4628      	mov	r0, r5
 800755c:	2301      	movs	r3, #1
 800755e:	2202      	movs	r2, #2
 8007560:	f002 fc36 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007564:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007568:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 800756c:	4620      	mov	r0, r4
 800756e:	f002 fc79 	bl	8009e64 <is_timeout>
 8007572:	2800      	cmp	r0, #0
 8007574:	d155      	bne.n	8007622 <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8007576:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007578:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 800757a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800757e:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	6891      	ldr	r1, [r2, #8]
 8007584:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007588:	603b      	str	r3, [r7, #0]
 800758a:	e016      	b.n	80075ba <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 800758c:	4992      	ldr	r1, [pc, #584]	; (80077d8 <rcc_init+0x2f0>)
 800758e:	680a      	ldr	r2, [r1, #0]
 8007590:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007594:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 8007596:	ad02      	add	r5, sp, #8
 8007598:	22c8      	movs	r2, #200	; 0xc8
 800759a:	9200      	str	r2, [sp, #0]
 800759c:	4628      	mov	r0, r5
 800759e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80075a2:	f002 fc15 	bl	8009dd0 <wait_flag_in_register_timeout>
 80075a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80075aa:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 80075ae:	4620      	mov	r0, r4
 80075b0:	f002 fc58 	bl	8009e64 <is_timeout>
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d17c      	bne.n	80076b2 <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 80075b8:	6832      	ldr	r2, [r6, #0]
 80075ba:	7b53      	ldrb	r3, [r2, #13]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d104      	bne.n	80075ca <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 80075c0:	4f85      	ldr	r7, [pc, #532]	; (80077d8 <rcc_init+0x2f0>)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f013 0308 	ands.w	r3, r3, #8
 80075c8:	d078      	beq.n	80076bc <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 80075ca:	6910      	ldr	r0, [r2, #16]
 80075cc:	f002 fca4 	bl	8009f18 <embedded_flash_calculate_latency>
 80075d0:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80075d2:	f002 fccd 	bl	8009f70 <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80075d6:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80075d8:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80075da:	d866      	bhi.n	80076aa <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 80075dc:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80077ec <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80075e0:	497f      	ldr	r1, [pc, #508]	; (80077e0 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 80075e2:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80075e6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 80075ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ee:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80075f2:	4628      	mov	r0, r5
 80075f4:	f8cd a000 	str.w	sl, [sp]
 80075f8:	2301      	movs	r3, #1
 80075fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075fe:	f002 fbe7 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007602:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007606:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 800760a:	4620      	mov	r0, r4
 800760c:	f002 fc2a 	bl	8009e64 <is_timeout>
 8007610:	b160      	cbz	r0, 800762c <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 8007612:	4620      	mov	r0, r4
 8007614:	2188      	movs	r1, #136	; 0x88
 8007616:	f002 fc1b 	bl	8009e50 <set_return_line>
}
 800761a:	4620      	mov	r0, r4
 800761c:	b006      	add	sp, #24
 800761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 8007622:	2141      	movs	r1, #65	; 0x41
 8007624:	4620      	mov	r0, r4
 8007626:	f002 fc13 	bl	8009e50 <set_return_line>
			return ret;
 800762a:	e778      	b.n	800751e <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 800762c:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8007630:	496b      	ldr	r1, [pc, #428]	; (80077e0 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 8007632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007636:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 800763a:	4628      	mov	r0, r5
 800763c:	f8cd a000 	str.w	sl, [sp]
 8007640:	2301      	movs	r3, #1
 8007642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007646:	f002 fbc3 	bl	8009dd0 <wait_flag_in_register_timeout>
 800764a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800764e:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007652:	4620      	mov	r0, r4
 8007654:	f002 fc06 	bl	8009e64 <is_timeout>
 8007658:	2800      	cmp	r0, #0
 800765a:	f040 8087 	bne.w	800776c <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 800765e:	6833      	ldr	r3, [r6, #0]
 8007660:	7b5a      	ldrb	r2, [r3, #13]
 8007662:	2a00      	cmp	r2, #0
 8007664:	d074      	beq.n	8007750 <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 8007666:	2a01      	cmp	r2, #1
 8007668:	f000 80a8 	beq.w	80077bc <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 800766c:	2a02      	cmp	r2, #2
 800766e:	f000 80bf 	beq.w	80077f0 <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007672:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80077d8 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007676:	495b      	ldr	r1, [pc, #364]	; (80077e4 <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007678:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800767c:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007680:	f241 3388 	movw	r3, #5000	; 0x1388
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4628      	mov	r0, r5
 8007688:	2301      	movs	r3, #1
 800768a:	f002 fba1 	bl	8009dd0 <wait_flag_in_register_timeout>
 800768e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007692:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007696:	4620      	mov	r0, r4
 8007698:	f002 fbe4 	bl	8009e64 <is_timeout>
 800769c:	2800      	cmp	r0, #0
 800769e:	d06a      	beq.n	8007776 <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 80076a0:	21ad      	movs	r1, #173	; 0xad
 80076a2:	4620      	mov	r0, r4
 80076a4:	f002 fbd4 	bl	8009e50 <set_return_line>
		return ret;
 80076a8:	e739      	b.n	800751e <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80076aa:	4638      	mov	r0, r7
 80076ac:	f002 fc2a 	bl	8009f04 <embedded_flash_set_latency>
 80076b0:	e794      	b.n	80075dc <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 80076b2:	2150      	movs	r1, #80	; 0x50
 80076b4:	4620      	mov	r0, r4
 80076b6:	f002 fbcb 	bl	8009e50 <set_return_line>
			return ret;
 80076ba:	e730      	b.n	800751e <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 80076bc:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80076be:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 80076c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80076c6:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80076c8:	4639      	mov	r1, r7
 80076ca:	4628      	mov	r0, r5
 80076cc:	f8cd 8000 	str.w	r8, [sp]
 80076d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076d4:	f002 fb7c 	bl	8009dd0 <wait_flag_in_register_timeout>
 80076d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076dc:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 80076e0:	4620      	mov	r0, r4
 80076e2:	f002 fbbf 	bl	8009e64 <is_timeout>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d13b      	bne.n	8007762 <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80076ee:	9b05      	ldr	r3, [sp, #20]
 80076f0:	4a3d      	ldr	r2, [pc, #244]	; (80077e8 <rcc_init+0x300>)
 80076f2:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80076f4:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80076f6:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 80076fc:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80076fe:	430b      	orrs	r3, r1
 8007700:	69d1      	ldr	r1, [r2, #28]
 8007702:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007706:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8007708:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 800770a:	0849      	lsrs	r1, r1, #1
 800770c:	3901      	subs	r1, #1
 800770e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007712:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007716:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800771a:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 800771c:	9b05      	ldr	r3, [sp, #20]
 800771e:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007726:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8007728:	4639      	mov	r1, r7
 800772a:	4628      	mov	r0, r5
 800772c:	f8cd 8000 	str.w	r8, [sp]
 8007730:	2301      	movs	r3, #1
 8007732:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007736:	f002 fb4b 	bl	8009dd0 <wait_flag_in_register_timeout>
 800773a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800773e:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8007742:	4620      	mov	r0, r4
 8007744:	f002 fb8e 	bl	8009e64 <is_timeout>
 8007748:	2800      	cmp	r0, #0
 800774a:	d15b      	bne.n	8007804 <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 800774c:	6832      	ldr	r2, [r6, #0]
 800774e:	e73c      	b.n	80075ca <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 8007750:	4b21      	ldr	r3, [pc, #132]	; (80077d8 <rcc_init+0x2f0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	0798      	lsls	r0, r3, #30
 8007756:	d48c      	bmi.n	8007672 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8007758:	2199      	movs	r1, #153	; 0x99
 800775a:	4620      	mov	r0, r4
 800775c:	f002 fb78 	bl	8009e50 <set_return_line>
			return ret;
 8007760:	e6dd      	b.n	800751e <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8007762:	2161      	movs	r1, #97	; 0x61
 8007764:	4620      	mov	r0, r4
 8007766:	f002 fb73 	bl	8009e50 <set_return_line>
				return ret;
 800776a:	e6d8      	b.n	800751e <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 800776c:	218f      	movs	r1, #143	; 0x8f
 800776e:	4620      	mov	r0, r4
 8007770:	f002 fb6e 	bl	8009e50 <set_return_line>
		return ret;
 8007774:	e6d3      	b.n	800751e <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 8007776:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800777a:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 800777c:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 800777e:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8007780:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8007784:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007788:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 800778a:	7d53      	ldrb	r3, [r2, #21]
 800778c:	7d11      	ldrb	r1, [r2, #20]
 800778e:	7d92      	ldrb	r2, [r2, #22]
 8007790:	3303      	adds	r3, #3
 8007792:	3107      	adds	r1, #7
 8007794:	029b      	lsls	r3, r3, #10
 8007796:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800779a:	9905      	ldr	r1, [sp, #20]
 800779c:	3203      	adds	r2, #3
 800779e:	430b      	orrs	r3, r1
 80077a0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80077a4:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 80077a6:	9b05      	ldr	r3, [sp, #20]
 80077a8:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 80077ac:	f7f9 fd0e 	bl	80011cc <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80077b0:	4547      	cmp	r7, r8
 80077b2:	d30d      	bcc.n	80077d0 <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 80077b4:	200f      	movs	r0, #15
 80077b6:	f000 fee1 	bl	800857c <systick_init>
	return ret;
 80077ba:	e6b0      	b.n	800751e <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 80077bc:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <rcc_init+0x2f0>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	0399      	lsls	r1, r3, #14
 80077c2:	f53f af56 	bmi.w	8007672 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80077c6:	219f      	movs	r1, #159	; 0x9f
 80077c8:	4620      	mov	r0, r4
 80077ca:	f002 fb41 	bl	8009e50 <set_return_line>
			return ret;
 80077ce:	e6a6      	b.n	800751e <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80077d0:	4638      	mov	r0, r7
 80077d2:	f002 fb97 	bl	8009f04 <embedded_flash_set_latency>
 80077d6:	e7ed      	b.n	80077b4 <rcc_init+0x2cc>
 80077d8:	40023800 	.word	0x40023800
 80077dc:	2000b5e8 	.word	0x2000b5e8
 80077e0:	40007004 	.word	0x40007004
 80077e4:	40023808 	.word	0x40023808
 80077e8:	f0bc8000 	.word	0xf0bc8000
 80077ec:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <rcc_init+0x328>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	019b      	lsls	r3, r3, #6
 80077f6:	f53f af3c 	bmi.w	8007672 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80077fa:	21a5      	movs	r1, #165	; 0xa5
 80077fc:	4620      	mov	r0, r4
 80077fe:	f002 fb27 	bl	8009e50 <set_return_line>
			return ret;
 8007802:	e68c      	b.n	800751e <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8007804:	2172      	movs	r1, #114	; 0x72
 8007806:	4620      	mov	r0, r4
 8007808:	f002 fb22 	bl	8009e50 <set_return_line>
				return ret;
 800780c:	e687      	b.n	800751e <rcc_init+0x36>
 800780e:	bf00      	nop
 8007810:	40023800 	.word	0x40023800

08007814 <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 8007814:	2805      	cmp	r0, #5
 8007816:	d819      	bhi.n	800784c <rcc_get_bus_frequency+0x38>
 8007818:	e8df f000 	tbb	[pc, r0]
 800781c:	2f251a0e 	.word	0x2f251a0e
 8007820:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 8007822:	4b2a      	ldr	r3, [pc, #168]	; (80078cc <rcc_get_bus_frequency+0xb8>)
 8007824:	492a      	ldr	r1, [pc, #168]	; (80078d0 <rcc_get_bus_frequency+0xbc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a2a      	ldr	r2, [pc, #168]	; (80078d4 <rcc_get_bus_frequency+0xc0>)
 800782a:	6808      	ldr	r0, [r1, #0]
 800782c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007830:	5cd3      	ldrb	r3, [r2, r3]
 8007832:	40d8      	lsrs	r0, r3
 8007834:	0040      	lsls	r0, r0, #1
 8007836:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007838:	4b27      	ldr	r3, [pc, #156]	; (80078d8 <rcc_get_bus_frequency+0xc4>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	7b1a      	ldrb	r2, [r3, #12]
 800783e:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8007840:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007842:	d02f      	beq.n	80078a4 <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8007844:	2a00      	cmp	r2, #0
 8007846:	d03f      	beq.n	80078c8 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8007848:	2a02      	cmp	r2, #2
 800784a:	d032      	beq.n	80078b2 <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 800784c:	2000      	movs	r0, #0
}
 800784e:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8007850:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <rcc_get_bus_frequency+0xc4>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	7d18      	ldrb	r0, [r3, #20]
 8007856:	2807      	cmp	r0, #7
 8007858:	d928      	bls.n	80078ac <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 800785a:	4a1d      	ldr	r2, [pc, #116]	; (80078d0 <rcc_get_bus_frequency+0xbc>)
 800785c:	1f83      	subs	r3, r0, #6
 800785e:	6810      	ldr	r0, [r2, #0]
 8007860:	fbb0 f0f3 	udiv	r0, r0, r3
 8007864:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007866:	4b19      	ldr	r3, [pc, #100]	; (80078cc <rcc_get_bus_frequency+0xb8>)
 8007868:	4919      	ldr	r1, [pc, #100]	; (80078d0 <rcc_get_bus_frequency+0xbc>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	4a19      	ldr	r2, [pc, #100]	; (80078d4 <rcc_get_bus_frequency+0xc0>)
 800786e:	6808      	ldr	r0, [r1, #0]
 8007870:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007874:	5cd3      	ldrb	r3, [r2, r3]
 8007876:	40d8      	lsrs	r0, r3
 8007878:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800787a:	4b14      	ldr	r3, [pc, #80]	; (80078cc <rcc_get_bus_frequency+0xb8>)
 800787c:	4914      	ldr	r1, [pc, #80]	; (80078d0 <rcc_get_bus_frequency+0xbc>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	4a14      	ldr	r2, [pc, #80]	; (80078d4 <rcc_get_bus_frequency+0xc0>)
 8007882:	6808      	ldr	r0, [r1, #0]
 8007884:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007888:	5cd3      	ldrb	r3, [r2, r3]
 800788a:	40d8      	lsrs	r0, r3
 800788c:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 800788e:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <rcc_get_bus_frequency+0xb8>)
 8007890:	490f      	ldr	r1, [pc, #60]	; (80078d0 <rcc_get_bus_frequency+0xbc>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	4a0f      	ldr	r2, [pc, #60]	; (80078d4 <rcc_get_bus_frequency+0xc0>)
 8007896:	6808      	ldr	r0, [r1, #0]
 8007898:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800789c:	5cd3      	ldrb	r3, [r2, r3]
 800789e:	40d8      	lsrs	r0, r3
 80078a0:	0040      	lsls	r0, r0, #1
 80078a2:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 80078a4:	2a01      	cmp	r2, #1
 80078a6:	d1cf      	bne.n	8007848 <rcc_get_bus_frequency+0x34>
 80078a8:	480c      	ldr	r0, [pc, #48]	; (80078dc <rcc_get_bus_frequency+0xc8>)
 80078aa:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 80078ac:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <rcc_get_bus_frequency+0xbc>)
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	6999      	ldr	r1, [r3, #24]
 80078b6:	4809      	ldr	r0, [pc, #36]	; (80078dc <rcc_get_bus_frequency+0xc8>)
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	fbb0 f0f1 	udiv	r0, r0, r1
 80078be:	fb02 f000 	mul.w	r0, r2, r0
 80078c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80078c6:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 80078c8:	4805      	ldr	r0, [pc, #20]	; (80078e0 <rcc_get_bus_frequency+0xcc>)
 80078ca:	4770      	bx	lr
 80078cc:	40023800 	.word	0x40023800
 80078d0:	20000000 	.word	0x20000000
 80078d4:	0800dd64 	.word	0x0800dd64
 80078d8:	2000b5e8 	.word	0x2000b5e8
 80078dc:	017d7840 	.word	0x017d7840
 80078e0:	00f42400 	.word	0x00f42400

080078e4 <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80078e4:	4907      	ldr	r1, [pc, #28]	; (8007904 <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 80078e6:	4a08      	ldr	r2, [pc, #32]	; (8007908 <rng_init+0x24>)
void rng_init(void){
 80078e8:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80078ea:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80078ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f0:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	f043 0304 	orr.w	r3, r3, #4
 80078f8:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 80078fa:	f002 fb85 	bl	800a008 <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 80078fe:	4b03      	ldr	r3, [pc, #12]	; (800790c <rng_init+0x28>)
 8007900:	6018      	str	r0, [r3, #0]
}
 8007902:	bd08      	pop	{r3, pc}
 8007904:	40023800 	.word	0x40023800
 8007908:	50060800 	.word	0x50060800
 800790c:	2000b5ec 	.word	0x2000b5ec

08007910 <rng_set_seed>:
	_seed = seed;
 8007910:	4b01      	ldr	r3, [pc, #4]	; (8007918 <rng_set_seed+0x8>)
 8007912:	6018      	str	r0, [r3, #0]
}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	2000b5ec 	.word	0x2000b5ec

0800791c <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 800791c:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 800791e:	4b1b      	ldr	r3, [pc, #108]	; (800798c <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007920:	4c1b      	ldr	r4, [pc, #108]	; (8007990 <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 8007922:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 8007924:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 8007926:	2602      	movs	r6, #2
 8007928:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 800792a:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 800792c:	f000 fe48 	bl	80085c0 <get_tick>
 8007930:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 8007932:	9505      	str	r5, [sp, #20]
 8007934:	e005      	b.n	8007942 <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 8007936:	f000 fe43 	bl	80085c0 <get_tick>
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	1ac0      	subs	r0, r0, r3
 800793e:	2802      	cmp	r0, #2
 8007940:	d802      	bhi.n	8007948 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	07da      	lsls	r2, r3, #31
 8007946:	d5f6      	bpl.n	8007936 <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	9305      	str	r3, [sp, #20]
	return random_number;
 800794c:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 800794e:	9b01      	ldr	r3, [sp, #4]
 8007950:	4053      	eors	r3, r2
 8007952:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 8007954:	f000 fe34 	bl	80085c0 <get_tick>
 8007958:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 800795a:	9503      	str	r5, [sp, #12]
 800795c:	e005      	b.n	800796a <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 800795e:	f000 fe2f 	bl	80085c0 <get_tick>
 8007962:	9b02      	ldr	r3, [sp, #8]
 8007964:	1ac0      	subs	r0, r0, r3
 8007966:	2802      	cmp	r0, #2
 8007968:	d802      	bhi.n	8007970 <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 800796a:	6863      	ldr	r3, [r4, #4]
 800796c:	07db      	lsls	r3, r3, #31
 800796e:	d5f6      	bpl.n	800795e <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 8007970:	68a3      	ldr	r3, [r4, #8]
 8007972:	9303      	str	r3, [sp, #12]
	return random_number;
 8007974:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 8007976:	9b01      	ldr	r3, [sp, #4]
 8007978:	4053      	eors	r3, r2
 800797a:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 800797c:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 800797e:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 8007980:	d102      	bne.n	8007988 <rng_generate_random_number+0x6c>
	}
	return rand;
 8007982:	9801      	ldr	r0, [sp, #4]
}
 8007984:	b006      	add	sp, #24
 8007986:	bd70      	pop	{r4, r5, r6, pc}
 8007988:	2601      	movs	r6, #1
 800798a:	e7cf      	b.n	800792c <rng_generate_random_number+0x10>
 800798c:	2000b5ec 	.word	0x2000b5ec
 8007990:	50060800 	.word	0x50060800

08007994 <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	460c      	mov	r4, r1
 8007998:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 800799a:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 800799c:	68cb      	ldr	r3, [r1, #12]
 800799e:	499e      	ldr	r1, [pc, #632]	; (8007c18 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 80079a0:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 80079a2:	2001      	movs	r0, #1
 80079a4:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 80079a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80079a8:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80079aa:	428b      	cmp	r3, r1
	stm_ret_t ret;
 80079ac:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 80079b0:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 80079b2:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80079b4:	f000 80cd 	beq.w	8007b52 <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80079b8:	4998      	ldr	r1, [pc, #608]	; (8007c1c <_ZN3spi4initEP12spi_config_t+0x288>)
 80079ba:	428b      	cmp	r3, r1
 80079bc:	d015      	beq.n	80079ea <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80079be:	4998      	ldr	r1, [pc, #608]	; (8007c20 <_ZN3spi4initEP12spi_config_t+0x28c>)
 80079c0:	428b      	cmp	r3, r1
 80079c2:	f000 810b 	beq.w	8007bdc <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 80079c6:	4997      	ldr	r1, [pc, #604]	; (8007c24 <_ZN3spi4initEP12spi_config_t+0x290>)
 80079c8:	428b      	cmp	r3, r1
 80079ca:	f000 8112 	beq.w	8007bf2 <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 80079ce:	4996      	ldr	r1, [pc, #600]	; (8007c28 <_ZN3spi4initEP12spi_config_t+0x294>)
 80079d0:	428b      	cmp	r3, r1
 80079d2:	f000 80d5 	beq.w	8007b80 <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 80079d6:	4995      	ldr	r1, [pc, #596]	; (8007c2c <_ZN3spi4initEP12spi_config_t+0x298>)
 80079d8:	428b      	cmp	r3, r1
 80079da:	d10c      	bne.n	80079f6 <_ZN3spi4initEP12spi_config_t+0x62>
 80079dc:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 80079e0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80079e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079e6:	644b      	str	r3, [r1, #68]	; 0x44
 80079e8:	e005      	b.n	80079f6 <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80079ea:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80079ee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079f4:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 80079f6:	6910      	ldr	r0, [r2, #16]
 80079f8:	f7ff fbba 	bl	8007170 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 80079fc:	68a3      	ldr	r3, [r4, #8]
 80079fe:	2205      	movs	r2, #5
 8007a00:	8a99      	ldrh	r1, [r3, #20]
 8007a02:	6918      	ldr	r0, [r3, #16]
 8007a04:	f7ff fc9c 	bl	8007340 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	2207      	movs	r2, #7
 8007a0c:	8a99      	ldrh	r1, [r3, #20]
 8007a0e:	6918      	ldr	r0, [r3, #16]
 8007a10:	f7ff fcd4 	bl	80073bc <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 8007a14:	68a2      	ldr	r2, [r4, #8]
 8007a16:	7813      	ldrb	r3, [r2, #0]
 8007a18:	f013 0f0d 	tst.w	r3, #13
 8007a1c:	f040 8087 	bne.w	8007b2e <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007a20:	075b      	lsls	r3, r3, #29
 8007a22:	d15f      	bne.n	8007ae4 <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007a24:	7b10      	ldrb	r0, [r2, #12]
 8007a26:	2801      	cmp	r0, #1
 8007a28:	d06f      	beq.n	8007b0a <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 8007a2a:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007a2c:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007a32:	7991      	ldrb	r1, [r2, #6]
 8007a34:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8007a38:	681e      	ldr	r6, [r3, #0]
 8007a3a:	4331      	orrs	r1, r6
 8007a3c:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 8007a3e:	7911      	ldrb	r1, [r2, #4]
 8007a40:	78d6      	ldrb	r6, [r2, #3]
 8007a42:	01c9      	lsls	r1, r1, #7
 8007a44:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8007a48:	681e      	ldr	r6, [r3, #0]
 8007a4a:	4331      	orrs	r1, r6
 8007a4c:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 8007a4e:	7811      	ldrb	r1, [r2, #0]
 8007a50:	f011 0703 	ands.w	r7, r1, #3
 8007a54:	d003      	beq.n	8007a5e <_ZN3spi4initEP12spi_config_t+0xca>
 8007a56:	681e      	ldr	r6, [r3, #0]
 8007a58:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 8007a5c:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 8007a5e:	f011 0f0a 	tst.w	r1, #10
 8007a62:	d003      	beq.n	8007a6c <_ZN3spi4initEP12spi_config_t+0xd8>
 8007a64:	6819      	ldr	r1, [r3, #0]
 8007a66:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007a6a:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007a6c:	bb78      	cbnz	r0, 8007ace <_ZN3spi4initEP12spi_config_t+0x13a>
 8007a6e:	6819      	ldr	r1, [r3, #0]
 8007a70:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007a74:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 8007a76:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 8007a78:	7851      	ldrb	r1, [r2, #1]
 8007a7a:	f011 0f05 	tst.w	r1, #5
 8007a7e:	d024      	beq.n	8007aca <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007a80:	4965      	ldr	r1, [pc, #404]	; (8007c18 <_ZN3spi4initEP12spi_config_t+0x284>)
 8007a82:	428b      	cmp	r3, r1
 8007a84:	f000 8083 	beq.w	8007b8e <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007a88:	4964      	ldr	r1, [pc, #400]	; (8007c1c <_ZN3spi4initEP12spi_config_t+0x288>)
 8007a8a:	428b      	cmp	r3, r1
 8007a8c:	f000 80ad 	beq.w	8007bea <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007a90:	4963      	ldr	r1, [pc, #396]	; (8007c20 <_ZN3spi4initEP12spi_config_t+0x28c>)
 8007a92:	428b      	cmp	r3, r1
 8007a94:	d064      	beq.n	8007b60 <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007a96:	4963      	ldr	r1, [pc, #396]	; (8007c24 <_ZN3spi4initEP12spi_config_t+0x290>)
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	f000 80b1 	beq.w	8007c00 <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007a9e:	4962      	ldr	r1, [pc, #392]	; (8007c28 <_ZN3spi4initEP12spi_config_t+0x294>)
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	f000 80b1 	beq.w	8007c08 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007aa6:	4961      	ldr	r1, [pc, #388]	; (8007c2c <_ZN3spi4initEP12spi_config_t+0x298>)
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	f000 80b1 	beq.w	8007c10 <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007aae:	6892      	ldr	r2, [r2, #8]
 8007ab0:	2a03      	cmp	r2, #3
 8007ab2:	d972      	bls.n	8007b9a <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8007ab4:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	da57      	bge.n	8007b6c <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007abc:	495c      	ldr	r1, [pc, #368]	; (8007c30 <_ZN3spi4initEP12spi_config_t+0x29c>)
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	0112      	lsls	r2, r2, #4
 8007ac4:	4419      	add	r1, r3
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 8007aca:	4628      	mov	r0, r5
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 8007ace:	2100      	movs	r1, #0
 8007ad0:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 8007ad2:	2f00      	cmp	r7, #0
 8007ad4:	d0d0      	beq.n	8007a78 <_ZN3spi4initEP12spi_config_t+0xe4>
 8007ad6:	2801      	cmp	r0, #1
 8007ad8:	d1ce      	bne.n	8007a78 <_ZN3spi4initEP12spi_config_t+0xe4>
 8007ada:	6859      	ldr	r1, [r3, #4]
 8007adc:	f041 0104 	orr.w	r1, r1, #4
 8007ae0:	6059      	str	r1, [r3, #4]
 8007ae2:	e7c9      	b.n	8007a78 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 8007ae4:	6a10      	ldr	r0, [r2, #32]
 8007ae6:	f7ff fb43 	bl	8007170 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	2205      	movs	r2, #5
 8007aee:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007af0:	6a18      	ldr	r0, [r3, #32]
 8007af2:	f7ff fc25 	bl	8007340 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	2207      	movs	r2, #7
 8007afa:	6a18      	ldr	r0, [r3, #32]
 8007afc:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007afe:	f7ff fc5d 	bl	80073bc <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007b02:	68a2      	ldr	r2, [r4, #8]
 8007b04:	7b10      	ldrb	r0, [r2, #12]
 8007b06:	2801      	cmp	r0, #1
 8007b08:	d18f      	bne.n	8007a2a <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 8007b0a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8007b0c:	f7ff fb30 	bl	8007170 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8007b10:	68a3      	ldr	r3, [r4, #8]
 8007b12:	2205      	movs	r2, #5
 8007b14:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007b16:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007b18:	f7ff fc12 	bl	8007340 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	2207      	movs	r2, #7
 8007b20:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007b22:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007b24:	f7ff fc4a 	bl	80073bc <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007b28:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007b2a:	7b10      	ldrb	r0, [r2, #12]
 8007b2c:	e77d      	b.n	8007a2a <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 8007b2e:	6990      	ldr	r0, [r2, #24]
 8007b30:	f7ff fb1e 	bl	8007170 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8007b34:	68a3      	ldr	r3, [r4, #8]
 8007b36:	2205      	movs	r2, #5
 8007b38:	8b99      	ldrh	r1, [r3, #28]
 8007b3a:	6998      	ldr	r0, [r3, #24]
 8007b3c:	f7ff fc00 	bl	8007340 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 8007b40:	68a3      	ldr	r3, [r4, #8]
 8007b42:	2207      	movs	r2, #7
 8007b44:	8b99      	ldrh	r1, [r3, #28]
 8007b46:	6998      	ldr	r0, [r3, #24]
 8007b48:	f7ff fc38 	bl	80073bc <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007b4c:	68a2      	ldr	r2, [r4, #8]
 8007b4e:	7813      	ldrb	r3, [r2, #0]
 8007b50:	e766      	b.n	8007a20 <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007b52:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8007b56:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b5c:	644b      	str	r3, [r1, #68]	; 0x44
 8007b5e:	e74a      	b.n	80079f6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007b60:	2333      	movs	r3, #51	; 0x33
 8007b62:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b66:	6892      	ldr	r2, [r2, #8]
 8007b68:	2a03      	cmp	r2, #3
 8007b6a:	d916      	bls.n	8007b9a <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b6c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007b70:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8007b74:	0112      	lsls	r2, r2, #4
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b7c:	4628      	mov	r0, r5
 8007b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8007b80:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8007b84:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b8a:	644b      	str	r3, [r1, #68]	; 0x44
 8007b8c:	e733      	b.n	80079f6 <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b8e:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007b90:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b92:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007b94:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b98:	d8e8      	bhi.n	8007b6c <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	22b0      	movs	r2, #176	; 0xb0
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	f002 f952 	bl	8009e48 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8007ba4:	4b23      	ldr	r3, [pc, #140]	; (8007c34 <_ZN3spi4initEP12spi_config_t+0x2a0>)
 8007ba6:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 8007ba8:	4924      	ldr	r1, [pc, #144]	; (8007c3c <_ZN3spi4initEP12spi_config_t+0x2a8>)
 8007baa:	4825      	ldr	r0, [pc, #148]	; (8007c40 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007bac:	f002 f818 	bl	8009be0 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8007bb0:	4924      	ldr	r1, [pc, #144]	; (8007c44 <_ZN3spi4initEP12spi_config_t+0x2b0>)
 8007bb2:	4823      	ldr	r0, [pc, #140]	; (8007c40 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007bb4:	2205      	movs	r2, #5
 8007bb6:	f001 ff97 	bl	8009ae8 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8007bba:	f241 3088 	movw	r0, #5000	; 0x1388
 8007bbe:	f000 fccf 	bl	8008560 <systick_delay_ms>
 8007bc2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007bc6:	4920      	ldr	r1, [pc, #128]	; (8007c48 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 8007bc8:	4b20      	ldr	r3, [pc, #128]	; (8007c4c <_ZN3spi4initEP12spi_config_t+0x2b8>)
 8007bca:	68ca      	ldr	r2, [r1, #12]
 8007bcc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007bd0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007bd2:	60cb      	str	r3, [r1, #12]
 8007bd4:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007bd8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007bda:	e7fd      	b.n	8007bd8 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8007bdc:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8007be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be6:	640b      	str	r3, [r1, #64]	; 0x40
 8007be8:	e705      	b.n	80079f6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007bea:	2324      	movs	r3, #36	; 0x24
 8007bec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007bf0:	e7b9      	b.n	8007b66 <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8007bf2:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 8007bf6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007bf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007bfc:	644b      	str	r3, [r1, #68]	; 0x44
 8007bfe:	e6fa      	b.n	80079f6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007c00:	2354      	movs	r3, #84	; 0x54
 8007c02:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007c06:	e7ae      	b.n	8007b66 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007c08:	2355      	movs	r3, #85	; 0x55
 8007c0a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007c0e:	e7aa      	b.n	8007b66 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007c10:	2356      	movs	r3, #86	; 0x56
 8007c12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007c16:	e7a6      	b.n	8007b66 <_ZN3spi4initEP12spi_config_t+0x1d2>
 8007c18:	40013000 	.word	0x40013000
 8007c1c:	40003800 	.word	0x40003800
 8007c20:	40003c00 	.word	0x40003c00
 8007c24:	40013400 	.word	0x40013400
 8007c28:	40015000 	.word	0x40015000
 8007c2c:	40015400 	.word	0x40015400
 8007c30:	e000ecfc 	.word	0xe000ecfc
 8007c34:	0800e858 	.word	0x0800e858
 8007c38:	0800e860 	.word	0x0800e860
 8007c3c:	0800e7f0 	.word	0x0800e7f0
 8007c40:	0800e888 	.word	0x0800e888
 8007c44:	0800e83c 	.word	0x0800e83c
 8007c48:	e000ed00 	.word	0xe000ed00
 8007c4c:	05fa0004 	.word	0x05fa0004

08007c50 <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007c56:	2101      	movs	r1, #1
 8007c58:	7001      	strb	r1, [r0, #0]
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 8007c5e:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007c60:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 8007c62:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007c64:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007c66:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007c68:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007c6a:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007c6c:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007c6e:	d463      	bmi.n	8007d38 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007c70:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007c74:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007c76:	d007      	beq.n	8007c88 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007c78:	680a      	ldr	r2, [r1, #0]
 8007c7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c7e:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 8007c80:	680a      	ldr	r2, [r1, #0]
 8007c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c86:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007c88:	680a      	ldr	r2, [r1, #0]
 8007c8a:	0652      	lsls	r2, r2, #25
 8007c8c:	d54f      	bpl.n	8007d2e <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 8007c8e:	ae02      	add	r6, sp, #8
 8007c90:	b36b      	cbz	r3, 8007cee <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007c92:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007c96:	e006      	b.n	8007ca6 <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007c98:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 8007c9c:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007c9e:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007ca0:	61a0      	str	r0, [r4, #24]
		txcount++;
 8007ca2:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007ca4:	d923      	bls.n	8007cee <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007ca6:	3108      	adds	r1, #8
 8007ca8:	4630      	mov	r0, r6
 8007caa:	2301      	movs	r3, #1
 8007cac:	2202      	movs	r2, #2
 8007cae:	f8cd 8000 	str.w	r8, [sp]
 8007cb2:	f002 f88d 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007cb6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007cba:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f002 f8c8 	bl	8009e54 <is_oke>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d047      	beq.n	8007d58 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007cc8:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007cca:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007ccc:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007cce:	68e1      	ldr	r1, [r4, #12]
 8007cd0:	681f      	ldr	r7, [r3, #0]
 8007cd2:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007cd4:	1c58      	adds	r0, r3, #1
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d0de      	beq.n	8007c98 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 8007cda:	2a01      	cmp	r2, #1
 8007cdc:	bf04      	itt	eq
 8007cde:	3302      	addeq	r3, #2
 8007ce0:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 8007ce2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 8007ce6:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007ce8:	429a      	cmp	r2, r3
		txcount++;
 8007cea:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007cec:	d8db      	bhi.n	8007ca6 <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007cee:	2364      	movs	r3, #100	; 0x64
 8007cf0:	3108      	adds	r1, #8
 8007cf2:	9300      	str	r3, [sp, #0]
 8007cf4:	4630      	mov	r0, r6
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2280      	movs	r2, #128	; 0x80
 8007cfa:	f002 f869 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007cfe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d02:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007d06:	4628      	mov	r0, r5
 8007d08:	f002 f8a4 	bl	8009e54 <is_oke>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d032      	beq.n	8007d76 <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f013 0f0a 	tst.w	r3, #10
 8007d18:	d105      	bne.n	8007d26 <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 8007d1a:	68e3      	ldr	r3, [r4, #12]
 8007d1c:	68da      	ldr	r2, [r3, #12]
 8007d1e:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007d24:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 8007d26:	4628      	mov	r0, r5
 8007d28:	b006      	add	sp, #24
 8007d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007d2e:	680a      	ldr	r2, [r1, #0]
 8007d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d34:	600a      	str	r2, [r1, #0]
 8007d36:	e7aa      	b.n	8007c8e <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 8007d38:	4b16      	ldr	r3, [pc, #88]	; (8007d94 <_ZN3spi8transmitEmm+0x144>)
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <_ZN3spi8transmitEmm+0x148>)
 8007d3c:	4917      	ldr	r1, [pc, #92]	; (8007d9c <_ZN3spi8transmitEmm+0x14c>)
 8007d3e:	4818      	ldr	r0, [pc, #96]	; (8007da0 <_ZN3spi8transmitEmm+0x150>)
 8007d40:	f001 ff4e 	bl	8009be0 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007d44:	4628      	mov	r0, r5
 8007d46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007d4a:	2103      	movs	r1, #3
 8007d4c:	f002 f87c 	bl	8009e48 <set_return>
}
 8007d50:	4628      	mov	r0, r5
 8007d52:	b006      	add	sp, #24
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007d58:	4b0e      	ldr	r3, [pc, #56]	; (8007d94 <_ZN3spi8transmitEmm+0x144>)
 8007d5a:	4a0f      	ldr	r2, [pc, #60]	; (8007d98 <_ZN3spi8transmitEmm+0x148>)
 8007d5c:	4911      	ldr	r1, [pc, #68]	; (8007da4 <_ZN3spi8transmitEmm+0x154>)
 8007d5e:	4810      	ldr	r0, [pc, #64]	; (8007da0 <_ZN3spi8transmitEmm+0x150>)
 8007d60:	f001 ff3e 	bl	8009be0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007d64:	4628      	mov	r0, r5
 8007d66:	f240 1123 	movw	r1, #291	; 0x123
 8007d6a:	f002 f871 	bl	8009e50 <set_return_line>
}
 8007d6e:	4628      	mov	r0, r5
 8007d70:	b006      	add	sp, #24
 8007d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <_ZN3spi8transmitEmm+0x144>)
 8007d78:	4a07      	ldr	r2, [pc, #28]	; (8007d98 <_ZN3spi8transmitEmm+0x148>)
 8007d7a:	490a      	ldr	r1, [pc, #40]	; (8007da4 <_ZN3spi8transmitEmm+0x154>)
 8007d7c:	4808      	ldr	r0, [pc, #32]	; (8007da0 <_ZN3spi8transmitEmm+0x150>)
 8007d7e:	f001 ff2f 	bl	8009be0 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007d82:	4628      	mov	r0, r5
 8007d84:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007d88:	f002 f862 	bl	8009e50 <set_return_line>
}
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	b006      	add	sp, #24
 8007d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d94:	0800e88c 	.word	0x0800e88c
 8007d98:	0800e860 	.word	0x0800e860
 8007d9c:	0800e898 	.word	0x0800e898
 8007da0:	0800e888 	.word	0x0800e888
 8007da4:	0800e8dc 	.word	0x0800e8dc

08007da8 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 8007dac:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007dae:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007db0:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007db2:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007db4:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007db6:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007db8:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007dba:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 8007dbc:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 8007dbe:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 8007dc0:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007dc2:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 8007dc6:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 8007dca:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 8007dcc:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 8007dce:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007dd0:	d158      	bne.n	8007e84 <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	68c9      	ldr	r1, [r1, #12]
 8007dd6:	680b      	ldr	r3, [r1, #0]
 8007dd8:	065b      	lsls	r3, r3, #25
 8007dda:	d54e      	bpl.n	8007e7a <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 8007ddc:	ae02      	add	r6, sp, #8
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d060      	beq.n	8007ea4 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007de2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007de6:	e00e      	b.n	8007e06 <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 8007de8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 8007dec:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 8007dee:	3301      	adds	r3, #1
 8007df0:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 8007df4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 8007df8:	6a23      	ldr	r3, [r4, #32]
 8007dfa:	3301      	adds	r3, #1
		rxcount++;
 8007dfc:	3201      	adds	r2, #1
	while(txcount < txlen){
 8007dfe:	4298      	cmp	r0, r3
		txcount++;
 8007e00:	6223      	str	r3, [r4, #32]
		rxcount++;
 8007e02:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 8007e04:	d94e      	bls.n	8007ea4 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007e06:	2301      	movs	r3, #1
 8007e08:	2202      	movs	r2, #2
 8007e0a:	3108      	adds	r1, #8
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	f8cd 8000 	str.w	r8, [sp]
 8007e12:	f001 ffdd 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007e16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007e1a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f002 f818 	bl	8009e54 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007e24:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 8007e26:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	d055      	beq.n	8007edc <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 8007e30:	69a7      	ldr	r7, [r4, #24]
 8007e32:	68e1      	ldr	r1, [r4, #12]
 8007e34:	f8d7 c000 	ldr.w	ip, [r7]
 8007e38:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007e3c:	3108      	adds	r1, #8
 8007e3e:	f8cd 8000 	str.w	r8, [sp]
 8007e42:	f001 ffc5 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007e46:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007e4a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f002 f800 	bl	8009e54 <is_oke>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d050      	beq.n	8007efa <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007e58:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007e5c:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007e5e:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 8007e60:	68c8      	ldr	r0, [r1, #12]
 8007e62:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d0bf      	beq.n	8007de8 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d1c3      	bne.n	8007df4 <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 8007e6c:	69a3      	ldr	r3, [r4, #24]
 8007e6e:	3302      	adds	r3, #2
 8007e70:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 8007e72:	69e3      	ldr	r3, [r4, #28]
 8007e74:	3302      	adds	r3, #2
 8007e76:	61e3      	str	r3, [r4, #28]
 8007e78:	e7bc      	b.n	8007df4 <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007e7a:	680b      	ldr	r3, [r1, #0]
 8007e7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e80:	600b      	str	r3, [r1, #0]
 8007e82:	e7ab      	b.n	8007ddc <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007e84:	4a2a      	ldr	r2, [pc, #168]	; (8007f30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e86:	492b      	ldr	r1, [pc, #172]	; (8007f34 <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007e88:	482b      	ldr	r0, [pc, #172]	; (8007f38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e8a:	4b2c      	ldr	r3, [pc, #176]	; (8007f3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e8c:	f001 fea8 	bl	8009be0 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007e90:	f240 1293 	movw	r2, #403	; 0x193
 8007e94:	2103      	movs	r1, #3
 8007e96:	4628      	mov	r0, r5
 8007e98:	f001 ffd6 	bl	8009e48 <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	b006      	add	sp, #24
 8007ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ea4:	2364      	movs	r3, #100	; 0x64
 8007ea6:	3108      	adds	r1, #8
 8007ea8:	9300      	str	r3, [sp, #0]
 8007eaa:	4630      	mov	r0, r6
 8007eac:	2300      	movs	r3, #0
 8007eae:	2280      	movs	r2, #128	; 0x80
 8007eb0:	f001 ff8e 	bl	8009dd0 <wait_flag_in_register_timeout>
 8007eb4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007eb8:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f001 ffc9 	bl	8009e54 <is_oke>
 8007ec2:	b348      	cbz	r0, 8007f18 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	f013 0f0a 	tst.w	r3, #10
 8007ecc:	d1e6      	bne.n	8007e9c <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	e7df      	b.n	8007e9c <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007edc:	4b17      	ldr	r3, [pc, #92]	; (8007f3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007ede:	4a14      	ldr	r2, [pc, #80]	; (8007f30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007ee0:	4917      	ldr	r1, [pc, #92]	; (8007f40 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007ee2:	4815      	ldr	r0, [pc, #84]	; (8007f38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007ee4:	f001 fe7c 	bl	8009be0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007ee8:	4628      	mov	r0, r5
 8007eea:	f240 119f 	movw	r1, #415	; 0x19f
 8007eee:	f001 ffaf 	bl	8009e50 <set_return_line>
}
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	b006      	add	sp, #24
 8007ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007efa:	4b10      	ldr	r3, [pc, #64]	; (8007f3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007efc:	4a0c      	ldr	r2, [pc, #48]	; (8007f30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007efe:	4910      	ldr	r1, [pc, #64]	; (8007f40 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007f00:	480d      	ldr	r0, [pc, #52]	; (8007f38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007f02:	f001 fe6d 	bl	8009be0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007f06:	4628      	mov	r0, r5
 8007f08:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007f0c:	f001 ffa0 	bl	8009e50 <set_return_line>
}
 8007f10:	4628      	mov	r0, r5
 8007f12:	b006      	add	sp, #24
 8007f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007f18:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007f1a:	4a05      	ldr	r2, [pc, #20]	; (8007f30 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007f1c:	4908      	ldr	r1, [pc, #32]	; (8007f40 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007f1e:	4806      	ldr	r0, [pc, #24]	; (8007f38 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007f20:	f001 fe5e 	bl	8009be0 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007f24:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f001 ff91 	bl	8009e50 <set_return_line>
		return ret;
 8007f2e:	e7b5      	b.n	8007e9c <_ZN3spi16transmit_receiveEmmm+0xf4>
 8007f30:	0800e860 	.word	0x0800e860
 8007f34:	0800e910 	.word	0x0800e910
 8007f38:	0800e888 	.word	0x0800e888
 8007f3c:	0800e8fc 	.word	0x0800e8fc
 8007f40:	0800e8dc 	.word	0x0800e8dc

08007f44 <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007f48:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007f4a:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007f4c:	68c9      	ldr	r1, [r1, #12]
 8007f4e:	6813      	ldr	r3, [r2, #0]
 8007f50:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007f52:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f54:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007f56:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f58:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 8007f5a:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007f5c:	b088      	sub	sp, #32
	spi -> txcount++;
 8007f5e:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f60:	b960      	cbnz	r0, 8007f7c <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 8007f62:	3201      	adds	r2, #1
 8007f64:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007f66:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	2300      	movs	r3, #0
 8007f70:	702a      	strb	r2, [r5, #0]
 8007f72:	606b      	str	r3, [r5, #4]
}
 8007f74:	4628      	mov	r0, r5
 8007f76:	b008      	add	sp, #32
 8007f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007f7c:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 8007f7e:	bf04      	itt	eq
 8007f80:	3202      	addeq	r2, #2
 8007f82:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007f84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d1f0      	bne.n	8007f6c <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007f8a:	ae06      	add	r6, sp, #24
 8007f8c:	2764      	movs	r7, #100	; 0x64
 8007f8e:	4630      	mov	r0, r6
 8007f90:	3108      	adds	r1, #8
 8007f92:	9700      	str	r7, [sp, #0]
 8007f94:	2301      	movs	r3, #1
 8007f96:	2202      	movs	r2, #2
 8007f98:	f001 ff1a 	bl	8009dd0 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f001 ff59 	bl	8009e54 <is_oke>
 8007fa2:	b1f8      	cbz	r0, 8007fe4 <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007fa4:	68e1      	ldr	r1, [r4, #12]
 8007fa6:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007fa8:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fb0:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	3108      	adds	r1, #8
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	2280      	movs	r2, #128	; 0x80
 8007fba:	9700      	str	r7, [sp, #0]
 8007fbc:	f001 ff08 	bl	8009dd0 <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007fc0:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007fc2:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007fca:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007fce:	d11c      	bne.n	800800a <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007fd0:	f013 0f0a 	tst.w	r3, #10
 8007fd4:	d1ca      	bne.n	8007f6c <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007fd6:	68e3      	ldr	r3, [r4, #12]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	9305      	str	r3, [sp, #20]
			(void)tmp;
 8007fe0:	9b05      	ldr	r3, [sp, #20]
 8007fe2:	e7c3      	b.n	8007f6c <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f240 3129 	movw	r1, #809	; 0x329
 8007fea:	f001 ff31 	bl	8009e50 <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007fee:	4919      	ldr	r1, [pc, #100]	; (8008054 <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007ff0:	4819      	ldr	r0, [pc, #100]	; (8008058 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	; (800805c <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007ff4:	4a1a      	ldr	r2, [pc, #104]	; (8008060 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007ff6:	f001 fdf3 	bl	8009be0 <LOG_ERROR>
			return ret;
 8007ffa:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007ffe:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8008002:	4628      	mov	r0, r5
 8008004:	b008      	add	sp, #32
 8008006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 800800a:	4630      	mov	r0, r6
 800800c:	f001 ff22 	bl	8009e54 <is_oke>
 8008010:	b110      	cbz	r0, 8008018 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8008012:	68a3      	ldr	r3, [r4, #8]
 8008014:	781b      	ldrb	r3, [r3, #0]
 8008016:	e7db      	b.n	8007fd0 <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8008018:	4b10      	ldr	r3, [pc, #64]	; (800805c <_Z10SPI_Tx_ISRP3spi+0x118>)
 800801a:	4a11      	ldr	r2, [pc, #68]	; (8008060 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 800801c:	490d      	ldr	r1, [pc, #52]	; (8008054 <_Z10SPI_Tx_ISRP3spi+0x110>)
 800801e:	480e      	ldr	r0, [pc, #56]	; (8008058 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8008020:	f001 fdde 	bl	8009be0 <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 8008024:	f44f 714e 	mov.w	r1, #824	; 0x338
 8008028:	4630      	mov	r0, r6
 800802a:	f001 ff11 	bl	8009e50 <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 800802e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8008032:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8008034:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8008036:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 800803a:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 800803c:	078b      	lsls	r3, r1, #30
 800803e:	d503      	bpl.n	8008048 <_Z10SPI_Tx_ISRP3spi+0x104>
 8008040:	6813      	ldr	r3, [r2, #0]
 8008042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008046:	6013      	str	r3, [r2, #0]
				return ret;
 8008048:	e896 0003 	ldmia.w	r6, {r0, r1}
 800804c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008050:	e790      	b.n	8007f74 <_Z10SPI_Tx_ISRP3spi+0x30>
 8008052:	bf00      	nop
 8008054:	0800e8dc 	.word	0x0800e8dc
 8008058:	0800e888 	.word	0x0800e888
 800805c:	0800e968 	.word	0x0800e968
 8008060:	0800e860 	.word	0x0800e860

08008064 <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8008068:	68c9      	ldr	r1, [r1, #12]
 800806a:	69e3      	ldr	r3, [r4, #28]
 800806c:	68ca      	ldr	r2, [r1, #12]
 800806e:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8008070:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 8008072:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8008074:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8008076:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8008078:	b086      	sub	sp, #24
 800807a:	4605      	mov	r5, r0
	spi -> rxcount++;
 800807c:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 800807e:	b962      	cbnz	r2, 800809a <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 8008080:	69e2      	ldr	r2, [r4, #28]
 8008082:	3201      	adds	r2, #1
 8008084:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8008086:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008088:	4293      	cmp	r3, r2
 800808a:	d00e      	beq.n	80080aa <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 800808c:	2201      	movs	r2, #1
 800808e:	2300      	movs	r3, #0
 8008090:	702a      	strb	r2, [r5, #0]
 8008092:	606b      	str	r3, [r5, #4]
}
 8008094:	4628      	mov	r0, r5
 8008096:	b006      	add	sp, #24
 8008098:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 800809a:	2a01      	cmp	r2, #1
 800809c:	d1f3      	bne.n	8008086 <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 800809e:	69e2      	ldr	r2, [r4, #28]
 80080a0:	3202      	adds	r2, #2
 80080a2:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 80080a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d1f0      	bne.n	800808c <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 80080aa:	684b      	ldr	r3, [r1, #4]
 80080ac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80080b0:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 80080b2:	ae04      	add	r6, sp, #16
 80080b4:	2364      	movs	r3, #100	; 0x64
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	4630      	mov	r0, r6
 80080ba:	3108      	adds	r1, #8
 80080bc:	2300      	movs	r3, #0
 80080be:	2201      	movs	r2, #1
 80080c0:	f001 fe86 	bl	8009dd0 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 80080c4:	4630      	mov	r0, r6
 80080c6:	f001 fec5 	bl	8009e54 <is_oke>
 80080ca:	b158      	cbz	r0, 80080e4 <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	f013 0f0a 	tst.w	r3, #10
 80080d4:	d1da      	bne.n	800808c <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 80080d6:	68e3      	ldr	r3, [r4, #12]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	9303      	str	r3, [sp, #12]
			(void)tmp;
 80080e0:	9b03      	ldr	r3, [sp, #12]
 80080e2:	e7d3      	b.n	800808c <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80080e4:	4b07      	ldr	r3, [pc, #28]	; (8008104 <_Z10SPI_Rx_ISRP3spi+0xa0>)
 80080e6:	4a08      	ldr	r2, [pc, #32]	; (8008108 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 80080e8:	4908      	ldr	r1, [pc, #32]	; (800810c <_Z10SPI_Rx_ISRP3spi+0xa8>)
 80080ea:	4809      	ldr	r0, [pc, #36]	; (8008110 <_Z10SPI_Rx_ISRP3spi+0xac>)
 80080ec:	f001 fd78 	bl	8009be0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 80080f0:	f240 315d 	movw	r1, #861	; 0x35d
 80080f4:	4630      	mov	r0, r6
 80080f6:	f001 feab 	bl	8009e50 <set_return_line>
			return ret;
 80080fa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80080fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8008102:	e7c7      	b.n	8008094 <_Z10SPI_Rx_ISRP3spi+0x30>
 8008104:	0800e974 	.word	0x0800e974
 8008108:	0800e860 	.word	0x0800e860
 800810c:	0800e8dc 	.word	0x0800e8dc
 8008110:	0800e888 	.word	0x0800e888

08008114 <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 8008114:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008116:	4c22      	ldr	r4, [pc, #136]	; (80081a0 <SPI1_IRQHandler+0x8c>)
 8008118:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 800811a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008120:	689a      	ldr	r2, [r3, #8]
 8008122:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008124:	9a00      	ldr	r2, [sp, #0]
 8008126:	0611      	lsls	r1, r2, #24
 8008128:	d502      	bpl.n	8008130 <SPI1_IRQHandler+0x1c>
 800812a:	9a01      	ldr	r2, [sp, #4]
 800812c:	0792      	lsls	r2, r2, #30
 800812e:	d41e      	bmi.n	800816e <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008130:	9a00      	ldr	r2, [sp, #0]
 8008132:	0650      	lsls	r0, r2, #25
 8008134:	d502      	bpl.n	800813c <SPI1_IRQHandler+0x28>
 8008136:	9a01      	ldr	r2, [sp, #4]
 8008138:	07d1      	lsls	r1, r2, #31
 800813a:	d424      	bmi.n	8008186 <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800813c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800813e:	0652      	lsls	r2, r2, #25
 8008140:	d40a      	bmi.n	8008158 <SPI1_IRQHandler+0x44>
 8008142:	9801      	ldr	r0, [sp, #4]
 8008144:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008148:	d106      	bne.n	8008158 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800814a:	6963      	ldr	r3, [r4, #20]
 800814c:	b16b      	cbz	r3, 800816a <SPI1_IRQHandler+0x56>
 800814e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 8008150:	b004      	add	sp, #16
 8008152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008156:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008160:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008162:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008164:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f1      	bne.n	800814e <SPI1_IRQHandler+0x3a>
}
 800816a:	b004      	add	sp, #16
 800816c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800816e:	4621      	mov	r1, r4
 8008170:	a802      	add	r0, sp, #8
 8008172:	f7ff fee7 	bl	8007f44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008176:	a802      	add	r0, sp, #8
 8008178:	f001 fe6c 	bl	8009e54 <is_oke>
			event = SPI_EVENT_ERROR;
 800817c:	2800      	cmp	r0, #0
 800817e:	bf14      	ite	ne
 8008180:	2001      	movne	r0, #1
 8008182:	2003      	moveq	r0, #3
 8008184:	e7e1      	b.n	800814a <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008186:	4906      	ldr	r1, [pc, #24]	; (80081a0 <SPI1_IRQHandler+0x8c>)
 8008188:	a802      	add	r0, sp, #8
 800818a:	f7ff ff6b 	bl	8008064 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800818e:	a802      	add	r0, sp, #8
 8008190:	f001 fe60 	bl	8009e54 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008194:	2800      	cmp	r0, #0
 8008196:	bf0c      	ite	eq
 8008198:	2003      	moveq	r0, #3
 800819a:	2002      	movne	r0, #2
 800819c:	e7d5      	b.n	800814a <SPI1_IRQHandler+0x36>
 800819e:	bf00      	nop
 80081a0:	2000b5f0 	.word	0x2000b5f0

080081a4 <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 80081a4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081a6:	4c22      	ldr	r4, [pc, #136]	; (8008230 <SPI2_IRQHandler+0x8c>)
 80081a8:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 80081aa:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081ac:	685a      	ldr	r2, [r3, #4]
 80081ae:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80081b4:	9a00      	ldr	r2, [sp, #0]
 80081b6:	0611      	lsls	r1, r2, #24
 80081b8:	d502      	bpl.n	80081c0 <SPI2_IRQHandler+0x1c>
 80081ba:	9a01      	ldr	r2, [sp, #4]
 80081bc:	0792      	lsls	r2, r2, #30
 80081be:	d41e      	bmi.n	80081fe <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80081c0:	9a00      	ldr	r2, [sp, #0]
 80081c2:	0650      	lsls	r0, r2, #25
 80081c4:	d502      	bpl.n	80081cc <SPI2_IRQHandler+0x28>
 80081c6:	9a01      	ldr	r2, [sp, #4]
 80081c8:	07d1      	lsls	r1, r2, #31
 80081ca:	d424      	bmi.n	8008216 <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80081cc:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80081ce:	0652      	lsls	r2, r2, #25
 80081d0:	d40a      	bmi.n	80081e8 <SPI2_IRQHandler+0x44>
 80081d2:	9801      	ldr	r0, [sp, #4]
 80081d4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80081d8:	d106      	bne.n	80081e8 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081da:	6963      	ldr	r3, [r4, #20]
 80081dc:	b16b      	cbz	r3, 80081fa <SPI2_IRQHandler+0x56>
 80081de:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 80081e0:	b004      	add	sp, #16
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081e6:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80081f0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081f2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80081f4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f1      	bne.n	80081de <SPI2_IRQHandler+0x3a>
}
 80081fa:	b004      	add	sp, #16
 80081fc:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80081fe:	4621      	mov	r1, r4
 8008200:	a802      	add	r0, sp, #8
 8008202:	f7ff fe9f 	bl	8007f44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008206:	a802      	add	r0, sp, #8
 8008208:	f001 fe24 	bl	8009e54 <is_oke>
			event = SPI_EVENT_ERROR;
 800820c:	2800      	cmp	r0, #0
 800820e:	bf14      	ite	ne
 8008210:	2001      	movne	r0, #1
 8008212:	2003      	moveq	r0, #3
 8008214:	e7e1      	b.n	80081da <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008216:	4906      	ldr	r1, [pc, #24]	; (8008230 <SPI2_IRQHandler+0x8c>)
 8008218:	a802      	add	r0, sp, #8
 800821a:	f7ff ff23 	bl	8008064 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800821e:	a802      	add	r0, sp, #8
 8008220:	f001 fe18 	bl	8009e54 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008224:	2800      	cmp	r0, #0
 8008226:	bf0c      	ite	eq
 8008228:	2003      	moveq	r0, #3
 800822a:	2002      	movne	r0, #2
 800822c:	e7d5      	b.n	80081da <SPI2_IRQHandler+0x36>
 800822e:	bf00      	nop
 8008230:	2000b624 	.word	0x2000b624

08008234 <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 8008234:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008236:	4c22      	ldr	r4, [pc, #136]	; (80082c0 <SPI3_IRQHandler+0x8c>)
 8008238:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 800823a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800823c:	685a      	ldr	r2, [r3, #4]
 800823e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008244:	9a00      	ldr	r2, [sp, #0]
 8008246:	0611      	lsls	r1, r2, #24
 8008248:	d502      	bpl.n	8008250 <SPI3_IRQHandler+0x1c>
 800824a:	9a01      	ldr	r2, [sp, #4]
 800824c:	0792      	lsls	r2, r2, #30
 800824e:	d41e      	bmi.n	800828e <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008250:	9a00      	ldr	r2, [sp, #0]
 8008252:	0650      	lsls	r0, r2, #25
 8008254:	d502      	bpl.n	800825c <SPI3_IRQHandler+0x28>
 8008256:	9a01      	ldr	r2, [sp, #4]
 8008258:	07d1      	lsls	r1, r2, #31
 800825a:	d424      	bmi.n	80082a6 <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800825c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800825e:	0652      	lsls	r2, r2, #25
 8008260:	d40a      	bmi.n	8008278 <SPI3_IRQHandler+0x44>
 8008262:	9801      	ldr	r0, [sp, #4]
 8008264:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008268:	d106      	bne.n	8008278 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800826a:	6963      	ldr	r3, [r4, #20]
 800826c:	b16b      	cbz	r3, 800828a <SPI3_IRQHandler+0x56>
 800826e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 8008270:	b004      	add	sp, #16
 8008272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008276:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008280:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008282:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008284:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1f1      	bne.n	800826e <SPI3_IRQHandler+0x3a>
}
 800828a:	b004      	add	sp, #16
 800828c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800828e:	4621      	mov	r1, r4
 8008290:	a802      	add	r0, sp, #8
 8008292:	f7ff fe57 	bl	8007f44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008296:	a802      	add	r0, sp, #8
 8008298:	f001 fddc 	bl	8009e54 <is_oke>
			event = SPI_EVENT_ERROR;
 800829c:	2800      	cmp	r0, #0
 800829e:	bf14      	ite	ne
 80082a0:	2001      	movne	r0, #1
 80082a2:	2003      	moveq	r0, #3
 80082a4:	e7e1      	b.n	800826a <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80082a6:	4906      	ldr	r1, [pc, #24]	; (80082c0 <SPI3_IRQHandler+0x8c>)
 80082a8:	a802      	add	r0, sp, #8
 80082aa:	f7ff fedb 	bl	8008064 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80082ae:	a802      	add	r0, sp, #8
 80082b0:	f001 fdd0 	bl	8009e54 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80082b4:	2800      	cmp	r0, #0
 80082b6:	bf0c      	ite	eq
 80082b8:	2003      	moveq	r0, #3
 80082ba:	2002      	movne	r0, #2
 80082bc:	e7d5      	b.n	800826a <SPI3_IRQHandler+0x36>
 80082be:	bf00      	nop
 80082c0:	2000b658 	.word	0x2000b658

080082c4 <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 80082c4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082c6:	4c22      	ldr	r4, [pc, #136]	; (8008350 <SPI4_IRQHandler+0x8c>)
 80082c8:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 80082ca:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80082d4:	9a00      	ldr	r2, [sp, #0]
 80082d6:	0611      	lsls	r1, r2, #24
 80082d8:	d502      	bpl.n	80082e0 <SPI4_IRQHandler+0x1c>
 80082da:	9a01      	ldr	r2, [sp, #4]
 80082dc:	0792      	lsls	r2, r2, #30
 80082de:	d41e      	bmi.n	800831e <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80082e0:	9a00      	ldr	r2, [sp, #0]
 80082e2:	0650      	lsls	r0, r2, #25
 80082e4:	d502      	bpl.n	80082ec <SPI4_IRQHandler+0x28>
 80082e6:	9a01      	ldr	r2, [sp, #4]
 80082e8:	07d1      	lsls	r1, r2, #31
 80082ea:	d424      	bmi.n	8008336 <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80082ec:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80082ee:	0652      	lsls	r2, r2, #25
 80082f0:	d40a      	bmi.n	8008308 <SPI4_IRQHandler+0x44>
 80082f2:	9801      	ldr	r0, [sp, #4]
 80082f4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80082f8:	d106      	bne.n	8008308 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80082fa:	6963      	ldr	r3, [r4, #20]
 80082fc:	b16b      	cbz	r3, 800831a <SPI4_IRQHandler+0x56>
 80082fe:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 8008300:	b004      	add	sp, #16
 8008302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008306:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008308:	68da      	ldr	r2, [r3, #12]
 800830a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008310:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008312:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008314:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f1      	bne.n	80082fe <SPI4_IRQHandler+0x3a>
}
 800831a:	b004      	add	sp, #16
 800831c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800831e:	4621      	mov	r1, r4
 8008320:	a802      	add	r0, sp, #8
 8008322:	f7ff fe0f 	bl	8007f44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008326:	a802      	add	r0, sp, #8
 8008328:	f001 fd94 	bl	8009e54 <is_oke>
			event = SPI_EVENT_ERROR;
 800832c:	2800      	cmp	r0, #0
 800832e:	bf14      	ite	ne
 8008330:	2001      	movne	r0, #1
 8008332:	2003      	moveq	r0, #3
 8008334:	e7e1      	b.n	80082fa <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008336:	4906      	ldr	r1, [pc, #24]	; (8008350 <SPI4_IRQHandler+0x8c>)
 8008338:	a802      	add	r0, sp, #8
 800833a:	f7ff fe93 	bl	8008064 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800833e:	a802      	add	r0, sp, #8
 8008340:	f001 fd88 	bl	8009e54 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008344:	2800      	cmp	r0, #0
 8008346:	bf0c      	ite	eq
 8008348:	2003      	moveq	r0, #3
 800834a:	2002      	movne	r0, #2
 800834c:	e7d5      	b.n	80082fa <SPI4_IRQHandler+0x36>
 800834e:	bf00      	nop
 8008350:	2000b68c 	.word	0x2000b68c

08008354 <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 8008354:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008356:	4c22      	ldr	r4, [pc, #136]	; (80083e0 <SPI5_IRQHandler+0x8c>)
 8008358:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 800835a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008360:	689a      	ldr	r2, [r3, #8]
 8008362:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008364:	9a00      	ldr	r2, [sp, #0]
 8008366:	0611      	lsls	r1, r2, #24
 8008368:	d502      	bpl.n	8008370 <SPI5_IRQHandler+0x1c>
 800836a:	9a01      	ldr	r2, [sp, #4]
 800836c:	0792      	lsls	r2, r2, #30
 800836e:	d41e      	bmi.n	80083ae <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008370:	9a00      	ldr	r2, [sp, #0]
 8008372:	0650      	lsls	r0, r2, #25
 8008374:	d502      	bpl.n	800837c <SPI5_IRQHandler+0x28>
 8008376:	9a01      	ldr	r2, [sp, #4]
 8008378:	07d1      	lsls	r1, r2, #31
 800837a:	d424      	bmi.n	80083c6 <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800837c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800837e:	0652      	lsls	r2, r2, #25
 8008380:	d40a      	bmi.n	8008398 <SPI5_IRQHandler+0x44>
 8008382:	9801      	ldr	r0, [sp, #4]
 8008384:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008388:	d106      	bne.n	8008398 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800838a:	6963      	ldr	r3, [r4, #20]
 800838c:	b16b      	cbz	r3, 80083aa <SPI5_IRQHandler+0x56>
 800838e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 8008390:	b004      	add	sp, #16
 8008392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008396:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80083a0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80083a2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80083a4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f1      	bne.n	800838e <SPI5_IRQHandler+0x3a>
}
 80083aa:	b004      	add	sp, #16
 80083ac:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80083ae:	4621      	mov	r1, r4
 80083b0:	a802      	add	r0, sp, #8
 80083b2:	f7ff fdc7 	bl	8007f44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80083b6:	a802      	add	r0, sp, #8
 80083b8:	f001 fd4c 	bl	8009e54 <is_oke>
			event = SPI_EVENT_ERROR;
 80083bc:	2800      	cmp	r0, #0
 80083be:	bf14      	ite	ne
 80083c0:	2001      	movne	r0, #1
 80083c2:	2003      	moveq	r0, #3
 80083c4:	e7e1      	b.n	800838a <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80083c6:	4906      	ldr	r1, [pc, #24]	; (80083e0 <SPI5_IRQHandler+0x8c>)
 80083c8:	a802      	add	r0, sp, #8
 80083ca:	f7ff fe4b 	bl	8008064 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80083ce:	a802      	add	r0, sp, #8
 80083d0:	f001 fd40 	bl	8009e54 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80083d4:	2800      	cmp	r0, #0
 80083d6:	bf0c      	ite	eq
 80083d8:	2003      	moveq	r0, #3
 80083da:	2002      	movne	r0, #2
 80083dc:	e7d5      	b.n	800838a <SPI5_IRQHandler+0x36>
 80083de:	bf00      	nop
 80083e0:	2000b6c0 	.word	0x2000b6c0

080083e4 <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 80083e4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80083e6:	4c22      	ldr	r4, [pc, #136]	; (8008470 <SPI6_IRQHandler+0x8c>)
 80083e8:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 80083ea:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80083f4:	9a00      	ldr	r2, [sp, #0]
 80083f6:	0611      	lsls	r1, r2, #24
 80083f8:	d502      	bpl.n	8008400 <SPI6_IRQHandler+0x1c>
 80083fa:	9a01      	ldr	r2, [sp, #4]
 80083fc:	0792      	lsls	r2, r2, #30
 80083fe:	d41e      	bmi.n	800843e <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008400:	9a00      	ldr	r2, [sp, #0]
 8008402:	0650      	lsls	r0, r2, #25
 8008404:	d502      	bpl.n	800840c <SPI6_IRQHandler+0x28>
 8008406:	9a01      	ldr	r2, [sp, #4]
 8008408:	07d1      	lsls	r1, r2, #31
 800840a:	d424      	bmi.n	8008456 <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800840c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800840e:	0652      	lsls	r2, r2, #25
 8008410:	d40a      	bmi.n	8008428 <SPI6_IRQHandler+0x44>
 8008412:	9801      	ldr	r0, [sp, #4]
 8008414:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008418:	d106      	bne.n	8008428 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800841a:	6963      	ldr	r3, [r4, #20]
 800841c:	b16b      	cbz	r3, 800843a <SPI6_IRQHandler+0x56>
 800841e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 8008420:	b004      	add	sp, #16
 8008422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008426:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008430:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008432:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008434:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1f1      	bne.n	800841e <SPI6_IRQHandler+0x3a>
}
 800843a:	b004      	add	sp, #16
 800843c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800843e:	4621      	mov	r1, r4
 8008440:	a802      	add	r0, sp, #8
 8008442:	f7ff fd7f 	bl	8007f44 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008446:	a802      	add	r0, sp, #8
 8008448:	f001 fd04 	bl	8009e54 <is_oke>
			event = SPI_EVENT_ERROR;
 800844c:	2800      	cmp	r0, #0
 800844e:	bf14      	ite	ne
 8008450:	2001      	movne	r0, #1
 8008452:	2003      	moveq	r0, #3
 8008454:	e7e1      	b.n	800841a <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008456:	4906      	ldr	r1, [pc, #24]	; (8008470 <SPI6_IRQHandler+0x8c>)
 8008458:	a802      	add	r0, sp, #8
 800845a:	f7ff fe03 	bl	8008064 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800845e:	a802      	add	r0, sp, #8
 8008460:	f001 fcf8 	bl	8009e54 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008464:	2800      	cmp	r0, #0
 8008466:	bf0c      	ite	eq
 8008468:	2003      	moveq	r0, #3
 800846a:	2002      	movne	r0, #2
 800846c:	e7d5      	b.n	800841a <SPI6_IRQHandler+0x36>
 800846e:	bf00      	nop
 8008470:	2000b6f4 	.word	0x2000b6f4

08008474 <_GLOBAL__sub_I_cc>:
}
 8008474:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8008476:	4e2c      	ldr	r6, [pc, #176]	; (8008528 <_GLOBAL__sub_I_cc+0xb4>)
 8008478:	4c2c      	ldr	r4, [pc, #176]	; (800852c <_GLOBAL__sub_I_cc+0xb8>)
 800847a:	4d2d      	ldr	r5, [pc, #180]	; (8008530 <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 800847c:	4f2d      	ldr	r7, [pc, #180]	; (8008534 <_GLOBAL__sub_I_cc+0xc0>)
 800847e:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 8008480:	2300      	movs	r3, #0
 8008482:	e9c6 3300 	strd	r3, r3, [r6]
 8008486:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800848a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800848e:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8008492:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 8008496:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 8008498:	4e27      	ldr	r6, [pc, #156]	; (8008538 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 800849a:	60ab      	str	r3, [r5, #8]
 800849c:	e9c5 3300 	strd	r3, r3, [r5]
 80084a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80084a4:	e9c5 3306 	strd	r3, r3, [r5, #24]
 80084a8:	e9c5 3308 	strd	r3, r3, [r5, #32]
 80084ac:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80084b0:	e9c4 3300 	strd	r3, r3, [r4]
 80084b4:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80084b8:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80084bc:	60a3      	str	r3, [r4, #8]
 80084be:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 80084c0:	60ee      	str	r6, [r5, #12]
 80084c2:	4d1e      	ldr	r5, [pc, #120]	; (800853c <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 80084c4:	481e      	ldr	r0, [pc, #120]	; (8008540 <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 80084c6:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 80084c8:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80084cc:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 80084ce:	4c1d      	ldr	r4, [pc, #116]	; (8008544 <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 80084d0:	491d      	ldr	r1, [pc, #116]	; (8008548 <_GLOBAL__sub_I_cc+0xd4>)
 80084d2:	4a1e      	ldr	r2, [pc, #120]	; (800854c <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 80084d4:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 80084d6:	e9c0 3300 	strd	r3, r3, [r0]
 80084da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084de:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80084e2:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80084e6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80084ea:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 80084ec:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80084f0:	4817      	ldr	r0, [pc, #92]	; (8008550 <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 80084f2:	608b      	str	r3, [r1, #8]
 80084f4:	e9c1 3300 	strd	r3, r3, [r1]
 80084f8:	e9c1 3304 	strd	r3, r3, [r1, #16]
 80084fc:	e9c1 3306 	strd	r3, r3, [r1, #24]
 8008500:	e9c1 3308 	strd	r3, r3, [r1, #32]
 8008504:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 8008508:	e9c2 3300 	strd	r3, r3, [r2]
 800850c:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8008510:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 8008512:	60cc      	str	r4, [r1, #12]
}
 8008514:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8008516:	e9c2 3306 	strd	r3, r3, [r2, #24]
 800851a:	e9c2 3308 	strd	r3, r3, [r2, #32]
 800851e:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 8008522:	60d0      	str	r0, [r2, #12]
}
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	2000b5f0 	.word	0x2000b5f0
 800852c:	2000b658 	.word	0x2000b658
 8008530:	2000b624 	.word	0x2000b624
 8008534:	40013000 	.word	0x40013000
 8008538:	40003800 	.word	0x40003800
 800853c:	40003c00 	.word	0x40003c00
 8008540:	2000b68c 	.word	0x2000b68c
 8008544:	40013400 	.word	0x40013400
 8008548:	2000b6c0 	.word	0x2000b6c0
 800854c:	2000b6f4 	.word	0x2000b6f4
 8008550:	40015400 	.word	0x40015400

08008554 <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 8008554:	4b01      	ldr	r3, [pc, #4]	; (800855c <systick_get_tick+0x8>)
 8008556:	6818      	ldr	r0, [r3, #0]
}
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	2000b728 	.word	0x2000b728

08008560 <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 8008560:	4a05      	ldr	r2, [pc, #20]	; (8008578 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 8008562:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008566:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 8008568:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 800856a:	bf38      	it	cc
 800856c:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 800856e:	6813      	ldr	r3, [r2, #0]
 8008570:	1a5b      	subs	r3, r3, r1
 8008572:	4283      	cmp	r3, r0
 8008574:	d3fb      	bcc.n	800856e <systick_delay_ms+0xe>
}
 8008576:	4770      	bx	lr
 8008578:	2000b728 	.word	0x2000b728

0800857c <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 800857c:	4b0d      	ldr	r3, [pc, #52]	; (80085b4 <systick_init+0x38>)
 800857e:	4a0e      	ldr	r2, [pc, #56]	; (80085b8 <systick_init+0x3c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008588:	3b01      	subs	r3, #1
 800858a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 800858e:	4601      	mov	r1, r0
 8008590:	d20b      	bcs.n	80085aa <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008592:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008596:	4809      	ldr	r0, [pc, #36]	; (80085bc <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008598:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800859a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800859e:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085a2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085a4:	2000      	movs	r0, #0
 80085a6:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085a8:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 80085aa:	2200      	movs	r2, #0
 80085ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b0:	f001 bce6 	b.w	8009f80 <NVIC_Set_Priority>
 80085b4:	20000000 	.word	0x20000000
 80085b8:	10624dd3 	.word	0x10624dd3
 80085bc:	e000ed00 	.word	0xe000ed00

080085c0 <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 80085c0:	4b01      	ldr	r3, [pc, #4]	; (80085c8 <get_tick+0x8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4718      	bx	r3
 80085c6:	bf00      	nop
 80085c8:	2000008c 	.word	0x2000008c

080085cc <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 80085cc:	4b01      	ldr	r3, [pc, #4]	; (80085d4 <delay_ms+0x8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4718      	bx	r3
 80085d2:	bf00      	nop
 80085d4:	20000088 	.word	0x20000088

080085d8 <app_systick_process>:
	sdk_tick++;
 80085d8:	4a17      	ldr	r2, [pc, #92]	; (8008638 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 80085da:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 80085dc:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 80085de:	4c17      	ldr	r4, [pc, #92]	; (800863c <app_systick_process+0x64>)
	sdk_tick++;
 80085e0:	3301      	adds	r3, #1
 80085e2:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	3301      	adds	r3, #1
 80085e8:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085f0:	d000      	beq.n	80085f4 <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 80085f2:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 80085f4:	4d12      	ldr	r5, [pc, #72]	; (8008640 <app_systick_process+0x68>)
 80085f6:	ed95 7a00 	vldr	s14, [r5]
 80085fa:	edd4 7a00 	vldr	s15, [r4]
 80085fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008606:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800860a:	ee17 0a90 	vmov	r0, s15
 800860e:	f7f7 ffbb 	bl	8000588 <__aeabi_f2d>
 8008612:	4602      	mov	r2, r0
 8008614:	460b      	mov	r3, r1
 8008616:	2000      	movs	r0, #0
 8008618:	490a      	ldr	r1, [pc, #40]	; (8008644 <app_systick_process+0x6c>)
 800861a:	f7f7 fe55 	bl	80002c8 <__aeabi_dsub>
 800861e:	4b0a      	ldr	r3, [pc, #40]	; (8008648 <app_systick_process+0x70>)
 8008620:	2200      	movs	r2, #0
 8008622:	f7f8 f809 	bl	8000638 <__aeabi_dmul>
 8008626:	f7f8 faff 	bl	8000c28 <__aeabi_d2f>
 800862a:	4a08      	ldr	r2, [pc, #32]	; (800864c <app_systick_process+0x74>)
			systick_total_ticks = 0;
 800862c:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 800862e:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 8008630:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 8008632:	602b      	str	r3, [r5, #0]
	}
 8008634:	bd38      	pop	{r3, r4, r5, pc}
 8008636:	bf00      	nop
 8008638:	2000b728 	.word	0x2000b728
 800863c:	2000b9d8 	.word	0x2000b9d8
 8008640:	2000b9d4 	.word	0x2000b9d4
 8008644:	3ff00000 	.word	0x3ff00000
 8008648:	40590000 	.word	0x40590000
 800864c:	2000b9cc 	.word	0x2000b9cc

08008650 <TIM1_CC_IRQHandler>:

void TIM_IRQHandler(tim *timptr){
	tim_event_t event = TIM_EVENT_NOEVENT;
	tim_channel_t channel = TIM_NOCHANNEL;

	timptr -> counter = timptr -> _tim -> CNT;
 8008650:	4a2f      	ldr	r2, [pc, #188]	; (8008710 <TIM1_CC_IRQHandler+0xc0>)
 8008652:	6853      	ldr	r3, [r2, #4]
 8008654:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008656:	60d1      	str	r1, [r2, #12]

	/* TIMER CAPTURE-COMPARE 1 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008658:	6919      	ldr	r1, [r3, #16]
 800865a:	0788      	lsls	r0, r1, #30
 800865c:	d502      	bpl.n	8008664 <TIM1_CC_IRQHandler+0x14>
 800865e:	68d9      	ldr	r1, [r3, #12]
 8008660:	0789      	lsls	r1, r1, #30
 8008662:	d433      	bmi.n	80086cc <TIM1_CC_IRQHandler+0x7c>
		channel = TIM_CHANNEL1;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 2 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008664:	6919      	ldr	r1, [r3, #16]
 8008666:	0748      	lsls	r0, r1, #29
 8008668:	d502      	bpl.n	8008670 <TIM1_CC_IRQHandler+0x20>
 800866a:	68d9      	ldr	r1, [r3, #12]
 800866c:	0749      	lsls	r1, r1, #29
 800866e:	d43c      	bmi.n	80086ea <TIM1_CC_IRQHandler+0x9a>
		channel = TIM_CHANNEL2;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 3 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008670:	6919      	ldr	r1, [r3, #16]
 8008672:	0708      	lsls	r0, r1, #28
 8008674:	d502      	bpl.n	800867c <TIM1_CC_IRQHandler+0x2c>
 8008676:	68d9      	ldr	r1, [r3, #12]
 8008678:	0709      	lsls	r1, r1, #28
 800867a:	d43c      	bmi.n	80086f6 <TIM1_CC_IRQHandler+0xa6>
		channel = TIM_CHANNEL3;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 4 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800867c:	6919      	ldr	r1, [r3, #16]
 800867e:	06c8      	lsls	r0, r1, #27
 8008680:	d411      	bmi.n	80086a6 <TIM1_CC_IRQHandler+0x56>
		channel = TIM_CHANNEL4;
		goto EventCB;
	}

	/* TIMER UPDATE INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008682:	6919      	ldr	r1, [r3, #16]
 8008684:	07c8      	lsls	r0, r1, #31
 8008686:	d502      	bpl.n	800868e <TIM1_CC_IRQHandler+0x3e>
 8008688:	68d9      	ldr	r1, [r3, #12]
 800868a:	07c9      	lsls	r1, r1, #31
 800868c:	d439      	bmi.n	8008702 <TIM1_CC_IRQHandler+0xb2>
		event = TIM_EVENT_UPDATE;
		goto EventCB;
	}

	/* TIMER BREAK INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800868e:	6919      	ldr	r1, [r3, #16]
 8008690:	0608      	lsls	r0, r1, #24
 8008692:	d511      	bpl.n	80086b8 <TIM1_CC_IRQHandler+0x68>
 8008694:	68d9      	ldr	r1, [r3, #12]
 8008696:	0609      	lsls	r1, r1, #24
 8008698:	d50e      	bpl.n	80086b8 <TIM1_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800869a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800869e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80086a0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80086a2:	2101      	movs	r1, #1
		goto EventCB;
 80086a4:	e00d      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80086a6:	68d9      	ldr	r1, [r3, #12]
 80086a8:	06c9      	lsls	r1, r1, #27
 80086aa:	d5ea      	bpl.n	8008682 <TIM1_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80086ac:	f06f 0110 	mvn.w	r1, #16
 80086b0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80086b2:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80086b4:	2106      	movs	r1, #6
		goto EventCB;
 80086b6:	e004      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
	}

	/* TIMER TRIGER INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80086b8:	6919      	ldr	r1, [r3, #16]
 80086ba:	0648      	lsls	r0, r1, #25
 80086bc:	d40c      	bmi.n	80086d8 <TIM1_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 80086be:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80086c0:	2107      	movs	r1, #7
		event = TIM_EVENT_TRIGER;
		goto EventCB;
	}

	EventCB:
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80086c2:	6813      	ldr	r3, [r2, #0]
 80086c4:	b10b      	cbz	r3, 80086ca <TIM1_CC_IRQHandler+0x7a>
 80086c6:	6892      	ldr	r2, [r2, #8]
 80086c8:	4718      	bx	r3
#if defined(TIM1)
tim tim_1(TIM1);
tim_t tim1 = &tim_1;
void TIM1_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_1);
}
 80086ca:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80086cc:	f06f 0102 	mvn.w	r1, #2
 80086d0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80086d2:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80086d4:	2103      	movs	r1, #3
		goto EventCB;
 80086d6:	e7f4      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80086d8:	68d9      	ldr	r1, [r3, #12]
 80086da:	0649      	lsls	r1, r1, #25
 80086dc:	d5ef      	bpl.n	80086be <TIM1_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80086de:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80086e2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80086e4:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80086e6:	2102      	movs	r1, #2
		goto EventCB;
 80086e8:	e7eb      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80086ea:	f06f 0104 	mvn.w	r1, #4
 80086ee:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80086f0:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80086f2:	2104      	movs	r1, #4
		goto EventCB;
 80086f4:	e7e5      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80086f6:	f06f 0108 	mvn.w	r1, #8
 80086fa:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80086fc:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80086fe:	2105      	movs	r1, #5
		goto EventCB;
 8008700:	e7df      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008702:	f06f 0101 	mvn.w	r1, #1
 8008706:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008708:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800870a:	2100      	movs	r1, #0
		goto EventCB;
 800870c:	e7d9      	b.n	80086c2 <TIM1_CC_IRQHandler+0x72>
 800870e:	bf00      	nop
 8008710:	2000b72c 	.word	0x2000b72c

08008714 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 8008718:	f8df a154 	ldr.w	sl, [pc, #340]	; 8008870 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 800871c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8008874 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 8008720:	4f4a      	ldr	r7, [pc, #296]	; (800884c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 8008722:	4a4b      	ldr	r2, [pc, #300]	; (8008850 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 8008724:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008878 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 8008728:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 800872c:	2300      	movs	r3, #0
 800872e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008732:	f8ca 3000 	str.w	r3, [sl]
 8008736:	f8ca 3008 	str.w	r3, [sl, #8]
 800873a:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 800873e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800887c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 8008742:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008880 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 8008746:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8008748:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 800874c:	f8c9 300c 	str.w	r3, [r9, #12]
 8008750:	f8c9 3000 	str.w	r3, [r9]
 8008754:	f8c9 3008 	str.w	r3, [r9, #8]
 8008758:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 800875c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8008884 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 8008760:	f8df c124 	ldr.w	ip, [pc, #292]	; 8008888 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 8008764:	4e3b      	ldr	r6, [pc, #236]	; (8008854 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 8008766:	4d3c      	ldr	r5, [pc, #240]	; (8008858 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 8008768:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 800876c:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 8008770:	f8c8 3000 	str.w	r3, [r8]
 8008774:	f8c8 3008 	str.w	r3, [r8, #8]
 8008778:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 800877c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800888c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 8008780:	4c36      	ldr	r4, [pc, #216]	; (800885c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 8008782:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 8008786:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 800878a:	f8ce 3000 	str.w	r3, [lr]
 800878e:	f8ce 3008 	str.w	r3, [lr, #8]
 8008792:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 8008796:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800879a:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8008890 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 800879e:	4830      	ldr	r0, [pc, #192]	; (8008860 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 80087a0:	f8cc e004 	str.w	lr, [ip, #4]
 80087a4:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 80087a8:	f8cc 3000 	str.w	r3, [ip]
 80087ac:	f8cc 3008 	str.w	r3, [ip, #8]
 80087b0:	f8cc 300c 	str.w	r3, [ip, #12]
 80087b4:	f8cc 3010 	str.w	r3, [ip, #16]
 80087b8:	6033      	str	r3, [r6, #0]
 80087ba:	60b3      	str	r3, [r6, #8]
 80087bc:	603b      	str	r3, [r7, #0]
 80087be:	60bb      	str	r3, [r7, #8]
 80087c0:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 80087c2:	f8c7 9004 	str.w	r9, [r7, #4]
 80087c6:	606a      	str	r2, [r5, #4]
 80087c8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 80087cc:	4925      	ldr	r1, [pc, #148]	; (8008864 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 80087ce:	6062      	str	r2, [r4, #4]
 80087d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087d4:	6042      	str	r2, [r0, #4]
 80087d6:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 80087da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 80087de:	60f3      	str	r3, [r6, #12]
 80087e0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8008894 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 80087e4:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 80087e8:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 80087ea:	604a      	str	r2, [r1, #4]
 80087ec:	4e1e      	ldr	r6, [pc, #120]	; (8008868 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 80087ee:	4a1f      	ldr	r2, [pc, #124]	; (800886c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 80087f0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8008898 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 80087f4:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 80087f6:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 80087fa:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 80087fe:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 8008800:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 8008804:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 8008806:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 800880a:	60cb      	str	r3, [r1, #12]
 800880c:	602b      	str	r3, [r5, #0]
 800880e:	60d3      	str	r3, [r2, #12]
 8008810:	60ab      	str	r3, [r5, #8]
 8008812:	612b      	str	r3, [r5, #16]
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	60a3      	str	r3, [r4, #8]
 8008818:	6123      	str	r3, [r4, #16]
 800881a:	6003      	str	r3, [r0, #0]
 800881c:	6083      	str	r3, [r0, #8]
 800881e:	6103      	str	r3, [r0, #16]
 8008820:	600b      	str	r3, [r1, #0]
 8008822:	608b      	str	r3, [r1, #8]
 8008824:	610b      	str	r3, [r1, #16]
 8008826:	6013      	str	r3, [r2, #0]
 8008828:	6093      	str	r3, [r2, #8]
 800882a:	6113      	str	r3, [r2, #16]
 800882c:	6033      	str	r3, [r6, #0]
 800882e:	60b3      	str	r3, [r6, #8]
 8008830:	60f3      	str	r3, [r6, #12]
 8008832:	6133      	str	r3, [r6, #16]
 8008834:	f8cb 3000 	str.w	r3, [fp]
 8008838:	f8cb 3008 	str.w	r3, [fp, #8]
 800883c:	f8cb 300c 	str.w	r3, [fp, #12]
 8008840:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 8008844:	f8cb c004 	str.w	ip, [fp, #4]
}
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	2000b7bc 	.word	0x2000b7bc
 8008850:	40010000 	.word	0x40010000
 8008854:	2000b834 	.word	0x2000b834
 8008858:	2000b84c 	.word	0x2000b84c
 800885c:	2000b864 	.word	0x2000b864
 8008860:	2000b744 	.word	0x2000b744
 8008864:	2000b75c 	.word	0x2000b75c
 8008868:	2000b78c 	.word	0x2000b78c
 800886c:	2000b774 	.word	0x2000b774
 8008870:	2000b72c 	.word	0x2000b72c
 8008874:	2000b7d4 	.word	0x2000b7d4
 8008878:	2000b7ec 	.word	0x2000b7ec
 800887c:	40000400 	.word	0x40000400
 8008880:	2000b804 	.word	0x2000b804
 8008884:	40000800 	.word	0x40000800
 8008888:	2000b81c 	.word	0x2000b81c
 800888c:	40000c00 	.word	0x40000c00
 8008890:	40001000 	.word	0x40001000
 8008894:	2000b7a4 	.word	0x2000b7a4
 8008898:	40002000 	.word	0x40002000
 800889c:	00000000 	.word	0x00000000

080088a0 <_ZN5usart4initEP14usart_config_t>:

usart::usart(USART_TypeDef *usart){
	_usart = usart;
}

stm_ret_t usart::init(usart_config_t *conf){
 80088a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80088a4:	460d      	mov	r5, r1
 80088a6:	e9d2 4107 	ldrd	r4, r1, [r2, #28]
 80088aa:	b08b      	sub	sp, #44	; 0x2c
 80088ac:	4606      	mov	r6, r0
	stm_ret_t ret;
 80088ae:	2001      	movs	r0, #1
 80088b0:	2300      	movs	r3, #0
	_conf = conf;
 80088b2:	622a      	str	r2, [r5, #32]
	stm_ret_t ret;
 80088b4:	f88d 0018 	strb.w	r0, [sp, #24]
#if ENABLE_DMA
	_rxdma = _conf -> rxdma;
	_txdma = _conf -> txdma;
 80088b8:	606c      	str	r4, [r5, #4]
#endif /* ENABLE_DMA */
	__IO uint32_t usart_bus_frequency = 0UL;

	gpio_port_clock_enable(_conf -> txport);
 80088ba:	68d0      	ldr	r0, [r2, #12]
	_txdma = _conf -> txdma;
 80088bc:	60a9      	str	r1, [r5, #8]
	stm_ret_t ret;
 80088be:	9307      	str	r3, [sp, #28]
	__IO uint32_t usart_bus_frequency = 0UL;
 80088c0:	9304      	str	r3, [sp, #16]
	gpio_port_clock_enable(_conf -> txport);
 80088c2:	f7fe fc55 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(_conf -> rxport);
 80088c6:	6a2b      	ldr	r3, [r5, #32]
 80088c8:	6958      	ldr	r0, [r3, #20]
 80088ca:	f7fe fc51 	bl	8007170 <gpio_port_clock_enable>
	gpio_set_alternatefunction(conf->txport, conf->txpin, GPIO_ALTERNATE_PUSHPULL);
	gpio_set_mode(conf->rxport, conf->rxpin, GPIO_INPUT);
#elif defined(STM32F4)
	if(
#if defined(USART1)
			_usart == USART1
 80088ce:	682b      	ldr	r3, [r5, #0]
	if(
 80088d0:	4ab1      	ldr	r2, [pc, #708]	; (8008b98 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d014      	beq.n	8008900 <_ZN5usart4initEP14usart_config_t+0x60>
#endif /* defined(USART1) */
			||
 80088d6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80088da:	4293      	cmp	r3, r2
 80088dc:	d010      	beq.n	8008900 <_ZN5usart4initEP14usart_config_t+0x60>
#if defined(USART2)
			_usart == USART2
#endif /* defined(USART2) */
			||
 80088de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d00c      	beq.n	8008900 <_ZN5usart4initEP14usart_config_t+0x60>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
	}
	else{
#if defined(UART7) & defined(UART8)
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_8);
 80088e6:	6a2b      	ldr	r3, [r5, #32]
 80088e8:	2208      	movs	r2, #8
 80088ea:	8a19      	ldrh	r1, [r3, #16]
 80088ec:	68d8      	ldr	r0, [r3, #12]
 80088ee:	f7fe fd27 	bl	8007340 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_8);
 80088f2:	6a2b      	ldr	r3, [r5, #32]
 80088f4:	2208      	movs	r2, #8
 80088f6:	8b19      	ldrh	r1, [r3, #24]
 80088f8:	6958      	ldr	r0, [r3, #20]
 80088fa:	f7fe fd21 	bl	8007340 <gpio_set_alternatefunction>
 80088fe:	e00b      	b.n	8008918 <_ZN5usart4initEP14usart_config_t+0x78>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
 8008900:	6a2b      	ldr	r3, [r5, #32]
 8008902:	2207      	movs	r2, #7
 8008904:	8a19      	ldrh	r1, [r3, #16]
 8008906:	68d8      	ldr	r0, [r3, #12]
 8008908:	f7fe fd1a 	bl	8007340 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
 800890c:	6a2b      	ldr	r3, [r5, #32]
 800890e:	2207      	movs	r2, #7
 8008910:	8b19      	ldrh	r1, [r3, #24]
 8008912:	6958      	ldr	r0, [r3, #20]
 8008914:	f7fe fd14 	bl	8007340 <gpio_set_alternatefunction>
#else
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_6);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_6);
#endif /* defined(UART7) & defined(UART8) */
	}
	gpio_set_alternatefunction_type(_conf -> txport, _conf -> txpin, GPIO_OUTPUT_PUSHPULL);
 8008918:	6a2b      	ldr	r3, [r5, #32]
 800891a:	2207      	movs	r2, #7
 800891c:	8a19      	ldrh	r1, [r3, #16]
 800891e:	68d8      	ldr	r0, [r3, #12]
 8008920:	f7fe fd4c 	bl	80073bc <gpio_set_alternatefunction_type>
	gpio_set_alternatefunction_type(_conf -> rxport, _conf -> rxpin, GPIO_OUTPUT_PUSHPULL);
 8008924:	6a2b      	ldr	r3, [r5, #32]
 8008926:	2207      	movs	r2, #7
 8008928:	8b19      	ldrh	r1, [r3, #24]
 800892a:	6958      	ldr	r0, [r3, #20]
 800892c:	f7fe fd46 	bl	80073bc <gpio_set_alternatefunction_type>
#endif /* STM32F4 */

#if defined(USART1)
	if(_usart == USART1){
 8008930:	682c      	ldr	r4, [r5, #0]
 8008932:	4b99      	ldr	r3, [pc, #612]	; (8008b98 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8008934:	429c      	cmp	r4, r3
 8008936:	f000 8147 	beq.w	8008bc8 <_ZN5usart4initEP14usart_config_t+0x328>
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART1) */
#if defined(USART2)
	if(_usart == USART2){
 800893a:	4b98      	ldr	r3, [pc, #608]	; (8008b9c <_ZN5usart4initEP14usart_config_t+0x2fc>)
 800893c:	429c      	cmp	r4, r3
 800893e:	f000 8151 	beq.w	8008be4 <_ZN5usart4initEP14usart_config_t+0x344>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART2) */
#if defined(USART3)
	if(_usart == USART3){
 8008942:	4b97      	ldr	r3, [pc, #604]	; (8008ba0 <_ZN5usart4initEP14usart_config_t+0x300>)
 8008944:	429c      	cmp	r4, r3
 8008946:	f000 80d2 	beq.w	8008aee <_ZN5usart4initEP14usart_config_t+0x24e>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART3) */
#if defined(UART4)
	if(_usart == UART4){
 800894a:	4b96      	ldr	r3, [pc, #600]	; (8008ba4 <_ZN5usart4initEP14usart_config_t+0x304>)
 800894c:	429c      	cmp	r4, r3
 800894e:	f000 80dc 	beq.w	8008b0a <_ZN5usart4initEP14usart_config_t+0x26a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART4) */
#if defined(UART5)
	if(_usart == UART5){
 8008952:	4b95      	ldr	r3, [pc, #596]	; (8008ba8 <_ZN5usart4initEP14usart_config_t+0x308>)
 8008954:	429c      	cmp	r4, r3
 8008956:	f000 80e6 	beq.w	8008b26 <_ZN5usart4initEP14usart_config_t+0x286>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART5) */
#if defined(USART6)
	if(_usart == USART6){
 800895a:	4b94      	ldr	r3, [pc, #592]	; (8008bac <_ZN5usart4initEP14usart_config_t+0x30c>)
 800895c:	429c      	cmp	r4, r3
 800895e:	f000 80f0 	beq.w	8008b42 <_ZN5usart4initEP14usart_config_t+0x2a2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART6) */
#if defined(UART7)
	if(_usart == UART7){
 8008962:	4b93      	ldr	r3, [pc, #588]	; (8008bb0 <_ZN5usart4initEP14usart_config_t+0x310>)
 8008964:	429c      	cmp	r4, r3
 8008966:	f000 80fa 	beq.w	8008b5e <_ZN5usart4initEP14usart_config_t+0x2be>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART7) */
#if defined(UART8)
	if(_usart == UART8){
 800896a:	4b92      	ldr	r3, [pc, #584]	; (8008bb4 <_ZN5usart4initEP14usart_config_t+0x314>)
 800896c:	429c      	cmp	r4, r3
 800896e:	f000 8104 	beq.w	8008b7a <_ZN5usart4initEP14usart_config_t+0x2da>
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART8) */


	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008972:	68e3      	ldr	r3, [r4, #12]

	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8008974:	6a2f      	ldr	r7, [r5, #32]
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008976:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800897a:	f043 030c 	orr.w	r3, r3, #12
 800897e:	60e3      	str	r3, [r4, #12]
	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8008980:	9804      	ldr	r0, [sp, #16]
 8008982:	f7f7 fddf 	bl	8000544 <__aeabi_ui2d>
 8008986:	4b8c      	ldr	r3, [pc, #560]	; (8008bb8 <_ZN5usart4initEP14usart_config_t+0x318>)
 8008988:	2200      	movs	r2, #0
 800898a:	f7f7 fe55 	bl	8000638 <__aeabi_dmul>
 800898e:	4680      	mov	r8, r0
 8008990:	6838      	ldr	r0, [r7, #0]
 8008992:	4689      	mov	r9, r1
 8008994:	f7f7 fdd6 	bl	8000544 <__aeabi_ui2d>
 8008998:	4602      	mov	r2, r0
 800899a:	460b      	mov	r3, r1
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	f7f7 ff74 	bl	800088c <__aeabi_ddiv>
 80089a4:	f7f8 f940 	bl	8000c28 <__aeabi_d2f>
 80089a8:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Fraction = 0x00UL;
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 80089ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 80089b0:	ee17 3a90 	vmov	r3, s15
 80089b4:	fa1f f883 	uxth.w	r8, r3
 80089b8:	f7f7 fde6 	bl	8000588 <__aeabi_f2d>
 80089bc:	4b7f      	ldr	r3, [pc, #508]	; (8008bbc <_ZN5usart4initEP14usart_config_t+0x31c>)
 80089be:	2200      	movs	r2, #0
 80089c0:	f7f7 fe3a 	bl	8000638 <__aeabi_dmul>
 80089c4:	f7f8 f910 	bl	8000be8 <__aeabi_d2uiz>
 80089c8:	fa1f f980 	uxth.w	r9, r0
 80089cc:	4640      	mov	r0, r8
 80089ce:	f7f7 fdc9 	bl	8000564 <__aeabi_i2d>
 80089d2:	4b7a      	ldr	r3, [pc, #488]	; (8008bbc <_ZN5usart4initEP14usart_config_t+0x31c>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	f7f7 fe2f 	bl	8000638 <__aeabi_dmul>
 80089da:	f7f8 f905 	bl	8000be8 <__aeabi_d2uiz>
 80089de:	b280      	uxth	r0, r0
 80089e0:	eba9 0000 	sub.w	r0, r9, r0
 80089e4:	f7f7 fdbe 	bl	8000564 <__aeabi_i2d>
 80089e8:	a369      	add	r3, pc, #420	; (adr r3, 8008b90 <_ZN5usart4initEP14usart_config_t+0x2f0>)
 80089ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ee:	f7f7 fe23 	bl	8000638 <__aeabi_dmul>
 80089f2:	f7f8 f919 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80089f6:	ee07 0a90 	vmov	s15, r0
 80089fa:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 80089fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008a02:	f002 f85d 	bl	800aac0 <ceilf>
	DIV_Fraction = ceil(Fraction);
 8008a06:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8008a0a:	793a      	ldrb	r2, [r7, #4]
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8008a0c:	ee10 3a10 	vmov	r3, s0
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8008a16:	60a3      	str	r3, [r4, #8]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8008a18:	b36a      	cbz	r2, 8008a76 <_ZN5usart4initEP14usart_config_t+0x1d6>

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	2a03      	cmp	r2, #3
 8008a1e:	f240 8104 	bls.w	8008c2a <_ZN5usart4initEP14usart_config_t+0x38a>
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}

#if defined(USART1)
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8008a22:	4b5d      	ldr	r3, [pc, #372]	; (8008b98 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8008a24:	429c      	cmp	r4, r3
 8008a26:	d04c      	beq.n	8008ac2 <_ZN5usart4initEP14usart_config_t+0x222>
#endif /* defined(USART1) */
#if defined(USART2)
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8008a28:	4b5c      	ldr	r3, [pc, #368]	; (8008b9c <_ZN5usart4initEP14usart_config_t+0x2fc>)
 8008a2a:	429c      	cmp	r4, r3
 8008a2c:	f000 80e5 	beq.w	8008bfa <_ZN5usart4initEP14usart_config_t+0x35a>
#endif /* defined(USART2) */
#if defined(USART3)
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8008a30:	4b5b      	ldr	r3, [pc, #364]	; (8008ba0 <_ZN5usart4initEP14usart_config_t+0x300>)
 8008a32:	429c      	cmp	r4, r3
 8008a34:	f000 80e5 	beq.w	8008c02 <_ZN5usart4initEP14usart_config_t+0x362>
#endif /* defined(USART3) */
#if defined(UART4)
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8008a38:	4b5a      	ldr	r3, [pc, #360]	; (8008ba4 <_ZN5usart4initEP14usart_config_t+0x304>)
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d053      	beq.n	8008ae6 <_ZN5usart4initEP14usart_config_t+0x246>
#endif /* defined(USART4) */
#if defined(UART5)
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8008a3e:	4b5a      	ldr	r3, [pc, #360]	; (8008ba8 <_ZN5usart4initEP14usart_config_t+0x308>)
 8008a40:	429c      	cmp	r4, r3
 8008a42:	f000 80e6 	beq.w	8008c12 <_ZN5usart4initEP14usart_config_t+0x372>
#endif /* defined(USART5) */
#if defined(USART6)
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8008a46:	4b59      	ldr	r3, [pc, #356]	; (8008bac <_ZN5usart4initEP14usart_config_t+0x30c>)
 8008a48:	429c      	cmp	r4, r3
 8008a4a:	f000 80e6 	beq.w	8008c1a <_ZN5usart4initEP14usart_config_t+0x37a>
#endif /* defined(USART6) */
#if defined(UART7)
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8008a4e:	4b58      	ldr	r3, [pc, #352]	; (8008bb0 <_ZN5usart4initEP14usart_config_t+0x310>)
 8008a50:	429c      	cmp	r4, r3
 8008a52:	f000 80e6 	beq.w	8008c22 <_ZN5usart4initEP14usart_config_t+0x382>
#endif /* defined(USART7) */
#if defined(UART8)
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8008a56:	4b57      	ldr	r3, [pc, #348]	; (8008bb4 <_ZN5usart4initEP14usart_config_t+0x314>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	f000 80d6 	beq.w	8008c0a <_ZN5usart4initEP14usart_config_t+0x36a>
#endif /* defined(UART8) */
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8008a5e:	f995 3024 	ldrsb.w	r3, [r5, #36]	; 0x24
  if ((int32_t)(IRQn) >= 0)
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	da30      	bge.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008a66:	4956      	ldr	r1, [pc, #344]	; (8008bc0 <_ZN5usart4initEP14usart_config_t+0x320>)
 8008a68:	f003 030f 	and.w	r3, r3, #15
 8008a6c:	0112      	lsls	r2, r2, #4
 8008a6e:	4419      	add	r1, r3
 8008a70:	b2d2      	uxtb	r2, r2
 8008a72:	760a      	strb	r2, [r1, #24]


stm_ret_t usart::transmit(uint8_t data){
	stm_ret_t ret;

	_usart -> DR = data;
 8008a74:	682c      	ldr	r4, [r5, #0]
	stm_ret_t ret;
 8008a76:	2200      	movs	r2, #0
 8008a78:	9209      	str	r2, [sp, #36]	; 0x24
	_usart -> DR = data;
 8008a7a:	220a      	movs	r2, #10
 8008a7c:	6062      	str	r2, [r4, #4]

	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008a7e:	af02      	add	r7, sp, #8
 8008a80:	2264      	movs	r2, #100	; 0x64
 8008a82:	4621      	mov	r1, r4
	stm_ret_t ret;
 8008a84:	2301      	movs	r3, #1
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008a86:	9200      	str	r2, [sp, #0]
 8008a88:	4638      	mov	r0, r7
 8008a8a:	2240      	movs	r2, #64	; 0x40
	stm_ret_t ret;
 8008a8c:	f88d 3020 	strb.w	r3, [sp, #32]
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008a90:	f001 f99e 	bl	8009dd0 <wait_flag_in_register_timeout>
 8008a94:	e897 0003 	ldmia.w	r7, {r0, r1}
 8008a98:	ac08      	add	r4, sp, #32
 8008a9a:	e884 0003 	stmia.w	r4, {r0, r1}
	if(!is_oke(&ret)){
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f001 f9d8 	bl	8009e54 <is_oke>
 8008aa4:	b1d0      	cbz	r0, 8008adc <_ZN5usart4initEP14usart_config_t+0x23c>
 8008aa6:	682b      	ldr	r3, [r5, #0]
		set_return_line(&ret, __LINE__);
		return ret;
	}

	volatile uint32_t tmp = _usart -> SR;
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	9205      	str	r2, [sp, #20]
	tmp = _usart -> DR;
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	9305      	str	r3, [sp, #20]
	(void)tmp;
 8008ab0:	9b05      	ldr	r3, [sp, #20]
	return {STM_OKE, 0};
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4630      	mov	r0, r6
	return {STM_OKE, 0};
 8008ab8:	7032      	strb	r2, [r6, #0]
 8008aba:	6073      	str	r3, [r6, #4]
}
 8008abc:	b00b      	add	sp, #44	; 0x2c
 8008abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8008ac2:	2325      	movs	r3, #37	; 0x25
 8008ac4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ac8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8008acc:	0112      	lsls	r2, r2, #4
 8008ace:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8008ad2:	b2d2      	uxtb	r2, r2
 8008ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	_usart -> DR = data;
 8008ad8:	682c      	ldr	r4, [r5, #0]
 8008ada:	e7cc      	b.n	8008a76 <_ZN5usart4initEP14usart_config_t+0x1d6>
		set_return_line(&ret, __LINE__);
 8008adc:	21fe      	movs	r1, #254	; 0xfe
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f001 f9b6 	bl	8009e50 <set_return_line>
		return ret;
 8008ae4:	e7e5      	b.n	8008ab2 <_ZN5usart4initEP14usart_config_t+0x212>
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8008ae6:	2334      	movs	r3, #52	; 0x34
 8008ae8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008aec:	e7ec      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8008aee:	4a35      	ldr	r2, [pc, #212]	; (8008bc4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008af0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008af2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008af6:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008af8:	2002      	movs	r0, #2
 8008afa:	f7fe fe8b 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == UART4){
 8008afe:	682c      	ldr	r4, [r5, #0]
 8008b00:	4b28      	ldr	r3, [pc, #160]	; (8008ba4 <_ZN5usart4initEP14usart_config_t+0x304>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b02:	9004      	str	r0, [sp, #16]
	if(_usart == UART4){
 8008b04:	429c      	cmp	r4, r3
 8008b06:	f47f af24 	bne.w	8008952 <_ZN5usart4initEP14usart_config_t+0xb2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8008b0a:	4a2e      	ldr	r2, [pc, #184]	; (8008bc4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008b0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008b0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b12:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b14:	2002      	movs	r0, #2
 8008b16:	f7fe fe7d 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == UART5){
 8008b1a:	682c      	ldr	r4, [r5, #0]
 8008b1c:	4b22      	ldr	r3, [pc, #136]	; (8008ba8 <_ZN5usart4initEP14usart_config_t+0x308>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b1e:	9004      	str	r0, [sp, #16]
	if(_usart == UART5){
 8008b20:	429c      	cmp	r4, r3
 8008b22:	f47f af1a 	bne.w	800895a <_ZN5usart4initEP14usart_config_t+0xba>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8008b26:	4a27      	ldr	r2, [pc, #156]	; (8008bc4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008b28:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b2e:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b30:	2002      	movs	r0, #2
 8008b32:	f7fe fe6f 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == USART6){
 8008b36:	682c      	ldr	r4, [r5, #0]
 8008b38:	4b1c      	ldr	r3, [pc, #112]	; (8008bac <_ZN5usart4initEP14usart_config_t+0x30c>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b3a:	9004      	str	r0, [sp, #16]
	if(_usart == USART6){
 8008b3c:	429c      	cmp	r4, r3
 8008b3e:	f47f af10 	bne.w	8008962 <_ZN5usart4initEP14usart_config_t+0xc2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8008b42:	4a20      	ldr	r2, [pc, #128]	; (8008bc4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008b44:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008b46:	f043 0320 	orr.w	r3, r3, #32
 8008b4a:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f7fe fe61 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == UART7){
 8008b52:	682c      	ldr	r4, [r5, #0]
 8008b54:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <_ZN5usart4initEP14usart_config_t+0x310>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008b56:	9004      	str	r0, [sp, #16]
	if(_usart == UART7){
 8008b58:	429c      	cmp	r4, r3
 8008b5a:	f47f af06 	bne.w	800896a <_ZN5usart4initEP14usart_config_t+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
 8008b5e:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008b60:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008b62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b66:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b68:	2002      	movs	r0, #2
 8008b6a:	f7fe fe53 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == UART8){
 8008b6e:	682c      	ldr	r4, [r5, #0]
 8008b70:	4b10      	ldr	r3, [pc, #64]	; (8008bb4 <_ZN5usart4initEP14usart_config_t+0x314>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b72:	9004      	str	r0, [sp, #16]
	if(_usart == UART8){
 8008b74:	429c      	cmp	r4, r3
 8008b76:	f47f aefc 	bne.w	8008972 <_ZN5usart4initEP14usart_config_t+0xd2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8008b7a:	4a12      	ldr	r2, [pc, #72]	; (8008bc4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008b7c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b82:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8008b84:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b86:	f7fe fe45 	bl	8007814 <rcc_get_bus_frequency>
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008b8a:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b8c:	9004      	str	r0, [sp, #16]
 8008b8e:	e6f0      	b.n	8008972 <_ZN5usart4initEP14usart_config_t+0xd2>
 8008b90:	47ae147b 	.word	0x47ae147b
 8008b94:	3f847ae1 	.word	0x3f847ae1
 8008b98:	40011000 	.word	0x40011000
 8008b9c:	40004400 	.word	0x40004400
 8008ba0:	40004800 	.word	0x40004800
 8008ba4:	40004c00 	.word	0x40004c00
 8008ba8:	40005000 	.word	0x40005000
 8008bac:	40011400 	.word	0x40011400
 8008bb0:	40007800 	.word	0x40007800
 8008bb4:	40007c00 	.word	0x40007c00
 8008bb8:	3fb00000 	.word	0x3fb00000
 8008bbc:	40590000 	.word	0x40590000
 8008bc0:	e000ecfc 	.word	0xe000ecfc
 8008bc4:	40023800 	.word	0x40023800
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8008bc8:	4a28      	ldr	r2, [pc, #160]	; (8008c6c <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8008bca:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008bcc:	f043 0310 	orr.w	r3, r3, #16
 8008bd0:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008bd2:	2003      	movs	r0, #3
 8008bd4:	f7fe fe1e 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == USART2){
 8008bd8:	682c      	ldr	r4, [r5, #0]
 8008bda:	4b25      	ldr	r3, [pc, #148]	; (8008c70 <_ZN5usart4initEP14usart_config_t+0x3d0>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008bdc:	9004      	str	r0, [sp, #16]
	if(_usart == USART2){
 8008bde:	429c      	cmp	r4, r3
 8008be0:	f47f aeaf 	bne.w	8008942 <_ZN5usart4initEP14usart_config_t+0xa2>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8008be4:	4a21      	ldr	r2, [pc, #132]	; (8008c6c <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8008be6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008bec:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8008bee:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008bf0:	f7fe fe10 	bl	8007814 <rcc_get_bus_frequency>
	if(_usart == USART3){
 8008bf4:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008bf6:	9004      	str	r0, [sp, #16]
 8008bf8:	e6a3      	b.n	8008942 <_ZN5usart4initEP14usart_config_t+0xa2>
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8008bfa:	2326      	movs	r3, #38	; 0x26
 8008bfc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c00:	e762      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8008c02:	2327      	movs	r3, #39	; 0x27
 8008c04:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c08:	e75e      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8008c0a:	2353      	movs	r3, #83	; 0x53
 8008c0c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c10:	e75a      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8008c12:	2335      	movs	r3, #53	; 0x35
 8008c14:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c18:	e756      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8008c1a:	2347      	movs	r3, #71	; 0x47
 8008c1c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c20:	e752      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8008c22:	2352      	movs	r3, #82	; 0x52
 8008c24:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008c28:	e74e      	b.n	8008ac8 <_ZN5usart4initEP14usart_config_t+0x228>
			set_return(&ret, STM_ERR, __LINE__);
 8008c2a:	a806      	add	r0, sp, #24
 8008c2c:	228c      	movs	r2, #140	; 0x8c
 8008c2e:	2100      	movs	r1, #0
 8008c30:	f001 f90a 	bl	8009e48 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8008c34:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <_ZN5usart4initEP14usart_config_t+0x3d4>)
 8008c36:	4a10      	ldr	r2, [pc, #64]	; (8008c78 <_ZN5usart4initEP14usart_config_t+0x3d8>)
 8008c38:	4910      	ldr	r1, [pc, #64]	; (8008c7c <_ZN5usart4initEP14usart_config_t+0x3dc>)
 8008c3a:	4811      	ldr	r0, [pc, #68]	; (8008c80 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8008c3c:	f000 ffd0 	bl	8009be0 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8008c40:	4910      	ldr	r1, [pc, #64]	; (8008c84 <_ZN5usart4initEP14usart_config_t+0x3e4>)
 8008c42:	480f      	ldr	r0, [pc, #60]	; (8008c80 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8008c44:	2205      	movs	r2, #5
 8008c46:	f000 ff4f 	bl	8009ae8 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8008c4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8008c4e:	f7ff fc87 	bl	8008560 <systick_delay_ms>
 8008c52:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008c56:	490c      	ldr	r1, [pc, #48]	; (8008c88 <_ZN5usart4initEP14usart_config_t+0x3e8>)
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <_ZN5usart4initEP14usart_config_t+0x3ec>)
 8008c5a:	68ca      	ldr	r2, [r1, #12]
 8008c5c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008c60:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008c62:	60cb      	str	r3, [r1, #12]
 8008c64:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008c68:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008c6a:	e7fd      	b.n	8008c68 <_ZN5usart4initEP14usart_config_t+0x3c8>
 8008c6c:	40023800 	.word	0x40023800
 8008c70:	40004400 	.word	0x40004400
 8008c74:	0800e858 	.word	0x0800e858
 8008c78:	0800e980 	.word	0x0800e980
 8008c7c:	0800e7f0 	.word	0x0800e7f0
 8008c80:	0800e9a8 	.word	0x0800e9a8
 8008c84:	0800e83c 	.word	0x0800e83c
 8008c88:	e000ed00 	.word	0xe000ed00
 8008c8c:	05fa0004 	.word	0x05fa0004

08008c90 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>:
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8008c90:	b570      	push	{r4, r5, r6, lr}
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008c92:	6a0d      	ldr	r5, [r1, #32]
	stm_ret_t ret;
 8008c94:	2601      	movs	r6, #1
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008c96:	792d      	ldrb	r5, [r5, #4]
	stm_ret_t ret;
 8008c98:	7006      	strb	r6, [r0, #0]
 8008c9a:	2600      	movs	r6, #0
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8008c9c:	4604      	mov	r4, r0
	stm_ret_t ret;
 8008c9e:	6046      	str	r6, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008ca0:	b11d      	cbz	r5, 8008caa <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x1a>
		parameter = param;
 8008ca2:	e9c1 3203 	strd	r3, r2, [r1, #12]
}
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	bd70      	pop	{r4, r5, r6, pc}
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8008caa:	22ed      	movs	r2, #237	; 0xed
 8008cac:	2103      	movs	r1, #3
 8008cae:	f001 f8cb 	bl	8009e48 <set_return>
		LOG_WARN(TAG, "%s -> %s, USART peripheral control unsuported register event handler.", __FILE__, __FUNCTION__ );
 8008cb2:	4b04      	ldr	r3, [pc, #16]	; (8008cc4 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x34>)
 8008cb4:	4a04      	ldr	r2, [pc, #16]	; (8008cc8 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x38>)
 8008cb6:	4905      	ldr	r1, [pc, #20]	; (8008ccc <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x3c>)
 8008cb8:	4805      	ldr	r0, [pc, #20]	; (8008cd0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x40>)
 8008cba:	f000 ff53 	bl	8009b64 <LOG_WARN>
}
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	bd70      	pop	{r4, r5, r6, pc}
 8008cc2:	bf00      	nop
 8008cc4:	0800e9b0 	.word	0x0800e9b0
 8008cc8:	0800e980 	.word	0x0800e980
 8008ccc:	0800e9c8 	.word	0x0800e9c8
 8008cd0:	0800e9a8 	.word	0x0800e9a8

08008cd4 <_ZN5usart8transmitEPht>:

	return ret;
}


stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8008cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cd8:	4615      	mov	r5, r2
	stm_ret_t ret;
 8008cda:	2201      	movs	r2, #1
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8008cdc:	b085      	sub	sp, #20
	stm_ret_t ret;
 8008cde:	7002      	strb	r2, [r0, #0]
 8008ce0:	2200      	movs	r2, #0
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	4688      	mov	r8, r1
	stm_ret_t ret;
 8008ce6:	6042      	str	r2, [r0, #4]
	uint16_t TxCount = len;
 8008ce8:	18ef      	adds	r7, r5, r3

	while(TxCount--) {
		_usart -> DR = *data++;

		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008cea:	ae02      	add	r6, sp, #8
 8008cec:	f04f 0964 	mov.w	r9, #100	; 0x64
 8008cf0:	e011      	b.n	8008d16 <_ZN5usart8transmitEPht+0x42>
		_usart -> DR = *data++;
 8008cf2:	f8d8 1000 	ldr.w	r1, [r8]
 8008cf6:	f815 cb01 	ldrb.w	ip, [r5], #1
 8008cfa:	f8c1 c004 	str.w	ip, [r1, #4]
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008cfe:	f8cd 9000 	str.w	r9, [sp]
 8008d02:	f001 f865 	bl	8009dd0 <wait_flag_in_register_timeout>
 8008d06:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008d0a:	e884 0003 	stmia.w	r4, {r0, r1}
		if(!is_oke(&ret)){
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f001 f8a0 	bl	8009e54 <is_oke>
 8008d14:	b150      	cbz	r0, 8008d2c <_ZN5usart8transmitEPht+0x58>
	while(TxCount--) {
 8008d16:	42bd      	cmp	r5, r7
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008d18:	f04f 0301 	mov.w	r3, #1
 8008d1c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8008d20:	4630      	mov	r0, r6
	while(TxCount--) {
 8008d22:	d1e6      	bne.n	8008cf2 <_ZN5usart8transmitEPht+0x1e>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	return ret;
}
 8008d24:	4620      	mov	r0, r4
 8008d26:	b005      	add	sp, #20
 8008d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			set_return_line(&ret, __LINE__);
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f240 1113 	movw	r1, #275	; 0x113
 8008d32:	f001 f88d 	bl	8009e50 <set_return_line>
}
 8008d36:	4620      	mov	r0, r4
 8008d38:	b005      	add	sp, #20
 8008d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d3e:	bf00      	nop

08008d40 <_ZN5usart24receive_to_idle_start_itEt>:
}



stm_ret_t usart::receive_start_it(uint16_t buffer_size){
	stm_ret_t ret;
 8008d40:	2301      	movs	r3, #1
}
#endif /* ENABLE_DMA */



stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008d42:	b570      	push	{r4, r5, r6, lr}
	stm_ret_t ret;
 8008d44:	7003      	strb	r3, [r0, #0]
 8008d46:	2300      	movs	r3, #0
 8008d48:	6043      	str	r3, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008d4a:	6a0b      	ldr	r3, [r1, #32]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008d4c:	4616      	mov	r6, r2
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008d4e:	791a      	ldrb	r2, [r3, #4]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008d50:	b082      	sub	sp, #8
 8008d52:	460c      	mov	r4, r1
 8008d54:	4605      	mov	r5, r0
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d047      	beq.n	8008dea <_ZN5usart24receive_to_idle_start_itEt+0xaa>
		if(_conf -> interruptoption && (USART_RECEIVE_INTERRUPT | USART_TRANSMIT_RECEIVE_INTERRUPT))
 8008d5a:	795b      	ldrb	r3, [r3, #5]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d03d      	beq.n	8008ddc <_ZN5usart24receive_to_idle_start_itEt+0x9c>
			_usart -> CR1 |= USART_CR1_RXNEIE;
 8008d60:	680a      	ldr	r2, [r1, #0]
 8008d62:	68d3      	ldr	r3, [r2, #12]
 8008d64:	f043 0320 	orr.w	r3, r3, #32
 8008d68:	60d3      	str	r3, [r2, #12]
	if(rxbuffer != NULL) {
 8008d6a:	6960      	ldr	r0, [r4, #20]
	rxlen = buffer_size;
 8008d6c:	8326      	strh	r6, [r4, #24]
	rxcount = 0;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	8363      	strh	r3, [r4, #26]
	reception = USART_RECEPTION_NORMAL;
 8008d72:	7763      	strb	r3, [r4, #29]
	if(rxbuffer != NULL) {
 8008d74:	b110      	cbz	r0, 8008d7c <_ZN5usart24receive_to_idle_start_itEt+0x3c>
		free(rxbuffer);
 8008d76:	f001 ff45 	bl	800ac04 <free>
	rxbuffer = (uint8_t *)malloc((rxlen +1) * sizeof(uint8_t));
 8008d7a:	8b26      	ldrh	r6, [r4, #24]
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	1870      	adds	r0, r6, r1
 8008d80:	f001 ff0c 	bl	800ab9c <calloc>
 8008d84:	4606      	mov	r6, r0
 8008d86:	6160      	str	r0, [r4, #20]
	if(rxbuffer == NULL){
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	d03b      	beq.n	8008e04 <_ZN5usart24receive_to_idle_start_itEt+0xc4>
	_usart -> CR1 |= USART_CR1_PEIE;
 8008d8c:	6823      	ldr	r3, [r4, #0]
	__NVIC_ClearPendingIRQ(IRQn);
 8008d8e:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
	_usart -> CR1 |= USART_CR1_PEIE;
 8008d92:	68d9      	ldr	r1, [r3, #12]
 8008d94:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008d98:	60d9      	str	r1, [r3, #12]
	_usart -> CR3 |= USART_CR3_EIE;
 8008d9a:	6959      	ldr	r1, [r3, #20]
  if ((int32_t)(IRQn) >= 0)
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	f041 0101 	orr.w	r1, r1, #1
 8008da2:	6159      	str	r1, [r3, #20]
 8008da4:	db0c      	blt.n	8008dc0 <_ZN5usart24receive_to_idle_start_itEt+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008da6:	f002 001f 	and.w	r0, r2, #31
 8008daa:	0952      	lsrs	r2, r2, #5
 8008dac:	0092      	lsls	r2, r2, #2
 8008dae:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8008db2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8008db6:	2101      	movs	r1, #1
 8008db8:	4081      	lsls	r1, r0
 8008dba:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008dbe:	6011      	str	r1, [r2, #0]
	volatile uint32_t tmp = _usart -> SR;
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	9201      	str	r2, [sp, #4]
	tmp = _usart -> DR;
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	9201      	str	r2, [sp, #4]
	(void)tmp;
 8008dc8:	9a01      	ldr	r2, [sp, #4]
	stm_ret_t ret = receive_start_it(buffer_size);

	reception = USART_RECEPTION_TOIDLE;

	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008dca:	68da      	ldr	r2, [r3, #12]
	reception = USART_RECEPTION_TOIDLE;
 8008dcc:	2102      	movs	r1, #2
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008dce:	f042 0210 	orr.w	r2, r2, #16

	return ret;
}
 8008dd2:	4628      	mov	r0, r5
	reception = USART_RECEPTION_TOIDLE;
 8008dd4:	7761      	strb	r1, [r4, #29]
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008dd6:	60da      	str	r2, [r3, #12]
}
 8008dd8:	b002      	add	sp, #8
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERROR(TAG, "%s -> %s, USART not selected receive interrupt.", __FILE__, __FUNCTION__ );
 8008ddc:	4b10      	ldr	r3, [pc, #64]	; (8008e20 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8008dde:	4a11      	ldr	r2, [pc, #68]	; (8008e24 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8008de0:	4911      	ldr	r1, [pc, #68]	; (8008e28 <_ZN5usart24receive_to_idle_start_itEt+0xe8>)
 8008de2:	4812      	ldr	r0, [pc, #72]	; (8008e2c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8008de4:	f000 fefc 	bl	8009be0 <LOG_ERROR>
 8008de8:	e7bf      	b.n	8008d6a <_ZN5usart24receive_to_idle_start_itEt+0x2a>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8008dea:	f240 12a5 	movw	r2, #421	; 0x1a5
 8008dee:	2103      	movs	r1, #3
 8008df0:	f001 f82a 	bl	8009e48 <set_return>
		LOG_ERROR(TAG, "%s -> %s, USART not selected interrupt control.", __FILE__, __FUNCTION__ );
 8008df4:	4b0a      	ldr	r3, [pc, #40]	; (8008e20 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8008df6:	4a0b      	ldr	r2, [pc, #44]	; (8008e24 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8008df8:	490d      	ldr	r1, [pc, #52]	; (8008e30 <_ZN5usart24receive_to_idle_start_itEt+0xf0>)
 8008dfa:	480c      	ldr	r0, [pc, #48]	; (8008e2c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8008dfc:	f000 fef0 	bl	8009be0 <LOG_ERROR>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008e00:	6823      	ldr	r3, [r4, #0]
		return ret;
 8008e02:	e7e2      	b.n	8008dca <_ZN5usart24receive_to_idle_start_itEt+0x8a>
		LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
 8008e04:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8008e06:	4a07      	ldr	r2, [pc, #28]	; (8008e24 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8008e08:	490a      	ldr	r1, [pc, #40]	; (8008e34 <_ZN5usart24receive_to_idle_start_itEt+0xf4>)
 8008e0a:	4808      	ldr	r0, [pc, #32]	; (8008e2c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8008e0c:	f000 fee8 	bl	8009be0 <LOG_ERROR>
		set_return(&ret, STM_ERR, __LINE__);
 8008e10:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	f001 f816 	bl	8009e48 <set_return>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008e1c:	6823      	ldr	r3, [r4, #0]
		return ret;
 8008e1e:	e7d4      	b.n	8008dca <_ZN5usart24receive_to_idle_start_itEt+0x8a>
 8008e20:	0800eab8 	.word	0x0800eab8
 8008e24:	0800e980 	.word	0x0800e980
 8008e28:	0800eacc 	.word	0x0800eacc
 8008e2c:	0800e9a8 	.word	0x0800e9a8
 8008e30:	0800ea88 	.word	0x0800ea88
 8008e34:	0800ea18 	.word	0x0800ea18

08008e38 <_ZN5usart10get_bufferEPPh>:
	this->endchar = '\0';
	return receive_stop_dma();
}
#endif /* ENABLE_DMA */

stm_ret_t usart::get_buffer(uint8_t **data){
 8008e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e3a:	460c      	mov	r4, r1
	stm_ret_t ret;

	if(rxbuffer != NULL){
 8008e3c:	6949      	ldr	r1, [r1, #20]
	stm_ret_t ret;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	2700      	movs	r7, #0
stm_ret_t usart::get_buffer(uint8_t **data){
 8008e42:	b083      	sub	sp, #12
 8008e44:	4605      	mov	r5, r0
	stm_ret_t ret;
 8008e46:	7003      	strb	r3, [r0, #0]
 8008e48:	6047      	str	r7, [r0, #4]
	if(rxbuffer != NULL){
 8008e4a:	b1b1      	cbz	r1, 8008e7a <_ZN5usart10get_bufferEPPh+0x42>
		rxbuffer[rxcount+1] = '\0';
 8008e4c:	8b63      	ldrh	r3, [r4, #26]
 8008e4e:	4419      	add	r1, r3
 8008e50:	4616      	mov	r6, r2
 8008e52:	704f      	strb	r7, [r1, #1]
		*data = (uint8_t *)malloc(rxcount+1);
 8008e54:	8b62      	ldrh	r2, [r4, #26]
 8008e56:	3201      	adds	r2, #1
 8008e58:	4610      	mov	r0, r2
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	f001 feca 	bl	800abf4 <malloc>
 8008e60:	6030      	str	r0, [r6, #0]
			LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
	#endif
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
		memcpy(*data, rxbuffer, rxcount+1);
 8008e62:	6966      	ldr	r6, [r4, #20]
 8008e64:	9a01      	ldr	r2, [sp, #4]
 8008e66:	4631      	mov	r1, r6
 8008e68:	f001 fed4 	bl	800ac14 <memcpy>

		free(rxbuffer);
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f001 fec9 	bl	800ac04 <free>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */

	return ret;
}
 8008e72:	4628      	mov	r0, r5
		rxbuffer = NULL;
 8008e74:	6167      	str	r7, [r4, #20]
}
 8008e76:	b003      	add	sp, #12
 8008e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	set_return(&ret, STM_ERR, __LINE__);
 8008e7a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8008e7e:	f000 ffe3 	bl	8009e48 <set_return>
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
 8008e82:	4b04      	ldr	r3, [pc, #16]	; (8008e94 <_ZN5usart10get_bufferEPPh+0x5c>)
 8008e84:	4a04      	ldr	r2, [pc, #16]	; (8008e98 <_ZN5usart10get_bufferEPPh+0x60>)
 8008e86:	4905      	ldr	r1, [pc, #20]	; (8008e9c <_ZN5usart10get_bufferEPPh+0x64>)
 8008e88:	4805      	ldr	r0, [pc, #20]	; (8008ea0 <_ZN5usart10get_bufferEPPh+0x68>)
 8008e8a:	f000 fea9 	bl	8009be0 <LOG_ERROR>
}
 8008e8e:	4628      	mov	r0, r5
 8008e90:	b003      	add	sp, #12
 8008e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e94:	0800eafc 	.word	0x0800eafc
 8008e98:	0800e980 	.word	0x0800e980
 8008e9c:	0800eb08 	.word	0x0800eb08
 8008ea0:	0800e9a8 	.word	0x0800e9a8

08008ea4 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 8008ea4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008ea6:	4c3c      	ldr	r4, [pc, #240]	; (8008f98 <USART1_IRQHandler+0xf4>)
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008eae:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 8008eb0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008eb2:	d51a      	bpl.n	8008eea <USART1_IRQHandler+0x46>
 8008eb4:	068d      	lsls	r5, r1, #26
 8008eb6:	d518      	bpl.n	8008eea <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008ebc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ebe:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ec0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ec2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ec4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008ec8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008eca:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ecc:	d93a      	bls.n	8008f44 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008ece:	6962      	ldr	r2, [r4, #20]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008ed4:	7f63      	ldrb	r3, [r4, #29]
 8008ed6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008ed8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008eda:	d04c      	beq.n	8008f76 <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008edc:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008ede:	3301      	adds	r3, #1
 8008ee0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	b95b      	cbnz	r3, 8008efe <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 8008ee6:	b005      	add	sp, #20
 8008ee8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008eea:	0650      	lsls	r0, r2, #25
 8008eec:	d501      	bpl.n	8008ef2 <USART1_IRQHandler+0x4e>
 8008eee:	064d      	lsls	r5, r1, #25
 8008ef0:	d41d      	bmi.n	8008f2e <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008ef2:	06d0      	lsls	r0, r2, #27
 8008ef4:	d408      	bmi.n	8008f08 <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008ef6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ef8:	6923      	ldr	r3, [r4, #16]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d0f3      	beq.n	8008ee6 <USART1_IRQHandler+0x42>
 8008efe:	68e1      	ldr	r1, [r4, #12]
}
 8008f00:	b005      	add	sp, #20
 8008f02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008f06:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008f08:	06ca      	lsls	r2, r1, #27
 8008f0a:	d5f4      	bpl.n	8008ef6 <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008f10:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008f12:	6859      	ldr	r1, [r3, #4]
 8008f14:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008f16:	2a02      	cmp	r2, #2
		(void)tmp;
 8008f18:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008f1a:	d1ec      	bne.n	8008ef6 <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008f22:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	065b      	lsls	r3, r3, #25
 8008f28:	d40e      	bmi.n	8008f48 <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008f2a:	2004      	movs	r0, #4
 8008f2c:	e7e4      	b.n	8008ef8 <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008f36:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008f3e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008f40:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008f42:	e7d9      	b.n	8008ef8 <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008f44:	2003      	movs	r0, #3
 8008f46:	e7d7      	b.n	8008ef8 <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008f48:	68a0      	ldr	r0, [r4, #8]
 8008f4a:	8b25      	ldrh	r5, [r4, #24]
 8008f4c:	f7fd fb72 	bl	8006634 <_ZN3dma11get_counterEv>
 8008f50:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008f52:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008f54:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008f56:	f7fd fb73 	bl	8006640 <_ZN3dma10get_configEv>
 8008f5a:	7983      	ldrb	r3, [r0, #6]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d0e4      	beq.n	8008f2a <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008f60:	a802      	add	r0, sp, #8
 8008f62:	68a1      	ldr	r1, [r4, #8]
 8008f64:	f7fd fb08 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	6953      	ldr	r3, [r2, #20]
 8008f6c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008f70:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008f72:	6153      	str	r3, [r2, #20]
 8008f74:	e7c0      	b.n	8008ef8 <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008f76:	6961      	ldr	r1, [r4, #20]
 8008f78:	7f22      	ldrb	r2, [r4, #28]
 8008f7a:	5cc9      	ldrb	r1, [r1, r3]
 8008f7c:	4291      	cmp	r1, r2
 8008f7e:	d1ad      	bne.n	8008edc <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	68d1      	ldr	r1, [r2, #12]
 8008f84:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008f88:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008f8a:	6951      	ldr	r1, [r2, #20]
 8008f8c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008f90:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008f92:	6151      	str	r1, [r2, #20]
 8008f94:	e7a3      	b.n	8008ede <USART1_IRQHandler+0x3a>
 8008f96:	bf00      	nop
 8008f98:	2000b91c 	.word	0x2000b91c

08008f9c <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 8008f9c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008f9e:	4c3c      	ldr	r4, [pc, #240]	; (8009090 <USART2_IRQHandler+0xf4>)
 8008fa0:	6823      	ldr	r3, [r4, #0]
 8008fa2:	681a      	ldr	r2, [r3, #0]
 8008fa4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008fa6:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 8008fa8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008faa:	d51a      	bpl.n	8008fe2 <USART2_IRQHandler+0x46>
 8008fac:	068d      	lsls	r5, r1, #26
 8008fae:	d518      	bpl.n	8008fe2 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008fb4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008fb6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008fb8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008fba:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008fbc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008fc0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008fc2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008fc4:	d93a      	bls.n	800903c <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008fc6:	6962      	ldr	r2, [r4, #20]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008fcc:	7f63      	ldrb	r3, [r4, #29]
 8008fce:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008fd0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008fd2:	d04c      	beq.n	800906e <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008fd4:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	b95b      	cbnz	r3, 8008ff6 <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 8008fde:	b005      	add	sp, #20
 8008fe0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008fe2:	0650      	lsls	r0, r2, #25
 8008fe4:	d501      	bpl.n	8008fea <USART2_IRQHandler+0x4e>
 8008fe6:	064d      	lsls	r5, r1, #25
 8008fe8:	d41d      	bmi.n	8009026 <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008fea:	06d0      	lsls	r0, r2, #27
 8008fec:	d408      	bmi.n	8009000 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008fee:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f3      	beq.n	8008fde <USART2_IRQHandler+0x42>
 8008ff6:	68e1      	ldr	r1, [r4, #12]
}
 8008ff8:	b005      	add	sp, #20
 8008ffa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ffe:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8009000:	06ca      	lsls	r2, r1, #27
 8009002:	d5f4      	bpl.n	8008fee <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009008:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800900a:	6859      	ldr	r1, [r3, #4]
 800900c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800900e:	2a02      	cmp	r2, #2
		(void)tmp;
 8009010:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009012:	d1ec      	bne.n	8008fee <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800901a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	065b      	lsls	r3, r3, #25
 8009020:	d40e      	bmi.n	8009040 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8009022:	2004      	movs	r0, #4
 8009024:	e7e4      	b.n	8008ff0 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009026:	681a      	ldr	r2, [r3, #0]
 8009028:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800902e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009036:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009038:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800903a:	e7d9      	b.n	8008ff0 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800903c:	2003      	movs	r0, #3
 800903e:	e7d7      	b.n	8008ff0 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009040:	68a0      	ldr	r0, [r4, #8]
 8009042:	8b25      	ldrh	r5, [r4, #24]
 8009044:	f7fd faf6 	bl	8006634 <_ZN3dma11get_counterEv>
 8009048:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800904a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800904c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800904e:	f7fd faf7 	bl	8006640 <_ZN3dma10get_configEv>
 8009052:	7983      	ldrb	r3, [r0, #6]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d0e4      	beq.n	8009022 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009058:	a802      	add	r0, sp, #8
 800905a:	68a1      	ldr	r1, [r4, #8]
 800905c:	f7fd fa8c 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009060:	6822      	ldr	r2, [r4, #0]
 8009062:	6953      	ldr	r3, [r2, #20]
 8009064:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009068:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800906a:	6153      	str	r3, [r2, #20]
 800906c:	e7c0      	b.n	8008ff0 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800906e:	6961      	ldr	r1, [r4, #20]
 8009070:	7f22      	ldrb	r2, [r4, #28]
 8009072:	5cc9      	ldrb	r1, [r1, r3]
 8009074:	4291      	cmp	r1, r2
 8009076:	d1ad      	bne.n	8008fd4 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009078:	6822      	ldr	r2, [r4, #0]
 800907a:	68d1      	ldr	r1, [r2, #12]
 800907c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009080:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009082:	6951      	ldr	r1, [r2, #20]
 8009084:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009088:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800908a:	6151      	str	r1, [r2, #20]
 800908c:	e7a3      	b.n	8008fd6 <USART2_IRQHandler+0x3a>
 800908e:	bf00      	nop
 8009090:	2000b944 	.word	0x2000b944

08009094 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 8009094:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8009096:	4c3c      	ldr	r4, [pc, #240]	; (8009188 <USART3_IRQHandler+0xf4>)
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800909e:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 80090a0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80090a2:	d51a      	bpl.n	80090da <USART3_IRQHandler+0x46>
 80090a4:	068d      	lsls	r5, r1, #26
 80090a6:	d518      	bpl.n	80090da <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80090ac:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80090ae:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80090b0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80090b2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80090b4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80090b8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80090ba:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80090bc:	d93a      	bls.n	8009134 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80090be:	6962      	ldr	r2, [r4, #20]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80090c4:	7f63      	ldrb	r3, [r4, #29]
 80090c6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80090c8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80090ca:	d04c      	beq.n	8009166 <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80090cc:	2002      	movs	r0, #2
		usart -> rxcount++;
 80090ce:	3301      	adds	r3, #1
 80090d0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80090d2:	6923      	ldr	r3, [r4, #16]
 80090d4:	b95b      	cbnz	r3, 80090ee <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 80090d6:	b005      	add	sp, #20
 80090d8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80090da:	0650      	lsls	r0, r2, #25
 80090dc:	d501      	bpl.n	80090e2 <USART3_IRQHandler+0x4e>
 80090de:	064d      	lsls	r5, r1, #25
 80090e0:	d41d      	bmi.n	800911e <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80090e2:	06d0      	lsls	r0, r2, #27
 80090e4:	d408      	bmi.n	80090f8 <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80090e6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d0f3      	beq.n	80090d6 <USART3_IRQHandler+0x42>
 80090ee:	68e1      	ldr	r1, [r4, #12]
}
 80090f0:	b005      	add	sp, #20
 80090f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80090f6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80090f8:	06ca      	lsls	r2, r1, #27
 80090fa:	d5f4      	bpl.n	80090e6 <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009100:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8009102:	6859      	ldr	r1, [r3, #4]
 8009104:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009106:	2a02      	cmp	r2, #2
		(void)tmp;
 8009108:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800910a:	d1ec      	bne.n	80090e6 <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009112:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8009114:	695b      	ldr	r3, [r3, #20]
 8009116:	065b      	lsls	r3, r3, #25
 8009118:	d40e      	bmi.n	8009138 <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800911a:	2004      	movs	r0, #4
 800911c:	e7e4      	b.n	80090e8 <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8009126:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800912e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009130:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8009132:	e7d9      	b.n	80090e8 <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8009134:	2003      	movs	r0, #3
 8009136:	e7d7      	b.n	80090e8 <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009138:	68a0      	ldr	r0, [r4, #8]
 800913a:	8b25      	ldrh	r5, [r4, #24]
 800913c:	f7fd fa7a 	bl	8006634 <_ZN3dma11get_counterEv>
 8009140:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009142:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009144:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009146:	f7fd fa7b 	bl	8006640 <_ZN3dma10get_configEv>
 800914a:	7983      	ldrb	r3, [r0, #6]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d0e4      	beq.n	800911a <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009150:	a802      	add	r0, sp, #8
 8009152:	68a1      	ldr	r1, [r4, #8]
 8009154:	f7fd fa10 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009158:	6822      	ldr	r2, [r4, #0]
 800915a:	6953      	ldr	r3, [r2, #20]
 800915c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009160:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009162:	6153      	str	r3, [r2, #20]
 8009164:	e7c0      	b.n	80090e8 <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8009166:	6961      	ldr	r1, [r4, #20]
 8009168:	7f22      	ldrb	r2, [r4, #28]
 800916a:	5cc9      	ldrb	r1, [r1, r3]
 800916c:	4291      	cmp	r1, r2
 800916e:	d1ad      	bne.n	80090cc <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009170:	6822      	ldr	r2, [r4, #0]
 8009172:	68d1      	ldr	r1, [r2, #12]
 8009174:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009178:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800917a:	6951      	ldr	r1, [r2, #20]
 800917c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009180:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009182:	6151      	str	r1, [r2, #20]
 8009184:	e7a3      	b.n	80090ce <USART3_IRQHandler+0x3a>
 8009186:	bf00      	nop
 8009188:	2000b96c 	.word	0x2000b96c

0800918c <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 800918c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800918e:	4c3c      	ldr	r4, [pc, #240]	; (8009280 <UART4_IRQHandler+0xf4>)
 8009190:	6823      	ldr	r3, [r4, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009196:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 8009198:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800919a:	d51a      	bpl.n	80091d2 <UART4_IRQHandler+0x46>
 800919c:	068d      	lsls	r5, r1, #26
 800919e:	d518      	bpl.n	80091d2 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80091a4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80091a6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80091a8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80091aa:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80091ac:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80091b0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80091b2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80091b4:	d93a      	bls.n	800922c <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80091b6:	6962      	ldr	r2, [r4, #20]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80091bc:	7f63      	ldrb	r3, [r4, #29]
 80091be:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80091c0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80091c2:	d04c      	beq.n	800925e <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80091c4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80091c6:	3301      	adds	r3, #1
 80091c8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	b95b      	cbnz	r3, 80091e6 <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 80091ce:	b005      	add	sp, #20
 80091d0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80091d2:	0650      	lsls	r0, r2, #25
 80091d4:	d501      	bpl.n	80091da <UART4_IRQHandler+0x4e>
 80091d6:	064d      	lsls	r5, r1, #25
 80091d8:	d41d      	bmi.n	8009216 <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80091da:	06d0      	lsls	r0, r2, #27
 80091dc:	d408      	bmi.n	80091f0 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80091de:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0f3      	beq.n	80091ce <UART4_IRQHandler+0x42>
 80091e6:	68e1      	ldr	r1, [r4, #12]
}
 80091e8:	b005      	add	sp, #20
 80091ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80091ee:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80091f0:	06ca      	lsls	r2, r1, #27
 80091f2:	d5f4      	bpl.n	80091de <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80091f8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80091fa:	6859      	ldr	r1, [r3, #4]
 80091fc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80091fe:	2a02      	cmp	r2, #2
		(void)tmp;
 8009200:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009202:	d1ec      	bne.n	80091de <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800920a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800920c:	695b      	ldr	r3, [r3, #20]
 800920e:	065b      	lsls	r3, r3, #25
 8009210:	d40e      	bmi.n	8009230 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8009212:	2004      	movs	r0, #4
 8009214:	e7e4      	b.n	80091e0 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800921e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009226:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009228:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800922a:	e7d9      	b.n	80091e0 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800922c:	2003      	movs	r0, #3
 800922e:	e7d7      	b.n	80091e0 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009230:	68a0      	ldr	r0, [r4, #8]
 8009232:	8b25      	ldrh	r5, [r4, #24]
 8009234:	f7fd f9fe 	bl	8006634 <_ZN3dma11get_counterEv>
 8009238:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800923a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800923c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800923e:	f7fd f9ff 	bl	8006640 <_ZN3dma10get_configEv>
 8009242:	7983      	ldrb	r3, [r0, #6]
 8009244:	2b01      	cmp	r3, #1
 8009246:	d0e4      	beq.n	8009212 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009248:	a802      	add	r0, sp, #8
 800924a:	68a1      	ldr	r1, [r4, #8]
 800924c:	f7fd f994 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009250:	6822      	ldr	r2, [r4, #0]
 8009252:	6953      	ldr	r3, [r2, #20]
 8009254:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009258:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800925a:	6153      	str	r3, [r2, #20]
 800925c:	e7c0      	b.n	80091e0 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800925e:	6961      	ldr	r1, [r4, #20]
 8009260:	7f22      	ldrb	r2, [r4, #28]
 8009262:	5cc9      	ldrb	r1, [r1, r3]
 8009264:	4291      	cmp	r1, r2
 8009266:	d1ad      	bne.n	80091c4 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	68d1      	ldr	r1, [r2, #12]
 800926c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009270:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009272:	6951      	ldr	r1, [r2, #20]
 8009274:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009278:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800927a:	6151      	str	r1, [r2, #20]
 800927c:	e7a3      	b.n	80091c6 <UART4_IRQHandler+0x3a>
 800927e:	bf00      	nop
 8009280:	2000b87c 	.word	0x2000b87c

08009284 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 8009284:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8009286:	4c3c      	ldr	r4, [pc, #240]	; (8009378 <UART5_IRQHandler+0xf4>)
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800928e:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 8009290:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009292:	d51a      	bpl.n	80092ca <UART5_IRQHandler+0x46>
 8009294:	068d      	lsls	r5, r1, #26
 8009296:	d518      	bpl.n	80092ca <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800929c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800929e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80092a0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80092a2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80092a4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80092a8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80092aa:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80092ac:	d93a      	bls.n	8009324 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80092ae:	6962      	ldr	r2, [r4, #20]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80092b4:	7f63      	ldrb	r3, [r4, #29]
 80092b6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80092b8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80092ba:	d04c      	beq.n	8009356 <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80092bc:	2002      	movs	r0, #2
		usart -> rxcount++;
 80092be:	3301      	adds	r3, #1
 80092c0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	b95b      	cbnz	r3, 80092de <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 80092c6:	b005      	add	sp, #20
 80092c8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80092ca:	0650      	lsls	r0, r2, #25
 80092cc:	d501      	bpl.n	80092d2 <UART5_IRQHandler+0x4e>
 80092ce:	064d      	lsls	r5, r1, #25
 80092d0:	d41d      	bmi.n	800930e <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80092d2:	06d0      	lsls	r0, r2, #27
 80092d4:	d408      	bmi.n	80092e8 <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80092d6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d0f3      	beq.n	80092c6 <UART5_IRQHandler+0x42>
 80092de:	68e1      	ldr	r1, [r4, #12]
}
 80092e0:	b005      	add	sp, #20
 80092e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80092e6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80092e8:	06ca      	lsls	r2, r1, #27
 80092ea:	d5f4      	bpl.n	80092d6 <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80092f0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80092f2:	6859      	ldr	r1, [r3, #4]
 80092f4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80092f6:	2a02      	cmp	r2, #2
		(void)tmp;
 80092f8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80092fa:	d1ec      	bne.n	80092d6 <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009302:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	065b      	lsls	r3, r3, #25
 8009308:	d40e      	bmi.n	8009328 <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800930a:	2004      	movs	r0, #4
 800930c:	e7e4      	b.n	80092d8 <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800930e:	681a      	ldr	r2, [r3, #0]
 8009310:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8009312:	685a      	ldr	r2, [r3, #4]
 8009314:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8009316:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800931e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009320:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8009322:	e7d9      	b.n	80092d8 <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8009324:	2003      	movs	r0, #3
 8009326:	e7d7      	b.n	80092d8 <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009328:	68a0      	ldr	r0, [r4, #8]
 800932a:	8b25      	ldrh	r5, [r4, #24]
 800932c:	f7fd f982 	bl	8006634 <_ZN3dma11get_counterEv>
 8009330:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009332:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009334:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009336:	f7fd f983 	bl	8006640 <_ZN3dma10get_configEv>
 800933a:	7983      	ldrb	r3, [r0, #6]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d0e4      	beq.n	800930a <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009340:	a802      	add	r0, sp, #8
 8009342:	68a1      	ldr	r1, [r4, #8]
 8009344:	f7fd f918 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	6953      	ldr	r3, [r2, #20]
 800934c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009350:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009352:	6153      	str	r3, [r2, #20]
 8009354:	e7c0      	b.n	80092d8 <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8009356:	6961      	ldr	r1, [r4, #20]
 8009358:	7f22      	ldrb	r2, [r4, #28]
 800935a:	5cc9      	ldrb	r1, [r1, r3]
 800935c:	4291      	cmp	r1, r2
 800935e:	d1ad      	bne.n	80092bc <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	68d1      	ldr	r1, [r2, #12]
 8009364:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009368:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800936a:	6951      	ldr	r1, [r2, #20]
 800936c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009370:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009372:	6151      	str	r1, [r2, #20]
 8009374:	e7a3      	b.n	80092be <UART5_IRQHandler+0x3a>
 8009376:	bf00      	nop
 8009378:	2000b8a4 	.word	0x2000b8a4

0800937c <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 800937c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800937e:	4c3c      	ldr	r4, [pc, #240]	; (8009470 <USART6_IRQHandler+0xf4>)
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009386:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 8009388:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800938a:	d51a      	bpl.n	80093c2 <USART6_IRQHandler+0x46>
 800938c:	068d      	lsls	r5, r1, #26
 800938e:	d518      	bpl.n	80093c2 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8009394:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8009396:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8009398:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800939a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800939c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80093a0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80093a2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80093a4:	d93a      	bls.n	800941c <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80093a6:	6962      	ldr	r2, [r4, #20]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80093ac:	7f63      	ldrb	r3, [r4, #29]
 80093ae:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80093b0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80093b2:	d04c      	beq.n	800944e <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80093b4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80093b6:	3301      	adds	r3, #1
 80093b8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80093ba:	6923      	ldr	r3, [r4, #16]
 80093bc:	b95b      	cbnz	r3, 80093d6 <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 80093be:	b005      	add	sp, #20
 80093c0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80093c2:	0650      	lsls	r0, r2, #25
 80093c4:	d501      	bpl.n	80093ca <USART6_IRQHandler+0x4e>
 80093c6:	064d      	lsls	r5, r1, #25
 80093c8:	d41d      	bmi.n	8009406 <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80093ca:	06d0      	lsls	r0, r2, #27
 80093cc:	d408      	bmi.n	80093e0 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80093ce:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d0f3      	beq.n	80093be <USART6_IRQHandler+0x42>
 80093d6:	68e1      	ldr	r1, [r4, #12]
}
 80093d8:	b005      	add	sp, #20
 80093da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80093de:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80093e0:	06ca      	lsls	r2, r1, #27
 80093e2:	d5f4      	bpl.n	80093ce <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80093e8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80093ea:	6859      	ldr	r1, [r3, #4]
 80093ec:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80093ee:	2a02      	cmp	r2, #2
		(void)tmp;
 80093f0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80093f2:	d1ec      	bne.n	80093ce <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80093fa:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	065b      	lsls	r3, r3, #25
 8009400:	d40e      	bmi.n	8009420 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8009402:	2004      	movs	r0, #4
 8009404:	e7e4      	b.n	80093d0 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800940e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009416:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009418:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800941a:	e7d9      	b.n	80093d0 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800941c:	2003      	movs	r0, #3
 800941e:	e7d7      	b.n	80093d0 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009420:	68a0      	ldr	r0, [r4, #8]
 8009422:	8b25      	ldrh	r5, [r4, #24]
 8009424:	f7fd f906 	bl	8006634 <_ZN3dma11get_counterEv>
 8009428:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800942a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800942c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800942e:	f7fd f907 	bl	8006640 <_ZN3dma10get_configEv>
 8009432:	7983      	ldrb	r3, [r0, #6]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d0e4      	beq.n	8009402 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009438:	a802      	add	r0, sp, #8
 800943a:	68a1      	ldr	r1, [r4, #8]
 800943c:	f7fd f89c 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009440:	6822      	ldr	r2, [r4, #0]
 8009442:	6953      	ldr	r3, [r2, #20]
 8009444:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009448:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800944a:	6153      	str	r3, [r2, #20]
 800944c:	e7c0      	b.n	80093d0 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800944e:	6961      	ldr	r1, [r4, #20]
 8009450:	7f22      	ldrb	r2, [r4, #28]
 8009452:	5cc9      	ldrb	r1, [r1, r3]
 8009454:	4291      	cmp	r1, r2
 8009456:	d1ad      	bne.n	80093b4 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009458:	6822      	ldr	r2, [r4, #0]
 800945a:	68d1      	ldr	r1, [r2, #12]
 800945c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009460:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009462:	6951      	ldr	r1, [r2, #20]
 8009464:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009468:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800946a:	6151      	str	r1, [r2, #20]
 800946c:	e7a3      	b.n	80093b6 <USART6_IRQHandler+0x3a>
 800946e:	bf00      	nop
 8009470:	2000b994 	.word	0x2000b994

08009474 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 8009474:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8009476:	4c3c      	ldr	r4, [pc, #240]	; (8009568 <UART7_IRQHandler+0xf4>)
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800947e:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 8009480:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009482:	d51a      	bpl.n	80094ba <UART7_IRQHandler+0x46>
 8009484:	068d      	lsls	r5, r1, #26
 8009486:	d518      	bpl.n	80094ba <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800948c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800948e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8009490:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8009492:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8009494:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8009498:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800949a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800949c:	d93a      	bls.n	8009514 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800949e:	6962      	ldr	r2, [r4, #20]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80094a4:	7f63      	ldrb	r3, [r4, #29]
 80094a6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80094a8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80094aa:	d04c      	beq.n	8009546 <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80094ac:	2002      	movs	r0, #2
		usart -> rxcount++;
 80094ae:	3301      	adds	r3, #1
 80094b0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	b95b      	cbnz	r3, 80094ce <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 80094b6:	b005      	add	sp, #20
 80094b8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80094ba:	0650      	lsls	r0, r2, #25
 80094bc:	d501      	bpl.n	80094c2 <UART7_IRQHandler+0x4e>
 80094be:	064d      	lsls	r5, r1, #25
 80094c0:	d41d      	bmi.n	80094fe <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80094c2:	06d0      	lsls	r0, r2, #27
 80094c4:	d408      	bmi.n	80094d8 <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80094c6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0f3      	beq.n	80094b6 <UART7_IRQHandler+0x42>
 80094ce:	68e1      	ldr	r1, [r4, #12]
}
 80094d0:	b005      	add	sp, #20
 80094d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80094d6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80094d8:	06ca      	lsls	r2, r1, #27
 80094da:	d5f4      	bpl.n	80094c6 <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80094e0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80094e2:	6859      	ldr	r1, [r3, #4]
 80094e4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80094e6:	2a02      	cmp	r2, #2
		(void)tmp;
 80094e8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80094ea:	d1ec      	bne.n	80094c6 <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80094f2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	065b      	lsls	r3, r3, #25
 80094f8:	d40e      	bmi.n	8009518 <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80094fa:	2004      	movs	r0, #4
 80094fc:	e7e4      	b.n	80094c8 <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8009506:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800950e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009510:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8009512:	e7d9      	b.n	80094c8 <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8009514:	2003      	movs	r0, #3
 8009516:	e7d7      	b.n	80094c8 <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009518:	68a0      	ldr	r0, [r4, #8]
 800951a:	8b25      	ldrh	r5, [r4, #24]
 800951c:	f7fd f88a 	bl	8006634 <_ZN3dma11get_counterEv>
 8009520:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009522:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009524:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009526:	f7fd f88b 	bl	8006640 <_ZN3dma10get_configEv>
 800952a:	7983      	ldrb	r3, [r0, #6]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d0e4      	beq.n	80094fa <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009530:	a802      	add	r0, sp, #8
 8009532:	68a1      	ldr	r1, [r4, #8]
 8009534:	f7fd f820 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009538:	6822      	ldr	r2, [r4, #0]
 800953a:	6953      	ldr	r3, [r2, #20]
 800953c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009540:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009542:	6153      	str	r3, [r2, #20]
 8009544:	e7c0      	b.n	80094c8 <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8009546:	6961      	ldr	r1, [r4, #20]
 8009548:	7f22      	ldrb	r2, [r4, #28]
 800954a:	5cc9      	ldrb	r1, [r1, r3]
 800954c:	4291      	cmp	r1, r2
 800954e:	d1ad      	bne.n	80094ac <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009550:	6822      	ldr	r2, [r4, #0]
 8009552:	68d1      	ldr	r1, [r2, #12]
 8009554:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009558:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800955a:	6951      	ldr	r1, [r2, #20]
 800955c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009560:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009562:	6151      	str	r1, [r2, #20]
 8009564:	e7a3      	b.n	80094ae <UART7_IRQHandler+0x3a>
 8009566:	bf00      	nop
 8009568:	2000b8cc 	.word	0x2000b8cc

0800956c <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 800956c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800956e:	4c3c      	ldr	r4, [pc, #240]	; (8009660 <UART8_IRQHandler+0xf4>)
 8009570:	6823      	ldr	r3, [r4, #0]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009576:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 8009578:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800957a:	d51a      	bpl.n	80095b2 <UART8_IRQHandler+0x46>
 800957c:	068d      	lsls	r5, r1, #26
 800957e:	d518      	bpl.n	80095b2 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8009584:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8009586:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8009588:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800958a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800958c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8009590:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8009592:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8009594:	d93a      	bls.n	800960c <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8009596:	6962      	ldr	r2, [r4, #20]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800959c:	7f63      	ldrb	r3, [r4, #29]
 800959e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80095a0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80095a2:	d04c      	beq.n	800963e <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80095a4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80095a6:	3301      	adds	r3, #1
 80095a8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80095aa:	6923      	ldr	r3, [r4, #16]
 80095ac:	b95b      	cbnz	r3, 80095c6 <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 80095ae:	b005      	add	sp, #20
 80095b0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80095b2:	0650      	lsls	r0, r2, #25
 80095b4:	d501      	bpl.n	80095ba <UART8_IRQHandler+0x4e>
 80095b6:	064d      	lsls	r5, r1, #25
 80095b8:	d41d      	bmi.n	80095f6 <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80095ba:	06d0      	lsls	r0, r2, #27
 80095bc:	d408      	bmi.n	80095d0 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80095be:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d0f3      	beq.n	80095ae <UART8_IRQHandler+0x42>
 80095c6:	68e1      	ldr	r1, [r4, #12]
}
 80095c8:	b005      	add	sp, #20
 80095ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80095ce:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80095d0:	06ca      	lsls	r2, r1, #27
 80095d2:	d5f4      	bpl.n	80095be <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80095d8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80095da:	6859      	ldr	r1, [r3, #4]
 80095dc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80095de:	2a02      	cmp	r2, #2
		(void)tmp;
 80095e0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80095e2:	d1ec      	bne.n	80095be <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80095ea:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	065b      	lsls	r3, r3, #25
 80095f0:	d40e      	bmi.n	8009610 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80095f2:	2004      	movs	r0, #4
 80095f4:	e7e4      	b.n	80095c0 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80095fa:	685a      	ldr	r2, [r3, #4]
 80095fc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80095fe:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009606:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009608:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800960a:	e7d9      	b.n	80095c0 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800960c:	2003      	movs	r0, #3
 800960e:	e7d7      	b.n	80095c0 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009610:	68a0      	ldr	r0, [r4, #8]
 8009612:	8b25      	ldrh	r5, [r4, #24]
 8009614:	f7fd f80e 	bl	8006634 <_ZN3dma11get_counterEv>
 8009618:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800961a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800961c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800961e:	f7fd f80f 	bl	8006640 <_ZN3dma10get_configEv>
 8009622:	7983      	ldrb	r3, [r0, #6]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d0e4      	beq.n	80095f2 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009628:	a802      	add	r0, sp, #8
 800962a:	68a1      	ldr	r1, [r4, #8]
 800962c:	f7fc ffa4 	bl	8006578 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009630:	6822      	ldr	r2, [r4, #0]
 8009632:	6953      	ldr	r3, [r2, #20]
 8009634:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009638:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800963a:	6153      	str	r3, [r2, #20]
 800963c:	e7c0      	b.n	80095c0 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800963e:	6961      	ldr	r1, [r4, #20]
 8009640:	7f22      	ldrb	r2, [r4, #28]
 8009642:	5cc9      	ldrb	r1, [r1, r3]
 8009644:	4291      	cmp	r1, r2
 8009646:	d1ad      	bne.n	80095a4 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009648:	6822      	ldr	r2, [r4, #0]
 800964a:	68d1      	ldr	r1, [r2, #12]
 800964c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009650:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009652:	6951      	ldr	r1, [r2, #20]
 8009654:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009658:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800965a:	6151      	str	r1, [r2, #20]
 800965c:	e7a3      	b.n	80095a6 <UART8_IRQHandler+0x3a>
 800965e:	bf00      	nop
 8009660:	2000b8f4 	.word	0x2000b8f4

08009664 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 8009664:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800974c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 8009668:	482d      	ldr	r0, [pc, #180]	; (8009720 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 800966a:	492e      	ldr	r1, [pc, #184]	; (8009724 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 800966c:	4a2e      	ldr	r2, [pc, #184]	; (8009728 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 800966e:	2300      	movs	r3, #0
}
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 8009672:	4f2e      	ldr	r7, [pc, #184]	; (800972c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 8009674:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8009750 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 8009678:	4e2d      	ldr	r6, [pc, #180]	; (8009730 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 800967a:	f8cc 3014 	str.w	r3, [ip, #20]
 800967e:	e9cc 3301 	strd	r3, r3, [ip, #4]
 8009682:	e9cc 3303 	strd	r3, r3, [ip, #12]
 8009686:	f8ac 301c 	strh.w	r3, [ip, #28]
 800968a:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 800968e:	f8cc e000 	str.w	lr, [ip]
 8009692:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009754 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 8009696:	4c27      	ldr	r4, [pc, #156]	; (8009734 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 8009698:	4d27      	ldr	r5, [pc, #156]	; (8009738 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 800969a:	617b      	str	r3, [r7, #20]
 800969c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 80096a0:	e9c7 3303 	strd	r3, r3, [r7, #12]
 80096a4:	83bb      	strh	r3, [r7, #28]
 80096a6:	623b      	str	r3, [r7, #32]
	_usart = usart;
 80096a8:	f8c7 c000 	str.w	ip, [r7]
 80096ac:	4f23      	ldr	r7, [pc, #140]	; (800973c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 80096ae:	6173      	str	r3, [r6, #20]
 80096b0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80096b4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80096b8:	83b3      	strh	r3, [r6, #28]
 80096ba:	6233      	str	r3, [r6, #32]
	_usart = usart;
 80096bc:	6037      	str	r7, [r6, #0]
 80096be:	4e20      	ldr	r6, [pc, #128]	; (8009740 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 80096c0:	616b      	str	r3, [r5, #20]
 80096c2:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80096c6:	e9c5 3303 	strd	r3, r3, [r5, #12]
 80096ca:	83ab      	strh	r3, [r5, #28]
 80096cc:	622b      	str	r3, [r5, #32]
	_usart = usart;
 80096ce:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 80096d0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80096d4:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80096d8:	6163      	str	r3, [r4, #20]
 80096da:	83a3      	strh	r3, [r4, #28]
 80096dc:	6223      	str	r3, [r4, #32]
 80096de:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80096e2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80096e6:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80096ea:	e9c1 3303 	strd	r3, r3, [r1, #12]
 80096ee:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80096f2:	e9c2 3303 	strd	r3, r3, [r2, #12]
 80096f6:	6143      	str	r3, [r0, #20]
 80096f8:	8383      	strh	r3, [r0, #28]
 80096fa:	6203      	str	r3, [r0, #32]
 80096fc:	614b      	str	r3, [r1, #20]
 80096fe:	838b      	strh	r3, [r1, #28]
 8009700:	620b      	str	r3, [r1, #32]
 8009702:	6153      	str	r3, [r2, #20]
 8009704:	8393      	strh	r3, [r2, #28]
 8009706:	6213      	str	r3, [r2, #32]
	_usart = usart;
 8009708:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 800970a:	6023      	str	r3, [r4, #0]
 800970c:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8009710:	4c0d      	ldr	r4, [pc, #52]	; (8009748 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 8009712:	6003      	str	r3, [r0, #0]
 8009714:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009718:	600c      	str	r4, [r1, #0]
 800971a:	6013      	str	r3, [r2, #0]
}
 800971c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800971e:	bf00      	nop
 8009720:	2000b8a4 	.word	0x2000b8a4
 8009724:	2000b994 	.word	0x2000b994
 8009728:	2000b8cc 	.word	0x2000b8cc
 800972c:	2000b944 	.word	0x2000b944
 8009730:	2000b96c 	.word	0x2000b96c
 8009734:	2000b8f4 	.word	0x2000b8f4
 8009738:	2000b87c 	.word	0x2000b87c
 800973c:	40004800 	.word	0x40004800
 8009740:	40004c00 	.word	0x40004c00
 8009744:	40007c00 	.word	0x40007c00
 8009748:	40011400 	.word	0x40011400
 800974c:	2000b91c 	.word	0x2000b91c
 8009750:	40011000 	.word	0x40011000
 8009754:	40004400 	.word	0x40004400

08009758 <__NVIC_SystemReset>:
 8009758:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800975c:	4905      	ldr	r1, [pc, #20]	; (8009774 <__NVIC_SystemReset+0x1c>)
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <__NVIC_SystemReset+0x20>)
 8009760:	68ca      	ldr	r2, [r1, #12]
 8009762:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009766:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009768:	60cb      	str	r3, [r1, #12]
 800976a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800976e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009770:	e7fd      	b.n	800976e <__NVIC_SystemReset+0x16>
 8009772:	bf00      	nop
 8009774:	e000ed00 	.word	0xe000ed00
 8009778:	05fa0004 	.word	0x05fa0004

0800977c <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 800977c:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 800977e:	4807      	ldr	r0, [pc, #28]	; (800979c <app_main_task+0x20>)
 8009780:	4907      	ldr	r1, [pc, #28]	; (80097a0 <app_main_task+0x24>)
 8009782:	f000 f9b1 	bl	8009ae8 <LOG_INFO>
	extern void app_main(void);
	app_main();
 8009786:	f001 f905 	bl	800a994 <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 800978a:	4804      	ldr	r0, [pc, #16]	; (800979c <app_main_task+0x20>)
 800978c:	4905      	ldr	r1, [pc, #20]	; (80097a4 <app_main_task+0x28>)
 800978e:	f000 f9ab 	bl	8009ae8 <LOG_INFO>
	vTaskDelete(NULL);
}
 8009792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 8009796:	2000      	movs	r0, #0
 8009798:	f7f9 bc98 	b.w	80030cc <vTaskDelete>
 800979c:	0800eb44 	.word	0x0800eb44
 80097a0:	0800eb30 	.word	0x0800eb30
 80097a4:	0800eb4c 	.word	0x0800eb4c

080097a8 <uart_log>:

	uart_log((char *)"\r\n\r\n");
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 80097a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097aa:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80097ac:	2100      	movs	r1, #0
static void uart_log(char *log){
 80097ae:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80097b0:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097b2:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80097b6:	4d19      	ldr	r5, [pc, #100]	; (800981c <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 80097b8:	b93c      	cbnz	r4, 80097ca <uart_log+0x22>
 80097ba:	6828      	ldr	r0, [r5, #0]
 80097bc:	210a      	movs	r1, #10
 80097be:	f7f8 fd5b 	bl	8002278 <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 80097c2:	2801      	cmp	r0, #1
 80097c4:	d01f      	beq.n	8009806 <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 80097c6:	b003      	add	sp, #12
 80097c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80097ca:	af01      	add	r7, sp, #4
 80097cc:	6828      	ldr	r0, [r5, #0]
 80097ce:	463a      	mov	r2, r7
 80097d0:	f7f9 f856 	bl	8002880 <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 80097d4:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80097d6:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 80097d8:	d1f5      	bne.n	80097c6 <uart_log+0x1e>
		while(*log) {
 80097da:	7833      	ldrb	r3, [r6, #0]
 80097dc:	b1c3      	cbz	r3, 8009810 <uart_log+0x68>
			log_uart -> DR = *log++;
 80097de:	4a10      	ldr	r2, [pc, #64]	; (8009820 <uart_log+0x78>)
 80097e0:	4631      	mov	r1, r6
 80097e2:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 80097e4:	6813      	ldr	r3, [r2, #0]
 80097e6:	065b      	lsls	r3, r3, #25
 80097e8:	d5fc      	bpl.n	80097e4 <uart_log+0x3c>
		while(*log) {
 80097ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1f7      	bne.n	80097e2 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 80097f2:	2c01      	cmp	r4, #1
 80097f4:	d00b      	beq.n	800980e <uart_log+0x66>
 80097f6:	2300      	movs	r3, #0
 80097f8:	6828      	ldr	r0, [r5, #0]
 80097fa:	461a      	mov	r2, r3
 80097fc:	4619      	mov	r1, r3
 80097fe:	f7f8 f945 	bl	8001a8c <xQueueGenericSend>
}
 8009802:	b003      	add	sp, #12
 8009804:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 8009806:	7833      	ldrb	r3, [r6, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e8      	bne.n	80097de <uart_log+0x36>
 800980c:	e7f3      	b.n	80097f6 <uart_log+0x4e>
 800980e:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009810:	6828      	ldr	r0, [r5, #0]
 8009812:	4639      	mov	r1, r7
 8009814:	f7f8 fb56 	bl	8001ec4 <xQueueGiveFromISR>
}
 8009818:	b003      	add	sp, #12
 800981a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800981c:	2000b9bc 	.word	0x2000b9bc
 8009820:	40011400 	.word	0x40011400
 8009824:	00000000 	.word	0x00000000

08009828 <main_application>:
int main_application(void){
 8009828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982a:	b085      	sub	sp, #20
	system_init();
 800982c:	f000 fb36 	bl	8009e9c <system_init>
	rcc_init(&rcc);
 8009830:	4979      	ldr	r1, [pc, #484]	; (8009a18 <main_application+0x1f0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009832:	4e7a      	ldr	r6, [pc, #488]	; (8009a1c <main_application+0x1f4>)
	rcc_init(&rcc);
 8009834:	a802      	add	r0, sp, #8
 8009836:	f7fd fe57 	bl	80074e8 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 800983a:	4879      	ldr	r0, [pc, #484]	; (8009a20 <main_application+0x1f8>)
 800983c:	f7fd fc98 	bl	8007170 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 8009840:	4878      	ldr	r0, [pc, #480]	; (8009a24 <main_application+0x1fc>)
 8009842:	f7fd fbcd 	bl	8006fe0 <fmc_sdram_init>
	sdram_init();
 8009846:	f7fd f9ab 	bl	8006ba0 <sdram_init>
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 800984a:	2104      	movs	r1, #4
 800984c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009850:	a802      	add	r0, sp, #8
 8009852:	f7fd fe1b 	bl	800748c <iwdg_init>
	iwdg_disable_in_debugmode();
 8009856:	f7fd fe37 	bl	80074c8 <iwdg_disable_in_debugmode>
	rng_init();
 800985a:	f7fe f843 	bl	80078e4 <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800985e:	2001      	movs	r0, #1
 8009860:	f7f8 fa92 	bl	8001d88 <xQueueCreateMutex>
 8009864:	4b70      	ldr	r3, [pc, #448]	; (8009a28 <main_application+0x200>)
 8009866:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 8009868:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800986a:	4870      	ldr	r0, [pc, #448]	; (8009a2c <main_application+0x204>)
	log_semaph = xSemaphoreCreateMutex();
 800986c:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 800986e:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 8009870:	f7fd fc7e 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 8009874:	486d      	ldr	r0, [pc, #436]	; (8009a2c <main_application+0x204>)
 8009876:	f7fd fc7b 	bl	8007170 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 800987a:	486c      	ldr	r0, [pc, #432]	; (8009a2c <main_application+0x204>)
 800987c:	2208      	movs	r2, #8
 800987e:	210e      	movs	r1, #14
 8009880:	f7fd fd5e 	bl	8007340 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 8009884:	2109      	movs	r1, #9
 8009886:	4869      	ldr	r0, [pc, #420]	; (8009a2c <main_application+0x204>)
 8009888:	2208      	movs	r2, #8
 800988a:	f7fd fd59 	bl	8007340 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800988e:	4a68      	ldr	r2, [pc, #416]	; (8009a30 <main_application+0x208>)
 8009890:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009892:	f043 0320 	orr.w	r3, r3, #32
 8009896:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 8009898:	2003      	movs	r0, #3
 800989a:	f7fd ffbb 	bl	8007814 <rcc_get_bus_frequency>
 800989e:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80098a0:	68f3      	ldr	r3, [r6, #12]
 80098a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80098a6:	f043 030c 	orr.w	r3, r3, #12
 80098aa:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 80098ac:	9802      	ldr	r0, [sp, #8]
 80098ae:	f7f6 fe49 	bl	8000544 <__aeabi_ui2d>
 80098b2:	a355      	add	r3, pc, #340	; (adr r3, 8009a08 <main_application+0x1e0>)
 80098b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b8:	f7f6 febe 	bl	8000638 <__aeabi_dmul>
 80098bc:	f7f7 f9b4 	bl	8000c28 <__aeabi_d2f>
 80098c0:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 80098c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 80098c8:	ee17 3a90 	vmov	r3, s15
 80098cc:	b29c      	uxth	r4, r3
 80098ce:	f7f6 fe5b 	bl	8000588 <__aeabi_f2d>
 80098d2:	4b58      	ldr	r3, [pc, #352]	; (8009a34 <main_application+0x20c>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	f7f6 feaf 	bl	8000638 <__aeabi_dmul>
 80098da:	f7f7 f985 	bl	8000be8 <__aeabi_d2uiz>
 80098de:	4607      	mov	r7, r0
 80098e0:	4620      	mov	r0, r4
 80098e2:	f7f6 fe3f 	bl	8000564 <__aeabi_i2d>
 80098e6:	4b53      	ldr	r3, [pc, #332]	; (8009a34 <main_application+0x20c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	f7f6 fea5 	bl	8000638 <__aeabi_dmul>
 80098ee:	f7f7 f97b 	bl	8000be8 <__aeabi_d2uiz>
 80098f2:	b2bf      	uxth	r7, r7
 80098f4:	b280      	uxth	r0, r0
 80098f6:	1a38      	subs	r0, r7, r0
 80098f8:	f7f6 fe34 	bl	8000564 <__aeabi_i2d>
 80098fc:	a344      	add	r3, pc, #272	; (adr r3, 8009a10 <main_application+0x1e8>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fe99 	bl	8000638 <__aeabi_dmul>
 8009906:	f7f7 f98f 	bl	8000c28 <__aeabi_d2f>
 800990a:	ee07 0a90 	vmov	s15, r0
 800990e:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8009912:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009916:	f001 f8d3 	bl	800aac0 <ceilf>
	DIV_Fraction = ceil(Fraction);
 800991a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n");
 800991e:	4846      	ldr	r0, [pc, #280]	; (8009a38 <main_application+0x210>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8009920:	ee10 3a10 	vmov	r3, s0
 8009924:	b29b      	uxth	r3, r3
 8009926:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800992a:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n");
 800992c:	f7ff ff3c 	bl	80097a8 <uart_log>
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 8009930:	4842      	ldr	r0, [pc, #264]	; (8009a3c <main_application+0x214>)
 8009932:	f7ff ff39 	bl	80097a8 <uart_log>
	log_init(uart_log);
 8009936:	4842      	ldr	r0, [pc, #264]	; (8009a40 <main_application+0x218>)
 8009938:	f000 f8d0 	bl	8009adc <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 800993c:	4941      	ldr	r1, [pc, #260]	; (8009a44 <main_application+0x21c>)
 800993e:	4a42      	ldr	r2, [pc, #264]	; (8009a48 <main_application+0x220>)
 8009940:	4842      	ldr	r0, [pc, #264]	; (8009a4c <main_application+0x224>)
 8009942:	f000 f8d1 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 8009946:	f000 fa95 	bl	8009e74 <get_revid>
 800994a:	4941      	ldr	r1, [pc, #260]	; (8009a50 <main_application+0x228>)
 800994c:	4602      	mov	r2, r0
 800994e:	483f      	ldr	r0, [pc, #252]	; (8009a4c <main_application+0x224>)
 8009950:	f000 f8ca 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 8009954:	f000 fa94 	bl	8009e80 <get_devid>
 8009958:	493e      	ldr	r1, [pc, #248]	; (8009a54 <main_application+0x22c>)
 800995a:	4602      	mov	r2, r0
 800995c:	483b      	ldr	r0, [pc, #236]	; (8009a4c <main_application+0x224>)
 800995e:	f000 f8c3 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 8009962:	f000 fa95 	bl	8009e90 <get_flashsize>
 8009966:	493c      	ldr	r1, [pc, #240]	; (8009a58 <main_application+0x230>)
 8009968:	4602      	mov	r2, r0
 800996a:	4838      	ldr	r0, [pc, #224]	; (8009a4c <main_application+0x224>)
 800996c:	f000 f8bc 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 8009970:	493a      	ldr	r1, [pc, #232]	; (8009a5c <main_application+0x234>)
 8009972:	4836      	ldr	r0, [pc, #216]	; (8009a4c <main_application+0x224>)
 8009974:	2280      	movs	r2, #128	; 0x80
 8009976:	f000 f8b7 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 800997a:	4939      	ldr	r1, [pc, #228]	; (8009a60 <main_application+0x238>)
 800997c:	4a39      	ldr	r2, [pc, #228]	; (8009a64 <main_application+0x23c>)
 800997e:	4833      	ldr	r0, [pc, #204]	; (8009a4c <main_application+0x224>)
 8009980:	f000 f8b2 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 8009984:	4628      	mov	r0, r5
 8009986:	f7fd ff45 	bl	8007814 <rcc_get_bus_frequency>
 800998a:	4937      	ldr	r1, [pc, #220]	; (8009a68 <main_application+0x240>)
 800998c:	4602      	mov	r2, r0
 800998e:	482f      	ldr	r0, [pc, #188]	; (8009a4c <main_application+0x224>)
 8009990:	f000 f8aa 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 8009994:	2001      	movs	r0, #1
 8009996:	f7fd ff3d 	bl	8007814 <rcc_get_bus_frequency>
 800999a:	4934      	ldr	r1, [pc, #208]	; (8009a6c <main_application+0x244>)
 800999c:	4602      	mov	r2, r0
 800999e:	482b      	ldr	r0, [pc, #172]	; (8009a4c <main_application+0x224>)
 80099a0:	f000 f8a2 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 80099a4:	2002      	movs	r0, #2
 80099a6:	f7fd ff35 	bl	8007814 <rcc_get_bus_frequency>
 80099aa:	4931      	ldr	r1, [pc, #196]	; (8009a70 <main_application+0x248>)
 80099ac:	4602      	mov	r2, r0
 80099ae:	4827      	ldr	r0, [pc, #156]	; (8009a4c <main_application+0x224>)
 80099b0:	f000 f89a 	bl	8009ae8 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 80099b4:	2003      	movs	r0, #3
 80099b6:	f7fd ff2d 	bl	8007814 <rcc_get_bus_frequency>
 80099ba:	492e      	ldr	r1, [pc, #184]	; (8009a74 <main_application+0x24c>)
 80099bc:	4602      	mov	r2, r0
 80099be:	4823      	ldr	r0, [pc, #140]	; (8009a4c <main_application+0x224>)
 80099c0:	f000 f892 	bl	8009ae8 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 80099c4:	2301      	movs	r3, #1
 80099c6:	e9cd 3500 	strd	r3, r5, [sp]
 80099ca:	492b      	ldr	r1, [pc, #172]	; (8009a78 <main_application+0x250>)
 80099cc:	482b      	ldr	r0, [pc, #172]	; (8009a7c <main_application+0x254>)
 80099ce:	462b      	mov	r3, r5
 80099d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099d4:	f7f9 fb48 	bl	8003068 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 80099d8:	2801      	cmp	r0, #1
 80099da:	d00b      	beq.n	80099f4 <main_application+0x1cc>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 80099dc:	206a      	movs	r0, #106	; 0x6a
 80099de:	9000      	str	r0, [sp, #0]
 80099e0:	4b27      	ldr	r3, [pc, #156]	; (8009a80 <main_application+0x258>)
 80099e2:	4a28      	ldr	r2, [pc, #160]	; (8009a84 <main_application+0x25c>)
 80099e4:	4928      	ldr	r1, [pc, #160]	; (8009a88 <main_application+0x260>)
 80099e6:	4819      	ldr	r0, [pc, #100]	; (8009a4c <main_application+0x224>)
 80099e8:	f000 f8fa 	bl	8009be0 <LOG_ERROR>
		return 0;
 80099ec:	462c      	mov	r4, r5
}
 80099ee:	4620      	mov	r0, r4
 80099f0:	b005      	add	sp, #20
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 80099f4:	4925      	ldr	r1, [pc, #148]	; (8009a8c <main_application+0x264>)
 80099f6:	4604      	mov	r4, r0
 80099f8:	4814      	ldr	r0, [pc, #80]	; (8009a4c <main_application+0x224>)
 80099fa:	f000 f875 	bl	8009ae8 <LOG_INFO>
	vTaskStartScheduler();
 80099fe:	f7f9 fc41 	bl	8003284 <vTaskStartScheduler>
}
 8009a02:	4620      	mov	r0, r4
 8009a04:	b005      	add	sp, #20
 8009a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a08:	789abcdf 	.word	0x789abcdf
 8009a0c:	3ea23456 	.word	0x3ea23456
 8009a10:	47ae147b 	.word	0x47ae147b
 8009a14:	3f847ae1 	.word	0x3f847ae1
 8009a18:	20000094 	.word	0x20000094
 8009a1c:	40011400 	.word	0x40011400
 8009a20:	40021c00 	.word	0x40021c00
 8009a24:	200000bc 	.word	0x200000bc
 8009a28:	2000b9bc 	.word	0x2000b9bc
 8009a2c:	40021800 	.word	0x40021800
 8009a30:	40023800 	.word	0x40023800
 8009a34:	40590000 	.word	0x40590000
 8009a38:	0800eb68 	.word	0x0800eb68
 8009a3c:	0800eb70 	.word	0x0800eb70
 8009a40:	080097a9 	.word	0x080097a9
 8009a44:	0800ebdc 	.word	0x0800ebdc
 8009a48:	0800ebd0 	.word	0x0800ebd0
 8009a4c:	0800eb44 	.word	0x0800eb44
 8009a50:	0800ebf0 	.word	0x0800ebf0
 8009a54:	0800ec08 	.word	0x0800ec08
 8009a58:	0800ec20 	.word	0x0800ec20
 8009a5c:	0800ec38 	.word	0x0800ec38
 8009a60:	0800ec58 	.word	0x0800ec58
 8009a64:	0800ec50 	.word	0x0800ec50
 8009a68:	0800ec6c 	.word	0x0800ec6c
 8009a6c:	0800ec84 	.word	0x0800ec84
 8009a70:	0800ec9c 	.word	0x0800ec9c
 8009a74:	0800ecb4 	.word	0x0800ecb4
 8009a78:	0800eccc 	.word	0x0800eccc
 8009a7c:	0800977d 	.word	0x0800977d
 8009a80:	0800ecdc 	.word	0x0800ecdc
 8009a84:	0800ecf0 	.word	0x0800ecf0
 8009a88:	0800ed10 	.word	0x0800ed10
 8009a8c:	0800ed48 	.word	0x0800ed48

08009a90 <vApplicationIdleHook>:
	void vApplicationIdleHook(void){
 8009a90:	b508      	push	{r3, lr}
		iwdg_refresh();
 8009a92:	f7fd fd21 	bl	80074d8 <iwdg_refresh>
	}
 8009a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_calculate_cpu_load_percent();
 8009a9a:	f000 bacf 	b.w	800a03c <sys_calculate_cpu_load_percent>
 8009a9e:	bf00      	nop

08009aa0 <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 8009aa0:	b508      	push	{r3, lr}
 8009aa2:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 8009aa4:	4804      	ldr	r0, [pc, #16]	; (8009ab8 <vApplicationStackOverflowHook+0x18>)
 8009aa6:	4905      	ldr	r1, [pc, #20]	; (8009abc <vApplicationStackOverflowHook+0x1c>)
 8009aa8:	f000 f89a 	bl	8009be0 <LOG_ERROR>
 8009aac:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 8009aae:	bf00      	nop
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	d1fc      	bne.n	8009aae <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 8009ab4:	f7ff fe50 	bl	8009758 <__NVIC_SystemReset>
 8009ab8:	0800eb44 	.word	0x0800eb44
 8009abc:	0800ed64 	.word	0x0800ed64
 8009ac0:	003d0900 	.word	0x003d0900

08009ac4 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 8009ac4:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 8009ac6:	4903      	ldr	r1, [pc, #12]	; (8009ad4 <vApplicationMallocFailedHook+0x10>)
 8009ac8:	4803      	ldr	r0, [pc, #12]	; (8009ad8 <vApplicationMallocFailedHook+0x14>)
 8009aca:	f000 f889 	bl	8009be0 <LOG_ERROR>
		__NVIC_SystemReset();
 8009ace:	f7ff fe43 	bl	8009758 <__NVIC_SystemReset>
 8009ad2:	bf00      	nop
 8009ad4:	0800ed7c 	.word	0x0800ed7c
 8009ad8:	0800eb44 	.word	0x0800eb44

08009adc <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 8009adc:	4b01      	ldr	r3, [pc, #4]	; (8009ae4 <log_init+0x8>)
 8009ade:	6018      	str	r0, [r3, #0]
}
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	2000b9c0 	.word	0x2000b9c0

08009ae8 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8009ae8:	b40e      	push	{r1, r2, r3}
 8009aea:	b570      	push	{r4, r5, r6, lr}
 8009aec:	b08b      	sub	sp, #44	; 0x2c
 8009aee:	ac0f      	add	r4, sp, #60	; 0x3c
 8009af0:	4606      	mov	r6, r0
 8009af2:	f854 1b04 	ldr.w	r1, [r4], #4
 8009af6:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009af8:	f7fe fd62 	bl	80085c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009afc:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009afe:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009b00:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009b02:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009b04:	4622      	mov	r2, r4
 8009b06:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009b08:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009b0a:	f002 f8c3 	bl	800bc94 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <LOG_INFO+0x64>)
 8009b10:	4a0f      	ldr	r2, [pc, #60]	; (8009b50 <LOG_INFO+0x68>)
 8009b12:	7819      	ldrb	r1, [r3, #0]
 8009b14:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <LOG_INFO+0x6c>)
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	9b07      	ldr	r3, [sp, #28]
 8009b1a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009b1e:	9302      	str	r3, [sp, #8]
 8009b20:	490d      	ldr	r1, [pc, #52]	; (8009b58 <LOG_INFO+0x70>)
 8009b22:	4b0e      	ldr	r3, [pc, #56]	; (8009b5c <LOG_INFO+0x74>)
 8009b24:	e9cd 5600 	strd	r5, r6, [sp]
 8009b28:	a809      	add	r0, sp, #36	; 0x24
 8009b2a:	f001 f813 	bl	800ab54 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009b2e:	4b0c      	ldr	r3, [pc, #48]	; (8009b60 <LOG_INFO+0x78>)
 8009b30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4798      	blx	r3
	free(Temp_buffer);
 8009b36:	9807      	ldr	r0, [sp, #28]
 8009b38:	f001 f864 	bl	800ac04 <free>
	free(Output_buffer);
 8009b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b3e:	f001 f861 	bl	800ac04 <free>
}
 8009b42:	b00b      	add	sp, #44	; 0x2c
 8009b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b48:	b003      	add	sp, #12
 8009b4a:	4770      	bx	lr
 8009b4c:	200000f2 	.word	0x200000f2
 8009b50:	0800ef24 	.word	0x0800ef24
 8009b54:	0800edac 	.word	0x0800edac
 8009b58:	0800edb8 	.word	0x0800edb8
 8009b5c:	0800edb4 	.word	0x0800edb4
 8009b60:	2000b9c0 	.word	0x2000b9c0

08009b64 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8009b64:	b40e      	push	{r1, r2, r3}
 8009b66:	b570      	push	{r4, r5, r6, lr}
 8009b68:	b08b      	sub	sp, #44	; 0x2c
 8009b6a:	ac0f      	add	r4, sp, #60	; 0x3c
 8009b6c:	4606      	mov	r6, r0
 8009b6e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b72:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009b74:	f7fe fd24 	bl	80085c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009b78:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009b7a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009b7c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009b7e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009b80:	4622      	mov	r2, r4
 8009b82:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009b84:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009b86:	f002 f885 	bl	800bc94 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8009b8a:	4b0f      	ldr	r3, [pc, #60]	; (8009bc8 <LOG_WARN+0x64>)
 8009b8c:	4a0f      	ldr	r2, [pc, #60]	; (8009bcc <LOG_WARN+0x68>)
 8009b8e:	7819      	ldrb	r1, [r3, #0]
 8009b90:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <LOG_WARN+0x6c>)
 8009b92:	9303      	str	r3, [sp, #12]
 8009b94:	9b07      	ldr	r3, [sp, #28]
 8009b96:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009b9a:	9302      	str	r3, [sp, #8]
 8009b9c:	490d      	ldr	r1, [pc, #52]	; (8009bd4 <LOG_WARN+0x70>)
 8009b9e:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <LOG_WARN+0x74>)
 8009ba0:	e9cd 5600 	strd	r5, r6, [sp]
 8009ba4:	a809      	add	r0, sp, #36	; 0x24
 8009ba6:	f000 ffd5 	bl	800ab54 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009baa:	4b0c      	ldr	r3, [pc, #48]	; (8009bdc <LOG_WARN+0x78>)
 8009bac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4798      	blx	r3
	free(Temp_buffer);
 8009bb2:	9807      	ldr	r0, [sp, #28]
 8009bb4:	f001 f826 	bl	800ac04 <free>
	free(Output_buffer);
 8009bb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bba:	f001 f823 	bl	800ac04 <free>
}
 8009bbe:	b00b      	add	sp, #44	; 0x2c
 8009bc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bc4:	b003      	add	sp, #12
 8009bc6:	4770      	bx	lr
 8009bc8:	200000f5 	.word	0x200000f5
 8009bcc:	0800ef24 	.word	0x0800ef24
 8009bd0:	0800edac 	.word	0x0800edac
 8009bd4:	0800edb8 	.word	0x0800edb8
 8009bd8:	0800edd0 	.word	0x0800edd0
 8009bdc:	2000b9c0 	.word	0x2000b9c0

08009be0 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8009be0:	b40e      	push	{r1, r2, r3}
 8009be2:	b570      	push	{r4, r5, r6, lr}
 8009be4:	b08b      	sub	sp, #44	; 0x2c
 8009be6:	ac0f      	add	r4, sp, #60	; 0x3c
 8009be8:	4606      	mov	r6, r0
 8009bea:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bee:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009bf0:	f7fe fce6 	bl	80085c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009bf4:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009bf6:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009bf8:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009bfa:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009bfc:	4622      	mov	r2, r4
 8009bfe:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009c00:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009c02:	f002 f847 	bl	800bc94 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8009c06:	4b0f      	ldr	r3, [pc, #60]	; (8009c44 <LOG_ERROR+0x64>)
 8009c08:	4a0f      	ldr	r2, [pc, #60]	; (8009c48 <LOG_ERROR+0x68>)
 8009c0a:	7819      	ldrb	r1, [r3, #0]
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <LOG_ERROR+0x6c>)
 8009c0e:	9303      	str	r3, [sp, #12]
 8009c10:	9b07      	ldr	r3, [sp, #28]
 8009c12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c16:	9302      	str	r3, [sp, #8]
 8009c18:	490d      	ldr	r1, [pc, #52]	; (8009c50 <LOG_ERROR+0x70>)
 8009c1a:	4b0e      	ldr	r3, [pc, #56]	; (8009c54 <LOG_ERROR+0x74>)
 8009c1c:	e9cd 5600 	strd	r5, r6, [sp]
 8009c20:	a809      	add	r0, sp, #36	; 0x24
 8009c22:	f000 ff97 	bl	800ab54 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <LOG_ERROR+0x78>)
 8009c28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4798      	blx	r3
	free(Temp_buffer);
 8009c2e:	9807      	ldr	r0, [sp, #28]
 8009c30:	f000 ffe8 	bl	800ac04 <free>
	free(Output_buffer);
 8009c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c36:	f000 ffe5 	bl	800ac04 <free>
}
 8009c3a:	b00b      	add	sp, #44	; 0x2c
 8009c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c40:	b003      	add	sp, #12
 8009c42:	4770      	bx	lr
 8009c44:	200000f1 	.word	0x200000f1
 8009c48:	0800ef24 	.word	0x0800ef24
 8009c4c:	0800edac 	.word	0x0800edac
 8009c50:	0800edb8 	.word	0x0800edb8
 8009c54:	0800e7a8 	.word	0x0800e7a8
 8009c58:	2000b9c0 	.word	0x2000b9c0

08009c5c <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 8009c5c:	b40e      	push	{r1, r2, r3}
 8009c5e:	b570      	push	{r4, r5, r6, lr}
 8009c60:	b08b      	sub	sp, #44	; 0x2c
 8009c62:	ac0f      	add	r4, sp, #60	; 0x3c
 8009c64:	4606      	mov	r6, r0
 8009c66:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c6a:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009c6c:	f7fe fca8 	bl	80085c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009c70:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009c72:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009c74:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009c76:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009c78:	4622      	mov	r2, r4
 8009c7a:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009c7c:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009c7e:	f002 f809 	bl	800bc94 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 8009c82:	4b0f      	ldr	r3, [pc, #60]	; (8009cc0 <LOG_DEBUG+0x64>)
 8009c84:	4a0f      	ldr	r2, [pc, #60]	; (8009cc4 <LOG_DEBUG+0x68>)
 8009c86:	7819      	ldrb	r1, [r3, #0]
 8009c88:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <LOG_DEBUG+0x6c>)
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	9b07      	ldr	r3, [sp, #28]
 8009c8e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c92:	9302      	str	r3, [sp, #8]
 8009c94:	490d      	ldr	r1, [pc, #52]	; (8009ccc <LOG_DEBUG+0x70>)
 8009c96:	4b0e      	ldr	r3, [pc, #56]	; (8009cd0 <LOG_DEBUG+0x74>)
 8009c98:	e9cd 5600 	strd	r5, r6, [sp]
 8009c9c:	a809      	add	r0, sp, #36	; 0x24
 8009c9e:	f000 ff59 	bl	800ab54 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009ca2:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <LOG_DEBUG+0x78>)
 8009ca4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4798      	blx	r3
	free(Temp_buffer);
 8009caa:	9807      	ldr	r0, [sp, #28]
 8009cac:	f000 ffaa 	bl	800ac04 <free>
	free(Output_buffer);
 8009cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cb2:	f000 ffa7 	bl	800ac04 <free>
}
 8009cb6:	b00b      	add	sp, #44	; 0x2c
 8009cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cbc:	b003      	add	sp, #12
 8009cbe:	4770      	bx	lr
 8009cc0:	200000f0 	.word	0x200000f0
 8009cc4:	0800ef24 	.word	0x0800ef24
 8009cc8:	0800edac 	.word	0x0800edac
 8009ccc:	0800edb8 	.word	0x0800edb8
 8009cd0:	0800edd4 	.word	0x0800edd4
 8009cd4:	2000b9c0 	.word	0x2000b9c0

08009cd8 <LOG_MEM>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_MEM(const char *tag,  const char *format, ...){
 8009cd8:	b40e      	push	{r1, r2, r3}
 8009cda:	b570      	push	{r4, r5, r6, lr}
 8009cdc:	b08b      	sub	sp, #44	; 0x2c
 8009cde:	ac0f      	add	r4, sp, #60	; 0x3c
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ce6:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009ce8:	f7fe fc6a 	bl	80085c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009cec:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009cee:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009cf0:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009cf2:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009cf8:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009cfa:	f001 ffcb 	bl	800bc94 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logm], log_level_str[4], time, tag, Temp_buffer, COLOR_END);
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <LOG_MEM+0x64>)
 8009d00:	4a0f      	ldr	r2, [pc, #60]	; (8009d40 <LOG_MEM+0x68>)
 8009d02:	7819      	ldrb	r1, [r3, #0]
 8009d04:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <LOG_MEM+0x6c>)
 8009d06:	9303      	str	r3, [sp, #12]
 8009d08:	9b07      	ldr	r3, [sp, #28]
 8009d0a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009d0e:	9302      	str	r3, [sp, #8]
 8009d10:	490d      	ldr	r1, [pc, #52]	; (8009d48 <LOG_MEM+0x70>)
 8009d12:	4b0e      	ldr	r3, [pc, #56]	; (8009d4c <LOG_MEM+0x74>)
 8009d14:	e9cd 5600 	strd	r5, r6, [sp]
 8009d18:	a809      	add	r0, sp, #36	; 0x24
 8009d1a:	f000 ff1b 	bl	800ab54 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logm], log_level_str[4], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009d1e:	4b0c      	ldr	r3, [pc, #48]	; (8009d50 <LOG_MEM+0x78>)
 8009d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4798      	blx	r3
	free(Temp_buffer);
 8009d26:	9807      	ldr	r0, [sp, #28]
 8009d28:	f000 ff6c 	bl	800ac04 <free>
	free(Output_buffer);
 8009d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d2e:	f000 ff69 	bl	800ac04 <free>
}
 8009d32:	b00b      	add	sp, #44	; 0x2c
 8009d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d38:	b003      	add	sp, #12
 8009d3a:	4770      	bx	lr
 8009d3c:	200000f3 	.word	0x200000f3
 8009d40:	0800ef24 	.word	0x0800ef24
 8009d44:	0800edac 	.word	0x0800edac
 8009d48:	0800edb8 	.word	0x0800edb8
 8009d4c:	0800edd8 	.word	0x0800edd8
 8009d50:	2000b9c0 	.word	0x2000b9c0

08009d54 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 8009d54:	b40e      	push	{r1, r2, r3}
 8009d56:	b570      	push	{r4, r5, r6, lr}
 8009d58:	b08b      	sub	sp, #44	; 0x2c
 8009d5a:	ac0f      	add	r4, sp, #60	; 0x3c
 8009d5c:	4606      	mov	r6, r0
 8009d5e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d62:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009d64:	f7fe fc2c 	bl	80085c0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009d68:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009d6a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009d6c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009d6e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009d70:	4622      	mov	r2, r4
 8009d72:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009d74:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009d76:	f001 ff8d 	bl	800bc94 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 8009d7a:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <LOG_EVENT+0x64>)
 8009d7c:	4a0f      	ldr	r2, [pc, #60]	; (8009dbc <LOG_EVENT+0x68>)
 8009d7e:	7819      	ldrb	r1, [r3, #0]
 8009d80:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <LOG_EVENT+0x6c>)
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	9b07      	ldr	r3, [sp, #28]
 8009d86:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009d8a:	9302      	str	r3, [sp, #8]
 8009d8c:	490d      	ldr	r1, [pc, #52]	; (8009dc4 <LOG_EVENT+0x70>)
 8009d8e:	4b0e      	ldr	r3, [pc, #56]	; (8009dc8 <LOG_EVENT+0x74>)
 8009d90:	e9cd 5600 	strd	r5, r6, [sp]
 8009d94:	a809      	add	r0, sp, #36	; 0x24
 8009d96:	f000 fedd 	bl	800ab54 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logp], log_level_str[5], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009d9a:	4b0c      	ldr	r3, [pc, #48]	; (8009dcc <LOG_EVENT+0x78>)
 8009d9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4798      	blx	r3
	free(Temp_buffer);
 8009da2:	9807      	ldr	r0, [sp, #28]
 8009da4:	f000 ff2e 	bl	800ac04 <free>
	free(Output_buffer);
 8009da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009daa:	f000 ff2b 	bl	800ac04 <free>
}
 8009dae:	b00b      	add	sp, #44	; 0x2c
 8009db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009db4:	b003      	add	sp, #12
 8009db6:	4770      	bx	lr
 8009db8:	200000f4 	.word	0x200000f4
 8009dbc:	0800ef24 	.word	0x0800ef24
 8009dc0:	0800edac 	.word	0x0800edac
 8009dc4:	0800edb8 	.word	0x0800edb8
 8009dc8:	0800eddc 	.word	0x0800eddc
 8009dcc:	2000b9c0 	.word	0x2000b9c0

08009dd0 <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009dd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 8009dd4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8009e44 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009dd8:	b083      	sub	sp, #12
 8009dda:	461f      	mov	r7, r3
	stm_ret_t res;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009de0:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 8009de2:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009de6:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 8009dea:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009dec:	4606      	mov	r6, r0
 8009dee:	460d      	mov	r5, r1
	stm_ret_t res;
 8009df0:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 8009df2:	4798      	blx	r3
 8009df4:	9001      	str	r0, [sp, #4]
 8009df6:	b14f      	cbz	r7, 8009e0c <wait_flag_in_register_timeout+0x3c>
 8009df8:	f1b8 0f00 	cmp.w	r8, #0
 8009dfc:	d110      	bne.n	8009e20 <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009dfe:	682b      	ldr	r3, [r5, #0]
 8009e00:	421c      	tst	r4, r3
 8009e02:	d0fc      	beq.n	8009dfe <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 8009e04:	4630      	mov	r0, r6
 8009e06:	b003      	add	sp, #12
 8009e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e0c:	f1b8 0f00 	cmp.w	r8, #0
 8009e10:	d113      	bne.n	8009e3a <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009e12:	682b      	ldr	r3, [r5, #0]
 8009e14:	421c      	tst	r4, r3
 8009e16:	d1fc      	bne.n	8009e12 <wait_flag_in_register_timeout+0x42>
}
 8009e18:	4630      	mov	r0, r6
 8009e1a:	b003      	add	sp, #12
 8009e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	4223      	tst	r3, r4
 8009e24:	d1ee      	bne.n	8009e04 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 8009e26:	f8d9 3000 	ldr.w	r3, [r9]
 8009e2a:	4798      	blx	r3
 8009e2c:	9b01      	ldr	r3, [sp, #4]
 8009e2e:	1ac0      	subs	r0, r0, r3
 8009e30:	4540      	cmp	r0, r8
 8009e32:	d3e0      	bcc.n	8009df6 <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 8009e34:	2302      	movs	r3, #2
 8009e36:	7033      	strb	r3, [r6, #0]
				return res;
 8009e38:	e7e4      	b.n	8009e04 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009e3a:	682b      	ldr	r3, [r5, #0]
 8009e3c:	4223      	tst	r3, r4
 8009e3e:	d1f2      	bne.n	8009e26 <wait_flag_in_register_timeout+0x56>
 8009e40:	e7e0      	b.n	8009e04 <wait_flag_in_register_timeout+0x34>
 8009e42:	bf00      	nop
 8009e44:	200000f8 	.word	0x200000f8

08009e48 <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 8009e48:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 8009e4a:	6042      	str	r2, [r0, #4]
}
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop

08009e50 <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 8009e50:	6041      	str	r1, [r0, #4]
}
 8009e52:	4770      	bx	lr

08009e54 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 8009e54:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8009e56:	f1a0 0001 	sub.w	r0, r0, #1
 8009e5a:	fab0 f080 	clz	r0, r0
 8009e5e:	0940      	lsrs	r0, r0, #5
 8009e60:	4770      	bx	lr
 8009e62:	bf00      	nop

08009e64 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 8009e64:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8009e66:	f1a0 0002 	sub.w	r0, r0, #2
 8009e6a:	fab0 f080 	clz	r0, r0
 8009e6e:	0940      	lsrs	r0, r0, #5
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop

08009e74 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 8009e74:	4b01      	ldr	r3, [pc, #4]	; (8009e7c <get_revid+0x8>)
 8009e76:	6818      	ldr	r0, [r3, #0]
}
 8009e78:	0c00      	lsrs	r0, r0, #16
 8009e7a:	4770      	bx	lr
 8009e7c:	e0042000 	.word	0xe0042000

08009e80 <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 8009e80:	4b02      	ldr	r3, [pc, #8]	; (8009e8c <get_devid+0xc>)
 8009e82:	6818      	ldr	r0, [r3, #0]
}
 8009e84:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	e0042000 	.word	0xe0042000

08009e90 <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 8009e90:	4b01      	ldr	r3, [pc, #4]	; (8009e98 <get_flashsize+0x8>)
 8009e92:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 8009e94:	b280      	uxth	r0, r0
 8009e96:	4770      	bx	lr
 8009e98:	1fff7a00 	.word	0x1fff7a00

08009e9c <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8009e9c:	4b14      	ldr	r3, [pc, #80]	; (8009ef0 <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 8009e9e:	4a15      	ldr	r2, [pc, #84]	; (8009ef4 <system_init+0x58>)
 8009ea0:	6819      	ldr	r1, [r3, #0]
 8009ea2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 8009ea6:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8009ea8:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 8009eaa:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009eac:	4c12      	ldr	r4, [pc, #72]	; (8009ef8 <system_init+0x5c>)
 8009eae:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009eb2:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 8009eb4:	6819      	ldr	r1, [r3, #0]
 8009eb6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009eba:	6019      	str	r1, [r3, #0]
 8009ebc:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ebe:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8009ec2:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 8009ec6:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8009ec8:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 8009eca:	200f      	movs	r0, #15
 8009ecc:	f7fe fb56 	bl	800857c <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8009ed0:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 8009ed2:	490b      	ldr	r1, [pc, #44]	; (8009f00 <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8009ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ed6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009eda:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8009edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ede:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ee2:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 8009ee4:	680b      	ldr	r3, [r1, #0]
 8009ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eea:	600b      	str	r3, [r1, #0]
}
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	bf00      	nop
 8009ef0:	40023c00 	.word	0x40023c00
 8009ef4:	05fa0300 	.word	0x05fa0300
 8009ef8:	e000ed00 	.word	0xe000ed00
 8009efc:	40023800 	.word	0x40023800
 8009f00:	40007000 	.word	0x40007000

08009f04 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 8009f04:	4a03      	ldr	r2, [pc, #12]	; (8009f14 <embedded_flash_set_latency+0x10>)
 8009f06:	6813      	ldr	r3, [r2, #0]
 8009f08:	f023 030f 	bic.w	r3, r3, #15
 8009f0c:	4318      	orrs	r0, r3
 8009f0e:	6010      	str	r0, [r2, #0]
}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40023c00 	.word	0x40023c00

08009f18 <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8009f18:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009f1a:	490e      	ldr	r1, [pc, #56]	; (8009f54 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009f1c:	4c0e      	ldr	r4, [pc, #56]	; (8009f58 <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8009f1e:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009f20:	09c3      	lsrs	r3, r0, #7
 8009f22:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009f26:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009f28:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009f2c:	d00e      	beq.n	8009f4c <embedded_flash_calculate_latency+0x34>
 8009f2e:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <embedded_flash_calculate_latency+0x44>)
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d00b      	beq.n	8009f4c <embedded_flash_calculate_latency+0x34>
 8009f34:	4b0a      	ldr	r3, [pc, #40]	; (8009f60 <embedded_flash_calculate_latency+0x48>)
 8009f36:	429a      	cmp	r2, r3
 8009f38:	d008      	beq.n	8009f4c <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 8009f3a:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <embedded_flash_calculate_latency+0x4c>)
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d005      	beq.n	8009f4c <embedded_flash_calculate_latency+0x34>
 8009f40:	4b09      	ldr	r3, [pc, #36]	; (8009f68 <embedded_flash_calculate_latency+0x50>)
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d002      	beq.n	8009f4c <embedded_flash_calculate_latency+0x34>
 8009f46:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <embedded_flash_calculate_latency+0x54>)
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d100      	bne.n	8009f4e <embedded_flash_calculate_latency+0x36>
 8009f4c:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 8009f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f52:	4770      	bx	lr
 8009f54:	01c9c380 	.word	0x01c9c380
 8009f58:	011e54c7 	.word	0x011e54c7
 8009f5c:	03938700 	.word	0x03938700
 8009f60:	055d4a80 	.word	0x055d4a80
 8009f64:	07270e00 	.word	0x07270e00
 8009f68:	08f0d180 	.word	0x08f0d180
 8009f6c:	0aba9500 	.word	0x0aba9500

08009f70 <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 8009f70:	4b02      	ldr	r3, [pc, #8]	; (8009f7c <embedded_flash_get_latency+0xc>)
 8009f72:	6818      	ldr	r0, [r3, #0]
}
 8009f74:	f000 000f 	and.w	r0, r0, #15
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	40023c00 	.word	0x40023c00

08009f80 <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f80:	4b1f      	ldr	r3, [pc, #124]	; (800a000 <NVIC_Set_Priority+0x80>)
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009f88:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 8009f8a:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f8c:	f1c3 0e07 	rsb	lr, r3, #7
 8009f90:	bf28      	it	cs
 8009f92:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f94:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f98:	f1be 0f04 	cmp.w	lr, #4
 8009f9c:	bf28      	it	cs
 8009f9e:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fa2:	f1bc 0f06 	cmp.w	ip, #6
 8009fa6:	d91f      	bls.n	8009fe8 <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fa8:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009faa:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009fae:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009fb2:	bf28      	it	cs
 8009fb4:	220f      	movcs	r2, #15
 8009fb6:	fa0c fc03 	lsl.w	ip, ip, r3
 8009fba:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009fbe:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009fc2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009fc6:	ea21 010c 	bic.w	r1, r1, ip
 8009fca:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8009fcc:	2800      	cmp	r0, #0
         );
 8009fce:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8009fd2:	db0c      	blt.n	8009fee <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fd4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009fd8:	0109      	lsls	r1, r1, #4
 8009fda:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009fde:	b2c9      	uxtb	r1, r1
 8009fe0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009fe4:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fe8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009fea:	4613      	mov	r3, r2
 8009fec:	e7e7      	b.n	8009fbe <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <NVIC_Set_Priority+0x84>)
 8009ff0:	f000 000f 	and.w	r0, r0, #15
 8009ff4:	0109      	lsls	r1, r1, #4
 8009ff6:	4403      	add	r3, r0
 8009ff8:	b2c9      	uxtb	r1, r1
 8009ffa:	7619      	strb	r1, [r3, #24]
 8009ffc:	f85d fb04 	ldr.w	pc, [sp], #4
 800a000:	e000ed00 	.word	0xe000ed00
 800a004:	e000ecfc 	.word	0xe000ecfc

0800a008 <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 800a008:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 800a00a:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 800a00c:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 800a00e:	f001 fe21 	bl	800bc54 <sbrk>
 800a012:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800a014:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 800a018:	4668      	mov	r0, sp
 800a01a:	f000 fe2b 	bl	800ac74 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 800a01e:	4b06      	ldr	r3, [pc, #24]	; (800a038 <sys_get_free_heap_size+0x30>)
 800a020:	9808      	ldr	r0, [sp, #32]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	42ab      	cmp	r3, r5
 800a026:	bf94      	ite	ls
 800a028:	ebc4 0403 	rsbls	r4, r4, r3
 800a02c:	ebc4 0405 	rsbhi	r4, r4, r5
}
 800a030:	4420      	add	r0, r4
 800a032:	b00b      	add	sp, #44	; 0x2c
 800a034:	bd30      	pop	{r4, r5, pc}
 800a036:	bf00      	nop
 800a038:	2000b9c8 	.word	0x2000b9c8

0800a03c <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 800a03c:	4a06      	ldr	r2, [pc, #24]	; (800a058 <sys_calculate_cpu_load_percent+0x1c>)
 800a03e:	4b07      	ldr	r3, [pc, #28]	; (800a05c <sys_calculate_cpu_load_percent+0x20>)
 800a040:	6810      	ldr	r0, [r2, #0]
 800a042:	6819      	ldr	r1, [r3, #0]
 800a044:	4288      	cmp	r0, r1
 800a046:	d005      	beq.n	800a054 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 800a048:	4805      	ldr	r0, [pc, #20]	; (800a060 <sys_calculate_cpu_load_percent+0x24>)
 800a04a:	6801      	ldr	r1, [r0, #0]
 800a04c:	3101      	adds	r1, #1
 800a04e:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	601a      	str	r2, [r3, #0]
    }
}
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	2000b728 	.word	0x2000b728
 800a05c:	2000b9d0 	.word	0x2000b9d0
 800a060:	2000b9d4 	.word	0x2000b9d4

0800a064 <register_exception_handler>:

	return (float)(((float)total_ram_use / (float)total_ram_size) * 100.0F);
}

void register_exception_handler(volatile void(*p_exception_hander)(void)){
	exception_hander = p_exception_hander;
 800a064:	4b01      	ldr	r3, [pc, #4]	; (800a06c <register_exception_handler+0x8>)
 800a066:	6018      	str	r0, [r3, #0]
}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	2000b9c4 	.word	0x2000b9c4

0800a070 <exception_interrupt_handler>:

void exception_interrupt_handler(const char *tag, char *message){
 800a070:	b510      	push	{r4, lr}
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 800a072:	f7ff fdb5 	bl	8009be0 <LOG_ERROR>
	if(exception_hander != NULL) exception_hander();
 800a076:	4b03      	ldr	r3, [pc, #12]	; (800a084 <exception_interrupt_handler+0x14>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	b113      	cbz	r3, 800a082 <exception_interrupt_handler+0x12>
#endif /* CONFIG_USE_LOG_MONITOR */
}
 800a07c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(exception_hander != NULL) exception_hander();
 800a080:	4718      	bx	r3
}
 800a082:	bd10      	pop	{r4, pc}
 800a084:	2000b9c4 	.word	0x2000b9c4

0800a088 <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 800a088:	4b02      	ldr	r3, [pc, #8]	; (800a094 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 800a08a:	4903      	ldr	r1, [pc, #12]	; (800a098 <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 800a08c:	4a03      	ldr	r2, [pc, #12]	; (800a09c <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 800a08e:	1a5b      	subs	r3, r3, r1
 800a090:	6013      	str	r3, [r2, #0]
}
 800a092:	4770      	bx	lr
 800a094:	20030000 	.word	0x20030000
 800a098:	00000400 	.word	0x00000400
 800a09c:	2000b9c8 	.word	0x2000b9c8

0800a0a0 <add_device_properties>:
    for (auto device = device_properties_list.begin(); device != device_properties_list.end(); ++device) {
    	LOG_WARN(TAG, "Device 0x%08x[%s].", (unsigned int)(*device)->prop.address, (*device)->prop.name);
    }
}

dev_struct_t *add_device_properties(char *jdata){
 800a0a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0a4:	b084      	sub	sp, #16
	pkt_err_t err;
	pkt_json_t json;
 800a0a6:	2400      	movs	r4, #0
dev_struct_t *add_device_properties(char *jdata){
 800a0a8:	4606      	mov	r6, r0

	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800a0aa:	2030      	movs	r0, #48	; 0x30
	pkt_json_t json;
 800a0ac:	9401      	str	r4, [sp, #4]
 800a0ae:	f88d 4008 	strb.w	r4, [sp, #8]
 800a0b2:	9403      	str	r4, [sp, #12]
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800a0b4:	f000 fd9e 	bl	800abf4 <malloc>

	dev_prop->env.temp = 0.0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	6003      	str	r3, [r0, #0]
	dev_prop->env.humi = 0.0;
 800a0bc:	6043      	str	r3, [r0, #4]
	dev_prop->env.curr = 0.0;
 800a0be:	6083      	str	r3, [r0, #8]
	dev_prop->ctrl.relay2 = 0;
	dev_prop->ctrl.relay3 = 0;
	dev_prop->ctrl.relay4 = 0;
	dev_prop->sett.mode = 0;
	dev_prop->sett.type = 0;
	dev_prop->sett.max_temp = 0.0;
 800a0c0:	6183      	str	r3, [r0, #24]
	dev_prop->sett.min_temp = 0.0;
 800a0c2:	61c3      	str	r3, [r0, #28]
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800a0c4:	4605      	mov	r5, r0
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800a0c6:	4927      	ldr	r1, [pc, #156]	; (800a164 <add_device_properties+0xc4>)
	dev_prop->ctrl.relay1 = 0;
 800a0c8:	6104      	str	r4, [r0, #16]
	dev_prop->sett.mode = 0;
 800a0ca:	8284      	strh	r4, [r0, #20]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800a0cc:	3020      	adds	r0, #32
 800a0ce:	f000 fd41 	bl	800ab54 <asiprintf>
	asprintf(&(dev_prop->sett.time_stop), "00:00:00");
 800a0d2:	4924      	ldr	r1, [pc, #144]	; (800a164 <add_device_properties+0xc4>)
 800a0d4:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a0d8:	f000 fd3c 	bl	800ab54 <asiprintf>
	asprintf(&(dev_prop->env.time), "14:30:00 05/05/23");
 800a0dc:	4922      	ldr	r1, [pc, #136]	; (800a168 <add_device_properties+0xc8>)
 800a0de:	f105 000c 	add.w	r0, r5, #12
 800a0e2:	f000 fd37 	bl	800ab54 <asiprintf>

	err = json_get_object(jdata, &json, (char *)"addr");
 800a0e6:	4a21      	ldr	r2, [pc, #132]	; (800a16c <add_device_properties+0xcc>)
 800a0e8:	a901      	add	r1, sp, #4
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	f7fa fea6 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 800a0f0:	b350      	cbz	r0, 800a148 <add_device_properties+0xa8>
		dev_prop->prop.address = strtol(json.value, NULL, 16);
	json_release_object(&json);
 800a0f2:	a801      	add	r0, sp, #4
 800a0f4:	f7fa ffba 	bl	800506c <json_release_object>

	err = json_get_object(jdata, &json, (char *)"name");
 800a0f8:	4a1d      	ldr	r2, [pc, #116]	; (800a170 <add_device_properties+0xd0>)
 800a0fa:	a901      	add	r1, sp, #4
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7fa fe9d 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 800a102:	b340      	cbz	r0, 800a156 <add_device_properties+0xb6>
		asprintf(&(dev_prop->prop.name), "%s", json.value);
	json_release_object(&json);
 800a104:	a801      	add	r0, sp, #4
 800a106:	f7fa ffb1 	bl	800506c <json_release_object>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a10a:	200c      	movs	r0, #12
 800a10c:	f000 fcb0 	bl	800aa70 <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 800a110:	4e18      	ldr	r6, [pc, #96]	; (800a174 <add_device_properties+0xd4>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a112:	6085      	str	r5, [r0, #8]
 800a114:	4631      	mov	r1, r6
 800a116:	f000 fcbc 	bl	800aa92 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800a11a:	68b3      	ldr	r3, [r6, #8]
      { return iterator(this->_M_impl._M_node._M_next); }
 800a11c:	6834      	ldr	r4, [r6, #0]
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800a11e:	3301      	adds	r3, #1
    for (auto device = device_properties_list.begin(); device != device_properties_list.end(); ++device) {
 800a120:	42b4      	cmp	r4, r6
 800a122:	60b3      	str	r3, [r6, #8]
 800a124:	d00c      	beq.n	800a140 <add_device_properties+0xa0>
    	LOG_WARN(TAG, "Device 0x%08x[%s].", (unsigned int)(*device)->prop.address, (*device)->prop.name);
 800a126:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800a180 <add_device_properties+0xe0>
 800a12a:	4f13      	ldr	r7, [pc, #76]	; (800a178 <add_device_properties+0xd8>)
 800a12c:	68a2      	ldr	r2, [r4, #8]
 800a12e:	4641      	mov	r1, r8
 800a130:	e9d2 230a 	ldrd	r2, r3, [r2, #40]	; 0x28
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff fd15 	bl	8009b64 <LOG_WARN>
	_M_node = _M_node->_M_next;
 800a13a:	6824      	ldr	r4, [r4, #0]
    for (auto device = device_properties_list.begin(); device != device_properties_list.end(); ++device) {
 800a13c:	42b4      	cmp	r4, r6
 800a13e:	d1f5      	bne.n	800a12c <add_device_properties+0x8c>

	device_properties_list.push_back(dev_prop);
	show_device_list();

	return dev_prop;
}
 800a140:	4628      	mov	r0, r5
 800a142:	b004      	add	sp, #16
 800a144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dev_prop->prop.address = strtol(json.value, NULL, 16);
 800a148:	4601      	mov	r1, r0
 800a14a:	2210      	movs	r2, #16
 800a14c:	9803      	ldr	r0, [sp, #12]
 800a14e:	f001 fd77 	bl	800bc40 <strtol>
 800a152:	62a8      	str	r0, [r5, #40]	; 0x28
 800a154:	e7cd      	b.n	800a0f2 <add_device_properties+0x52>
		asprintf(&(dev_prop->prop.name), "%s", json.value);
 800a156:	9a03      	ldr	r2, [sp, #12]
 800a158:	4908      	ldr	r1, [pc, #32]	; (800a17c <add_device_properties+0xdc>)
 800a15a:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 800a15e:	f000 fcf9 	bl	800ab54 <asiprintf>
 800a162:	e7cf      	b.n	800a104 <add_device_properties+0x64>
 800a164:	0800efa4 	.word	0x0800efa4
 800a168:	0800efb0 	.word	0x0800efb0
 800a16c:	0800e0e0 	.word	0x0800e0e0
 800a170:	0800e0e8 	.word	0x0800e0e8
 800a174:	2000b9dc 	.word	0x2000b9dc
 800a178:	0800efd8 	.word	0x0800efd8
 800a17c:	0800ebec 	.word	0x0800ebec
 800a180:	0800efc4 	.word	0x0800efc4

0800a184 <remove_device_properties>:

void remove_device_properties(char *jdata){
 800a184:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a186:	b087      	sub	sp, #28
	pkt_err_t err;
	pkt_json_t json;
 800a188:	2600      	movs	r6, #0
	uint32_t rm_addr = 0x00U;

	err = json_get_object(jdata, &json, (char *)"addr");
 800a18a:	4a32      	ldr	r2, [pc, #200]	; (800a254 <remove_device_properties+0xd0>)
	pkt_json_t json;
 800a18c:	9603      	str	r6, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 800a18e:	a903      	add	r1, sp, #12
	pkt_json_t json;
 800a190:	f88d 6010 	strb.w	r6, [sp, #16]
 800a194:	9605      	str	r6, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 800a196:	f7fa fe51 	bl	8004e3c <json_get_object>
	if(err == PKT_ERR_OK)
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d049      	beq.n	800a232 <remove_device_properties+0xae>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800a19e:	4d2e      	ldr	r5, [pc, #184]	; (800a258 <remove_device_properties+0xd4>)
		rm_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 800a1a0:	a803      	add	r0, sp, #12
 800a1a2:	f7fa ff63 	bl	800506c <json_release_object>
 800a1a6:	682c      	ldr	r4, [r5, #0]

    if (device_properties_list.empty()) {
 800a1a8:	42ac      	cmp	r4, r5
 800a1aa:	d049      	beq.n	800a240 <remove_device_properties+0xbc>
        return;
    }

    auto device = device_properties_list.begin();
    while (device != device_properties_list.end()) {
        if ((*device)->prop.address == rm_addr) {
 800a1ac:	68a3      	ldr	r3, [r4, #8]
 800a1ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1b0:	42b2      	cmp	r2, r6
 800a1b2:	d00c      	beq.n	800a1ce <remove_device_properties+0x4a>
	_M_node = _M_node->_M_next;
 800a1b4:	6824      	ldr	r4, [r4, #0]
    while (device != device_properties_list.end()) {
 800a1b6:	42ac      	cmp	r4, r5
 800a1b8:	d1f8      	bne.n	800a1ac <remove_device_properties+0x28>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800a1ba:	4b28      	ldr	r3, [pc, #160]	; (800a25c <remove_device_properties+0xd8>)
 800a1bc:	9300      	str	r3, [sp, #0]
 800a1be:	4a28      	ldr	r2, [pc, #160]	; (800a260 <remove_device_properties+0xdc>)
 800a1c0:	4928      	ldr	r1, [pc, #160]	; (800a264 <remove_device_properties+0xe0>)
 800a1c2:	4829      	ldr	r0, [pc, #164]	; (800a268 <remove_device_properties+0xe4>)
 800a1c4:	2368      	movs	r3, #104	; 0x68
 800a1c6:	f7ff fd49 	bl	8009c5c <LOG_DEBUG>
	if((*device)->env.time != NULL) free((*device)->env.time);
	free((*device));

	device_properties_list.erase(device);
	show_device_list();
}
 800a1ca:	b007      	add	sp, #28
 800a1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((*device)->prop.name != NULL) free((*device)->prop.name);
 800a1ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a1d0:	b110      	cbz	r0, 800a1d8 <remove_device_properties+0x54>
 800a1d2:	f000 fd17 	bl	800ac04 <free>
	if((*device)->sett.time_start != NULL) free((*device)->sett.time_start);
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	6a18      	ldr	r0, [r3, #32]
 800a1da:	b110      	cbz	r0, 800a1e2 <remove_device_properties+0x5e>
 800a1dc:	f000 fd12 	bl	800ac04 <free>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a1e4:	b110      	cbz	r0, 800a1ec <remove_device_properties+0x68>
 800a1e6:	f000 fd0d 	bl	800ac04 <free>
	if((*device)->env.time != NULL) free((*device)->env.time);
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	68d8      	ldr	r0, [r3, #12]
 800a1ee:	b110      	cbz	r0, 800a1f6 <remove_device_properties+0x72>
 800a1f0:	f000 fd08 	bl	800ac04 <free>
	free((*device));
 800a1f4:	68a3      	ldr	r3, [r4, #8]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 fd04 	bl	800ac04 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800a1fc:	68ab      	ldr	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800a1fe:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800a200:	3b01      	subs	r3, #1
 800a202:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800a204:	f000 fc4c 	bl	800aaa0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 800a208:	4620      	mov	r0, r4
 800a20a:	210c      	movs	r1, #12
 800a20c:	f000 fc2e 	bl	800aa6c <_ZdlPvj>
      { return iterator(this->_M_impl._M_node._M_next); }
 800a210:	682c      	ldr	r4, [r5, #0]
    for (auto device = device_properties_list.begin(); device != device_properties_list.end(); ++device) {
 800a212:	42ac      	cmp	r4, r5
 800a214:	d0d9      	beq.n	800a1ca <remove_device_properties+0x46>
    	LOG_WARN(TAG, "Device 0x%08x[%s].", (unsigned int)(*device)->prop.address, (*device)->prop.name);
 800a216:	4f15      	ldr	r7, [pc, #84]	; (800a26c <remove_device_properties+0xe8>)
 800a218:	4e13      	ldr	r6, [pc, #76]	; (800a268 <remove_device_properties+0xe4>)
 800a21a:	68a2      	ldr	r2, [r4, #8]
 800a21c:	4639      	mov	r1, r7
 800a21e:	e9d2 230a 	ldrd	r2, r3, [r2, #40]	; 0x28
 800a222:	4630      	mov	r0, r6
 800a224:	f7ff fc9e 	bl	8009b64 <LOG_WARN>
	_M_node = _M_node->_M_next;
 800a228:	6824      	ldr	r4, [r4, #0]
    for (auto device = device_properties_list.begin(); device != device_properties_list.end(); ++device) {
 800a22a:	42ac      	cmp	r4, r5
 800a22c:	d1f5      	bne.n	800a21a <remove_device_properties+0x96>
}
 800a22e:	b007      	add	sp, #28
 800a230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rm_addr = strtol(json.value, NULL, 16);
 800a232:	4601      	mov	r1, r0
 800a234:	2210      	movs	r2, #16
 800a236:	9805      	ldr	r0, [sp, #20]
 800a238:	f001 fd02 	bl	800bc40 <strtol>
 800a23c:	4606      	mov	r6, r0
 800a23e:	e7ae      	b.n	800a19e <remove_device_properties+0x1a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800a240:	4b06      	ldr	r3, [pc, #24]	; (800a25c <remove_device_properties+0xd8>)
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	4a0a      	ldr	r2, [pc, #40]	; (800a270 <remove_device_properties+0xec>)
 800a246:	4907      	ldr	r1, [pc, #28]	; (800a264 <remove_device_properties+0xe0>)
 800a248:	4807      	ldr	r0, [pc, #28]	; (800a268 <remove_device_properties+0xe4>)
 800a24a:	235b      	movs	r3, #91	; 0x5b
 800a24c:	f7ff fd06 	bl	8009c5c <LOG_DEBUG>
        return;
 800a250:	e7bb      	b.n	800a1ca <remove_device_properties+0x46>
 800a252:	bf00      	nop
 800a254:	0800e0e0 	.word	0x0800e0e0
 800a258:	2000b9dc 	.word	0x2000b9dc
 800a25c:	0800f000 	.word	0x0800f000
 800a260:	0800e164 	.word	0x0800e164
 800a264:	0800dff0 	.word	0x0800dff0
 800a268:	0800efd8 	.word	0x0800efd8
 800a26c:	0800efc4 	.word	0x0800efc4
 800a270:	0800efe0 	.word	0x0800efe0

0800a274 <firebase_init>:

void firebase_init(char *url, char *secret_key){
 800a274:	b510      	push	{r4, lr}
 800a276:	b082      	sub	sp, #8
 800a278:	460c      	mov	r4, r1
 800a27a:	4602      	mov	r2, r0
	char *tmp;

	asprintf(&tmp, "{\"url\":\"%s\"}", url);
 800a27c:	490f      	ldr	r1, [pc, #60]	; (800a2bc <firebase_init+0x48>)
 800a27e:	a801      	add	r0, sp, #4
 800a280:	f000 fc68 	bl	800ab54 <asiprintf>
	if(secret_key != NULL) asprintf(&secret, "%s", secret_key);
 800a284:	b124      	cbz	r4, 800a290 <firebase_init+0x1c>
 800a286:	490e      	ldr	r1, [pc, #56]	; (800a2c0 <firebase_init+0x4c>)
 800a288:	480e      	ldr	r0, [pc, #56]	; (800a2c4 <firebase_init+0x50>)
 800a28a:	4622      	mov	r2, r4
 800a28c:	f000 fc62 	bl	800ab54 <asiprintf>

	wifiif_http_client_new();
 800a290:	f7fc f8da 	bl	8006448 <wifiif_http_client_new>
	wifiif_http_client_config(tmp);
 800a294:	9801      	ldr	r0, [sp, #4]
 800a296:	f7fc f8dd 	bl	8006454 <wifiif_http_client_config>
	wifiif_http_client_config((char *)"{\"transport_ssl\":1}");
 800a29a:	480b      	ldr	r0, [pc, #44]	; (800a2c8 <firebase_init+0x54>)
 800a29c:	f7fc f8da 	bl	8006454 <wifiif_http_client_config>
	wifiif_http_client_config((char *)"{\"crt_bundle\":1}");
 800a2a0:	480a      	ldr	r0, [pc, #40]	; (800a2cc <firebase_init+0x58>)
 800a2a2:	f7fc f8d7 	bl	8006454 <wifiif_http_client_config>
	wifiif_http_client_init();
 800a2a6:	f7fc f8d9 	bl	800645c <wifiif_http_client_init>

	wifiif_http_client_set_header((char *)"Content-Type", (char *)"application/json");
 800a2aa:	4909      	ldr	r1, [pc, #36]	; (800a2d0 <firebase_init+0x5c>)
 800a2ac:	4809      	ldr	r0, [pc, #36]	; (800a2d4 <firebase_init+0x60>)
 800a2ae:	f7fc f8db 	bl	8006468 <wifiif_http_client_set_header>

	free(tmp);
 800a2b2:	9801      	ldr	r0, [sp, #4]
 800a2b4:	f000 fca6 	bl	800ac04 <free>
}
 800a2b8:	b002      	add	sp, #8
 800a2ba:	bd10      	pop	{r4, pc}
 800a2bc:	0800e614 	.word	0x0800e614
 800a2c0:	0800ebec 	.word	0x0800ebec
 800a2c4:	2000b9e8 	.word	0x2000b9e8
 800a2c8:	0800f01c 	.word	0x0800f01c
 800a2cc:	0800f030 	.word	0x0800f030
 800a2d0:	0800f044 	.word	0x0800f044
 800a2d4:	0800f058 	.word	0x0800f058

0800a2d8 <firebase_new_device>:

void firebase_new_device(dev_struct_t *dev){
 800a2d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *path, *data;

	wifiif_http_client_set_method((char *)"HTTP_METHOD_PATCH");

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800a2da:	4e50      	ldr	r6, [pc, #320]	; (800a41c <firebase_new_device+0x144>)
void firebase_new_device(dev_struct_t *dev){
 800a2dc:	b08b      	sub	sp, #44	; 0x2c
 800a2de:	4604      	mov	r4, r0
	wifiif_http_client_set_method((char *)"HTTP_METHOD_PATCH");
 800a2e0:	484f      	ldr	r0, [pc, #316]	; (800a420 <firebase_new_device+0x148>)
 800a2e2:	f7fc f8e9 	bl	80064b8 <wifiif_http_client_set_method>
	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800a2e6:	6833      	ldr	r3, [r6, #0]
 800a2e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a2ea:	ad08      	add	r5, sp, #32
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	f000 808a 	beq.w	800a406 <firebase_new_device+0x12e>
 800a2f2:	494c      	ldr	r1, [pc, #304]	; (800a424 <firebase_new_device+0x14c>)
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	f000 fc2d 	bl	800ab54 <asiprintf>
	else asprintf(&path, "/%s/.json", dev->prop.name);
	wifiif_http_client_set_url(path);
 800a2fa:	9808      	ldr	r0, [sp, #32]
 800a2fc:	f7fc f8c8 	bl	8006490 <wifiif_http_client_set_url>

	asprintf(&data, data_struct, dev->env.temp, dev->env.humi, dev->env.curr, dev->env.time);
 800a300:	6820      	ldr	r0, [r4, #0]
 800a302:	f7f6 f941 	bl	8000588 <__aeabi_f2d>
 800a306:	460b      	mov	r3, r1
 800a308:	4947      	ldr	r1, [pc, #284]	; (800a428 <firebase_new_device+0x150>)
 800a30a:	680f      	ldr	r7, [r1, #0]
 800a30c:	68e1      	ldr	r1, [r4, #12]
 800a30e:	9104      	str	r1, [sp, #16]
 800a310:	4602      	mov	r2, r0
 800a312:	68a0      	ldr	r0, [r4, #8]
 800a314:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a318:	f7f6 f936 	bl	8000588 <__aeabi_f2d>
 800a31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a320:	6860      	ldr	r0, [r4, #4]
 800a322:	f7f6 f931 	bl	8000588 <__aeabi_f2d>
 800a326:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a32a:	e9cd 0100 	strd	r0, r1, [sp]
 800a32e:	4639      	mov	r1, r7
 800a330:	a809      	add	r0, sp, #36	; 0x24
 800a332:	f000 fc0f 	bl	800ab54 <asiprintf>
	wifiif_http_client_set_data(data);
 800a336:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a338:	f7fc f8d2 	bl	80064e0 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800a33c:	f7fc f8e4 	bl	8006508 <wifiif_http_client_request>
	free(data);
 800a340:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a342:	f000 fc5f 	bl	800ac04 <free>

	asprintf(&data, ctrl_struct, dev->ctrl.relay1, dev->ctrl.relay2, dev->ctrl.relay3, dev->ctrl.relay4);
 800a346:	4b39      	ldr	r3, [pc, #228]	; (800a42c <firebase_new_device+0x154>)
 800a348:	6819      	ldr	r1, [r3, #0]
 800a34a:	7ce3      	ldrb	r3, [r4, #19]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	7ca3      	ldrb	r3, [r4, #18]
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	7c63      	ldrb	r3, [r4, #17]
 800a354:	7c22      	ldrb	r2, [r4, #16]
 800a356:	a809      	add	r0, sp, #36	; 0x24
 800a358:	f000 fbfc 	bl	800ab54 <asiprintf>
	wifiif_http_client_set_data(data);
 800a35c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a35e:	f7fc f8bf 	bl	80064e0 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800a362:	f7fc f8d1 	bl	8006508 <wifiif_http_client_request>
	free(data);
 800a366:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a368:	f000 fc4c 	bl	800ac04 <free>

	asprintf(&data, prop_struct, dev->prop.address, dev->prop.name);
 800a36c:	4b30      	ldr	r3, [pc, #192]	; (800a430 <firebase_new_device+0x158>)
 800a36e:	a809      	add	r0, sp, #36	; 0x24
 800a370:	6819      	ldr	r1, [r3, #0]
 800a372:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
 800a376:	f000 fbed 	bl	800ab54 <asiprintf>
	wifiif_http_client_set_data(data);
 800a37a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a37c:	f7fc f8b0 	bl	80064e0 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800a380:	f7fc f8c2 	bl	8006508 <wifiif_http_client_request>
	free(data);
 800a384:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a386:	f000 fc3d 	bl	800ac04 <free>

	free(path);
 800a38a:	9808      	ldr	r0, [sp, #32]
 800a38c:	f000 fc3a 	bl	800ac04 <free>
	if(secret != NULL) asprintf(&path, "/%s/settings/.json?auth=%s", dev->prop.name, secret);
 800a390:	6833      	ldr	r3, [r6, #0]
 800a392:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d03b      	beq.n	800a410 <firebase_new_device+0x138>
 800a398:	4926      	ldr	r1, [pc, #152]	; (800a434 <firebase_new_device+0x15c>)
 800a39a:	4628      	mov	r0, r5
 800a39c:	f000 fbda 	bl	800ab54 <asiprintf>
	else asprintf(&path, "/%s/settings/.json", dev->prop.name);

	wifiif_http_client_set_url(path);
 800a3a0:	9808      	ldr	r0, [sp, #32]
 800a3a2:	f7fc f875 	bl	8006490 <wifiif_http_client_set_url>
	asprintf(&data, set1_struct, dev->sett.mode, dev->sett.type, dev->sett.max_temp, dev->sett.min_temp);
 800a3a6:	4b24      	ldr	r3, [pc, #144]	; (800a438 <firebase_new_device+0x160>)
 800a3a8:	69e0      	ldr	r0, [r4, #28]
 800a3aa:	681d      	ldr	r5, [r3, #0]
 800a3ac:	f7f6 f8ec 	bl	8000588 <__aeabi_f2d>
 800a3b0:	7d63      	ldrb	r3, [r4, #21]
 800a3b2:	9306      	str	r3, [sp, #24]
 800a3b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b8:	69a0      	ldr	r0, [r4, #24]
 800a3ba:	f7f6 f8e5 	bl	8000588 <__aeabi_f2d>
 800a3be:	e9cd 0100 	strd	r0, r1, [sp]
 800a3c2:	9b06      	ldr	r3, [sp, #24]
 800a3c4:	7d22      	ldrb	r2, [r4, #20]
 800a3c6:	4629      	mov	r1, r5
 800a3c8:	a809      	add	r0, sp, #36	; 0x24
 800a3ca:	f000 fbc3 	bl	800ab54 <asiprintf>
	wifiif_http_client_set_data(data);
 800a3ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3d0:	f7fc f886 	bl	80064e0 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800a3d4:	f7fc f898 	bl	8006508 <wifiif_http_client_request>
	free(data);
 800a3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3da:	f000 fc13 	bl	800ac04 <free>
	asprintf(&data, set2_struct, dev->sett.time_start, dev->sett.time_stop);
 800a3de:	4917      	ldr	r1, [pc, #92]	; (800a43c <firebase_new_device+0x164>)
 800a3e0:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800a3e4:	6809      	ldr	r1, [r1, #0]
 800a3e6:	a809      	add	r0, sp, #36	; 0x24
 800a3e8:	f000 fbb4 	bl	800ab54 <asiprintf>
	wifiif_http_client_set_data(data);
 800a3ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3ee:	f7fc f877 	bl	80064e0 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800a3f2:	f7fc f889 	bl	8006508 <wifiif_http_client_request>

	free(data);
 800a3f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3f8:	f000 fc04 	bl	800ac04 <free>
	free(path);
 800a3fc:	9808      	ldr	r0, [sp, #32]
 800a3fe:	f000 fc01 	bl	800ac04 <free>
}
 800a402:	b00b      	add	sp, #44	; 0x2c
 800a404:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else asprintf(&path, "/%s/.json", dev->prop.name);
 800a406:	490e      	ldr	r1, [pc, #56]	; (800a440 <firebase_new_device+0x168>)
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 fba3 	bl	800ab54 <asiprintf>
 800a40e:	e774      	b.n	800a2fa <firebase_new_device+0x22>
	else asprintf(&path, "/%s/settings/.json", dev->prop.name);
 800a410:	490c      	ldr	r1, [pc, #48]	; (800a444 <firebase_new_device+0x16c>)
 800a412:	4628      	mov	r0, r5
 800a414:	f000 fb9e 	bl	800ab54 <asiprintf>
 800a418:	e7c2      	b.n	800a3a0 <firebase_new_device+0xc8>
 800a41a:	bf00      	nop
 800a41c:	2000b9e8 	.word	0x2000b9e8
 800a420:	0800f068 	.word	0x0800f068
 800a424:	0800f07c 	.word	0x0800f07c
 800a428:	20000100 	.word	0x20000100
 800a42c:	200000fc 	.word	0x200000fc
 800a430:	20000104 	.word	0x20000104
 800a434:	0800f09c 	.word	0x0800f09c
 800a438:	20000108 	.word	0x20000108
 800a43c:	2000010c 	.word	0x2000010c
 800a440:	0800f090 	.word	0x0800f090
 800a444:	0800f0b8 	.word	0x0800f0b8

0800a448 <_GLOBAL__sub_I_secret>:
	this->_M_next = this->_M_prev = this;
 800a448:	4b02      	ldr	r3, [pc, #8]	; (800a454 <_GLOBAL__sub_I_secret+0xc>)
	this->_M_size = 0;
 800a44a:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 800a44c:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 800a450:	609a      	str	r2, [r3, #8]
	wifiif_http_client_set_url(path);
	wifiif_http_client_set_data((char *)"{}");
	wifiif_http_client_request();

	free(path);
}
 800a452:	4770      	bx	lr
 800a454:	2000b9dc 	.word	0x2000b9dc

0800a458 <_GLOBAL__sub_D_secret>:
 800a458:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800a45a:	4d06      	ldr	r5, [pc, #24]	; (800a474 <_GLOBAL__sub_D_secret+0x1c>)
 800a45c:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 800a45e:	42ac      	cmp	r4, r5
 800a460:	d006      	beq.n	800a470 <_GLOBAL__sub_D_secret+0x18>
 800a462:	4620      	mov	r0, r4
	  __cur = __tmp->_M_next;
 800a464:	6824      	ldr	r4, [r4, #0]
 800a466:	210c      	movs	r1, #12
 800a468:	f000 fb00 	bl	800aa6c <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 800a46c:	42ac      	cmp	r4, r5
 800a46e:	d1f8      	bne.n	800a462 <_GLOBAL__sub_D_secret+0xa>
 800a470:	bd38      	pop	{r3, r4, r5, pc}
 800a472:	bf00      	nop
 800a474:	2000b9dc 	.word	0x2000b9dc

0800a478 <_ZL17exception_handlerv>:
		vTaskDelay(idle_time);
	}
}

static volatile  void exception_handler(void){
	gpio_set(GPIOB, 14);
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <_ZL17exception_handlerv+0x8>)
 800a47a:	210e      	movs	r1, #14
 800a47c:	f7fc bfc0 	b.w	8007400 <gpio_set>
 800a480:	40020400 	.word	0x40020400

0800a484 <_Z11task_loratxPv>:
void task_loratx(void *){
 800a484:	b508      	push	{r3, lr}
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800a486:	4d08      	ldr	r5, [pc, #32]	; (800a4a8 <_Z11task_loratxPv+0x24>)
 800a488:	4c08      	ldr	r4, [pc, #32]	; (800a4ac <_Z11task_loratxPv+0x28>)
		loraif_request_data();
 800a48a:	f7fa f95f 	bl	800474c <loraif_request_data>
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800a48e:	f7ff fdbb 	bl	800a008 <sys_get_free_heap_size>
 800a492:	4629      	mov	r1, r5
 800a494:	4602      	mov	r2, r0
 800a496:	4620      	mov	r0, r4
 800a498:	f7ff fc1e 	bl	8009cd8 <LOG_MEM>
		vTaskDelay(5000);
 800a49c:	f241 3088 	movw	r0, #5000	; 0x1388
 800a4a0:	f7f8 fe96 	bl	80031d0 <vTaskDelay>
	while(1){
 800a4a4:	e7f1      	b.n	800a48a <_Z11task_loratxPv+0x6>
 800a4a6:	bf00      	nop
 800a4a8:	0800f1ec 	.word	0x0800f1ec
 800a4ac:	0800f200 	.word	0x0800f200

0800a4b0 <_Z11task_lorarxPv>:
void task_lorarx(void *){
 800a4b0:	b500      	push	{lr}
	spi5->init(&spi5_conf);
 800a4b2:	4c23      	ldr	r4, [pc, #140]	; (800a540 <_Z11task_lorarxPv+0x90>)
 800a4b4:	4a23      	ldr	r2, [pc, #140]	; (800a544 <_Z11task_lorarxPv+0x94>)
 800a4b6:	6821      	ldr	r1, [r4, #0]
void task_lorarx(void *){
 800a4b8:	b085      	sub	sp, #20
	spi5->init(&spi5_conf);
 800a4ba:	a802      	add	r0, sp, #8
 800a4bc:	f7fd fa6a 	bl	8007994 <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, gpioA0_event_handler, NULL);
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	4920      	ldr	r1, [pc, #128]	; (800a548 <_Z11task_lorarxPv+0x98>)
 800a4c6:	f7fc fa59 	bl	800697c <exti_register_event_handler>
	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize OKE.");
 800a4ca:	2307      	movs	r3, #7
 800a4cc:	6821      	ldr	r1, [r4, #0]
 800a4ce:	4a1f      	ldr	r2, [pc, #124]	; (800a54c <_Z11task_lorarxPv+0x9c>)
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	481f      	ldr	r0, [pc, #124]	; (800a550 <_Z11task_lorarxPv+0xa0>)
 800a4d4:	2314      	movs	r3, #20
 800a4d6:	f7fa fe71 	bl	80051bc <_ZN6sx127x4initEP3spilhm>
 800a4da:	b360      	cbz	r0, 800a536 <_Z11task_lorarxPv+0x86>
 800a4dc:	491d      	ldr	r1, [pc, #116]	; (800a554 <_Z11task_lorarxPv+0xa4>)
 800a4de:	481e      	ldr	r0, [pc, #120]	; (800a558 <_Z11task_lorarxPv+0xa8>)
 800a4e0:	f7ff fb02 	bl	8009ae8 <LOG_INFO>
	lora_queue = xQueueCreate(20, sizeof(uint32_t));
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	2104      	movs	r1, #4
 800a4e8:	2014      	movs	r0, #20
 800a4ea:	f7f7 fa8d 	bl	8001a08 <xQueueGenericCreate>
 800a4ee:	4c1b      	ldr	r4, [pc, #108]	; (800a55c <_Z11task_lorarxPv+0xac>)
	loraif_init(&lora, LORA_SEND_SYNCWORD, LORA_RECV_SYNCWORD, 10000, 3);
 800a4f0:	2103      	movs	r1, #3
 800a4f2:	f242 7310 	movw	r3, #10000	; 0x2710
 800a4f6:	22ab      	movs	r2, #171	; 0xab
 800a4f8:	9100      	str	r1, [sp, #0]
 800a4fa:	2112      	movs	r1, #18
	lora_queue = xQueueCreate(20, sizeof(uint32_t));
 800a4fc:	6020      	str	r0, [r4, #0]
	loraif_init(&lora, LORA_SEND_SYNCWORD, LORA_RECV_SYNCWORD, 10000, 3);
 800a4fe:	4814      	ldr	r0, [pc, #80]	; (800a550 <_Z11task_lorarxPv+0xa0>)
 800a500:	f7fa f80c 	bl	800451c <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 800a504:	4816      	ldr	r0, [pc, #88]	; (800a560 <_Z11task_lorarxPv+0xb0>)
 800a506:	f7fa f847 	bl	8004598 <loraif_register_event_handler>
	lora.setSyncWord(0x3F);
 800a50a:	4811      	ldr	r0, [pc, #68]	; (800a550 <_Z11task_lorarxPv+0xa0>)
 800a50c:	213f      	movs	r1, #63	; 0x3f
 800a50e:	f7fb fcd3 	bl	8005eb8 <_ZN6sx127x11setSyncWordEh>
	lora.register_event_handler(NULL, lora_event_handler);
 800a512:	480f      	ldr	r0, [pc, #60]	; (800a550 <_Z11task_lorarxPv+0xa0>)
 800a514:	4a13      	ldr	r2, [pc, #76]	; (800a564 <_Z11task_lorarxPv+0xb4>)
 800a516:	2100      	movs	r1, #0
 800a518:	f7fb f8e2 	bl	80056e0 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	lora.Receive(0);
 800a51c:	480c      	ldr	r0, [pc, #48]	; (800a550 <_Z11task_lorarxPv+0xa0>)
 800a51e:	2100      	movs	r1, #0
 800a520:	f7fb fbe6 	bl	8005cf0 <_ZN6sx127x7ReceiveEh>
		loraif_rx_process(&lora_queue);
 800a524:	4620      	mov	r0, r4
 800a526:	f7fa fa49 	bl	80049bc <loraif_rx_process>
		loraif_response();
 800a52a:	f7fa fc49 	bl	8004dc0 <loraif_response>
		vTaskDelay(20);
 800a52e:	2014      	movs	r0, #20
 800a530:	f7f8 fe4e 	bl	80031d0 <vTaskDelay>
	while(1){
 800a534:	e7f6      	b.n	800a524 <_Z11task_lorarxPv+0x74>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 800a536:	490c      	ldr	r1, [pc, #48]	; (800a568 <_Z11task_lorarxPv+0xb8>)
 800a538:	4807      	ldr	r0, [pc, #28]	; (800a558 <_Z11task_lorarxPv+0xa8>)
 800a53a:	f7ff fb51 	bl	8009be0 <LOG_ERROR>
 800a53e:	e7d1      	b.n	800a4e4 <_Z11task_lorarxPv+0x34>
 800a540:	20000084 	.word	0x20000084
 800a544:	20000110 	.word	0x20000110
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	19cf0e40 	.word	0x19cf0e40
 800a550:	2000b9ec 	.word	0x2000b9ec
 800a554:	0800f208 	.word	0x0800f208
 800a558:	0800f200 	.word	0x0800f200
 800a55c:	2000ba18 	.word	0x2000ba18
 800a560:	0800a811 	.word	0x0800a811
 800a564:	0800a59d 	.word	0x0800a59d
 800a568:	0800f220 	.word	0x0800f220

0800a56c <_Z20gpioA0_event_handlerPv>:
	lora.IRQHandler();
 800a56c:	4801      	ldr	r0, [pc, #4]	; (800a574 <_Z20gpioA0_event_handlerPv+0x8>)
 800a56e:	f7fb bcc7 	b.w	8005f00 <_ZN6sx127x10IRQHandlerEv>
 800a572:	bf00      	nop
 800a574:	2000b9ec 	.word	0x2000b9ec

0800a578 <_Z12wifi_requestPct>:
void wifi_request(char *str, uint16_t size){
 800a578:	b510      	push	{r4, lr}
	usart1->transmit((uint8_t *)str, size);
 800a57a:	4c07      	ldr	r4, [pc, #28]	; (800a598 <_Z12wifi_requestPct+0x20>)
void wifi_request(char *str, uint16_t size){
 800a57c:	b082      	sub	sp, #8
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
	usart1->transmit((uint8_t *)str, size);
 800a582:	4668      	mov	r0, sp
 800a584:	6821      	ldr	r1, [r4, #0]
 800a586:	f7fe fba5 	bl	8008cd4 <_ZN5usart8transmitEPht>
	delay_ms(1);
 800a58a:	2001      	movs	r0, #1
}
 800a58c:	b002      	add	sp, #8
 800a58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(1);
 800a592:	f7fe b81b 	b.w	80085cc <delay_ms>
 800a596:	bf00      	nop
 800a598:	20000090 	.word	0x20000090

0800a59c <_Z18lora_event_handlerPvh>:
	if(packetSize){
 800a59c:	b901      	cbnz	r1, 800a5a0 <_Z18lora_event_handlerPvh+0x4>
 800a59e:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 800a5a0:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 800a5a2:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 800a5a8:	f000 fb24 	bl	800abf4 <malloc>
 800a5ac:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 800a5ae:	4810      	ldr	r0, [pc, #64]	; (800a5f0 <_Z18lora_event_handlerPvh+0x54>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 800a5b0:	9100      	str	r1, [sp, #0]
		lora.receive(lora_RxBuf);
 800a5b2:	f7fb fb47 	bl	8005c44 <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 800a5b6:	9b00      	ldr	r3, [sp, #0]
 800a5b8:	2500      	movs	r5, #0
 800a5ba:	551d      	strb	r5, [r3, r4]
		if(loraif_check_crc(lora_RxBuf) == true){
 800a5bc:	9800      	ldr	r0, [sp, #0]
 800a5be:	f7f9 fff1 	bl	80045a4 <loraif_check_crc>
 800a5c2:	b170      	cbz	r0, 800a5e2 <_Z18lora_event_handlerPvh+0x46>
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 800a5c4:	4a0b      	ldr	r2, [pc, #44]	; (800a5f4 <_Z18lora_event_handlerPvh+0x58>)
			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800a5c6:	9501      	str	r5, [sp, #4]
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 800a5c8:	6810      	ldr	r0, [r2, #0]
 800a5ca:	462b      	mov	r3, r5
 800a5cc:	aa01      	add	r2, sp, #4
 800a5ce:	4669      	mov	r1, sp
 800a5d0:	f7f7 fc12 	bl	8001df8 <xQueueGenericSendFromISR>
 800a5d4:	2801      	cmp	r0, #1
 800a5d6:	d008      	beq.n	800a5ea <_Z18lora_event_handlerPvh+0x4e>
				LOG_ERROR(TAG, "LoRa error queue receive.");
 800a5d8:	4907      	ldr	r1, [pc, #28]	; (800a5f8 <_Z18lora_event_handlerPvh+0x5c>)
 800a5da:	4808      	ldr	r0, [pc, #32]	; (800a5fc <_Z18lora_event_handlerPvh+0x60>)
 800a5dc:	f7ff fb00 	bl	8009be0 <LOG_ERROR>
 800a5e0:	e003      	b.n	800a5ea <_Z18lora_event_handlerPvh+0x4e>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 800a5e2:	4907      	ldr	r1, [pc, #28]	; (800a600 <_Z18lora_event_handlerPvh+0x64>)
 800a5e4:	4805      	ldr	r0, [pc, #20]	; (800a5fc <_Z18lora_event_handlerPvh+0x60>)
 800a5e6:	f7ff fafb 	bl	8009be0 <LOG_ERROR>
}
 800a5ea:	b003      	add	sp, #12
 800a5ec:	bd30      	pop	{r4, r5, pc}
 800a5ee:	bf00      	nop
 800a5f0:	2000b9ec 	.word	0x2000b9ec
 800a5f4:	2000ba18 	.word	0x2000ba18
 800a5f8:	0800f238 	.word	0x0800f238
 800a5fc:	0800f200 	.word	0x0800f200
 800a600:	0800f254 	.word	0x0800f254

0800a604 <_Z20wifi_command_handler10wifi_cmd_tPv>:
void wifi_command_handler(wifi_cmd_t cmd, void *param){
 800a604:	b508      	push	{r3, lr}
 800a606:	460a      	mov	r2, r1
	switch(cmd){
 800a608:	2810      	cmp	r0, #16
 800a60a:	d80a      	bhi.n	800a622 <_Z20wifi_command_handler10wifi_cmd_tPv+0x1e>
 800a60c:	e8df f000 	tbb	[pc, r0]
 800a610:	1516091c 	.word	0x1516091c
 800a614:	09090909 	.word	0x09090909
 800a618:	09090909 	.word	0x09090909
 800a61c:	09090909 	.word	0x09090909
 800a620:	0f          	.byte	0x0f
 800a621:	00          	.byte	0x00
}
 800a622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_EVENT(TAG, "WiFi module responded: %s.", resp_data);
 800a626:	490e      	ldr	r1, [pc, #56]	; (800a660 <_Z20wifi_command_handler10wifi_cmd_tPv+0x5c>)
 800a628:	480e      	ldr	r0, [pc, #56]	; (800a664 <_Z20wifi_command_handler10wifi_cmd_tPv+0x60>)
 800a62a:	f7ff bb93 	b.w	8009d54 <LOG_EVENT>
}
 800a62e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_EVENT("HTTP DATA", "%s.", resp_data);
 800a632:	490d      	ldr	r1, [pc, #52]	; (800a668 <_Z20wifi_command_handler10wifi_cmd_tPv+0x64>)
 800a634:	480d      	ldr	r0, [pc, #52]	; (800a66c <_Z20wifi_command_handler10wifi_cmd_tPv+0x68>)
 800a636:	f7ff bb8d 	b.w	8009d54 <LOG_EVENT>
}
 800a63a:	bd08      	pop	{r3, pc}
 800a63c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			LOG_EVENT("WIFI_CMD_WIFI_SCAN", "%s.", resp_data);
 800a640:	4909      	ldr	r1, [pc, #36]	; (800a668 <_Z20wifi_command_handler10wifi_cmd_tPv+0x64>)
 800a642:	480b      	ldr	r0, [pc, #44]	; (800a670 <_Z20wifi_command_handler10wifi_cmd_tPv+0x6c>)
 800a644:	f7ff bb86 	b.w	8009d54 <LOG_EVENT>
			wifiif_state_running(false);
 800a648:	2000      	movs	r0, #0
 800a64a:	f7fb ff63 	bl	8006514 <wifiif_state_running>
			LOG_EVENT(TAG, "WiFi module error reset.");
 800a64e:	4909      	ldr	r1, [pc, #36]	; (800a674 <_Z20wifi_command_handler10wifi_cmd_tPv+0x70>)
 800a650:	4804      	ldr	r0, [pc, #16]	; (800a664 <_Z20wifi_command_handler10wifi_cmd_tPv+0x60>)
 800a652:	f7ff fb7f 	bl	8009d54 <LOG_EVENT>
}
 800a656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			wifiif_restart();
 800a65a:	f7fb bec1 	b.w	80063e0 <wifiif_restart>
 800a65e:	bf00      	nop
 800a660:	0800f2b4 	.word	0x0800f2b4
 800a664:	0800f200 	.word	0x0800f200
 800a668:	0800f290 	.word	0x0800f290
 800a66c:	0800f2a8 	.word	0x0800f2a8
 800a670:	0800f294 	.word	0x0800f294
 800a674:	0800f274 	.word	0x0800f274

0800a678 <_Z17wifi_uart_handler13usart_event_tPv>:
	if(event == (USART_EVENT_IDLE_STATE)){
 800a678:	2804      	cmp	r0, #4
 800a67a:	d000      	beq.n	800a67e <_Z17wifi_uart_handler13usart_event_tPv+0x6>
 800a67c:	4770      	bx	lr
void wifi_uart_handler(usart_event_t event, void *param){
 800a67e:	b530      	push	{r4, r5, lr}
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800a680:	4c12      	ldr	r4, [pc, #72]	; (800a6cc <_Z17wifi_uart_handler13usart_event_tPv+0x54>)
void wifi_uart_handler(usart_event_t event, void *param){
 800a682:	b087      	sub	sp, #28
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800a684:	a802      	add	r0, sp, #8
 800a686:	6821      	ldr	r1, [r4, #0]
 800a688:	aa01      	add	r2, sp, #4
 800a68a:	f7fe fbd5 	bl	8008e38 <_ZN5usart10get_bufferEPPh>
		if(!is_oke(&ret)){
 800a68e:	a802      	add	r0, sp, #8
 800a690:	f7ff fbe0 	bl	8009e54 <is_oke>
 800a694:	b1a0      	cbz	r0, 800a6c0 <_Z17wifi_uart_handler13usart_event_tPv+0x48>
		if(strcmp(rxdata, "WIFI_RESTART: OK") == 0) wifiif_state_running(false);
 800a696:	9d01      	ldr	r5, [sp, #4]
 800a698:	490d      	ldr	r1, [pc, #52]	; (800a6d0 <_Z17wifi_uart_handler13usart_event_tPv+0x58>)
 800a69a:	4628      	mov	r0, r5
 800a69c:	f7f5 fda8 	bl	80001f0 <strcmp>
 800a6a0:	b150      	cbz	r0, 800a6b8 <_Z17wifi_uart_handler13usart_event_tPv+0x40>
		wifiif_get_break_data(rxdata);
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f7fb fe4e 	bl	8006344 <wifiif_get_break_data>
		usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 800a6a8:	6821      	ldr	r1, [r4, #0]
 800a6aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6ae:	a804      	add	r0, sp, #16
 800a6b0:	f7fe fb46 	bl	8008d40 <_ZN5usart24receive_to_idle_start_itEt>
}
 800a6b4:	b007      	add	sp, #28
 800a6b6:	bd30      	pop	{r4, r5, pc}
		if(strcmp(rxdata, "WIFI_RESTART: OK") == 0) wifiif_state_running(false);
 800a6b8:	f7fb ff2c 	bl	8006514 <wifiif_state_running>
		wifiif_get_break_data(rxdata);
 800a6bc:	9d01      	ldr	r5, [sp, #4]
 800a6be:	e7f0      	b.n	800a6a2 <_Z17wifi_uart_handler13usart_event_tPv+0x2a>
			LOG_ERROR(TAG, "Can't get UART data.");
 800a6c0:	4904      	ldr	r1, [pc, #16]	; (800a6d4 <_Z17wifi_uart_handler13usart_event_tPv+0x5c>)
 800a6c2:	4805      	ldr	r0, [pc, #20]	; (800a6d8 <_Z17wifi_uart_handler13usart_event_tPv+0x60>)
 800a6c4:	f7ff fa8c 	bl	8009be0 <LOG_ERROR>
			return;
 800a6c8:	e7f4      	b.n	800a6b4 <_Z17wifi_uart_handler13usart_event_tPv+0x3c>
 800a6ca:	bf00      	nop
 800a6cc:	20000090 	.word	0x20000090
 800a6d0:	0800f2e8 	.word	0x0800f2e8
 800a6d4:	0800f2d0 	.word	0x0800f2d0
 800a6d8:	0800f200 	.word	0x0800f200

0800a6dc <_Z9task_wifiPv>:
void task_wifi(void *){
 800a6dc:	b530      	push	{r4, r5, lr}
	usart1->init(&wf_uart_conf);
 800a6de:	4c3c      	ldr	r4, [pc, #240]	; (800a7d0 <_Z9task_wifiPv+0xf4>)
 800a6e0:	4a3c      	ldr	r2, [pc, #240]	; (800a7d4 <_Z9task_wifiPv+0xf8>)
 800a6e2:	6821      	ldr	r1, [r4, #0]
		gpio_set(GPIOB, 14);
 800a6e4:	4d3c      	ldr	r5, [pc, #240]	; (800a7d8 <_Z9task_wifiPv+0xfc>)
void task_wifi(void *){
 800a6e6:	b083      	sub	sp, #12
	usart1->init(&wf_uart_conf);
 800a6e8:	4668      	mov	r0, sp
 800a6ea:	f7fe f8d9 	bl	80088a0 <_ZN5usart4initEP14usart_config_t>
	usart1->register_event_handler(wifi_uart_handler, NULL);
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	4a3a      	ldr	r2, [pc, #232]	; (800a7dc <_Z9task_wifiPv+0x100>)
 800a6f2:	6821      	ldr	r1, [r4, #0]
 800a6f4:	4668      	mov	r0, sp
 800a6f6:	f7fe facb 	bl	8008c90 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>
	usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 800a6fa:	6821      	ldr	r1, [r4, #0]
 800a6fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a700:	4668      	mov	r0, sp
 800a702:	f7fe fb1d 	bl	8008d40 <_ZN5usart24receive_to_idle_start_itEt>
	wifiif_init(wifi_request);
 800a706:	4836      	ldr	r0, [pc, #216]	; (800a7e0 <_Z9task_wifiPv+0x104>)
 800a708:	f7fb fe4e 	bl	80063a8 <wifiif_init>
	wifiif_register_command_handler(wifi_command_handler);
 800a70c:	4835      	ldr	r0, [pc, #212]	; (800a7e4 <_Z9task_wifiPv+0x108>)
 800a70e:	f7fb fe61 	bl	80063d4 <wifiif_register_command_handler>
	wifiif_restart();
 800a712:	f7fb fe65 	bl	80063e0 <wifiif_restart>
		gpio_set(GPIOB, 14);
 800a716:	210e      	movs	r1, #14
 800a718:	4628      	mov	r0, r5
 800a71a:	f7fc fe71 	bl	8007400 <gpio_set>
		vTaskDelay(active_time);
 800a71e:	2014      	movs	r0, #20
 800a720:	f7f8 fd56 	bl	80031d0 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a724:	210e      	movs	r1, #14
 800a726:	4628      	mov	r0, r5
 800a728:	f7fc fe72 	bl	8007410 <gpio_reset>
		vTaskDelay(idle_time);
 800a72c:	2001      	movs	r0, #1
 800a72e:	f7f8 fd4f 	bl	80031d0 <vTaskDelay>
	if(!wifiif_state_is_running()) wifiif_restart();
 800a732:	f7fb fef5 	bl	8006520 <wifiif_state_is_running>
 800a736:	2800      	cmp	r0, #0
 800a738:	d047      	beq.n	800a7ca <_Z9task_wifiPv+0xee>
	vTaskDelay(1000);
 800a73a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a73e:	f7f8 fd47 	bl	80031d0 <vTaskDelay>
	wifiif_connect((char *)"D305GV2.4GHz", (char *)"NoPassword132132", (char *)"WIFI_AUTH_WPA2_PSK");
 800a742:	4a29      	ldr	r2, [pc, #164]	; (800a7e8 <_Z9task_wifiPv+0x10c>)
 800a744:	4929      	ldr	r1, [pc, #164]	; (800a7ec <_Z9task_wifiPv+0x110>)
 800a746:	482a      	ldr	r0, [pc, #168]	; (800a7f0 <_Z9task_wifiPv+0x114>)
 800a748:	f7fb fe68 	bl	800641c <wifiif_connect>
	vTaskDelay(1000);
 800a74c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a750:	f7f8 fd3e 	bl	80031d0 <vTaskDelay>
 800a754:	2406      	movs	r4, #6
	while(wifiif_wificonnected() == false) {
 800a756:	f7fb fe5b 	bl	8006410 <wifiif_wificonnected>
 800a75a:	b968      	cbnz	r0, 800a778 <_Z9task_wifiPv+0x9c>
		wifiif_checkconnect();
 800a75c:	f7fb fe52 	bl	8006404 <wifiif_checkconnect>
		vTaskDelay(1000);
 800a760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a764:	f7f8 fd34 	bl	80031d0 <vTaskDelay>
		if(reconn_num > 5) goto restart_wifi;
 800a768:	1e63      	subs	r3, r4, #1
 800a76a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a76e:	d0d2      	beq.n	800a716 <_Z9task_wifiPv+0x3a>
	while(wifiif_wificonnected() == false) {
 800a770:	f7fb fe4e 	bl	8006410 <wifiif_wificonnected>
 800a774:	2800      	cmp	r0, #0
 800a776:	d0f1      	beq.n	800a75c <_Z9task_wifiPv+0x80>
	wifiif_state_running(true);
 800a778:	2001      	movs	r0, #1
 800a77a:	f7fb fecb 	bl	8006514 <wifiif_state_running>
	firebase_init((char *)"https://iotnhakho-default-rtdb.asia-southeast1.firebasedatabase.app", (char *)"YAg8QGH48Xlbjpk9UMh5JkjgYCCbeMSM4Ak5SNHp");
 800a77e:	491d      	ldr	r1, [pc, #116]	; (800a7f4 <_Z9task_wifiPv+0x118>)
 800a780:	481d      	ldr	r0, [pc, #116]	; (800a7f8 <_Z9task_wifiPv+0x11c>)
 800a782:	f7ff fd77 	bl	800a274 <firebase_init>
	vTaskDelay(1000);
 800a786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a78a:	f7f8 fd21 	bl	80031d0 <vTaskDelay>
	wifiif_http_client_set_url((char *)"/Kho3/.json");
 800a78e:	481b      	ldr	r0, [pc, #108]	; (800a7fc <_Z9task_wifiPv+0x120>)
 800a790:	f7fb fe7e 	bl	8006490 <wifiif_http_client_set_url>
	wifiif_http_client_set_data((char *)"{}");
 800a794:	481a      	ldr	r0, [pc, #104]	; (800a800 <_Z9task_wifiPv+0x124>)
 800a796:	f7fb fea3 	bl	80064e0 <wifiif_http_client_set_data>
	wifiif_http_client_set_method((char *)"HTTP_METHOD_GET");
 800a79a:	481a      	ldr	r0, [pc, #104]	; (800a804 <_Z9task_wifiPv+0x128>)
 800a79c:	f7fb fe8c 	bl	80064b8 <wifiif_http_client_set_method>
 800a7a0:	e008      	b.n	800a7b4 <_Z9task_wifiPv+0xd8>
		if(!wifiif_state_is_running() || wifiif_wificonnected() == false) {
 800a7a2:	f7fb fe35 	bl	8006410 <wifiif_wificonnected>
 800a7a6:	b158      	cbz	r0, 800a7c0 <_Z9task_wifiPv+0xe4>
		wifiif_http_client_request();
 800a7a8:	f7fb feae 	bl	8006508 <wifiif_http_client_request>
		vTaskDelay(5000);
 800a7ac:	f241 3088 	movw	r0, #5000	; 0x1388
 800a7b0:	f7f8 fd0e 	bl	80031d0 <vTaskDelay>
		wifiif_checkconnect();
 800a7b4:	f7fb fe26 	bl	8006404 <wifiif_checkconnect>
		if(!wifiif_state_is_running() || wifiif_wificonnected() == false) {
 800a7b8:	f7fb feb2 	bl	8006520 <wifiif_state_is_running>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d1f0      	bne.n	800a7a2 <_Z9task_wifiPv+0xc6>
			LOG_ERROR(TAG, "WiFi module error reset.");
 800a7c0:	4911      	ldr	r1, [pc, #68]	; (800a808 <_Z9task_wifiPv+0x12c>)
 800a7c2:	4812      	ldr	r0, [pc, #72]	; (800a80c <_Z9task_wifiPv+0x130>)
 800a7c4:	f7ff fa0c 	bl	8009be0 <LOG_ERROR>
			goto restart_wifi;
 800a7c8:	e7a5      	b.n	800a716 <_Z9task_wifiPv+0x3a>
	if(!wifiif_state_is_running()) wifiif_restart();
 800a7ca:	f7fb fe09 	bl	80063e0 <wifiif_restart>
 800a7ce:	e7b4      	b.n	800a73a <_Z9task_wifiPv+0x5e>
 800a7d0:	20000090 	.word	0x20000090
 800a7d4:	20000148 	.word	0x20000148
 800a7d8:	40020400 	.word	0x40020400
 800a7dc:	0800a679 	.word	0x0800a679
 800a7e0:	0800a579 	.word	0x0800a579
 800a7e4:	0800a605 	.word	0x0800a605
 800a7e8:	0800f2fc 	.word	0x0800f2fc
 800a7ec:	0800f310 	.word	0x0800f310
 800a7f0:	0800f324 	.word	0x0800f324
 800a7f4:	0800f334 	.word	0x0800f334
 800a7f8:	0800f360 	.word	0x0800f360
 800a7fc:	0800f3a4 	.word	0x0800f3a4
 800a800:	0800e5cc 	.word	0x0800e5cc
 800a804:	0800f3b0 	.word	0x0800f3b0
 800a808:	0800f274 	.word	0x0800f274
 800a80c:	0800f200 	.word	0x0800f200

0800a810 <_Z20loraif_event_handler12lora_event_tPc>:
void loraif_event_handler(lora_event_t event, char *data){
 800a810:	b570      	push	{r4, r5, r6, lr}
 800a812:	4604      	mov	r4, r0
 800a814:	b084      	sub	sp, #16
	if(data != NULL) LOG_INFO(TAG, "LoRa data: %s [packet RSSI = %d, RSSI = %d]", data, lora.packetRssi(), lora.rssi());
 800a816:	460d      	mov	r5, r1
 800a818:	b171      	cbz	r1, 800a838 <_Z20loraif_event_handler12lora_event_tPc+0x28>
 800a81a:	4850      	ldr	r0, [pc, #320]	; (800a95c <_Z20loraif_event_handler12lora_event_tPc+0x14c>)
 800a81c:	f7fb f934 	bl	8005a88 <_ZN6sx127x10packetRssiEv>
 800a820:	4603      	mov	r3, r0
 800a822:	484e      	ldr	r0, [pc, #312]	; (800a95c <_Z20loraif_event_handler12lora_event_tPc+0x14c>)
 800a824:	9303      	str	r3, [sp, #12]
 800a826:	f7fb f95f 	bl	8005ae8 <_ZN6sx127x4rssiEv>
 800a82a:	494d      	ldr	r1, [pc, #308]	; (800a960 <_Z20loraif_event_handler12lora_event_tPc+0x150>)
 800a82c:	9000      	str	r0, [sp, #0]
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	484c      	ldr	r0, [pc, #304]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
 800a832:	462a      	mov	r2, r5
 800a834:	f7ff f958 	bl	8009ae8 <LOG_INFO>
	switch(event){
 800a838:	2c0a      	cmp	r4, #10
 800a83a:	d80e      	bhi.n	800a85a <_Z20loraif_event_handler12lora_event_tPc+0x4a>
 800a83c:	e8df f004 	tbb	[pc, r4]
 800a840:	3e0d1b14 	.word	0x3e0d1b14
 800a844:	530d4c45 	.word	0x530d4c45
 800a848:	805a      	.short	0x805a
 800a84a:	06          	.byte	0x06
 800a84b:	00          	.byte	0x00
			LOG_WARN(TAG, "LORA_DEVICE_NOT_RESPONSE");
 800a84c:	4946      	ldr	r1, [pc, #280]	; (800a968 <_Z20loraif_event_handler12lora_event_tPc+0x158>)
 800a84e:	4845      	ldr	r0, [pc, #276]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a850:	b004      	add	sp, #16
 800a852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_WARN(TAG, "LORA_DEVICE_NOT_RESPONSE");
 800a856:	f7ff b985 	b.w	8009b64 <LOG_WARN>
			LOG_EVENT(TAG, "LoRa other event.");
 800a85a:	4944      	ldr	r1, [pc, #272]	; (800a96c <_Z20loraif_event_handler12lora_event_tPc+0x15c>)
 800a85c:	4841      	ldr	r0, [pc, #260]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a85e:	b004      	add	sp, #16
 800a860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800a864:	f7ff ba76 	b.w	8009d54 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_ERR");
 800a868:	4941      	ldr	r1, [pc, #260]	; (800a970 <_Z20loraif_event_handler12lora_event_tPc+0x160>)
			LOG_EVENT(TAG, "LoRa other event.");
 800a86a:	483e      	ldr	r0, [pc, #248]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a86c:	b004      	add	sp, #16
 800a86e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800a872:	f7ff ba6f 	b.w	8009d54 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_REQ_ADDRESS");
 800a876:	493f      	ldr	r1, [pc, #252]	; (800a974 <_Z20loraif_event_handler12lora_event_tPc+0x164>)
 800a878:	483a      	ldr	r0, [pc, #232]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
 800a87a:	f7ff fa6b 	bl	8009d54 <LOG_EVENT>
		gpio_set(GPIOB, 14);
 800a87e:	210e      	movs	r1, #14
 800a880:	483d      	ldr	r0, [pc, #244]	; (800a978 <_Z20loraif_event_handler12lora_event_tPc+0x168>)
 800a882:	f7fc fdbd 	bl	8007400 <gpio_set>
		vTaskDelay(active_time);
 800a886:	2032      	movs	r0, #50	; 0x32
 800a888:	f7f8 fca2 	bl	80031d0 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a88c:	210e      	movs	r1, #14
 800a88e:	483a      	ldr	r0, [pc, #232]	; (800a978 <_Z20loraif_event_handler12lora_event_tPc+0x168>)
 800a890:	f7fc fdbe 	bl	8007410 <gpio_reset>
		vTaskDelay(idle_time);
 800a894:	2032      	movs	r0, #50	; 0x32
 800a896:	f7f8 fc9b 	bl	80031d0 <vTaskDelay>
		gpio_set(GPIOB, 14);
 800a89a:	210e      	movs	r1, #14
 800a89c:	4836      	ldr	r0, [pc, #216]	; (800a978 <_Z20loraif_event_handler12lora_event_tPc+0x168>)
 800a89e:	f7fc fdaf 	bl	8007400 <gpio_set>
		vTaskDelay(active_time);
 800a8a2:	2032      	movs	r0, #50	; 0x32
 800a8a4:	f7f8 fc94 	bl	80031d0 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a8a8:	4833      	ldr	r0, [pc, #204]	; (800a978 <_Z20loraif_event_handler12lora_event_tPc+0x168>)
 800a8aa:	210e      	movs	r1, #14
 800a8ac:	f7fc fdb0 	bl	8007410 <gpio_reset>
		vTaskDelay(idle_time);
 800a8b0:	2032      	movs	r0, #50	; 0x32
}
 800a8b2:	b004      	add	sp, #16
 800a8b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		vTaskDelay(idle_time);
 800a8b8:	f7f8 bc8a 	b.w	80031d0 <vTaskDelay>
			LOG_EVENT(TAG, "LORA_UPDATE_STATE");
 800a8bc:	492f      	ldr	r1, [pc, #188]	; (800a97c <_Z20loraif_event_handler12lora_event_tPc+0x16c>)
			LOG_EVENT(TAG, "LoRa other event.");
 800a8be:	4829      	ldr	r0, [pc, #164]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a8c0:	b004      	add	sp, #16
 800a8c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800a8c6:	f7ff ba45 	b.w	8009d54 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_UPDATE_SETTINGS");
 800a8ca:	492d      	ldr	r1, [pc, #180]	; (800a980 <_Z20loraif_event_handler12lora_event_tPc+0x170>)
			LOG_EVENT(TAG, "LoRa other event.");
 800a8cc:	4825      	ldr	r0, [pc, #148]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a8ce:	b004      	add	sp, #16
 800a8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800a8d4:	f7ff ba3e 	b.w	8009d54 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_REQ_DATA");
 800a8d8:	492a      	ldr	r1, [pc, #168]	; (800a984 <_Z20loraif_event_handler12lora_event_tPc+0x174>)
			LOG_EVENT(TAG, "LoRa other event.");
 800a8da:	4822      	ldr	r0, [pc, #136]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a8dc:	b004      	add	sp, #16
 800a8de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800a8e2:	f7ff ba37 	b.w	8009d54 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_UPDATE_DATA");
 800a8e6:	4928      	ldr	r1, [pc, #160]	; (800a988 <_Z20loraif_event_handler12lora_event_tPc+0x178>)
			LOG_EVENT(TAG, "LoRa other event.");
 800a8e8:	481e      	ldr	r0, [pc, #120]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
}
 800a8ea:	b004      	add	sp, #16
 800a8ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			LOG_EVENT(TAG, "LoRa other event.");
 800a8f0:	f7ff ba30 	b.w	8009d54 <LOG_EVENT>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800a8f4:	4925      	ldr	r1, [pc, #148]	; (800a98c <_Z20loraif_event_handler12lora_event_tPc+0x17c>)
 800a8f6:	481b      	ldr	r0, [pc, #108]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
		gpio_set(GPIOB, 14);
 800a8f8:	4e1f      	ldr	r6, [pc, #124]	; (800a978 <_Z20loraif_event_handler12lora_event_tPc+0x168>)
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800a8fa:	f7ff fa2b 	bl	8009d54 <LOG_EVENT>
 800a8fe:	2403      	movs	r4, #3
		gpio_set(GPIOB, 14);
 800a900:	210e      	movs	r1, #14
 800a902:	4630      	mov	r0, r6
 800a904:	f7fc fd7c 	bl	8007400 <gpio_set>
		vTaskDelay(active_time);
 800a908:	2032      	movs	r0, #50	; 0x32
 800a90a:	f7f8 fc61 	bl	80031d0 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a90e:	210e      	movs	r1, #14
 800a910:	4630      	mov	r0, r6
 800a912:	f7fc fd7d 	bl	8007410 <gpio_reset>
		vTaskDelay(idle_time);
 800a916:	2032      	movs	r0, #50	; 0x32
 800a918:	f7f8 fc5a 	bl	80031d0 <vTaskDelay>
	while(loop--){
 800a91c:	1e63      	subs	r3, r4, #1
 800a91e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a922:	d1ed      	bne.n	800a900 <_Z20loraif_event_handler12lora_event_tPc+0xf0>
			dev_struct_t *dev = add_device_properties(data);
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff fbbb 	bl	800a0a0 <add_device_properties>
 800a92a:	4604      	mov	r4, r0
			loraif_add_device(data, dev);
 800a92c:	4601      	mov	r1, r0
 800a92e:	4628      	mov	r0, r5
 800a930:	f7f9 ff26 	bl	8004780 <loraif_add_device>
			firebase_new_device(dev);
 800a934:	4620      	mov	r0, r4
}
 800a936:	b004      	add	sp, #16
 800a938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			firebase_new_device(dev);
 800a93c:	f7ff bccc 	b.w	800a2d8 <firebase_new_device>
			LOG_WARN(TAG, "LORA_REMOVE_DEVICE");
 800a940:	4913      	ldr	r1, [pc, #76]	; (800a990 <_Z20loraif_event_handler12lora_event_tPc+0x180>)
 800a942:	4808      	ldr	r0, [pc, #32]	; (800a964 <_Z20loraif_event_handler12lora_event_tPc+0x154>)
 800a944:	f7ff f90e 	bl	8009b64 <LOG_WARN>
			remove_device_properties(data);
 800a948:	4628      	mov	r0, r5
 800a94a:	f7ff fc1b 	bl	800a184 <remove_device_properties>
			loraif_remove_device(data);
 800a94e:	4628      	mov	r0, r5
}
 800a950:	b004      	add	sp, #16
 800a952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			loraif_remove_device(data);
 800a956:	f7f9 bf83 	b.w	8004860 <loraif_remove_device>
 800a95a:	bf00      	nop
 800a95c:	2000b9ec 	.word	0x2000b9ec
 800a960:	0800f3c0 	.word	0x0800f3c0
 800a964:	0800f200 	.word	0x0800f200
 800a968:	0800e40c 	.word	0x0800e40c
 800a96c:	0800f3ec 	.word	0x0800f3ec
 800a970:	0800e354 	.word	0x0800e354
 800a974:	0800e360 	.word	0x0800e360
 800a978:	40020400 	.word	0x40020400
 800a97c:	0800e388 	.word	0x0800e388
 800a980:	0800e39c 	.word	0x0800e39c
 800a984:	0800e3b4 	.word	0x0800e3b4
 800a988:	0800e3d4 	.word	0x0800e3d4
 800a98c:	0800e3e8 	.word	0x0800e3e8
 800a990:	0800e3f8 	.word	0x0800e3f8

0800a994 <_Z8app_mainv>:
void app_main(void){
 800a994:	b500      	push	{lr}
 800a996:	b083      	sub	sp, #12
	HAL_Driver_Init();
 800a998:	f7f6 fb18 	bl	8000fcc <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOB);
 800a99c:	481e      	ldr	r0, [pc, #120]	; (800aa18 <_Z8app_mainv+0x84>)
 800a99e:	f7fc fbe7 	bl	8007170 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOC);
 800a9a2:	481e      	ldr	r0, [pc, #120]	; (800aa1c <_Z8app_mainv+0x88>)
 800a9a4:	f7fc fbe4 	bl	8007170 <gpio_port_clock_enable>
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 800a9a8:	481c      	ldr	r0, [pc, #112]	; (800aa1c <_Z8app_mainv+0x88>)
 800a9aa:	2207      	movs	r2, #7
 800a9ac:	210d      	movs	r1, #13
 800a9ae:	f7fc fc45 	bl	800723c <gpio_set_mode>
	gpio_set_mode(GPIOB, 14, GPIO_OUTPUT_PUSHPULL);
 800a9b2:	2207      	movs	r2, #7
 800a9b4:	210e      	movs	r1, #14
 800a9b6:	4818      	ldr	r0, [pc, #96]	; (800aa18 <_Z8app_mainv+0x84>)
 800a9b8:	f7fc fc40 	bl	800723c <gpio_set_mode>
	register_exception_handler(exception_handler);
 800a9bc:	4818      	ldr	r0, [pc, #96]	; (800aa20 <_Z8app_mainv+0x8c>)
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 8, NULL);
 800a9be:	2400      	movs	r4, #0
	register_exception_handler(exception_handler);
 800a9c0:	f7ff fb50 	bl	800a064 <register_exception_handler>
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 8, NULL);
 800a9c4:	2008      	movs	r0, #8
 800a9c6:	e9cd 0400 	strd	r0, r4, [sp]
 800a9ca:	4623      	mov	r3, r4
 800a9cc:	4915      	ldr	r1, [pc, #84]	; (800aa24 <_Z8app_mainv+0x90>)
 800a9ce:	4816      	ldr	r0, [pc, #88]	; (800aa28 <_Z8app_mainv+0x94>)
 800a9d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9d4:	f7f8 fb48 	bl	8003068 <xTaskCreate>
	xTaskCreate(task_loratx, "task_loratx", byte_to_word(4096), NULL, 5, NULL);
 800a9d8:	2005      	movs	r0, #5
 800a9da:	e9cd 0400 	strd	r0, r4, [sp]
 800a9de:	4623      	mov	r3, r4
 800a9e0:	4912      	ldr	r1, [pc, #72]	; (800aa2c <_Z8app_mainv+0x98>)
 800a9e2:	4813      	ldr	r0, [pc, #76]	; (800aa30 <_Z8app_mainv+0x9c>)
 800a9e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9e8:	f7f8 fb3e 	bl	8003068 <xTaskCreate>
	xTaskCreate(task_wifi, "task_wifi", byte_to_word(8192), NULL, 4, NULL);
 800a9ec:	2304      	movs	r3, #4
 800a9ee:	e9cd 3400 	strd	r3, r4, [sp]
 800a9f2:	4910      	ldr	r1, [pc, #64]	; (800aa34 <_Z8app_mainv+0xa0>)
 800a9f4:	4810      	ldr	r0, [pc, #64]	; (800aa38 <_Z8app_mainv+0xa4>)
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9fc:	f7f8 fb34 	bl	8003068 <xTaskCreate>
		gpio_toggle(GPIOC, 13);
 800aa00:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800aa04:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 800aa08:	4620      	mov	r0, r4
 800aa0a:	210d      	movs	r1, #13
 800aa0c:	f7fc fd08 	bl	8007420 <gpio_toggle>
		vTaskDelay(100);
 800aa10:	2064      	movs	r0, #100	; 0x64
 800aa12:	f7f8 fbdd 	bl	80031d0 <vTaskDelay>
	while(1){
 800aa16:	e7f7      	b.n	800aa08 <_Z8app_mainv+0x74>
 800aa18:	40020400 	.word	0x40020400
 800aa1c:	40020800 	.word	0x40020800
 800aa20:	0800a479 	.word	0x0800a479
 800aa24:	0800f400 	.word	0x0800f400
 800aa28:	0800a4b1 	.word	0x0800a4b1
 800aa2c:	0800f40c 	.word	0x0800f40c
 800aa30:	0800a485 	.word	0x0800a485
 800aa34:	0800f418 	.word	0x0800f418
 800aa38:	0800a6dd 	.word	0x0800a6dd

0800aa3c <_GLOBAL__sub_I_spi5_conf>:
}
 800aa3c:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800aa3e:	4908      	ldr	r1, [pc, #32]	; (800aa60 <_GLOBAL__sub_I_spi5_conf+0x24>)
 800aa40:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <_GLOBAL__sub_I_spi5_conf+0x28>)
}
 800aa42:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800aa44:	2000      	movs	r0, #0
 800aa46:	2203      	movs	r2, #3
 800aa48:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800aa4c:	9200      	str	r2, [sp, #0]
 800aa4e:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800aa52:	2206      	movs	r2, #6
 800aa54:	4804      	ldr	r0, [pc, #16]	; (800aa68 <_GLOBAL__sub_I_spi5_conf+0x2c>)
 800aa56:	f7fa fb9f 	bl	8005198 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 800aa5a:	b005      	add	sp, #20
 800aa5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800aa60:	40020000 	.word	0x40020000
 800aa64:	40021000 	.word	0x40021000
 800aa68:	2000b9ec 	.word	0x2000b9ec

0800aa6c <_ZdlPvj>:
 800aa6c:	f000 b81d 	b.w	800aaaa <_ZdlPv>

0800aa70 <_Znwj>:
 800aa70:	2801      	cmp	r0, #1
 800aa72:	bf38      	it	cc
 800aa74:	2001      	movcc	r0, #1
 800aa76:	b510      	push	{r4, lr}
 800aa78:	4604      	mov	r4, r0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f000 f8ba 	bl	800abf4 <malloc>
 800aa80:	b930      	cbnz	r0, 800aa90 <_Znwj+0x20>
 800aa82:	f000 f815 	bl	800aab0 <_ZSt15get_new_handlerv>
 800aa86:	b908      	cbnz	r0, 800aa8c <_Znwj+0x1c>
 800aa88:	f000 f85c 	bl	800ab44 <abort>
 800aa8c:	4780      	blx	r0
 800aa8e:	e7f4      	b.n	800aa7a <_Znwj+0xa>
 800aa90:	bd10      	pop	{r4, pc}

0800aa92 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800aa92:	684b      	ldr	r3, [r1, #4]
 800aa94:	6043      	str	r3, [r0, #4]
 800aa96:	684b      	ldr	r3, [r1, #4]
 800aa98:	6001      	str	r1, [r0, #0]
 800aa9a:	6018      	str	r0, [r3, #0]
 800aa9c:	6048      	str	r0, [r1, #4]
 800aa9e:	4770      	bx	lr

0800aaa0 <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800aaa0:	e9d0 3200 	ldrd	r3, r2, [r0]
 800aaa4:	6013      	str	r3, [r2, #0]
 800aaa6:	605a      	str	r2, [r3, #4]
 800aaa8:	4770      	bx	lr

0800aaaa <_ZdlPv>:
 800aaaa:	f000 b8ab 	b.w	800ac04 <free>
	...

0800aab0 <_ZSt15get_new_handlerv>:
 800aab0:	4b02      	ldr	r3, [pc, #8]	; (800aabc <_ZSt15get_new_handlerv+0xc>)
 800aab2:	6818      	ldr	r0, [r3, #0]
 800aab4:	f3bf 8f5b 	dmb	ish
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	2000ba1c 	.word	0x2000ba1c

0800aac0 <ceilf>:
 800aac0:	ee10 3a10 	vmov	r3, s0
 800aac4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aac8:	3a7f      	subs	r2, #127	; 0x7f
 800aaca:	2a16      	cmp	r2, #22
 800aacc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aad0:	dc2a      	bgt.n	800ab28 <ceilf+0x68>
 800aad2:	2a00      	cmp	r2, #0
 800aad4:	da11      	bge.n	800aafa <ceilf+0x3a>
 800aad6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800ab3c <ceilf+0x7c>
 800aada:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aade:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aae6:	dd05      	ble.n	800aaf4 <ceilf+0x34>
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	db23      	blt.n	800ab34 <ceilf+0x74>
 800aaec:	2900      	cmp	r1, #0
 800aaee:	bf18      	it	ne
 800aaf0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800aaf4:	ee00 3a10 	vmov	s0, r3
 800aaf8:	4770      	bx	lr
 800aafa:	4911      	ldr	r1, [pc, #68]	; (800ab40 <ceilf+0x80>)
 800aafc:	4111      	asrs	r1, r2
 800aafe:	420b      	tst	r3, r1
 800ab00:	d0fa      	beq.n	800aaf8 <ceilf+0x38>
 800ab02:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ab3c <ceilf+0x7c>
 800ab06:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab0a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ab0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab12:	ddef      	ble.n	800aaf4 <ceilf+0x34>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bfc2      	ittt	gt
 800ab18:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800ab1c:	fa40 f202 	asrgt.w	r2, r0, r2
 800ab20:	189b      	addgt	r3, r3, r2
 800ab22:	ea23 0301 	bic.w	r3, r3, r1
 800ab26:	e7e5      	b.n	800aaf4 <ceilf+0x34>
 800ab28:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ab2c:	d3e4      	bcc.n	800aaf8 <ceilf+0x38>
 800ab2e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ab32:	4770      	bx	lr
 800ab34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab38:	e7dc      	b.n	800aaf4 <ceilf+0x34>
 800ab3a:	bf00      	nop
 800ab3c:	7149f2ca 	.word	0x7149f2ca
 800ab40:	007fffff 	.word	0x007fffff

0800ab44 <abort>:
 800ab44:	b508      	push	{r3, lr}
 800ab46:	2006      	movs	r0, #6
 800ab48:	f000 ffc6 	bl	800bad8 <raise>
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	f7f6 fadd 	bl	800110c <_exit>
	...

0800ab54 <asiprintf>:
 800ab54:	b40e      	push	{r1, r2, r3}
 800ab56:	b530      	push	{r4, r5, lr}
 800ab58:	b09c      	sub	sp, #112	; 0x70
 800ab5a:	ab1f      	add	r3, sp, #124	; 0x7c
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	490d      	ldr	r1, [pc, #52]	; (800ab94 <asiprintf+0x40>)
 800ab60:	480d      	ldr	r0, [pc, #52]	; (800ab98 <asiprintf+0x44>)
 800ab62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab66:	6800      	ldr	r0, [r0, #0]
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	2400      	movs	r4, #0
 800ab6c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 800ab70:	a902      	add	r1, sp, #8
 800ab72:	9402      	str	r4, [sp, #8]
 800ab74:	9404      	str	r4, [sp, #16]
 800ab76:	9407      	str	r4, [sp, #28]
 800ab78:	f000 fa0c 	bl	800af94 <_svfiprintf_r>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	bfa1      	itttt	ge
 800ab80:	9b02      	ldrge	r3, [sp, #8]
 800ab82:	701c      	strbge	r4, [r3, #0]
 800ab84:	9b06      	ldrge	r3, [sp, #24]
 800ab86:	602b      	strge	r3, [r5, #0]
 800ab88:	b01c      	add	sp, #112	; 0x70
 800ab8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab8e:	b003      	add	sp, #12
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	ffff0288 	.word	0xffff0288
 800ab98:	2000016c 	.word	0x2000016c

0800ab9c <calloc>:
 800ab9c:	4b02      	ldr	r3, [pc, #8]	; (800aba8 <calloc+0xc>)
 800ab9e:	460a      	mov	r2, r1
 800aba0:	4601      	mov	r1, r0
 800aba2:	6818      	ldr	r0, [r3, #0]
 800aba4:	f000 b870 	b.w	800ac88 <_calloc_r>
 800aba8:	2000016c 	.word	0x2000016c

0800abac <__libc_init_array>:
 800abac:	b570      	push	{r4, r5, r6, lr}
 800abae:	4d0d      	ldr	r5, [pc, #52]	; (800abe4 <__libc_init_array+0x38>)
 800abb0:	4c0d      	ldr	r4, [pc, #52]	; (800abe8 <__libc_init_array+0x3c>)
 800abb2:	1b64      	subs	r4, r4, r5
 800abb4:	10a4      	asrs	r4, r4, #2
 800abb6:	2600      	movs	r6, #0
 800abb8:	42a6      	cmp	r6, r4
 800abba:	d109      	bne.n	800abd0 <__libc_init_array+0x24>
 800abbc:	4d0b      	ldr	r5, [pc, #44]	; (800abec <__libc_init_array+0x40>)
 800abbe:	4c0c      	ldr	r4, [pc, #48]	; (800abf0 <__libc_init_array+0x44>)
 800abc0:	f002 fff6 	bl	800dbb0 <_init>
 800abc4:	1b64      	subs	r4, r4, r5
 800abc6:	10a4      	asrs	r4, r4, #2
 800abc8:	2600      	movs	r6, #0
 800abca:	42a6      	cmp	r6, r4
 800abcc:	d105      	bne.n	800abda <__libc_init_array+0x2e>
 800abce:	bd70      	pop	{r4, r5, r6, pc}
 800abd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800abd4:	4798      	blx	r3
 800abd6:	3601      	adds	r6, #1
 800abd8:	e7ee      	b.n	800abb8 <__libc_init_array+0xc>
 800abda:	f855 3b04 	ldr.w	r3, [r5], #4
 800abde:	4798      	blx	r3
 800abe0:	3601      	adds	r6, #1
 800abe2:	e7f2      	b.n	800abca <__libc_init_array+0x1e>
 800abe4:	0800f808 	.word	0x0800f808
 800abe8:	0800f808 	.word	0x0800f808
 800abec:	0800f808 	.word	0x0800f808
 800abf0:	0800f834 	.word	0x0800f834

0800abf4 <malloc>:
 800abf4:	4b02      	ldr	r3, [pc, #8]	; (800ac00 <malloc+0xc>)
 800abf6:	4601      	mov	r1, r0
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f000 b8fb 	b.w	800adf4 <_malloc_r>
 800abfe:	bf00      	nop
 800ac00:	2000016c 	.word	0x2000016c

0800ac04 <free>:
 800ac04:	4b02      	ldr	r3, [pc, #8]	; (800ac10 <free+0xc>)
 800ac06:	4601      	mov	r1, r0
 800ac08:	6818      	ldr	r0, [r3, #0]
 800ac0a:	f000 b853 	b.w	800acb4 <_free_r>
 800ac0e:	bf00      	nop
 800ac10:	2000016c 	.word	0x2000016c

0800ac14 <memcpy>:
 800ac14:	440a      	add	r2, r1
 800ac16:	4291      	cmp	r1, r2
 800ac18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac1c:	d100      	bne.n	800ac20 <memcpy+0xc>
 800ac1e:	4770      	bx	lr
 800ac20:	b510      	push	{r4, lr}
 800ac22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac2a:	4291      	cmp	r1, r2
 800ac2c:	d1f9      	bne.n	800ac22 <memcpy+0xe>
 800ac2e:	bd10      	pop	{r4, pc}

0800ac30 <memmove>:
 800ac30:	4288      	cmp	r0, r1
 800ac32:	b510      	push	{r4, lr}
 800ac34:	eb01 0402 	add.w	r4, r1, r2
 800ac38:	d902      	bls.n	800ac40 <memmove+0x10>
 800ac3a:	4284      	cmp	r4, r0
 800ac3c:	4623      	mov	r3, r4
 800ac3e:	d807      	bhi.n	800ac50 <memmove+0x20>
 800ac40:	1e43      	subs	r3, r0, #1
 800ac42:	42a1      	cmp	r1, r4
 800ac44:	d008      	beq.n	800ac58 <memmove+0x28>
 800ac46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac4e:	e7f8      	b.n	800ac42 <memmove+0x12>
 800ac50:	4402      	add	r2, r0
 800ac52:	4601      	mov	r1, r0
 800ac54:	428a      	cmp	r2, r1
 800ac56:	d100      	bne.n	800ac5a <memmove+0x2a>
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac62:	e7f7      	b.n	800ac54 <memmove+0x24>

0800ac64 <memset>:
 800ac64:	4402      	add	r2, r0
 800ac66:	4603      	mov	r3, r0
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d100      	bne.n	800ac6e <memset+0xa>
 800ac6c:	4770      	bx	lr
 800ac6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ac72:	e7f9      	b.n	800ac68 <memset+0x4>

0800ac74 <mallinfo>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	4b03      	ldr	r3, [pc, #12]	; (800ac84 <mallinfo+0x10>)
 800ac78:	4604      	mov	r4, r0
 800ac7a:	6819      	ldr	r1, [r3, #0]
 800ac7c:	f000 f866 	bl	800ad4c <_mallinfo_r>
 800ac80:	4620      	mov	r0, r4
 800ac82:	bd10      	pop	{r4, pc}
 800ac84:	2000016c 	.word	0x2000016c

0800ac88 <_calloc_r>:
 800ac88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac8a:	fba1 2402 	umull	r2, r4, r1, r2
 800ac8e:	b94c      	cbnz	r4, 800aca4 <_calloc_r+0x1c>
 800ac90:	4611      	mov	r1, r2
 800ac92:	9201      	str	r2, [sp, #4]
 800ac94:	f000 f8ae 	bl	800adf4 <_malloc_r>
 800ac98:	9a01      	ldr	r2, [sp, #4]
 800ac9a:	4605      	mov	r5, r0
 800ac9c:	b930      	cbnz	r0, 800acac <_calloc_r+0x24>
 800ac9e:	4628      	mov	r0, r5
 800aca0:	b003      	add	sp, #12
 800aca2:	bd30      	pop	{r4, r5, pc}
 800aca4:	220c      	movs	r2, #12
 800aca6:	6002      	str	r2, [r0, #0]
 800aca8:	2500      	movs	r5, #0
 800acaa:	e7f8      	b.n	800ac9e <_calloc_r+0x16>
 800acac:	4621      	mov	r1, r4
 800acae:	f7ff ffd9 	bl	800ac64 <memset>
 800acb2:	e7f4      	b.n	800ac9e <_calloc_r+0x16>

0800acb4 <_free_r>:
 800acb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acb6:	2900      	cmp	r1, #0
 800acb8:	d044      	beq.n	800ad44 <_free_r+0x90>
 800acba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acbe:	9001      	str	r0, [sp, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f1a1 0404 	sub.w	r4, r1, #4
 800acc6:	bfb8      	it	lt
 800acc8:	18e4      	addlt	r4, r4, r3
 800acca:	f001 ff9d 	bl	800cc08 <__malloc_lock>
 800acce:	4a1e      	ldr	r2, [pc, #120]	; (800ad48 <_free_r+0x94>)
 800acd0:	9801      	ldr	r0, [sp, #4]
 800acd2:	6813      	ldr	r3, [r2, #0]
 800acd4:	b933      	cbnz	r3, 800ace4 <_free_r+0x30>
 800acd6:	6063      	str	r3, [r4, #4]
 800acd8:	6014      	str	r4, [r2, #0]
 800acda:	b003      	add	sp, #12
 800acdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ace0:	f001 bf98 	b.w	800cc14 <__malloc_unlock>
 800ace4:	42a3      	cmp	r3, r4
 800ace6:	d908      	bls.n	800acfa <_free_r+0x46>
 800ace8:	6825      	ldr	r5, [r4, #0]
 800acea:	1961      	adds	r1, r4, r5
 800acec:	428b      	cmp	r3, r1
 800acee:	bf01      	itttt	eq
 800acf0:	6819      	ldreq	r1, [r3, #0]
 800acf2:	685b      	ldreq	r3, [r3, #4]
 800acf4:	1949      	addeq	r1, r1, r5
 800acf6:	6021      	streq	r1, [r4, #0]
 800acf8:	e7ed      	b.n	800acd6 <_free_r+0x22>
 800acfa:	461a      	mov	r2, r3
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	b10b      	cbz	r3, 800ad04 <_free_r+0x50>
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	d9fa      	bls.n	800acfa <_free_r+0x46>
 800ad04:	6811      	ldr	r1, [r2, #0]
 800ad06:	1855      	adds	r5, r2, r1
 800ad08:	42a5      	cmp	r5, r4
 800ad0a:	d10b      	bne.n	800ad24 <_free_r+0x70>
 800ad0c:	6824      	ldr	r4, [r4, #0]
 800ad0e:	4421      	add	r1, r4
 800ad10:	1854      	adds	r4, r2, r1
 800ad12:	42a3      	cmp	r3, r4
 800ad14:	6011      	str	r1, [r2, #0]
 800ad16:	d1e0      	bne.n	800acda <_free_r+0x26>
 800ad18:	681c      	ldr	r4, [r3, #0]
 800ad1a:	685b      	ldr	r3, [r3, #4]
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	4421      	add	r1, r4
 800ad20:	6011      	str	r1, [r2, #0]
 800ad22:	e7da      	b.n	800acda <_free_r+0x26>
 800ad24:	d902      	bls.n	800ad2c <_free_r+0x78>
 800ad26:	230c      	movs	r3, #12
 800ad28:	6003      	str	r3, [r0, #0]
 800ad2a:	e7d6      	b.n	800acda <_free_r+0x26>
 800ad2c:	6825      	ldr	r5, [r4, #0]
 800ad2e:	1961      	adds	r1, r4, r5
 800ad30:	428b      	cmp	r3, r1
 800ad32:	bf04      	itt	eq
 800ad34:	6819      	ldreq	r1, [r3, #0]
 800ad36:	685b      	ldreq	r3, [r3, #4]
 800ad38:	6063      	str	r3, [r4, #4]
 800ad3a:	bf04      	itt	eq
 800ad3c:	1949      	addeq	r1, r1, r5
 800ad3e:	6021      	streq	r1, [r4, #0]
 800ad40:	6054      	str	r4, [r2, #4]
 800ad42:	e7ca      	b.n	800acda <_free_r+0x26>
 800ad44:	b003      	add	sp, #12
 800ad46:	bd30      	pop	{r4, r5, pc}
 800ad48:	2000ba48 	.word	0x2000ba48

0800ad4c <_mallinfo_r>:
 800ad4c:	b570      	push	{r4, r5, r6, lr}
 800ad4e:	4c16      	ldr	r4, [pc, #88]	; (800ada8 <_mallinfo_r+0x5c>)
 800ad50:	4605      	mov	r5, r0
 800ad52:	4608      	mov	r0, r1
 800ad54:	460e      	mov	r6, r1
 800ad56:	f001 ff57 	bl	800cc08 <__malloc_lock>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	b143      	cbz	r3, 800ad70 <_mallinfo_r+0x24>
 800ad5e:	2100      	movs	r1, #0
 800ad60:	4630      	mov	r0, r6
 800ad62:	f000 fe81 	bl	800ba68 <_sbrk_r>
 800ad66:	1c42      	adds	r2, r0, #1
 800ad68:	4603      	mov	r3, r0
 800ad6a:	bf1c      	itt	ne
 800ad6c:	6820      	ldrne	r0, [r4, #0]
 800ad6e:	1a1b      	subne	r3, r3, r0
 800ad70:	4a0e      	ldr	r2, [pc, #56]	; (800adac <_mallinfo_r+0x60>)
 800ad72:	6812      	ldr	r2, [r2, #0]
 800ad74:	2000      	movs	r0, #0
 800ad76:	b992      	cbnz	r2, 800ad9e <_mallinfo_r+0x52>
 800ad78:	4c0d      	ldr	r4, [pc, #52]	; (800adb0 <_mallinfo_r+0x64>)
 800ad7a:	6023      	str	r3, [r4, #0]
 800ad7c:	6220      	str	r0, [r4, #32]
 800ad7e:	1a1b      	subs	r3, r3, r0
 800ad80:	4630      	mov	r0, r6
 800ad82:	61e3      	str	r3, [r4, #28]
 800ad84:	f001 ff46 	bl	800cc14 <__malloc_unlock>
 800ad88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad8a:	462e      	mov	r6, r5
 800ad8c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad90:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ad92:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad96:	e886 0003 	stmia.w	r6, {r0, r1}
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
 800ad9e:	6811      	ldr	r1, [r2, #0]
 800ada0:	6852      	ldr	r2, [r2, #4]
 800ada2:	4408      	add	r0, r1
 800ada4:	e7e7      	b.n	800ad76 <_mallinfo_r+0x2a>
 800ada6:	bf00      	nop
 800ada8:	2000ba4c 	.word	0x2000ba4c
 800adac:	2000ba48 	.word	0x2000ba48
 800adb0:	2000ba20 	.word	0x2000ba20

0800adb4 <sbrk_aligned>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	4e0e      	ldr	r6, [pc, #56]	; (800adf0 <sbrk_aligned+0x3c>)
 800adb8:	460c      	mov	r4, r1
 800adba:	6831      	ldr	r1, [r6, #0]
 800adbc:	4605      	mov	r5, r0
 800adbe:	b911      	cbnz	r1, 800adc6 <sbrk_aligned+0x12>
 800adc0:	f000 fe52 	bl	800ba68 <_sbrk_r>
 800adc4:	6030      	str	r0, [r6, #0]
 800adc6:	4621      	mov	r1, r4
 800adc8:	4628      	mov	r0, r5
 800adca:	f000 fe4d 	bl	800ba68 <_sbrk_r>
 800adce:	1c43      	adds	r3, r0, #1
 800add0:	d00a      	beq.n	800ade8 <sbrk_aligned+0x34>
 800add2:	1cc4      	adds	r4, r0, #3
 800add4:	f024 0403 	bic.w	r4, r4, #3
 800add8:	42a0      	cmp	r0, r4
 800adda:	d007      	beq.n	800adec <sbrk_aligned+0x38>
 800addc:	1a21      	subs	r1, r4, r0
 800adde:	4628      	mov	r0, r5
 800ade0:	f000 fe42 	bl	800ba68 <_sbrk_r>
 800ade4:	3001      	adds	r0, #1
 800ade6:	d101      	bne.n	800adec <sbrk_aligned+0x38>
 800ade8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800adec:	4620      	mov	r0, r4
 800adee:	bd70      	pop	{r4, r5, r6, pc}
 800adf0:	2000ba4c 	.word	0x2000ba4c

0800adf4 <_malloc_r>:
 800adf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf8:	1ccd      	adds	r5, r1, #3
 800adfa:	f025 0503 	bic.w	r5, r5, #3
 800adfe:	3508      	adds	r5, #8
 800ae00:	2d0c      	cmp	r5, #12
 800ae02:	bf38      	it	cc
 800ae04:	250c      	movcc	r5, #12
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	4607      	mov	r7, r0
 800ae0a:	db01      	blt.n	800ae10 <_malloc_r+0x1c>
 800ae0c:	42a9      	cmp	r1, r5
 800ae0e:	d905      	bls.n	800ae1c <_malloc_r+0x28>
 800ae10:	230c      	movs	r3, #12
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	2600      	movs	r6, #0
 800ae16:	4630      	mov	r0, r6
 800ae18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae1c:	4e2e      	ldr	r6, [pc, #184]	; (800aed8 <_malloc_r+0xe4>)
 800ae1e:	f001 fef3 	bl	800cc08 <__malloc_lock>
 800ae22:	6833      	ldr	r3, [r6, #0]
 800ae24:	461c      	mov	r4, r3
 800ae26:	bb34      	cbnz	r4, 800ae76 <_malloc_r+0x82>
 800ae28:	4629      	mov	r1, r5
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	f7ff ffc2 	bl	800adb4 <sbrk_aligned>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	4604      	mov	r4, r0
 800ae34:	d14d      	bne.n	800aed2 <_malloc_r+0xde>
 800ae36:	6834      	ldr	r4, [r6, #0]
 800ae38:	4626      	mov	r6, r4
 800ae3a:	2e00      	cmp	r6, #0
 800ae3c:	d140      	bne.n	800aec0 <_malloc_r+0xcc>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	4631      	mov	r1, r6
 800ae42:	4638      	mov	r0, r7
 800ae44:	eb04 0803 	add.w	r8, r4, r3
 800ae48:	f000 fe0e 	bl	800ba68 <_sbrk_r>
 800ae4c:	4580      	cmp	r8, r0
 800ae4e:	d13a      	bne.n	800aec6 <_malloc_r+0xd2>
 800ae50:	6821      	ldr	r1, [r4, #0]
 800ae52:	3503      	adds	r5, #3
 800ae54:	1a6d      	subs	r5, r5, r1
 800ae56:	f025 0503 	bic.w	r5, r5, #3
 800ae5a:	3508      	adds	r5, #8
 800ae5c:	2d0c      	cmp	r5, #12
 800ae5e:	bf38      	it	cc
 800ae60:	250c      	movcc	r5, #12
 800ae62:	4629      	mov	r1, r5
 800ae64:	4638      	mov	r0, r7
 800ae66:	f7ff ffa5 	bl	800adb4 <sbrk_aligned>
 800ae6a:	3001      	adds	r0, #1
 800ae6c:	d02b      	beq.n	800aec6 <_malloc_r+0xd2>
 800ae6e:	6823      	ldr	r3, [r4, #0]
 800ae70:	442b      	add	r3, r5
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	e00e      	b.n	800ae94 <_malloc_r+0xa0>
 800ae76:	6822      	ldr	r2, [r4, #0]
 800ae78:	1b52      	subs	r2, r2, r5
 800ae7a:	d41e      	bmi.n	800aeba <_malloc_r+0xc6>
 800ae7c:	2a0b      	cmp	r2, #11
 800ae7e:	d916      	bls.n	800aeae <_malloc_r+0xba>
 800ae80:	1961      	adds	r1, r4, r5
 800ae82:	42a3      	cmp	r3, r4
 800ae84:	6025      	str	r5, [r4, #0]
 800ae86:	bf18      	it	ne
 800ae88:	6059      	strne	r1, [r3, #4]
 800ae8a:	6863      	ldr	r3, [r4, #4]
 800ae8c:	bf08      	it	eq
 800ae8e:	6031      	streq	r1, [r6, #0]
 800ae90:	5162      	str	r2, [r4, r5]
 800ae92:	604b      	str	r3, [r1, #4]
 800ae94:	4638      	mov	r0, r7
 800ae96:	f104 060b 	add.w	r6, r4, #11
 800ae9a:	f001 febb 	bl	800cc14 <__malloc_unlock>
 800ae9e:	f026 0607 	bic.w	r6, r6, #7
 800aea2:	1d23      	adds	r3, r4, #4
 800aea4:	1af2      	subs	r2, r6, r3
 800aea6:	d0b6      	beq.n	800ae16 <_malloc_r+0x22>
 800aea8:	1b9b      	subs	r3, r3, r6
 800aeaa:	50a3      	str	r3, [r4, r2]
 800aeac:	e7b3      	b.n	800ae16 <_malloc_r+0x22>
 800aeae:	6862      	ldr	r2, [r4, #4]
 800aeb0:	42a3      	cmp	r3, r4
 800aeb2:	bf0c      	ite	eq
 800aeb4:	6032      	streq	r2, [r6, #0]
 800aeb6:	605a      	strne	r2, [r3, #4]
 800aeb8:	e7ec      	b.n	800ae94 <_malloc_r+0xa0>
 800aeba:	4623      	mov	r3, r4
 800aebc:	6864      	ldr	r4, [r4, #4]
 800aebe:	e7b2      	b.n	800ae26 <_malloc_r+0x32>
 800aec0:	4634      	mov	r4, r6
 800aec2:	6876      	ldr	r6, [r6, #4]
 800aec4:	e7b9      	b.n	800ae3a <_malloc_r+0x46>
 800aec6:	230c      	movs	r3, #12
 800aec8:	603b      	str	r3, [r7, #0]
 800aeca:	4638      	mov	r0, r7
 800aecc:	f001 fea2 	bl	800cc14 <__malloc_unlock>
 800aed0:	e7a1      	b.n	800ae16 <_malloc_r+0x22>
 800aed2:	6025      	str	r5, [r4, #0]
 800aed4:	e7de      	b.n	800ae94 <_malloc_r+0xa0>
 800aed6:	bf00      	nop
 800aed8:	2000ba48 	.word	0x2000ba48

0800aedc <__ssputs_r>:
 800aedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aee0:	688e      	ldr	r6, [r1, #8]
 800aee2:	429e      	cmp	r6, r3
 800aee4:	4682      	mov	sl, r0
 800aee6:	460c      	mov	r4, r1
 800aee8:	4690      	mov	r8, r2
 800aeea:	461f      	mov	r7, r3
 800aeec:	d838      	bhi.n	800af60 <__ssputs_r+0x84>
 800aeee:	898a      	ldrh	r2, [r1, #12]
 800aef0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aef4:	d032      	beq.n	800af5c <__ssputs_r+0x80>
 800aef6:	6825      	ldr	r5, [r4, #0]
 800aef8:	6909      	ldr	r1, [r1, #16]
 800aefa:	eba5 0901 	sub.w	r9, r5, r1
 800aefe:	6965      	ldr	r5, [r4, #20]
 800af00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af08:	3301      	adds	r3, #1
 800af0a:	444b      	add	r3, r9
 800af0c:	106d      	asrs	r5, r5, #1
 800af0e:	429d      	cmp	r5, r3
 800af10:	bf38      	it	cc
 800af12:	461d      	movcc	r5, r3
 800af14:	0553      	lsls	r3, r2, #21
 800af16:	d531      	bpl.n	800af7c <__ssputs_r+0xa0>
 800af18:	4629      	mov	r1, r5
 800af1a:	f7ff ff6b 	bl	800adf4 <_malloc_r>
 800af1e:	4606      	mov	r6, r0
 800af20:	b950      	cbnz	r0, 800af38 <__ssputs_r+0x5c>
 800af22:	230c      	movs	r3, #12
 800af24:	f8ca 3000 	str.w	r3, [sl]
 800af28:	89a3      	ldrh	r3, [r4, #12]
 800af2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af2e:	81a3      	strh	r3, [r4, #12]
 800af30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af38:	6921      	ldr	r1, [r4, #16]
 800af3a:	464a      	mov	r2, r9
 800af3c:	f7ff fe6a 	bl	800ac14 <memcpy>
 800af40:	89a3      	ldrh	r3, [r4, #12]
 800af42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af4a:	81a3      	strh	r3, [r4, #12]
 800af4c:	6126      	str	r6, [r4, #16]
 800af4e:	6165      	str	r5, [r4, #20]
 800af50:	444e      	add	r6, r9
 800af52:	eba5 0509 	sub.w	r5, r5, r9
 800af56:	6026      	str	r6, [r4, #0]
 800af58:	60a5      	str	r5, [r4, #8]
 800af5a:	463e      	mov	r6, r7
 800af5c:	42be      	cmp	r6, r7
 800af5e:	d900      	bls.n	800af62 <__ssputs_r+0x86>
 800af60:	463e      	mov	r6, r7
 800af62:	6820      	ldr	r0, [r4, #0]
 800af64:	4632      	mov	r2, r6
 800af66:	4641      	mov	r1, r8
 800af68:	f7ff fe62 	bl	800ac30 <memmove>
 800af6c:	68a3      	ldr	r3, [r4, #8]
 800af6e:	1b9b      	subs	r3, r3, r6
 800af70:	60a3      	str	r3, [r4, #8]
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	4433      	add	r3, r6
 800af76:	6023      	str	r3, [r4, #0]
 800af78:	2000      	movs	r0, #0
 800af7a:	e7db      	b.n	800af34 <__ssputs_r+0x58>
 800af7c:	462a      	mov	r2, r5
 800af7e:	f002 f9d3 	bl	800d328 <_realloc_r>
 800af82:	4606      	mov	r6, r0
 800af84:	2800      	cmp	r0, #0
 800af86:	d1e1      	bne.n	800af4c <__ssputs_r+0x70>
 800af88:	6921      	ldr	r1, [r4, #16]
 800af8a:	4650      	mov	r0, sl
 800af8c:	f7ff fe92 	bl	800acb4 <_free_r>
 800af90:	e7c7      	b.n	800af22 <__ssputs_r+0x46>
	...

0800af94 <_svfiprintf_r>:
 800af94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	4698      	mov	r8, r3
 800af9a:	898b      	ldrh	r3, [r1, #12]
 800af9c:	061b      	lsls	r3, r3, #24
 800af9e:	b09d      	sub	sp, #116	; 0x74
 800afa0:	4607      	mov	r7, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	d50e      	bpl.n	800afc6 <_svfiprintf_r+0x32>
 800afa8:	690b      	ldr	r3, [r1, #16]
 800afaa:	b963      	cbnz	r3, 800afc6 <_svfiprintf_r+0x32>
 800afac:	2140      	movs	r1, #64	; 0x40
 800afae:	f7ff ff21 	bl	800adf4 <_malloc_r>
 800afb2:	6028      	str	r0, [r5, #0]
 800afb4:	6128      	str	r0, [r5, #16]
 800afb6:	b920      	cbnz	r0, 800afc2 <_svfiprintf_r+0x2e>
 800afb8:	230c      	movs	r3, #12
 800afba:	603b      	str	r3, [r7, #0]
 800afbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afc0:	e0d1      	b.n	800b166 <_svfiprintf_r+0x1d2>
 800afc2:	2340      	movs	r3, #64	; 0x40
 800afc4:	616b      	str	r3, [r5, #20]
 800afc6:	2300      	movs	r3, #0
 800afc8:	9309      	str	r3, [sp, #36]	; 0x24
 800afca:	2320      	movs	r3, #32
 800afcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800afd4:	2330      	movs	r3, #48	; 0x30
 800afd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b180 <_svfiprintf_r+0x1ec>
 800afda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afde:	f04f 0901 	mov.w	r9, #1
 800afe2:	4623      	mov	r3, r4
 800afe4:	469a      	mov	sl, r3
 800afe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afea:	b10a      	cbz	r2, 800aff0 <_svfiprintf_r+0x5c>
 800afec:	2a25      	cmp	r2, #37	; 0x25
 800afee:	d1f9      	bne.n	800afe4 <_svfiprintf_r+0x50>
 800aff0:	ebba 0b04 	subs.w	fp, sl, r4
 800aff4:	d00b      	beq.n	800b00e <_svfiprintf_r+0x7a>
 800aff6:	465b      	mov	r3, fp
 800aff8:	4622      	mov	r2, r4
 800affa:	4629      	mov	r1, r5
 800affc:	4638      	mov	r0, r7
 800affe:	f7ff ff6d 	bl	800aedc <__ssputs_r>
 800b002:	3001      	adds	r0, #1
 800b004:	f000 80aa 	beq.w	800b15c <_svfiprintf_r+0x1c8>
 800b008:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b00a:	445a      	add	r2, fp
 800b00c:	9209      	str	r2, [sp, #36]	; 0x24
 800b00e:	f89a 3000 	ldrb.w	r3, [sl]
 800b012:	2b00      	cmp	r3, #0
 800b014:	f000 80a2 	beq.w	800b15c <_svfiprintf_r+0x1c8>
 800b018:	2300      	movs	r3, #0
 800b01a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b01e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b022:	f10a 0a01 	add.w	sl, sl, #1
 800b026:	9304      	str	r3, [sp, #16]
 800b028:	9307      	str	r3, [sp, #28]
 800b02a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b02e:	931a      	str	r3, [sp, #104]	; 0x68
 800b030:	4654      	mov	r4, sl
 800b032:	2205      	movs	r2, #5
 800b034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b038:	4851      	ldr	r0, [pc, #324]	; (800b180 <_svfiprintf_r+0x1ec>)
 800b03a:	f7f5 f8f1 	bl	8000220 <memchr>
 800b03e:	9a04      	ldr	r2, [sp, #16]
 800b040:	b9d8      	cbnz	r0, 800b07a <_svfiprintf_r+0xe6>
 800b042:	06d0      	lsls	r0, r2, #27
 800b044:	bf44      	itt	mi
 800b046:	2320      	movmi	r3, #32
 800b048:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04c:	0711      	lsls	r1, r2, #28
 800b04e:	bf44      	itt	mi
 800b050:	232b      	movmi	r3, #43	; 0x2b
 800b052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b056:	f89a 3000 	ldrb.w	r3, [sl]
 800b05a:	2b2a      	cmp	r3, #42	; 0x2a
 800b05c:	d015      	beq.n	800b08a <_svfiprintf_r+0xf6>
 800b05e:	9a07      	ldr	r2, [sp, #28]
 800b060:	4654      	mov	r4, sl
 800b062:	2000      	movs	r0, #0
 800b064:	f04f 0c0a 	mov.w	ip, #10
 800b068:	4621      	mov	r1, r4
 800b06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b06e:	3b30      	subs	r3, #48	; 0x30
 800b070:	2b09      	cmp	r3, #9
 800b072:	d94e      	bls.n	800b112 <_svfiprintf_r+0x17e>
 800b074:	b1b0      	cbz	r0, 800b0a4 <_svfiprintf_r+0x110>
 800b076:	9207      	str	r2, [sp, #28]
 800b078:	e014      	b.n	800b0a4 <_svfiprintf_r+0x110>
 800b07a:	eba0 0308 	sub.w	r3, r0, r8
 800b07e:	fa09 f303 	lsl.w	r3, r9, r3
 800b082:	4313      	orrs	r3, r2
 800b084:	9304      	str	r3, [sp, #16]
 800b086:	46a2      	mov	sl, r4
 800b088:	e7d2      	b.n	800b030 <_svfiprintf_r+0x9c>
 800b08a:	9b03      	ldr	r3, [sp, #12]
 800b08c:	1d19      	adds	r1, r3, #4
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	9103      	str	r1, [sp, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	bfbb      	ittet	lt
 800b096:	425b      	neglt	r3, r3
 800b098:	f042 0202 	orrlt.w	r2, r2, #2
 800b09c:	9307      	strge	r3, [sp, #28]
 800b09e:	9307      	strlt	r3, [sp, #28]
 800b0a0:	bfb8      	it	lt
 800b0a2:	9204      	strlt	r2, [sp, #16]
 800b0a4:	7823      	ldrb	r3, [r4, #0]
 800b0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b0a8:	d10c      	bne.n	800b0c4 <_svfiprintf_r+0x130>
 800b0aa:	7863      	ldrb	r3, [r4, #1]
 800b0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ae:	d135      	bne.n	800b11c <_svfiprintf_r+0x188>
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	1d1a      	adds	r2, r3, #4
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	9203      	str	r2, [sp, #12]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	bfb8      	it	lt
 800b0bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0c0:	3402      	adds	r4, #2
 800b0c2:	9305      	str	r3, [sp, #20]
 800b0c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b190 <_svfiprintf_r+0x1fc>
 800b0c8:	7821      	ldrb	r1, [r4, #0]
 800b0ca:	2203      	movs	r2, #3
 800b0cc:	4650      	mov	r0, sl
 800b0ce:	f7f5 f8a7 	bl	8000220 <memchr>
 800b0d2:	b140      	cbz	r0, 800b0e6 <_svfiprintf_r+0x152>
 800b0d4:	2340      	movs	r3, #64	; 0x40
 800b0d6:	eba0 000a 	sub.w	r0, r0, sl
 800b0da:	fa03 f000 	lsl.w	r0, r3, r0
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	4303      	orrs	r3, r0
 800b0e2:	3401      	adds	r4, #1
 800b0e4:	9304      	str	r3, [sp, #16]
 800b0e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ea:	4826      	ldr	r0, [pc, #152]	; (800b184 <_svfiprintf_r+0x1f0>)
 800b0ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0f0:	2206      	movs	r2, #6
 800b0f2:	f7f5 f895 	bl	8000220 <memchr>
 800b0f6:	2800      	cmp	r0, #0
 800b0f8:	d038      	beq.n	800b16c <_svfiprintf_r+0x1d8>
 800b0fa:	4b23      	ldr	r3, [pc, #140]	; (800b188 <_svfiprintf_r+0x1f4>)
 800b0fc:	bb1b      	cbnz	r3, 800b146 <_svfiprintf_r+0x1b2>
 800b0fe:	9b03      	ldr	r3, [sp, #12]
 800b100:	3307      	adds	r3, #7
 800b102:	f023 0307 	bic.w	r3, r3, #7
 800b106:	3308      	adds	r3, #8
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10c:	4433      	add	r3, r6
 800b10e:	9309      	str	r3, [sp, #36]	; 0x24
 800b110:	e767      	b.n	800afe2 <_svfiprintf_r+0x4e>
 800b112:	fb0c 3202 	mla	r2, ip, r2, r3
 800b116:	460c      	mov	r4, r1
 800b118:	2001      	movs	r0, #1
 800b11a:	e7a5      	b.n	800b068 <_svfiprintf_r+0xd4>
 800b11c:	2300      	movs	r3, #0
 800b11e:	3401      	adds	r4, #1
 800b120:	9305      	str	r3, [sp, #20]
 800b122:	4619      	mov	r1, r3
 800b124:	f04f 0c0a 	mov.w	ip, #10
 800b128:	4620      	mov	r0, r4
 800b12a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b12e:	3a30      	subs	r2, #48	; 0x30
 800b130:	2a09      	cmp	r2, #9
 800b132:	d903      	bls.n	800b13c <_svfiprintf_r+0x1a8>
 800b134:	2b00      	cmp	r3, #0
 800b136:	d0c5      	beq.n	800b0c4 <_svfiprintf_r+0x130>
 800b138:	9105      	str	r1, [sp, #20]
 800b13a:	e7c3      	b.n	800b0c4 <_svfiprintf_r+0x130>
 800b13c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b140:	4604      	mov	r4, r0
 800b142:	2301      	movs	r3, #1
 800b144:	e7f0      	b.n	800b128 <_svfiprintf_r+0x194>
 800b146:	ab03      	add	r3, sp, #12
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	462a      	mov	r2, r5
 800b14c:	4b0f      	ldr	r3, [pc, #60]	; (800b18c <_svfiprintf_r+0x1f8>)
 800b14e:	a904      	add	r1, sp, #16
 800b150:	4638      	mov	r0, r7
 800b152:	f000 f8bf 	bl	800b2d4 <_printf_float>
 800b156:	1c42      	adds	r2, r0, #1
 800b158:	4606      	mov	r6, r0
 800b15a:	d1d6      	bne.n	800b10a <_svfiprintf_r+0x176>
 800b15c:	89ab      	ldrh	r3, [r5, #12]
 800b15e:	065b      	lsls	r3, r3, #25
 800b160:	f53f af2c 	bmi.w	800afbc <_svfiprintf_r+0x28>
 800b164:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b166:	b01d      	add	sp, #116	; 0x74
 800b168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b16c:	ab03      	add	r3, sp, #12
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	462a      	mov	r2, r5
 800b172:	4b06      	ldr	r3, [pc, #24]	; (800b18c <_svfiprintf_r+0x1f8>)
 800b174:	a904      	add	r1, sp, #16
 800b176:	4638      	mov	r0, r7
 800b178:	f000 fb50 	bl	800b81c <_printf_i>
 800b17c:	e7eb      	b.n	800b156 <_svfiprintf_r+0x1c2>
 800b17e:	bf00      	nop
 800b180:	0800f528 	.word	0x0800f528
 800b184:	0800f532 	.word	0x0800f532
 800b188:	0800b2d5 	.word	0x0800b2d5
 800b18c:	0800aedd 	.word	0x0800aedd
 800b190:	0800f52e 	.word	0x0800f52e

0800b194 <__cvt>:
 800b194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	ec55 4b10 	vmov	r4, r5, d0
 800b19c:	2d00      	cmp	r5, #0
 800b19e:	460e      	mov	r6, r1
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	462b      	mov	r3, r5
 800b1a4:	bfbb      	ittet	lt
 800b1a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b1aa:	461d      	movlt	r5, r3
 800b1ac:	2300      	movge	r3, #0
 800b1ae:	232d      	movlt	r3, #45	; 0x2d
 800b1b0:	700b      	strb	r3, [r1, #0]
 800b1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b1b8:	4691      	mov	r9, r2
 800b1ba:	f023 0820 	bic.w	r8, r3, #32
 800b1be:	bfbc      	itt	lt
 800b1c0:	4622      	movlt	r2, r4
 800b1c2:	4614      	movlt	r4, r2
 800b1c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1c8:	d005      	beq.n	800b1d6 <__cvt+0x42>
 800b1ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b1ce:	d100      	bne.n	800b1d2 <__cvt+0x3e>
 800b1d0:	3601      	adds	r6, #1
 800b1d2:	2102      	movs	r1, #2
 800b1d4:	e000      	b.n	800b1d8 <__cvt+0x44>
 800b1d6:	2103      	movs	r1, #3
 800b1d8:	ab03      	add	r3, sp, #12
 800b1da:	9301      	str	r3, [sp, #4]
 800b1dc:	ab02      	add	r3, sp, #8
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	ec45 4b10 	vmov	d0, r4, r5
 800b1e4:	4653      	mov	r3, sl
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	f000 fe0a 	bl	800be00 <_dtoa_r>
 800b1ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	d102      	bne.n	800b1fa <__cvt+0x66>
 800b1f4:	f019 0f01 	tst.w	r9, #1
 800b1f8:	d022      	beq.n	800b240 <__cvt+0xac>
 800b1fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b1fe:	eb07 0906 	add.w	r9, r7, r6
 800b202:	d110      	bne.n	800b226 <__cvt+0x92>
 800b204:	783b      	ldrb	r3, [r7, #0]
 800b206:	2b30      	cmp	r3, #48	; 0x30
 800b208:	d10a      	bne.n	800b220 <__cvt+0x8c>
 800b20a:	2200      	movs	r2, #0
 800b20c:	2300      	movs	r3, #0
 800b20e:	4620      	mov	r0, r4
 800b210:	4629      	mov	r1, r5
 800b212:	f7f5 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 800b216:	b918      	cbnz	r0, 800b220 <__cvt+0x8c>
 800b218:	f1c6 0601 	rsb	r6, r6, #1
 800b21c:	f8ca 6000 	str.w	r6, [sl]
 800b220:	f8da 3000 	ldr.w	r3, [sl]
 800b224:	4499      	add	r9, r3
 800b226:	2200      	movs	r2, #0
 800b228:	2300      	movs	r3, #0
 800b22a:	4620      	mov	r0, r4
 800b22c:	4629      	mov	r1, r5
 800b22e:	f7f5 fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 800b232:	b108      	cbz	r0, 800b238 <__cvt+0xa4>
 800b234:	f8cd 900c 	str.w	r9, [sp, #12]
 800b238:	2230      	movs	r2, #48	; 0x30
 800b23a:	9b03      	ldr	r3, [sp, #12]
 800b23c:	454b      	cmp	r3, r9
 800b23e:	d307      	bcc.n	800b250 <__cvt+0xbc>
 800b240:	9b03      	ldr	r3, [sp, #12]
 800b242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b244:	1bdb      	subs	r3, r3, r7
 800b246:	4638      	mov	r0, r7
 800b248:	6013      	str	r3, [r2, #0]
 800b24a:	b004      	add	sp, #16
 800b24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b250:	1c59      	adds	r1, r3, #1
 800b252:	9103      	str	r1, [sp, #12]
 800b254:	701a      	strb	r2, [r3, #0]
 800b256:	e7f0      	b.n	800b23a <__cvt+0xa6>

0800b258 <__exponent>:
 800b258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b25a:	4603      	mov	r3, r0
 800b25c:	2900      	cmp	r1, #0
 800b25e:	bfb8      	it	lt
 800b260:	4249      	neglt	r1, r1
 800b262:	f803 2b02 	strb.w	r2, [r3], #2
 800b266:	bfb4      	ite	lt
 800b268:	222d      	movlt	r2, #45	; 0x2d
 800b26a:	222b      	movge	r2, #43	; 0x2b
 800b26c:	2909      	cmp	r1, #9
 800b26e:	7042      	strb	r2, [r0, #1]
 800b270:	dd2a      	ble.n	800b2c8 <__exponent+0x70>
 800b272:	f10d 0407 	add.w	r4, sp, #7
 800b276:	46a4      	mov	ip, r4
 800b278:	270a      	movs	r7, #10
 800b27a:	46a6      	mov	lr, r4
 800b27c:	460a      	mov	r2, r1
 800b27e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b282:	fb07 1516 	mls	r5, r7, r6, r1
 800b286:	3530      	adds	r5, #48	; 0x30
 800b288:	2a63      	cmp	r2, #99	; 0x63
 800b28a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b28e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b292:	4631      	mov	r1, r6
 800b294:	dcf1      	bgt.n	800b27a <__exponent+0x22>
 800b296:	3130      	adds	r1, #48	; 0x30
 800b298:	f1ae 0502 	sub.w	r5, lr, #2
 800b29c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b2a0:	1c44      	adds	r4, r0, #1
 800b2a2:	4629      	mov	r1, r5
 800b2a4:	4561      	cmp	r1, ip
 800b2a6:	d30a      	bcc.n	800b2be <__exponent+0x66>
 800b2a8:	f10d 0209 	add.w	r2, sp, #9
 800b2ac:	eba2 020e 	sub.w	r2, r2, lr
 800b2b0:	4565      	cmp	r5, ip
 800b2b2:	bf88      	it	hi
 800b2b4:	2200      	movhi	r2, #0
 800b2b6:	4413      	add	r3, r2
 800b2b8:	1a18      	subs	r0, r3, r0
 800b2ba:	b003      	add	sp, #12
 800b2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b2c6:	e7ed      	b.n	800b2a4 <__exponent+0x4c>
 800b2c8:	2330      	movs	r3, #48	; 0x30
 800b2ca:	3130      	adds	r1, #48	; 0x30
 800b2cc:	7083      	strb	r3, [r0, #2]
 800b2ce:	70c1      	strb	r1, [r0, #3]
 800b2d0:	1d03      	adds	r3, r0, #4
 800b2d2:	e7f1      	b.n	800b2b8 <__exponent+0x60>

0800b2d4 <_printf_float>:
 800b2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d8:	ed2d 8b02 	vpush	{d8}
 800b2dc:	b08d      	sub	sp, #52	; 0x34
 800b2de:	460c      	mov	r4, r1
 800b2e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b2e4:	4616      	mov	r6, r2
 800b2e6:	461f      	mov	r7, r3
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	f001 fc85 	bl	800cbf8 <_localeconv_r>
 800b2ee:	f8d0 a000 	ldr.w	sl, [r0]
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	f7f4 ff86 	bl	8000204 <strlen>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b2fc:	6823      	ldr	r3, [r4, #0]
 800b2fe:	9305      	str	r3, [sp, #20]
 800b300:	f8d8 3000 	ldr.w	r3, [r8]
 800b304:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b308:	3307      	adds	r3, #7
 800b30a:	f023 0307 	bic.w	r3, r3, #7
 800b30e:	f103 0208 	add.w	r2, r3, #8
 800b312:	f8c8 2000 	str.w	r2, [r8]
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b31e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b326:	9307      	str	r3, [sp, #28]
 800b328:	f8cd 8018 	str.w	r8, [sp, #24]
 800b32c:	ee08 0a10 	vmov	s16, r0
 800b330:	4b9f      	ldr	r3, [pc, #636]	; (800b5b0 <_printf_float+0x2dc>)
 800b332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b33a:	f7f5 fc17 	bl	8000b6c <__aeabi_dcmpun>
 800b33e:	bb88      	cbnz	r0, 800b3a4 <_printf_float+0xd0>
 800b340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b344:	4b9a      	ldr	r3, [pc, #616]	; (800b5b0 <_printf_float+0x2dc>)
 800b346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b34a:	f7f5 fbf1 	bl	8000b30 <__aeabi_dcmple>
 800b34e:	bb48      	cbnz	r0, 800b3a4 <_printf_float+0xd0>
 800b350:	2200      	movs	r2, #0
 800b352:	2300      	movs	r3, #0
 800b354:	4640      	mov	r0, r8
 800b356:	4649      	mov	r1, r9
 800b358:	f7f5 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800b35c:	b110      	cbz	r0, 800b364 <_printf_float+0x90>
 800b35e:	232d      	movs	r3, #45	; 0x2d
 800b360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b364:	4b93      	ldr	r3, [pc, #588]	; (800b5b4 <_printf_float+0x2e0>)
 800b366:	4894      	ldr	r0, [pc, #592]	; (800b5b8 <_printf_float+0x2e4>)
 800b368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b36c:	bf94      	ite	ls
 800b36e:	4698      	movls	r8, r3
 800b370:	4680      	movhi	r8, r0
 800b372:	2303      	movs	r3, #3
 800b374:	6123      	str	r3, [r4, #16]
 800b376:	9b05      	ldr	r3, [sp, #20]
 800b378:	f023 0204 	bic.w	r2, r3, #4
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	f04f 0900 	mov.w	r9, #0
 800b382:	9700      	str	r7, [sp, #0]
 800b384:	4633      	mov	r3, r6
 800b386:	aa0b      	add	r2, sp, #44	; 0x2c
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 f9d8 	bl	800b740 <_printf_common>
 800b390:	3001      	adds	r0, #1
 800b392:	f040 8090 	bne.w	800b4b6 <_printf_float+0x1e2>
 800b396:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b39a:	b00d      	add	sp, #52	; 0x34
 800b39c:	ecbd 8b02 	vpop	{d8}
 800b3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a4:	4642      	mov	r2, r8
 800b3a6:	464b      	mov	r3, r9
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	4649      	mov	r1, r9
 800b3ac:	f7f5 fbde 	bl	8000b6c <__aeabi_dcmpun>
 800b3b0:	b140      	cbz	r0, 800b3c4 <_printf_float+0xf0>
 800b3b2:	464b      	mov	r3, r9
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	bfbc      	itt	lt
 800b3b8:	232d      	movlt	r3, #45	; 0x2d
 800b3ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b3be:	487f      	ldr	r0, [pc, #508]	; (800b5bc <_printf_float+0x2e8>)
 800b3c0:	4b7f      	ldr	r3, [pc, #508]	; (800b5c0 <_printf_float+0x2ec>)
 800b3c2:	e7d1      	b.n	800b368 <_printf_float+0x94>
 800b3c4:	6863      	ldr	r3, [r4, #4]
 800b3c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b3ca:	9206      	str	r2, [sp, #24]
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	d13f      	bne.n	800b450 <_printf_float+0x17c>
 800b3d0:	2306      	movs	r3, #6
 800b3d2:	6063      	str	r3, [r4, #4]
 800b3d4:	9b05      	ldr	r3, [sp, #20]
 800b3d6:	6861      	ldr	r1, [r4, #4]
 800b3d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9303      	str	r3, [sp, #12]
 800b3e0:	ab0a      	add	r3, sp, #40	; 0x28
 800b3e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b3e6:	ab09      	add	r3, sp, #36	; 0x24
 800b3e8:	ec49 8b10 	vmov	d0, r8, r9
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	6022      	str	r2, [r4, #0]
 800b3f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	f7ff fecd 	bl	800b194 <__cvt>
 800b3fa:	9b06      	ldr	r3, [sp, #24]
 800b3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3fe:	2b47      	cmp	r3, #71	; 0x47
 800b400:	4680      	mov	r8, r0
 800b402:	d108      	bne.n	800b416 <_printf_float+0x142>
 800b404:	1cc8      	adds	r0, r1, #3
 800b406:	db02      	blt.n	800b40e <_printf_float+0x13a>
 800b408:	6863      	ldr	r3, [r4, #4]
 800b40a:	4299      	cmp	r1, r3
 800b40c:	dd41      	ble.n	800b492 <_printf_float+0x1be>
 800b40e:	f1ab 0b02 	sub.w	fp, fp, #2
 800b412:	fa5f fb8b 	uxtb.w	fp, fp
 800b416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b41a:	d820      	bhi.n	800b45e <_printf_float+0x18a>
 800b41c:	3901      	subs	r1, #1
 800b41e:	465a      	mov	r2, fp
 800b420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b424:	9109      	str	r1, [sp, #36]	; 0x24
 800b426:	f7ff ff17 	bl	800b258 <__exponent>
 800b42a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b42c:	1813      	adds	r3, r2, r0
 800b42e:	2a01      	cmp	r2, #1
 800b430:	4681      	mov	r9, r0
 800b432:	6123      	str	r3, [r4, #16]
 800b434:	dc02      	bgt.n	800b43c <_printf_float+0x168>
 800b436:	6822      	ldr	r2, [r4, #0]
 800b438:	07d2      	lsls	r2, r2, #31
 800b43a:	d501      	bpl.n	800b440 <_printf_float+0x16c>
 800b43c:	3301      	adds	r3, #1
 800b43e:	6123      	str	r3, [r4, #16]
 800b440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b444:	2b00      	cmp	r3, #0
 800b446:	d09c      	beq.n	800b382 <_printf_float+0xae>
 800b448:	232d      	movs	r3, #45	; 0x2d
 800b44a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b44e:	e798      	b.n	800b382 <_printf_float+0xae>
 800b450:	9a06      	ldr	r2, [sp, #24]
 800b452:	2a47      	cmp	r2, #71	; 0x47
 800b454:	d1be      	bne.n	800b3d4 <_printf_float+0x100>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1bc      	bne.n	800b3d4 <_printf_float+0x100>
 800b45a:	2301      	movs	r3, #1
 800b45c:	e7b9      	b.n	800b3d2 <_printf_float+0xfe>
 800b45e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b462:	d118      	bne.n	800b496 <_printf_float+0x1c2>
 800b464:	2900      	cmp	r1, #0
 800b466:	6863      	ldr	r3, [r4, #4]
 800b468:	dd0b      	ble.n	800b482 <_printf_float+0x1ae>
 800b46a:	6121      	str	r1, [r4, #16]
 800b46c:	b913      	cbnz	r3, 800b474 <_printf_float+0x1a0>
 800b46e:	6822      	ldr	r2, [r4, #0]
 800b470:	07d0      	lsls	r0, r2, #31
 800b472:	d502      	bpl.n	800b47a <_printf_float+0x1a6>
 800b474:	3301      	adds	r3, #1
 800b476:	440b      	add	r3, r1
 800b478:	6123      	str	r3, [r4, #16]
 800b47a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b47c:	f04f 0900 	mov.w	r9, #0
 800b480:	e7de      	b.n	800b440 <_printf_float+0x16c>
 800b482:	b913      	cbnz	r3, 800b48a <_printf_float+0x1b6>
 800b484:	6822      	ldr	r2, [r4, #0]
 800b486:	07d2      	lsls	r2, r2, #31
 800b488:	d501      	bpl.n	800b48e <_printf_float+0x1ba>
 800b48a:	3302      	adds	r3, #2
 800b48c:	e7f4      	b.n	800b478 <_printf_float+0x1a4>
 800b48e:	2301      	movs	r3, #1
 800b490:	e7f2      	b.n	800b478 <_printf_float+0x1a4>
 800b492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b498:	4299      	cmp	r1, r3
 800b49a:	db05      	blt.n	800b4a8 <_printf_float+0x1d4>
 800b49c:	6823      	ldr	r3, [r4, #0]
 800b49e:	6121      	str	r1, [r4, #16]
 800b4a0:	07d8      	lsls	r0, r3, #31
 800b4a2:	d5ea      	bpl.n	800b47a <_printf_float+0x1a6>
 800b4a4:	1c4b      	adds	r3, r1, #1
 800b4a6:	e7e7      	b.n	800b478 <_printf_float+0x1a4>
 800b4a8:	2900      	cmp	r1, #0
 800b4aa:	bfd4      	ite	le
 800b4ac:	f1c1 0202 	rsble	r2, r1, #2
 800b4b0:	2201      	movgt	r2, #1
 800b4b2:	4413      	add	r3, r2
 800b4b4:	e7e0      	b.n	800b478 <_printf_float+0x1a4>
 800b4b6:	6823      	ldr	r3, [r4, #0]
 800b4b8:	055a      	lsls	r2, r3, #21
 800b4ba:	d407      	bmi.n	800b4cc <_printf_float+0x1f8>
 800b4bc:	6923      	ldr	r3, [r4, #16]
 800b4be:	4642      	mov	r2, r8
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	47b8      	blx	r7
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d12c      	bne.n	800b524 <_printf_float+0x250>
 800b4ca:	e764      	b.n	800b396 <_printf_float+0xc2>
 800b4cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b4d0:	f240 80e0 	bls.w	800b694 <_printf_float+0x3c0>
 800b4d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b4d8:	2200      	movs	r2, #0
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f7f5 fb14 	bl	8000b08 <__aeabi_dcmpeq>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d034      	beq.n	800b54e <_printf_float+0x27a>
 800b4e4:	4a37      	ldr	r2, [pc, #220]	; (800b5c4 <_printf_float+0x2f0>)
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	4631      	mov	r1, r6
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	47b8      	blx	r7
 800b4ee:	3001      	adds	r0, #1
 800b4f0:	f43f af51 	beq.w	800b396 <_printf_float+0xc2>
 800b4f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	db02      	blt.n	800b502 <_printf_float+0x22e>
 800b4fc:	6823      	ldr	r3, [r4, #0]
 800b4fe:	07d8      	lsls	r0, r3, #31
 800b500:	d510      	bpl.n	800b524 <_printf_float+0x250>
 800b502:	ee18 3a10 	vmov	r3, s16
 800b506:	4652      	mov	r2, sl
 800b508:	4631      	mov	r1, r6
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b8      	blx	r7
 800b50e:	3001      	adds	r0, #1
 800b510:	f43f af41 	beq.w	800b396 <_printf_float+0xc2>
 800b514:	f04f 0800 	mov.w	r8, #0
 800b518:	f104 091a 	add.w	r9, r4, #26
 800b51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b51e:	3b01      	subs	r3, #1
 800b520:	4543      	cmp	r3, r8
 800b522:	dc09      	bgt.n	800b538 <_printf_float+0x264>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	079b      	lsls	r3, r3, #30
 800b528:	f100 8105 	bmi.w	800b736 <_printf_float+0x462>
 800b52c:	68e0      	ldr	r0, [r4, #12]
 800b52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b530:	4298      	cmp	r0, r3
 800b532:	bfb8      	it	lt
 800b534:	4618      	movlt	r0, r3
 800b536:	e730      	b.n	800b39a <_printf_float+0xc6>
 800b538:	2301      	movs	r3, #1
 800b53a:	464a      	mov	r2, r9
 800b53c:	4631      	mov	r1, r6
 800b53e:	4628      	mov	r0, r5
 800b540:	47b8      	blx	r7
 800b542:	3001      	adds	r0, #1
 800b544:	f43f af27 	beq.w	800b396 <_printf_float+0xc2>
 800b548:	f108 0801 	add.w	r8, r8, #1
 800b54c:	e7e6      	b.n	800b51c <_printf_float+0x248>
 800b54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b550:	2b00      	cmp	r3, #0
 800b552:	dc39      	bgt.n	800b5c8 <_printf_float+0x2f4>
 800b554:	4a1b      	ldr	r2, [pc, #108]	; (800b5c4 <_printf_float+0x2f0>)
 800b556:	2301      	movs	r3, #1
 800b558:	4631      	mov	r1, r6
 800b55a:	4628      	mov	r0, r5
 800b55c:	47b8      	blx	r7
 800b55e:	3001      	adds	r0, #1
 800b560:	f43f af19 	beq.w	800b396 <_printf_float+0xc2>
 800b564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b568:	4313      	orrs	r3, r2
 800b56a:	d102      	bne.n	800b572 <_printf_float+0x29e>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	07d9      	lsls	r1, r3, #31
 800b570:	d5d8      	bpl.n	800b524 <_printf_float+0x250>
 800b572:	ee18 3a10 	vmov	r3, s16
 800b576:	4652      	mov	r2, sl
 800b578:	4631      	mov	r1, r6
 800b57a:	4628      	mov	r0, r5
 800b57c:	47b8      	blx	r7
 800b57e:	3001      	adds	r0, #1
 800b580:	f43f af09 	beq.w	800b396 <_printf_float+0xc2>
 800b584:	f04f 0900 	mov.w	r9, #0
 800b588:	f104 0a1a 	add.w	sl, r4, #26
 800b58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58e:	425b      	negs	r3, r3
 800b590:	454b      	cmp	r3, r9
 800b592:	dc01      	bgt.n	800b598 <_printf_float+0x2c4>
 800b594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b596:	e792      	b.n	800b4be <_printf_float+0x1ea>
 800b598:	2301      	movs	r3, #1
 800b59a:	4652      	mov	r2, sl
 800b59c:	4631      	mov	r1, r6
 800b59e:	4628      	mov	r0, r5
 800b5a0:	47b8      	blx	r7
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f43f aef7 	beq.w	800b396 <_printf_float+0xc2>
 800b5a8:	f109 0901 	add.w	r9, r9, #1
 800b5ac:	e7ee      	b.n	800b58c <_printf_float+0x2b8>
 800b5ae:	bf00      	nop
 800b5b0:	7fefffff 	.word	0x7fefffff
 800b5b4:	0800f539 	.word	0x0800f539
 800b5b8:	0800f53d 	.word	0x0800f53d
 800b5bc:	0800f545 	.word	0x0800f545
 800b5c0:	0800f541 	.word	0x0800f541
 800b5c4:	0800f549 	.word	0x0800f549
 800b5c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	bfa8      	it	ge
 800b5d0:	461a      	movge	r2, r3
 800b5d2:	2a00      	cmp	r2, #0
 800b5d4:	4691      	mov	r9, r2
 800b5d6:	dc37      	bgt.n	800b648 <_printf_float+0x374>
 800b5d8:	f04f 0b00 	mov.w	fp, #0
 800b5dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b5e0:	f104 021a 	add.w	r2, r4, #26
 800b5e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b5e6:	9305      	str	r3, [sp, #20]
 800b5e8:	eba3 0309 	sub.w	r3, r3, r9
 800b5ec:	455b      	cmp	r3, fp
 800b5ee:	dc33      	bgt.n	800b658 <_printf_float+0x384>
 800b5f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	db3b      	blt.n	800b670 <_printf_float+0x39c>
 800b5f8:	6823      	ldr	r3, [r4, #0]
 800b5fa:	07da      	lsls	r2, r3, #31
 800b5fc:	d438      	bmi.n	800b670 <_printf_float+0x39c>
 800b5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b600:	9a05      	ldr	r2, [sp, #20]
 800b602:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b604:	1a9a      	subs	r2, r3, r2
 800b606:	eba3 0901 	sub.w	r9, r3, r1
 800b60a:	4591      	cmp	r9, r2
 800b60c:	bfa8      	it	ge
 800b60e:	4691      	movge	r9, r2
 800b610:	f1b9 0f00 	cmp.w	r9, #0
 800b614:	dc35      	bgt.n	800b682 <_printf_float+0x3ae>
 800b616:	f04f 0800 	mov.w	r8, #0
 800b61a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b61e:	f104 0a1a 	add.w	sl, r4, #26
 800b622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b626:	1a9b      	subs	r3, r3, r2
 800b628:	eba3 0309 	sub.w	r3, r3, r9
 800b62c:	4543      	cmp	r3, r8
 800b62e:	f77f af79 	ble.w	800b524 <_printf_float+0x250>
 800b632:	2301      	movs	r3, #1
 800b634:	4652      	mov	r2, sl
 800b636:	4631      	mov	r1, r6
 800b638:	4628      	mov	r0, r5
 800b63a:	47b8      	blx	r7
 800b63c:	3001      	adds	r0, #1
 800b63e:	f43f aeaa 	beq.w	800b396 <_printf_float+0xc2>
 800b642:	f108 0801 	add.w	r8, r8, #1
 800b646:	e7ec      	b.n	800b622 <_printf_float+0x34e>
 800b648:	4613      	mov	r3, r2
 800b64a:	4631      	mov	r1, r6
 800b64c:	4642      	mov	r2, r8
 800b64e:	4628      	mov	r0, r5
 800b650:	47b8      	blx	r7
 800b652:	3001      	adds	r0, #1
 800b654:	d1c0      	bne.n	800b5d8 <_printf_float+0x304>
 800b656:	e69e      	b.n	800b396 <_printf_float+0xc2>
 800b658:	2301      	movs	r3, #1
 800b65a:	4631      	mov	r1, r6
 800b65c:	4628      	mov	r0, r5
 800b65e:	9205      	str	r2, [sp, #20]
 800b660:	47b8      	blx	r7
 800b662:	3001      	adds	r0, #1
 800b664:	f43f ae97 	beq.w	800b396 <_printf_float+0xc2>
 800b668:	9a05      	ldr	r2, [sp, #20]
 800b66a:	f10b 0b01 	add.w	fp, fp, #1
 800b66e:	e7b9      	b.n	800b5e4 <_printf_float+0x310>
 800b670:	ee18 3a10 	vmov	r3, s16
 800b674:	4652      	mov	r2, sl
 800b676:	4631      	mov	r1, r6
 800b678:	4628      	mov	r0, r5
 800b67a:	47b8      	blx	r7
 800b67c:	3001      	adds	r0, #1
 800b67e:	d1be      	bne.n	800b5fe <_printf_float+0x32a>
 800b680:	e689      	b.n	800b396 <_printf_float+0xc2>
 800b682:	9a05      	ldr	r2, [sp, #20]
 800b684:	464b      	mov	r3, r9
 800b686:	4442      	add	r2, r8
 800b688:	4631      	mov	r1, r6
 800b68a:	4628      	mov	r0, r5
 800b68c:	47b8      	blx	r7
 800b68e:	3001      	adds	r0, #1
 800b690:	d1c1      	bne.n	800b616 <_printf_float+0x342>
 800b692:	e680      	b.n	800b396 <_printf_float+0xc2>
 800b694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b696:	2a01      	cmp	r2, #1
 800b698:	dc01      	bgt.n	800b69e <_printf_float+0x3ca>
 800b69a:	07db      	lsls	r3, r3, #31
 800b69c:	d538      	bpl.n	800b710 <_printf_float+0x43c>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4642      	mov	r2, r8
 800b6a2:	4631      	mov	r1, r6
 800b6a4:	4628      	mov	r0, r5
 800b6a6:	47b8      	blx	r7
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	f43f ae74 	beq.w	800b396 <_printf_float+0xc2>
 800b6ae:	ee18 3a10 	vmov	r3, s16
 800b6b2:	4652      	mov	r2, sl
 800b6b4:	4631      	mov	r1, r6
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	47b8      	blx	r7
 800b6ba:	3001      	adds	r0, #1
 800b6bc:	f43f ae6b 	beq.w	800b396 <_printf_float+0xc2>
 800b6c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	f7f5 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 800b6cc:	b9d8      	cbnz	r0, 800b706 <_printf_float+0x432>
 800b6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d0:	f108 0201 	add.w	r2, r8, #1
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	4631      	mov	r1, r6
 800b6d8:	4628      	mov	r0, r5
 800b6da:	47b8      	blx	r7
 800b6dc:	3001      	adds	r0, #1
 800b6de:	d10e      	bne.n	800b6fe <_printf_float+0x42a>
 800b6e0:	e659      	b.n	800b396 <_printf_float+0xc2>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	4652      	mov	r2, sl
 800b6e6:	4631      	mov	r1, r6
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	47b8      	blx	r7
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	f43f ae52 	beq.w	800b396 <_printf_float+0xc2>
 800b6f2:	f108 0801 	add.w	r8, r8, #1
 800b6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	4543      	cmp	r3, r8
 800b6fc:	dcf1      	bgt.n	800b6e2 <_printf_float+0x40e>
 800b6fe:	464b      	mov	r3, r9
 800b700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b704:	e6dc      	b.n	800b4c0 <_printf_float+0x1ec>
 800b706:	f04f 0800 	mov.w	r8, #0
 800b70a:	f104 0a1a 	add.w	sl, r4, #26
 800b70e:	e7f2      	b.n	800b6f6 <_printf_float+0x422>
 800b710:	2301      	movs	r3, #1
 800b712:	4642      	mov	r2, r8
 800b714:	e7df      	b.n	800b6d6 <_printf_float+0x402>
 800b716:	2301      	movs	r3, #1
 800b718:	464a      	mov	r2, r9
 800b71a:	4631      	mov	r1, r6
 800b71c:	4628      	mov	r0, r5
 800b71e:	47b8      	blx	r7
 800b720:	3001      	adds	r0, #1
 800b722:	f43f ae38 	beq.w	800b396 <_printf_float+0xc2>
 800b726:	f108 0801 	add.w	r8, r8, #1
 800b72a:	68e3      	ldr	r3, [r4, #12]
 800b72c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b72e:	1a5b      	subs	r3, r3, r1
 800b730:	4543      	cmp	r3, r8
 800b732:	dcf0      	bgt.n	800b716 <_printf_float+0x442>
 800b734:	e6fa      	b.n	800b52c <_printf_float+0x258>
 800b736:	f04f 0800 	mov.w	r8, #0
 800b73a:	f104 0919 	add.w	r9, r4, #25
 800b73e:	e7f4      	b.n	800b72a <_printf_float+0x456>

0800b740 <_printf_common>:
 800b740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b744:	4616      	mov	r6, r2
 800b746:	4699      	mov	r9, r3
 800b748:	688a      	ldr	r2, [r1, #8]
 800b74a:	690b      	ldr	r3, [r1, #16]
 800b74c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b750:	4293      	cmp	r3, r2
 800b752:	bfb8      	it	lt
 800b754:	4613      	movlt	r3, r2
 800b756:	6033      	str	r3, [r6, #0]
 800b758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b75c:	4607      	mov	r7, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	b10a      	cbz	r2, 800b766 <_printf_common+0x26>
 800b762:	3301      	adds	r3, #1
 800b764:	6033      	str	r3, [r6, #0]
 800b766:	6823      	ldr	r3, [r4, #0]
 800b768:	0699      	lsls	r1, r3, #26
 800b76a:	bf42      	ittt	mi
 800b76c:	6833      	ldrmi	r3, [r6, #0]
 800b76e:	3302      	addmi	r3, #2
 800b770:	6033      	strmi	r3, [r6, #0]
 800b772:	6825      	ldr	r5, [r4, #0]
 800b774:	f015 0506 	ands.w	r5, r5, #6
 800b778:	d106      	bne.n	800b788 <_printf_common+0x48>
 800b77a:	f104 0a19 	add.w	sl, r4, #25
 800b77e:	68e3      	ldr	r3, [r4, #12]
 800b780:	6832      	ldr	r2, [r6, #0]
 800b782:	1a9b      	subs	r3, r3, r2
 800b784:	42ab      	cmp	r3, r5
 800b786:	dc26      	bgt.n	800b7d6 <_printf_common+0x96>
 800b788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b78c:	1e13      	subs	r3, r2, #0
 800b78e:	6822      	ldr	r2, [r4, #0]
 800b790:	bf18      	it	ne
 800b792:	2301      	movne	r3, #1
 800b794:	0692      	lsls	r2, r2, #26
 800b796:	d42b      	bmi.n	800b7f0 <_printf_common+0xb0>
 800b798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b79c:	4649      	mov	r1, r9
 800b79e:	4638      	mov	r0, r7
 800b7a0:	47c0      	blx	r8
 800b7a2:	3001      	adds	r0, #1
 800b7a4:	d01e      	beq.n	800b7e4 <_printf_common+0xa4>
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	68e5      	ldr	r5, [r4, #12]
 800b7aa:	6832      	ldr	r2, [r6, #0]
 800b7ac:	f003 0306 	and.w	r3, r3, #6
 800b7b0:	2b04      	cmp	r3, #4
 800b7b2:	bf08      	it	eq
 800b7b4:	1aad      	subeq	r5, r5, r2
 800b7b6:	68a3      	ldr	r3, [r4, #8]
 800b7b8:	6922      	ldr	r2, [r4, #16]
 800b7ba:	bf0c      	ite	eq
 800b7bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7c0:	2500      	movne	r5, #0
 800b7c2:	4293      	cmp	r3, r2
 800b7c4:	bfc4      	itt	gt
 800b7c6:	1a9b      	subgt	r3, r3, r2
 800b7c8:	18ed      	addgt	r5, r5, r3
 800b7ca:	2600      	movs	r6, #0
 800b7cc:	341a      	adds	r4, #26
 800b7ce:	42b5      	cmp	r5, r6
 800b7d0:	d11a      	bne.n	800b808 <_printf_common+0xc8>
 800b7d2:	2000      	movs	r0, #0
 800b7d4:	e008      	b.n	800b7e8 <_printf_common+0xa8>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	4652      	mov	r2, sl
 800b7da:	4649      	mov	r1, r9
 800b7dc:	4638      	mov	r0, r7
 800b7de:	47c0      	blx	r8
 800b7e0:	3001      	adds	r0, #1
 800b7e2:	d103      	bne.n	800b7ec <_printf_common+0xac>
 800b7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ec:	3501      	adds	r5, #1
 800b7ee:	e7c6      	b.n	800b77e <_printf_common+0x3e>
 800b7f0:	18e1      	adds	r1, r4, r3
 800b7f2:	1c5a      	adds	r2, r3, #1
 800b7f4:	2030      	movs	r0, #48	; 0x30
 800b7f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b7fa:	4422      	add	r2, r4
 800b7fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b804:	3302      	adds	r3, #2
 800b806:	e7c7      	b.n	800b798 <_printf_common+0x58>
 800b808:	2301      	movs	r3, #1
 800b80a:	4622      	mov	r2, r4
 800b80c:	4649      	mov	r1, r9
 800b80e:	4638      	mov	r0, r7
 800b810:	47c0      	blx	r8
 800b812:	3001      	adds	r0, #1
 800b814:	d0e6      	beq.n	800b7e4 <_printf_common+0xa4>
 800b816:	3601      	adds	r6, #1
 800b818:	e7d9      	b.n	800b7ce <_printf_common+0x8e>
	...

0800b81c <_printf_i>:
 800b81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b820:	7e0f      	ldrb	r7, [r1, #24]
 800b822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b824:	2f78      	cmp	r7, #120	; 0x78
 800b826:	4691      	mov	r9, r2
 800b828:	4680      	mov	r8, r0
 800b82a:	460c      	mov	r4, r1
 800b82c:	469a      	mov	sl, r3
 800b82e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b832:	d807      	bhi.n	800b844 <_printf_i+0x28>
 800b834:	2f62      	cmp	r7, #98	; 0x62
 800b836:	d80a      	bhi.n	800b84e <_printf_i+0x32>
 800b838:	2f00      	cmp	r7, #0
 800b83a:	f000 80d8 	beq.w	800b9ee <_printf_i+0x1d2>
 800b83e:	2f58      	cmp	r7, #88	; 0x58
 800b840:	f000 80a3 	beq.w	800b98a <_printf_i+0x16e>
 800b844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b84c:	e03a      	b.n	800b8c4 <_printf_i+0xa8>
 800b84e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b852:	2b15      	cmp	r3, #21
 800b854:	d8f6      	bhi.n	800b844 <_printf_i+0x28>
 800b856:	a101      	add	r1, pc, #4	; (adr r1, 800b85c <_printf_i+0x40>)
 800b858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b85c:	0800b8b5 	.word	0x0800b8b5
 800b860:	0800b8c9 	.word	0x0800b8c9
 800b864:	0800b845 	.word	0x0800b845
 800b868:	0800b845 	.word	0x0800b845
 800b86c:	0800b845 	.word	0x0800b845
 800b870:	0800b845 	.word	0x0800b845
 800b874:	0800b8c9 	.word	0x0800b8c9
 800b878:	0800b845 	.word	0x0800b845
 800b87c:	0800b845 	.word	0x0800b845
 800b880:	0800b845 	.word	0x0800b845
 800b884:	0800b845 	.word	0x0800b845
 800b888:	0800b9d5 	.word	0x0800b9d5
 800b88c:	0800b8f9 	.word	0x0800b8f9
 800b890:	0800b9b7 	.word	0x0800b9b7
 800b894:	0800b845 	.word	0x0800b845
 800b898:	0800b845 	.word	0x0800b845
 800b89c:	0800b9f7 	.word	0x0800b9f7
 800b8a0:	0800b845 	.word	0x0800b845
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b845 	.word	0x0800b845
 800b8ac:	0800b845 	.word	0x0800b845
 800b8b0:	0800b9bf 	.word	0x0800b9bf
 800b8b4:	682b      	ldr	r3, [r5, #0]
 800b8b6:	1d1a      	adds	r2, r3, #4
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	602a      	str	r2, [r5, #0]
 800b8bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e0a3      	b.n	800ba10 <_printf_i+0x1f4>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	6829      	ldr	r1, [r5, #0]
 800b8cc:	0606      	lsls	r6, r0, #24
 800b8ce:	f101 0304 	add.w	r3, r1, #4
 800b8d2:	d50a      	bpl.n	800b8ea <_printf_i+0xce>
 800b8d4:	680e      	ldr	r6, [r1, #0]
 800b8d6:	602b      	str	r3, [r5, #0]
 800b8d8:	2e00      	cmp	r6, #0
 800b8da:	da03      	bge.n	800b8e4 <_printf_i+0xc8>
 800b8dc:	232d      	movs	r3, #45	; 0x2d
 800b8de:	4276      	negs	r6, r6
 800b8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8e4:	485e      	ldr	r0, [pc, #376]	; (800ba60 <_printf_i+0x244>)
 800b8e6:	230a      	movs	r3, #10
 800b8e8:	e019      	b.n	800b91e <_printf_i+0x102>
 800b8ea:	680e      	ldr	r6, [r1, #0]
 800b8ec:	602b      	str	r3, [r5, #0]
 800b8ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b8f2:	bf18      	it	ne
 800b8f4:	b236      	sxthne	r6, r6
 800b8f6:	e7ef      	b.n	800b8d8 <_printf_i+0xbc>
 800b8f8:	682b      	ldr	r3, [r5, #0]
 800b8fa:	6820      	ldr	r0, [r4, #0]
 800b8fc:	1d19      	adds	r1, r3, #4
 800b8fe:	6029      	str	r1, [r5, #0]
 800b900:	0601      	lsls	r1, r0, #24
 800b902:	d501      	bpl.n	800b908 <_printf_i+0xec>
 800b904:	681e      	ldr	r6, [r3, #0]
 800b906:	e002      	b.n	800b90e <_printf_i+0xf2>
 800b908:	0646      	lsls	r6, r0, #25
 800b90a:	d5fb      	bpl.n	800b904 <_printf_i+0xe8>
 800b90c:	881e      	ldrh	r6, [r3, #0]
 800b90e:	4854      	ldr	r0, [pc, #336]	; (800ba60 <_printf_i+0x244>)
 800b910:	2f6f      	cmp	r7, #111	; 0x6f
 800b912:	bf0c      	ite	eq
 800b914:	2308      	moveq	r3, #8
 800b916:	230a      	movne	r3, #10
 800b918:	2100      	movs	r1, #0
 800b91a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b91e:	6865      	ldr	r5, [r4, #4]
 800b920:	60a5      	str	r5, [r4, #8]
 800b922:	2d00      	cmp	r5, #0
 800b924:	bfa2      	ittt	ge
 800b926:	6821      	ldrge	r1, [r4, #0]
 800b928:	f021 0104 	bicge.w	r1, r1, #4
 800b92c:	6021      	strge	r1, [r4, #0]
 800b92e:	b90e      	cbnz	r6, 800b934 <_printf_i+0x118>
 800b930:	2d00      	cmp	r5, #0
 800b932:	d04d      	beq.n	800b9d0 <_printf_i+0x1b4>
 800b934:	4615      	mov	r5, r2
 800b936:	fbb6 f1f3 	udiv	r1, r6, r3
 800b93a:	fb03 6711 	mls	r7, r3, r1, r6
 800b93e:	5dc7      	ldrb	r7, [r0, r7]
 800b940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b944:	4637      	mov	r7, r6
 800b946:	42bb      	cmp	r3, r7
 800b948:	460e      	mov	r6, r1
 800b94a:	d9f4      	bls.n	800b936 <_printf_i+0x11a>
 800b94c:	2b08      	cmp	r3, #8
 800b94e:	d10b      	bne.n	800b968 <_printf_i+0x14c>
 800b950:	6823      	ldr	r3, [r4, #0]
 800b952:	07de      	lsls	r6, r3, #31
 800b954:	d508      	bpl.n	800b968 <_printf_i+0x14c>
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	6861      	ldr	r1, [r4, #4]
 800b95a:	4299      	cmp	r1, r3
 800b95c:	bfde      	ittt	le
 800b95e:	2330      	movle	r3, #48	; 0x30
 800b960:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b964:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b968:	1b52      	subs	r2, r2, r5
 800b96a:	6122      	str	r2, [r4, #16]
 800b96c:	f8cd a000 	str.w	sl, [sp]
 800b970:	464b      	mov	r3, r9
 800b972:	aa03      	add	r2, sp, #12
 800b974:	4621      	mov	r1, r4
 800b976:	4640      	mov	r0, r8
 800b978:	f7ff fee2 	bl	800b740 <_printf_common>
 800b97c:	3001      	adds	r0, #1
 800b97e:	d14c      	bne.n	800ba1a <_printf_i+0x1fe>
 800b980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b984:	b004      	add	sp, #16
 800b986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b98a:	4835      	ldr	r0, [pc, #212]	; (800ba60 <_printf_i+0x244>)
 800b98c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b990:	6829      	ldr	r1, [r5, #0]
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	f851 6b04 	ldr.w	r6, [r1], #4
 800b998:	6029      	str	r1, [r5, #0]
 800b99a:	061d      	lsls	r5, r3, #24
 800b99c:	d514      	bpl.n	800b9c8 <_printf_i+0x1ac>
 800b99e:	07df      	lsls	r7, r3, #31
 800b9a0:	bf44      	itt	mi
 800b9a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b9a6:	6023      	strmi	r3, [r4, #0]
 800b9a8:	b91e      	cbnz	r6, 800b9b2 <_printf_i+0x196>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	f023 0320 	bic.w	r3, r3, #32
 800b9b0:	6023      	str	r3, [r4, #0]
 800b9b2:	2310      	movs	r3, #16
 800b9b4:	e7b0      	b.n	800b918 <_printf_i+0xfc>
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	f043 0320 	orr.w	r3, r3, #32
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	2378      	movs	r3, #120	; 0x78
 800b9c0:	4828      	ldr	r0, [pc, #160]	; (800ba64 <_printf_i+0x248>)
 800b9c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b9c6:	e7e3      	b.n	800b990 <_printf_i+0x174>
 800b9c8:	0659      	lsls	r1, r3, #25
 800b9ca:	bf48      	it	mi
 800b9cc:	b2b6      	uxthmi	r6, r6
 800b9ce:	e7e6      	b.n	800b99e <_printf_i+0x182>
 800b9d0:	4615      	mov	r5, r2
 800b9d2:	e7bb      	b.n	800b94c <_printf_i+0x130>
 800b9d4:	682b      	ldr	r3, [r5, #0]
 800b9d6:	6826      	ldr	r6, [r4, #0]
 800b9d8:	6961      	ldr	r1, [r4, #20]
 800b9da:	1d18      	adds	r0, r3, #4
 800b9dc:	6028      	str	r0, [r5, #0]
 800b9de:	0635      	lsls	r5, r6, #24
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	d501      	bpl.n	800b9e8 <_printf_i+0x1cc>
 800b9e4:	6019      	str	r1, [r3, #0]
 800b9e6:	e002      	b.n	800b9ee <_printf_i+0x1d2>
 800b9e8:	0670      	lsls	r0, r6, #25
 800b9ea:	d5fb      	bpl.n	800b9e4 <_printf_i+0x1c8>
 800b9ec:	8019      	strh	r1, [r3, #0]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6123      	str	r3, [r4, #16]
 800b9f2:	4615      	mov	r5, r2
 800b9f4:	e7ba      	b.n	800b96c <_printf_i+0x150>
 800b9f6:	682b      	ldr	r3, [r5, #0]
 800b9f8:	1d1a      	adds	r2, r3, #4
 800b9fa:	602a      	str	r2, [r5, #0]
 800b9fc:	681d      	ldr	r5, [r3, #0]
 800b9fe:	6862      	ldr	r2, [r4, #4]
 800ba00:	2100      	movs	r1, #0
 800ba02:	4628      	mov	r0, r5
 800ba04:	f7f4 fc0c 	bl	8000220 <memchr>
 800ba08:	b108      	cbz	r0, 800ba0e <_printf_i+0x1f2>
 800ba0a:	1b40      	subs	r0, r0, r5
 800ba0c:	6060      	str	r0, [r4, #4]
 800ba0e:	6863      	ldr	r3, [r4, #4]
 800ba10:	6123      	str	r3, [r4, #16]
 800ba12:	2300      	movs	r3, #0
 800ba14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba18:	e7a8      	b.n	800b96c <_printf_i+0x150>
 800ba1a:	6923      	ldr	r3, [r4, #16]
 800ba1c:	462a      	mov	r2, r5
 800ba1e:	4649      	mov	r1, r9
 800ba20:	4640      	mov	r0, r8
 800ba22:	47d0      	blx	sl
 800ba24:	3001      	adds	r0, #1
 800ba26:	d0ab      	beq.n	800b980 <_printf_i+0x164>
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	079b      	lsls	r3, r3, #30
 800ba2c:	d413      	bmi.n	800ba56 <_printf_i+0x23a>
 800ba2e:	68e0      	ldr	r0, [r4, #12]
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	4298      	cmp	r0, r3
 800ba34:	bfb8      	it	lt
 800ba36:	4618      	movlt	r0, r3
 800ba38:	e7a4      	b.n	800b984 <_printf_i+0x168>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	4632      	mov	r2, r6
 800ba3e:	4649      	mov	r1, r9
 800ba40:	4640      	mov	r0, r8
 800ba42:	47d0      	blx	sl
 800ba44:	3001      	adds	r0, #1
 800ba46:	d09b      	beq.n	800b980 <_printf_i+0x164>
 800ba48:	3501      	adds	r5, #1
 800ba4a:	68e3      	ldr	r3, [r4, #12]
 800ba4c:	9903      	ldr	r1, [sp, #12]
 800ba4e:	1a5b      	subs	r3, r3, r1
 800ba50:	42ab      	cmp	r3, r5
 800ba52:	dcf2      	bgt.n	800ba3a <_printf_i+0x21e>
 800ba54:	e7eb      	b.n	800ba2e <_printf_i+0x212>
 800ba56:	2500      	movs	r5, #0
 800ba58:	f104 0619 	add.w	r6, r4, #25
 800ba5c:	e7f5      	b.n	800ba4a <_printf_i+0x22e>
 800ba5e:	bf00      	nop
 800ba60:	0800f54b 	.word	0x0800f54b
 800ba64:	0800f55c 	.word	0x0800f55c

0800ba68 <_sbrk_r>:
 800ba68:	b538      	push	{r3, r4, r5, lr}
 800ba6a:	4d06      	ldr	r5, [pc, #24]	; (800ba84 <_sbrk_r+0x1c>)
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	4604      	mov	r4, r0
 800ba70:	4608      	mov	r0, r1
 800ba72:	602b      	str	r3, [r5, #0]
 800ba74:	f7f5 fb7a 	bl	800116c <_sbrk>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_sbrk_r+0x1a>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_sbrk_r+0x1a>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	2000b248 	.word	0x2000b248

0800ba88 <_raise_r>:
 800ba88:	291f      	cmp	r1, #31
 800ba8a:	b538      	push	{r3, r4, r5, lr}
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	460d      	mov	r5, r1
 800ba90:	d904      	bls.n	800ba9c <_raise_r+0x14>
 800ba92:	2316      	movs	r3, #22
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba9e:	b112      	cbz	r2, 800baa6 <_raise_r+0x1e>
 800baa0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baa4:	b94b      	cbnz	r3, 800baba <_raise_r+0x32>
 800baa6:	4620      	mov	r0, r4
 800baa8:	f000 f830 	bl	800bb0c <_getpid_r>
 800baac:	462a      	mov	r2, r5
 800baae:	4601      	mov	r1, r0
 800bab0:	4620      	mov	r0, r4
 800bab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab6:	f000 b817 	b.w	800bae8 <_kill_r>
 800baba:	2b01      	cmp	r3, #1
 800babc:	d00a      	beq.n	800bad4 <_raise_r+0x4c>
 800babe:	1c59      	adds	r1, r3, #1
 800bac0:	d103      	bne.n	800baca <_raise_r+0x42>
 800bac2:	2316      	movs	r3, #22
 800bac4:	6003      	str	r3, [r0, #0]
 800bac6:	2001      	movs	r0, #1
 800bac8:	e7e7      	b.n	800ba9a <_raise_r+0x12>
 800baca:	2400      	movs	r4, #0
 800bacc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bad0:	4628      	mov	r0, r5
 800bad2:	4798      	blx	r3
 800bad4:	2000      	movs	r0, #0
 800bad6:	e7e0      	b.n	800ba9a <_raise_r+0x12>

0800bad8 <raise>:
 800bad8:	4b02      	ldr	r3, [pc, #8]	; (800bae4 <raise+0xc>)
 800bada:	4601      	mov	r1, r0
 800badc:	6818      	ldr	r0, [r3, #0]
 800bade:	f7ff bfd3 	b.w	800ba88 <_raise_r>
 800bae2:	bf00      	nop
 800bae4:	2000016c 	.word	0x2000016c

0800bae8 <_kill_r>:
 800bae8:	b538      	push	{r3, r4, r5, lr}
 800baea:	4d07      	ldr	r5, [pc, #28]	; (800bb08 <_kill_r+0x20>)
 800baec:	2300      	movs	r3, #0
 800baee:	4604      	mov	r4, r0
 800baf0:	4608      	mov	r0, r1
 800baf2:	4611      	mov	r1, r2
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	f7f5 fb01 	bl	80010fc <_kill>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	d102      	bne.n	800bb04 <_kill_r+0x1c>
 800bafe:	682b      	ldr	r3, [r5, #0]
 800bb00:	b103      	cbz	r3, 800bb04 <_kill_r+0x1c>
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	bd38      	pop	{r3, r4, r5, pc}
 800bb06:	bf00      	nop
 800bb08:	2000b248 	.word	0x2000b248

0800bb0c <_getpid_r>:
 800bb0c:	f7f5 baf4 	b.w	80010f8 <_getpid>

0800bb10 <strstr>:
 800bb10:	780a      	ldrb	r2, [r1, #0]
 800bb12:	b570      	push	{r4, r5, r6, lr}
 800bb14:	b96a      	cbnz	r2, 800bb32 <strstr+0x22>
 800bb16:	bd70      	pop	{r4, r5, r6, pc}
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d109      	bne.n	800bb30 <strstr+0x20>
 800bb1c:	460c      	mov	r4, r1
 800bb1e:	4605      	mov	r5, r0
 800bb20:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d0f6      	beq.n	800bb16 <strstr+0x6>
 800bb28:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800bb2c:	429e      	cmp	r6, r3
 800bb2e:	d0f7      	beq.n	800bb20 <strstr+0x10>
 800bb30:	3001      	adds	r0, #1
 800bb32:	7803      	ldrb	r3, [r0, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d1ef      	bne.n	800bb18 <strstr+0x8>
 800bb38:	4618      	mov	r0, r3
 800bb3a:	e7ec      	b.n	800bb16 <strstr+0x6>

0800bb3c <_strtol_l.constprop.0>:
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb42:	d001      	beq.n	800bb48 <_strtol_l.constprop.0+0xc>
 800bb44:	2b24      	cmp	r3, #36	; 0x24
 800bb46:	d906      	bls.n	800bb56 <_strtol_l.constprop.0+0x1a>
 800bb48:	f000 ff48 	bl	800c9dc <__errno>
 800bb4c:	2316      	movs	r3, #22
 800bb4e:	6003      	str	r3, [r0, #0]
 800bb50:	2000      	movs	r0, #0
 800bb52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bc3c <_strtol_l.constprop.0+0x100>
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	462e      	mov	r6, r5
 800bb5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb62:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bb66:	f017 0708 	ands.w	r7, r7, #8
 800bb6a:	d1f7      	bne.n	800bb5c <_strtol_l.constprop.0+0x20>
 800bb6c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb6e:	d132      	bne.n	800bbd6 <_strtol_l.constprop.0+0x9a>
 800bb70:	782c      	ldrb	r4, [r5, #0]
 800bb72:	2701      	movs	r7, #1
 800bb74:	1cb5      	adds	r5, r6, #2
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d05b      	beq.n	800bc32 <_strtol_l.constprop.0+0xf6>
 800bb7a:	2b10      	cmp	r3, #16
 800bb7c:	d109      	bne.n	800bb92 <_strtol_l.constprop.0+0x56>
 800bb7e:	2c30      	cmp	r4, #48	; 0x30
 800bb80:	d107      	bne.n	800bb92 <_strtol_l.constprop.0+0x56>
 800bb82:	782c      	ldrb	r4, [r5, #0]
 800bb84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bb88:	2c58      	cmp	r4, #88	; 0x58
 800bb8a:	d14d      	bne.n	800bc28 <_strtol_l.constprop.0+0xec>
 800bb8c:	786c      	ldrb	r4, [r5, #1]
 800bb8e:	2310      	movs	r3, #16
 800bb90:	3502      	adds	r5, #2
 800bb92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb96:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb9a:	f04f 0c00 	mov.w	ip, #0
 800bb9e:	fbb8 f9f3 	udiv	r9, r8, r3
 800bba2:	4666      	mov	r6, ip
 800bba4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bba8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bbac:	f1be 0f09 	cmp.w	lr, #9
 800bbb0:	d816      	bhi.n	800bbe0 <_strtol_l.constprop.0+0xa4>
 800bbb2:	4674      	mov	r4, lr
 800bbb4:	42a3      	cmp	r3, r4
 800bbb6:	dd24      	ble.n	800bc02 <_strtol_l.constprop.0+0xc6>
 800bbb8:	f1bc 0f00 	cmp.w	ip, #0
 800bbbc:	db1e      	blt.n	800bbfc <_strtol_l.constprop.0+0xc0>
 800bbbe:	45b1      	cmp	r9, r6
 800bbc0:	d31c      	bcc.n	800bbfc <_strtol_l.constprop.0+0xc0>
 800bbc2:	d101      	bne.n	800bbc8 <_strtol_l.constprop.0+0x8c>
 800bbc4:	45a2      	cmp	sl, r4
 800bbc6:	db19      	blt.n	800bbfc <_strtol_l.constprop.0+0xc0>
 800bbc8:	fb06 4603 	mla	r6, r6, r3, r4
 800bbcc:	f04f 0c01 	mov.w	ip, #1
 800bbd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bbd4:	e7e8      	b.n	800bba8 <_strtol_l.constprop.0+0x6c>
 800bbd6:	2c2b      	cmp	r4, #43	; 0x2b
 800bbd8:	bf04      	itt	eq
 800bbda:	782c      	ldrbeq	r4, [r5, #0]
 800bbdc:	1cb5      	addeq	r5, r6, #2
 800bbde:	e7ca      	b.n	800bb76 <_strtol_l.constprop.0+0x3a>
 800bbe0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bbe4:	f1be 0f19 	cmp.w	lr, #25
 800bbe8:	d801      	bhi.n	800bbee <_strtol_l.constprop.0+0xb2>
 800bbea:	3c37      	subs	r4, #55	; 0x37
 800bbec:	e7e2      	b.n	800bbb4 <_strtol_l.constprop.0+0x78>
 800bbee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bbf2:	f1be 0f19 	cmp.w	lr, #25
 800bbf6:	d804      	bhi.n	800bc02 <_strtol_l.constprop.0+0xc6>
 800bbf8:	3c57      	subs	r4, #87	; 0x57
 800bbfa:	e7db      	b.n	800bbb4 <_strtol_l.constprop.0+0x78>
 800bbfc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bc00:	e7e6      	b.n	800bbd0 <_strtol_l.constprop.0+0x94>
 800bc02:	f1bc 0f00 	cmp.w	ip, #0
 800bc06:	da05      	bge.n	800bc14 <_strtol_l.constprop.0+0xd8>
 800bc08:	2322      	movs	r3, #34	; 0x22
 800bc0a:	6003      	str	r3, [r0, #0]
 800bc0c:	4646      	mov	r6, r8
 800bc0e:	b942      	cbnz	r2, 800bc22 <_strtol_l.constprop.0+0xe6>
 800bc10:	4630      	mov	r0, r6
 800bc12:	e79e      	b.n	800bb52 <_strtol_l.constprop.0+0x16>
 800bc14:	b107      	cbz	r7, 800bc18 <_strtol_l.constprop.0+0xdc>
 800bc16:	4276      	negs	r6, r6
 800bc18:	2a00      	cmp	r2, #0
 800bc1a:	d0f9      	beq.n	800bc10 <_strtol_l.constprop.0+0xd4>
 800bc1c:	f1bc 0f00 	cmp.w	ip, #0
 800bc20:	d000      	beq.n	800bc24 <_strtol_l.constprop.0+0xe8>
 800bc22:	1e69      	subs	r1, r5, #1
 800bc24:	6011      	str	r1, [r2, #0]
 800bc26:	e7f3      	b.n	800bc10 <_strtol_l.constprop.0+0xd4>
 800bc28:	2430      	movs	r4, #48	; 0x30
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1b1      	bne.n	800bb92 <_strtol_l.constprop.0+0x56>
 800bc2e:	2308      	movs	r3, #8
 800bc30:	e7af      	b.n	800bb92 <_strtol_l.constprop.0+0x56>
 800bc32:	2c30      	cmp	r4, #48	; 0x30
 800bc34:	d0a5      	beq.n	800bb82 <_strtol_l.constprop.0+0x46>
 800bc36:	230a      	movs	r3, #10
 800bc38:	e7ab      	b.n	800bb92 <_strtol_l.constprop.0+0x56>
 800bc3a:	bf00      	nop
 800bc3c:	0800f423 	.word	0x0800f423

0800bc40 <strtol>:
 800bc40:	4613      	mov	r3, r2
 800bc42:	460a      	mov	r2, r1
 800bc44:	4601      	mov	r1, r0
 800bc46:	4802      	ldr	r0, [pc, #8]	; (800bc50 <strtol+0x10>)
 800bc48:	6800      	ldr	r0, [r0, #0]
 800bc4a:	f7ff bf77 	b.w	800bb3c <_strtol_l.constprop.0>
 800bc4e:	bf00      	nop
 800bc50:	2000016c 	.word	0x2000016c

0800bc54 <sbrk>:
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <sbrk+0xc>)
 800bc56:	4601      	mov	r1, r0
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	f7ff bf05 	b.w	800ba68 <_sbrk_r>
 800bc5e:	bf00      	nop
 800bc60:	2000016c 	.word	0x2000016c

0800bc64 <_vasiprintf_r>:
 800bc64:	b530      	push	{r4, r5, lr}
 800bc66:	460d      	mov	r5, r1
 800bc68:	4909      	ldr	r1, [pc, #36]	; (800bc90 <_vasiprintf_r+0x2c>)
 800bc6a:	b09b      	sub	sp, #108	; 0x6c
 800bc6c:	2400      	movs	r4, #0
 800bc6e:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800bc72:	4669      	mov	r1, sp
 800bc74:	9400      	str	r4, [sp, #0]
 800bc76:	9402      	str	r4, [sp, #8]
 800bc78:	9405      	str	r4, [sp, #20]
 800bc7a:	f7ff f98b 	bl	800af94 <_svfiprintf_r>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	bfa1      	itttt	ge
 800bc82:	9b00      	ldrge	r3, [sp, #0]
 800bc84:	701c      	strbge	r4, [r3, #0]
 800bc86:	9b04      	ldrge	r3, [sp, #16]
 800bc88:	602b      	strge	r3, [r5, #0]
 800bc8a:	b01b      	add	sp, #108	; 0x6c
 800bc8c:	bd30      	pop	{r4, r5, pc}
 800bc8e:	bf00      	nop
 800bc90:	ffff0288 	.word	0xffff0288

0800bc94 <vasiprintf>:
 800bc94:	4613      	mov	r3, r2
 800bc96:	460a      	mov	r2, r1
 800bc98:	4601      	mov	r1, r0
 800bc9a:	4802      	ldr	r0, [pc, #8]	; (800bca4 <vasiprintf+0x10>)
 800bc9c:	6800      	ldr	r0, [r0, #0]
 800bc9e:	f7ff bfe1 	b.w	800bc64 <_vasiprintf_r>
 800bca2:	bf00      	nop
 800bca4:	2000016c 	.word	0x2000016c

0800bca8 <__assert_func>:
 800bca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcaa:	4614      	mov	r4, r2
 800bcac:	461a      	mov	r2, r3
 800bcae:	4b09      	ldr	r3, [pc, #36]	; (800bcd4 <__assert_func+0x2c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4605      	mov	r5, r0
 800bcb4:	68d8      	ldr	r0, [r3, #12]
 800bcb6:	b14c      	cbz	r4, 800bccc <__assert_func+0x24>
 800bcb8:	4b07      	ldr	r3, [pc, #28]	; (800bcd8 <__assert_func+0x30>)
 800bcba:	9100      	str	r1, [sp, #0]
 800bcbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcc0:	4906      	ldr	r1, [pc, #24]	; (800bcdc <__assert_func+0x34>)
 800bcc2:	462b      	mov	r3, r5
 800bcc4:	f000 ff66 	bl	800cb94 <fiprintf>
 800bcc8:	f7fe ff3c 	bl	800ab44 <abort>
 800bccc:	4b04      	ldr	r3, [pc, #16]	; (800bce0 <__assert_func+0x38>)
 800bcce:	461c      	mov	r4, r3
 800bcd0:	e7f3      	b.n	800bcba <__assert_func+0x12>
 800bcd2:	bf00      	nop
 800bcd4:	2000016c 	.word	0x2000016c
 800bcd8:	0800f56d 	.word	0x0800f56d
 800bcdc:	0800f57a 	.word	0x0800f57a
 800bce0:	0800f5a8 	.word	0x0800f5a8

0800bce4 <quorem>:
 800bce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce8:	6903      	ldr	r3, [r0, #16]
 800bcea:	690c      	ldr	r4, [r1, #16]
 800bcec:	42a3      	cmp	r3, r4
 800bcee:	4607      	mov	r7, r0
 800bcf0:	f2c0 8081 	blt.w	800bdf6 <quorem+0x112>
 800bcf4:	3c01      	subs	r4, #1
 800bcf6:	f101 0814 	add.w	r8, r1, #20
 800bcfa:	f100 0514 	add.w	r5, r0, #20
 800bcfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bd08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bd14:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bd18:	fbb2 f6f3 	udiv	r6, r2, r3
 800bd1c:	d331      	bcc.n	800bd82 <quorem+0x9e>
 800bd1e:	f04f 0e00 	mov.w	lr, #0
 800bd22:	4640      	mov	r0, r8
 800bd24:	46ac      	mov	ip, r5
 800bd26:	46f2      	mov	sl, lr
 800bd28:	f850 2b04 	ldr.w	r2, [r0], #4
 800bd2c:	b293      	uxth	r3, r2
 800bd2e:	fb06 e303 	mla	r3, r6, r3, lr
 800bd32:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	ebaa 0303 	sub.w	r3, sl, r3
 800bd3c:	f8dc a000 	ldr.w	sl, [ip]
 800bd40:	0c12      	lsrs	r2, r2, #16
 800bd42:	fa13 f38a 	uxtah	r3, r3, sl
 800bd46:	fb06 e202 	mla	r2, r6, r2, lr
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	9b00      	ldr	r3, [sp, #0]
 800bd4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd52:	b292      	uxth	r2, r2
 800bd54:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd5c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd60:	4581      	cmp	r9, r0
 800bd62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd66:	f84c 3b04 	str.w	r3, [ip], #4
 800bd6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd6e:	d2db      	bcs.n	800bd28 <quorem+0x44>
 800bd70:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd74:	b92b      	cbnz	r3, 800bd82 <quorem+0x9e>
 800bd76:	9b01      	ldr	r3, [sp, #4]
 800bd78:	3b04      	subs	r3, #4
 800bd7a:	429d      	cmp	r5, r3
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	d32e      	bcc.n	800bdde <quorem+0xfa>
 800bd80:	613c      	str	r4, [r7, #16]
 800bd82:	4638      	mov	r0, r7
 800bd84:	f001 f9ce 	bl	800d124 <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	db24      	blt.n	800bdd6 <quorem+0xf2>
 800bd8c:	3601      	adds	r6, #1
 800bd8e:	4628      	mov	r0, r5
 800bd90:	f04f 0c00 	mov.w	ip, #0
 800bd94:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd98:	f8d0 e000 	ldr.w	lr, [r0]
 800bd9c:	b293      	uxth	r3, r2
 800bd9e:	ebac 0303 	sub.w	r3, ip, r3
 800bda2:	0c12      	lsrs	r2, r2, #16
 800bda4:	fa13 f38e 	uxtah	r3, r3, lr
 800bda8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bdac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bdb6:	45c1      	cmp	r9, r8
 800bdb8:	f840 3b04 	str.w	r3, [r0], #4
 800bdbc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bdc0:	d2e8      	bcs.n	800bd94 <quorem+0xb0>
 800bdc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bdc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bdca:	b922      	cbnz	r2, 800bdd6 <quorem+0xf2>
 800bdcc:	3b04      	subs	r3, #4
 800bdce:	429d      	cmp	r5, r3
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	d30a      	bcc.n	800bdea <quorem+0x106>
 800bdd4:	613c      	str	r4, [r7, #16]
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	b003      	add	sp, #12
 800bdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdde:	6812      	ldr	r2, [r2, #0]
 800bde0:	3b04      	subs	r3, #4
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	d1cc      	bne.n	800bd80 <quorem+0x9c>
 800bde6:	3c01      	subs	r4, #1
 800bde8:	e7c7      	b.n	800bd7a <quorem+0x96>
 800bdea:	6812      	ldr	r2, [r2, #0]
 800bdec:	3b04      	subs	r3, #4
 800bdee:	2a00      	cmp	r2, #0
 800bdf0:	d1f0      	bne.n	800bdd4 <quorem+0xf0>
 800bdf2:	3c01      	subs	r4, #1
 800bdf4:	e7eb      	b.n	800bdce <quorem+0xea>
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	e7ee      	b.n	800bdd8 <quorem+0xf4>
 800bdfa:	0000      	movs	r0, r0
 800bdfc:	0000      	movs	r0, r0
	...

0800be00 <_dtoa_r>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	ed2d 8b04 	vpush	{d8-d9}
 800be08:	ec57 6b10 	vmov	r6, r7, d0
 800be0c:	b093      	sub	sp, #76	; 0x4c
 800be0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be10:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800be14:	9106      	str	r1, [sp, #24]
 800be16:	ee10 aa10 	vmov	sl, s0
 800be1a:	4604      	mov	r4, r0
 800be1c:	9209      	str	r2, [sp, #36]	; 0x24
 800be1e:	930c      	str	r3, [sp, #48]	; 0x30
 800be20:	46bb      	mov	fp, r7
 800be22:	b975      	cbnz	r5, 800be42 <_dtoa_r+0x42>
 800be24:	2010      	movs	r0, #16
 800be26:	f7fe fee5 	bl	800abf4 <malloc>
 800be2a:	4602      	mov	r2, r0
 800be2c:	6260      	str	r0, [r4, #36]	; 0x24
 800be2e:	b920      	cbnz	r0, 800be3a <_dtoa_r+0x3a>
 800be30:	4ba7      	ldr	r3, [pc, #668]	; (800c0d0 <_dtoa_r+0x2d0>)
 800be32:	21ea      	movs	r1, #234	; 0xea
 800be34:	48a7      	ldr	r0, [pc, #668]	; (800c0d4 <_dtoa_r+0x2d4>)
 800be36:	f7ff ff37 	bl	800bca8 <__assert_func>
 800be3a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800be3e:	6005      	str	r5, [r0, #0]
 800be40:	60c5      	str	r5, [r0, #12]
 800be42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be44:	6819      	ldr	r1, [r3, #0]
 800be46:	b151      	cbz	r1, 800be5e <_dtoa_r+0x5e>
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	604a      	str	r2, [r1, #4]
 800be4c:	2301      	movs	r3, #1
 800be4e:	4093      	lsls	r3, r2
 800be50:	608b      	str	r3, [r1, #8]
 800be52:	4620      	mov	r0, r4
 800be54:	f000 ff24 	bl	800cca0 <_Bfree>
 800be58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be5a:	2200      	movs	r2, #0
 800be5c:	601a      	str	r2, [r3, #0]
 800be5e:	1e3b      	subs	r3, r7, #0
 800be60:	bfaa      	itet	ge
 800be62:	2300      	movge	r3, #0
 800be64:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be68:	f8c8 3000 	strge.w	r3, [r8]
 800be6c:	4b9a      	ldr	r3, [pc, #616]	; (800c0d8 <_dtoa_r+0x2d8>)
 800be6e:	bfbc      	itt	lt
 800be70:	2201      	movlt	r2, #1
 800be72:	f8c8 2000 	strlt.w	r2, [r8]
 800be76:	ea33 030b 	bics.w	r3, r3, fp
 800be7a:	d11b      	bne.n	800beb4 <_dtoa_r+0xb4>
 800be7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be7e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be88:	4333      	orrs	r3, r6
 800be8a:	f000 8592 	beq.w	800c9b2 <_dtoa_r+0xbb2>
 800be8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be90:	b963      	cbnz	r3, 800beac <_dtoa_r+0xac>
 800be92:	4b92      	ldr	r3, [pc, #584]	; (800c0dc <_dtoa_r+0x2dc>)
 800be94:	e022      	b.n	800bedc <_dtoa_r+0xdc>
 800be96:	4b92      	ldr	r3, [pc, #584]	; (800c0e0 <_dtoa_r+0x2e0>)
 800be98:	9301      	str	r3, [sp, #4]
 800be9a:	3308      	adds	r3, #8
 800be9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be9e:	6013      	str	r3, [r2, #0]
 800bea0:	9801      	ldr	r0, [sp, #4]
 800bea2:	b013      	add	sp, #76	; 0x4c
 800bea4:	ecbd 8b04 	vpop	{d8-d9}
 800bea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beac:	4b8b      	ldr	r3, [pc, #556]	; (800c0dc <_dtoa_r+0x2dc>)
 800beae:	9301      	str	r3, [sp, #4]
 800beb0:	3303      	adds	r3, #3
 800beb2:	e7f3      	b.n	800be9c <_dtoa_r+0x9c>
 800beb4:	2200      	movs	r2, #0
 800beb6:	2300      	movs	r3, #0
 800beb8:	4650      	mov	r0, sl
 800beba:	4659      	mov	r1, fp
 800bebc:	f7f4 fe24 	bl	8000b08 <__aeabi_dcmpeq>
 800bec0:	ec4b ab19 	vmov	d9, sl, fp
 800bec4:	4680      	mov	r8, r0
 800bec6:	b158      	cbz	r0, 800bee0 <_dtoa_r+0xe0>
 800bec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beca:	2301      	movs	r3, #1
 800becc:	6013      	str	r3, [r2, #0]
 800bece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	f000 856b 	beq.w	800c9ac <_dtoa_r+0xbac>
 800bed6:	4883      	ldr	r0, [pc, #524]	; (800c0e4 <_dtoa_r+0x2e4>)
 800bed8:	6018      	str	r0, [r3, #0]
 800beda:	1e43      	subs	r3, r0, #1
 800bedc:	9301      	str	r3, [sp, #4]
 800bede:	e7df      	b.n	800bea0 <_dtoa_r+0xa0>
 800bee0:	ec4b ab10 	vmov	d0, sl, fp
 800bee4:	aa10      	add	r2, sp, #64	; 0x40
 800bee6:	a911      	add	r1, sp, #68	; 0x44
 800bee8:	4620      	mov	r0, r4
 800beea:	f001 f9c1 	bl	800d270 <__d2b>
 800beee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bef2:	ee08 0a10 	vmov	s16, r0
 800bef6:	2d00      	cmp	r5, #0
 800bef8:	f000 8084 	beq.w	800c004 <_dtoa_r+0x204>
 800befc:	ee19 3a90 	vmov	r3, s19
 800bf00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bf04:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bf08:	4656      	mov	r6, sl
 800bf0a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bf0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bf12:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bf16:	4b74      	ldr	r3, [pc, #464]	; (800c0e8 <_dtoa_r+0x2e8>)
 800bf18:	2200      	movs	r2, #0
 800bf1a:	4630      	mov	r0, r6
 800bf1c:	4639      	mov	r1, r7
 800bf1e:	f7f4 f9d3 	bl	80002c8 <__aeabi_dsub>
 800bf22:	a365      	add	r3, pc, #404	; (adr r3, 800c0b8 <_dtoa_r+0x2b8>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f7f4 fb86 	bl	8000638 <__aeabi_dmul>
 800bf2c:	a364      	add	r3, pc, #400	; (adr r3, 800c0c0 <_dtoa_r+0x2c0>)
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f7f4 f9cb 	bl	80002cc <__adddf3>
 800bf36:	4606      	mov	r6, r0
 800bf38:	4628      	mov	r0, r5
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	f7f4 fb12 	bl	8000564 <__aeabi_i2d>
 800bf40:	a361      	add	r3, pc, #388	; (adr r3, 800c0c8 <_dtoa_r+0x2c8>)
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	f7f4 fb77 	bl	8000638 <__aeabi_dmul>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4630      	mov	r0, r6
 800bf50:	4639      	mov	r1, r7
 800bf52:	f7f4 f9bb 	bl	80002cc <__adddf3>
 800bf56:	4606      	mov	r6, r0
 800bf58:	460f      	mov	r7, r1
 800bf5a:	f7f4 fe1d 	bl	8000b98 <__aeabi_d2iz>
 800bf5e:	2200      	movs	r2, #0
 800bf60:	9000      	str	r0, [sp, #0]
 800bf62:	2300      	movs	r3, #0
 800bf64:	4630      	mov	r0, r6
 800bf66:	4639      	mov	r1, r7
 800bf68:	f7f4 fdd8 	bl	8000b1c <__aeabi_dcmplt>
 800bf6c:	b150      	cbz	r0, 800bf84 <_dtoa_r+0x184>
 800bf6e:	9800      	ldr	r0, [sp, #0]
 800bf70:	f7f4 faf8 	bl	8000564 <__aeabi_i2d>
 800bf74:	4632      	mov	r2, r6
 800bf76:	463b      	mov	r3, r7
 800bf78:	f7f4 fdc6 	bl	8000b08 <__aeabi_dcmpeq>
 800bf7c:	b910      	cbnz	r0, 800bf84 <_dtoa_r+0x184>
 800bf7e:	9b00      	ldr	r3, [sp, #0]
 800bf80:	3b01      	subs	r3, #1
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	9b00      	ldr	r3, [sp, #0]
 800bf86:	2b16      	cmp	r3, #22
 800bf88:	d85a      	bhi.n	800c040 <_dtoa_r+0x240>
 800bf8a:	9a00      	ldr	r2, [sp, #0]
 800bf8c:	4b57      	ldr	r3, [pc, #348]	; (800c0ec <_dtoa_r+0x2ec>)
 800bf8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	ec51 0b19 	vmov	r0, r1, d9
 800bf9a:	f7f4 fdbf 	bl	8000b1c <__aeabi_dcmplt>
 800bf9e:	2800      	cmp	r0, #0
 800bfa0:	d050      	beq.n	800c044 <_dtoa_r+0x244>
 800bfa2:	9b00      	ldr	r3, [sp, #0]
 800bfa4:	3b01      	subs	r3, #1
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfae:	1b5d      	subs	r5, r3, r5
 800bfb0:	1e6b      	subs	r3, r5, #1
 800bfb2:	9305      	str	r3, [sp, #20]
 800bfb4:	bf45      	ittet	mi
 800bfb6:	f1c5 0301 	rsbmi	r3, r5, #1
 800bfba:	9304      	strmi	r3, [sp, #16]
 800bfbc:	2300      	movpl	r3, #0
 800bfbe:	2300      	movmi	r3, #0
 800bfc0:	bf4c      	ite	mi
 800bfc2:	9305      	strmi	r3, [sp, #20]
 800bfc4:	9304      	strpl	r3, [sp, #16]
 800bfc6:	9b00      	ldr	r3, [sp, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	db3d      	blt.n	800c048 <_dtoa_r+0x248>
 800bfcc:	9b05      	ldr	r3, [sp, #20]
 800bfce:	9a00      	ldr	r2, [sp, #0]
 800bfd0:	920a      	str	r2, [sp, #40]	; 0x28
 800bfd2:	4413      	add	r3, r2
 800bfd4:	9305      	str	r3, [sp, #20]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	9307      	str	r3, [sp, #28]
 800bfda:	9b06      	ldr	r3, [sp, #24]
 800bfdc:	2b09      	cmp	r3, #9
 800bfde:	f200 8089 	bhi.w	800c0f4 <_dtoa_r+0x2f4>
 800bfe2:	2b05      	cmp	r3, #5
 800bfe4:	bfc4      	itt	gt
 800bfe6:	3b04      	subgt	r3, #4
 800bfe8:	9306      	strgt	r3, [sp, #24]
 800bfea:	9b06      	ldr	r3, [sp, #24]
 800bfec:	f1a3 0302 	sub.w	r3, r3, #2
 800bff0:	bfcc      	ite	gt
 800bff2:	2500      	movgt	r5, #0
 800bff4:	2501      	movle	r5, #1
 800bff6:	2b03      	cmp	r3, #3
 800bff8:	f200 8087 	bhi.w	800c10a <_dtoa_r+0x30a>
 800bffc:	e8df f003 	tbb	[pc, r3]
 800c000:	59383a2d 	.word	0x59383a2d
 800c004:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c008:	441d      	add	r5, r3
 800c00a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c00e:	2b20      	cmp	r3, #32
 800c010:	bfc1      	itttt	gt
 800c012:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c016:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c01a:	fa0b f303 	lslgt.w	r3, fp, r3
 800c01e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c022:	bfda      	itte	le
 800c024:	f1c3 0320 	rsble	r3, r3, #32
 800c028:	fa06 f003 	lslle.w	r0, r6, r3
 800c02c:	4318      	orrgt	r0, r3
 800c02e:	f7f4 fa89 	bl	8000544 <__aeabi_ui2d>
 800c032:	2301      	movs	r3, #1
 800c034:	4606      	mov	r6, r0
 800c036:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c03a:	3d01      	subs	r5, #1
 800c03c:	930e      	str	r3, [sp, #56]	; 0x38
 800c03e:	e76a      	b.n	800bf16 <_dtoa_r+0x116>
 800c040:	2301      	movs	r3, #1
 800c042:	e7b2      	b.n	800bfaa <_dtoa_r+0x1aa>
 800c044:	900b      	str	r0, [sp, #44]	; 0x2c
 800c046:	e7b1      	b.n	800bfac <_dtoa_r+0x1ac>
 800c048:	9b04      	ldr	r3, [sp, #16]
 800c04a:	9a00      	ldr	r2, [sp, #0]
 800c04c:	1a9b      	subs	r3, r3, r2
 800c04e:	9304      	str	r3, [sp, #16]
 800c050:	4253      	negs	r3, r2
 800c052:	9307      	str	r3, [sp, #28]
 800c054:	2300      	movs	r3, #0
 800c056:	930a      	str	r3, [sp, #40]	; 0x28
 800c058:	e7bf      	b.n	800bfda <_dtoa_r+0x1da>
 800c05a:	2300      	movs	r3, #0
 800c05c:	9308      	str	r3, [sp, #32]
 800c05e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c060:	2b00      	cmp	r3, #0
 800c062:	dc55      	bgt.n	800c110 <_dtoa_r+0x310>
 800c064:	2301      	movs	r3, #1
 800c066:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c06a:	461a      	mov	r2, r3
 800c06c:	9209      	str	r2, [sp, #36]	; 0x24
 800c06e:	e00c      	b.n	800c08a <_dtoa_r+0x28a>
 800c070:	2301      	movs	r3, #1
 800c072:	e7f3      	b.n	800c05c <_dtoa_r+0x25c>
 800c074:	2300      	movs	r3, #0
 800c076:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c078:	9308      	str	r3, [sp, #32]
 800c07a:	9b00      	ldr	r3, [sp, #0]
 800c07c:	4413      	add	r3, r2
 800c07e:	9302      	str	r3, [sp, #8]
 800c080:	3301      	adds	r3, #1
 800c082:	2b01      	cmp	r3, #1
 800c084:	9303      	str	r3, [sp, #12]
 800c086:	bfb8      	it	lt
 800c088:	2301      	movlt	r3, #1
 800c08a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c08c:	2200      	movs	r2, #0
 800c08e:	6042      	str	r2, [r0, #4]
 800c090:	2204      	movs	r2, #4
 800c092:	f102 0614 	add.w	r6, r2, #20
 800c096:	429e      	cmp	r6, r3
 800c098:	6841      	ldr	r1, [r0, #4]
 800c09a:	d93d      	bls.n	800c118 <_dtoa_r+0x318>
 800c09c:	4620      	mov	r0, r4
 800c09e:	f000 fdbf 	bl	800cc20 <_Balloc>
 800c0a2:	9001      	str	r0, [sp, #4]
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d13b      	bne.n	800c120 <_dtoa_r+0x320>
 800c0a8:	4b11      	ldr	r3, [pc, #68]	; (800c0f0 <_dtoa_r+0x2f0>)
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c0b0:	e6c0      	b.n	800be34 <_dtoa_r+0x34>
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	e7df      	b.n	800c076 <_dtoa_r+0x276>
 800c0b6:	bf00      	nop
 800c0b8:	636f4361 	.word	0x636f4361
 800c0bc:	3fd287a7 	.word	0x3fd287a7
 800c0c0:	8b60c8b3 	.word	0x8b60c8b3
 800c0c4:	3fc68a28 	.word	0x3fc68a28
 800c0c8:	509f79fb 	.word	0x509f79fb
 800c0cc:	3fd34413 	.word	0x3fd34413
 800c0d0:	0800f5b6 	.word	0x0800f5b6
 800c0d4:	0800f5cd 	.word	0x0800f5cd
 800c0d8:	7ff00000 	.word	0x7ff00000
 800c0dc:	0800f5b2 	.word	0x0800f5b2
 800c0e0:	0800f5a9 	.word	0x0800f5a9
 800c0e4:	0800f54a 	.word	0x0800f54a
 800c0e8:	3ff80000 	.word	0x3ff80000
 800c0ec:	0800f720 	.word	0x0800f720
 800c0f0:	0800f628 	.word	0x0800f628
 800c0f4:	2501      	movs	r5, #1
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9306      	str	r3, [sp, #24]
 800c0fa:	9508      	str	r5, [sp, #32]
 800c0fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c100:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c104:	2200      	movs	r2, #0
 800c106:	2312      	movs	r3, #18
 800c108:	e7b0      	b.n	800c06c <_dtoa_r+0x26c>
 800c10a:	2301      	movs	r3, #1
 800c10c:	9308      	str	r3, [sp, #32]
 800c10e:	e7f5      	b.n	800c0fc <_dtoa_r+0x2fc>
 800c110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c112:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c116:	e7b8      	b.n	800c08a <_dtoa_r+0x28a>
 800c118:	3101      	adds	r1, #1
 800c11a:	6041      	str	r1, [r0, #4]
 800c11c:	0052      	lsls	r2, r2, #1
 800c11e:	e7b8      	b.n	800c092 <_dtoa_r+0x292>
 800c120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c122:	9a01      	ldr	r2, [sp, #4]
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	9b03      	ldr	r3, [sp, #12]
 800c128:	2b0e      	cmp	r3, #14
 800c12a:	f200 809d 	bhi.w	800c268 <_dtoa_r+0x468>
 800c12e:	2d00      	cmp	r5, #0
 800c130:	f000 809a 	beq.w	800c268 <_dtoa_r+0x468>
 800c134:	9b00      	ldr	r3, [sp, #0]
 800c136:	2b00      	cmp	r3, #0
 800c138:	dd32      	ble.n	800c1a0 <_dtoa_r+0x3a0>
 800c13a:	4ab7      	ldr	r2, [pc, #732]	; (800c418 <_dtoa_r+0x618>)
 800c13c:	f003 030f 	and.w	r3, r3, #15
 800c140:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c144:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c148:	9b00      	ldr	r3, [sp, #0]
 800c14a:	05d8      	lsls	r0, r3, #23
 800c14c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c150:	d516      	bpl.n	800c180 <_dtoa_r+0x380>
 800c152:	4bb2      	ldr	r3, [pc, #712]	; (800c41c <_dtoa_r+0x61c>)
 800c154:	ec51 0b19 	vmov	r0, r1, d9
 800c158:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c15c:	f7f4 fb96 	bl	800088c <__aeabi_ddiv>
 800c160:	f007 070f 	and.w	r7, r7, #15
 800c164:	4682      	mov	sl, r0
 800c166:	468b      	mov	fp, r1
 800c168:	2503      	movs	r5, #3
 800c16a:	4eac      	ldr	r6, [pc, #688]	; (800c41c <_dtoa_r+0x61c>)
 800c16c:	b957      	cbnz	r7, 800c184 <_dtoa_r+0x384>
 800c16e:	4642      	mov	r2, r8
 800c170:	464b      	mov	r3, r9
 800c172:	4650      	mov	r0, sl
 800c174:	4659      	mov	r1, fp
 800c176:	f7f4 fb89 	bl	800088c <__aeabi_ddiv>
 800c17a:	4682      	mov	sl, r0
 800c17c:	468b      	mov	fp, r1
 800c17e:	e028      	b.n	800c1d2 <_dtoa_r+0x3d2>
 800c180:	2502      	movs	r5, #2
 800c182:	e7f2      	b.n	800c16a <_dtoa_r+0x36a>
 800c184:	07f9      	lsls	r1, r7, #31
 800c186:	d508      	bpl.n	800c19a <_dtoa_r+0x39a>
 800c188:	4640      	mov	r0, r8
 800c18a:	4649      	mov	r1, r9
 800c18c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c190:	f7f4 fa52 	bl	8000638 <__aeabi_dmul>
 800c194:	3501      	adds	r5, #1
 800c196:	4680      	mov	r8, r0
 800c198:	4689      	mov	r9, r1
 800c19a:	107f      	asrs	r7, r7, #1
 800c19c:	3608      	adds	r6, #8
 800c19e:	e7e5      	b.n	800c16c <_dtoa_r+0x36c>
 800c1a0:	f000 809b 	beq.w	800c2da <_dtoa_r+0x4da>
 800c1a4:	9b00      	ldr	r3, [sp, #0]
 800c1a6:	4f9d      	ldr	r7, [pc, #628]	; (800c41c <_dtoa_r+0x61c>)
 800c1a8:	425e      	negs	r6, r3
 800c1aa:	4b9b      	ldr	r3, [pc, #620]	; (800c418 <_dtoa_r+0x618>)
 800c1ac:	f006 020f 	and.w	r2, r6, #15
 800c1b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b8:	ec51 0b19 	vmov	r0, r1, d9
 800c1bc:	f7f4 fa3c 	bl	8000638 <__aeabi_dmul>
 800c1c0:	1136      	asrs	r6, r6, #4
 800c1c2:	4682      	mov	sl, r0
 800c1c4:	468b      	mov	fp, r1
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2502      	movs	r5, #2
 800c1ca:	2e00      	cmp	r6, #0
 800c1cc:	d17a      	bne.n	800c2c4 <_dtoa_r+0x4c4>
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1d3      	bne.n	800c17a <_dtoa_r+0x37a>
 800c1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 8082 	beq.w	800c2de <_dtoa_r+0x4de>
 800c1da:	4b91      	ldr	r3, [pc, #580]	; (800c420 <_dtoa_r+0x620>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4650      	mov	r0, sl
 800c1e0:	4659      	mov	r1, fp
 800c1e2:	f7f4 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	d079      	beq.n	800c2de <_dtoa_r+0x4de>
 800c1ea:	9b03      	ldr	r3, [sp, #12]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d076      	beq.n	800c2de <_dtoa_r+0x4de>
 800c1f0:	9b02      	ldr	r3, [sp, #8]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	dd36      	ble.n	800c264 <_dtoa_r+0x464>
 800c1f6:	9b00      	ldr	r3, [sp, #0]
 800c1f8:	4650      	mov	r0, sl
 800c1fa:	4659      	mov	r1, fp
 800c1fc:	1e5f      	subs	r7, r3, #1
 800c1fe:	2200      	movs	r2, #0
 800c200:	4b88      	ldr	r3, [pc, #544]	; (800c424 <_dtoa_r+0x624>)
 800c202:	f7f4 fa19 	bl	8000638 <__aeabi_dmul>
 800c206:	9e02      	ldr	r6, [sp, #8]
 800c208:	4682      	mov	sl, r0
 800c20a:	468b      	mov	fp, r1
 800c20c:	3501      	adds	r5, #1
 800c20e:	4628      	mov	r0, r5
 800c210:	f7f4 f9a8 	bl	8000564 <__aeabi_i2d>
 800c214:	4652      	mov	r2, sl
 800c216:	465b      	mov	r3, fp
 800c218:	f7f4 fa0e 	bl	8000638 <__aeabi_dmul>
 800c21c:	4b82      	ldr	r3, [pc, #520]	; (800c428 <_dtoa_r+0x628>)
 800c21e:	2200      	movs	r2, #0
 800c220:	f7f4 f854 	bl	80002cc <__adddf3>
 800c224:	46d0      	mov	r8, sl
 800c226:	46d9      	mov	r9, fp
 800c228:	4682      	mov	sl, r0
 800c22a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c22e:	2e00      	cmp	r6, #0
 800c230:	d158      	bne.n	800c2e4 <_dtoa_r+0x4e4>
 800c232:	4b7e      	ldr	r3, [pc, #504]	; (800c42c <_dtoa_r+0x62c>)
 800c234:	2200      	movs	r2, #0
 800c236:	4640      	mov	r0, r8
 800c238:	4649      	mov	r1, r9
 800c23a:	f7f4 f845 	bl	80002c8 <__aeabi_dsub>
 800c23e:	4652      	mov	r2, sl
 800c240:	465b      	mov	r3, fp
 800c242:	4680      	mov	r8, r0
 800c244:	4689      	mov	r9, r1
 800c246:	f7f4 fc87 	bl	8000b58 <__aeabi_dcmpgt>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f040 8295 	bne.w	800c77a <_dtoa_r+0x97a>
 800c250:	4652      	mov	r2, sl
 800c252:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c256:	4640      	mov	r0, r8
 800c258:	4649      	mov	r1, r9
 800c25a:	f7f4 fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f040 8289 	bne.w	800c776 <_dtoa_r+0x976>
 800c264:	ec5b ab19 	vmov	sl, fp, d9
 800c268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	f2c0 8148 	blt.w	800c500 <_dtoa_r+0x700>
 800c270:	9a00      	ldr	r2, [sp, #0]
 800c272:	2a0e      	cmp	r2, #14
 800c274:	f300 8144 	bgt.w	800c500 <_dtoa_r+0x700>
 800c278:	4b67      	ldr	r3, [pc, #412]	; (800c418 <_dtoa_r+0x618>)
 800c27a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c27e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c284:	2b00      	cmp	r3, #0
 800c286:	f280 80d5 	bge.w	800c434 <_dtoa_r+0x634>
 800c28a:	9b03      	ldr	r3, [sp, #12]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f300 80d1 	bgt.w	800c434 <_dtoa_r+0x634>
 800c292:	f040 826f 	bne.w	800c774 <_dtoa_r+0x974>
 800c296:	4b65      	ldr	r3, [pc, #404]	; (800c42c <_dtoa_r+0x62c>)
 800c298:	2200      	movs	r2, #0
 800c29a:	4640      	mov	r0, r8
 800c29c:	4649      	mov	r1, r9
 800c29e:	f7f4 f9cb 	bl	8000638 <__aeabi_dmul>
 800c2a2:	4652      	mov	r2, sl
 800c2a4:	465b      	mov	r3, fp
 800c2a6:	f7f4 fc4d 	bl	8000b44 <__aeabi_dcmpge>
 800c2aa:	9e03      	ldr	r6, [sp, #12]
 800c2ac:	4637      	mov	r7, r6
 800c2ae:	2800      	cmp	r0, #0
 800c2b0:	f040 8245 	bne.w	800c73e <_dtoa_r+0x93e>
 800c2b4:	9d01      	ldr	r5, [sp, #4]
 800c2b6:	2331      	movs	r3, #49	; 0x31
 800c2b8:	f805 3b01 	strb.w	r3, [r5], #1
 800c2bc:	9b00      	ldr	r3, [sp, #0]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	e240      	b.n	800c746 <_dtoa_r+0x946>
 800c2c4:	07f2      	lsls	r2, r6, #31
 800c2c6:	d505      	bpl.n	800c2d4 <_dtoa_r+0x4d4>
 800c2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2cc:	f7f4 f9b4 	bl	8000638 <__aeabi_dmul>
 800c2d0:	3501      	adds	r5, #1
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	1076      	asrs	r6, r6, #1
 800c2d6:	3708      	adds	r7, #8
 800c2d8:	e777      	b.n	800c1ca <_dtoa_r+0x3ca>
 800c2da:	2502      	movs	r5, #2
 800c2dc:	e779      	b.n	800c1d2 <_dtoa_r+0x3d2>
 800c2de:	9f00      	ldr	r7, [sp, #0]
 800c2e0:	9e03      	ldr	r6, [sp, #12]
 800c2e2:	e794      	b.n	800c20e <_dtoa_r+0x40e>
 800c2e4:	9901      	ldr	r1, [sp, #4]
 800c2e6:	4b4c      	ldr	r3, [pc, #304]	; (800c418 <_dtoa_r+0x618>)
 800c2e8:	4431      	add	r1, r6
 800c2ea:	910d      	str	r1, [sp, #52]	; 0x34
 800c2ec:	9908      	ldr	r1, [sp, #32]
 800c2ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2f6:	2900      	cmp	r1, #0
 800c2f8:	d043      	beq.n	800c382 <_dtoa_r+0x582>
 800c2fa:	494d      	ldr	r1, [pc, #308]	; (800c430 <_dtoa_r+0x630>)
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	f7f4 fac5 	bl	800088c <__aeabi_ddiv>
 800c302:	4652      	mov	r2, sl
 800c304:	465b      	mov	r3, fp
 800c306:	f7f3 ffdf 	bl	80002c8 <__aeabi_dsub>
 800c30a:	9d01      	ldr	r5, [sp, #4]
 800c30c:	4682      	mov	sl, r0
 800c30e:	468b      	mov	fp, r1
 800c310:	4649      	mov	r1, r9
 800c312:	4640      	mov	r0, r8
 800c314:	f7f4 fc40 	bl	8000b98 <__aeabi_d2iz>
 800c318:	4606      	mov	r6, r0
 800c31a:	f7f4 f923 	bl	8000564 <__aeabi_i2d>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	4640      	mov	r0, r8
 800c324:	4649      	mov	r1, r9
 800c326:	f7f3 ffcf 	bl	80002c8 <__aeabi_dsub>
 800c32a:	3630      	adds	r6, #48	; 0x30
 800c32c:	f805 6b01 	strb.w	r6, [r5], #1
 800c330:	4652      	mov	r2, sl
 800c332:	465b      	mov	r3, fp
 800c334:	4680      	mov	r8, r0
 800c336:	4689      	mov	r9, r1
 800c338:	f7f4 fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d163      	bne.n	800c408 <_dtoa_r+0x608>
 800c340:	4642      	mov	r2, r8
 800c342:	464b      	mov	r3, r9
 800c344:	4936      	ldr	r1, [pc, #216]	; (800c420 <_dtoa_r+0x620>)
 800c346:	2000      	movs	r0, #0
 800c348:	f7f3 ffbe 	bl	80002c8 <__aeabi_dsub>
 800c34c:	4652      	mov	r2, sl
 800c34e:	465b      	mov	r3, fp
 800c350:	f7f4 fbe4 	bl	8000b1c <__aeabi_dcmplt>
 800c354:	2800      	cmp	r0, #0
 800c356:	f040 80b5 	bne.w	800c4c4 <_dtoa_r+0x6c4>
 800c35a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c35c:	429d      	cmp	r5, r3
 800c35e:	d081      	beq.n	800c264 <_dtoa_r+0x464>
 800c360:	4b30      	ldr	r3, [pc, #192]	; (800c424 <_dtoa_r+0x624>)
 800c362:	2200      	movs	r2, #0
 800c364:	4650      	mov	r0, sl
 800c366:	4659      	mov	r1, fp
 800c368:	f7f4 f966 	bl	8000638 <__aeabi_dmul>
 800c36c:	4b2d      	ldr	r3, [pc, #180]	; (800c424 <_dtoa_r+0x624>)
 800c36e:	4682      	mov	sl, r0
 800c370:	468b      	mov	fp, r1
 800c372:	4640      	mov	r0, r8
 800c374:	4649      	mov	r1, r9
 800c376:	2200      	movs	r2, #0
 800c378:	f7f4 f95e 	bl	8000638 <__aeabi_dmul>
 800c37c:	4680      	mov	r8, r0
 800c37e:	4689      	mov	r9, r1
 800c380:	e7c6      	b.n	800c310 <_dtoa_r+0x510>
 800c382:	4650      	mov	r0, sl
 800c384:	4659      	mov	r1, fp
 800c386:	f7f4 f957 	bl	8000638 <__aeabi_dmul>
 800c38a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c38c:	9d01      	ldr	r5, [sp, #4]
 800c38e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c390:	4682      	mov	sl, r0
 800c392:	468b      	mov	fp, r1
 800c394:	4649      	mov	r1, r9
 800c396:	4640      	mov	r0, r8
 800c398:	f7f4 fbfe 	bl	8000b98 <__aeabi_d2iz>
 800c39c:	4606      	mov	r6, r0
 800c39e:	f7f4 f8e1 	bl	8000564 <__aeabi_i2d>
 800c3a2:	3630      	adds	r6, #48	; 0x30
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	4649      	mov	r1, r9
 800c3ac:	f7f3 ff8c 	bl	80002c8 <__aeabi_dsub>
 800c3b0:	f805 6b01 	strb.w	r6, [r5], #1
 800c3b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3b6:	429d      	cmp	r5, r3
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	4689      	mov	r9, r1
 800c3bc:	f04f 0200 	mov.w	r2, #0
 800c3c0:	d124      	bne.n	800c40c <_dtoa_r+0x60c>
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <_dtoa_r+0x630>)
 800c3c4:	4650      	mov	r0, sl
 800c3c6:	4659      	mov	r1, fp
 800c3c8:	f7f3 ff80 	bl	80002cc <__adddf3>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	4640      	mov	r0, r8
 800c3d2:	4649      	mov	r1, r9
 800c3d4:	f7f4 fbc0 	bl	8000b58 <__aeabi_dcmpgt>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	d173      	bne.n	800c4c4 <_dtoa_r+0x6c4>
 800c3dc:	4652      	mov	r2, sl
 800c3de:	465b      	mov	r3, fp
 800c3e0:	4913      	ldr	r1, [pc, #76]	; (800c430 <_dtoa_r+0x630>)
 800c3e2:	2000      	movs	r0, #0
 800c3e4:	f7f3 ff70 	bl	80002c8 <__aeabi_dsub>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4640      	mov	r0, r8
 800c3ee:	4649      	mov	r1, r9
 800c3f0:	f7f4 fb94 	bl	8000b1c <__aeabi_dcmplt>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	f43f af35 	beq.w	800c264 <_dtoa_r+0x464>
 800c3fa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3fc:	1e6b      	subs	r3, r5, #1
 800c3fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800c400:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c404:	2b30      	cmp	r3, #48	; 0x30
 800c406:	d0f8      	beq.n	800c3fa <_dtoa_r+0x5fa>
 800c408:	9700      	str	r7, [sp, #0]
 800c40a:	e049      	b.n	800c4a0 <_dtoa_r+0x6a0>
 800c40c:	4b05      	ldr	r3, [pc, #20]	; (800c424 <_dtoa_r+0x624>)
 800c40e:	f7f4 f913 	bl	8000638 <__aeabi_dmul>
 800c412:	4680      	mov	r8, r0
 800c414:	4689      	mov	r9, r1
 800c416:	e7bd      	b.n	800c394 <_dtoa_r+0x594>
 800c418:	0800f720 	.word	0x0800f720
 800c41c:	0800f6f8 	.word	0x0800f6f8
 800c420:	3ff00000 	.word	0x3ff00000
 800c424:	40240000 	.word	0x40240000
 800c428:	401c0000 	.word	0x401c0000
 800c42c:	40140000 	.word	0x40140000
 800c430:	3fe00000 	.word	0x3fe00000
 800c434:	9d01      	ldr	r5, [sp, #4]
 800c436:	4656      	mov	r6, sl
 800c438:	465f      	mov	r7, fp
 800c43a:	4642      	mov	r2, r8
 800c43c:	464b      	mov	r3, r9
 800c43e:	4630      	mov	r0, r6
 800c440:	4639      	mov	r1, r7
 800c442:	f7f4 fa23 	bl	800088c <__aeabi_ddiv>
 800c446:	f7f4 fba7 	bl	8000b98 <__aeabi_d2iz>
 800c44a:	4682      	mov	sl, r0
 800c44c:	f7f4 f88a 	bl	8000564 <__aeabi_i2d>
 800c450:	4642      	mov	r2, r8
 800c452:	464b      	mov	r3, r9
 800c454:	f7f4 f8f0 	bl	8000638 <__aeabi_dmul>
 800c458:	4602      	mov	r2, r0
 800c45a:	460b      	mov	r3, r1
 800c45c:	4630      	mov	r0, r6
 800c45e:	4639      	mov	r1, r7
 800c460:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c464:	f7f3 ff30 	bl	80002c8 <__aeabi_dsub>
 800c468:	f805 6b01 	strb.w	r6, [r5], #1
 800c46c:	9e01      	ldr	r6, [sp, #4]
 800c46e:	9f03      	ldr	r7, [sp, #12]
 800c470:	1bae      	subs	r6, r5, r6
 800c472:	42b7      	cmp	r7, r6
 800c474:	4602      	mov	r2, r0
 800c476:	460b      	mov	r3, r1
 800c478:	d135      	bne.n	800c4e6 <_dtoa_r+0x6e6>
 800c47a:	f7f3 ff27 	bl	80002cc <__adddf3>
 800c47e:	4642      	mov	r2, r8
 800c480:	464b      	mov	r3, r9
 800c482:	4606      	mov	r6, r0
 800c484:	460f      	mov	r7, r1
 800c486:	f7f4 fb67 	bl	8000b58 <__aeabi_dcmpgt>
 800c48a:	b9d0      	cbnz	r0, 800c4c2 <_dtoa_r+0x6c2>
 800c48c:	4642      	mov	r2, r8
 800c48e:	464b      	mov	r3, r9
 800c490:	4630      	mov	r0, r6
 800c492:	4639      	mov	r1, r7
 800c494:	f7f4 fb38 	bl	8000b08 <__aeabi_dcmpeq>
 800c498:	b110      	cbz	r0, 800c4a0 <_dtoa_r+0x6a0>
 800c49a:	f01a 0f01 	tst.w	sl, #1
 800c49e:	d110      	bne.n	800c4c2 <_dtoa_r+0x6c2>
 800c4a0:	4620      	mov	r0, r4
 800c4a2:	ee18 1a10 	vmov	r1, s16
 800c4a6:	f000 fbfb 	bl	800cca0 <_Bfree>
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	9800      	ldr	r0, [sp, #0]
 800c4ae:	702b      	strb	r3, [r5, #0]
 800c4b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c4b2:	3001      	adds	r0, #1
 800c4b4:	6018      	str	r0, [r3, #0]
 800c4b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	f43f acf1 	beq.w	800bea0 <_dtoa_r+0xa0>
 800c4be:	601d      	str	r5, [r3, #0]
 800c4c0:	e4ee      	b.n	800bea0 <_dtoa_r+0xa0>
 800c4c2:	9f00      	ldr	r7, [sp, #0]
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	461d      	mov	r5, r3
 800c4c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c4cc:	2a39      	cmp	r2, #57	; 0x39
 800c4ce:	d106      	bne.n	800c4de <_dtoa_r+0x6de>
 800c4d0:	9a01      	ldr	r2, [sp, #4]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d1f7      	bne.n	800c4c6 <_dtoa_r+0x6c6>
 800c4d6:	9901      	ldr	r1, [sp, #4]
 800c4d8:	2230      	movs	r2, #48	; 0x30
 800c4da:	3701      	adds	r7, #1
 800c4dc:	700a      	strb	r2, [r1, #0]
 800c4de:	781a      	ldrb	r2, [r3, #0]
 800c4e0:	3201      	adds	r2, #1
 800c4e2:	701a      	strb	r2, [r3, #0]
 800c4e4:	e790      	b.n	800c408 <_dtoa_r+0x608>
 800c4e6:	4ba6      	ldr	r3, [pc, #664]	; (800c780 <_dtoa_r+0x980>)
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f7f4 f8a5 	bl	8000638 <__aeabi_dmul>
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	4606      	mov	r6, r0
 800c4f4:	460f      	mov	r7, r1
 800c4f6:	f7f4 fb07 	bl	8000b08 <__aeabi_dcmpeq>
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	d09d      	beq.n	800c43a <_dtoa_r+0x63a>
 800c4fe:	e7cf      	b.n	800c4a0 <_dtoa_r+0x6a0>
 800c500:	9a08      	ldr	r2, [sp, #32]
 800c502:	2a00      	cmp	r2, #0
 800c504:	f000 80d7 	beq.w	800c6b6 <_dtoa_r+0x8b6>
 800c508:	9a06      	ldr	r2, [sp, #24]
 800c50a:	2a01      	cmp	r2, #1
 800c50c:	f300 80ba 	bgt.w	800c684 <_dtoa_r+0x884>
 800c510:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c512:	2a00      	cmp	r2, #0
 800c514:	f000 80b2 	beq.w	800c67c <_dtoa_r+0x87c>
 800c518:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c51c:	9e07      	ldr	r6, [sp, #28]
 800c51e:	9d04      	ldr	r5, [sp, #16]
 800c520:	9a04      	ldr	r2, [sp, #16]
 800c522:	441a      	add	r2, r3
 800c524:	9204      	str	r2, [sp, #16]
 800c526:	9a05      	ldr	r2, [sp, #20]
 800c528:	2101      	movs	r1, #1
 800c52a:	441a      	add	r2, r3
 800c52c:	4620      	mov	r0, r4
 800c52e:	9205      	str	r2, [sp, #20]
 800c530:	f000 fc6e 	bl	800ce10 <__i2b>
 800c534:	4607      	mov	r7, r0
 800c536:	2d00      	cmp	r5, #0
 800c538:	dd0c      	ble.n	800c554 <_dtoa_r+0x754>
 800c53a:	9b05      	ldr	r3, [sp, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	dd09      	ble.n	800c554 <_dtoa_r+0x754>
 800c540:	42ab      	cmp	r3, r5
 800c542:	9a04      	ldr	r2, [sp, #16]
 800c544:	bfa8      	it	ge
 800c546:	462b      	movge	r3, r5
 800c548:	1ad2      	subs	r2, r2, r3
 800c54a:	9204      	str	r2, [sp, #16]
 800c54c:	9a05      	ldr	r2, [sp, #20]
 800c54e:	1aed      	subs	r5, r5, r3
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	9305      	str	r3, [sp, #20]
 800c554:	9b07      	ldr	r3, [sp, #28]
 800c556:	b31b      	cbz	r3, 800c5a0 <_dtoa_r+0x7a0>
 800c558:	9b08      	ldr	r3, [sp, #32]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 80af 	beq.w	800c6be <_dtoa_r+0x8be>
 800c560:	2e00      	cmp	r6, #0
 800c562:	dd13      	ble.n	800c58c <_dtoa_r+0x78c>
 800c564:	4639      	mov	r1, r7
 800c566:	4632      	mov	r2, r6
 800c568:	4620      	mov	r0, r4
 800c56a:	f000 fd11 	bl	800cf90 <__pow5mult>
 800c56e:	ee18 2a10 	vmov	r2, s16
 800c572:	4601      	mov	r1, r0
 800c574:	4607      	mov	r7, r0
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fc60 	bl	800ce3c <__multiply>
 800c57c:	ee18 1a10 	vmov	r1, s16
 800c580:	4680      	mov	r8, r0
 800c582:	4620      	mov	r0, r4
 800c584:	f000 fb8c 	bl	800cca0 <_Bfree>
 800c588:	ee08 8a10 	vmov	s16, r8
 800c58c:	9b07      	ldr	r3, [sp, #28]
 800c58e:	1b9a      	subs	r2, r3, r6
 800c590:	d006      	beq.n	800c5a0 <_dtoa_r+0x7a0>
 800c592:	ee18 1a10 	vmov	r1, s16
 800c596:	4620      	mov	r0, r4
 800c598:	f000 fcfa 	bl	800cf90 <__pow5mult>
 800c59c:	ee08 0a10 	vmov	s16, r0
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 fc34 	bl	800ce10 <__i2b>
 800c5a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	f340 8088 	ble.w	800c6c2 <_dtoa_r+0x8c2>
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	4601      	mov	r1, r0
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	f000 fcea 	bl	800cf90 <__pow5mult>
 800c5bc:	9b06      	ldr	r3, [sp, #24]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	f340 8081 	ble.w	800c6c8 <_dtoa_r+0x8c8>
 800c5c6:	f04f 0800 	mov.w	r8, #0
 800c5ca:	6933      	ldr	r3, [r6, #16]
 800c5cc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c5d0:	6918      	ldr	r0, [r3, #16]
 800c5d2:	f000 fbcd 	bl	800cd70 <__hi0bits>
 800c5d6:	f1c0 0020 	rsb	r0, r0, #32
 800c5da:	9b05      	ldr	r3, [sp, #20]
 800c5dc:	4418      	add	r0, r3
 800c5de:	f010 001f 	ands.w	r0, r0, #31
 800c5e2:	f000 8092 	beq.w	800c70a <_dtoa_r+0x90a>
 800c5e6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	f340 808a 	ble.w	800c704 <_dtoa_r+0x904>
 800c5f0:	f1c0 001c 	rsb	r0, r0, #28
 800c5f4:	9b04      	ldr	r3, [sp, #16]
 800c5f6:	4403      	add	r3, r0
 800c5f8:	9304      	str	r3, [sp, #16]
 800c5fa:	9b05      	ldr	r3, [sp, #20]
 800c5fc:	4403      	add	r3, r0
 800c5fe:	4405      	add	r5, r0
 800c600:	9305      	str	r3, [sp, #20]
 800c602:	9b04      	ldr	r3, [sp, #16]
 800c604:	2b00      	cmp	r3, #0
 800c606:	dd07      	ble.n	800c618 <_dtoa_r+0x818>
 800c608:	ee18 1a10 	vmov	r1, s16
 800c60c:	461a      	mov	r2, r3
 800c60e:	4620      	mov	r0, r4
 800c610:	f000 fd18 	bl	800d044 <__lshift>
 800c614:	ee08 0a10 	vmov	s16, r0
 800c618:	9b05      	ldr	r3, [sp, #20]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	dd05      	ble.n	800c62a <_dtoa_r+0x82a>
 800c61e:	4631      	mov	r1, r6
 800c620:	461a      	mov	r2, r3
 800c622:	4620      	mov	r0, r4
 800c624:	f000 fd0e 	bl	800d044 <__lshift>
 800c628:	4606      	mov	r6, r0
 800c62a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d06e      	beq.n	800c70e <_dtoa_r+0x90e>
 800c630:	ee18 0a10 	vmov	r0, s16
 800c634:	4631      	mov	r1, r6
 800c636:	f000 fd75 	bl	800d124 <__mcmp>
 800c63a:	2800      	cmp	r0, #0
 800c63c:	da67      	bge.n	800c70e <_dtoa_r+0x90e>
 800c63e:	9b00      	ldr	r3, [sp, #0]
 800c640:	3b01      	subs	r3, #1
 800c642:	ee18 1a10 	vmov	r1, s16
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	220a      	movs	r2, #10
 800c64a:	2300      	movs	r3, #0
 800c64c:	4620      	mov	r0, r4
 800c64e:	f000 fb49 	bl	800cce4 <__multadd>
 800c652:	9b08      	ldr	r3, [sp, #32]
 800c654:	ee08 0a10 	vmov	s16, r0
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f000 81b1 	beq.w	800c9c0 <_dtoa_r+0xbc0>
 800c65e:	2300      	movs	r3, #0
 800c660:	4639      	mov	r1, r7
 800c662:	220a      	movs	r2, #10
 800c664:	4620      	mov	r0, r4
 800c666:	f000 fb3d 	bl	800cce4 <__multadd>
 800c66a:	9b02      	ldr	r3, [sp, #8]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	4607      	mov	r7, r0
 800c670:	f300 808e 	bgt.w	800c790 <_dtoa_r+0x990>
 800c674:	9b06      	ldr	r3, [sp, #24]
 800c676:	2b02      	cmp	r3, #2
 800c678:	dc51      	bgt.n	800c71e <_dtoa_r+0x91e>
 800c67a:	e089      	b.n	800c790 <_dtoa_r+0x990>
 800c67c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c67e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c682:	e74b      	b.n	800c51c <_dtoa_r+0x71c>
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	1e5e      	subs	r6, r3, #1
 800c688:	9b07      	ldr	r3, [sp, #28]
 800c68a:	42b3      	cmp	r3, r6
 800c68c:	bfbf      	itttt	lt
 800c68e:	9b07      	ldrlt	r3, [sp, #28]
 800c690:	9607      	strlt	r6, [sp, #28]
 800c692:	1af2      	sublt	r2, r6, r3
 800c694:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c696:	bfb6      	itet	lt
 800c698:	189b      	addlt	r3, r3, r2
 800c69a:	1b9e      	subge	r6, r3, r6
 800c69c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	bfb8      	it	lt
 800c6a2:	2600      	movlt	r6, #0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	bfb7      	itett	lt
 800c6a8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c6ac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c6b0:	1a9d      	sublt	r5, r3, r2
 800c6b2:	2300      	movlt	r3, #0
 800c6b4:	e734      	b.n	800c520 <_dtoa_r+0x720>
 800c6b6:	9e07      	ldr	r6, [sp, #28]
 800c6b8:	9d04      	ldr	r5, [sp, #16]
 800c6ba:	9f08      	ldr	r7, [sp, #32]
 800c6bc:	e73b      	b.n	800c536 <_dtoa_r+0x736>
 800c6be:	9a07      	ldr	r2, [sp, #28]
 800c6c0:	e767      	b.n	800c592 <_dtoa_r+0x792>
 800c6c2:	9b06      	ldr	r3, [sp, #24]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	dc18      	bgt.n	800c6fa <_dtoa_r+0x8fa>
 800c6c8:	f1ba 0f00 	cmp.w	sl, #0
 800c6cc:	d115      	bne.n	800c6fa <_dtoa_r+0x8fa>
 800c6ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6d2:	b993      	cbnz	r3, 800c6fa <_dtoa_r+0x8fa>
 800c6d4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c6d8:	0d1b      	lsrs	r3, r3, #20
 800c6da:	051b      	lsls	r3, r3, #20
 800c6dc:	b183      	cbz	r3, 800c700 <_dtoa_r+0x900>
 800c6de:	9b04      	ldr	r3, [sp, #16]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	9304      	str	r3, [sp, #16]
 800c6e4:	9b05      	ldr	r3, [sp, #20]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	9305      	str	r3, [sp, #20]
 800c6ea:	f04f 0801 	mov.w	r8, #1
 800c6ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	f47f af6a 	bne.w	800c5ca <_dtoa_r+0x7ca>
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	e76f      	b.n	800c5da <_dtoa_r+0x7da>
 800c6fa:	f04f 0800 	mov.w	r8, #0
 800c6fe:	e7f6      	b.n	800c6ee <_dtoa_r+0x8ee>
 800c700:	4698      	mov	r8, r3
 800c702:	e7f4      	b.n	800c6ee <_dtoa_r+0x8ee>
 800c704:	f43f af7d 	beq.w	800c602 <_dtoa_r+0x802>
 800c708:	4618      	mov	r0, r3
 800c70a:	301c      	adds	r0, #28
 800c70c:	e772      	b.n	800c5f4 <_dtoa_r+0x7f4>
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	dc37      	bgt.n	800c784 <_dtoa_r+0x984>
 800c714:	9b06      	ldr	r3, [sp, #24]
 800c716:	2b02      	cmp	r3, #2
 800c718:	dd34      	ble.n	800c784 <_dtoa_r+0x984>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	9302      	str	r3, [sp, #8]
 800c71e:	9b02      	ldr	r3, [sp, #8]
 800c720:	b96b      	cbnz	r3, 800c73e <_dtoa_r+0x93e>
 800c722:	4631      	mov	r1, r6
 800c724:	2205      	movs	r2, #5
 800c726:	4620      	mov	r0, r4
 800c728:	f000 fadc 	bl	800cce4 <__multadd>
 800c72c:	4601      	mov	r1, r0
 800c72e:	4606      	mov	r6, r0
 800c730:	ee18 0a10 	vmov	r0, s16
 800c734:	f000 fcf6 	bl	800d124 <__mcmp>
 800c738:	2800      	cmp	r0, #0
 800c73a:	f73f adbb 	bgt.w	800c2b4 <_dtoa_r+0x4b4>
 800c73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c740:	9d01      	ldr	r5, [sp, #4]
 800c742:	43db      	mvns	r3, r3
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	f04f 0800 	mov.w	r8, #0
 800c74a:	4631      	mov	r1, r6
 800c74c:	4620      	mov	r0, r4
 800c74e:	f000 faa7 	bl	800cca0 <_Bfree>
 800c752:	2f00      	cmp	r7, #0
 800c754:	f43f aea4 	beq.w	800c4a0 <_dtoa_r+0x6a0>
 800c758:	f1b8 0f00 	cmp.w	r8, #0
 800c75c:	d005      	beq.n	800c76a <_dtoa_r+0x96a>
 800c75e:	45b8      	cmp	r8, r7
 800c760:	d003      	beq.n	800c76a <_dtoa_r+0x96a>
 800c762:	4641      	mov	r1, r8
 800c764:	4620      	mov	r0, r4
 800c766:	f000 fa9b 	bl	800cca0 <_Bfree>
 800c76a:	4639      	mov	r1, r7
 800c76c:	4620      	mov	r0, r4
 800c76e:	f000 fa97 	bl	800cca0 <_Bfree>
 800c772:	e695      	b.n	800c4a0 <_dtoa_r+0x6a0>
 800c774:	2600      	movs	r6, #0
 800c776:	4637      	mov	r7, r6
 800c778:	e7e1      	b.n	800c73e <_dtoa_r+0x93e>
 800c77a:	9700      	str	r7, [sp, #0]
 800c77c:	4637      	mov	r7, r6
 800c77e:	e599      	b.n	800c2b4 <_dtoa_r+0x4b4>
 800c780:	40240000 	.word	0x40240000
 800c784:	9b08      	ldr	r3, [sp, #32]
 800c786:	2b00      	cmp	r3, #0
 800c788:	f000 80ca 	beq.w	800c920 <_dtoa_r+0xb20>
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	9302      	str	r3, [sp, #8]
 800c790:	2d00      	cmp	r5, #0
 800c792:	dd05      	ble.n	800c7a0 <_dtoa_r+0x9a0>
 800c794:	4639      	mov	r1, r7
 800c796:	462a      	mov	r2, r5
 800c798:	4620      	mov	r0, r4
 800c79a:	f000 fc53 	bl	800d044 <__lshift>
 800c79e:	4607      	mov	r7, r0
 800c7a0:	f1b8 0f00 	cmp.w	r8, #0
 800c7a4:	d05b      	beq.n	800c85e <_dtoa_r+0xa5e>
 800c7a6:	6879      	ldr	r1, [r7, #4]
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fa39 	bl	800cc20 <_Balloc>
 800c7ae:	4605      	mov	r5, r0
 800c7b0:	b928      	cbnz	r0, 800c7be <_dtoa_r+0x9be>
 800c7b2:	4b87      	ldr	r3, [pc, #540]	; (800c9d0 <_dtoa_r+0xbd0>)
 800c7b4:	4602      	mov	r2, r0
 800c7b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c7ba:	f7ff bb3b 	b.w	800be34 <_dtoa_r+0x34>
 800c7be:	693a      	ldr	r2, [r7, #16]
 800c7c0:	3202      	adds	r2, #2
 800c7c2:	0092      	lsls	r2, r2, #2
 800c7c4:	f107 010c 	add.w	r1, r7, #12
 800c7c8:	300c      	adds	r0, #12
 800c7ca:	f7fe fa23 	bl	800ac14 <memcpy>
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 fc36 	bl	800d044 <__lshift>
 800c7d8:	9b01      	ldr	r3, [sp, #4]
 800c7da:	f103 0901 	add.w	r9, r3, #1
 800c7de:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7e2:	4413      	add	r3, r2
 800c7e4:	9305      	str	r3, [sp, #20]
 800c7e6:	f00a 0301 	and.w	r3, sl, #1
 800c7ea:	46b8      	mov	r8, r7
 800c7ec:	9304      	str	r3, [sp, #16]
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	ee18 0a10 	vmov	r0, s16
 800c7f6:	f7ff fa75 	bl	800bce4 <quorem>
 800c7fa:	4641      	mov	r1, r8
 800c7fc:	9002      	str	r0, [sp, #8]
 800c7fe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c802:	ee18 0a10 	vmov	r0, s16
 800c806:	f000 fc8d 	bl	800d124 <__mcmp>
 800c80a:	463a      	mov	r2, r7
 800c80c:	9003      	str	r0, [sp, #12]
 800c80e:	4631      	mov	r1, r6
 800c810:	4620      	mov	r0, r4
 800c812:	f000 fca3 	bl	800d15c <__mdiff>
 800c816:	68c2      	ldr	r2, [r0, #12]
 800c818:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c81c:	4605      	mov	r5, r0
 800c81e:	bb02      	cbnz	r2, 800c862 <_dtoa_r+0xa62>
 800c820:	4601      	mov	r1, r0
 800c822:	ee18 0a10 	vmov	r0, s16
 800c826:	f000 fc7d 	bl	800d124 <__mcmp>
 800c82a:	4602      	mov	r2, r0
 800c82c:	4629      	mov	r1, r5
 800c82e:	4620      	mov	r0, r4
 800c830:	9207      	str	r2, [sp, #28]
 800c832:	f000 fa35 	bl	800cca0 <_Bfree>
 800c836:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c83a:	ea43 0102 	orr.w	r1, r3, r2
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	430b      	orrs	r3, r1
 800c842:	464d      	mov	r5, r9
 800c844:	d10f      	bne.n	800c866 <_dtoa_r+0xa66>
 800c846:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c84a:	d02a      	beq.n	800c8a2 <_dtoa_r+0xaa2>
 800c84c:	9b03      	ldr	r3, [sp, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	dd02      	ble.n	800c858 <_dtoa_r+0xa58>
 800c852:	9b02      	ldr	r3, [sp, #8]
 800c854:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c858:	f88b a000 	strb.w	sl, [fp]
 800c85c:	e775      	b.n	800c74a <_dtoa_r+0x94a>
 800c85e:	4638      	mov	r0, r7
 800c860:	e7ba      	b.n	800c7d8 <_dtoa_r+0x9d8>
 800c862:	2201      	movs	r2, #1
 800c864:	e7e2      	b.n	800c82c <_dtoa_r+0xa2c>
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	db04      	blt.n	800c876 <_dtoa_r+0xa76>
 800c86c:	9906      	ldr	r1, [sp, #24]
 800c86e:	430b      	orrs	r3, r1
 800c870:	9904      	ldr	r1, [sp, #16]
 800c872:	430b      	orrs	r3, r1
 800c874:	d122      	bne.n	800c8bc <_dtoa_r+0xabc>
 800c876:	2a00      	cmp	r2, #0
 800c878:	ddee      	ble.n	800c858 <_dtoa_r+0xa58>
 800c87a:	ee18 1a10 	vmov	r1, s16
 800c87e:	2201      	movs	r2, #1
 800c880:	4620      	mov	r0, r4
 800c882:	f000 fbdf 	bl	800d044 <__lshift>
 800c886:	4631      	mov	r1, r6
 800c888:	ee08 0a10 	vmov	s16, r0
 800c88c:	f000 fc4a 	bl	800d124 <__mcmp>
 800c890:	2800      	cmp	r0, #0
 800c892:	dc03      	bgt.n	800c89c <_dtoa_r+0xa9c>
 800c894:	d1e0      	bne.n	800c858 <_dtoa_r+0xa58>
 800c896:	f01a 0f01 	tst.w	sl, #1
 800c89a:	d0dd      	beq.n	800c858 <_dtoa_r+0xa58>
 800c89c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8a0:	d1d7      	bne.n	800c852 <_dtoa_r+0xa52>
 800c8a2:	2339      	movs	r3, #57	; 0x39
 800c8a4:	f88b 3000 	strb.w	r3, [fp]
 800c8a8:	462b      	mov	r3, r5
 800c8aa:	461d      	mov	r5, r3
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c8b2:	2a39      	cmp	r2, #57	; 0x39
 800c8b4:	d071      	beq.n	800c99a <_dtoa_r+0xb9a>
 800c8b6:	3201      	adds	r2, #1
 800c8b8:	701a      	strb	r2, [r3, #0]
 800c8ba:	e746      	b.n	800c74a <_dtoa_r+0x94a>
 800c8bc:	2a00      	cmp	r2, #0
 800c8be:	dd07      	ble.n	800c8d0 <_dtoa_r+0xad0>
 800c8c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c8c4:	d0ed      	beq.n	800c8a2 <_dtoa_r+0xaa2>
 800c8c6:	f10a 0301 	add.w	r3, sl, #1
 800c8ca:	f88b 3000 	strb.w	r3, [fp]
 800c8ce:	e73c      	b.n	800c74a <_dtoa_r+0x94a>
 800c8d0:	9b05      	ldr	r3, [sp, #20]
 800c8d2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c8d6:	4599      	cmp	r9, r3
 800c8d8:	d047      	beq.n	800c96a <_dtoa_r+0xb6a>
 800c8da:	ee18 1a10 	vmov	r1, s16
 800c8de:	2300      	movs	r3, #0
 800c8e0:	220a      	movs	r2, #10
 800c8e2:	4620      	mov	r0, r4
 800c8e4:	f000 f9fe 	bl	800cce4 <__multadd>
 800c8e8:	45b8      	cmp	r8, r7
 800c8ea:	ee08 0a10 	vmov	s16, r0
 800c8ee:	f04f 0300 	mov.w	r3, #0
 800c8f2:	f04f 020a 	mov.w	r2, #10
 800c8f6:	4641      	mov	r1, r8
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	d106      	bne.n	800c90a <_dtoa_r+0xb0a>
 800c8fc:	f000 f9f2 	bl	800cce4 <__multadd>
 800c900:	4680      	mov	r8, r0
 800c902:	4607      	mov	r7, r0
 800c904:	f109 0901 	add.w	r9, r9, #1
 800c908:	e772      	b.n	800c7f0 <_dtoa_r+0x9f0>
 800c90a:	f000 f9eb 	bl	800cce4 <__multadd>
 800c90e:	4639      	mov	r1, r7
 800c910:	4680      	mov	r8, r0
 800c912:	2300      	movs	r3, #0
 800c914:	220a      	movs	r2, #10
 800c916:	4620      	mov	r0, r4
 800c918:	f000 f9e4 	bl	800cce4 <__multadd>
 800c91c:	4607      	mov	r7, r0
 800c91e:	e7f1      	b.n	800c904 <_dtoa_r+0xb04>
 800c920:	9b03      	ldr	r3, [sp, #12]
 800c922:	9302      	str	r3, [sp, #8]
 800c924:	9d01      	ldr	r5, [sp, #4]
 800c926:	ee18 0a10 	vmov	r0, s16
 800c92a:	4631      	mov	r1, r6
 800c92c:	f7ff f9da 	bl	800bce4 <quorem>
 800c930:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c934:	9b01      	ldr	r3, [sp, #4]
 800c936:	f805 ab01 	strb.w	sl, [r5], #1
 800c93a:	1aea      	subs	r2, r5, r3
 800c93c:	9b02      	ldr	r3, [sp, #8]
 800c93e:	4293      	cmp	r3, r2
 800c940:	dd09      	ble.n	800c956 <_dtoa_r+0xb56>
 800c942:	ee18 1a10 	vmov	r1, s16
 800c946:	2300      	movs	r3, #0
 800c948:	220a      	movs	r2, #10
 800c94a:	4620      	mov	r0, r4
 800c94c:	f000 f9ca 	bl	800cce4 <__multadd>
 800c950:	ee08 0a10 	vmov	s16, r0
 800c954:	e7e7      	b.n	800c926 <_dtoa_r+0xb26>
 800c956:	9b02      	ldr	r3, [sp, #8]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	bfc8      	it	gt
 800c95c:	461d      	movgt	r5, r3
 800c95e:	9b01      	ldr	r3, [sp, #4]
 800c960:	bfd8      	it	le
 800c962:	2501      	movle	r5, #1
 800c964:	441d      	add	r5, r3
 800c966:	f04f 0800 	mov.w	r8, #0
 800c96a:	ee18 1a10 	vmov	r1, s16
 800c96e:	2201      	movs	r2, #1
 800c970:	4620      	mov	r0, r4
 800c972:	f000 fb67 	bl	800d044 <__lshift>
 800c976:	4631      	mov	r1, r6
 800c978:	ee08 0a10 	vmov	s16, r0
 800c97c:	f000 fbd2 	bl	800d124 <__mcmp>
 800c980:	2800      	cmp	r0, #0
 800c982:	dc91      	bgt.n	800c8a8 <_dtoa_r+0xaa8>
 800c984:	d102      	bne.n	800c98c <_dtoa_r+0xb8c>
 800c986:	f01a 0f01 	tst.w	sl, #1
 800c98a:	d18d      	bne.n	800c8a8 <_dtoa_r+0xaa8>
 800c98c:	462b      	mov	r3, r5
 800c98e:	461d      	mov	r5, r3
 800c990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c994:	2a30      	cmp	r2, #48	; 0x30
 800c996:	d0fa      	beq.n	800c98e <_dtoa_r+0xb8e>
 800c998:	e6d7      	b.n	800c74a <_dtoa_r+0x94a>
 800c99a:	9a01      	ldr	r2, [sp, #4]
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d184      	bne.n	800c8aa <_dtoa_r+0xaaa>
 800c9a0:	9b00      	ldr	r3, [sp, #0]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	2331      	movs	r3, #49	; 0x31
 800c9a8:	7013      	strb	r3, [r2, #0]
 800c9aa:	e6ce      	b.n	800c74a <_dtoa_r+0x94a>
 800c9ac:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <_dtoa_r+0xbd4>)
 800c9ae:	f7ff ba95 	b.w	800bedc <_dtoa_r+0xdc>
 800c9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	f47f aa6e 	bne.w	800be96 <_dtoa_r+0x96>
 800c9ba:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <_dtoa_r+0xbd8>)
 800c9bc:	f7ff ba8e 	b.w	800bedc <_dtoa_r+0xdc>
 800c9c0:	9b02      	ldr	r3, [sp, #8]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	dcae      	bgt.n	800c924 <_dtoa_r+0xb24>
 800c9c6:	9b06      	ldr	r3, [sp, #24]
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	f73f aea8 	bgt.w	800c71e <_dtoa_r+0x91e>
 800c9ce:	e7a9      	b.n	800c924 <_dtoa_r+0xb24>
 800c9d0:	0800f628 	.word	0x0800f628
 800c9d4:	0800f549 	.word	0x0800f549
 800c9d8:	0800f5a9 	.word	0x0800f5a9

0800c9dc <__errno>:
 800c9dc:	4b01      	ldr	r3, [pc, #4]	; (800c9e4 <__errno+0x8>)
 800c9de:	6818      	ldr	r0, [r3, #0]
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	2000016c 	.word	0x2000016c

0800c9e8 <std>:
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	b510      	push	{r4, lr}
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c9f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9f6:	6083      	str	r3, [r0, #8]
 800c9f8:	8181      	strh	r1, [r0, #12]
 800c9fa:	6643      	str	r3, [r0, #100]	; 0x64
 800c9fc:	81c2      	strh	r2, [r0, #14]
 800c9fe:	6183      	str	r3, [r0, #24]
 800ca00:	4619      	mov	r1, r3
 800ca02:	2208      	movs	r2, #8
 800ca04:	305c      	adds	r0, #92	; 0x5c
 800ca06:	f7fe f92d 	bl	800ac64 <memset>
 800ca0a:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <std+0x38>)
 800ca0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ca0e:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <std+0x3c>)
 800ca10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <std+0x40>)
 800ca14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca16:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <std+0x44>)
 800ca18:	6224      	str	r4, [r4, #32]
 800ca1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ca1c:	bd10      	pop	{r4, pc}
 800ca1e:	bf00      	nop
 800ca20:	0800d639 	.word	0x0800d639
 800ca24:	0800d65b 	.word	0x0800d65b
 800ca28:	0800d693 	.word	0x0800d693
 800ca2c:	0800d6b7 	.word	0x0800d6b7

0800ca30 <_cleanup_r>:
 800ca30:	4901      	ldr	r1, [pc, #4]	; (800ca38 <_cleanup_r+0x8>)
 800ca32:	f000 b8c1 	b.w	800cbb8 <_fwalk_reent>
 800ca36:	bf00      	nop
 800ca38:	0800d991 	.word	0x0800d991

0800ca3c <__sfmoreglue>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	2268      	movs	r2, #104	; 0x68
 800ca40:	1e4d      	subs	r5, r1, #1
 800ca42:	4355      	muls	r5, r2
 800ca44:	460e      	mov	r6, r1
 800ca46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ca4a:	f7fe f9d3 	bl	800adf4 <_malloc_r>
 800ca4e:	4604      	mov	r4, r0
 800ca50:	b140      	cbz	r0, 800ca64 <__sfmoreglue+0x28>
 800ca52:	2100      	movs	r1, #0
 800ca54:	e9c0 1600 	strd	r1, r6, [r0]
 800ca58:	300c      	adds	r0, #12
 800ca5a:	60a0      	str	r0, [r4, #8]
 800ca5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca60:	f7fe f900 	bl	800ac64 <memset>
 800ca64:	4620      	mov	r0, r4
 800ca66:	bd70      	pop	{r4, r5, r6, pc}

0800ca68 <__sfp_lock_acquire>:
 800ca68:	4801      	ldr	r0, [pc, #4]	; (800ca70 <__sfp_lock_acquire+0x8>)
 800ca6a:	f000 b8ca 	b.w	800cc02 <__retarget_lock_acquire_recursive>
 800ca6e:	bf00      	nop
 800ca70:	2000ba51 	.word	0x2000ba51

0800ca74 <__sfp_lock_release>:
 800ca74:	4801      	ldr	r0, [pc, #4]	; (800ca7c <__sfp_lock_release+0x8>)
 800ca76:	f000 b8c5 	b.w	800cc04 <__retarget_lock_release_recursive>
 800ca7a:	bf00      	nop
 800ca7c:	2000ba51 	.word	0x2000ba51

0800ca80 <__sinit_lock_acquire>:
 800ca80:	4801      	ldr	r0, [pc, #4]	; (800ca88 <__sinit_lock_acquire+0x8>)
 800ca82:	f000 b8be 	b.w	800cc02 <__retarget_lock_acquire_recursive>
 800ca86:	bf00      	nop
 800ca88:	2000ba52 	.word	0x2000ba52

0800ca8c <__sinit_lock_release>:
 800ca8c:	4801      	ldr	r0, [pc, #4]	; (800ca94 <__sinit_lock_release+0x8>)
 800ca8e:	f000 b8b9 	b.w	800cc04 <__retarget_lock_release_recursive>
 800ca92:	bf00      	nop
 800ca94:	2000ba52 	.word	0x2000ba52

0800ca98 <__sinit>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	f7ff fff0 	bl	800ca80 <__sinit_lock_acquire>
 800caa0:	69a3      	ldr	r3, [r4, #24]
 800caa2:	b11b      	cbz	r3, 800caac <__sinit+0x14>
 800caa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caa8:	f7ff bff0 	b.w	800ca8c <__sinit_lock_release>
 800caac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cab0:	6523      	str	r3, [r4, #80]	; 0x50
 800cab2:	4b13      	ldr	r3, [pc, #76]	; (800cb00 <__sinit+0x68>)
 800cab4:	4a13      	ldr	r2, [pc, #76]	; (800cb04 <__sinit+0x6c>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	62a2      	str	r2, [r4, #40]	; 0x28
 800caba:	42a3      	cmp	r3, r4
 800cabc:	bf04      	itt	eq
 800cabe:	2301      	moveq	r3, #1
 800cac0:	61a3      	streq	r3, [r4, #24]
 800cac2:	4620      	mov	r0, r4
 800cac4:	f000 f820 	bl	800cb08 <__sfp>
 800cac8:	6060      	str	r0, [r4, #4]
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 f81c 	bl	800cb08 <__sfp>
 800cad0:	60a0      	str	r0, [r4, #8]
 800cad2:	4620      	mov	r0, r4
 800cad4:	f000 f818 	bl	800cb08 <__sfp>
 800cad8:	2200      	movs	r2, #0
 800cada:	60e0      	str	r0, [r4, #12]
 800cadc:	2104      	movs	r1, #4
 800cade:	6860      	ldr	r0, [r4, #4]
 800cae0:	f7ff ff82 	bl	800c9e8 <std>
 800cae4:	68a0      	ldr	r0, [r4, #8]
 800cae6:	2201      	movs	r2, #1
 800cae8:	2109      	movs	r1, #9
 800caea:	f7ff ff7d 	bl	800c9e8 <std>
 800caee:	68e0      	ldr	r0, [r4, #12]
 800caf0:	2202      	movs	r2, #2
 800caf2:	2112      	movs	r1, #18
 800caf4:	f7ff ff78 	bl	800c9e8 <std>
 800caf8:	2301      	movs	r3, #1
 800cafa:	61a3      	str	r3, [r4, #24]
 800cafc:	e7d2      	b.n	800caa4 <__sinit+0xc>
 800cafe:	bf00      	nop
 800cb00:	0800f524 	.word	0x0800f524
 800cb04:	0800ca31 	.word	0x0800ca31

0800cb08 <__sfp>:
 800cb08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0a:	4607      	mov	r7, r0
 800cb0c:	f7ff ffac 	bl	800ca68 <__sfp_lock_acquire>
 800cb10:	4b1e      	ldr	r3, [pc, #120]	; (800cb8c <__sfp+0x84>)
 800cb12:	681e      	ldr	r6, [r3, #0]
 800cb14:	69b3      	ldr	r3, [r6, #24]
 800cb16:	b913      	cbnz	r3, 800cb1e <__sfp+0x16>
 800cb18:	4630      	mov	r0, r6
 800cb1a:	f7ff ffbd 	bl	800ca98 <__sinit>
 800cb1e:	3648      	adds	r6, #72	; 0x48
 800cb20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	d503      	bpl.n	800cb30 <__sfp+0x28>
 800cb28:	6833      	ldr	r3, [r6, #0]
 800cb2a:	b30b      	cbz	r3, 800cb70 <__sfp+0x68>
 800cb2c:	6836      	ldr	r6, [r6, #0]
 800cb2e:	e7f7      	b.n	800cb20 <__sfp+0x18>
 800cb30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cb34:	b9d5      	cbnz	r5, 800cb6c <__sfp+0x64>
 800cb36:	4b16      	ldr	r3, [pc, #88]	; (800cb90 <__sfp+0x88>)
 800cb38:	60e3      	str	r3, [r4, #12]
 800cb3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cb3e:	6665      	str	r5, [r4, #100]	; 0x64
 800cb40:	f000 f85e 	bl	800cc00 <__retarget_lock_init_recursive>
 800cb44:	f7ff ff96 	bl	800ca74 <__sfp_lock_release>
 800cb48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb50:	6025      	str	r5, [r4, #0]
 800cb52:	61a5      	str	r5, [r4, #24]
 800cb54:	2208      	movs	r2, #8
 800cb56:	4629      	mov	r1, r5
 800cb58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb5c:	f7fe f882 	bl	800ac64 <memset>
 800cb60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb68:	4620      	mov	r0, r4
 800cb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb6c:	3468      	adds	r4, #104	; 0x68
 800cb6e:	e7d9      	b.n	800cb24 <__sfp+0x1c>
 800cb70:	2104      	movs	r1, #4
 800cb72:	4638      	mov	r0, r7
 800cb74:	f7ff ff62 	bl	800ca3c <__sfmoreglue>
 800cb78:	4604      	mov	r4, r0
 800cb7a:	6030      	str	r0, [r6, #0]
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d1d5      	bne.n	800cb2c <__sfp+0x24>
 800cb80:	f7ff ff78 	bl	800ca74 <__sfp_lock_release>
 800cb84:	230c      	movs	r3, #12
 800cb86:	603b      	str	r3, [r7, #0]
 800cb88:	e7ee      	b.n	800cb68 <__sfp+0x60>
 800cb8a:	bf00      	nop
 800cb8c:	0800f524 	.word	0x0800f524
 800cb90:	ffff0001 	.word	0xffff0001

0800cb94 <fiprintf>:
 800cb94:	b40e      	push	{r1, r2, r3}
 800cb96:	b503      	push	{r0, r1, lr}
 800cb98:	4601      	mov	r1, r0
 800cb9a:	ab03      	add	r3, sp, #12
 800cb9c:	4805      	ldr	r0, [pc, #20]	; (800cbb4 <fiprintf+0x20>)
 800cb9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cba2:	6800      	ldr	r0, [r0, #0]
 800cba4:	9301      	str	r3, [sp, #4]
 800cba6:	f000 fc17 	bl	800d3d8 <_vfiprintf_r>
 800cbaa:	b002      	add	sp, #8
 800cbac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbb0:	b003      	add	sp, #12
 800cbb2:	4770      	bx	lr
 800cbb4:	2000016c 	.word	0x2000016c

0800cbb8 <_fwalk_reent>:
 800cbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	4688      	mov	r8, r1
 800cbc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cbc4:	2700      	movs	r7, #0
 800cbc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cbca:	f1b9 0901 	subs.w	r9, r9, #1
 800cbce:	d505      	bpl.n	800cbdc <_fwalk_reent+0x24>
 800cbd0:	6824      	ldr	r4, [r4, #0]
 800cbd2:	2c00      	cmp	r4, #0
 800cbd4:	d1f7      	bne.n	800cbc6 <_fwalk_reent+0xe>
 800cbd6:	4638      	mov	r0, r7
 800cbd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cbdc:	89ab      	ldrh	r3, [r5, #12]
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d907      	bls.n	800cbf2 <_fwalk_reent+0x3a>
 800cbe2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	d003      	beq.n	800cbf2 <_fwalk_reent+0x3a>
 800cbea:	4629      	mov	r1, r5
 800cbec:	4630      	mov	r0, r6
 800cbee:	47c0      	blx	r8
 800cbf0:	4307      	orrs	r7, r0
 800cbf2:	3568      	adds	r5, #104	; 0x68
 800cbf4:	e7e9      	b.n	800cbca <_fwalk_reent+0x12>
	...

0800cbf8 <_localeconv_r>:
 800cbf8:	4800      	ldr	r0, [pc, #0]	; (800cbfc <_localeconv_r+0x4>)
 800cbfa:	4770      	bx	lr
 800cbfc:	200002c0 	.word	0x200002c0

0800cc00 <__retarget_lock_init_recursive>:
 800cc00:	4770      	bx	lr

0800cc02 <__retarget_lock_acquire_recursive>:
 800cc02:	4770      	bx	lr

0800cc04 <__retarget_lock_release_recursive>:
 800cc04:	4770      	bx	lr
	...

0800cc08 <__malloc_lock>:
 800cc08:	4801      	ldr	r0, [pc, #4]	; (800cc10 <__malloc_lock+0x8>)
 800cc0a:	f7ff bffa 	b.w	800cc02 <__retarget_lock_acquire_recursive>
 800cc0e:	bf00      	nop
 800cc10:	2000ba50 	.word	0x2000ba50

0800cc14 <__malloc_unlock>:
 800cc14:	4801      	ldr	r0, [pc, #4]	; (800cc1c <__malloc_unlock+0x8>)
 800cc16:	f7ff bff5 	b.w	800cc04 <__retarget_lock_release_recursive>
 800cc1a:	bf00      	nop
 800cc1c:	2000ba50 	.word	0x2000ba50

0800cc20 <_Balloc>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc24:	4604      	mov	r4, r0
 800cc26:	460d      	mov	r5, r1
 800cc28:	b976      	cbnz	r6, 800cc48 <_Balloc+0x28>
 800cc2a:	2010      	movs	r0, #16
 800cc2c:	f7fd ffe2 	bl	800abf4 <malloc>
 800cc30:	4602      	mov	r2, r0
 800cc32:	6260      	str	r0, [r4, #36]	; 0x24
 800cc34:	b920      	cbnz	r0, 800cc40 <_Balloc+0x20>
 800cc36:	4b18      	ldr	r3, [pc, #96]	; (800cc98 <_Balloc+0x78>)
 800cc38:	4818      	ldr	r0, [pc, #96]	; (800cc9c <_Balloc+0x7c>)
 800cc3a:	2166      	movs	r1, #102	; 0x66
 800cc3c:	f7ff f834 	bl	800bca8 <__assert_func>
 800cc40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc44:	6006      	str	r6, [r0, #0]
 800cc46:	60c6      	str	r6, [r0, #12]
 800cc48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cc4a:	68f3      	ldr	r3, [r6, #12]
 800cc4c:	b183      	cbz	r3, 800cc70 <_Balloc+0x50>
 800cc4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc56:	b9b8      	cbnz	r0, 800cc88 <_Balloc+0x68>
 800cc58:	2101      	movs	r1, #1
 800cc5a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc5e:	1d72      	adds	r2, r6, #5
 800cc60:	0092      	lsls	r2, r2, #2
 800cc62:	4620      	mov	r0, r4
 800cc64:	f7fe f810 	bl	800ac88 <_calloc_r>
 800cc68:	b160      	cbz	r0, 800cc84 <_Balloc+0x64>
 800cc6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc6e:	e00e      	b.n	800cc8e <_Balloc+0x6e>
 800cc70:	2221      	movs	r2, #33	; 0x21
 800cc72:	2104      	movs	r1, #4
 800cc74:	4620      	mov	r0, r4
 800cc76:	f7fe f807 	bl	800ac88 <_calloc_r>
 800cc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc7c:	60f0      	str	r0, [r6, #12]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1e4      	bne.n	800cc4e <_Balloc+0x2e>
 800cc84:	2000      	movs	r0, #0
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	6802      	ldr	r2, [r0, #0]
 800cc8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc94:	e7f7      	b.n	800cc86 <_Balloc+0x66>
 800cc96:	bf00      	nop
 800cc98:	0800f5b6 	.word	0x0800f5b6
 800cc9c:	0800f69c 	.word	0x0800f69c

0800cca0 <_Bfree>:
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cca4:	4605      	mov	r5, r0
 800cca6:	460c      	mov	r4, r1
 800cca8:	b976      	cbnz	r6, 800ccc8 <_Bfree+0x28>
 800ccaa:	2010      	movs	r0, #16
 800ccac:	f7fd ffa2 	bl	800abf4 <malloc>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	6268      	str	r0, [r5, #36]	; 0x24
 800ccb4:	b920      	cbnz	r0, 800ccc0 <_Bfree+0x20>
 800ccb6:	4b09      	ldr	r3, [pc, #36]	; (800ccdc <_Bfree+0x3c>)
 800ccb8:	4809      	ldr	r0, [pc, #36]	; (800cce0 <_Bfree+0x40>)
 800ccba:	218a      	movs	r1, #138	; 0x8a
 800ccbc:	f7fe fff4 	bl	800bca8 <__assert_func>
 800ccc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ccc4:	6006      	str	r6, [r0, #0]
 800ccc6:	60c6      	str	r6, [r0, #12]
 800ccc8:	b13c      	cbz	r4, 800ccda <_Bfree+0x3a>
 800ccca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cccc:	6862      	ldr	r2, [r4, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ccd4:	6021      	str	r1, [r4, #0]
 800ccd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ccda:	bd70      	pop	{r4, r5, r6, pc}
 800ccdc:	0800f5b6 	.word	0x0800f5b6
 800cce0:	0800f69c 	.word	0x0800f69c

0800cce4 <__multadd>:
 800cce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cce8:	690d      	ldr	r5, [r1, #16]
 800ccea:	4607      	mov	r7, r0
 800ccec:	460c      	mov	r4, r1
 800ccee:	461e      	mov	r6, r3
 800ccf0:	f101 0c14 	add.w	ip, r1, #20
 800ccf4:	2000      	movs	r0, #0
 800ccf6:	f8dc 3000 	ldr.w	r3, [ip]
 800ccfa:	b299      	uxth	r1, r3
 800ccfc:	fb02 6101 	mla	r1, r2, r1, r6
 800cd00:	0c1e      	lsrs	r6, r3, #16
 800cd02:	0c0b      	lsrs	r3, r1, #16
 800cd04:	fb02 3306 	mla	r3, r2, r6, r3
 800cd08:	b289      	uxth	r1, r1
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cd10:	4285      	cmp	r5, r0
 800cd12:	f84c 1b04 	str.w	r1, [ip], #4
 800cd16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cd1a:	dcec      	bgt.n	800ccf6 <__multadd+0x12>
 800cd1c:	b30e      	cbz	r6, 800cd62 <__multadd+0x7e>
 800cd1e:	68a3      	ldr	r3, [r4, #8]
 800cd20:	42ab      	cmp	r3, r5
 800cd22:	dc19      	bgt.n	800cd58 <__multadd+0x74>
 800cd24:	6861      	ldr	r1, [r4, #4]
 800cd26:	4638      	mov	r0, r7
 800cd28:	3101      	adds	r1, #1
 800cd2a:	f7ff ff79 	bl	800cc20 <_Balloc>
 800cd2e:	4680      	mov	r8, r0
 800cd30:	b928      	cbnz	r0, 800cd3e <__multadd+0x5a>
 800cd32:	4602      	mov	r2, r0
 800cd34:	4b0c      	ldr	r3, [pc, #48]	; (800cd68 <__multadd+0x84>)
 800cd36:	480d      	ldr	r0, [pc, #52]	; (800cd6c <__multadd+0x88>)
 800cd38:	21b5      	movs	r1, #181	; 0xb5
 800cd3a:	f7fe ffb5 	bl	800bca8 <__assert_func>
 800cd3e:	6922      	ldr	r2, [r4, #16]
 800cd40:	3202      	adds	r2, #2
 800cd42:	f104 010c 	add.w	r1, r4, #12
 800cd46:	0092      	lsls	r2, r2, #2
 800cd48:	300c      	adds	r0, #12
 800cd4a:	f7fd ff63 	bl	800ac14 <memcpy>
 800cd4e:	4621      	mov	r1, r4
 800cd50:	4638      	mov	r0, r7
 800cd52:	f7ff ffa5 	bl	800cca0 <_Bfree>
 800cd56:	4644      	mov	r4, r8
 800cd58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd5c:	3501      	adds	r5, #1
 800cd5e:	615e      	str	r6, [r3, #20]
 800cd60:	6125      	str	r5, [r4, #16]
 800cd62:	4620      	mov	r0, r4
 800cd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd68:	0800f628 	.word	0x0800f628
 800cd6c:	0800f69c 	.word	0x0800f69c

0800cd70 <__hi0bits>:
 800cd70:	0c03      	lsrs	r3, r0, #16
 800cd72:	041b      	lsls	r3, r3, #16
 800cd74:	b9d3      	cbnz	r3, 800cdac <__hi0bits+0x3c>
 800cd76:	0400      	lsls	r0, r0, #16
 800cd78:	2310      	movs	r3, #16
 800cd7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cd7e:	bf04      	itt	eq
 800cd80:	0200      	lsleq	r0, r0, #8
 800cd82:	3308      	addeq	r3, #8
 800cd84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cd88:	bf04      	itt	eq
 800cd8a:	0100      	lsleq	r0, r0, #4
 800cd8c:	3304      	addeq	r3, #4
 800cd8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cd92:	bf04      	itt	eq
 800cd94:	0080      	lsleq	r0, r0, #2
 800cd96:	3302      	addeq	r3, #2
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	db05      	blt.n	800cda8 <__hi0bits+0x38>
 800cd9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cda0:	f103 0301 	add.w	r3, r3, #1
 800cda4:	bf08      	it	eq
 800cda6:	2320      	moveq	r3, #32
 800cda8:	4618      	mov	r0, r3
 800cdaa:	4770      	bx	lr
 800cdac:	2300      	movs	r3, #0
 800cdae:	e7e4      	b.n	800cd7a <__hi0bits+0xa>

0800cdb0 <__lo0bits>:
 800cdb0:	6803      	ldr	r3, [r0, #0]
 800cdb2:	f013 0207 	ands.w	r2, r3, #7
 800cdb6:	4601      	mov	r1, r0
 800cdb8:	d00b      	beq.n	800cdd2 <__lo0bits+0x22>
 800cdba:	07da      	lsls	r2, r3, #31
 800cdbc:	d423      	bmi.n	800ce06 <__lo0bits+0x56>
 800cdbe:	0798      	lsls	r0, r3, #30
 800cdc0:	bf49      	itett	mi
 800cdc2:	085b      	lsrmi	r3, r3, #1
 800cdc4:	089b      	lsrpl	r3, r3, #2
 800cdc6:	2001      	movmi	r0, #1
 800cdc8:	600b      	strmi	r3, [r1, #0]
 800cdca:	bf5c      	itt	pl
 800cdcc:	600b      	strpl	r3, [r1, #0]
 800cdce:	2002      	movpl	r0, #2
 800cdd0:	4770      	bx	lr
 800cdd2:	b298      	uxth	r0, r3
 800cdd4:	b9a8      	cbnz	r0, 800ce02 <__lo0bits+0x52>
 800cdd6:	0c1b      	lsrs	r3, r3, #16
 800cdd8:	2010      	movs	r0, #16
 800cdda:	b2da      	uxtb	r2, r3
 800cddc:	b90a      	cbnz	r2, 800cde2 <__lo0bits+0x32>
 800cdde:	3008      	adds	r0, #8
 800cde0:	0a1b      	lsrs	r3, r3, #8
 800cde2:	071a      	lsls	r2, r3, #28
 800cde4:	bf04      	itt	eq
 800cde6:	091b      	lsreq	r3, r3, #4
 800cde8:	3004      	addeq	r0, #4
 800cdea:	079a      	lsls	r2, r3, #30
 800cdec:	bf04      	itt	eq
 800cdee:	089b      	lsreq	r3, r3, #2
 800cdf0:	3002      	addeq	r0, #2
 800cdf2:	07da      	lsls	r2, r3, #31
 800cdf4:	d403      	bmi.n	800cdfe <__lo0bits+0x4e>
 800cdf6:	085b      	lsrs	r3, r3, #1
 800cdf8:	f100 0001 	add.w	r0, r0, #1
 800cdfc:	d005      	beq.n	800ce0a <__lo0bits+0x5a>
 800cdfe:	600b      	str	r3, [r1, #0]
 800ce00:	4770      	bx	lr
 800ce02:	4610      	mov	r0, r2
 800ce04:	e7e9      	b.n	800cdda <__lo0bits+0x2a>
 800ce06:	2000      	movs	r0, #0
 800ce08:	4770      	bx	lr
 800ce0a:	2020      	movs	r0, #32
 800ce0c:	4770      	bx	lr
	...

0800ce10 <__i2b>:
 800ce10:	b510      	push	{r4, lr}
 800ce12:	460c      	mov	r4, r1
 800ce14:	2101      	movs	r1, #1
 800ce16:	f7ff ff03 	bl	800cc20 <_Balloc>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	b928      	cbnz	r0, 800ce2a <__i2b+0x1a>
 800ce1e:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <__i2b+0x24>)
 800ce20:	4805      	ldr	r0, [pc, #20]	; (800ce38 <__i2b+0x28>)
 800ce22:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ce26:	f7fe ff3f 	bl	800bca8 <__assert_func>
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	6144      	str	r4, [r0, #20]
 800ce2e:	6103      	str	r3, [r0, #16]
 800ce30:	bd10      	pop	{r4, pc}
 800ce32:	bf00      	nop
 800ce34:	0800f628 	.word	0x0800f628
 800ce38:	0800f69c 	.word	0x0800f69c

0800ce3c <__multiply>:
 800ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce40:	4691      	mov	r9, r2
 800ce42:	690a      	ldr	r2, [r1, #16]
 800ce44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce48:	429a      	cmp	r2, r3
 800ce4a:	bfb8      	it	lt
 800ce4c:	460b      	movlt	r3, r1
 800ce4e:	460c      	mov	r4, r1
 800ce50:	bfbc      	itt	lt
 800ce52:	464c      	movlt	r4, r9
 800ce54:	4699      	movlt	r9, r3
 800ce56:	6927      	ldr	r7, [r4, #16]
 800ce58:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce5c:	68a3      	ldr	r3, [r4, #8]
 800ce5e:	6861      	ldr	r1, [r4, #4]
 800ce60:	eb07 060a 	add.w	r6, r7, sl
 800ce64:	42b3      	cmp	r3, r6
 800ce66:	b085      	sub	sp, #20
 800ce68:	bfb8      	it	lt
 800ce6a:	3101      	addlt	r1, #1
 800ce6c:	f7ff fed8 	bl	800cc20 <_Balloc>
 800ce70:	b930      	cbnz	r0, 800ce80 <__multiply+0x44>
 800ce72:	4602      	mov	r2, r0
 800ce74:	4b44      	ldr	r3, [pc, #272]	; (800cf88 <__multiply+0x14c>)
 800ce76:	4845      	ldr	r0, [pc, #276]	; (800cf8c <__multiply+0x150>)
 800ce78:	f240 115d 	movw	r1, #349	; 0x15d
 800ce7c:	f7fe ff14 	bl	800bca8 <__assert_func>
 800ce80:	f100 0514 	add.w	r5, r0, #20
 800ce84:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce88:	462b      	mov	r3, r5
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	4543      	cmp	r3, r8
 800ce8e:	d321      	bcc.n	800ced4 <__multiply+0x98>
 800ce90:	f104 0314 	add.w	r3, r4, #20
 800ce94:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce98:	f109 0314 	add.w	r3, r9, #20
 800ce9c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cea0:	9202      	str	r2, [sp, #8]
 800cea2:	1b3a      	subs	r2, r7, r4
 800cea4:	3a15      	subs	r2, #21
 800cea6:	f022 0203 	bic.w	r2, r2, #3
 800ceaa:	3204      	adds	r2, #4
 800ceac:	f104 0115 	add.w	r1, r4, #21
 800ceb0:	428f      	cmp	r7, r1
 800ceb2:	bf38      	it	cc
 800ceb4:	2204      	movcc	r2, #4
 800ceb6:	9201      	str	r2, [sp, #4]
 800ceb8:	9a02      	ldr	r2, [sp, #8]
 800ceba:	9303      	str	r3, [sp, #12]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d80c      	bhi.n	800ceda <__multiply+0x9e>
 800cec0:	2e00      	cmp	r6, #0
 800cec2:	dd03      	ble.n	800cecc <__multiply+0x90>
 800cec4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d05a      	beq.n	800cf82 <__multiply+0x146>
 800cecc:	6106      	str	r6, [r0, #16]
 800cece:	b005      	add	sp, #20
 800ced0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced4:	f843 2b04 	str.w	r2, [r3], #4
 800ced8:	e7d8      	b.n	800ce8c <__multiply+0x50>
 800ceda:	f8b3 a000 	ldrh.w	sl, [r3]
 800cede:	f1ba 0f00 	cmp.w	sl, #0
 800cee2:	d024      	beq.n	800cf2e <__multiply+0xf2>
 800cee4:	f104 0e14 	add.w	lr, r4, #20
 800cee8:	46a9      	mov	r9, r5
 800ceea:	f04f 0c00 	mov.w	ip, #0
 800ceee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cef2:	f8d9 1000 	ldr.w	r1, [r9]
 800cef6:	fa1f fb82 	uxth.w	fp, r2
 800cefa:	b289      	uxth	r1, r1
 800cefc:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf00:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf04:	f8d9 2000 	ldr.w	r2, [r9]
 800cf08:	4461      	add	r1, ip
 800cf0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf0e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cf12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf16:	b289      	uxth	r1, r1
 800cf18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf1c:	4577      	cmp	r7, lr
 800cf1e:	f849 1b04 	str.w	r1, [r9], #4
 800cf22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf26:	d8e2      	bhi.n	800ceee <__multiply+0xb2>
 800cf28:	9a01      	ldr	r2, [sp, #4]
 800cf2a:	f845 c002 	str.w	ip, [r5, r2]
 800cf2e:	9a03      	ldr	r2, [sp, #12]
 800cf30:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf34:	3304      	adds	r3, #4
 800cf36:	f1b9 0f00 	cmp.w	r9, #0
 800cf3a:	d020      	beq.n	800cf7e <__multiply+0x142>
 800cf3c:	6829      	ldr	r1, [r5, #0]
 800cf3e:	f104 0c14 	add.w	ip, r4, #20
 800cf42:	46ae      	mov	lr, r5
 800cf44:	f04f 0a00 	mov.w	sl, #0
 800cf48:	f8bc b000 	ldrh.w	fp, [ip]
 800cf4c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf50:	fb09 220b 	mla	r2, r9, fp, r2
 800cf54:	4492      	add	sl, r2
 800cf56:	b289      	uxth	r1, r1
 800cf58:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cf5c:	f84e 1b04 	str.w	r1, [lr], #4
 800cf60:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cf64:	f8be 1000 	ldrh.w	r1, [lr]
 800cf68:	0c12      	lsrs	r2, r2, #16
 800cf6a:	fb09 1102 	mla	r1, r9, r2, r1
 800cf6e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cf72:	4567      	cmp	r7, ip
 800cf74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cf78:	d8e6      	bhi.n	800cf48 <__multiply+0x10c>
 800cf7a:	9a01      	ldr	r2, [sp, #4]
 800cf7c:	50a9      	str	r1, [r5, r2]
 800cf7e:	3504      	adds	r5, #4
 800cf80:	e79a      	b.n	800ceb8 <__multiply+0x7c>
 800cf82:	3e01      	subs	r6, #1
 800cf84:	e79c      	b.n	800cec0 <__multiply+0x84>
 800cf86:	bf00      	nop
 800cf88:	0800f628 	.word	0x0800f628
 800cf8c:	0800f69c 	.word	0x0800f69c

0800cf90 <__pow5mult>:
 800cf90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf94:	4615      	mov	r5, r2
 800cf96:	f012 0203 	ands.w	r2, r2, #3
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	460f      	mov	r7, r1
 800cf9e:	d007      	beq.n	800cfb0 <__pow5mult+0x20>
 800cfa0:	4c25      	ldr	r4, [pc, #148]	; (800d038 <__pow5mult+0xa8>)
 800cfa2:	3a01      	subs	r2, #1
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfaa:	f7ff fe9b 	bl	800cce4 <__multadd>
 800cfae:	4607      	mov	r7, r0
 800cfb0:	10ad      	asrs	r5, r5, #2
 800cfb2:	d03d      	beq.n	800d030 <__pow5mult+0xa0>
 800cfb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cfb6:	b97c      	cbnz	r4, 800cfd8 <__pow5mult+0x48>
 800cfb8:	2010      	movs	r0, #16
 800cfba:	f7fd fe1b 	bl	800abf4 <malloc>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	6270      	str	r0, [r6, #36]	; 0x24
 800cfc2:	b928      	cbnz	r0, 800cfd0 <__pow5mult+0x40>
 800cfc4:	4b1d      	ldr	r3, [pc, #116]	; (800d03c <__pow5mult+0xac>)
 800cfc6:	481e      	ldr	r0, [pc, #120]	; (800d040 <__pow5mult+0xb0>)
 800cfc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cfcc:	f7fe fe6c 	bl	800bca8 <__assert_func>
 800cfd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cfd4:	6004      	str	r4, [r0, #0]
 800cfd6:	60c4      	str	r4, [r0, #12]
 800cfd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cfdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cfe0:	b94c      	cbnz	r4, 800cff6 <__pow5mult+0x66>
 800cfe2:	f240 2171 	movw	r1, #625	; 0x271
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f7ff ff12 	bl	800ce10 <__i2b>
 800cfec:	2300      	movs	r3, #0
 800cfee:	f8c8 0008 	str.w	r0, [r8, #8]
 800cff2:	4604      	mov	r4, r0
 800cff4:	6003      	str	r3, [r0, #0]
 800cff6:	f04f 0900 	mov.w	r9, #0
 800cffa:	07eb      	lsls	r3, r5, #31
 800cffc:	d50a      	bpl.n	800d014 <__pow5mult+0x84>
 800cffe:	4639      	mov	r1, r7
 800d000:	4622      	mov	r2, r4
 800d002:	4630      	mov	r0, r6
 800d004:	f7ff ff1a 	bl	800ce3c <__multiply>
 800d008:	4639      	mov	r1, r7
 800d00a:	4680      	mov	r8, r0
 800d00c:	4630      	mov	r0, r6
 800d00e:	f7ff fe47 	bl	800cca0 <_Bfree>
 800d012:	4647      	mov	r7, r8
 800d014:	106d      	asrs	r5, r5, #1
 800d016:	d00b      	beq.n	800d030 <__pow5mult+0xa0>
 800d018:	6820      	ldr	r0, [r4, #0]
 800d01a:	b938      	cbnz	r0, 800d02c <__pow5mult+0x9c>
 800d01c:	4622      	mov	r2, r4
 800d01e:	4621      	mov	r1, r4
 800d020:	4630      	mov	r0, r6
 800d022:	f7ff ff0b 	bl	800ce3c <__multiply>
 800d026:	6020      	str	r0, [r4, #0]
 800d028:	f8c0 9000 	str.w	r9, [r0]
 800d02c:	4604      	mov	r4, r0
 800d02e:	e7e4      	b.n	800cffa <__pow5mult+0x6a>
 800d030:	4638      	mov	r0, r7
 800d032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d036:	bf00      	nop
 800d038:	0800f7e8 	.word	0x0800f7e8
 800d03c:	0800f5b6 	.word	0x0800f5b6
 800d040:	0800f69c 	.word	0x0800f69c

0800d044 <__lshift>:
 800d044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d048:	460c      	mov	r4, r1
 800d04a:	6849      	ldr	r1, [r1, #4]
 800d04c:	6923      	ldr	r3, [r4, #16]
 800d04e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d052:	68a3      	ldr	r3, [r4, #8]
 800d054:	4607      	mov	r7, r0
 800d056:	4691      	mov	r9, r2
 800d058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d05c:	f108 0601 	add.w	r6, r8, #1
 800d060:	42b3      	cmp	r3, r6
 800d062:	db0b      	blt.n	800d07c <__lshift+0x38>
 800d064:	4638      	mov	r0, r7
 800d066:	f7ff fddb 	bl	800cc20 <_Balloc>
 800d06a:	4605      	mov	r5, r0
 800d06c:	b948      	cbnz	r0, 800d082 <__lshift+0x3e>
 800d06e:	4602      	mov	r2, r0
 800d070:	4b2a      	ldr	r3, [pc, #168]	; (800d11c <__lshift+0xd8>)
 800d072:	482b      	ldr	r0, [pc, #172]	; (800d120 <__lshift+0xdc>)
 800d074:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d078:	f7fe fe16 	bl	800bca8 <__assert_func>
 800d07c:	3101      	adds	r1, #1
 800d07e:	005b      	lsls	r3, r3, #1
 800d080:	e7ee      	b.n	800d060 <__lshift+0x1c>
 800d082:	2300      	movs	r3, #0
 800d084:	f100 0114 	add.w	r1, r0, #20
 800d088:	f100 0210 	add.w	r2, r0, #16
 800d08c:	4618      	mov	r0, r3
 800d08e:	4553      	cmp	r3, sl
 800d090:	db37      	blt.n	800d102 <__lshift+0xbe>
 800d092:	6920      	ldr	r0, [r4, #16]
 800d094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d098:	f104 0314 	add.w	r3, r4, #20
 800d09c:	f019 091f 	ands.w	r9, r9, #31
 800d0a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d0a8:	d02f      	beq.n	800d10a <__lshift+0xc6>
 800d0aa:	f1c9 0e20 	rsb	lr, r9, #32
 800d0ae:	468a      	mov	sl, r1
 800d0b0:	f04f 0c00 	mov.w	ip, #0
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	fa02 f209 	lsl.w	r2, r2, r9
 800d0ba:	ea42 020c 	orr.w	r2, r2, ip
 800d0be:	f84a 2b04 	str.w	r2, [sl], #4
 800d0c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0c6:	4298      	cmp	r0, r3
 800d0c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d0cc:	d8f2      	bhi.n	800d0b4 <__lshift+0x70>
 800d0ce:	1b03      	subs	r3, r0, r4
 800d0d0:	3b15      	subs	r3, #21
 800d0d2:	f023 0303 	bic.w	r3, r3, #3
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	f104 0215 	add.w	r2, r4, #21
 800d0dc:	4290      	cmp	r0, r2
 800d0de:	bf38      	it	cc
 800d0e0:	2304      	movcc	r3, #4
 800d0e2:	f841 c003 	str.w	ip, [r1, r3]
 800d0e6:	f1bc 0f00 	cmp.w	ip, #0
 800d0ea:	d001      	beq.n	800d0f0 <__lshift+0xac>
 800d0ec:	f108 0602 	add.w	r6, r8, #2
 800d0f0:	3e01      	subs	r6, #1
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	612e      	str	r6, [r5, #16]
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	f7ff fdd2 	bl	800cca0 <_Bfree>
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d102:	f842 0f04 	str.w	r0, [r2, #4]!
 800d106:	3301      	adds	r3, #1
 800d108:	e7c1      	b.n	800d08e <__lshift+0x4a>
 800d10a:	3904      	subs	r1, #4
 800d10c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d110:	f841 2f04 	str.w	r2, [r1, #4]!
 800d114:	4298      	cmp	r0, r3
 800d116:	d8f9      	bhi.n	800d10c <__lshift+0xc8>
 800d118:	e7ea      	b.n	800d0f0 <__lshift+0xac>
 800d11a:	bf00      	nop
 800d11c:	0800f628 	.word	0x0800f628
 800d120:	0800f69c 	.word	0x0800f69c

0800d124 <__mcmp>:
 800d124:	b530      	push	{r4, r5, lr}
 800d126:	6902      	ldr	r2, [r0, #16]
 800d128:	690c      	ldr	r4, [r1, #16]
 800d12a:	1b12      	subs	r2, r2, r4
 800d12c:	d10e      	bne.n	800d14c <__mcmp+0x28>
 800d12e:	f100 0314 	add.w	r3, r0, #20
 800d132:	3114      	adds	r1, #20
 800d134:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d138:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d13c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d140:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d144:	42a5      	cmp	r5, r4
 800d146:	d003      	beq.n	800d150 <__mcmp+0x2c>
 800d148:	d305      	bcc.n	800d156 <__mcmp+0x32>
 800d14a:	2201      	movs	r2, #1
 800d14c:	4610      	mov	r0, r2
 800d14e:	bd30      	pop	{r4, r5, pc}
 800d150:	4283      	cmp	r3, r0
 800d152:	d3f3      	bcc.n	800d13c <__mcmp+0x18>
 800d154:	e7fa      	b.n	800d14c <__mcmp+0x28>
 800d156:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d15a:	e7f7      	b.n	800d14c <__mcmp+0x28>

0800d15c <__mdiff>:
 800d15c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d160:	460c      	mov	r4, r1
 800d162:	4606      	mov	r6, r0
 800d164:	4611      	mov	r1, r2
 800d166:	4620      	mov	r0, r4
 800d168:	4690      	mov	r8, r2
 800d16a:	f7ff ffdb 	bl	800d124 <__mcmp>
 800d16e:	1e05      	subs	r5, r0, #0
 800d170:	d110      	bne.n	800d194 <__mdiff+0x38>
 800d172:	4629      	mov	r1, r5
 800d174:	4630      	mov	r0, r6
 800d176:	f7ff fd53 	bl	800cc20 <_Balloc>
 800d17a:	b930      	cbnz	r0, 800d18a <__mdiff+0x2e>
 800d17c:	4b3a      	ldr	r3, [pc, #232]	; (800d268 <__mdiff+0x10c>)
 800d17e:	4602      	mov	r2, r0
 800d180:	f240 2132 	movw	r1, #562	; 0x232
 800d184:	4839      	ldr	r0, [pc, #228]	; (800d26c <__mdiff+0x110>)
 800d186:	f7fe fd8f 	bl	800bca8 <__assert_func>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d194:	bfa4      	itt	ge
 800d196:	4643      	movge	r3, r8
 800d198:	46a0      	movge	r8, r4
 800d19a:	4630      	mov	r0, r6
 800d19c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d1a0:	bfa6      	itte	ge
 800d1a2:	461c      	movge	r4, r3
 800d1a4:	2500      	movge	r5, #0
 800d1a6:	2501      	movlt	r5, #1
 800d1a8:	f7ff fd3a 	bl	800cc20 <_Balloc>
 800d1ac:	b920      	cbnz	r0, 800d1b8 <__mdiff+0x5c>
 800d1ae:	4b2e      	ldr	r3, [pc, #184]	; (800d268 <__mdiff+0x10c>)
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d1b6:	e7e5      	b.n	800d184 <__mdiff+0x28>
 800d1b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d1bc:	6926      	ldr	r6, [r4, #16]
 800d1be:	60c5      	str	r5, [r0, #12]
 800d1c0:	f104 0914 	add.w	r9, r4, #20
 800d1c4:	f108 0514 	add.w	r5, r8, #20
 800d1c8:	f100 0e14 	add.w	lr, r0, #20
 800d1cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d1d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d1d4:	f108 0210 	add.w	r2, r8, #16
 800d1d8:	46f2      	mov	sl, lr
 800d1da:	2100      	movs	r1, #0
 800d1dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d1e4:	fa1f f883 	uxth.w	r8, r3
 800d1e8:	fa11 f18b 	uxtah	r1, r1, fp
 800d1ec:	0c1b      	lsrs	r3, r3, #16
 800d1ee:	eba1 0808 	sub.w	r8, r1, r8
 800d1f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d1f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d1fa:	fa1f f888 	uxth.w	r8, r8
 800d1fe:	1419      	asrs	r1, r3, #16
 800d200:	454e      	cmp	r6, r9
 800d202:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d206:	f84a 3b04 	str.w	r3, [sl], #4
 800d20a:	d8e7      	bhi.n	800d1dc <__mdiff+0x80>
 800d20c:	1b33      	subs	r3, r6, r4
 800d20e:	3b15      	subs	r3, #21
 800d210:	f023 0303 	bic.w	r3, r3, #3
 800d214:	3304      	adds	r3, #4
 800d216:	3415      	adds	r4, #21
 800d218:	42a6      	cmp	r6, r4
 800d21a:	bf38      	it	cc
 800d21c:	2304      	movcc	r3, #4
 800d21e:	441d      	add	r5, r3
 800d220:	4473      	add	r3, lr
 800d222:	469e      	mov	lr, r3
 800d224:	462e      	mov	r6, r5
 800d226:	4566      	cmp	r6, ip
 800d228:	d30e      	bcc.n	800d248 <__mdiff+0xec>
 800d22a:	f10c 0203 	add.w	r2, ip, #3
 800d22e:	1b52      	subs	r2, r2, r5
 800d230:	f022 0203 	bic.w	r2, r2, #3
 800d234:	3d03      	subs	r5, #3
 800d236:	45ac      	cmp	ip, r5
 800d238:	bf38      	it	cc
 800d23a:	2200      	movcc	r2, #0
 800d23c:	441a      	add	r2, r3
 800d23e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d242:	b17b      	cbz	r3, 800d264 <__mdiff+0x108>
 800d244:	6107      	str	r7, [r0, #16]
 800d246:	e7a3      	b.n	800d190 <__mdiff+0x34>
 800d248:	f856 8b04 	ldr.w	r8, [r6], #4
 800d24c:	fa11 f288 	uxtah	r2, r1, r8
 800d250:	1414      	asrs	r4, r2, #16
 800d252:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d256:	b292      	uxth	r2, r2
 800d258:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d25c:	f84e 2b04 	str.w	r2, [lr], #4
 800d260:	1421      	asrs	r1, r4, #16
 800d262:	e7e0      	b.n	800d226 <__mdiff+0xca>
 800d264:	3f01      	subs	r7, #1
 800d266:	e7ea      	b.n	800d23e <__mdiff+0xe2>
 800d268:	0800f628 	.word	0x0800f628
 800d26c:	0800f69c 	.word	0x0800f69c

0800d270 <__d2b>:
 800d270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d274:	4689      	mov	r9, r1
 800d276:	2101      	movs	r1, #1
 800d278:	ec57 6b10 	vmov	r6, r7, d0
 800d27c:	4690      	mov	r8, r2
 800d27e:	f7ff fccf 	bl	800cc20 <_Balloc>
 800d282:	4604      	mov	r4, r0
 800d284:	b930      	cbnz	r0, 800d294 <__d2b+0x24>
 800d286:	4602      	mov	r2, r0
 800d288:	4b25      	ldr	r3, [pc, #148]	; (800d320 <__d2b+0xb0>)
 800d28a:	4826      	ldr	r0, [pc, #152]	; (800d324 <__d2b+0xb4>)
 800d28c:	f240 310a 	movw	r1, #778	; 0x30a
 800d290:	f7fe fd0a 	bl	800bca8 <__assert_func>
 800d294:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d298:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d29c:	bb35      	cbnz	r5, 800d2ec <__d2b+0x7c>
 800d29e:	2e00      	cmp	r6, #0
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	d028      	beq.n	800d2f6 <__d2b+0x86>
 800d2a4:	4668      	mov	r0, sp
 800d2a6:	9600      	str	r6, [sp, #0]
 800d2a8:	f7ff fd82 	bl	800cdb0 <__lo0bits>
 800d2ac:	9900      	ldr	r1, [sp, #0]
 800d2ae:	b300      	cbz	r0, 800d2f2 <__d2b+0x82>
 800d2b0:	9a01      	ldr	r2, [sp, #4]
 800d2b2:	f1c0 0320 	rsb	r3, r0, #32
 800d2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ba:	430b      	orrs	r3, r1
 800d2bc:	40c2      	lsrs	r2, r0
 800d2be:	6163      	str	r3, [r4, #20]
 800d2c0:	9201      	str	r2, [sp, #4]
 800d2c2:	9b01      	ldr	r3, [sp, #4]
 800d2c4:	61a3      	str	r3, [r4, #24]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	bf14      	ite	ne
 800d2ca:	2202      	movne	r2, #2
 800d2cc:	2201      	moveq	r2, #1
 800d2ce:	6122      	str	r2, [r4, #16]
 800d2d0:	b1d5      	cbz	r5, 800d308 <__d2b+0x98>
 800d2d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2d6:	4405      	add	r5, r0
 800d2d8:	f8c9 5000 	str.w	r5, [r9]
 800d2dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2e0:	f8c8 0000 	str.w	r0, [r8]
 800d2e4:	4620      	mov	r0, r4
 800d2e6:	b003      	add	sp, #12
 800d2e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2f0:	e7d5      	b.n	800d29e <__d2b+0x2e>
 800d2f2:	6161      	str	r1, [r4, #20]
 800d2f4:	e7e5      	b.n	800d2c2 <__d2b+0x52>
 800d2f6:	a801      	add	r0, sp, #4
 800d2f8:	f7ff fd5a 	bl	800cdb0 <__lo0bits>
 800d2fc:	9b01      	ldr	r3, [sp, #4]
 800d2fe:	6163      	str	r3, [r4, #20]
 800d300:	2201      	movs	r2, #1
 800d302:	6122      	str	r2, [r4, #16]
 800d304:	3020      	adds	r0, #32
 800d306:	e7e3      	b.n	800d2d0 <__d2b+0x60>
 800d308:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d30c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d310:	f8c9 0000 	str.w	r0, [r9]
 800d314:	6918      	ldr	r0, [r3, #16]
 800d316:	f7ff fd2b 	bl	800cd70 <__hi0bits>
 800d31a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d31e:	e7df      	b.n	800d2e0 <__d2b+0x70>
 800d320:	0800f628 	.word	0x0800f628
 800d324:	0800f69c 	.word	0x0800f69c

0800d328 <_realloc_r>:
 800d328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d32c:	4680      	mov	r8, r0
 800d32e:	4614      	mov	r4, r2
 800d330:	460e      	mov	r6, r1
 800d332:	b921      	cbnz	r1, 800d33e <_realloc_r+0x16>
 800d334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d338:	4611      	mov	r1, r2
 800d33a:	f7fd bd5b 	b.w	800adf4 <_malloc_r>
 800d33e:	b92a      	cbnz	r2, 800d34c <_realloc_r+0x24>
 800d340:	f7fd fcb8 	bl	800acb4 <_free_r>
 800d344:	4625      	mov	r5, r4
 800d346:	4628      	mov	r0, r5
 800d348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34c:	f000 fbe6 	bl	800db1c <_malloc_usable_size_r>
 800d350:	4284      	cmp	r4, r0
 800d352:	4607      	mov	r7, r0
 800d354:	d802      	bhi.n	800d35c <_realloc_r+0x34>
 800d356:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d35a:	d812      	bhi.n	800d382 <_realloc_r+0x5a>
 800d35c:	4621      	mov	r1, r4
 800d35e:	4640      	mov	r0, r8
 800d360:	f7fd fd48 	bl	800adf4 <_malloc_r>
 800d364:	4605      	mov	r5, r0
 800d366:	2800      	cmp	r0, #0
 800d368:	d0ed      	beq.n	800d346 <_realloc_r+0x1e>
 800d36a:	42bc      	cmp	r4, r7
 800d36c:	4622      	mov	r2, r4
 800d36e:	4631      	mov	r1, r6
 800d370:	bf28      	it	cs
 800d372:	463a      	movcs	r2, r7
 800d374:	f7fd fc4e 	bl	800ac14 <memcpy>
 800d378:	4631      	mov	r1, r6
 800d37a:	4640      	mov	r0, r8
 800d37c:	f7fd fc9a 	bl	800acb4 <_free_r>
 800d380:	e7e1      	b.n	800d346 <_realloc_r+0x1e>
 800d382:	4635      	mov	r5, r6
 800d384:	e7df      	b.n	800d346 <_realloc_r+0x1e>

0800d386 <__sfputc_r>:
 800d386:	6893      	ldr	r3, [r2, #8]
 800d388:	3b01      	subs	r3, #1
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	b410      	push	{r4}
 800d38e:	6093      	str	r3, [r2, #8]
 800d390:	da08      	bge.n	800d3a4 <__sfputc_r+0x1e>
 800d392:	6994      	ldr	r4, [r2, #24]
 800d394:	42a3      	cmp	r3, r4
 800d396:	db01      	blt.n	800d39c <__sfputc_r+0x16>
 800d398:	290a      	cmp	r1, #10
 800d39a:	d103      	bne.n	800d3a4 <__sfputc_r+0x1e>
 800d39c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3a0:	f000 b98e 	b.w	800d6c0 <__swbuf_r>
 800d3a4:	6813      	ldr	r3, [r2, #0]
 800d3a6:	1c58      	adds	r0, r3, #1
 800d3a8:	6010      	str	r0, [r2, #0]
 800d3aa:	7019      	strb	r1, [r3, #0]
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d3b2:	4770      	bx	lr

0800d3b4 <__sfputs_r>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460f      	mov	r7, r1
 800d3ba:	4614      	mov	r4, r2
 800d3bc:	18d5      	adds	r5, r2, r3
 800d3be:	42ac      	cmp	r4, r5
 800d3c0:	d101      	bne.n	800d3c6 <__sfputs_r+0x12>
 800d3c2:	2000      	movs	r0, #0
 800d3c4:	e007      	b.n	800d3d6 <__sfputs_r+0x22>
 800d3c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ca:	463a      	mov	r2, r7
 800d3cc:	4630      	mov	r0, r6
 800d3ce:	f7ff ffda 	bl	800d386 <__sfputc_r>
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	d1f3      	bne.n	800d3be <__sfputs_r+0xa>
 800d3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3d8 <_vfiprintf_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	460d      	mov	r5, r1
 800d3de:	b09d      	sub	sp, #116	; 0x74
 800d3e0:	4614      	mov	r4, r2
 800d3e2:	4698      	mov	r8, r3
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	b118      	cbz	r0, 800d3f0 <_vfiprintf_r+0x18>
 800d3e8:	6983      	ldr	r3, [r0, #24]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <_vfiprintf_r+0x18>
 800d3ec:	f7ff fb54 	bl	800ca98 <__sinit>
 800d3f0:	4b89      	ldr	r3, [pc, #548]	; (800d618 <_vfiprintf_r+0x240>)
 800d3f2:	429d      	cmp	r5, r3
 800d3f4:	d11b      	bne.n	800d42e <_vfiprintf_r+0x56>
 800d3f6:	6875      	ldr	r5, [r6, #4]
 800d3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fa:	07d9      	lsls	r1, r3, #31
 800d3fc:	d405      	bmi.n	800d40a <_vfiprintf_r+0x32>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	059a      	lsls	r2, r3, #22
 800d402:	d402      	bmi.n	800d40a <_vfiprintf_r+0x32>
 800d404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d406:	f7ff fbfc 	bl	800cc02 <__retarget_lock_acquire_recursive>
 800d40a:	89ab      	ldrh	r3, [r5, #12]
 800d40c:	071b      	lsls	r3, r3, #28
 800d40e:	d501      	bpl.n	800d414 <_vfiprintf_r+0x3c>
 800d410:	692b      	ldr	r3, [r5, #16]
 800d412:	b9eb      	cbnz	r3, 800d450 <_vfiprintf_r+0x78>
 800d414:	4629      	mov	r1, r5
 800d416:	4630      	mov	r0, r6
 800d418:	f000 f9b6 	bl	800d788 <__swsetup_r>
 800d41c:	b1c0      	cbz	r0, 800d450 <_vfiprintf_r+0x78>
 800d41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d420:	07dc      	lsls	r4, r3, #31
 800d422:	d50e      	bpl.n	800d442 <_vfiprintf_r+0x6a>
 800d424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d428:	b01d      	add	sp, #116	; 0x74
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	4b7b      	ldr	r3, [pc, #492]	; (800d61c <_vfiprintf_r+0x244>)
 800d430:	429d      	cmp	r5, r3
 800d432:	d101      	bne.n	800d438 <_vfiprintf_r+0x60>
 800d434:	68b5      	ldr	r5, [r6, #8]
 800d436:	e7df      	b.n	800d3f8 <_vfiprintf_r+0x20>
 800d438:	4b79      	ldr	r3, [pc, #484]	; (800d620 <_vfiprintf_r+0x248>)
 800d43a:	429d      	cmp	r5, r3
 800d43c:	bf08      	it	eq
 800d43e:	68f5      	ldreq	r5, [r6, #12]
 800d440:	e7da      	b.n	800d3f8 <_vfiprintf_r+0x20>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	0598      	lsls	r0, r3, #22
 800d446:	d4ed      	bmi.n	800d424 <_vfiprintf_r+0x4c>
 800d448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44a:	f7ff fbdb 	bl	800cc04 <__retarget_lock_release_recursive>
 800d44e:	e7e9      	b.n	800d424 <_vfiprintf_r+0x4c>
 800d450:	2300      	movs	r3, #0
 800d452:	9309      	str	r3, [sp, #36]	; 0x24
 800d454:	2320      	movs	r3, #32
 800d456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d45e:	2330      	movs	r3, #48	; 0x30
 800d460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d624 <_vfiprintf_r+0x24c>
 800d464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d468:	f04f 0901 	mov.w	r9, #1
 800d46c:	4623      	mov	r3, r4
 800d46e:	469a      	mov	sl, r3
 800d470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d474:	b10a      	cbz	r2, 800d47a <_vfiprintf_r+0xa2>
 800d476:	2a25      	cmp	r2, #37	; 0x25
 800d478:	d1f9      	bne.n	800d46e <_vfiprintf_r+0x96>
 800d47a:	ebba 0b04 	subs.w	fp, sl, r4
 800d47e:	d00b      	beq.n	800d498 <_vfiprintf_r+0xc0>
 800d480:	465b      	mov	r3, fp
 800d482:	4622      	mov	r2, r4
 800d484:	4629      	mov	r1, r5
 800d486:	4630      	mov	r0, r6
 800d488:	f7ff ff94 	bl	800d3b4 <__sfputs_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	f000 80aa 	beq.w	800d5e6 <_vfiprintf_r+0x20e>
 800d492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d494:	445a      	add	r2, fp
 800d496:	9209      	str	r2, [sp, #36]	; 0x24
 800d498:	f89a 3000 	ldrb.w	r3, [sl]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 80a2 	beq.w	800d5e6 <_vfiprintf_r+0x20e>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ac:	f10a 0a01 	add.w	sl, sl, #1
 800d4b0:	9304      	str	r3, [sp, #16]
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ba:	4654      	mov	r4, sl
 800d4bc:	2205      	movs	r2, #5
 800d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c2:	4858      	ldr	r0, [pc, #352]	; (800d624 <_vfiprintf_r+0x24c>)
 800d4c4:	f7f2 feac 	bl	8000220 <memchr>
 800d4c8:	9a04      	ldr	r2, [sp, #16]
 800d4ca:	b9d8      	cbnz	r0, 800d504 <_vfiprintf_r+0x12c>
 800d4cc:	06d1      	lsls	r1, r2, #27
 800d4ce:	bf44      	itt	mi
 800d4d0:	2320      	movmi	r3, #32
 800d4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d6:	0713      	lsls	r3, r2, #28
 800d4d8:	bf44      	itt	mi
 800d4da:	232b      	movmi	r3, #43	; 0x2b
 800d4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4e6:	d015      	beq.n	800d514 <_vfiprintf_r+0x13c>
 800d4e8:	9a07      	ldr	r2, [sp, #28]
 800d4ea:	4654      	mov	r4, sl
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f04f 0c0a 	mov.w	ip, #10
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f8:	3b30      	subs	r3, #48	; 0x30
 800d4fa:	2b09      	cmp	r3, #9
 800d4fc:	d94e      	bls.n	800d59c <_vfiprintf_r+0x1c4>
 800d4fe:	b1b0      	cbz	r0, 800d52e <_vfiprintf_r+0x156>
 800d500:	9207      	str	r2, [sp, #28]
 800d502:	e014      	b.n	800d52e <_vfiprintf_r+0x156>
 800d504:	eba0 0308 	sub.w	r3, r0, r8
 800d508:	fa09 f303 	lsl.w	r3, r9, r3
 800d50c:	4313      	orrs	r3, r2
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	46a2      	mov	sl, r4
 800d512:	e7d2      	b.n	800d4ba <_vfiprintf_r+0xe2>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	1d19      	adds	r1, r3, #4
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	9103      	str	r1, [sp, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bfbb      	ittet	lt
 800d520:	425b      	neglt	r3, r3
 800d522:	f042 0202 	orrlt.w	r2, r2, #2
 800d526:	9307      	strge	r3, [sp, #28]
 800d528:	9307      	strlt	r3, [sp, #28]
 800d52a:	bfb8      	it	lt
 800d52c:	9204      	strlt	r2, [sp, #16]
 800d52e:	7823      	ldrb	r3, [r4, #0]
 800d530:	2b2e      	cmp	r3, #46	; 0x2e
 800d532:	d10c      	bne.n	800d54e <_vfiprintf_r+0x176>
 800d534:	7863      	ldrb	r3, [r4, #1]
 800d536:	2b2a      	cmp	r3, #42	; 0x2a
 800d538:	d135      	bne.n	800d5a6 <_vfiprintf_r+0x1ce>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	1d1a      	adds	r2, r3, #4
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	9203      	str	r2, [sp, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	bfb8      	it	lt
 800d546:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d54a:	3402      	adds	r4, #2
 800d54c:	9305      	str	r3, [sp, #20]
 800d54e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d634 <_vfiprintf_r+0x25c>
 800d552:	7821      	ldrb	r1, [r4, #0]
 800d554:	2203      	movs	r2, #3
 800d556:	4650      	mov	r0, sl
 800d558:	f7f2 fe62 	bl	8000220 <memchr>
 800d55c:	b140      	cbz	r0, 800d570 <_vfiprintf_r+0x198>
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	eba0 000a 	sub.w	r0, r0, sl
 800d564:	fa03 f000 	lsl.w	r0, r3, r0
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	4303      	orrs	r3, r0
 800d56c:	3401      	adds	r4, #1
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	482c      	ldr	r0, [pc, #176]	; (800d628 <_vfiprintf_r+0x250>)
 800d576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d57a:	2206      	movs	r2, #6
 800d57c:	f7f2 fe50 	bl	8000220 <memchr>
 800d580:	2800      	cmp	r0, #0
 800d582:	d03f      	beq.n	800d604 <_vfiprintf_r+0x22c>
 800d584:	4b29      	ldr	r3, [pc, #164]	; (800d62c <_vfiprintf_r+0x254>)
 800d586:	bb1b      	cbnz	r3, 800d5d0 <_vfiprintf_r+0x1f8>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	3307      	adds	r3, #7
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	3308      	adds	r3, #8
 800d592:	9303      	str	r3, [sp, #12]
 800d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d596:	443b      	add	r3, r7
 800d598:	9309      	str	r3, [sp, #36]	; 0x24
 800d59a:	e767      	b.n	800d46c <_vfiprintf_r+0x94>
 800d59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	e7a5      	b.n	800d4f2 <_vfiprintf_r+0x11a>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	3401      	adds	r4, #1
 800d5aa:	9305      	str	r3, [sp, #20]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f04f 0c0a 	mov.w	ip, #10
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b8:	3a30      	subs	r2, #48	; 0x30
 800d5ba:	2a09      	cmp	r2, #9
 800d5bc:	d903      	bls.n	800d5c6 <_vfiprintf_r+0x1ee>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0c5      	beq.n	800d54e <_vfiprintf_r+0x176>
 800d5c2:	9105      	str	r1, [sp, #20]
 800d5c4:	e7c3      	b.n	800d54e <_vfiprintf_r+0x176>
 800d5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e7f0      	b.n	800d5b2 <_vfiprintf_r+0x1da>
 800d5d0:	ab03      	add	r3, sp, #12
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4b16      	ldr	r3, [pc, #88]	; (800d630 <_vfiprintf_r+0x258>)
 800d5d8:	a904      	add	r1, sp, #16
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7fd fe7a 	bl	800b2d4 <_printf_float>
 800d5e0:	4607      	mov	r7, r0
 800d5e2:	1c78      	adds	r0, r7, #1
 800d5e4:	d1d6      	bne.n	800d594 <_vfiprintf_r+0x1bc>
 800d5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5e8:	07d9      	lsls	r1, r3, #31
 800d5ea:	d405      	bmi.n	800d5f8 <_vfiprintf_r+0x220>
 800d5ec:	89ab      	ldrh	r3, [r5, #12]
 800d5ee:	059a      	lsls	r2, r3, #22
 800d5f0:	d402      	bmi.n	800d5f8 <_vfiprintf_r+0x220>
 800d5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5f4:	f7ff fb06 	bl	800cc04 <__retarget_lock_release_recursive>
 800d5f8:	89ab      	ldrh	r3, [r5, #12]
 800d5fa:	065b      	lsls	r3, r3, #25
 800d5fc:	f53f af12 	bmi.w	800d424 <_vfiprintf_r+0x4c>
 800d600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d602:	e711      	b.n	800d428 <_vfiprintf_r+0x50>
 800d604:	ab03      	add	r3, sp, #12
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	462a      	mov	r2, r5
 800d60a:	4b09      	ldr	r3, [pc, #36]	; (800d630 <_vfiprintf_r+0x258>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	4630      	mov	r0, r6
 800d610:	f7fe f904 	bl	800b81c <_printf_i>
 800d614:	e7e4      	b.n	800d5e0 <_vfiprintf_r+0x208>
 800d616:	bf00      	nop
 800d618:	0800f65c 	.word	0x0800f65c
 800d61c:	0800f67c 	.word	0x0800f67c
 800d620:	0800f63c 	.word	0x0800f63c
 800d624:	0800f528 	.word	0x0800f528
 800d628:	0800f532 	.word	0x0800f532
 800d62c:	0800b2d5 	.word	0x0800b2d5
 800d630:	0800d3b5 	.word	0x0800d3b5
 800d634:	0800f52e 	.word	0x0800f52e

0800d638 <__sread>:
 800d638:	b510      	push	{r4, lr}
 800d63a:	460c      	mov	r4, r1
 800d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d640:	f000 fa74 	bl	800db2c <_read_r>
 800d644:	2800      	cmp	r0, #0
 800d646:	bfab      	itete	ge
 800d648:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d64a:	89a3      	ldrhlt	r3, [r4, #12]
 800d64c:	181b      	addge	r3, r3, r0
 800d64e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d652:	bfac      	ite	ge
 800d654:	6563      	strge	r3, [r4, #84]	; 0x54
 800d656:	81a3      	strhlt	r3, [r4, #12]
 800d658:	bd10      	pop	{r4, pc}

0800d65a <__swrite>:
 800d65a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d65e:	461f      	mov	r7, r3
 800d660:	898b      	ldrh	r3, [r1, #12]
 800d662:	05db      	lsls	r3, r3, #23
 800d664:	4605      	mov	r5, r0
 800d666:	460c      	mov	r4, r1
 800d668:	4616      	mov	r6, r2
 800d66a:	d505      	bpl.n	800d678 <__swrite+0x1e>
 800d66c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d670:	2302      	movs	r3, #2
 800d672:	2200      	movs	r2, #0
 800d674:	f000 f9c8 	bl	800da08 <_lseek_r>
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d67e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	4632      	mov	r2, r6
 800d686:	463b      	mov	r3, r7
 800d688:	4628      	mov	r0, r5
 800d68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d68e:	f000 b869 	b.w	800d764 <_write_r>

0800d692 <__sseek>:
 800d692:	b510      	push	{r4, lr}
 800d694:	460c      	mov	r4, r1
 800d696:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d69a:	f000 f9b5 	bl	800da08 <_lseek_r>
 800d69e:	1c43      	adds	r3, r0, #1
 800d6a0:	89a3      	ldrh	r3, [r4, #12]
 800d6a2:	bf15      	itete	ne
 800d6a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d6a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d6aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d6ae:	81a3      	strheq	r3, [r4, #12]
 800d6b0:	bf18      	it	ne
 800d6b2:	81a3      	strhne	r3, [r4, #12]
 800d6b4:	bd10      	pop	{r4, pc}

0800d6b6 <__sclose>:
 800d6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6ba:	f000 b8d3 	b.w	800d864 <_close_r>
	...

0800d6c0 <__swbuf_r>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	460e      	mov	r6, r1
 800d6c4:	4614      	mov	r4, r2
 800d6c6:	4605      	mov	r5, r0
 800d6c8:	b118      	cbz	r0, 800d6d2 <__swbuf_r+0x12>
 800d6ca:	6983      	ldr	r3, [r0, #24]
 800d6cc:	b90b      	cbnz	r3, 800d6d2 <__swbuf_r+0x12>
 800d6ce:	f7ff f9e3 	bl	800ca98 <__sinit>
 800d6d2:	4b21      	ldr	r3, [pc, #132]	; (800d758 <__swbuf_r+0x98>)
 800d6d4:	429c      	cmp	r4, r3
 800d6d6:	d12b      	bne.n	800d730 <__swbuf_r+0x70>
 800d6d8:	686c      	ldr	r4, [r5, #4]
 800d6da:	69a3      	ldr	r3, [r4, #24]
 800d6dc:	60a3      	str	r3, [r4, #8]
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	071a      	lsls	r2, r3, #28
 800d6e2:	d52f      	bpl.n	800d744 <__swbuf_r+0x84>
 800d6e4:	6923      	ldr	r3, [r4, #16]
 800d6e6:	b36b      	cbz	r3, 800d744 <__swbuf_r+0x84>
 800d6e8:	6923      	ldr	r3, [r4, #16]
 800d6ea:	6820      	ldr	r0, [r4, #0]
 800d6ec:	1ac0      	subs	r0, r0, r3
 800d6ee:	6963      	ldr	r3, [r4, #20]
 800d6f0:	b2f6      	uxtb	r6, r6
 800d6f2:	4283      	cmp	r3, r0
 800d6f4:	4637      	mov	r7, r6
 800d6f6:	dc04      	bgt.n	800d702 <__swbuf_r+0x42>
 800d6f8:	4621      	mov	r1, r4
 800d6fa:	4628      	mov	r0, r5
 800d6fc:	f000 f948 	bl	800d990 <_fflush_r>
 800d700:	bb30      	cbnz	r0, 800d750 <__swbuf_r+0x90>
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	3b01      	subs	r3, #1
 800d706:	60a3      	str	r3, [r4, #8]
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	1c5a      	adds	r2, r3, #1
 800d70c:	6022      	str	r2, [r4, #0]
 800d70e:	701e      	strb	r6, [r3, #0]
 800d710:	6963      	ldr	r3, [r4, #20]
 800d712:	3001      	adds	r0, #1
 800d714:	4283      	cmp	r3, r0
 800d716:	d004      	beq.n	800d722 <__swbuf_r+0x62>
 800d718:	89a3      	ldrh	r3, [r4, #12]
 800d71a:	07db      	lsls	r3, r3, #31
 800d71c:	d506      	bpl.n	800d72c <__swbuf_r+0x6c>
 800d71e:	2e0a      	cmp	r6, #10
 800d720:	d104      	bne.n	800d72c <__swbuf_r+0x6c>
 800d722:	4621      	mov	r1, r4
 800d724:	4628      	mov	r0, r5
 800d726:	f000 f933 	bl	800d990 <_fflush_r>
 800d72a:	b988      	cbnz	r0, 800d750 <__swbuf_r+0x90>
 800d72c:	4638      	mov	r0, r7
 800d72e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d730:	4b0a      	ldr	r3, [pc, #40]	; (800d75c <__swbuf_r+0x9c>)
 800d732:	429c      	cmp	r4, r3
 800d734:	d101      	bne.n	800d73a <__swbuf_r+0x7a>
 800d736:	68ac      	ldr	r4, [r5, #8]
 800d738:	e7cf      	b.n	800d6da <__swbuf_r+0x1a>
 800d73a:	4b09      	ldr	r3, [pc, #36]	; (800d760 <__swbuf_r+0xa0>)
 800d73c:	429c      	cmp	r4, r3
 800d73e:	bf08      	it	eq
 800d740:	68ec      	ldreq	r4, [r5, #12]
 800d742:	e7ca      	b.n	800d6da <__swbuf_r+0x1a>
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f000 f81e 	bl	800d788 <__swsetup_r>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	d0cb      	beq.n	800d6e8 <__swbuf_r+0x28>
 800d750:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d754:	e7ea      	b.n	800d72c <__swbuf_r+0x6c>
 800d756:	bf00      	nop
 800d758:	0800f65c 	.word	0x0800f65c
 800d75c:	0800f67c 	.word	0x0800f67c
 800d760:	0800f63c 	.word	0x0800f63c

0800d764 <_write_r>:
 800d764:	b538      	push	{r3, r4, r5, lr}
 800d766:	4d07      	ldr	r5, [pc, #28]	; (800d784 <_write_r+0x20>)
 800d768:	4604      	mov	r4, r0
 800d76a:	4608      	mov	r0, r1
 800d76c:	4611      	mov	r1, r2
 800d76e:	2200      	movs	r2, #0
 800d770:	602a      	str	r2, [r5, #0]
 800d772:	461a      	mov	r2, r3
 800d774:	f7f3 fcde 	bl	8001134 <_write>
 800d778:	1c43      	adds	r3, r0, #1
 800d77a:	d102      	bne.n	800d782 <_write_r+0x1e>
 800d77c:	682b      	ldr	r3, [r5, #0]
 800d77e:	b103      	cbz	r3, 800d782 <_write_r+0x1e>
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	bd38      	pop	{r3, r4, r5, pc}
 800d784:	2000b248 	.word	0x2000b248

0800d788 <__swsetup_r>:
 800d788:	4b32      	ldr	r3, [pc, #200]	; (800d854 <__swsetup_r+0xcc>)
 800d78a:	b570      	push	{r4, r5, r6, lr}
 800d78c:	681d      	ldr	r5, [r3, #0]
 800d78e:	4606      	mov	r6, r0
 800d790:	460c      	mov	r4, r1
 800d792:	b125      	cbz	r5, 800d79e <__swsetup_r+0x16>
 800d794:	69ab      	ldr	r3, [r5, #24]
 800d796:	b913      	cbnz	r3, 800d79e <__swsetup_r+0x16>
 800d798:	4628      	mov	r0, r5
 800d79a:	f7ff f97d 	bl	800ca98 <__sinit>
 800d79e:	4b2e      	ldr	r3, [pc, #184]	; (800d858 <__swsetup_r+0xd0>)
 800d7a0:	429c      	cmp	r4, r3
 800d7a2:	d10f      	bne.n	800d7c4 <__swsetup_r+0x3c>
 800d7a4:	686c      	ldr	r4, [r5, #4]
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7ac:	0719      	lsls	r1, r3, #28
 800d7ae:	d42c      	bmi.n	800d80a <__swsetup_r+0x82>
 800d7b0:	06dd      	lsls	r5, r3, #27
 800d7b2:	d411      	bmi.n	800d7d8 <__swsetup_r+0x50>
 800d7b4:	2309      	movs	r3, #9
 800d7b6:	6033      	str	r3, [r6, #0]
 800d7b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d7bc:	81a3      	strh	r3, [r4, #12]
 800d7be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7c2:	e03e      	b.n	800d842 <__swsetup_r+0xba>
 800d7c4:	4b25      	ldr	r3, [pc, #148]	; (800d85c <__swsetup_r+0xd4>)
 800d7c6:	429c      	cmp	r4, r3
 800d7c8:	d101      	bne.n	800d7ce <__swsetup_r+0x46>
 800d7ca:	68ac      	ldr	r4, [r5, #8]
 800d7cc:	e7eb      	b.n	800d7a6 <__swsetup_r+0x1e>
 800d7ce:	4b24      	ldr	r3, [pc, #144]	; (800d860 <__swsetup_r+0xd8>)
 800d7d0:	429c      	cmp	r4, r3
 800d7d2:	bf08      	it	eq
 800d7d4:	68ec      	ldreq	r4, [r5, #12]
 800d7d6:	e7e6      	b.n	800d7a6 <__swsetup_r+0x1e>
 800d7d8:	0758      	lsls	r0, r3, #29
 800d7da:	d512      	bpl.n	800d802 <__swsetup_r+0x7a>
 800d7dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d7de:	b141      	cbz	r1, 800d7f2 <__swsetup_r+0x6a>
 800d7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d7e4:	4299      	cmp	r1, r3
 800d7e6:	d002      	beq.n	800d7ee <__swsetup_r+0x66>
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	f7fd fa63 	bl	800acb4 <_free_r>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	6363      	str	r3, [r4, #52]	; 0x34
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d7f8:	81a3      	strh	r3, [r4, #12]
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	6063      	str	r3, [r4, #4]
 800d7fe:	6923      	ldr	r3, [r4, #16]
 800d800:	6023      	str	r3, [r4, #0]
 800d802:	89a3      	ldrh	r3, [r4, #12]
 800d804:	f043 0308 	orr.w	r3, r3, #8
 800d808:	81a3      	strh	r3, [r4, #12]
 800d80a:	6923      	ldr	r3, [r4, #16]
 800d80c:	b94b      	cbnz	r3, 800d822 <__swsetup_r+0x9a>
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d818:	d003      	beq.n	800d822 <__swsetup_r+0x9a>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4630      	mov	r0, r6
 800d81e:	f000 f92b 	bl	800da78 <__smakebuf_r>
 800d822:	89a0      	ldrh	r0, [r4, #12]
 800d824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d828:	f010 0301 	ands.w	r3, r0, #1
 800d82c:	d00a      	beq.n	800d844 <__swsetup_r+0xbc>
 800d82e:	2300      	movs	r3, #0
 800d830:	60a3      	str	r3, [r4, #8]
 800d832:	6963      	ldr	r3, [r4, #20]
 800d834:	425b      	negs	r3, r3
 800d836:	61a3      	str	r3, [r4, #24]
 800d838:	6923      	ldr	r3, [r4, #16]
 800d83a:	b943      	cbnz	r3, 800d84e <__swsetup_r+0xc6>
 800d83c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d840:	d1ba      	bne.n	800d7b8 <__swsetup_r+0x30>
 800d842:	bd70      	pop	{r4, r5, r6, pc}
 800d844:	0781      	lsls	r1, r0, #30
 800d846:	bf58      	it	pl
 800d848:	6963      	ldrpl	r3, [r4, #20]
 800d84a:	60a3      	str	r3, [r4, #8]
 800d84c:	e7f4      	b.n	800d838 <__swsetup_r+0xb0>
 800d84e:	2000      	movs	r0, #0
 800d850:	e7f7      	b.n	800d842 <__swsetup_r+0xba>
 800d852:	bf00      	nop
 800d854:	2000016c 	.word	0x2000016c
 800d858:	0800f65c 	.word	0x0800f65c
 800d85c:	0800f67c 	.word	0x0800f67c
 800d860:	0800f63c 	.word	0x0800f63c

0800d864 <_close_r>:
 800d864:	b538      	push	{r3, r4, r5, lr}
 800d866:	4d06      	ldr	r5, [pc, #24]	; (800d880 <_close_r+0x1c>)
 800d868:	2300      	movs	r3, #0
 800d86a:	4604      	mov	r4, r0
 800d86c:	4608      	mov	r0, r1
 800d86e:	602b      	str	r3, [r5, #0]
 800d870:	f7f3 fc6e 	bl	8001150 <_close>
 800d874:	1c43      	adds	r3, r0, #1
 800d876:	d102      	bne.n	800d87e <_close_r+0x1a>
 800d878:	682b      	ldr	r3, [r5, #0]
 800d87a:	b103      	cbz	r3, 800d87e <_close_r+0x1a>
 800d87c:	6023      	str	r3, [r4, #0]
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	2000b248 	.word	0x2000b248

0800d884 <__sflush_r>:
 800d884:	898a      	ldrh	r2, [r1, #12]
 800d886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d88a:	4605      	mov	r5, r0
 800d88c:	0710      	lsls	r0, r2, #28
 800d88e:	460c      	mov	r4, r1
 800d890:	d458      	bmi.n	800d944 <__sflush_r+0xc0>
 800d892:	684b      	ldr	r3, [r1, #4]
 800d894:	2b00      	cmp	r3, #0
 800d896:	dc05      	bgt.n	800d8a4 <__sflush_r+0x20>
 800d898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	dc02      	bgt.n	800d8a4 <__sflush_r+0x20>
 800d89e:	2000      	movs	r0, #0
 800d8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8a6:	2e00      	cmp	r6, #0
 800d8a8:	d0f9      	beq.n	800d89e <__sflush_r+0x1a>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8b0:	682f      	ldr	r7, [r5, #0]
 800d8b2:	602b      	str	r3, [r5, #0]
 800d8b4:	d032      	beq.n	800d91c <__sflush_r+0x98>
 800d8b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	075a      	lsls	r2, r3, #29
 800d8bc:	d505      	bpl.n	800d8ca <__sflush_r+0x46>
 800d8be:	6863      	ldr	r3, [r4, #4]
 800d8c0:	1ac0      	subs	r0, r0, r3
 800d8c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8c4:	b10b      	cbz	r3, 800d8ca <__sflush_r+0x46>
 800d8c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8c8:	1ac0      	subs	r0, r0, r3
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8d0:	6a21      	ldr	r1, [r4, #32]
 800d8d2:	4628      	mov	r0, r5
 800d8d4:	47b0      	blx	r6
 800d8d6:	1c43      	adds	r3, r0, #1
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	d106      	bne.n	800d8ea <__sflush_r+0x66>
 800d8dc:	6829      	ldr	r1, [r5, #0]
 800d8de:	291d      	cmp	r1, #29
 800d8e0:	d82c      	bhi.n	800d93c <__sflush_r+0xb8>
 800d8e2:	4a2a      	ldr	r2, [pc, #168]	; (800d98c <__sflush_r+0x108>)
 800d8e4:	40ca      	lsrs	r2, r1
 800d8e6:	07d6      	lsls	r6, r2, #31
 800d8e8:	d528      	bpl.n	800d93c <__sflush_r+0xb8>
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	6062      	str	r2, [r4, #4]
 800d8ee:	04d9      	lsls	r1, r3, #19
 800d8f0:	6922      	ldr	r2, [r4, #16]
 800d8f2:	6022      	str	r2, [r4, #0]
 800d8f4:	d504      	bpl.n	800d900 <__sflush_r+0x7c>
 800d8f6:	1c42      	adds	r2, r0, #1
 800d8f8:	d101      	bne.n	800d8fe <__sflush_r+0x7a>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	b903      	cbnz	r3, 800d900 <__sflush_r+0x7c>
 800d8fe:	6560      	str	r0, [r4, #84]	; 0x54
 800d900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d902:	602f      	str	r7, [r5, #0]
 800d904:	2900      	cmp	r1, #0
 800d906:	d0ca      	beq.n	800d89e <__sflush_r+0x1a>
 800d908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d90c:	4299      	cmp	r1, r3
 800d90e:	d002      	beq.n	800d916 <__sflush_r+0x92>
 800d910:	4628      	mov	r0, r5
 800d912:	f7fd f9cf 	bl	800acb4 <_free_r>
 800d916:	2000      	movs	r0, #0
 800d918:	6360      	str	r0, [r4, #52]	; 0x34
 800d91a:	e7c1      	b.n	800d8a0 <__sflush_r+0x1c>
 800d91c:	6a21      	ldr	r1, [r4, #32]
 800d91e:	2301      	movs	r3, #1
 800d920:	4628      	mov	r0, r5
 800d922:	47b0      	blx	r6
 800d924:	1c41      	adds	r1, r0, #1
 800d926:	d1c7      	bne.n	800d8b8 <__sflush_r+0x34>
 800d928:	682b      	ldr	r3, [r5, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d0c4      	beq.n	800d8b8 <__sflush_r+0x34>
 800d92e:	2b1d      	cmp	r3, #29
 800d930:	d001      	beq.n	800d936 <__sflush_r+0xb2>
 800d932:	2b16      	cmp	r3, #22
 800d934:	d101      	bne.n	800d93a <__sflush_r+0xb6>
 800d936:	602f      	str	r7, [r5, #0]
 800d938:	e7b1      	b.n	800d89e <__sflush_r+0x1a>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d940:	81a3      	strh	r3, [r4, #12]
 800d942:	e7ad      	b.n	800d8a0 <__sflush_r+0x1c>
 800d944:	690f      	ldr	r7, [r1, #16]
 800d946:	2f00      	cmp	r7, #0
 800d948:	d0a9      	beq.n	800d89e <__sflush_r+0x1a>
 800d94a:	0793      	lsls	r3, r2, #30
 800d94c:	680e      	ldr	r6, [r1, #0]
 800d94e:	bf08      	it	eq
 800d950:	694b      	ldreq	r3, [r1, #20]
 800d952:	600f      	str	r7, [r1, #0]
 800d954:	bf18      	it	ne
 800d956:	2300      	movne	r3, #0
 800d958:	eba6 0807 	sub.w	r8, r6, r7
 800d95c:	608b      	str	r3, [r1, #8]
 800d95e:	f1b8 0f00 	cmp.w	r8, #0
 800d962:	dd9c      	ble.n	800d89e <__sflush_r+0x1a>
 800d964:	6a21      	ldr	r1, [r4, #32]
 800d966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d968:	4643      	mov	r3, r8
 800d96a:	463a      	mov	r2, r7
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b0      	blx	r6
 800d970:	2800      	cmp	r0, #0
 800d972:	dc06      	bgt.n	800d982 <__sflush_r+0xfe>
 800d974:	89a3      	ldrh	r3, [r4, #12]
 800d976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d97a:	81a3      	strh	r3, [r4, #12]
 800d97c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d980:	e78e      	b.n	800d8a0 <__sflush_r+0x1c>
 800d982:	4407      	add	r7, r0
 800d984:	eba8 0800 	sub.w	r8, r8, r0
 800d988:	e7e9      	b.n	800d95e <__sflush_r+0xda>
 800d98a:	bf00      	nop
 800d98c:	20400001 	.word	0x20400001

0800d990 <_fflush_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	690b      	ldr	r3, [r1, #16]
 800d994:	4605      	mov	r5, r0
 800d996:	460c      	mov	r4, r1
 800d998:	b913      	cbnz	r3, 800d9a0 <_fflush_r+0x10>
 800d99a:	2500      	movs	r5, #0
 800d99c:	4628      	mov	r0, r5
 800d99e:	bd38      	pop	{r3, r4, r5, pc}
 800d9a0:	b118      	cbz	r0, 800d9aa <_fflush_r+0x1a>
 800d9a2:	6983      	ldr	r3, [r0, #24]
 800d9a4:	b90b      	cbnz	r3, 800d9aa <_fflush_r+0x1a>
 800d9a6:	f7ff f877 	bl	800ca98 <__sinit>
 800d9aa:	4b14      	ldr	r3, [pc, #80]	; (800d9fc <_fflush_r+0x6c>)
 800d9ac:	429c      	cmp	r4, r3
 800d9ae:	d11b      	bne.n	800d9e8 <_fflush_r+0x58>
 800d9b0:	686c      	ldr	r4, [r5, #4]
 800d9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d0ef      	beq.n	800d99a <_fflush_r+0xa>
 800d9ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9bc:	07d0      	lsls	r0, r2, #31
 800d9be:	d404      	bmi.n	800d9ca <_fflush_r+0x3a>
 800d9c0:	0599      	lsls	r1, r3, #22
 800d9c2:	d402      	bmi.n	800d9ca <_fflush_r+0x3a>
 800d9c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9c6:	f7ff f91c 	bl	800cc02 <__retarget_lock_acquire_recursive>
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	4621      	mov	r1, r4
 800d9ce:	f7ff ff59 	bl	800d884 <__sflush_r>
 800d9d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9d4:	07da      	lsls	r2, r3, #31
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	d4e0      	bmi.n	800d99c <_fflush_r+0xc>
 800d9da:	89a3      	ldrh	r3, [r4, #12]
 800d9dc:	059b      	lsls	r3, r3, #22
 800d9de:	d4dd      	bmi.n	800d99c <_fflush_r+0xc>
 800d9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9e2:	f7ff f90f 	bl	800cc04 <__retarget_lock_release_recursive>
 800d9e6:	e7d9      	b.n	800d99c <_fflush_r+0xc>
 800d9e8:	4b05      	ldr	r3, [pc, #20]	; (800da00 <_fflush_r+0x70>)
 800d9ea:	429c      	cmp	r4, r3
 800d9ec:	d101      	bne.n	800d9f2 <_fflush_r+0x62>
 800d9ee:	68ac      	ldr	r4, [r5, #8]
 800d9f0:	e7df      	b.n	800d9b2 <_fflush_r+0x22>
 800d9f2:	4b04      	ldr	r3, [pc, #16]	; (800da04 <_fflush_r+0x74>)
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	bf08      	it	eq
 800d9f8:	68ec      	ldreq	r4, [r5, #12]
 800d9fa:	e7da      	b.n	800d9b2 <_fflush_r+0x22>
 800d9fc:	0800f65c 	.word	0x0800f65c
 800da00:	0800f67c 	.word	0x0800f67c
 800da04:	0800f63c 	.word	0x0800f63c

0800da08 <_lseek_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4d07      	ldr	r5, [pc, #28]	; (800da28 <_lseek_r+0x20>)
 800da0c:	4604      	mov	r4, r0
 800da0e:	4608      	mov	r0, r1
 800da10:	4611      	mov	r1, r2
 800da12:	2200      	movs	r2, #0
 800da14:	602a      	str	r2, [r5, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	f7f3 fba6 	bl	8001168 <_lseek>
 800da1c:	1c43      	adds	r3, r0, #1
 800da1e:	d102      	bne.n	800da26 <_lseek_r+0x1e>
 800da20:	682b      	ldr	r3, [r5, #0]
 800da22:	b103      	cbz	r3, 800da26 <_lseek_r+0x1e>
 800da24:	6023      	str	r3, [r4, #0]
 800da26:	bd38      	pop	{r3, r4, r5, pc}
 800da28:	2000b248 	.word	0x2000b248

0800da2c <__swhatbuf_r>:
 800da2c:	b570      	push	{r4, r5, r6, lr}
 800da2e:	460e      	mov	r6, r1
 800da30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da34:	2900      	cmp	r1, #0
 800da36:	b096      	sub	sp, #88	; 0x58
 800da38:	4614      	mov	r4, r2
 800da3a:	461d      	mov	r5, r3
 800da3c:	da08      	bge.n	800da50 <__swhatbuf_r+0x24>
 800da3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800da42:	2200      	movs	r2, #0
 800da44:	602a      	str	r2, [r5, #0]
 800da46:	061a      	lsls	r2, r3, #24
 800da48:	d410      	bmi.n	800da6c <__swhatbuf_r+0x40>
 800da4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da4e:	e00e      	b.n	800da6e <__swhatbuf_r+0x42>
 800da50:	466a      	mov	r2, sp
 800da52:	f000 f88b 	bl	800db6c <_fstat_r>
 800da56:	2800      	cmp	r0, #0
 800da58:	dbf1      	blt.n	800da3e <__swhatbuf_r+0x12>
 800da5a:	9a01      	ldr	r2, [sp, #4]
 800da5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da64:	425a      	negs	r2, r3
 800da66:	415a      	adcs	r2, r3
 800da68:	602a      	str	r2, [r5, #0]
 800da6a:	e7ee      	b.n	800da4a <__swhatbuf_r+0x1e>
 800da6c:	2340      	movs	r3, #64	; 0x40
 800da6e:	2000      	movs	r0, #0
 800da70:	6023      	str	r3, [r4, #0]
 800da72:	b016      	add	sp, #88	; 0x58
 800da74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800da78 <__smakebuf_r>:
 800da78:	898b      	ldrh	r3, [r1, #12]
 800da7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da7c:	079d      	lsls	r5, r3, #30
 800da7e:	4606      	mov	r6, r0
 800da80:	460c      	mov	r4, r1
 800da82:	d507      	bpl.n	800da94 <__smakebuf_r+0x1c>
 800da84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	6123      	str	r3, [r4, #16]
 800da8c:	2301      	movs	r3, #1
 800da8e:	6163      	str	r3, [r4, #20]
 800da90:	b002      	add	sp, #8
 800da92:	bd70      	pop	{r4, r5, r6, pc}
 800da94:	ab01      	add	r3, sp, #4
 800da96:	466a      	mov	r2, sp
 800da98:	f7ff ffc8 	bl	800da2c <__swhatbuf_r>
 800da9c:	9900      	ldr	r1, [sp, #0]
 800da9e:	4605      	mov	r5, r0
 800daa0:	4630      	mov	r0, r6
 800daa2:	f7fd f9a7 	bl	800adf4 <_malloc_r>
 800daa6:	b948      	cbnz	r0, 800dabc <__smakebuf_r+0x44>
 800daa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800daac:	059a      	lsls	r2, r3, #22
 800daae:	d4ef      	bmi.n	800da90 <__smakebuf_r+0x18>
 800dab0:	f023 0303 	bic.w	r3, r3, #3
 800dab4:	f043 0302 	orr.w	r3, r3, #2
 800dab8:	81a3      	strh	r3, [r4, #12]
 800daba:	e7e3      	b.n	800da84 <__smakebuf_r+0xc>
 800dabc:	4b0d      	ldr	r3, [pc, #52]	; (800daf4 <__smakebuf_r+0x7c>)
 800dabe:	62b3      	str	r3, [r6, #40]	; 0x28
 800dac0:	89a3      	ldrh	r3, [r4, #12]
 800dac2:	6020      	str	r0, [r4, #0]
 800dac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dac8:	81a3      	strh	r3, [r4, #12]
 800daca:	9b00      	ldr	r3, [sp, #0]
 800dacc:	6163      	str	r3, [r4, #20]
 800dace:	9b01      	ldr	r3, [sp, #4]
 800dad0:	6120      	str	r0, [r4, #16]
 800dad2:	b15b      	cbz	r3, 800daec <__smakebuf_r+0x74>
 800dad4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dad8:	4630      	mov	r0, r6
 800dada:	f000 f859 	bl	800db90 <_isatty_r>
 800dade:	b128      	cbz	r0, 800daec <__smakebuf_r+0x74>
 800dae0:	89a3      	ldrh	r3, [r4, #12]
 800dae2:	f023 0303 	bic.w	r3, r3, #3
 800dae6:	f043 0301 	orr.w	r3, r3, #1
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	89a0      	ldrh	r0, [r4, #12]
 800daee:	4305      	orrs	r5, r0
 800daf0:	81a5      	strh	r5, [r4, #12]
 800daf2:	e7cd      	b.n	800da90 <__smakebuf_r+0x18>
 800daf4:	0800ca31 	.word	0x0800ca31

0800daf8 <__ascii_mbtowc>:
 800daf8:	b082      	sub	sp, #8
 800dafa:	b901      	cbnz	r1, 800dafe <__ascii_mbtowc+0x6>
 800dafc:	a901      	add	r1, sp, #4
 800dafe:	b142      	cbz	r2, 800db12 <__ascii_mbtowc+0x1a>
 800db00:	b14b      	cbz	r3, 800db16 <__ascii_mbtowc+0x1e>
 800db02:	7813      	ldrb	r3, [r2, #0]
 800db04:	600b      	str	r3, [r1, #0]
 800db06:	7812      	ldrb	r2, [r2, #0]
 800db08:	1e10      	subs	r0, r2, #0
 800db0a:	bf18      	it	ne
 800db0c:	2001      	movne	r0, #1
 800db0e:	b002      	add	sp, #8
 800db10:	4770      	bx	lr
 800db12:	4610      	mov	r0, r2
 800db14:	e7fb      	b.n	800db0e <__ascii_mbtowc+0x16>
 800db16:	f06f 0001 	mvn.w	r0, #1
 800db1a:	e7f8      	b.n	800db0e <__ascii_mbtowc+0x16>

0800db1c <_malloc_usable_size_r>:
 800db1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db20:	1f18      	subs	r0, r3, #4
 800db22:	2b00      	cmp	r3, #0
 800db24:	bfbc      	itt	lt
 800db26:	580b      	ldrlt	r3, [r1, r0]
 800db28:	18c0      	addlt	r0, r0, r3
 800db2a:	4770      	bx	lr

0800db2c <_read_r>:
 800db2c:	b538      	push	{r3, r4, r5, lr}
 800db2e:	4d07      	ldr	r5, [pc, #28]	; (800db4c <_read_r+0x20>)
 800db30:	4604      	mov	r4, r0
 800db32:	4608      	mov	r0, r1
 800db34:	4611      	mov	r1, r2
 800db36:	2200      	movs	r2, #0
 800db38:	602a      	str	r2, [r5, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	f7f3 faec 	bl	8001118 <_read>
 800db40:	1c43      	adds	r3, r0, #1
 800db42:	d102      	bne.n	800db4a <_read_r+0x1e>
 800db44:	682b      	ldr	r3, [r5, #0]
 800db46:	b103      	cbz	r3, 800db4a <_read_r+0x1e>
 800db48:	6023      	str	r3, [r4, #0]
 800db4a:	bd38      	pop	{r3, r4, r5, pc}
 800db4c:	2000b248 	.word	0x2000b248

0800db50 <__ascii_wctomb>:
 800db50:	b149      	cbz	r1, 800db66 <__ascii_wctomb+0x16>
 800db52:	2aff      	cmp	r2, #255	; 0xff
 800db54:	bf85      	ittet	hi
 800db56:	238a      	movhi	r3, #138	; 0x8a
 800db58:	6003      	strhi	r3, [r0, #0]
 800db5a:	700a      	strbls	r2, [r1, #0]
 800db5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800db60:	bf98      	it	ls
 800db62:	2001      	movls	r0, #1
 800db64:	4770      	bx	lr
 800db66:	4608      	mov	r0, r1
 800db68:	4770      	bx	lr
	...

0800db6c <_fstat_r>:
 800db6c:	b538      	push	{r3, r4, r5, lr}
 800db6e:	4d07      	ldr	r5, [pc, #28]	; (800db8c <_fstat_r+0x20>)
 800db70:	2300      	movs	r3, #0
 800db72:	4604      	mov	r4, r0
 800db74:	4608      	mov	r0, r1
 800db76:	4611      	mov	r1, r2
 800db78:	602b      	str	r3, [r5, #0]
 800db7a:	f7f3 faed 	bl	8001158 <_fstat>
 800db7e:	1c43      	adds	r3, r0, #1
 800db80:	d102      	bne.n	800db88 <_fstat_r+0x1c>
 800db82:	682b      	ldr	r3, [r5, #0]
 800db84:	b103      	cbz	r3, 800db88 <_fstat_r+0x1c>
 800db86:	6023      	str	r3, [r4, #0]
 800db88:	bd38      	pop	{r3, r4, r5, pc}
 800db8a:	bf00      	nop
 800db8c:	2000b248 	.word	0x2000b248

0800db90 <_isatty_r>:
 800db90:	b538      	push	{r3, r4, r5, lr}
 800db92:	4d06      	ldr	r5, [pc, #24]	; (800dbac <_isatty_r+0x1c>)
 800db94:	2300      	movs	r3, #0
 800db96:	4604      	mov	r4, r0
 800db98:	4608      	mov	r0, r1
 800db9a:	602b      	str	r3, [r5, #0]
 800db9c:	f7f3 fae2 	bl	8001164 <_isatty>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_isatty_r+0x1a>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_isatty_r+0x1a>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	2000b248 	.word	0x2000b248

0800dbb0 <_init>:
 800dbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbb2:	bf00      	nop
 800dbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbb6:	bc08      	pop	{r3}
 800dbb8:	469e      	mov	lr, r3
 800dbba:	4770      	bx	lr

0800dbbc <_fini>:
 800dbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbbe:	bf00      	nop
 800dbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbc2:	bc08      	pop	{r3}
 800dbc4:	469e      	mov	lr, r3
 800dbc6:	4770      	bx	lr
