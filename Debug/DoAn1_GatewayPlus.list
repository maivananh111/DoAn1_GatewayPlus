
DoAn1_GatewayPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010764  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eb4  08010918  08010918  00020918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080127cc  080127cc  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  080127cc  080127cc  000227cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080127d4  080127d4  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  080127d4  080127d4  000227d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08012800  08012800  00022800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  0801280c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030360  2**0
                  CONTENTS
 10 .bss          0000b730  20000360  20000360  00030360  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000ba90  2000ba90  00030360  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 13 .debug_info   000669e1  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b04f  00000000  00000000  00096d71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002bcbd  00000000  00000000  000a1dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001cd0  00000000  00000000  000cda80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000081a0  00000000  00000000  000cf750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001208c  00000000  00000000  000d78f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042523  00000000  00000000  000e997c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108461  00000000  00000000  0012be9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00234300  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007920  00000000  00000000  00234350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000360 	.word	0x20000360
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080108fc 	.word	0x080108fc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000364 	.word	0x20000364
 80001ec:	080108fc 	.word	0x080108fc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <HAL_Driver_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8001038:	b086      	sub	sp, #24
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_Driver_Init+0x70>)
 800103c:	2200      	movs	r2, #0
 800103e:	9201      	str	r2, [sp, #4]
 8001040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001042:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001046:	6319      	str	r1, [r3, #48]	; 0x30
 8001048:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800104a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800104e:	9101      	str	r1, [sp, #4]
 8001050:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001056:	f041 0104 	orr.w	r1, r1, #4
 800105a:	6319      	str	r1, [r3, #48]	; 0x30
 800105c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800105e:	f001 0104 	and.w	r1, r1, #4
 8001062:	9102      	str	r1, [sp, #8]
 8001064:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	9203      	str	r2, [sp, #12]
 8001068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106a:	f041 0101 	orr.w	r1, r1, #1
 800106e:	6319      	str	r1, [r3, #48]	; 0x30
 8001070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001072:	f001 0101 	and.w	r1, r1, #1
 8001076:	9103      	str	r1, [sp, #12]
 8001078:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	9204      	str	r2, [sp, #16]
 800107c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800107e:	f041 0102 	orr.w	r1, r1, #2
 8001082:	6319      	str	r1, [r3, #48]	; 0x30
 8001084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001086:	f001 0102 	and.w	r1, r1, #2
 800108a:	9104      	str	r1, [sp, #16]
 800108c:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	9205      	str	r2, [sp, #20]
 8001090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001092:	f042 0208 	orr.w	r2, r2, #8
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	9b05      	ldr	r3, [sp, #20]
}
 80010a2:	b006      	add	sp, #24
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <main>:
	return main_application();
 80010ac:	f009 bc64 	b.w	800a978 <main_application>

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was handle(call NMI_Handler)...");
 80010b2:	4902      	ldr	r1, [pc, #8]	; (80010bc <NMI_Handler+0xc>)
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <NMI_Handler+0x10>)
 80010b6:	f00a f883 	bl	800b1c0 <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <NMI_Handler+0xa>
 80010bc:	08010918 	.word	0x08010918
 80010c0:	08010950 	.word	0x08010950

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was handle(call HardFault_Handler)...");
 80010c6:	4902      	ldr	r1, [pc, #8]	; (80010d0 <HardFault_Handler+0xc>)
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <HardFault_Handler+0x10>)
 80010ca:	f00a f879 	bl	800b1c0 <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0xa>
 80010d0:	0801095c 	.word	0x0801095c
 80010d4:	08010998 	.word	0x08010998

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was handle(call MemManage_Handler)...");
 80010da:	4902      	ldr	r1, [pc, #8]	; (80010e4 <MemManage_Handler+0xc>)
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <MemManage_Handler+0x10>)
 80010de:	f00a f86f 	bl	800b1c0 <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <MemManage_Handler+0xa>
 80010e4:	080109a4 	.word	0x080109a4
 80010e8:	08010950 	.word	0x08010950

080010ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was handle(call BusFault_Handler)...");
 80010ee:	4902      	ldr	r1, [pc, #8]	; (80010f8 <BusFault_Handler+0xc>)
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <BusFault_Handler+0x10>)
 80010f2:	f00a f865 	bl	800b1c0 <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0xa>
 80010f8:	080109e8 	.word	0x080109e8
 80010fc:	08010998 	.word	0x08010998

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was handle(call UsageFault_Handler)...");
 8001102:	4902      	ldr	r1, [pc, #8]	; (800110c <UsageFault_Handler+0xc>)
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <UsageFault_Handler+0x10>)
 8001106:	f00a f85b 	bl	800b1c0 <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <UsageFault_Handler+0xa>
 800110c:	08010a24 	.word	0x08010a24
 8001110:	08010998 	.word	0x08010998

08001114 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was handle(call DebugMon_Handler)...");
 8001114:	4901      	ldr	r1, [pc, #4]	; (800111c <DebugMon_Handler+0x8>)
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <DebugMon_Handler+0xc>)
 8001118:	f00a b852 	b.w	800b1c0 <exception_interrupt_handler>
 800111c:	08010a64 	.word	0x08010a64
 8001120:	08010950 	.word	0x08010950

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 8001126:	f007 f9d3 	bl	80084d0 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f8e7 	bl	80012fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800112e:	f002 faed 	bl	800370c <xTaskGetSchedulerState>
 8001132:	2801      	cmp	r0, #1
 8001134:	d100      	bne.n	8001138 <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bd08      	pop	{r3, pc}
 8001138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800113c:	f002 bec2 	b.w	8003ec4 <xPortSysTickHandler>

08001140 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001140:	4801      	ldr	r0, [pc, #4]	; (8001148 <DMA2_Stream3_IRQHandler+0x8>)
 8001142:	f000 b8e7 	b.w	8001314 <HAL_DMA_IRQHandler>
 8001146:	bf00      	nop
 8001148:	2000037c 	.word	0x2000037c

0800114c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800114c:	4801      	ldr	r0, [pc, #4]	; (8001154 <ETH_IRQHandler+0x8>)
 800114e:	f000 b9d5 	b.w	80014fc <HAL_ETH_IRQHandler>
 8001152:	bf00      	nop
 8001154:	2000044c 	.word	0x2000044c

08001158 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <DMA2_Stream6_IRQHandler+0x8>)
 800115a:	f000 b8db 	b.w	8001314 <HAL_DMA_IRQHandler>
 800115e:	bf00      	nop
 8001160:	200003dc 	.word	0x200003dc

08001164 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <_kill+0xc>)
 800116a:	2216      	movs	r2, #22
 800116c:	601a      	str	r2, [r3, #0]
  return -1;
}
 800116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001172:	4770      	bx	lr
 8001174:	2000b268 	.word	0x2000b268

08001178 <_exit>:
  errno = EINVAL;
 8001178:	4b01      	ldr	r3, [pc, #4]	; (8001180 <_exit+0x8>)
 800117a:	2216      	movs	r2, #22
 800117c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800117e:	e7fe      	b.n	800117e <_exit+0x6>
 8001180:	2000b268 	.word	0x2000b268

08001184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	1e16      	subs	r6, r2, #0
 8001188:	dd07      	ble.n	800119a <_read+0x16>
 800118a:	460c      	mov	r4, r1
 800118c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800118e:	f3af 8000 	nop.w
 8001192:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	42a5      	cmp	r5, r4
 8001198:	d1f9      	bne.n	800118e <_read+0xa>
  }

  return len;
}
 800119a:	4630      	mov	r0, r6
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	bf00      	nop

080011a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	1e16      	subs	r6, r2, #0
 80011a4:	dd07      	ble.n	80011b6 <_write+0x16>
 80011a6:	460c      	mov	r4, r1
 80011a8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80011aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80011ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	42ac      	cmp	r4, r5
 80011b4:	d1f9      	bne.n	80011aa <_write+0xa>
  }
  return len;
}
 80011b6:	4630      	mov	r0, r6
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	bf00      	nop

080011bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80011ca:	2000      	movs	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011d0:	2001      	movs	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011d4:	2000      	movs	r0, #0
 80011d6:	4770      	bx	lr

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011da:	4c0d      	ldr	r4, [pc, #52]	; (8001210 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <_sbrk+0x3c>)
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80011e0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80011e4:	b182      	cbz	r2, 8001208 <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4410      	add	r0, r2
 80011e8:	4288      	cmp	r0, r1
 80011ea:	d804      	bhi.n	80011f6 <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011ec:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80011ee:	4610      	mov	r0, r2
 80011f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011f4:	4770      	bx	lr
    errno = ENOMEM;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <_sbrk+0x44>)
}
 80011f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80011fc:	220c      	movs	r2, #12
 80011fe:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001204:	4610      	mov	r0, r2
 8001206:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_sbrk+0x48>)
 800120a:	6022      	str	r2, [r4, #0]
 800120c:	e7eb      	b.n	80011e6 <_sbrk+0xe>
 800120e:	bf00      	nop
 8001210:	2000043c 	.word	0x2000043c
 8001214:	20030000 	.word	0x20030000
 8001218:	00000400 	.word	0x00000400
 800121c:	2000b268 	.word	0x2000b268
 8001220:	2000ba90 	.word	0x2000ba90

08001224 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <SystemInit+0x10>)
 8001226:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800122a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800123a:	6893      	ldr	r3, [r2, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <SystemCoreClockUpdate+0x26>
 8001244:	2b08      	cmp	r3, #8
 8001246:	d00c      	beq.n	8001262 <SystemCoreClockUpdate+0x2a>
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <SystemCoreClockUpdate+0x64>)
 800124e:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001250:	4913      	ldr	r1, [pc, #76]	; (80012a0 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001252:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001256:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8001258:	40d3      	lsrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
}
 800125c:	4770      	bx	lr
  switch (tmp)
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <SystemCoreClockUpdate+0x6c>)
 8001260:	e7f3      	b.n	800124a <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001262:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001264:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 8001266:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800126e:	6853      	ldr	r3, [r2, #4]
 8001270:	bf14      	ite	ne
 8001272:	4a0c      	ldrne	r2, [pc, #48]	; (80012a4 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001274:	4a08      	ldreq	r2, [pc, #32]	; (8001298 <SystemCoreClockUpdate+0x60>)
 8001276:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800127c:	6852      	ldr	r2, [r2, #4]
 800127e:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001282:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001286:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001288:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800128c:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001292:	e7da      	b.n	800124a <SystemCoreClockUpdate+0x12>
 8001294:	40023800 	.word	0x40023800
 8001298:	00f42400 	.word	0x00f42400
 800129c:	08010aa4 	.word	0x08010aa4
 80012a0:	20000000 	.word	0x20000000
 80012a4:	017d7840 	.word	0x017d7840

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ae:	490e      	ldr	r1, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c4:	4c0b      	ldr	r4, [pc, #44]	; (80012f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d2:	f7ff ffa7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f00b f817 	bl	800c308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fee7 	bl	80010ac <main>
  bx  lr    
 80012de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 80012ec:	0801280c 	.word	0x0801280c
  ldr r2, =_sbss
 80012f0:	20000360 	.word	0x20000360
  ldr r4, =_ebss
 80012f4:	2000ba90 	.word	0x2000ba90

080012f8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <CAN1_RX0_IRQHandler>
	...

080012fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_IncTick+0x10>)
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_IncTick+0x14>)
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	440b      	add	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000440 	.word	0x20000440
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001318:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 800131a:	4a74      	ldr	r2, [pc, #464]	; (80014ec <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800131e:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001324:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001326:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001328:	2208      	movs	r2, #8
 800132a:	409a      	lsls	r2, r3
 800132c:	4222      	tst	r2, r4
{
 800132e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	d004      	beq.n	800133c <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001332:	6801      	ldr	r1, [r0, #0]
 8001334:	680f      	ldr	r7, [r1, #0]
 8001336:	0778      	lsls	r0, r7, #29
 8001338:	f100 808a 	bmi.w	8001450 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	4222      	tst	r2, r4
 8001342:	d004      	beq.n	800134e <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001344:	f8d8 1000 	ldr.w	r1, [r8]
 8001348:	6949      	ldr	r1, [r1, #20]
 800134a:	0609      	lsls	r1, r1, #24
 800134c:	d478      	bmi.n	8001440 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	2204      	movs	r2, #4
 8001350:	409a      	lsls	r2, r3
 8001352:	4222      	tst	r2, r4
 8001354:	d004      	beq.n	8001360 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001356:	f8d8 1000 	ldr.w	r1, [r8]
 800135a:	6809      	ldr	r1, [r1, #0]
 800135c:	078f      	lsls	r7, r1, #30
 800135e:	d467      	bmi.n	8001430 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001360:	2210      	movs	r2, #16
 8001362:	409a      	lsls	r2, r3
 8001364:	4222      	tst	r2, r4
 8001366:	d004      	beq.n	8001372 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001368:	f8d8 1000 	ldr.w	r1, [r8]
 800136c:	680f      	ldr	r7, [r1, #0]
 800136e:	0738      	lsls	r0, r7, #28
 8001370:	d449      	bmi.n	8001406 <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001372:	2220      	movs	r2, #32
 8001374:	409a      	lsls	r2, r3
 8001376:	4222      	tst	r2, r4
 8001378:	d017      	beq.n	80013aa <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137a:	f8d8 1000 	ldr.w	r1, [r8]
 800137e:	680c      	ldr	r4, [r1, #0]
 8001380:	06e0      	lsls	r0, r4, #27
 8001382:	d512      	bpl.n	80013aa <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001384:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001386:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800138a:	2a05      	cmp	r2, #5
 800138c:	d073      	beq.n	8001476 <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800138e:	680b      	ldr	r3, [r1, #0]
 8001390:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001394:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001396:	f000 8090 	beq.w	80014ba <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800139a:	0319      	lsls	r1, r3, #12
 800139c:	f140 809b 	bpl.w	80014d6 <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 80013a0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80013a4:	b10b      	cbz	r3, 80013aa <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013a6:	4640      	mov	r0, r8
 80013a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013aa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013ae:	b33b      	cbz	r3, 8001400 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013b4:	07da      	lsls	r2, r3, #31
 80013b6:	d51b      	bpl.n	80013f0 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013b8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013bc:	494c      	ldr	r1, [pc, #304]	; (80014f0 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	2305      	movs	r3, #5
 80013c0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013c4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c6:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80013ca:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ce:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e002      	b.n	80013da <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	07db      	lsls	r3, r3, #31
 80013d8:	d504      	bpl.n	80013e4 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	42ab      	cmp	r3, r5
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	d9f7      	bls.n	80013d4 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e4:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013e6:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80013e8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80013ec:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013f0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80013f4:	b123      	cbz	r3, 8001400 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f6:	4640      	mov	r0, r8
    }
  }
}
 80013f8:	b002      	add	sp, #8
 80013fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80013fe:	4718      	bx	r3
}
 8001400:	b002      	add	sp, #8
 8001402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001406:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001408:	680a      	ldr	r2, [r1, #0]
 800140a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800140e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001410:	d12a      	bne.n	8001468 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001412:	05d7      	lsls	r7, r2, #23
 8001414:	d403      	bmi.n	800141e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001416:	680a      	ldr	r2, [r1, #0]
 8001418:	f022 0208 	bic.w	r2, r2, #8
 800141c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800141e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001422:	2a00      	cmp	r2, #0
 8001424:	d0a5      	beq.n	8001372 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8001426:	4640      	mov	r0, r8
 8001428:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800142a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800142e:	e7a0      	b.n	8001372 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001430:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001432:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001436:	f042 0204 	orr.w	r2, r2, #4
 800143a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800143e:	e78f      	b.n	8001360 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001440:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001442:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001446:	f042 0202 	orr.w	r2, r2, #2
 800144a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800144e:	e77e      	b.n	800134e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001450:	680f      	ldr	r7, [r1, #0]
 8001452:	f027 0704 	bic.w	r7, r7, #4
 8001456:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001458:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800145a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001466:	e769      	b.n	800133c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001468:	0312      	lsls	r2, r2, #12
 800146a:	d5d8      	bpl.n	800141e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800146c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001470:	2a00      	cmp	r2, #0
 8001472:	d1d8      	bne.n	8001426 <HAL_DMA_IRQHandler+0x112>
 8001474:	e77d      	b.n	8001372 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001476:	680a      	ldr	r2, [r1, #0]
 8001478:	f022 0216 	bic.w	r2, r2, #22
 800147c:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147e:	694a      	ldr	r2, [r1, #20]
 8001480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001484:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001486:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800148a:	b352      	cbz	r2, 80014e2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800148c:	680a      	ldr	r2, [r1, #0]
 800148e:	f022 0208 	bic.w	r2, r2, #8
 8001492:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800149a:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149e:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80014a0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80014a2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80014a4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80014a8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d0a7      	beq.n	8001400 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80014b0:	4640      	mov	r0, r8
}
 80014b2:	b002      	add	sp, #8
 80014b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80014b8:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ba:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80014be:	f47f af6f 	bne.w	80013a0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014c2:	680a      	ldr	r2, [r1, #0]
 80014c4:	f022 0210 	bic.w	r2, r2, #16
 80014c8:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80014ca:	2201      	movs	r2, #1
 80014cc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80014d0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 80014d4:	e764      	b.n	80013a0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80014d6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f af63 	bne.w	80013a6 <HAL_DMA_IRQHandler+0x92>
 80014e0:	e763      	b.n	80013aa <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d1d0      	bne.n	800148c <HAL_DMA_IRQHandler+0x178>
 80014ea:	e7d3      	b.n	8001494 <HAL_DMA_IRQHandler+0x180>
 80014ec:	20000000 	.word	0x20000000
 80014f0:	1b4e81b5 	.word	0x1b4e81b5

080014f4 <HAL_ETH_PMTCallback>:
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <HAL_ETH_WakeUpCallback>:
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001502:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001504:	6959      	ldr	r1, [r3, #20]
 8001506:	0649      	lsls	r1, r1, #25
{
 8001508:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800150a:	d502      	bpl.n	8001512 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800150c:	69d9      	ldr	r1, [r3, #28]
 800150e:	0649      	lsls	r1, r1, #25
 8001510:	d448      	bmi.n	80015a4 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001512:	6959      	ldr	r1, [r3, #20]
 8001514:	07c9      	lsls	r1, r1, #31
 8001516:	d502      	bpl.n	800151e <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001518:	69d9      	ldr	r1, [r3, #28]
 800151a:	07c8      	lsls	r0, r1, #31
 800151c:	d438      	bmi.n	8001590 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800151e:	6959      	ldr	r1, [r3, #20]
 8001520:	0409      	lsls	r1, r1, #16
 8001522:	d502      	bpl.n	800152a <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001524:	69d9      	ldr	r1, [r3, #28]
 8001526:	0408      	lsls	r0, r1, #16
 8001528:	d40e      	bmi.n	8001548 <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800152a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800152c:	0719      	lsls	r1, r3, #28
 800152e:	d423      	bmi.n	8001578 <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_ETH_IRQHandler+0xd0>)
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	0312      	lsls	r2, r2, #12
 8001536:	d400      	bmi.n	800153a <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001538:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800153a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800153e:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ffd9 	bl	80014f8 <HAL_ETH_WakeUpCallback>
}
 8001546:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001548:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800154c:	f042 0208 	orr.w	r2, r2, #8
 8001550:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800155a:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800155c:	d12a      	bne.n	80015b4 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800155e:	f248 6180 	movw	r1, #34432	; 0x8680
 8001562:	400a      	ands	r2, r1
 8001564:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001568:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 800156a:	4620      	mov	r0, r4
 800156c:	f000 f844 	bl	80015f8 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001574:	0719      	lsls	r1, r3, #28
 8001576:	d5db      	bpl.n	8001530 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001578:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800157a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800157e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff ffb6 	bl	80014f4 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001588:	2300      	movs	r3, #0
 800158a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800158e:	e7cf      	b.n	8001530 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001590:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001594:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001596:	4620      	mov	r0, r4
 8001598:	f000 f828 	bl	80015ec <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015a2:	e7bc      	b.n	800151e <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_ETH_IRQHandler+0xd4>)
 80015a6:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 80015a8:	f000 f81a 	bl	80015e0 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015b2:	e7ae      	b.n	8001512 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <HAL_ETH_IRQHandler+0xd8>)
 80015b6:	4002      	ands	r2, r0
 80015b8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015bc:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80015be:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015c0:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 80015c4:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80015c6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80015ca:	e7ce      	b.n	800156a <HAL_ETH_IRQHandler+0x6e>
 80015cc:	40013c00 	.word	0x40013c00
 80015d0:	00010040 	.word	0x00010040
 80015d4:	007e2000 	.word	0x007e2000

080015d8 <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 80015d8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 80015e0:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <HAL_ETH_RxCpltCallback+0x8>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f000 b816 	b.w	8001614 <osSemaphoreRelease>
 80015e8:	20000444 	.word	0x20000444

080015ec <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <HAL_ETH_TxCpltCallback+0x8>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f000 b810 	b.w	8001614 <osSemaphoreRelease>
 80015f4:	20000448 	.word	0x20000448

080015f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80015f8:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80015fa:	f7ff ffed 	bl	80015d8 <HAL_ETH_GetDMAError>
 80015fe:	0603      	lsls	r3, r0, #24
 8001600:	d400      	bmi.n	8001604 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001602:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_ETH_ErrorCallback+0x18>)
 8001606:	6818      	ldr	r0, [r3, #0]
}
 8001608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 800160c:	f000 b802 	b.w	8001614 <osSemaphoreRelease>
 8001610:	20000444 	.word	0x20000444

08001614 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8001614:	b330      	cbz	r0, 8001664 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001616:	b510      	push	{r4, lr}
 8001618:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800161a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800161e:	b1ab      	cbz	r3, 800164c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8001620:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001622:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8001624:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001626:	f000 fc83 	bl	8001f30 <xQueueGiveFromISR>
 800162a:	2801      	cmp	r0, #1
 800162c:	d117      	bne.n	800165e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	b193      	cbz	r3, 8001658 <osSemaphoreRelease+0x44>
 8001632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800163e:	f3bf 8f4f 	dsb	sy
 8001642:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8001646:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001648:	b002      	add	sp, #8
 800164a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800164c:	461a      	mov	r2, r3
 800164e:	4619      	mov	r1, r3
 8001650:	f000 fa52 	bl	8001af8 <xQueueGenericSend>
 8001654:	2801      	cmp	r0, #1
 8001656:	d102      	bne.n	800165e <osSemaphoreRelease+0x4a>
  stat = osOK;
 8001658:	2000      	movs	r0, #0
}
 800165a:	b002      	add	sp, #8
 800165c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 800165e:	f06f 0002 	mvn.w	r0, #2
 8001662:	e7fa      	b.n	800165a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8001664:	f06f 0003 	mvn.w	r0, #3
}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <vApplicationGetIdleTaskMemory+0x14>)
 800166e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001670:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001672:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001674:	4c03      	ldr	r4, [pc, #12]	; (8001684 <vApplicationGetIdleTaskMemory+0x18>)
 8001676:	600c      	str	r4, [r1, #0]
}
 8001678:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	4770      	bx	lr
 8001680:	200006fc 	.word	0x200006fc
 8001684:	200004fc 	.word	0x200004fc

08001688 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <vApplicationGetTimerTaskMemory+0x18>)
 800168a:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800168c:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001692:	4c04      	ldr	r4, [pc, #16]	; (80016a4 <vApplicationGetTimerTaskMemory+0x1c>)
 8001694:	600c      	str	r4, [r1, #0]
}
 8001696:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000b68 	.word	0x20000b68
 80016a4:	20000768 	.word	0x20000768

080016a8 <vEventGroupSetBitsCallback>:
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d03d      	beq.n	8001728 <vEventGroupSetBitsCallback+0x80>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80016b0:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
 80016b4:	4688      	mov	r8, r1
 80016b6:	d008      	beq.n	80016ca <vEventGroupSetBitsCallback+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80016bc:	f383 8811 	msr	BASEPRI, r3
 80016c0:	f3bf 8f6f 	isb	sy
 80016c4:	f3bf 8f4f 	dsb	sy
 80016c8:	e7fe      	b.n	80016c8 <vEventGroupSetBitsCallback+0x20>
 80016ca:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80016cc:	f001 fdfc 	bl	80032c8 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016d0:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80016d2:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016d4:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016d8:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
 80016dc:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016de:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 80016e0:	d10c      	bne.n	80016fc <vEventGroupSetBitsCallback+0x54>
 80016e2:	e01c      	b.n	800171e <vEventGroupSetBitsCallback+0x76>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80016e4:	ea13 0f0c 	tst.w	r3, ip
 80016e8:	d006      	beq.n	80016f8 <vEventGroupSetBitsCallback+0x50>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80016ea:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 80016ec:	bf48      	it	mi
 80016ee:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80016f2:	f001 ff61 	bl	80035b8 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80016f6:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 80016f8:	42a7      	cmp	r7, r4
 80016fa:	d00e      	beq.n	800171a <vEventGroupSetBitsCallback+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80016fc:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80016fe:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001702:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8001704:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001706:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800170a:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800170e:	d0e9      	beq.n	80016e4 <vEventGroupSetBitsCallback+0x3c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8001710:	ea3c 0e03 	bics.w	lr, ip, r3
 8001714:	d0e9      	beq.n	80016ea <vEventGroupSetBitsCallback+0x42>
		while( pxListItem != pxListEnd )
 8001716:	42a7      	cmp	r7, r4
 8001718:	d1f0      	bne.n	80016fc <vEventGroupSetBitsCallback+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800171a:	ea23 0306 	bic.w	r3, r3, r6
 800171e:	602b      	str	r3, [r5, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
 8001720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
 8001724:	f001 bdd8 	b.w	80032d8 <xTaskResumeAll>
 8001728:	f04f 0340 	mov.w	r3, #64	; 0x40
 800172c:	f383 8811 	msr	BASEPRI, r3
 8001730:	f3bf 8f6f 	isb	sy
 8001734:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8001738:	e7fe      	b.n	8001738 <vEventGroupSetBitsCallback+0x90>
 800173a:	bf00      	nop

0800173c <xEventGroupCreate>:
	{
 800173c:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800173e:	2020      	movs	r0, #32
 8001740:	f002 fcb8 	bl	80040b4 <pvPortMalloc>
		if( pxEventBits != NULL )
 8001744:	4604      	mov	r4, r0
 8001746:	b128      	cbz	r0, 8001754 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 8001748:	2500      	movs	r5, #0
 800174a:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800174e:	f000 f895 	bl	800187c <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8001752:	7725      	strb	r5, [r4, #28]
	}
 8001754:	4620      	mov	r0, r4
 8001756:	bd38      	pop	{r3, r4, r5, pc}

08001758 <xEventGroupWaitBits>:
{
 8001758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 800175c:	b1b0      	cbz	r0, 800178c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800175e:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8001762:	460c      	mov	r4, r1
 8001764:	d109      	bne.n	800177a <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 8001766:	b9d1      	cbnz	r1, 800179e <xEventGroupWaitBits+0x46>
 8001768:	f04f 0340 	mov.w	r3, #64	; 0x40
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	e7fe      	b.n	8001778 <xEventGroupWaitBits+0x20>
 800177a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800178a:	e7fe      	b.n	800178a <xEventGroupWaitBits+0x32>
 800178c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 800179c:	e7fe      	b.n	800179c <xEventGroupWaitBits+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800179e:	4617      	mov	r7, r2
 80017a0:	461e      	mov	r6, r3
 80017a2:	4605      	mov	r5, r0
 80017a4:	f001 ffb2 	bl	800370c <xTaskGetSchedulerState>
 80017a8:	b910      	cbnz	r0, 80017b0 <xEventGroupWaitBits+0x58>
 80017aa:	9b08      	ldr	r3, [sp, #32]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d13c      	bne.n	800182a <xEventGroupWaitBits+0xd2>
	vTaskSuspendAll();
 80017b0:	f001 fd8a 	bl	80032c8 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80017b4:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80017b8:	b36e      	cbz	r6, 8001816 <xEventGroupWaitBits+0xbe>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80017ba:	ea34 0309 	bics.w	r3, r4, r9
 80017be:	d02d      	beq.n	800181c <xEventGroupWaitBits+0xc4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80017c0:	9b08      	ldr	r3, [sp, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03a      	beq.n	800183c <xEventGroupWaitBits+0xe4>
			if( xClearOnExit != pdFALSE )
 80017c6:	2f00      	cmp	r7, #0
 80017c8:	bf16      	itet	ne
 80017ca:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
 80017ce:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 80017d2:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	bf08      	it	eq
 80017da:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80017dc:	4321      	orrs	r1, r4
 80017de:	461a      	mov	r2, r3
 80017e0:	1d28      	adds	r0, r5, #4
 80017e2:	f001 fdf5 	bl	80033d0 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80017e6:	f001 fd77 	bl	80032d8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80017ea:	b948      	cbnz	r0, 8001800 <xEventGroupWaitBits+0xa8>
			portYIELD_WITHIN_API();
 80017ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80017f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80017f8:	f3bf 8f4f 	dsb	sy
 80017fc:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8001800:	f002 f874 	bl	80038ec <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001804:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 8001808:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800180a:	d01a      	beq.n	8001842 <xEventGroupWaitBits+0xea>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800180c:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 8001810:	4648      	mov	r0, r9
 8001812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8001816:	ea14 0f09 	tst.w	r4, r9
 800181a:	d0d1      	beq.n	80017c0 <xEventGroupWaitBits+0x68>
			if( xClearOnExit != pdFALSE )
 800181c:	b177      	cbz	r7, 800183c <xEventGroupWaitBits+0xe4>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800181e:	ea29 0404 	bic.w	r4, r9, r4
 8001822:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
 8001824:	f001 fd58 	bl	80032d8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8001828:	e7f2      	b.n	8001810 <xEventGroupWaitBits+0xb8>
 800182a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800183a:	e7fe      	b.n	800183a <xEventGroupWaitBits+0xe2>
	xAlreadyYielded = xTaskResumeAll();
 800183c:	f001 fd4c 	bl	80032d8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8001840:	e7e6      	b.n	8001810 <xEventGroupWaitBits+0xb8>
			taskENTER_CRITICAL();
 8001842:	f002 fad7 	bl	8003df4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8001846:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
 800184a:	b94e      	cbnz	r6, 8001860 <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800184c:	ea14 0f09 	tst.w	r4, r9
 8001850:	d003      	beq.n	800185a <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8001852:	b117      	cbz	r7, 800185a <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001854:	ea29 0404 	bic.w	r4, r9, r4
 8001858:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
 800185a:	f002 faed 	bl	8003e38 <vPortExitCritical>
 800185e:	e7d5      	b.n	800180c <xEventGroupWaitBits+0xb4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001860:	ea34 0309 	bics.w	r3, r4, r9
 8001864:	d1f9      	bne.n	800185a <xEventGroupWaitBits+0x102>
 8001866:	e7f4      	b.n	8001852 <xEventGroupWaitBits+0xfa>

08001868 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8001868:	4684      	mov	ip, r0
 800186a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <xEventGroupSetBitsFromISR+0x10>)
 800186e:	460a      	mov	r2, r1
 8001870:	4661      	mov	r1, ip
 8001872:	f002 ba41 	b.w	8003cf8 <xTimerPendFunctionCallFromISR>
 8001876:	bf00      	nop
 8001878:	080016a9 	.word	0x080016a9

0800187c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001884:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001886:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800188e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001894:	2300      	movs	r3, #0
 8001896:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800189c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80018a2:	6802      	ldr	r2, [r0, #0]
{
 80018a4:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018a6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80018a8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80018aa:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018ac:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018ae:	6099      	str	r1, [r3, #8]
}
 80018b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80018b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80018b6:	6002      	str	r2, [r0, #0]
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018bc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018c0:	1c6b      	adds	r3, r5, #1
 80018c2:	d010      	beq.n	80018e6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80018c4:	f100 0308 	add.w	r3, r0, #8
 80018c8:	461c      	mov	r4, r3
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d9fa      	bls.n	80018c8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80018d2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80018d4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80018d6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018d8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018da:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80018dc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80018de:	6108      	str	r0, [r1, #16]
}
 80018e0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80018e2:	6002      	str	r2, [r0, #0]
}
 80018e4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80018e6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	e7f2      	b.n	80018d2 <vListInsert+0x16>

080018ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80018ec:	6903      	ldr	r3, [r0, #16]
{
 80018ee:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018f0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018f4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018f6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80018f8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018fa:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018fc:	bf08      	it	eq
 80018fe:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001900:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001902:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8001906:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8001908:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800190a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800190c:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800190e:	6818      	ldr	r0, [r3, #0]
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001918:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800191a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800191c:	b920      	cbnz	r0, 8001928 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800191e:	6825      	ldr	r5, [r4, #0]
 8001920:	b34d      	cbz	r5, 8001976 <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001922:	3601      	adds	r6, #1
 8001924:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001926:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001928:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800192a:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 800192c:	b97d      	cbnz	r5, 800194e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800192e:	6860      	ldr	r0, [r4, #4]
 8001930:	f00a fd1e 	bl	800c370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001934:	6863      	ldr	r3, [r4, #4]
 8001936:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001938:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800193a:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800193c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800193e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001940:	bf24      	itt	cs
 8001942:	6823      	ldrcs	r3, [r4, #0]
 8001944:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001946:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001948:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800194a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800194c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800194e:	68e0      	ldr	r0, [r4, #12]
 8001950:	f00a fd0e 	bl	800c370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001954:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001956:	68e3      	ldr	r3, [r4, #12]
 8001958:	4251      	negs	r1, r2
 800195a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800195c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800195e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001960:	4293      	cmp	r3, r2
 8001962:	d202      	bcs.n	800196a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001964:	68a3      	ldr	r3, [r4, #8]
 8001966:	440b      	add	r3, r1
 8001968:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800196a:	2d02      	cmp	r5, #2
 800196c:	d008      	beq.n	8001980 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800196e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001970:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001972:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001974:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001976:	68a0      	ldr	r0, [r4, #8]
 8001978:	f001 ff1e 	bl	80037b8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800197c:	60a5      	str	r5, [r4, #8]
 800197e:	e7d0      	b.n	8001922 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001980:	2e01      	cmp	r6, #1
 8001982:	bf38      	it	cc
 8001984:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8001986:	2000      	movs	r0, #0
 8001988:	e7cc      	b.n	8001924 <prvCopyDataToQueue+0x10>
 800198a:	bf00      	nop

0800198c <xQueueGenericCreateStatic>:
	{
 800198c:	b530      	push	{r4, r5, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001994:	b940      	cbnz	r0, 80019a8 <xQueueGenericCreateStatic+0x1c>
 8001996:	f04f 0340 	mov.w	r3, #64	; 0x40
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	e7fe      	b.n	80019a6 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80019a8:	461d      	mov	r5, r3
 80019aa:	b17b      	cbz	r3, 80019cc <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80019ac:	b302      	cbz	r2, 80019f0 <xQueueGenericCreateStatic+0x64>
 80019ae:	b1b1      	cbz	r1, 80019de <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80019b0:	2350      	movs	r3, #80	; 0x50
 80019b2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	2b50      	cmp	r3, #80	; 0x50
 80019b8:	d027      	beq.n	8001a0a <xQueueGenericCreateStatic+0x7e>
 80019ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	e7fe      	b.n	80019ca <xQueueGenericCreateStatic+0x3e>
 80019cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	f3bf 8f6f 	isb	sy
 80019d8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80019dc:	e7fe      	b.n	80019dc <xQueueGenericCreateStatic+0x50>
 80019de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80019ee:	e7fe      	b.n	80019ee <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d135      	bne.n	8001a60 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80019f4:	2250      	movs	r2, #80	; 0x50
 80019f6:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80019f8:	9a01      	ldr	r2, [sp, #4]
 80019fa:	2a50      	cmp	r2, #80	; 0x50
 80019fc:	d1dd      	bne.n	80019ba <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80019fe:	2201      	movs	r2, #1
 8001a00:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001a04:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a06:	462a      	mov	r2, r5
 8001a08:	e004      	b.n	8001a14 <xQueueGenericCreateStatic+0x88>
 8001a0a:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001a0e:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a10:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8001a14:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 8001a18:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 8001a1a:	f002 f9eb 	bl	8003df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a1e:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 8001a22:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a24:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a26:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a2a:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a2c:	4401      	add	r1, r0
 8001a2e:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a30:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a32:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a34:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a36:	21ff      	movs	r1, #255	; 0xff
 8001a38:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a3c:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001a3e:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a42:	f105 0010 	add.w	r0, r5, #16
 8001a46:	f7ff ff19 	bl	800187c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a4e:	f7ff ff15 	bl	800187c <vListInitialise>
	taskEXIT_CRITICAL();
 8001a52:	f002 f9f1 	bl	8003e38 <vPortExitCritical>
	}
 8001a56:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 8001a58:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 8001a5c:	b003      	add	sp, #12
 8001a5e:	bd30      	pop	{r4, r5, pc}
 8001a60:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a70:	e7fe      	b.n	8001a70 <xQueueGenericCreateStatic+0xe4>
 8001a72:	bf00      	nop

08001a74 <xQueueGenericCreate>:
	{
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a76:	b940      	cbnz	r0, 8001a8a <xQueueGenericCreate+0x16>
 8001a78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	e7fe      	b.n	8001a88 <xQueueGenericCreate+0x14>
 8001a8a:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a8c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a90:	3050      	adds	r0, #80	; 0x50
 8001a92:	460e      	mov	r6, r1
 8001a94:	4617      	mov	r7, r2
 8001a96:	f002 fb0d 	bl	80040b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	b340      	cbz	r0, 8001af0 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001aa4:	b336      	cbz	r6, 8001af4 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001aa6:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001aaa:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001aac:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001ab0:	f002 f9a0 	bl	8003df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ab4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001ab8:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aba:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001abc:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ac0:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ac2:	440a      	add	r2, r1
 8001ac4:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ac6:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ac8:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001aca:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001acc:	22ff      	movs	r2, #255	; 0xff
 8001ace:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ad2:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001ad4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ad8:	f104 0010 	add.w	r0, r4, #16
 8001adc:	f7ff fece 	bl	800187c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ae0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ae4:	f7ff feca 	bl	800187c <vListInitialise>
	taskEXIT_CRITICAL();
 8001ae8:	f002 f9a6 	bl	8003e38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001aec:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8001af0:	4620      	mov	r0, r4
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af4:	4603      	mov	r3, r0
 8001af6:	e7d8      	b.n	8001aaa <xQueueGenericCreate+0x36>

08001af8 <xQueueGenericSend>:
{
 8001af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001afc:	b085      	sub	sp, #20
 8001afe:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001b00:	2800      	cmp	r0, #0
 8001b02:	f000 80a4 	beq.w	8001c4e <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b06:	4688      	mov	r8, r1
 8001b08:	461f      	mov	r7, r3
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	2900      	cmp	r1, #0
 8001b0e:	f000 8091 	beq.w	8001c34 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b12:	2f02      	cmp	r7, #2
 8001b14:	d10b      	bne.n	8001b2e <xQueueGenericSend+0x36>
 8001b16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d008      	beq.n	8001b2e <xQueueGenericSend+0x36>
 8001b1c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001b20:	f383 8811 	msr	BASEPRI, r3
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	e7fe      	b.n	8001b2c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b2e:	f001 fded 	bl	800370c <xTaskGetSchedulerState>
 8001b32:	4605      	mov	r5, r0
 8001b34:	2800      	cmp	r0, #0
 8001b36:	f000 8093 	beq.w	8001c60 <xQueueGenericSend+0x168>
 8001b3a:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b3c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8001b40:	f002 f958 	bl	8003df4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f0c0 80ef 	bcc.w	8001d2c <xQueueGenericSend+0x234>
 8001b4e:	2f02      	cmp	r7, #2
 8001b50:	f000 80ec 	beq.w	8001d2c <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b54:	9801      	ldr	r0, [sp, #4]
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f000 8101 	beq.w	8001d5e <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8001b5c:	2d00      	cmp	r5, #0
 8001b5e:	f000 80e1 	beq.w	8001d24 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8001b62:	f002 f969 	bl	8003e38 <vPortExitCritical>
		vTaskSuspendAll();
 8001b66:	f001 fbaf 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b6a:	f002 f943 	bl	8003df4 <vPortEnterCritical>
 8001b6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	bf04      	itt	eq
 8001b76:	2300      	moveq	r3, #0
 8001b78:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001b7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	bf04      	itt	eq
 8001b84:	2300      	moveq	r3, #0
 8001b86:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001b8a:	f002 f955 	bl	8003e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b8e:	a901      	add	r1, sp, #4
 8001b90:	a802      	add	r0, sp, #8
 8001b92:	f001 fd61 	bl	8003658 <xTaskCheckForTimeOut>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	f040 80e6 	bne.w	8001d68 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b9c:	f002 f92a 	bl	8003df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001ba0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d068      	beq.n	8001c7a <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001ba8:	f002 f946 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001bac:	f002 f922 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001bb0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001bb4:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	dc04      	bgt.n	8001bc4 <xQueueGenericSend+0xcc>
 8001bba:	e011      	b.n	8001be0 <xQueueGenericSend+0xe8>
			--cTxLock;
 8001bbc:	1e6a      	subs	r2, r5, #1
 8001bbe:	b2d3      	uxtb	r3, r2
 8001bc0:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bc2:	b16b      	cbz	r3, 8001be0 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bc6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc8:	b153      	cbz	r3, 8001be0 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bca:	f001 fcad 	bl	8003528 <xTaskRemoveFromEventList>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d0f4      	beq.n	8001bbc <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8001bd2:	f001 fd95 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8001bd6:	1e6a      	subs	r2, r5, #1
 8001bd8:	b2d3      	uxtb	r3, r2
 8001bda:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f1      	bne.n	8001bc4 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 8001be0:	23ff      	movs	r3, #255	; 0xff
 8001be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001be6:	f002 f927 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001bea:	f002 f903 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001bee:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001bf2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bf4:	2d00      	cmp	r5, #0
 8001bf6:	dd14      	ble.n	8001c22 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bf8:	f104 0910 	add.w	r9, r4, #16
 8001bfc:	e003      	b.n	8001c06 <xQueueGenericSend+0x10e>
				--cRxLock;
 8001bfe:	1e6a      	subs	r2, r5, #1
 8001c00:	b2d3      	uxtb	r3, r2
 8001c02:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c04:	b16b      	cbz	r3, 8001c22 <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c06:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c08:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c0a:	b153      	cbz	r3, 8001c22 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c0c:	f001 fc8c 	bl	8003528 <xTaskRemoveFromEventList>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d0f4      	beq.n	8001bfe <xQueueGenericSend+0x106>
					vTaskMissedYield();
 8001c14:	f001 fd74 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 8001c18:	1e6a      	subs	r2, r5, #1
 8001c1a:	b2d3      	uxtb	r3, r2
 8001c1c:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f1      	bne.n	8001c06 <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 8001c22:	23ff      	movs	r3, #255	; 0xff
 8001c24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001c28:	f002 f906 	bl	8003e38 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001c2c:	f001 fb54 	bl	80032d8 <xTaskResumeAll>
 8001c30:	2501      	movs	r5, #1
 8001c32:	e785      	b.n	8001b40 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f43f af6b 	beq.w	8001b12 <xQueueGenericSend+0x1a>
 8001c3c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	e7fe      	b.n	8001c4c <xQueueGenericSend+0x154>
 8001c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001c5e:	e7fe      	b.n	8001c5e <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f43f af6a 	beq.w	8001b3c <xQueueGenericSend+0x44>
 8001c68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	e7fe      	b.n	8001c78 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c7a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8001c7e:	f002 f8db 	bl	8003e38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c82:	9901      	ldr	r1, [sp, #4]
 8001c84:	4648      	mov	r0, r9
 8001c86:	f001 fb5b 	bl	8003340 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001c8a:	f002 f8b3 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001c8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c92:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c94:	2d00      	cmp	r5, #0
 8001c96:	dc04      	bgt.n	8001ca2 <xQueueGenericSend+0x1aa>
 8001c98:	e011      	b.n	8001cbe <xQueueGenericSend+0x1c6>
			--cTxLock;
 8001c9a:	1e6b      	subs	r3, r5, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ca0:	b16a      	cbz	r2, 8001cbe <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ca6:	b153      	cbz	r3, 8001cbe <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca8:	f001 fc3e 	bl	8003528 <xTaskRemoveFromEventList>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d0f4      	beq.n	8001c9a <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8001cb0:	f001 fd26 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8001cb4:	1e6b      	subs	r3, r5, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d1f1      	bne.n	8001ca2 <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8001cbe:	23ff      	movs	r3, #255	; 0xff
 8001cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001cc4:	f002 f8b8 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001cc8:	f002 f894 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001cd0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cd2:	2d00      	cmp	r5, #0
 8001cd4:	dc04      	bgt.n	8001ce0 <xQueueGenericSend+0x1e8>
 8001cd6:	e011      	b.n	8001cfc <xQueueGenericSend+0x204>
				--cRxLock;
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cde:	b16a      	cbz	r2, 8001cfc <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ce2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce4:	b153      	cbz	r3, 8001cfc <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ce6:	f001 fc1f 	bl	8003528 <xTaskRemoveFromEventList>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0f4      	beq.n	8001cd8 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8001cee:	f001 fd07 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 8001cf2:	1e6b      	subs	r3, r5, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d1f1      	bne.n	8001ce0 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8001cfc:	23ff      	movs	r3, #255	; 0xff
 8001cfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001d02:	f002 f899 	bl	8003e38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8001d06:	f001 fae7 	bl	80032d8 <xTaskResumeAll>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d190      	bne.n	8001c30 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8001d0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	e785      	b.n	8001c30 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d24:	a802      	add	r0, sp, #8
 8001d26:	f001 fc8b 	bl	8003640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d2a:	e71a      	b.n	8001b62 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d2c:	463a      	mov	r2, r7
 8001d2e:	4641      	mov	r1, r8
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff fdef 	bl	8001914 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d153      	bne.n	8001de4 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8001d3c:	b148      	cbz	r0, 8001d52 <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8001d3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d46:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001d52:	f002 f871 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 8001d56:	2001      	movs	r0, #1
}
 8001d58:	b005      	add	sp, #20
 8001d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d5e:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8001d60:	f002 f86a 	bl	8003e38 <vPortExitCritical>
					return errQUEUE_FULL;
 8001d64:	9800      	ldr	r0, [sp, #0]
 8001d66:	e7f7      	b.n	8001d58 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8001d68:	f002 f844 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001d6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d70:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	dd10      	ble.n	8001d98 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d76:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001d7a:	e003      	b.n	8001d84 <xQueueGenericSend+0x28c>
			--cTxLock;
 8001d7c:	1e6b      	subs	r3, r5, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d82:	b14a      	cbz	r2, 8001d98 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d86:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d88:	b133      	cbz	r3, 8001d98 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d8a:	f001 fbcd 	bl	8003528 <xTaskRemoveFromEventList>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d0f4      	beq.n	8001d7c <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8001d92:	f001 fcb5 	bl	8003700 <vTaskMissedYield>
 8001d96:	e7f1      	b.n	8001d7c <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8001d98:	23ff      	movs	r3, #255	; 0xff
 8001d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001d9e:	f002 f84b 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001da2:	f002 f827 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001da6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001daa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001dac:	2d00      	cmp	r5, #0
 8001dae:	dd10      	ble.n	8001dd2 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001db0:	f104 0610 	add.w	r6, r4, #16
 8001db4:	e003      	b.n	8001dbe <xQueueGenericSend+0x2c6>
				--cRxLock;
 8001db6:	1e6b      	subs	r3, r5, #1
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001dbc:	b14a      	cbz	r2, 8001dd2 <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dbe:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dc0:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dc2:	b133      	cbz	r3, 8001dd2 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dc4:	f001 fbb0 	bl	8003528 <xTaskRemoveFromEventList>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d0f4      	beq.n	8001db6 <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8001dcc:	f001 fc98 	bl	8003700 <vTaskMissedYield>
 8001dd0:	e7f1      	b.n	8001db6 <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8001dd2:	23ff      	movs	r3, #255	; 0xff
 8001dd4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001dd8:	f002 f82e 	bl	8003e38 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001ddc:	f001 fa7c 	bl	80032d8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7b9      	b.n	8001d58 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001de8:	f001 fb9e 	bl	8003528 <xTaskRemoveFromEventList>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d0b0      	beq.n	8001d52 <xQueueGenericSend+0x25a>
 8001df0:	e7a5      	b.n	8001d3e <xQueueGenericSend+0x246>
 8001df2:	bf00      	nop

08001df4 <xQueueCreateMutex>:
	{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001df8:	2050      	movs	r0, #80	; 0x50
 8001dfa:	f002 f95b 	bl	80040b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001dfe:	4604      	mov	r4, r0
 8001e00:	b370      	cbz	r0, 8001e60 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e02:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8001e04:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e06:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e0a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001e0c:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001e10:	f001 fff0 	bl	8003df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e14:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001e18:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e1a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e1c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e24:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e26:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e28:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e2a:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e2c:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e2e:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8001e32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e3a:	f7ff fd1f 	bl	800187c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e42:	f7ff fd1b 	bl	800187c <vListInitialise>
	taskEXIT_CRITICAL();
 8001e46:	f001 fff7 	bl	8003e38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001e4a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001e4e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001e50:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001e52:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001e54:	462b      	mov	r3, r5
 8001e56:	462a      	mov	r2, r5
 8001e58:	4629      	mov	r1, r5
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff fe4c 	bl	8001af8 <xQueueGenericSend>
	}
 8001e60:	4620      	mov	r0, r4
 8001e62:	bd70      	pop	{r4, r5, r6, pc}

08001e64 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d04b      	beq.n	8001f00 <xQueueGenericSendFromISR+0x9c>
{
 8001e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6c:	460e      	mov	r6, r1
 8001e6e:	4617      	mov	r7, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e74:	b321      	cbz	r1, 8001ec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e76:	2d02      	cmp	r5, #2
 8001e78:	d10b      	bne.n	8001e92 <xQueueGenericSendFromISR+0x2e>
 8001e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d008      	beq.n	8001e92 <xQueueGenericSendFromISR+0x2e>
 8001e80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	e7fe      	b.n	8001e90 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e92:	f002 f8e1 	bl	8004058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e96:	f3ef 8811 	mrs	r8, BASEPRI
 8001e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d312      	bcc.n	8001ed8 <xQueueGenericSendFromISR+0x74>
 8001eb2:	2d02      	cmp	r5, #2
 8001eb4:	d010      	beq.n	8001ed8 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8001eb6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001eb8:	f388 8811 	msr	BASEPRI, r8
}
 8001ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ec0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0d7      	beq.n	8001e76 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8001ec6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001eca:	f383 8811 	msr	BASEPRI, r3
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	f3bf 8f4f 	dsb	sy
 8001ed6:	e7fe      	b.n	8001ed6 <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ed8:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8001eda:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ee0:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ee2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fd15 	bl	8001914 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001eea:	1c6b      	adds	r3, r5, #1
 8001eec:	d011      	beq.n	8001f12 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001eee:	1c6b      	adds	r3, r5, #1
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8001ef6:	2001      	movs	r0, #1
	__asm volatile
 8001ef8:	f388 8811 	msr	BASEPRI, r8
}
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8001f00:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001f10:	e7fe      	b.n	8001f10 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ee      	beq.n	8001ef6 <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f1c:	f001 fb04 	bl	8003528 <xTaskRemoveFromEventList>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d0e8      	beq.n	8001ef6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8001f24:	2f00      	cmp	r7, #0
 8001f26:	d0e6      	beq.n	8001ef6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	6038      	str	r0, [r7, #0]
 8001f2c:	e7c4      	b.n	8001eb8 <xQueueGenericSendFromISR+0x54>
 8001f2e:	bf00      	nop

08001f30 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8001f30:	b370      	cbz	r0, 8001f90 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001f38:	b143      	cbz	r3, 8001f4c <xQueueGiveFromISR+0x1c>
 8001f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	e7fe      	b.n	8001f4a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	460c      	mov	r4, r1
 8001f50:	b33b      	cbz	r3, 8001fa2 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f52:	f002 f881 	bl	8004058 <vPortValidateInterruptPriority>
	__asm volatile
 8001f56:	f3ef 8511 	mrs	r5, BASEPRI
 8001f5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001f6c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d923      	bls.n	8001fba <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f72:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f76:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8001f78:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f7a:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f7c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8001f7e:	d020      	beq.n	8001fc2 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f80:	3301      	adds	r3, #1
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8001f88:	2001      	movs	r0, #1
	__asm volatile
 8001f8a:	f385 8811 	msr	BASEPRI, r5
}
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8001f90:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001fa0:	e7fe      	b.n	8001fa0 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001fa2:	6883      	ldr	r3, [r0, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0d4      	beq.n	8001f52 <xQueueGiveFromISR+0x22>
 8001fa8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	e7fe      	b.n	8001fb8 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8001fba:	2000      	movs	r0, #0
	__asm volatile
 8001fbc:	f385 8811 	msr	BASEPRI, r5
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0df      	beq.n	8001f88 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fc8:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001fcc:	f001 faac 	bl	8003528 <xTaskRemoveFromEventList>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d0d9      	beq.n	8001f88 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	d0d7      	beq.n	8001f88 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fd8:	2001      	movs	r0, #1
 8001fda:	6020      	str	r0, [r4, #0]
 8001fdc:	e7ee      	b.n	8001fbc <xQueueGiveFromISR+0x8c>
 8001fde:	bf00      	nop

08001fe0 <xQueueReceive>:
{
 8001fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	f000 815f 	beq.w	80022ac <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fee:	460f      	mov	r7, r1
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	f000 8094 	beq.w	8002120 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ff8:	f001 fb88 	bl	800370c <xTaskGetSchedulerState>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	f000 809c 	beq.w	800213a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002002:	f001 fef7 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002006:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002008:	2d00      	cmp	r5, #0
 800200a:	d172      	bne.n	80020f2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 800200c:	9b01      	ldr	r3, [sp, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80f1 	beq.w	80021f6 <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002014:	a802      	add	r0, sp, #8
 8002016:	f001 fb13 	bl	8003640 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800201a:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800201c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8002020:	f001 ff0a 	bl	8003e38 <vPortExitCritical>
		vTaskSuspendAll();
 8002024:	f001 f950 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002028:	f001 fee4 	bl	8003df4 <vPortEnterCritical>
 800202c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002030:	2bff      	cmp	r3, #255	; 0xff
 8002032:	bf08      	it	eq
 8002034:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002038:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800203c:	2bff      	cmp	r3, #255	; 0xff
 800203e:	bf08      	it	eq
 8002040:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002044:	f001 fef8 	bl	8003e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002048:	a901      	add	r1, sp, #4
 800204a:	a802      	add	r0, sp, #8
 800204c:	f001 fb04 	bl	8003658 <xTaskCheckForTimeOut>
 8002050:	2800      	cmp	r0, #0
 8002052:	d17f      	bne.n	8002154 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8002054:	f001 fece 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80d1 	beq.w	8002202 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8002060:	f001 feea 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002064:	f001 fec6 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002068:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800206c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800206e:	2d00      	cmp	r5, #0
 8002070:	dc04      	bgt.n	800207c <xQueueReceive+0x9c>
 8002072:	e011      	b.n	8002098 <xQueueReceive+0xb8>
			--cTxLock;
 8002074:	1e6b      	subs	r3, r5, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800207a:	b16a      	cbz	r2, 8002098 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800207c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800207e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002080:	b153      	cbz	r3, 8002098 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002082:	f001 fa51 	bl	8003528 <xTaskRemoveFromEventList>
 8002086:	2800      	cmp	r0, #0
 8002088:	d0f4      	beq.n	8002074 <xQueueReceive+0x94>
						vTaskMissedYield();
 800208a:	f001 fb39 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 800208e:	1e6b      	subs	r3, r5, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002094:	2a00      	cmp	r2, #0
 8002096:	d1f1      	bne.n	800207c <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8002098:	23ff      	movs	r3, #255	; 0xff
 800209a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800209e:	f001 fecb 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 80020a2:	f001 fea7 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80020a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80020aa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	dd14      	ble.n	80020da <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020b0:	f104 0910 	add.w	r9, r4, #16
 80020b4:	e003      	b.n	80020be <xQueueReceive+0xde>
				--cRxLock;
 80020b6:	1e6b      	subs	r3, r5, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020bc:	b16a      	cbz	r2, 80020da <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020be:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020c2:	b153      	cbz	r3, 80020da <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c4:	f001 fa30 	bl	8003528 <xTaskRemoveFromEventList>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d0f4      	beq.n	80020b6 <xQueueReceive+0xd6>
					vTaskMissedYield();
 80020cc:	f001 fb18 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 80020d0:	1e6b      	subs	r3, r5, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d1f1      	bne.n	80020be <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80020e0:	f001 feaa 	bl	8003e38 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80020e4:	f001 f8f8 	bl	80032d8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80020e8:	f001 fe84 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020ee:	2d00      	cmp	r5, #0
 80020f0:	d07d      	beq.n	80021ee <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020f4:	b152      	cbz	r2, 800210c <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020f6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020f8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020fa:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020fc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020fe:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002100:	bf24      	itt	cs
 8002102:	6821      	ldrcs	r1, [r4, #0]
 8002104:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002106:	4638      	mov	r0, r7
 8002108:	f00a f932 	bl	800c370 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800210c:	3d01      	subs	r5, #1
 800210e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002110:	6923      	ldr	r3, [r4, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80d3 	bne.w	80022be <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8002118:	f001 fe8e 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 800211c:	2001      	movs	r0, #1
 800211e:	e06d      	b.n	80021fc <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002120:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	f43f af68 	beq.w	8001ff8 <xQueueReceive+0x18>
	__asm volatile
 8002128:	f04f 0340 	mov.w	r3, #64	; 0x40
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	e7fe      	b.n	8002138 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f43f af60 	beq.w	8002002 <xQueueReceive+0x22>
 8002142:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	e7fe      	b.n	8002152 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8002154:	f001 fe4e 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002158:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800215c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800215e:	2d00      	cmp	r5, #0
 8002160:	dc04      	bgt.n	800216c <xQueueReceive+0x18c>
 8002162:	e011      	b.n	8002188 <xQueueReceive+0x1a8>
			--cTxLock;
 8002164:	1e6b      	subs	r3, r5, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800216a:	b16a      	cbz	r2, 8002188 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800216c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800216e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002170:	b153      	cbz	r3, 8002188 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002172:	f001 f9d9 	bl	8003528 <xTaskRemoveFromEventList>
 8002176:	2800      	cmp	r0, #0
 8002178:	d0f4      	beq.n	8002164 <xQueueReceive+0x184>
						vTaskMissedYield();
 800217a:	f001 fac1 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 800217e:	1e6b      	subs	r3, r5, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002184:	2a00      	cmp	r2, #0
 8002186:	d1f1      	bne.n	800216c <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8002188:	23ff      	movs	r3, #255	; 0xff
 800218a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800218e:	f001 fe53 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002192:	f001 fe2f 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002196:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800219a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800219c:	2d00      	cmp	r5, #0
 800219e:	dd14      	ble.n	80021ca <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021a0:	f104 0910 	add.w	r9, r4, #16
 80021a4:	e003      	b.n	80021ae <xQueueReceive+0x1ce>
				--cRxLock;
 80021a6:	1e6b      	subs	r3, r5, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ac:	b16a      	cbz	r2, 80021ca <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ae:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b2:	b153      	cbz	r3, 80021ca <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b4:	f001 f9b8 	bl	8003528 <xTaskRemoveFromEventList>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d0f4      	beq.n	80021a6 <xQueueReceive+0x1c6>
					vTaskMissedYield();
 80021bc:	f001 faa0 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 80021c0:	1e6b      	subs	r3, r5, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d1f1      	bne.n	80021ae <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80021d0:	f001 fe32 	bl	8003e38 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80021d4:	f001 f880 	bl	80032d8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80021d8:	f001 fe0c 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80021dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021de:	b153      	cbz	r3, 80021f6 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 80021e0:	f001 fe2a 	bl	8003e38 <vPortExitCritical>
		taskENTER_CRITICAL();
 80021e4:	f001 fe06 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	d181      	bne.n	80020f2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f af15 	bne.w	8002020 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 80021f6:	f001 fe1f 	bl	8003e38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80021fa:	2000      	movs	r0, #0
}
 80021fc:	b005      	add	sp, #20
 80021fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002202:	f001 fe19 	bl	8003e38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002206:	9901      	ldr	r1, [sp, #4]
 8002208:	4630      	mov	r0, r6
 800220a:	f001 f899 	bl	8003340 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800220e:	f001 fdf1 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002212:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002216:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002218:	2d00      	cmp	r5, #0
 800221a:	dc04      	bgt.n	8002226 <xQueueReceive+0x246>
 800221c:	e011      	b.n	8002242 <xQueueReceive+0x262>
			--cTxLock;
 800221e:	1e6b      	subs	r3, r5, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002224:	b16a      	cbz	r2, 8002242 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002226:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002228:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800222a:	b153      	cbz	r3, 8002242 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800222c:	f001 f97c 	bl	8003528 <xTaskRemoveFromEventList>
 8002230:	2800      	cmp	r0, #0
 8002232:	d0f4      	beq.n	800221e <xQueueReceive+0x23e>
						vTaskMissedYield();
 8002234:	f001 fa64 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8002238:	1e6b      	subs	r3, r5, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800223e:	2a00      	cmp	r2, #0
 8002240:	d1f1      	bne.n	8002226 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8002242:	23ff      	movs	r3, #255	; 0xff
 8002244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002248:	f001 fdf6 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 800224c:	f001 fdd2 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002250:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002254:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002256:	2d00      	cmp	r5, #0
 8002258:	dd14      	ble.n	8002284 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225a:	f104 0910 	add.w	r9, r4, #16
 800225e:	e003      	b.n	8002268 <xQueueReceive+0x288>
				--cRxLock;
 8002260:	1e6b      	subs	r3, r5, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002266:	b16a      	cbz	r2, 8002284 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002268:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800226c:	b153      	cbz	r3, 8002284 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226e:	f001 f95b 	bl	8003528 <xTaskRemoveFromEventList>
 8002272:	2800      	cmp	r0, #0
 8002274:	d0f4      	beq.n	8002260 <xQueueReceive+0x280>
					vTaskMissedYield();
 8002276:	f001 fa43 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 800227a:	1e6b      	subs	r3, r5, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002280:	2a00      	cmp	r2, #0
 8002282:	d1f1      	bne.n	8002268 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002284:	23ff      	movs	r3, #255	; 0xff
 8002286:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800228a:	f001 fdd5 	bl	8003e38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800228e:	f001 f823 	bl	80032d8 <xTaskResumeAll>
 8002292:	2800      	cmp	r0, #0
 8002294:	d1a6      	bne.n	80021e4 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8002296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80022aa:	e79b      	b.n	80021e4 <xQueueReceive+0x204>
 80022ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80022bc:	e7fe      	b.n	80022bc <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022be:	f104 0010 	add.w	r0, r4, #16
 80022c2:	f001 f931 	bl	8003528 <xTaskRemoveFromEventList>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	f43f af26 	beq.w	8002118 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80022cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	e71a      	b.n	8002118 <xQueueReceive+0x138>
 80022e2:	bf00      	nop

080022e4 <xQueueSemaphoreTake>:
{
 80022e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d05c      	beq.n	80023aa <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 80022f0:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80022f2:	4604      	mov	r4, r0
 80022f4:	b147      	cbz	r7, 8002308 <xQueueSemaphoreTake+0x24>
 80022f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	e7fe      	b.n	8002306 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002308:	f001 fa00 	bl	800370c <xTaskGetSchedulerState>
 800230c:	4605      	mov	r5, r0
 800230e:	2800      	cmp	r0, #0
 8002310:	d054      	beq.n	80023bc <xQueueSemaphoreTake+0xd8>
 8002312:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002314:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8002318:	f001 fd6c 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800231c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8148 	bne.w	80025b4 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002324:	9b01      	ldr	r3, [sp, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 813a 	beq.w	80025a0 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 800232c:	2d00      	cmp	r5, #0
 800232e:	f000 809d 	beq.w	800246c <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 8002332:	f001 fd81 	bl	8003e38 <vPortExitCritical>
		vTaskSuspendAll();
 8002336:	f000 ffc7 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233a:	f001 fd5b 	bl	8003df4 <vPortEnterCritical>
 800233e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	bf04      	itt	eq
 8002346:	2300      	moveq	r3, #0
 8002348:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800234c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002350:	2bff      	cmp	r3, #255	; 0xff
 8002352:	bf04      	itt	eq
 8002354:	2300      	moveq	r3, #0
 8002356:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800235a:	f001 fd6d 	bl	8003e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800235e:	a901      	add	r1, sp, #4
 8002360:	a802      	add	r0, sp, #8
 8002362:	f001 f979 	bl	8003658 <xTaskCheckForTimeOut>
 8002366:	2800      	cmp	r0, #0
 8002368:	d135      	bne.n	80023d6 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 800236a:	f001 fd43 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800236e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a4 	beq.w	80024be <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 8002376:	f001 fd5f 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 800237a:	f001 fd3b 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800237e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002382:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002384:	2d00      	cmp	r5, #0
 8002386:	dc05      	bgt.n	8002394 <xQueueSemaphoreTake+0xb0>
 8002388:	e074      	b.n	8002474 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800238a:	1e6b      	subs	r3, r5, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002390:	2a00      	cmp	r2, #0
 8002392:	d06f      	beq.n	8002474 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002394:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002396:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06b      	beq.n	8002474 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800239c:	f001 f8c4 	bl	8003528 <xTaskRemoveFromEventList>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d0f2      	beq.n	800238a <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 80023a4:	f001 f9ac 	bl	8003700 <vTaskMissedYield>
 80023a8:	e7ef      	b.n	800238a <xQueueSemaphoreTake+0xa6>
 80023aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80023ba:	e7fe      	b.n	80023ba <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023bc:	9b01      	ldr	r3, [sp, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80d4 	beq.w	800256c <xQueueSemaphoreTake+0x288>
 80023c4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	e7fe      	b.n	80023d4 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 80023d6:	f001 fd0d 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80023da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80023de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	dc04      	bgt.n	80023ee <xQueueSemaphoreTake+0x10a>
 80023e4:	e011      	b.n	800240a <xQueueSemaphoreTake+0x126>
			--cTxLock;
 80023e6:	1e6b      	subs	r3, r5, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023ec:	b16a      	cbz	r2, 800240a <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023f2:	b153      	cbz	r3, 800240a <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f4:	f001 f898 	bl	8003528 <xTaskRemoveFromEventList>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d0f4      	beq.n	80023e6 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 80023fc:	f001 f980 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8002400:	1e6b      	subs	r3, r5, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002406:	2a00      	cmp	r2, #0
 8002408:	d1f1      	bne.n	80023ee <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 800240a:	23ff      	movs	r3, #255	; 0xff
 800240c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002410:	f001 fd12 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002414:	f001 fcee 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002418:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800241c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800241e:	2d00      	cmp	r5, #0
 8002420:	dd14      	ble.n	800244c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002422:	f104 0810 	add.w	r8, r4, #16
 8002426:	e003      	b.n	8002430 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 8002428:	1e6b      	subs	r3, r5, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800242e:	b16a      	cbz	r2, 800244c <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002430:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002432:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002434:	b153      	cbz	r3, 800244c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002436:	f001 f877 	bl	8003528 <xTaskRemoveFromEventList>
 800243a:	2800      	cmp	r0, #0
 800243c:	d0f4      	beq.n	8002428 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 800243e:	f001 f95f 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 8002442:	1e6b      	subs	r3, r5, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002448:	2a00      	cmp	r2, #0
 800244a:	d1f1      	bne.n	8002430 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 800244c:	23ff      	movs	r3, #255	; 0xff
 800244e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002452:	f001 fcf1 	bl	8003e38 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002456:	f000 ff3f 	bl	80032d8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800245a:	f001 fccb 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800245e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07c      	beq.n	800255e <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 8002464:	f001 fce8 	bl	8003e38 <vPortExitCritical>
	return xReturn;
 8002468:	2501      	movs	r5, #1
 800246a:	e755      	b.n	8002318 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800246c:	a802      	add	r0, sp, #8
 800246e:	f001 f8e7 	bl	8003640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002472:	e75e      	b.n	8002332 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002474:	23ff      	movs	r3, #255	; 0xff
 8002476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800247a:	f001 fcdd 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 800247e:	f001 fcb9 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002482:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002486:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002488:	2d00      	cmp	r5, #0
 800248a:	dd10      	ble.n	80024ae <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248c:	f104 0810 	add.w	r8, r4, #16
 8002490:	e003      	b.n	800249a <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002492:	1e6b      	subs	r3, r5, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002498:	b14a      	cbz	r2, 80024ae <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249c:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249e:	b133      	cbz	r3, 80024ae <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a0:	f001 f842 	bl	8003528 <xTaskRemoveFromEventList>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d0f4      	beq.n	8002492 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 80024a8:	f001 f92a 	bl	8003700 <vTaskMissedYield>
 80024ac:	e7f1      	b.n	8002492 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 80024ae:	23ff      	movs	r3, #255	; 0xff
 80024b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80024b4:	f001 fcc0 	bl	8003e38 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80024b8:	f000 ff0e 	bl	80032d8 <xTaskResumeAll>
 80024bc:	e7d4      	b.n	8002468 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 80024be:	f001 fcbb 	bl	8003e38 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d062      	beq.n	800258e <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024c8:	9901      	ldr	r1, [sp, #4]
 80024ca:	4630      	mov	r0, r6
 80024cc:	f000 ff38 	bl	8003340 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80024d0:	f001 fc90 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80024d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80024d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024da:	2d00      	cmp	r5, #0
 80024dc:	dc04      	bgt.n	80024e8 <xQueueSemaphoreTake+0x204>
 80024de:	e00d      	b.n	80024fc <xQueueSemaphoreTake+0x218>
			--cTxLock;
 80024e0:	1e6b      	subs	r3, r5, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024e6:	b14a      	cbz	r2, 80024fc <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ea:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ec:	b133      	cbz	r3, 80024fc <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ee:	f001 f81b 	bl	8003528 <xTaskRemoveFromEventList>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d0f4      	beq.n	80024e0 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 80024f6:	f001 f903 	bl	8003700 <vTaskMissedYield>
 80024fa:	e7f1      	b.n	80024e0 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 80024fc:	23ff      	movs	r3, #255	; 0xff
 80024fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002502:	f001 fc99 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002506:	f001 fc75 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800250a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800250e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002510:	2d00      	cmp	r5, #0
 8002512:	dd10      	ble.n	8002536 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002514:	f104 0810 	add.w	r8, r4, #16
 8002518:	e003      	b.n	8002522 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 800251a:	1e6b      	subs	r3, r5, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002520:	b14a      	cbz	r2, 8002536 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002522:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002524:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002526:	b133      	cbz	r3, 8002536 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002528:	f000 fffe 	bl	8003528 <xTaskRemoveFromEventList>
 800252c:	2800      	cmp	r0, #0
 800252e:	d0f4      	beq.n	800251a <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 8002530:	f001 f8e6 	bl	8003700 <vTaskMissedYield>
 8002534:	e7f1      	b.n	800251a <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 8002536:	23ff      	movs	r3, #255	; 0xff
 8002538:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800253c:	f001 fc7c 	bl	8003e38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002540:	f000 feca 	bl	80032d8 <xTaskResumeAll>
 8002544:	2800      	cmp	r0, #0
 8002546:	d18f      	bne.n	8002468 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 8002548:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800254c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002550:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	e784      	b.n	8002468 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 800255e:	f001 fc6b 	bl	8003e38 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8002562:	b92f      	cbnz	r7, 8002570 <xQueueSemaphoreTake+0x28c>
}
 8002564:	4638      	mov	r0, r7
 8002566:	b004      	add	sp, #16
 8002568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800256c:	4607      	mov	r7, r0
 800256e:	e6d1      	b.n	8002314 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002570:	f001 fc40 	bl	8003df4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002574:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002576:	b119      	cbz	r1, 8002580 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002578:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002580:	68a0      	ldr	r0, [r4, #8]
 8002582:	f001 f95f 	bl	8003844 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002586:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 8002588:	f001 fc56 	bl	8003e38 <vPortExitCritical>
 800258c:	e7ea      	b.n	8002564 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 800258e:	f001 fc31 	bl	8003df4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002592:	68a0      	ldr	r0, [r4, #8]
 8002594:	f001 f8ca 	bl	800372c <xTaskPriorityInherit>
 8002598:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800259a:	f001 fc4d 	bl	8003e38 <vPortExitCritical>
 800259e:	e793      	b.n	80024c8 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80025a0:	b197      	cbz	r7, 80025c8 <xQueueSemaphoreTake+0x2e4>
 80025a2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	e7fe      	b.n	80025b2 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025b4:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80025b6:	3b01      	subs	r3, #1
 80025b8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025ba:	b1ca      	cbz	r2, 80025f0 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025bc:	6923      	ldr	r3, [r4, #16]
 80025be:	b933      	cbnz	r3, 80025ce <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 80025c0:	f001 fc3a 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 80025c4:	2701      	movs	r7, #1
 80025c6:	e7cd      	b.n	8002564 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 80025c8:	f001 fc36 	bl	8003e38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80025cc:	e7ca      	b.n	8002564 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025ce:	f104 0010 	add.w	r0, r4, #16
 80025d2:	f000 ffa9 	bl	8003528 <xTaskRemoveFromEventList>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d0f2      	beq.n	80025c0 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 80025da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	e7e7      	b.n	80025c0 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80025f0:	f001 f988 	bl	8003904 <pvTaskIncrementMutexHeldCount>
 80025f4:	60a0      	str	r0, [r4, #8]
 80025f6:	e7e1      	b.n	80025bc <xQueueSemaphoreTake+0x2d8>

080025f8 <xQueueReceiveFromISR>:
{
 80025f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80025fc:	b310      	cbz	r0, 8002644 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fe:	460e      	mov	r6, r1
 8002600:	4617      	mov	r7, r2
 8002602:	4604      	mov	r4, r0
 8002604:	b191      	cbz	r1, 800262c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002606:	f001 fd27 	bl	8004058 <vPortValidateInterruptPriority>
	__asm volatile
 800260a:	f3ef 8911 	mrs	r9, BASEPRI
 800260e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800261e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002620:	b9cd      	cbnz	r5, 8002656 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8002622:	4628      	mov	r0, r5
	__asm volatile
 8002624:	f389 8811 	msr	BASEPRI, r9
}
 8002628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0e9      	beq.n	8002606 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8002632:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	e7fe      	b.n	8002642 <xQueueReceiveFromISR+0x4a>
 8002644:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002654:	e7fe      	b.n	8002654 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002656:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800265a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800265c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002660:	b152      	cbz	r2, 8002678 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002662:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002664:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002666:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002668:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800266a:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800266c:	bf24      	itt	cs
 800266e:	6821      	ldrcs	r1, [r4, #0]
 8002670:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002672:	4630      	mov	r0, r6
 8002674:	f009 fe7c 	bl	800c370 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002678:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800267a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800267e:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002680:	d009      	beq.n	8002696 <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002682:	f108 0301 	add.w	r3, r8, #1
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800268c:	2001      	movs	r0, #1
	__asm volatile
 800268e:	f389 8811 	msr	BASEPRI, r9
}
 8002692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f7      	beq.n	800268c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800269c:	f104 0010 	add.w	r0, r4, #16
 80026a0:	f000 ff42 	bl	8003528 <xTaskRemoveFromEventList>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d0f1      	beq.n	800268c <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 80026a8:	2f00      	cmp	r7, #0
 80026aa:	d0ef      	beq.n	800268c <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80026ac:	2001      	movs	r0, #1
 80026ae:	6038      	str	r0, [r7, #0]
 80026b0:	e7b8      	b.n	8002624 <xQueueReceiveFromISR+0x2c>
 80026b2:	bf00      	nop

080026b4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80026b4:	b158      	cbz	r0, 80026ce <uxQueueMessagesWaiting+0x1a>
{
 80026b6:	b510      	push	{r4, lr}
 80026b8:	4604      	mov	r4, r0
 80026ba:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 80026bc:	f001 fb9a 	bl	8003df4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80026c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026c2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80026c4:	f001 fbb8 	bl	8003e38 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80026c8:	9801      	ldr	r0, [sp, #4]
 80026ca:	b002      	add	sp, #8
 80026cc:	bd10      	pop	{r4, pc}
	__asm volatile
 80026ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80026de:	e7fe      	b.n	80026de <uxQueueMessagesWaiting+0x2a>

080026e0 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <vQueueAddToRegistry+0x4c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	b17a      	cbz	r2, 8002706 <vQueueAddToRegistry+0x26>
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	b162      	cbz	r2, 8002704 <vQueueAddToRegistry+0x24>
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	b192      	cbz	r2, 8002714 <vQueueAddToRegistry+0x34>
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	b192      	cbz	r2, 8002718 <vQueueAddToRegistry+0x38>
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	b192      	cbz	r2, 800271c <vQueueAddToRegistry+0x3c>
 80026f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f8:	b192      	cbz	r2, 8002720 <vQueueAddToRegistry+0x40>
 80026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fc:	b192      	cbz	r2, 8002724 <vQueueAddToRegistry+0x44>
 80026fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002700:	b192      	cbz	r2, 8002728 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002702:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002704:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002706:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800270a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800270e:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8002712:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002714:	2202      	movs	r2, #2
 8002716:	e7f6      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002718:	2203      	movs	r2, #3
 800271a:	e7f4      	b.n	8002706 <vQueueAddToRegistry+0x26>
 800271c:	2204      	movs	r2, #4
 800271e:	e7f2      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002720:	2205      	movs	r2, #5
 8002722:	e7f0      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002724:	2206      	movs	r2, #6
 8002726:	e7ee      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002728:	2207      	movs	r2, #7
 800272a:	e7ec      	b.n	8002706 <vQueueAddToRegistry+0x26>
 800272c:	20000bd8 	.word	0x20000bd8

08002730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4605      	mov	r5, r0
 8002734:	460e      	mov	r6, r1
 8002736:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002738:	f001 fb5c 	bl	8003df4 <vPortEnterCritical>
 800273c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002740:	2bff      	cmp	r3, #255	; 0xff
 8002742:	bf04      	itt	eq
 8002744:	2300      	moveq	r3, #0
 8002746:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800274a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	bf04      	itt	eq
 8002752:	2300      	moveq	r3, #0
 8002754:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8002758:	f001 fb6e 	bl	8003e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800275c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800275e:	2b00      	cmp	r3, #0
 8002760:	d043      	beq.n	80027ea <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8002762:	f001 fb47 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002766:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800276a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800276c:	2c00      	cmp	r4, #0
 800276e:	dd14      	ble.n	800279a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002770:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002774:	e003      	b.n	800277e <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8002776:	1e63      	subs	r3, r4, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800277c:	b16a      	cbz	r2, 800279a <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002780:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002782:	b153      	cbz	r3, 800279a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002784:	f000 fed0 	bl	8003528 <xTaskRemoveFromEventList>
 8002788:	2800      	cmp	r0, #0
 800278a:	d0f4      	beq.n	8002776 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 800278c:	f000 ffb8 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8002790:	1e63      	subs	r3, r4, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002796:	2a00      	cmp	r2, #0
 8002798:	d1f1      	bne.n	800277e <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800279a:	23ff      	movs	r3, #255	; 0xff
 800279c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80027a0:	f001 fb4a 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 80027a4:	f001 fb26 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80027a8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80027ac:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ae:	2c00      	cmp	r4, #0
 80027b0:	dd14      	ble.n	80027dc <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b2:	f105 0610 	add.w	r6, r5, #16
 80027b6:	e003      	b.n	80027c0 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 80027b8:	1e63      	subs	r3, r4, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027be:	b16a      	cbz	r2, 80027dc <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c0:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c2:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c4:	b153      	cbz	r3, 80027dc <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c6:	f000 feaf 	bl	8003528 <xTaskRemoveFromEventList>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d0f4      	beq.n	80027b8 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80027ce:	f000 ff97 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 80027d2:	1e63      	subs	r3, r4, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d8:	2a00      	cmp	r2, #0
 80027da:	d1f1      	bne.n	80027c0 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80027dc:	23ff      	movs	r3, #255	; 0xff
 80027de:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80027e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80027e6:	f001 bb27 	b.w	8003e38 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027ea:	4622      	mov	r2, r4
 80027ec:	4631      	mov	r1, r6
 80027ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80027f2:	f000 fe49 	bl	8003488 <vTaskPlaceOnEventListRestricted>
 80027f6:	e7b4      	b.n	8002762 <vQueueWaitForMessageRestricted+0x32>

080027f8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027fc:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027fe:	f001 faf9 	bl	8003df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002804:	4e34      	ldr	r6, [pc, #208]	; (80028d8 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800280c:	6833      	ldr	r3, [r6, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d032      	beq.n	8002878 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002812:	4c32      	ldr	r4, [pc, #200]	; (80028dc <prvAddNewTaskToReadyList+0xe4>)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	b33b      	cbz	r3, 8002868 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002818:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800281a:	4f31      	ldr	r7, [pc, #196]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800281e:	4932      	ldr	r1, [pc, #200]	; (80028e8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8002820:	6813      	ldr	r3, [r2, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002826:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	4283      	cmp	r3, r0
 800282c:	bf38      	it	cc
 800282e:	6008      	strcc	r0, [r1, #0]
 8002830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002834:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002838:	1d29      	adds	r1, r5, #4
 800283a:	f7ff f82f 	bl	800189c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800283e:	f001 fafb 	bl	8003e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	b173      	cbz	r3, 8002864 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002846:	6832      	ldr	r2, [r6, #0]
 8002848:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800284a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d209      	bcs.n	8002864 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002858:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002868:	6833      	ldr	r3, [r6, #0]
 800286a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4f1c      	ldr	r7, [pc, #112]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
 8002870:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002872:	bf98      	it	ls
 8002874:	6035      	strls	r5, [r6, #0]
 8002876:	e7d1      	b.n	800281c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8002878:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d003      	beq.n	8002888 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002880:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002882:	4f17      	ldr	r7, [pc, #92]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
 8002884:	4c15      	ldr	r4, [pc, #84]	; (80028dc <prvAddNewTaskToReadyList+0xe4>)
 8002886:	e7c9      	b.n	800281c <prvAddNewTaskToReadyList+0x24>
 8002888:	4f15      	ldr	r7, [pc, #84]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
 800288a:	463c      	mov	r4, r7
 800288c:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002890:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002892:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002894:	f7fe fff2 	bl	800187c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002898:	45a0      	cmp	r8, r4
 800289a:	d1f9      	bne.n	8002890 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 800289c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002900 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80028a0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002904 <prvAddNewTaskToReadyList+0x10c>
 80028a4:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 80028a6:	4648      	mov	r0, r9
 80028a8:	f7fe ffe8 	bl	800187c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028ac:	4640      	mov	r0, r8
 80028ae:	f7fe ffe5 	bl	800187c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028b2:	480e      	ldr	r0, [pc, #56]	; (80028ec <prvAddNewTaskToReadyList+0xf4>)
 80028b4:	f7fe ffe2 	bl	800187c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028b8:	480d      	ldr	r0, [pc, #52]	; (80028f0 <prvAddNewTaskToReadyList+0xf8>)
 80028ba:	f7fe ffdf 	bl	800187c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028be:	480d      	ldr	r0, [pc, #52]	; (80028f4 <prvAddNewTaskToReadyList+0xfc>)
 80028c0:	f7fe ffdc 	bl	800187c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80028c6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80028c8:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <prvAddNewTaskToReadyList+0x104>)
 80028ce:	f8c3 8000 	str.w	r8, [r3]
}
 80028d2:	e7a3      	b.n	800281c <prvAddNewTaskToReadyList+0x24>
 80028d4:	20001084 	.word	0x20001084
 80028d8:	20000c18 	.word	0x20000c18
 80028dc:	200010e0 	.word	0x200010e0
 80028e0:	20000c24 	.word	0x20000c24
 80028e4:	20001090 	.word	0x20001090
 80028e8:	20001094 	.word	0x20001094
 80028ec:	200010cc 	.word	0x200010cc
 80028f0:	200010f8 	.word	0x200010f8
 80028f4:	200010e4 	.word	0x200010e4
 80028f8:	20000c1c 	.word	0x20000c1c
 80028fc:	20000c20 	.word	0x20000c20
 8002900:	20001098 	.word	0x20001098
 8002904:	200010ac 	.word	0x200010ac

08002908 <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 8002908:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <vTaskSwitchContext.part.0+0x90>)
		taskCHECK_FOR_STACK_OVERFLOW();
 800290c:	4c23      	ldr	r4, [pc, #140]	; (800299c <vTaskSwitchContext.part.0+0x94>)
		xYieldPending = pdFALSE;
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800291c:	d103      	bne.n	8002926 <vTaskSwitchContext.part.0+0x1e>
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002924:	d02f      	beq.n	8002986 <vTaskSwitchContext.part.0+0x7e>
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	6821      	ldr	r1, [r4, #0]
 800292a:	3134      	adds	r1, #52	; 0x34
 800292c:	f008 f960 	bl	800abf0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002930:	4d1b      	ldr	r5, [pc, #108]	; (80029a0 <vTaskSwitchContext.part.0+0x98>)
 8002932:	491c      	ldr	r1, [pc, #112]	; (80029a4 <vTaskSwitchContext.part.0+0x9c>)
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	0098      	lsls	r0, r3, #2
 800293e:	588a      	ldr	r2, [r1, r2]
 8002940:	b942      	cbnz	r2, 8002954 <vTaskSwitchContext.part.0+0x4c>
 8002942:	b1bb      	cbz	r3, 8002974 <vTaskSwitchContext.part.0+0x6c>
 8002944:	3b01      	subs	r3, #1
 8002946:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800294a:	0098      	lsls	r0, r3, #2
 800294c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002950:	2a00      	cmp	r2, #0
 8002952:	d0f6      	beq.n	8002942 <vTaskSwitchContext.part.0+0x3a>
 8002954:	18c2      	adds	r2, r0, r3
 8002956:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800295a:	4602      	mov	r2, r0
 800295c:	6841      	ldr	r1, [r0, #4]
 800295e:	6849      	ldr	r1, [r1, #4]
 8002960:	6041      	str	r1, [r0, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	4291      	cmp	r1, r2
 8002966:	bf04      	itt	eq
 8002968:	6849      	ldreq	r1, [r1, #4]
 800296a:	6041      	streq	r1, [r0, #4]
 800296c:	68ca      	ldr	r2, [r1, #12]
 800296e:	6022      	str	r2, [r4, #0]
 8002970:	602b      	str	r3, [r5, #0]
}
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002984:	e7fe      	b.n	8002984 <vTaskSwitchContext.part.0+0x7c>
		taskCHECK_FOR_STACK_OVERFLOW();
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800298c:	d1cb      	bne.n	8002926 <vTaskSwitchContext.part.0+0x1e>
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002994:	d1c7      	bne.n	8002926 <vTaskSwitchContext.part.0+0x1e>
 8002996:	e7cb      	b.n	8002930 <vTaskSwitchContext.part.0+0x28>
 8002998:	20001110 	.word	0x20001110
 800299c:	20000c18 	.word	0x20000c18
 80029a0:	20001094 	.word	0x20001094
 80029a4:	20000c24 	.word	0x20000c24

080029a8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80029ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029b2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80029b6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80029b8:	4606      	mov	r6, r0
 80029ba:	460c      	mov	r4, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029be:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80029c0:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029c2:	f009 fcfd 	bl	800c3c0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029c8:	f1a9 0904 	sub.w	r9, r9, #4
 80029cc:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029ce:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80029d2:	2c00      	cmp	r4, #0
 80029d4:	d03a      	beq.n	8002a4c <prvInitialiseNewTask.constprop.0+0xa4>
 80029d6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80029da:	f104 011f 	add.w	r1, r4, #31
 80029de:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 80029e2:	e001      	b.n	80029e8 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029e4:	458c      	cmp	ip, r1
 80029e6:	d005      	beq.n	80029f4 <prvInitialiseNewTask.constprop.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029e8:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80029ec:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	d1f7      	bne.n	80029e4 <prvInitialiseNewTask.constprop.0+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029f4:	2300      	movs	r3, #0
 80029f6:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029fa:	9c08      	ldr	r4, [sp, #32]
 80029fc:	2c37      	cmp	r4, #55	; 0x37
 80029fe:	bf28      	it	cs
 8002a00:	2437      	movcs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8002a02:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8002a06:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002a08:	65ec      	str	r4, [r5, #92]	; 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a0a:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002a0c:	f8c5 a060 	str.w	sl, [r5, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a10:	f7fe ff40 	bl	8001894 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a14:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a18:	f105 0018 	add.w	r0, r5, #24
 8002a1c:	f7fe ff3a 	bl	8001894 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002a20:	f8c5 a064 	str.w	sl, [r5, #100]	; 0x64
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a24:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a26:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a28:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a2a:	f885 a068 	strb.w	sl, [r5, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002a2e:	f885 a06a 	strb.w	sl, [r5, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a32:	463a      	mov	r2, r7
 8002a34:	4631      	mov	r1, r6
 8002a36:	4648      	mov	r0, r9
 8002a38:	f001 f9b0 	bl	8003d9c <pxPortInitialiseStack>
 8002a3c:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8002a3e:	f1b8 0f00 	cmp.w	r8, #0
 8002a42:	d001      	beq.n	8002a48 <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a44:	f8c8 5000 	str.w	r5, [r8]
}
 8002a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a4c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8002a50:	e7d3      	b.n	80029fa <prvInitialiseNewTask.constprop.0+0x52>
 8002a52:	bf00      	nop

08002a54 <prvIdleTask>:
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	4c22      	ldr	r4, [pc, #136]	; (8002ae0 <prvIdleTask+0x8c>)
 8002a58:	4e22      	ldr	r6, [pc, #136]	; (8002ae4 <prvIdleTask+0x90>)
 8002a5a:	4d23      	ldr	r5, [pc, #140]	; (8002ae8 <prvIdleTask+0x94>)
 8002a5c:	4f23      	ldr	r7, [pc, #140]	; (8002aec <prvIdleTask+0x98>)
				taskYIELD();
 8002a5e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8002a62:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	b353      	cbz	r3, 8002ac0 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8002a6a:	f001 f9c3 	bl	8003df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a6e:	68f3      	ldr	r3, [r6, #12]
 8002a70:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a74:	f10a 0004 	add.w	r0, sl, #4
 8002a78:	f7fe ff38 	bl	80018ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8002a88:	f001 f9d6 	bl	8003e38 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a8c:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
 8002a90:	b163      	cbz	r3, 8002aac <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d020      	beq.n	8002ad8 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d0e5      	beq.n	8002a66 <prvIdleTask+0x12>
 8002a9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	e7fe      	b.n	8002aaa <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8002aac:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8002ab0:	f001 fbba 	bl	8004228 <vPortFree>
				vPortFree( pxTCB );
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	f001 fbb7 	bl	8004228 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1d4      	bne.n	8002a6a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d905      	bls.n	8002ad2 <prvIdleTask+0x7e>
				taskYIELD();
 8002ac6:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8002ad2:	f008 f885 	bl	800abe0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002ad6:	e7c6      	b.n	8002a66 <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8002ad8:	4650      	mov	r0, sl
 8002ada:	f001 fba5 	bl	8004228 <vPortFree>
 8002ade:	e7c2      	b.n	8002a66 <prvIdleTask+0x12>
 8002ae0:	20001088 	.word	0x20001088
 8002ae4:	200010f8 	.word	0x200010f8
 8002ae8:	20001084 	.word	0x20001084
 8002aec:	20000c24 	.word	0x20000c24

08002af0 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <xTaskIncrementTick.part.0+0x124>)
 8002af6:	681e      	ldr	r6, [r3, #0]
 8002af8:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8002afa:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8002afc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002afe:	2e00      	cmp	r6, #0
 8002b00:	d040      	beq.n	8002b84 <xTaskIncrementTick.part.0+0x94>
 8002b02:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002c28 <xTaskIncrementTick.part.0+0x138>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b06:	f8db 3000 	ldr.w	r3, [fp]
 8002b0a:	429e      	cmp	r6, r3
 8002b0c:	d347      	bcc.n	8002b9e <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0e:	4f42      	ldr	r7, [pc, #264]	; (8002c18 <xTaskIncrementTick.part.0+0x128>)
 8002b10:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002c2c <xTaskIncrementTick.part.0+0x13c>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002c30 <xTaskIncrementTick.part.0+0x140>
 8002b1a:	681d      	ldr	r5, [r3, #0]
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d073      	beq.n	8002c08 <xTaskIncrementTick.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 8002b20:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002c34 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8002b24:	2500      	movs	r5, #0
 8002b26:	e022      	b.n	8002b6e <xTaskIncrementTick.part.0+0x7e>
 8002b28:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b2a:	f7fe fedf 	bl	80018ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b30:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b32:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b36:	b113      	cbz	r3, 8002b3e <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b38:	f7fe fed8 	bl	80018ec <uxListRemove>
 8002b3c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8002b3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b40:	f8d8 2000 	ldr.w	r2, [r8]
 8002b44:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002b4e:	bf88      	it	hi
 8002b50:	f8c8 3000 	strhi.w	r3, [r8]
 8002b54:	f7fe fea2 	bl	800189c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b58:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b5c:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b62:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8002b64:	4291      	cmp	r1, r2
 8002b66:	bf28      	it	cs
 8002b68:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d04c      	beq.n	8002c08 <xTaskIncrementTick.part.0+0x118>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b74:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b76:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8002b78:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b7a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8002b7c:	d2d4      	bcs.n	8002b28 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8002b7e:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b82:	e011      	b.n	8002ba8 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <xTaskIncrementTick.part.0+0x128>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	b30a      	cbz	r2, 8002bd0 <xTaskIncrementTick.part.0+0xe0>
 8002b8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	e7fe      	b.n	8002b9c <xTaskIncrementTick.part.0+0xac>
 8002b9e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002c2c <xTaskIncrementTick.part.0+0x13c>
 8002ba2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002c30 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8002ba6:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ba8:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8002bac:	491b      	ldr	r1, [pc, #108]	; (8002c1c <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8002bba:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8002bbc:	2a02      	cmp	r2, #2
 8002bbe:	bf28      	it	cs
 8002bc0:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8002bc2:	2b00      	cmp	r3, #0
}
 8002bc4:	bf0c      	ite	eq
 8002bc6:	4628      	moveq	r0, r5
 8002bc8:	2001      	movne	r0, #1
 8002bca:	b003      	add	sp, #12
 8002bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <xTaskIncrementTick.part.0+0x130>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	6811      	ldr	r1, [r2, #0]
 8002bd6:	6019      	str	r1, [r3, #0]
 8002bd8:	4912      	ldr	r1, [pc, #72]	; (8002c24 <xTaskIncrementTick.part.0+0x134>)
 8002bda:	6010      	str	r0, [r2, #0]
 8002bdc:	680a      	ldr	r2, [r1, #0]
 8002bde:	3201      	adds	r2, #1
 8002be0:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	b932      	cbnz	r2, 8002bf6 <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002be8:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8002c28 <xTaskIncrementTick.part.0+0x138>
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf0:	f8cb 3000 	str.w	r3, [fp]
 8002bf4:	e787      	b.n	8002b06 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bf8:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8002c28 <xTaskIncrementTick.part.0+0x138>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bfc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8002c06:	e77e      	b.n	8002b06 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0c:	f8cb 3000 	str.w	r3, [fp]
					break;
 8002c10:	e7ca      	b.n	8002ba8 <xTaskIncrementTick.part.0+0xb8>
 8002c12:	bf00      	nop
 8002c14:	2000110c 	.word	0x2000110c
 8002c18:	20000c1c 	.word	0x20000c1c
 8002c1c:	20001110 	.word	0x20001110
 8002c20:	20000c20 	.word	0x20000c20
 8002c24:	200010c4 	.word	0x200010c4
 8002c28:	200010c0 	.word	0x200010c0
 8002c2c:	20000c24 	.word	0x20000c24
 8002c30:	20000c18 	.word	0x20000c18
 8002c34:	20001094 	.word	0x20001094

08002c38 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8002c3c:	4d41      	ldr	r5, [pc, #260]	; (8002d44 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8002c3e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8002c40:	f001 f8d8 	bl	8003df4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c4a:	682b      	ldr	r3, [r5, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d161      	bne.n	8002d14 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <xTaskResumeAll.part.0+0x110>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05d      	beq.n	8002d14 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c58:	4e3c      	ldr	r6, [pc, #240]	; (8002d4c <xTaskResumeAll.part.0+0x114>)
 8002c5a:	6833      	ldr	r3, [r6, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d06e      	beq.n	8002d3e <xTaskResumeAll.part.0+0x106>
 8002c60:	4f3b      	ldr	r7, [pc, #236]	; (8002d50 <xTaskResumeAll.part.0+0x118>)
 8002c62:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002d60 <xTaskResumeAll.part.0+0x128>
 8002c66:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002d64 <xTaskResumeAll.part.0+0x12c>
 8002c6a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002d68 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c6e:	68f3      	ldr	r3, [r6, #12]
 8002c70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c72:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c76:	f104 0018 	add.w	r0, r4, #24
 8002c7a:	f7fe fe37 	bl	80018ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c7e:	4658      	mov	r0, fp
 8002c80:	f7fe fe34 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	4659      	mov	r1, fp
 8002c90:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c94:	bf88      	it	hi
 8002c96:	603b      	strhi	r3, [r7, #0]
 8002c98:	f7fe fe00 	bl	800189c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8002ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d33d      	bcc.n	8002d24 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cae:	6833      	ldr	r3, [r6, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1dc      	bne.n	8002c6e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <xTaskResumeAll.part.0+0x11c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d03a      	beq.n	8002d34 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbe:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cca:	4e24      	ldr	r6, [pc, #144]	; (8002d5c <xTaskResumeAll.part.0+0x124>)
 8002ccc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002cce:	b194      	cbz	r4, 8002cf6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8002cd0:	2701      	movs	r7, #1
 8002cd2:	e006      	b.n	8002ce2 <xTaskResumeAll.part.0+0xaa>
 8002cd4:	f7ff ff0c 	bl	8002af0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8002cd8:	b108      	cbz	r0, 8002cde <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8002cda:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cde:	3c01      	subs	r4, #1
 8002ce0:	d008      	beq.n	8002cf4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f5      	beq.n	8002cd4 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8002ce8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cea:	3c01      	subs	r4, #1
		++xPendedTicks;
 8002cec:	f103 0301 	add.w	r3, r3, #1
 8002cf0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cf2:	d1f6      	bne.n	8002ce2 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8002cf4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8002cf6:	f8da 3000 	ldr.w	r3, [sl]
 8002cfa:	b15b      	cbz	r3, 8002d14 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8002cfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002d10:	2001      	movs	r0, #1
 8002d12:	e000      	b.n	8002d16 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8002d14:	2000      	movs	r0, #0
 8002d16:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002d18:	f001 f88e 	bl	8003e38 <vPortExitCritical>
}
 8002d1c:	9801      	ldr	r0, [sp, #4]
 8002d1e:	b003      	add	sp, #12
 8002d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1a1      	bne.n	8002c6e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <xTaskResumeAll.part.0+0x11c>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	2a00      	cmp	r2, #0
 8002d32:	d1c4      	bne.n	8002cbe <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <xTaskResumeAll.part.0+0x120>)
 8002d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e7c5      	b.n	8002cca <xTaskResumeAll.part.0+0x92>
 8002d3e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002d68 <xTaskResumeAll.part.0+0x130>
 8002d42:	e7c2      	b.n	8002cca <xTaskResumeAll.part.0+0x92>
 8002d44:	2000108c 	.word	0x2000108c
 8002d48:	20001084 	.word	0x20001084
 8002d4c:	200010cc 	.word	0x200010cc
 8002d50:	20001094 	.word	0x20001094
 8002d54:	20000c1c 	.word	0x20000c1c
 8002d58:	200010c0 	.word	0x200010c0
 8002d5c:	200010c8 	.word	0x200010c8
 8002d60:	20000c24 	.word	0x20000c24
 8002d64:	20000c18 	.word	0x20000c18
 8002d68:	20001110 	.word	0x20001110

08002d6c <xTaskCreateStatic>:
	{
 8002d6c:	b530      	push	{r4, r5, lr}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002d72:	b1c4      	cbz	r4, 8002da6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8002d74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d76:	b16d      	cbz	r5, 8002d94 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d78:	256c      	movs	r5, #108	; 0x6c
 8002d7a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d7c:	9d05      	ldr	r5, [sp, #20]
 8002d7e:	2d6c      	cmp	r5, #108	; 0x6c
 8002d80:	d01a      	beq.n	8002db8 <xTaskCreateStatic+0x4c>
 8002d82:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	e7fe      	b.n	8002d92 <xTaskCreateStatic+0x26>
 8002d94:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002da4:	e7fe      	b.n	8002da4 <xTaskCreateStatic+0x38>
 8002da6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002db6:	e7fe      	b.n	8002db6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002db8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dba:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dbc:	2402      	movs	r4, #2
 8002dbe:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dc2:	ac04      	add	r4, sp, #16
 8002dc4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002dc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002dca:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dcc:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dce:	f7ff fdeb 	bl	80029a8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002dd4:	f7ff fd10 	bl	80027f8 <prvAddNewTaskToReadyList>
	}
 8002dd8:	9804      	ldr	r0, [sp, #16]
 8002dda:	b007      	add	sp, #28
 8002ddc:	bd30      	pop	{r4, r5, pc}
 8002dde:	bf00      	nop

08002de0 <xTaskCreate>:
	{
 8002de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002de4:	4607      	mov	r7, r0
 8002de6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002de8:	0090      	lsls	r0, r2, #2
	{
 8002dea:	4615      	mov	r5, r2
 8002dec:	4688      	mov	r8, r1
 8002dee:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002df0:	f001 f960 	bl	80040b4 <pvPortMalloc>
			if( pxStack != NULL )
 8002df4:	b1d8      	cbz	r0, 8002e2e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002df6:	4604      	mov	r4, r0
 8002df8:	206c      	movs	r0, #108	; 0x6c
 8002dfa:	f001 f95b 	bl	80040b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002dfe:	4606      	mov	r6, r0
 8002e00:	b1d0      	cbz	r0, 8002e38 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8002e02:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e04:	2400      	movs	r4, #0
 8002e06:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002e0c:	9401      	str	r4, [sp, #4]
 8002e0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002e10:	9602      	str	r6, [sp, #8]
 8002e12:	464b      	mov	r3, r9
 8002e14:	462a      	mov	r2, r5
 8002e16:	4641      	mov	r1, r8
 8002e18:	4638      	mov	r0, r7
 8002e1a:	9400      	str	r4, [sp, #0]
 8002e1c:	f7ff fdc4 	bl	80029a8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7ff fce9 	bl	80027f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e26:	2001      	movs	r0, #1
	}
 8002e28:	b005      	add	sp, #20
 8002e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8002e32:	b005      	add	sp, #20
 8002e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f001 f9f5 	bl	8004228 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e42:	e7f1      	b.n	8002e28 <xTaskCreate+0x48>

08002e44 <vTaskDelete>:
	{
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e48:	4d36      	ldr	r5, [pc, #216]	; (8002f24 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 8002e4a:	f000 ffd3 	bl	8003df4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e4e:	2c00      	cmp	r4, #0
 8002e50:	d044      	beq.n	8002edc <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e52:	1d26      	adds	r6, r4, #4
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7fe fd49 	bl	80018ec <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e5c:	b11b      	cbz	r3, 8002e66 <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e5e:	f104 0018 	add.w	r0, r4, #24
 8002e62:	f7fe fd43 	bl	80018ec <uxListRemove>
			uxTaskNumber++;
 8002e66:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <vTaskDelete+0xe4>)
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8002e6e:	682b      	ldr	r3, [r5, #0]
 8002e70:	42a3      	cmp	r3, r4
 8002e72:	d02a      	beq.n	8002eca <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8002e74:	492d      	ldr	r1, [pc, #180]	; (8002f2c <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e76:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				--uxCurrentNumberOfTasks;
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e80:	b162      	cbz	r2, 8002e9c <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e82:	2a01      	cmp	r2, #1
 8002e84:	d03f      	beq.n	8002f06 <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e86:	2a02      	cmp	r2, #2
 8002e88:	d00e      	beq.n	8002ea8 <vTaskDelete+0x64>
 8002e8a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	e7fe      	b.n	8002e9a <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8002e9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e9e:	f001 f9c3 	bl	8004228 <vPortFree>
				vPortFree( pxTCB );
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f001 f9c0 	bl	8004228 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <vTaskDelete+0xec>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	b9ba      	cbnz	r2, 8002ee0 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <vTaskDelete+0xf0>)
 8002eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb6:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002eb8:	f000 ffbe 	bl	8003e38 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <vTaskDelete+0xf4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b113      	cbz	r3, 8002ec8 <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	42a3      	cmp	r3, r4
 8002ec6:	d012      	beq.n	8002eee <vTaskDelete+0xaa>
	}
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002eca:	481c      	ldr	r0, [pc, #112]	; (8002f3c <vTaskDelete+0xf8>)
 8002ecc:	4631      	mov	r1, r6
 8002ece:	f7fe fce5 	bl	800189c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002ed2:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <vTaskDelete+0xfc>)
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8002eda:	e7ed      	b.n	8002eb8 <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002edc:	682c      	ldr	r4, [r5, #0]
 8002ede:	e7b8      	b.n	8002e52 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	6852      	ldr	r2, [r2, #4]
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	e7e4      	b.n	8002eb8 <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <vTaskDelete+0x100>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b163      	cbz	r3, 8002f0e <vTaskDelete+0xca>
 8002ef4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	e7fe      	b.n	8002f04 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 8002f06:	4620      	mov	r0, r4
 8002f08:	f001 f98e 	bl	8004228 <vPortFree>
 8002f0c:	e7cc      	b.n	8002ea8 <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8002f0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
	}
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	20000c18 	.word	0x20000c18
 8002f28:	20001090 	.word	0x20001090
 8002f2c:	20001084 	.word	0x20001084
 8002f30:	20000c1c 	.word	0x20000c1c
 8002f34:	200010c0 	.word	0x200010c0
 8002f38:	200010e0 	.word	0x200010e0
 8002f3c:	200010f8 	.word	0x200010f8
 8002f40:	20001088 	.word	0x20001088
 8002f44:	2000108c 	.word	0x2000108c

08002f48 <vTaskDelay>:
	{
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f4a:	b950      	cbnz	r0, 8002f62 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
	}
 8002f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002f62:	4d20      	ldr	r5, [pc, #128]	; (8002fe4 <vTaskDelay+0x9c>)
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	b143      	cbz	r3, 8002f7a <vTaskDelay+0x32>
 8002f68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	e7fe      	b.n	8002f78 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8002f7a:	682a      	ldr	r2, [r5, #0]
 8002f7c:	3201      	adds	r2, #1
 8002f7e:	4604      	mov	r4, r0
 8002f80:	602a      	str	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f82:	4e19      	ldr	r6, [pc, #100]	; (8002fe8 <vTaskDelay+0xa0>)
const TickType_t xConstTickCount = xTickCount;
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <vTaskDelay+0xa4>)
 8002f86:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f88:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f8a:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f8c:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f90:	3004      	adds	r0, #4
 8002f92:	f7fe fcab 	bl	80018ec <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f96:	6833      	ldr	r3, [r6, #0]
 8002f98:	19e4      	adds	r4, r4, r7
 8002f9a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002f9c:	d310      	bcc.n	8002fc0 <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <vTaskDelay+0xa8>)
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	6831      	ldr	r1, [r6, #0]
 8002fa4:	3104      	adds	r1, #4
 8002fa6:	f7fe fc89 	bl	80018bc <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8002faa:	682b      	ldr	r3, [r5, #0]
 8002fac:	b9a3      	cbnz	r3, 8002fd8 <vTaskDelay+0x90>
 8002fae:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	e7fe      	b.n	8002fbe <vTaskDelay+0x76>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <vTaskDelay+0xac>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	6831      	ldr	r1, [r6, #0]
 8002fc6:	3104      	adds	r1, #4
 8002fc8:	f7fe fc78 	bl	80018bc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <vTaskDelay+0xb0>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002fd2:	bf38      	it	cc
 8002fd4:	601c      	strcc	r4, [r3, #0]
 8002fd6:	e7e8      	b.n	8002faa <vTaskDelay+0x62>
 8002fd8:	f7ff fe2e 	bl	8002c38 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d0b5      	beq.n	8002f4c <vTaskDelay+0x4>
	}
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	2000108c 	.word	0x2000108c
 8002fe8:	20000c18 	.word	0x20000c18
 8002fec:	2000110c 	.word	0x2000110c
 8002ff0:	20000c20 	.word	0x20000c20
 8002ff4:	20000c1c 	.word	0x20000c1c
 8002ff8:	200010c0 	.word	0x200010c0

08002ffc <vTaskSuspend>:
	{
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003000:	4e32      	ldr	r6, [pc, #200]	; (80030cc <vTaskSuspend+0xd0>)
		taskENTER_CRITICAL();
 8003002:	f000 fef7 	bl	8003df4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003006:	2c00      	cmp	r4, #0
 8003008:	d03b      	beq.n	8003082 <vTaskSuspend+0x86>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800300a:	1d25      	adds	r5, r4, #4
 800300c:	4628      	mov	r0, r5
 800300e:	f7fe fc6d 	bl	80018ec <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003014:	b11b      	cbz	r3, 800301e <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003016:	f104 0018 	add.w	r0, r4, #24
 800301a:	f7fe fc67 	bl	80018ec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800301e:	4629      	mov	r1, r5
 8003020:	482b      	ldr	r0, [pc, #172]	; (80030d0 <vTaskSuspend+0xd4>)
		if( xSchedulerRunning != pdFALSE )
 8003022:	4d2c      	ldr	r5, [pc, #176]	; (80030d4 <vTaskSuspend+0xd8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003024:	f7fe fc3a 	bl	800189c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003028:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800302c:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800302e:	bf04      	itt	eq
 8003030:	2300      	moveq	r3, #0
 8003032:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 8003036:	f000 feff 	bl	8003e38 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800303a:	682b      	ldr	r3, [r5, #0]
 800303c:	b993      	cbnz	r3, 8003064 <vTaskSuspend+0x68>
		if( pxTCB == pxCurrentTCB )
 800303e:	6833      	ldr	r3, [r6, #0]
 8003040:	42a3      	cmp	r3, r4
 8003042:	d000      	beq.n	8003046 <vTaskSuspend+0x4a>
	}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8003046:	682b      	ldr	r3, [r5, #0]
 8003048:	b313      	cbz	r3, 8003090 <vTaskSuspend+0x94>
				configASSERT( uxSchedulerSuspended == 0 );
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <vTaskSuspend+0xdc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02b      	beq.n	80030aa <vTaskSuspend+0xae>
 8003052:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	e7fe      	b.n	8003062 <vTaskSuspend+0x66>
			taskENTER_CRITICAL();
 8003064:	f000 fec6 	bl	8003df4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <vTaskSuspend+0xe0>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	b152      	cbz	r2, 8003086 <vTaskSuspend+0x8a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <vTaskSuspend+0xe4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003076:	68d2      	ldr	r2, [r2, #12]
 8003078:	6852      	ldr	r2, [r2, #4]
 800307a:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800307c:	f000 fedc 	bl	8003e38 <vPortExitCritical>
 8003080:	e7dd      	b.n	800303e <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003082:	6834      	ldr	r4, [r6, #0]
 8003084:	e7c1      	b.n	800300a <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <vTaskSuspend+0xe4>)
 8003088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e7f5      	b.n	800307c <vTaskSuspend+0x80>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003090:	490f      	ldr	r1, [pc, #60]	; (80030d0 <vTaskSuspend+0xd4>)
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <vTaskSuspend+0xe8>)
 8003094:	6809      	ldr	r1, [r1, #0]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	4291      	cmp	r1, r2
 800309a:	d011      	beq.n	80030c0 <vTaskSuspend+0xc4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <vTaskSuspend+0xdc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b183      	cbz	r3, 80030c4 <vTaskSuspend+0xc8>
		xYieldPending = pdTRUE;
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <vTaskSuspend+0xec>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
	}
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 80030aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
	}
 80030be:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB = NULL;
 80030c0:	6033      	str	r3, [r6, #0]
	}
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030c8:	f7ff bc1e 	b.w	8002908 <vTaskSwitchContext.part.0>
 80030cc:	20000c18 	.word	0x20000c18
 80030d0:	200010e4 	.word	0x200010e4
 80030d4:	200010e0 	.word	0x200010e0
 80030d8:	2000108c 	.word	0x2000108c
 80030dc:	20000c1c 	.word	0x20000c1c
 80030e0:	200010c0 	.word	0x200010c0
 80030e4:	20001084 	.word	0x20001084
 80030e8:	20001110 	.word	0x20001110

080030ec <vTaskResume>:
		configASSERT( xTaskToResume );
 80030ec:	b198      	cbz	r0, 8003116 <vTaskResume+0x2a>
	{
 80030ee:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80030f0:	4d22      	ldr	r5, [pc, #136]	; (800317c <vTaskResume+0x90>)
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	4283      	cmp	r3, r0
	{
 80030f6:	b083      	sub	sp, #12
 80030f8:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80030fa:	d00a      	beq.n	8003112 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 80030fc:	f000 fe7a 	bl	8003df4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <vTaskResume+0x94>)
 8003102:	6962      	ldr	r2, [r4, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	d00f      	beq.n	8003128 <vTaskResume+0x3c>
	}
 8003108:	b003      	add	sp, #12
 800310a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 800310e:	f000 be93 	b.w	8003e38 <vPortExitCritical>
	}
 8003112:	b003      	add	sp, #12
 8003114:	bd30      	pop	{r4, r5, pc}
 8003116:	f04f 0340 	mov.w	r3, #64	; 0x40
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8003126:	e7fe      	b.n	8003126 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003128:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800312a:	4a16      	ldr	r2, [pc, #88]	; (8003184 <vTaskResume+0x98>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d0eb      	beq.n	8003108 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e9      	bne.n	8003108 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003134:	1d21      	adds	r1, r4, #4
 8003136:	4608      	mov	r0, r1
 8003138:	9101      	str	r1, [sp, #4]
 800313a:	f7fe fbd7 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <vTaskResume+0x9c>)
 8003140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003142:	6810      	ldr	r0, [r2, #0]
 8003144:	9901      	ldr	r1, [sp, #4]
 8003146:	4283      	cmp	r3, r0
 8003148:	4810      	ldr	r0, [pc, #64]	; (800318c <vTaskResume+0xa0>)
 800314a:	bf88      	it	hi
 800314c:	6013      	strhi	r3, [r2, #0]
 800314e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003152:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003156:	f7fe fba1 	bl	800189c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315a:	682b      	ldr	r3, [r5, #0]
 800315c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d3d1      	bcc.n	8003108 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8003164:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e7c6      	b.n	8003108 <vTaskResume+0x1c>
 800317a:	bf00      	nop
 800317c:	20000c18 	.word	0x20000c18
 8003180:	200010e4 	.word	0x200010e4
 8003184:	200010cc 	.word	0x200010cc
 8003188:	20001094 	.word	0x20001094
 800318c:	20000c24 	.word	0x20000c24

08003190 <vTaskStartScheduler>:
{
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003194:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003196:	4668      	mov	r0, sp
 8003198:	aa02      	add	r2, sp, #8
 800319a:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800319c:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031a0:	f7fe fa64 	bl	800166c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031a4:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80031a6:	b1c8      	cbz	r0, 80031dc <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031a8:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80031aa:	b174      	cbz	r4, 80031ca <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80031ac:	236c      	movs	r3, #108	; 0x6c
 80031ae:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031b0:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031b2:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d01a      	beq.n	80031ee <vTaskStartScheduler+0x5e>
 80031b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	e7fe      	b.n	80031c8 <vTaskStartScheduler+0x38>
 80031ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80031da:	e7fe      	b.n	80031da <vTaskStartScheduler+0x4a>
 80031dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80031ec:	e7fe      	b.n	80031ec <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031ee:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f0:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031f2:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031f8:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031fa:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031fc:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031fe:	f009 f8df 	bl	800c3c0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003202:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <vTaskStartScheduler+0x124>)
 8003206:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003208:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800320a:	4415      	add	r5, r2
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800320c:	2249      	movs	r2, #73	; 0x49
 800320e:	f801 2f34 	strb.w	r2, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003212:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 8003216:	f103 001f 	add.w	r0, r3, #31
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800321a:	4298      	cmp	r0, r3
 800321c:	d005      	beq.n	800322a <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800321e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003222:	f801 2f01 	strb.w	r2, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8003226:	2a00      	cmp	r2, #0
 8003228:	d1f7      	bne.n	800321a <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800322a:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800322c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800322e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003232:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 8003236:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003238:	f7fe fb2c 	bl	8001894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800323c:	f104 0018 	add.w	r0, r4, #24
 8003240:	f7fe fb28 	bl	8001894 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003244:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003246:	491c      	ldr	r1, [pc, #112]	; (80032b8 <vTaskStartScheduler+0x128>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003248:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800324a:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 800324c:	6665      	str	r5, [r4, #100]	; 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800324e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003250:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003252:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8003256:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800325a:	4630      	mov	r0, r6
 800325c:	f000 fd9e 	bl	8003d9c <pxPortInitialiseStack>
 8003260:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff fac8 	bl	80027f8 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8003268:	f000 fce8 	bl	8003c3c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800326c:	2801      	cmp	r0, #1
 800326e:	d00c      	beq.n	800328a <vTaskStartScheduler+0xfa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003270:	3001      	adds	r0, #1
 8003272:	d001      	beq.n	8003278 <vTaskStartScheduler+0xe8>
}
 8003274:	b004      	add	sp, #16
 8003276:	bd70      	pop	{r4, r5, r6, pc}
 8003278:	f04f 0340 	mov.w	r3, #64	; 0x40
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003288:	e7fe      	b.n	8003288 <vTaskStartScheduler+0xf8>
 800328a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <vTaskStartScheduler+0x12c>)
		xSchedulerRunning = pdTRUE;
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <vTaskStartScheduler+0x130>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <vTaskStartScheduler+0x134>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80032a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80032a4:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80032a6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032a8:	601d      	str	r5, [r3, #0]
}
 80032aa:	b004      	add	sp, #16
 80032ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80032b0:	f000 be32 	b.w	8003f18 <xPortStartScheduler>
 80032b4:	08010abc 	.word	0x08010abc
 80032b8:	08002a55 	.word	0x08002a55
 80032bc:	200010c0 	.word	0x200010c0
 80032c0:	200010e0 	.word	0x200010e0
 80032c4:	2000110c 	.word	0x2000110c

080032c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80032c8:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <vTaskSuspendAll+0xc>)
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2000108c 	.word	0x2000108c

080032d8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <xTaskResumeAll+0x1c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b943      	cbnz	r3, 80032f0 <xTaskResumeAll+0x18>
 80032de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	e7fe      	b.n	80032ee <xTaskResumeAll+0x16>
 80032f0:	f7ff bca2 	b.w	8002c38 <xTaskResumeAll.part.0>
 80032f4:	2000108c 	.word	0x2000108c

080032f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <xTaskGetTickCount+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000110c 	.word	0x2000110c

08003304 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <xTaskIncrementTick+0x18>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b90b      	cbnz	r3, 800330e <xTaskIncrementTick+0xa>
 800330a:	f7ff bbf1 	b.w	8002af0 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <xTaskIncrementTick+0x1c>)
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	3301      	adds	r3, #1
}
 8003314:	2000      	movs	r0, #0
		++xPendedTicks;
 8003316:	6013      	str	r3, [r2, #0]
}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	2000108c 	.word	0x2000108c
 8003320:	200010c8 	.word	0x200010c8

08003324 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <vTaskSwitchContext+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	b11b      	cbz	r3, 8003332 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <vTaskSwitchContext+0x18>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	4770      	bx	lr
 8003332:	f7ff bae9 	b.w	8002908 <vTaskSwitchContext.part.0>
 8003336:	bf00      	nop
 8003338:	2000108c 	.word	0x2000108c
 800333c:	20001110 	.word	0x20001110

08003340 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003340:	b1f0      	cbz	r0, 8003380 <vTaskPlaceOnEventList+0x40>
{
 8003342:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003344:	4d1c      	ldr	r5, [pc, #112]	; (80033b8 <vTaskPlaceOnEventList+0x78>)
 8003346:	460c      	mov	r4, r1
 8003348:	6829      	ldr	r1, [r5, #0]
 800334a:	3118      	adds	r1, #24
 800334c:	f7fe fab6 	bl	80018bc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <vTaskPlaceOnEventList+0x7c>)
 8003352:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003354:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003356:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003358:	2200      	movs	r2, #0
 800335a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335e:	3004      	adds	r0, #4
 8003360:	f7fe fac4 	bl	80018ec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003364:	1c63      	adds	r3, r4, #1
 8003366:	d014      	beq.n	8003392 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	19a4      	adds	r4, r4, r6
 800336c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800336e:	d317      	bcc.n	80033a0 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <vTaskPlaceOnEventList+0x80>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	6829      	ldr	r1, [r5, #0]
}
 8003376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800337a:	3104      	adds	r1, #4
 800337c:	f7fe ba9e 	b.w	80018bc <vListInsert>
 8003380:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003390:	e7fe      	b.n	8003390 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003392:	6829      	ldr	r1, [r5, #0]
 8003394:	480b      	ldr	r0, [pc, #44]	; (80033c4 <vTaskPlaceOnEventList+0x84>)
}
 8003396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800339a:	3104      	adds	r1, #4
 800339c:	f7fe ba7e 	b.w	800189c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <vTaskPlaceOnEventList+0x88>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	6829      	ldr	r1, [r5, #0]
 80033a6:	3104      	adds	r1, #4
 80033a8:	f7fe fa88 	bl	80018bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <vTaskPlaceOnEventList+0x8c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80033b2:	bf38      	it	cc
 80033b4:	601c      	strcc	r4, [r3, #0]
}
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	20000c18 	.word	0x20000c18
 80033bc:	2000110c 	.word	0x2000110c
 80033c0:	20000c20 	.word	0x20000c20
 80033c4:	200010e4 	.word	0x200010e4
 80033c8:	20000c1c 	.word	0x20000c1c
 80033cc:	200010c0 	.word	0x200010c0

080033d0 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d02e      	beq.n	8003432 <vTaskPlaceOnUnorderedEventList+0x62>
	configASSERT( uxSchedulerSuspended != 0 );
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <vTaskPlaceOnUnorderedEventList+0x9c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b943      	cbnz	r3, 80033ec <vTaskPlaceOnUnorderedEventList+0x1c>
 80033da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	e7fe      	b.n	80033ea <vTaskPlaceOnUnorderedEventList+0x1a>
{
 80033ec:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80033ee:	4d20      	ldr	r5, [pc, #128]	; (8003470 <vTaskPlaceOnUnorderedEventList+0xa0>)
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80033f6:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033f8:	6829      	ldr	r1, [r5, #0]
 80033fa:	3118      	adds	r1, #24
 80033fc:	4614      	mov	r4, r2
 80033fe:	f7fe fa4d 	bl	800189c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <vTaskPlaceOnUnorderedEventList+0xa4>)
 8003404:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003406:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003408:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800340a:	2200      	movs	r2, #0
 800340c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003410:	3004      	adds	r0, #4
 8003412:	f7fe fa6b 	bl	80018ec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003416:	1c63      	adds	r3, r4, #1
 8003418:	d014      	beq.n	8003444 <vTaskPlaceOnUnorderedEventList+0x74>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	19a4      	adds	r4, r4, r6
 800341e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003420:	d317      	bcc.n	8003452 <vTaskPlaceOnUnorderedEventList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	6829      	ldr	r1, [r5, #0]
}
 8003428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800342c:	3104      	adds	r1, #4
 800342e:	f7fe ba45 	b.w	80018bc <vListInsert>
 8003432:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003442:	e7fe      	b.n	8003442 <vTaskPlaceOnUnorderedEventList+0x72>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003444:	6829      	ldr	r1, [r5, #0]
 8003446:	480d      	ldr	r0, [pc, #52]	; (800347c <vTaskPlaceOnUnorderedEventList+0xac>)
}
 8003448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800344c:	3104      	adds	r1, #4
 800344e:	f7fe ba25 	b.w	800189c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	6829      	ldr	r1, [r5, #0]
 8003458:	3104      	adds	r1, #4
 800345a:	f7fe fa2f 	bl	80018bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003464:	bf38      	it	cc
 8003466:	601c      	strcc	r4, [r3, #0]
}
 8003468:	bd70      	pop	{r4, r5, r6, pc}
 800346a:	bf00      	nop
 800346c:	2000108c 	.word	0x2000108c
 8003470:	20000c18 	.word	0x20000c18
 8003474:	2000110c 	.word	0x2000110c
 8003478:	20000c20 	.word	0x20000c20
 800347c:	200010e4 	.word	0x200010e4
 8003480:	20000c1c 	.word	0x20000c1c
 8003484:	200010c0 	.word	0x200010c0

08003488 <vTaskPlaceOnEventListRestricted>:
	{
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800348a:	b360      	cbz	r0, 80034e6 <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800348c:	4e20      	ldr	r6, [pc, #128]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 800348e:	460c      	mov	r4, r1
 8003490:	6831      	ldr	r1, [r6, #0]
 8003492:	4615      	mov	r5, r2
 8003494:	3118      	adds	r1, #24
 8003496:	f7fe fa01 	bl	800189c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 800349c:	b99d      	cbnz	r5, 80034c6 <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800349e:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034a0:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a2:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034a4:	f883 506a 	strb.w	r5, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a8:	3004      	adds	r0, #4
 80034aa:	f7fe fa1f 	bl	80018ec <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034ae:	6833      	ldr	r3, [r6, #0]
 80034b0:	19e4      	adds	r4, r4, r7
 80034b2:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034b4:	d320      	bcc.n	80034f8 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <vTaskPlaceOnEventListRestricted+0x90>)
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	6831      	ldr	r1, [r6, #0]
	}
 80034bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c0:	3104      	adds	r1, #4
 80034c2:	f7fe b9fb 	b.w	80018bc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80034c6:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034c8:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034ca:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034d2:	3004      	adds	r0, #4
 80034d4:	f7fe fa0a 	bl	80018ec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d8:	6831      	ldr	r1, [r6, #0]
 80034da:	4810      	ldr	r0, [pc, #64]	; (800351c <vTaskPlaceOnEventListRestricted+0x94>)
	}
 80034dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e0:	3104      	adds	r1, #4
 80034e2:	f7fe b9db 	b.w	800189c <vListInsertEnd>
 80034e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80034f6:	e7fe      	b.n	80034f6 <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <vTaskPlaceOnEventListRestricted+0x98>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	6831      	ldr	r1, [r6, #0]
 80034fe:	3104      	adds	r1, #4
 8003500:	f7fe f9dc 	bl	80018bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <vTaskPlaceOnEventListRestricted+0x9c>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800350a:	bf38      	it	cc
 800350c:	601c      	strcc	r4, [r3, #0]
	}
 800350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003510:	20000c18 	.word	0x20000c18
 8003514:	2000110c 	.word	0x2000110c
 8003518:	20000c20 	.word	0x20000c20
 800351c:	200010e4 	.word	0x200010e4
 8003520:	20000c1c 	.word	0x20000c1c
 8003524:	200010c0 	.word	0x200010c0

08003528 <xTaskRemoveFromEventList>:
{
 8003528:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352a:	68c3      	ldr	r3, [r0, #12]
 800352c:	68dc      	ldr	r4, [r3, #12]
{
 800352e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8003530:	2c00      	cmp	r4, #0
 8003532:	d02b      	beq.n	800358c <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003534:	f104 0518 	add.w	r5, r4, #24
 8003538:	4628      	mov	r0, r5
 800353a:	f7fe f9d7 	bl	80018ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <xTaskRemoveFromEventList+0x78>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b17b      	cbz	r3, 8003564 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003544:	4817      	ldr	r0, [pc, #92]	; (80035a4 <xTaskRemoveFromEventList+0x7c>)
 8003546:	4629      	mov	r1, r5
 8003548:	f7fe f9a8 	bl	800189c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <xTaskRemoveFromEventList+0x80>)
 800354e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003556:	bf85      	ittet	hi
 8003558:	4b14      	ldrhi	r3, [pc, #80]	; (80035ac <xTaskRemoveFromEventList+0x84>)
 800355a:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 800355c:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800355e:	6018      	strhi	r0, [r3, #0]
}
 8003560:	b003      	add	sp, #12
 8003562:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003564:	1d21      	adds	r1, r4, #4
 8003566:	4608      	mov	r0, r1
 8003568:	9101      	str	r1, [sp, #4]
 800356a:	f7fe f9bf 	bl	80018ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <xTaskRemoveFromEventList+0x88>)
 8003570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003572:	6810      	ldr	r0, [r2, #0]
 8003574:	9901      	ldr	r1, [sp, #4]
 8003576:	4283      	cmp	r3, r0
 8003578:	480e      	ldr	r0, [pc, #56]	; (80035b4 <xTaskRemoveFromEventList+0x8c>)
 800357a:	bf88      	it	hi
 800357c:	6013      	strhi	r3, [r2, #0]
 800357e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003582:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003586:	f7fe f989 	bl	800189c <vListInsertEnd>
 800358a:	e7df      	b.n	800354c <xTaskRemoveFromEventList+0x24>
 800358c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800359c:	e7fe      	b.n	800359c <xTaskRemoveFromEventList+0x74>
 800359e:	bf00      	nop
 80035a0:	2000108c 	.word	0x2000108c
 80035a4:	200010cc 	.word	0x200010cc
 80035a8:	20000c18 	.word	0x20000c18
 80035ac:	20001110 	.word	0x20001110
 80035b0:	20001094 	.word	0x20001094
 80035b4:	20000c24 	.word	0x20000c24

080035b8 <vTaskRemoveFromUnorderedEventList>:
{
 80035b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <vTaskRemoveFromUnorderedEventList+0x74>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	b942      	cbnz	r2, 80035d2 <vTaskRemoveFromUnorderedEventList+0x1a>
 80035c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	e7fe      	b.n	80035d0 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d2:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80035d4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80035d8:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 80035da:	b1ec      	cbz	r4, 8003618 <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035dc:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 80035de:	f7fe f985 	bl	80018ec <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7fe f982 	bl	80018ec <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <vTaskRemoveFromUnorderedEventList+0x78>)
 80035ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	4811      	ldr	r0, [pc, #68]	; (8003634 <vTaskRemoveFromUnorderedEventList+0x7c>)
 80035f0:	428b      	cmp	r3, r1
 80035f2:	bf88      	it	hi
 80035f4:	6013      	strhi	r3, [r2, #0]
 80035f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80035fe:	4629      	mov	r1, r5
 8003600:	f7fe f94c 	bl	800189c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <vTaskRemoveFromUnorderedEventList+0x80>)
 8003606:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d902      	bls.n	8003616 <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <vTaskRemoveFromUnorderedEventList+0x84>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bd38      	pop	{r3, r4, r5, pc}
 8003618:	f04f 0340 	mov.w	r3, #64	; 0x40
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003628:	e7fe      	b.n	8003628 <vTaskRemoveFromUnorderedEventList+0x70>
 800362a:	bf00      	nop
 800362c:	2000108c 	.word	0x2000108c
 8003630:	20001094 	.word	0x20001094
 8003634:	20000c24 	.word	0x20000c24
 8003638:	20000c18 	.word	0x20000c18
 800363c:	20001110 	.word	0x20001110

08003640 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003640:	4a03      	ldr	r2, [pc, #12]	; (8003650 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003644:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	e9c0 2300 	strd	r2, r3, [r0]
}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	200010c4 	.word	0x200010c4
 8003654:	2000110c 	.word	0x2000110c

08003658 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8003658:	b328      	cbz	r0, 80036a6 <xTaskCheckForTimeOut+0x4e>
{
 800365a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365c:	460d      	mov	r5, r1
 800365e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8003660:	b1c1      	cbz	r1, 8003694 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 8003662:	4604      	mov	r4, r0
 8003664:	f000 fbc6 	bl	8003df4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <xTaskCheckForTimeOut+0x9c>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <xTaskCheckForTimeOut+0xa0>)
		const TickType_t xConstTickCount = xTickCount;
 800366c:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
 8003674:	bb00      	cbnz	r0, 80036b8 <xTaskCheckForTimeOut+0x60>
			if( *pxTicksToWait == portMAX_DELAY )
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	d022      	beq.n	80036c2 <xTaskCheckForTimeOut+0x6a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800367c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80036fc <xTaskCheckForTimeOut+0xa4>
 8003680:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003684:	f8de 7000 	ldr.w	r7, [lr]
 8003688:	42b8      	cmp	r0, r7
 800368a:	d020      	beq.n	80036ce <xTaskCheckForTimeOut+0x76>
 800368c:	42b1      	cmp	r1, r6
 800368e:	d81e      	bhi.n	80036ce <xTaskCheckForTimeOut+0x76>
			xReturn = pdTRUE;
 8003690:	2001      	movs	r0, #1
 8003692:	e016      	b.n	80036c2 <xTaskCheckForTimeOut+0x6a>
 8003694:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80036a4:	e7fe      	b.n	80036a4 <xTaskCheckForTimeOut+0x4c>
 80036a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80036b6:	e7fe      	b.n	80036b6 <xTaskCheckForTimeOut+0x5e>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 80036c0:	2001      	movs	r0, #1
 80036c2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80036c4:	f000 fbb8 	bl	8003e38 <vPortExitCritical>
}
 80036c8:	9801      	ldr	r0, [sp, #4]
 80036ca:	b003      	add	sp, #12
 80036cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036ce:	eba6 0c01 	sub.w	ip, r6, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d2:	4563      	cmp	r3, ip
 80036d4:	d909      	bls.n	80036ea <xTaskCheckForTimeOut+0x92>
			*pxTicksToWait -= xElapsedTime;
 80036d6:	1b9b      	subs	r3, r3, r6
 80036d8:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036da:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036de:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80036e0:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 80036e2:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036e4:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80036e8:	e7eb      	b.n	80036c2 <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80036ee:	2001      	movs	r0, #1
 80036f0:	e7e7      	b.n	80036c2 <xTaskCheckForTimeOut+0x6a>
 80036f2:	bf00      	nop
 80036f4:	2000110c 	.word	0x2000110c
 80036f8:	20000c18 	.word	0x20000c18
 80036fc:	200010c4 	.word	0x200010c4

08003700 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <vTaskMissedYield+0x8>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	4770      	bx	lr
 8003708:	20001110 	.word	0x20001110

0800370c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <xTaskGetSchedulerState+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b133      	cbz	r3, 8003720 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <xTaskGetSchedulerState+0x1c>)
 8003714:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2002      	moveq	r0, #2
 800371c:	2000      	movne	r0, #0
 800371e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003720:	2001      	movs	r0, #1
	}
 8003722:	4770      	bx	lr
 8003724:	200010e0 	.word	0x200010e0
 8003728:	2000108c 	.word	0x2000108c

0800372c <xTaskPriorityInherit>:
	{
 800372c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800372e:	4604      	mov	r4, r0
	{
 8003730:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8003732:	b1c8      	cbz	r0, 8003768 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003734:	4d1d      	ldr	r5, [pc, #116]	; (80037ac <xTaskPriorityInherit+0x80>)
 8003736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003738:	682a      	ldr	r2, [r5, #0]
 800373a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800373c:	4293      	cmp	r3, r2
 800373e:	d215      	bcs.n	800376c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003740:	6982      	ldr	r2, [r0, #24]
 8003742:	2a00      	cmp	r2, #0
 8003744:	db04      	blt.n	8003750 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003746:	682a      	ldr	r2, [r5, #0]
 8003748:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800374a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800374e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003750:	4e17      	ldr	r6, [pc, #92]	; (80037b0 <xTaskPriorityInherit+0x84>)
 8003752:	6962      	ldr	r2, [r4, #20]
 8003754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003758:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d00e      	beq.n	800377e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003766:	2001      	movs	r0, #1
	}
 8003768:	b002      	add	sp, #8
 800376a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4298      	cmp	r0, r3
 8003774:	bf2c      	ite	cs
 8003776:	2000      	movcs	r0, #0
 8003778:	2001      	movcc	r0, #1
	}
 800377a:	b002      	add	sp, #8
 800377c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800377e:	1d21      	adds	r1, r4, #4
 8003780:	4608      	mov	r0, r1
 8003782:	9101      	str	r1, [sp, #4]
 8003784:	f7fe f8b2 	bl	80018ec <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003788:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800378c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800378e:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003790:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003792:	4290      	cmp	r0, r2
 8003794:	bf88      	it	hi
 8003796:	6018      	strhi	r0, [r3, #0]
 8003798:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800379c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80037a0:	9901      	ldr	r1, [sp, #4]
 80037a2:	f7fe f87b 	bl	800189c <vListInsertEnd>
				xReturn = pdTRUE;
 80037a6:	2001      	movs	r0, #1
 80037a8:	e7de      	b.n	8003768 <xTaskPriorityInherit+0x3c>
 80037aa:	bf00      	nop
 80037ac:	20000c18 	.word	0x20000c18
 80037b0:	20000c24 	.word	0x20000c24
 80037b4:	20001094 	.word	0x20001094

080037b8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80037b8:	b318      	cbz	r0, 8003802 <xTaskPriorityDisinherit+0x4a>
	{
 80037ba:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <xTaskPriorityDisinherit+0x80>)
 80037be:	681c      	ldr	r4, [r3, #0]
 80037c0:	4284      	cmp	r4, r0
	{
 80037c2:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80037c4:	d008      	beq.n	80037d8 <xTaskPriorityDisinherit+0x20>
 80037c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	e7fe      	b.n	80037d6 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80037d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037da:	b14b      	cbz	r3, 80037f0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 80037e0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037e2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80037e4:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037e6:	d000      	beq.n	80037ea <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037e8:	b16b      	cbz	r3, 8003806 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80037ea:	2000      	movs	r0, #0
	}
 80037ec:	b002      	add	sp, #8
 80037ee:	bd10      	pop	{r4, pc}
 80037f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003800:	e7fe      	b.n	8003800 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003802:	2000      	movs	r0, #0
	}
 8003804:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003806:	1d21      	adds	r1, r4, #4
 8003808:	4608      	mov	r0, r1
 800380a:	9101      	str	r1, [sp, #4]
 800380c:	f7fe f86e 	bl	80018ec <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003810:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003814:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003816:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 800381a:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800381c:	6810      	ldr	r0, [r2, #0]
 800381e:	9901      	ldr	r1, [sp, #4]
 8003820:	4283      	cmp	r3, r0
 8003822:	4807      	ldr	r0, [pc, #28]	; (8003840 <xTaskPriorityDisinherit+0x88>)
 8003824:	bf88      	it	hi
 8003826:	6013      	strhi	r3, [r2, #0]
 8003828:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800382c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003830:	f7fe f834 	bl	800189c <vListInsertEnd>
					xReturn = pdTRUE;
 8003834:	2001      	movs	r0, #1
		return xReturn;
 8003836:	e7d9      	b.n	80037ec <xTaskPriorityDisinherit+0x34>
 8003838:	20000c18 	.word	0x20000c18
 800383c:	20001094 	.word	0x20001094
 8003840:	20000c24 	.word	0x20000c24

08003844 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003844:	2800      	cmp	r0, #0
 8003846:	d041      	beq.n	80038cc <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8003848:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800384a:	6e03      	ldr	r3, [r0, #96]	; 0x60
	{
 800384c:	b083      	sub	sp, #12
 800384e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8003850:	b153      	cbz	r3, 8003868 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003852:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003854:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003856:	4281      	cmp	r1, r0
 8003858:	bf38      	it	cc
 800385a:	4601      	movcc	r1, r0
 800385c:	428a      	cmp	r2, r1
 800385e:	d001      	beq.n	8003864 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003860:	2b01      	cmp	r3, #1
 8003862:	d00a      	beq.n	800387a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8003864:	b003      	add	sp, #12
 8003866:	bd30      	pop	{r4, r5, pc}
 8003868:	f04f 0340 	mov.w	r3, #64	; 0x40
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003878:	e7fe      	b.n	8003878 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	42a3      	cmp	r3, r4
 8003880:	d025      	beq.n	80038ce <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003882:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003884:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003886:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003888:	bfa8      	it	ge
 800388a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800388e:	4d15      	ldr	r5, [pc, #84]	; (80038e4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003890:	bfa8      	it	ge
 8003892:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003898:	6961      	ldr	r1, [r4, #20]
 800389a:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800389e:	4299      	cmp	r1, r3
 80038a0:	d1e0      	bne.n	8003864 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a2:	1d21      	adds	r1, r4, #4
 80038a4:	4608      	mov	r0, r1
 80038a6:	9101      	str	r1, [sp, #4]
 80038a8:	f7fe f820 	bl	80018ec <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80038ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	9901      	ldr	r1, [sp, #4]
 80038b4:	4290      	cmp	r0, r2
 80038b6:	bf88      	it	hi
 80038b8:	6018      	strhi	r0, [r3, #0]
 80038ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038be:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80038c2:	b003      	add	sp, #12
 80038c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80038c8:	f7fd bfe8 	b.w	800189c <vListInsertEnd>
 80038cc:	4770      	bx	lr
 80038ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80038de:	e7fe      	b.n	80038de <vTaskPriorityDisinheritAfterTimeout+0x9a>
 80038e0:	20000c18 	.word	0x20000c18
 80038e4:	20000c24 	.word	0x20000c24
 80038e8:	20001094 	.word	0x20001094

080038ec <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <uxTaskResetEventItemValue+0x14>)
 80038ee:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80038f6:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80038fc:	6193      	str	r3, [r2, #24]
}
 80038fe:	4770      	bx	lr
 8003900:	20000c18 	.word	0x20000c18

08003904 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <pvTaskIncrementMutexHeldCount+0x14>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	b11a      	cbz	r2, 8003912 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800390e:	3201      	adds	r2, #1
 8003910:	660a      	str	r2, [r1, #96]	; 0x60
		return pxCurrentTCB;
 8003912:	6818      	ldr	r0, [r3, #0]
	}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000c18 	.word	0x20000c18

0800391c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800391c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003920:	4e22      	ldr	r6, [pc, #136]	; (80039ac <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8003922:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80039b4 <prvSwitchTimerLists+0x98>
{
 8003926:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003928:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800392c:	e00d      	b.n	800394a <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800392e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003930:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003932:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003934:	1d25      	adds	r5, r4, #4
 8003936:	4628      	mov	r0, r5
 8003938:	f7fd ffd8 	bl	80018ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800393c:	6a23      	ldr	r3, [r4, #32]
 800393e:	4620      	mov	r0, r4
 8003940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003942:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003946:	075b      	lsls	r3, r3, #29
 8003948:	d40a      	bmi.n	8003960 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800394a:	6833      	ldr	r3, [r6, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	2a00      	cmp	r2, #0
 8003950:	d1ed      	bne.n	800392e <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <prvSwitchTimerLists+0x94>)
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	b005      	add	sp, #20
 800395c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003960:	69a3      	ldr	r3, [r4, #24]
 8003962:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8003964:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003966:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8003968:	d205      	bcs.n	8003976 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800396a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800396c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800396e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003970:	f7fd ffa4 	bl	80018bc <vListInsert>
 8003974:	e7e9      	b.n	800394a <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8003976:	f8d9 3000 	ldr.w	r3, [r9]
 800397a:	b16b      	cbz	r3, 8003998 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800397c:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003980:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003982:	f7ff fec3 	bl	800370c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003986:	2300      	movs	r3, #0
 8003988:	f8d9 0000 	ldr.w	r0, [r9]
 800398c:	461a      	mov	r2, r3
 800398e:	4669      	mov	r1, sp
 8003990:	f7fe f8b2 	bl	8001af8 <xQueueGenericSend>
				configASSERT( xResult );
 8003994:	2800      	cmp	r0, #0
 8003996:	d1d8      	bne.n	800394a <prvSwitchTimerLists+0x2e>
 8003998:	f04f 0340 	mov.w	r3, #64	; 0x40
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	e7fe      	b.n	80039a8 <prvSwitchTimerLists+0x8c>
 80039aa:	bf00      	nop
 80039ac:	20001114 	.word	0x20001114
 80039b0:	20001118 	.word	0x20001118
 80039b4:	20001238 	.word	0x20001238

080039b8 <prvTimerTask>:
{
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	4e9b      	ldr	r6, [pc, #620]	; (8003c2c <prvTimerTask+0x274>)
 80039be:	4d9c      	ldr	r5, [pc, #624]	; (8003c30 <prvTimerTask+0x278>)
 80039c0:	4c9c      	ldr	r4, [pc, #624]	; (8003c34 <prvTimerTask+0x27c>)
 80039c2:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 80039c4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80039c8:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	681f      	ldr	r7, [r3, #0]
 80039d0:	2f00      	cmp	r7, #0
 80039d2:	f000 80a8 	beq.w	8003b26 <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80039da:	f7ff fc75 	bl	80032c8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80039de:	f7ff fc8b 	bl	80032f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80039e2:	682a      	ldr	r2, [r5, #0]
 80039e4:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 80039e6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80039e8:	f0c0 80ae 	bcc.w	8003b48 <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039ec:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 80039ee:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f0:	f080 80b4 	bcs.w	8003b5c <prvTimerTask+0x1a4>
 80039f4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	eba7 010a 	sub.w	r1, r7, sl
 80039fc:	f7fe fe98 	bl	8002730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a00:	f7ff fc6a 	bl	80032d8 <xTaskResumeAll>
 8003a04:	b928      	cbnz	r0, 8003a12 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8003a06:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	a902      	add	r1, sp, #8
 8003a18:	f7fe fae2 	bl	8001fe0 <xQueueReceive>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d0d5      	beq.n	80039cc <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a20:	9b02      	ldr	r3, [sp, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db76      	blt.n	8003b14 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a26:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	b113      	cbz	r3, 8003a32 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a2c:	1d38      	adds	r0, r7, #4
 8003a2e:	f7fd ff5d 	bl	80018ec <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003a32:	f7ff fc61 	bl	80032f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003a36:	682b      	ldr	r3, [r5, #0]
 8003a38:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003a3a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003a3c:	f0c0 808b 	bcc.w	8003b56 <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 8003a40:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8003a42:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d8e3      	bhi.n	8003a12 <prvTimerTask+0x5a>
 8003a4a:	e8df f003 	tbb	[pc, r3]
 8003a4e:	0505      	.short	0x0505
 8003a50:	5a3d5305 	.word	0x5a3d5305
 8003a54:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a5c:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a5e:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	1899      	adds	r1, r3, r2
 8003a6c:	bf2c      	ite	cs
 8003a6e:	2001      	movcs	r0, #1
 8003a70:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8003a72:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a74:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003a76:	f200 808c 	bhi.w	8003b92 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7a:	ebaa 0303 	sub.w	r3, sl, r3
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d832      	bhi.n	8003ae8 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	4638      	mov	r0, r7
 8003a86:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a8c:	075b      	lsls	r3, r3, #29
 8003a8e:	d5c0      	bpl.n	8003a12 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	b183      	cbz	r3, 8003ab6 <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8003a94:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a96:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8003a98:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a9a:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a9c:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a9e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003aa0:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003aa2:	f7ff fe33 	bl	800370c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6820      	ldr	r0, [r4, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	a906      	add	r1, sp, #24
 8003aae:	f7fe f823 	bl	8001af8 <xQueueGenericSend>
							configASSERT( xResult );
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d1ad      	bne.n	8003a12 <prvTimerTask+0x5a>
 8003ab6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	e7fe      	b.n	8003ac6 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 809d 	beq.w	8003c18 <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ade:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8003ae0:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ae2:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ae4:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003ae6:	d85e      	bhi.n	8003ba6 <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <prvTimerTask+0x280>)
 8003aea:	1d39      	adds	r1, r7, #4
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f7fd fee5 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003af2:	e78e      	b.n	8003a12 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003af4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8003b00:	e787      	b.n	8003a12 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b06:	079a      	lsls	r2, r3, #30
 8003b08:	d552      	bpl.n	8003bb0 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003b12:	e77e      	b.n	8003a12 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b1a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b1c:	9b02      	ldr	r3, [sp, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f6ff af77 	blt.w	8003a12 <prvTimerTask+0x5a>
 8003b24:	e77f      	b.n	8003a26 <prvTimerTask+0x6e>
	vTaskSuspendAll();
 8003b26:	f7ff fbcf 	bl	80032c8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003b2a:	f7ff fbe5 	bl	80032f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003b2e:	682a      	ldr	r2, [r5, #0]
 8003b30:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8003b32:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003b34:	d808      	bhi.n	8003b48 <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 8003b38:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	0952      	lsrs	r2, r2, #5
 8003b46:	e756      	b.n	80039f6 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8003b48:	f7ff fee8 	bl	800391c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003b4c:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8003b50:	f7ff fbc2 	bl	80032d8 <xTaskResumeAll>
 8003b54:	e75d      	b.n	8003a12 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8003b56:	f7ff fee1 	bl	800391c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003b5a:	e771      	b.n	8003a40 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003b5c:	f7ff fbbc 	bl	80032d8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b60:	6832      	ldr	r2, [r6, #0]
 8003b62:	68d2      	ldr	r2, [r2, #12]
 8003b64:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b68:	f10b 0104 	add.w	r1, fp, #4
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	9101      	str	r1, [sp, #4]
 8003b70:	f7fd febc 	bl	80018ec <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b74:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8003b78:	9901      	ldr	r1, [sp, #4]
 8003b7a:	f010 0f04 	tst.w	r0, #4
 8003b7e:	d11b      	bne.n	8003bb8 <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b80:	f020 0001 	bic.w	r0, r0, #1
 8003b84:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b88:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003b8c:	4658      	mov	r0, fp
 8003b8e:	4798      	blx	r3
}
 8003b90:	e73f      	b.n	8003a12 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b92:	4553      	cmp	r3, sl
 8003b94:	d902      	bls.n	8003b9c <prvTimerTask+0x1e4>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f43f af73 	beq.w	8003a82 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b9c:	6830      	ldr	r0, [r6, #0]
 8003b9e:	1d39      	adds	r1, r7, #4
 8003ba0:	f7fd fe8c 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003ba4:	e735      	b.n	8003a12 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ba6:	6830      	ldr	r0, [r6, #0]
 8003ba8:	1d39      	adds	r1, r7, #4
 8003baa:	f7fd fe87 	bl	80018bc <vListInsert>
 8003bae:	e730      	b.n	8003a12 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f000 fb39 	bl	8004228 <vPortFree>
 8003bb6:	e72c      	b.n	8003a12 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bb8:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bbc:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bc0:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8003bc2:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bc4:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003bc8:	d203      	bcs.n	8003bd2 <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bca:	6830      	ldr	r0, [r6, #0]
 8003bcc:	f7fd fe76 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003bd0:	e7da      	b.n	8003b88 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd2:	ebaa 0307 	sub.w	r3, sl, r7
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d819      	bhi.n	8003c0e <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	b173      	cbz	r3, 8003bfc <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 8003bde:	2300      	movs	r3, #0
 8003be0:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003be2:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003be4:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003be8:	f7ff fd90 	bl	800370c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bec:	2300      	movs	r3, #0
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	a906      	add	r1, sp, #24
 8003bf4:	f7fd ff80 	bl	8001af8 <xQueueGenericSend>
			configASSERT( xResult );
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d1c5      	bne.n	8003b88 <prvTimerTask+0x1d0>
 8003bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	e7fe      	b.n	8003c0c <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvTimerTask+0x280>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f7fd fe53 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003c16:	e7b7      	b.n	8003b88 <prvTimerTask+0x1d0>
 8003c18:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c28:	e7fe      	b.n	8003c28 <prvTimerTask+0x270>
 8003c2a:	bf00      	nop
 8003c2c:	20001114 	.word	0x20001114
 8003c30:	200011e4 	.word	0x200011e4
 8003c34:	20001238 	.word	0x20001238
 8003c38:	20001118 	.word	0x20001118

08003c3c <xTimerCreateTimerTask>:
{
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003c3e:	4c23      	ldr	r4, [pc, #140]	; (8003ccc <xTimerCreateTimerTask+0x90>)
{
 8003c40:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8003c42:	f000 f8d7 	bl	8003df4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	b335      	cbz	r5, 8003c98 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c4a:	f000 f8f5 	bl	8003e38 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	b1cb      	cbz	r3, 8003c86 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c52:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c54:	aa07      	add	r2, sp, #28
 8003c56:	a906      	add	r1, sp, #24
 8003c58:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c5a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c5e:	f7fd fd13 	bl	8001688 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c62:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8003c66:	2302      	movs	r3, #2
 8003c68:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	9a07      	ldr	r2, [sp, #28]
 8003c70:	4917      	ldr	r1, [pc, #92]	; (8003cd0 <xTimerCreateTimerTask+0x94>)
 8003c72:	4818      	ldr	r0, [pc, #96]	; (8003cd4 <xTimerCreateTimerTask+0x98>)
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7ff f879 	bl	8002d6c <xTaskCreateStatic>
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <xTimerCreateTimerTask+0x9c>)
 8003c7c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003c7e:	b110      	cbz	r0, 8003c86 <xTimerCreateTimerTask+0x4a>
}
 8003c80:	2001      	movs	r0, #1
 8003c82:	b009      	add	sp, #36	; 0x24
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003c96:	e7fe      	b.n	8003c96 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8003c98:	4f10      	ldr	r7, [pc, #64]	; (8003cdc <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8003c9a:	4e11      	ldr	r6, [pc, #68]	; (8003ce0 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7fd fded 	bl	800187c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7fd fdea 	bl	800187c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003caa:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8003cac:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8003cb2:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cb4:	2110      	movs	r1, #16
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <xTimerCreateTimerTask+0xb4>)
 8003cb8:	200a      	movs	r0, #10
 8003cba:	f7fd fe67 	bl	800198c <xQueueGenericCreateStatic>
 8003cbe:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0c2      	beq.n	8003c4a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cc4:	490b      	ldr	r1, [pc, #44]	; (8003cf4 <xTimerCreateTimerTask+0xb8>)
 8003cc6:	f7fe fd0b 	bl	80026e0 <vQueueAddToRegistry>
 8003cca:	e7be      	b.n	8003c4a <xTimerCreateTimerTask+0xe>
 8003ccc:	20001238 	.word	0x20001238
 8003cd0:	08010acc 	.word	0x08010acc
 8003cd4:	080039b9 	.word	0x080039b9
 8003cd8:	2000123c 	.word	0x2000123c
 8003cdc:	200011bc 	.word	0x200011bc
 8003ce0:	200011d0 	.word	0x200011d0
 8003ce4:	20001114 	.word	0x20001114
 8003ce8:	20001118 	.word	0x20001118
 8003cec:	200011e8 	.word	0x200011e8
 8003cf0:	2000111c 	.word	0x2000111c
 8003cf4:	08010ac4 	.word	0x08010ac4

08003cf8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003cf8:	b530      	push	{r4, r5, lr}
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8003d02:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8003d04:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d06:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8003d08:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003d0a:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003d12:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d14:	f7fe f8a6 	bl	8001e64 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8003d18:	b005      	add	sp, #20
 8003d1a:	bd30      	pop	{r4, r5, pc}
 8003d1c:	20001238 	.word	0x20001238

08003d20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d20:	4808      	ldr	r0, [pc, #32]	; (8003d44 <prvPortStartFirstTask+0x24>)
 8003d22:	6800      	ldr	r0, [r0, #0]
 8003d24:	6800      	ldr	r0, [r0, #0]
 8003d26:	f380 8808 	msr	MSP, r0
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f380 8814 	msr	CONTROL, r0
 8003d32:	b662      	cpsie	i
 8003d34:	b661      	cpsie	f
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	df00      	svc	0
 8003d40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d42:	0000      	.short	0x0000
 8003d44:	e000ed08 	.word	0xe000ed08

08003d48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d58 <vPortEnableVFP+0x10>
 8003d4c:	6801      	ldr	r1, [r0, #0]
 8003d4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d52:	6001      	str	r1, [r0, #0]
 8003d54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d56:	0000      	.short	0x0000
 8003d58:	e000ed88 	.word	0xe000ed88

08003d5c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <prvTaskExitError+0x3c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
{
 8003d60:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003d62:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8003d64:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8003d66:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8003d68:	d008      	beq.n	8003d7c <prvTaskExitError+0x20>
 8003d6a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	e7fe      	b.n	8003d7a <prvTaskExitError+0x1e>
 8003d7c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0fc      	beq.n	8003d8c <prvTaskExitError+0x30>
}
 8003d92:	b002      	add	sp, #8
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000008 	.word	0x20000008

08003d9c <pxPortInitialiseStack>:
{
 8003d9c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003da2:	4c07      	ldr	r4, [pc, #28]	; (8003dc0 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003da4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003da8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dac:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003db0:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003db4:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8003db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dbc:	3844      	subs	r0, #68	; 0x44
 8003dbe:	4770      	bx	lr
 8003dc0:	08003d5d 	.word	0x08003d5d
	...

08003dd0 <SVC_Handler>:
	__asm volatile (
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <pxCurrentTCBConst2>)
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dda:	f380 8809 	msr	PSP, r0
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8811 	msr	BASEPRI, r0
 8003dea:	4770      	bx	lr
 8003dec:	f3af 8000 	nop.w

08003df0 <pxCurrentTCBConst2>:
 8003df0:	20000c18 	.word	0x20000c18

08003df4 <vPortEnterCritical>:
 8003df4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <vPortEnterCritical+0x40>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003e0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003e0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003e0e:	d000      	beq.n	8003e12 <vPortEnterCritical+0x1e>
}
 8003e10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e16:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f7      	beq.n	8003e10 <vPortEnterCritical+0x1c>
 8003e20:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	e7fe      	b.n	8003e30 <vPortEnterCritical+0x3c>
 8003e32:	bf00      	nop
 8003e34:	20000008 	.word	0x20000008

08003e38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <vPortExitCritical+0x24>)
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	b943      	cbnz	r3, 8003e50 <vPortExitCritical+0x18>
 8003e3e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	e7fe      	b.n	8003e4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003e50:	3b01      	subs	r3, #1
 8003e52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e54:	b90b      	cbnz	r3, 8003e5a <vPortExitCritical+0x22>
	__asm volatile
 8003e56:	f383 8811 	msr	BASEPRI, r3
}
 8003e5a:	4770      	bx	lr
 8003e5c:	20000008 	.word	0x20000008

08003e60 <PendSV_Handler>:
	__asm volatile
 8003e60:	f3ef 8009 	mrs	r0, PSP
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <pxCurrentTCBConst>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f01e 0f10 	tst.w	lr, #16
 8003e70:	bf08      	it	eq
 8003e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7a:	6010      	str	r0, [r2, #0]
 8003e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e80:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003e84:	f380 8811 	msr	BASEPRI, r0
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f7ff fa48 	bl	8003324 <vTaskSwitchContext>
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	f380 8811 	msr	BASEPRI, r0
 8003e9c:	bc09      	pop	{r0, r3}
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	6808      	ldr	r0, [r1, #0]
 8003ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea6:	f01e 0f10 	tst.w	lr, #16
 8003eaa:	bf08      	it	eq
 8003eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003eb0:	f380 8809 	msr	PSP, r0
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w

08003ec0 <pxCurrentTCBConst>:
 8003ec0:	20000c18 	.word	0x20000c18

08003ec4 <xPortSysTickHandler>:
{
 8003ec4:	b508      	push	{r3, lr}
	__asm volatile
 8003ec6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003ed6:	f7ff fa15 	bl	8003304 <xTaskIncrementTick>
 8003eda:	b128      	cbz	r0, 8003ee8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f383 8811 	msr	BASEPRI, r3
}
 8003eee:	bd08      	pop	{r3, pc}

08003ef0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003ef4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ef6:	4906      	ldr	r1, [pc, #24]	; (8003f10 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003efa:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003efc:	680b      	ldr	r3, [r1, #0]
 8003efe:	4805      	ldr	r0, [pc, #20]	; (8003f14 <vPortSetupTimerInterrupt+0x24>)
 8003f00:	fba0 0303 	umull	r0, r3, r0, r3
 8003f04:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f06:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f0c:	6111      	str	r1, [r2, #16]
}
 8003f0e:	4770      	bx	lr
 8003f10:	20000000 	.word	0x20000000
 8003f14:	10624dd3 	.word	0x10624dd3

08003f18 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f1c:	4a48      	ldr	r2, [pc, #288]	; (8004040 <xPortStartScheduler+0x128>)
 8003f1e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8003f22:	4291      	cmp	r1, r2
 8003f24:	d041      	beq.n	8003faa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f26:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003f2a:	4b46      	ldr	r3, [pc, #280]	; (8004044 <xPortStartScheduler+0x12c>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d033      	beq.n	8003f98 <xPortStartScheduler+0x80>
{
 8003f30:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f32:	4b45      	ldr	r3, [pc, #276]	; (8004048 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f34:	4c45      	ldr	r4, [pc, #276]	; (800404c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f36:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f38:	4845      	ldr	r0, [pc, #276]	; (8004050 <xPortStartScheduler+0x138>)
{
 8003f3a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f3c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f50:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f58:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f5a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f5c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f60:	bf48      	it	mi
 8003f62:	2206      	movmi	r2, #6
 8003f64:	d50f      	bpl.n	8003f86 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	4611      	mov	r1, r2
 8003f7a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003f7e:	d4f2      	bmi.n	8003f66 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f80:	2903      	cmp	r1, #3
 8003f82:	d01b      	beq.n	8003fbc <xPortStartScheduler+0xa4>
 8003f84:	6001      	str	r1, [r0, #0]
	__asm volatile
 8003f86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	e7fe      	b.n	8003f96 <xPortStartScheduler+0x7e>
 8003f98:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fa8:	e7fe      	b.n	8003fa8 <xPortStartScheduler+0x90>
 8003faa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fba:	e7fe      	b.n	8003fba <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fbc:	9b02      	ldr	r3, [sp, #8]
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8003fc0:	4d24      	ldr	r5, [pc, #144]	; (8004054 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fc2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fc6:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fca:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fcc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fd0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fdc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fe4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8003fe8:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8003fea:	f7ff ff81 	bl	8003ef0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003fee:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8003ff0:	f7ff feaa 	bl	8003d48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ff4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003ff8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ffc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8004000:	f7ff fe8e 	bl	8003d20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004004:	f7ff f98e 	bl	8003324 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8004008:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 800400a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800400c:	3301      	adds	r3, #1
 800400e:	d008      	beq.n	8004022 <xPortStartScheduler+0x10a>
 8004010:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	e7fe      	b.n	8004020 <xPortStartScheduler+0x108>
 8004022:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004032:	9b03      	ldr	r3, [sp, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0fc      	beq.n	8004032 <xPortStartScheduler+0x11a>
}
 8004038:	2000      	movs	r0, #0
 800403a:	b004      	add	sp, #16
 800403c:	bd70      	pop	{r4, r5, r6, pc}
 800403e:	bf00      	nop
 8004040:	410fc271 	.word	0x410fc271
 8004044:	410fc270 	.word	0x410fc270
 8004048:	e000e400 	.word	0xe000e400
 800404c:	20001240 	.word	0x20001240
 8004050:	20001244 	.word	0x20001244
 8004054:	20000008 	.word	0x20000008

08004058 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004058:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d90e      	bls.n	800407e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004060:	4911      	ldr	r1, [pc, #68]	; (80040a8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004064:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d908      	bls.n	800407e <vPortValidateInterruptPriority+0x26>
 800406c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	e7fe      	b.n	800407c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800407e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004082:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <vPortValidateInterruptPriority+0x58>)
 8004084:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800408e:	4293      	cmp	r3, r2
 8004090:	d908      	bls.n	80040a4 <vPortValidateInterruptPriority+0x4c>
 8004092:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	e7fe      	b.n	80040a2 <vPortValidateInterruptPriority+0x4a>
	}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000e3f0 	.word	0xe000e3f0
 80040ac:	20001240 	.word	0x20001240
 80040b0:	20001244 	.word	0x20001244

080040b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b8:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80040ba:	f7ff f905 	bl	80032c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040be:	4b53      	ldr	r3, [pc, #332]	; (800420c <pvPortMalloc+0x158>)
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	d070      	beq.n	80041a8 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040c6:	4b52      	ldr	r3, [pc, #328]	; (8004210 <pvPortMalloc+0x15c>)
 80040c8:	681f      	ldr	r7, [r3, #0]
 80040ca:	423e      	tst	r6, r7
 80040cc:	d12e      	bne.n	800412c <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040ce:	b36e      	cbz	r6, 800412c <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80040d0:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040d4:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040d6:	bf1c      	itt	ne
 80040d8:	f024 0407 	bicne.w	r4, r4, #7
 80040dc:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040de:	b32c      	cbz	r4, 800412c <pvPortMalloc+0x78>
 80040e0:	f8df c140 	ldr.w	ip, [pc, #320]	; 8004224 <pvPortMalloc+0x170>
 80040e4:	f8dc 6000 	ldr.w	r6, [ip]
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d31f      	bcc.n	800412c <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80040ec:	4849      	ldr	r0, [pc, #292]	; (8004214 <pvPortMalloc+0x160>)
 80040ee:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040f0:	e003      	b.n	80040fa <pvPortMalloc+0x46>
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	b122      	cbz	r2, 8004100 <pvPortMalloc+0x4c>
 80040f6:	4618      	mov	r0, r3
 80040f8:	4613      	mov	r3, r2
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	42a1      	cmp	r1, r4
 80040fe:	d3f8      	bcc.n	80040f2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004100:	42ab      	cmp	r3, r5
 8004102:	d013      	beq.n	800412c <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004104:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004106:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004108:	f858 eb08 	ldr.w	lr, [r8], #8
 800410c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004110:	2a10      	cmp	r2, #16
 8004112:	d92b      	bls.n	800416c <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004114:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	0748      	lsls	r0, r1, #29
 8004118:	d011      	beq.n	800413e <pvPortMalloc+0x8a>
 800411a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	e7fe      	b.n	800412a <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800412c:	f7ff f8d4 	bl	80032d8 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004130:	f04f 0800 	mov.w	r8, #0
 8004134:	f006 fd6e 	bl	800ac14 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8004138:	4640      	mov	r0, r8
 800413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800413e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004140:	4a34      	ldr	r2, [pc, #208]	; (8004214 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 8004142:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004144:	4614      	mov	r4, r2
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	4291      	cmp	r1, r2
 800414a:	d8fb      	bhi.n	8004144 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414c:	6860      	ldr	r0, [r4, #4]
 800414e:	eb04 0e00 	add.w	lr, r4, r0
 8004152:	4571      	cmp	r1, lr
 8004154:	d04a      	beq.n	80041ec <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004156:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800415a:	eb01 000e 	add.w	r0, r1, lr
 800415e:	4282      	cmp	r2, r0
 8004160:	d04b      	beq.n	80041fa <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004162:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004164:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004166:	bf18      	it	ne
 8004168:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800416a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800416c:	482a      	ldr	r0, [pc, #168]	; (8004218 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 800416e:	4a2b      	ldr	r2, [pc, #172]	; (800421c <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004170:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004172:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004174:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004176:	bf38      	it	cc
 8004178:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800417a:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 800417c:	2000      	movs	r0, #0
 800417e:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8004182:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004184:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 8004188:	3301      	adds	r3, #1
 800418a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800418c:	f7ff f8a4 	bl	80032d8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004190:	f018 0f07 	tst.w	r8, #7
 8004194:	d0d0      	beq.n	8004138 <pvPortMalloc+0x84>
 8004196:	f04f 0340 	mov.w	r3, #64	; 0x40
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	e7fe      	b.n	80041a6 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 80041a8:	491d      	ldr	r1, [pc, #116]	; (8004220 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041aa:	4c19      	ldr	r4, [pc, #100]	; (8004210 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041ac:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ae:	bf14      	ite	ne
 80041b0:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041b2:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041b4:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 80041b8:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041bc:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c0:	bf18      	it	ne
 80041c2:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c6:	4914      	ldr	r1, [pc, #80]	; (8004218 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 80041c8:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041ca:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041cc:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d0:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d2:	4910      	ldr	r1, [pc, #64]	; (8004214 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d4:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041d6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 80041da:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041dc:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041de:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041e0:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80041e2:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041e6:	e9c0 5300 	strd	r5, r3, [r0]
}
 80041ea:	e76e      	b.n	80040ca <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041ec:	6849      	ldr	r1, [r1, #4]
 80041ee:	eb00 0e01 	add.w	lr, r0, r1
 80041f2:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 80041f6:	4621      	mov	r1, r4
 80041f8:	e7af      	b.n	800415a <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fa:	42aa      	cmp	r2, r5
 80041fc:	d0b1      	beq.n	8004162 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041fe:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004204:	4470      	add	r0, lr
 8004206:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004208:	e7ac      	b.n	8004164 <pvPortMalloc+0xb0>
 800420a:	bf00      	nop
 800420c:	20001248 	.word	0x20001248
 8004210:	2000b24c 	.word	0x2000b24c
 8004214:	2000b260 	.word	0x2000b260
 8004218:	2000b254 	.word	0x2000b254
 800421c:	2000b258 	.word	0x2000b258
 8004220:	2000124c 	.word	0x2000124c
 8004224:	2000b250 	.word	0x2000b250

08004228 <vPortFree>:
	if( pv != NULL )
 8004228:	b1d0      	cbz	r0, 8004260 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800422a:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <vPortFree+0xb0>)
 800422c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	4213      	tst	r3, r2
 8004234:	d00b      	beq.n	800424e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004236:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800423a:	b191      	cbz	r1, 8004262 <vPortFree+0x3a>
 800423c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	e7fe      	b.n	800424c <vPortFree+0x24>
 800424e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800425e:	e7fe      	b.n	800425e <vPortFree+0x36>
 8004260:	4770      	bx	lr
{
 8004262:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004264:	ea23 0302 	bic.w	r3, r3, r2
{
 8004268:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800426a:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 800426e:	4c1b      	ldr	r4, [pc, #108]	; (80042dc <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004270:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8004272:	f7ff f829 	bl	80032c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004276:	9801      	ldr	r0, [sp, #4]
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004280:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8004282:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004284:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004286:	461a      	mov	r2, r3
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4298      	cmp	r0, r3
 800428c:	d8fb      	bhi.n	8004286 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800428e:	6854      	ldr	r4, [r2, #4]
 8004290:	eb02 0e04 	add.w	lr, r2, r4
 8004294:	4570      	cmp	r0, lr
 8004296:	d01a      	beq.n	80042ce <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004298:	eb00 0c01 	add.w	ip, r0, r1
 800429c:	4563      	cmp	r3, ip
 800429e:	d00c      	beq.n	80042ba <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042a0:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80042a2:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042a4:	bf18      	it	ne
 80042a6:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <vPortFree+0xbc>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	b002      	add	sp, #8
 80042b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80042b6:	f7ff b80f 	b.w	80032d8 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ba:	4c0b      	ldr	r4, [pc, #44]	; (80042e8 <vPortFree+0xc0>)
 80042bc:	6824      	ldr	r4, [r4, #0]
 80042be:	42a3      	cmp	r3, r4
 80042c0:	d0ee      	beq.n	80042a0 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042c2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c6:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042c8:	e9c0 3100 	strd	r3, r1, [r0]
 80042cc:	e7e9      	b.n	80042a2 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042ce:	4421      	add	r1, r4
 80042d0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80042d2:	4610      	mov	r0, r2
 80042d4:	e7e0      	b.n	8004298 <vPortFree+0x70>
 80042d6:	bf00      	nop
 80042d8:	2000b24c 	.word	0x2000b24c
 80042dc:	2000b250 	.word	0x2000b250
 80042e0:	2000b260 	.word	0x2000b260
 80042e4:	2000b25c 	.word	0x2000b25c
 80042e8:	20001248 	.word	0x20001248

080042ec <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 80042ec:	b199      	cbz	r1, 8004316 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 80042ee:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	4d0a      	ldr	r5, [pc, #40]	; (800431c <cal_crc16+0x30>)
 80042f4:	4c0a      	ldr	r4, [pc, #40]	; (8004320 <cal_crc16+0x34>)
 80042f6:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 80042fa:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 80042fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004300:	4053      	eors	r3, r2
    while(length--) {
 8004302:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8004304:	5cea      	ldrb	r2, [r5, r3]
 8004306:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 800430a:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 800430c:	d1f6      	bne.n	80042fc <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 800430e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8004312:	bc30      	pop	{r4, r5}
 8004314:	4770      	bx	lr
    while(length--) {
 8004316:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800431a:	4770      	bx	lr
 800431c:	08010ad4 	.word	0x08010ad4
 8004320:	08010bd4 	.word	0x08010bd4

08004324 <_ZL15set_response_okm12lora_event_t>:
	}

	return false;
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8004324:	b530      	push	{r4, r5, lr}
 8004326:	460a      	mov	r2, r1
 8004328:	b087      	sub	sp, #28
	uint16_t crc = 0;
	char *temp = NULL;
 800432a:	2300      	movs	r3, #0
	char *response_to_device = NULL;
	char *cmd_str = cmd_to_str(cmd, command_string);
 800432c:	491b      	ldr	r1, [pc, #108]	; (800439c <_ZL15set_response_okm12lora_event_t+0x78>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 800432e:	4604      	mov	r4, r0
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004330:	4610      	mov	r0, r2
	char *response_to_device = NULL;
 8004332:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004336:	f000 feb1 	bl	800509c <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 800433a:	4623      	mov	r3, r4
	char *cmd_str = cmd_to_str(cmd, command_string);
 800433c:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 800433e:	4918      	ldr	r1, [pc, #96]	; (80043a0 <_ZL15set_response_okm12lora_event_t+0x7c>)
 8004340:	9003      	str	r0, [sp, #12]
 8004342:	a804      	add	r0, sp, #16
 8004344:	f007 ffac 	bl	800c2a0 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004348:	9d04      	ldr	r5, [sp, #16]
 800434a:	4628      	mov	r0, r5
 800434c:	f7fb ff5a 	bl	8000204 <strlen>
 8004350:	b281      	uxth	r1, r0
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff ffca 	bl	80042ec <cal_crc16>
	if(temp != NULL) free(temp);
 8004358:	9b04      	ldr	r3, [sp, #16]
 800435a:	9a03      	ldr	r2, [sp, #12]
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 800435c:	4605      	mov	r5, r0
	if(temp != NULL) free(temp);
 800435e:	b11b      	cbz	r3, 8004368 <_ZL15set_response_okm12lora_event_t+0x44>
 8004360:	4618      	mov	r0, r3
 8004362:	f007 fffd 	bl	800c360 <free>
 8004366:	9a03      	ldr	r2, [sp, #12]

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, (unsigned int)addr, crc);
 8004368:	490e      	ldr	r1, [pc, #56]	; (80043a4 <_ZL15set_response_okm12lora_event_t+0x80>)
 800436a:	9500      	str	r5, [sp, #0]
 800436c:	4623      	mov	r3, r4
 800436e:	a805      	add	r0, sp, #20
 8004370:	f007 ff96 	bl	800c2a0 <asiprintf>

	if(xQueueSend(q_response, &response_to_device, 10) == pdFALSE){
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <_ZL15set_response_okm12lora_event_t+0x84>)
 8004376:	2300      	movs	r3, #0
 8004378:	6810      	ldr	r0, [r2, #0]
 800437a:	a905      	add	r1, sp, #20
 800437c:	220a      	movs	r2, #10
 800437e:	f7fd fbbb 	bl	8001af8 <xQueueGenericSend>
 8004382:	b108      	cbz	r0, 8004388 <_ZL15set_response_okm12lora_event_t+0x64>
		loraif_debug((char *)"Can't send to q_response", __LINE__, __FUNCTION__);
	}
}
 8004384:	b007      	add	sp, #28
 8004386:	bd30      	pop	{r4, r5, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <_ZL15set_response_okm12lora_event_t+0x88>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <_ZL15set_response_okm12lora_event_t+0x8c>)
 800438e:	4909      	ldr	r1, [pc, #36]	; (80043b4 <_ZL15set_response_okm12lora_event_t+0x90>)
 8004390:	4809      	ldr	r0, [pc, #36]	; (80043b8 <_ZL15set_response_okm12lora_event_t+0x94>)
 8004392:	2382      	movs	r3, #130	; 0x82
 8004394:	f006 fd0a 	bl	800adac <LOG_DEBUG>
}
 8004398:	b007      	add	sp, #28
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	2000000c 	.word	0x2000000c
 80043a0:	08010cd4 	.word	0x08010cd4
 80043a4:	08010cf4 	.word	0x08010cf4
 80043a8:	2000b27c 	.word	0x2000b27c
 80043ac:	08010d60 	.word	0x08010d60
 80043b0:	08010d20 	.word	0x08010d20
 80043b4:	08010d3c 	.word	0x08010d3c
 80043b8:	08010d58 	.word	0x08010d58

080043bc <loraif_init>:


void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 80043bc:	b538      	push	{r3, r4, r5, lr}
	loraif = lora;
	resp_timeout = timeout;
	max_not_resp = max_not_response;
	_send_syncword = send_syncword;
	_recv_syncword = recv_syncword;
 80043be:	4d18      	ldr	r5, [pc, #96]	; (8004420 <loraif_init+0x64>)
void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 80043c0:	f89d c010 	ldrb.w	ip, [sp, #16]
	_recv_syncword = recv_syncword;
 80043c4:	702a      	strb	r2, [r5, #0]
	resp_timeout = timeout;
 80043c6:	4a17      	ldr	r2, [pc, #92]	; (8004424 <loraif_init+0x68>)
	loraif = lora;
 80043c8:	4c17      	ldr	r4, [pc, #92]	; (8004428 <loraif_init+0x6c>)
	resp_timeout = timeout;
 80043ca:	6013      	str	r3, [r2, #0]
	max_not_resp = max_not_response;
 80043cc:	4b17      	ldr	r3, [pc, #92]	; (800442c <loraif_init+0x70>)
	loraif = lora;
 80043ce:	6020      	str	r0, [r4, #0]
	max_not_resp = max_not_response;
 80043d0:	f883 c000 	strb.w	ip, [r3]
	_send_syncword = send_syncword;
 80043d4:	4b16      	ldr	r3, [pc, #88]	; (8004430 <loraif_init+0x74>)

	q_wait_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 80043d6:	2200      	movs	r2, #0
	_send_syncword = send_syncword;
 80043d8:	7019      	strb	r1, [r3, #0]
	q_wait_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 80043da:	201e      	movs	r0, #30
 80043dc:	2104      	movs	r1, #4
 80043de:	f7fd fb49 	bl	8001a74 <xQueueGenericCreate>
 80043e2:	4b14      	ldr	r3, [pc, #80]	; (8004434 <loraif_init+0x78>)
	q_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 80043e4:	2200      	movs	r2, #0
	q_wait_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 80043e6:	6018      	str	r0, [r3, #0]
	q_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 80043e8:	2104      	movs	r1, #4
 80043ea:	201e      	movs	r0, #30
 80043ec:	f7fd fb42 	bl	8001a74 <xQueueGenericCreate>
 80043f0:	4b11      	ldr	r3, [pc, #68]	; (8004438 <loraif_init+0x7c>)

	s_lora_transfer = xSemaphoreCreateBinary();
 80043f2:	2203      	movs	r2, #3
	q_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 80043f4:	6018      	str	r0, [r3, #0]
	s_lora_transfer = xSemaphoreCreateBinary();
 80043f6:	2100      	movs	r1, #0
 80043f8:	2001      	movs	r0, #1
 80043fa:	f7fd fb3b 	bl	8001a74 <xQueueGenericCreate>
 80043fe:	4b0f      	ldr	r3, [pc, #60]	; (800443c <loraif_init+0x80>)
 8004400:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(s_lora_transfer);
 8004402:	2300      	movs	r3, #0
 8004404:	4619      	mov	r1, r3
 8004406:	461a      	mov	r2, r3
 8004408:	f7fd fb76 	bl	8001af8 <xQueueGenericSend>

	loraif->setSyncWord(_recv_syncword);
 800440c:	7829      	ldrb	r1, [r5, #0]
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	f001 fcd8 	bl	8005dc4 <_ZN6sx127x11setSyncWordEh>
	loraif->receive_it(0);
 8004414:	6820      	ldr	r0, [r4, #0]
 8004416:	2100      	movs	r1, #0
}
 8004418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	loraif->receive_it(0);
 800441c:	f001 bbee 	b.w	8005bfc <_ZN6sx127x10receive_itEh>
 8004420:	2000b288 	.word	0x2000b288
 8004424:	2000b284 	.word	0x2000b284
 8004428:	2000b298 	.word	0x2000b298
 800442c:	2000b280 	.word	0x2000b280
 8004430:	2000b289 	.word	0x2000b289
 8004434:	2000b290 	.word	0x2000b290
 8004438:	2000b27c 	.word	0x2000b27c
 800443c:	2000b294 	.word	0x2000b294

08004440 <loraif_register_event_handler>:

void loraif_register_event_handler(void (*peventhandler)(lora_event_t event, uint32_t device_address, char *data)){
	fpeventhandler = peventhandler;
 8004440:	4b01      	ldr	r3, [pc, #4]	; (8004448 <loraif_register_event_handler+0x8>)
 8004442:	6018      	str	r0, [r3, #0]
}
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	2000b28c 	.word	0x2000b28c

0800444c <loraif_check_receive_data_crc>:

bool loraif_check_receive_data_crc(char *data){
 800444c:	b570      	push	{r4, r5, r6, lr}
 800444e:	b086      	sub	sp, #24
	char *src_cpy = data;
	char *crc_start;
	uint16_t crc, icrc, len;
	pkt_t pkt;
	pkt_err_t err;
	pkt_json_t json;
 8004450:	2300      	movs	r3, #0
	pkt_t pkt;
 8004452:	2500      	movs	r5, #0
 8004454:	2400      	movs	r4, #0

	crc_start = strstr(src_cpy, "\"crc\"");
 8004456:	4919      	ldr	r1, [pc, #100]	; (80044bc <loraif_check_receive_data_crc+0x70>)
	pkt_json_t json;
 8004458:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 800445a:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 800445e:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_receive_data_crc(char *data){
 8004462:	4605      	mov	r5, r0
	pkt_json_t json;
 8004464:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 8004466:	f008 ff15 	bl	800d294 <strstr>
	if(crc_start == NULL) return false;
 800446a:	b128      	cbz	r0, 8004478 <loraif_check_receive_data_crc+0x2c>

	err = parse_packet(src_cpy, &pkt);
 800446c:	4604      	mov	r4, r0
 800446e:	4669      	mov	r1, sp
 8004470:	4628      	mov	r0, r5
 8004472:	f000 fd9d 	bl	8004fb0 <parse_packet>
	if(err != PKT_ERR_OK) return false;
 8004476:	b110      	cbz	r0, 800447e <loraif_check_receive_data_crc+0x32>
	if(crc_start == NULL) return false;
 8004478:	2000      	movs	r0, #0
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
	crc = cal_crc16((uint8_t *)src_cpy, len);
	if(crc != icrc) return false;

	return true;
}
 800447a:	b006      	add	sp, #24
 800447c:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 800447e:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <loraif_check_receive_data_crc+0x74>)
 8004480:	9801      	ldr	r0, [sp, #4]
 8004482:	a903      	add	r1, sp, #12
 8004484:	f000 fc76 	bl	8004d74 <json_get_object>
	if(err != PKT_ERR_OK) return false;
 8004488:	2800      	cmp	r0, #0
 800448a:	d1f5      	bne.n	8004478 <loraif_check_receive_data_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 800448c:	4601      	mov	r1, r0
 800448e:	2210      	movs	r2, #16
 8004490:	9805      	ldr	r0, [sp, #20]
 8004492:	f009 fdc5 	bl	800e020 <strtol>
 8004496:	4606      	mov	r6, r0
	json_release_object(&json);
 8004498:	a803      	add	r0, sp, #12
 800449a:	f000 fd77 	bl	8004f8c <json_release_object>
	release_packet(&pkt);
 800449e:	4668      	mov	r0, sp
 80044a0:	f000 fdd6 	bl	8005050 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 80044a4:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 80044a6:	b289      	uxth	r1, r1
 80044a8:	4628      	mov	r0, r5
 80044aa:	f7ff ff1f 	bl	80042ec <cal_crc16>
	if(crc != icrc) return false;
 80044ae:	b2b6      	uxth	r6, r6
 80044b0:	1a30      	subs	r0, r6, r0
 80044b2:	fab0 f080 	clz	r0, r0
 80044b6:	0940      	lsrs	r0, r0, #5
}
 80044b8:	b006      	add	sp, #24
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	08010d70 	.word	0x08010d70
 80044c0:	08010d78 	.word	0x08010d78

080044c4 <loraif_isvalid_address>:

bool loraif_isvalid_address(uint32_t address){
	return (address != LORAIF_INVALID_ADDRESS);
}
 80044c4:	3800      	subs	r0, #0
 80044c6:	bf18      	it	ne
 80044c8:	2001      	movne	r0, #1
 80044ca:	4770      	bx	lr

080044cc <loraif_send_request>:


void loraif_send_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 80044cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044d0:	4604      	mov	r4, r0
 80044d2:	b08b      	sub	sp, #44	; 0x2c
	uint16_t crc = 0;
	char *req_data = NULL, *temp = NULL;
 80044d4:	2700      	movs	r7, #0

	char *cmd_str = cmd_to_str(cmd, command_string);
 80044d6:	4608      	mov	r0, r1
 80044d8:	4964      	ldr	r1, [pc, #400]	; (800466c <loraif_send_request+0x1a0>)
void loraif_send_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 80044da:	4616      	mov	r6, r2
 80044dc:	461d      	mov	r5, r3
	char *req_data = NULL, *temp = NULL;
 80044de:	e9cd 7706 	strd	r7, r7, [sp, #24]
	char *cmd_str = cmd_to_str(cmd, command_string);
 80044e2:	f000 fddb 	bl	800509c <cmd_to_str>
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 80044e6:	4962      	ldr	r1, [pc, #392]	; (8004670 <loraif_send_request+0x1a4>)
 80044e8:	9005      	str	r0, [sp, #20]
	char *cmd_str = cmd_to_str(cmd, command_string);
 80044ea:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 80044ec:	4623      	mov	r3, r4
 80044ee:	e9cd 6500 	strd	r6, r5, [sp]
 80044f2:	a807      	add	r0, sp, #28
 80044f4:	f007 fed4 	bl	800c2a0 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80044f8:	9f07      	ldr	r7, [sp, #28]
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7fb fe82 	bl	8000204 <strlen>
 8004500:	b281      	uxth	r1, r0
 8004502:	4638      	mov	r0, r7
 8004504:	f7ff fef2 	bl	80042ec <cal_crc16>
 8004508:	4607      	mov	r7, r0
	if(temp != NULL) free(temp);
 800450a:	9807      	ldr	r0, [sp, #28]
 800450c:	9a05      	ldr	r2, [sp, #20]
 800450e:	b110      	cbz	r0, 8004516 <loraif_send_request+0x4a>
 8004510:	f007 ff26 	bl	800c360 <free>
 8004514:	9a05      	ldr	r2, [sp, #20]

	asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,\"crc\":0x%04x}", cmd_str, (unsigned int)dev_address, data, require_resp, crc);
 8004516:	4957      	ldr	r1, [pc, #348]	; (8004674 <loraif_send_request+0x1a8>)
 8004518:	9702      	str	r7, [sp, #8]
 800451a:	e9cd 6500 	strd	r6, r5, [sp]
 800451e:	4623      	mov	r3, r4
 8004520:	a806      	add	r0, sp, #24
 8004522:	f007 febd 	bl	800c2a0 <asiprintf>
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004526:	4854      	ldr	r0, [pc, #336]	; (8004678 <loraif_send_request+0x1ac>)
 8004528:	6802      	ldr	r2, [r0, #0]
	show_device_list();
}

loraif_dev_t *loraif_select_device(uint32_t device_address){

    if (loraif_device_list.empty()) {
 800452a:	4282      	cmp	r2, r0
 800452c:	f000 808a 	beq.w	8004644 <loraif_send_request+0x178>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == device_address) {
 8004530:	6891      	ldr	r1, [r2, #8]
 8004532:	680b      	ldr	r3, [r1, #0]
 8004534:	429c      	cmp	r4, r3
 8004536:	d012      	beq.n	800455e <loraif_send_request+0x92>
	_M_node = _M_node->_M_next;
 8004538:	6812      	ldr	r2, [r2, #0]
    while (device != loraif_device_list.end()) {
 800453a:	4282      	cmp	r2, r0
 800453c:	d1f8      	bne.n	8004530 <loraif_send_request+0x64>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800453e:	4b4f      	ldr	r3, [pc, #316]	; (800467c <loraif_send_request+0x1b0>)
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	4a4f      	ldr	r2, [pc, #316]	; (8004680 <loraif_send_request+0x1b4>)
 8004544:	494f      	ldr	r1, [pc, #316]	; (8004684 <loraif_send_request+0x1b8>)
 8004546:	4850      	ldr	r0, [pc, #320]	; (8004688 <loraif_send_request+0x1bc>)
 8004548:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 800454c:	f006 fc2e 	bl	800adac <LOG_DEBUG>
		if(req_data != NULL) free(req_data);
 8004550:	9806      	ldr	r0, [sp, #24]
 8004552:	b108      	cbz	r0, 8004558 <loraif_send_request+0x8c>
 8004554:	f007 ff04 	bl	800c360 <free>
}
 8004558:	b00b      	add	sp, #44	; 0x2c
 800455a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dev != NULL && dev->name != NULL){
 800455e:	684b      	ldr	r3, [r1, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d0f5      	beq.n	8004550 <loraif_send_request+0x84>
		if(require_resp != 0){
 8004564:	b99d      	cbnz	r5, 800458e <loraif_send_request+0xc2>
		if(xQueueSend(q_response, &req_data, 10) == pdFALSE){
 8004566:	4a49      	ldr	r2, [pc, #292]	; (800468c <loraif_send_request+0x1c0>)
 8004568:	2300      	movs	r3, #0
 800456a:	6810      	ldr	r0, [r2, #0]
 800456c:	a906      	add	r1, sp, #24
 800456e:	220a      	movs	r2, #10
 8004570:	f7fd fac2 	bl	8001af8 <xQueueGenericSend>
 8004574:	2800      	cmp	r0, #0
 8004576:	d1ef      	bne.n	8004558 <loraif_send_request+0x8c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004578:	4b45      	ldr	r3, [pc, #276]	; (8004690 <loraif_send_request+0x1c4>)
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4a45      	ldr	r2, [pc, #276]	; (8004694 <loraif_send_request+0x1c8>)
 800457e:	4941      	ldr	r1, [pc, #260]	; (8004684 <loraif_send_request+0x1b8>)
 8004580:	4841      	ldr	r0, [pc, #260]	; (8004688 <loraif_send_request+0x1bc>)
 8004582:	23e5      	movs	r3, #229	; 0xe5
 8004584:	f006 fc12 	bl	800adac <LOG_DEBUG>
}
 8004588:	b00b      	add	sp, #44	; 0x2c
 800458a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			loraif_request_prop_t *wait_response = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 800458e:	2008      	movs	r0, #8
 8004590:	f007 fede 	bl	800c350 <malloc>
 8004594:	4606      	mov	r6, r0
 8004596:	9008      	str	r0, [sp, #32]
			if(wait_response == NULL){
 8004598:	2800      	cmp	r0, #0
 800459a:	d05d      	beq.n	8004658 <loraif_send_request+0x18c>
			wait_response->address = dev_address;
 800459c:	6034      	str	r4, [r6, #0]
			wait_response->tick_start = get_tick();
 800459e:	f003 ff8b 	bl	80084b8 <get_tick>
			uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 80045a2:	4d3d      	ldr	r5, [pc, #244]	; (8004698 <loraif_send_request+0x1cc>)
			wait_response->tick_start = get_tick();
 80045a4:	6070      	str	r0, [r6, #4]
			loraif_request_prop_t *in_queue = NULL;
 80045a6:	2400      	movs	r4, #0
			uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 80045a8:	6828      	ldr	r0, [r5, #0]
			loraif_request_prop_t *in_queue = NULL;
 80045aa:	9409      	str	r4, [sp, #36]	; 0x24
			uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 80045ac:	f7fe f882 	bl	80026b4 <uxQueueMessagesWaiting>
			for(uint8_t i=0; i<queue_len; i++){
 80045b0:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 80045b4:	d02d      	beq.n	8004612 <loraif_send_request+0x146>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045b6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8004690 <loraif_send_request+0x1c4>
 80045ba:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800469c <loraif_send_request+0x1d0>
 80045be:	4f31      	ldr	r7, [pc, #196]	; (8004684 <loraif_send_request+0x1b8>)
 80045c0:	e002      	b.n	80045c8 <loraif_send_request+0xfc>
			for(uint8_t i=0; i<queue_len; i++){
 80045c2:	b2e3      	uxtb	r3, r4
 80045c4:	429e      	cmp	r6, r3
 80045c6:	d924      	bls.n	8004612 <loraif_send_request+0x146>
				if(xQueueReceive(q_wait_response, &in_queue, 10) == pdTRUE && in_queue != NULL){
 80045c8:	6828      	ldr	r0, [r5, #0]
 80045ca:	220a      	movs	r2, #10
 80045cc:	a909      	add	r1, sp, #36	; 0x24
 80045ce:	f7fd fd07 	bl	8001fe0 <xQueueReceive>
 80045d2:	2801      	cmp	r0, #1
			for(uint8_t i=0; i<queue_len; i++){
 80045d4:	f104 0401 	add.w	r4, r4, #1
				if(xQueueReceive(q_wait_response, &in_queue, 10) == pdTRUE && in_queue != NULL){
 80045d8:	d1f3      	bne.n	80045c2 <loraif_send_request+0xf6>
 80045da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0f0      	beq.n	80045c2 <loraif_send_request+0xf6>
					if(in_queue->address == wait_response->address){
 80045e0:	9808      	ldr	r0, [sp, #32]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	6803      	ldr	r3, [r0, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d027      	beq.n	800463a <loraif_send_request+0x16e>
					if(xQueueSend(q_wait_response, &in_queue, 10) != pdTRUE){
 80045ea:	2300      	movs	r3, #0
 80045ec:	6828      	ldr	r0, [r5, #0]
 80045ee:	220a      	movs	r2, #10
 80045f0:	a909      	add	r1, sp, #36	; 0x24
 80045f2:	f7fd fa81 	bl	8001af8 <xQueueGenericSend>
 80045f6:	2801      	cmp	r0, #1
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045f8:	f04f 03da 	mov.w	r3, #218	; 0xda
					if(xQueueSend(q_wait_response, &in_queue, 10) != pdTRUE){
 80045fc:	d0e1      	beq.n	80045c2 <loraif_send_request+0xf6>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045fe:	4822      	ldr	r0, [pc, #136]	; (8004688 <loraif_send_request+0x1bc>)
 8004600:	f8cd 9000 	str.w	r9, [sp]
 8004604:	4642      	mov	r2, r8
 8004606:	4639      	mov	r1, r7
 8004608:	f006 fbd0 	bl	800adac <LOG_DEBUG>
			for(uint8_t i=0; i<queue_len; i++){
 800460c:	b2e3      	uxtb	r3, r4
 800460e:	429e      	cmp	r6, r3
 8004610:	d8da      	bhi.n	80045c8 <loraif_send_request+0xfc>
			if(wait_response != NULL){
 8004612:	9b08      	ldr	r3, [sp, #32]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0a6      	beq.n	8004566 <loraif_send_request+0x9a>
				if(xQueueSend(q_wait_response, &wait_response, 10) != pdTRUE){
 8004618:	6828      	ldr	r0, [r5, #0]
 800461a:	2300      	movs	r3, #0
 800461c:	220a      	movs	r2, #10
 800461e:	a908      	add	r1, sp, #32
 8004620:	f7fd fa6a 	bl	8001af8 <xQueueGenericSend>
 8004624:	2801      	cmp	r0, #1
 8004626:	d09e      	beq.n	8004566 <loraif_send_request+0x9a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <loraif_send_request+0x1c4>)
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	4a1b      	ldr	r2, [pc, #108]	; (800469c <loraif_send_request+0x1d0>)
 800462e:	4915      	ldr	r1, [pc, #84]	; (8004684 <loraif_send_request+0x1b8>)
 8004630:	4815      	ldr	r0, [pc, #84]	; (8004688 <loraif_send_request+0x1bc>)
 8004632:	23e0      	movs	r3, #224	; 0xe0
 8004634:	f006 fbba 	bl	800adac <LOG_DEBUG>
}
 8004638:	e795      	b.n	8004566 <loraif_send_request+0x9a>
						if(wait_response != NULL) free(wait_response);
 800463a:	f007 fe91 	bl	800c360 <free>
						wait_response = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	9308      	str	r3, [sp, #32]
 8004642:	e7d2      	b.n	80045ea <loraif_send_request+0x11e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004644:	4b0d      	ldr	r3, [pc, #52]	; (800467c <loraif_send_request+0x1b0>)
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <loraif_send_request+0x1d4>)
 800464a:	490e      	ldr	r1, [pc, #56]	; (8004684 <loraif_send_request+0x1b8>)
 800464c:	480e      	ldr	r0, [pc, #56]	; (8004688 <loraif_send_request+0x1bc>)
 800464e:	f240 13e3 	movw	r3, #483	; 0x1e3
 8004652:	f006 fbab 	bl	800adac <LOG_DEBUG>
	if(dev != NULL && dev->name != NULL){
 8004656:	e77b      	b.n	8004550 <loraif_send_request+0x84>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004658:	4b0d      	ldr	r3, [pc, #52]	; (8004690 <loraif_send_request+0x1c4>)
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	4a11      	ldr	r2, [pc, #68]	; (80046a4 <loraif_send_request+0x1d8>)
 800465e:	4909      	ldr	r1, [pc, #36]	; (8004684 <loraif_send_request+0x1b8>)
 8004660:	4809      	ldr	r0, [pc, #36]	; (8004688 <loraif_send_request+0x1bc>)
 8004662:	23cc      	movs	r3, #204	; 0xcc
 8004664:	f006 fba2 	bl	800adac <LOG_DEBUG>
			wait_response->address = dev_address;
 8004668:	9e08      	ldr	r6, [sp, #32]
}
 800466a:	e797      	b.n	800459c <loraif_send_request+0xd0>
 800466c:	2000000c 	.word	0x2000000c
 8004670:	08010d7c 	.word	0x08010d7c
 8004674:	08010db0 	.word	0x08010db0
 8004678:	2000b26c 	.word	0x2000b26c
 800467c:	08010e08 	.word	0x08010e08
 8004680:	08010e88 	.word	0x08010e88
 8004684:	08010d3c 	.word	0x08010d3c
 8004688:	08010d58 	.word	0x08010d58
 800468c:	2000b27c 	.word	0x2000b27c
 8004690:	08010e38 	.word	0x08010e38
 8004694:	08010e6c 	.word	0x08010e6c
 8004698:	2000b290 	.word	0x2000b290
 800469c:	08010e4c 	.word	0x08010e4c
 80046a0:	08010df4 	.word	0x08010df4
 80046a4:	08010e20 	.word	0x08010e20

080046a8 <loraif_receive_process>:
void loraif_receive_process(void *param){
 80046a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046ac:	b08d      	sub	sp, #52	; 0x34
	if(xQueueReceive(*queue, &rx_full, 10)){
 80046ae:	6800      	ldr	r0, [r0, #0]
 80046b0:	220a      	movs	r2, #10
 80046b2:	a902      	add	r1, sp, #8
 80046b4:	f7fd fc94 	bl	8001fe0 <xQueueReceive>
 80046b8:	b910      	cbnz	r0, 80046c0 <loraif_receive_process+0x18>
}
 80046ba:	b00d      	add	sp, #52	; 0x34
 80046bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt_json_t json;
 80046c0:	2300      	movs	r3, #0
		pkt_t pkt;
 80046c2:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 80046c4:	9802      	ldr	r0, [sp, #8]
		pkt_json_t json;
 80046c6:	9309      	str	r3, [sp, #36]	; 0x24
		pkt_t pkt;
 80046c8:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 80046ca:	a906      	add	r1, sp, #24
		pkt_t pkt;
 80046cc:	e9cd 4506 	strd	r4, r5, [sp, #24]
		char *response_to_device = NULL;
 80046d0:	e9cd 3303 	strd	r3, r3, [sp, #12]
		pkt_json_t json;
 80046d4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80046d8:	930b      	str	r3, [sp, #44]	; 0x2c
		err = parse_packet(rx_full, &pkt);
 80046da:	f000 fc69 	bl	8004fb0 <parse_packet>
		if(err == PKT_ERR_OK){
 80046de:	4605      	mov	r5, r0
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d150      	bne.n	8004786 <loraif_receive_process+0xde>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 80046e4:	4991      	ldr	r1, [pc, #580]	; (800492c <loraif_receive_process+0x284>)
 80046e6:	9806      	ldr	r0, [sp, #24]
 80046e8:	2209      	movs	r2, #9
 80046ea:	f000 fcc1 	bl	8005070 <str_to_cmd>
 80046ee:	b2c6      	uxtb	r6, r0
			if(cmd == LORA_REQ_ADDRESS){
 80046f0:	2e01      	cmp	r6, #1
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 80046f2:	af09      	add	r7, sp, #36	; 0x24
			if(cmd == LORA_REQ_ADDRESS){
 80046f4:	d05f      	beq.n	80047b6 <loraif_receive_process+0x10e>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 80046f6:	4a8e      	ldr	r2, [pc, #568]	; (8004930 <loraif_receive_process+0x288>)
 80046f8:	9807      	ldr	r0, [sp, #28]
 80046fa:	4639      	mov	r1, r7
 80046fc:	f000 fb3a 	bl	8004d74 <json_get_object>
				addr = strtol(json.value, NULL, 16);
 8004700:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004702:	4604      	mov	r4, r0
				addr = strtol(json.value, NULL, 16);
 8004704:	4629      	mov	r1, r5
 8004706:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004708:	f009 fc8a 	bl	800e020 <strtol>
 800470c:	4680      	mov	r8, r0
				if(err == PKT_ERR_OK){
 800470e:	2c00      	cmp	r4, #0
 8004710:	f040 80c4 	bne.w	800489c <loraif_receive_process+0x1f4>
					if(cmd == LORA_ERR){
 8004714:	2e00      	cmp	r6, #0
 8004716:	d073      	beq.n	8004800 <loraif_receive_process+0x158>
					else if(cmd == LORA_UPDATE_ADDRESS){
 8004718:	2e02      	cmp	r6, #2
 800471a:	f000 80c6 	beq.w	80048aa <loraif_receive_process+0x202>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 800471e:	2e04      	cmp	r6, #4
 8004720:	4d84      	ldr	r5, [pc, #528]	; (8004934 <loraif_receive_process+0x28c>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004722:	f8df b218 	ldr.w	fp, [pc, #536]	; 800493c <loraif_receive_process+0x294>
 8004726:	f8df a258 	ldr.w	sl, [pc, #600]	; 8004980 <loraif_receive_process+0x2d8>
 800472a:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004944 <loraif_receive_process+0x29c>
						loraif_request_prop_t *require_resp_prop = NULL;
 800472e:	9405      	str	r4, [sp, #20]
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 8004730:	bf08      	it	eq
 8004732:	2603      	moveq	r6, #3
						for(uint8_t i=0; i<uxQueueMessagesWaiting(q_wait_response); i++){
 8004734:	6828      	ldr	r0, [r5, #0]
 8004736:	f7fd ffbd 	bl	80026b4 <uxQueueMessagesWaiting>
 800473a:	b2e3      	uxtb	r3, r4
 800473c:	4298      	cmp	r0, r3
							if(xQueueReceive(q_wait_response, &require_resp_prop, 10) == pdTRUE && require_resp_prop != NULL){
 800473e:	f04f 020a 	mov.w	r2, #10
 8004742:	a905      	add	r1, sp, #20
						for(uint8_t i=0; i<uxQueueMessagesWaiting(q_wait_response); i++){
 8004744:	d947      	bls.n	80047d6 <loraif_receive_process+0x12e>
							if(xQueueReceive(q_wait_response, &require_resp_prop, 10) == pdTRUE && require_resp_prop != NULL){
 8004746:	6828      	ldr	r0, [r5, #0]
 8004748:	f7fd fc4a 	bl	8001fe0 <xQueueReceive>
 800474c:	2801      	cmp	r0, #1
 800474e:	f104 0401 	add.w	r4, r4, #1
 8004752:	d1ef      	bne.n	8004734 <loraif_receive_process+0x8c>
 8004754:	9805      	ldr	r0, [sp, #20]
									if(xQueueSend(q_wait_response, &require_resp_prop, 10) != pdTRUE){
 8004756:	2300      	movs	r3, #0
 8004758:	a905      	add	r1, sp, #20
							if(xQueueReceive(q_wait_response, &require_resp_prop, 10) == pdTRUE && require_resp_prop != NULL){
 800475a:	2800      	cmp	r0, #0
 800475c:	d0ea      	beq.n	8004734 <loraif_receive_process+0x8c>
								if(require_resp_prop->address == addr){
 800475e:	6802      	ldr	r2, [r0, #0]
 8004760:	4542      	cmp	r2, r8
 8004762:	f000 80b5 	beq.w	80048d0 <loraif_receive_process+0x228>
									if(xQueueSend(q_wait_response, &require_resp_prop, 10) != pdTRUE){
 8004766:	6828      	ldr	r0, [r5, #0]
 8004768:	220a      	movs	r2, #10
 800476a:	f7fd f9c5 	bl	8001af8 <xQueueGenericSend>
 800476e:	2801      	cmp	r0, #1
 8004770:	d0e0      	beq.n	8004734 <loraif_receive_process+0x8c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004772:	4871      	ldr	r0, [pc, #452]	; (8004938 <loraif_receive_process+0x290>)
 8004774:	f8cd b000 	str.w	fp, [sp]
 8004778:	f240 134d 	movw	r3, #333	; 0x14d
 800477c:	4652      	mov	r2, sl
 800477e:	4649      	mov	r1, r9
 8004780:	f006 fb14 	bl	800adac <LOG_DEBUG>
						for(uint8_t i=0; i<uxQueueMessagesWaiting(q_wait_response); i++){
 8004784:	e7d6      	b.n	8004734 <loraif_receive_process+0x8c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004786:	4b6d      	ldr	r3, [pc, #436]	; (800493c <loraif_receive_process+0x294>)
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	4a6d      	ldr	r2, [pc, #436]	; (8004940 <loraif_receive_process+0x298>)
 800478c:	496d      	ldr	r1, [pc, #436]	; (8004944 <loraif_receive_process+0x29c>)
 800478e:	486a      	ldr	r0, [pc, #424]	; (8004938 <loraif_receive_process+0x290>)
 8004790:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8004794:	f006 fb0a 	bl	800adac <LOG_DEBUG>
 8004798:	af09      	add	r7, sp, #36	; 0x24
		json_release_object(&json);
 800479a:	4638      	mov	r0, r7
 800479c:	f000 fbf6 	bl	8004f8c <json_release_object>
		release_packet(&pkt);
 80047a0:	a806      	add	r0, sp, #24
 80047a2:	f000 fc55 	bl	8005050 <release_packet>
		if(rx_full != NULL) free(rx_full);
 80047a6:	9802      	ldr	r0, [sp, #8]
 80047a8:	2800      	cmp	r0, #0
 80047aa:	d086      	beq.n	80046ba <loraif_receive_process+0x12>
 80047ac:	f007 fdd8 	bl	800c360 <free>
}
 80047b0:	b00d      	add	sp, #52	; 0x34
 80047b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 80047b6:	4a64      	ldr	r2, [pc, #400]	; (8004948 <loraif_receive_process+0x2a0>)
 80047b8:	9807      	ldr	r0, [sp, #28]
 80047ba:	4639      	mov	r1, r7
 80047bc:	f000 fada 	bl	8004d74 <json_get_object>
				if(err == PKT_ERR_OK){
 80047c0:	b340      	cbz	r0, 8004814 <loraif_receive_process+0x16c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047c2:	4b5e      	ldr	r3, [pc, #376]	; (800493c <loraif_receive_process+0x294>)
 80047c4:	4a61      	ldr	r2, [pc, #388]	; (800494c <loraif_receive_process+0x2a4>)
 80047c6:	9300      	str	r3, [sp, #0]
		uint32_t addr = LORAIF_INVALID_ADDRESS;
 80047c8:	46a8      	mov	r8, r5
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047ca:	f44f 7392 	mov.w	r3, #292	; 0x124
 80047ce:	495d      	ldr	r1, [pc, #372]	; (8004944 <loraif_receive_process+0x29c>)
 80047d0:	4859      	ldr	r0, [pc, #356]	; (8004938 <loraif_receive_process+0x290>)
 80047d2:	f006 faeb 	bl	800adac <LOG_DEBUG>
				json_release_object(&json);
 80047d6:	4638      	mov	r0, r7
 80047d8:	f000 fbd8 	bl	8004f8c <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 80047dc:	9a07      	ldr	r2, [sp, #28]
 80047de:	495c      	ldr	r1, [pc, #368]	; (8004950 <loraif_receive_process+0x2a8>)
 80047e0:	a803      	add	r0, sp, #12
 80047e2:	f007 fd5d 	bl	800c2a0 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, addr, evt_data);
 80047e6:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <loraif_receive_process+0x2ac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	b11b      	cbz	r3, 80047f4 <loraif_receive_process+0x14c>
 80047ec:	9a03      	ldr	r2, [sp, #12]
 80047ee:	4641      	mov	r1, r8
 80047f0:	4630      	mov	r0, r6
 80047f2:	4798      	blx	r3
			if(evt_data != NULL) free(evt_data);
 80047f4:	9803      	ldr	r0, [sp, #12]
 80047f6:	2800      	cmp	r0, #0
 80047f8:	d0cf      	beq.n	800479a <loraif_receive_process+0xf2>
 80047fa:	f007 fdb1 	bl	800c360 <free>
 80047fe:	e7cc      	b.n	800479a <loraif_receive_process+0xf2>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004800:	4b4e      	ldr	r3, [pc, #312]	; (800493c <loraif_receive_process+0x294>)
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	4a54      	ldr	r2, [pc, #336]	; (8004958 <loraif_receive_process+0x2b0>)
 8004806:	494f      	ldr	r1, [pc, #316]	; (8004944 <loraif_receive_process+0x29c>)
 8004808:	484b      	ldr	r0, [pc, #300]	; (8004938 <loraif_receive_process+0x290>)
 800480a:	f240 1331 	movw	r3, #305	; 0x131
 800480e:	f006 facd 	bl	800adac <LOG_DEBUG>
						cmd = LORA_ERR;
 8004812:	e7e0      	b.n	80047d6 <loraif_receive_process+0x12e>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 8004814:	4601      	mov	r1, r0
 8004816:	2210      	movs	r2, #16
 8004818:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800481a:	4c50      	ldr	r4, [pc, #320]	; (800495c <loraif_receive_process+0x2b4>)
 800481c:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8004984 <loraif_receive_process+0x2dc>
 8004820:	f009 fbfe 	bl	800e020 <strtol>
 8004824:	4605      	mov	r5, r0
					rng_set_seed(rand_num);
 8004826:	f002 ffef 	bl	8007808 <rng_set_seed>
						addr_by_gw = rng_generate_random_number();
 800482a:	f002 fff3 	bl	8007814 <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 800482e:	f8d9 2000 	ldr.w	r2, [r9]
 8004832:	6020      	str	r0, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004834:	454a      	cmp	r2, r9
 8004836:	d006      	beq.n	8004846 <loraif_receive_process+0x19e>
        if ((*device)->address == num) {
 8004838:	6891      	ldr	r1, [r2, #8]
 800483a:	6809      	ldr	r1, [r1, #0]
 800483c:	4288      	cmp	r0, r1
 800483e:	d0f4      	beq.n	800482a <loraif_receive_process+0x182>
	_M_node = _M_node->_M_next;
 8004840:	6812      	ldr	r2, [r2, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004842:	454a      	cmp	r2, r9
 8004844:	d1f8      	bne.n	8004838 <loraif_receive_process+0x190>
					addr_by_gw &= 0x7FFFFFFFU;
 8004846:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					char *temp = NULL;
 800484a:	2000      	movs	r0, #0
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 800484c:	4944      	ldr	r1, [pc, #272]	; (8004960 <loraif_receive_process+0x2b8>)
					char *temp = NULL;
 800484e:	9005      	str	r0, [sp, #20]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 8004850:	462b      	mov	r3, r5
 8004852:	a805      	add	r0, sp, #20
					addr_by_gw &= 0x7FFFFFFFU;
 8004854:	6022      	str	r2, [r4, #0]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 8004856:	f007 fd23 	bl	800c2a0 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 800485a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800485e:	4640      	mov	r0, r8
 8004860:	f7fb fcd0 	bl	8000204 <strlen>
 8004864:	b281      	uxth	r1, r0
 8004866:	4640      	mov	r0, r8
 8004868:	f7ff fd40 	bl	80042ec <cal_crc16>
 800486c:	4680      	mov	r8, r0
					if(temp != NULL) free(temp);
 800486e:	9805      	ldr	r0, [sp, #20]
 8004870:	b108      	cbz	r0, 8004876 <loraif_receive_process+0x1ce>
 8004872:	f007 fd75 	bl	800c360 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,\"crc\":0x%04x}", (unsigned int)addr_by_gw, (unsigned int)rand_num, crc);
 8004876:	f8cd 8000 	str.w	r8, [sp]
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	4939      	ldr	r1, [pc, #228]	; (8004964 <loraif_receive_process+0x2bc>)
 800487e:	462b      	mov	r3, r5
 8004880:	a804      	add	r0, sp, #16
 8004882:	f007 fd0d 	bl	800c2a0 <asiprintf>
					if(xQueueSend(q_response, &response_to_device, 10) == pdFALSE){
 8004886:	4b38      	ldr	r3, [pc, #224]	; (8004968 <loraif_receive_process+0x2c0>)
 8004888:	a904      	add	r1, sp, #16
 800488a:	6818      	ldr	r0, [r3, #0]
 800488c:	220a      	movs	r2, #10
 800488e:	2300      	movs	r3, #0
 8004890:	f7fd f932 	bl	8001af8 <xQueueGenericSend>
 8004894:	b190      	cbz	r0, 80048bc <loraif_receive_process+0x214>
		uint32_t addr = LORAIF_INVALID_ADDRESS;
 8004896:	f04f 0800 	mov.w	r8, #0
 800489a:	e79f      	b.n	80047dc <loraif_receive_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <loraif_receive_process+0x294>)
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	4a32      	ldr	r2, [pc, #200]	; (800496c <loraif_receive_process+0x2c4>)
 80048a2:	f240 1361 	movw	r3, #353	; 0x161
					cmd = LORA_ERR;
 80048a6:	462e      	mov	r6, r5
 80048a8:	e791      	b.n	80047ce <loraif_receive_process+0x126>
						if(addr == addr_by_gw){
 80048aa:	4b2c      	ldr	r3, [pc, #176]	; (800495c <loraif_receive_process+0x2b4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4283      	cmp	r3, r0
 80048b0:	d191      	bne.n	80047d6 <loraif_receive_process+0x12e>
							set_response_ok(addr, cmd);
 80048b2:	4631      	mov	r1, r6
 80048b4:	f7ff fd36 	bl	8004324 <_ZL15set_response_okm12lora_event_t>
							cmd = LORA_ADD_DEVICE;
 80048b8:	2606      	movs	r6, #6
							goto event_handle;
 80048ba:	e78f      	b.n	80047dc <loraif_receive_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048bc:	4b1f      	ldr	r3, [pc, #124]	; (800493c <loraif_receive_process+0x294>)
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4a2b      	ldr	r2, [pc, #172]	; (8004970 <loraif_receive_process+0x2c8>)
 80048c2:	4920      	ldr	r1, [pc, #128]	; (8004944 <loraif_receive_process+0x29c>)
 80048c4:	481c      	ldr	r0, [pc, #112]	; (8004938 <loraif_receive_process+0x290>)
 80048c6:	f44f 738f 	mov.w	r3, #286	; 0x11e
 80048ca:	f006 fa6f 	bl	800adac <LOG_DEBUG>
}
 80048ce:	e7e2      	b.n	8004896 <loraif_receive_process+0x1ee>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80048d0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004984 <loraif_receive_process+0x2dc>
									free(require_resp_prop);
 80048d4:	f007 fd44 	bl	800c360 <free>
 80048d8:	f8d9 3000 	ldr.w	r3, [r9]
									require_resp_prop = NULL;
 80048dc:	2200      	movs	r2, #0
    if (loraif_device_list.empty()) {
 80048de:	454b      	cmp	r3, r9
									require_resp_prop = NULL;
 80048e0:	9205      	str	r2, [sp, #20]
    if (loraif_device_list.empty()) {
 80048e2:	d018      	beq.n	8004916 <loraif_receive_process+0x26e>
        if ((*device)->address == device_address) {
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	6811      	ldr	r1, [r2, #0]
 80048e8:	4588      	cmp	r8, r1
 80048ea:	d00d      	beq.n	8004908 <loraif_receive_process+0x260>
	_M_node = _M_node->_M_next;
 80048ec:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 80048ee:	454b      	cmp	r3, r9
 80048f0:	d1f8      	bne.n	80048e4 <loraif_receive_process+0x23c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048f2:	4b20      	ldr	r3, [pc, #128]	; (8004974 <loraif_receive_process+0x2cc>)
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	4a20      	ldr	r2, [pc, #128]	; (8004978 <loraif_receive_process+0x2d0>)
 80048f8:	4912      	ldr	r1, [pc, #72]	; (8004944 <loraif_receive_process+0x29c>)
 80048fa:	480f      	ldr	r0, [pc, #60]	; (8004938 <loraif_receive_process+0x290>)
 80048fc:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004900:	f006 fa54 	bl	800adac <LOG_DEBUG>
								cmd = LORA_ERR;
 8004904:	2600      	movs	r6, #0
 8004906:	e769      	b.n	80047dc <loraif_receive_process+0x134>
							err_dev->err_count = 0;
 8004908:	2300      	movs	r3, #0
 800490a:	7213      	strb	r3, [r2, #8]
							set_response_ok(addr, cmd);
 800490c:	4631      	mov	r1, r6
 800490e:	4640      	mov	r0, r8
 8004910:	f7ff fd08 	bl	8004324 <_ZL15set_response_okm12lora_event_t>
							goto event_handle;
 8004914:	e762      	b.n	80047dc <loraif_receive_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004916:	4b17      	ldr	r3, [pc, #92]	; (8004974 <loraif_receive_process+0x2cc>)
 8004918:	9300      	str	r3, [sp, #0]
								cmd = LORA_ERR;
 800491a:	4616      	mov	r6, r2
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800491c:	4909      	ldr	r1, [pc, #36]	; (8004944 <loraif_receive_process+0x29c>)
 800491e:	4a17      	ldr	r2, [pc, #92]	; (800497c <loraif_receive_process+0x2d4>)
 8004920:	4805      	ldr	r0, [pc, #20]	; (8004938 <loraif_receive_process+0x290>)
 8004922:	f240 13e3 	movw	r3, #483	; 0x1e3
 8004926:	f006 fa41 	bl	800adac <LOG_DEBUG>
							if(err_dev == NULL){
 800492a:	e757      	b.n	80047dc <loraif_receive_process+0x134>
 800492c:	2000000c 	.word	0x2000000c
 8004930:	08010f54 	.word	0x08010f54
 8004934:	2000b290 	.word	0x2000b290
 8004938:	08010d58 	.word	0x08010d58
 800493c:	08010f18 	.word	0x08010f18
 8004940:	08010f7c 	.word	0x08010f7c
 8004944:	08010d3c 	.word	0x08010d3c
 8004948:	08010eb4 	.word	0x08010eb4
 800494c:	08010f30 	.word	0x08010f30
 8004950:	08011944 	.word	0x08011944
 8004954:	2000b28c 	.word	0x2000b28c
 8004958:	08010f5c 	.word	0x08010f5c
 800495c:	2000b278 	.word	0x2000b278
 8004960:	08010f98 	.word	0x08010f98
 8004964:	08010eb8 	.word	0x08010eb8
 8004968:	2000b27c 	.word	0x2000b27c
 800496c:	08010f6c 	.word	0x08010f6c
 8004970:	08010ef4 	.word	0x08010ef4
 8004974:	08010e08 	.word	0x08010e08
 8004978:	08010e88 	.word	0x08010e88
 800497c:	08010df4 	.word	0x08010df4
 8004980:	08010e4c 	.word	0x08010e4c
 8004984:	2000b26c 	.word	0x2000b26c

08004988 <loraif_response_to_device>:
void loraif_response_to_device(void*){
 8004988:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 800498c:	4d2a      	ldr	r5, [pc, #168]	; (8004a38 <loraif_response_to_device+0xb0>)
 800498e:	4e2b      	ldr	r6, [pc, #172]	; (8004a3c <loraif_response_to_device+0xb4>)
 8004990:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8004a4c <loraif_response_to_device+0xc4>
 8004994:	4c2a      	ldr	r4, [pc, #168]	; (8004a40 <loraif_response_to_device+0xb8>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004996:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8004a50 <loraif_response_to_device+0xc8>
 800499a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004a54 <loraif_response_to_device+0xcc>
 800499e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8004a58 <loraif_response_to_device+0xd0>
void loraif_response_to_device(void*){
 80049a2:	b085      	sub	sp, #20
		if(xQueueReceive(q_response, &response, 10) && response != NULL){
 80049a4:	6828      	ldr	r0, [r5, #0]
 80049a6:	220a      	movs	r2, #10
 80049a8:	a903      	add	r1, sp, #12
 80049aa:	f7fd fb19 	bl	8001fe0 <xQueueReceive>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d0f8      	beq.n	80049a4 <loraif_response_to_device+0x1c>
 80049b2:	9f03      	ldr	r7, [sp, #12]
	if(xSemaphoreTake(s_lora_transfer, 10)){
 80049b4:	210a      	movs	r1, #10
		if(xQueueReceive(q_response, &response, 10) && response != NULL){
 80049b6:	2f00      	cmp	r7, #0
 80049b8:	d0f4      	beq.n	80049a4 <loraif_response_to_device+0x1c>
	if(xSemaphoreTake(s_lora_transfer, 10)){
 80049ba:	6830      	ldr	r0, [r6, #0]
 80049bc:	f7fd fc92 	bl	80022e4 <xQueueSemaphoreTake>
				if(xQueueSend(q_response, &response, 10) != pdTRUE){
 80049c0:	220a      	movs	r2, #10
 80049c2:	a903      	add	r1, sp, #12
	if(xSemaphoreTake(s_lora_transfer, 10)){
 80049c4:	4603      	mov	r3, r0
 80049c6:	b970      	cbnz	r0, 80049e6 <loraif_response_to_device+0x5e>
				if(xQueueSend(q_response, &response, 10) != pdTRUE){
 80049c8:	6828      	ldr	r0, [r5, #0]
 80049ca:	f7fd f895 	bl	8001af8 <xQueueGenericSend>
 80049ce:	2801      	cmp	r0, #1
 80049d0:	d0e8      	beq.n	80049a4 <loraif_response_to_device+0x1c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049d2:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <loraif_response_to_device+0xbc>)
 80049d4:	9200      	str	r2, [sp, #0]
 80049d6:	f44f 73c1 	mov.w	r3, #386	; 0x182
 80049da:	465a      	mov	r2, fp
 80049dc:	4651      	mov	r1, sl
 80049de:	4648      	mov	r0, r9
 80049e0:	f006 f9e4 	bl	800adac <LOG_DEBUG>
}
 80049e4:	e7de      	b.n	80049a4 <loraif_response_to_device+0x1c>
		loraif->setSyncWord(_send_syncword);
 80049e6:	f898 1000 	ldrb.w	r1, [r8]
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	f001 f9ea 	bl	8005dc4 <_ZN6sx127x11setSyncWordEh>
		loraif->beginPacket();
 80049f0:	2100      	movs	r1, #0
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	f000 fdfe 	bl	80055f4 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 80049f8:	4638      	mov	r0, r7
 80049fa:	f7fb fc03 	bl	8000204 <strlen>
 80049fe:	4639      	mov	r1, r7
 8004a00:	4602      	mov	r2, r0
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	f001 f826 	bl	8005a54 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 8004a08:	6820      	ldr	r0, [r4, #0]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	f000 ff32 	bl	8005874 <_ZN6sx127x9endPacketEb>
		loraif->setSyncWord(_recv_syncword);
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <loraif_response_to_device+0xc0>)
 8004a12:	6820      	ldr	r0, [r4, #0]
 8004a14:	7819      	ldrb	r1, [r3, #0]
 8004a16:	f001 f9d5 	bl	8005dc4 <_ZN6sx127x11setSyncWordEh>
		loraif->receive_it(0);
 8004a1a:	6820      	ldr	r0, [r4, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f001 f8ed 	bl	8005bfc <_ZN6sx127x10receive_itEh>
		xSemaphoreGive(s_lora_transfer);
 8004a22:	2300      	movs	r3, #0
 8004a24:	6830      	ldr	r0, [r6, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	4619      	mov	r1, r3
 8004a2a:	f7fd f865 	bl	8001af8 <xQueueGenericSend>
				free(response);
 8004a2e:	9803      	ldr	r0, [sp, #12]
 8004a30:	f007 fc96 	bl	800c360 <free>
 8004a34:	e7b6      	b.n	80049a4 <loraif_response_to_device+0x1c>
 8004a36:	bf00      	nop
 8004a38:	2000b27c 	.word	0x2000b27c
 8004a3c:	2000b294 	.word	0x2000b294
 8004a40:	2000b298 	.word	0x2000b298
 8004a44:	08010fc8 	.word	0x08010fc8
 8004a48:	2000b288 	.word	0x2000b288
 8004a4c:	2000b289 	.word	0x2000b289
 8004a50:	08010d20 	.word	0x08010d20
 8004a54:	08010d3c 	.word	0x08010d3c
 8004a58:	08010d58 	.word	0x08010d58

08004a5c <loraif_check_device_timeout>:
void loraif_check_device_timeout(void){
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004a60:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8004bbc <loraif_check_device_timeout+0x160>
void loraif_check_device_timeout(void){
 8004a64:	b085      	sub	sp, #20
	uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004a66:	f8d8 0000 	ldr.w	r0, [r8]
	loraif_request_prop_t *wait_response = NULL;
 8004a6a:	2400      	movs	r4, #0
 8004a6c:	9402      	str	r4, [sp, #8]
	uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004a6e:	f7fd fe21 	bl	80026b4 <uxQueueMessagesWaiting>
	for(uint8_t i=0; i<queue_len; i++){
 8004a72:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8004a76:	d038      	beq.n	8004aea <loraif_check_device_timeout+0x8e>
			if(dt >= resp_timeout){
 8004a78:	f8df 9144 	ldr.w	r9, [pc, #324]	; 8004bc0 <loraif_check_device_timeout+0x164>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a7c:	f8df b144 	ldr.w	fp, [pc, #324]	; 8004bc4 <loraif_check_device_timeout+0x168>
 8004a80:	f8df a144 	ldr.w	sl, [pc, #324]	; 8004bc8 <loraif_check_device_timeout+0x16c>
 8004a84:	e003      	b.n	8004a8e <loraif_check_device_timeout+0x32>
	for(uint8_t i=0; i<queue_len; i++){
 8004a86:	3401      	adds	r4, #1
 8004a88:	b2e3      	uxtb	r3, r4
 8004a8a:	429e      	cmp	r6, r3
 8004a8c:	d92d      	bls.n	8004aea <loraif_check_device_timeout+0x8e>
		if(xQueueReceive(q_wait_response, &wait_response, 10) == pdTRUE && wait_response != NULL){
 8004a8e:	f8d8 0000 	ldr.w	r0, [r8]
 8004a92:	220a      	movs	r2, #10
 8004a94:	a902      	add	r1, sp, #8
 8004a96:	f7fd faa3 	bl	8001fe0 <xQueueReceive>
 8004a9a:	2801      	cmp	r0, #1
 8004a9c:	d1f3      	bne.n	8004a86 <loraif_check_device_timeout+0x2a>
 8004a9e:	9b02      	ldr	r3, [sp, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d0f0      	beq.n	8004a86 <loraif_check_device_timeout+0x2a>
			uint32_t dt = 0, tick_now = get_tick();
 8004aa4:	f003 fd08 	bl	80084b8 <get_tick>
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004aa8:	9b02      	ldr	r3, [sp, #8]
			if(dt >= resp_timeout){
 8004aaa:	f8d9 2000 	ldr.w	r2, [r9]
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004aae:	685f      	ldr	r7, [r3, #4]
 8004ab0:	4287      	cmp	r7, r0
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004ab2:	bf8a      	itet	hi
 8004ab4:	43ff      	mvnhi	r7, r7
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004ab6:	1bc7      	subls	r7, r0, r7
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004ab8:	183f      	addhi	r7, r7, r0
			if(dt >= resp_timeout){
 8004aba:	42ba      	cmp	r2, r7
 8004abc:	d818      	bhi.n	8004af0 <loraif_check_device_timeout+0x94>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004abe:	4835      	ldr	r0, [pc, #212]	; (8004b94 <loraif_check_device_timeout+0x138>)
				loraif_dev_t *err_dev = loraif_select_device(wait_response->address);
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	6803      	ldr	r3, [r0, #0]
    if (loraif_device_list.empty()) {
 8004ac4:	4283      	cmp	r3, r0
 8004ac6:	d05a      	beq.n	8004b7e <loraif_check_device_timeout+0x122>
        if ((*device)->address == device_address) {
 8004ac8:	689d      	ldr	r5, [r3, #8]
 8004aca:	6829      	ldr	r1, [r5, #0]
 8004acc:	428a      	cmp	r2, r1
 8004ace:	d022      	beq.n	8004b16 <loraif_check_device_timeout+0xba>
	_M_node = _M_node->_M_next;
 8004ad0:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004ad2:	4283      	cmp	r3, r0
 8004ad4:	d1f8      	bne.n	8004ac8 <loraif_check_device_timeout+0x6c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ad6:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <loraif_check_device_timeout+0x13c>)
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	4a30      	ldr	r2, [pc, #192]	; (8004b9c <loraif_check_device_timeout+0x140>)
 8004adc:	4930      	ldr	r1, [pc, #192]	; (8004ba0 <loraif_check_device_timeout+0x144>)
 8004ade:	4831      	ldr	r0, [pc, #196]	; (8004ba4 <loraif_check_device_timeout+0x148>)
 8004ae0:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8004ae4:	f006 f962 	bl	800adac <LOG_DEBUG>
				if(err_dev != NULL){
 8004ae8:	e7cd      	b.n	8004a86 <loraif_check_device_timeout+0x2a>
}
 8004aea:	b005      	add	sp, #20
 8004aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(xQueueSend(q_wait_response, &wait_response, 10) != pdTRUE){
 8004af0:	f8d8 0000 	ldr.w	r0, [r8]
 8004af4:	2300      	movs	r3, #0
 8004af6:	220a      	movs	r2, #10
 8004af8:	a902      	add	r1, sp, #8
 8004afa:	f7fc fffd 	bl	8001af8 <xQueueGenericSend>
 8004afe:	2801      	cmp	r0, #1
 8004b00:	d0c1      	beq.n	8004a86 <loraif_check_device_timeout+0x2a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b02:	4927      	ldr	r1, [pc, #156]	; (8004ba0 <loraif_check_device_timeout+0x144>)
 8004b04:	4827      	ldr	r0, [pc, #156]	; (8004ba4 <loraif_check_device_timeout+0x148>)
 8004b06:	f8cd b000 	str.w	fp, [sp]
 8004b0a:	f240 13a9 	movw	r3, #425	; 0x1a9
 8004b0e:	4652      	mov	r2, sl
 8004b10:	f006 f94c 	bl	800adac <LOG_DEBUG>
}
 8004b14:	e7b7      	b.n	8004a86 <loraif_check_device_timeout+0x2a>
					char *evt_data = NULL;
 8004b16:	2000      	movs	r0, #0
					asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004b18:	686b      	ldr	r3, [r5, #4]
 8004b1a:	4923      	ldr	r1, [pc, #140]	; (8004ba8 <loraif_check_device_timeout+0x14c>)
					char *evt_data = NULL;
 8004b1c:	9003      	str	r0, [sp, #12]
					asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004b1e:	a803      	add	r0, sp, #12
 8004b20:	f007 fbbe 	bl	800c2a0 <asiprintf>
					err_dev->err_count++;
 8004b24:	7a29      	ldrb	r1, [r5, #8]
					LOG_RET(TAG, "Device 0x%08x time = %lu, %d time not response.", (unsigned int)wait_response->address, dt, err_dev->err_count);
 8004b26:	9a02      	ldr	r2, [sp, #8]
 8004b28:	481e      	ldr	r0, [pc, #120]	; (8004ba4 <loraif_check_device_timeout+0x148>)
					err_dev->err_count++;
 8004b2a:	3101      	adds	r1, #1
 8004b2c:	b2c9      	uxtb	r1, r1
 8004b2e:	7229      	strb	r1, [r5, #8]
					LOG_RET(TAG, "Device 0x%08x time = %lu, %d time not response.", (unsigned int)wait_response->address, dt, err_dev->err_count);
 8004b30:	463b      	mov	r3, r7
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004b32:	4f1e      	ldr	r7, [pc, #120]	; (8004bac <loraif_check_device_timeout+0x150>)
					LOG_RET(TAG, "Device 0x%08x time = %lu, %d time not response.", (unsigned int)wait_response->address, dt, err_dev->err_count);
 8004b34:	6812      	ldr	r2, [r2, #0]
 8004b36:	9100      	str	r1, [sp, #0]
 8004b38:	491d      	ldr	r1, [pc, #116]	; (8004bb0 <loraif_check_device_timeout+0x154>)
 8004b3a:	f006 f9b3 	bl	800aea4 <LOG_RET>
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	b14b      	cbz	r3, 8004b56 <loraif_check_device_timeout+0xfa>
 8004b42:	9a02      	ldr	r2, [sp, #8]
 8004b44:	2008      	movs	r0, #8
 8004b46:	6811      	ldr	r1, [r2, #0]
 8004b48:	9a03      	ldr	r2, [sp, #12]
 8004b4a:	4798      	blx	r3
					if(err_dev->err_count >= max_not_resp){
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <loraif_check_device_timeout+0x158>)
 8004b4e:	7a2a      	ldrb	r2, [r5, #8]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d20a      	bcs.n	8004b6c <loraif_check_device_timeout+0x110>
					if(evt_data != NULL) free(evt_data);
 8004b56:	9803      	ldr	r0, [sp, #12]
 8004b58:	b108      	cbz	r0, 8004b5e <loraif_check_device_timeout+0x102>
 8004b5a:	f007 fc01 	bl	800c360 <free>
					if(wait_response != NULL) free(wait_response);
 8004b5e:	9802      	ldr	r0, [sp, #8]
 8004b60:	b108      	cbz	r0, 8004b66 <loraif_check_device_timeout+0x10a>
 8004b62:	f007 fbfd 	bl	800c360 <free>
					wait_response = NULL;
 8004b66:	2300      	movs	r3, #0
 8004b68:	9302      	str	r3, [sp, #8]
 8004b6a:	e78c      	b.n	8004a86 <loraif_check_device_timeout+0x2a>
						if(fpeventhandler != NULL) fpeventhandler(LORA_REMOVE_DEVICE, wait_response->address, evt_data);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f1      	beq.n	8004b56 <loraif_check_device_timeout+0xfa>
 8004b72:	9a02      	ldr	r2, [sp, #8]
 8004b74:	2007      	movs	r0, #7
 8004b76:	6811      	ldr	r1, [r2, #0]
 8004b78:	9a03      	ldr	r2, [sp, #12]
 8004b7a:	4798      	blx	r3
 8004b7c:	e7eb      	b.n	8004b56 <loraif_check_device_timeout+0xfa>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b7e:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <loraif_check_device_timeout+0x13c>)
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <loraif_check_device_timeout+0x15c>)
 8004b84:	4906      	ldr	r1, [pc, #24]	; (8004ba0 <loraif_check_device_timeout+0x144>)
 8004b86:	4807      	ldr	r0, [pc, #28]	; (8004ba4 <loraif_check_device_timeout+0x148>)
 8004b88:	f240 13e3 	movw	r3, #483	; 0x1e3
 8004b8c:	f006 f90e 	bl	800adac <LOG_DEBUG>
				if(err_dev != NULL){
 8004b90:	e779      	b.n	8004a86 <loraif_check_device_timeout+0x2a>
 8004b92:	bf00      	nop
 8004b94:	2000b26c 	.word	0x2000b26c
 8004b98:	08010e08 	.word	0x08010e08
 8004b9c:	08010e88 	.word	0x08010e88
 8004ba0:	08010d3c 	.word	0x08010d3c
 8004ba4:	08010d58 	.word	0x08010d58
 8004ba8:	08011000 	.word	0x08011000
 8004bac:	2000b28c 	.word	0x2000b28c
 8004bb0:	0801101c 	.word	0x0801101c
 8004bb4:	2000b280 	.word	0x2000b280
 8004bb8:	08010df4 	.word	0x08010df4
 8004bbc:	2000b290 	.word	0x2000b290
 8004bc0:	2000b284 	.word	0x2000b284
 8004bc4:	08010fe4 	.word	0x08010fe4
 8004bc8:	08010e4c 	.word	0x08010e4c

08004bcc <loraif_add_device>:
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004bcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004bd0:	b087      	sub	sp, #28
	pkt_json_t json;
 8004bd2:	2500      	movs	r5, #0
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004bd4:	4607      	mov	r7, r0
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004bd6:	2010      	movs	r0, #16
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004bd8:	4688      	mov	r8, r1
 8004bda:	4616      	mov	r6, r2
	pkt_json_t json;
 8004bdc:	9503      	str	r5, [sp, #12]
 8004bde:	f88d 5010 	strb.w	r5, [sp, #16]
 8004be2:	9505      	str	r5, [sp, #20]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004be4:	f007 fbb4 	bl	800c350 <malloc>
 8004be8:	4604      	mov	r4, r0
	err = json_get_object(jdata, &json, (char *)"name");
 8004bea:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <loraif_add_device+0x94>)
    newdev->address = device_address;
 8004bec:	6027      	str	r7, [r4, #0]
	err = json_get_object(jdata, &json, (char *)"name");
 8004bee:	4640      	mov	r0, r8
    newdev->err_count = 0;
 8004bf0:	7225      	strb	r5, [r4, #8]
    newdev->data = dev_data;
 8004bf2:	60e6      	str	r6, [r4, #12]
	err = json_get_object(jdata, &json, (char *)"name");
 8004bf4:	a903      	add	r1, sp, #12
 8004bf6:	f000 f8bd 	bl	8004d74 <json_get_object>
	if(err == PKT_ERR_OK)
 8004bfa:	b330      	cbz	r0, 8004c4a <loraif_add_device+0x7e>
	json_release_object(&json);
 8004bfc:	a803      	add	r0, sp, #12
 8004bfe:	f000 f9c5 	bl	8004f8c <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004c02:	200c      	movs	r0, #12
 8004c04:	f007 fada 	bl	800c1bc <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8004c08:	4f16      	ldr	r7, [pc, #88]	; (8004c64 <loraif_add_device+0x98>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004c0a:	6084      	str	r4, [r0, #8]
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	f007 fae6 	bl	800c1de <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c12:	68bb      	ldr	r3, [r7, #8]
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004c14:	683d      	ldr	r5, [r7, #0]
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c16:	3301      	adds	r3, #1
	if(loraif_device_list.empty()){
 8004c18:	42bd      	cmp	r5, r7
 8004c1a:	60bb      	str	r3, [r7, #8]
 8004c1c:	d01b      	beq.n	8004c56 <loraif_add_device+0x8a>
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c1e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8004c74 <loraif_add_device+0xa8>
 8004c22:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8004c70 <loraif_add_device+0xa4>
	uint8_t i = 1;
 8004c26:	2401      	movs	r4, #1
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c28:	68ae      	ldr	r6, [r5, #8]
 8004c2a:	e9d6 3100 	ldrd	r3, r1, [r6]
 8004c2e:	4622      	mov	r2, r4
 8004c30:	9100      	str	r1, [sp, #0]
 8004c32:	4640      	mov	r0, r8
 8004c34:	4649      	mov	r1, r9
 8004c36:	f006 f83d 	bl	800acb4 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004c3a:	682d      	ldr	r5, [r5, #0]
 8004c3c:	3401      	adds	r4, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c3e:	42bd      	cmp	r5, r7
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c40:	b2e4      	uxtb	r4, r4
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c42:	d1f1      	bne.n	8004c28 <loraif_add_device+0x5c>
}
 8004c44:	b007      	add	sp, #28
 8004c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		asprintf(&newdev->name, "%s", json.value);
 8004c4a:	9a05      	ldr	r2, [sp, #20]
 8004c4c:	4906      	ldr	r1, [pc, #24]	; (8004c68 <loraif_add_device+0x9c>)
 8004c4e:	1d20      	adds	r0, r4, #4
 8004c50:	f007 fb26 	bl	800c2a0 <asiprintf>
 8004c54:	e7d2      	b.n	8004bfc <loraif_add_device+0x30>
		LOG_WARN(TAG, "Device list empty, notthing to show.");
 8004c56:	4905      	ldr	r1, [pc, #20]	; (8004c6c <loraif_add_device+0xa0>)
 8004c58:	4805      	ldr	r0, [pc, #20]	; (8004c70 <loraif_add_device+0xa4>)
 8004c5a:	f006 f82b 	bl	800acb4 <LOG_WARN>
		return;
 8004c5e:	e7f1      	b.n	8004c44 <loraif_add_device+0x78>
 8004c60:	0801104c 	.word	0x0801104c
 8004c64:	2000b26c 	.word	0x2000b26c
 8004c68:	08011944 	.word	0x08011944
 8004c6c:	08011054 	.word	0x08011054
 8004c70:	08010d58 	.word	0x08010d58
 8004c74:	0801107c 	.word	0x0801107c

08004c78 <loraif_remove_device>:
void loraif_remove_device(uint32_t device_address){
 8004c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004c7c:	4e29      	ldr	r6, [pc, #164]	; (8004d24 <loraif_remove_device+0xac>)
 8004c7e:	6834      	ldr	r4, [r6, #0]
    if (loraif_device_list.empty()) {
 8004c80:	42b4      	cmp	r4, r6
void loraif_remove_device(uint32_t device_address){
 8004c82:	b083      	sub	sp, #12
    if (loraif_device_list.empty()) {
 8004c84:	d03d      	beq.n	8004d02 <loraif_remove_device+0x8a>
        if ((*device)->address == device_address) {
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4282      	cmp	r2, r0
 8004c8c:	d00e      	beq.n	8004cac <loraif_remove_device+0x34>
	_M_node = _M_node->_M_next;
 8004c8e:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 8004c90:	42b4      	cmp	r4, r6
 8004c92:	d1f8      	bne.n	8004c86 <loraif_remove_device+0xe>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <loraif_remove_device+0xb0>)
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	4a24      	ldr	r2, [pc, #144]	; (8004d2c <loraif_remove_device+0xb4>)
 8004c9a:	4925      	ldr	r1, [pc, #148]	; (8004d30 <loraif_remove_device+0xb8>)
 8004c9c:	4825      	ldr	r0, [pc, #148]	; (8004d34 <loraif_remove_device+0xbc>)
 8004c9e:	f240 13d5 	movw	r3, #469	; 0x1d5
 8004ca2:	f006 f883 	bl	800adac <LOG_DEBUG>
}
 8004ca6:	b003      	add	sp, #12
 8004ca8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((*device)->name != NULL) free((*device)->name);
 8004cac:	6858      	ldr	r0, [r3, #4]
 8004cae:	b108      	cbz	r0, 8004cb4 <loraif_remove_device+0x3c>
 8004cb0:	f007 fb56 	bl	800c360 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004cb4:	68b3      	ldr	r3, [r6, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004cb6:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	60b3      	str	r3, [r6, #8]
	__position._M_node->_M_unhook();
 8004cbc:	f007 fa96 	bl	800c1ec <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	210c      	movs	r1, #12
 8004cc4:	f007 fa78 	bl	800c1b8 <_ZdlPvj>
    if((*device) != NULL) free((*device));
 8004cc8:	68a0      	ldr	r0, [r4, #8]
 8004cca:	b108      	cbz	r0, 8004cd0 <loraif_remove_device+0x58>
 8004ccc:	f007 fb48 	bl	800c360 <free>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004cd0:	6835      	ldr	r5, [r6, #0]
	if(loraif_device_list.empty()){
 8004cd2:	42b5      	cmp	r5, r6
 8004cd4:	d01f      	beq.n	8004d16 <loraif_remove_device+0x9e>
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004cd6:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8004d40 <loraif_remove_device+0xc8>
 8004cda:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004d34 <loraif_remove_device+0xbc>
	uint8_t i = 1;
 8004cde:	2401      	movs	r4, #1
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004ce0:	68af      	ldr	r7, [r5, #8]
 8004ce2:	e9d7 3100 	ldrd	r3, r1, [r7]
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	9100      	str	r1, [sp, #0]
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f005 ffe1 	bl	800acb4 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004cf2:	682d      	ldr	r5, [r5, #0]
 8004cf4:	3401      	adds	r4, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004cf6:	42b5      	cmp	r5, r6
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004cf8:	b2e4      	uxtb	r4, r4
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004cfa:	d1f1      	bne.n	8004ce0 <loraif_remove_device+0x68>
}
 8004cfc:	b003      	add	sp, #12
 8004cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <loraif_remove_device+0xb0>)
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <loraif_remove_device+0xc0>)
 8004d08:	4909      	ldr	r1, [pc, #36]	; (8004d30 <loraif_remove_device+0xb8>)
 8004d0a:	480a      	ldr	r0, [pc, #40]	; (8004d34 <loraif_remove_device+0xbc>)
 8004d0c:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
 8004d10:	f006 f84c 	bl	800adac <LOG_DEBUG>
        return;
 8004d14:	e7c7      	b.n	8004ca6 <loraif_remove_device+0x2e>
		LOG_WARN(TAG, "Device list empty, notthing to show.");
 8004d16:	4909      	ldr	r1, [pc, #36]	; (8004d3c <loraif_remove_device+0xc4>)
 8004d18:	4806      	ldr	r0, [pc, #24]	; (8004d34 <loraif_remove_device+0xbc>)
}
 8004d1a:	b003      	add	sp, #12
 8004d1c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		LOG_WARN(TAG, "Device list empty, notthing to show.");
 8004d20:	f005 bfc8 	b.w	800acb4 <LOG_WARN>
 8004d24:	2000b26c 	.word	0x2000b26c
 8004d28:	080110a4 	.word	0x080110a4
 8004d2c:	08010e88 	.word	0x08010e88
 8004d30:	08010d3c 	.word	0x08010d3c
 8004d34:	08010d58 	.word	0x08010d58
 8004d38:	08010df4 	.word	0x08010df4
 8004d3c:	08011054 	.word	0x08011054
 8004d40:	0801107c 	.word	0x0801107c

08004d44 <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 8004d44:	4b02      	ldr	r3, [pc, #8]	; (8004d50 <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 8004d46:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8004d48:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8004d4c:	609a      	str	r2, [r3, #8]
        return NULL;
    }

    return (*device);

}
 8004d4e:	4770      	bx	lr
 8004d50:	2000b26c 	.word	0x2000b26c

08004d54 <_GLOBAL__sub_D_loraif>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004d56:	4d06      	ldr	r5, [pc, #24]	; (8004d70 <_GLOBAL__sub_D_loraif+0x1c>)
 8004d58:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 8004d5a:	42ac      	cmp	r4, r5
 8004d5c:	d006      	beq.n	8004d6c <_GLOBAL__sub_D_loraif+0x18>
 8004d5e:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8004d60:	6824      	ldr	r4, [r4, #0]
 8004d62:	210c      	movs	r1, #12
 8004d64:	f007 fa28 	bl	800c1b8 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8004d68:	42ac      	cmp	r4, r5
 8004d6a:	d1f8      	bne.n	8004d5e <_GLOBAL__sub_D_loraif+0xa>
 8004d6c:	bd38      	pop	{r3, r4, r5, pc}
 8004d6e:	bf00      	nop
 8004d70:	2000b26c 	.word	0x2000b26c

08004d74 <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 8004d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d78:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d079      	beq.n	8004e72 <json_get_object+0xfe>
 8004d7e:	4615      	mov	r5, r2
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	d076      	beq.n	8004e72 <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004d84:	7803      	ldrb	r3, [r0, #0]
 8004d86:	2b7b      	cmp	r3, #123	; 0x7b
 8004d88:	4604      	mov	r4, r0
 8004d8a:	d166      	bne.n	8004e5a <json_get_object+0xe6>
 8004d8c:	460e      	mov	r6, r1
	int src_len = strlen(src);
 8004d8e:	f7fb fa39 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004d92:	1823      	adds	r3, r4, r0
	int src_len = strlen(src);
 8004d94:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004d96:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004d9a:	2b7d      	cmp	r3, #125	; 0x7d
 8004d9c:	d15d      	bne.n	8004e5a <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 8004d9e:	462a      	mov	r2, r5
 8004da0:	4972      	ldr	r1, [pc, #456]	; (8004f6c <json_get_object+0x1f8>)
 8004da2:	a805      	add	r0, sp, #20
 8004da4:	f007 fa7c 	bl	800c2a0 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8004da8:	9905      	ldr	r1, [sp, #20]
 8004daa:	9103      	str	r1, [sp, #12]
 8004dac:	4620      	mov	r0, r4
 8004dae:	f008 fa71 	bl	800d294 <strstr>
	free(tmp);
 8004db2:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 8004db4:	4605      	mov	r5, r0
	free(tmp);
 8004db6:	4608      	mov	r0, r1
 8004db8:	f007 fad2 	bl	800c360 <free>
	if(pkstart == NULL){
 8004dbc:	2d00      	cmp	r5, #0
 8004dbe:	f000 8098 	beq.w	8004ef2 <json_get_object+0x17e>
//		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 8004dc2:	f105 0901 	add.w	r9, r5, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004dc6:	4648      	mov	r0, r9
 8004dc8:	f7fb fa1c 	bl	8000204 <strlen>
 8004dcc:	462b      	mov	r3, r5
 8004dce:	2500      	movs	r5, #0
 8004dd0:	e004      	b.n	8004ddc <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 8004dd2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004dd6:	2a22      	cmp	r2, #34	; 0x22
 8004dd8:	d002      	beq.n	8004de0 <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004dda:	3501      	adds	r5, #1
 8004ddc:	42a8      	cmp	r0, r5
 8004dde:	dcf8      	bgt.n	8004dd2 <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 8004de0:	1c68      	adds	r0, r5, #1
 8004de2:	f007 fab5 	bl	800c350 <malloc>
 8004de6:	4680      	mov	r8, r0
 8004de8:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f000 80aa 	beq.w	8004f44 <json_get_object+0x1d0>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 8004df0:	462a      	mov	r2, r5
 8004df2:	4649      	mov	r1, r9
 8004df4:	f007 fabc 	bl	800c370 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004df8:	1cab      	adds	r3, r5, #2
	dest->key[key_len] = '\0';
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f808 2005 	strb.w	r2, [r8, r5]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004e00:	f819 2003 	ldrb.w	r2, [r9, r3]
 8004e04:	2a7b      	cmp	r2, #123	; 0x7b
 8004e06:	eb09 0803 	add.w	r8, r9, r3
 8004e0a:	d03e      	beq.n	8004e8a <json_get_object+0x116>
		dest->leaf = true;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 8004e10:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004e14:	2b22      	cmp	r3, #34	; 0x22
 8004e16:	d06e      	beq.n	8004ef6 <json_get_object+0x182>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004e18:	4640      	mov	r0, r8
 8004e1a:	f7fb f9f3 	bl	8000204 <strlen>
 8004e1e:	2400      	movs	r4, #0
 8004e20:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004e24:	e006      	b.n	8004e34 <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 8004e26:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004e2a:	2b7d      	cmp	r3, #125	; 0x7d
 8004e2c:	d004      	beq.n	8004e38 <json_get_object+0xc4>
 8004e2e:	2b2c      	cmp	r3, #44	; 0x2c
 8004e30:	d002      	beq.n	8004e38 <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004e32:	3401      	adds	r4, #1
 8004e34:	42a0      	cmp	r0, r4
 8004e36:	dcf6      	bgt.n	8004e26 <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 8004e38:	2c00      	cmp	r4, #0
 8004e3a:	d06c      	beq.n	8004f16 <json_get_object+0x1a2>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 8004e3c:	1c60      	adds	r0, r4, #1
 8004e3e:	f007 fa87 	bl	800c350 <malloc>
 8004e42:	4605      	mov	r5, r0
 8004e44:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004e46:	2800      	cmp	r0, #0
 8004e48:	f000 8086 	beq.w	8004f58 <json_get_object+0x1e4>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	4641      	mov	r1, r8
 8004e50:	f007 fa8e 	bl	800c370 <memcpy>
		dest->value[val_len] = '\0';
 8004e54:	2000      	movs	r0, #0
 8004e56:	5528      	strb	r0, [r5, r4]
 8004e58:	e008      	b.n	8004e6c <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004e5a:	4b45      	ldr	r3, [pc, #276]	; (8004f70 <json_get_object+0x1fc>)
 8004e5c:	4845      	ldr	r0, [pc, #276]	; (8004f74 <json_get_object+0x200>)
 8004e5e:	9300      	str	r3, [sp, #0]
 8004e60:	4a45      	ldr	r2, [pc, #276]	; (8004f78 <json_get_object+0x204>)
 8004e62:	4946      	ldr	r1, [pc, #280]	; (8004f7c <json_get_object+0x208>)
 8004e64:	232b      	movs	r3, #43	; 0x2b
 8004e66:	f005 ffa1 	bl	800adac <LOG_DEBUG>
		return ret;
 8004e6a:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 8004e6c:	b007      	add	sp, #28
 8004e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004e72:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <json_get_object+0x1fc>)
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	4a42      	ldr	r2, [pc, #264]	; (8004f80 <json_get_object+0x20c>)
 8004e78:	4940      	ldr	r1, [pc, #256]	; (8004f7c <json_get_object+0x208>)
 8004e7a:	483e      	ldr	r0, [pc, #248]	; (8004f74 <json_get_object+0x200>)
 8004e7c:	2326      	movs	r3, #38	; 0x26
 8004e7e:	f005 ff95 	bl	800adac <LOG_DEBUG>
		return ret;
 8004e82:	2001      	movs	r0, #1
}
 8004e84:	b007      	add	sp, #28
 8004e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 8004e8a:	7931      	ldrb	r1, [r6, #4]
 8004e8c:	2900      	cmp	r1, #0
 8004e8e:	d1bf      	bne.n	8004e10 <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 8004e90:	eba9 0904 	sub.w	r9, r9, r4
 8004e94:	444d      	add	r5, r9
 8004e96:	f105 0c02 	add.w	ip, r5, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004e9a:	4567      	cmp	r7, ip
 8004e9c:	dd45      	ble.n	8004f2a <json_get_object+0x1b6>
 8004e9e:	3501      	adds	r5, #1
 8004ea0:	442c      	add	r4, r5
 8004ea2:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 8004ea4:	4608      	mov	r0, r1
 8004ea6:	e007      	b.n	8004eb8 <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8004ea8:	2a7d      	cmp	r2, #125	; 0x7d
 8004eaa:	bf08      	it	eq
 8004eac:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 8004eae:	4281      	cmp	r1, r0
 8004eb0:	d008      	beq.n	8004ec4 <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	429f      	cmp	r7, r3
 8004eb6:	d017      	beq.n	8004ee8 <json_get_object+0x174>
			if(src_cpy[ivend] == '{') l_brace++;
 8004eb8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8004ebc:	2a7b      	cmp	r2, #123	; 0x7b
 8004ebe:	d1f3      	bne.n	8004ea8 <json_get_object+0x134>
 8004ec0:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 8004ec2:	e7f4      	b.n	8004eae <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 8004ec4:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8004ec8:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 8004eca:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 8004ecc:	f007 fa40 	bl	800c350 <malloc>
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004ed4:	b360      	cbz	r0, 8004f30 <json_get_object+0x1bc>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004ed6:	463a      	mov	r2, r7
 8004ed8:	4641      	mov	r1, r8
 8004eda:	f007 fa49 	bl	800c370 <memcpy>
		dest->value[val_len] = '\0';
 8004ede:	2000      	movs	r0, #0
 8004ee0:	55e0      	strb	r0, [r4, r7]
}
 8004ee2:	b007      	add	sp, #28
 8004ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 8004ee8:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 8004eec:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 8004eee:	3701      	adds	r7, #1
 8004ef0:	e7ec      	b.n	8004ecc <json_get_object+0x158>
		return ret;
 8004ef2:	2004      	movs	r0, #4
 8004ef4:	e7ba      	b.n	8004e6c <json_get_object+0xf8>
			pvstart++;
 8004ef6:	f108 0501 	add.w	r5, r8, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb f982 	bl	8000204 <strlen>
 8004f00:	2400      	movs	r4, #0
 8004f02:	e004      	b.n	8004f0e <json_get_object+0x19a>
				if(pvstart[val_len] == '"') break;
 8004f04:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8004f08:	2b22      	cmp	r3, #34	; 0x22
 8004f0a:	d002      	beq.n	8004f12 <json_get_object+0x19e>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004f0c:	3401      	adds	r4, #1
 8004f0e:	42a0      	cmp	r0, r4
 8004f10:	dcf8      	bgt.n	8004f04 <json_get_object+0x190>
 8004f12:	46a8      	mov	r8, r5
 8004f14:	e790      	b.n	8004e38 <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f16:	4b16      	ldr	r3, [pc, #88]	; (8004f70 <json_get_object+0x1fc>)
 8004f18:	4816      	ldr	r0, [pc, #88]	; (8004f74 <json_get_object+0x200>)
 8004f1a:	9300      	str	r3, [sp, #0]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <json_get_object+0x210>)
 8004f1e:	4917      	ldr	r1, [pc, #92]	; (8004f7c <json_get_object+0x208>)
 8004f20:	2366      	movs	r3, #102	; 0x66
 8004f22:	f005 ff43 	bl	800adac <LOG_DEBUG>
			return ret;
 8004f26:	2008      	movs	r0, #8
 8004f28:	e7a0      	b.n	8004e6c <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004f2a:	2701      	movs	r7, #1
 8004f2c:	2002      	movs	r0, #2
 8004f2e:	e7cd      	b.n	8004ecc <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f30:	4b0f      	ldr	r3, [pc, #60]	; (8004f70 <json_get_object+0x1fc>)
 8004f32:	4810      	ldr	r0, [pc, #64]	; (8004f74 <json_get_object+0x200>)
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <json_get_object+0x214>)
 8004f38:	4910      	ldr	r1, [pc, #64]	; (8004f7c <json_get_object+0x208>)
 8004f3a:	237e      	movs	r3, #126	; 0x7e
 8004f3c:	f005 ff36 	bl	800adac <LOG_DEBUG>
			return ret;
 8004f40:	2010      	movs	r0, #16
 8004f42:	e793      	b.n	8004e6c <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f44:	4b0a      	ldr	r3, [pc, #40]	; (8004f70 <json_get_object+0x1fc>)
 8004f46:	480b      	ldr	r0, [pc, #44]	; (8004f74 <json_get_object+0x200>)
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <json_get_object+0x214>)
 8004f4c:	490b      	ldr	r1, [pc, #44]	; (8004f7c <json_get_object+0x208>)
 8004f4e:	2344      	movs	r3, #68	; 0x44
 8004f50:	f005 ff2c 	bl	800adac <LOG_DEBUG>
		return ret;
 8004f54:	2010      	movs	r0, #16
 8004f56:	e789      	b.n	8004e6c <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <json_get_object+0x1fc>)
 8004f5a:	4806      	ldr	r0, [pc, #24]	; (8004f74 <json_get_object+0x200>)
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4a0a      	ldr	r2, [pc, #40]	; (8004f88 <json_get_object+0x214>)
 8004f60:	4906      	ldr	r1, [pc, #24]	; (8004f7c <json_get_object+0x208>)
 8004f62:	236c      	movs	r3, #108	; 0x6c
 8004f64:	f005 ff22 	bl	800adac <LOG_DEBUG>
			return ret;
 8004f68:	2010      	movs	r0, #16
 8004f6a:	e77f      	b.n	8004e6c <json_get_object+0xf8>
 8004f6c:	080111b0 	.word	0x080111b0
 8004f70:	080111a0 	.word	0x080111a0
 8004f74:	08011190 	.word	0x08011190
 8004f78:	080111b8 	.word	0x080111b8
 8004f7c:	08010d3c 	.word	0x08010d3c
 8004f80:	08011174 	.word	0x08011174
 8004f84:	080111fc 	.word	0x080111fc
 8004f88:	080111dc 	.word	0x080111dc

08004f8c <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	4604      	mov	r4, r0
	if(json->key != NULL) {
 8004f90:	6800      	ldr	r0, [r0, #0]
 8004f92:	b118      	cbz	r0, 8004f9c <json_release_object+0x10>
		free(json->key);
 8004f94:	f007 f9e4 	bl	800c360 <free>
		json->key = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6023      	str	r3, [r4, #0]
	}
	if(json->value != NULL) {
 8004f9c:	68a0      	ldr	r0, [r4, #8]
 8004f9e:	b118      	cbz	r0, 8004fa8 <json_release_object+0x1c>
		free(json->value);
 8004fa0:	f007 f9de 	bl	800c360 <free>
		json->value = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60a3      	str	r3, [r4, #8]
	}
	json->leaf = false;
 8004fa8:	2000      	movs	r0, #0
 8004faa:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 8004fac:	bd10      	pop	{r4, pc}
 8004fae:	bf00      	nop

08004fb0 <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 8004fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb4:	4688      	mov	r8, r1
 8004fb6:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8004fb8:	4920      	ldr	r1, [pc, #128]	; (800503c <parse_packet+0x8c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 8004fba:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 8004fbc:	f008 f96a 	bl	800d294 <strstr>
	if(pvstart == NULL){
 8004fc0:	b318      	cbz	r0, 800500a <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 8004fc2:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	1c78      	adds	r0, r7, #1
 8004fc8:	f007 f9c2 	bl	800c350 <malloc>
 8004fcc:	4606      	mov	r6, r0
 8004fce:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 8004fd2:	b1f0      	cbz	r0, 8005012 <parse_packet+0x62>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 8004fd8:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 8004fda:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8004fdc:	f007 f9c8 	bl	800c370 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 8004fe0:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f7fb f90e 	bl	8000204 <strlen>
 8004fe8:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 8004fea:	3001      	adds	r0, #1
 8004fec:	f007 f9b0 	bl	800c350 <malloc>
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 8004ff6:	b1b0      	cbz	r0, 8005026 <parse_packet+0x76>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	4632      	mov	r2, r6
 8004ffc:	f007 f9b8 	bl	800c370 <memcpy>
	dest->data_str[data_len] = '\0';
 8005000:	55bd      	strb	r5, [r7, r6]

	return ret;
 8005002:	4628      	mov	r0, r5
}
 8005004:	b002      	add	sp, #8
 8005006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return ret;
 800500a:	2002      	movs	r0, #2
}
 800500c:	b002      	add	sp, #8
 800500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005012:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <parse_packet+0x90>)
 8005014:	480b      	ldr	r0, [pc, #44]	; (8005044 <parse_packet+0x94>)
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	4a0b      	ldr	r2, [pc, #44]	; (8005048 <parse_packet+0x98>)
 800501a:	490c      	ldr	r1, [pc, #48]	; (800504c <parse_packet+0x9c>)
 800501c:	23ab      	movs	r3, #171	; 0xab
 800501e:	f005 fec5 	bl	800adac <LOG_DEBUG>
		return ret;
 8005022:	2010      	movs	r0, #16
 8005024:	e7ee      	b.n	8005004 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <parse_packet+0x90>)
 8005028:	4806      	ldr	r0, [pc, #24]	; (8005044 <parse_packet+0x94>)
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	4a06      	ldr	r2, [pc, #24]	; (8005048 <parse_packet+0x98>)
 800502e:	4907      	ldr	r1, [pc, #28]	; (800504c <parse_packet+0x9c>)
 8005030:	23b8      	movs	r3, #184	; 0xb8
 8005032:	f005 febb 	bl	800adac <LOG_DEBUG>
		return ret;
 8005036:	2010      	movs	r0, #16
 8005038:	e7e4      	b.n	8005004 <parse_packet+0x54>
 800503a:	bf00      	nop
 800503c:	08011210 	.word	0x08011210
 8005040:	08011214 	.word	0x08011214
 8005044:	08011190 	.word	0x08011190
 8005048:	080111dc 	.word	0x080111dc
 800504c:	08010d3c 	.word	0x08010d3c

08005050 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 8005050:	b510      	push	{r4, lr}
 8005052:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) {
 8005054:	6800      	ldr	r0, [r0, #0]
 8005056:	b118      	cbz	r0, 8005060 <release_packet+0x10>
		free(packet->cmd_str);
 8005058:	f007 f982 	bl	800c360 <free>
		packet->cmd_str = NULL;
 800505c:	2300      	movs	r3, #0
 800505e:	6023      	str	r3, [r4, #0]
	}
	if(packet->data_str != NULL) {
 8005060:	6860      	ldr	r0, [r4, #4]
 8005062:	b118      	cbz	r0, 800506c <release_packet+0x1c>
		free(packet->data_str);
 8005064:	f007 f97c 	bl	800c360 <free>
		packet->data_str = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	6063      	str	r3, [r4, #4]
	}

	return PKT_ERR_OK;
}
 800506c:	2000      	movs	r0, #0
 800506e:	bd10      	pop	{r4, pc}

08005070 <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 8005070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 8005072:	1e16      	subs	r6, r2, #0
 8005074:	dd0f      	ble.n	8005096 <str_to_cmd+0x26>
 8005076:	4607      	mov	r7, r0
 8005078:	1f0d      	subs	r5, r1, #4
 800507a:	2400      	movs	r4, #0
 800507c:	e002      	b.n	8005084 <str_to_cmd+0x14>
 800507e:	3401      	adds	r4, #1
 8005080:	42a6      	cmp	r6, r4
 8005082:	d008      	beq.n	8005096 <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 8005084:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005088:	4638      	mov	r0, r7
 800508a:	f7fb f8b1 	bl	80001f0 <strcmp>
 800508e:	2800      	cmp	r0, #0
 8005090:	d1f5      	bne.n	800507e <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 8005092:	4620      	mov	r0, r4
 8005094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 8005096:	2400      	movs	r4, #0
}
 8005098:	4620      	mov	r0, r4
 800509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800509c <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 800509c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop

080050a4 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 80050a4:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 80050a8:	2300      	movs	r3, #0
 80050aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80050ae:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 80050b2:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 80050b6:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 80050b8:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 80050ba:	9a01      	ldr	r2, [sp, #4]
 80050bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 80050c0:	6142      	str	r2, [r0, #20]
	_it = itpin;
 80050c2:	8103      	strh	r3, [r0, #8]
}
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop

080050c8 <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 80050c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	4604      	mov	r4, r0
 80050ce:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 80050d0:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 80050d2:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 80050d4:	4698      	mov	r8, r3
 80050d6:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 80050d8:	f001 ffc6 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 80050dc:	6920      	ldr	r0, [r4, #16]
 80050de:	f001 ffc3 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 80050e2:	6960      	ldr	r0, [r4, #20]
 80050e4:	f001 ffc0 	bl	8007068 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 80050e8:	2207      	movs	r2, #7
 80050ea:	88a1      	ldrh	r1, [r4, #4]
 80050ec:	68e0      	ldr	r0, [r4, #12]
 80050ee:	f002 f821 	bl	8007134 <gpio_set_mode>
	gpio_set(_csport, _cs);
 80050f2:	88a1      	ldrh	r1, [r4, #4]
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	f002 f8ff 	bl	80072f8 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 80050fa:	2207      	movs	r2, #7
 80050fc:	88e1      	ldrh	r1, [r4, #6]
 80050fe:	6920      	ldr	r0, [r4, #16]
 8005100:	f002 f818 	bl	8007134 <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 8005104:	88e1      	ldrh	r1, [r4, #6]
 8005106:	6920      	ldr	r0, [r4, #16]
 8005108:	f002 f8fe 	bl	8007308 <gpio_reset>
    delay_ms(50);
 800510c:	2032      	movs	r0, #50	; 0x32
 800510e:	f003 f9d9 	bl	80084c4 <delay_ms>
    gpio_set(_rstport, _rst);
 8005112:	88e1      	ldrh	r1, [r4, #6]
 8005114:	6920      	ldr	r0, [r4, #16]
 8005116:	f002 f8ef 	bl	80072f8 <gpio_set>
    delay_ms(50);
 800511a:	2032      	movs	r0, #50	; 0x32
 800511c:	f003 f9d2 	bl	80084c4 <delay_ms>

    if(_it >= 0 && _itport != NULL){
 8005120:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8005124:	2a00      	cmp	r2, #0
 8005126:	db0e      	blt.n	8005146 <_ZN6sx127x4initEP3spilhm+0x7e>
 8005128:	6961      	ldr	r1, [r4, #20]
 800512a:	b161      	cbz	r1, 8005146 <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 800512c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	ad04      	add	r5, sp, #16
 8005132:	4628      	mov	r0, r5
 8005134:	b292      	uxth	r2, r2
 8005136:	2301      	movs	r3, #1
 8005138:	f001 fad4 	bl	80066e4 <exti_init>
		gpio_set_pulldown(_itport, _it);
 800513c:	8921      	ldrh	r1, [r4, #8]
 800513e:	6960      	ldr	r0, [r4, #20]
 8005140:	f002 f8cc 	bl	80072dc <gpio_set_pulldown>
 8005144:	e000      	b.n	8005148 <_ZN6sx127x4initEP3spilhm+0x80>
 8005146:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 8005148:	88a1      	ldrh	r1, [r4, #4]
 800514a:	68e0      	ldr	r0, [r4, #12]
 800514c:	f002 f8dc 	bl	8007308 <gpio_reset>

  txdt = address;
 8005150:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005152:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005154:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005158:	f10d 020f 	add.w	r2, sp, #15
 800515c:	2301      	movs	r3, #1
 800515e:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005160:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005162:	f002 fcf1 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005166:	9600      	str	r6, [sp, #0]
 8005168:	f10d 030e 	add.w	r3, sp, #14
 800516c:	6821      	ldr	r1, [r4, #0]
 800516e:	f10d 020f 	add.w	r2, sp, #15
 8005172:	4628      	mov	r0, r5
  txdt = value;
 8005174:	2700      	movs	r7, #0
 8005176:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800517a:	f002 fd91 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 800517e:	88a1      	ldrh	r1, [r4, #4]
 8005180:	68e0      	ldr	r0, [r4, #12]
 8005182:	f002 f8b9 	bl	80072f8 <gpio_set>

  return response;
 8005186:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 800518a:	2b12      	cmp	r3, #18
 800518c:	d003      	beq.n	8005196 <_ZN6sx127x4initEP3spilhm+0xce>
 800518e:	4638      	mov	r0, r7
}
 8005190:	b006      	add	sp, #24
 8005192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 8005196:	88a1      	ldrh	r1, [r4, #4]
 8005198:	68e0      	ldr	r0, [r4, #12]
 800519a:	f002 f8b5 	bl	8007308 <gpio_reset>
  txdt = address;
 800519e:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051a2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80051a4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051a8:	4633      	mov	r3, r6
 80051aa:	f10d 020f 	add.w	r2, sp, #15
 80051ae:	4628      	mov	r0, r5
 80051b0:	f002 fcca 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051b4:	9600      	str	r6, [sp, #0]
  txdt = value;
 80051b6:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051ba:	f10d 030e 	add.w	r3, sp, #14
 80051be:	f10d 020f 	add.w	r2, sp, #15
 80051c2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80051c4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051c8:	4628      	mov	r0, r5
 80051ca:	f002 fd69 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80051ce:	88a1      	ldrh	r1, [r4, #4]
 80051d0:	68e0      	ldr	r0, [r4, #12]
 80051d2:	f002 f891 	bl	80072f8 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80051d6:	ea4f 71e9 	mov.w	r1, r9, asr #31
 80051da:	04c9      	lsls	r1, r1, #19
 80051dc:	4a9e      	ldr	r2, [pc, #632]	; (8005458 <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 80051de:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80051e2:	2300      	movs	r3, #0
 80051e4:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 80051e8:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 80051ec:	f7fb fd6c 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 80051f0:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80051f2:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 80051f4:	68e0      	ldr	r0, [r4, #12]
 80051f6:	f002 f887 	bl	8007308 <gpio_reset>
  txdt = address;
 80051fa:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051fe:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005200:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005204:	4633      	mov	r3, r6
 8005206:	f10d 020f 	add.w	r2, sp, #15
 800520a:	4628      	mov	r0, r5
 800520c:	f002 fc9c 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005210:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8005212:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005216:	f10d 030e 	add.w	r3, sp, #14
 800521a:	f10d 020f 	add.w	r2, sp, #15
 800521e:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8005220:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005224:	4628      	mov	r0, r5
 8005226:	f002 fd3b 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800522a:	88a1      	ldrh	r1, [r4, #4]
 800522c:	68e0      	ldr	r0, [r4, #12]
 800522e:	f002 f863 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005232:	88a1      	ldrh	r1, [r4, #4]
 8005234:	68e0      	ldr	r0, [r4, #12]
 8005236:	f002 f867 	bl	8007308 <gpio_reset>
  txdt = address;
 800523a:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 800523e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005240:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005244:	4633      	mov	r3, r6
 8005246:	f10d 020f 	add.w	r2, sp, #15
 800524a:	4628      	mov	r0, r5
 800524c:	f002 fc7c 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005250:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8005252:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005256:	f10d 030e 	add.w	r3, sp, #14
 800525a:	f10d 020f 	add.w	r2, sp, #15
 800525e:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8005260:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005264:	4628      	mov	r0, r5
 8005266:	f002 fd1b 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800526a:	88a1      	ldrh	r1, [r4, #4]
 800526c:	68e0      	ldr	r0, [r4, #12]
 800526e:	f002 f843 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005272:	88a1      	ldrh	r1, [r4, #4]
 8005274:	68e0      	ldr	r0, [r4, #12]
 8005276:	f002 f847 	bl	8007308 <gpio_reset>
  txdt = address;
 800527a:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 800527e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005280:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005284:	4633      	mov	r3, r6
 8005286:	f10d 020f 	add.w	r2, sp, #15
 800528a:	4628      	mov	r0, r5
 800528c:	f002 fc5c 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005290:	9600      	str	r6, [sp, #0]
 8005292:	f10d 030e 	add.w	r3, sp, #14
 8005296:	f10d 020f 	add.w	r2, sp, #15
 800529a:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800529c:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052a0:	4628      	mov	r0, r5
 80052a2:	f002 fcfd 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052a6:	88a1      	ldrh	r1, [r4, #4]
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	f002 f825 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 80052ae:	88a1      	ldrh	r1, [r4, #4]
 80052b0:	68e0      	ldr	r0, [r4, #12]
 80052b2:	f002 f829 	bl	8007308 <gpio_reset>
  txdt = address;
 80052b6:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052ba:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052bc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052c0:	4633      	mov	r3, r6
 80052c2:	f10d 020f 	add.w	r2, sp, #15
 80052c6:	4628      	mov	r0, r5
 80052c8:	f002 fc3e 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052cc:	9600      	str	r6, [sp, #0]
 80052ce:	f10d 030e 	add.w	r3, sp, #14
 80052d2:	f10d 020f 	add.w	r2, sp, #15
 80052d6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80052d8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052dc:	4628      	mov	r0, r5
 80052de:	f002 fcdf 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052e2:	88a1      	ldrh	r1, [r4, #4]
 80052e4:	68e0      	ldr	r0, [r4, #12]
 80052e6:	f002 f807 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 80052ea:	88a1      	ldrh	r1, [r4, #4]
 80052ec:	68e0      	ldr	r0, [r4, #12]
 80052ee:	f002 f80b 	bl	8007308 <gpio_reset>
  txdt = address;
 80052f2:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052f6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052f8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052fc:	4633      	mov	r3, r6
 80052fe:	f10d 020f 	add.w	r2, sp, #15
 8005302:	4628      	mov	r0, r5
 8005304:	f002 fc20 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005308:	9600      	str	r6, [sp, #0]
 800530a:	f10d 030e 	add.w	r3, sp, #14
 800530e:	f10d 020f 	add.w	r2, sp, #15
 8005312:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005314:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005318:	4628      	mov	r0, r5
 800531a:	f002 fcc1 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800531e:	88a1      	ldrh	r1, [r4, #4]
 8005320:	68e0      	ldr	r0, [r4, #12]
 8005322:	f001 ffe9 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005326:	88a1      	ldrh	r1, [r4, #4]
 8005328:	68e0      	ldr	r0, [r4, #12]
 800532a:	f001 ffed 	bl	8007308 <gpio_reset>
  txdt = address;
 800532e:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005332:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005334:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005338:	4633      	mov	r3, r6
 800533a:	f10d 020f 	add.w	r2, sp, #15
 800533e:	4628      	mov	r0, r5
 8005340:	f002 fc02 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005344:	9600      	str	r6, [sp, #0]
 8005346:	f10d 030e 	add.w	r3, sp, #14
 800534a:	f10d 020f 	add.w	r2, sp, #15
 800534e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005350:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005354:	4628      	mov	r0, r5
 8005356:	f002 fca3 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800535a:	88a1      	ldrh	r1, [r4, #4]
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	f001 ffcb 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005362:	88a1      	ldrh	r1, [r4, #4]
 8005364:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005366:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 800536a:	f001 ffcd 	bl	8007308 <gpio_reset>
  txdt = address;
 800536e:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005372:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005374:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005378:	4633      	mov	r3, r6
 800537a:	f10d 020f 	add.w	r2, sp, #15
 800537e:	4628      	mov	r0, r5
 8005380:	f002 fbe2 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005384:	9600      	str	r6, [sp, #0]
 8005386:	f10d 030e 	add.w	r3, sp, #14
 800538a:	f10d 020f 	add.w	r2, sp, #15
 800538e:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8005390:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005394:	4628      	mov	r0, r5
  txdt = value;
 8005396:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800539a:	f002 fc81 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800539e:	88a1      	ldrh	r1, [r4, #4]
 80053a0:	68e0      	ldr	r0, [r4, #12]
 80053a2:	f001 ffa9 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 80053a6:	88a1      	ldrh	r1, [r4, #4]
 80053a8:	68e0      	ldr	r0, [r4, #12]
 80053aa:	f001 ffad 	bl	8007308 <gpio_reset>
  txdt = address;
 80053ae:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053b0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053b2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053b6:	4633      	mov	r3, r6
 80053b8:	f10d 020f 	add.w	r2, sp, #15
 80053bc:	4628      	mov	r0, r5
 80053be:	f002 fbc3 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053c2:	9600      	str	r6, [sp, #0]
  txdt = value;
 80053c4:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053c6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80053c8:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053cc:	4628      	mov	r0, r5
 80053ce:	f10d 030e 	add.w	r3, sp, #14
 80053d2:	f10d 020f 	add.w	r2, sp, #15
 80053d6:	f002 fc63 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053da:	88a1      	ldrh	r1, [r4, #4]
 80053dc:	68e0      	ldr	r0, [r4, #12]
 80053de:	f001 ff8b 	bl	80072f8 <gpio_set>
		if(level > 17){
 80053e2:	f1b8 0f11 	cmp.w	r8, #17
 80053e6:	f200 80c8 	bhi.w	800557a <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 80053ea:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 80053ee:	88a1      	ldrh	r1, [r4, #4]
 80053f0:	68e0      	ldr	r0, [r4, #12]
 80053f2:	bf38      	it	cc
 80053f4:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 80053f8:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 80053fa:	f001 ff85 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053fe:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005400:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005404:	4633      	mov	r3, r6
 8005406:	f10d 020f 	add.w	r2, sp, #15
 800540a:	4628      	mov	r0, r5
 800540c:	f002 fb9c 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005410:	9600      	str	r6, [sp, #0]
 8005412:	f10d 030e 	add.w	r3, sp, #14
 8005416:	f10d 020f 	add.w	r2, sp, #15
 800541a:	6821      	ldr	r1, [r4, #0]
 800541c:	4628      	mov	r0, r5
  txdt = value;
 800541e:	2784      	movs	r7, #132	; 0x84
 8005420:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005424:	f002 fc3c 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005428:	88a1      	ldrh	r1, [r4, #4]
 800542a:	68e0      	ldr	r0, [r4, #12]
 800542c:	f001 ff64 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005430:	88a1      	ldrh	r1, [r4, #4]
 8005432:	68e0      	ldr	r0, [r4, #12]
 8005434:	f001 ff68 	bl	8007308 <gpio_reset>
  txdt = address;
 8005438:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 800543a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800543c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005440:	4633      	mov	r3, r6
 8005442:	4628      	mov	r0, r5
 8005444:	f10d 020f 	add.w	r2, sp, #15
 8005448:	f002 fb7e 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800544c:	9600      	str	r6, [sp, #0]
 800544e:	6821      	ldr	r1, [r4, #0]
 8005450:	4628      	mov	r0, r5
  txdt = value;
 8005452:	232b      	movs	r3, #43	; 0x2b
 8005454:	e002      	b.n	800545c <_ZN6sx127x4initEP3spilhm+0x394>
 8005456:	bf00      	nop
 8005458:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800545c:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005460:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005464:	f10d 030e 	add.w	r3, sp, #14
 8005468:	f002 fc1a 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800546c:	88a1      	ldrh	r1, [r4, #4]
 800546e:	68e0      	ldr	r0, [r4, #12]
 8005470:	f001 ff42 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005474:	88a1      	ldrh	r1, [r4, #4]
 8005476:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005478:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 800547a:	f001 ff45 	bl	8007308 <gpio_reset>
  txdt = address;
 800547e:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005480:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005482:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005486:	f10d 020f 	add.w	r2, sp, #15
 800548a:	4628      	mov	r0, r5
 800548c:	2301      	movs	r3, #1
 800548e:	f002 fb5b 	bl	8007b48 <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005492:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005496:	9700      	str	r7, [sp, #0]
 8005498:	f10d 030e 	add.w	r3, sp, #14
 800549c:	f10d 020f 	add.w	r2, sp, #15
 80054a0:	6821      	ldr	r1, [r4, #0]
 80054a2:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80054a4:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 80054a8:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054ac:	f002 fbf8 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054b0:	88a1      	ldrh	r1, [r4, #4]
 80054b2:	68e0      	ldr	r0, [r4, #12]
 80054b4:	f001 ff20 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 80054b8:	88a1      	ldrh	r1, [r4, #4]
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	f001 ff24 	bl	8007308 <gpio_reset>
  txdt = address;
 80054c0:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054c2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054c4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054c8:	463b      	mov	r3, r7
 80054ca:	f10d 020f 	add.w	r2, sp, #15
 80054ce:	4628      	mov	r0, r5
 80054d0:	f002 fb3a 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054d4:	9700      	str	r7, [sp, #0]
 80054d6:	f10d 030e 	add.w	r3, sp, #14
 80054da:	f10d 020f 	add.w	r2, sp, #15
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	4628      	mov	r0, r5
  txdt = value;
 80054e2:	2600      	movs	r6, #0
 80054e4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054e8:	f002 fbda 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054ec:	88a1      	ldrh	r1, [r4, #4]
 80054ee:	68e0      	ldr	r0, [r4, #12]
 80054f0:	f001 ff02 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 80054f4:	88a1      	ldrh	r1, [r4, #4]
 80054f6:	68e0      	ldr	r0, [r4, #12]
  return response;
 80054f8:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 80054fc:	f001 ff04 	bl	8007308 <gpio_reset>
  txdt = address;
 8005500:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005504:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005506:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800550a:	463b      	mov	r3, r7
 800550c:	f10d 020f 	add.w	r2, sp, #15
 8005510:	4628      	mov	r0, r5
 8005512:	f002 fb19 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005516:	9700      	str	r7, [sp, #0]
 8005518:	f10d 030e 	add.w	r3, sp, #14
 800551c:	f10d 020f 	add.w	r2, sp, #15
 8005520:	6821      	ldr	r1, [r4, #0]
 8005522:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8005524:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 8005528:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800552c:	f002 fbb8 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005530:	88a1      	ldrh	r1, [r4, #4]
 8005532:	68e0      	ldr	r0, [r4, #12]
 8005534:	f001 fee0 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005538:	88a1      	ldrh	r1, [r4, #4]
 800553a:	68e0      	ldr	r0, [r4, #12]
 800553c:	f001 fee4 	bl	8007308 <gpio_reset>
  txdt = address;
 8005540:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005542:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005544:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005548:	463b      	mov	r3, r7
 800554a:	f10d 020f 	add.w	r2, sp, #15
 800554e:	4628      	mov	r0, r5
 8005550:	f002 fafa 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005554:	9700      	str	r7, [sp, #0]
 8005556:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005558:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800555c:	f10d 030e 	add.w	r3, sp, #14
 8005560:	f10d 020f 	add.w	r2, sp, #15
 8005564:	4628      	mov	r0, r5
 8005566:	f002 fb9b 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800556a:	68e0      	ldr	r0, [r4, #12]
 800556c:	88a1      	ldrh	r1, [r4, #4]
 800556e:	f001 fec3 	bl	80072f8 <gpio_set>
	return true;
 8005572:	4638      	mov	r0, r7
}
 8005574:	b006      	add	sp, #24
 8005576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 800557a:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 800557e:	88a1      	ldrh	r1, [r4, #4]
 8005580:	68e0      	ldr	r0, [r4, #12]
 8005582:	bf28      	it	cs
 8005584:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 8005588:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 800558a:	f001 febd 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800558e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005590:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005594:	4633      	mov	r3, r6
 8005596:	f10d 020f 	add.w	r2, sp, #15
 800559a:	4628      	mov	r0, r5
 800559c:	f002 fad4 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055a0:	9600      	str	r6, [sp, #0]
 80055a2:	f10d 030e 	add.w	r3, sp, #14
 80055a6:	f10d 020f 	add.w	r2, sp, #15
 80055aa:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80055ac:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055b0:	4628      	mov	r0, r5
 80055b2:	f002 fb75 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055b6:	88a1      	ldrh	r1, [r4, #4]
 80055b8:	68e0      	ldr	r0, [r4, #12]
 80055ba:	f001 fe9d 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 80055be:	88a1      	ldrh	r1, [r4, #4]
 80055c0:	68e0      	ldr	r0, [r4, #12]
 80055c2:	f001 fea1 	bl	8007308 <gpio_reset>
  txdt = address;
 80055c6:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055c8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055ca:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055ce:	4633      	mov	r3, r6
 80055d0:	4628      	mov	r0, r5
 80055d2:	f10d 020f 	add.w	r2, sp, #15
 80055d6:	f002 fab7 	bl	8007b48 <_ZN3spi8transmitEmm>
			level -= 3;
 80055da:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055de:	9600      	str	r6, [sp, #0]
 80055e0:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 80055e2:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055e6:	4628      	mov	r0, r5
  txdt = value;
 80055e8:	2331      	movs	r3, #49	; 0x31
 80055ea:	e737      	b.n	800545c <_ZN6sx127x4initEP3spilhm+0x394>

080055ec <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 80055ec:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop

080055f4 <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 80055f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f6:	4604      	mov	r4, r0
 80055f8:	b087      	sub	sp, #28
  txdt = address;
 80055fa:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 80055fc:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 80055fe:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 8005600:	88a1      	ldrh	r1, [r4, #4]
 8005602:	f001 fe81 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005606:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005608:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800560c:	4633      	mov	r3, r6
 800560e:	f10d 020f 	add.w	r2, sp, #15
 8005612:	a804      	add	r0, sp, #16
 8005614:	f002 fa98 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005618:	9600      	str	r6, [sp, #0]
 800561a:	f10d 030e 	add.w	r3, sp, #14
 800561e:	6821      	ldr	r1, [r4, #0]
 8005620:	f10d 020f 	add.w	r2, sp, #15
 8005624:	a804      	add	r0, sp, #16
  txdt = value;
 8005626:	2500      	movs	r5, #0
 8005628:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800562c:	f002 fb38 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005630:	88a1      	ldrh	r1, [r4, #4]
 8005632:	68e0      	ldr	r0, [r4, #12]
 8005634:	f001 fe60 	bl	80072f8 <gpio_set>
  return response;
 8005638:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 800563c:	f003 0303 	and.w	r3, r3, #3
 8005640:	2b03      	cmp	r3, #3
 8005642:	f000 80e1 	beq.w	8005808 <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 8005646:	88a1      	ldrh	r1, [r4, #4]
 8005648:	68e0      	ldr	r0, [r4, #12]
 800564a:	f001 fe5d 	bl	8007308 <gpio_reset>
  txdt = address;
 800564e:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005652:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005654:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005658:	4633      	mov	r3, r6
 800565a:	f10d 020f 	add.w	r2, sp, #15
 800565e:	a804      	add	r0, sp, #16
 8005660:	f002 fa72 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005664:	9600      	str	r6, [sp, #0]
 8005666:	f10d 030e 	add.w	r3, sp, #14
 800566a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800566c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005670:	f10d 020f 	add.w	r2, sp, #15
 8005674:	a804      	add	r0, sp, #16
 8005676:	f002 fb13 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800567a:	88a1      	ldrh	r1, [r4, #4]
 800567c:	68e0      	ldr	r0, [r4, #12]
 800567e:	f001 fe3b 	bl	80072f8 <gpio_set>
  return response;
 8005682:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8005686:	071b      	lsls	r3, r3, #28
 8005688:	f100 809f 	bmi.w	80057ca <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 800568c:	88a1      	ldrh	r1, [r4, #4]
 800568e:	68e0      	ldr	r0, [r4, #12]
 8005690:	f001 fe3a 	bl	8007308 <gpio_reset>
  txdt = address;
 8005694:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005696:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005698:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800569c:	2301      	movs	r3, #1
 800569e:	f10d 020f 	add.w	r2, sp, #15
 80056a2:	a804      	add	r0, sp, #16
 80056a4:	f002 fa50 	bl	8007b48 <_ZN3spi8transmitEmm>
  txdt = value;
 80056a8:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056ac:	2501      	movs	r5, #1
 80056ae:	9500      	str	r5, [sp, #0]
 80056b0:	6821      	ldr	r1, [r4, #0]
 80056b2:	a804      	add	r0, sp, #16
 80056b4:	f10d 030e 	add.w	r3, sp, #14
 80056b8:	f10d 020f 	add.w	r2, sp, #15
 80056bc:	f002 faf0 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056c0:	88a1      	ldrh	r1, [r4, #4]
 80056c2:	68e0      	ldr	r0, [r4, #12]
 80056c4:	f001 fe18 	bl	80072f8 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	f000 80a0 	beq.w	800580e <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 80056ce:	88a1      	ldrh	r1, [r4, #4]
 80056d0:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 80056d2:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 80056d4:	f001 fe18 	bl	8007308 <gpio_reset>
  txdt = address;
 80056d8:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056da:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056dc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056e0:	462b      	mov	r3, r5
 80056e2:	f10d 020f 	add.w	r2, sp, #15
 80056e6:	a804      	add	r0, sp, #16
 80056e8:	f002 fa2e 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056ec:	9500      	str	r5, [sp, #0]
 80056ee:	f10d 030e 	add.w	r3, sp, #14
 80056f2:	f10d 020f 	add.w	r2, sp, #15
 80056f6:	6821      	ldr	r1, [r4, #0]
 80056f8:	a804      	add	r0, sp, #16
  txdt = value;
 80056fa:	2600      	movs	r6, #0
 80056fc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005700:	f002 face 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005704:	88a1      	ldrh	r1, [r4, #4]
 8005706:	68e0      	ldr	r0, [r4, #12]
 8005708:	f001 fdf6 	bl	80072f8 <gpio_set>
  return response;
 800570c:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005710:	88a1      	ldrh	r1, [r4, #4]
 8005712:	68e0      	ldr	r0, [r4, #12]
 8005714:	f001 fdf8 	bl	8007308 <gpio_reset>
  txdt = address;
 8005718:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 800571a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800571c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005720:	462b      	mov	r3, r5
 8005722:	f10d 020f 	add.w	r2, sp, #15
 8005726:	a804      	add	r0, sp, #16
 8005728:	f002 fa0e 	bl	8007b48 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 800572c:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800572e:	9500      	str	r5, [sp, #0]
 8005730:	f10d 030e 	add.w	r3, sp, #14
 8005734:	f10d 020f 	add.w	r2, sp, #15
 8005738:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800573a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800573e:	a804      	add	r0, sp, #16
 8005740:	f002 faae 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005744:	88a1      	ldrh	r1, [r4, #4]
 8005746:	68e0      	ldr	r0, [r4, #12]
 8005748:	f001 fdd6 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 800574c:	88a1      	ldrh	r1, [r4, #4]
 800574e:	68e0      	ldr	r0, [r4, #12]
 8005750:	f001 fdda 	bl	8007308 <gpio_reset>
  txdt = address;
 8005754:	238d      	movs	r3, #141	; 0x8d
 8005756:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800575a:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800575c:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 800575e:	6821      	ldr	r1, [r4, #0]
 8005760:	f10d 020f 	add.w	r2, sp, #15
 8005764:	a804      	add	r0, sp, #16
 8005766:	f002 f9ef 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800576a:	9500      	str	r5, [sp, #0]
 800576c:	f10d 030e 	add.w	r3, sp, #14
 8005770:	f10d 020f 	add.w	r2, sp, #15
 8005774:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005776:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005778:	a804      	add	r0, sp, #16
  txdt = value;
 800577a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800577e:	f002 fa8f 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005782:	88a1      	ldrh	r1, [r4, #4]
 8005784:	68e0      	ldr	r0, [r4, #12]
 8005786:	f001 fdb7 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 800578a:	88a1      	ldrh	r1, [r4, #4]
 800578c:	68e0      	ldr	r0, [r4, #12]
 800578e:	f001 fdbb 	bl	8007308 <gpio_reset>
  txdt = address;
 8005792:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005794:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005796:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800579a:	462b      	mov	r3, r5
 800579c:	f10d 020f 	add.w	r2, sp, #15
 80057a0:	a804      	add	r0, sp, #16
 80057a2:	f002 f9d1 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a6:	9500      	str	r5, [sp, #0]
 80057a8:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057aa:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057ae:	f10d 030e 	add.w	r3, sp, #14
 80057b2:	f10d 020f 	add.w	r2, sp, #15
 80057b6:	a804      	add	r0, sp, #16
 80057b8:	f002 fa72 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057bc:	68e0      	ldr	r0, [r4, #12]
 80057be:	88a1      	ldrh	r1, [r4, #4]
 80057c0:	f001 fd9a 	bl	80072f8 <gpio_set>
	return true;
 80057c4:	4628      	mov	r0, r5
}
 80057c6:	b007      	add	sp, #28
 80057c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 80057ca:	88a1      	ldrh	r1, [r4, #4]
 80057cc:	68e0      	ldr	r0, [r4, #12]
 80057ce:	f001 fd9b 	bl	8007308 <gpio_reset>
  txdt = address;
 80057d2:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057d4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057d6:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057da:	4633      	mov	r3, r6
 80057dc:	f10d 020f 	add.w	r2, sp, #15
 80057e0:	a804      	add	r0, sp, #16
 80057e2:	f002 f9b1 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057e6:	9600      	str	r6, [sp, #0]
  txdt = value;
 80057e8:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057ea:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057ec:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057f0:	a804      	add	r0, sp, #16
 80057f2:	f10d 030e 	add.w	r3, sp, #14
 80057f6:	f10d 020f 	add.w	r2, sp, #15
 80057fa:	f002 fa51 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057fe:	88a1      	ldrh	r1, [r4, #4]
 8005800:	68e0      	ldr	r0, [r4, #12]
 8005802:	f001 fd79 	bl	80072f8 <gpio_set>
  return response;
 8005806:	e741      	b.n	800568c <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 8005808:	4628      	mov	r0, r5
}
 800580a:	b007      	add	sp, #28
 800580c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 800580e:	88a1      	ldrh	r1, [r4, #4]
 8005810:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005812:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005814:	f001 fd78 	bl	8007308 <gpio_reset>
  txdt = address;
 8005818:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 800581a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800581c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005820:	462b      	mov	r3, r5
 8005822:	f10d 020f 	add.w	r2, sp, #15
 8005826:	a804      	add	r0, sp, #16
 8005828:	f002 f98e 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800582c:	9500      	str	r5, [sp, #0]
 800582e:	f10d 030e 	add.w	r3, sp, #14
 8005832:	f10d 020f 	add.w	r2, sp, #15
 8005836:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005838:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800583c:	a804      	add	r0, sp, #16
 800583e:	f002 fa2f 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005842:	88a1      	ldrh	r1, [r4, #4]
 8005844:	68e0      	ldr	r0, [r4, #12]
 8005846:	f001 fd57 	bl	80072f8 <gpio_set>
  return response;
 800584a:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 800584e:	88a1      	ldrh	r1, [r4, #4]
 8005850:	68e0      	ldr	r0, [r4, #12]
 8005852:	f001 fd59 	bl	8007308 <gpio_reset>
  txdt = address;
 8005856:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005858:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800585a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800585e:	462b      	mov	r3, r5
 8005860:	f10d 020f 	add.w	r2, sp, #15
 8005864:	a804      	add	r0, sp, #16
 8005866:	f002 f96f 	bl	8007b48 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 800586a:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800586e:	9500      	str	r5, [sp, #0]
 8005870:	e75e      	b.n	8005730 <_ZN6sx127x11beginPacketEb+0x13c>
 8005872:	bf00      	nop

08005874 <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	4604      	mov	r4, r0
 800587a:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 800587c:	460f      	mov	r7, r1
 800587e:	b319      	cbz	r1, 80058c8 <_ZN6sx127x9endPacketEb+0x54>
 8005880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005882:	b30b      	cbz	r3, 80058c8 <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 8005884:	8881      	ldrh	r1, [r0, #4]
 8005886:	68c0      	ldr	r0, [r0, #12]
 8005888:	f001 fd3e 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800588c:	f10d 050f 	add.w	r5, sp, #15
 8005890:	ae04      	add	r6, sp, #16
  txdt = address;
 8005892:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005894:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005896:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800589a:	462a      	mov	r2, r5
 800589c:	4630      	mov	r0, r6
 800589e:	2301      	movs	r3, #1
 80058a0:	f002 f952 	bl	8007b48 <_ZN3spi8transmitEmm>
  txdt = value;
 80058a4:	2340      	movs	r3, #64	; 0x40
 80058a6:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058aa:	2301      	movs	r3, #1
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	f10d 080e 	add.w	r8, sp, #14
 80058b2:	6821      	ldr	r1, [r4, #0]
 80058b4:	4630      	mov	r0, r6
 80058b6:	4643      	mov	r3, r8
 80058b8:	462a      	mov	r2, r5
 80058ba:	f002 f9f1 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058be:	88a1      	ldrh	r1, [r4, #4]
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	f001 fd19 	bl	80072f8 <gpio_set>
  return response;
 80058c6:	e004      	b.n	80058d2 <_ZN6sx127x9endPacketEb+0x5e>
 80058c8:	f10d 050f 	add.w	r5, sp, #15
 80058cc:	ae04      	add	r6, sp, #16
 80058ce:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 80058d2:	88a1      	ldrh	r1, [r4, #4]
 80058d4:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058d6:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 80058da:	f001 fd15 	bl	8007308 <gpio_reset>
  txdt = address;
 80058de:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058e2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058e4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058e8:	464b      	mov	r3, r9
 80058ea:	462a      	mov	r2, r5
 80058ec:	4630      	mov	r0, r6
 80058ee:	f002 f92b 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058f2:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 80058f6:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058f8:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058fa:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058fe:	4630      	mov	r0, r6
 8005900:	4643      	mov	r3, r8
 8005902:	462a      	mov	r2, r5
 8005904:	f002 f9cc 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005908:	88a1      	ldrh	r1, [r4, #4]
 800590a:	68e0      	ldr	r0, [r4, #12]
 800590c:	f001 fcf4 	bl	80072f8 <gpio_set>
	if(!async){
 8005910:	2f00      	cmp	r7, #0
 8005912:	d13b      	bne.n	800598c <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 8005914:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 8005918:	88a1      	ldrh	r1, [r4, #4]
 800591a:	68e0      	ldr	r0, [r4, #12]
 800591c:	f001 fcf4 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005920:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005922:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005926:	2301      	movs	r3, #1
 8005928:	462a      	mov	r2, r5
 800592a:	4630      	mov	r0, r6
 800592c:	f002 f90c 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005930:	6821      	ldr	r1, [r4, #0]
 8005932:	f8cd 9000 	str.w	r9, [sp]
 8005936:	4643      	mov	r3, r8
 8005938:	462a      	mov	r2, r5
 800593a:	4630      	mov	r0, r6
  txdt = value;
 800593c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005940:	f002 f9ae 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005944:	88a1      	ldrh	r1, [r4, #4]
 8005946:	68e0      	ldr	r0, [r4, #12]
 8005948:	f001 fcd6 	bl	80072f8 <gpio_set>
  return response;
 800594c:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 8005950:	071b      	lsls	r3, r3, #28
 8005952:	d5e1      	bpl.n	8005918 <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 8005954:	88a1      	ldrh	r1, [r4, #4]
 8005956:	68e0      	ldr	r0, [r4, #12]
 8005958:	f001 fcd6 	bl	8007308 <gpio_reset>
  txdt = address;
 800595c:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 800595e:	462a      	mov	r2, r5
 8005960:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005962:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005966:	2301      	movs	r3, #1
 8005968:	4630      	mov	r0, r6
 800596a:	f002 f8ed 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800596e:	f8cd 9000 	str.w	r9, [sp]
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	4630      	mov	r0, r6
 8005976:	462a      	mov	r2, r5
 8005978:	4643      	mov	r3, r8
  txdt = value;
 800597a:	2508      	movs	r5, #8
 800597c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005980:	f002 f98e 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005984:	88a1      	ldrh	r1, [r4, #4]
 8005986:	68e0      	ldr	r0, [r4, #12]
 8005988:	f001 fcb6 	bl	80072f8 <gpio_set>
}
 800598c:	2001      	movs	r0, #1
 800598e:	b006      	add	sp, #24
 8005990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005994 <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 8005994:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005996:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 8005998:	b087      	sub	sp, #28
 800599a:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 800599c:	68c0      	ldr	r0, [r0, #12]
 800599e:	f001 fcb3 	bl	8007308 <gpio_reset>
  txdt = address;
 80059a2:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059a4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059a6:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059aa:	f10d 020f 	add.w	r2, sp, #15
 80059ae:	a804      	add	r0, sp, #16
 80059b0:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059b2:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059b4:	f002 f8c8 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059b8:	6821      	ldr	r1, [r4, #0]
 80059ba:	9500      	str	r5, [sp, #0]
 80059bc:	f10d 030e 	add.w	r3, sp, #14
 80059c0:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 80059c4:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059c8:	a804      	add	r0, sp, #16
  txdt = value;
 80059ca:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059ce:	f002 f967 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059d2:	68e0      	ldr	r0, [r4, #12]
 80059d4:	88a1      	ldrh	r1, [r4, #4]
 80059d6:	f001 fc8f 	bl	80072f8 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 80059da:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <_ZN6sx127x10packetRssiEv+0x5c>)
 80059dc:	6a23      	ldr	r3, [r4, #32]
  return response;
 80059de:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 80059e2:	4293      	cmp	r3, r2
 80059e4:	bfd4      	ite	le
 80059e6:	23a4      	movle	r3, #164	; 0xa4
 80059e8:	239d      	movgt	r3, #157	; 0x9d
}
 80059ea:	1ac0      	subs	r0, r0, r3
 80059ec:	b007      	add	sp, #28
 80059ee:	bd30      	pop	{r4, r5, pc}
 80059f0:	1f4add3f 	.word	0x1f4add3f

080059f4 <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 80059f4:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 80059f6:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 80059f8:	b087      	sub	sp, #28
 80059fa:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 80059fc:	68c0      	ldr	r0, [r0, #12]
 80059fe:	f001 fc83 	bl	8007308 <gpio_reset>
  txdt = address;
 8005a02:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a04:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a06:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a0a:	f10d 020f 	add.w	r2, sp, #15
 8005a0e:	a804      	add	r0, sp, #16
 8005a10:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a12:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a14:	f002 f898 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a18:	6821      	ldr	r1, [r4, #0]
 8005a1a:	9500      	str	r5, [sp, #0]
 8005a1c:	f10d 030e 	add.w	r3, sp, #14
 8005a20:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005a24:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a28:	a804      	add	r0, sp, #16
  txdt = value;
 8005a2a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a2e:	f002 f937 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a32:	68e0      	ldr	r0, [r4, #12]
 8005a34:	88a1      	ldrh	r1, [r4, #4]
 8005a36:	f001 fc5f 	bl	80072f8 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005a3a:	4a05      	ldr	r2, [pc, #20]	; (8005a50 <_ZN6sx127x4rssiEv+0x5c>)
 8005a3c:	6a23      	ldr	r3, [r4, #32]
 8005a3e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005a42:	4293      	cmp	r3, r2
 8005a44:	bfd4      	ite	le
 8005a46:	23a4      	movle	r3, #164	; 0xa4
 8005a48:	239d      	movgt	r3, #157	; 0x9d
}
 8005a4a:	1ac0      	subs	r0, r0, r3
 8005a4c:	b007      	add	sp, #28
 8005a4e:	bd30      	pop	{r4, r5, pc}
 8005a50:	1f4add3f 	.word	0x1f4add3f

08005a54 <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	4604      	mov	r4, r0
 8005a5a:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005a5c:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005a5e:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005a60:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005a62:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005a64:	f001 fc50 	bl	8007308 <gpio_reset>
  txdt = address;
 8005a68:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a6a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a6c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a70:	f10d 020f 	add.w	r2, sp, #15
 8005a74:	2301      	movs	r3, #1
 8005a76:	a804      	add	r0, sp, #16
 8005a78:	f002 f866 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6821      	ldr	r1, [r4, #0]
 8005a82:	f10d 030e 	add.w	r3, sp, #14
 8005a86:	f10d 020f 	add.w	r2, sp, #15
 8005a8a:	a804      	add	r0, sp, #16
  txdt = value;
 8005a8c:	2600      	movs	r6, #0
 8005a8e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a92:	f002 f905 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a96:	88a1      	ldrh	r1, [r4, #4]
 8005a98:	68e0      	ldr	r0, [r4, #12]
 8005a9a:	f001 fc2d 	bl	80072f8 <gpio_set>
  return response;
 8005a9e:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 8005aa2:	eb03 0a09 	add.w	sl, r3, r9
 8005aa6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8005aaa:	bf84      	itt	hi
 8005aac:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005ab0:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 8005ab4:	f1b9 0f00 	cmp.w	r9, #0
 8005ab8:	d025      	beq.n	8005b06 <_ZN6sx127x8transmitEPKhj+0xb2>
 8005aba:	3d01      	subs	r5, #1
 8005abc:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 8005ac0:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ac4:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8005ac6:	88a1      	ldrh	r1, [r4, #4]
 8005ac8:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005aca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 8005ace:	f001 fc1b 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ad2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ad4:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f10d 020f 	add.w	r2, sp, #15
 8005ade:	a804      	add	r0, sp, #16
 8005ae0:	f002 f832 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ae4:	6821      	ldr	r1, [r4, #0]
 8005ae6:	9700      	str	r7, [sp, #0]
 8005ae8:	a804      	add	r0, sp, #16
 8005aea:	f10d 030e 	add.w	r3, sp, #14
 8005aee:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005af2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005af6:	f002 f8d3 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005afa:	88a1      	ldrh	r1, [r4, #4]
 8005afc:	68e0      	ldr	r0, [r4, #12]
 8005afe:	f001 fbfb 	bl	80072f8 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b02:	45ab      	cmp	fp, r5
 8005b04:	d1df      	bne.n	8005ac6 <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 8005b06:	88a1      	ldrh	r1, [r4, #4]
 8005b08:	68e0      	ldr	r0, [r4, #12]
 8005b0a:	f001 fbfd 	bl	8007308 <gpio_reset>
  txdt = address;
 8005b0e:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b10:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b12:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b16:	f10d 020f 	add.w	r2, sp, #15
 8005b1a:	a804      	add	r0, sp, #16
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f002 f813 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b22:	2101      	movs	r1, #1
 8005b24:	9100      	str	r1, [sp, #0]
 8005b26:	6821      	ldr	r1, [r4, #0]
 8005b28:	a804      	add	r0, sp, #16
 8005b2a:	f10d 030e 	add.w	r3, sp, #14
 8005b2e:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8005b32:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 8005b36:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b3a:	f002 f8b1 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b3e:	68e0      	ldr	r0, [r4, #12]
 8005b40:	88a1      	ldrh	r1, [r4, #4]
 8005b42:	f001 fbd9 	bl	80072f8 <gpio_set>
}
 8005b46:	4648      	mov	r0, r9
 8005b48:	b007      	add	sp, #28
 8005b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4e:	bf00      	nop

08005b50 <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 8005b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b54:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 8005b56:	b086      	sub	sp, #24
 8005b58:	4604      	mov	r4, r0
 8005b5a:	4689      	mov	r9, r1
  txdt = address;
 8005b5c:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b60:	2701      	movs	r7, #1
  txdt = value;
 8005b62:	462e      	mov	r6, r5
 8005b64:	e020      	b.n	8005ba8 <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 8005b66:	88a1      	ldrh	r1, [r4, #4]
 8005b68:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 8005b6a:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005b6c:	f001 fbcc 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b70:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b72:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b76:	2301      	movs	r3, #1
 8005b78:	f10d 020f 	add.w	r2, sp, #15
 8005b7c:	a804      	add	r0, sp, #16
 8005b7e:	f001 ffe3 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b82:	6821      	ldr	r1, [r4, #0]
 8005b84:	9700      	str	r7, [sp, #0]
 8005b86:	f10d 030e 	add.w	r3, sp, #14
 8005b8a:	f10d 020f 	add.w	r2, sp, #15
 8005b8e:	a804      	add	r0, sp, #16
  txdt = value;
 8005b90:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b94:	f002 f884 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b98:	88a1      	ldrh	r1, [r4, #4]
 8005b9a:	68e0      	ldr	r0, [r4, #12]
 8005b9c:	f001 fbac 	bl	80072f8 <gpio_set>
  return response;
 8005ba0:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 8005ba4:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 8005ba8:	88a1      	ldrh	r1, [r4, #4]
 8005baa:	68e0      	ldr	r0, [r4, #12]
 8005bac:	f001 fbac 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bb0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005bb2:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bb6:	f10d 020f 	add.w	r2, sp, #15
 8005bba:	a804      	add	r0, sp, #16
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	f001 ffc3 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bc2:	6821      	ldr	r1, [r4, #0]
 8005bc4:	9700      	str	r7, [sp, #0]
 8005bc6:	f10d 030e 	add.w	r3, sp, #14
 8005bca:	f10d 020f 	add.w	r2, sp, #15
 8005bce:	a804      	add	r0, sp, #16
  txdt = value;
 8005bd0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bd4:	f002 f864 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005bd8:	68e0      	ldr	r0, [r4, #12]
 8005bda:	88a1      	ldrh	r1, [r4, #4]
 8005bdc:	f001 fb8c 	bl	80072f8 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005be0:	69a0      	ldr	r0, [r4, #24]
  return response;
 8005be2:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 8005be6:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005be8:	b2c0      	uxtb	r0, r0
	while(available()){
 8005bea:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 8005bec:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 8005bf0:	f105 0501 	add.w	r5, r5, #1
 8005bf4:	d1b7      	bne.n	8005b66 <_ZN6sx127x7receiveEPc+0x16>
}
 8005bf6:	b006      	add	sp, #24
 8005bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005bfc <_ZN6sx127x10receive_itEh>:
void sx127x::receive_it(uint8_t size){
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005c00:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::receive_it(uint8_t size){
 8005c02:	b086      	sub	sp, #24
 8005c04:	4604      	mov	r4, r0
 8005c06:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80d4 	beq.w	8005db6 <_ZN6sx127x10receive_itEh+0x1ba>
  gpio_reset(_csport, _cs);
 8005c0e:	8881      	ldrh	r1, [r0, #4]
 8005c10:	68c0      	ldr	r0, [r0, #12]
 8005c12:	f001 fb79 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c16:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 8005c1a:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c1c:	ae04      	add	r6, sp, #16
 8005c1e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c20:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c24:	462a      	mov	r2, r5
 8005c26:	2301      	movs	r3, #1
 8005c28:	4630      	mov	r0, r6
 8005c2a:	f001 ff8d 	bl	8007b48 <_ZN3spi8transmitEmm>
  txdt = value;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c34:	2301      	movs	r3, #1
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	f10d 080e 	add.w	r8, sp, #14
 8005c3c:	6821      	ldr	r1, [r4, #0]
 8005c3e:	4630      	mov	r0, r6
 8005c40:	4643      	mov	r3, r8
 8005c42:	462a      	mov	r2, r5
 8005c44:	f002 f82c 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c48:	88a1      	ldrh	r1, [r4, #4]
 8005c4a:	68e0      	ldr	r0, [r4, #12]
 8005c4c:	f001 fb54 	bl	80072f8 <gpio_set>
	if (size > 0) {
 8005c50:	2f00      	cmp	r7, #0
 8005c52:	d07c      	beq.n	8005d4e <_ZN6sx127x10receive_itEh+0x152>
	_implicitHeaderMode = 1;
 8005c54:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005c58:	88a1      	ldrh	r1, [r4, #4]
 8005c5a:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005c5c:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 8005c60:	f001 fb52 	bl	8007308 <gpio_reset>
  txdt = address;
 8005c64:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c68:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c6a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c6e:	464b      	mov	r3, r9
 8005c70:	462a      	mov	r2, r5
 8005c72:	4630      	mov	r0, r6
 8005c74:	f001 ff68 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c78:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005c7c:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c80:	4643      	mov	r3, r8
 8005c82:	462a      	mov	r2, r5
 8005c84:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005c86:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f002 f808 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c90:	88a1      	ldrh	r1, [r4, #4]
 8005c92:	68e0      	ldr	r0, [r4, #12]
 8005c94:	f001 fb30 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005c98:	88a1      	ldrh	r1, [r4, #4]
 8005c9a:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005c9c:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 8005ca0:	f001 fb32 	bl	8007308 <gpio_reset>
  txdt = address;
 8005ca4:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ca8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005caa:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cae:	464b      	mov	r3, r9
 8005cb0:	462a      	mov	r2, r5
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f001 ff48 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cb8:	f8cd 9000 	str.w	r9, [sp]
 8005cbc:	4643      	mov	r3, r8
 8005cbe:	462a      	mov	r2, r5
 8005cc0:	6821      	ldr	r1, [r4, #0]
 8005cc2:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005cc4:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 8005cc8:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ccc:	f001 ffe8 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005cd0:	88a1      	ldrh	r1, [r4, #4]
 8005cd2:	68e0      	ldr	r0, [r4, #12]
 8005cd4:	f001 fb10 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005cd8:	88a1      	ldrh	r1, [r4, #4]
 8005cda:	68e0      	ldr	r0, [r4, #12]
 8005cdc:	f001 fb14 	bl	8007308 <gpio_reset>
  txdt = address;
 8005ce0:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ce4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ce6:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cea:	464b      	mov	r3, r9
 8005cec:	462a      	mov	r2, r5
 8005cee:	4630      	mov	r0, r6
 8005cf0:	f001 ff2a 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cf4:	f8cd 9000 	str.w	r9, [sp]
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005cfe:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d02:	4630      	mov	r0, r6
 8005d04:	f001 ffcc 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d08:	88a1      	ldrh	r1, [r4, #4]
 8005d0a:	68e0      	ldr	r0, [r4, #12]
 8005d0c:	f001 faf4 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d10:	88a1      	ldrh	r1, [r4, #4]
 8005d12:	68e0      	ldr	r0, [r4, #12]
 8005d14:	f001 faf8 	bl	8007308 <gpio_reset>
  txdt = address;
 8005d18:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d1a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d1c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d20:	462a      	mov	r2, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	2301      	movs	r3, #1
 8005d26:	f001 ff0f 	bl	8007b48 <_ZN3spi8transmitEmm>
  txdt = value;
 8005d2a:	2185      	movs	r1, #133	; 0x85
 8005d2c:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d30:	2101      	movs	r1, #1
 8005d32:	9100      	str	r1, [sp, #0]
 8005d34:	6821      	ldr	r1, [r4, #0]
 8005d36:	4630      	mov	r0, r6
 8005d38:	4643      	mov	r3, r8
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	f001 ffb0 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d40:	88a1      	ldrh	r1, [r4, #4]
 8005d42:	68e0      	ldr	r0, [r4, #12]
 8005d44:	f001 fad8 	bl	80072f8 <gpio_set>
}
 8005d48:	b006      	add	sp, #24
 8005d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d4e:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005d52:	88a1      	ldrh	r1, [r4, #4]
 8005d54:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005d56:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005d58:	f001 fad6 	bl	8007308 <gpio_reset>
  txdt = address;
 8005d5c:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d60:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d62:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d66:	464b      	mov	r3, r9
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f001 feec 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d70:	f8cd 9000 	str.w	r9, [sp]
 8005d74:	4643      	mov	r3, r8
 8005d76:	462a      	mov	r2, r5
 8005d78:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005d7a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f001 ff8e 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d84:	88a1      	ldrh	r1, [r4, #4]
 8005d86:	68e0      	ldr	r0, [r4, #12]
 8005d88:	f001 fab6 	bl	80072f8 <gpio_set>
  return response;
 8005d8c:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8005d90:	88a1      	ldrh	r1, [r4, #4]
 8005d92:	68e0      	ldr	r0, [r4, #12]
 8005d94:	f001 fab8 	bl	8007308 <gpio_reset>
  txdt = address;
 8005d98:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d9c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d9e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005da2:	464b      	mov	r3, r9
 8005da4:	462a      	mov	r2, r5
 8005da6:	4630      	mov	r0, r6
 8005da8:	f001 fece 	bl	8007b48 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005dac:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005db0:	f8cd 9000 	str.w	r9, [sp]
 8005db4:	e7a0      	b.n	8005cf8 <_ZN6sx127x10receive_itEh+0xfc>
 8005db6:	f10d 050f 	add.w	r5, sp, #15
 8005dba:	ae04      	add	r6, sp, #16
 8005dbc:	f10d 080e 	add.w	r8, sp, #14
 8005dc0:	e746      	b.n	8005c50 <_ZN6sx127x10receive_itEh+0x54>
 8005dc2:	bf00      	nop

08005dc4 <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 8005dc4:	b530      	push	{r4, r5, lr}
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	b087      	sub	sp, #28
 8005dca:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005dcc:	68c0      	ldr	r0, [r0, #12]
 8005dce:	88a1      	ldrh	r1, [r4, #4]
 8005dd0:	f001 fa9a 	bl	8007308 <gpio_reset>
  txdt = address;
 8005dd4:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005dd6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005dd8:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ddc:	f10d 020f 	add.w	r2, sp, #15
 8005de0:	a804      	add	r0, sp, #16
 8005de2:	2301      	movs	r3, #1
 8005de4:	f001 feb0 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005de8:	2301      	movs	r3, #1
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005dee:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005df2:	a804      	add	r0, sp, #16
 8005df4:	f10d 030e 	add.w	r3, sp, #14
 8005df8:	f10d 020f 	add.w	r2, sp, #15
 8005dfc:	f001 ff50 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e00:	88a1      	ldrh	r1, [r4, #4]
 8005e02:	68e0      	ldr	r0, [r4, #12]
 8005e04:	f001 fa78 	bl	80072f8 <gpio_set>
}
 8005e08:	b007      	add	sp, #28
 8005e0a:	bd30      	pop	{r4, r5, pc}

08005e0c <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 8005e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 8005e10:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 8005e12:	b086      	sub	sp, #24
 8005e14:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005e16:	68c0      	ldr	r0, [r0, #12]
 8005e18:	f001 fa76 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e1c:	2301      	movs	r3, #1
  txdt = address;
 8005e1e:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e20:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e22:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 8005e26:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e2a:	a804      	add	r0, sp, #16
 8005e2c:	6821      	ldr	r1, [r4, #0]
 8005e2e:	f001 fe8b 	bl	8007b48 <_ZN3spi8transmitEmm>
  txdt = value;
 8005e32:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e34:	9600      	str	r6, [sp, #0]
 8005e36:	f10d 020f 	add.w	r2, sp, #15
 8005e3a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005e3c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e40:	a804      	add	r0, sp, #16
 8005e42:	f10d 030e 	add.w	r3, sp, #14
 8005e46:	f001 ff2b 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e4a:	88a1      	ldrh	r1, [r4, #4]
 8005e4c:	68e0      	ldr	r0, [r4, #12]
 8005e4e:	f001 fa53 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005e52:	88a1      	ldrh	r1, [r4, #4]
 8005e54:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005e56:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 8005e5a:	f001 fa55 	bl	8007308 <gpio_reset>
  txdt = address;
 8005e5e:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e62:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e64:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e68:	4633      	mov	r3, r6
 8005e6a:	f10d 020f 	add.w	r2, sp, #15
 8005e6e:	a804      	add	r0, sp, #16
 8005e70:	f001 fe6a 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e74:	9600      	str	r6, [sp, #0]
 8005e76:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005e78:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e7c:	a804      	add	r0, sp, #16
 8005e7e:	f10d 030e 	add.w	r3, sp, #14
 8005e82:	f10d 020f 	add.w	r2, sp, #15
 8005e86:	f001 ff0b 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e8a:	88a1      	ldrh	r1, [r4, #4]
 8005e8c:	68e0      	ldr	r0, [r4, #12]
 8005e8e:	f001 fa33 	bl	80072f8 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8005e92:	f015 0720 	ands.w	r7, r5, #32
 8005e96:	d16d      	bne.n	8005f74 <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 8005e98:	066a      	lsls	r2, r5, #25
 8005e9a:	d569      	bpl.n	8005f70 <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005e9c:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005e9e:	88a1      	ldrh	r1, [r4, #4]
 8005ea0:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 8005ea2:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	d168      	bne.n	8005f7a <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 8005ea8:	f001 fa2e 	bl	8007308 <gpio_reset>
  txdt = address;
 8005eac:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eae:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005eb0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eb4:	4633      	mov	r3, r6
 8005eb6:	f10d 020f 	add.w	r2, sp, #15
 8005eba:	a804      	add	r0, sp, #16
 8005ebc:	f001 fe44 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ec0:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005ec2:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ec6:	f10d 030e 	add.w	r3, sp, #14
 8005eca:	f10d 020f 	add.w	r2, sp, #15
 8005ece:	6821      	ldr	r1, [r4, #0]
 8005ed0:	a804      	add	r0, sp, #16
 8005ed2:	f001 fee5 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ed6:	88a1      	ldrh	r1, [r4, #4]
 8005ed8:	68e0      	ldr	r0, [r4, #12]
 8005eda:	f001 fa0d 	bl	80072f8 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ede:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 8005ee0:	88a1      	ldrh	r1, [r4, #4]
 8005ee2:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005ee4:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 8005ee8:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 8005eea:	f001 fa0d 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eee:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ef0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ef4:	462b      	mov	r3, r5
 8005ef6:	f10d 020f 	add.w	r2, sp, #15
 8005efa:	a804      	add	r0, sp, #16
 8005efc:	f001 fe24 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f00:	9500      	str	r5, [sp, #0]
 8005f02:	f10d 030e 	add.w	r3, sp, #14
 8005f06:	f10d 020f 	add.w	r2, sp, #15
 8005f0a:	eb0d 0006 	add.w	r0, sp, r6
 8005f0e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f10:	2600      	movs	r6, #0
 8005f12:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f16:	f001 fec3 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f1a:	88a1      	ldrh	r1, [r4, #4]
 8005f1c:	68e0      	ldr	r0, [r4, #12]
 8005f1e:	f001 f9eb 	bl	80072f8 <gpio_set>
  gpio_reset(_csport, _cs);
 8005f22:	88a1      	ldrh	r1, [r4, #4]
 8005f24:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005f26:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 8005f2a:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 8005f2c:	f001 f9ec 	bl	8007308 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f30:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f32:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f36:	462b      	mov	r3, r5
 8005f38:	f10d 020f 	add.w	r2, sp, #15
 8005f3c:	a804      	add	r0, sp, #16
 8005f3e:	f001 fe03 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f42:	9500      	str	r5, [sp, #0]
 8005f44:	f10d 030e 	add.w	r3, sp, #14
 8005f48:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f4a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f4e:	f10d 020f 	add.w	r2, sp, #15
 8005f52:	a804      	add	r0, sp, #16
 8005f54:	f001 fea4 	bl	8007ca0 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f58:	88a1      	ldrh	r1, [r4, #4]
 8005f5a:	68e0      	ldr	r0, [r4, #12]
 8005f5c:	f001 f9cc 	bl	80072f8 <gpio_set>
			if (RxDoneHandler) {
 8005f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005f62:	b13b      	cbz	r3, 8005f74 <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8005f64:	4641      	mov	r1, r8
 8005f66:	4620      	mov	r0, r4
}
 8005f68:	b006      	add	sp, #24
 8005f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 8005f6e:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 8005f70:	072b      	lsls	r3, r5, #28
 8005f72:	d412      	bmi.n	8005f9a <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 8005f74:	b006      	add	sp, #24
 8005f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 8005f7a:	f001 f9c5 	bl	8007308 <gpio_reset>
  txdt = address;
 8005f7e:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f80:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f82:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f86:	4633      	mov	r3, r6
 8005f88:	f10d 020f 	add.w	r2, sp, #15
 8005f8c:	a804      	add	r0, sp, #16
 8005f8e:	f001 fddb 	bl	8007b48 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f92:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005f94:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f98:	e795      	b.n	8005ec6 <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 8005f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0e9      	beq.n	8005f74 <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 8005fa0:	4620      	mov	r0, r4
}
 8005fa2:	b006      	add	sp, #24
 8005fa4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 8005fa8:	4718      	bx	r3
 8005faa:	bf00      	nop

08005fac <_ZL14wifiif_request10wifi_cmd_tPc>:

static int wifiif_is_err(char *str){
	return strcmp(str, "ERR");
}

static void wifiif_request(wifi_cmd_t cmd, char *data){
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	b08d      	sub	sp, #52	; 0x34
 8005fb2:	460b      	mov	r3, r1
	char *cmd_str = cmd_to_str(cmd, command_string);
 8005fb4:	4997      	ldr	r1, [pc, #604]	; (8006214 <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
static void wifiif_request(wifi_cmd_t cmd, char *data){
 8005fb6:	9303      	str	r3, [sp, #12]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8005fb8:	f7ff f870 	bl	800509c <cmd_to_str>
	if(xSemaphoreTake(s_transmit, 10)){
 8005fbc:	4f96      	ldr	r7, [pc, #600]	; (8006218 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
	char *req_data;
	asprintf(&req_data, "%s: %s", cmd_str, data);
 8005fbe:	4997      	ldr	r1, [pc, #604]	; (800621c <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
 8005fc0:	9b03      	ldr	r3, [sp, #12]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8005fc2:	4602      	mov	r2, r0
	asprintf(&req_data, "%s: %s", cmd_str, data);
 8005fc4:	a805      	add	r0, sp, #20
 8005fc6:	f006 f96b 	bl	800c2a0 <asiprintf>
	if(xSemaphoreTake(s_transmit, 10)){
 8005fca:	6838      	ldr	r0, [r7, #0]
	wifiif_transmit(req_data);
 8005fcc:	9d05      	ldr	r5, [sp, #20]
	if(xSemaphoreTake(s_transmit, 10)){
 8005fce:	210a      	movs	r1, #10
 8005fd0:	f7fc f988 	bl	80022e4 <xQueueSemaphoreTake>
 8005fd4:	b320      	cbz	r0, 8006020 <_ZL14wifiif_request10wifi_cmd_tPc+0x74>
		int16_t len = strlen(str);
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f7fa f914 	bl	8000204 <strlen>
 8005fdc:	b204      	sxth	r4, r0
		while(remaining > 0){
 8005fde:	2c00      	cmp	r4, #0
 8005fe0:	f340 80e9 	ble.w	80061b6 <_ZL14wifiif_request10wifi_cmd_tPc+0x20a>
			if(fprequest) fprequest(str, sendSize);
 8005fe4:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8006250 <_ZL14wifiif_request10wifi_cmd_tPc+0x2a4>
 8005fe8:	f8d8 3000 	ldr.w	r3, [r8]
			int16_t sendSize = (remaining > MAX_UART_TX_BUFFER_SIZE)? MAX_UART_TX_BUFFER_SIZE : remaining;
 8005fec:	2c64      	cmp	r4, #100	; 0x64
 8005fee:	4622      	mov	r2, r4
 8005ff0:	bfa8      	it	ge
 8005ff2:	2264      	movge	r2, #100	; 0x64
			if(fprequest) fprequest(str, sendSize);
 8005ff4:	b296      	uxth	r6, r2
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	4631      	mov	r1, r6
			str += sendSize;
 8005ffa:	4415      	add	r5, r2
			if(fprequest) fprequest(str, sendSize);
 8005ffc:	b153      	cbz	r3, 8006014 <_ZL14wifiif_request10wifi_cmd_tPc+0x68>
			remaining -= sendSize;
 8005ffe:	1ba4      	subs	r4, r4, r6
 8006000:	b224      	sxth	r4, r4
			if(fprequest) fprequest(str, sendSize);
 8006002:	4798      	blx	r3
		while(remaining > 0){
 8006004:	2c00      	cmp	r4, #0
		if(fprequest) fprequest((char *)"\r\nend\r\n", 7);
 8006006:	f8d8 3000 	ldr.w	r3, [r8]
		while(remaining > 0){
 800600a:	dcef      	bgt.n	8005fec <_ZL14wifiif_request10wifi_cmd_tPc+0x40>
		if(fprequest) fprequest((char *)"\r\nend\r\n", 7);
 800600c:	b113      	cbz	r3, 8006014 <_ZL14wifiif_request10wifi_cmd_tPc+0x68>
 800600e:	4884      	ldr	r0, [pc, #528]	; (8006220 <_ZL14wifiif_request10wifi_cmd_tPc+0x274>)
 8006010:	2107      	movs	r1, #7
 8006012:	4798      	blx	r3
		xSemaphoreGive(s_transmit);
 8006014:	2300      	movs	r3, #0
 8006016:	6838      	ldr	r0, [r7, #0]
 8006018:	461a      	mov	r2, r3
 800601a:	4619      	mov	r1, r3
 800601c:	f7fb fd6c 	bl	8001af8 <xQueueGenericSend>
#if ENABLE_COMPONENT_WIFIIF_DEBUG
//	wifiif_debug(req_data, __LINE__, __FUNCTION__);
#endif /* ENABLE_COMPONENT_WIFIIF_DEBUG */
	free(req_data);
 8006020:	9805      	ldr	r0, [sp, #20]
 8006022:	f006 f99d 	bl	800c360 <free>

	if(xQueueSemaphoreTake(s_response, WIFI_DEFAULT_TIMEOUT)){
 8006026:	4b7f      	ldr	r3, [pc, #508]	; (8006224 <_ZL14wifiif_request10wifi_cmd_tPc+0x278>)
 8006028:	f643 2198 	movw	r1, #15000	; 0x3a98
 800602c:	6818      	ldr	r0, [r3, #0]
 800602e:	f7fc f959 	bl	80022e4 <xQueueSemaphoreTake>
 8006032:	4604      	mov	r4, r0
 8006034:	2800      	cmp	r0, #0
 8006036:	f000 8097 	beq.w	8006168 <_ZL14wifiif_request10wifi_cmd_tPc+0x1bc>
 	   uint8_t queue_len = uxQueueMessagesWaiting(q_response);
 800603a:	4e7b      	ldr	r6, [pc, #492]	; (8006228 <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
		char *response_data;
		pkt_t pkt;
 800603c:	2200      	movs	r2, #0
 800603e:	2300      	movs	r3, #0
 	   uint8_t queue_len = uxQueueMessagesWaiting(q_response);
 8006040:	6830      	ldr	r0, [r6, #0]
		pkt_t pkt;
 8006042:	e9cd 2306 	strd	r2, r3, [sp, #24]
 	   uint8_t queue_len = uxQueueMessagesWaiting(q_response);
 8006046:	f7fc fb35 	bl	80026b4 <uxQueueMessagesWaiting>
 	   for(uint8_t i=0; i<queue_len; i++){
 800604a:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 800604e:	f000 80ac 	beq.w	80061aa <_ZL14wifiif_request10wifi_cmd_tPc+0x1fe>
 8006052:	2400      	movs	r4, #0
 	   uint16_t total_len = 0;
 8006054:	46a0      	mov	r8, r4
 8006056:	af09      	add	r7, sp, #36	; 0x24
 8006058:	e002      	b.n	8006060 <_ZL14wifiif_request10wifi_cmd_tPc+0xb4>
 	   for(uint8_t i=0; i<queue_len; i++){
 800605a:	b2e3      	uxtb	r3, r4
 800605c:	42ab      	cmp	r3, r5
 800605e:	d217      	bcs.n	8006090 <_ZL14wifiif_request10wifi_cmd_tPc+0xe4>
 		   if(xQueueReceive(q_response, &break_data, 10) == pdTRUE){
 8006060:	6830      	ldr	r0, [r6, #0]
 8006062:	220a      	movs	r2, #10
 8006064:	4639      	mov	r1, r7
 8006066:	f7fb ffbb 	bl	8001fe0 <xQueueReceive>
 800606a:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 800606c:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(q_response, &break_data, 10) == pdTRUE){
 8006070:	d1f3      	bne.n	800605a <_ZL14wifiif_request10wifi_cmd_tPc+0xae>
 			   total_len += strlen(break_data);
 8006072:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006074:	f7fa f8c6 	bl	8000204 <strlen>
 8006078:	4440      	add	r0, r8
 			   xQueueSend(q_response, &break_data, 10);
 800607a:	2300      	movs	r3, #0
 			   total_len += strlen(break_data);
 800607c:	fa1f f880 	uxth.w	r8, r0
 			   xQueueSend(q_response, &break_data, 10);
 8006080:	220a      	movs	r2, #10
 8006082:	6830      	ldr	r0, [r6, #0]
 8006084:	4639      	mov	r1, r7
 8006086:	f7fb fd37 	bl	8001af8 <xQueueGenericSend>
 	   for(uint8_t i=0; i<queue_len; i++){
 800608a:	b2e3      	uxtb	r3, r4
 800608c:	42ab      	cmp	r3, r5
 800608e:	d3e7      	bcc.n	8006060 <_ZL14wifiif_request10wifi_cmd_tPc+0xb4>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 8006090:	f108 0001 	add.w	r0, r8, #1
 8006094:	f006 f95c 	bl	800c350 <malloc>
 8006098:	2400      	movs	r4, #0
 800609a:	4681      	mov	r9, r0
 800609c:	4682      	mov	sl, r0
 800609e:	e002      	b.n	80060a6 <_ZL14wifiif_request10wifi_cmd_tPc+0xfa>
 	   for(uint8_t i=0; i<queue_len; i++){
 80060a0:	b2e3      	uxtb	r3, r4
 80060a2:	429d      	cmp	r5, r3
 80060a4:	d919      	bls.n	80060da <_ZL14wifiif_request10wifi_cmd_tPc+0x12e>
 		   if(xQueueReceive(q_response, &break_data, 10) == pdTRUE){
 80060a6:	6830      	ldr	r0, [r6, #0]
 80060a8:	220a      	movs	r2, #10
 80060aa:	4639      	mov	r1, r7
 80060ac:	f7fb ff98 	bl	8001fe0 <xQueueReceive>
 80060b0:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 80060b2:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(q_response, &break_data, 10) == pdTRUE){
 80060b6:	d1f3      	bne.n	80060a0 <_ZL14wifiif_request10wifi_cmd_tPc+0xf4>
 			   uint16_t len = strlen(break_data);
 80060b8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80060bc:	4658      	mov	r0, fp
 80060be:	f7fa f8a1 	bl	8000204 <strlen>
 			   memcpy(tmp_data, break_data, len);
 80060c2:	4659      	mov	r1, fp
 80060c4:	b282      	uxth	r2, r0
 80060c6:	4650      	mov	r0, sl
 			   tmp_data += len;
 80060c8:	4492      	add	sl, r2
 			   memcpy(tmp_data, break_data, len);
 80060ca:	f006 f951 	bl	800c370 <memcpy>
 			   free(break_data);
 80060ce:	4658      	mov	r0, fp
 80060d0:	f006 f946 	bl	800c360 <free>
 	   for(uint8_t i=0; i<queue_len; i++){
 80060d4:	b2e3      	uxtb	r3, r4
 80060d6:	429d      	cmp	r5, r3
 80060d8:	d8e5      	bhi.n	80060a6 <_ZL14wifiif_request10wifi_cmd_tPc+0xfa>
 	  (*dest_buffer)[total_len] = '\0';
 80060da:	44c8      	add	r8, r9
 80060dc:	2300      	movs	r3, #0
 80060de:	f888 3000 	strb.w	r3, [r8]
		pkt_err_t err = PKT_ERR_OK;

		wifiif_merge_data(&response_data);
		err = parse_packet(response_data, &pkt);
 80060e2:	a906      	add	r1, sp, #24
 80060e4:	4648      	mov	r0, r9
 80060e6:	f7fe ff63 	bl	8004fb0 <parse_packet>
		if(err != PKT_ERR_OK){
 80060ea:	4604      	mov	r4, r0
 80060ec:	bb80      	cbnz	r0, 8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0x1a4>
			release_packet(&pkt);
			if(response_data != NULL) free(response_data);

			return;
		}
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 80060ee:	9e07      	ldr	r6, [sp, #28]
	return strcmp(str, "ERR");
 80060f0:	494e      	ldr	r1, [pc, #312]	; (800622c <_ZL14wifiif_request10wifi_cmd_tPc+0x280>)
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7fa f87c 	bl	80001f0 <strcmp>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 80060f8:	4605      	mov	r5, r0
 80060fa:	2800      	cmp	r0, #0
 80060fc:	d045      	beq.n	800618a <_ZL14wifiif_request10wifi_cmd_tPc+0x1de>
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 80060fe:	4630      	mov	r0, r6
 8006100:	f7fa f880 	bl	8000204 <strlen>
 8006104:	4605      	mov	r5, r0
 8006106:	3001      	adds	r0, #1
 8006108:	f006 f922 	bl	800c350 <malloc>
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 800610c:	462a      	mov	r2, r5
 800610e:	4631      	mov	r1, r6
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 8006110:	4680      	mov	r8, r0
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 8006112:	f006 f92d 	bl	800c370 <memcpy>
			data[strlen(pkt.data_str)] = '\0';
 8006116:	4630      	mov	r0, r6
 8006118:	f7fa f874 	bl	8000204 <strlen>

			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 800611c:	493d      	ldr	r1, [pc, #244]	; (8006214 <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
			data[strlen(pkt.data_str)] = '\0';
 800611e:	f808 4000 	strb.w	r4, [r8, r0]
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 8006122:	220b      	movs	r2, #11
 8006124:	9806      	ldr	r0, [sp, #24]
 8006126:	f7fe ffa3 	bl	8005070 <str_to_cmd>
 800612a:	b2c5      	uxtb	r5, r0
			if(command == WIFI_CHECK_CONNECTION){
 800612c:	2d01      	cmp	r5, #1
 800612e:	d04d      	beq.n	80061cc <_ZL14wifiif_request10wifi_cmd_tPc+0x220>
						wifi_connected = false;
					}
				}
				json_release_object(&json);
			}
			if(command == WIFI_RESTART || command == WIFI_REQUIRE_CONNECT){
 8006130:	1eab      	subs	r3, r5, #2
 8006132:	2b01      	cmp	r3, #1
 8006134:	d842      	bhi.n	80061bc <_ZL14wifiif_request10wifi_cmd_tPc+0x210>
				wifi_state = false;
 8006136:	4b3e      	ldr	r3, [pc, #248]	; (8006230 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
 8006138:	701c      	strb	r4, [r3, #0]
				wifi_connected = false;
 800613a:	4b3e      	ldr	r3, [pc, #248]	; (8006234 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 800613c:	701c      	strb	r4, [r3, #0]
			else if(command == WIFI_CONNECT){
				wifi_state = true;
				wifi_connected = true;
			}

			if(fpcommand_handler) fpcommand_handler(command, data);
 800613e:	4b3e      	ldr	r3, [pc, #248]	; (8006238 <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	b113      	cbz	r3, 800614a <_ZL14wifiif_request10wifi_cmd_tPc+0x19e>
 8006144:	4628      	mov	r0, r5
 8006146:	4641      	mov	r1, r8
 8006148:	4798      	blx	r3

			if(data != NULL) free(data);
 800614a:	4640      	mov	r0, r8
 800614c:	f006 f908 	bl	800c360 <free>
		}
		else{ // Wifi command error.
			wifiif_debug((char *)"WiFi module error", __LINE__, __FUNCTION__);
			if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
		}
		release_packet(&pkt);
 8006150:	a806      	add	r0, sp, #24
 8006152:	f7fe ff7d 	bl	8005050 <release_packet>
		if(response_data != NULL) free(response_data);
 8006156:	f1b9 0f00 	cmp.w	r9, #0
 800615a:	d013      	beq.n	8006184 <_ZL14wifiif_request10wifi_cmd_tPc+0x1d8>
 800615c:	4648      	mov	r0, r9
	else{
		wifiif_debug((char *)"WiFi module not response the request", __LINE__, __FUNCTION__);
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
	}

}
 800615e:	b00d      	add	sp, #52	; 0x34
 8006160:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(response_data != NULL) free(response_data);
 8006164:	f006 b8fc 	b.w	800c360 <free>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8006168:	4b34      	ldr	r3, [pc, #208]	; (800623c <_ZL14wifiif_request10wifi_cmd_tPc+0x290>)
 800616a:	9300      	str	r3, [sp, #0]
 800616c:	4a34      	ldr	r2, [pc, #208]	; (8006240 <_ZL14wifiif_request10wifi_cmd_tPc+0x294>)
 800616e:	4935      	ldr	r1, [pc, #212]	; (8006244 <_ZL14wifiif_request10wifi_cmd_tPc+0x298>)
 8006170:	4835      	ldr	r0, [pc, #212]	; (8006248 <_ZL14wifiif_request10wifi_cmd_tPc+0x29c>)
 8006172:	23ba      	movs	r3, #186	; 0xba
 8006174:	f004 fe1a 	bl	800adac <LOG_DEBUG>
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8006178:	4b2f      	ldr	r3, [pc, #188]	; (8006238 <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	b113      	cbz	r3, 8006184 <_ZL14wifiif_request10wifi_cmd_tPc+0x1d8>
 800617e:	4621      	mov	r1, r4
 8006180:	4620      	mov	r0, r4
 8006182:	4798      	blx	r3
}
 8006184:	b00d      	add	sp, #52	; 0x34
 8006186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800618a:	4b2c      	ldr	r3, [pc, #176]	; (800623c <_ZL14wifiif_request10wifi_cmd_tPc+0x290>)
 800618c:	9300      	str	r3, [sp, #0]
 800618e:	4a2f      	ldr	r2, [pc, #188]	; (800624c <_ZL14wifiif_request10wifi_cmd_tPc+0x2a0>)
 8006190:	492c      	ldr	r1, [pc, #176]	; (8006244 <_ZL14wifiif_request10wifi_cmd_tPc+0x298>)
 8006192:	482d      	ldr	r0, [pc, #180]	; (8006248 <_ZL14wifiif_request10wifi_cmd_tPc+0x29c>)
 8006194:	23b3      	movs	r3, #179	; 0xb3
 8006196:	f004 fe09 	bl	800adac <LOG_DEBUG>
			if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 800619a:	4b27      	ldr	r3, [pc, #156]	; (8006238 <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d0d6      	beq.n	8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0x1a4>
 80061a2:	4629      	mov	r1, r5
 80061a4:	4628      	mov	r0, r5
 80061a6:	4798      	blx	r3
 80061a8:	e7d2      	b.n	8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0x1a4>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 80061aa:	2001      	movs	r0, #1
 80061ac:	f006 f8d0 	bl	800c350 <malloc>
 80061b0:	4681      	mov	r9, r0
 80061b2:	4680      	mov	r8, r0
 80061b4:	e792      	b.n	80060dc <_ZL14wifiif_request10wifi_cmd_tPc+0x130>
		if(fprequest) fprequest((char *)"\r\nend\r\n", 7);
 80061b6:	4b26      	ldr	r3, [pc, #152]	; (8006250 <_ZL14wifiif_request10wifi_cmd_tPc+0x2a4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	e727      	b.n	800600c <_ZL14wifiif_request10wifi_cmd_tPc+0x60>
			else if(command == WIFI_CONNECT){
 80061bc:	2d04      	cmp	r5, #4
 80061be:	d1be      	bne.n	800613e <_ZL14wifiif_request10wifi_cmd_tPc+0x192>
				wifi_state = true;
 80061c0:	491b      	ldr	r1, [pc, #108]	; (8006230 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
				wifi_connected = true;
 80061c2:	4a1c      	ldr	r2, [pc, #112]	; (8006234 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
				wifi_state = true;
 80061c4:	2301      	movs	r3, #1
 80061c6:	700b      	strb	r3, [r1, #0]
				wifi_connected = true;
 80061c8:	7013      	strb	r3, [r2, #0]
 80061ca:	e7b8      	b.n	800613e <_ZL14wifiif_request10wifi_cmd_tPc+0x192>
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"state");
 80061cc:	af09      	add	r7, sp, #36	; 0x24
 80061ce:	4a21      	ldr	r2, [pc, #132]	; (8006254 <_ZL14wifiif_request10wifi_cmd_tPc+0x2a8>)
 80061d0:	9807      	ldr	r0, [sp, #28]
				pkt_json_t json;
 80061d2:	9409      	str	r4, [sp, #36]	; 0x24
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"state");
 80061d4:	4639      	mov	r1, r7
				pkt_json_t json;
 80061d6:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 80061da:	940b      	str	r4, [sp, #44]	; 0x2c
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"state");
 80061dc:	f7fe fdca 	bl	8004d74 <json_get_object>
				if(err == PKT_ERR_OK){
 80061e0:	b948      	cbnz	r0, 80061f6 <_ZL14wifiif_request10wifi_cmd_tPc+0x24a>
					if(strcmp(json.value, "connected") == 0) {
 80061e2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80061e4:	491c      	ldr	r1, [pc, #112]	; (8006258 <_ZL14wifiif_request10wifi_cmd_tPc+0x2ac>)
 80061e6:	4620      	mov	r0, r4
 80061e8:	f7fa f802 	bl	80001f0 <strcmp>
 80061ec:	b938      	cbnz	r0, 80061fe <_ZL14wifiif_request10wifi_cmd_tPc+0x252>
						wifi_state = true;
 80061ee:	4b10      	ldr	r3, [pc, #64]	; (8006230 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
 80061f0:	701d      	strb	r5, [r3, #0]
						wifi_connected = true;
 80061f2:	4b10      	ldr	r3, [pc, #64]	; (8006234 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 80061f4:	701d      	strb	r5, [r3, #0]
				json_release_object(&json);
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7fe fec8 	bl	8004f8c <json_release_object>
			if(command == WIFI_RESTART || command == WIFI_REQUIRE_CONNECT){
 80061fc:	e79f      	b.n	800613e <_ZL14wifiif_request10wifi_cmd_tPc+0x192>
					else if(strcmp(json.value, "disconnected") == 0) {
 80061fe:	4917      	ldr	r1, [pc, #92]	; (800625c <_ZL14wifiif_request10wifi_cmd_tPc+0x2b0>)
 8006200:	4620      	mov	r0, r4
 8006202:	f7f9 fff5 	bl	80001f0 <strcmp>
 8006206:	2800      	cmp	r0, #0
 8006208:	d1f5      	bne.n	80061f6 <_ZL14wifiif_request10wifi_cmd_tPc+0x24a>
						wifi_state = false;
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
 800620c:	7018      	strb	r0, [r3, #0]
						wifi_connected = false;
 800620e:	4b09      	ldr	r3, [pc, #36]	; (8006234 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 8006210:	7018      	strb	r0, [r3, #0]
 8006212:	e7f0      	b.n	80061f6 <_ZL14wifiif_request10wifi_cmd_tPc+0x24a>
 8006214:	20000034 	.word	0x20000034
 8006218:	2000b2a4 	.word	0x2000b2a4
 800621c:	08011224 	.word	0x08011224
 8006220:	0801122c 	.word	0x0801122c
 8006224:	2000b2a0 	.word	0x2000b2a0
 8006228:	2000b29c 	.word	0x2000b29c
 800622c:	08011c40 	.word	0x08011c40
 8006230:	2000b2a8 	.word	0x2000b2a8
 8006234:	2000b2a9 	.word	0x2000b2a9
 8006238:	2000b2ac 	.word	0x2000b2ac
 800623c:	08011274 	.word	0x08011274
 8006240:	08011284 	.word	0x08011284
 8006244:	08010d3c 	.word	0x08010d3c
 8006248:	0801126c 	.word	0x0801126c
 800624c:	08011258 	.word	0x08011258
 8006250:	2000b2b0 	.word	0x2000b2b0
 8006254:	08011234 	.word	0x08011234
 8006258:	0801123c 	.word	0x0801123c
 800625c:	08011248 	.word	0x08011248

08006260 <wifiif_get_break_data>:
void wifiif_get_break_data(char *brk_data){
 8006260:	b530      	push	{r4, r5, lr}
 8006262:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006264:	2500      	movs	r5, #0
    if(strcmp(brk_data, "\r\nend\r\n") == 0) {
 8006266:	4910      	ldr	r1, [pc, #64]	; (80062a8 <wifiif_get_break_data+0x48>)
void wifiif_get_break_data(char *brk_data){
 8006268:	9001      	str	r0, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800626a:	9503      	str	r5, [sp, #12]
    if(strcmp(brk_data, "\r\nend\r\n") == 0) {
 800626c:	4604      	mov	r4, r0
 800626e:	f7f9 ffbf 	bl	80001f0 <strcmp>
 8006272:	b948      	cbnz	r0, 8006288 <wifiif_get_break_data+0x28>
    	free(brk_data);
 8006274:	4620      	mov	r0, r4
 8006276:	f006 f873 	bl	800c360 <free>
    	xSemaphoreGiveFromISR(s_response, &xHigherPriorityTaskWoken);
 800627a:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <wifiif_get_break_data+0x4c>)
 800627c:	a903      	add	r1, sp, #12
 800627e:	6818      	ldr	r0, [r3, #0]
 8006280:	f7fb fe56 	bl	8001f30 <xQueueGiveFromISR>
}
 8006284:	b005      	add	sp, #20
 8006286:	bd30      	pop	{r4, r5, pc}
    	if(xQueueSendFromISR(q_response, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <wifiif_get_break_data+0x50>)
 800628a:	462b      	mov	r3, r5
 800628c:	6810      	ldr	r0, [r2, #0]
 800628e:	a901      	add	r1, sp, #4
 8006290:	aa03      	add	r2, sp, #12
 8006292:	f7fb fde7 	bl	8001e64 <xQueueGenericSendFromISR>
 8006296:	2801      	cmp	r0, #1
 8006298:	d0f4      	beq.n	8006284 <wifiif_get_break_data+0x24>
 800629a:	4906      	ldr	r1, [pc, #24]	; (80062b4 <wifiif_get_break_data+0x54>)
 800629c:	4806      	ldr	r0, [pc, #24]	; (80062b8 <wifiif_get_break_data+0x58>)
 800629e:	f004 fd47 	bl	800ad30 <LOG_ERROR>
}
 80062a2:	b005      	add	sp, #20
 80062a4:	bd30      	pop	{r4, r5, pc}
 80062a6:	bf00      	nop
 80062a8:	0801122c 	.word	0x0801122c
 80062ac:	2000b2a0 	.word	0x2000b2a0
 80062b0:	2000b29c 	.word	0x2000b29c
 80062b4:	080112ac 	.word	0x080112ac
 80062b8:	0801126c 	.word	0x0801126c

080062bc <wifiif_init>:

/**
 * WiFi setup function.
 */
void wifiif_init(void (*prequest)(char *, uint16_t)){
 80062bc:	b570      	push	{r4, r5, r6, lr}
	fprequest = prequest;
 80062be:	4c12      	ldr	r4, [pc, #72]	; (8006308 <wifiif_init+0x4c>)

	q_response = xQueueCreate(20, sizeof(char *));
	s_transmit = xSemaphoreCreateBinary();
 80062c0:	4d12      	ldr	r5, [pc, #72]	; (800630c <wifiif_init+0x50>)
void wifiif_init(void (*prequest)(char *, uint16_t)){
 80062c2:	4603      	mov	r3, r0
	q_response = xQueueCreate(20, sizeof(char *));
 80062c4:	2200      	movs	r2, #0
 80062c6:	2104      	movs	r1, #4
 80062c8:	2014      	movs	r0, #20
	fprequest = prequest;
 80062ca:	6023      	str	r3, [r4, #0]
	q_response = xQueueCreate(20, sizeof(char *));
 80062cc:	f7fb fbd2 	bl	8001a74 <xQueueGenericCreate>
 80062d0:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <wifiif_init+0x54>)
	s_transmit = xSemaphoreCreateBinary();
 80062d2:	2203      	movs	r2, #3
	q_response = xQueueCreate(20, sizeof(char *));
 80062d4:	6018      	str	r0, [r3, #0]
	s_transmit = xSemaphoreCreateBinary();
 80062d6:	2100      	movs	r1, #0
 80062d8:	2001      	movs	r0, #1
 80062da:	f7fb fbcb 	bl	8001a74 <xQueueGenericCreate>
	s_response = xSemaphoreCreateBinary();
 80062de:	2203      	movs	r2, #3
	s_transmit = xSemaphoreCreateBinary();
 80062e0:	6028      	str	r0, [r5, #0]
	s_response = xSemaphoreCreateBinary();
 80062e2:	2100      	movs	r1, #0
 80062e4:	2001      	movs	r0, #1
 80062e6:	f7fb fbc5 	bl	8001a74 <xQueueGenericCreate>
 80062ea:	4a0a      	ldr	r2, [pc, #40]	; (8006314 <wifiif_init+0x58>)
	xSemaphoreGive(s_transmit);
 80062ec:	2300      	movs	r3, #0
	s_response = xSemaphoreCreateBinary();
 80062ee:	4601      	mov	r1, r0
 80062f0:	6011      	str	r1, [r2, #0]
	xSemaphoreGive(s_transmit);
 80062f2:	6828      	ldr	r0, [r5, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	461a      	mov	r2, r3
 80062f8:	f7fb fbfe 	bl	8001af8 <xQueueGenericSend>

	fprequest((char *)"\r\nend\r\n", 7);
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	4806      	ldr	r0, [pc, #24]	; (8006318 <wifiif_init+0x5c>)
}
 8006300:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	fprequest((char *)"\r\nend\r\n", 7);
 8006304:	2107      	movs	r1, #7
 8006306:	4718      	bx	r3
 8006308:	2000b2b0 	.word	0x2000b2b0
 800630c:	2000b2a4 	.word	0x2000b2a4
 8006310:	2000b29c 	.word	0x2000b29c
 8006314:	2000b2a0 	.word	0x2000b2a0
 8006318:	0801122c 	.word	0x0801122c

0800631c <wifiif_register_command_handler>:

void wifiif_register_command_handler(void (*pcommand_handler)(wifi_cmd_t cmd, void *param)){
	fpcommand_handler = pcommand_handler;
 800631c:	4b01      	ldr	r3, [pc, #4]	; (8006324 <wifiif_register_command_handler+0x8>)
 800631e:	6018      	str	r0, [r3, #0]
}
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000b2ac 	.word	0x2000b2ac

08006328 <wifiif_check_connection>:
	wifi_state = false;
	wifi_connected = false;
}

void wifiif_check_connection(void){
	wifiif_request(WIFI_CHECK_CONNECTION, (char *)"{}");
 8006328:	4901      	ldr	r1, [pc, #4]	; (8006330 <wifiif_check_connection+0x8>)
 800632a:	2001      	movs	r0, #1
 800632c:	f7ff be3e 	b.w	8005fac <_ZL14wifiif_request10wifi_cmd_tPc>
 8006330:	080112c0 	.word	0x080112c0

08006334 <wifiif_wifi_connect>:
}

void wifiif_wifi_connect(char *ssid, char *pass, char *auth){
 8006334:	b510      	push	{r4, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	4614      	mov	r4, r2
 800633a:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"ssid\":\"%s\",\"pass\":\"%s\",\"auth\":\"%s\"}", ssid, pass, auth);
 800633c:	4602      	mov	r2, r0
 800633e:	4907      	ldr	r1, [pc, #28]	; (800635c <wifiif_wifi_connect+0x28>)
 8006340:	9400      	str	r4, [sp, #0]
 8006342:	a803      	add	r0, sp, #12
 8006344:	f005 ffac 	bl	800c2a0 <asiprintf>

	wifiif_request(WIFI_CONNECT, data);
 8006348:	9903      	ldr	r1, [sp, #12]
 800634a:	2004      	movs	r0, #4
 800634c:	f7ff fe2e 	bl	8005fac <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 8006350:	9803      	ldr	r0, [sp, #12]
 8006352:	f006 f805 	bl	800c360 <free>
}
 8006356:	b004      	add	sp, #16
 8006358:	bd10      	pop	{r4, pc}
 800635a:	bf00      	nop
 800635c:	080112c4 	.word	0x080112c4

08006360 <wifiif_firebase_init>:
}

/**
 * Firebase.
 */
void wifiif_firebase_init(char *project_url, char *auth){
 8006360:	b500      	push	{lr}
 8006362:	4602      	mov	r2, r0
 8006364:	b083      	sub	sp, #12
	char *buffer;

	if(auth != NULL)
 8006366:	b171      	cbz	r1, 8006386 <wifiif_firebase_init+0x26>
		asprintf(&buffer, "{\"url\":\"%s\",\"auth\":\"%s\"}", project_url, auth);
 8006368:	460b      	mov	r3, r1
 800636a:	a801      	add	r0, sp, #4
 800636c:	4908      	ldr	r1, [pc, #32]	; (8006390 <wifiif_firebase_init+0x30>)
 800636e:	f005 ff97 	bl	800c2a0 <asiprintf>
	else
		asprintf(&buffer, "{\"url\":\"%s\"}", project_url);

	wifiif_request(WIFI_FIREBASE_INIT, buffer);
 8006372:	9901      	ldr	r1, [sp, #4]
 8006374:	2006      	movs	r0, #6
 8006376:	f7ff fe19 	bl	8005fac <_ZL14wifiif_request10wifi_cmd_tPc>
	free(buffer);
 800637a:	9801      	ldr	r0, [sp, #4]
 800637c:	f005 fff0 	bl	800c360 <free>
}
 8006380:	b003      	add	sp, #12
 8006382:	f85d fb04 	ldr.w	pc, [sp], #4
		asprintf(&buffer, "{\"url\":\"%s\"}", project_url);
 8006386:	4903      	ldr	r1, [pc, #12]	; (8006394 <wifiif_firebase_init+0x34>)
 8006388:	a801      	add	r0, sp, #4
 800638a:	f005 ff89 	bl	800c2a0 <asiprintf>
 800638e:	e7f0      	b.n	8006372 <wifiif_firebase_init+0x12>
 8006390:	080112ec 	.word	0x080112ec
 8006394:	08011308 	.word	0x08011308

08006398 <wifiif_firebase_set_data>:


void wifiif_firebase_set_data(char *path, char *data){
 8006398:	b510      	push	{r4, lr}
 800639a:	460c      	mov	r4, r1
 800639c:	b082      	sub	sp, #8
 800639e:	4602      	mov	r2, r0
	char *buffer;

	asprintf(&buffer, "{\"path\":\"%s\",\"jsondata\":%s}", path, data);
 80063a0:	4623      	mov	r3, r4
 80063a2:	4907      	ldr	r1, [pc, #28]	; (80063c0 <wifiif_firebase_set_data+0x28>)
 80063a4:	a801      	add	r0, sp, #4
 80063a6:	f005 ff7b 	bl	800c2a0 <asiprintf>
	wifiif_request(WIFI_FIREBASE_SET_DATA, buffer);
 80063aa:	9901      	ldr	r1, [sp, #4]
 80063ac:	2007      	movs	r0, #7
 80063ae:	f7ff fdfd 	bl	8005fac <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 80063b2:	4620      	mov	r0, r4
}
 80063b4:	b002      	add	sp, #8
 80063b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free(data);
 80063ba:	f005 bfd1 	b.w	800c360 <free>
 80063be:	bf00      	nop
 80063c0:	08011318 	.word	0x08011318

080063c4 <wifiif_firebase_get_data>:

void wifiif_firebase_get_data(char *path){
 80063c4:	b500      	push	{lr}
 80063c6:	b083      	sub	sp, #12
 80063c8:	4602      	mov	r2, r0
	char *buffer;
	asprintf(&buffer, "{\"path\":\"%s\"}", path);
 80063ca:	4907      	ldr	r1, [pc, #28]	; (80063e8 <wifiif_firebase_get_data+0x24>)
 80063cc:	a801      	add	r0, sp, #4
 80063ce:	f005 ff67 	bl	800c2a0 <asiprintf>

	wifiif_request(WIFI_FIREBASE_GET_DATA, buffer);
 80063d2:	9901      	ldr	r1, [sp, #4]
 80063d4:	2008      	movs	r0, #8
 80063d6:	f7ff fde9 	bl	8005fac <_ZL14wifiif_request10wifi_cmd_tPc>

	free(buffer);
 80063da:	9801      	ldr	r0, [sp, #4]
 80063dc:	f005 ffc0 	bl	800c360 <free>
}
 80063e0:	b003      	add	sp, #12
 80063e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80063e6:	bf00      	nop
 80063e8:	08011334 	.word	0x08011334

080063ec <wifiif_firebase_remove_data>:

void wifiif_firebase_remove_data(char *path){
 80063ec:	b500      	push	{lr}
 80063ee:	b083      	sub	sp, #12
 80063f0:	4602      	mov	r2, r0
	char *buffer;
	asprintf(&buffer, "{\"path\":\"%s\"}", path);
 80063f2:	4907      	ldr	r1, [pc, #28]	; (8006410 <wifiif_firebase_remove_data+0x24>)
 80063f4:	a801      	add	r0, sp, #4
 80063f6:	f005 ff53 	bl	800c2a0 <asiprintf>

	wifiif_request(WIFI_FIREBASE_REMOVE_DATA, buffer);
 80063fa:	9901      	ldr	r1, [sp, #4]
 80063fc:	2009      	movs	r0, #9
 80063fe:	f7ff fdd5 	bl	8005fac <_ZL14wifiif_request10wifi_cmd_tPc>

	free(buffer);
 8006402:	9801      	ldr	r0, [sp, #4]
 8006404:	f005 ffac 	bl	800c360 <free>
}
 8006408:	b003      	add	sp, #12
 800640a:	f85d fb04 	ldr.w	pc, [sp], #4
 800640e:	bf00      	nop
 8006410:	08011334 	.word	0x08011334

08006414 <wifiif_wificonnected>:

bool wifiif_state_is_running(void){
	return wifi_state;
}
bool wifiif_wificonnected(void){
	return wifi_connected;
 8006414:	4b01      	ldr	r3, [pc, #4]	; (800641c <wifiif_wificonnected+0x8>)
 8006416:	7818      	ldrb	r0, [r3, #0]
}
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	2000b2a9 	.word	0x2000b2a9

08006420 <ADC_IRQHandler>:



void ADC_IRQHandler(adc *adc){

}
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	0000      	movs	r0, r0
	...

08006428 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef>:
	_adc = adc;
 8006428:	a10f      	add	r1, pc, #60	; (adr r1, 8006468 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x40>)
 800642a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800642e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8006450 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x28>
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x30>)
 8006434:	4a09      	ldr	r2, [pc, #36]	; (800645c <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x34>)
 8006436:	ed83 7b00 	vstr	d7, [r3]
 800643a:	e9c2 0100 	strd	r0, r1, [r2]
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x38>)
 8006440:	4808      	ldr	r0, [pc, #32]	; (8006464 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x3c>)
 8006442:	2100      	movs	r1, #0
 8006444:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(ADC3)
adc adc_3(ADC3);
adc_t adc3;
void ADC3_IRQHandler(void){
	ADC_IRQHandler(adc3);
}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w
 8006450:	40012000 	.word	0x40012000
 8006454:	00000000 	.word	0x00000000
 8006458:	2000b2b8 	.word	0x2000b2b8
 800645c:	2000b2c0 	.word	0x2000b2c0
 8006460:	2000b2c8 	.word	0x2000b2c8
 8006464:	40012200 	.word	0x40012200
 8006468:	40012100 	.word	0x40012100
 800646c:	00000000 	.word	0x00000000

08006470 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 8006470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006472:	460e      	mov	r6, r1
	stm_ret_t ret;
 8006474:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 8006476:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 8006478:	7002      	strb	r2, [r0, #0]
 800647a:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 800647c:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 800647e:	b085      	sub	sp, #20
 8006480:	4604      	mov	r4, r0
	stm_ret_t ret;
 8006482:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 8006484:	d006      	beq.n	8006494 <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 8006486:	f240 122b 	movw	r2, #299	; 0x12b
 800648a:	f004 fd85 	bl	800af98 <set_return>
		return ret;
	}

	return ret;
}
 800648e:	4620      	mov	r0, r4
 8006490:	b005      	add	sp, #20
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8006494:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8006496:	68f1      	ldr	r1, [r6, #12]
 8006498:	680d      	ldr	r5, [r1, #0]
 800649a:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 800649c:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 800649e:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 80064a2:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80064a4:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 80064a6:	6969      	ldr	r1, [r5, #20]
 80064a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064ac:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80064ae:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80064b0:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80064b2:	f021 0101 	bic.w	r1, r1, #1
 80064b6:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80064b8:	9000      	str	r0, [sp, #0]
 80064ba:	4629      	mov	r1, r5
 80064bc:	4638      	mov	r0, r7
 80064be:	f004 fd2f 	bl	800af20 <wait_flag_in_register_timeout>
 80064c2:	e897 0003 	ldmia.w	r7, {r0, r1}
 80064c6:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 80064ca:	4620      	mov	r0, r4
 80064cc:	f004 fd72 	bl	800afb4 <is_timeout>
 80064d0:	bb20      	cbnz	r0, 800651c <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064d2:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 80064d4:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064d6:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 80064d8:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064dc:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 80064de:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064e2:	bf94      	ite	ls
 80064e4:	6093      	strls	r3, [r2, #8]
 80064e6:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 80064e8:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80064ec:	2a00      	cmp	r2, #0
 80064ee:	dbce      	blt.n	800648e <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064f0:	0953      	lsrs	r3, r2, #5
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80064f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80064fc:	2101      	movs	r1, #1
 80064fe:	f002 021f 	and.w	r2, r2, #31
 8006502:	fa01 f202 	lsl.w	r2, r1, r2
 8006506:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800650a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800650e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006512:	f3bf 8f6f 	isb	sy
}
 8006516:	4620      	mov	r0, r4
 8006518:	b005      	add	sp, #20
 800651a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 800651c:	4620      	mov	r0, r4
 800651e:	f240 1119 	movw	r1, #281	; 0x119
 8006522:	f004 fd3d 	bl	800afa0 <set_return_line>
}
 8006526:	4620      	mov	r0, r4
 8006528:	b005      	add	sp, #20
 800652a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800652c <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 800652c:	68c3      	ldr	r3, [r0, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 8006532:	b280      	uxth	r0, r0
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop

08006538 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 8006538:	68c0      	ldr	r0, [r0, #12]
 800653a:	4770      	bx	lr

0800653c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 800653c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 8006540:	4857      	ldr	r0, [pc, #348]	; (80066a0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 8006542:	f8df e188 	ldr.w	lr, [pc, #392]	; 80066cc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 8006546:	4f57      	ldr	r7, [pc, #348]	; (80066a4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 8006548:	4e57      	ldr	r6, [pc, #348]	; (80066a8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 800654a:	f8df b184 	ldr.w	fp, [pc, #388]	; 80066d0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 800654e:	f8df a184 	ldr.w	sl, [pc, #388]	; 80066d4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 8006552:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80066d8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 8006556:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80066dc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 800655a:	f8df c184 	ldr.w	ip, [pc, #388]	; 80066e0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 800655e:	4953      	ldr	r1, [pc, #332]	; (80066ac <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 8006560:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 8006564:	2300      	movs	r3, #0
 8006566:	2205      	movs	r2, #5
 8006568:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 800656c:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 8006570:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 8006574:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 8006578:	f8c9 3014 	str.w	r3, [r9, #20]
 800657c:	e9cb 3308 	strd	r3, r3, [fp, #32]
 8006580:	f8c8 3014 	str.w	r3, [r8, #20]
 8006584:	e9ca 3308 	strd	r3, r3, [sl, #32]
 8006588:	e9c9 3308 	strd	r3, r3, [r9, #32]
 800658c:	e9c8 3308 	strd	r3, r3, [r8, #32]
 8006590:	f8cb 2010 	str.w	r2, [fp, #16]
 8006594:	f8cb 3018 	str.w	r3, [fp, #24]
 8006598:	f88b 301c 	strb.w	r3, [fp, #28]
 800659c:	f8ca 2010 	str.w	r2, [sl, #16]
 80065a0:	f8ca 3018 	str.w	r3, [sl, #24]
 80065a4:	f88a 301c 	strb.w	r3, [sl, #28]
 80065a8:	f8c9 2010 	str.w	r2, [r9, #16]
 80065ac:	f8c9 3018 	str.w	r3, [r9, #24]
 80065b0:	f889 301c 	strb.w	r3, [r9, #28]
 80065b4:	f8c8 2010 	str.w	r2, [r8, #16]
 80065b8:	f8c8 3018 	str.w	r3, [r8, #24]
 80065bc:	f888 301c 	strb.w	r3, [r8, #28]
 80065c0:	f8ce 2010 	str.w	r2, [lr, #16]
 80065c4:	f8ce 3014 	str.w	r3, [lr, #20]
 80065c8:	f8ce 3018 	str.w	r3, [lr, #24]
 80065cc:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 80065d0:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 80065d4:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 80065d8:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	6102      	str	r2, [r0, #16]
 80065de:	6173      	str	r3, [r6, #20]
 80065e0:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80065e4:	6143      	str	r3, [r0, #20]
 80065e6:	6132      	str	r2, [r6, #16]
 80065e8:	61b3      	str	r3, [r6, #24]
 80065ea:	7733      	strb	r3, [r6, #28]
 80065ec:	6183      	str	r3, [r0, #24]
 80065ee:	4606      	mov	r6, r0
 80065f0:	7703      	strb	r3, [r0, #28]
 80065f2:	6203      	str	r3, [r0, #32]
 80065f4:	6243      	str	r3, [r0, #36]	; 0x24
 80065f6:	482e      	ldr	r0, [pc, #184]	; (80066b0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	f8ce 1008 	str.w	r1, [lr, #8]
 80065fe:	f8cc 1008 	str.w	r1, [ip, #8]
 8006602:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 8006606:	e9c7 3308 	strd	r3, r3, [r7, #32]
 800660a:	613a      	str	r2, [r7, #16]
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	773b      	strb	r3, [r7, #28]
 8006610:	6102      	str	r2, [r0, #16]
 8006612:	6143      	str	r3, [r0, #20]
 8006614:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8006618:	f8ce 3020 	str.w	r3, [lr, #32]
 800661c:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 8006620:	f8cc 2010 	str.w	r2, [ip, #16]
 8006624:	f8cc 3018 	str.w	r3, [ip, #24]
 8006628:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 800662c:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 800662e:	4e21      	ldr	r6, [pc, #132]	; (80066b4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8006630:	4f21      	ldr	r7, [pc, #132]	; (80066b8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 8006632:	6173      	str	r3, [r6, #20]
 8006634:	4e21      	ldr	r6, [pc, #132]	; (80066bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	6173      	str	r3, [r6, #20]
 800663a:	4e1e      	ldr	r6, [pc, #120]	; (80066b4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 800663c:	4d20      	ldr	r5, [pc, #128]	; (80066c0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 800663e:	6132      	str	r2, [r6, #16]
 8006640:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8006644:	61b3      	str	r3, [r6, #24]
 8006646:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8006648:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 800664a:	6183      	str	r3, [r0, #24]
 800664c:	4e1b      	ldr	r6, [pc, #108]	; (80066bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 800664e:	7703      	strb	r3, [r0, #28]
 8006650:	6203      	str	r3, [r0, #32]
 8006652:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 8006654:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 8006656:	481b      	ldr	r0, [pc, #108]	; (80066c4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 8006658:	4c1b      	ldr	r4, [pc, #108]	; (80066c8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 800665a:	613a      	str	r2, [r7, #16]
 800665c:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8006660:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8006664:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 800666c:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 800666e:	6132      	str	r2, [r6, #16]
 8006670:	61b3      	str	r3, [r6, #24]
 8006672:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8006674:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006676:	612a      	str	r2, [r5, #16]
 8006678:	616b      	str	r3, [r5, #20]
 800667a:	61ab      	str	r3, [r5, #24]
 800667c:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 800667e:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 8006680:	6102      	str	r2, [r0, #16]
 8006682:	7703      	strb	r3, [r0, #28]
 8006684:	6163      	str	r3, [r4, #20]
 8006686:	e9c4 3308 	strd	r3, r3, [r4, #32]
 800668a:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800668e:	6122      	str	r2, [r4, #16]
 8006690:	61a3      	str	r3, [r4, #24]
 8006692:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 8006694:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 8006696:	6143      	str	r3, [r0, #20]
 8006698:	6183      	str	r3, [r0, #24]
	_dma = dma;
 800669a:	6081      	str	r1, [r0, #8]
}
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	2000b410 	.word	0x2000b410
 80066a4:	2000b3c0 	.word	0x2000b3c0
 80066a8:	2000b3e8 	.word	0x2000b3e8
 80066ac:	40026000 	.word	0x40026000
 80066b0:	2000b438 	.word	0x2000b438
 80066b4:	2000b460 	.word	0x2000b460
 80066b8:	2000b488 	.word	0x2000b488
 80066bc:	2000b4b0 	.word	0x2000b4b0
 80066c0:	2000b4d8 	.word	0x2000b4d8
 80066c4:	2000b528 	.word	0x2000b528
 80066c8:	2000b500 	.word	0x2000b500
 80066cc:	2000b370 	.word	0x2000b370
 80066d0:	2000b2d0 	.word	0x2000b2d0
 80066d4:	2000b2f8 	.word	0x2000b2f8
 80066d8:	2000b320 	.word	0x2000b320
 80066dc:	2000b348 	.word	0x2000b348
 80066e0:	2000b398 	.word	0x2000b398

080066e4 <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 80066e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e8:	b083      	sub	sp, #12
	stm_ret_t ret;
 80066ea:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 80066ee:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 80066f2:	f880 c000 	strb.w	ip, [r0]
 80066f6:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 80066f8:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 80066fc:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 80066fe:	f240 8085 	bls.w	800680c <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 8006702:	2a03      	cmp	r2, #3
 8006704:	4604      	mov	r4, r0
 8006706:	d84b      	bhi.n	80067a0 <exti_init+0xbc>
 8006708:	46ae      	mov	lr, r5
 800670a:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 800670c:	1d97      	adds	r7, r2, #6
 800670e:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006710:	2501      	movs	r5, #1
 8006712:	40bd      	lsls	r5, r7
 8006714:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006716:	484d      	ldr	r0, [pc, #308]	; (800684c <exti_init+0x168>)
 8006718:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 800671c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8006720:	d105      	bne.n	800672e <exti_init+0x4a>
 8006722:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8006726:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 800672a:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 800672e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006732:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8006736:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800673a:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 800673e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8006742:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006744:	9801      	ldr	r0, [sp, #4]
 8006746:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 800674a:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800674e:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006752:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006756:	fa09 fe0e 	lsl.w	lr, r9, lr
 800675a:	ea20 000e 	bic.w	r0, r0, lr
 800675e:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	4301      	orrs	r1, r0
 8006764:	9101      	str	r1, [sp, #4]

	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 8006766:	9901      	ldr	r1, [sp, #4]
 8006768:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 800676c:	07db      	lsls	r3, r3, #31
 800676e:	d423      	bmi.n	80067b8 <exti_init+0xd4>
 8006770:	2101      	movs	r1, #1
 8006772:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 8006776:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8006854 <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 800677a:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677c:	4c34      	ldr	r4, [pc, #208]	; (8006850 <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 800677e:	f8dc 1000 	ldr.w	r1, [ip]
 8006782:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8006786:	19e2      	adds	r2, r4, r7
 8006788:	b2db      	uxtb	r3, r3
 800678a:	ea41 010e 	orr.w	r1, r1, lr
 800678e:	f8cc 1000 	str.w	r1, [ip]
 8006792:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006796:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 800679a:	b003      	add	sp, #12
 800679c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 80067a0:	1f10      	subs	r0, r2, #4
 80067a2:	2803      	cmp	r0, #3
 80067a4:	d915      	bls.n	80067d2 <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 80067a6:	f1a2 0008 	sub.w	r0, r2, #8
 80067aa:	2803      	cmp	r0, #3
 80067ac:	d825      	bhi.n	80067fa <exti_init+0x116>
 80067ae:	f04f 0e08 	mov.w	lr, #8
 80067b2:	f04f 0c02 	mov.w	ip, #2
 80067b6:	e012      	b.n	80067de <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 80067b8:	4b26      	ldr	r3, [pc, #152]	; (8006854 <exti_init+0x170>)
 80067ba:	2101      	movs	r1, #1
 80067bc:	fa01 fe02 	lsl.w	lr, r1, r2
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	ea42 020e 	orr.w	r2, r2, lr
 80067c6:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	ea4e 0202 	orr.w	r2, lr, r2
 80067ce:	60da      	str	r2, [r3, #12]
 80067d0:	e7d1      	b.n	8006776 <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 80067d2:	2a04      	cmp	r2, #4
 80067d4:	bf08      	it	eq
 80067d6:	4696      	moveq	lr, r2
 80067d8:	d098      	beq.n	800670c <exti_init+0x28>
 80067da:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 80067de:	1f50      	subs	r0, r2, #5
 80067e0:	b280      	uxth	r0, r0
 80067e2:	2804      	cmp	r0, #4
 80067e4:	bf35      	itete	cc
 80067e6:	2717      	movcc	r7, #23
 80067e8:	2728      	movcs	r7, #40	; 0x28
 80067ea:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 80067ee:	f44f 7580 	movcs.w	r5, #256	; 0x100
 80067f2:	bf34      	ite	cc
 80067f4:	2600      	movcc	r6, #0
 80067f6:	2601      	movcs	r6, #1
 80067f8:	e78d      	b.n	8006716 <exti_init+0x32>
 80067fa:	4666      	mov	r6, ip
 80067fc:	2728      	movs	r7, #40	; 0x28
 80067fe:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006802:	f04f 0e0c 	mov.w	lr, #12
 8006806:	f04f 0c03 	mov.w	ip, #3
 800680a:	e784      	b.n	8006716 <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 800680c:	4629      	mov	r1, r5
 800680e:	223a      	movs	r2, #58	; 0x3a
 8006810:	f004 fbc2 	bl	800af98 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8006814:	4b10      	ldr	r3, [pc, #64]	; (8006858 <exti_init+0x174>)
 8006816:	4a11      	ldr	r2, [pc, #68]	; (800685c <exti_init+0x178>)
 8006818:	4911      	ldr	r1, [pc, #68]	; (8006860 <exti_init+0x17c>)
 800681a:	4812      	ldr	r0, [pc, #72]	; (8006864 <exti_init+0x180>)
 800681c:	f004 fa88 	bl	800ad30 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8006820:	4911      	ldr	r1, [pc, #68]	; (8006868 <exti_init+0x184>)
 8006822:	4810      	ldr	r0, [pc, #64]	; (8006864 <exti_init+0x180>)
 8006824:	2205      	movs	r2, #5
 8006826:	f004 fa07 	bl	800ac38 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 800682a:	f241 3088 	movw	r0, #5000	; 0x1388
 800682e:	f001 fe13 	bl	8008458 <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 8006832:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006836:	490d      	ldr	r1, [pc, #52]	; (800686c <exti_init+0x188>)
 8006838:	4b0d      	ldr	r3, [pc, #52]	; (8006870 <exti_init+0x18c>)
 800683a:	68ca      	ldr	r2, [r1, #12]
 800683c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006840:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006842:	60cb      	str	r3, [r1, #12]
 8006844:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006848:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800684a:	e7fd      	b.n	8006848 <exti_init+0x164>
 800684c:	40023800 	.word	0x40023800
 8006850:	e000e100 	.word	0xe000e100
 8006854:	40013c00 	.word	0x40013c00
 8006858:	08011438 	.word	0x08011438
 800685c:	08011444 	.word	0x08011444
 8006860:	0801146c 	.word	0x0801146c
 8006864:	080114b0 	.word	0x080114b0
 8006868:	080114b8 	.word	0x080114b8
 800686c:	e000ed00 	.word	0xe000ed00
 8006870:	05fa0004 	.word	0x05fa0004

08006874 <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 8006874:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 8006876:	4b04      	ldr	r3, [pc, #16]	; (8006888 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 8006878:	4c04      	ldr	r4, [pc, #16]	; (800688c <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 800687a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 800687e:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 8006882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	2000b590 	.word	0x2000b590
 800688c:	2000b550 	.word	0x2000b550

08006890 <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <EXTI0_IRQHandler+0x1c>)
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	07d2      	lsls	r2, r2, #31
 8006896:	d507      	bpl.n	80068a8 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006898:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 800689a:	2101      	movs	r1, #1
 800689c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800689e:	6813      	ldr	r3, [r2, #0]
 80068a0:	b113      	cbz	r3, 80068a8 <EXTI0_IRQHandler+0x18>
 80068a2:	4a04      	ldr	r2, [pc, #16]	; (80068b4 <EXTI0_IRQHandler+0x24>)
 80068a4:	6810      	ldr	r0, [r2, #0]
 80068a6:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40013c00 	.word	0x40013c00
 80068b0:	2000b550 	.word	0x2000b550
 80068b4:	2000b590 	.word	0x2000b590

080068b8 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80068b8:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <EXTI1_IRQHandler+0x1c>)
 80068ba:	695a      	ldr	r2, [r3, #20]
 80068bc:	0792      	lsls	r2, r2, #30
 80068be:	d507      	bpl.n	80068d0 <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068c0:	4a05      	ldr	r2, [pc, #20]	; (80068d8 <EXTI1_IRQHandler+0x20>)
 80068c2:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 80068c4:	2102      	movs	r1, #2
 80068c6:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068c8:	b112      	cbz	r2, 80068d0 <EXTI1_IRQHandler+0x18>
 80068ca:	4b04      	ldr	r3, [pc, #16]	; (80068dc <EXTI1_IRQHandler+0x24>)
 80068cc:	6858      	ldr	r0, [r3, #4]
 80068ce:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40013c00 	.word	0x40013c00
 80068d8:	2000b550 	.word	0x2000b550
 80068dc:	2000b590 	.word	0x2000b590

080068e0 <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80068e0:	4b06      	ldr	r3, [pc, #24]	; (80068fc <EXTI2_IRQHandler+0x1c>)
 80068e2:	695a      	ldr	r2, [r3, #20]
 80068e4:	0752      	lsls	r2, r2, #29
 80068e6:	d507      	bpl.n	80068f8 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068e8:	4a05      	ldr	r2, [pc, #20]	; (8006900 <EXTI2_IRQHandler+0x20>)
 80068ea:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 80068ec:	2104      	movs	r1, #4
 80068ee:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068f0:	b112      	cbz	r2, 80068f8 <EXTI2_IRQHandler+0x18>
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <EXTI2_IRQHandler+0x24>)
 80068f4:	6898      	ldr	r0, [r3, #8]
 80068f6:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	40013c00 	.word	0x40013c00
 8006900:	2000b550 	.word	0x2000b550
 8006904:	2000b590 	.word	0x2000b590

08006908 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006908:	4b06      	ldr	r3, [pc, #24]	; (8006924 <EXTI3_IRQHandler+0x1c>)
 800690a:	695a      	ldr	r2, [r3, #20]
 800690c:	0712      	lsls	r2, r2, #28
 800690e:	d507      	bpl.n	8006920 <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006910:	4a05      	ldr	r2, [pc, #20]	; (8006928 <EXTI3_IRQHandler+0x20>)
 8006912:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 8006914:	2108      	movs	r1, #8
 8006916:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006918:	b112      	cbz	r2, 8006920 <EXTI3_IRQHandler+0x18>
 800691a:	4b04      	ldr	r3, [pc, #16]	; (800692c <EXTI3_IRQHandler+0x24>)
 800691c:	68d8      	ldr	r0, [r3, #12]
 800691e:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40013c00 	.word	0x40013c00
 8006928:	2000b550 	.word	0x2000b550
 800692c:	2000b590 	.word	0x2000b590

08006930 <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006930:	4b06      	ldr	r3, [pc, #24]	; (800694c <EXTI4_IRQHandler+0x1c>)
 8006932:	695a      	ldr	r2, [r3, #20]
 8006934:	06d2      	lsls	r2, r2, #27
 8006936:	d507      	bpl.n	8006948 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006938:	4a05      	ldr	r2, [pc, #20]	; (8006950 <EXTI4_IRQHandler+0x20>)
 800693a:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 800693c:	2110      	movs	r1, #16
 800693e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006940:	b112      	cbz	r2, 8006948 <EXTI4_IRQHandler+0x18>
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <EXTI4_IRQHandler+0x24>)
 8006944:	6918      	ldr	r0, [r3, #16]
 8006946:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	40013c00 	.word	0x40013c00
 8006950:	2000b550 	.word	0x2000b550
 8006954:	2000b590 	.word	0x2000b590

08006958 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006958:	4b20      	ldr	r3, [pc, #128]	; (80069dc <EXTI9_5_IRQHandler+0x84>)
 800695a:	695a      	ldr	r2, [r3, #20]
 800695c:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 800695e:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006960:	d507      	bpl.n	8006972 <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006962:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <EXTI9_5_IRQHandler+0x88>)
 8006964:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 8006966:	2120      	movs	r1, #32
 8006968:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800696a:	b112      	cbz	r2, 8006972 <EXTI9_5_IRQHandler+0x1a>
 800696c:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <EXTI9_5_IRQHandler+0x8c>)
 800696e:	6958      	ldr	r0, [r3, #20]
 8006970:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006972:	4b1a      	ldr	r3, [pc, #104]	; (80069dc <EXTI9_5_IRQHandler+0x84>)
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	0654      	lsls	r4, r2, #25
 8006978:	d507      	bpl.n	800698a <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800697a:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <EXTI9_5_IRQHandler+0x88>)
 800697c:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 800697e:	2140      	movs	r1, #64	; 0x40
 8006980:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006982:	b112      	cbz	r2, 800698a <EXTI9_5_IRQHandler+0x32>
 8006984:	4b17      	ldr	r3, [pc, #92]	; (80069e4 <EXTI9_5_IRQHandler+0x8c>)
 8006986:	6998      	ldr	r0, [r3, #24]
 8006988:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 800698a:	4b14      	ldr	r3, [pc, #80]	; (80069dc <EXTI9_5_IRQHandler+0x84>)
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	0610      	lsls	r0, r2, #24
 8006990:	d507      	bpl.n	80069a2 <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <EXTI9_5_IRQHandler+0x88>)
 8006994:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800699a:	b112      	cbz	r2, 80069a2 <EXTI9_5_IRQHandler+0x4a>
 800699c:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <EXTI9_5_IRQHandler+0x8c>)
 800699e:	69d8      	ldr	r0, [r3, #28]
 80069a0:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80069a2:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <EXTI9_5_IRQHandler+0x84>)
 80069a4:	695a      	ldr	r2, [r3, #20]
 80069a6:	05d1      	lsls	r1, r2, #23
 80069a8:	d508      	bpl.n	80069bc <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069aa:	4a0d      	ldr	r2, [pc, #52]	; (80069e0 <EXTI9_5_IRQHandler+0x88>)
 80069ac:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 80069ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069b2:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069b4:	b112      	cbz	r2, 80069bc <EXTI9_5_IRQHandler+0x64>
 80069b6:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <EXTI9_5_IRQHandler+0x8c>)
 80069b8:	6a18      	ldr	r0, [r3, #32]
 80069ba:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80069bc:	4b07      	ldr	r3, [pc, #28]	; (80069dc <EXTI9_5_IRQHandler+0x84>)
 80069be:	695a      	ldr	r2, [r3, #20]
 80069c0:	0592      	lsls	r2, r2, #22
 80069c2:	d50a      	bpl.n	80069da <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069c4:	4a06      	ldr	r2, [pc, #24]	; (80069e0 <EXTI9_5_IRQHandler+0x88>)
 80069c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 80069c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069cc:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069ce:	b122      	cbz	r2, 80069da <EXTI9_5_IRQHandler+0x82>
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 80069d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80069d8:	4710      	bx	r2
}
 80069da:	bd10      	pop	{r4, pc}
 80069dc:	40013c00 	.word	0x40013c00
 80069e0:	2000b550 	.word	0x2000b550
 80069e4:	2000b590 	.word	0x2000b590

080069e8 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <EXTI15_10_IRQHandler+0xa4>)
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 80069ee:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 80069f0:	d508      	bpl.n	8006a04 <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069f2:	4a27      	ldr	r2, [pc, #156]	; (8006a90 <EXTI15_10_IRQHandler+0xa8>)
 80069f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 80069f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80069fa:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069fc:	b112      	cbz	r2, 8006a04 <EXTI15_10_IRQHandler+0x1c>
 80069fe:	4b25      	ldr	r3, [pc, #148]	; (8006a94 <EXTI15_10_IRQHandler+0xac>)
 8006a00:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006a02:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a04:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <EXTI15_10_IRQHandler+0xa4>)
 8006a06:	695a      	ldr	r2, [r3, #20]
 8006a08:	0512      	lsls	r2, r2, #20
 8006a0a:	d508      	bpl.n	8006a1e <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a0c:	4a20      	ldr	r2, [pc, #128]	; (8006a90 <EXTI15_10_IRQHandler+0xa8>)
 8006a0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 8006a10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a14:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a16:	b112      	cbz	r2, 8006a1e <EXTI15_10_IRQHandler+0x36>
 8006a18:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <EXTI15_10_IRQHandler+0xac>)
 8006a1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a1c:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a1e:	4b1b      	ldr	r3, [pc, #108]	; (8006a8c <EXTI15_10_IRQHandler+0xa4>)
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	04d4      	lsls	r4, r2, #19
 8006a24:	d508      	bpl.n	8006a38 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <EXTI15_10_IRQHandler+0xa8>)
 8006a28:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 8006a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a2e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a30:	b112      	cbz	r2, 8006a38 <EXTI15_10_IRQHandler+0x50>
 8006a32:	4b18      	ldr	r3, [pc, #96]	; (8006a94 <EXTI15_10_IRQHandler+0xac>)
 8006a34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a36:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a38:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <EXTI15_10_IRQHandler+0xa4>)
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	0490      	lsls	r0, r2, #18
 8006a3e:	d508      	bpl.n	8006a52 <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a40:	4a13      	ldr	r2, [pc, #76]	; (8006a90 <EXTI15_10_IRQHandler+0xa8>)
 8006a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8006a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a48:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a4a:	b112      	cbz	r2, 8006a52 <EXTI15_10_IRQHandler+0x6a>
 8006a4c:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <EXTI15_10_IRQHandler+0xac>)
 8006a4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a50:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <EXTI15_10_IRQHandler+0xa4>)
 8006a54:	695a      	ldr	r2, [r3, #20]
 8006a56:	0451      	lsls	r1, r2, #17
 8006a58:	d508      	bpl.n	8006a6c <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <EXTI15_10_IRQHandler+0xa8>)
 8006a5c:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 8006a5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a62:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a64:	b112      	cbz	r2, 8006a6c <EXTI15_10_IRQHandler+0x84>
 8006a66:	4b0b      	ldr	r3, [pc, #44]	; (8006a94 <EXTI15_10_IRQHandler+0xac>)
 8006a68:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a6a:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a6c:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <EXTI15_10_IRQHandler+0xa4>)
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	0412      	lsls	r2, r2, #16
 8006a72:	d50a      	bpl.n	8006a8a <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a74:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <EXTI15_10_IRQHandler+0xa8>)
 8006a76:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 8006a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a7c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a7e:	b122      	cbz	r2, 8006a8a <EXTI15_10_IRQHandler+0xa2>
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 8006a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a86:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006a88:	4710      	bx	r2
}
 8006a8a:	bd10      	pop	{r4, pc}
 8006a8c:	40013c00 	.word	0x40013c00
 8006a90:	2000b550 	.word	0x2000b550
 8006a94:	2000b590 	.word	0x2000b590

08006a98 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 8006a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006a9c:	4c3a      	ldr	r4, [pc, #232]	; (8006b88 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 8006a9e:	4d3b      	ldr	r5, [pc, #236]	; (8006b8c <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006aa0:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006aa2:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006b94 <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 8006aa6:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006aa8:	4939      	ldr	r1, [pc, #228]	; (8006b90 <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 8006aaa:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 8006aac:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006aae:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ab0:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006ab2:	9b05      	ldr	r3, [sp, #20]
 8006ab4:	ea03 0308 	and.w	r3, r3, r8
 8006ab8:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006aba:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006abc:	bf0c      	ite	eq
 8006abe:	2710      	moveq	r7, #16
 8006ac0:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006ac2:	433b      	orrs	r3, r7
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006aca:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006ace:	9b05      	ldr	r3, [sp, #20]
 8006ad0:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006ad2:	2220      	movs	r2, #32
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	a806      	add	r0, sp, #24
 8006ad8:	9600      	str	r6, [sp, #0]
 8006ada:	f004 fa21 	bl	800af20 <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f001 fcf0 	bl	80084c4 <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006ae6:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006ae8:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006aea:	4929      	ldr	r1, [pc, #164]	; (8006b90 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006aec:	ea03 0308 	and.w	r3, r3, r8
 8006af0:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	433b      	orrs	r3, r7
 8006af6:	f043 0302 	orr.w	r3, r3, #2
 8006afa:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006afc:	9b04      	ldr	r3, [sp, #16]
 8006afe:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b00:	a806      	add	r0, sp, #24
 8006b02:	9600      	str	r6, [sp, #0]
 8006b04:	2300      	movs	r3, #0
 8006b06:	2220      	movs	r2, #32
 8006b08:	f004 fa0a 	bl	800af20 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b0c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b0e:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b10:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b12:	491f      	ldr	r1, [pc, #124]	; (8006b90 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b14:	ea03 0308 	and.w	r3, r3, r8
 8006b18:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	433b      	orrs	r3, r7
 8006b1e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8006b22:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b24:	9b03      	ldr	r3, [sp, #12]
 8006b26:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b28:	a806      	add	r0, sp, #24
 8006b2a:	9600      	str	r6, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f004 f9f6 	bl	800af20 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b34:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b36:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b38:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b3a:	4915      	ldr	r1, [pc, #84]	; (8006b90 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b3c:	ea03 0308 	and.w	r3, r3, r8
 8006b40:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b42:	9b02      	ldr	r3, [sp, #8]
 8006b44:	433b      	orrs	r3, r7
 8006b46:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8006b4a:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006b4e:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b54:	a806      	add	r0, sp, #24
 8006b56:	2300      	movs	r3, #0
 8006b58:	9600      	str	r6, [sp, #0]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f004 f9e0 	bl	800af20 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 8006b60:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b62:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006b64:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006b66:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006b68:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b6c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006b70:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006b72:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006b74:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006b76:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006b7a:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006b7c:	9b06      	ldr	r3, [sp, #24]
 8006b7e:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006b80:	b008      	add	sp, #32
 8006b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b86:	bf00      	nop
 8006b88:	a0000100 	.word	0xa0000100
 8006b8c:	2000b5d0 	.word	0x2000b5d0
 8006b90:	a0000158 	.word	0xa0000158
 8006b94:	ffc00000 	.word	0xffc00000

08006b98 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 8006b9c:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8006ed4 <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 8006ba0:	4ec8      	ldr	r6, [pc, #800]	; (8006ec4 <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 8006ba2:	4dc9      	ldr	r5, [pc, #804]	; (8006ec8 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 8006ba4:	4cc9      	ldr	r4, [pc, #804]	; (8006ecc <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 8006ba6:	4fca      	ldr	r7, [pc, #808]	; (8006ed0 <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 8006ba8:	4640      	mov	r0, r8
 8006baa:	f000 fa5d 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f000 fa5a 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 fa57 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fa54 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f000 fa51 	bl	8007068 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	220c      	movs	r2, #12
 8006bca:	2100      	movs	r1, #0
 8006bcc:	f000 fb34 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	2207      	movs	r2, #7
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	f000 fb6d 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 8006bda:	4620      	mov	r0, r4
 8006bdc:	220c      	movs	r2, #12
 8006bde:	2101      	movs	r1, #1
 8006be0:	f000 fb2a 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 8006be4:	4620      	mov	r0, r4
 8006be6:	2207      	movs	r2, #7
 8006be8:	2101      	movs	r1, #1
 8006bea:	f000 fb63 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 8006bee:	4620      	mov	r0, r4
 8006bf0:	220c      	movs	r2, #12
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	f000 fb20 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 8006bf8:	4620      	mov	r0, r4
 8006bfa:	2207      	movs	r2, #7
 8006bfc:	2102      	movs	r1, #2
 8006bfe:	f000 fb59 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 8006c02:	4620      	mov	r0, r4
 8006c04:	220c      	movs	r2, #12
 8006c06:	2103      	movs	r1, #3
 8006c08:	f000 fb16 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	2207      	movs	r2, #7
 8006c10:	2103      	movs	r1, #3
 8006c12:	f000 fb4f 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 8006c16:	4620      	mov	r0, r4
 8006c18:	220c      	movs	r2, #12
 8006c1a:	2104      	movs	r1, #4
 8006c1c:	f000 fb0c 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 8006c20:	4620      	mov	r0, r4
 8006c22:	2207      	movs	r2, #7
 8006c24:	2104      	movs	r1, #4
 8006c26:	f000 fb45 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	220c      	movs	r2, #12
 8006c2e:	2105      	movs	r1, #5
 8006c30:	f000 fb02 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 8006c34:	4620      	mov	r0, r4
 8006c36:	2207      	movs	r2, #7
 8006c38:	2105      	movs	r1, #5
 8006c3a:	f000 fb3b 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 8006c3e:	220c      	movs	r2, #12
 8006c40:	4611      	mov	r1, r2
 8006c42:	4620      	mov	r0, r4
 8006c44:	f000 faf8 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006c48:	4620      	mov	r0, r4
 8006c4a:	2207      	movs	r2, #7
 8006c4c:	210c      	movs	r1, #12
 8006c4e:	f000 fb31 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 8006c52:	4620      	mov	r0, r4
 8006c54:	220c      	movs	r2, #12
 8006c56:	210d      	movs	r1, #13
 8006c58:	f000 faee 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	2207      	movs	r2, #7
 8006c60:	210d      	movs	r1, #13
 8006c62:	f000 fb27 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 8006c66:	4620      	mov	r0, r4
 8006c68:	220c      	movs	r2, #12
 8006c6a:	210e      	movs	r1, #14
 8006c6c:	f000 fae4 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006c70:	4620      	mov	r0, r4
 8006c72:	2207      	movs	r2, #7
 8006c74:	210e      	movs	r1, #14
 8006c76:	f000 fb1d 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	220c      	movs	r2, #12
 8006c7e:	210f      	movs	r1, #15
 8006c80:	f000 fada 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 8006c84:	4620      	mov	r0, r4
 8006c86:	2207      	movs	r2, #7
 8006c88:	210f      	movs	r1, #15
 8006c8a:	f000 fb13 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006c8e:	4638      	mov	r0, r7
 8006c90:	220c      	movs	r2, #12
 8006c92:	2100      	movs	r1, #0
 8006c94:	f000 fad0 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006c98:	4638      	mov	r0, r7
 8006c9a:	2207      	movs	r2, #7
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	f000 fb09 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 8006ca2:	4638      	mov	r0, r7
 8006ca4:	220c      	movs	r2, #12
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	f000 fac6 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006cac:	4638      	mov	r0, r7
 8006cae:	2207      	movs	r2, #7
 8006cb0:	2101      	movs	r1, #1
 8006cb2:	f000 faff 	bl	80072b4 <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	220c      	movs	r2, #12
 8006cba:	210e      	movs	r1, #14
 8006cbc:	f000 fabc 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006cc0:	4630      	mov	r0, r6
 8006cc2:	2207      	movs	r2, #7
 8006cc4:	210e      	movs	r1, #14
 8006cc6:	f000 faf5 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006cca:	4630      	mov	r0, r6
 8006ccc:	220c      	movs	r2, #12
 8006cce:	210f      	movs	r1, #15
 8006cd0:	f000 fab2 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	2207      	movs	r2, #7
 8006cd8:	210f      	movs	r1, #15
 8006cda:	f000 faeb 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006cde:	4630      	mov	r0, r6
 8006ce0:	220c      	movs	r2, #12
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	f000 faa8 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006ce8:	4630      	mov	r0, r6
 8006cea:	2207      	movs	r2, #7
 8006cec:	2100      	movs	r1, #0
 8006cee:	f000 fae1 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	220c      	movs	r2, #12
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	f000 fa9e 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	2207      	movs	r2, #7
 8006d00:	2101      	movs	r1, #1
 8006d02:	f000 fad7 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 8006d06:	4628      	mov	r0, r5
 8006d08:	220c      	movs	r2, #12
 8006d0a:	2107      	movs	r1, #7
 8006d0c:	f000 fa94 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 8006d10:	2207      	movs	r2, #7
 8006d12:	4611      	mov	r1, r2
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 facd 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	220c      	movs	r2, #12
 8006d1e:	2108      	movs	r1, #8
 8006d20:	f000 fa8a 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 8006d24:	4628      	mov	r0, r5
 8006d26:	2207      	movs	r2, #7
 8006d28:	2108      	movs	r1, #8
 8006d2a:	f000 fac3 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 8006d2e:	4628      	mov	r0, r5
 8006d30:	220c      	movs	r2, #12
 8006d32:	2109      	movs	r1, #9
 8006d34:	f000 fa80 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 8006d38:	4628      	mov	r0, r5
 8006d3a:	2207      	movs	r2, #7
 8006d3c:	2109      	movs	r1, #9
 8006d3e:	f000 fab9 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 8006d42:	4628      	mov	r0, r5
 8006d44:	220c      	movs	r2, #12
 8006d46:	210a      	movs	r1, #10
 8006d48:	f000 fa76 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	2207      	movs	r2, #7
 8006d50:	210a      	movs	r1, #10
 8006d52:	f000 faaf 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 8006d56:	4628      	mov	r0, r5
 8006d58:	220c      	movs	r2, #12
 8006d5a:	210b      	movs	r1, #11
 8006d5c:	f000 fa6c 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006d60:	4628      	mov	r0, r5
 8006d62:	2207      	movs	r2, #7
 8006d64:	210b      	movs	r1, #11
 8006d66:	f000 faa5 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006d6a:	220c      	movs	r2, #12
 8006d6c:	4611      	mov	r1, r2
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 fa62 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 8006d74:	4628      	mov	r0, r5
 8006d76:	2207      	movs	r2, #7
 8006d78:	210c      	movs	r1, #12
 8006d7a:	f000 fa9b 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006d7e:	4628      	mov	r0, r5
 8006d80:	220c      	movs	r2, #12
 8006d82:	210d      	movs	r1, #13
 8006d84:	f000 fa58 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006d88:	4628      	mov	r0, r5
 8006d8a:	2207      	movs	r2, #7
 8006d8c:	210d      	movs	r1, #13
 8006d8e:	f000 fa91 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 8006d92:	4628      	mov	r0, r5
 8006d94:	220c      	movs	r2, #12
 8006d96:	210e      	movs	r1, #14
 8006d98:	f000 fa4e 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	2207      	movs	r2, #7
 8006da0:	210e      	movs	r1, #14
 8006da2:	f000 fa87 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 8006da6:	4628      	mov	r0, r5
 8006da8:	220c      	movs	r2, #12
 8006daa:	210f      	movs	r1, #15
 8006dac:	f000 fa44 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006db0:	4628      	mov	r0, r5
 8006db2:	2207      	movs	r2, #7
 8006db4:	210f      	movs	r1, #15
 8006db6:	f000 fa7d 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006dba:	4630      	mov	r0, r6
 8006dbc:	220c      	movs	r2, #12
 8006dbe:	2108      	movs	r1, #8
 8006dc0:	f000 fa3a 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006dc4:	4630      	mov	r0, r6
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	2108      	movs	r1, #8
 8006dca:	f000 fa73 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006dce:	4630      	mov	r0, r6
 8006dd0:	220c      	movs	r2, #12
 8006dd2:	2109      	movs	r1, #9
 8006dd4:	f000 fa30 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006dd8:	4630      	mov	r0, r6
 8006dda:	2207      	movs	r2, #7
 8006ddc:	2109      	movs	r1, #9
 8006dde:	f000 fa69 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006de2:	4630      	mov	r0, r6
 8006de4:	220c      	movs	r2, #12
 8006de6:	210a      	movs	r1, #10
 8006de8:	f000 fa26 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 8006dec:	4630      	mov	r0, r6
 8006dee:	2207      	movs	r2, #7
 8006df0:	210a      	movs	r1, #10
 8006df2:	f000 fa5f 	bl	80072b4 <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006df6:	4628      	mov	r0, r5
 8006df8:	220c      	movs	r2, #12
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	f000 fa1c 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006e00:	4628      	mov	r0, r5
 8006e02:	2207      	movs	r2, #7
 8006e04:	2100      	movs	r1, #0
 8006e06:	f000 fa55 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	220c      	movs	r2, #12
 8006e0e:	2101      	movs	r1, #1
 8006e10:	f000 fa12 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006e14:	4628      	mov	r0, r5
 8006e16:	2207      	movs	r2, #7
 8006e18:	2101      	movs	r1, #1
 8006e1a:	f000 fa4b 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 8006e1e:	4638      	mov	r0, r7
 8006e20:	220c      	movs	r2, #12
 8006e22:	2104      	movs	r1, #4
 8006e24:	f000 fa08 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006e28:	4638      	mov	r0, r7
 8006e2a:	2207      	movs	r2, #7
 8006e2c:	2104      	movs	r1, #4
 8006e2e:	f000 fa41 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006e32:	4638      	mov	r0, r7
 8006e34:	220c      	movs	r2, #12
 8006e36:	2105      	movs	r1, #5
 8006e38:	f000 f9fe 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	2207      	movs	r2, #7
 8006e40:	2105      	movs	r1, #5
 8006e42:	f000 fa37 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006e46:	4638      	mov	r0, r7
 8006e48:	220c      	movs	r2, #12
 8006e4a:	210f      	movs	r1, #15
 8006e4c:	f000 f9f4 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006e50:	4638      	mov	r0, r7
 8006e52:	2207      	movs	r2, #7
 8006e54:	210f      	movs	r1, #15
 8006e56:	f000 fa2d 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	220c      	movs	r2, #12
 8006e5e:	210b      	movs	r1, #11
 8006e60:	f000 f9ea 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 8006e64:	4620      	mov	r0, r4
 8006e66:	2207      	movs	r2, #7
 8006e68:	210b      	movs	r1, #11
 8006e6a:	f000 fa23 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006e6e:	4638      	mov	r0, r7
 8006e70:	220c      	movs	r2, #12
 8006e72:	2108      	movs	r1, #8
 8006e74:	f000 f9e0 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006e78:	4638      	mov	r0, r7
 8006e7a:	2207      	movs	r2, #7
 8006e7c:	2108      	movs	r1, #8
 8006e7e:	f000 fa19 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 8006e82:	4640      	mov	r0, r8
 8006e84:	220c      	movs	r2, #12
 8006e86:	2100      	movs	r1, #0
 8006e88:	f000 f9d6 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006e8c:	4640      	mov	r0, r8
 8006e8e:	2207      	movs	r2, #7
 8006e90:	2100      	movs	r1, #0
 8006e92:	f000 fa0f 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 8006e96:	4640      	mov	r0, r8
 8006e98:	220c      	movs	r2, #12
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	f000 f9cc 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	2207      	movs	r2, #7
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	f000 fa05 	bl	80072b4 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006eaa:	4640      	mov	r0, r8
 8006eac:	220c      	movs	r2, #12
 8006eae:	2103      	movs	r1, #3
 8006eb0:	f000 f9c2 	bl	8007238 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006eb4:	4640      	mov	r0, r8
 8006eb6:	2207      	movs	r2, #7

}
 8006eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006ebc:	2103      	movs	r1, #3
 8006ebe:	f000 b9f9 	b.w	80072b4 <gpio_set_alternatefunction_type>
 8006ec2:	bf00      	nop
 8006ec4:	40020c00 	.word	0x40020c00
 8006ec8:	40021000 	.word	0x40021000
 8006ecc:	40021400 	.word	0x40021400
 8006ed0:	40021800 	.word	0x40021800
 8006ed4:	40020800 	.word	0x40020800

08006ed8 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006ed8:	b530      	push	{r4, r5, lr}
	_conf = conf;
 8006eda:	4c60      	ldr	r4, [pc, #384]	; (800705c <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 8006edc:	b083      	sub	sp, #12
	_conf = conf;
 8006ede:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006ee0:	f7ff fe5a 	bl	8006b98 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006ee4:	4a5e      	ldr	r2, [pc, #376]	; (8007060 <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006ee6:	495f      	ldr	r1, [pc, #380]	; (8007064 <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006ee8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006eea:	f043 0301 	orr.w	r3, r3, #1
 8006eee:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	781a      	ldrb	r2, [r3, #0]
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	d148      	bne.n	8006f8a <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006ef8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006efa:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006efc:	7a9c      	ldrb	r4, [r3, #10]
 8006efe:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 8006f00:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 8006f02:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f04:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 8006f06:	7b1c      	ldrb	r4, [r3, #12]
 8006f08:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 8006f0a:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 8006f0c:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006f0e:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006f10:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 8006f12:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 8006f14:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006f16:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 8006f18:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f1a:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006f1c:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 8006f1e:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006f20:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f22:	4302      	orrs	r2, r0
 8006f24:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006f26:	b119      	cbz	r1, 8006f30 <fmc_sdram_init+0x58>
 8006f28:	9a00      	ldr	r2, [sp, #0]
 8006f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f2e:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006f30:	7cda      	ldrb	r2, [r3, #19]
 8006f32:	2a00      	cmp	r2, #0
 8006f34:	f040 808c 	bne.w	8007050 <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006f38:	494a      	ldr	r1, [pc, #296]	; (8007064 <fmc_sdram_init+0x18c>)
 8006f3a:	9a00      	ldr	r2, [sp, #0]
 8006f3c:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006f3e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006f40:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 8006f42:	2000      	movs	r0, #0
 8006f44:	9a00      	ldr	r2, [sp, #0]
 8006f46:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f48:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006f4a:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f4c:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006f4e:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f50:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006f52:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f54:	432a      	orrs	r2, r5
 8006f56:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006f5a:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f5c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006f60:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006f64:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f66:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006f6a:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f6c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006f70:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 8006f74:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f76:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006f7a:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f80:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8006f82:	9b00      	ldr	r3, [sp, #0]
 8006f84:	648b      	str	r3, [r1, #72]	; 0x48
}
 8006f86:	b003      	add	sp, #12
 8006f88:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006f8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f8c:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006f8e:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006f90:	891a      	ldrh	r2, [r3, #8]
 8006f92:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006f94:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006f98:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006f9a:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006f9c:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006f9e:	4322      	orrs	r2, r4
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	4302      	orrs	r2, r0
 8006fa4:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006fa6:	b119      	cbz	r1, 8006fb0 <fmc_sdram_init+0xd8>
 8006fa8:	9a01      	ldr	r2, [sp, #4]
 8006faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fae:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <fmc_sdram_init+0x18c>)
 8006fb2:	9901      	ldr	r1, [sp, #4]
 8006fb4:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 8006fb6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fb8:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 8006fba:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006fbc:	7adc      	ldrb	r4, [r3, #11]
 8006fbe:	7a9a      	ldrb	r2, [r3, #10]
 8006fc0:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 8006fc2:	0c09      	lsrs	r1, r1, #16
 8006fc4:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006fc6:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 8006fc8:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006fca:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006fcc:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 8006fce:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 8006fd0:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 8006fd2:	4322      	orrs	r2, r4
 8006fd4:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006fd6:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 8006fd8:	4302      	orrs	r2, r0
 8006fda:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006fdc:	b119      	cbz	r1, 8006fe6 <fmc_sdram_init+0x10e>
 8006fde:	9a01      	ldr	r2, [sp, #4]
 8006fe0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fe4:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 8006fe6:	491f      	ldr	r1, [pc, #124]	; (8007064 <fmc_sdram_init+0x18c>)
 8006fe8:	9a01      	ldr	r2, [sp, #4]
 8006fea:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006fec:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006fee:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8006ff0:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006ff4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8006ff6:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8006ffa:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 8006ffe:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007000:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8007002:	9801      	ldr	r0, [sp, #4]
 8007004:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007006:	0512      	lsls	r2, r2, #20
 8007008:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800700c:	4302      	orrs	r2, r0
 800700e:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8007010:	9a01      	ldr	r2, [sp, #4]
 8007012:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 8007014:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007016:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 8007018:	2000      	movs	r0, #0
 800701a:	9a01      	ldr	r2, [sp, #4]
 800701c:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800701e:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8007020:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007022:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8007024:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007026:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007028:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800702a:	432a      	orrs	r2, r5
 800702c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007030:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8007032:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007034:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007038:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 800703a:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800703c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007040:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007042:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007046:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 8007048:	9b01      	ldr	r3, [sp, #4]
 800704a:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 800704c:	b003      	add	sp, #12
 800704e:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8007050:	9a00      	ldr	r2, [sp, #0]
 8007052:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007056:	9200      	str	r2, [sp, #0]
 8007058:	e76e      	b.n	8006f38 <fmc_sdram_init+0x60>
 800705a:	bf00      	nop
 800705c:	2000b5d0 	.word	0x2000b5d0
 8007060:	40023800 	.word	0x40023800
 8007064:	a0000100 	.word	0xa0000100

08007068 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8007068:	4b28      	ldr	r3, [pc, #160]	; (800710c <gpio_port_clock_enable+0xa4>)
 800706a:	4298      	cmp	r0, r3
 800706c:	d01e      	beq.n	80070ac <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 800706e:	4b28      	ldr	r3, [pc, #160]	; (8007110 <gpio_port_clock_enable+0xa8>)
 8007070:	4298      	cmp	r0, r3
 8007072:	d021      	beq.n	80070b8 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 8007074:	4b27      	ldr	r3, [pc, #156]	; (8007114 <gpio_port_clock_enable+0xac>)
 8007076:	4298      	cmp	r0, r3
 8007078:	d024      	beq.n	80070c4 <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 800707a:	4b27      	ldr	r3, [pc, #156]	; (8007118 <gpio_port_clock_enable+0xb0>)
 800707c:	4298      	cmp	r0, r3
 800707e:	d00f      	beq.n	80070a0 <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8007080:	4b26      	ldr	r3, [pc, #152]	; (800711c <gpio_port_clock_enable+0xb4>)
 8007082:	4298      	cmp	r0, r3
 8007084:	d024      	beq.n	80070d0 <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 8007086:	4b26      	ldr	r3, [pc, #152]	; (8007120 <gpio_port_clock_enable+0xb8>)
 8007088:	4298      	cmp	r0, r3
 800708a:	d027      	beq.n	80070dc <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 800708c:	4b25      	ldr	r3, [pc, #148]	; (8007124 <gpio_port_clock_enable+0xbc>)
 800708e:	4298      	cmp	r0, r3
 8007090:	d02a      	beq.n	80070e8 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8007092:	4b25      	ldr	r3, [pc, #148]	; (8007128 <gpio_port_clock_enable+0xc0>)
 8007094:	4298      	cmp	r0, r3
 8007096:	d033      	beq.n	8007100 <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8007098:	4b24      	ldr	r3, [pc, #144]	; (800712c <gpio_port_clock_enable+0xc4>)
 800709a:	4298      	cmp	r0, r3
 800709c:	d02a      	beq.n	80070f4 <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 800709e:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 80070a0:	4a23      	ldr	r2, [pc, #140]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070a4:	f043 0308 	orr.w	r3, r3, #8
 80070a8:	6313      	str	r3, [r2, #48]	; 0x30
 80070aa:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 80070ac:	4a20      	ldr	r2, [pc, #128]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070b0:	f043 0301 	orr.w	r3, r3, #1
 80070b4:	6313      	str	r3, [r2, #48]	; 0x30
 80070b6:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 80070b8:	4a1d      	ldr	r2, [pc, #116]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070bc:	f043 0302 	orr.w	r3, r3, #2
 80070c0:	6313      	str	r3, [r2, #48]	; 0x30
 80070c2:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 80070c4:	4a1a      	ldr	r2, [pc, #104]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070c8:	f043 0304 	orr.w	r3, r3, #4
 80070cc:	6313      	str	r3, [r2, #48]	; 0x30
 80070ce:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 80070d0:	4a17      	ldr	r2, [pc, #92]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070d4:	f043 0310 	orr.w	r3, r3, #16
 80070d8:	6313      	str	r3, [r2, #48]	; 0x30
 80070da:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 80070dc:	4a14      	ldr	r2, [pc, #80]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070e0:	f043 0320 	orr.w	r3, r3, #32
 80070e4:	6313      	str	r3, [r2, #48]	; 0x30
 80070e6:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 80070e8:	4a11      	ldr	r2, [pc, #68]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f0:	6313      	str	r3, [r2, #48]	; 0x30
 80070f2:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 80070f4:	4a0e      	ldr	r2, [pc, #56]	; (8007130 <gpio_port_clock_enable+0xc8>)
 80070f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fc:	6313      	str	r3, [r2, #48]	; 0x30
 80070fe:	e7ce      	b.n	800709e <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8007100:	4a0b      	ldr	r2, [pc, #44]	; (8007130 <gpio_port_clock_enable+0xc8>)
 8007102:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007108:	6313      	str	r3, [r2, #48]	; 0x30
 800710a:	4770      	bx	lr
 800710c:	40020000 	.word	0x40020000
 8007110:	40020400 	.word	0x40020400
 8007114:	40020800 	.word	0x40020800
 8007118:	40020c00 	.word	0x40020c00
 800711c:	40021000 	.word	0x40021000
 8007120:	40021400 	.word	0x40021400
 8007124:	40021800 	.word	0x40021800
 8007128:	40021c00 	.word	0x40021c00
 800712c:	40022000 	.word	0x40022000
 8007130:	40023800 	.word	0x40023800

08007134 <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 8007134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007136:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 8007138:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 800713a:	2a03      	cmp	r2, #3
	__IO uint32_t tmpreg = 0U;
 800713c:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 800713e:	d81c      	bhi.n	800717a <gpio_set_mode+0x46>
		port -> MODER &=~ (3U << (pin * 2));
 8007140:	6804      	ldr	r4, [r0, #0]
 8007142:	0049      	lsls	r1, r1, #1
 8007144:	2303      	movs	r3, #3
 8007146:	408b      	lsls	r3, r1
 8007148:	ea24 0403 	bic.w	r4, r4, r3
 800714c:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 800714e:	68c4      	ldr	r4, [r0, #12]
 8007150:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8007152:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 8007154:	2a02      	cmp	r2, #2
		tmpreg &=~ (3U << (pin * 2));
 8007156:	ea24 0303 	bic.w	r3, r4, r3
 800715a:	9301      	str	r3, [sp, #4]
		switch(mode){
 800715c:	d046      	beq.n	80071ec <gpio_set_mode+0xb8>
 800715e:	2a03      	cmp	r2, #3
 8007160:	d105      	bne.n	800716e <gpio_set_mode+0x3a>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 8007162:	9a01      	ldr	r2, [sp, #4]
 8007164:	2302      	movs	r3, #2
 8007166:	fa03 f101 	lsl.w	r1, r3, r1
 800716a:	4311      	orrs	r1, r2
 800716c:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 800716e:	9a01      	ldr	r2, [sp, #4]
 8007170:	68c3      	ldr	r3, [r0, #12]
 8007172:	4313      	orrs	r3, r2
 8007174:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 8007176:	b003      	add	sp, #12
 8007178:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 800717a:	1f13      	subs	r3, r2, #4
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b05      	cmp	r3, #5
 8007180:	d82b      	bhi.n	80071da <gpio_set_mode+0xa6>
		port -> MODER &=~ (3U << (pin * 2));
 8007182:	6804      	ldr	r4, [r0, #0]
 8007184:	004d      	lsls	r5, r1, #1
 8007186:	f04f 0c03 	mov.w	ip, #3
 800718a:	fa0c fc05 	lsl.w	ip, ip, r5
 800718e:	ea24 040c 	bic.w	r4, r4, ip
 8007192:	6004      	str	r4, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 8007194:	6807      	ldr	r7, [r0, #0]
 8007196:	2401      	movs	r4, #1
 8007198:	fa04 f605 	lsl.w	r6, r4, r5
 800719c:	4337      	orrs	r7, r6
 800719e:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	fa04 f101 	lsl.w	r1, r4, r1
		port -> MODER &=~ (3U << (pin * 2));
 80071a6:	ea6f 0e0c 	mvn.w	lr, ip
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80071aa:	6844      	ldr	r4, [r0, #4]
 80071ac:	d825      	bhi.n	80071fa <gpio_set_mode+0xc6>
 80071ae:	4321      	orrs	r1, r4
 80071b0:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 80071b2:	6883      	ldr	r3, [r0, #8]
 80071b4:	ea0e 0303 	and.w	r3, lr, r3
 80071b8:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80071ba:	6883      	ldr	r3, [r0, #8]
 80071bc:	ea4c 0303 	orr.w	r3, ip, r3
 80071c0:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 80071c2:	68c3      	ldr	r3, [r0, #12]
 80071c4:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 80071c6:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80071c8:	2a05      	cmp	r2, #5
		tmpreg &=~ (3U << (pin * 2));
 80071ca:	ea0e 0303 	and.w	r3, lr, r3
 80071ce:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80071d0:	d12f      	bne.n	8007232 <gpio_set_mode+0xfe>
 80071d2:	9b01      	ldr	r3, [sp, #4]
 80071d4:	431e      	orrs	r6, r3
 80071d6:	9601      	str	r6, [sp, #4]
 80071d8:	e7c9      	b.n	800716e <gpio_set_mode+0x3a>
		port -> MODER |= (3U << (pin * 2));
 80071da:	6802      	ldr	r2, [r0, #0]
 80071dc:	2303      	movs	r3, #3
 80071de:	0049      	lsls	r1, r1, #1
 80071e0:	fa03 f101 	lsl.w	r1, r3, r1
 80071e4:	4311      	orrs	r1, r2
 80071e6:	6001      	str	r1, [r0, #0]
}
 80071e8:	b003      	add	sp, #12
 80071ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmpreg |=  (1U << (pin * 2));
 80071ec:	9a01      	ldr	r2, [sp, #4]
 80071ee:	2301      	movs	r3, #1
 80071f0:	fa03 f101 	lsl.w	r1, r3, r1
 80071f4:	4311      	orrs	r1, r2
 80071f6:	9101      	str	r1, [sp, #4]
			break;
 80071f8:	e7b9      	b.n	800716e <gpio_set_mode+0x3a>
		else port -> OTYPER &=~ (1U << pin);
 80071fa:	ea24 0101 	bic.w	r1, r4, r1
 80071fe:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8007200:	6883      	ldr	r3, [r0, #8]
 8007202:	ea0e 0303 	and.w	r3, lr, r3
 8007206:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007208:	6883      	ldr	r3, [r0, #8]
 800720a:	ea4c 0303 	orr.w	r3, ip, r3
 800720e:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8007210:	68c3      	ldr	r3, [r0, #12]
 8007212:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8007214:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007216:	2a08      	cmp	r2, #8
		tmpreg &=~ (3U << (pin * 2));
 8007218:	ea0e 0303 	and.w	r3, lr, r3
 800721c:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 800721e:	d0d8      	beq.n	80071d2 <gpio_set_mode+0x9e>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 8007220:	2a09      	cmp	r2, #9
 8007222:	d1a4      	bne.n	800716e <gpio_set_mode+0x3a>
 8007224:	9a01      	ldr	r2, [sp, #4]
 8007226:	2302      	movs	r3, #2
 8007228:	fa03 f505 	lsl.w	r5, r3, r5
 800722c:	4315      	orrs	r5, r2
 800722e:	9501      	str	r5, [sp, #4]
 8007230:	e79d      	b.n	800716e <gpio_set_mode+0x3a>
 8007232:	2a06      	cmp	r2, #6
 8007234:	d0f6      	beq.n	8007224 <gpio_set_mode+0xf0>
 8007236:	e79a      	b.n	800716e <gpio_set_mode+0x3a>

08007238 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 8007238:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 800723c:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 800723e:	2303      	movs	r3, #3
 8007240:	6805      	ldr	r5, [r0, #0]
 8007242:	fa03 f30c 	lsl.w	r3, r3, ip
 8007246:	ea25 0503 	bic.w	r5, r5, r3
 800724a:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 800724c:	6805      	ldr	r5, [r0, #0]
 800724e:	2402      	movs	r4, #2
 8007250:	fa04 f40c 	lsl.w	r4, r4, ip
 8007254:	432c      	orrs	r4, r5
 8007256:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 8007258:	6844      	ldr	r4, [r0, #4]
 800725a:	f04f 0c01 	mov.w	ip, #1
 800725e:	fa0c fc01 	lsl.w	ip, ip, r1
 8007262:	ea24 040c 	bic.w	r4, r4, ip
 8007266:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 8007268:	6884      	ldr	r4, [r0, #8]
 800726a:	ea24 0403 	bic.w	r4, r4, r3
 800726e:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007270:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 8007272:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007274:	ea43 0304 	orr.w	r3, r3, r4
 8007278:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 800727a:	d80d      	bhi.n	8007298 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 800727c:	6a03      	ldr	r3, [r0, #32]
 800727e:	0089      	lsls	r1, r1, #2
 8007280:	240f      	movs	r4, #15
 8007282:	408c      	lsls	r4, r1
 8007284:	ea23 0304 	bic.w	r3, r3, r4
 8007288:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 800728a:	6a03      	ldr	r3, [r0, #32]
 800728c:	fa02 f101 	lsl.w	r1, r2, r1
 8007290:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 8007292:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 8007294:	6201      	str	r1, [r0, #32]
}
 8007296:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 8007298:	3908      	subs	r1, #8
 800729a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800729c:	0089      	lsls	r1, r1, #2
 800729e:	240f      	movs	r4, #15
 80072a0:	408c      	lsls	r4, r1
 80072a2:	ea23 0304 	bic.w	r3, r3, r4
 80072a6:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80072a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072aa:	408a      	lsls	r2, r1
 80072ac:	431a      	orrs	r2, r3
}
 80072ae:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80072b0:	6242      	str	r2, [r0, #36]	; 0x24
}
 80072b2:	4770      	bx	lr

080072b4 <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80072b4:	2a04      	cmp	r2, #4
 80072b6:	d00a      	beq.n	80072ce <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80072b8:	2a07      	cmp	r2, #7
 80072ba:	d000      	beq.n	80072be <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 80072bc:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80072be:	6843      	ldr	r3, [r0, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	fa02 f101 	lsl.w	r1, r2, r1
 80072c6:	ea23 0101 	bic.w	r1, r3, r1
 80072ca:	6041      	str	r1, [r0, #4]
}
 80072cc:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80072ce:	6842      	ldr	r2, [r0, #4]
 80072d0:	2301      	movs	r3, #1
 80072d2:	fa03 f101 	lsl.w	r1, r3, r1
 80072d6:	4311      	orrs	r1, r2
 80072d8:	6041      	str	r1, [r0, #4]
 80072da:	4770      	bx	lr

080072dc <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 80072dc:	68c3      	ldr	r3, [r0, #12]
 80072de:	0049      	lsls	r1, r1, #1
 80072e0:	2203      	movs	r2, #3
 80072e2:	408a      	lsls	r2, r1
 80072e4:	ea23 0302 	bic.w	r3, r3, r2
 80072e8:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 80072ea:	68c2      	ldr	r2, [r0, #12]
 80072ec:	2302      	movs	r3, #2
 80072ee:	fa03 f101 	lsl.w	r1, r3, r1
 80072f2:	4311      	orrs	r1, r2
 80072f4:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 80072f6:	4770      	bx	lr

080072f8 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 80072f8:	6982      	ldr	r2, [r0, #24]
 80072fa:	2301      	movs	r3, #1
 80072fc:	fa03 f101 	lsl.w	r1, r3, r1
 8007300:	4311      	orrs	r1, r2
 8007302:	6181      	str	r1, [r0, #24]
}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop

08007308 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 8007308:	6982      	ldr	r2, [r0, #24]
 800730a:	3110      	adds	r1, #16
 800730c:	2301      	movs	r3, #1
 800730e:	fa03 f101 	lsl.w	r1, r3, r1
 8007312:	4311      	orrs	r1, r2
 8007314:	6181      	str	r1, [r0, #24]
}
 8007316:	4770      	bx	lr

08007318 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8007318:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 800731a:	2301      	movs	r3, #1
 800731c:	6944      	ldr	r4, [r0, #20]
 800731e:	fa03 f201 	lsl.w	r2, r3, r1
 8007322:	4214      	tst	r4, r2
 8007324:	d008      	beq.n	8007338 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 8007326:	6982      	ldr	r2, [r0, #24]
}
 8007328:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 800732c:	3110      	adds	r1, #16
 800732e:	fa03 f101 	lsl.w	r1, r3, r1
 8007332:	4311      	orrs	r1, r2
 8007334:	6181      	str	r1, [r0, #24]
}
 8007336:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 8007338:	6983      	ldr	r3, [r0, #24]
}
 800733a:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 800733e:	431a      	orrs	r2, r3
 8007340:	6182      	str	r2, [r0, #24]
}
 8007342:	4770      	bx	lr

08007344 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 8007344:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 8007346:	480a      	ldr	r0, [pc, #40]	; (8007370 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 8007348:	4c0a      	ldr	r4, [pc, #40]	; (8007374 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 800734a:	490b      	ldr	r1, [pc, #44]	; (8007378 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 800734c:	2200      	movs	r2, #0
 800734e:	2300      	movs	r3, #0
 8007350:	e9c4 2300 	strd	r2, r3, [r4]
 8007354:	e9c0 2300 	strd	r2, r3, [r0]
 8007358:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 800735c:	4b07      	ldr	r3, [pc, #28]	; (800737c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 800735e:	60a3      	str	r3, [r4, #8]
 8007360:	4a07      	ldr	r2, [pc, #28]	; (8007380 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 8007362:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 8007366:	6082      	str	r2, [r0, #8]
 8007368:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800736c:	608b      	str	r3, [r1, #8]
}
 800736e:	4770      	bx	lr
 8007370:	2000b5d8 	.word	0x2000b5d8
 8007374:	2000b5f8 	.word	0x2000b5f8
 8007378:	2000b5e8 	.word	0x2000b5e8
 800737c:	40005c00 	.word	0x40005c00
 8007380:	40005400 	.word	0x40005400

08007384 <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007384:	b530      	push	{r4, r5, lr}
	stm_ret_t ret;

	IWDG -> KR = IWDG_KEY_ENABLE;
 8007386:	4c0c      	ldr	r4, [pc, #48]	; (80073b8 <iwdg_init+0x34>)
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007388:	b083      	sub	sp, #12
	IWDG -> KR = IWDG_KEY_ENABLE;
 800738a:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 800738e:	6023      	str	r3, [r4, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;

	IWDG -> PR = psc;
	IWDG -> RLR = arr-1;
 8007390:	3a01      	subs	r2, #1
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8007392:	f245 5355 	movw	r3, #21845	; 0x5555

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8007396:	2531      	movs	r5, #49	; 0x31
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8007398:	6023      	str	r3, [r4, #0]
	IWDG -> PR = psc;
 800739a:	6061      	str	r1, [r4, #4]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 800739c:	2300      	movs	r3, #0
	IWDG -> RLR = arr-1;
 800739e:	60a2      	str	r2, [r4, #8]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80073a0:	4906      	ldr	r1, [pc, #24]	; (80073bc <iwdg_init+0x38>)
 80073a2:	9500      	str	r5, [sp, #0]
 80073a4:	2203      	movs	r2, #3
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 80073a6:	4605      	mov	r5, r0
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80073a8:	f003 fdba 	bl	800af20 <wait_flag_in_register_timeout>

	IWDG -> KR = IWDG_KEY_RELOAD;
 80073ac:	f64a 23aa 	movw	r3, #43690	; 0xaaaa

	return ret;
}
 80073b0:	4628      	mov	r0, r5
	IWDG -> KR = IWDG_KEY_RELOAD;
 80073b2:	6023      	str	r3, [r4, #0]
}
 80073b4:	b003      	add	sp, #12
 80073b6:	bd30      	pop	{r4, r5, pc}
 80073b8:	40003000 	.word	0x40003000
 80073bc:	4000300c 	.word	0x4000300c

080073c0 <iwdg_disable_in_debugmode>:

void iwdg_disable_in_debugmode(void){
#if defined(STM32F1)
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP;
#elif defined(STM32F4)
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 80073c0:	4a02      	ldr	r2, [pc, #8]	; (80073cc <iwdg_disable_in_debugmode+0xc>)
 80073c2:	6893      	ldr	r3, [r2, #8]
 80073c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073c8:	6093      	str	r3, [r2, #8]
#endif /* STM32F4 */
}
 80073ca:	4770      	bx	lr
 80073cc:	e0042000 	.word	0xe0042000

080073d0 <iwdg_refresh>:

void iwdg_refresh(void){
	IWDG -> KR = IWDG_KEY_RELOAD;
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <iwdg_refresh+0xc>)
 80073d2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80073d6:	601a      	str	r2, [r3, #0]
}
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40003000 	.word	0x40003000

080073e0 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80073e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e4:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 80073e6:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80073e8:	4ab9      	ldr	r2, [pc, #740]	; (80076d0 <rcc_init+0x2f0>)
	stm_ret_t ret;
 80073ea:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 80073ec:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 80073ee:	2301      	movs	r3, #1
 80073f0:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80073f2:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 80073f4:	4eb7      	ldr	r6, [pc, #732]	; (80076d4 <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80073f6:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80073f8:	4604      	mov	r4, r0
	_conf = rcc_conf;
 80073fa:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80073fc:	d412      	bmi.n	8007424 <rcc_init+0x44>
 80073fe:	6893      	ldr	r3, [r2, #8]
 8007400:	071f      	lsls	r7, r3, #28
 8007402:	d40c      	bmi.n	800741e <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 8007404:	7b0b      	ldrb	r3, [r1, #12]
 8007406:	b1db      	cbz	r3, 8007440 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 8007408:	2b01      	cmp	r3, #1
 800740a:	d03b      	beq.n	8007484 <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 800740c:	2255      	movs	r2, #85	; 0x55
 800740e:	2100      	movs	r1, #0
 8007410:	4620      	mov	r0, r4
 8007412:	f003 fdc1 	bl	800af98 <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 8007416:	4620      	mov	r0, r4
 8007418:	b006      	add	sp, #24
 800741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 800741e:	6853      	ldr	r3, [r2, #4]
 8007420:	025d      	lsls	r5, r3, #9
 8007422:	d5ef      	bpl.n	8007404 <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8007424:	4baa      	ldr	r3, [pc, #680]	; (80076d0 <rcc_init+0x2f0>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800742c:	d1ea      	bne.n	8007404 <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 800742e:	4620      	mov	r0, r4
 8007430:	2234      	movs	r2, #52	; 0x34
 8007432:	4619      	mov	r1, r3
 8007434:	f003 fdb0 	bl	800af98 <set_return>
}
 8007438:	4620      	mov	r0, r4
 800743a:	b006      	add	sp, #24
 800743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 8007440:	4fa3      	ldr	r7, [pc, #652]	; (80076d0 <rcc_init+0x2f0>)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 800744a:	ad02      	add	r5, sp, #8
 800744c:	2364      	movs	r3, #100	; 0x64
 800744e:	9300      	str	r3, [sp, #0]
 8007450:	4639      	mov	r1, r7
 8007452:	4628      	mov	r0, r5
 8007454:	2301      	movs	r3, #1
 8007456:	2202      	movs	r2, #2
 8007458:	f003 fd62 	bl	800af20 <wait_flag_in_register_timeout>
 800745c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007460:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 8007464:	4620      	mov	r0, r4
 8007466:	f003 fda5 	bl	800afb4 <is_timeout>
 800746a:	2800      	cmp	r0, #0
 800746c:	d155      	bne.n	800751a <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 800746e:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007470:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8007472:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007476:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	6891      	ldr	r1, [r2, #8]
 800747c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	e016      	b.n	80074b2 <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 8007484:	4992      	ldr	r1, [pc, #584]	; (80076d0 <rcc_init+0x2f0>)
 8007486:	680a      	ldr	r2, [r1, #0]
 8007488:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800748c:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 800748e:	ad02      	add	r5, sp, #8
 8007490:	22c8      	movs	r2, #200	; 0xc8
 8007492:	9200      	str	r2, [sp, #0]
 8007494:	4628      	mov	r0, r5
 8007496:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800749a:	f003 fd41 	bl	800af20 <wait_flag_in_register_timeout>
 800749e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80074a2:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 80074a6:	4620      	mov	r0, r4
 80074a8:	f003 fd84 	bl	800afb4 <is_timeout>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d17c      	bne.n	80075aa <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 80074b0:	6832      	ldr	r2, [r6, #0]
 80074b2:	7b53      	ldrb	r3, [r2, #13]
 80074b4:	2b02      	cmp	r3, #2
 80074b6:	d104      	bne.n	80074c2 <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 80074b8:	4f85      	ldr	r7, [pc, #532]	; (80076d0 <rcc_init+0x2f0>)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	f013 0308 	ands.w	r3, r3, #8
 80074c0:	d078      	beq.n	80075b4 <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 80074c2:	6910      	ldr	r0, [r2, #16]
 80074c4:	f003 fdd0 	bl	800b068 <embedded_flash_calculate_latency>
 80074c8:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80074ca:	f003 fdf9 	bl	800b0c0 <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80074ce:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80074d0:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80074d2:	d866      	bhi.n	80075a2 <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 80074d4:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80076e4 <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80074d8:	497f      	ldr	r1, [pc, #508]	; (80076d8 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 80074da:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80074de:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 80074e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e6:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80074ea:	4628      	mov	r0, r5
 80074ec:	f8cd a000 	str.w	sl, [sp]
 80074f0:	2301      	movs	r3, #1
 80074f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074f6:	f003 fd13 	bl	800af20 <wait_flag_in_register_timeout>
 80074fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80074fe:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007502:	4620      	mov	r0, r4
 8007504:	f003 fd56 	bl	800afb4 <is_timeout>
 8007508:	b160      	cbz	r0, 8007524 <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 800750a:	4620      	mov	r0, r4
 800750c:	2188      	movs	r1, #136	; 0x88
 800750e:	f003 fd47 	bl	800afa0 <set_return_line>
}
 8007512:	4620      	mov	r0, r4
 8007514:	b006      	add	sp, #24
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 800751a:	2141      	movs	r1, #65	; 0x41
 800751c:	4620      	mov	r0, r4
 800751e:	f003 fd3f 	bl	800afa0 <set_return_line>
			return ret;
 8007522:	e778      	b.n	8007416 <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 8007524:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8007528:	496b      	ldr	r1, [pc, #428]	; (80076d8 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 800752a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752e:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8007532:	4628      	mov	r0, r5
 8007534:	f8cd a000 	str.w	sl, [sp]
 8007538:	2301      	movs	r3, #1
 800753a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800753e:	f003 fcef 	bl	800af20 <wait_flag_in_register_timeout>
 8007542:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007546:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 800754a:	4620      	mov	r0, r4
 800754c:	f003 fd32 	bl	800afb4 <is_timeout>
 8007550:	2800      	cmp	r0, #0
 8007552:	f040 8087 	bne.w	8007664 <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	7b5a      	ldrb	r2, [r3, #13]
 800755a:	2a00      	cmp	r2, #0
 800755c:	d074      	beq.n	8007648 <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 800755e:	2a01      	cmp	r2, #1
 8007560:	f000 80a8 	beq.w	80076b4 <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 8007564:	2a02      	cmp	r2, #2
 8007566:	f000 80bf 	beq.w	80076e8 <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 800756a:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80076d0 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 800756e:	495b      	ldr	r1, [pc, #364]	; (80076dc <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007570:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007574:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007578:	f241 3388 	movw	r3, #5000	; 0x1388
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4628      	mov	r0, r5
 8007580:	2301      	movs	r3, #1
 8007582:	f003 fccd 	bl	800af20 <wait_flag_in_register_timeout>
 8007586:	e895 0003 	ldmia.w	r5, {r0, r1}
 800758a:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 800758e:	4620      	mov	r0, r4
 8007590:	f003 fd10 	bl	800afb4 <is_timeout>
 8007594:	2800      	cmp	r0, #0
 8007596:	d06a      	beq.n	800766e <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 8007598:	21ad      	movs	r1, #173	; 0xad
 800759a:	4620      	mov	r0, r4
 800759c:	f003 fd00 	bl	800afa0 <set_return_line>
		return ret;
 80075a0:	e739      	b.n	8007416 <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80075a2:	4638      	mov	r0, r7
 80075a4:	f003 fd56 	bl	800b054 <embedded_flash_set_latency>
 80075a8:	e794      	b.n	80074d4 <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 80075aa:	2150      	movs	r1, #80	; 0x50
 80075ac:	4620      	mov	r0, r4
 80075ae:	f003 fcf7 	bl	800afa0 <set_return_line>
			return ret;
 80075b2:	e730      	b.n	8007416 <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 80075b4:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80075b6:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 80075ba:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80075be:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80075c0:	4639      	mov	r1, r7
 80075c2:	4628      	mov	r0, r5
 80075c4:	f8cd 8000 	str.w	r8, [sp]
 80075c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075cc:	f003 fca8 	bl	800af20 <wait_flag_in_register_timeout>
 80075d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80075d4:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 80075d8:	4620      	mov	r0, r4
 80075da:	f003 fceb 	bl	800afb4 <is_timeout>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d13b      	bne.n	800765a <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80075e6:	9b05      	ldr	r3, [sp, #20]
 80075e8:	4a3d      	ldr	r2, [pc, #244]	; (80076e0 <rcc_init+0x300>)
 80075ea:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80075ec:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80075ee:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80075f0:	9b05      	ldr	r3, [sp, #20]
 80075f2:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 80075f4:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80075f6:	430b      	orrs	r3, r1
 80075f8:	69d1      	ldr	r1, [r2, #28]
 80075fa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80075fe:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8007600:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8007602:	0849      	lsrs	r1, r1, #1
 8007604:	3901      	subs	r1, #1
 8007606:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800760a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800760e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8007612:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 8007614:	9b05      	ldr	r3, [sp, #20]
 8007616:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800761e:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8007620:	4639      	mov	r1, r7
 8007622:	4628      	mov	r0, r5
 8007624:	f8cd 8000 	str.w	r8, [sp]
 8007628:	2301      	movs	r3, #1
 800762a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800762e:	f003 fc77 	bl	800af20 <wait_flag_in_register_timeout>
 8007632:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007636:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 800763a:	4620      	mov	r0, r4
 800763c:	f003 fcba 	bl	800afb4 <is_timeout>
 8007640:	2800      	cmp	r0, #0
 8007642:	d15b      	bne.n	80076fc <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 8007644:	6832      	ldr	r2, [r6, #0]
 8007646:	e73c      	b.n	80074c2 <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 8007648:	4b21      	ldr	r3, [pc, #132]	; (80076d0 <rcc_init+0x2f0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	0798      	lsls	r0, r3, #30
 800764e:	d48c      	bmi.n	800756a <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8007650:	2199      	movs	r1, #153	; 0x99
 8007652:	4620      	mov	r0, r4
 8007654:	f003 fca4 	bl	800afa0 <set_return_line>
			return ret;
 8007658:	e6dd      	b.n	8007416 <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 800765a:	2161      	movs	r1, #97	; 0x61
 800765c:	4620      	mov	r0, r4
 800765e:	f003 fc9f 	bl	800afa0 <set_return_line>
				return ret;
 8007662:	e6d8      	b.n	8007416 <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 8007664:	218f      	movs	r1, #143	; 0x8f
 8007666:	4620      	mov	r0, r4
 8007668:	f003 fc9a 	bl	800afa0 <set_return_line>
		return ret;
 800766c:	e6d3      	b.n	8007416 <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 800766e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8007672:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8007674:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8007676:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8007678:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800767c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007680:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8007682:	7d53      	ldrb	r3, [r2, #21]
 8007684:	7d11      	ldrb	r1, [r2, #20]
 8007686:	7d92      	ldrb	r2, [r2, #22]
 8007688:	3303      	adds	r3, #3
 800768a:	3107      	adds	r1, #7
 800768c:	029b      	lsls	r3, r3, #10
 800768e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007692:	9905      	ldr	r1, [sp, #20]
 8007694:	3203      	adds	r2, #3
 8007696:	430b      	orrs	r3, r1
 8007698:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800769c:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 80076a4:	f7f9 fdc8 	bl	8001238 <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80076a8:	4547      	cmp	r7, r8
 80076aa:	d30d      	bcc.n	80076c8 <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 80076ac:	200f      	movs	r0, #15
 80076ae:	f000 fee1 	bl	8008474 <systick_init>
	return ret;
 80076b2:	e6b0      	b.n	8007416 <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <rcc_init+0x2f0>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	0399      	lsls	r1, r3, #14
 80076ba:	f53f af56 	bmi.w	800756a <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80076be:	219f      	movs	r1, #159	; 0x9f
 80076c0:	4620      	mov	r0, r4
 80076c2:	f003 fc6d 	bl	800afa0 <set_return_line>
			return ret;
 80076c6:	e6a6      	b.n	8007416 <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80076c8:	4638      	mov	r0, r7
 80076ca:	f003 fcc3 	bl	800b054 <embedded_flash_set_latency>
 80076ce:	e7ed      	b.n	80076ac <rcc_init+0x2cc>
 80076d0:	40023800 	.word	0x40023800
 80076d4:	2000b608 	.word	0x2000b608
 80076d8:	40007004 	.word	0x40007004
 80076dc:	40023808 	.word	0x40023808
 80076e0:	f0bc8000 	.word	0xf0bc8000
 80076e4:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 80076e8:	4b07      	ldr	r3, [pc, #28]	; (8007708 <rcc_init+0x328>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	019b      	lsls	r3, r3, #6
 80076ee:	f53f af3c 	bmi.w	800756a <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80076f2:	21a5      	movs	r1, #165	; 0xa5
 80076f4:	4620      	mov	r0, r4
 80076f6:	f003 fc53 	bl	800afa0 <set_return_line>
			return ret;
 80076fa:	e68c      	b.n	8007416 <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 80076fc:	2172      	movs	r1, #114	; 0x72
 80076fe:	4620      	mov	r0, r4
 8007700:	f003 fc4e 	bl	800afa0 <set_return_line>
				return ret;
 8007704:	e687      	b.n	8007416 <rcc_init+0x36>
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800

0800770c <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 800770c:	2805      	cmp	r0, #5
 800770e:	d819      	bhi.n	8007744 <rcc_get_bus_frequency+0x38>
 8007710:	e8df f000 	tbb	[pc, r0]
 8007714:	2f251a0e 	.word	0x2f251a0e
 8007718:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 800771a:	4b2a      	ldr	r3, [pc, #168]	; (80077c4 <rcc_get_bus_frequency+0xb8>)
 800771c:	492a      	ldr	r1, [pc, #168]	; (80077c8 <rcc_get_bus_frequency+0xbc>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	4a2a      	ldr	r2, [pc, #168]	; (80077cc <rcc_get_bus_frequency+0xc0>)
 8007722:	6808      	ldr	r0, [r1, #0]
 8007724:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007728:	5cd3      	ldrb	r3, [r2, r3]
 800772a:	40d8      	lsrs	r0, r3
 800772c:	0040      	lsls	r0, r0, #1
 800772e:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007730:	4b27      	ldr	r3, [pc, #156]	; (80077d0 <rcc_get_bus_frequency+0xc4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	7b1a      	ldrb	r2, [r3, #12]
 8007736:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8007738:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 800773a:	d02f      	beq.n	800779c <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 800773c:	2a00      	cmp	r2, #0
 800773e:	d03f      	beq.n	80077c0 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8007740:	2a02      	cmp	r2, #2
 8007742:	d032      	beq.n	80077aa <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 8007744:	2000      	movs	r0, #0
}
 8007746:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8007748:	4b21      	ldr	r3, [pc, #132]	; (80077d0 <rcc_get_bus_frequency+0xc4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	7d18      	ldrb	r0, [r3, #20]
 800774e:	2807      	cmp	r0, #7
 8007750:	d928      	bls.n	80077a4 <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 8007752:	4a1d      	ldr	r2, [pc, #116]	; (80077c8 <rcc_get_bus_frequency+0xbc>)
 8007754:	1f83      	subs	r3, r0, #6
 8007756:	6810      	ldr	r0, [r2, #0]
 8007758:	fbb0 f0f3 	udiv	r0, r0, r3
 800775c:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800775e:	4b19      	ldr	r3, [pc, #100]	; (80077c4 <rcc_get_bus_frequency+0xb8>)
 8007760:	4919      	ldr	r1, [pc, #100]	; (80077c8 <rcc_get_bus_frequency+0xbc>)
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	4a19      	ldr	r2, [pc, #100]	; (80077cc <rcc_get_bus_frequency+0xc0>)
 8007766:	6808      	ldr	r0, [r1, #0]
 8007768:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800776c:	5cd3      	ldrb	r3, [r2, r3]
 800776e:	40d8      	lsrs	r0, r3
 8007770:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007772:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <rcc_get_bus_frequency+0xb8>)
 8007774:	4914      	ldr	r1, [pc, #80]	; (80077c8 <rcc_get_bus_frequency+0xbc>)
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	4a14      	ldr	r2, [pc, #80]	; (80077cc <rcc_get_bus_frequency+0xc0>)
 800777a:	6808      	ldr	r0, [r1, #0]
 800777c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007780:	5cd3      	ldrb	r3, [r2, r3]
 8007782:	40d8      	lsrs	r0, r3
 8007784:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 8007786:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <rcc_get_bus_frequency+0xb8>)
 8007788:	490f      	ldr	r1, [pc, #60]	; (80077c8 <rcc_get_bus_frequency+0xbc>)
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	4a0f      	ldr	r2, [pc, #60]	; (80077cc <rcc_get_bus_frequency+0xc0>)
 800778e:	6808      	ldr	r0, [r1, #0]
 8007790:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007794:	5cd3      	ldrb	r3, [r2, r3]
 8007796:	40d8      	lsrs	r0, r3
 8007798:	0040      	lsls	r0, r0, #1
 800779a:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 800779c:	2a01      	cmp	r2, #1
 800779e:	d1cf      	bne.n	8007740 <rcc_get_bus_frequency+0x34>
 80077a0:	480c      	ldr	r0, [pc, #48]	; (80077d4 <rcc_get_bus_frequency+0xc8>)
 80077a2:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 80077a4:	4b08      	ldr	r3, [pc, #32]	; (80077c8 <rcc_get_bus_frequency+0xbc>)
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 80077aa:	69da      	ldr	r2, [r3, #28]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	4809      	ldr	r0, [pc, #36]	; (80077d4 <rcc_get_bus_frequency+0xc8>)
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	fbb0 f0f1 	udiv	r0, r0, r1
 80077b6:	fb02 f000 	mul.w	r0, r2, r0
 80077ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80077be:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 80077c0:	4805      	ldr	r0, [pc, #20]	; (80077d8 <rcc_get_bus_frequency+0xcc>)
 80077c2:	4770      	bx	lr
 80077c4:	40023800 	.word	0x40023800
 80077c8:	20000000 	.word	0x20000000
 80077cc:	08010ab4 	.word	0x08010ab4
 80077d0:	2000b608 	.word	0x2000b608
 80077d4:	017d7840 	.word	0x017d7840
 80077d8:	00f42400 	.word	0x00f42400

080077dc <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80077dc:	4907      	ldr	r1, [pc, #28]	; (80077fc <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 80077de:	4a08      	ldr	r2, [pc, #32]	; (8007800 <rng_init+0x24>)
void rng_init(void){
 80077e0:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80077e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80077e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077e8:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 80077ea:	6813      	ldr	r3, [r2, #0]
 80077ec:	f043 0304 	orr.w	r3, r3, #4
 80077f0:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 80077f2:	f003 fcb1 	bl	800b158 <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 80077f6:	4b03      	ldr	r3, [pc, #12]	; (8007804 <rng_init+0x28>)
 80077f8:	6018      	str	r0, [r3, #0]
}
 80077fa:	bd08      	pop	{r3, pc}
 80077fc:	40023800 	.word	0x40023800
 8007800:	50060800 	.word	0x50060800
 8007804:	2000b60c 	.word	0x2000b60c

08007808 <rng_set_seed>:
	_seed = seed;
 8007808:	4b01      	ldr	r3, [pc, #4]	; (8007810 <rng_set_seed+0x8>)
 800780a:	6018      	str	r0, [r3, #0]
}
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	2000b60c 	.word	0x2000b60c

08007814 <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 8007814:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 8007816:	4b1b      	ldr	r3, [pc, #108]	; (8007884 <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007818:	4c1b      	ldr	r4, [pc, #108]	; (8007888 <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 800781a:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 800781c:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 800781e:	2602      	movs	r6, #2
 8007820:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 8007822:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 8007824:	f000 fe48 	bl	80084b8 <get_tick>
 8007828:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 800782a:	9505      	str	r5, [sp, #20]
 800782c:	e005      	b.n	800783a <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 800782e:	f000 fe43 	bl	80084b8 <get_tick>
 8007832:	9b04      	ldr	r3, [sp, #16]
 8007834:	1ac0      	subs	r0, r0, r3
 8007836:	2802      	cmp	r0, #2
 8007838:	d802      	bhi.n	8007840 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	07da      	lsls	r2, r3, #31
 800783e:	d5f6      	bpl.n	800782e <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 8007840:	68a3      	ldr	r3, [r4, #8]
 8007842:	9305      	str	r3, [sp, #20]
	return random_number;
 8007844:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 8007846:	9b01      	ldr	r3, [sp, #4]
 8007848:	4053      	eors	r3, r2
 800784a:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 800784c:	f000 fe34 	bl	80084b8 <get_tick>
 8007850:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 8007852:	9503      	str	r5, [sp, #12]
 8007854:	e005      	b.n	8007862 <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 8007856:	f000 fe2f 	bl	80084b8 <get_tick>
 800785a:	9b02      	ldr	r3, [sp, #8]
 800785c:	1ac0      	subs	r0, r0, r3
 800785e:	2802      	cmp	r0, #2
 8007860:	d802      	bhi.n	8007868 <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007862:	6863      	ldr	r3, [r4, #4]
 8007864:	07db      	lsls	r3, r3, #31
 8007866:	d5f6      	bpl.n	8007856 <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 8007868:	68a3      	ldr	r3, [r4, #8]
 800786a:	9303      	str	r3, [sp, #12]
	return random_number;
 800786c:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 800786e:	9b01      	ldr	r3, [sp, #4]
 8007870:	4053      	eors	r3, r2
 8007872:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 8007874:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 8007876:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 8007878:	d102      	bne.n	8007880 <rng_generate_random_number+0x6c>
	}
	return rand;
 800787a:	9801      	ldr	r0, [sp, #4]
}
 800787c:	b006      	add	sp, #24
 800787e:	bd70      	pop	{r4, r5, r6, pc}
 8007880:	2601      	movs	r6, #1
 8007882:	e7cf      	b.n	8007824 <rng_generate_random_number+0x10>
 8007884:	2000b60c 	.word	0x2000b60c
 8007888:	50060800 	.word	0x50060800

0800788c <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	460c      	mov	r4, r1
 8007890:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 8007892:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007894:	68cb      	ldr	r3, [r1, #12]
 8007896:	499e      	ldr	r1, [pc, #632]	; (8007b10 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 8007898:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 800789a:	2001      	movs	r0, #1
 800789c:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 800789e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80078a0:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80078a2:	428b      	cmp	r3, r1
	stm_ret_t ret;
 80078a4:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 80078a8:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 80078aa:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80078ac:	f000 80cd 	beq.w	8007a4a <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80078b0:	4998      	ldr	r1, [pc, #608]	; (8007b14 <_ZN3spi4initEP12spi_config_t+0x288>)
 80078b2:	428b      	cmp	r3, r1
 80078b4:	d015      	beq.n	80078e2 <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80078b6:	4998      	ldr	r1, [pc, #608]	; (8007b18 <_ZN3spi4initEP12spi_config_t+0x28c>)
 80078b8:	428b      	cmp	r3, r1
 80078ba:	f000 810b 	beq.w	8007ad4 <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 80078be:	4997      	ldr	r1, [pc, #604]	; (8007b1c <_ZN3spi4initEP12spi_config_t+0x290>)
 80078c0:	428b      	cmp	r3, r1
 80078c2:	f000 8112 	beq.w	8007aea <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 80078c6:	4996      	ldr	r1, [pc, #600]	; (8007b20 <_ZN3spi4initEP12spi_config_t+0x294>)
 80078c8:	428b      	cmp	r3, r1
 80078ca:	f000 80d5 	beq.w	8007a78 <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 80078ce:	4995      	ldr	r1, [pc, #596]	; (8007b24 <_ZN3spi4initEP12spi_config_t+0x298>)
 80078d0:	428b      	cmp	r3, r1
 80078d2:	d10c      	bne.n	80078ee <_ZN3spi4initEP12spi_config_t+0x62>
 80078d4:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 80078d8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80078da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078de:	644b      	str	r3, [r1, #68]	; 0x44
 80078e0:	e005      	b.n	80078ee <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80078e2:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80078e6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80078e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078ec:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 80078ee:	6910      	ldr	r0, [r2, #16]
 80078f0:	f7ff fbba 	bl	8007068 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 80078f4:	68a3      	ldr	r3, [r4, #8]
 80078f6:	2205      	movs	r2, #5
 80078f8:	8a99      	ldrh	r1, [r3, #20]
 80078fa:	6918      	ldr	r0, [r3, #16]
 80078fc:	f7ff fc9c 	bl	8007238 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8007900:	68a3      	ldr	r3, [r4, #8]
 8007902:	2207      	movs	r2, #7
 8007904:	8a99      	ldrh	r1, [r3, #20]
 8007906:	6918      	ldr	r0, [r3, #16]
 8007908:	f7ff fcd4 	bl	80072b4 <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 800790c:	68a2      	ldr	r2, [r4, #8]
 800790e:	7813      	ldrb	r3, [r2, #0]
 8007910:	f013 0f0d 	tst.w	r3, #13
 8007914:	f040 8087 	bne.w	8007a26 <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007918:	075b      	lsls	r3, r3, #29
 800791a:	d15f      	bne.n	80079dc <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 800791c:	7b10      	ldrb	r0, [r2, #12]
 800791e:	2801      	cmp	r0, #1
 8007920:	d06f      	beq.n	8007a02 <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 8007922:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007924:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 8007926:	2100      	movs	r1, #0
 8007928:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 800792a:	7991      	ldrb	r1, [r2, #6]
 800792c:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8007930:	681e      	ldr	r6, [r3, #0]
 8007932:	4331      	orrs	r1, r6
 8007934:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 8007936:	7911      	ldrb	r1, [r2, #4]
 8007938:	78d6      	ldrb	r6, [r2, #3]
 800793a:	01c9      	lsls	r1, r1, #7
 800793c:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8007940:	681e      	ldr	r6, [r3, #0]
 8007942:	4331      	orrs	r1, r6
 8007944:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 8007946:	7811      	ldrb	r1, [r2, #0]
 8007948:	f011 0703 	ands.w	r7, r1, #3
 800794c:	d003      	beq.n	8007956 <_ZN3spi4initEP12spi_config_t+0xca>
 800794e:	681e      	ldr	r6, [r3, #0]
 8007950:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 8007954:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 8007956:	f011 0f0a 	tst.w	r1, #10
 800795a:	d003      	beq.n	8007964 <_ZN3spi4initEP12spi_config_t+0xd8>
 800795c:	6819      	ldr	r1, [r3, #0]
 800795e:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8007962:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007964:	bb78      	cbnz	r0, 80079c6 <_ZN3spi4initEP12spi_config_t+0x13a>
 8007966:	6819      	ldr	r1, [r3, #0]
 8007968:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 800796c:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 800796e:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 8007970:	7851      	ldrb	r1, [r2, #1]
 8007972:	f011 0f05 	tst.w	r1, #5
 8007976:	d024      	beq.n	80079c2 <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007978:	4965      	ldr	r1, [pc, #404]	; (8007b10 <_ZN3spi4initEP12spi_config_t+0x284>)
 800797a:	428b      	cmp	r3, r1
 800797c:	f000 8083 	beq.w	8007a86 <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007980:	4964      	ldr	r1, [pc, #400]	; (8007b14 <_ZN3spi4initEP12spi_config_t+0x288>)
 8007982:	428b      	cmp	r3, r1
 8007984:	f000 80ad 	beq.w	8007ae2 <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007988:	4963      	ldr	r1, [pc, #396]	; (8007b18 <_ZN3spi4initEP12spi_config_t+0x28c>)
 800798a:	428b      	cmp	r3, r1
 800798c:	d064      	beq.n	8007a58 <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 800798e:	4963      	ldr	r1, [pc, #396]	; (8007b1c <_ZN3spi4initEP12spi_config_t+0x290>)
 8007990:	428b      	cmp	r3, r1
 8007992:	f000 80b1 	beq.w	8007af8 <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007996:	4962      	ldr	r1, [pc, #392]	; (8007b20 <_ZN3spi4initEP12spi_config_t+0x294>)
 8007998:	428b      	cmp	r3, r1
 800799a:	f000 80b1 	beq.w	8007b00 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 800799e:	4961      	ldr	r1, [pc, #388]	; (8007b24 <_ZN3spi4initEP12spi_config_t+0x298>)
 80079a0:	428b      	cmp	r3, r1
 80079a2:	f000 80b1 	beq.w	8007b08 <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 80079a6:	6892      	ldr	r2, [r2, #8]
 80079a8:	2a03      	cmp	r2, #3
 80079aa:	d972      	bls.n	8007a92 <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 80079ac:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	da57      	bge.n	8007a64 <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079b4:	495c      	ldr	r1, [pc, #368]	; (8007b28 <_ZN3spi4initEP12spi_config_t+0x29c>)
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	0112      	lsls	r2, r2, #4
 80079bc:	4419      	add	r1, r3
 80079be:	b2d2      	uxtb	r2, r2
 80079c0:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 80079c2:	4628      	mov	r0, r5
 80079c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 80079c6:	2100      	movs	r1, #0
 80079c8:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 80079ca:	2f00      	cmp	r7, #0
 80079cc:	d0d0      	beq.n	8007970 <_ZN3spi4initEP12spi_config_t+0xe4>
 80079ce:	2801      	cmp	r0, #1
 80079d0:	d1ce      	bne.n	8007970 <_ZN3spi4initEP12spi_config_t+0xe4>
 80079d2:	6859      	ldr	r1, [r3, #4]
 80079d4:	f041 0104 	orr.w	r1, r1, #4
 80079d8:	6059      	str	r1, [r3, #4]
 80079da:	e7c9      	b.n	8007970 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 80079dc:	6a10      	ldr	r0, [r2, #32]
 80079de:	f7ff fb43 	bl	8007068 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 80079e2:	68a3      	ldr	r3, [r4, #8]
 80079e4:	2205      	movs	r2, #5
 80079e6:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80079e8:	6a18      	ldr	r0, [r3, #32]
 80079ea:	f7ff fc25 	bl	8007238 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 80079ee:	68a3      	ldr	r3, [r4, #8]
 80079f0:	2207      	movs	r2, #7
 80079f2:	6a18      	ldr	r0, [r3, #32]
 80079f4:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80079f6:	f7ff fc5d 	bl	80072b4 <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 80079fa:	68a2      	ldr	r2, [r4, #8]
 80079fc:	7b10      	ldrb	r0, [r2, #12]
 80079fe:	2801      	cmp	r0, #1
 8007a00:	d18f      	bne.n	8007922 <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 8007a02:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8007a04:	f7ff fb30 	bl	8007068 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8007a08:	68a3      	ldr	r3, [r4, #8]
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007a0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a10:	f7ff fc12 	bl	8007238 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 8007a14:	68a3      	ldr	r3, [r4, #8]
 8007a16:	2207      	movs	r2, #7
 8007a18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a1a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007a1c:	f7ff fc4a 	bl	80072b4 <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007a20:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007a22:	7b10      	ldrb	r0, [r2, #12]
 8007a24:	e77d      	b.n	8007922 <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 8007a26:	6990      	ldr	r0, [r2, #24]
 8007a28:	f7ff fb1e 	bl	8007068 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	2205      	movs	r2, #5
 8007a30:	8b99      	ldrh	r1, [r3, #28]
 8007a32:	6998      	ldr	r0, [r3, #24]
 8007a34:	f7ff fc00 	bl	8007238 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 8007a38:	68a3      	ldr	r3, [r4, #8]
 8007a3a:	2207      	movs	r2, #7
 8007a3c:	8b99      	ldrh	r1, [r3, #28]
 8007a3e:	6998      	ldr	r0, [r3, #24]
 8007a40:	f7ff fc38 	bl	80072b4 <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007a44:	68a2      	ldr	r2, [r4, #8]
 8007a46:	7813      	ldrb	r3, [r2, #0]
 8007a48:	e766      	b.n	8007918 <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007a4a:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8007a4e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a54:	644b      	str	r3, [r1, #68]	; 0x44
 8007a56:	e74a      	b.n	80078ee <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007a58:	2333      	movs	r3, #51	; 0x33
 8007a5a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a5e:	6892      	ldr	r2, [r2, #8]
 8007a60:	2a03      	cmp	r2, #3
 8007a62:	d916      	bls.n	8007a92 <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a64:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007a68:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8007a6c:	0112      	lsls	r2, r2, #4
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a74:	4628      	mov	r0, r5
 8007a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8007a78:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8007a7c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a82:	644b      	str	r3, [r1, #68]	; 0x44
 8007a84:	e733      	b.n	80078ee <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a86:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007a88:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a8a:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007a8c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a90:	d8e8      	bhi.n	8007a64 <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 8007a92:	4628      	mov	r0, r5
 8007a94:	22b0      	movs	r2, #176	; 0xb0
 8007a96:	2100      	movs	r1, #0
 8007a98:	f003 fa7e 	bl	800af98 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8007a9c:	4b23      	ldr	r3, [pc, #140]	; (8007b2c <_ZN3spi4initEP12spi_config_t+0x2a0>)
 8007a9e:	4a24      	ldr	r2, [pc, #144]	; (8007b30 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 8007aa0:	4924      	ldr	r1, [pc, #144]	; (8007b34 <_ZN3spi4initEP12spi_config_t+0x2a8>)
 8007aa2:	4825      	ldr	r0, [pc, #148]	; (8007b38 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007aa4:	f003 f944 	bl	800ad30 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8007aa8:	4924      	ldr	r1, [pc, #144]	; (8007b3c <_ZN3spi4initEP12spi_config_t+0x2b0>)
 8007aaa:	4823      	ldr	r0, [pc, #140]	; (8007b38 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007aac:	2205      	movs	r2, #5
 8007aae:	f003 f8c3 	bl	800ac38 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8007ab2:	f241 3088 	movw	r0, #5000	; 0x1388
 8007ab6:	f000 fccf 	bl	8008458 <systick_delay_ms>
 8007aba:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007abe:	4920      	ldr	r1, [pc, #128]	; (8007b40 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 8007ac0:	4b20      	ldr	r3, [pc, #128]	; (8007b44 <_ZN3spi4initEP12spi_config_t+0x2b8>)
 8007ac2:	68ca      	ldr	r2, [r1, #12]
 8007ac4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007ac8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007aca:	60cb      	str	r3, [r1, #12]
 8007acc:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007ad0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007ad2:	e7fd      	b.n	8007ad0 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8007ad4:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8007ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ade:	640b      	str	r3, [r1, #64]	; 0x40
 8007ae0:	e705      	b.n	80078ee <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007ae2:	2324      	movs	r3, #36	; 0x24
 8007ae4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007ae8:	e7b9      	b.n	8007a5e <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8007aea:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 8007aee:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007af4:	644b      	str	r3, [r1, #68]	; 0x44
 8007af6:	e6fa      	b.n	80078ee <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007af8:	2354      	movs	r3, #84	; 0x54
 8007afa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007afe:	e7ae      	b.n	8007a5e <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007b00:	2355      	movs	r3, #85	; 0x55
 8007b02:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b06:	e7aa      	b.n	8007a5e <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007b08:	2356      	movs	r3, #86	; 0x56
 8007b0a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b0e:	e7a6      	b.n	8007a5e <_ZN3spi4initEP12spi_config_t+0x1d2>
 8007b10:	40013000 	.word	0x40013000
 8007b14:	40003800 	.word	0x40003800
 8007b18:	40003c00 	.word	0x40003c00
 8007b1c:	40013400 	.word	0x40013400
 8007b20:	40015000 	.word	0x40015000
 8007b24:	40015400 	.word	0x40015400
 8007b28:	e000ecfc 	.word	0xe000ecfc
 8007b2c:	080114d4 	.word	0x080114d4
 8007b30:	080114dc 	.word	0x080114dc
 8007b34:	0801146c 	.word	0x0801146c
 8007b38:	08011504 	.word	0x08011504
 8007b3c:	080114b8 	.word	0x080114b8
 8007b40:	e000ed00 	.word	0xe000ed00
 8007b44:	05fa0004 	.word	0x05fa0004

08007b48 <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4c:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007b4e:	2101      	movs	r1, #1
 8007b50:	7001      	strb	r1, [r0, #0]
 8007b52:	2100      	movs	r1, #0
 8007b54:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 8007b56:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b58:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 8007b5a:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b5c:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007b5e:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007b60:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b62:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007b64:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b66:	d463      	bmi.n	8007c30 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007b68:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007b6c:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007b6e:	d007      	beq.n	8007b80 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007b70:	680a      	ldr	r2, [r1, #0]
 8007b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b76:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 8007b78:	680a      	ldr	r2, [r1, #0]
 8007b7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b7e:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007b80:	680a      	ldr	r2, [r1, #0]
 8007b82:	0652      	lsls	r2, r2, #25
 8007b84:	d54f      	bpl.n	8007c26 <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 8007b86:	ae02      	add	r6, sp, #8
 8007b88:	b36b      	cbz	r3, 8007be6 <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007b8a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007b8e:	e006      	b.n	8007b9e <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007b90:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 8007b94:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007b96:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007b98:	61a0      	str	r0, [r4, #24]
		txcount++;
 8007b9a:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007b9c:	d923      	bls.n	8007be6 <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007b9e:	3108      	adds	r1, #8
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	f8cd 8000 	str.w	r8, [sp]
 8007baa:	f003 f9b9 	bl	800af20 <wait_flag_in_register_timeout>
 8007bae:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007bb2:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f003 f9f4 	bl	800afa4 <is_oke>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d047      	beq.n	8007c50 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007bc0:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007bc2:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007bc4:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007bc6:	68e1      	ldr	r1, [r4, #12]
 8007bc8:	681f      	ldr	r7, [r3, #0]
 8007bca:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007bcc:	1c58      	adds	r0, r3, #1
 8007bce:	2a00      	cmp	r2, #0
 8007bd0:	d0de      	beq.n	8007b90 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 8007bd2:	2a01      	cmp	r2, #1
 8007bd4:	bf04      	itt	eq
 8007bd6:	3302      	addeq	r3, #2
 8007bd8:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 8007bda:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 8007bde:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007be0:	429a      	cmp	r2, r3
		txcount++;
 8007be2:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007be4:	d8db      	bhi.n	8007b9e <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007be6:	2364      	movs	r3, #100	; 0x64
 8007be8:	3108      	adds	r1, #8
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	4630      	mov	r0, r6
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2280      	movs	r2, #128	; 0x80
 8007bf2:	f003 f995 	bl	800af20 <wait_flag_in_register_timeout>
 8007bf6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007bfa:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f003 f9d0 	bl	800afa4 <is_oke>
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d032      	beq.n	8007c6e <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007c08:	68a3      	ldr	r3, [r4, #8]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	f013 0f0a 	tst.w	r3, #10
 8007c10:	d105      	bne.n	8007c1e <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 8007c12:	68e3      	ldr	r3, [r4, #12]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007c1c:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 8007c1e:	4628      	mov	r0, r5
 8007c20:	b006      	add	sp, #24
 8007c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007c26:	680a      	ldr	r2, [r1, #0]
 8007c28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c2c:	600a      	str	r2, [r1, #0]
 8007c2e:	e7aa      	b.n	8007b86 <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 8007c30:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <_ZN3spi8transmitEmm+0x144>)
 8007c32:	4a17      	ldr	r2, [pc, #92]	; (8007c90 <_ZN3spi8transmitEmm+0x148>)
 8007c34:	4917      	ldr	r1, [pc, #92]	; (8007c94 <_ZN3spi8transmitEmm+0x14c>)
 8007c36:	4818      	ldr	r0, [pc, #96]	; (8007c98 <_ZN3spi8transmitEmm+0x150>)
 8007c38:	f003 f87a 	bl	800ad30 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007c42:	2103      	movs	r1, #3
 8007c44:	f003 f9a8 	bl	800af98 <set_return>
}
 8007c48:	4628      	mov	r0, r5
 8007c4a:	b006      	add	sp, #24
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007c50:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <_ZN3spi8transmitEmm+0x144>)
 8007c52:	4a0f      	ldr	r2, [pc, #60]	; (8007c90 <_ZN3spi8transmitEmm+0x148>)
 8007c54:	4911      	ldr	r1, [pc, #68]	; (8007c9c <_ZN3spi8transmitEmm+0x154>)
 8007c56:	4810      	ldr	r0, [pc, #64]	; (8007c98 <_ZN3spi8transmitEmm+0x150>)
 8007c58:	f003 f86a 	bl	800ad30 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	f240 1123 	movw	r1, #291	; 0x123
 8007c62:	f003 f99d 	bl	800afa0 <set_return_line>
}
 8007c66:	4628      	mov	r0, r5
 8007c68:	b006      	add	sp, #24
 8007c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <_ZN3spi8transmitEmm+0x144>)
 8007c70:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <_ZN3spi8transmitEmm+0x148>)
 8007c72:	490a      	ldr	r1, [pc, #40]	; (8007c9c <_ZN3spi8transmitEmm+0x154>)
 8007c74:	4808      	ldr	r0, [pc, #32]	; (8007c98 <_ZN3spi8transmitEmm+0x150>)
 8007c76:	f003 f85b 	bl	800ad30 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007c80:	f003 f98e 	bl	800afa0 <set_return_line>
}
 8007c84:	4628      	mov	r0, r5
 8007c86:	b006      	add	sp, #24
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	08011508 	.word	0x08011508
 8007c90:	080114dc 	.word	0x080114dc
 8007c94:	08011514 	.word	0x08011514
 8007c98:	08011504 	.word	0x08011504
 8007c9c:	08011558 	.word	0x08011558

08007ca0 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 8007ca4:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007ca6:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007ca8:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007caa:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007cac:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007cae:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007cb0:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 8007cb4:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 8007cb6:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 8007cb8:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007cba:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 8007cbe:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 8007cc2:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 8007cc4:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 8007cc6:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007cc8:	d158      	bne.n	8007d7c <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007cca:	460c      	mov	r4, r1
 8007ccc:	68c9      	ldr	r1, [r1, #12]
 8007cce:	680b      	ldr	r3, [r1, #0]
 8007cd0:	065b      	lsls	r3, r3, #25
 8007cd2:	d54e      	bpl.n	8007d72 <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 8007cd4:	ae02      	add	r6, sp, #8
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d060      	beq.n	8007d9c <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007cda:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007cde:	e00e      	b.n	8007cfe <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 8007ce0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 8007ce4:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 8007cec:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 8007cf0:	6a23      	ldr	r3, [r4, #32]
 8007cf2:	3301      	adds	r3, #1
		rxcount++;
 8007cf4:	3201      	adds	r2, #1
	while(txcount < txlen){
 8007cf6:	4298      	cmp	r0, r3
		txcount++;
 8007cf8:	6223      	str	r3, [r4, #32]
		rxcount++;
 8007cfa:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 8007cfc:	d94e      	bls.n	8007d9c <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007cfe:	2301      	movs	r3, #1
 8007d00:	2202      	movs	r2, #2
 8007d02:	3108      	adds	r1, #8
 8007d04:	4630      	mov	r0, r6
 8007d06:	f8cd 8000 	str.w	r8, [sp]
 8007d0a:	f003 f909 	bl	800af20 <wait_flag_in_register_timeout>
 8007d0e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d12:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007d16:	4628      	mov	r0, r5
 8007d18:	f003 f944 	bl	800afa4 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d1c:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 8007d1e:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d20:	461a      	mov	r2, r3
 8007d22:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 8007d24:	2900      	cmp	r1, #0
 8007d26:	d055      	beq.n	8007dd4 <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 8007d28:	69a7      	ldr	r7, [r4, #24]
 8007d2a:	68e1      	ldr	r1, [r4, #12]
 8007d2c:	f8d7 c000 	ldr.w	ip, [r7]
 8007d30:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d34:	3108      	adds	r1, #8
 8007d36:	f8cd 8000 	str.w	r8, [sp]
 8007d3a:	f003 f8f1 	bl	800af20 <wait_flag_in_register_timeout>
 8007d3e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d42:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007d46:	4628      	mov	r0, r5
 8007d48:	f003 f92c 	bl	800afa4 <is_oke>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d050      	beq.n	8007df2 <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007d50:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007d54:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007d56:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 8007d58:	68c8      	ldr	r0, [r1, #12]
 8007d5a:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d0bf      	beq.n	8007ce0 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d1c3      	bne.n	8007cec <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 8007d64:	69a3      	ldr	r3, [r4, #24]
 8007d66:	3302      	adds	r3, #2
 8007d68:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 8007d6a:	69e3      	ldr	r3, [r4, #28]
 8007d6c:	3302      	adds	r3, #2
 8007d6e:	61e3      	str	r3, [r4, #28]
 8007d70:	e7bc      	b.n	8007cec <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007d72:	680b      	ldr	r3, [r1, #0]
 8007d74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d78:	600b      	str	r3, [r1, #0]
 8007d7a:	e7ab      	b.n	8007cd4 <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007d7c:	4a2a      	ldr	r2, [pc, #168]	; (8007e28 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007d7e:	492b      	ldr	r1, [pc, #172]	; (8007e2c <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007d80:	482b      	ldr	r0, [pc, #172]	; (8007e30 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007d82:	4b2c      	ldr	r3, [pc, #176]	; (8007e34 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007d84:	f002 ffd4 	bl	800ad30 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007d88:	f240 1293 	movw	r2, #403	; 0x193
 8007d8c:	2103      	movs	r1, #3
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f003 f902 	bl	800af98 <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 8007d94:	4628      	mov	r0, r5
 8007d96:	b006      	add	sp, #24
 8007d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007d9c:	2364      	movs	r3, #100	; 0x64
 8007d9e:	3108      	adds	r1, #8
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	4630      	mov	r0, r6
 8007da4:	2300      	movs	r3, #0
 8007da6:	2280      	movs	r2, #128	; 0x80
 8007da8:	f003 f8ba 	bl	800af20 <wait_flag_in_register_timeout>
 8007dac:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007db0:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007db4:	4628      	mov	r0, r5
 8007db6:	f003 f8f5 	bl	800afa4 <is_oke>
 8007dba:	b348      	cbz	r0, 8007e10 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	f013 0f0a 	tst.w	r3, #10
 8007dc4:	d1e6      	bne.n	8007d94 <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 8007dc6:	68e3      	ldr	r3, [r4, #12]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007dd0:	9b05      	ldr	r3, [sp, #20]
 8007dd2:	e7df      	b.n	8007d94 <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007dd4:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007dd6:	4a14      	ldr	r2, [pc, #80]	; (8007e28 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007dd8:	4917      	ldr	r1, [pc, #92]	; (8007e38 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007dda:	4815      	ldr	r0, [pc, #84]	; (8007e30 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007ddc:	f002 ffa8 	bl	800ad30 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007de0:	4628      	mov	r0, r5
 8007de2:	f240 119f 	movw	r1, #415	; 0x19f
 8007de6:	f003 f8db 	bl	800afa0 <set_return_line>
}
 8007dea:	4628      	mov	r0, r5
 8007dec:	b006      	add	sp, #24
 8007dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007df2:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007df4:	4a0c      	ldr	r2, [pc, #48]	; (8007e28 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007df6:	4910      	ldr	r1, [pc, #64]	; (8007e38 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007df8:	480d      	ldr	r0, [pc, #52]	; (8007e30 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007dfa:	f002 ff99 	bl	800ad30 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007e04:	f003 f8cc 	bl	800afa0 <set_return_line>
}
 8007e08:	4628      	mov	r0, r5
 8007e0a:	b006      	add	sp, #24
 8007e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007e10:	4b08      	ldr	r3, [pc, #32]	; (8007e34 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e12:	4a05      	ldr	r2, [pc, #20]	; (8007e28 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e14:	4908      	ldr	r1, [pc, #32]	; (8007e38 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007e16:	4806      	ldr	r0, [pc, #24]	; (8007e30 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e18:	f002 ff8a 	bl	800ad30 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007e1c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007e20:	4628      	mov	r0, r5
 8007e22:	f003 f8bd 	bl	800afa0 <set_return_line>
		return ret;
 8007e26:	e7b5      	b.n	8007d94 <_ZN3spi16transmit_receiveEmmm+0xf4>
 8007e28:	080114dc 	.word	0x080114dc
 8007e2c:	0801158c 	.word	0x0801158c
 8007e30:	08011504 	.word	0x08011504
 8007e34:	08011578 	.word	0x08011578
 8007e38:	08011558 	.word	0x08011558

08007e3c <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007e40:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e42:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007e44:	68c9      	ldr	r1, [r1, #12]
 8007e46:	6813      	ldr	r3, [r2, #0]
 8007e48:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e4a:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007e4c:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007e4e:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007e50:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 8007e52:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e54:	b088      	sub	sp, #32
	spi -> txcount++;
 8007e56:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007e58:	b960      	cbnz	r0, 8007e74 <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007e5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d00e      	beq.n	8007e82 <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007e64:	2201      	movs	r2, #1
 8007e66:	2300      	movs	r3, #0
 8007e68:	702a      	strb	r2, [r5, #0]
 8007e6a:	606b      	str	r3, [r5, #4]
}
 8007e6c:	4628      	mov	r0, r5
 8007e6e:	b008      	add	sp, #32
 8007e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007e74:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 8007e76:	bf04      	itt	eq
 8007e78:	3202      	addeq	r2, #2
 8007e7a:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007e7c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d1f0      	bne.n	8007e64 <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007e82:	ae06      	add	r6, sp, #24
 8007e84:	2764      	movs	r7, #100	; 0x64
 8007e86:	4630      	mov	r0, r6
 8007e88:	3108      	adds	r1, #8
 8007e8a:	9700      	str	r7, [sp, #0]
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	2202      	movs	r2, #2
 8007e90:	f003 f846 	bl	800af20 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007e94:	4630      	mov	r0, r6
 8007e96:	f003 f885 	bl	800afa4 <is_oke>
 8007e9a:	b1f8      	cbz	r0, 8007edc <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007e9c:	68e1      	ldr	r1, [r4, #12]
 8007e9e:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ea0:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007ea4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ea8:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007eaa:	4640      	mov	r0, r8
 8007eac:	3108      	adds	r1, #8
 8007eae:	2300      	movs	r3, #0
 8007eb0:	2280      	movs	r2, #128	; 0x80
 8007eb2:	9700      	str	r7, [sp, #0]
 8007eb4:	f003 f834 	bl	800af20 <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007eb8:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007eba:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ec2:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007ec6:	d11c      	bne.n	8007f02 <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007ec8:	f013 0f0a 	tst.w	r3, #10
 8007ecc:	d1ca      	bne.n	8007e64 <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	9305      	str	r3, [sp, #20]
			(void)tmp;
 8007ed8:	9b05      	ldr	r3, [sp, #20]
 8007eda:	e7c3      	b.n	8007e64 <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 8007edc:	4630      	mov	r0, r6
 8007ede:	f240 3129 	movw	r1, #809	; 0x329
 8007ee2:	f003 f85d 	bl	800afa0 <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007ee6:	4919      	ldr	r1, [pc, #100]	; (8007f4c <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007ee8:	4819      	ldr	r0, [pc, #100]	; (8007f50 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007eea:	4b1a      	ldr	r3, [pc, #104]	; (8007f54 <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007eec:	4a1a      	ldr	r2, [pc, #104]	; (8007f58 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007eee:	f002 ff1f 	bl	800ad30 <LOG_ERROR>
			return ret;
 8007ef2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007ef6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007efa:	4628      	mov	r0, r5
 8007efc:	b008      	add	sp, #32
 8007efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 8007f02:	4630      	mov	r0, r6
 8007f04:	f003 f84e 	bl	800afa4 <is_oke>
 8007f08:	b110      	cbz	r0, 8007f10 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	e7db      	b.n	8007ec8 <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007f10:	4b10      	ldr	r3, [pc, #64]	; (8007f54 <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007f12:	4a11      	ldr	r2, [pc, #68]	; (8007f58 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007f14:	490d      	ldr	r1, [pc, #52]	; (8007f4c <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007f16:	480e      	ldr	r0, [pc, #56]	; (8007f50 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007f18:	f002 ff0a 	bl	800ad30 <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 8007f1c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8007f20:	4630      	mov	r0, r6
 8007f22:	f003 f83d 	bl	800afa0 <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007f26:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007f2a:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007f2c:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007f2e:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 8007f32:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007f34:	078b      	lsls	r3, r1, #30
 8007f36:	d503      	bpl.n	8007f40 <_Z10SPI_Tx_ISRP3spi+0x104>
 8007f38:	6813      	ldr	r3, [r2, #0]
 8007f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f3e:	6013      	str	r3, [r2, #0]
				return ret;
 8007f40:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f44:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f48:	e790      	b.n	8007e6c <_Z10SPI_Tx_ISRP3spi+0x30>
 8007f4a:	bf00      	nop
 8007f4c:	08011558 	.word	0x08011558
 8007f50:	08011504 	.word	0x08011504
 8007f54:	080115e4 	.word	0x080115e4
 8007f58:	080114dc 	.word	0x080114dc

08007f5c <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007f60:	68c9      	ldr	r1, [r1, #12]
 8007f62:	69e3      	ldr	r3, [r4, #28]
 8007f64:	68ca      	ldr	r2, [r1, #12]
 8007f66:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f68:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 8007f6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f6c:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8007f6e:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8007f70:	b086      	sub	sp, #24
 8007f72:	4605      	mov	r5, r0
	spi -> rxcount++;
 8007f74:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f76:	b962      	cbnz	r2, 8007f92 <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 8007f78:	69e2      	ldr	r2, [r4, #28]
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8007f7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007f84:	2201      	movs	r2, #1
 8007f86:	2300      	movs	r3, #0
 8007f88:	702a      	strb	r2, [r5, #0]
 8007f8a:	606b      	str	r3, [r5, #4]
}
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	b006      	add	sp, #24
 8007f90:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007f92:	2a01      	cmp	r2, #1
 8007f94:	d1f3      	bne.n	8007f7e <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 8007f96:	69e2      	ldr	r2, [r4, #28]
 8007f98:	3202      	adds	r2, #2
 8007f9a:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 8007f9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d1f0      	bne.n	8007f84 <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8007fa2:	684b      	ldr	r3, [r1, #4]
 8007fa4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007fa8:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 8007faa:	ae04      	add	r6, sp, #16
 8007fac:	2364      	movs	r3, #100	; 0x64
 8007fae:	9300      	str	r3, [sp, #0]
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	3108      	adds	r1, #8
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f002 ffb2 	bl	800af20 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f002 fff1 	bl	800afa4 <is_oke>
 8007fc2:	b158      	cbz	r0, 8007fdc <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007fc4:	68a3      	ldr	r3, [r4, #8]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f013 0f0a 	tst.w	r3, #10
 8007fcc:	d1da      	bne.n	8007f84 <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	68da      	ldr	r2, [r3, #12]
 8007fd2:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	9303      	str	r3, [sp, #12]
			(void)tmp;
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	e7d3      	b.n	8007f84 <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007fdc:	4b07      	ldr	r3, [pc, #28]	; (8007ffc <_Z10SPI_Rx_ISRP3spi+0xa0>)
 8007fde:	4a08      	ldr	r2, [pc, #32]	; (8008000 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 8007fe0:	4908      	ldr	r1, [pc, #32]	; (8008004 <_Z10SPI_Rx_ISRP3spi+0xa8>)
 8007fe2:	4809      	ldr	r0, [pc, #36]	; (8008008 <_Z10SPI_Rx_ISRP3spi+0xac>)
 8007fe4:	f002 fea4 	bl	800ad30 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007fe8:	f240 315d 	movw	r1, #861	; 0x35d
 8007fec:	4630      	mov	r0, r6
 8007fee:	f002 ffd7 	bl	800afa0 <set_return_line>
			return ret;
 8007ff2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8007ffa:	e7c7      	b.n	8007f8c <_Z10SPI_Rx_ISRP3spi+0x30>
 8007ffc:	080115f0 	.word	0x080115f0
 8008000:	080114dc 	.word	0x080114dc
 8008004:	08011558 	.word	0x08011558
 8008008:	08011504 	.word	0x08011504

0800800c <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 800800c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800800e:	4c22      	ldr	r4, [pc, #136]	; (8008098 <SPI1_IRQHandler+0x8c>)
 8008010:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 8008012:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008014:	685a      	ldr	r2, [r3, #4]
 8008016:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800801c:	9a00      	ldr	r2, [sp, #0]
 800801e:	0611      	lsls	r1, r2, #24
 8008020:	d502      	bpl.n	8008028 <SPI1_IRQHandler+0x1c>
 8008022:	9a01      	ldr	r2, [sp, #4]
 8008024:	0792      	lsls	r2, r2, #30
 8008026:	d41e      	bmi.n	8008066 <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008028:	9a00      	ldr	r2, [sp, #0]
 800802a:	0650      	lsls	r0, r2, #25
 800802c:	d502      	bpl.n	8008034 <SPI1_IRQHandler+0x28>
 800802e:	9a01      	ldr	r2, [sp, #4]
 8008030:	07d1      	lsls	r1, r2, #31
 8008032:	d424      	bmi.n	800807e <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008034:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008036:	0652      	lsls	r2, r2, #25
 8008038:	d40a      	bmi.n	8008050 <SPI1_IRQHandler+0x44>
 800803a:	9801      	ldr	r0, [sp, #4]
 800803c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008040:	d106      	bne.n	8008050 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008042:	6963      	ldr	r3, [r4, #20]
 8008044:	b16b      	cbz	r3, 8008062 <SPI1_IRQHandler+0x56>
 8008046:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 8008048:	b004      	add	sp, #16
 800804a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800804e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008058:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800805a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800805c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1f1      	bne.n	8008046 <SPI1_IRQHandler+0x3a>
}
 8008062:	b004      	add	sp, #16
 8008064:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008066:	4621      	mov	r1, r4
 8008068:	a802      	add	r0, sp, #8
 800806a:	f7ff fee7 	bl	8007e3c <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800806e:	a802      	add	r0, sp, #8
 8008070:	f002 ff98 	bl	800afa4 <is_oke>
			event = SPI_EVENT_ERROR;
 8008074:	2800      	cmp	r0, #0
 8008076:	bf14      	ite	ne
 8008078:	2001      	movne	r0, #1
 800807a:	2003      	moveq	r0, #3
 800807c:	e7e1      	b.n	8008042 <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800807e:	4906      	ldr	r1, [pc, #24]	; (8008098 <SPI1_IRQHandler+0x8c>)
 8008080:	a802      	add	r0, sp, #8
 8008082:	f7ff ff6b 	bl	8007f5c <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008086:	a802      	add	r0, sp, #8
 8008088:	f002 ff8c 	bl	800afa4 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800808c:	2800      	cmp	r0, #0
 800808e:	bf0c      	ite	eq
 8008090:	2003      	moveq	r0, #3
 8008092:	2002      	movne	r0, #2
 8008094:	e7d5      	b.n	8008042 <SPI1_IRQHandler+0x36>
 8008096:	bf00      	nop
 8008098:	2000b610 	.word	0x2000b610

0800809c <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 800809c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800809e:	4c22      	ldr	r4, [pc, #136]	; (8008128 <SPI2_IRQHandler+0x8c>)
 80080a0:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 80080a2:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80080ac:	9a00      	ldr	r2, [sp, #0]
 80080ae:	0611      	lsls	r1, r2, #24
 80080b0:	d502      	bpl.n	80080b8 <SPI2_IRQHandler+0x1c>
 80080b2:	9a01      	ldr	r2, [sp, #4]
 80080b4:	0792      	lsls	r2, r2, #30
 80080b6:	d41e      	bmi.n	80080f6 <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80080b8:	9a00      	ldr	r2, [sp, #0]
 80080ba:	0650      	lsls	r0, r2, #25
 80080bc:	d502      	bpl.n	80080c4 <SPI2_IRQHandler+0x28>
 80080be:	9a01      	ldr	r2, [sp, #4]
 80080c0:	07d1      	lsls	r1, r2, #31
 80080c2:	d424      	bmi.n	800810e <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80080c4:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80080c6:	0652      	lsls	r2, r2, #25
 80080c8:	d40a      	bmi.n	80080e0 <SPI2_IRQHandler+0x44>
 80080ca:	9801      	ldr	r0, [sp, #4]
 80080cc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80080d0:	d106      	bne.n	80080e0 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080d2:	6963      	ldr	r3, [r4, #20]
 80080d4:	b16b      	cbz	r3, 80080f2 <SPI2_IRQHandler+0x56>
 80080d6:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 80080d8:	b004      	add	sp, #16
 80080da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080de:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80080e0:	68da      	ldr	r2, [r3, #12]
 80080e2:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80080e8:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080ea:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80080ec:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f1      	bne.n	80080d6 <SPI2_IRQHandler+0x3a>
}
 80080f2:	b004      	add	sp, #16
 80080f4:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80080f6:	4621      	mov	r1, r4
 80080f8:	a802      	add	r0, sp, #8
 80080fa:	f7ff fe9f 	bl	8007e3c <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80080fe:	a802      	add	r0, sp, #8
 8008100:	f002 ff50 	bl	800afa4 <is_oke>
			event = SPI_EVENT_ERROR;
 8008104:	2800      	cmp	r0, #0
 8008106:	bf14      	ite	ne
 8008108:	2001      	movne	r0, #1
 800810a:	2003      	moveq	r0, #3
 800810c:	e7e1      	b.n	80080d2 <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800810e:	4906      	ldr	r1, [pc, #24]	; (8008128 <SPI2_IRQHandler+0x8c>)
 8008110:	a802      	add	r0, sp, #8
 8008112:	f7ff ff23 	bl	8007f5c <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008116:	a802      	add	r0, sp, #8
 8008118:	f002 ff44 	bl	800afa4 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800811c:	2800      	cmp	r0, #0
 800811e:	bf0c      	ite	eq
 8008120:	2003      	moveq	r0, #3
 8008122:	2002      	movne	r0, #2
 8008124:	e7d5      	b.n	80080d2 <SPI2_IRQHandler+0x36>
 8008126:	bf00      	nop
 8008128:	2000b644 	.word	0x2000b644

0800812c <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 800812c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800812e:	4c22      	ldr	r4, [pc, #136]	; (80081b8 <SPI3_IRQHandler+0x8c>)
 8008130:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 8008132:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008138:	689a      	ldr	r2, [r3, #8]
 800813a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800813c:	9a00      	ldr	r2, [sp, #0]
 800813e:	0611      	lsls	r1, r2, #24
 8008140:	d502      	bpl.n	8008148 <SPI3_IRQHandler+0x1c>
 8008142:	9a01      	ldr	r2, [sp, #4]
 8008144:	0792      	lsls	r2, r2, #30
 8008146:	d41e      	bmi.n	8008186 <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008148:	9a00      	ldr	r2, [sp, #0]
 800814a:	0650      	lsls	r0, r2, #25
 800814c:	d502      	bpl.n	8008154 <SPI3_IRQHandler+0x28>
 800814e:	9a01      	ldr	r2, [sp, #4]
 8008150:	07d1      	lsls	r1, r2, #31
 8008152:	d424      	bmi.n	800819e <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008154:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008156:	0652      	lsls	r2, r2, #25
 8008158:	d40a      	bmi.n	8008170 <SPI3_IRQHandler+0x44>
 800815a:	9801      	ldr	r0, [sp, #4]
 800815c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008160:	d106      	bne.n	8008170 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008162:	6963      	ldr	r3, [r4, #20]
 8008164:	b16b      	cbz	r3, 8008182 <SPI3_IRQHandler+0x56>
 8008166:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 8008168:	b004      	add	sp, #16
 800816a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800816e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008178:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800817a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800817c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1f1      	bne.n	8008166 <SPI3_IRQHandler+0x3a>
}
 8008182:	b004      	add	sp, #16
 8008184:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008186:	4621      	mov	r1, r4
 8008188:	a802      	add	r0, sp, #8
 800818a:	f7ff fe57 	bl	8007e3c <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800818e:	a802      	add	r0, sp, #8
 8008190:	f002 ff08 	bl	800afa4 <is_oke>
			event = SPI_EVENT_ERROR;
 8008194:	2800      	cmp	r0, #0
 8008196:	bf14      	ite	ne
 8008198:	2001      	movne	r0, #1
 800819a:	2003      	moveq	r0, #3
 800819c:	e7e1      	b.n	8008162 <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800819e:	4906      	ldr	r1, [pc, #24]	; (80081b8 <SPI3_IRQHandler+0x8c>)
 80081a0:	a802      	add	r0, sp, #8
 80081a2:	f7ff fedb 	bl	8007f5c <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80081a6:	a802      	add	r0, sp, #8
 80081a8:	f002 fefc 	bl	800afa4 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80081ac:	2800      	cmp	r0, #0
 80081ae:	bf0c      	ite	eq
 80081b0:	2003      	moveq	r0, #3
 80081b2:	2002      	movne	r0, #2
 80081b4:	e7d5      	b.n	8008162 <SPI3_IRQHandler+0x36>
 80081b6:	bf00      	nop
 80081b8:	2000b678 	.word	0x2000b678

080081bc <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 80081bc:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081be:	4c22      	ldr	r4, [pc, #136]	; (8008248 <SPI4_IRQHandler+0x8c>)
 80081c0:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 80081c2:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081c4:	685a      	ldr	r2, [r3, #4]
 80081c6:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80081cc:	9a00      	ldr	r2, [sp, #0]
 80081ce:	0611      	lsls	r1, r2, #24
 80081d0:	d502      	bpl.n	80081d8 <SPI4_IRQHandler+0x1c>
 80081d2:	9a01      	ldr	r2, [sp, #4]
 80081d4:	0792      	lsls	r2, r2, #30
 80081d6:	d41e      	bmi.n	8008216 <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80081d8:	9a00      	ldr	r2, [sp, #0]
 80081da:	0650      	lsls	r0, r2, #25
 80081dc:	d502      	bpl.n	80081e4 <SPI4_IRQHandler+0x28>
 80081de:	9a01      	ldr	r2, [sp, #4]
 80081e0:	07d1      	lsls	r1, r2, #31
 80081e2:	d424      	bmi.n	800822e <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80081e4:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80081e6:	0652      	lsls	r2, r2, #25
 80081e8:	d40a      	bmi.n	8008200 <SPI4_IRQHandler+0x44>
 80081ea:	9801      	ldr	r0, [sp, #4]
 80081ec:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80081f0:	d106      	bne.n	8008200 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081f2:	6963      	ldr	r3, [r4, #20]
 80081f4:	b16b      	cbz	r3, 8008212 <SPI4_IRQHandler+0x56>
 80081f6:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 80081f8:	b004      	add	sp, #16
 80081fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081fe:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008200:	68da      	ldr	r2, [r3, #12]
 8008202:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008208:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800820a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800820c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f1      	bne.n	80081f6 <SPI4_IRQHandler+0x3a>
}
 8008212:	b004      	add	sp, #16
 8008214:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008216:	4621      	mov	r1, r4
 8008218:	a802      	add	r0, sp, #8
 800821a:	f7ff fe0f 	bl	8007e3c <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800821e:	a802      	add	r0, sp, #8
 8008220:	f002 fec0 	bl	800afa4 <is_oke>
			event = SPI_EVENT_ERROR;
 8008224:	2800      	cmp	r0, #0
 8008226:	bf14      	ite	ne
 8008228:	2001      	movne	r0, #1
 800822a:	2003      	moveq	r0, #3
 800822c:	e7e1      	b.n	80081f2 <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800822e:	4906      	ldr	r1, [pc, #24]	; (8008248 <SPI4_IRQHandler+0x8c>)
 8008230:	a802      	add	r0, sp, #8
 8008232:	f7ff fe93 	bl	8007f5c <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008236:	a802      	add	r0, sp, #8
 8008238:	f002 feb4 	bl	800afa4 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800823c:	2800      	cmp	r0, #0
 800823e:	bf0c      	ite	eq
 8008240:	2003      	moveq	r0, #3
 8008242:	2002      	movne	r0, #2
 8008244:	e7d5      	b.n	80081f2 <SPI4_IRQHandler+0x36>
 8008246:	bf00      	nop
 8008248:	2000b6ac 	.word	0x2000b6ac

0800824c <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 800824c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800824e:	4c22      	ldr	r4, [pc, #136]	; (80082d8 <SPI5_IRQHandler+0x8c>)
 8008250:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 8008252:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008258:	689a      	ldr	r2, [r3, #8]
 800825a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800825c:	9a00      	ldr	r2, [sp, #0]
 800825e:	0611      	lsls	r1, r2, #24
 8008260:	d502      	bpl.n	8008268 <SPI5_IRQHandler+0x1c>
 8008262:	9a01      	ldr	r2, [sp, #4]
 8008264:	0792      	lsls	r2, r2, #30
 8008266:	d41e      	bmi.n	80082a6 <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008268:	9a00      	ldr	r2, [sp, #0]
 800826a:	0650      	lsls	r0, r2, #25
 800826c:	d502      	bpl.n	8008274 <SPI5_IRQHandler+0x28>
 800826e:	9a01      	ldr	r2, [sp, #4]
 8008270:	07d1      	lsls	r1, r2, #31
 8008272:	d424      	bmi.n	80082be <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008274:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008276:	0652      	lsls	r2, r2, #25
 8008278:	d40a      	bmi.n	8008290 <SPI5_IRQHandler+0x44>
 800827a:	9801      	ldr	r0, [sp, #4]
 800827c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008280:	d106      	bne.n	8008290 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008282:	6963      	ldr	r3, [r4, #20]
 8008284:	b16b      	cbz	r3, 80082a2 <SPI5_IRQHandler+0x56>
 8008286:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 8008288:	b004      	add	sp, #16
 800828a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800828e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008298:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800829a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800829c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f1      	bne.n	8008286 <SPI5_IRQHandler+0x3a>
}
 80082a2:	b004      	add	sp, #16
 80082a4:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80082a6:	4621      	mov	r1, r4
 80082a8:	a802      	add	r0, sp, #8
 80082aa:	f7ff fdc7 	bl	8007e3c <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80082ae:	a802      	add	r0, sp, #8
 80082b0:	f002 fe78 	bl	800afa4 <is_oke>
			event = SPI_EVENT_ERROR;
 80082b4:	2800      	cmp	r0, #0
 80082b6:	bf14      	ite	ne
 80082b8:	2001      	movne	r0, #1
 80082ba:	2003      	moveq	r0, #3
 80082bc:	e7e1      	b.n	8008282 <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80082be:	4906      	ldr	r1, [pc, #24]	; (80082d8 <SPI5_IRQHandler+0x8c>)
 80082c0:	a802      	add	r0, sp, #8
 80082c2:	f7ff fe4b 	bl	8007f5c <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80082c6:	a802      	add	r0, sp, #8
 80082c8:	f002 fe6c 	bl	800afa4 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80082cc:	2800      	cmp	r0, #0
 80082ce:	bf0c      	ite	eq
 80082d0:	2003      	moveq	r0, #3
 80082d2:	2002      	movne	r0, #2
 80082d4:	e7d5      	b.n	8008282 <SPI5_IRQHandler+0x36>
 80082d6:	bf00      	nop
 80082d8:	2000b6e0 	.word	0x2000b6e0

080082dc <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 80082dc:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082de:	4c22      	ldr	r4, [pc, #136]	; (8008368 <SPI6_IRQHandler+0x8c>)
 80082e0:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 80082e2:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80082ec:	9a00      	ldr	r2, [sp, #0]
 80082ee:	0611      	lsls	r1, r2, #24
 80082f0:	d502      	bpl.n	80082f8 <SPI6_IRQHandler+0x1c>
 80082f2:	9a01      	ldr	r2, [sp, #4]
 80082f4:	0792      	lsls	r2, r2, #30
 80082f6:	d41e      	bmi.n	8008336 <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80082f8:	9a00      	ldr	r2, [sp, #0]
 80082fa:	0650      	lsls	r0, r2, #25
 80082fc:	d502      	bpl.n	8008304 <SPI6_IRQHandler+0x28>
 80082fe:	9a01      	ldr	r2, [sp, #4]
 8008300:	07d1      	lsls	r1, r2, #31
 8008302:	d424      	bmi.n	800834e <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008304:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008306:	0652      	lsls	r2, r2, #25
 8008308:	d40a      	bmi.n	8008320 <SPI6_IRQHandler+0x44>
 800830a:	9801      	ldr	r0, [sp, #4]
 800830c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008310:	d106      	bne.n	8008320 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008312:	6963      	ldr	r3, [r4, #20]
 8008314:	b16b      	cbz	r3, 8008332 <SPI6_IRQHandler+0x56>
 8008316:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 8008318:	b004      	add	sp, #16
 800831a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800831e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008320:	68da      	ldr	r2, [r3, #12]
 8008322:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008328:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800832a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800832c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1f1      	bne.n	8008316 <SPI6_IRQHandler+0x3a>
}
 8008332:	b004      	add	sp, #16
 8008334:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008336:	4621      	mov	r1, r4
 8008338:	a802      	add	r0, sp, #8
 800833a:	f7ff fd7f 	bl	8007e3c <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800833e:	a802      	add	r0, sp, #8
 8008340:	f002 fe30 	bl	800afa4 <is_oke>
			event = SPI_EVENT_ERROR;
 8008344:	2800      	cmp	r0, #0
 8008346:	bf14      	ite	ne
 8008348:	2001      	movne	r0, #1
 800834a:	2003      	moveq	r0, #3
 800834c:	e7e1      	b.n	8008312 <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800834e:	4906      	ldr	r1, [pc, #24]	; (8008368 <SPI6_IRQHandler+0x8c>)
 8008350:	a802      	add	r0, sp, #8
 8008352:	f7ff fe03 	bl	8007f5c <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008356:	a802      	add	r0, sp, #8
 8008358:	f002 fe24 	bl	800afa4 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800835c:	2800      	cmp	r0, #0
 800835e:	bf0c      	ite	eq
 8008360:	2003      	moveq	r0, #3
 8008362:	2002      	movne	r0, #2
 8008364:	e7d5      	b.n	8008312 <SPI6_IRQHandler+0x36>
 8008366:	bf00      	nop
 8008368:	2000b714 	.word	0x2000b714

0800836c <_GLOBAL__sub_I_cc>:
}
 800836c:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 800836e:	4e2c      	ldr	r6, [pc, #176]	; (8008420 <_GLOBAL__sub_I_cc+0xb4>)
 8008370:	4c2c      	ldr	r4, [pc, #176]	; (8008424 <_GLOBAL__sub_I_cc+0xb8>)
 8008372:	4d2d      	ldr	r5, [pc, #180]	; (8008428 <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 8008374:	4f2d      	ldr	r7, [pc, #180]	; (800842c <_GLOBAL__sub_I_cc+0xc0>)
 8008376:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 8008378:	2300      	movs	r3, #0
 800837a:	e9c6 3300 	strd	r3, r3, [r6]
 800837e:	e9c6 3304 	strd	r3, r3, [r6, #16]
 8008382:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8008386:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800838a:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 800838e:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 8008390:	4e27      	ldr	r6, [pc, #156]	; (8008430 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 8008392:	60ab      	str	r3, [r5, #8]
 8008394:	e9c5 3300 	strd	r3, r3, [r5]
 8008398:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800839c:	e9c5 3306 	strd	r3, r3, [r5, #24]
 80083a0:	e9c5 3308 	strd	r3, r3, [r5, #32]
 80083a4:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80083a8:	e9c4 3300 	strd	r3, r3, [r4]
 80083ac:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80083b0:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80083b4:	60a3      	str	r3, [r4, #8]
 80083b6:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 80083b8:	60ee      	str	r6, [r5, #12]
 80083ba:	4d1e      	ldr	r5, [pc, #120]	; (8008434 <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 80083bc:	481e      	ldr	r0, [pc, #120]	; (8008438 <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 80083be:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 80083c0:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80083c4:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 80083c6:	4c1d      	ldr	r4, [pc, #116]	; (800843c <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 80083c8:	491d      	ldr	r1, [pc, #116]	; (8008440 <_GLOBAL__sub_I_cc+0xd4>)
 80083ca:	4a1e      	ldr	r2, [pc, #120]	; (8008444 <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 80083cc:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 80083ce:	e9c0 3300 	strd	r3, r3, [r0]
 80083d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083d6:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80083da:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80083de:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80083e2:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 80083e4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80083e8:	4817      	ldr	r0, [pc, #92]	; (8008448 <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 80083ea:	608b      	str	r3, [r1, #8]
 80083ec:	e9c1 3300 	strd	r3, r3, [r1]
 80083f0:	e9c1 3304 	strd	r3, r3, [r1, #16]
 80083f4:	e9c1 3306 	strd	r3, r3, [r1, #24]
 80083f8:	e9c1 3308 	strd	r3, r3, [r1, #32]
 80083fc:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 8008400:	e9c2 3300 	strd	r3, r3, [r2]
 8008404:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8008408:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 800840a:	60cc      	str	r4, [r1, #12]
}
 800840c:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 800840e:	e9c2 3306 	strd	r3, r3, [r2, #24]
 8008412:	e9c2 3308 	strd	r3, r3, [r2, #32]
 8008416:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 800841a:	60d0      	str	r0, [r2, #12]
}
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	2000b610 	.word	0x2000b610
 8008424:	2000b678 	.word	0x2000b678
 8008428:	2000b644 	.word	0x2000b644
 800842c:	40013000 	.word	0x40013000
 8008430:	40003800 	.word	0x40003800
 8008434:	40003c00 	.word	0x40003c00
 8008438:	2000b6ac 	.word	0x2000b6ac
 800843c:	40013400 	.word	0x40013400
 8008440:	2000b6e0 	.word	0x2000b6e0
 8008444:	2000b714 	.word	0x2000b714
 8008448:	40015400 	.word	0x40015400

0800844c <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 800844c:	4b01      	ldr	r3, [pc, #4]	; (8008454 <systick_get_tick+0x8>)
 800844e:	6818      	ldr	r0, [r3, #0]
}
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	2000b748 	.word	0x2000b748

08008458 <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 8008458:	4a05      	ldr	r2, [pc, #20]	; (8008470 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 800845a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800845e:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 8008460:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 8008462:	bf38      	it	cc
 8008464:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	1a5b      	subs	r3, r3, r1
 800846a:	4283      	cmp	r3, r0
 800846c:	d3fb      	bcc.n	8008466 <systick_delay_ms+0xe>
}
 800846e:	4770      	bx	lr
 8008470:	2000b748 	.word	0x2000b748

08008474 <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 8008474:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <systick_init+0x38>)
 8008476:	4a0e      	ldr	r2, [pc, #56]	; (80084b0 <systick_init+0x3c>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	fba2 2303 	umull	r2, r3, r2, r3
 800847e:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008480:	3b01      	subs	r3, #1
 8008482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 8008486:	4601      	mov	r1, r0
 8008488:	d20b      	bcs.n	80084a2 <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800848a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800848e:	4809      	ldr	r0, [pc, #36]	; (80084b4 <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008490:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008492:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8008496:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800849a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800849c:	2000      	movs	r0, #0
 800849e:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084a0:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 80084a2:	2200      	movs	r2, #0
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a8:	f002 be12 	b.w	800b0d0 <NVIC_Set_Priority>
 80084ac:	20000000 	.word	0x20000000
 80084b0:	10624dd3 	.word	0x10624dd3
 80084b4:	e000ed00 	.word	0xe000ed00

080084b8 <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 80084b8:	4b01      	ldr	r3, [pc, #4]	; (80084c0 <get_tick+0x8>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4718      	bx	r3
 80084be:	bf00      	nop
 80084c0:	2000006c 	.word	0x2000006c

080084c4 <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 80084c4:	4b01      	ldr	r3, [pc, #4]	; (80084cc <delay_ms+0x8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4718      	bx	r3
 80084ca:	bf00      	nop
 80084cc:	20000068 	.word	0x20000068

080084d0 <app_systick_process>:
	sdk_tick++;
 80084d0:	4a17      	ldr	r2, [pc, #92]	; (8008530 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 80084d2:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 80084d4:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 80084d6:	4c17      	ldr	r4, [pc, #92]	; (8008534 <app_systick_process+0x64>)
	sdk_tick++;
 80084d8:	3301      	adds	r3, #1
 80084da:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	3301      	adds	r3, #1
 80084e0:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084e8:	d000      	beq.n	80084ec <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 80084ea:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 80084ec:	4d12      	ldr	r5, [pc, #72]	; (8008538 <app_systick_process+0x68>)
 80084ee:	ed95 7a00 	vldr	s14, [r5]
 80084f2:	edd4 7a00 	vldr	s15, [r4]
 80084f6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80084fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008502:	ee17 0a90 	vmov	r0, s15
 8008506:	f7f8 f83f 	bl	8000588 <__aeabi_f2d>
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	2000      	movs	r0, #0
 8008510:	490a      	ldr	r1, [pc, #40]	; (800853c <app_systick_process+0x6c>)
 8008512:	f7f7 fed9 	bl	80002c8 <__aeabi_dsub>
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <app_systick_process+0x70>)
 8008518:	2200      	movs	r2, #0
 800851a:	f7f8 f88d 	bl	8000638 <__aeabi_dmul>
 800851e:	f7f8 fb83 	bl	8000c28 <__aeabi_d2f>
 8008522:	4a08      	ldr	r2, [pc, #32]	; (8008544 <app_systick_process+0x74>)
			systick_total_ticks = 0;
 8008524:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 8008526:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 8008528:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 800852a:	602b      	str	r3, [r5, #0]
	}
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	2000b748 	.word	0x2000b748
 8008534:	2000b9f8 	.word	0x2000b9f8
 8008538:	2000b9f4 	.word	0x2000b9f4
 800853c:	3ff00000 	.word	0x3ff00000
 8008540:	40590000 	.word	0x40590000
 8008544:	2000b9ec 	.word	0x2000b9ec

08008548 <__NVIC_SystemReset>:
 8008548:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800854c:	4905      	ldr	r1, [pc, #20]	; (8008564 <__NVIC_SystemReset+0x1c>)
 800854e:	4b06      	ldr	r3, [pc, #24]	; (8008568 <__NVIC_SystemReset+0x20>)
 8008550:	68ca      	ldr	r2, [r1, #12]
 8008552:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008556:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008558:	60cb      	str	r3, [r1, #12]
 800855a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800855e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008560:	e7fd      	b.n	800855e <__NVIC_SystemReset+0x16>
 8008562:	bf00      	nop
 8008564:	e000ed00 	.word	0xe000ed00
 8008568:	05fa0004 	.word	0x05fa0004

0800856c <_ZN3tim4initEP12tim_config_t>:
tim::tim(TIM_TypeDef *Timer){
	_tim = Timer;
}

/* TIM Basic */
stm_ret_t tim::init(tim_config_t *conf){
 800856c:	b470      	push	{r4, r5, r6}
	stm_ret_t ret;

	_conf = conf;

#if defined(TIM1)
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 800856e:	684b      	ldr	r3, [r1, #4]
 8008570:	4c7d      	ldr	r4, [pc, #500]	; (8008768 <_ZN3tim4initEP12tim_config_t+0x1fc>)
	_conf = conf;
 8008572:	610a      	str	r2, [r1, #16]
	stm_ret_t ret;
 8008574:	2501      	movs	r5, #1
 8008576:	7005      	strb	r5, [r0, #0]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008578:	42a3      	cmp	r3, r4
	stm_ret_t ret;
 800857a:	f04f 0500 	mov.w	r5, #0
 800857e:	6045      	str	r5, [r0, #4]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008580:	f000 8087 	beq.w	8008692 <_ZN3tim4initEP12tim_config_t+0x126>
#endif
#if defined(TIM2)
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008588:	d033      	beq.n	80085f2 <_ZN3tim4initEP12tim_config_t+0x86>
#endif
#if defined(TIM3)
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800858a:	4c78      	ldr	r4, [pc, #480]	; (800876c <_ZN3tim4initEP12tim_config_t+0x200>)
 800858c:	42a3      	cmp	r3, r4
 800858e:	f000 808f 	beq.w	80086b0 <_ZN3tim4initEP12tim_config_t+0x144>
#endif
#if defined(TIM4)
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008592:	4c77      	ldr	r4, [pc, #476]	; (8008770 <_ZN3tim4initEP12tim_config_t+0x204>)
 8008594:	42a3      	cmp	r3, r4
 8008596:	f000 8095 	beq.w	80086c4 <_ZN3tim4initEP12tim_config_t+0x158>
#endif
#if defined(TIM5)
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800859a:	4c76      	ldr	r4, [pc, #472]	; (8008774 <_ZN3tim4initEP12tim_config_t+0x208>)
 800859c:	42a3      	cmp	r3, r4
 800859e:	d07e      	beq.n	800869e <_ZN3tim4initEP12tim_config_t+0x132>
#endif
#if defined(TIM6)
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 80085a0:	4c75      	ldr	r4, [pc, #468]	; (8008778 <_ZN3tim4initEP12tim_config_t+0x20c>)
 80085a2:	42a3      	cmp	r3, r4
 80085a4:	f000 8094 	beq.w	80086d0 <_ZN3tim4initEP12tim_config_t+0x164>
#endif
#if defined(TIM7)
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 80085a8:	4c74      	ldr	r4, [pc, #464]	; (800877c <_ZN3tim4initEP12tim_config_t+0x210>)
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	f000 80a2 	beq.w	80086f4 <_ZN3tim4initEP12tim_config_t+0x188>
#endif
#if defined(TIM8)
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 80085b0:	4c73      	ldr	r4, [pc, #460]	; (8008780 <_ZN3tim4initEP12tim_config_t+0x214>)
 80085b2:	42a3      	cmp	r3, r4
 80085b4:	f000 80a7 	beq.w	8008706 <_ZN3tim4initEP12tim_config_t+0x19a>
#endif
#if defined(TIM9)
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 80085b8:	4c72      	ldr	r4, [pc, #456]	; (8008784 <_ZN3tim4initEP12tim_config_t+0x218>)
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	f000 808e 	beq.w	80086dc <_ZN3tim4initEP12tim_config_t+0x170>
#endif
#if defined(TIM10)
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 80085c0:	4c71      	ldr	r4, [pc, #452]	; (8008788 <_ZN3tim4initEP12tim_config_t+0x21c>)
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	f000 80a8 	beq.w	8008718 <_ZN3tim4initEP12tim_config_t+0x1ac>
#endif
#if defined(TIM11)
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 80085c8:	4c70      	ldr	r4, [pc, #448]	; (800878c <_ZN3tim4initEP12tim_config_t+0x220>)
 80085ca:	42a3      	cmp	r3, r4
 80085cc:	f000 80b0 	beq.w	8008730 <_ZN3tim4initEP12tim_config_t+0x1c4>
#endif
#if defined(TIM12)
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 80085d0:	4c6f      	ldr	r4, [pc, #444]	; (8008790 <_ZN3tim4initEP12tim_config_t+0x224>)
 80085d2:	42a3      	cmp	r3, r4
 80085d4:	f000 80b5 	beq.w	8008742 <_ZN3tim4initEP12tim_config_t+0x1d6>
#endif
#if defined(TIM13)
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 80085d8:	4c6e      	ldr	r4, [pc, #440]	; (8008794 <_ZN3tim4initEP12tim_config_t+0x228>)
 80085da:	42a3      	cmp	r3, r4
 80085dc:	f000 80b7 	beq.w	800874e <_ZN3tim4initEP12tim_config_t+0x1e2>
#endif
#if defined(TIM14)
	else if(_tim == TIM14) RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 80085e0:	4c6d      	ldr	r4, [pc, #436]	; (8008798 <_ZN3tim4initEP12tim_config_t+0x22c>)
 80085e2:	42a3      	cmp	r3, r4
 80085e4:	d10a      	bne.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
 80085e6:	4d6d      	ldr	r5, [pc, #436]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80085e8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80085ea:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80085ee:	642c      	str	r4, [r5, #64]	; 0x40
 80085f0:	e004      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 80085f2:	4d6a      	ldr	r5, [pc, #424]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80085f4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80085f6:	f044 0401 	orr.w	r4, r4, #1
 80085fa:	642c      	str	r4, [r5, #64]	; 0x40
#endif

	/* BASIC TIMER */
	_tim -> CR1 = 0U;
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 80085fc:	7a94      	ldrb	r4, [r2, #10]
 80085fe:	7a16      	ldrb	r6, [r2, #8]
 8008600:	01e4      	lsls	r4, r4, #7
	_tim -> CR1 = 0U;
 8008602:	2500      	movs	r5, #0
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8008604:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8008608:	7a56      	ldrb	r6, [r2, #9]
	_tim -> CR1 = 0U;
 800860a:	601d      	str	r5, [r3, #0]
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 800860c:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 8008610:	681e      	ldr	r6, [r3, #0]
 8008612:	4334      	orrs	r4, r6
 8008614:	601c      	str	r4, [r3, #0]

	_tim -> ARR = 0U;
	_tim -> ARR = _conf -> reload - 1;
 8008616:	6854      	ldr	r4, [r2, #4]
	_tim -> ARR = 0U;
 8008618:	62dd      	str	r5, [r3, #44]	; 0x2c
	_tim -> ARR = _conf -> reload - 1;
 800861a:	3c01      	subs	r4, #1
 800861c:	62dc      	str	r4, [r3, #44]	; 0x2c
	_tim -> PSC = 0U;
	_tim -> PSC = _conf -> prescaler - 1;
 800861e:	6814      	ldr	r4, [r2, #0]
	_tim -> PSC = 0U;
 8008620:	629d      	str	r5, [r3, #40]	; 0x28

	_tim -> EGR = TIM_EGR_UG;

	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8008622:	7ad5      	ldrb	r5, [r2, #11]
	_tim -> EGR = TIM_EGR_UG;
 8008624:	2201      	movs	r2, #1
	_tim -> PSC = _conf -> prescaler - 1;
 8008626:	3c01      	subs	r4, #1
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8008628:	4295      	cmp	r5, r2
	_tim -> PSC = _conf -> prescaler - 1;
 800862a:	629c      	str	r4, [r3, #40]	; 0x28
	_tim -> EGR = TIM_EGR_UG;
 800862c:	615a      	str	r2, [r3, #20]
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 800862e:	d001      	beq.n	8008634 <_ZN3tim4initEP12tim_config_t+0xc8>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
#endif
	}

	return ret;
}
 8008630:	bc70      	pop	{r4, r5, r6}
 8008632:	4770      	bx	lr
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8008634:	4a4c      	ldr	r2, [pc, #304]	; (8008768 <_ZN3tim4initEP12tim_config_t+0x1fc>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d040      	beq.n	80086bc <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 800863a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863e:	d034      	beq.n	80086aa <_ZN3tim4initEP12tim_config_t+0x13e>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 8008640:	4a4a      	ldr	r2, [pc, #296]	; (800876c <_ZN3tim4initEP12tim_config_t+0x200>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d053      	beq.n	80086ee <_ZN3tim4initEP12tim_config_t+0x182>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8008646:	4a4a      	ldr	r2, [pc, #296]	; (8008770 <_ZN3tim4initEP12tim_config_t+0x204>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d059      	beq.n	8008700 <_ZN3tim4initEP12tim_config_t+0x194>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 800864c:	4a49      	ldr	r2, [pc, #292]	; (8008774 <_ZN3tim4initEP12tim_config_t+0x208>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d05f      	beq.n	8008712 <_ZN3tim4initEP12tim_config_t+0x1a6>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8008652:	4a49      	ldr	r2, [pc, #292]	; (8008778 <_ZN3tim4initEP12tim_config_t+0x20c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d047      	beq.n	80086e8 <_ZN3tim4initEP12tim_config_t+0x17c>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8008658:	4a48      	ldr	r2, [pc, #288]	; (800877c <_ZN3tim4initEP12tim_config_t+0x210>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d062      	beq.n	8008724 <_ZN3tim4initEP12tim_config_t+0x1b8>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 800865e:	4a48      	ldr	r2, [pc, #288]	; (8008780 <_ZN3tim4initEP12tim_config_t+0x214>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d062      	beq.n	800872a <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8008664:	4a47      	ldr	r2, [pc, #284]	; (8008784 <_ZN3tim4initEP12tim_config_t+0x218>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d068      	beq.n	800873c <_ZN3tim4initEP12tim_config_t+0x1d0>
		else if(_tim == TIM10) IRQn = TIM1_UP_TIM10_IRQn;
 800866a:	4a47      	ldr	r2, [pc, #284]	; (8008788 <_ZN3tim4initEP12tim_config_t+0x21c>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d025      	beq.n	80086bc <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 8008670:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008674:	4293      	cmp	r3, r2
 8008676:	d070      	beq.n	800875a <_ZN3tim4initEP12tim_config_t+0x1ee>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8008678:	4a45      	ldr	r2, [pc, #276]	; (8008790 <_ZN3tim4initEP12tim_config_t+0x224>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d070      	beq.n	8008760 <_ZN3tim4initEP12tim_config_t+0x1f4>
		else if(_tim == TIM13) IRQn = TIM8_UP_TIM13_IRQn;
 800867e:	4a45      	ldr	r2, [pc, #276]	; (8008794 <_ZN3tim4initEP12tim_config_t+0x228>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d052      	beq.n	800872a <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
 8008684:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008688:	4293      	cmp	r3, r2
 800868a:	bf04      	itt	eq
 800868c:	232d      	moveq	r3, #45	; 0x2d
 800868e:	750b      	strbeq	r3, [r1, #20]
	return ret;
 8008690:	e7ce      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008692:	4d42      	ldr	r5, [pc, #264]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008694:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8008696:	f044 0401 	orr.w	r4, r4, #1
 800869a:	646c      	str	r4, [r5, #68]	; 0x44
 800869c:	e7ae      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800869e:	4d3f      	ldr	r5, [pc, #252]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80086a0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80086a2:	f044 0408 	orr.w	r4, r4, #8
 80086a6:	642c      	str	r4, [r5, #64]	; 0x40
 80086a8:	e7a8      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 80086aa:	231c      	movs	r3, #28
 80086ac:	750b      	strb	r3, [r1, #20]
 80086ae:	e7bf      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 80086b0:	4d3a      	ldr	r5, [pc, #232]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80086b2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80086b4:	f044 0402 	orr.w	r4, r4, #2
 80086b8:	642c      	str	r4, [r5, #64]	; 0x40
 80086ba:	e79f      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 80086bc:	2319      	movs	r3, #25
}
 80086be:	bc70      	pop	{r4, r5, r6}
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 80086c0:	750b      	strb	r3, [r1, #20]
}
 80086c2:	4770      	bx	lr
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 80086c4:	4d35      	ldr	r5, [pc, #212]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80086c6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80086c8:	f044 0404 	orr.w	r4, r4, #4
 80086cc:	642c      	str	r4, [r5, #64]	; 0x40
 80086ce:	e795      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 80086d0:	4d32      	ldr	r5, [pc, #200]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80086d2:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80086d4:	f044 0410 	orr.w	r4, r4, #16
 80086d8:	642c      	str	r4, [r5, #64]	; 0x40
 80086da:	e78f      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 80086dc:	4d2f      	ldr	r5, [pc, #188]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80086de:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80086e0:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 80086e4:	646c      	str	r4, [r5, #68]	; 0x44
 80086e6:	e789      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 80086e8:	2336      	movs	r3, #54	; 0x36
 80086ea:	750b      	strb	r3, [r1, #20]
 80086ec:	e7a0      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 80086ee:	231d      	movs	r3, #29
 80086f0:	750b      	strb	r3, [r1, #20]
 80086f2:	e79d      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 80086f4:	4d29      	ldr	r5, [pc, #164]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 80086f6:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80086f8:	f044 0420 	orr.w	r4, r4, #32
 80086fc:	642c      	str	r4, [r5, #64]	; 0x40
 80086fe:	e77d      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8008700:	231e      	movs	r3, #30
 8008702:	750b      	strb	r3, [r1, #20]
 8008704:	e794      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8008706:	4d25      	ldr	r5, [pc, #148]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008708:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800870a:	f044 0402 	orr.w	r4, r4, #2
 800870e:	646c      	str	r4, [r5, #68]	; 0x44
 8008710:	e774      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8008712:	2332      	movs	r3, #50	; 0x32
 8008714:	750b      	strb	r3, [r1, #20]
 8008716:	e78b      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8008718:	4d20      	ldr	r5, [pc, #128]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 800871a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800871c:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8008720:	646c      	str	r4, [r5, #68]	; 0x44
 8008722:	e76b      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8008724:	2337      	movs	r3, #55	; 0x37
 8008726:	750b      	strb	r3, [r1, #20]
 8008728:	e782      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 800872a:	232c      	movs	r3, #44	; 0x2c
 800872c:	750b      	strb	r3, [r1, #20]
 800872e:	e77f      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8008730:	4d1a      	ldr	r5, [pc, #104]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008732:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8008734:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8008738:	646c      	str	r4, [r5, #68]	; 0x44
 800873a:	e75f      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 800873c:	2318      	movs	r3, #24
 800873e:	750b      	strb	r3, [r1, #20]
 8008740:	e776      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8008742:	4d16      	ldr	r5, [pc, #88]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008744:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008746:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 800874a:	642c      	str	r4, [r5, #64]	; 0x40
 800874c:	e756      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 800874e:	4d13      	ldr	r5, [pc, #76]	; (800879c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008750:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008752:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8008756:	642c      	str	r4, [r5, #64]	; 0x40
 8008758:	e750      	b.n	80085fc <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 800875a:	231a      	movs	r3, #26
 800875c:	750b      	strb	r3, [r1, #20]
 800875e:	e767      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8008760:	232b      	movs	r3, #43	; 0x2b
 8008762:	750b      	strb	r3, [r1, #20]
 8008764:	e764      	b.n	8008630 <_ZN3tim4initEP12tim_config_t+0xc4>
 8008766:	bf00      	nop
 8008768:	40010000 	.word	0x40010000
 800876c:	40000400 	.word	0x40000400
 8008770:	40000800 	.word	0x40000800
 8008774:	40000c00 	.word	0x40000c00
 8008778:	40001000 	.word	0x40001000
 800877c:	40001400 	.word	0x40001400
 8008780:	40010400 	.word	0x40010400
 8008784:	40014000 	.word	0x40014000
 8008788:	40014400 	.word	0x40014400
 800878c:	40014800 	.word	0x40014800
 8008790:	40001800 	.word	0x40001800
 8008794:	40001c00 	.word	0x40001c00
 8008798:	40002000 	.word	0x40002000
 800879c:	40023800 	.word	0x40023800

080087a0 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_>:
void tim::clear_update_isr(void){
	_tim -> SR &=~ TIM_DIER_UIE;
}


stm_ret_t tim::register_event_handler(void(*function_ptr)(tim_channel_t channel, tim_event_t event, void *param), void *param){
 80087a0:	b538      	push	{r3, r4, r5, lr}
	stm_ret_t ret;

	if(_conf -> interrupt != TIM_INTERRUPT_ENABLE) {
 80087a2:	690d      	ldr	r5, [r1, #16]
 80087a4:	f895 c00b 	ldrb.w	ip, [r5, #11]
	stm_ret_t ret;
 80087a8:	2501      	movs	r5, #1
 80087aa:	7005      	strb	r5, [r0, #0]
	if(_conf -> interrupt != TIM_INTERRUPT_ENABLE) {
 80087ac:	f1bc 0f01 	cmp.w	ip, #1
	stm_ret_t ret;
 80087b0:	f04f 0500 	mov.w	r5, #0
stm_ret_t tim::register_event_handler(void(*function_ptr)(tim_channel_t channel, tim_event_t event, void *param), void *param){
 80087b4:	4604      	mov	r4, r0
	stm_ret_t ret;
 80087b6:	6045      	str	r5, [r0, #4]
	if(_conf -> interrupt != TIM_INTERRUPT_ENABLE) {
 80087b8:	d103      	bne.n	80087c2 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x22>
		LOG_ERROR(TAG, "%s -> %s -> Timer interrupt disabled, can't register timer event handler.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}

	parameter = param;
 80087ba:	608b      	str	r3, [r1, #8]
	handler_callback = function_ptr;
 80087bc:	600a      	str	r2, [r1, #0]

	return ret;
}
 80087be:	4620      	mov	r0, r4
 80087c0:	bd38      	pop	{r3, r4, r5, pc}
		set_return(&ret, STM_ERR, __LINE__);
 80087c2:	4629      	mov	r1, r5
 80087c4:	22b2      	movs	r2, #178	; 0xb2
 80087c6:	f002 fbe7 	bl	800af98 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Timer interrupt disabled, can't register timer event handler.", __FILE__, __FUNCTION__);
 80087ca:	4b04      	ldr	r3, [pc, #16]	; (80087dc <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x3c>)
 80087cc:	4a04      	ldr	r2, [pc, #16]	; (80087e0 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x40>)
 80087ce:	4905      	ldr	r1, [pc, #20]	; (80087e4 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x44>)
 80087d0:	4805      	ldr	r0, [pc, #20]	; (80087e8 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x48>)
 80087d2:	f002 faad 	bl	800ad30 <LOG_ERROR>
}
 80087d6:	4620      	mov	r0, r4
 80087d8:	bd38      	pop	{r3, r4, r5, pc}
 80087da:	bf00      	nop
 80087dc:	080115fc 	.word	0x080115fc
 80087e0:	08011614 	.word	0x08011614
 80087e4:	0801163c 	.word	0x0801163c
 80087e8:	08011688 	.word	0x08011688

080087ec <_ZN3tim8start_itEv>:
	_tim -> CR1 &=~ TIM_CR1_CEN;

	return ret;
}

stm_ret_t tim::start_it(void){
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	stm_ret_t ret;

	if(_conf -> interrupt == TIM_INTERRUPT_DISABLE){
 80087ee:	690b      	ldr	r3, [r1, #16]
 80087f0:	7add      	ldrb	r5, [r3, #11]
	stm_ret_t ret;
 80087f2:	2201      	movs	r2, #1
 80087f4:	2600      	movs	r6, #0
stm_ret_t tim::start_it(void){
 80087f6:	4604      	mov	r4, r0
	stm_ret_t ret;
 80087f8:	7002      	strb	r2, [r0, #0]
 80087fa:	6046      	str	r6, [r0, #4]
	if(_conf -> interrupt == TIM_INTERRUPT_DISABLE){
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	d041      	beq.n	8008884 <_ZN3tim8start_itEv+0x98>
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}


	if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8008800:	68dd      	ldr	r5, [r3, #12]
 8008802:	2d03      	cmp	r5, #3
 8008804:	d952      	bls.n	80088ac <_ZN3tim8start_itEv+0xc0>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(_tim -> CR1 & TIM_CR1_CEN){
 8008806:	684e      	ldr	r6, [r1, #4]
 8008808:	6837      	ldr	r7, [r6, #0]
 800880a:	07ff      	lsls	r7, r7, #31
 800880c:	d42d      	bmi.n	800886a <_ZN3tim8start_itEv+0x7e>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart in interrupt mode.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}

	_tim -> DIER |= TIM_DIER_UIE;
 800880e:	68f0      	ldr	r0, [r6, #12]
 8008810:	f040 0001 	orr.w	r0, r0, #1
 8008814:	60f0      	str	r0, [r6, #12]
	__NVIC_ClearPendingIRQ(IRQn);
 8008816:	f991 0014 	ldrsb.w	r0, [r1, #20]
  if ((int32_t)(IRQn) >= 0)
 800881a:	2800      	cmp	r0, #0
 800881c:	db3e      	blt.n	800889c <_ZN3tim8start_itEv+0xb0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800881e:	0946      	lsrs	r6, r0, #5
 8008820:	4d2d      	ldr	r5, [pc, #180]	; (80088d8 <_ZN3tim8start_itEv+0xec>)
 8008822:	f000 071f 	and.w	r7, r0, #31
 8008826:	3660      	adds	r6, #96	; 0x60
 8008828:	40ba      	lsls	r2, r7
 800882a:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	4428      	add	r0, r5
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	b2db      	uxtb	r3, r3
 8008836:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
	__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
	__NVIC_EnableIRQ(IRQn);
 800883a:	f991 3014 	ldrsb.w	r3, [r1, #20]
  if ((int32_t)(IRQn) >= 0)
 800883e:	2b00      	cmp	r3, #0
 8008840:	db0c      	blt.n	800885c <_ZN3tim8start_itEv+0x70>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008842:	f003 001f 	and.w	r0, r3, #31
 8008846:	095b      	lsrs	r3, r3, #5
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800884e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8008852:	2201      	movs	r2, #1
 8008854:	4082      	lsls	r2, r0
 8008856:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008858:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	__NVIC_ClearPendingIRQ(IRQn);

	_tim -> CR1 |= TIM_CR1_CEN;
 800885c:	684a      	ldr	r2, [r1, #4]
 800885e:	6813      	ldr	r3, [r2, #0]
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	6013      	str	r3, [r2, #0]

	return ret;
}
 8008866:	4620      	mov	r0, r4
 8008868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		set_return(&ret, STM_BUSY, __LINE__);
 800886a:	f44f 7285 	mov.w	r2, #266	; 0x10a
 800886e:	2104      	movs	r1, #4
 8008870:	f002 fb92 	bl	800af98 <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart in interrupt mode.", __FILE__, __FUNCTION__);
 8008874:	4b19      	ldr	r3, [pc, #100]	; (80088dc <_ZN3tim8start_itEv+0xf0>)
 8008876:	4a1a      	ldr	r2, [pc, #104]	; (80088e0 <_ZN3tim8start_itEv+0xf4>)
 8008878:	491a      	ldr	r1, [pc, #104]	; (80088e4 <_ZN3tim8start_itEv+0xf8>)
 800887a:	481b      	ldr	r0, [pc, #108]	; (80088e8 <_ZN3tim8start_itEv+0xfc>)
 800887c:	f002 fa1a 	bl	800acb4 <LOG_WARN>
}
 8008880:	4620      	mov	r0, r4
 8008882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		set_return(&ret, STM_ERR, __LINE__);
 8008884:	4629      	mov	r1, r5
 8008886:	22f1      	movs	r2, #241	; 0xf1
 8008888:	f002 fb86 	bl	800af98 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Timer interrupt disabled.", __FILE__, __FUNCTION__);
 800888c:	4b13      	ldr	r3, [pc, #76]	; (80088dc <_ZN3tim8start_itEv+0xf0>)
 800888e:	4a14      	ldr	r2, [pc, #80]	; (80088e0 <_ZN3tim8start_itEv+0xf4>)
 8008890:	4916      	ldr	r1, [pc, #88]	; (80088ec <_ZN3tim8start_itEv+0x100>)
 8008892:	4815      	ldr	r0, [pc, #84]	; (80088e8 <_ZN3tim8start_itEv+0xfc>)
 8008894:	f002 fa4c 	bl	800ad30 <LOG_ERROR>
}
 8008898:	4620      	mov	r0, r4
 800889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800889c:	4b14      	ldr	r3, [pc, #80]	; (80088f0 <_ZN3tim8start_itEv+0x104>)
 800889e:	f000 000f 	and.w	r0, r0, #15
 80088a2:	012d      	lsls	r5, r5, #4
 80088a4:	4403      	add	r3, r0
 80088a6:	b2ed      	uxtb	r5, r5
 80088a8:	761d      	strb	r5, [r3, #24]
 80088aa:	e7c6      	b.n	800883a <_ZN3tim8start_itEv+0x4e>
		set_return(&ret, STM_ERR, __LINE__);
 80088ac:	22fa      	movs	r2, #250	; 0xfa
 80088ae:	4631      	mov	r1, r6
 80088b0:	f002 fb72 	bl	800af98 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <_ZN3tim8start_itEv+0xf0>)
 80088b6:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <_ZN3tim8start_itEv+0xf4>)
 80088b8:	490e      	ldr	r1, [pc, #56]	; (80088f4 <_ZN3tim8start_itEv+0x108>)
 80088ba:	480b      	ldr	r0, [pc, #44]	; (80088e8 <_ZN3tim8start_itEv+0xfc>)
 80088bc:	f002 fa38 	bl	800ad30 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 80088c0:	490d      	ldr	r1, [pc, #52]	; (80088f8 <_ZN3tim8start_itEv+0x10c>)
 80088c2:	4809      	ldr	r0, [pc, #36]	; (80088e8 <_ZN3tim8start_itEv+0xfc>)
 80088c4:	2205      	movs	r2, #5
 80088c6:	f002 f9b7 	bl	800ac38 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 80088ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80088ce:	f7ff fdc3 	bl	8008458 <systick_delay_ms>
			__NVIC_SystemReset();
 80088d2:	f7ff fe39 	bl	8008548 <__NVIC_SystemReset>
 80088d6:	bf00      	nop
 80088d8:	e000e100 	.word	0xe000e100
 80088dc:	08011818 	.word	0x08011818
 80088e0:	08011614 	.word	0x08011614
 80088e4:	080116b4 	.word	0x080116b4
 80088e8:	08011688 	.word	0x08011688
 80088ec:	0801168c 	.word	0x0801168c
 80088f0:	e000ecfc 	.word	0xe000ecfc
 80088f4:	0801146c 	.word	0x0801146c
 80088f8:	080114b8 	.word	0x080114b8

080088fc <TIM1_CC_IRQHandler>:

void TIM_IRQHandler(tim *timptr){
	tim_event_t event = TIM_EVENT_NOEVENT;
	tim_channel_t channel = TIM_NOCHANNEL;

	timptr -> counter = timptr -> _tim -> CNT;
 80088fc:	4a2f      	ldr	r2, [pc, #188]	; (80089bc <TIM1_CC_IRQHandler+0xc0>)
 80088fe:	6853      	ldr	r3, [r2, #4]
 8008900:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008902:	60d1      	str	r1, [r2, #12]

	/* TIMER CAPTURE-COMPARE 1 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008904:	6919      	ldr	r1, [r3, #16]
 8008906:	0788      	lsls	r0, r1, #30
 8008908:	d502      	bpl.n	8008910 <TIM1_CC_IRQHandler+0x14>
 800890a:	68d9      	ldr	r1, [r3, #12]
 800890c:	0789      	lsls	r1, r1, #30
 800890e:	d433      	bmi.n	8008978 <TIM1_CC_IRQHandler+0x7c>
		channel = TIM_CHANNEL1;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 2 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008910:	6919      	ldr	r1, [r3, #16]
 8008912:	0748      	lsls	r0, r1, #29
 8008914:	d502      	bpl.n	800891c <TIM1_CC_IRQHandler+0x20>
 8008916:	68d9      	ldr	r1, [r3, #12]
 8008918:	0749      	lsls	r1, r1, #29
 800891a:	d43c      	bmi.n	8008996 <TIM1_CC_IRQHandler+0x9a>
		channel = TIM_CHANNEL2;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 3 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800891c:	6919      	ldr	r1, [r3, #16]
 800891e:	0708      	lsls	r0, r1, #28
 8008920:	d502      	bpl.n	8008928 <TIM1_CC_IRQHandler+0x2c>
 8008922:	68d9      	ldr	r1, [r3, #12]
 8008924:	0709      	lsls	r1, r1, #28
 8008926:	d43c      	bmi.n	80089a2 <TIM1_CC_IRQHandler+0xa6>
		channel = TIM_CHANNEL3;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 4 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008928:	6919      	ldr	r1, [r3, #16]
 800892a:	06c8      	lsls	r0, r1, #27
 800892c:	d411      	bmi.n	8008952 <TIM1_CC_IRQHandler+0x56>
		channel = TIM_CHANNEL4;
		goto EventCB;
	}

	/* TIMER UPDATE INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800892e:	6919      	ldr	r1, [r3, #16]
 8008930:	07c8      	lsls	r0, r1, #31
 8008932:	d502      	bpl.n	800893a <TIM1_CC_IRQHandler+0x3e>
 8008934:	68d9      	ldr	r1, [r3, #12]
 8008936:	07c9      	lsls	r1, r1, #31
 8008938:	d439      	bmi.n	80089ae <TIM1_CC_IRQHandler+0xb2>
		event = TIM_EVENT_UPDATE;
		goto EventCB;
	}

	/* TIMER BREAK INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800893a:	6919      	ldr	r1, [r3, #16]
 800893c:	0608      	lsls	r0, r1, #24
 800893e:	d511      	bpl.n	8008964 <TIM1_CC_IRQHandler+0x68>
 8008940:	68d9      	ldr	r1, [r3, #12]
 8008942:	0609      	lsls	r1, r1, #24
 8008944:	d50e      	bpl.n	8008964 <TIM1_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008946:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800894a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800894c:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800894e:	2101      	movs	r1, #1
		goto EventCB;
 8008950:	e00d      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008952:	68d9      	ldr	r1, [r3, #12]
 8008954:	06c9      	lsls	r1, r1, #27
 8008956:	d5ea      	bpl.n	800892e <TIM1_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008958:	f06f 0110 	mvn.w	r1, #16
 800895c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800895e:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008960:	2106      	movs	r1, #6
		goto EventCB;
 8008962:	e004      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
	}

	/* TIMER TRIGER INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008964:	6919      	ldr	r1, [r3, #16]
 8008966:	0648      	lsls	r0, r1, #25
 8008968:	d40c      	bmi.n	8008984 <TIM1_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 800896a:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800896c:	2107      	movs	r1, #7
		event = TIM_EVENT_TRIGER;
		goto EventCB;
	}

	EventCB:
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	b10b      	cbz	r3, 8008976 <TIM1_CC_IRQHandler+0x7a>
 8008972:	6892      	ldr	r2, [r2, #8]
 8008974:	4718      	bx	r3
#if defined(TIM1)
tim tim_1(TIM1);
tim_t tim1 = &tim_1;
void TIM1_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_1);
}
 8008976:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008978:	f06f 0102 	mvn.w	r1, #2
 800897c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 800897e:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008980:	2103      	movs	r1, #3
		goto EventCB;
 8008982:	e7f4      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008984:	68d9      	ldr	r1, [r3, #12]
 8008986:	0649      	lsls	r1, r1, #25
 8008988:	d5ef      	bpl.n	800896a <TIM1_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 800898a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 800898e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008990:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008992:	2102      	movs	r1, #2
		goto EventCB;
 8008994:	e7eb      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008996:	f06f 0104 	mvn.w	r1, #4
 800899a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 800899c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800899e:	2104      	movs	r1, #4
		goto EventCB;
 80089a0:	e7e5      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80089a2:	f06f 0108 	mvn.w	r1, #8
 80089a6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80089a8:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80089aa:	2105      	movs	r1, #5
		goto EventCB;
 80089ac:	e7df      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80089ae:	f06f 0101 	mvn.w	r1, #1
 80089b2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80089b4:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80089b6:	2100      	movs	r1, #0
		goto EventCB;
 80089b8:	e7d9      	b.n	800896e <TIM1_CC_IRQHandler+0x72>
 80089ba:	bf00      	nop
 80089bc:	2000b74c 	.word	0x2000b74c

080089c0 <TIM2_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 80089c0:	4a2f      	ldr	r2, [pc, #188]	; (8008a80 <TIM2_IRQHandler+0xc0>)
 80089c2:	6853      	ldr	r3, [r2, #4]
 80089c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80089c6:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80089c8:	6919      	ldr	r1, [r3, #16]
 80089ca:	0788      	lsls	r0, r1, #30
 80089cc:	d502      	bpl.n	80089d4 <TIM2_IRQHandler+0x14>
 80089ce:	68d9      	ldr	r1, [r3, #12]
 80089d0:	0789      	lsls	r1, r1, #30
 80089d2:	d433      	bmi.n	8008a3c <TIM2_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80089d4:	6919      	ldr	r1, [r3, #16]
 80089d6:	0748      	lsls	r0, r1, #29
 80089d8:	d502      	bpl.n	80089e0 <TIM2_IRQHandler+0x20>
 80089da:	68d9      	ldr	r1, [r3, #12]
 80089dc:	0749      	lsls	r1, r1, #29
 80089de:	d43c      	bmi.n	8008a5a <TIM2_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80089e0:	6919      	ldr	r1, [r3, #16]
 80089e2:	0708      	lsls	r0, r1, #28
 80089e4:	d502      	bpl.n	80089ec <TIM2_IRQHandler+0x2c>
 80089e6:	68d9      	ldr	r1, [r3, #12]
 80089e8:	0709      	lsls	r1, r1, #28
 80089ea:	d43c      	bmi.n	8008a66 <TIM2_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80089ec:	6919      	ldr	r1, [r3, #16]
 80089ee:	06c8      	lsls	r0, r1, #27
 80089f0:	d411      	bmi.n	8008a16 <TIM2_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80089f2:	6919      	ldr	r1, [r3, #16]
 80089f4:	07c8      	lsls	r0, r1, #31
 80089f6:	d502      	bpl.n	80089fe <TIM2_IRQHandler+0x3e>
 80089f8:	68d9      	ldr	r1, [r3, #12]
 80089fa:	07c9      	lsls	r1, r1, #31
 80089fc:	d439      	bmi.n	8008a72 <TIM2_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 80089fe:	6919      	ldr	r1, [r3, #16]
 8008a00:	0608      	lsls	r0, r1, #24
 8008a02:	d511      	bpl.n	8008a28 <TIM2_IRQHandler+0x68>
 8008a04:	68d9      	ldr	r1, [r3, #12]
 8008a06:	0609      	lsls	r1, r1, #24
 8008a08:	d50e      	bpl.n	8008a28 <TIM2_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008a0a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008a0e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a10:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008a12:	2101      	movs	r1, #1
		goto EventCB;
 8008a14:	e00d      	b.n	8008a32 <TIM2_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008a16:	68d9      	ldr	r1, [r3, #12]
 8008a18:	06c9      	lsls	r1, r1, #27
 8008a1a:	d5ea      	bpl.n	80089f2 <TIM2_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008a1c:	f06f 0110 	mvn.w	r1, #16
 8008a20:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008a22:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008a24:	2106      	movs	r1, #6
		goto EventCB;
 8008a26:	e004      	b.n	8008a32 <TIM2_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008a28:	6919      	ldr	r1, [r3, #16]
 8008a2a:	0648      	lsls	r0, r1, #25
 8008a2c:	d40c      	bmi.n	8008a48 <TIM2_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a2e:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008a30:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	b10b      	cbz	r3, 8008a3a <TIM2_IRQHandler+0x7a>
 8008a36:	6892      	ldr	r2, [r2, #8]
 8008a38:	4718      	bx	r3
#if defined(TIM2)
tim tim_2(TIM2);
tim_t tim2 = &tim_2;
void TIM2_IRQHandler(void){
	TIM_IRQHandler(&tim_2);
}
 8008a3a:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008a3c:	f06f 0102 	mvn.w	r1, #2
 8008a40:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008a42:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008a44:	2103      	movs	r1, #3
		goto EventCB;
 8008a46:	e7f4      	b.n	8008a32 <TIM2_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008a48:	68d9      	ldr	r1, [r3, #12]
 8008a4a:	0649      	lsls	r1, r1, #25
 8008a4c:	d5ef      	bpl.n	8008a2e <TIM2_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008a4e:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008a52:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a54:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008a56:	2102      	movs	r1, #2
		goto EventCB;
 8008a58:	e7eb      	b.n	8008a32 <TIM2_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008a5a:	f06f 0104 	mvn.w	r1, #4
 8008a5e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008a60:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008a62:	2104      	movs	r1, #4
		goto EventCB;
 8008a64:	e7e5      	b.n	8008a32 <TIM2_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008a66:	f06f 0108 	mvn.w	r1, #8
 8008a6a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008a6c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008a6e:	2105      	movs	r1, #5
		goto EventCB;
 8008a70:	e7df      	b.n	8008a32 <TIM2_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008a72:	f06f 0101 	mvn.w	r1, #1
 8008a76:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a78:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008a7a:	2100      	movs	r1, #0
		goto EventCB;
 8008a7c:	e7d9      	b.n	8008a32 <TIM2_IRQHandler+0x72>
 8008a7e:	bf00      	nop
 8008a80:	2000b7dc 	.word	0x2000b7dc

08008a84 <TIM3_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008a84:	4a2f      	ldr	r2, [pc, #188]	; (8008b44 <TIM3_IRQHandler+0xc0>)
 8008a86:	6853      	ldr	r3, [r2, #4]
 8008a88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a8a:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008a8c:	6919      	ldr	r1, [r3, #16]
 8008a8e:	0788      	lsls	r0, r1, #30
 8008a90:	d502      	bpl.n	8008a98 <TIM3_IRQHandler+0x14>
 8008a92:	68d9      	ldr	r1, [r3, #12]
 8008a94:	0789      	lsls	r1, r1, #30
 8008a96:	d433      	bmi.n	8008b00 <TIM3_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008a98:	6919      	ldr	r1, [r3, #16]
 8008a9a:	0748      	lsls	r0, r1, #29
 8008a9c:	d502      	bpl.n	8008aa4 <TIM3_IRQHandler+0x20>
 8008a9e:	68d9      	ldr	r1, [r3, #12]
 8008aa0:	0749      	lsls	r1, r1, #29
 8008aa2:	d43c      	bmi.n	8008b1e <TIM3_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008aa4:	6919      	ldr	r1, [r3, #16]
 8008aa6:	0708      	lsls	r0, r1, #28
 8008aa8:	d502      	bpl.n	8008ab0 <TIM3_IRQHandler+0x2c>
 8008aaa:	68d9      	ldr	r1, [r3, #12]
 8008aac:	0709      	lsls	r1, r1, #28
 8008aae:	d43c      	bmi.n	8008b2a <TIM3_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008ab0:	6919      	ldr	r1, [r3, #16]
 8008ab2:	06c8      	lsls	r0, r1, #27
 8008ab4:	d411      	bmi.n	8008ada <TIM3_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008ab6:	6919      	ldr	r1, [r3, #16]
 8008ab8:	07c8      	lsls	r0, r1, #31
 8008aba:	d502      	bpl.n	8008ac2 <TIM3_IRQHandler+0x3e>
 8008abc:	68d9      	ldr	r1, [r3, #12]
 8008abe:	07c9      	lsls	r1, r1, #31
 8008ac0:	d439      	bmi.n	8008b36 <TIM3_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008ac2:	6919      	ldr	r1, [r3, #16]
 8008ac4:	0608      	lsls	r0, r1, #24
 8008ac6:	d511      	bpl.n	8008aec <TIM3_IRQHandler+0x68>
 8008ac8:	68d9      	ldr	r1, [r3, #12]
 8008aca:	0609      	lsls	r1, r1, #24
 8008acc:	d50e      	bpl.n	8008aec <TIM3_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008ace:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008ad2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ad4:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008ad6:	2101      	movs	r1, #1
		goto EventCB;
 8008ad8:	e00d      	b.n	8008af6 <TIM3_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008ada:	68d9      	ldr	r1, [r3, #12]
 8008adc:	06c9      	lsls	r1, r1, #27
 8008ade:	d5ea      	bpl.n	8008ab6 <TIM3_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008ae0:	f06f 0110 	mvn.w	r1, #16
 8008ae4:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008ae6:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008ae8:	2106      	movs	r1, #6
		goto EventCB;
 8008aea:	e004      	b.n	8008af6 <TIM3_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008aec:	6919      	ldr	r1, [r3, #16]
 8008aee:	0648      	lsls	r0, r1, #25
 8008af0:	d40c      	bmi.n	8008b0c <TIM3_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008af2:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008af4:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008af6:	6813      	ldr	r3, [r2, #0]
 8008af8:	b10b      	cbz	r3, 8008afe <TIM3_IRQHandler+0x7a>
 8008afa:	6892      	ldr	r2, [r2, #8]
 8008afc:	4718      	bx	r3
#if defined(TIM3)
tim tim_3(TIM3);
tim_t tim3 = &tim_3;
void TIM3_IRQHandler(void){
	TIM_IRQHandler(&tim_3);
}
 8008afe:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008b00:	f06f 0102 	mvn.w	r1, #2
 8008b04:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008b06:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008b08:	2103      	movs	r1, #3
		goto EventCB;
 8008b0a:	e7f4      	b.n	8008af6 <TIM3_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008b0c:	68d9      	ldr	r1, [r3, #12]
 8008b0e:	0649      	lsls	r1, r1, #25
 8008b10:	d5ef      	bpl.n	8008af2 <TIM3_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008b12:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008b16:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008b18:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008b1a:	2102      	movs	r1, #2
		goto EventCB;
 8008b1c:	e7eb      	b.n	8008af6 <TIM3_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008b1e:	f06f 0104 	mvn.w	r1, #4
 8008b22:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008b24:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008b26:	2104      	movs	r1, #4
		goto EventCB;
 8008b28:	e7e5      	b.n	8008af6 <TIM3_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008b2a:	f06f 0108 	mvn.w	r1, #8
 8008b2e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008b30:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008b32:	2105      	movs	r1, #5
		goto EventCB;
 8008b34:	e7df      	b.n	8008af6 <TIM3_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008b36:	f06f 0101 	mvn.w	r1, #1
 8008b3a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008b3c:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008b3e:	2100      	movs	r1, #0
		goto EventCB;
 8008b40:	e7d9      	b.n	8008af6 <TIM3_IRQHandler+0x72>
 8008b42:	bf00      	nop
 8008b44:	2000b7f4 	.word	0x2000b7f4

08008b48 <TIM4_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008b48:	4a2f      	ldr	r2, [pc, #188]	; (8008c08 <TIM4_IRQHandler+0xc0>)
 8008b4a:	6853      	ldr	r3, [r2, #4]
 8008b4c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b4e:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008b50:	6919      	ldr	r1, [r3, #16]
 8008b52:	0788      	lsls	r0, r1, #30
 8008b54:	d502      	bpl.n	8008b5c <TIM4_IRQHandler+0x14>
 8008b56:	68d9      	ldr	r1, [r3, #12]
 8008b58:	0789      	lsls	r1, r1, #30
 8008b5a:	d433      	bmi.n	8008bc4 <TIM4_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008b5c:	6919      	ldr	r1, [r3, #16]
 8008b5e:	0748      	lsls	r0, r1, #29
 8008b60:	d502      	bpl.n	8008b68 <TIM4_IRQHandler+0x20>
 8008b62:	68d9      	ldr	r1, [r3, #12]
 8008b64:	0749      	lsls	r1, r1, #29
 8008b66:	d43c      	bmi.n	8008be2 <TIM4_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008b68:	6919      	ldr	r1, [r3, #16]
 8008b6a:	0708      	lsls	r0, r1, #28
 8008b6c:	d502      	bpl.n	8008b74 <TIM4_IRQHandler+0x2c>
 8008b6e:	68d9      	ldr	r1, [r3, #12]
 8008b70:	0709      	lsls	r1, r1, #28
 8008b72:	d43c      	bmi.n	8008bee <TIM4_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008b74:	6919      	ldr	r1, [r3, #16]
 8008b76:	06c8      	lsls	r0, r1, #27
 8008b78:	d411      	bmi.n	8008b9e <TIM4_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008b7a:	6919      	ldr	r1, [r3, #16]
 8008b7c:	07c8      	lsls	r0, r1, #31
 8008b7e:	d502      	bpl.n	8008b86 <TIM4_IRQHandler+0x3e>
 8008b80:	68d9      	ldr	r1, [r3, #12]
 8008b82:	07c9      	lsls	r1, r1, #31
 8008b84:	d439      	bmi.n	8008bfa <TIM4_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008b86:	6919      	ldr	r1, [r3, #16]
 8008b88:	0608      	lsls	r0, r1, #24
 8008b8a:	d511      	bpl.n	8008bb0 <TIM4_IRQHandler+0x68>
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	0609      	lsls	r1, r1, #24
 8008b90:	d50e      	bpl.n	8008bb0 <TIM4_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008b92:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008b96:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008b98:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008b9a:	2101      	movs	r1, #1
		goto EventCB;
 8008b9c:	e00d      	b.n	8008bba <TIM4_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008b9e:	68d9      	ldr	r1, [r3, #12]
 8008ba0:	06c9      	lsls	r1, r1, #27
 8008ba2:	d5ea      	bpl.n	8008b7a <TIM4_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008ba4:	f06f 0110 	mvn.w	r1, #16
 8008ba8:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008baa:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008bac:	2106      	movs	r1, #6
		goto EventCB;
 8008bae:	e004      	b.n	8008bba <TIM4_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008bb0:	6919      	ldr	r1, [r3, #16]
 8008bb2:	0648      	lsls	r0, r1, #25
 8008bb4:	d40c      	bmi.n	8008bd0 <TIM4_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008bb6:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008bb8:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008bba:	6813      	ldr	r3, [r2, #0]
 8008bbc:	b10b      	cbz	r3, 8008bc2 <TIM4_IRQHandler+0x7a>
 8008bbe:	6892      	ldr	r2, [r2, #8]
 8008bc0:	4718      	bx	r3
#if defined(TIM4)
tim tim_4(TIM4);
tim_t tim4 = &tim_4;
void TIM4_IRQHandler(void){
	TIM_IRQHandler(&tim_4);
}
 8008bc2:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008bc4:	f06f 0102 	mvn.w	r1, #2
 8008bc8:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008bca:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008bcc:	2103      	movs	r1, #3
		goto EventCB;
 8008bce:	e7f4      	b.n	8008bba <TIM4_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008bd0:	68d9      	ldr	r1, [r3, #12]
 8008bd2:	0649      	lsls	r1, r1, #25
 8008bd4:	d5ef      	bpl.n	8008bb6 <TIM4_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008bd6:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008bda:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008bdc:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008bde:	2102      	movs	r1, #2
		goto EventCB;
 8008be0:	e7eb      	b.n	8008bba <TIM4_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008be2:	f06f 0104 	mvn.w	r1, #4
 8008be6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008be8:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008bea:	2104      	movs	r1, #4
		goto EventCB;
 8008bec:	e7e5      	b.n	8008bba <TIM4_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008bee:	f06f 0108 	mvn.w	r1, #8
 8008bf2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008bf4:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008bf6:	2105      	movs	r1, #5
		goto EventCB;
 8008bf8:	e7df      	b.n	8008bba <TIM4_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008bfa:	f06f 0101 	mvn.w	r1, #1
 8008bfe:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c00:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008c02:	2100      	movs	r1, #0
		goto EventCB;
 8008c04:	e7d9      	b.n	8008bba <TIM4_IRQHandler+0x72>
 8008c06:	bf00      	nop
 8008c08:	2000b80c 	.word	0x2000b80c

08008c0c <TIM5_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008c0c:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <TIM5_IRQHandler+0xc0>)
 8008c0e:	6853      	ldr	r3, [r2, #4]
 8008c10:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008c12:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008c14:	6919      	ldr	r1, [r3, #16]
 8008c16:	0788      	lsls	r0, r1, #30
 8008c18:	d502      	bpl.n	8008c20 <TIM5_IRQHandler+0x14>
 8008c1a:	68d9      	ldr	r1, [r3, #12]
 8008c1c:	0789      	lsls	r1, r1, #30
 8008c1e:	d433      	bmi.n	8008c88 <TIM5_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008c20:	6919      	ldr	r1, [r3, #16]
 8008c22:	0748      	lsls	r0, r1, #29
 8008c24:	d502      	bpl.n	8008c2c <TIM5_IRQHandler+0x20>
 8008c26:	68d9      	ldr	r1, [r3, #12]
 8008c28:	0749      	lsls	r1, r1, #29
 8008c2a:	d43c      	bmi.n	8008ca6 <TIM5_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008c2c:	6919      	ldr	r1, [r3, #16]
 8008c2e:	0708      	lsls	r0, r1, #28
 8008c30:	d502      	bpl.n	8008c38 <TIM5_IRQHandler+0x2c>
 8008c32:	68d9      	ldr	r1, [r3, #12]
 8008c34:	0709      	lsls	r1, r1, #28
 8008c36:	d43c      	bmi.n	8008cb2 <TIM5_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008c38:	6919      	ldr	r1, [r3, #16]
 8008c3a:	06c8      	lsls	r0, r1, #27
 8008c3c:	d411      	bmi.n	8008c62 <TIM5_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008c3e:	6919      	ldr	r1, [r3, #16]
 8008c40:	07c8      	lsls	r0, r1, #31
 8008c42:	d502      	bpl.n	8008c4a <TIM5_IRQHandler+0x3e>
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	07c9      	lsls	r1, r1, #31
 8008c48:	d439      	bmi.n	8008cbe <TIM5_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008c4a:	6919      	ldr	r1, [r3, #16]
 8008c4c:	0608      	lsls	r0, r1, #24
 8008c4e:	d511      	bpl.n	8008c74 <TIM5_IRQHandler+0x68>
 8008c50:	68d9      	ldr	r1, [r3, #12]
 8008c52:	0609      	lsls	r1, r1, #24
 8008c54:	d50e      	bpl.n	8008c74 <TIM5_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008c56:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008c5a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c5c:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008c5e:	2101      	movs	r1, #1
		goto EventCB;
 8008c60:	e00d      	b.n	8008c7e <TIM5_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008c62:	68d9      	ldr	r1, [r3, #12]
 8008c64:	06c9      	lsls	r1, r1, #27
 8008c66:	d5ea      	bpl.n	8008c3e <TIM5_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008c68:	f06f 0110 	mvn.w	r1, #16
 8008c6c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008c6e:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008c70:	2106      	movs	r1, #6
		goto EventCB;
 8008c72:	e004      	b.n	8008c7e <TIM5_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008c74:	6919      	ldr	r1, [r3, #16]
 8008c76:	0648      	lsls	r0, r1, #25
 8008c78:	d40c      	bmi.n	8008c94 <TIM5_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c7a:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008c7c:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008c7e:	6813      	ldr	r3, [r2, #0]
 8008c80:	b10b      	cbz	r3, 8008c86 <TIM5_IRQHandler+0x7a>
 8008c82:	6892      	ldr	r2, [r2, #8]
 8008c84:	4718      	bx	r3
#if defined(TIM5)
tim tim_5(TIM5);
tim_t tim5 = &tim_5;
void TIM5_IRQHandler(void){
	TIM_IRQHandler(&tim_5);
}
 8008c86:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008c88:	f06f 0102 	mvn.w	r1, #2
 8008c8c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008c8e:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008c90:	2103      	movs	r1, #3
		goto EventCB;
 8008c92:	e7f4      	b.n	8008c7e <TIM5_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008c94:	68d9      	ldr	r1, [r3, #12]
 8008c96:	0649      	lsls	r1, r1, #25
 8008c98:	d5ef      	bpl.n	8008c7a <TIM5_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008c9a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008c9e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ca0:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008ca2:	2102      	movs	r1, #2
		goto EventCB;
 8008ca4:	e7eb      	b.n	8008c7e <TIM5_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008ca6:	f06f 0104 	mvn.w	r1, #4
 8008caa:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008cac:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008cae:	2104      	movs	r1, #4
		goto EventCB;
 8008cb0:	e7e5      	b.n	8008c7e <TIM5_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008cb2:	f06f 0108 	mvn.w	r1, #8
 8008cb6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008cb8:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008cba:	2105      	movs	r1, #5
		goto EventCB;
 8008cbc:	e7df      	b.n	8008c7e <TIM5_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008cbe:	f06f 0101 	mvn.w	r1, #1
 8008cc2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008cc4:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008cc6:	2100      	movs	r1, #0
		goto EventCB;
 8008cc8:	e7d9      	b.n	8008c7e <TIM5_IRQHandler+0x72>
 8008cca:	bf00      	nop
 8008ccc:	2000b824 	.word	0x2000b824

08008cd0 <TIM6_DAC_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008cd0:	4a2f      	ldr	r2, [pc, #188]	; (8008d90 <TIM6_DAC_IRQHandler+0xc0>)
 8008cd2:	6853      	ldr	r3, [r2, #4]
 8008cd4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008cd6:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008cd8:	6919      	ldr	r1, [r3, #16]
 8008cda:	0788      	lsls	r0, r1, #30
 8008cdc:	d502      	bpl.n	8008ce4 <TIM6_DAC_IRQHandler+0x14>
 8008cde:	68d9      	ldr	r1, [r3, #12]
 8008ce0:	0789      	lsls	r1, r1, #30
 8008ce2:	d433      	bmi.n	8008d4c <TIM6_DAC_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008ce4:	6919      	ldr	r1, [r3, #16]
 8008ce6:	0748      	lsls	r0, r1, #29
 8008ce8:	d502      	bpl.n	8008cf0 <TIM6_DAC_IRQHandler+0x20>
 8008cea:	68d9      	ldr	r1, [r3, #12]
 8008cec:	0749      	lsls	r1, r1, #29
 8008cee:	d43c      	bmi.n	8008d6a <TIM6_DAC_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008cf0:	6919      	ldr	r1, [r3, #16]
 8008cf2:	0708      	lsls	r0, r1, #28
 8008cf4:	d502      	bpl.n	8008cfc <TIM6_DAC_IRQHandler+0x2c>
 8008cf6:	68d9      	ldr	r1, [r3, #12]
 8008cf8:	0709      	lsls	r1, r1, #28
 8008cfa:	d43c      	bmi.n	8008d76 <TIM6_DAC_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008cfc:	6919      	ldr	r1, [r3, #16]
 8008cfe:	06c8      	lsls	r0, r1, #27
 8008d00:	d411      	bmi.n	8008d26 <TIM6_DAC_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008d02:	6919      	ldr	r1, [r3, #16]
 8008d04:	07c8      	lsls	r0, r1, #31
 8008d06:	d502      	bpl.n	8008d0e <TIM6_DAC_IRQHandler+0x3e>
 8008d08:	68d9      	ldr	r1, [r3, #12]
 8008d0a:	07c9      	lsls	r1, r1, #31
 8008d0c:	d439      	bmi.n	8008d82 <TIM6_DAC_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008d0e:	6919      	ldr	r1, [r3, #16]
 8008d10:	0608      	lsls	r0, r1, #24
 8008d12:	d511      	bpl.n	8008d38 <TIM6_DAC_IRQHandler+0x68>
 8008d14:	68d9      	ldr	r1, [r3, #12]
 8008d16:	0609      	lsls	r1, r1, #24
 8008d18:	d50e      	bpl.n	8008d38 <TIM6_DAC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008d1a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008d1e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008d20:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008d22:	2101      	movs	r1, #1
		goto EventCB;
 8008d24:	e00d      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008d26:	68d9      	ldr	r1, [r3, #12]
 8008d28:	06c9      	lsls	r1, r1, #27
 8008d2a:	d5ea      	bpl.n	8008d02 <TIM6_DAC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008d2c:	f06f 0110 	mvn.w	r1, #16
 8008d30:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008d32:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008d34:	2106      	movs	r1, #6
		goto EventCB;
 8008d36:	e004      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008d38:	6919      	ldr	r1, [r3, #16]
 8008d3a:	0648      	lsls	r0, r1, #25
 8008d3c:	d40c      	bmi.n	8008d58 <TIM6_DAC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008d3e:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008d40:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008d42:	6813      	ldr	r3, [r2, #0]
 8008d44:	b10b      	cbz	r3, 8008d4a <TIM6_DAC_IRQHandler+0x7a>
 8008d46:	6892      	ldr	r2, [r2, #8]
 8008d48:	4718      	bx	r3
void TIM6_DAC_IRQHandler(void){
	TIM_IRQHandler(&tim_6);
#if ENABLE_DAC
	DAC_IRQHandler();
#endif
}
 8008d4a:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008d4c:	f06f 0102 	mvn.w	r1, #2
 8008d50:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008d52:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008d54:	2103      	movs	r1, #3
		goto EventCB;
 8008d56:	e7f4      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008d58:	68d9      	ldr	r1, [r3, #12]
 8008d5a:	0649      	lsls	r1, r1, #25
 8008d5c:	d5ef      	bpl.n	8008d3e <TIM6_DAC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008d5e:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008d62:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008d64:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008d66:	2102      	movs	r1, #2
		goto EventCB;
 8008d68:	e7eb      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008d6a:	f06f 0104 	mvn.w	r1, #4
 8008d6e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008d70:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008d72:	2104      	movs	r1, #4
		goto EventCB;
 8008d74:	e7e5      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008d76:	f06f 0108 	mvn.w	r1, #8
 8008d7a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008d7c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008d7e:	2105      	movs	r1, #5
		goto EventCB;
 8008d80:	e7df      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008d82:	f06f 0101 	mvn.w	r1, #1
 8008d86:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008d88:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008d8a:	2100      	movs	r1, #0
		goto EventCB;
 8008d8c:	e7d9      	b.n	8008d42 <TIM6_DAC_IRQHandler+0x72>
 8008d8e:	bf00      	nop
 8008d90:	2000b83c 	.word	0x2000b83c

08008d94 <TIM7_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008d94:	4a2f      	ldr	r2, [pc, #188]	; (8008e54 <TIM7_IRQHandler+0xc0>)
 8008d96:	6853      	ldr	r3, [r2, #4]
 8008d98:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008d9a:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008d9c:	6919      	ldr	r1, [r3, #16]
 8008d9e:	0788      	lsls	r0, r1, #30
 8008da0:	d502      	bpl.n	8008da8 <TIM7_IRQHandler+0x14>
 8008da2:	68d9      	ldr	r1, [r3, #12]
 8008da4:	0789      	lsls	r1, r1, #30
 8008da6:	d433      	bmi.n	8008e10 <TIM7_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008da8:	6919      	ldr	r1, [r3, #16]
 8008daa:	0748      	lsls	r0, r1, #29
 8008dac:	d502      	bpl.n	8008db4 <TIM7_IRQHandler+0x20>
 8008dae:	68d9      	ldr	r1, [r3, #12]
 8008db0:	0749      	lsls	r1, r1, #29
 8008db2:	d43c      	bmi.n	8008e2e <TIM7_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008db4:	6919      	ldr	r1, [r3, #16]
 8008db6:	0708      	lsls	r0, r1, #28
 8008db8:	d502      	bpl.n	8008dc0 <TIM7_IRQHandler+0x2c>
 8008dba:	68d9      	ldr	r1, [r3, #12]
 8008dbc:	0709      	lsls	r1, r1, #28
 8008dbe:	d43c      	bmi.n	8008e3a <TIM7_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008dc0:	6919      	ldr	r1, [r3, #16]
 8008dc2:	06c8      	lsls	r0, r1, #27
 8008dc4:	d411      	bmi.n	8008dea <TIM7_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008dc6:	6919      	ldr	r1, [r3, #16]
 8008dc8:	07c8      	lsls	r0, r1, #31
 8008dca:	d502      	bpl.n	8008dd2 <TIM7_IRQHandler+0x3e>
 8008dcc:	68d9      	ldr	r1, [r3, #12]
 8008dce:	07c9      	lsls	r1, r1, #31
 8008dd0:	d439      	bmi.n	8008e46 <TIM7_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008dd2:	6919      	ldr	r1, [r3, #16]
 8008dd4:	0608      	lsls	r0, r1, #24
 8008dd6:	d511      	bpl.n	8008dfc <TIM7_IRQHandler+0x68>
 8008dd8:	68d9      	ldr	r1, [r3, #12]
 8008dda:	0609      	lsls	r1, r1, #24
 8008ddc:	d50e      	bpl.n	8008dfc <TIM7_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008dde:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008de2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008de4:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008de6:	2101      	movs	r1, #1
		goto EventCB;
 8008de8:	e00d      	b.n	8008e06 <TIM7_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008dea:	68d9      	ldr	r1, [r3, #12]
 8008dec:	06c9      	lsls	r1, r1, #27
 8008dee:	d5ea      	bpl.n	8008dc6 <TIM7_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008df0:	f06f 0110 	mvn.w	r1, #16
 8008df4:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008df6:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008df8:	2106      	movs	r1, #6
		goto EventCB;
 8008dfa:	e004      	b.n	8008e06 <TIM7_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008dfc:	6919      	ldr	r1, [r3, #16]
 8008dfe:	0648      	lsls	r0, r1, #25
 8008e00:	d40c      	bmi.n	8008e1c <TIM7_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008e02:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008e04:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008e06:	6813      	ldr	r3, [r2, #0]
 8008e08:	b10b      	cbz	r3, 8008e0e <TIM7_IRQHandler+0x7a>
 8008e0a:	6892      	ldr	r2, [r2, #8]
 8008e0c:	4718      	bx	r3
#if defined(TIM7)
tim tim_7(TIM7);
tim_t tim7 = &tim_7;
void TIM7_IRQHandler(void){
	TIM_IRQHandler(&tim_7);
}
 8008e0e:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008e10:	f06f 0102 	mvn.w	r1, #2
 8008e14:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008e16:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008e18:	2103      	movs	r1, #3
		goto EventCB;
 8008e1a:	e7f4      	b.n	8008e06 <TIM7_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008e1c:	68d9      	ldr	r1, [r3, #12]
 8008e1e:	0649      	lsls	r1, r1, #25
 8008e20:	d5ef      	bpl.n	8008e02 <TIM7_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008e22:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008e26:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008e28:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008e2a:	2102      	movs	r1, #2
		goto EventCB;
 8008e2c:	e7eb      	b.n	8008e06 <TIM7_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008e2e:	f06f 0104 	mvn.w	r1, #4
 8008e32:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008e34:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008e36:	2104      	movs	r1, #4
		goto EventCB;
 8008e38:	e7e5      	b.n	8008e06 <TIM7_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008e3a:	f06f 0108 	mvn.w	r1, #8
 8008e3e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008e40:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008e42:	2105      	movs	r1, #5
		goto EventCB;
 8008e44:	e7df      	b.n	8008e06 <TIM7_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008e46:	f06f 0101 	mvn.w	r1, #1
 8008e4a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008e4c:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008e4e:	2100      	movs	r1, #0
		goto EventCB;
 8008e50:	e7d9      	b.n	8008e06 <TIM7_IRQHandler+0x72>
 8008e52:	bf00      	nop
 8008e54:	2000b854 	.word	0x2000b854

08008e58 <TIM8_CC_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008e58:	4a2f      	ldr	r2, [pc, #188]	; (8008f18 <TIM8_CC_IRQHandler+0xc0>)
 8008e5a:	6853      	ldr	r3, [r2, #4]
 8008e5c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e5e:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008e60:	6919      	ldr	r1, [r3, #16]
 8008e62:	0788      	lsls	r0, r1, #30
 8008e64:	d502      	bpl.n	8008e6c <TIM8_CC_IRQHandler+0x14>
 8008e66:	68d9      	ldr	r1, [r3, #12]
 8008e68:	0789      	lsls	r1, r1, #30
 8008e6a:	d433      	bmi.n	8008ed4 <TIM8_CC_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008e6c:	6919      	ldr	r1, [r3, #16]
 8008e6e:	0748      	lsls	r0, r1, #29
 8008e70:	d502      	bpl.n	8008e78 <TIM8_CC_IRQHandler+0x20>
 8008e72:	68d9      	ldr	r1, [r3, #12]
 8008e74:	0749      	lsls	r1, r1, #29
 8008e76:	d43c      	bmi.n	8008ef2 <TIM8_CC_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008e78:	6919      	ldr	r1, [r3, #16]
 8008e7a:	0708      	lsls	r0, r1, #28
 8008e7c:	d502      	bpl.n	8008e84 <TIM8_CC_IRQHandler+0x2c>
 8008e7e:	68d9      	ldr	r1, [r3, #12]
 8008e80:	0709      	lsls	r1, r1, #28
 8008e82:	d43c      	bmi.n	8008efe <TIM8_CC_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008e84:	6919      	ldr	r1, [r3, #16]
 8008e86:	06c8      	lsls	r0, r1, #27
 8008e88:	d411      	bmi.n	8008eae <TIM8_CC_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008e8a:	6919      	ldr	r1, [r3, #16]
 8008e8c:	07c8      	lsls	r0, r1, #31
 8008e8e:	d502      	bpl.n	8008e96 <TIM8_CC_IRQHandler+0x3e>
 8008e90:	68d9      	ldr	r1, [r3, #12]
 8008e92:	07c9      	lsls	r1, r1, #31
 8008e94:	d439      	bmi.n	8008f0a <TIM8_CC_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008e96:	6919      	ldr	r1, [r3, #16]
 8008e98:	0608      	lsls	r0, r1, #24
 8008e9a:	d511      	bpl.n	8008ec0 <TIM8_CC_IRQHandler+0x68>
 8008e9c:	68d9      	ldr	r1, [r3, #12]
 8008e9e:	0609      	lsls	r1, r1, #24
 8008ea0:	d50e      	bpl.n	8008ec0 <TIM8_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008ea2:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008ea6:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ea8:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008eaa:	2101      	movs	r1, #1
		goto EventCB;
 8008eac:	e00d      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008eae:	68d9      	ldr	r1, [r3, #12]
 8008eb0:	06c9      	lsls	r1, r1, #27
 8008eb2:	d5ea      	bpl.n	8008e8a <TIM8_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008eb4:	f06f 0110 	mvn.w	r1, #16
 8008eb8:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008eba:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008ebc:	2106      	movs	r1, #6
		goto EventCB;
 8008ebe:	e004      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008ec0:	6919      	ldr	r1, [r3, #16]
 8008ec2:	0648      	lsls	r0, r1, #25
 8008ec4:	d40c      	bmi.n	8008ee0 <TIM8_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ec6:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008ec8:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	b10b      	cbz	r3, 8008ed2 <TIM8_CC_IRQHandler+0x7a>
 8008ece:	6892      	ldr	r2, [r2, #8]
 8008ed0:	4718      	bx	r3
#if defined(TIM8)
tim tim_8(TIM8);
tim_t tim8 = &tim_8;
void TIM8_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_8);
}
 8008ed2:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008ed4:	f06f 0102 	mvn.w	r1, #2
 8008ed8:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008eda:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008edc:	2103      	movs	r1, #3
		goto EventCB;
 8008ede:	e7f4      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008ee0:	68d9      	ldr	r1, [r3, #12]
 8008ee2:	0649      	lsls	r1, r1, #25
 8008ee4:	d5ef      	bpl.n	8008ec6 <TIM8_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008ee6:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008eea:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008eec:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008eee:	2102      	movs	r1, #2
		goto EventCB;
 8008ef0:	e7eb      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008ef2:	f06f 0104 	mvn.w	r1, #4
 8008ef6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008ef8:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008efa:	2104      	movs	r1, #4
		goto EventCB;
 8008efc:	e7e5      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008efe:	f06f 0108 	mvn.w	r1, #8
 8008f02:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008f04:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008f06:	2105      	movs	r1, #5
		goto EventCB;
 8008f08:	e7df      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008f0a:	f06f 0101 	mvn.w	r1, #1
 8008f0e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f10:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008f12:	2100      	movs	r1, #0
		goto EventCB;
 8008f14:	e7d9      	b.n	8008eca <TIM8_CC_IRQHandler+0x72>
 8008f16:	bf00      	nop
 8008f18:	2000b86c 	.word	0x2000b86c

08008f1c <TIM1_BRK_TIM9_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008f1c:	4a60      	ldr	r2, [pc, #384]	; (80090a0 <TIM1_BRK_TIM9_IRQHandler+0x184>)
 8008f1e:	6853      	ldr	r3, [r2, #4]
 8008f20:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM8) */

#if defined(TIM9) && defined(TIM1)
tim tim_9(TIM9);
tim_t tim9 = &tim_9;
void TIM1_BRK_TIM9_IRQHandler(void){
 8008f22:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 8008f24:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008f26:	6919      	ldr	r1, [r3, #16]
 8008f28:	0789      	lsls	r1, r1, #30
 8008f2a:	d502      	bpl.n	8008f32 <TIM1_BRK_TIM9_IRQHandler+0x16>
 8008f2c:	68d9      	ldr	r1, [r3, #12]
 8008f2e:	078c      	lsls	r4, r1, #30
 8008f30:	d46d      	bmi.n	800900e <TIM1_BRK_TIM9_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008f32:	6919      	ldr	r1, [r3, #16]
 8008f34:	0748      	lsls	r0, r1, #29
 8008f36:	d502      	bpl.n	8008f3e <TIM1_BRK_TIM9_IRQHandler+0x22>
 8008f38:	68d9      	ldr	r1, [r3, #12]
 8008f3a:	0749      	lsls	r1, r1, #29
 8008f3c:	d47f      	bmi.n	800903e <TIM1_BRK_TIM9_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008f3e:	6919      	ldr	r1, [r3, #16]
 8008f40:	070c      	lsls	r4, r1, #28
 8008f42:	d502      	bpl.n	8008f4a <TIM1_BRK_TIM9_IRQHandler+0x2e>
 8008f44:	68d9      	ldr	r1, [r3, #12]
 8008f46:	0708      	lsls	r0, r1, #28
 8008f48:	d47f      	bmi.n	800904a <TIM1_BRK_TIM9_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008f4a:	6919      	ldr	r1, [r3, #16]
 8008f4c:	06c9      	lsls	r1, r1, #27
 8008f4e:	d412      	bmi.n	8008f76 <TIM1_BRK_TIM9_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008f50:	6919      	ldr	r1, [r3, #16]
 8008f52:	07c8      	lsls	r0, r1, #31
 8008f54:	d503      	bpl.n	8008f5e <TIM1_BRK_TIM9_IRQHandler+0x42>
 8008f56:	68d9      	ldr	r1, [r3, #12]
 8008f58:	07c9      	lsls	r1, r1, #31
 8008f5a:	f100 8082 	bmi.w	8009062 <TIM1_BRK_TIM9_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008f5e:	6919      	ldr	r1, [r3, #16]
 8008f60:	060c      	lsls	r4, r1, #24
 8008f62:	d511      	bpl.n	8008f88 <TIM1_BRK_TIM9_IRQHandler+0x6c>
 8008f64:	68d9      	ldr	r1, [r3, #12]
 8008f66:	0608      	lsls	r0, r1, #24
 8008f68:	d50e      	bpl.n	8008f88 <TIM1_BRK_TIM9_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008f6a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008f6e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f70:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008f72:	2101      	movs	r1, #1
		goto EventCB;
 8008f74:	e00d      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008f76:	68d9      	ldr	r1, [r3, #12]
 8008f78:	06cc      	lsls	r4, r1, #27
 8008f7a:	d5e9      	bpl.n	8008f50 <TIM1_BRK_TIM9_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008f7c:	f06f 0110 	mvn.w	r1, #16
 8008f80:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008f82:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008f84:	2106      	movs	r1, #6
		goto EventCB;
 8008f86:	e004      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008f88:	6919      	ldr	r1, [r3, #16]
 8008f8a:	0649      	lsls	r1, r1, #25
 8008f8c:	d445      	bmi.n	800901a <TIM1_BRK_TIM9_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f8e:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008f90:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	b10b      	cbz	r3, 8008f9a <TIM1_BRK_TIM9_IRQHandler+0x7e>
 8008f96:	6892      	ldr	r2, [r2, #8]
 8008f98:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 8008f9a:	4a42      	ldr	r2, [pc, #264]	; (80090a4 <TIM1_BRK_TIM9_IRQHandler+0x188>)
 8008f9c:	6853      	ldr	r3, [r2, #4]
 8008f9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008fa0:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008fa2:	6919      	ldr	r1, [r3, #16]
 8008fa4:	0788      	lsls	r0, r1, #30
 8008fa6:	d502      	bpl.n	8008fae <TIM1_BRK_TIM9_IRQHandler+0x92>
 8008fa8:	68d9      	ldr	r1, [r3, #12]
 8008faa:	0789      	lsls	r1, r1, #30
 8008fac:	d465      	bmi.n	800907a <TIM1_BRK_TIM9_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008fae:	6919      	ldr	r1, [r3, #16]
 8008fb0:	074c      	lsls	r4, r1, #29
 8008fb2:	d502      	bpl.n	8008fba <TIM1_BRK_TIM9_IRQHandler+0x9e>
 8008fb4:	68d9      	ldr	r1, [r3, #12]
 8008fb6:	0748      	lsls	r0, r1, #29
 8008fb8:	d465      	bmi.n	8009086 <TIM1_BRK_TIM9_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008fba:	6919      	ldr	r1, [r3, #16]
 8008fbc:	0709      	lsls	r1, r1, #28
 8008fbe:	d502      	bpl.n	8008fc6 <TIM1_BRK_TIM9_IRQHandler+0xaa>
 8008fc0:	68d9      	ldr	r1, [r3, #12]
 8008fc2:	070c      	lsls	r4, r1, #28
 8008fc4:	d465      	bmi.n	8009092 <TIM1_BRK_TIM9_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008fc6:	6919      	ldr	r1, [r3, #16]
 8008fc8:	06c8      	lsls	r0, r1, #27
 8008fca:	d502      	bpl.n	8008fd2 <TIM1_BRK_TIM9_IRQHandler+0xb6>
 8008fcc:	68d9      	ldr	r1, [r3, #12]
 8008fce:	06c9      	lsls	r1, r1, #27
 8008fd0:	d441      	bmi.n	8009056 <TIM1_BRK_TIM9_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008fd2:	6919      	ldr	r1, [r3, #16]
 8008fd4:	07cc      	lsls	r4, r1, #31
 8008fd6:	d502      	bpl.n	8008fde <TIM1_BRK_TIM9_IRQHandler+0xc2>
 8008fd8:	68d9      	ldr	r1, [r3, #12]
 8008fda:	07c8      	lsls	r0, r1, #31
 8008fdc:	d447      	bmi.n	800906e <TIM1_BRK_TIM9_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008fde:	6919      	ldr	r1, [r3, #16]
 8008fe0:	0609      	lsls	r1, r1, #24
 8008fe2:	d508      	bpl.n	8008ff6 <TIM1_BRK_TIM9_IRQHandler+0xda>
 8008fe4:	68d9      	ldr	r1, [r3, #12]
 8008fe6:	060c      	lsls	r4, r1, #24
 8008fe8:	d505      	bpl.n	8008ff6 <TIM1_BRK_TIM9_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008fea:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008fee:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ff0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008ff2:	2101      	movs	r1, #1
		goto EventCB;
 8008ff4:	e004      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008ff6:	6919      	ldr	r1, [r3, #16]
 8008ff8:	0648      	lsls	r0, r1, #25
 8008ffa:	d417      	bmi.n	800902c <TIM1_BRK_TIM9_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ffc:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008ffe:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009000:	6813      	ldr	r3, [r2, #0]
 8009002:	b11b      	cbz	r3, 800900c <TIM1_BRK_TIM9_IRQHandler+0xf0>
#if USE_TIM1
	TIM_IRQHandler(&tim_1);
#endif
	TIM_IRQHandler(&tim_9);
}
 8009004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009008:	6892      	ldr	r2, [r2, #8]
 800900a:	4718      	bx	r3
}
 800900c:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800900e:	f06f 0102 	mvn.w	r1, #2
 8009012:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009014:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009016:	2103      	movs	r1, #3
		goto EventCB;
 8009018:	e7bb      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800901a:	68d9      	ldr	r1, [r3, #12]
 800901c:	064c      	lsls	r4, r1, #25
 800901e:	d5b6      	bpl.n	8008f8e <TIM1_BRK_TIM9_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009020:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009024:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009026:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009028:	2102      	movs	r1, #2
		goto EventCB;
 800902a:	e7b2      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800902c:	68d9      	ldr	r1, [r3, #12]
 800902e:	0649      	lsls	r1, r1, #25
 8009030:	d5e4      	bpl.n	8008ffc <TIM1_BRK_TIM9_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009032:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009036:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009038:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 800903a:	2102      	movs	r1, #2
		goto EventCB;
 800903c:	e7e0      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800903e:	f06f 0104 	mvn.w	r1, #4
 8009042:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009044:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009046:	2104      	movs	r1, #4
		goto EventCB;
 8009048:	e7a3      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800904a:	f06f 0108 	mvn.w	r1, #8
 800904e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009050:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009052:	2105      	movs	r1, #5
		goto EventCB;
 8009054:	e79d      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009056:	f06f 0110 	mvn.w	r1, #16
 800905a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800905c:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800905e:	2106      	movs	r1, #6
		goto EventCB;
 8009060:	e7ce      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009062:	f06f 0101 	mvn.w	r1, #1
 8009066:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009068:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800906a:	2100      	movs	r1, #0
		goto EventCB;
 800906c:	e791      	b.n	8008f92 <TIM1_BRK_TIM9_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800906e:	f06f 0101 	mvn.w	r1, #1
 8009072:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009074:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009076:	2100      	movs	r1, #0
		goto EventCB;
 8009078:	e7c2      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800907a:	f06f 0102 	mvn.w	r1, #2
 800907e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009080:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009082:	2103      	movs	r1, #3
		goto EventCB;
 8009084:	e7bc      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009086:	f06f 0104 	mvn.w	r1, #4
 800908a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 800908c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800908e:	2104      	movs	r1, #4
		goto EventCB;
 8009090:	e7b6      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009092:	f06f 0108 	mvn.w	r1, #8
 8009096:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009098:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800909a:	2105      	movs	r1, #5
		goto EventCB;
 800909c:	e7b0      	b.n	8009000 <TIM1_BRK_TIM9_IRQHandler+0xe4>
 800909e:	bf00      	nop
 80090a0:	2000b74c 	.word	0x2000b74c
 80090a4:	2000b884 	.word	0x2000b884

080090a8 <TIM1_UP_TIM10_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 80090a8:	4a60      	ldr	r2, [pc, #384]	; (800922c <TIM1_UP_TIM10_IRQHandler+0x184>)
 80090aa:	6853      	ldr	r3, [r2, #4]
 80090ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM9) && defined(TIM1) */

#if defined(TIM10) && defined(TIM1)
tim tim_10(TIM10);
tim_t tim10 = &tim_10;
void TIM1_UP_TIM10_IRQHandler(void){
 80090ae:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 80090b0:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80090b2:	6919      	ldr	r1, [r3, #16]
 80090b4:	0789      	lsls	r1, r1, #30
 80090b6:	d502      	bpl.n	80090be <TIM1_UP_TIM10_IRQHandler+0x16>
 80090b8:	68d9      	ldr	r1, [r3, #12]
 80090ba:	078c      	lsls	r4, r1, #30
 80090bc:	d46d      	bmi.n	800919a <TIM1_UP_TIM10_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80090be:	6919      	ldr	r1, [r3, #16]
 80090c0:	0748      	lsls	r0, r1, #29
 80090c2:	d502      	bpl.n	80090ca <TIM1_UP_TIM10_IRQHandler+0x22>
 80090c4:	68d9      	ldr	r1, [r3, #12]
 80090c6:	0749      	lsls	r1, r1, #29
 80090c8:	d47f      	bmi.n	80091ca <TIM1_UP_TIM10_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80090ca:	6919      	ldr	r1, [r3, #16]
 80090cc:	070c      	lsls	r4, r1, #28
 80090ce:	d502      	bpl.n	80090d6 <TIM1_UP_TIM10_IRQHandler+0x2e>
 80090d0:	68d9      	ldr	r1, [r3, #12]
 80090d2:	0708      	lsls	r0, r1, #28
 80090d4:	d47f      	bmi.n	80091d6 <TIM1_UP_TIM10_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80090d6:	6919      	ldr	r1, [r3, #16]
 80090d8:	06c9      	lsls	r1, r1, #27
 80090da:	d412      	bmi.n	8009102 <TIM1_UP_TIM10_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80090dc:	6919      	ldr	r1, [r3, #16]
 80090de:	07c8      	lsls	r0, r1, #31
 80090e0:	d503      	bpl.n	80090ea <TIM1_UP_TIM10_IRQHandler+0x42>
 80090e2:	68d9      	ldr	r1, [r3, #12]
 80090e4:	07c9      	lsls	r1, r1, #31
 80090e6:	f100 8082 	bmi.w	80091ee <TIM1_UP_TIM10_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 80090ea:	6919      	ldr	r1, [r3, #16]
 80090ec:	060c      	lsls	r4, r1, #24
 80090ee:	d511      	bpl.n	8009114 <TIM1_UP_TIM10_IRQHandler+0x6c>
 80090f0:	68d9      	ldr	r1, [r3, #12]
 80090f2:	0608      	lsls	r0, r1, #24
 80090f4:	d50e      	bpl.n	8009114 <TIM1_UP_TIM10_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 80090f6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80090fa:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80090fc:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80090fe:	2101      	movs	r1, #1
		goto EventCB;
 8009100:	e00d      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009102:	68d9      	ldr	r1, [r3, #12]
 8009104:	06cc      	lsls	r4, r1, #27
 8009106:	d5e9      	bpl.n	80090dc <TIM1_UP_TIM10_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009108:	f06f 0110 	mvn.w	r1, #16
 800910c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800910e:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009110:	2106      	movs	r1, #6
		goto EventCB;
 8009112:	e004      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009114:	6919      	ldr	r1, [r3, #16]
 8009116:	0649      	lsls	r1, r1, #25
 8009118:	d445      	bmi.n	80091a6 <TIM1_UP_TIM10_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 800911a:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800911c:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800911e:	6813      	ldr	r3, [r2, #0]
 8009120:	b10b      	cbz	r3, 8009126 <TIM1_UP_TIM10_IRQHandler+0x7e>
 8009122:	6892      	ldr	r2, [r2, #8]
 8009124:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 8009126:	4a42      	ldr	r2, [pc, #264]	; (8009230 <TIM1_UP_TIM10_IRQHandler+0x188>)
 8009128:	6853      	ldr	r3, [r2, #4]
 800912a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800912c:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 800912e:	6919      	ldr	r1, [r3, #16]
 8009130:	0788      	lsls	r0, r1, #30
 8009132:	d502      	bpl.n	800913a <TIM1_UP_TIM10_IRQHandler+0x92>
 8009134:	68d9      	ldr	r1, [r3, #12]
 8009136:	0789      	lsls	r1, r1, #30
 8009138:	d465      	bmi.n	8009206 <TIM1_UP_TIM10_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800913a:	6919      	ldr	r1, [r3, #16]
 800913c:	074c      	lsls	r4, r1, #29
 800913e:	d502      	bpl.n	8009146 <TIM1_UP_TIM10_IRQHandler+0x9e>
 8009140:	68d9      	ldr	r1, [r3, #12]
 8009142:	0748      	lsls	r0, r1, #29
 8009144:	d465      	bmi.n	8009212 <TIM1_UP_TIM10_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8009146:	6919      	ldr	r1, [r3, #16]
 8009148:	0709      	lsls	r1, r1, #28
 800914a:	d502      	bpl.n	8009152 <TIM1_UP_TIM10_IRQHandler+0xaa>
 800914c:	68d9      	ldr	r1, [r3, #12]
 800914e:	070c      	lsls	r4, r1, #28
 8009150:	d465      	bmi.n	800921e <TIM1_UP_TIM10_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009152:	6919      	ldr	r1, [r3, #16]
 8009154:	06c8      	lsls	r0, r1, #27
 8009156:	d502      	bpl.n	800915e <TIM1_UP_TIM10_IRQHandler+0xb6>
 8009158:	68d9      	ldr	r1, [r3, #12]
 800915a:	06c9      	lsls	r1, r1, #27
 800915c:	d441      	bmi.n	80091e2 <TIM1_UP_TIM10_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800915e:	6919      	ldr	r1, [r3, #16]
 8009160:	07cc      	lsls	r4, r1, #31
 8009162:	d502      	bpl.n	800916a <TIM1_UP_TIM10_IRQHandler+0xc2>
 8009164:	68d9      	ldr	r1, [r3, #12]
 8009166:	07c8      	lsls	r0, r1, #31
 8009168:	d447      	bmi.n	80091fa <TIM1_UP_TIM10_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800916a:	6919      	ldr	r1, [r3, #16]
 800916c:	0609      	lsls	r1, r1, #24
 800916e:	d508      	bpl.n	8009182 <TIM1_UP_TIM10_IRQHandler+0xda>
 8009170:	68d9      	ldr	r1, [r3, #12]
 8009172:	060c      	lsls	r4, r1, #24
 8009174:	d505      	bpl.n	8009182 <TIM1_UP_TIM10_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009176:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800917a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800917c:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800917e:	2101      	movs	r1, #1
		goto EventCB;
 8009180:	e004      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009182:	6919      	ldr	r1, [r3, #16]
 8009184:	0648      	lsls	r0, r1, #25
 8009186:	d417      	bmi.n	80091b8 <TIM1_UP_TIM10_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009188:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800918a:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800918c:	6813      	ldr	r3, [r2, #0]
 800918e:	b11b      	cbz	r3, 8009198 <TIM1_UP_TIM10_IRQHandler+0xf0>
#if USE_TIM1
	TIM_IRQHandler(&tim_1);
#endif
	TIM_IRQHandler(&tim_10);
}
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009194:	6892      	ldr	r2, [r2, #8]
 8009196:	4718      	bx	r3
}
 8009198:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800919a:	f06f 0102 	mvn.w	r1, #2
 800919e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80091a0:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80091a2:	2103      	movs	r1, #3
		goto EventCB;
 80091a4:	e7bb      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80091a6:	68d9      	ldr	r1, [r3, #12]
 80091a8:	064c      	lsls	r4, r1, #25
 80091aa:	d5b6      	bpl.n	800911a <TIM1_UP_TIM10_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80091ac:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80091b0:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80091b2:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80091b4:	2102      	movs	r1, #2
		goto EventCB;
 80091b6:	e7b2      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80091b8:	68d9      	ldr	r1, [r3, #12]
 80091ba:	0649      	lsls	r1, r1, #25
 80091bc:	d5e4      	bpl.n	8009188 <TIM1_UP_TIM10_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80091be:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80091c2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80091c4:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80091c6:	2102      	movs	r1, #2
		goto EventCB;
 80091c8:	e7e0      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80091ca:	f06f 0104 	mvn.w	r1, #4
 80091ce:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80091d0:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80091d2:	2104      	movs	r1, #4
		goto EventCB;
 80091d4:	e7a3      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80091d6:	f06f 0108 	mvn.w	r1, #8
 80091da:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80091dc:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80091de:	2105      	movs	r1, #5
		goto EventCB;
 80091e0:	e79d      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80091e2:	f06f 0110 	mvn.w	r1, #16
 80091e6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80091e8:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80091ea:	2106      	movs	r1, #6
		goto EventCB;
 80091ec:	e7ce      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80091ee:	f06f 0101 	mvn.w	r1, #1
 80091f2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80091f4:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80091f6:	2100      	movs	r1, #0
		goto EventCB;
 80091f8:	e791      	b.n	800911e <TIM1_UP_TIM10_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80091fa:	f06f 0101 	mvn.w	r1, #1
 80091fe:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009200:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009202:	2100      	movs	r1, #0
		goto EventCB;
 8009204:	e7c2      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009206:	f06f 0102 	mvn.w	r1, #2
 800920a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 800920c:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800920e:	2103      	movs	r1, #3
		goto EventCB;
 8009210:	e7bc      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009212:	f06f 0104 	mvn.w	r1, #4
 8009216:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009218:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800921a:	2104      	movs	r1, #4
		goto EventCB;
 800921c:	e7b6      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800921e:	f06f 0108 	mvn.w	r1, #8
 8009222:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009224:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009226:	2105      	movs	r1, #5
		goto EventCB;
 8009228:	e7b0      	b.n	800918c <TIM1_UP_TIM10_IRQHandler+0xe4>
 800922a:	bf00      	nop
 800922c:	2000b74c 	.word	0x2000b74c
 8009230:	2000b764 	.word	0x2000b764

08009234 <TIM1_TRG_COM_TIM11_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8009234:	4a60      	ldr	r2, [pc, #384]	; (80093b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x184>)
 8009236:	6853      	ldr	r3, [r2, #4]
 8009238:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM10) && defined(TIM1) */

#if defined(TIM11) && defined(TIM1)
tim tim_11(TIM11);
tim_t tim11 = &tim_11;
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 800923a:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 800923c:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 800923e:	6919      	ldr	r1, [r3, #16]
 8009240:	0789      	lsls	r1, r1, #30
 8009242:	d502      	bpl.n	800924a <TIM1_TRG_COM_TIM11_IRQHandler+0x16>
 8009244:	68d9      	ldr	r1, [r3, #12]
 8009246:	078c      	lsls	r4, r1, #30
 8009248:	d46d      	bmi.n	8009326 <TIM1_TRG_COM_TIM11_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800924a:	6919      	ldr	r1, [r3, #16]
 800924c:	0748      	lsls	r0, r1, #29
 800924e:	d502      	bpl.n	8009256 <TIM1_TRG_COM_TIM11_IRQHandler+0x22>
 8009250:	68d9      	ldr	r1, [r3, #12]
 8009252:	0749      	lsls	r1, r1, #29
 8009254:	d47f      	bmi.n	8009356 <TIM1_TRG_COM_TIM11_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8009256:	6919      	ldr	r1, [r3, #16]
 8009258:	070c      	lsls	r4, r1, #28
 800925a:	d502      	bpl.n	8009262 <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
 800925c:	68d9      	ldr	r1, [r3, #12]
 800925e:	0708      	lsls	r0, r1, #28
 8009260:	d47f      	bmi.n	8009362 <TIM1_TRG_COM_TIM11_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009262:	6919      	ldr	r1, [r3, #16]
 8009264:	06c9      	lsls	r1, r1, #27
 8009266:	d412      	bmi.n	800928e <TIM1_TRG_COM_TIM11_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009268:	6919      	ldr	r1, [r3, #16]
 800926a:	07c8      	lsls	r0, r1, #31
 800926c:	d503      	bpl.n	8009276 <TIM1_TRG_COM_TIM11_IRQHandler+0x42>
 800926e:	68d9      	ldr	r1, [r3, #12]
 8009270:	07c9      	lsls	r1, r1, #31
 8009272:	f100 8082 	bmi.w	800937a <TIM1_TRG_COM_TIM11_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8009276:	6919      	ldr	r1, [r3, #16]
 8009278:	060c      	lsls	r4, r1, #24
 800927a:	d511      	bpl.n	80092a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x6c>
 800927c:	68d9      	ldr	r1, [r3, #12]
 800927e:	0608      	lsls	r0, r1, #24
 8009280:	d50e      	bpl.n	80092a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009282:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009286:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009288:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800928a:	2101      	movs	r1, #1
		goto EventCB;
 800928c:	e00d      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800928e:	68d9      	ldr	r1, [r3, #12]
 8009290:	06cc      	lsls	r4, r1, #27
 8009292:	d5e9      	bpl.n	8009268 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009294:	f06f 0110 	mvn.w	r1, #16
 8009298:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800929a:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800929c:	2106      	movs	r1, #6
		goto EventCB;
 800929e:	e004      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80092a0:	6919      	ldr	r1, [r3, #16]
 80092a2:	0649      	lsls	r1, r1, #25
 80092a4:	d445      	bmi.n	8009332 <TIM1_TRG_COM_TIM11_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 80092a6:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80092a8:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80092aa:	6813      	ldr	r3, [r2, #0]
 80092ac:	b10b      	cbz	r3, 80092b2 <TIM1_TRG_COM_TIM11_IRQHandler+0x7e>
 80092ae:	6892      	ldr	r2, [r2, #8]
 80092b0:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 80092b2:	4a42      	ldr	r2, [pc, #264]	; (80093bc <TIM1_TRG_COM_TIM11_IRQHandler+0x188>)
 80092b4:	6853      	ldr	r3, [r2, #4]
 80092b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80092b8:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80092ba:	6919      	ldr	r1, [r3, #16]
 80092bc:	0788      	lsls	r0, r1, #30
 80092be:	d502      	bpl.n	80092c6 <TIM1_TRG_COM_TIM11_IRQHandler+0x92>
 80092c0:	68d9      	ldr	r1, [r3, #12]
 80092c2:	0789      	lsls	r1, r1, #30
 80092c4:	d465      	bmi.n	8009392 <TIM1_TRG_COM_TIM11_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80092c6:	6919      	ldr	r1, [r3, #16]
 80092c8:	074c      	lsls	r4, r1, #29
 80092ca:	d502      	bpl.n	80092d2 <TIM1_TRG_COM_TIM11_IRQHandler+0x9e>
 80092cc:	68d9      	ldr	r1, [r3, #12]
 80092ce:	0748      	lsls	r0, r1, #29
 80092d0:	d465      	bmi.n	800939e <TIM1_TRG_COM_TIM11_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80092d2:	6919      	ldr	r1, [r3, #16]
 80092d4:	0709      	lsls	r1, r1, #28
 80092d6:	d502      	bpl.n	80092de <TIM1_TRG_COM_TIM11_IRQHandler+0xaa>
 80092d8:	68d9      	ldr	r1, [r3, #12]
 80092da:	070c      	lsls	r4, r1, #28
 80092dc:	d465      	bmi.n	80093aa <TIM1_TRG_COM_TIM11_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80092de:	6919      	ldr	r1, [r3, #16]
 80092e0:	06c8      	lsls	r0, r1, #27
 80092e2:	d502      	bpl.n	80092ea <TIM1_TRG_COM_TIM11_IRQHandler+0xb6>
 80092e4:	68d9      	ldr	r1, [r3, #12]
 80092e6:	06c9      	lsls	r1, r1, #27
 80092e8:	d441      	bmi.n	800936e <TIM1_TRG_COM_TIM11_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80092ea:	6919      	ldr	r1, [r3, #16]
 80092ec:	07cc      	lsls	r4, r1, #31
 80092ee:	d502      	bpl.n	80092f6 <TIM1_TRG_COM_TIM11_IRQHandler+0xc2>
 80092f0:	68d9      	ldr	r1, [r3, #12]
 80092f2:	07c8      	lsls	r0, r1, #31
 80092f4:	d447      	bmi.n	8009386 <TIM1_TRG_COM_TIM11_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 80092f6:	6919      	ldr	r1, [r3, #16]
 80092f8:	0609      	lsls	r1, r1, #24
 80092fa:	d508      	bpl.n	800930e <TIM1_TRG_COM_TIM11_IRQHandler+0xda>
 80092fc:	68d9      	ldr	r1, [r3, #12]
 80092fe:	060c      	lsls	r4, r1, #24
 8009300:	d505      	bpl.n	800930e <TIM1_TRG_COM_TIM11_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009302:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009306:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009308:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800930a:	2101      	movs	r1, #1
		goto EventCB;
 800930c:	e004      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800930e:	6919      	ldr	r1, [r3, #16]
 8009310:	0648      	lsls	r0, r1, #25
 8009312:	d417      	bmi.n	8009344 <TIM1_TRG_COM_TIM11_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009314:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009316:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009318:	6813      	ldr	r3, [r2, #0]
 800931a:	b11b      	cbz	r3, 8009324 <TIM1_TRG_COM_TIM11_IRQHandler+0xf0>
#if USE_TIM1
	TIM_IRQHandler(&tim_1);
#endif
	TIM_IRQHandler(&tim_11);
}
 800931c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009320:	6892      	ldr	r2, [r2, #8]
 8009322:	4718      	bx	r3
}
 8009324:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009326:	f06f 0102 	mvn.w	r1, #2
 800932a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 800932c:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800932e:	2103      	movs	r1, #3
		goto EventCB;
 8009330:	e7bb      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009332:	68d9      	ldr	r1, [r3, #12]
 8009334:	064c      	lsls	r4, r1, #25
 8009336:	d5b6      	bpl.n	80092a6 <TIM1_TRG_COM_TIM11_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009338:	f06f 0140 	mvn.w	r1, #64	; 0x40
 800933c:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800933e:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009340:	2102      	movs	r1, #2
		goto EventCB;
 8009342:	e7b2      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009344:	68d9      	ldr	r1, [r3, #12]
 8009346:	0649      	lsls	r1, r1, #25
 8009348:	d5e4      	bpl.n	8009314 <TIM1_TRG_COM_TIM11_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 800934a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 800934e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009350:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009352:	2102      	movs	r1, #2
		goto EventCB;
 8009354:	e7e0      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009356:	f06f 0104 	mvn.w	r1, #4
 800935a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 800935c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800935e:	2104      	movs	r1, #4
		goto EventCB;
 8009360:	e7a3      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009362:	f06f 0108 	mvn.w	r1, #8
 8009366:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009368:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800936a:	2105      	movs	r1, #5
		goto EventCB;
 800936c:	e79d      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 800936e:	f06f 0110 	mvn.w	r1, #16
 8009372:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009374:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009376:	2106      	movs	r1, #6
		goto EventCB;
 8009378:	e7ce      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800937a:	f06f 0101 	mvn.w	r1, #1
 800937e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009380:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009382:	2100      	movs	r1, #0
		goto EventCB;
 8009384:	e791      	b.n	80092aa <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009386:	f06f 0101 	mvn.w	r1, #1
 800938a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800938c:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800938e:	2100      	movs	r1, #0
		goto EventCB;
 8009390:	e7c2      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009392:	f06f 0102 	mvn.w	r1, #2
 8009396:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009398:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800939a:	2103      	movs	r1, #3
		goto EventCB;
 800939c:	e7bc      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800939e:	f06f 0104 	mvn.w	r1, #4
 80093a2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80093a4:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80093a6:	2104      	movs	r1, #4
		goto EventCB;
 80093a8:	e7b6      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80093aa:	f06f 0108 	mvn.w	r1, #8
 80093ae:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80093b0:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80093b2:	2105      	movs	r1, #5
		goto EventCB;
 80093b4:	e7b0      	b.n	8009318 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
 80093b6:	bf00      	nop
 80093b8:	2000b74c 	.word	0x2000b74c
 80093bc:	2000b77c 	.word	0x2000b77c

080093c0 <TIM8_BRK_TIM12_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 80093c0:	4a60      	ldr	r2, [pc, #384]	; (8009544 <TIM8_BRK_TIM12_IRQHandler+0x184>)
 80093c2:	6853      	ldr	r3, [r2, #4]
 80093c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM11) && defined(TIM1) */

#if defined(TIM12) && defined(TIM8)
tim tim_12(TIM12);
tim_t tim12 = &tim_12;
void TIM8_BRK_TIM12_IRQHandler(void){
 80093c6:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 80093c8:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80093ca:	6919      	ldr	r1, [r3, #16]
 80093cc:	0789      	lsls	r1, r1, #30
 80093ce:	d502      	bpl.n	80093d6 <TIM8_BRK_TIM12_IRQHandler+0x16>
 80093d0:	68d9      	ldr	r1, [r3, #12]
 80093d2:	078c      	lsls	r4, r1, #30
 80093d4:	d46d      	bmi.n	80094b2 <TIM8_BRK_TIM12_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80093d6:	6919      	ldr	r1, [r3, #16]
 80093d8:	0748      	lsls	r0, r1, #29
 80093da:	d502      	bpl.n	80093e2 <TIM8_BRK_TIM12_IRQHandler+0x22>
 80093dc:	68d9      	ldr	r1, [r3, #12]
 80093de:	0749      	lsls	r1, r1, #29
 80093e0:	d47f      	bmi.n	80094e2 <TIM8_BRK_TIM12_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80093e2:	6919      	ldr	r1, [r3, #16]
 80093e4:	070c      	lsls	r4, r1, #28
 80093e6:	d502      	bpl.n	80093ee <TIM8_BRK_TIM12_IRQHandler+0x2e>
 80093e8:	68d9      	ldr	r1, [r3, #12]
 80093ea:	0708      	lsls	r0, r1, #28
 80093ec:	d47f      	bmi.n	80094ee <TIM8_BRK_TIM12_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80093ee:	6919      	ldr	r1, [r3, #16]
 80093f0:	06c9      	lsls	r1, r1, #27
 80093f2:	d412      	bmi.n	800941a <TIM8_BRK_TIM12_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80093f4:	6919      	ldr	r1, [r3, #16]
 80093f6:	07c8      	lsls	r0, r1, #31
 80093f8:	d503      	bpl.n	8009402 <TIM8_BRK_TIM12_IRQHandler+0x42>
 80093fa:	68d9      	ldr	r1, [r3, #12]
 80093fc:	07c9      	lsls	r1, r1, #31
 80093fe:	f100 8082 	bmi.w	8009506 <TIM8_BRK_TIM12_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8009402:	6919      	ldr	r1, [r3, #16]
 8009404:	060c      	lsls	r4, r1, #24
 8009406:	d511      	bpl.n	800942c <TIM8_BRK_TIM12_IRQHandler+0x6c>
 8009408:	68d9      	ldr	r1, [r3, #12]
 800940a:	0608      	lsls	r0, r1, #24
 800940c:	d50e      	bpl.n	800942c <TIM8_BRK_TIM12_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800940e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009412:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009414:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009416:	2101      	movs	r1, #1
		goto EventCB;
 8009418:	e00d      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800941a:	68d9      	ldr	r1, [r3, #12]
 800941c:	06cc      	lsls	r4, r1, #27
 800941e:	d5e9      	bpl.n	80093f4 <TIM8_BRK_TIM12_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009420:	f06f 0110 	mvn.w	r1, #16
 8009424:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009426:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009428:	2106      	movs	r1, #6
		goto EventCB;
 800942a:	e004      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800942c:	6919      	ldr	r1, [r3, #16]
 800942e:	0649      	lsls	r1, r1, #25
 8009430:	d445      	bmi.n	80094be <TIM8_BRK_TIM12_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009432:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009434:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009436:	6813      	ldr	r3, [r2, #0]
 8009438:	b10b      	cbz	r3, 800943e <TIM8_BRK_TIM12_IRQHandler+0x7e>
 800943a:	6892      	ldr	r2, [r2, #8]
 800943c:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 800943e:	4a42      	ldr	r2, [pc, #264]	; (8009548 <TIM8_BRK_TIM12_IRQHandler+0x188>)
 8009440:	6853      	ldr	r3, [r2, #4]
 8009442:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009444:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8009446:	6919      	ldr	r1, [r3, #16]
 8009448:	0788      	lsls	r0, r1, #30
 800944a:	d502      	bpl.n	8009452 <TIM8_BRK_TIM12_IRQHandler+0x92>
 800944c:	68d9      	ldr	r1, [r3, #12]
 800944e:	0789      	lsls	r1, r1, #30
 8009450:	d465      	bmi.n	800951e <TIM8_BRK_TIM12_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8009452:	6919      	ldr	r1, [r3, #16]
 8009454:	074c      	lsls	r4, r1, #29
 8009456:	d502      	bpl.n	800945e <TIM8_BRK_TIM12_IRQHandler+0x9e>
 8009458:	68d9      	ldr	r1, [r3, #12]
 800945a:	0748      	lsls	r0, r1, #29
 800945c:	d465      	bmi.n	800952a <TIM8_BRK_TIM12_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800945e:	6919      	ldr	r1, [r3, #16]
 8009460:	0709      	lsls	r1, r1, #28
 8009462:	d502      	bpl.n	800946a <TIM8_BRK_TIM12_IRQHandler+0xaa>
 8009464:	68d9      	ldr	r1, [r3, #12]
 8009466:	070c      	lsls	r4, r1, #28
 8009468:	d465      	bmi.n	8009536 <TIM8_BRK_TIM12_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800946a:	6919      	ldr	r1, [r3, #16]
 800946c:	06c8      	lsls	r0, r1, #27
 800946e:	d502      	bpl.n	8009476 <TIM8_BRK_TIM12_IRQHandler+0xb6>
 8009470:	68d9      	ldr	r1, [r3, #12]
 8009472:	06c9      	lsls	r1, r1, #27
 8009474:	d441      	bmi.n	80094fa <TIM8_BRK_TIM12_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009476:	6919      	ldr	r1, [r3, #16]
 8009478:	07cc      	lsls	r4, r1, #31
 800947a:	d502      	bpl.n	8009482 <TIM8_BRK_TIM12_IRQHandler+0xc2>
 800947c:	68d9      	ldr	r1, [r3, #12]
 800947e:	07c8      	lsls	r0, r1, #31
 8009480:	d447      	bmi.n	8009512 <TIM8_BRK_TIM12_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8009482:	6919      	ldr	r1, [r3, #16]
 8009484:	0609      	lsls	r1, r1, #24
 8009486:	d508      	bpl.n	800949a <TIM8_BRK_TIM12_IRQHandler+0xda>
 8009488:	68d9      	ldr	r1, [r3, #12]
 800948a:	060c      	lsls	r4, r1, #24
 800948c:	d505      	bpl.n	800949a <TIM8_BRK_TIM12_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800948e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009492:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009494:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009496:	2101      	movs	r1, #1
		goto EventCB;
 8009498:	e004      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800949a:	6919      	ldr	r1, [r3, #16]
 800949c:	0648      	lsls	r0, r1, #25
 800949e:	d417      	bmi.n	80094d0 <TIM8_BRK_TIM12_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 80094a0:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80094a2:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80094a4:	6813      	ldr	r3, [r2, #0]
 80094a6:	b11b      	cbz	r3, 80094b0 <TIM8_BRK_TIM12_IRQHandler+0xf0>
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_12);
}
 80094a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80094ac:	6892      	ldr	r2, [r2, #8]
 80094ae:	4718      	bx	r3
}
 80094b0:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80094b2:	f06f 0102 	mvn.w	r1, #2
 80094b6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80094b8:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80094ba:	2103      	movs	r1, #3
		goto EventCB;
 80094bc:	e7bb      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80094be:	68d9      	ldr	r1, [r3, #12]
 80094c0:	064c      	lsls	r4, r1, #25
 80094c2:	d5b6      	bpl.n	8009432 <TIM8_BRK_TIM12_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80094c4:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80094c8:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80094ca:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80094cc:	2102      	movs	r1, #2
		goto EventCB;
 80094ce:	e7b2      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80094d0:	68d9      	ldr	r1, [r3, #12]
 80094d2:	0649      	lsls	r1, r1, #25
 80094d4:	d5e4      	bpl.n	80094a0 <TIM8_BRK_TIM12_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80094d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80094da:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80094dc:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80094de:	2102      	movs	r1, #2
		goto EventCB;
 80094e0:	e7e0      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80094e2:	f06f 0104 	mvn.w	r1, #4
 80094e6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80094e8:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80094ea:	2104      	movs	r1, #4
		goto EventCB;
 80094ec:	e7a3      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80094ee:	f06f 0108 	mvn.w	r1, #8
 80094f2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80094f4:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80094f6:	2105      	movs	r1, #5
		goto EventCB;
 80094f8:	e79d      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80094fa:	f06f 0110 	mvn.w	r1, #16
 80094fe:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009500:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009502:	2106      	movs	r1, #6
		goto EventCB;
 8009504:	e7ce      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009506:	f06f 0101 	mvn.w	r1, #1
 800950a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800950c:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800950e:	2100      	movs	r1, #0
		goto EventCB;
 8009510:	e791      	b.n	8009436 <TIM8_BRK_TIM12_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009512:	f06f 0101 	mvn.w	r1, #1
 8009516:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009518:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800951a:	2100      	movs	r1, #0
		goto EventCB;
 800951c:	e7c2      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800951e:	f06f 0102 	mvn.w	r1, #2
 8009522:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009524:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009526:	2103      	movs	r1, #3
		goto EventCB;
 8009528:	e7bc      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800952a:	f06f 0104 	mvn.w	r1, #4
 800952e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009530:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009532:	2104      	movs	r1, #4
		goto EventCB;
 8009534:	e7b6      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009536:	f06f 0108 	mvn.w	r1, #8
 800953a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 800953c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800953e:	2105      	movs	r1, #5
		goto EventCB;
 8009540:	e7b0      	b.n	80094a4 <TIM8_BRK_TIM12_IRQHandler+0xe4>
 8009542:	bf00      	nop
 8009544:	2000b86c 	.word	0x2000b86c
 8009548:	2000b794 	.word	0x2000b794

0800954c <TIM8_UP_TIM13_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 800954c:	4a60      	ldr	r2, [pc, #384]	; (80096d0 <TIM8_UP_TIM13_IRQHandler+0x184>)
 800954e:	6853      	ldr	r3, [r2, #4]
 8009550:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM12) && defined(TIM8) */

#if defined(TIM13) && defined(TIM8)
tim tim_13(TIM13);
tim_t tim13 = &tim_13;
void TIM8_UP_TIM13_IRQHandler(void){
 8009552:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 8009554:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8009556:	6919      	ldr	r1, [r3, #16]
 8009558:	0789      	lsls	r1, r1, #30
 800955a:	d502      	bpl.n	8009562 <TIM8_UP_TIM13_IRQHandler+0x16>
 800955c:	68d9      	ldr	r1, [r3, #12]
 800955e:	078c      	lsls	r4, r1, #30
 8009560:	d46d      	bmi.n	800963e <TIM8_UP_TIM13_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8009562:	6919      	ldr	r1, [r3, #16]
 8009564:	0748      	lsls	r0, r1, #29
 8009566:	d502      	bpl.n	800956e <TIM8_UP_TIM13_IRQHandler+0x22>
 8009568:	68d9      	ldr	r1, [r3, #12]
 800956a:	0749      	lsls	r1, r1, #29
 800956c:	d47f      	bmi.n	800966e <TIM8_UP_TIM13_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800956e:	6919      	ldr	r1, [r3, #16]
 8009570:	070c      	lsls	r4, r1, #28
 8009572:	d502      	bpl.n	800957a <TIM8_UP_TIM13_IRQHandler+0x2e>
 8009574:	68d9      	ldr	r1, [r3, #12]
 8009576:	0708      	lsls	r0, r1, #28
 8009578:	d47f      	bmi.n	800967a <TIM8_UP_TIM13_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800957a:	6919      	ldr	r1, [r3, #16]
 800957c:	06c9      	lsls	r1, r1, #27
 800957e:	d412      	bmi.n	80095a6 <TIM8_UP_TIM13_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009580:	6919      	ldr	r1, [r3, #16]
 8009582:	07c8      	lsls	r0, r1, #31
 8009584:	d503      	bpl.n	800958e <TIM8_UP_TIM13_IRQHandler+0x42>
 8009586:	68d9      	ldr	r1, [r3, #12]
 8009588:	07c9      	lsls	r1, r1, #31
 800958a:	f100 8082 	bmi.w	8009692 <TIM8_UP_TIM13_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800958e:	6919      	ldr	r1, [r3, #16]
 8009590:	060c      	lsls	r4, r1, #24
 8009592:	d511      	bpl.n	80095b8 <TIM8_UP_TIM13_IRQHandler+0x6c>
 8009594:	68d9      	ldr	r1, [r3, #12]
 8009596:	0608      	lsls	r0, r1, #24
 8009598:	d50e      	bpl.n	80095b8 <TIM8_UP_TIM13_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800959a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800959e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80095a0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80095a2:	2101      	movs	r1, #1
		goto EventCB;
 80095a4:	e00d      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80095a6:	68d9      	ldr	r1, [r3, #12]
 80095a8:	06cc      	lsls	r4, r1, #27
 80095aa:	d5e9      	bpl.n	8009580 <TIM8_UP_TIM13_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80095ac:	f06f 0110 	mvn.w	r1, #16
 80095b0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80095b2:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80095b4:	2106      	movs	r1, #6
		goto EventCB;
 80095b6:	e004      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80095b8:	6919      	ldr	r1, [r3, #16]
 80095ba:	0649      	lsls	r1, r1, #25
 80095bc:	d445      	bmi.n	800964a <TIM8_UP_TIM13_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 80095be:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80095c0:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80095c2:	6813      	ldr	r3, [r2, #0]
 80095c4:	b10b      	cbz	r3, 80095ca <TIM8_UP_TIM13_IRQHandler+0x7e>
 80095c6:	6892      	ldr	r2, [r2, #8]
 80095c8:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 80095ca:	4a42      	ldr	r2, [pc, #264]	; (80096d4 <TIM8_UP_TIM13_IRQHandler+0x188>)
 80095cc:	6853      	ldr	r3, [r2, #4]
 80095ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80095d0:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80095d2:	6919      	ldr	r1, [r3, #16]
 80095d4:	0788      	lsls	r0, r1, #30
 80095d6:	d502      	bpl.n	80095de <TIM8_UP_TIM13_IRQHandler+0x92>
 80095d8:	68d9      	ldr	r1, [r3, #12]
 80095da:	0789      	lsls	r1, r1, #30
 80095dc:	d465      	bmi.n	80096aa <TIM8_UP_TIM13_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80095de:	6919      	ldr	r1, [r3, #16]
 80095e0:	074c      	lsls	r4, r1, #29
 80095e2:	d502      	bpl.n	80095ea <TIM8_UP_TIM13_IRQHandler+0x9e>
 80095e4:	68d9      	ldr	r1, [r3, #12]
 80095e6:	0748      	lsls	r0, r1, #29
 80095e8:	d465      	bmi.n	80096b6 <TIM8_UP_TIM13_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80095ea:	6919      	ldr	r1, [r3, #16]
 80095ec:	0709      	lsls	r1, r1, #28
 80095ee:	d502      	bpl.n	80095f6 <TIM8_UP_TIM13_IRQHandler+0xaa>
 80095f0:	68d9      	ldr	r1, [r3, #12]
 80095f2:	070c      	lsls	r4, r1, #28
 80095f4:	d465      	bmi.n	80096c2 <TIM8_UP_TIM13_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80095f6:	6919      	ldr	r1, [r3, #16]
 80095f8:	06c8      	lsls	r0, r1, #27
 80095fa:	d502      	bpl.n	8009602 <TIM8_UP_TIM13_IRQHandler+0xb6>
 80095fc:	68d9      	ldr	r1, [r3, #12]
 80095fe:	06c9      	lsls	r1, r1, #27
 8009600:	d441      	bmi.n	8009686 <TIM8_UP_TIM13_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009602:	6919      	ldr	r1, [r3, #16]
 8009604:	07cc      	lsls	r4, r1, #31
 8009606:	d502      	bpl.n	800960e <TIM8_UP_TIM13_IRQHandler+0xc2>
 8009608:	68d9      	ldr	r1, [r3, #12]
 800960a:	07c8      	lsls	r0, r1, #31
 800960c:	d447      	bmi.n	800969e <TIM8_UP_TIM13_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800960e:	6919      	ldr	r1, [r3, #16]
 8009610:	0609      	lsls	r1, r1, #24
 8009612:	d508      	bpl.n	8009626 <TIM8_UP_TIM13_IRQHandler+0xda>
 8009614:	68d9      	ldr	r1, [r3, #12]
 8009616:	060c      	lsls	r4, r1, #24
 8009618:	d505      	bpl.n	8009626 <TIM8_UP_TIM13_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800961a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800961e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009620:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009622:	2101      	movs	r1, #1
		goto EventCB;
 8009624:	e004      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009626:	6919      	ldr	r1, [r3, #16]
 8009628:	0648      	lsls	r0, r1, #25
 800962a:	d417      	bmi.n	800965c <TIM8_UP_TIM13_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 800962c:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800962e:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009630:	6813      	ldr	r3, [r2, #0]
 8009632:	b11b      	cbz	r3, 800963c <TIM8_UP_TIM13_IRQHandler+0xf0>
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_13);
}
 8009634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009638:	6892      	ldr	r2, [r2, #8]
 800963a:	4718      	bx	r3
}
 800963c:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800963e:	f06f 0102 	mvn.w	r1, #2
 8009642:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009644:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009646:	2103      	movs	r1, #3
		goto EventCB;
 8009648:	e7bb      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800964a:	68d9      	ldr	r1, [r3, #12]
 800964c:	064c      	lsls	r4, r1, #25
 800964e:	d5b6      	bpl.n	80095be <TIM8_UP_TIM13_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009650:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009654:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009656:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009658:	2102      	movs	r1, #2
		goto EventCB;
 800965a:	e7b2      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800965c:	68d9      	ldr	r1, [r3, #12]
 800965e:	0649      	lsls	r1, r1, #25
 8009660:	d5e4      	bpl.n	800962c <TIM8_UP_TIM13_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009662:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009666:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009668:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 800966a:	2102      	movs	r1, #2
		goto EventCB;
 800966c:	e7e0      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800966e:	f06f 0104 	mvn.w	r1, #4
 8009672:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009674:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009676:	2104      	movs	r1, #4
		goto EventCB;
 8009678:	e7a3      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800967a:	f06f 0108 	mvn.w	r1, #8
 800967e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009680:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009682:	2105      	movs	r1, #5
		goto EventCB;
 8009684:	e79d      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009686:	f06f 0110 	mvn.w	r1, #16
 800968a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800968c:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800968e:	2106      	movs	r1, #6
		goto EventCB;
 8009690:	e7ce      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009692:	f06f 0101 	mvn.w	r1, #1
 8009696:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009698:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800969a:	2100      	movs	r1, #0
		goto EventCB;
 800969c:	e791      	b.n	80095c2 <TIM8_UP_TIM13_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800969e:	f06f 0101 	mvn.w	r1, #1
 80096a2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80096a4:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80096a6:	2100      	movs	r1, #0
		goto EventCB;
 80096a8:	e7c2      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80096aa:	f06f 0102 	mvn.w	r1, #2
 80096ae:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80096b0:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80096b2:	2103      	movs	r1, #3
		goto EventCB;
 80096b4:	e7bc      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80096b6:	f06f 0104 	mvn.w	r1, #4
 80096ba:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80096bc:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80096be:	2104      	movs	r1, #4
		goto EventCB;
 80096c0:	e7b6      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80096c2:	f06f 0108 	mvn.w	r1, #8
 80096c6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80096c8:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80096ca:	2105      	movs	r1, #5
		goto EventCB;
 80096cc:	e7b0      	b.n	8009630 <TIM8_UP_TIM13_IRQHandler+0xe4>
 80096ce:	bf00      	nop
 80096d0:	2000b86c 	.word	0x2000b86c
 80096d4:	2000b7ac 	.word	0x2000b7ac

080096d8 <TIM8_TRG_COM_TIM14_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 80096d8:	4a60      	ldr	r2, [pc, #384]	; (800985c <TIM8_TRG_COM_TIM14_IRQHandler+0x184>)
 80096da:	6853      	ldr	r3, [r2, #4]
 80096dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM13) && defined(TIM8) */

#if defined(TIM14) && defined(TIM8)
tim tim_14(TIM14);
tim_t tim14 = &tim_14;
void TIM8_TRG_COM_TIM14_IRQHandler(void){
 80096de:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 80096e0:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80096e2:	6919      	ldr	r1, [r3, #16]
 80096e4:	0789      	lsls	r1, r1, #30
 80096e6:	d502      	bpl.n	80096ee <TIM8_TRG_COM_TIM14_IRQHandler+0x16>
 80096e8:	68d9      	ldr	r1, [r3, #12]
 80096ea:	078c      	lsls	r4, r1, #30
 80096ec:	d46d      	bmi.n	80097ca <TIM8_TRG_COM_TIM14_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80096ee:	6919      	ldr	r1, [r3, #16]
 80096f0:	0748      	lsls	r0, r1, #29
 80096f2:	d502      	bpl.n	80096fa <TIM8_TRG_COM_TIM14_IRQHandler+0x22>
 80096f4:	68d9      	ldr	r1, [r3, #12]
 80096f6:	0749      	lsls	r1, r1, #29
 80096f8:	d47f      	bmi.n	80097fa <TIM8_TRG_COM_TIM14_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80096fa:	6919      	ldr	r1, [r3, #16]
 80096fc:	070c      	lsls	r4, r1, #28
 80096fe:	d502      	bpl.n	8009706 <TIM8_TRG_COM_TIM14_IRQHandler+0x2e>
 8009700:	68d9      	ldr	r1, [r3, #12]
 8009702:	0708      	lsls	r0, r1, #28
 8009704:	d47f      	bmi.n	8009806 <TIM8_TRG_COM_TIM14_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009706:	6919      	ldr	r1, [r3, #16]
 8009708:	06c9      	lsls	r1, r1, #27
 800970a:	d412      	bmi.n	8009732 <TIM8_TRG_COM_TIM14_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800970c:	6919      	ldr	r1, [r3, #16]
 800970e:	07c8      	lsls	r0, r1, #31
 8009710:	d503      	bpl.n	800971a <TIM8_TRG_COM_TIM14_IRQHandler+0x42>
 8009712:	68d9      	ldr	r1, [r3, #12]
 8009714:	07c9      	lsls	r1, r1, #31
 8009716:	f100 8082 	bmi.w	800981e <TIM8_TRG_COM_TIM14_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800971a:	6919      	ldr	r1, [r3, #16]
 800971c:	060c      	lsls	r4, r1, #24
 800971e:	d511      	bpl.n	8009744 <TIM8_TRG_COM_TIM14_IRQHandler+0x6c>
 8009720:	68d9      	ldr	r1, [r3, #12]
 8009722:	0608      	lsls	r0, r1, #24
 8009724:	d50e      	bpl.n	8009744 <TIM8_TRG_COM_TIM14_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009726:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800972a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800972c:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800972e:	2101      	movs	r1, #1
		goto EventCB;
 8009730:	e00d      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009732:	68d9      	ldr	r1, [r3, #12]
 8009734:	06cc      	lsls	r4, r1, #27
 8009736:	d5e9      	bpl.n	800970c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009738:	f06f 0110 	mvn.w	r1, #16
 800973c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800973e:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009740:	2106      	movs	r1, #6
		goto EventCB;
 8009742:	e004      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009744:	6919      	ldr	r1, [r3, #16]
 8009746:	0649      	lsls	r1, r1, #25
 8009748:	d445      	bmi.n	80097d6 <TIM8_TRG_COM_TIM14_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 800974a:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800974c:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	b10b      	cbz	r3, 8009756 <TIM8_TRG_COM_TIM14_IRQHandler+0x7e>
 8009752:	6892      	ldr	r2, [r2, #8]
 8009754:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 8009756:	4a42      	ldr	r2, [pc, #264]	; (8009860 <TIM8_TRG_COM_TIM14_IRQHandler+0x188>)
 8009758:	6853      	ldr	r3, [r2, #4]
 800975a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800975c:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 800975e:	6919      	ldr	r1, [r3, #16]
 8009760:	0788      	lsls	r0, r1, #30
 8009762:	d502      	bpl.n	800976a <TIM8_TRG_COM_TIM14_IRQHandler+0x92>
 8009764:	68d9      	ldr	r1, [r3, #12]
 8009766:	0789      	lsls	r1, r1, #30
 8009768:	d465      	bmi.n	8009836 <TIM8_TRG_COM_TIM14_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800976a:	6919      	ldr	r1, [r3, #16]
 800976c:	074c      	lsls	r4, r1, #29
 800976e:	d502      	bpl.n	8009776 <TIM8_TRG_COM_TIM14_IRQHandler+0x9e>
 8009770:	68d9      	ldr	r1, [r3, #12]
 8009772:	0748      	lsls	r0, r1, #29
 8009774:	d465      	bmi.n	8009842 <TIM8_TRG_COM_TIM14_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8009776:	6919      	ldr	r1, [r3, #16]
 8009778:	0709      	lsls	r1, r1, #28
 800977a:	d502      	bpl.n	8009782 <TIM8_TRG_COM_TIM14_IRQHandler+0xaa>
 800977c:	68d9      	ldr	r1, [r3, #12]
 800977e:	070c      	lsls	r4, r1, #28
 8009780:	d465      	bmi.n	800984e <TIM8_TRG_COM_TIM14_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009782:	6919      	ldr	r1, [r3, #16]
 8009784:	06c8      	lsls	r0, r1, #27
 8009786:	d502      	bpl.n	800978e <TIM8_TRG_COM_TIM14_IRQHandler+0xb6>
 8009788:	68d9      	ldr	r1, [r3, #12]
 800978a:	06c9      	lsls	r1, r1, #27
 800978c:	d441      	bmi.n	8009812 <TIM8_TRG_COM_TIM14_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800978e:	6919      	ldr	r1, [r3, #16]
 8009790:	07cc      	lsls	r4, r1, #31
 8009792:	d502      	bpl.n	800979a <TIM8_TRG_COM_TIM14_IRQHandler+0xc2>
 8009794:	68d9      	ldr	r1, [r3, #12]
 8009796:	07c8      	lsls	r0, r1, #31
 8009798:	d447      	bmi.n	800982a <TIM8_TRG_COM_TIM14_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800979a:	6919      	ldr	r1, [r3, #16]
 800979c:	0609      	lsls	r1, r1, #24
 800979e:	d508      	bpl.n	80097b2 <TIM8_TRG_COM_TIM14_IRQHandler+0xda>
 80097a0:	68d9      	ldr	r1, [r3, #12]
 80097a2:	060c      	lsls	r4, r1, #24
 80097a4:	d505      	bpl.n	80097b2 <TIM8_TRG_COM_TIM14_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 80097a6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80097aa:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80097ac:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80097ae:	2101      	movs	r1, #1
		goto EventCB;
 80097b0:	e004      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80097b2:	6919      	ldr	r1, [r3, #16]
 80097b4:	0648      	lsls	r0, r1, #25
 80097b6:	d417      	bmi.n	80097e8 <TIM8_TRG_COM_TIM14_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 80097b8:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80097ba:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80097bc:	6813      	ldr	r3, [r2, #0]
 80097be:	b11b      	cbz	r3, 80097c8 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 80097c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80097c4:	6892      	ldr	r2, [r2, #8]
 80097c6:	4718      	bx	r3
}
 80097c8:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80097ca:	f06f 0102 	mvn.w	r1, #2
 80097ce:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80097d0:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80097d2:	2103      	movs	r1, #3
		goto EventCB;
 80097d4:	e7bb      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80097d6:	68d9      	ldr	r1, [r3, #12]
 80097d8:	064c      	lsls	r4, r1, #25
 80097da:	d5b6      	bpl.n	800974a <TIM8_TRG_COM_TIM14_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80097dc:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80097e0:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80097e2:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80097e4:	2102      	movs	r1, #2
		goto EventCB;
 80097e6:	e7b2      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80097e8:	68d9      	ldr	r1, [r3, #12]
 80097ea:	0649      	lsls	r1, r1, #25
 80097ec:	d5e4      	bpl.n	80097b8 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80097ee:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80097f2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80097f4:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80097f6:	2102      	movs	r1, #2
		goto EventCB;
 80097f8:	e7e0      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80097fa:	f06f 0104 	mvn.w	r1, #4
 80097fe:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009800:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009802:	2104      	movs	r1, #4
		goto EventCB;
 8009804:	e7a3      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009806:	f06f 0108 	mvn.w	r1, #8
 800980a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 800980c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800980e:	2105      	movs	r1, #5
		goto EventCB;
 8009810:	e79d      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009812:	f06f 0110 	mvn.w	r1, #16
 8009816:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009818:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800981a:	2106      	movs	r1, #6
		goto EventCB;
 800981c:	e7ce      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800981e:	f06f 0101 	mvn.w	r1, #1
 8009822:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009824:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009826:	2100      	movs	r1, #0
		goto EventCB;
 8009828:	e791      	b.n	800974e <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800982a:	f06f 0101 	mvn.w	r1, #1
 800982e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009830:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009832:	2100      	movs	r1, #0
		goto EventCB;
 8009834:	e7c2      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009836:	f06f 0102 	mvn.w	r1, #2
 800983a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 800983c:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800983e:	2103      	movs	r1, #3
		goto EventCB;
 8009840:	e7bc      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009842:	f06f 0104 	mvn.w	r1, #4
 8009846:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009848:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800984a:	2104      	movs	r1, #4
		goto EventCB;
 800984c:	e7b6      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800984e:	f06f 0108 	mvn.w	r1, #8
 8009852:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009854:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009856:	2105      	movs	r1, #5
		goto EventCB;
 8009858:	e7b0      	b.n	80097bc <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
 800985a:	bf00      	nop
 800985c:	2000b86c 	.word	0x2000b86c
 8009860:	2000b7c4 	.word	0x2000b7c4

08009864 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
}
 8009864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 8009868:	f8df a154 	ldr.w	sl, [pc, #340]	; 80099c0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 800986c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80099c4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 8009870:	4f4a      	ldr	r7, [pc, #296]	; (800999c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 8009872:	4a4b      	ldr	r2, [pc, #300]	; (80099a0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 8009874:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80099c8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 8009878:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 800987c:	2300      	movs	r3, #0
 800987e:	f8ca 300c 	str.w	r3, [sl, #12]
 8009882:	f8ca 3000 	str.w	r3, [sl]
 8009886:	f8ca 3008 	str.w	r3, [sl, #8]
 800988a:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 800988e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 80099cc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 8009892:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80099d0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 8009896:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8009898:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 800989c:	f8c9 300c 	str.w	r3, [r9, #12]
 80098a0:	f8c9 3000 	str.w	r3, [r9]
 80098a4:	f8c9 3008 	str.w	r3, [r9, #8]
 80098a8:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 80098ac:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80099d4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 80098b0:	f8df c124 	ldr.w	ip, [pc, #292]	; 80099d8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 80098b4:	4e3b      	ldr	r6, [pc, #236]	; (80099a4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 80098b6:	4d3c      	ldr	r5, [pc, #240]	; (80099a8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 80098b8:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 80098bc:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 80098c0:	f8c8 3000 	str.w	r3, [r8]
 80098c4:	f8c8 3008 	str.w	r3, [r8, #8]
 80098c8:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 80098cc:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80099dc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 80098d0:	4c36      	ldr	r4, [pc, #216]	; (80099ac <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 80098d2:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 80098d6:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 80098da:	f8ce 3000 	str.w	r3, [lr]
 80098de:	f8ce 3008 	str.w	r3, [lr, #8]
 80098e2:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 80098e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ea:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80099e0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 80098ee:	4830      	ldr	r0, [pc, #192]	; (80099b0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 80098f0:	f8cc e004 	str.w	lr, [ip, #4]
 80098f4:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 80098f8:	f8cc 3000 	str.w	r3, [ip]
 80098fc:	f8cc 3008 	str.w	r3, [ip, #8]
 8009900:	f8cc 300c 	str.w	r3, [ip, #12]
 8009904:	f8cc 3010 	str.w	r3, [ip, #16]
 8009908:	6033      	str	r3, [r6, #0]
 800990a:	60b3      	str	r3, [r6, #8]
 800990c:	603b      	str	r3, [r7, #0]
 800990e:	60bb      	str	r3, [r7, #8]
 8009910:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 8009912:	f8c7 9004 	str.w	r9, [r7, #4]
 8009916:	606a      	str	r2, [r5, #4]
 8009918:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 800991c:	4925      	ldr	r1, [pc, #148]	; (80099b4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 800991e:	6062      	str	r2, [r4, #4]
 8009920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009924:	6042      	str	r2, [r0, #4]
 8009926:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 800992a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 800992e:	60f3      	str	r3, [r6, #12]
 8009930:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80099e4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 8009934:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8009938:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 800993a:	604a      	str	r2, [r1, #4]
 800993c:	4e1e      	ldr	r6, [pc, #120]	; (80099b8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 800993e:	4a1f      	ldr	r2, [pc, #124]	; (80099bc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 8009940:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80099e8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 8009944:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 8009946:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 800994a:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 800994e:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 8009950:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 8009954:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 8009956:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 800995a:	60cb      	str	r3, [r1, #12]
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	60d3      	str	r3, [r2, #12]
 8009960:	60ab      	str	r3, [r5, #8]
 8009962:	612b      	str	r3, [r5, #16]
 8009964:	6023      	str	r3, [r4, #0]
 8009966:	60a3      	str	r3, [r4, #8]
 8009968:	6123      	str	r3, [r4, #16]
 800996a:	6003      	str	r3, [r0, #0]
 800996c:	6083      	str	r3, [r0, #8]
 800996e:	6103      	str	r3, [r0, #16]
 8009970:	600b      	str	r3, [r1, #0]
 8009972:	608b      	str	r3, [r1, #8]
 8009974:	610b      	str	r3, [r1, #16]
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	6093      	str	r3, [r2, #8]
 800997a:	6113      	str	r3, [r2, #16]
 800997c:	6033      	str	r3, [r6, #0]
 800997e:	60b3      	str	r3, [r6, #8]
 8009980:	60f3      	str	r3, [r6, #12]
 8009982:	6133      	str	r3, [r6, #16]
 8009984:	f8cb 3000 	str.w	r3, [fp]
 8009988:	f8cb 3008 	str.w	r3, [fp, #8]
 800998c:	f8cb 300c 	str.w	r3, [fp, #12]
 8009990:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 8009994:	f8cb c004 	str.w	ip, [fp, #4]
}
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	2000b7dc 	.word	0x2000b7dc
 80099a0:	40010000 	.word	0x40010000
 80099a4:	2000b854 	.word	0x2000b854
 80099a8:	2000b86c 	.word	0x2000b86c
 80099ac:	2000b884 	.word	0x2000b884
 80099b0:	2000b764 	.word	0x2000b764
 80099b4:	2000b77c 	.word	0x2000b77c
 80099b8:	2000b7ac 	.word	0x2000b7ac
 80099bc:	2000b794 	.word	0x2000b794
 80099c0:	2000b74c 	.word	0x2000b74c
 80099c4:	2000b7f4 	.word	0x2000b7f4
 80099c8:	2000b80c 	.word	0x2000b80c
 80099cc:	40000400 	.word	0x40000400
 80099d0:	2000b824 	.word	0x2000b824
 80099d4:	40000800 	.word	0x40000800
 80099d8:	2000b83c 	.word	0x2000b83c
 80099dc:	40000c00 	.word	0x40000c00
 80099e0:	40001000 	.word	0x40001000
 80099e4:	2000b7c4 	.word	0x2000b7c4
 80099e8:	40002000 	.word	0x40002000
 80099ec:	00000000 	.word	0x00000000

080099f0 <_ZN5usart4initEP14usart_config_t>:

usart::usart(USART_TypeDef *usart){
	_usart = usart;
}

stm_ret_t usart::init(usart_config_t *conf){
 80099f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099f4:	460d      	mov	r5, r1
 80099f6:	e9d2 4107 	ldrd	r4, r1, [r2, #28]
 80099fa:	b08b      	sub	sp, #44	; 0x2c
 80099fc:	4606      	mov	r6, r0
	stm_ret_t ret;
 80099fe:	2001      	movs	r0, #1
 8009a00:	2300      	movs	r3, #0
	_conf = conf;
 8009a02:	622a      	str	r2, [r5, #32]
	stm_ret_t ret;
 8009a04:	f88d 0018 	strb.w	r0, [sp, #24]
#if ENABLE_DMA
	_rxdma = _conf -> rxdma;
	_txdma = _conf -> txdma;
 8009a08:	606c      	str	r4, [r5, #4]
#endif /* ENABLE_DMA */
	__IO uint32_t usart_bus_frequency = 0UL;

	gpio_port_clock_enable(_conf -> txport);
 8009a0a:	68d0      	ldr	r0, [r2, #12]
	_txdma = _conf -> txdma;
 8009a0c:	60a9      	str	r1, [r5, #8]
	stm_ret_t ret;
 8009a0e:	9307      	str	r3, [sp, #28]
	__IO uint32_t usart_bus_frequency = 0UL;
 8009a10:	9304      	str	r3, [sp, #16]
	gpio_port_clock_enable(_conf -> txport);
 8009a12:	f7fd fb29 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(_conf -> rxport);
 8009a16:	6a2b      	ldr	r3, [r5, #32]
 8009a18:	6958      	ldr	r0, [r3, #20]
 8009a1a:	f7fd fb25 	bl	8007068 <gpio_port_clock_enable>
	gpio_set_alternatefunction(conf->txport, conf->txpin, GPIO_ALTERNATE_PUSHPULL);
	gpio_set_mode(conf->rxport, conf->rxpin, GPIO_INPUT);
#elif defined(STM32F4)
	if(
#if defined(USART1)
			_usart == USART1
 8009a1e:	682b      	ldr	r3, [r5, #0]
	if(
 8009a20:	4ab1      	ldr	r2, [pc, #708]	; (8009ce8 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d014      	beq.n	8009a50 <_ZN5usart4initEP14usart_config_t+0x60>
#endif /* defined(USART1) */
			||
 8009a26:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d010      	beq.n	8009a50 <_ZN5usart4initEP14usart_config_t+0x60>
#if defined(USART2)
			_usart == USART2
#endif /* defined(USART2) */
			||
 8009a2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00c      	beq.n	8009a50 <_ZN5usart4initEP14usart_config_t+0x60>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
	}
	else{
#if defined(UART7) & defined(UART8)
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_8);
 8009a36:	6a2b      	ldr	r3, [r5, #32]
 8009a38:	2208      	movs	r2, #8
 8009a3a:	8a19      	ldrh	r1, [r3, #16]
 8009a3c:	68d8      	ldr	r0, [r3, #12]
 8009a3e:	f7fd fbfb 	bl	8007238 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_8);
 8009a42:	6a2b      	ldr	r3, [r5, #32]
 8009a44:	2208      	movs	r2, #8
 8009a46:	8b19      	ldrh	r1, [r3, #24]
 8009a48:	6958      	ldr	r0, [r3, #20]
 8009a4a:	f7fd fbf5 	bl	8007238 <gpio_set_alternatefunction>
 8009a4e:	e00b      	b.n	8009a68 <_ZN5usart4initEP14usart_config_t+0x78>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
 8009a50:	6a2b      	ldr	r3, [r5, #32]
 8009a52:	2207      	movs	r2, #7
 8009a54:	8a19      	ldrh	r1, [r3, #16]
 8009a56:	68d8      	ldr	r0, [r3, #12]
 8009a58:	f7fd fbee 	bl	8007238 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
 8009a5c:	6a2b      	ldr	r3, [r5, #32]
 8009a5e:	2207      	movs	r2, #7
 8009a60:	8b19      	ldrh	r1, [r3, #24]
 8009a62:	6958      	ldr	r0, [r3, #20]
 8009a64:	f7fd fbe8 	bl	8007238 <gpio_set_alternatefunction>
#else
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_6);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_6);
#endif /* defined(UART7) & defined(UART8) */
	}
	gpio_set_alternatefunction_type(_conf -> txport, _conf -> txpin, GPIO_OUTPUT_PUSHPULL);
 8009a68:	6a2b      	ldr	r3, [r5, #32]
 8009a6a:	2207      	movs	r2, #7
 8009a6c:	8a19      	ldrh	r1, [r3, #16]
 8009a6e:	68d8      	ldr	r0, [r3, #12]
 8009a70:	f7fd fc20 	bl	80072b4 <gpio_set_alternatefunction_type>
	gpio_set_alternatefunction_type(_conf -> rxport, _conf -> rxpin, GPIO_OUTPUT_PUSHPULL);
 8009a74:	6a2b      	ldr	r3, [r5, #32]
 8009a76:	2207      	movs	r2, #7
 8009a78:	8b19      	ldrh	r1, [r3, #24]
 8009a7a:	6958      	ldr	r0, [r3, #20]
 8009a7c:	f7fd fc1a 	bl	80072b4 <gpio_set_alternatefunction_type>
#endif /* STM32F4 */

#if defined(USART1)
	if(_usart == USART1){
 8009a80:	682c      	ldr	r4, [r5, #0]
 8009a82:	4b99      	ldr	r3, [pc, #612]	; (8009ce8 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8009a84:	429c      	cmp	r4, r3
 8009a86:	f000 8147 	beq.w	8009d18 <_ZN5usart4initEP14usart_config_t+0x328>
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART1) */
#if defined(USART2)
	if(_usart == USART2){
 8009a8a:	4b98      	ldr	r3, [pc, #608]	; (8009cec <_ZN5usart4initEP14usart_config_t+0x2fc>)
 8009a8c:	429c      	cmp	r4, r3
 8009a8e:	f000 8151 	beq.w	8009d34 <_ZN5usart4initEP14usart_config_t+0x344>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART2) */
#if defined(USART3)
	if(_usart == USART3){
 8009a92:	4b97      	ldr	r3, [pc, #604]	; (8009cf0 <_ZN5usart4initEP14usart_config_t+0x300>)
 8009a94:	429c      	cmp	r4, r3
 8009a96:	f000 80d2 	beq.w	8009c3e <_ZN5usart4initEP14usart_config_t+0x24e>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART3) */
#if defined(UART4)
	if(_usart == UART4){
 8009a9a:	4b96      	ldr	r3, [pc, #600]	; (8009cf4 <_ZN5usart4initEP14usart_config_t+0x304>)
 8009a9c:	429c      	cmp	r4, r3
 8009a9e:	f000 80dc 	beq.w	8009c5a <_ZN5usart4initEP14usart_config_t+0x26a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART4) */
#if defined(UART5)
	if(_usart == UART5){
 8009aa2:	4b95      	ldr	r3, [pc, #596]	; (8009cf8 <_ZN5usart4initEP14usart_config_t+0x308>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	f000 80e6 	beq.w	8009c76 <_ZN5usart4initEP14usart_config_t+0x286>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART5) */
#if defined(USART6)
	if(_usart == USART6){
 8009aaa:	4b94      	ldr	r3, [pc, #592]	; (8009cfc <_ZN5usart4initEP14usart_config_t+0x30c>)
 8009aac:	429c      	cmp	r4, r3
 8009aae:	f000 80f0 	beq.w	8009c92 <_ZN5usart4initEP14usart_config_t+0x2a2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART6) */
#if defined(UART7)
	if(_usart == UART7){
 8009ab2:	4b93      	ldr	r3, [pc, #588]	; (8009d00 <_ZN5usart4initEP14usart_config_t+0x310>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	f000 80fa 	beq.w	8009cae <_ZN5usart4initEP14usart_config_t+0x2be>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART7) */
#if defined(UART8)
	if(_usart == UART8){
 8009aba:	4b92      	ldr	r3, [pc, #584]	; (8009d04 <_ZN5usart4initEP14usart_config_t+0x314>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	f000 8104 	beq.w	8009cca <_ZN5usart4initEP14usart_config_t+0x2da>
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART8) */


	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009ac2:	68e3      	ldr	r3, [r4, #12]

	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8009ac4:	6a2f      	ldr	r7, [r5, #32]
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009ac6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009aca:	f043 030c 	orr.w	r3, r3, #12
 8009ace:	60e3      	str	r3, [r4, #12]
	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8009ad0:	9804      	ldr	r0, [sp, #16]
 8009ad2:	f7f6 fd37 	bl	8000544 <__aeabi_ui2d>
 8009ad6:	4b8c      	ldr	r3, [pc, #560]	; (8009d08 <_ZN5usart4initEP14usart_config_t+0x318>)
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f7f6 fdad 	bl	8000638 <__aeabi_dmul>
 8009ade:	4680      	mov	r8, r0
 8009ae0:	6838      	ldr	r0, [r7, #0]
 8009ae2:	4689      	mov	r9, r1
 8009ae4:	f7f6 fd2e 	bl	8000544 <__aeabi_ui2d>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	4640      	mov	r0, r8
 8009aee:	4649      	mov	r1, r9
 8009af0:	f7f6 fecc 	bl	800088c <__aeabi_ddiv>
 8009af4:	f7f7 f898 	bl	8000c28 <__aeabi_d2f>
 8009af8:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Fraction = 0x00UL;
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 8009afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 8009b00:	ee17 3a90 	vmov	r3, s15
 8009b04:	fa1f f883 	uxth.w	r8, r3
 8009b08:	f7f6 fd3e 	bl	8000588 <__aeabi_f2d>
 8009b0c:	4b7f      	ldr	r3, [pc, #508]	; (8009d0c <_ZN5usart4initEP14usart_config_t+0x31c>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f7f6 fd92 	bl	8000638 <__aeabi_dmul>
 8009b14:	f7f7 f868 	bl	8000be8 <__aeabi_d2uiz>
 8009b18:	fa1f f980 	uxth.w	r9, r0
 8009b1c:	4640      	mov	r0, r8
 8009b1e:	f7f6 fd21 	bl	8000564 <__aeabi_i2d>
 8009b22:	4b7a      	ldr	r3, [pc, #488]	; (8009d0c <_ZN5usart4initEP14usart_config_t+0x31c>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	f7f6 fd87 	bl	8000638 <__aeabi_dmul>
 8009b2a:	f7f7 f85d 	bl	8000be8 <__aeabi_d2uiz>
 8009b2e:	b280      	uxth	r0, r0
 8009b30:	eba9 0000 	sub.w	r0, r9, r0
 8009b34:	f7f6 fd16 	bl	8000564 <__aeabi_i2d>
 8009b38:	a369      	add	r3, pc, #420	; (adr r3, 8009ce0 <_ZN5usart4initEP14usart_config_t+0x2f0>)
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f7f6 fd7b 	bl	8000638 <__aeabi_dmul>
 8009b42:	f7f7 f871 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8009b46:	ee07 0a90 	vmov	s15, r0
 8009b4a:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8009b4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009b52:	f002 fb5b 	bl	800c20c <ceilf>
	DIV_Fraction = ceil(Fraction);
 8009b56:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8009b5a:	793a      	ldrb	r2, [r7, #4]
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8009b5c:	ee10 3a10 	vmov	r3, s0
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8009b66:	60a3      	str	r3, [r4, #8]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8009b68:	b36a      	cbz	r2, 8009bc6 <_ZN5usart4initEP14usart_config_t+0x1d6>

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	2a03      	cmp	r2, #3
 8009b6e:	f240 8104 	bls.w	8009d7a <_ZN5usart4initEP14usart_config_t+0x38a>
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}

#if defined(USART1)
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8009b72:	4b5d      	ldr	r3, [pc, #372]	; (8009ce8 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8009b74:	429c      	cmp	r4, r3
 8009b76:	d04c      	beq.n	8009c12 <_ZN5usart4initEP14usart_config_t+0x222>
#endif /* defined(USART1) */
#if defined(USART2)
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8009b78:	4b5c      	ldr	r3, [pc, #368]	; (8009cec <_ZN5usart4initEP14usart_config_t+0x2fc>)
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	f000 80e5 	beq.w	8009d4a <_ZN5usart4initEP14usart_config_t+0x35a>
#endif /* defined(USART2) */
#if defined(USART3)
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8009b80:	4b5b      	ldr	r3, [pc, #364]	; (8009cf0 <_ZN5usart4initEP14usart_config_t+0x300>)
 8009b82:	429c      	cmp	r4, r3
 8009b84:	f000 80e5 	beq.w	8009d52 <_ZN5usart4initEP14usart_config_t+0x362>
#endif /* defined(USART3) */
#if defined(UART4)
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8009b88:	4b5a      	ldr	r3, [pc, #360]	; (8009cf4 <_ZN5usart4initEP14usart_config_t+0x304>)
 8009b8a:	429c      	cmp	r4, r3
 8009b8c:	d053      	beq.n	8009c36 <_ZN5usart4initEP14usart_config_t+0x246>
#endif /* defined(USART4) */
#if defined(UART5)
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8009b8e:	4b5a      	ldr	r3, [pc, #360]	; (8009cf8 <_ZN5usart4initEP14usart_config_t+0x308>)
 8009b90:	429c      	cmp	r4, r3
 8009b92:	f000 80e6 	beq.w	8009d62 <_ZN5usart4initEP14usart_config_t+0x372>
#endif /* defined(USART5) */
#if defined(USART6)
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8009b96:	4b59      	ldr	r3, [pc, #356]	; (8009cfc <_ZN5usart4initEP14usart_config_t+0x30c>)
 8009b98:	429c      	cmp	r4, r3
 8009b9a:	f000 80e6 	beq.w	8009d6a <_ZN5usart4initEP14usart_config_t+0x37a>
#endif /* defined(USART6) */
#if defined(UART7)
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8009b9e:	4b58      	ldr	r3, [pc, #352]	; (8009d00 <_ZN5usart4initEP14usart_config_t+0x310>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	f000 80e6 	beq.w	8009d72 <_ZN5usart4initEP14usart_config_t+0x382>
#endif /* defined(USART7) */
#if defined(UART8)
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8009ba6:	4b57      	ldr	r3, [pc, #348]	; (8009d04 <_ZN5usart4initEP14usart_config_t+0x314>)
 8009ba8:	429c      	cmp	r4, r3
 8009baa:	f000 80d6 	beq.w	8009d5a <_ZN5usart4initEP14usart_config_t+0x36a>
#endif /* defined(UART8) */
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8009bae:	f995 3024 	ldrsb.w	r3, [r5, #36]	; 0x24
  if ((int32_t)(IRQn) >= 0)
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	da30      	bge.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bb6:	4956      	ldr	r1, [pc, #344]	; (8009d10 <_ZN5usart4initEP14usart_config_t+0x320>)
 8009bb8:	f003 030f 	and.w	r3, r3, #15
 8009bbc:	0112      	lsls	r2, r2, #4
 8009bbe:	4419      	add	r1, r3
 8009bc0:	b2d2      	uxtb	r2, r2
 8009bc2:	760a      	strb	r2, [r1, #24]


stm_ret_t usart::transmit(uint8_t data){
	stm_ret_t ret;

	_usart -> DR = data;
 8009bc4:	682c      	ldr	r4, [r5, #0]
	stm_ret_t ret;
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	9209      	str	r2, [sp, #36]	; 0x24
	_usart -> DR = data;
 8009bca:	220a      	movs	r2, #10
 8009bcc:	6062      	str	r2, [r4, #4]

	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009bce:	af02      	add	r7, sp, #8
 8009bd0:	2264      	movs	r2, #100	; 0x64
 8009bd2:	4621      	mov	r1, r4
	stm_ret_t ret;
 8009bd4:	2301      	movs	r3, #1
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009bd6:	9200      	str	r2, [sp, #0]
 8009bd8:	4638      	mov	r0, r7
 8009bda:	2240      	movs	r2, #64	; 0x40
	stm_ret_t ret;
 8009bdc:	f88d 3020 	strb.w	r3, [sp, #32]
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009be0:	f001 f99e 	bl	800af20 <wait_flag_in_register_timeout>
 8009be4:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009be8:	ac08      	add	r4, sp, #32
 8009bea:	e884 0003 	stmia.w	r4, {r0, r1}
	if(!is_oke(&ret)){
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f001 f9d8 	bl	800afa4 <is_oke>
 8009bf4:	b1d0      	cbz	r0, 8009c2c <_ZN5usart4initEP14usart_config_t+0x23c>
 8009bf6:	682b      	ldr	r3, [r5, #0]
		set_return_line(&ret, __LINE__);
		return ret;
	}

	volatile uint32_t tmp = _usart -> SR;
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	9205      	str	r2, [sp, #20]
	tmp = _usart -> DR;
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	9305      	str	r3, [sp, #20]
	(void)tmp;
 8009c00:	9b05      	ldr	r3, [sp, #20]
	return {STM_OKE, 0};
 8009c02:	2201      	movs	r2, #1
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4630      	mov	r0, r6
	return {STM_OKE, 0};
 8009c08:	7032      	strb	r2, [r6, #0]
 8009c0a:	6073      	str	r3, [r6, #4]
}
 8009c0c:	b00b      	add	sp, #44	; 0x2c
 8009c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8009c12:	2325      	movs	r3, #37	; 0x25
 8009c14:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c18:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8009c1c:	0112      	lsls	r2, r2, #4
 8009c1e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8009c22:	b2d2      	uxtb	r2, r2
 8009c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	_usart -> DR = data;
 8009c28:	682c      	ldr	r4, [r5, #0]
 8009c2a:	e7cc      	b.n	8009bc6 <_ZN5usart4initEP14usart_config_t+0x1d6>
		set_return_line(&ret, __LINE__);
 8009c2c:	21fe      	movs	r1, #254	; 0xfe
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 f9b6 	bl	800afa0 <set_return_line>
		return ret;
 8009c34:	e7e5      	b.n	8009c02 <_ZN5usart4initEP14usart_config_t+0x212>
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8009c36:	2334      	movs	r3, #52	; 0x34
 8009c38:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009c3c:	e7ec      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8009c3e:	4a35      	ldr	r2, [pc, #212]	; (8009d14 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009c40:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009c42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c46:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009c48:	2002      	movs	r0, #2
 8009c4a:	f7fd fd5f 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == UART4){
 8009c4e:	682c      	ldr	r4, [r5, #0]
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <_ZN5usart4initEP14usart_config_t+0x304>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009c52:	9004      	str	r0, [sp, #16]
	if(_usart == UART4){
 8009c54:	429c      	cmp	r4, r3
 8009c56:	f47f af24 	bne.w	8009aa2 <_ZN5usart4initEP14usart_config_t+0xb2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8009c5a:	4a2e      	ldr	r2, [pc, #184]	; (8009d14 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009c5c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c62:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009c64:	2002      	movs	r0, #2
 8009c66:	f7fd fd51 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == UART5){
 8009c6a:	682c      	ldr	r4, [r5, #0]
 8009c6c:	4b22      	ldr	r3, [pc, #136]	; (8009cf8 <_ZN5usart4initEP14usart_config_t+0x308>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009c6e:	9004      	str	r0, [sp, #16]
	if(_usart == UART5){
 8009c70:	429c      	cmp	r4, r3
 8009c72:	f47f af1a 	bne.w	8009aaa <_ZN5usart4initEP14usart_config_t+0xba>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8009c76:	4a27      	ldr	r2, [pc, #156]	; (8009d14 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009c78:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c7e:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009c80:	2002      	movs	r0, #2
 8009c82:	f7fd fd43 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == USART6){
 8009c86:	682c      	ldr	r4, [r5, #0]
 8009c88:	4b1c      	ldr	r3, [pc, #112]	; (8009cfc <_ZN5usart4initEP14usart_config_t+0x30c>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009c8a:	9004      	str	r0, [sp, #16]
	if(_usart == USART6){
 8009c8c:	429c      	cmp	r4, r3
 8009c8e:	f47f af10 	bne.w	8009ab2 <_ZN5usart4initEP14usart_config_t+0xc2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8009c92:	4a20      	ldr	r2, [pc, #128]	; (8009d14 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009c94:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009c96:	f043 0320 	orr.w	r3, r3, #32
 8009c9a:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009c9c:	2003      	movs	r0, #3
 8009c9e:	f7fd fd35 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == UART7){
 8009ca2:	682c      	ldr	r4, [r5, #0]
 8009ca4:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <_ZN5usart4initEP14usart_config_t+0x310>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009ca6:	9004      	str	r0, [sp, #16]
	if(_usart == UART7){
 8009ca8:	429c      	cmp	r4, r3
 8009caa:	f47f af06 	bne.w	8009aba <_ZN5usart4initEP14usart_config_t+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
 8009cae:	4a19      	ldr	r2, [pc, #100]	; (8009d14 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009cb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cb6:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cb8:	2002      	movs	r0, #2
 8009cba:	f7fd fd27 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == UART8){
 8009cbe:	682c      	ldr	r4, [r5, #0]
 8009cc0:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <_ZN5usart4initEP14usart_config_t+0x314>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cc2:	9004      	str	r0, [sp, #16]
	if(_usart == UART8){
 8009cc4:	429c      	cmp	r4, r3
 8009cc6:	f47f aefc 	bne.w	8009ac2 <_ZN5usart4initEP14usart_config_t+0xd2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8009cca:	4a12      	ldr	r2, [pc, #72]	; (8009d14 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009ccc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cd2:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8009cd4:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cd6:	f7fd fd19 	bl	800770c <rcc_get_bus_frequency>
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009cda:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cdc:	9004      	str	r0, [sp, #16]
 8009cde:	e6f0      	b.n	8009ac2 <_ZN5usart4initEP14usart_config_t+0xd2>
 8009ce0:	47ae147b 	.word	0x47ae147b
 8009ce4:	3f847ae1 	.word	0x3f847ae1
 8009ce8:	40011000 	.word	0x40011000
 8009cec:	40004400 	.word	0x40004400
 8009cf0:	40004800 	.word	0x40004800
 8009cf4:	40004c00 	.word	0x40004c00
 8009cf8:	40005000 	.word	0x40005000
 8009cfc:	40011400 	.word	0x40011400
 8009d00:	40007800 	.word	0x40007800
 8009d04:	40007c00 	.word	0x40007c00
 8009d08:	3fb00000 	.word	0x3fb00000
 8009d0c:	40590000 	.word	0x40590000
 8009d10:	e000ecfc 	.word	0xe000ecfc
 8009d14:	40023800 	.word	0x40023800
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8009d18:	4a28      	ldr	r2, [pc, #160]	; (8009dbc <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8009d1a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009d1c:	f043 0310 	orr.w	r3, r3, #16
 8009d20:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009d22:	2003      	movs	r0, #3
 8009d24:	f7fd fcf2 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == USART2){
 8009d28:	682c      	ldr	r4, [r5, #0]
 8009d2a:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <_ZN5usart4initEP14usart_config_t+0x3d0>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009d2c:	9004      	str	r0, [sp, #16]
	if(_usart == USART2){
 8009d2e:	429c      	cmp	r4, r3
 8009d30:	f47f aeaf 	bne.w	8009a92 <_ZN5usart4initEP14usart_config_t+0xa2>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8009d34:	4a21      	ldr	r2, [pc, #132]	; (8009dbc <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8009d36:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d3c:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8009d3e:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d40:	f7fd fce4 	bl	800770c <rcc_get_bus_frequency>
	if(_usart == USART3){
 8009d44:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d46:	9004      	str	r0, [sp, #16]
 8009d48:	e6a3      	b.n	8009a92 <_ZN5usart4initEP14usart_config_t+0xa2>
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8009d4a:	2326      	movs	r3, #38	; 0x26
 8009d4c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009d50:	e762      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8009d52:	2327      	movs	r3, #39	; 0x27
 8009d54:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009d58:	e75e      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8009d5a:	2353      	movs	r3, #83	; 0x53
 8009d5c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009d60:	e75a      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8009d62:	2335      	movs	r3, #53	; 0x35
 8009d64:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009d68:	e756      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8009d6a:	2347      	movs	r3, #71	; 0x47
 8009d6c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009d70:	e752      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8009d72:	2352      	movs	r3, #82	; 0x52
 8009d74:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009d78:	e74e      	b.n	8009c18 <_ZN5usart4initEP14usart_config_t+0x228>
			set_return(&ret, STM_ERR, __LINE__);
 8009d7a:	a806      	add	r0, sp, #24
 8009d7c:	228c      	movs	r2, #140	; 0x8c
 8009d7e:	2100      	movs	r1, #0
 8009d80:	f001 f90a 	bl	800af98 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8009d84:	4b0f      	ldr	r3, [pc, #60]	; (8009dc4 <_ZN5usart4initEP14usart_config_t+0x3d4>)
 8009d86:	4a10      	ldr	r2, [pc, #64]	; (8009dc8 <_ZN5usart4initEP14usart_config_t+0x3d8>)
 8009d88:	4910      	ldr	r1, [pc, #64]	; (8009dcc <_ZN5usart4initEP14usart_config_t+0x3dc>)
 8009d8a:	4811      	ldr	r0, [pc, #68]	; (8009dd0 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8009d8c:	f000 ffd0 	bl	800ad30 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8009d90:	4910      	ldr	r1, [pc, #64]	; (8009dd4 <_ZN5usart4initEP14usart_config_t+0x3e4>)
 8009d92:	480f      	ldr	r0, [pc, #60]	; (8009dd0 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8009d94:	2205      	movs	r2, #5
 8009d96:	f000 ff4f 	bl	800ac38 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8009d9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8009d9e:	f7fe fb5b 	bl	8008458 <systick_delay_ms>
 8009da2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009da6:	490c      	ldr	r1, [pc, #48]	; (8009dd8 <_ZN5usart4initEP14usart_config_t+0x3e8>)
 8009da8:	4b0c      	ldr	r3, [pc, #48]	; (8009ddc <_ZN5usart4initEP14usart_config_t+0x3ec>)
 8009daa:	68ca      	ldr	r2, [r1, #12]
 8009dac:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009db0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009db2:	60cb      	str	r3, [r1, #12]
 8009db4:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009db8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009dba:	e7fd      	b.n	8009db8 <_ZN5usart4initEP14usart_config_t+0x3c8>
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	40004400 	.word	0x40004400
 8009dc4:	080114d4 	.word	0x080114d4
 8009dc8:	080116f0 	.word	0x080116f0
 8009dcc:	0801146c 	.word	0x0801146c
 8009dd0:	08011718 	.word	0x08011718
 8009dd4:	080114b8 	.word	0x080114b8
 8009dd8:	e000ed00 	.word	0xe000ed00
 8009ddc:	05fa0004 	.word	0x05fa0004

08009de0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>:
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8009de0:	b570      	push	{r4, r5, r6, lr}
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009de2:	6a0d      	ldr	r5, [r1, #32]
	stm_ret_t ret;
 8009de4:	2601      	movs	r6, #1
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009de6:	792d      	ldrb	r5, [r5, #4]
	stm_ret_t ret;
 8009de8:	7006      	strb	r6, [r0, #0]
 8009dea:	2600      	movs	r6, #0
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8009dec:	4604      	mov	r4, r0
	stm_ret_t ret;
 8009dee:	6046      	str	r6, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009df0:	b11d      	cbz	r5, 8009dfa <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x1a>
		parameter = param;
 8009df2:	e9c1 3203 	strd	r3, r2, [r1, #12]
}
 8009df6:	4620      	mov	r0, r4
 8009df8:	bd70      	pop	{r4, r5, r6, pc}
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8009dfa:	22ed      	movs	r2, #237	; 0xed
 8009dfc:	2103      	movs	r1, #3
 8009dfe:	f001 f8cb 	bl	800af98 <set_return>
		LOG_WARN(TAG, "%s -> %s, USART peripheral control unsuported register event handler.", __FILE__, __FUNCTION__ );
 8009e02:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x34>)
 8009e04:	4a04      	ldr	r2, [pc, #16]	; (8009e18 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x38>)
 8009e06:	4905      	ldr	r1, [pc, #20]	; (8009e1c <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x3c>)
 8009e08:	4805      	ldr	r0, [pc, #20]	; (8009e20 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x40>)
 8009e0a:	f000 ff53 	bl	800acb4 <LOG_WARN>
}
 8009e0e:	4620      	mov	r0, r4
 8009e10:	bd70      	pop	{r4, r5, r6, pc}
 8009e12:	bf00      	nop
 8009e14:	080115fc 	.word	0x080115fc
 8009e18:	080116f0 	.word	0x080116f0
 8009e1c:	08011720 	.word	0x08011720
 8009e20:	08011718 	.word	0x08011718

08009e24 <_ZN5usart8transmitEPht>:

	return ret;
}


stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8009e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e28:	4615      	mov	r5, r2
	stm_ret_t ret;
 8009e2a:	2201      	movs	r2, #1
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8009e2c:	b085      	sub	sp, #20
	stm_ret_t ret;
 8009e2e:	7002      	strb	r2, [r0, #0]
 8009e30:	2200      	movs	r2, #0
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8009e32:	4604      	mov	r4, r0
 8009e34:	4688      	mov	r8, r1
	stm_ret_t ret;
 8009e36:	6042      	str	r2, [r0, #4]
	uint16_t TxCount = len;
 8009e38:	18ef      	adds	r7, r5, r3

	while(TxCount--) {
		_usart -> DR = *data++;

		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009e3a:	ae02      	add	r6, sp, #8
 8009e3c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009e40:	e011      	b.n	8009e66 <_ZN5usart8transmitEPht+0x42>
		_usart -> DR = *data++;
 8009e42:	f8d8 1000 	ldr.w	r1, [r8]
 8009e46:	f815 cb01 	ldrb.w	ip, [r5], #1
 8009e4a:	f8c1 c004 	str.w	ip, [r1, #4]
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009e4e:	f8cd 9000 	str.w	r9, [sp]
 8009e52:	f001 f865 	bl	800af20 <wait_flag_in_register_timeout>
 8009e56:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009e5a:	e884 0003 	stmia.w	r4, {r0, r1}
		if(!is_oke(&ret)){
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f001 f8a0 	bl	800afa4 <is_oke>
 8009e64:	b150      	cbz	r0, 8009e7c <_ZN5usart8transmitEPht+0x58>
	while(TxCount--) {
 8009e66:	42bd      	cmp	r5, r7
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009e68:	f04f 0301 	mov.w	r3, #1
 8009e6c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009e70:	4630      	mov	r0, r6
	while(TxCount--) {
 8009e72:	d1e6      	bne.n	8009e42 <_ZN5usart8transmitEPht+0x1e>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	return ret;
}
 8009e74:	4620      	mov	r0, r4
 8009e76:	b005      	add	sp, #20
 8009e78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			set_return_line(&ret, __LINE__);
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	f240 1113 	movw	r1, #275	; 0x113
 8009e82:	f001 f88d 	bl	800afa0 <set_return_line>
}
 8009e86:	4620      	mov	r0, r4
 8009e88:	b005      	add	sp, #20
 8009e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e8e:	bf00      	nop

08009e90 <_ZN5usart24receive_to_idle_start_itEt>:
}



stm_ret_t usart::receive_start_it(uint16_t buffer_size){
	stm_ret_t ret;
 8009e90:	2301      	movs	r3, #1
}
#endif /* ENABLE_DMA */



stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8009e92:	b570      	push	{r4, r5, r6, lr}
	stm_ret_t ret;
 8009e94:	7003      	strb	r3, [r0, #0]
 8009e96:	2300      	movs	r3, #0
 8009e98:	6043      	str	r3, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009e9a:	6a0b      	ldr	r3, [r1, #32]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8009e9c:	4616      	mov	r6, r2
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009e9e:	791a      	ldrb	r2, [r3, #4]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8009ea0:	b082      	sub	sp, #8
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4605      	mov	r5, r0
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009ea6:	2a00      	cmp	r2, #0
 8009ea8:	d047      	beq.n	8009f3a <_ZN5usart24receive_to_idle_start_itEt+0xaa>
		if(_conf -> interruptoption && (USART_RECEIVE_INTERRUPT | USART_TRANSMIT_RECEIVE_INTERRUPT))
 8009eaa:	795b      	ldrb	r3, [r3, #5]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d03d      	beq.n	8009f2c <_ZN5usart24receive_to_idle_start_itEt+0x9c>
			_usart -> CR1 |= USART_CR1_RXNEIE;
 8009eb0:	680a      	ldr	r2, [r1, #0]
 8009eb2:	68d3      	ldr	r3, [r2, #12]
 8009eb4:	f043 0320 	orr.w	r3, r3, #32
 8009eb8:	60d3      	str	r3, [r2, #12]
	if(rxbuffer != NULL) {
 8009eba:	6960      	ldr	r0, [r4, #20]
	rxlen = buffer_size;
 8009ebc:	8326      	strh	r6, [r4, #24]
	rxcount = 0;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	8363      	strh	r3, [r4, #26]
	reception = USART_RECEPTION_NORMAL;
 8009ec2:	7763      	strb	r3, [r4, #29]
	if(rxbuffer != NULL) {
 8009ec4:	b110      	cbz	r0, 8009ecc <_ZN5usart24receive_to_idle_start_itEt+0x3c>
		free(rxbuffer);
 8009ec6:	f002 fa4b 	bl	800c360 <free>
	rxbuffer = (uint8_t *)malloc((rxlen +1) * sizeof(uint8_t));
 8009eca:	8b26      	ldrh	r6, [r4, #24]
 8009ecc:	2101      	movs	r1, #1
 8009ece:	1870      	adds	r0, r6, r1
 8009ed0:	f002 fa12 	bl	800c2f8 <calloc>
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	6160      	str	r0, [r4, #20]
	if(rxbuffer == NULL){
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d03b      	beq.n	8009f54 <_ZN5usart24receive_to_idle_start_itEt+0xc4>
	_usart -> CR1 |= USART_CR1_PEIE;
 8009edc:	6823      	ldr	r3, [r4, #0]
	__NVIC_ClearPendingIRQ(IRQn);
 8009ede:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
	_usart -> CR1 |= USART_CR1_PEIE;
 8009ee2:	68d9      	ldr	r1, [r3, #12]
 8009ee4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009ee8:	60d9      	str	r1, [r3, #12]
	_usart -> CR3 |= USART_CR3_EIE;
 8009eea:	6959      	ldr	r1, [r3, #20]
  if ((int32_t)(IRQn) >= 0)
 8009eec:	2a00      	cmp	r2, #0
 8009eee:	f041 0101 	orr.w	r1, r1, #1
 8009ef2:	6159      	str	r1, [r3, #20]
 8009ef4:	db0c      	blt.n	8009f10 <_ZN5usart24receive_to_idle_start_itEt+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009ef6:	f002 001f 	and.w	r0, r2, #31
 8009efa:	0952      	lsrs	r2, r2, #5
 8009efc:	0092      	lsls	r2, r2, #2
 8009efe:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8009f02:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8009f06:	2101      	movs	r1, #1
 8009f08:	4081      	lsls	r1, r0
 8009f0a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f0e:	6011      	str	r1, [r2, #0]
	volatile uint32_t tmp = _usart -> SR;
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	9201      	str	r2, [sp, #4]
	tmp = _usart -> DR;
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	9201      	str	r2, [sp, #4]
	(void)tmp;
 8009f18:	9a01      	ldr	r2, [sp, #4]
	stm_ret_t ret = receive_start_it(buffer_size);

	reception = USART_RECEPTION_TOIDLE;

	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f1a:	68da      	ldr	r2, [r3, #12]
	reception = USART_RECEPTION_TOIDLE;
 8009f1c:	2102      	movs	r1, #2
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f1e:	f042 0210 	orr.w	r2, r2, #16

	return ret;
}
 8009f22:	4628      	mov	r0, r5
	reception = USART_RECEPTION_TOIDLE;
 8009f24:	7761      	strb	r1, [r4, #29]
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f26:	60da      	str	r2, [r3, #12]
}
 8009f28:	b002      	add	sp, #8
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERROR(TAG, "%s -> %s, USART not selected receive interrupt.", __FILE__, __FUNCTION__ );
 8009f2c:	4b10      	ldr	r3, [pc, #64]	; (8009f70 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8009f2e:	4a11      	ldr	r2, [pc, #68]	; (8009f74 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8009f30:	4911      	ldr	r1, [pc, #68]	; (8009f78 <_ZN5usart24receive_to_idle_start_itEt+0xe8>)
 8009f32:	4812      	ldr	r0, [pc, #72]	; (8009f7c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8009f34:	f000 fefc 	bl	800ad30 <LOG_ERROR>
 8009f38:	e7bf      	b.n	8009eba <_ZN5usart24receive_to_idle_start_itEt+0x2a>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8009f3a:	f240 12a5 	movw	r2, #421	; 0x1a5
 8009f3e:	2103      	movs	r1, #3
 8009f40:	f001 f82a 	bl	800af98 <set_return>
		LOG_ERROR(TAG, "%s -> %s, USART not selected interrupt control.", __FILE__, __FUNCTION__ );
 8009f44:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8009f46:	4a0b      	ldr	r2, [pc, #44]	; (8009f74 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8009f48:	490d      	ldr	r1, [pc, #52]	; (8009f80 <_ZN5usart24receive_to_idle_start_itEt+0xf0>)
 8009f4a:	480c      	ldr	r0, [pc, #48]	; (8009f7c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8009f4c:	f000 fef0 	bl	800ad30 <LOG_ERROR>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f50:	6823      	ldr	r3, [r4, #0]
		return ret;
 8009f52:	e7e2      	b.n	8009f1a <_ZN5usart24receive_to_idle_start_itEt+0x8a>
		LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
 8009f54:	4b06      	ldr	r3, [pc, #24]	; (8009f70 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8009f56:	4a07      	ldr	r2, [pc, #28]	; (8009f74 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8009f58:	490a      	ldr	r1, [pc, #40]	; (8009f84 <_ZN5usart24receive_to_idle_start_itEt+0xf4>)
 8009f5a:	4808      	ldr	r0, [pc, #32]	; (8009f7c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8009f5c:	f000 fee8 	bl	800ad30 <LOG_ERROR>
		set_return(&ret, STM_ERR, __LINE__);
 8009f60:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	f001 f816 	bl	800af98 <set_return>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f6c:	6823      	ldr	r3, [r4, #0]
		return ret;
 8009f6e:	e7d4      	b.n	8009f1a <_ZN5usart24receive_to_idle_start_itEt+0x8a>
 8009f70:	08011810 	.word	0x08011810
 8009f74:	080116f0 	.word	0x080116f0
 8009f78:	08011824 	.word	0x08011824
 8009f7c:	08011718 	.word	0x08011718
 8009f80:	080117e0 	.word	0x080117e0
 8009f84:	08011770 	.word	0x08011770

08009f88 <_ZN5usart10get_bufferEPPh>:
	this->endchar = '\0';
	return receive_stop_dma();
}
#endif /* ENABLE_DMA */

stm_ret_t usart::get_buffer(uint8_t **data){
 8009f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f8a:	460c      	mov	r4, r1
	stm_ret_t ret;

	if(rxbuffer != NULL){
 8009f8c:	6949      	ldr	r1, [r1, #20]
	stm_ret_t ret;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	2700      	movs	r7, #0
stm_ret_t usart::get_buffer(uint8_t **data){
 8009f92:	b083      	sub	sp, #12
 8009f94:	4605      	mov	r5, r0
	stm_ret_t ret;
 8009f96:	7003      	strb	r3, [r0, #0]
 8009f98:	6047      	str	r7, [r0, #4]
	if(rxbuffer != NULL){
 8009f9a:	b1b1      	cbz	r1, 8009fca <_ZN5usart10get_bufferEPPh+0x42>
		rxbuffer[rxcount+1] = '\0';
 8009f9c:	8b63      	ldrh	r3, [r4, #26]
 8009f9e:	4419      	add	r1, r3
 8009fa0:	4616      	mov	r6, r2
 8009fa2:	704f      	strb	r7, [r1, #1]
		*data = (uint8_t *)malloc(rxcount+1);
 8009fa4:	8b62      	ldrh	r2, [r4, #26]
 8009fa6:	3201      	adds	r2, #1
 8009fa8:	4610      	mov	r0, r2
 8009faa:	9201      	str	r2, [sp, #4]
 8009fac:	f002 f9d0 	bl	800c350 <malloc>
 8009fb0:	6030      	str	r0, [r6, #0]
			LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
	#endif
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
		memcpy(*data, rxbuffer, rxcount+1);
 8009fb2:	6966      	ldr	r6, [r4, #20]
 8009fb4:	9a01      	ldr	r2, [sp, #4]
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	f002 f9da 	bl	800c370 <memcpy>

		free(rxbuffer);
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f002 f9cf 	bl	800c360 <free>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */

	return ret;
}
 8009fc2:	4628      	mov	r0, r5
		rxbuffer = NULL;
 8009fc4:	6167      	str	r7, [r4, #20]
}
 8009fc6:	b003      	add	sp, #12
 8009fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	set_return(&ret, STM_ERR, __LINE__);
 8009fca:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009fce:	f000 ffe3 	bl	800af98 <set_return>
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
 8009fd2:	4b04      	ldr	r3, [pc, #16]	; (8009fe4 <_ZN5usart10get_bufferEPPh+0x5c>)
 8009fd4:	4a04      	ldr	r2, [pc, #16]	; (8009fe8 <_ZN5usart10get_bufferEPPh+0x60>)
 8009fd6:	4905      	ldr	r1, [pc, #20]	; (8009fec <_ZN5usart10get_bufferEPPh+0x64>)
 8009fd8:	4805      	ldr	r0, [pc, #20]	; (8009ff0 <_ZN5usart10get_bufferEPPh+0x68>)
 8009fda:	f000 fea9 	bl	800ad30 <LOG_ERROR>
}
 8009fde:	4628      	mov	r0, r5
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe4:	08011854 	.word	0x08011854
 8009fe8:	080116f0 	.word	0x080116f0
 8009fec:	08011860 	.word	0x08011860
 8009ff0:	08011718 	.word	0x08011718

08009ff4 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 8009ff4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8009ff6:	4c3c      	ldr	r4, [pc, #240]	; (800a0e8 <USART1_IRQHandler+0xf4>)
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009ffe:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 800a000:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a002:	d51a      	bpl.n	800a03a <USART1_IRQHandler+0x46>
 800a004:	068d      	lsls	r5, r1, #26
 800a006:	d518      	bpl.n	800a03a <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a008:	681a      	ldr	r2, [r3, #0]
 800a00a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a00c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a00e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a010:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a012:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a014:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a018:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a01a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a01c:	d93a      	bls.n	800a094 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a01e:	6962      	ldr	r2, [r4, #20]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a024:	7f63      	ldrb	r3, [r4, #29]
 800a026:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a028:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a02a:	d04c      	beq.n	800a0c6 <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a02c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a02e:	3301      	adds	r3, #1
 800a030:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	b95b      	cbnz	r3, 800a04e <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 800a036:	b005      	add	sp, #20
 800a038:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a03a:	0650      	lsls	r0, r2, #25
 800a03c:	d501      	bpl.n	800a042 <USART1_IRQHandler+0x4e>
 800a03e:	064d      	lsls	r5, r1, #25
 800a040:	d41d      	bmi.n	800a07e <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a042:	06d0      	lsls	r0, r2, #27
 800a044:	d408      	bmi.n	800a058 <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a046:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a048:	6923      	ldr	r3, [r4, #16]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0f3      	beq.n	800a036 <USART1_IRQHandler+0x42>
 800a04e:	68e1      	ldr	r1, [r4, #12]
}
 800a050:	b005      	add	sp, #20
 800a052:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a056:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a058:	06ca      	lsls	r2, r1, #27
 800a05a:	d5f4      	bpl.n	800a046 <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a060:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a062:	6859      	ldr	r1, [r3, #4]
 800a064:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a066:	2a02      	cmp	r2, #2
		(void)tmp;
 800a068:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a06a:	d1ec      	bne.n	800a046 <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a072:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	065b      	lsls	r3, r3, #25
 800a078:	d40e      	bmi.n	800a098 <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a07a:	2004      	movs	r0, #4
 800a07c:	e7e4      	b.n	800a048 <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a086:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a08e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a090:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a092:	e7d9      	b.n	800a048 <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a094:	2003      	movs	r0, #3
 800a096:	e7d7      	b.n	800a048 <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a098:	68a0      	ldr	r0, [r4, #8]
 800a09a:	8b25      	ldrh	r5, [r4, #24]
 800a09c:	f7fc fa46 	bl	800652c <_ZN3dma11get_counterEv>
 800a0a0:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a0a2:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a0a4:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a0a6:	f7fc fa47 	bl	8006538 <_ZN3dma10get_configEv>
 800a0aa:	7983      	ldrb	r3, [r0, #6]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d0e4      	beq.n	800a07a <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a0b0:	a802      	add	r0, sp, #8
 800a0b2:	68a1      	ldr	r1, [r4, #8]
 800a0b4:	f7fc f9dc 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	6953      	ldr	r3, [r2, #20]
 800a0bc:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a0c0:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a0c2:	6153      	str	r3, [r2, #20]
 800a0c4:	e7c0      	b.n	800a048 <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a0c6:	6961      	ldr	r1, [r4, #20]
 800a0c8:	7f22      	ldrb	r2, [r4, #28]
 800a0ca:	5cc9      	ldrb	r1, [r1, r3]
 800a0cc:	4291      	cmp	r1, r2
 800a0ce:	d1ad      	bne.n	800a02c <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a0d0:	6822      	ldr	r2, [r4, #0]
 800a0d2:	68d1      	ldr	r1, [r2, #12]
 800a0d4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a0d8:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a0da:	6951      	ldr	r1, [r2, #20]
 800a0dc:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a0e0:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a0e2:	6151      	str	r1, [r2, #20]
 800a0e4:	e7a3      	b.n	800a02e <USART1_IRQHandler+0x3a>
 800a0e6:	bf00      	nop
 800a0e8:	2000b93c 	.word	0x2000b93c

0800a0ec <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 800a0ec:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a0ee:	4c3c      	ldr	r4, [pc, #240]	; (800a1e0 <USART2_IRQHandler+0xf4>)
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a0f6:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 800a0f8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a0fa:	d51a      	bpl.n	800a132 <USART2_IRQHandler+0x46>
 800a0fc:	068d      	lsls	r5, r1, #26
 800a0fe:	d518      	bpl.n	800a132 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a104:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a106:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a108:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a10a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a10c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a110:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a112:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a114:	d93a      	bls.n	800a18c <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a116:	6962      	ldr	r2, [r4, #20]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a11c:	7f63      	ldrb	r3, [r4, #29]
 800a11e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a120:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a122:	d04c      	beq.n	800a1be <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a124:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a126:	3301      	adds	r3, #1
 800a128:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	b95b      	cbnz	r3, 800a146 <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 800a12e:	b005      	add	sp, #20
 800a130:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a132:	0650      	lsls	r0, r2, #25
 800a134:	d501      	bpl.n	800a13a <USART2_IRQHandler+0x4e>
 800a136:	064d      	lsls	r5, r1, #25
 800a138:	d41d      	bmi.n	800a176 <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a13a:	06d0      	lsls	r0, r2, #27
 800a13c:	d408      	bmi.n	800a150 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a13e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a140:	6923      	ldr	r3, [r4, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0f3      	beq.n	800a12e <USART2_IRQHandler+0x42>
 800a146:	68e1      	ldr	r1, [r4, #12]
}
 800a148:	b005      	add	sp, #20
 800a14a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a14e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a150:	06ca      	lsls	r2, r1, #27
 800a152:	d5f4      	bpl.n	800a13e <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a158:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a15a:	6859      	ldr	r1, [r3, #4]
 800a15c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a15e:	2a02      	cmp	r2, #2
		(void)tmp;
 800a160:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a162:	d1ec      	bne.n	800a13e <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a16a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a16c:	695b      	ldr	r3, [r3, #20]
 800a16e:	065b      	lsls	r3, r3, #25
 800a170:	d40e      	bmi.n	800a190 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a172:	2004      	movs	r0, #4
 800a174:	e7e4      	b.n	800a140 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a17e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a186:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a188:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a18a:	e7d9      	b.n	800a140 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a18c:	2003      	movs	r0, #3
 800a18e:	e7d7      	b.n	800a140 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a190:	68a0      	ldr	r0, [r4, #8]
 800a192:	8b25      	ldrh	r5, [r4, #24]
 800a194:	f7fc f9ca 	bl	800652c <_ZN3dma11get_counterEv>
 800a198:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a19a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a19c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a19e:	f7fc f9cb 	bl	8006538 <_ZN3dma10get_configEv>
 800a1a2:	7983      	ldrb	r3, [r0, #6]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d0e4      	beq.n	800a172 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a1a8:	a802      	add	r0, sp, #8
 800a1aa:	68a1      	ldr	r1, [r4, #8]
 800a1ac:	f7fc f960 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	6953      	ldr	r3, [r2, #20]
 800a1b4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a1b8:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a1ba:	6153      	str	r3, [r2, #20]
 800a1bc:	e7c0      	b.n	800a140 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a1be:	6961      	ldr	r1, [r4, #20]
 800a1c0:	7f22      	ldrb	r2, [r4, #28]
 800a1c2:	5cc9      	ldrb	r1, [r1, r3]
 800a1c4:	4291      	cmp	r1, r2
 800a1c6:	d1ad      	bne.n	800a124 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a1c8:	6822      	ldr	r2, [r4, #0]
 800a1ca:	68d1      	ldr	r1, [r2, #12]
 800a1cc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a1d0:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a1d2:	6951      	ldr	r1, [r2, #20]
 800a1d4:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a1d8:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a1da:	6151      	str	r1, [r2, #20]
 800a1dc:	e7a3      	b.n	800a126 <USART2_IRQHandler+0x3a>
 800a1de:	bf00      	nop
 800a1e0:	2000b964 	.word	0x2000b964

0800a1e4 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 800a1e4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a1e6:	4c3c      	ldr	r4, [pc, #240]	; (800a2d8 <USART3_IRQHandler+0xf4>)
 800a1e8:	6823      	ldr	r3, [r4, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a1ee:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 800a1f0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a1f2:	d51a      	bpl.n	800a22a <USART3_IRQHandler+0x46>
 800a1f4:	068d      	lsls	r5, r1, #26
 800a1f6:	d518      	bpl.n	800a22a <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a1fc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a1fe:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a200:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a202:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a204:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a208:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a20a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a20c:	d93a      	bls.n	800a284 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a20e:	6962      	ldr	r2, [r4, #20]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a214:	7f63      	ldrb	r3, [r4, #29]
 800a216:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a218:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a21a:	d04c      	beq.n	800a2b6 <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a21c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a21e:	3301      	adds	r3, #1
 800a220:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a222:	6923      	ldr	r3, [r4, #16]
 800a224:	b95b      	cbnz	r3, 800a23e <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 800a226:	b005      	add	sp, #20
 800a228:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a22a:	0650      	lsls	r0, r2, #25
 800a22c:	d501      	bpl.n	800a232 <USART3_IRQHandler+0x4e>
 800a22e:	064d      	lsls	r5, r1, #25
 800a230:	d41d      	bmi.n	800a26e <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a232:	06d0      	lsls	r0, r2, #27
 800a234:	d408      	bmi.n	800a248 <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a236:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a238:	6923      	ldr	r3, [r4, #16]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0f3      	beq.n	800a226 <USART3_IRQHandler+0x42>
 800a23e:	68e1      	ldr	r1, [r4, #12]
}
 800a240:	b005      	add	sp, #20
 800a242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a246:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a248:	06ca      	lsls	r2, r1, #27
 800a24a:	d5f4      	bpl.n	800a236 <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a250:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a252:	6859      	ldr	r1, [r3, #4]
 800a254:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a256:	2a02      	cmp	r2, #2
		(void)tmp;
 800a258:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a25a:	d1ec      	bne.n	800a236 <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a262:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	065b      	lsls	r3, r3, #25
 800a268:	d40e      	bmi.n	800a288 <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a26a:	2004      	movs	r0, #4
 800a26c:	e7e4      	b.n	800a238 <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a276:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a27e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a280:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a282:	e7d9      	b.n	800a238 <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a284:	2003      	movs	r0, #3
 800a286:	e7d7      	b.n	800a238 <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a288:	68a0      	ldr	r0, [r4, #8]
 800a28a:	8b25      	ldrh	r5, [r4, #24]
 800a28c:	f7fc f94e 	bl	800652c <_ZN3dma11get_counterEv>
 800a290:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a292:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a294:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a296:	f7fc f94f 	bl	8006538 <_ZN3dma10get_configEv>
 800a29a:	7983      	ldrb	r3, [r0, #6]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d0e4      	beq.n	800a26a <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a2a0:	a802      	add	r0, sp, #8
 800a2a2:	68a1      	ldr	r1, [r4, #8]
 800a2a4:	f7fc f8e4 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a2a8:	6822      	ldr	r2, [r4, #0]
 800a2aa:	6953      	ldr	r3, [r2, #20]
 800a2ac:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a2b0:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a2b2:	6153      	str	r3, [r2, #20]
 800a2b4:	e7c0      	b.n	800a238 <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a2b6:	6961      	ldr	r1, [r4, #20]
 800a2b8:	7f22      	ldrb	r2, [r4, #28]
 800a2ba:	5cc9      	ldrb	r1, [r1, r3]
 800a2bc:	4291      	cmp	r1, r2
 800a2be:	d1ad      	bne.n	800a21c <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a2c0:	6822      	ldr	r2, [r4, #0]
 800a2c2:	68d1      	ldr	r1, [r2, #12]
 800a2c4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a2c8:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a2ca:	6951      	ldr	r1, [r2, #20]
 800a2cc:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a2d0:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a2d2:	6151      	str	r1, [r2, #20]
 800a2d4:	e7a3      	b.n	800a21e <USART3_IRQHandler+0x3a>
 800a2d6:	bf00      	nop
 800a2d8:	2000b98c 	.word	0x2000b98c

0800a2dc <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 800a2dc:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a2de:	4c3c      	ldr	r4, [pc, #240]	; (800a3d0 <UART4_IRQHandler+0xf4>)
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a2e6:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 800a2e8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a2ea:	d51a      	bpl.n	800a322 <UART4_IRQHandler+0x46>
 800a2ec:	068d      	lsls	r5, r1, #26
 800a2ee:	d518      	bpl.n	800a322 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a2f4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a2f6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a2f8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a2fa:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a2fc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a300:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a302:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a304:	d93a      	bls.n	800a37c <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a306:	6962      	ldr	r2, [r4, #20]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a30c:	7f63      	ldrb	r3, [r4, #29]
 800a30e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a310:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a312:	d04c      	beq.n	800a3ae <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a314:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a316:	3301      	adds	r3, #1
 800a318:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a31a:	6923      	ldr	r3, [r4, #16]
 800a31c:	b95b      	cbnz	r3, 800a336 <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 800a31e:	b005      	add	sp, #20
 800a320:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a322:	0650      	lsls	r0, r2, #25
 800a324:	d501      	bpl.n	800a32a <UART4_IRQHandler+0x4e>
 800a326:	064d      	lsls	r5, r1, #25
 800a328:	d41d      	bmi.n	800a366 <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a32a:	06d0      	lsls	r0, r2, #27
 800a32c:	d408      	bmi.n	800a340 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a32e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0f3      	beq.n	800a31e <UART4_IRQHandler+0x42>
 800a336:	68e1      	ldr	r1, [r4, #12]
}
 800a338:	b005      	add	sp, #20
 800a33a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a33e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a340:	06ca      	lsls	r2, r1, #27
 800a342:	d5f4      	bpl.n	800a32e <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a348:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a34a:	6859      	ldr	r1, [r3, #4]
 800a34c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a34e:	2a02      	cmp	r2, #2
		(void)tmp;
 800a350:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a352:	d1ec      	bne.n	800a32e <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a35a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	065b      	lsls	r3, r3, #25
 800a360:	d40e      	bmi.n	800a380 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a362:	2004      	movs	r0, #4
 800a364:	e7e4      	b.n	800a330 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a36a:	685a      	ldr	r2, [r3, #4]
 800a36c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a36e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a376:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a378:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a37a:	e7d9      	b.n	800a330 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a37c:	2003      	movs	r0, #3
 800a37e:	e7d7      	b.n	800a330 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a380:	68a0      	ldr	r0, [r4, #8]
 800a382:	8b25      	ldrh	r5, [r4, #24]
 800a384:	f7fc f8d2 	bl	800652c <_ZN3dma11get_counterEv>
 800a388:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a38a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a38c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a38e:	f7fc f8d3 	bl	8006538 <_ZN3dma10get_configEv>
 800a392:	7983      	ldrb	r3, [r0, #6]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d0e4      	beq.n	800a362 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a398:	a802      	add	r0, sp, #8
 800a39a:	68a1      	ldr	r1, [r4, #8]
 800a39c:	f7fc f868 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a3a0:	6822      	ldr	r2, [r4, #0]
 800a3a2:	6953      	ldr	r3, [r2, #20]
 800a3a4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a3a8:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a3aa:	6153      	str	r3, [r2, #20]
 800a3ac:	e7c0      	b.n	800a330 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a3ae:	6961      	ldr	r1, [r4, #20]
 800a3b0:	7f22      	ldrb	r2, [r4, #28]
 800a3b2:	5cc9      	ldrb	r1, [r1, r3]
 800a3b4:	4291      	cmp	r1, r2
 800a3b6:	d1ad      	bne.n	800a314 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a3b8:	6822      	ldr	r2, [r4, #0]
 800a3ba:	68d1      	ldr	r1, [r2, #12]
 800a3bc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a3c0:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a3c2:	6951      	ldr	r1, [r2, #20]
 800a3c4:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a3c8:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a3ca:	6151      	str	r1, [r2, #20]
 800a3cc:	e7a3      	b.n	800a316 <UART4_IRQHandler+0x3a>
 800a3ce:	bf00      	nop
 800a3d0:	2000b89c 	.word	0x2000b89c

0800a3d4 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 800a3d4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a3d6:	4c3c      	ldr	r4, [pc, #240]	; (800a4c8 <UART5_IRQHandler+0xf4>)
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a3de:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 800a3e0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a3e2:	d51a      	bpl.n	800a41a <UART5_IRQHandler+0x46>
 800a3e4:	068d      	lsls	r5, r1, #26
 800a3e6:	d518      	bpl.n	800a41a <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a3ec:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a3ee:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a3f0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a3f2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a3f4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a3f8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a3fa:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a3fc:	d93a      	bls.n	800a474 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a3fe:	6962      	ldr	r2, [r4, #20]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a404:	7f63      	ldrb	r3, [r4, #29]
 800a406:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a408:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a40a:	d04c      	beq.n	800a4a6 <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a40c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a40e:	3301      	adds	r3, #1
 800a410:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	b95b      	cbnz	r3, 800a42e <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 800a416:	b005      	add	sp, #20
 800a418:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a41a:	0650      	lsls	r0, r2, #25
 800a41c:	d501      	bpl.n	800a422 <UART5_IRQHandler+0x4e>
 800a41e:	064d      	lsls	r5, r1, #25
 800a420:	d41d      	bmi.n	800a45e <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a422:	06d0      	lsls	r0, r2, #27
 800a424:	d408      	bmi.n	800a438 <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a426:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d0f3      	beq.n	800a416 <UART5_IRQHandler+0x42>
 800a42e:	68e1      	ldr	r1, [r4, #12]
}
 800a430:	b005      	add	sp, #20
 800a432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a436:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a438:	06ca      	lsls	r2, r1, #27
 800a43a:	d5f4      	bpl.n	800a426 <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a440:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a442:	6859      	ldr	r1, [r3, #4]
 800a444:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a446:	2a02      	cmp	r2, #2
		(void)tmp;
 800a448:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a44a:	d1ec      	bne.n	800a426 <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a452:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a454:	695b      	ldr	r3, [r3, #20]
 800a456:	065b      	lsls	r3, r3, #25
 800a458:	d40e      	bmi.n	800a478 <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a45a:	2004      	movs	r0, #4
 800a45c:	e7e4      	b.n	800a428 <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a45e:	681a      	ldr	r2, [r3, #0]
 800a460:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a466:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a46e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a470:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a472:	e7d9      	b.n	800a428 <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a474:	2003      	movs	r0, #3
 800a476:	e7d7      	b.n	800a428 <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a478:	68a0      	ldr	r0, [r4, #8]
 800a47a:	8b25      	ldrh	r5, [r4, #24]
 800a47c:	f7fc f856 	bl	800652c <_ZN3dma11get_counterEv>
 800a480:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a482:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a484:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a486:	f7fc f857 	bl	8006538 <_ZN3dma10get_configEv>
 800a48a:	7983      	ldrb	r3, [r0, #6]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d0e4      	beq.n	800a45a <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a490:	a802      	add	r0, sp, #8
 800a492:	68a1      	ldr	r1, [r4, #8]
 800a494:	f7fb ffec 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a498:	6822      	ldr	r2, [r4, #0]
 800a49a:	6953      	ldr	r3, [r2, #20]
 800a49c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a4a0:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a4a2:	6153      	str	r3, [r2, #20]
 800a4a4:	e7c0      	b.n	800a428 <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a4a6:	6961      	ldr	r1, [r4, #20]
 800a4a8:	7f22      	ldrb	r2, [r4, #28]
 800a4aa:	5cc9      	ldrb	r1, [r1, r3]
 800a4ac:	4291      	cmp	r1, r2
 800a4ae:	d1ad      	bne.n	800a40c <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a4b0:	6822      	ldr	r2, [r4, #0]
 800a4b2:	68d1      	ldr	r1, [r2, #12]
 800a4b4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a4b8:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a4ba:	6951      	ldr	r1, [r2, #20]
 800a4bc:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a4c0:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a4c2:	6151      	str	r1, [r2, #20]
 800a4c4:	e7a3      	b.n	800a40e <UART5_IRQHandler+0x3a>
 800a4c6:	bf00      	nop
 800a4c8:	2000b8c4 	.word	0x2000b8c4

0800a4cc <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 800a4cc:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a4ce:	4c3c      	ldr	r4, [pc, #240]	; (800a5c0 <USART6_IRQHandler+0xf4>)
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a4d6:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 800a4d8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a4da:	d51a      	bpl.n	800a512 <USART6_IRQHandler+0x46>
 800a4dc:	068d      	lsls	r5, r1, #26
 800a4de:	d518      	bpl.n	800a512 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a4e4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a4e6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a4e8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a4ea:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a4ec:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a4f0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a4f2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a4f4:	d93a      	bls.n	800a56c <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a4f6:	6962      	ldr	r2, [r4, #20]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a4fc:	7f63      	ldrb	r3, [r4, #29]
 800a4fe:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a500:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a502:	d04c      	beq.n	800a59e <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a504:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a506:	3301      	adds	r3, #1
 800a508:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a50a:	6923      	ldr	r3, [r4, #16]
 800a50c:	b95b      	cbnz	r3, 800a526 <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 800a50e:	b005      	add	sp, #20
 800a510:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a512:	0650      	lsls	r0, r2, #25
 800a514:	d501      	bpl.n	800a51a <USART6_IRQHandler+0x4e>
 800a516:	064d      	lsls	r5, r1, #25
 800a518:	d41d      	bmi.n	800a556 <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a51a:	06d0      	lsls	r0, r2, #27
 800a51c:	d408      	bmi.n	800a530 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a51e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a520:	6923      	ldr	r3, [r4, #16]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d0f3      	beq.n	800a50e <USART6_IRQHandler+0x42>
 800a526:	68e1      	ldr	r1, [r4, #12]
}
 800a528:	b005      	add	sp, #20
 800a52a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a52e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a530:	06ca      	lsls	r2, r1, #27
 800a532:	d5f4      	bpl.n	800a51e <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a538:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a53a:	6859      	ldr	r1, [r3, #4]
 800a53c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a53e:	2a02      	cmp	r2, #2
		(void)tmp;
 800a540:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a542:	d1ec      	bne.n	800a51e <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a54a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	065b      	lsls	r3, r3, #25
 800a550:	d40e      	bmi.n	800a570 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a552:	2004      	movs	r0, #4
 800a554:	e7e4      	b.n	800a520 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a556:	681a      	ldr	r2, [r3, #0]
 800a558:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a55e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a566:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a568:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a56a:	e7d9      	b.n	800a520 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a56c:	2003      	movs	r0, #3
 800a56e:	e7d7      	b.n	800a520 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a570:	68a0      	ldr	r0, [r4, #8]
 800a572:	8b25      	ldrh	r5, [r4, #24]
 800a574:	f7fb ffda 	bl	800652c <_ZN3dma11get_counterEv>
 800a578:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a57a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a57c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a57e:	f7fb ffdb 	bl	8006538 <_ZN3dma10get_configEv>
 800a582:	7983      	ldrb	r3, [r0, #6]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d0e4      	beq.n	800a552 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a588:	a802      	add	r0, sp, #8
 800a58a:	68a1      	ldr	r1, [r4, #8]
 800a58c:	f7fb ff70 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	6953      	ldr	r3, [r2, #20]
 800a594:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a598:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a59a:	6153      	str	r3, [r2, #20]
 800a59c:	e7c0      	b.n	800a520 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a59e:	6961      	ldr	r1, [r4, #20]
 800a5a0:	7f22      	ldrb	r2, [r4, #28]
 800a5a2:	5cc9      	ldrb	r1, [r1, r3]
 800a5a4:	4291      	cmp	r1, r2
 800a5a6:	d1ad      	bne.n	800a504 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a5a8:	6822      	ldr	r2, [r4, #0]
 800a5aa:	68d1      	ldr	r1, [r2, #12]
 800a5ac:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a5b0:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a5b2:	6951      	ldr	r1, [r2, #20]
 800a5b4:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a5b8:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a5ba:	6151      	str	r1, [r2, #20]
 800a5bc:	e7a3      	b.n	800a506 <USART6_IRQHandler+0x3a>
 800a5be:	bf00      	nop
 800a5c0:	2000b9b4 	.word	0x2000b9b4

0800a5c4 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 800a5c4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a5c6:	4c3c      	ldr	r4, [pc, #240]	; (800a6b8 <UART7_IRQHandler+0xf4>)
 800a5c8:	6823      	ldr	r3, [r4, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a5ce:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 800a5d0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a5d2:	d51a      	bpl.n	800a60a <UART7_IRQHandler+0x46>
 800a5d4:	068d      	lsls	r5, r1, #26
 800a5d6:	d518      	bpl.n	800a60a <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a5dc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a5de:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a5e0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a5e2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a5e4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a5e8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a5ea:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a5ec:	d93a      	bls.n	800a664 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a5ee:	6962      	ldr	r2, [r4, #20]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a5f4:	7f63      	ldrb	r3, [r4, #29]
 800a5f6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a5f8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a5fa:	d04c      	beq.n	800a696 <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a5fc:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a5fe:	3301      	adds	r3, #1
 800a600:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a602:	6923      	ldr	r3, [r4, #16]
 800a604:	b95b      	cbnz	r3, 800a61e <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 800a606:	b005      	add	sp, #20
 800a608:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a60a:	0650      	lsls	r0, r2, #25
 800a60c:	d501      	bpl.n	800a612 <UART7_IRQHandler+0x4e>
 800a60e:	064d      	lsls	r5, r1, #25
 800a610:	d41d      	bmi.n	800a64e <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a612:	06d0      	lsls	r0, r2, #27
 800a614:	d408      	bmi.n	800a628 <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a616:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a618:	6923      	ldr	r3, [r4, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d0f3      	beq.n	800a606 <UART7_IRQHandler+0x42>
 800a61e:	68e1      	ldr	r1, [r4, #12]
}
 800a620:	b005      	add	sp, #20
 800a622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a626:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a628:	06ca      	lsls	r2, r1, #27
 800a62a:	d5f4      	bpl.n	800a616 <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a630:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a632:	6859      	ldr	r1, [r3, #4]
 800a634:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a636:	2a02      	cmp	r2, #2
		(void)tmp;
 800a638:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a63a:	d1ec      	bne.n	800a616 <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a642:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a644:	695b      	ldr	r3, [r3, #20]
 800a646:	065b      	lsls	r3, r3, #25
 800a648:	d40e      	bmi.n	800a668 <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a64a:	2004      	movs	r0, #4
 800a64c:	e7e4      	b.n	800a618 <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a656:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a65e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a660:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a662:	e7d9      	b.n	800a618 <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a664:	2003      	movs	r0, #3
 800a666:	e7d7      	b.n	800a618 <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a668:	68a0      	ldr	r0, [r4, #8]
 800a66a:	8b25      	ldrh	r5, [r4, #24]
 800a66c:	f7fb ff5e 	bl	800652c <_ZN3dma11get_counterEv>
 800a670:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a672:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a674:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a676:	f7fb ff5f 	bl	8006538 <_ZN3dma10get_configEv>
 800a67a:	7983      	ldrb	r3, [r0, #6]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d0e4      	beq.n	800a64a <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a680:	a802      	add	r0, sp, #8
 800a682:	68a1      	ldr	r1, [r4, #8]
 800a684:	f7fb fef4 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a688:	6822      	ldr	r2, [r4, #0]
 800a68a:	6953      	ldr	r3, [r2, #20]
 800a68c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a690:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a692:	6153      	str	r3, [r2, #20]
 800a694:	e7c0      	b.n	800a618 <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a696:	6961      	ldr	r1, [r4, #20]
 800a698:	7f22      	ldrb	r2, [r4, #28]
 800a69a:	5cc9      	ldrb	r1, [r1, r3]
 800a69c:	4291      	cmp	r1, r2
 800a69e:	d1ad      	bne.n	800a5fc <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	68d1      	ldr	r1, [r2, #12]
 800a6a4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a6a8:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a6aa:	6951      	ldr	r1, [r2, #20]
 800a6ac:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a6b0:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a6b2:	6151      	str	r1, [r2, #20]
 800a6b4:	e7a3      	b.n	800a5fe <UART7_IRQHandler+0x3a>
 800a6b6:	bf00      	nop
 800a6b8:	2000b8ec 	.word	0x2000b8ec

0800a6bc <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 800a6bc:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a6be:	4c3c      	ldr	r4, [pc, #240]	; (800a7b0 <UART8_IRQHandler+0xf4>)
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a6c6:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 800a6c8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a6ca:	d51a      	bpl.n	800a702 <UART8_IRQHandler+0x46>
 800a6cc:	068d      	lsls	r5, r1, #26
 800a6ce:	d518      	bpl.n	800a702 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a6d4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a6d6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a6d8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a6da:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a6dc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a6e0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a6e2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a6e4:	d93a      	bls.n	800a75c <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a6e6:	6962      	ldr	r2, [r4, #20]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a6ec:	7f63      	ldrb	r3, [r4, #29]
 800a6ee:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a6f0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a6f2:	d04c      	beq.n	800a78e <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a6f4:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	b95b      	cbnz	r3, 800a716 <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 800a6fe:	b005      	add	sp, #20
 800a700:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a702:	0650      	lsls	r0, r2, #25
 800a704:	d501      	bpl.n	800a70a <UART8_IRQHandler+0x4e>
 800a706:	064d      	lsls	r5, r1, #25
 800a708:	d41d      	bmi.n	800a746 <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a70a:	06d0      	lsls	r0, r2, #27
 800a70c:	d408      	bmi.n	800a720 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a70e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a710:	6923      	ldr	r3, [r4, #16]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d0f3      	beq.n	800a6fe <UART8_IRQHandler+0x42>
 800a716:	68e1      	ldr	r1, [r4, #12]
}
 800a718:	b005      	add	sp, #20
 800a71a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a71e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a720:	06ca      	lsls	r2, r1, #27
 800a722:	d5f4      	bpl.n	800a70e <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a728:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a72a:	6859      	ldr	r1, [r3, #4]
 800a72c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a72e:	2a02      	cmp	r2, #2
		(void)tmp;
 800a730:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a732:	d1ec      	bne.n	800a70e <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a73a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a73c:	695b      	ldr	r3, [r3, #20]
 800a73e:	065b      	lsls	r3, r3, #25
 800a740:	d40e      	bmi.n	800a760 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a742:	2004      	movs	r0, #4
 800a744:	e7e4      	b.n	800a710 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a74a:	685a      	ldr	r2, [r3, #4]
 800a74c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a74e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a756:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a758:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a75a:	e7d9      	b.n	800a710 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a75c:	2003      	movs	r0, #3
 800a75e:	e7d7      	b.n	800a710 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a760:	68a0      	ldr	r0, [r4, #8]
 800a762:	8b25      	ldrh	r5, [r4, #24]
 800a764:	f7fb fee2 	bl	800652c <_ZN3dma11get_counterEv>
 800a768:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a76a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a76c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a76e:	f7fb fee3 	bl	8006538 <_ZN3dma10get_configEv>
 800a772:	7983      	ldrb	r3, [r0, #6]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d0e4      	beq.n	800a742 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a778:	a802      	add	r0, sp, #8
 800a77a:	68a1      	ldr	r1, [r4, #8]
 800a77c:	f7fb fe78 	bl	8006470 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a780:	6822      	ldr	r2, [r4, #0]
 800a782:	6953      	ldr	r3, [r2, #20]
 800a784:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a788:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a78a:	6153      	str	r3, [r2, #20]
 800a78c:	e7c0      	b.n	800a710 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a78e:	6961      	ldr	r1, [r4, #20]
 800a790:	7f22      	ldrb	r2, [r4, #28]
 800a792:	5cc9      	ldrb	r1, [r1, r3]
 800a794:	4291      	cmp	r1, r2
 800a796:	d1ad      	bne.n	800a6f4 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a798:	6822      	ldr	r2, [r4, #0]
 800a79a:	68d1      	ldr	r1, [r2, #12]
 800a79c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a7a0:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a7a2:	6951      	ldr	r1, [r2, #20]
 800a7a4:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a7a8:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a7aa:	6151      	str	r1, [r2, #20]
 800a7ac:	e7a3      	b.n	800a6f6 <UART8_IRQHandler+0x3a>
 800a7ae:	bf00      	nop
 800a7b0:	2000b914 	.word	0x2000b914

0800a7b4 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 800a7b4:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a89c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 800a7b8:	482d      	ldr	r0, [pc, #180]	; (800a870 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 800a7ba:	492e      	ldr	r1, [pc, #184]	; (800a874 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 800a7bc:	4a2e      	ldr	r2, [pc, #184]	; (800a878 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 800a7c2:	4f2e      	ldr	r7, [pc, #184]	; (800a87c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 800a7c4:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 800a8a0 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 800a7c8:	4e2d      	ldr	r6, [pc, #180]	; (800a880 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 800a7ca:	f8cc 3014 	str.w	r3, [ip, #20]
 800a7ce:	e9cc 3301 	strd	r3, r3, [ip, #4]
 800a7d2:	e9cc 3303 	strd	r3, r3, [ip, #12]
 800a7d6:	f8ac 301c 	strh.w	r3, [ip, #28]
 800a7da:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 800a7de:	f8cc e000 	str.w	lr, [ip]
 800a7e2:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800a8a4 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 800a7e6:	4c27      	ldr	r4, [pc, #156]	; (800a884 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 800a7e8:	4d27      	ldr	r5, [pc, #156]	; (800a888 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 800a7ea:	617b      	str	r3, [r7, #20]
 800a7ec:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800a7f0:	e9c7 3303 	strd	r3, r3, [r7, #12]
 800a7f4:	83bb      	strh	r3, [r7, #28]
 800a7f6:	623b      	str	r3, [r7, #32]
	_usart = usart;
 800a7f8:	f8c7 c000 	str.w	ip, [r7]
 800a7fc:	4f23      	ldr	r7, [pc, #140]	; (800a88c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 800a7fe:	6173      	str	r3, [r6, #20]
 800a800:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a804:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800a808:	83b3      	strh	r3, [r6, #28]
 800a80a:	6233      	str	r3, [r6, #32]
	_usart = usart;
 800a80c:	6037      	str	r7, [r6, #0]
 800a80e:	4e20      	ldr	r6, [pc, #128]	; (800a890 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 800a810:	616b      	str	r3, [r5, #20]
 800a812:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800a816:	e9c5 3303 	strd	r3, r3, [r5, #12]
 800a81a:	83ab      	strh	r3, [r5, #28]
 800a81c:	622b      	str	r3, [r5, #32]
	_usart = usart;
 800a81e:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 800a820:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a824:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a828:	6163      	str	r3, [r4, #20]
 800a82a:	83a3      	strh	r3, [r4, #28]
 800a82c:	6223      	str	r3, [r4, #32]
 800a82e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a832:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a836:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800a83a:	e9c1 3303 	strd	r3, r3, [r1, #12]
 800a83e:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800a842:	e9c2 3303 	strd	r3, r3, [r2, #12]
 800a846:	6143      	str	r3, [r0, #20]
 800a848:	8383      	strh	r3, [r0, #28]
 800a84a:	6203      	str	r3, [r0, #32]
 800a84c:	614b      	str	r3, [r1, #20]
 800a84e:	838b      	strh	r3, [r1, #28]
 800a850:	620b      	str	r3, [r1, #32]
 800a852:	6153      	str	r3, [r2, #20]
 800a854:	8393      	strh	r3, [r2, #28]
 800a856:	6213      	str	r3, [r2, #32]
	_usart = usart;
 800a858:	4b0e      	ldr	r3, [pc, #56]	; (800a894 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 800a860:	4c0d      	ldr	r4, [pc, #52]	; (800a898 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 800a862:	6003      	str	r3, [r0, #0]
 800a864:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a868:	600c      	str	r4, [r1, #0]
 800a86a:	6013      	str	r3, [r2, #0]
}
 800a86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86e:	bf00      	nop
 800a870:	2000b8c4 	.word	0x2000b8c4
 800a874:	2000b9b4 	.word	0x2000b9b4
 800a878:	2000b8ec 	.word	0x2000b8ec
 800a87c:	2000b964 	.word	0x2000b964
 800a880:	2000b98c 	.word	0x2000b98c
 800a884:	2000b914 	.word	0x2000b914
 800a888:	2000b89c 	.word	0x2000b89c
 800a88c:	40004800 	.word	0x40004800
 800a890:	40004c00 	.word	0x40004c00
 800a894:	40007c00 	.word	0x40007c00
 800a898:	40011400 	.word	0x40011400
 800a89c:	2000b93c 	.word	0x2000b93c
 800a8a0:	40011000 	.word	0x40011000
 800a8a4:	40004400 	.word	0x40004400

0800a8a8 <__NVIC_SystemReset>:
 800a8a8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a8ac:	4905      	ldr	r1, [pc, #20]	; (800a8c4 <__NVIC_SystemReset+0x1c>)
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <__NVIC_SystemReset+0x20>)
 800a8b0:	68ca      	ldr	r2, [r1, #12]
 800a8b2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a8b6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a8b8:	60cb      	str	r3, [r1, #12]
 800a8ba:	f3bf 8f4f 	dsb	sy
    __NOP();
 800a8be:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800a8c0:	e7fd      	b.n	800a8be <__NVIC_SystemReset+0x16>
 800a8c2:	bf00      	nop
 800a8c4:	e000ed00 	.word	0xe000ed00
 800a8c8:	05fa0004 	.word	0x05fa0004

0800a8cc <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 800a8cc:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 800a8ce:	4807      	ldr	r0, [pc, #28]	; (800a8ec <app_main_task+0x20>)
 800a8d0:	4907      	ldr	r1, [pc, #28]	; (800a8f0 <app_main_task+0x24>)
 800a8d2:	f000 f9b1 	bl	800ac38 <LOG_INFO>
	extern void app_main(void);
	app_main();
 800a8d6:	f001 fbc7 	bl	800c068 <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 800a8da:	4804      	ldr	r0, [pc, #16]	; (800a8ec <app_main_task+0x20>)
 800a8dc:	4905      	ldr	r1, [pc, #20]	; (800a8f4 <app_main_task+0x28>)
 800a8de:	f000 f9ab 	bl	800ac38 <LOG_INFO>
	vTaskDelete(NULL);
}
 800a8e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 800a8e6:	2000      	movs	r0, #0
 800a8e8:	f7f8 baac 	b.w	8002e44 <vTaskDelete>
 800a8ec:	0801189c 	.word	0x0801189c
 800a8f0:	08011888 	.word	0x08011888
 800a8f4:	080118a4 	.word	0x080118a4

0800a8f8 <uart_log>:

	uart_log((char *)"\r\n\r\n");
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 800a8f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8fa:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a8fc:	2100      	movs	r1, #0
static void uart_log(char *log){
 800a8fe:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a900:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a902:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800a906:	4d19      	ldr	r5, [pc, #100]	; (800a96c <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 800a908:	b93c      	cbnz	r4, 800a91a <uart_log+0x22>
 800a90a:	6828      	ldr	r0, [r5, #0]
 800a90c:	210a      	movs	r1, #10
 800a90e:	f7f7 fce9 	bl	80022e4 <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 800a912:	2801      	cmp	r0, #1
 800a914:	d01f      	beq.n	800a956 <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 800a916:	b003      	add	sp, #12
 800a918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800a91a:	af01      	add	r7, sp, #4
 800a91c:	6828      	ldr	r0, [r5, #0]
 800a91e:	463a      	mov	r2, r7
 800a920:	f7f7 fe6a 	bl	80025f8 <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 800a924:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800a926:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 800a928:	d1f5      	bne.n	800a916 <uart_log+0x1e>
		while(*log) {
 800a92a:	7833      	ldrb	r3, [r6, #0]
 800a92c:	b1c3      	cbz	r3, 800a960 <uart_log+0x68>
			log_uart -> DR = *log++;
 800a92e:	4a10      	ldr	r2, [pc, #64]	; (800a970 <uart_log+0x78>)
 800a930:	4631      	mov	r1, r6
 800a932:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 800a934:	6813      	ldr	r3, [r2, #0]
 800a936:	065b      	lsls	r3, r3, #25
 800a938:	d5fc      	bpl.n	800a934 <uart_log+0x3c>
		while(*log) {
 800a93a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1f7      	bne.n	800a932 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 800a942:	2c01      	cmp	r4, #1
 800a944:	d00b      	beq.n	800a95e <uart_log+0x66>
 800a946:	2300      	movs	r3, #0
 800a948:	6828      	ldr	r0, [r5, #0]
 800a94a:	461a      	mov	r2, r3
 800a94c:	4619      	mov	r1, r3
 800a94e:	f7f7 f8d3 	bl	8001af8 <xQueueGenericSend>
}
 800a952:	b003      	add	sp, #12
 800a954:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 800a956:	7833      	ldrb	r3, [r6, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e8      	bne.n	800a92e <uart_log+0x36>
 800a95c:	e7f3      	b.n	800a946 <uart_log+0x4e>
 800a95e:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 800a960:	6828      	ldr	r0, [r5, #0]
 800a962:	4639      	mov	r1, r7
 800a964:	f7f7 fae4 	bl	8001f30 <xQueueGiveFromISR>
}
 800a968:	b003      	add	sp, #12
 800a96a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a96c:	2000b9dc 	.word	0x2000b9dc
 800a970:	40011400 	.word	0x40011400
 800a974:	00000000 	.word	0x00000000

0800a978 <main_application>:
int main_application(void){
 800a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97a:	b085      	sub	sp, #20
	system_init();
 800a97c:	f000 fb36 	bl	800afec <system_init>
	rcc_init(&rcc);
 800a980:	4979      	ldr	r1, [pc, #484]	; (800ab68 <main_application+0x1f0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800a982:	4e7a      	ldr	r6, [pc, #488]	; (800ab6c <main_application+0x1f4>)
	rcc_init(&rcc);
 800a984:	a802      	add	r0, sp, #8
 800a986:	f7fc fd2b 	bl	80073e0 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 800a98a:	4879      	ldr	r0, [pc, #484]	; (800ab70 <main_application+0x1f8>)
 800a98c:	f7fc fb6c 	bl	8007068 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 800a990:	4878      	ldr	r0, [pc, #480]	; (800ab74 <main_application+0x1fc>)
 800a992:	f7fc faa1 	bl	8006ed8 <fmc_sdram_init>
	sdram_init();
 800a996:	f7fc f87f 	bl	8006a98 <sdram_init>
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 800a99a:	2104      	movs	r1, #4
 800a99c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a9a0:	a802      	add	r0, sp, #8
 800a9a2:	f7fc fcef 	bl	8007384 <iwdg_init>
	iwdg_disable_in_debugmode();
 800a9a6:	f7fc fd0b 	bl	80073c0 <iwdg_disable_in_debugmode>
	rng_init();
 800a9aa:	f7fc ff17 	bl	80077dc <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800a9ae:	2001      	movs	r0, #1
 800a9b0:	f7f7 fa20 	bl	8001df4 <xQueueCreateMutex>
 800a9b4:	4b70      	ldr	r3, [pc, #448]	; (800ab78 <main_application+0x200>)
 800a9b6:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 800a9b8:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800a9ba:	4870      	ldr	r0, [pc, #448]	; (800ab7c <main_application+0x204>)
	log_semaph = xSemaphoreCreateMutex();
 800a9bc:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 800a9be:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800a9c0:	f7fc fb52 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 800a9c4:	486d      	ldr	r0, [pc, #436]	; (800ab7c <main_application+0x204>)
 800a9c6:	f7fc fb4f 	bl	8007068 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 800a9ca:	486c      	ldr	r0, [pc, #432]	; (800ab7c <main_application+0x204>)
 800a9cc:	2208      	movs	r2, #8
 800a9ce:	210e      	movs	r1, #14
 800a9d0:	f7fc fc32 	bl	8007238 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 800a9d4:	2109      	movs	r1, #9
 800a9d6:	4869      	ldr	r0, [pc, #420]	; (800ab7c <main_application+0x204>)
 800a9d8:	2208      	movs	r2, #8
 800a9da:	f7fc fc2d 	bl	8007238 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800a9de:	4a68      	ldr	r2, [pc, #416]	; (800ab80 <main_application+0x208>)
 800a9e0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800a9e2:	f043 0320 	orr.w	r3, r3, #32
 800a9e6:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 800a9e8:	2003      	movs	r0, #3
 800a9ea:	f7fc fe8f 	bl	800770c <rcc_get_bus_frequency>
 800a9ee:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800a9f0:	68f3      	ldr	r3, [r6, #12]
 800a9f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a9f6:	f043 030c 	orr.w	r3, r3, #12
 800a9fa:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 800a9fc:	9802      	ldr	r0, [sp, #8]
 800a9fe:	f7f5 fda1 	bl	8000544 <__aeabi_ui2d>
 800aa02:	a355      	add	r3, pc, #340	; (adr r3, 800ab58 <main_application+0x1e0>)
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fe16 	bl	8000638 <__aeabi_dmul>
 800aa0c:	f7f6 f90c 	bl	8000c28 <__aeabi_d2f>
 800aa10:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 800aa14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 800aa18:	ee17 3a90 	vmov	r3, s15
 800aa1c:	b29c      	uxth	r4, r3
 800aa1e:	f7f5 fdb3 	bl	8000588 <__aeabi_f2d>
 800aa22:	4b58      	ldr	r3, [pc, #352]	; (800ab84 <main_application+0x20c>)
 800aa24:	2200      	movs	r2, #0
 800aa26:	f7f5 fe07 	bl	8000638 <__aeabi_dmul>
 800aa2a:	f7f6 f8dd 	bl	8000be8 <__aeabi_d2uiz>
 800aa2e:	4607      	mov	r7, r0
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7f5 fd97 	bl	8000564 <__aeabi_i2d>
 800aa36:	4b53      	ldr	r3, [pc, #332]	; (800ab84 <main_application+0x20c>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f7f5 fdfd 	bl	8000638 <__aeabi_dmul>
 800aa3e:	f7f6 f8d3 	bl	8000be8 <__aeabi_d2uiz>
 800aa42:	b2bf      	uxth	r7, r7
 800aa44:	b280      	uxth	r0, r0
 800aa46:	1a38      	subs	r0, r7, r0
 800aa48:	f7f5 fd8c 	bl	8000564 <__aeabi_i2d>
 800aa4c:	a344      	add	r3, pc, #272	; (adr r3, 800ab60 <main_application+0x1e8>)
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	f7f5 fdf1 	bl	8000638 <__aeabi_dmul>
 800aa56:	f7f6 f8e7 	bl	8000c28 <__aeabi_d2f>
 800aa5a:	ee07 0a90 	vmov	s15, r0
 800aa5e:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 800aa62:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aa66:	f001 fbd1 	bl	800c20c <ceilf>
	DIV_Fraction = ceil(Fraction);
 800aa6a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n");
 800aa6e:	4846      	ldr	r0, [pc, #280]	; (800ab88 <main_application+0x210>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 800aa70:	ee10 3a10 	vmov	r3, s0
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800aa7a:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n");
 800aa7c:	f7ff ff3c 	bl	800a8f8 <uart_log>
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 800aa80:	4842      	ldr	r0, [pc, #264]	; (800ab8c <main_application+0x214>)
 800aa82:	f7ff ff39 	bl	800a8f8 <uart_log>
	log_init(uart_log);
 800aa86:	4842      	ldr	r0, [pc, #264]	; (800ab90 <main_application+0x218>)
 800aa88:	f000 f8d0 	bl	800ac2c <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 800aa8c:	4941      	ldr	r1, [pc, #260]	; (800ab94 <main_application+0x21c>)
 800aa8e:	4a42      	ldr	r2, [pc, #264]	; (800ab98 <main_application+0x220>)
 800aa90:	4842      	ldr	r0, [pc, #264]	; (800ab9c <main_application+0x224>)
 800aa92:	f000 f8d1 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 800aa96:	f000 fa95 	bl	800afc4 <get_revid>
 800aa9a:	4941      	ldr	r1, [pc, #260]	; (800aba0 <main_application+0x228>)
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	483f      	ldr	r0, [pc, #252]	; (800ab9c <main_application+0x224>)
 800aaa0:	f000 f8ca 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 800aaa4:	f000 fa94 	bl	800afd0 <get_devid>
 800aaa8:	493e      	ldr	r1, [pc, #248]	; (800aba4 <main_application+0x22c>)
 800aaaa:	4602      	mov	r2, r0
 800aaac:	483b      	ldr	r0, [pc, #236]	; (800ab9c <main_application+0x224>)
 800aaae:	f000 f8c3 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 800aab2:	f000 fa95 	bl	800afe0 <get_flashsize>
 800aab6:	493c      	ldr	r1, [pc, #240]	; (800aba8 <main_application+0x230>)
 800aab8:	4602      	mov	r2, r0
 800aaba:	4838      	ldr	r0, [pc, #224]	; (800ab9c <main_application+0x224>)
 800aabc:	f000 f8bc 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 800aac0:	493a      	ldr	r1, [pc, #232]	; (800abac <main_application+0x234>)
 800aac2:	4836      	ldr	r0, [pc, #216]	; (800ab9c <main_application+0x224>)
 800aac4:	2280      	movs	r2, #128	; 0x80
 800aac6:	f000 f8b7 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 800aaca:	4939      	ldr	r1, [pc, #228]	; (800abb0 <main_application+0x238>)
 800aacc:	4a39      	ldr	r2, [pc, #228]	; (800abb4 <main_application+0x23c>)
 800aace:	4833      	ldr	r0, [pc, #204]	; (800ab9c <main_application+0x224>)
 800aad0:	f000 f8b2 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 800aad4:	4628      	mov	r0, r5
 800aad6:	f7fc fe19 	bl	800770c <rcc_get_bus_frequency>
 800aada:	4937      	ldr	r1, [pc, #220]	; (800abb8 <main_application+0x240>)
 800aadc:	4602      	mov	r2, r0
 800aade:	482f      	ldr	r0, [pc, #188]	; (800ab9c <main_application+0x224>)
 800aae0:	f000 f8aa 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 800aae4:	2001      	movs	r0, #1
 800aae6:	f7fc fe11 	bl	800770c <rcc_get_bus_frequency>
 800aaea:	4934      	ldr	r1, [pc, #208]	; (800abbc <main_application+0x244>)
 800aaec:	4602      	mov	r2, r0
 800aaee:	482b      	ldr	r0, [pc, #172]	; (800ab9c <main_application+0x224>)
 800aaf0:	f000 f8a2 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 800aaf4:	2002      	movs	r0, #2
 800aaf6:	f7fc fe09 	bl	800770c <rcc_get_bus_frequency>
 800aafa:	4931      	ldr	r1, [pc, #196]	; (800abc0 <main_application+0x248>)
 800aafc:	4602      	mov	r2, r0
 800aafe:	4827      	ldr	r0, [pc, #156]	; (800ab9c <main_application+0x224>)
 800ab00:	f000 f89a 	bl	800ac38 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 800ab04:	2003      	movs	r0, #3
 800ab06:	f7fc fe01 	bl	800770c <rcc_get_bus_frequency>
 800ab0a:	492e      	ldr	r1, [pc, #184]	; (800abc4 <main_application+0x24c>)
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	4823      	ldr	r0, [pc, #140]	; (800ab9c <main_application+0x224>)
 800ab10:	f000 f892 	bl	800ac38 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 800ab14:	2301      	movs	r3, #1
 800ab16:	e9cd 3500 	strd	r3, r5, [sp]
 800ab1a:	492b      	ldr	r1, [pc, #172]	; (800abc8 <main_application+0x250>)
 800ab1c:	482b      	ldr	r0, [pc, #172]	; (800abcc <main_application+0x254>)
 800ab1e:	462b      	mov	r3, r5
 800ab20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab24:	f7f8 f95c 	bl	8002de0 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 800ab28:	2801      	cmp	r0, #1
 800ab2a:	d00b      	beq.n	800ab44 <main_application+0x1cc>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 800ab2c:	206a      	movs	r0, #106	; 0x6a
 800ab2e:	9000      	str	r0, [sp, #0]
 800ab30:	4b27      	ldr	r3, [pc, #156]	; (800abd0 <main_application+0x258>)
 800ab32:	4a28      	ldr	r2, [pc, #160]	; (800abd4 <main_application+0x25c>)
 800ab34:	4928      	ldr	r1, [pc, #160]	; (800abd8 <main_application+0x260>)
 800ab36:	4819      	ldr	r0, [pc, #100]	; (800ab9c <main_application+0x224>)
 800ab38:	f000 f8fa 	bl	800ad30 <LOG_ERROR>
		return 0;
 800ab3c:	462c      	mov	r4, r5
}
 800ab3e:	4620      	mov	r0, r4
 800ab40:	b005      	add	sp, #20
 800ab42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 800ab44:	4925      	ldr	r1, [pc, #148]	; (800abdc <main_application+0x264>)
 800ab46:	4604      	mov	r4, r0
 800ab48:	4814      	ldr	r0, [pc, #80]	; (800ab9c <main_application+0x224>)
 800ab4a:	f000 f875 	bl	800ac38 <LOG_INFO>
	vTaskStartScheduler();
 800ab4e:	f7f8 fb1f 	bl	8003190 <vTaskStartScheduler>
}
 800ab52:	4620      	mov	r0, r4
 800ab54:	b005      	add	sp, #20
 800ab56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab58:	789abcdf 	.word	0x789abcdf
 800ab5c:	3ea23456 	.word	0x3ea23456
 800ab60:	47ae147b 	.word	0x47ae147b
 800ab64:	3f847ae1 	.word	0x3f847ae1
 800ab68:	2000007c 	.word	0x2000007c
 800ab6c:	40011400 	.word	0x40011400
 800ab70:	40021c00 	.word	0x40021c00
 800ab74:	200000a4 	.word	0x200000a4
 800ab78:	2000b9dc 	.word	0x2000b9dc
 800ab7c:	40021800 	.word	0x40021800
 800ab80:	40023800 	.word	0x40023800
 800ab84:	40590000 	.word	0x40590000
 800ab88:	080118c0 	.word	0x080118c0
 800ab8c:	080118c8 	.word	0x080118c8
 800ab90:	0800a8f9 	.word	0x0800a8f9
 800ab94:	08011934 	.word	0x08011934
 800ab98:	08011928 	.word	0x08011928
 800ab9c:	0801189c 	.word	0x0801189c
 800aba0:	08011948 	.word	0x08011948
 800aba4:	08011960 	.word	0x08011960
 800aba8:	08011978 	.word	0x08011978
 800abac:	08011990 	.word	0x08011990
 800abb0:	080119b0 	.word	0x080119b0
 800abb4:	080119a8 	.word	0x080119a8
 800abb8:	080119c4 	.word	0x080119c4
 800abbc:	080119dc 	.word	0x080119dc
 800abc0:	080119f4 	.word	0x080119f4
 800abc4:	08011a0c 	.word	0x08011a0c
 800abc8:	08011a24 	.word	0x08011a24
 800abcc:	0800a8cd 	.word	0x0800a8cd
 800abd0:	08011a34 	.word	0x08011a34
 800abd4:	08011a48 	.word	0x08011a48
 800abd8:	08011a68 	.word	0x08011a68
 800abdc:	08011aa0 	.word	0x08011aa0

0800abe0 <vApplicationIdleHook>:
	void vApplicationIdleHook(void){
 800abe0:	b508      	push	{r3, lr}
		iwdg_refresh();
 800abe2:	f7fc fbf5 	bl	80073d0 <iwdg_refresh>
	}
 800abe6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_calculate_cpu_load_percent();
 800abea:	f000 bacf 	b.w	800b18c <sys_calculate_cpu_load_percent>
 800abee:	bf00      	nop

0800abf0 <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 800abf0:	b508      	push	{r3, lr}
 800abf2:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 800abf4:	4804      	ldr	r0, [pc, #16]	; (800ac08 <vApplicationStackOverflowHook+0x18>)
 800abf6:	4905      	ldr	r1, [pc, #20]	; (800ac0c <vApplicationStackOverflowHook+0x1c>)
 800abf8:	f000 f89a 	bl	800ad30 <LOG_ERROR>
 800abfc:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 800abfe:	bf00      	nop
 800ac00:	3b01      	subs	r3, #1
 800ac02:	d1fc      	bne.n	800abfe <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 800ac04:	f7ff fe50 	bl	800a8a8 <__NVIC_SystemReset>
 800ac08:	0801189c 	.word	0x0801189c
 800ac0c:	08011abc 	.word	0x08011abc
 800ac10:	003d0900 	.word	0x003d0900

0800ac14 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 800ac14:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 800ac16:	4903      	ldr	r1, [pc, #12]	; (800ac24 <vApplicationMallocFailedHook+0x10>)
 800ac18:	4803      	ldr	r0, [pc, #12]	; (800ac28 <vApplicationMallocFailedHook+0x14>)
 800ac1a:	f000 f889 	bl	800ad30 <LOG_ERROR>
		__NVIC_SystemReset();
 800ac1e:	f7ff fe43 	bl	800a8a8 <__NVIC_SystemReset>
 800ac22:	bf00      	nop
 800ac24:	08011ad4 	.word	0x08011ad4
 800ac28:	0801189c 	.word	0x0801189c

0800ac2c <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 800ac2c:	4b01      	ldr	r3, [pc, #4]	; (800ac34 <log_init+0x8>)
 800ac2e:	6018      	str	r0, [r3, #0]
}
 800ac30:	4770      	bx	lr
 800ac32:	bf00      	nop
 800ac34:	2000b9e0 	.word	0x2000b9e0

0800ac38 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 800ac38:	b40e      	push	{r1, r2, r3}
 800ac3a:	b570      	push	{r4, r5, r6, lr}
 800ac3c:	b08b      	sub	sp, #44	; 0x2c
 800ac3e:	ac0f      	add	r4, sp, #60	; 0x3c
 800ac40:	4606      	mov	r6, r0
 800ac42:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac46:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800ac48:	f7fd fc36 	bl	80084b8 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800ac4c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800ac4e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800ac50:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800ac52:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800ac54:	4622      	mov	r2, r4
 800ac56:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800ac58:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800ac5a:	f003 fa0b 	bl	800e074 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 800ac5e:	4b0f      	ldr	r3, [pc, #60]	; (800ac9c <LOG_INFO+0x64>)
 800ac60:	4a0f      	ldr	r2, [pc, #60]	; (800aca0 <LOG_INFO+0x68>)
 800ac62:	7819      	ldrb	r1, [r3, #0]
 800ac64:	4b0f      	ldr	r3, [pc, #60]	; (800aca4 <LOG_INFO+0x6c>)
 800ac66:	9303      	str	r3, [sp, #12]
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ac6e:	9302      	str	r3, [sp, #8]
 800ac70:	490d      	ldr	r1, [pc, #52]	; (800aca8 <LOG_INFO+0x70>)
 800ac72:	4b0e      	ldr	r3, [pc, #56]	; (800acac <LOG_INFO+0x74>)
 800ac74:	e9cd 5600 	strd	r5, r6, [sp]
 800ac78:	a809      	add	r0, sp, #36	; 0x24
 800ac7a:	f001 fb11 	bl	800c2a0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800ac7e:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <LOG_INFO+0x78>)
 800ac80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4798      	blx	r3
	free(Temp_buffer);
 800ac86:	9807      	ldr	r0, [sp, #28]
 800ac88:	f001 fb6a 	bl	800c360 <free>
	free(Output_buffer);
 800ac8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac8e:	f001 fb67 	bl	800c360 <free>
}
 800ac92:	b00b      	add	sp, #44	; 0x2c
 800ac94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ac98:	b003      	add	sp, #12
 800ac9a:	4770      	bx	lr
 800ac9c:	200000da 	.word	0x200000da
 800aca0:	08011c80 	.word	0x08011c80
 800aca4:	08011b04 	.word	0x08011b04
 800aca8:	08011b10 	.word	0x08011b10
 800acac:	08011b0c 	.word	0x08011b0c
 800acb0:	2000b9e0 	.word	0x2000b9e0

0800acb4 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 800acb4:	b40e      	push	{r1, r2, r3}
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	b08b      	sub	sp, #44	; 0x2c
 800acba:	ac0f      	add	r4, sp, #60	; 0x3c
 800acbc:	4606      	mov	r6, r0
 800acbe:	f854 1b04 	ldr.w	r1, [r4], #4
 800acc2:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800acc4:	f7fd fbf8 	bl	80084b8 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800acc8:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800acca:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800accc:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800acce:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800acd0:	4622      	mov	r2, r4
 800acd2:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800acd4:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800acd6:	f003 f9cd 	bl	800e074 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 800acda:	4b0f      	ldr	r3, [pc, #60]	; (800ad18 <LOG_WARN+0x64>)
 800acdc:	4a0f      	ldr	r2, [pc, #60]	; (800ad1c <LOG_WARN+0x68>)
 800acde:	7819      	ldrb	r1, [r3, #0]
 800ace0:	4b0f      	ldr	r3, [pc, #60]	; (800ad20 <LOG_WARN+0x6c>)
 800ace2:	9303      	str	r3, [sp, #12]
 800ace4:	9b07      	ldr	r3, [sp, #28]
 800ace6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800acea:	9302      	str	r3, [sp, #8]
 800acec:	490d      	ldr	r1, [pc, #52]	; (800ad24 <LOG_WARN+0x70>)
 800acee:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <LOG_WARN+0x74>)
 800acf0:	e9cd 5600 	strd	r5, r6, [sp]
 800acf4:	a809      	add	r0, sp, #36	; 0x24
 800acf6:	f001 fad3 	bl	800c2a0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800acfa:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <LOG_WARN+0x78>)
 800acfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4798      	blx	r3
	free(Temp_buffer);
 800ad02:	9807      	ldr	r0, [sp, #28]
 800ad04:	f001 fb2c 	bl	800c360 <free>
	free(Output_buffer);
 800ad08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad0a:	f001 fb29 	bl	800c360 <free>
}
 800ad0e:	b00b      	add	sp, #44	; 0x2c
 800ad10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad14:	b003      	add	sp, #12
 800ad16:	4770      	bx	lr
 800ad18:	200000dd 	.word	0x200000dd
 800ad1c:	08011c80 	.word	0x08011c80
 800ad20:	08011b04 	.word	0x08011b04
 800ad24:	08011b10 	.word	0x08011b10
 800ad28:	08011b28 	.word	0x08011b28
 800ad2c:	2000b9e0 	.word	0x2000b9e0

0800ad30 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 800ad30:	b40e      	push	{r1, r2, r3}
 800ad32:	b570      	push	{r4, r5, r6, lr}
 800ad34:	b08b      	sub	sp, #44	; 0x2c
 800ad36:	ac0f      	add	r4, sp, #60	; 0x3c
 800ad38:	4606      	mov	r6, r0
 800ad3a:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad3e:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800ad40:	f7fd fbba 	bl	80084b8 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800ad44:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800ad46:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800ad48:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800ad4a:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800ad50:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800ad52:	f003 f98f 	bl	800e074 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 800ad56:	4b0f      	ldr	r3, [pc, #60]	; (800ad94 <LOG_ERROR+0x64>)
 800ad58:	4a0f      	ldr	r2, [pc, #60]	; (800ad98 <LOG_ERROR+0x68>)
 800ad5a:	7819      	ldrb	r1, [r3, #0]
 800ad5c:	4b0f      	ldr	r3, [pc, #60]	; (800ad9c <LOG_ERROR+0x6c>)
 800ad5e:	9303      	str	r3, [sp, #12]
 800ad60:	9b07      	ldr	r3, [sp, #28]
 800ad62:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ad66:	9302      	str	r3, [sp, #8]
 800ad68:	490d      	ldr	r1, [pc, #52]	; (800ada0 <LOG_ERROR+0x70>)
 800ad6a:	4b0e      	ldr	r3, [pc, #56]	; (800ada4 <LOG_ERROR+0x74>)
 800ad6c:	e9cd 5600 	strd	r5, r6, [sp]
 800ad70:	a809      	add	r0, sp, #36	; 0x24
 800ad72:	f001 fa95 	bl	800c2a0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800ad76:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <LOG_ERROR+0x78>)
 800ad78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4798      	blx	r3
	free(Temp_buffer);
 800ad7e:	9807      	ldr	r0, [sp, #28]
 800ad80:	f001 faee 	bl	800c360 <free>
	free(Output_buffer);
 800ad84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad86:	f001 faeb 	bl	800c360 <free>
}
 800ad8a:	b00b      	add	sp, #44	; 0x2c
 800ad8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad90:	b003      	add	sp, #12
 800ad92:	4770      	bx	lr
 800ad94:	200000d9 	.word	0x200000d9
 800ad98:	08011c80 	.word	0x08011c80
 800ad9c:	08011b04 	.word	0x08011b04
 800ada0:	08011b10 	.word	0x08011b10
 800ada4:	08011b2c 	.word	0x08011b2c
 800ada8:	2000b9e0 	.word	0x2000b9e0

0800adac <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 800adac:	b40e      	push	{r1, r2, r3}
 800adae:	b570      	push	{r4, r5, r6, lr}
 800adb0:	b08b      	sub	sp, #44	; 0x2c
 800adb2:	ac0f      	add	r4, sp, #60	; 0x3c
 800adb4:	4606      	mov	r6, r0
 800adb6:	f854 1b04 	ldr.w	r1, [r4], #4
 800adba:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800adbc:	f7fd fb7c 	bl	80084b8 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800adc0:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800adc2:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800adc4:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800adc6:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800adc8:	4622      	mov	r2, r4
 800adca:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800adcc:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800adce:	f003 f951 	bl	800e074 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 800add2:	4b0f      	ldr	r3, [pc, #60]	; (800ae10 <LOG_DEBUG+0x64>)
 800add4:	4a0f      	ldr	r2, [pc, #60]	; (800ae14 <LOG_DEBUG+0x68>)
 800add6:	7819      	ldrb	r1, [r3, #0]
 800add8:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <LOG_DEBUG+0x6c>)
 800adda:	9303      	str	r3, [sp, #12]
 800addc:	9b07      	ldr	r3, [sp, #28]
 800adde:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ade2:	9302      	str	r3, [sp, #8]
 800ade4:	490d      	ldr	r1, [pc, #52]	; (800ae1c <LOG_DEBUG+0x70>)
 800ade6:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <LOG_DEBUG+0x74>)
 800ade8:	e9cd 5600 	strd	r5, r6, [sp]
 800adec:	a809      	add	r0, sp, #36	; 0x24
 800adee:	f001 fa57 	bl	800c2a0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800adf2:	4b0c      	ldr	r3, [pc, #48]	; (800ae24 <LOG_DEBUG+0x78>)
 800adf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4798      	blx	r3
	free(Temp_buffer);
 800adfa:	9807      	ldr	r0, [sp, #28]
 800adfc:	f001 fab0 	bl	800c360 <free>
	free(Output_buffer);
 800ae00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae02:	f001 faad 	bl	800c360 <free>
}
 800ae06:	b00b      	add	sp, #44	; 0x2c
 800ae08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae0c:	b003      	add	sp, #12
 800ae0e:	4770      	bx	lr
 800ae10:	200000d8 	.word	0x200000d8
 800ae14:	08011c80 	.word	0x08011c80
 800ae18:	08011b04 	.word	0x08011b04
 800ae1c:	08011b10 	.word	0x08011b10
 800ae20:	08011b30 	.word	0x08011b30
 800ae24:	2000b9e0 	.word	0x2000b9e0

0800ae28 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 800ae28:	b40e      	push	{r1, r2, r3}
 800ae2a:	b570      	push	{r4, r5, r6, lr}
 800ae2c:	b08b      	sub	sp, #44	; 0x2c
 800ae2e:	ac0f      	add	r4, sp, #60	; 0x3c
 800ae30:	4606      	mov	r6, r0
 800ae32:	f854 1b04 	ldr.w	r1, [r4], #4
 800ae36:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800ae38:	f7fd fb3e 	bl	80084b8 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800ae3c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800ae3e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800ae40:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800ae42:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800ae44:	4622      	mov	r2, r4
 800ae46:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800ae48:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800ae4a:	f003 f913 	bl	800e074 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 800ae4e:	4b0f      	ldr	r3, [pc, #60]	; (800ae8c <LOG_EVENT+0x64>)
 800ae50:	4a0f      	ldr	r2, [pc, #60]	; (800ae90 <LOG_EVENT+0x68>)
 800ae52:	7819      	ldrb	r1, [r3, #0]
 800ae54:	4b0f      	ldr	r3, [pc, #60]	; (800ae94 <LOG_EVENT+0x6c>)
 800ae56:	9303      	str	r3, [sp, #12]
 800ae58:	9b07      	ldr	r3, [sp, #28]
 800ae5a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ae5e:	9302      	str	r3, [sp, #8]
 800ae60:	490d      	ldr	r1, [pc, #52]	; (800ae98 <LOG_EVENT+0x70>)
 800ae62:	4b0e      	ldr	r3, [pc, #56]	; (800ae9c <LOG_EVENT+0x74>)
 800ae64:	e9cd 5600 	strd	r5, r6, [sp]
 800ae68:	a809      	add	r0, sp, #36	; 0x24
 800ae6a:	f001 fa19 	bl	800c2a0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logp], log_level_str[5], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800ae6e:	4b0c      	ldr	r3, [pc, #48]	; (800aea0 <LOG_EVENT+0x78>)
 800ae70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4798      	blx	r3
	free(Temp_buffer);
 800ae76:	9807      	ldr	r0, [sp, #28]
 800ae78:	f001 fa72 	bl	800c360 <free>
	free(Output_buffer);
 800ae7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae7e:	f001 fa6f 	bl	800c360 <free>
}
 800ae82:	b00b      	add	sp, #44	; 0x2c
 800ae84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae88:	b003      	add	sp, #12
 800ae8a:	4770      	bx	lr
 800ae8c:	200000dc 	.word	0x200000dc
 800ae90:	08011c80 	.word	0x08011c80
 800ae94:	08011b04 	.word	0x08011b04
 800ae98:	08011b10 	.word	0x08011b10
 800ae9c:	08011b34 	.word	0x08011b34
 800aea0:	2000b9e0 	.word	0x2000b9e0

0800aea4 <LOG_RET>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_RET(const char *tag,  const char *format, ...){
 800aea4:	b40e      	push	{r1, r2, r3}
 800aea6:	b570      	push	{r4, r5, r6, lr}
 800aea8:	b08b      	sub	sp, #44	; 0x2c
 800aeaa:	ac0f      	add	r4, sp, #60	; 0x3c
 800aeac:	4606      	mov	r6, r0
 800aeae:	f854 1b04 	ldr.w	r1, [r4], #4
 800aeb2:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800aeb4:	f7fd fb00 	bl	80084b8 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800aeb8:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800aeba:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800aebc:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800aebe:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800aec0:	4622      	mov	r2, r4
 800aec2:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800aec4:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800aec6:	f003 f8d5 	bl	800e074 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logr], log_level_str[6], time, tag, Temp_buffer, COLOR_END);
 800aeca:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <LOG_RET+0x64>)
 800aecc:	4a0f      	ldr	r2, [pc, #60]	; (800af0c <LOG_RET+0x68>)
 800aece:	7819      	ldrb	r1, [r3, #0]
 800aed0:	4b0f      	ldr	r3, [pc, #60]	; (800af10 <LOG_RET+0x6c>)
 800aed2:	9303      	str	r3, [sp, #12]
 800aed4:	9b07      	ldr	r3, [sp, #28]
 800aed6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aeda:	9302      	str	r3, [sp, #8]
 800aedc:	490d      	ldr	r1, [pc, #52]	; (800af14 <LOG_RET+0x70>)
 800aede:	4b0e      	ldr	r3, [pc, #56]	; (800af18 <LOG_RET+0x74>)
 800aee0:	e9cd 5600 	strd	r5, r6, [sp]
 800aee4:	a809      	add	r0, sp, #36	; 0x24
 800aee6:	f001 f9db 	bl	800c2a0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logr], log_level_str[6], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800aeea:	4b0c      	ldr	r3, [pc, #48]	; (800af1c <LOG_RET+0x78>)
 800aeec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4798      	blx	r3
	free(Temp_buffer);
 800aef2:	9807      	ldr	r0, [sp, #28]
 800aef4:	f001 fa34 	bl	800c360 <free>
	free(Output_buffer);
 800aef8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefa:	f001 fa31 	bl	800c360 <free>
}
 800aefe:	b00b      	add	sp, #44	; 0x2c
 800af00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af04:	b003      	add	sp, #12
 800af06:	4770      	bx	lr
 800af08:	200000db 	.word	0x200000db
 800af0c:	08011c80 	.word	0x08011c80
 800af10:	08011b04 	.word	0x08011b04
 800af14:	08011b10 	.word	0x08011b10
 800af18:	08011b38 	.word	0x08011b38
 800af1c:	2000b9e0 	.word	0x2000b9e0

0800af20 <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800af20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 800af24:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800af94 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800af28:	b083      	sub	sp, #12
 800af2a:	461f      	mov	r7, r3
	stm_ret_t res;
 800af2c:	2301      	movs	r3, #1
 800af2e:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800af30:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 800af32:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800af36:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 800af3a:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800af3c:	4606      	mov	r6, r0
 800af3e:	460d      	mov	r5, r1
	stm_ret_t res;
 800af40:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 800af42:	4798      	blx	r3
 800af44:	9001      	str	r0, [sp, #4]
 800af46:	b14f      	cbz	r7, 800af5c <wait_flag_in_register_timeout+0x3c>
 800af48:	f1b8 0f00 	cmp.w	r8, #0
 800af4c:	d110      	bne.n	800af70 <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800af4e:	682b      	ldr	r3, [r5, #0]
 800af50:	421c      	tst	r4, r3
 800af52:	d0fc      	beq.n	800af4e <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 800af54:	4630      	mov	r0, r6
 800af56:	b003      	add	sp, #12
 800af58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af5c:	f1b8 0f00 	cmp.w	r8, #0
 800af60:	d113      	bne.n	800af8a <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800af62:	682b      	ldr	r3, [r5, #0]
 800af64:	421c      	tst	r4, r3
 800af66:	d1fc      	bne.n	800af62 <wait_flag_in_register_timeout+0x42>
}
 800af68:	4630      	mov	r0, r6
 800af6a:	b003      	add	sp, #12
 800af6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800af70:	682b      	ldr	r3, [r5, #0]
 800af72:	4223      	tst	r3, r4
 800af74:	d1ee      	bne.n	800af54 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 800af76:	f8d9 3000 	ldr.w	r3, [r9]
 800af7a:	4798      	blx	r3
 800af7c:	9b01      	ldr	r3, [sp, #4]
 800af7e:	1ac0      	subs	r0, r0, r3
 800af80:	4540      	cmp	r0, r8
 800af82:	d3e0      	bcc.n	800af46 <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 800af84:	2302      	movs	r3, #2
 800af86:	7033      	strb	r3, [r6, #0]
				return res;
 800af88:	e7e4      	b.n	800af54 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	4223      	tst	r3, r4
 800af8e:	d1f2      	bne.n	800af76 <wait_flag_in_register_timeout+0x56>
 800af90:	e7e0      	b.n	800af54 <wait_flag_in_register_timeout+0x34>
 800af92:	bf00      	nop
 800af94:	200000e0 	.word	0x200000e0

0800af98 <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 800af98:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 800af9a:	6042      	str	r2, [r0, #4]
}
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop

0800afa0 <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 800afa0:	6041      	str	r1, [r0, #4]
}
 800afa2:	4770      	bx	lr

0800afa4 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 800afa4:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 800afa6:	f1a0 0001 	sub.w	r0, r0, #1
 800afaa:	fab0 f080 	clz	r0, r0
 800afae:	0940      	lsrs	r0, r0, #5
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop

0800afb4 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 800afb4:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 800afb6:	f1a0 0002 	sub.w	r0, r0, #2
 800afba:	fab0 f080 	clz	r0, r0
 800afbe:	0940      	lsrs	r0, r0, #5
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop

0800afc4 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 800afc4:	4b01      	ldr	r3, [pc, #4]	; (800afcc <get_revid+0x8>)
 800afc6:	6818      	ldr	r0, [r3, #0]
}
 800afc8:	0c00      	lsrs	r0, r0, #16
 800afca:	4770      	bx	lr
 800afcc:	e0042000 	.word	0xe0042000

0800afd0 <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 800afd0:	4b02      	ldr	r3, [pc, #8]	; (800afdc <get_devid+0xc>)
 800afd2:	6818      	ldr	r0, [r3, #0]
}
 800afd4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	e0042000 	.word	0xe0042000

0800afe0 <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 800afe0:	4b01      	ldr	r3, [pc, #4]	; (800afe8 <get_flashsize+0x8>)
 800afe2:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 800afe4:	b280      	uxth	r0, r0
 800afe6:	4770      	bx	lr
 800afe8:	1fff7a00 	.word	0x1fff7a00

0800afec <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 800afec:	4b14      	ldr	r3, [pc, #80]	; (800b040 <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 800afee:	4a15      	ldr	r2, [pc, #84]	; (800b044 <system_init+0x58>)
 800aff0:	6819      	ldr	r1, [r3, #0]
 800aff2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 800aff6:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 800aff8:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 800affa:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800affc:	4c12      	ldr	r4, [pc, #72]	; (800b048 <system_init+0x5c>)
 800affe:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800b002:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 800b004:	6819      	ldr	r1, [r3, #0]
 800b006:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b00a:	6019      	str	r1, [r3, #0]
 800b00c:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b00e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 800b012:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 800b016:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800b018:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 800b01a:	200f      	movs	r0, #15
 800b01c:	f7fd fa2a 	bl	8008474 <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800b020:	4b0a      	ldr	r3, [pc, #40]	; (800b04c <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 800b022:	490b      	ldr	r1, [pc, #44]	; (800b050 <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800b024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b026:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b02a:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800b02c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b02e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b032:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 800b034:	680b      	ldr	r3, [r1, #0]
 800b036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b03a:	600b      	str	r3, [r1, #0]
}
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	bf00      	nop
 800b040:	40023c00 	.word	0x40023c00
 800b044:	05fa0300 	.word	0x05fa0300
 800b048:	e000ed00 	.word	0xe000ed00
 800b04c:	40023800 	.word	0x40023800
 800b050:	40007000 	.word	0x40007000

0800b054 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 800b054:	4a03      	ldr	r2, [pc, #12]	; (800b064 <embedded_flash_set_latency+0x10>)
 800b056:	6813      	ldr	r3, [r2, #0]
 800b058:	f023 030f 	bic.w	r3, r3, #15
 800b05c:	4318      	orrs	r0, r3
 800b05e:	6010      	str	r0, [r2, #0]
}
 800b060:	4770      	bx	lr
 800b062:	bf00      	nop
 800b064:	40023c00 	.word	0x40023c00

0800b068 <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800b068:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800b06a:	490e      	ldr	r1, [pc, #56]	; (800b0a4 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800b06c:	4c0e      	ldr	r4, [pc, #56]	; (800b0a8 <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800b06e:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800b070:	09c3      	lsrs	r3, r0, #7
 800b072:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800b076:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800b078:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800b07c:	d00e      	beq.n	800b09c <embedded_flash_calculate_latency+0x34>
 800b07e:	4b0b      	ldr	r3, [pc, #44]	; (800b0ac <embedded_flash_calculate_latency+0x44>)
 800b080:	429a      	cmp	r2, r3
 800b082:	d00b      	beq.n	800b09c <embedded_flash_calculate_latency+0x34>
 800b084:	4b0a      	ldr	r3, [pc, #40]	; (800b0b0 <embedded_flash_calculate_latency+0x48>)
 800b086:	429a      	cmp	r2, r3
 800b088:	d008      	beq.n	800b09c <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 800b08a:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <embedded_flash_calculate_latency+0x4c>)
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d005      	beq.n	800b09c <embedded_flash_calculate_latency+0x34>
 800b090:	4b09      	ldr	r3, [pc, #36]	; (800b0b8 <embedded_flash_calculate_latency+0x50>)
 800b092:	429a      	cmp	r2, r3
 800b094:	d002      	beq.n	800b09c <embedded_flash_calculate_latency+0x34>
 800b096:	4b09      	ldr	r3, [pc, #36]	; (800b0bc <embedded_flash_calculate_latency+0x54>)
 800b098:	429a      	cmp	r2, r3
 800b09a:	d100      	bne.n	800b09e <embedded_flash_calculate_latency+0x36>
 800b09c:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 800b09e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0a2:	4770      	bx	lr
 800b0a4:	01c9c380 	.word	0x01c9c380
 800b0a8:	011e54c7 	.word	0x011e54c7
 800b0ac:	03938700 	.word	0x03938700
 800b0b0:	055d4a80 	.word	0x055d4a80
 800b0b4:	07270e00 	.word	0x07270e00
 800b0b8:	08f0d180 	.word	0x08f0d180
 800b0bc:	0aba9500 	.word	0x0aba9500

0800b0c0 <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 800b0c0:	4b02      	ldr	r3, [pc, #8]	; (800b0cc <embedded_flash_get_latency+0xc>)
 800b0c2:	6818      	ldr	r0, [r3, #0]
}
 800b0c4:	f000 000f 	and.w	r0, r0, #15
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop
 800b0cc:	40023c00 	.word	0x40023c00

0800b0d0 <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b0d0:	4b1f      	ldr	r3, [pc, #124]	; (800b150 <NVIC_Set_Priority+0x80>)
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b0d8:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 800b0da:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b0dc:	f1c3 0e07 	rsb	lr, r3, #7
 800b0e0:	bf28      	it	cs
 800b0e2:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0e4:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b0e8:	f1be 0f04 	cmp.w	lr, #4
 800b0ec:	bf28      	it	cs
 800b0ee:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0f2:	f1bc 0f06 	cmp.w	ip, #6
 800b0f6:	d91f      	bls.n	800b138 <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0f8:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b0fa:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b0fe:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b102:	bf28      	it	cs
 800b104:	220f      	movcs	r2, #15
 800b106:	fa0c fc03 	lsl.w	ip, ip, r3
 800b10a:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b10e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b112:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b116:	ea21 010c 	bic.w	r1, r1, ip
 800b11a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800b11c:	2800      	cmp	r0, #0
         );
 800b11e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800b122:	db0c      	blt.n	800b13e <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b124:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800b128:	0109      	lsls	r1, r1, #4
 800b12a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800b12e:	b2c9      	uxtb	r1, r1
 800b130:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b134:	f85d fb04 	ldr.w	pc, [sp], #4
 800b138:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b13a:	4613      	mov	r3, r2
 800b13c:	e7e7      	b.n	800b10e <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b13e:	4b05      	ldr	r3, [pc, #20]	; (800b154 <NVIC_Set_Priority+0x84>)
 800b140:	f000 000f 	and.w	r0, r0, #15
 800b144:	0109      	lsls	r1, r1, #4
 800b146:	4403      	add	r3, r0
 800b148:	b2c9      	uxtb	r1, r1
 800b14a:	7619      	strb	r1, [r3, #24]
 800b14c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b150:	e000ed00 	.word	0xe000ed00
 800b154:	e000ecfc 	.word	0xe000ecfc

0800b158 <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 800b158:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 800b15a:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 800b15c:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 800b15e:	f002 ff69 	bl	800e034 <sbrk>
 800b162:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800b164:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 800b168:	4668      	mov	r0, sp
 800b16a:	f001 f931 	bl	800c3d0 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 800b16e:	4b06      	ldr	r3, [pc, #24]	; (800b188 <sys_get_free_heap_size+0x30>)
 800b170:	9808      	ldr	r0, [sp, #32]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	42ab      	cmp	r3, r5
 800b176:	bf94      	ite	ls
 800b178:	ebc4 0403 	rsbls	r4, r4, r3
 800b17c:	ebc4 0405 	rsbhi	r4, r4, r5
}
 800b180:	4420      	add	r0, r4
 800b182:	b00b      	add	sp, #44	; 0x2c
 800b184:	bd30      	pop	{r4, r5, pc}
 800b186:	bf00      	nop
 800b188:	2000b9e8 	.word	0x2000b9e8

0800b18c <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 800b18c:	4a06      	ldr	r2, [pc, #24]	; (800b1a8 <sys_calculate_cpu_load_percent+0x1c>)
 800b18e:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <sys_calculate_cpu_load_percent+0x20>)
 800b190:	6810      	ldr	r0, [r2, #0]
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	4288      	cmp	r0, r1
 800b196:	d005      	beq.n	800b1a4 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 800b198:	4805      	ldr	r0, [pc, #20]	; (800b1b0 <sys_calculate_cpu_load_percent+0x24>)
 800b19a:	6801      	ldr	r1, [r0, #0]
 800b19c:	3101      	adds	r1, #1
 800b19e:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	601a      	str	r2, [r3, #0]
    }
}
 800b1a4:	4770      	bx	lr
 800b1a6:	bf00      	nop
 800b1a8:	2000b748 	.word	0x2000b748
 800b1ac:	2000b9f0 	.word	0x2000b9f0
 800b1b0:	2000b9f4 	.word	0x2000b9f4

0800b1b4 <register_exception_handler>:

	return (float)(((float)total_ram_use / (float)total_ram_size) * 100.0F);
}

void register_exception_handler(volatile void(*p_exception_hander)(void)){
	exception_hander = p_exception_hander;
 800b1b4:	4b01      	ldr	r3, [pc, #4]	; (800b1bc <register_exception_handler+0x8>)
 800b1b6:	6018      	str	r0, [r3, #0]
}
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	2000b9e4 	.word	0x2000b9e4

0800b1c0 <exception_interrupt_handler>:

void exception_interrupt_handler(const char *tag, char *message){
 800b1c0:	b510      	push	{r4, lr}
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 800b1c2:	f7ff fdb5 	bl	800ad30 <LOG_ERROR>
	if(exception_hander != NULL) exception_hander();
 800b1c6:	4b03      	ldr	r3, [pc, #12]	; (800b1d4 <exception_interrupt_handler+0x14>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	b113      	cbz	r3, 800b1d2 <exception_interrupt_handler+0x12>
#endif /* CONFIG_USE_LOG_MONITOR */
}
 800b1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(exception_hander != NULL) exception_hander();
 800b1d0:	4718      	bx	r3
}
 800b1d2:	bd10      	pop	{r4, pc}
 800b1d4:	2000b9e4 	.word	0x2000b9e4

0800b1d8 <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 800b1d8:	4b02      	ldr	r3, [pc, #8]	; (800b1e4 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 800b1da:	4903      	ldr	r1, [pc, #12]	; (800b1e8 <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 800b1dc:	4a03      	ldr	r2, [pc, #12]	; (800b1ec <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 800b1de:	1a5b      	subs	r3, r3, r1
 800b1e0:	6013      	str	r3, [r2, #0]
}
 800b1e2:	4770      	bx	lr
 800b1e4:	20030000 	.word	0x20030000
 800b1e8:	00000400 	.word	0x00000400
 800b1ec:	2000b9e8 	.word	0x2000b9e8

0800b1f0 <add_device_properties>:
			dev->prop.address, dev->prop.name,
			dev->sett.mode, dev->sett.type, dev->sett.max_temp, dev->sett.min_temp, dev->sett.time_start, dev->sett.time_stop
	);
}

dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800b1f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1f2:	b085      	sub	sp, #20
	pkt_err_t err;
	pkt_json_t json;
 800b1f4:	2500      	movs	r5, #0
dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800b1f6:	4607      	mov	r7, r0

	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800b1f8:	2030      	movs	r0, #48	; 0x30
dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800b1fa:	460e      	mov	r6, r1
	pkt_json_t json;
 800b1fc:	9501      	str	r5, [sp, #4]
 800b1fe:	f88d 5008 	strb.w	r5, [sp, #8]
 800b202:	9503      	str	r5, [sp, #12]
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800b204:	f001 f8a4 	bl	800c350 <malloc>

	dev_prop->prop.address = device_address;

	dev_prop->env.temp = 0.0;
 800b208:	2300      	movs	r3, #0
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800b20a:	4604      	mov	r4, r0
	dev_prop->env.temp = 0.0;
 800b20c:	6003      	str	r3, [r0, #0]
	dev_prop->env.humi = 0.0;
 800b20e:	6043      	str	r3, [r0, #4]
	dev_prop->env.curr = 0.0;
 800b210:	6083      	str	r3, [r0, #8]
	dev_prop->prop.address = device_address;
 800b212:	6287      	str	r7, [r0, #40]	; 0x28
	dev_prop->ctrl.relay1 = 0;
 800b214:	6105      	str	r5, [r0, #16]
	dev_prop->ctrl.relay2 = 0;
	dev_prop->ctrl.relay3 = 0;
	dev_prop->ctrl.relay4 = 0;
	dev_prop->sett.mode = 0;
 800b216:	8285      	strh	r5, [r0, #20]
	dev_prop->sett.type = 0;
	dev_prop->sett.max_temp = 0.0;
	dev_prop->sett.min_temp = 0.0;
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800b218:	4916      	ldr	r1, [pc, #88]	; (800b274 <add_device_properties+0x84>)
	dev_prop->sett.max_temp = 0.0;
 800b21a:	61a3      	str	r3, [r4, #24]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800b21c:	3020      	adds	r0, #32
	dev_prop->sett.min_temp = 0.0;
 800b21e:	61e3      	str	r3, [r4, #28]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800b220:	f001 f83e 	bl	800c2a0 <asiprintf>
	asprintf(&(dev_prop->sett.time_stop), "00:00:00");
 800b224:	4913      	ldr	r1, [pc, #76]	; (800b274 <add_device_properties+0x84>)
 800b226:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b22a:	f001 f839 	bl	800c2a0 <asiprintf>
	asprintf(&(dev_prop->env.time), "14:30:00 05/05/23 thu 2");
 800b22e:	4912      	ldr	r1, [pc, #72]	; (800b278 <add_device_properties+0x88>)
 800b230:	f104 000c 	add.w	r0, r4, #12
 800b234:	f001 f834 	bl	800c2a0 <asiprintf>

	err = json_get_object(jdata, &json, (char *)"name");
 800b238:	4a10      	ldr	r2, [pc, #64]	; (800b27c <add_device_properties+0x8c>)
 800b23a:	a901      	add	r1, sp, #4
 800b23c:	4630      	mov	r0, r6
 800b23e:	f7f9 fd99 	bl	8004d74 <json_get_object>
	if(err == PKT_ERR_OK)
 800b242:	b180      	cbz	r0, 800b266 <add_device_properties+0x76>
		asprintf(&(dev_prop->prop.name), "%s", json.value);
	json_release_object(&json);
 800b244:	a801      	add	r0, sp, #4
 800b246:	f7f9 fea1 	bl	8004f8c <json_release_object>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b24a:	200c      	movs	r0, #12
 800b24c:	f000 ffb6 	bl	800c1bc <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 800b250:	4d0b      	ldr	r5, [pc, #44]	; (800b280 <add_device_properties+0x90>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b252:	6084      	str	r4, [r0, #8]
 800b254:	4629      	mov	r1, r5
 800b256:	f000 ffc2 	bl	800c1de <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800b25a:	68ab      	ldr	r3, [r5, #8]

	device_properties_list.push_back(dev_prop);

	return dev_prop;
}
 800b25c:	4620      	mov	r0, r4
 800b25e:	3301      	adds	r3, #1
 800b260:	60ab      	str	r3, [r5, #8]
 800b262:	b005      	add	sp, #20
 800b264:	bdf0      	pop	{r4, r5, r6, r7, pc}
		asprintf(&(dev_prop->prop.name), "%s", json.value);
 800b266:	9a03      	ldr	r2, [sp, #12]
 800b268:	4906      	ldr	r1, [pc, #24]	; (800b284 <add_device_properties+0x94>)
 800b26a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b26e:	f001 f817 	bl	800c2a0 <asiprintf>
 800b272:	e7e7      	b.n	800b244 <add_device_properties+0x54>
 800b274:	08011d00 	.word	0x08011d00
 800b278:	08011d0c 	.word	0x08011d0c
 800b27c:	0801104c 	.word	0x0801104c
 800b280:	2000b9fc 	.word	0x2000b9fc
 800b284:	08011944 	.word	0x08011944

0800b288 <remove_device_properties>:

void remove_device_properties(uint32_t device_address){
 800b288:	b530      	push	{r4, r5, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b28a:	4d22      	ldr	r5, [pc, #136]	; (800b314 <remove_device_properties+0x8c>)
 800b28c:	682c      	ldr	r4, [r5, #0]
    if (device_properties_list.empty()) {
 800b28e:	42ac      	cmp	r4, r5
void remove_device_properties(uint32_t device_address){
 800b290:	b083      	sub	sp, #12
    if (device_properties_list.empty()) {
 800b292:	d035      	beq.n	800b300 <remove_device_properties+0x78>
        return;
    }

    auto device = device_properties_list.begin();
    while (device != device_properties_list.end()) {
        if ((*device)->prop.address == device_address) {
 800b294:	68a3      	ldr	r3, [r4, #8]
 800b296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b298:	4282      	cmp	r2, r0
 800b29a:	d00c      	beq.n	800b2b6 <remove_device_properties+0x2e>
	_M_node = _M_node->_M_next;
 800b29c:	6824      	ldr	r4, [r4, #0]
    while (device != device_properties_list.end()) {
 800b29e:	42ac      	cmp	r4, r5
 800b2a0:	d1f8      	bne.n	800b294 <remove_device_properties+0xc>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b2a2:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <remove_device_properties+0x90>)
 800b2a4:	9300      	str	r3, [sp, #0]
 800b2a6:	4a1d      	ldr	r2, [pc, #116]	; (800b31c <remove_device_properties+0x94>)
 800b2a8:	491d      	ldr	r1, [pc, #116]	; (800b320 <remove_device_properties+0x98>)
 800b2aa:	481e      	ldr	r0, [pc, #120]	; (800b324 <remove_device_properties+0x9c>)
 800b2ac:	2367      	movs	r3, #103	; 0x67
 800b2ae:	f7ff fd7d 	bl	800adac <LOG_DEBUG>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
	if((*device)->env.time != NULL) free((*device)->env.time);

	device_properties_list.erase(device);
	if((*device) != NULL) free((*device));
}
 800b2b2:	b003      	add	sp, #12
 800b2b4:	bd30      	pop	{r4, r5, pc}
	if((*device)->prop.name != NULL) free((*device)->prop.name);
 800b2b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b2b8:	b110      	cbz	r0, 800b2c0 <remove_device_properties+0x38>
 800b2ba:	f001 f851 	bl	800c360 <free>
	if((*device)->sett.time_start != NULL) free((*device)->sett.time_start);
 800b2be:	68a3      	ldr	r3, [r4, #8]
 800b2c0:	6a18      	ldr	r0, [r3, #32]
 800b2c2:	b110      	cbz	r0, 800b2ca <remove_device_properties+0x42>
 800b2c4:	f001 f84c 	bl	800c360 <free>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b2cc:	b110      	cbz	r0, 800b2d4 <remove_device_properties+0x4c>
 800b2ce:	f001 f847 	bl	800c360 <free>
	if((*device)->env.time != NULL) free((*device)->env.time);
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	68d8      	ldr	r0, [r3, #12]
 800b2d6:	b108      	cbz	r0, 800b2dc <remove_device_properties+0x54>
 800b2d8:	f001 f842 	bl	800c360 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800b2dc:	68ab      	ldr	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800b2de:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800b2e4:	f000 ff82 	bl	800c1ec <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	210c      	movs	r1, #12
 800b2ec:	f000 ff64 	bl	800c1b8 <_ZdlPvj>
	if((*device) != NULL) free((*device));
 800b2f0:	68a0      	ldr	r0, [r4, #8]
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	d0dd      	beq.n	800b2b2 <remove_device_properties+0x2a>
}
 800b2f6:	b003      	add	sp, #12
 800b2f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if((*device) != NULL) free((*device));
 800b2fc:	f001 b830 	b.w	800c360 <free>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b300:	4b05      	ldr	r3, [pc, #20]	; (800b318 <remove_device_properties+0x90>)
 800b302:	9300      	str	r3, [sp, #0]
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <remove_device_properties+0xa0>)
 800b306:	4906      	ldr	r1, [pc, #24]	; (800b320 <remove_device_properties+0x98>)
 800b308:	4806      	ldr	r0, [pc, #24]	; (800b324 <remove_device_properties+0x9c>)
 800b30a:	235a      	movs	r3, #90	; 0x5a
 800b30c:	f7ff fd4e 	bl	800adac <LOG_DEBUG>
        return;
 800b310:	e7cf      	b.n	800b2b2 <remove_device_properties+0x2a>
 800b312:	bf00      	nop
 800b314:	2000b9fc 	.word	0x2000b9fc
 800b318:	08011d4c 	.word	0x08011d4c
 800b31c:	08010e88 	.word	0x08010e88
 800b320:	08010d3c 	.word	0x08010d3c
 800b324:	08011d44 	.word	0x08011d44
 800b328:	08011d24 	.word	0x08011d24

0800b32c <select_device_properties>:

dev_struct_t *select_device_properties(uint32_t device_address){
 800b32c:	b510      	push	{r4, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b32e:	4c11      	ldr	r4, [pc, #68]	; (800b374 <select_device_properties+0x48>)
 800b330:	6823      	ldr	r3, [r4, #0]
    if (device_properties_list.empty()) {
 800b332:	42a3      	cmp	r3, r4
dev_struct_t *select_device_properties(uint32_t device_address){
 800b334:	b082      	sub	sp, #8
 800b336:	bf18      	it	ne
 800b338:	4601      	movne	r1, r0
    if (device_properties_list.empty()) {
 800b33a:	d011      	beq.n	800b360 <select_device_properties+0x34>
        return NULL;
    }

    auto device = device_properties_list.begin();
    while (device != device_properties_list.end()) {
        if ((*device)->prop.address == device_address) {
 800b33c:	6898      	ldr	r0, [r3, #8]
 800b33e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b340:	428a      	cmp	r2, r1
 800b342:	d00b      	beq.n	800b35c <select_device_properties+0x30>
	_M_node = _M_node->_M_next;
 800b344:	681b      	ldr	r3, [r3, #0]
    while (device != device_properties_list.end()) {
 800b346:	42a3      	cmp	r3, r4
 800b348:	d1f8      	bne.n	800b33c <select_device_properties+0x10>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b34a:	4b0b      	ldr	r3, [pc, #44]	; (800b378 <select_device_properties+0x4c>)
 800b34c:	480b      	ldr	r0, [pc, #44]	; (800b37c <select_device_properties+0x50>)
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	4a0b      	ldr	r2, [pc, #44]	; (800b380 <select_device_properties+0x54>)
 800b352:	490c      	ldr	r1, [pc, #48]	; (800b384 <select_device_properties+0x58>)
 800b354:	2384      	movs	r3, #132	; 0x84
 800b356:	f7ff fd29 	bl	800adac <LOG_DEBUG>
 800b35a:	2000      	movs	r0, #0
    	device_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
        return NULL;
    }

    return (*device);
}
 800b35c:	b002      	add	sp, #8
 800b35e:	bd10      	pop	{r4, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b360:	4b05      	ldr	r3, [pc, #20]	; (800b378 <select_device_properties+0x4c>)
 800b362:	4806      	ldr	r0, [pc, #24]	; (800b37c <select_device_properties+0x50>)
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	4a08      	ldr	r2, [pc, #32]	; (800b388 <select_device_properties+0x5c>)
 800b368:	4906      	ldr	r1, [pc, #24]	; (800b384 <select_device_properties+0x58>)
 800b36a:	2377      	movs	r3, #119	; 0x77
 800b36c:	f7ff fd1e 	bl	800adac <LOG_DEBUG>
        return NULL;
 800b370:	2000      	movs	r0, #0
 800b372:	e7f3      	b.n	800b35c <select_device_properties+0x30>
 800b374:	2000b9fc 	.word	0x2000b9fc
 800b378:	08011d68 	.word	0x08011d68
 800b37c:	08011d44 	.word	0x08011d44
 800b380:	08010e88 	.word	0x08010e88
 800b384:	08010d3c 	.word	0x08010d3c
 800b388:	08011d24 	.word	0x08011d24

0800b38c <firebase_init>:

void firebase_init(char *url, char *secret_key){
 800b38c:	b508      	push	{r3, lr}
	wifiif_firebase_init(url, secret_key);
 800b38e:	f7fa ffe7 	bl	8006360 <wifiif_firebase_init>
	vTaskDelay(50);
}
 800b392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelay(50);
 800b396:	2032      	movs	r0, #50	; 0x32
 800b398:	f7f7 bdd6 	b.w	8002f48 <vTaskDelay>

0800b39c <firebase_new_device>:

void firebase_new_device(dev_struct_t *dev){
 800b39c:	b530      	push	{r4, r5, lr}
 800b39e:	4604      	mov	r4, r0
 800b3a0:	b099      	sub	sp, #100	; 0x64
	asprintf(str, full_struct,
 800b3a2:	6800      	ldr	r0, [r0, #0]
 800b3a4:	4d21      	ldr	r5, [pc, #132]	; (800b42c <firebase_new_device+0x90>)
 800b3a6:	f7f5 f8ef 	bl	8000588 <__aeabi_f2d>
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b3ae:	682d      	ldr	r5, [r5, #0]
 800b3b0:	9113      	str	r1, [sp, #76]	; 0x4c
 800b3b2:	6a21      	ldr	r1, [r4, #32]
 800b3b4:	9112      	str	r1, [sp, #72]	; 0x48
 800b3b6:	4602      	mov	r2, r0
 800b3b8:	69e0      	ldr	r0, [r4, #28]
 800b3ba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b3be:	f7f5 f8e3 	bl	8000588 <__aeabi_f2d>
 800b3c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3c6:	69a0      	ldr	r0, [r4, #24]
 800b3c8:	f7f5 f8de 	bl	8000588 <__aeabi_f2d>
 800b3cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b3d0:	7d61      	ldrb	r1, [r4, #21]
 800b3d2:	910c      	str	r1, [sp, #48]	; 0x30
 800b3d4:	7d21      	ldrb	r1, [r4, #20]
 800b3d6:	910b      	str	r1, [sp, #44]	; 0x2c
 800b3d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b3da:	910a      	str	r1, [sp, #40]	; 0x28
 800b3dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b3de:	9109      	str	r1, [sp, #36]	; 0x24
 800b3e0:	7ce1      	ldrb	r1, [r4, #19]
 800b3e2:	9108      	str	r1, [sp, #32]
 800b3e4:	7ca1      	ldrb	r1, [r4, #18]
 800b3e6:	9107      	str	r1, [sp, #28]
 800b3e8:	7c61      	ldrb	r1, [r4, #17]
 800b3ea:	9106      	str	r1, [sp, #24]
 800b3ec:	7c21      	ldrb	r1, [r4, #16]
 800b3ee:	9105      	str	r1, [sp, #20]
 800b3f0:	68e1      	ldr	r1, [r4, #12]
 800b3f2:	9104      	str	r1, [sp, #16]
 800b3f4:	68a0      	ldr	r0, [r4, #8]
 800b3f6:	f7f5 f8c7 	bl	8000588 <__aeabi_f2d>
 800b3fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3fe:	6860      	ldr	r0, [r4, #4]
 800b400:	f7f5 f8c2 	bl	8000588 <__aeabi_f2d>
 800b404:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b408:	e9cd 0100 	strd	r0, r1, [sp]
 800b40c:	4629      	mov	r1, r5
 800b40e:	a817      	add	r0, sp, #92	; 0x5c
 800b410:	f000 ff46 	bl	800c2a0 <asiprintf>
	char *data;

	assign_struct(&data, dev);
	wifiif_firebase_set_data(dev->prop.name, data);
 800b414:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800b416:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b418:	f7fa ffbe 	bl	8006398 <wifiif_firebase_set_data>
	vTaskDelay(50);
 800b41c:	2032      	movs	r0, #50	; 0x32
 800b41e:	f7f7 fd93 	bl	8002f48 <vTaskDelay>

	free(data);
 800b422:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b424:	f000 ff9c 	bl	800c360 <free>
}
 800b428:	b019      	add	sp, #100	; 0x64
 800b42a:	bd30      	pop	{r4, r5, pc}
 800b42c:	200000e4 	.word	0x200000e4

0800b430 <firebase_remove_device>:

void firebase_remove_device(dev_struct_t *dev){
	if(dev == NULL || dev->prop.name == NULL) return;
 800b430:	b148      	cbz	r0, 800b446 <firebase_remove_device+0x16>
 800b432:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b434:	b138      	cbz	r0, 800b446 <firebase_remove_device+0x16>
void firebase_remove_device(dev_struct_t *dev){
 800b436:	b508      	push	{r3, lr}

	wifiif_firebase_remove_data(dev->prop.name);
 800b438:	f7fa ffd8 	bl	80063ec <wifiif_firebase_remove_data>
	vTaskDelay(50);
}
 800b43c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelay(50);
 800b440:	2032      	movs	r0, #50	; 0x32
 800b442:	f7f7 bd81 	b.w	8002f48 <vTaskDelay>
 800b446:	4770      	bx	lr

0800b448 <send_data_to_firebase>:

void send_data_to_firebase(uint32_t address, char *jdata){
 800b448:	b570      	push	{r4, r5, r6, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b44a:	4d5d      	ldr	r5, [pc, #372]	; (800b5c0 <send_data_to_firebase+0x178>)
 800b44c:	682b      	ldr	r3, [r5, #0]
 800b44e:	b09a      	sub	sp, #104	; 0x68
	char *data = NULL;
 800b450:	2400      	movs	r4, #0
    if (device_properties_list.empty()) {
 800b452:	42ab      	cmp	r3, r5
	pkt_json_t json;
 800b454:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 800b458:	f88d 4060 	strb.w	r4, [sp, #96]	; 0x60
 800b45c:	9419      	str	r4, [sp, #100]	; 0x64
void send_data_to_firebase(uint32_t address, char *jdata){
 800b45e:	460e      	mov	r6, r1
    if (device_properties_list.empty()) {
 800b460:	f000 80a4 	beq.w	800b5ac <send_data_to_firebase+0x164>
        if ((*device)->prop.address == device_address) {
 800b464:	689c      	ldr	r4, [r3, #8]
 800b466:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b468:	4290      	cmp	r0, r2
 800b46a:	d00b      	beq.n	800b484 <send_data_to_firebase+0x3c>
	_M_node = _M_node->_M_next;
 800b46c:	681b      	ldr	r3, [r3, #0]
    while (device != device_properties_list.end()) {
 800b46e:	42ab      	cmp	r3, r5
 800b470:	d1f8      	bne.n	800b464 <send_data_to_firebase+0x1c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b472:	4b54      	ldr	r3, [pc, #336]	; (800b5c4 <send_data_to_firebase+0x17c>)
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	4a54      	ldr	r2, [pc, #336]	; (800b5c8 <send_data_to_firebase+0x180>)
 800b478:	4954      	ldr	r1, [pc, #336]	; (800b5cc <send_data_to_firebase+0x184>)
 800b47a:	4855      	ldr	r0, [pc, #340]	; (800b5d0 <send_data_to_firebase+0x188>)
 800b47c:	2384      	movs	r3, #132	; 0x84
 800b47e:	f7ff fc95 	bl	800adac <LOG_DEBUG>
 800b482:	2400      	movs	r4, #0

	dev_struct_t *dev = select_device_properties(address);
	if(json_get_object(jdata, &json, (char *)"temp") == PKT_ERR_OK)
 800b484:	4a53      	ldr	r2, [pc, #332]	; (800b5d4 <send_data_to_firebase+0x18c>)
 800b486:	a917      	add	r1, sp, #92	; 0x5c
 800b488:	4630      	mov	r0, r6
 800b48a:	f7f9 fc73 	bl	8004d74 <json_get_object>
 800b48e:	2800      	cmp	r0, #0
 800b490:	f000 8083 	beq.w	800b59a <send_data_to_firebase+0x152>
		dev->env.temp = atof(json.value);
	json_release_object(&json);
 800b494:	a817      	add	r0, sp, #92	; 0x5c
 800b496:	f7f9 fd79 	bl	8004f8c <json_release_object>
	if(json_get_object(jdata, &json, (char *)"humi") == PKT_ERR_OK)
 800b49a:	4a4f      	ldr	r2, [pc, #316]	; (800b5d8 <send_data_to_firebase+0x190>)
 800b49c:	a917      	add	r1, sp, #92	; 0x5c
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f7f9 fc68 	bl	8004d74 <json_get_object>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d06f      	beq.n	800b588 <send_data_to_firebase+0x140>
		dev->env.humi = atof(json.value);
	json_release_object(&json);
 800b4a8:	a817      	add	r0, sp, #92	; 0x5c
 800b4aa:	f7f9 fd6f 	bl	8004f8c <json_release_object>
	if(json_get_object(jdata, &json, (char *)"current") == PKT_ERR_OK)
 800b4ae:	4a4b      	ldr	r2, [pc, #300]	; (800b5dc <send_data_to_firebase+0x194>)
 800b4b0:	a917      	add	r1, sp, #92	; 0x5c
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f7f9 fc5e 	bl	8004d74 <json_get_object>
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d05c      	beq.n	800b576 <send_data_to_firebase+0x12e>
		dev->env.curr = atof(json.value);
	json_release_object(&json);
 800b4bc:	a817      	add	r0, sp, #92	; 0x5c
 800b4be:	f7f9 fd65 	bl	8004f8c <json_release_object>
	if(json_get_object(jdata, &json, (char *)"time") == PKT_ERR_OK)
 800b4c2:	4a47      	ldr	r2, [pc, #284]	; (800b5e0 <send_data_to_firebase+0x198>)
 800b4c4:	a917      	add	r1, sp, #92	; 0x5c
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7f9 fc54 	bl	8004d74 <json_get_object>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d047      	beq.n	800b560 <send_data_to_firebase+0x118>
		memcpy(dev->env.time, json.value, strlen(json.value));
	json_release_object(&json);
 800b4d0:	a817      	add	r0, sp, #92	; 0x5c
 800b4d2:	f7f9 fd5b 	bl	8004f8c <json_release_object>
	asprintf(str, full_struct,
 800b4d6:	6820      	ldr	r0, [r4, #0]
 800b4d8:	4d42      	ldr	r5, [pc, #264]	; (800b5e4 <send_data_to_firebase+0x19c>)
 800b4da:	f7f5 f855 	bl	8000588 <__aeabi_f2d>
 800b4de:	460b      	mov	r3, r1
 800b4e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b4e2:	682d      	ldr	r5, [r5, #0]
 800b4e4:	9113      	str	r1, [sp, #76]	; 0x4c
 800b4e6:	6a21      	ldr	r1, [r4, #32]
 800b4e8:	9112      	str	r1, [sp, #72]	; 0x48
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	69e0      	ldr	r0, [r4, #28]
 800b4ee:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b4f2:	f7f5 f849 	bl	8000588 <__aeabi_f2d>
 800b4f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4fa:	69a0      	ldr	r0, [r4, #24]
 800b4fc:	f7f5 f844 	bl	8000588 <__aeabi_f2d>
 800b500:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b504:	7d61      	ldrb	r1, [r4, #21]
 800b506:	910c      	str	r1, [sp, #48]	; 0x30
 800b508:	7d21      	ldrb	r1, [r4, #20]
 800b50a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b50c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b50e:	910a      	str	r1, [sp, #40]	; 0x28
 800b510:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b512:	9109      	str	r1, [sp, #36]	; 0x24
 800b514:	7ce1      	ldrb	r1, [r4, #19]
 800b516:	9108      	str	r1, [sp, #32]
 800b518:	7ca1      	ldrb	r1, [r4, #18]
 800b51a:	9107      	str	r1, [sp, #28]
 800b51c:	7c61      	ldrb	r1, [r4, #17]
 800b51e:	9106      	str	r1, [sp, #24]
 800b520:	7c21      	ldrb	r1, [r4, #16]
 800b522:	9105      	str	r1, [sp, #20]
 800b524:	68e1      	ldr	r1, [r4, #12]
 800b526:	9104      	str	r1, [sp, #16]
 800b528:	68a0      	ldr	r0, [r4, #8]
 800b52a:	f7f5 f82d 	bl	8000588 <__aeabi_f2d>
 800b52e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b532:	6860      	ldr	r0, [r4, #4]
 800b534:	f7f5 f828 	bl	8000588 <__aeabi_f2d>
 800b538:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b53c:	e9cd 0100 	strd	r0, r1, [sp]
 800b540:	4629      	mov	r1, r5
 800b542:	a816      	add	r0, sp, #88	; 0x58
 800b544:	f000 feac 	bl	800c2a0 <asiprintf>

	assign_struct(&data, dev);

	wifiif_firebase_set_data(dev->prop.name, data);
 800b548:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b54a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800b54c:	f7fa ff24 	bl	8006398 <wifiif_firebase_set_data>
	vTaskDelay(50);
 800b550:	2032      	movs	r0, #50	; 0x32
 800b552:	f7f7 fcf9 	bl	8002f48 <vTaskDelay>

	free(data);
 800b556:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b558:	f000 ff02 	bl	800c360 <free>
}
 800b55c:	b01a      	add	sp, #104	; 0x68
 800b55e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(dev->env.time, json.value, strlen(json.value));
 800b560:	9919      	ldr	r1, [sp, #100]	; 0x64
 800b562:	9114      	str	r1, [sp, #80]	; 0x50
 800b564:	4608      	mov	r0, r1
 800b566:	f7f4 fe4d 	bl	8000204 <strlen>
 800b56a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b56c:	4602      	mov	r2, r0
 800b56e:	68e0      	ldr	r0, [r4, #12]
 800b570:	f000 fefe 	bl	800c370 <memcpy>
 800b574:	e7ac      	b.n	800b4d0 <send_data_to_firebase+0x88>
		dev->env.curr = atof(json.value);
 800b576:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b578:	f000 feb6 	bl	800c2e8 <atof>
 800b57c:	ec51 0b10 	vmov	r0, r1, d0
 800b580:	f7f5 fb52 	bl	8000c28 <__aeabi_d2f>
 800b584:	60a0      	str	r0, [r4, #8]
 800b586:	e799      	b.n	800b4bc <send_data_to_firebase+0x74>
		dev->env.humi = atof(json.value);
 800b588:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b58a:	f000 fead 	bl	800c2e8 <atof>
 800b58e:	ec51 0b10 	vmov	r0, r1, d0
 800b592:	f7f5 fb49 	bl	8000c28 <__aeabi_d2f>
 800b596:	6060      	str	r0, [r4, #4]
 800b598:	e786      	b.n	800b4a8 <send_data_to_firebase+0x60>
		dev->env.temp = atof(json.value);
 800b59a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b59c:	f000 fea4 	bl	800c2e8 <atof>
 800b5a0:	ec51 0b10 	vmov	r0, r1, d0
 800b5a4:	f7f5 fb40 	bl	8000c28 <__aeabi_d2f>
 800b5a8:	6020      	str	r0, [r4, #0]
 800b5aa:	e773      	b.n	800b494 <send_data_to_firebase+0x4c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b5ac:	4b05      	ldr	r3, [pc, #20]	; (800b5c4 <send_data_to_firebase+0x17c>)
 800b5ae:	9300      	str	r3, [sp, #0]
 800b5b0:	4a0d      	ldr	r2, [pc, #52]	; (800b5e8 <send_data_to_firebase+0x1a0>)
 800b5b2:	4906      	ldr	r1, [pc, #24]	; (800b5cc <send_data_to_firebase+0x184>)
 800b5b4:	4806      	ldr	r0, [pc, #24]	; (800b5d0 <send_data_to_firebase+0x188>)
 800b5b6:	2377      	movs	r3, #119	; 0x77
 800b5b8:	f7ff fbf8 	bl	800adac <LOG_DEBUG>
        return NULL;
 800b5bc:	e762      	b.n	800b484 <send_data_to_firebase+0x3c>
 800b5be:	bf00      	nop
 800b5c0:	2000b9fc 	.word	0x2000b9fc
 800b5c4:	08011d68 	.word	0x08011d68
 800b5c8:	08010e88 	.word	0x08010e88
 800b5cc:	08010d3c 	.word	0x08010d3c
 800b5d0:	08011d44 	.word	0x08011d44
 800b5d4:	080121b0 	.word	0x080121b0
 800b5d8:	08011d84 	.word	0x08011d84
 800b5dc:	08011d8c 	.word	0x08011d8c
 800b5e0:	08011d94 	.word	0x08011d94
 800b5e4:	200000e4 	.word	0x200000e4
 800b5e8:	08011d24 	.word	0x08011d24

0800b5ec <firebase_get_device_data>:


void firebase_get_device_data(uint32_t address){
 800b5ec:	b510      	push	{r4, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b5ee:	4c15      	ldr	r4, [pc, #84]	; (800b644 <firebase_get_device_data+0x58>)
 800b5f0:	6823      	ldr	r3, [r4, #0]
    if (device_properties_list.empty()) {
 800b5f2:	42a3      	cmp	r3, r4
void firebase_get_device_data(uint32_t address){
 800b5f4:	b082      	sub	sp, #8
    if (device_properties_list.empty()) {
 800b5f6:	d103      	bne.n	800b600 <firebase_get_device_data+0x14>
 800b5f8:	e00f      	b.n	800b61a <firebase_get_device_data+0x2e>
	_M_node = _M_node->_M_next;
 800b5fa:	681b      	ldr	r3, [r3, #0]
    while (device != device_properties_list.end()) {
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	d017      	beq.n	800b630 <firebase_get_device_data+0x44>
        if ((*device)->prop.address == device_address) {
 800b600:	689a      	ldr	r2, [r3, #8]
 800b602:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b604:	4288      	cmp	r0, r1
 800b606:	d1f8      	bne.n	800b5fa <firebase_get_device_data+0xe>
	dev_struct_t *dev = select_device_properties(address);

	wifiif_firebase_get_data(dev->prop.name);
 800b608:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800b60a:	f7fa fedb 	bl	80063c4 <wifiif_firebase_get_data>
	vTaskDelay(50);
 800b60e:	2032      	movs	r0, #50	; 0x32
}
 800b610:	b002      	add	sp, #8
 800b612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	vTaskDelay(50);
 800b616:	f7f7 bc97 	b.w	8002f48 <vTaskDelay>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b61a:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <firebase_get_device_data+0x5c>)
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	4a0b      	ldr	r2, [pc, #44]	; (800b64c <firebase_get_device_data+0x60>)
 800b620:	490b      	ldr	r1, [pc, #44]	; (800b650 <firebase_get_device_data+0x64>)
 800b622:	480c      	ldr	r0, [pc, #48]	; (800b654 <firebase_get_device_data+0x68>)
 800b624:	2377      	movs	r3, #119	; 0x77
 800b626:	f7ff fbc1 	bl	800adac <LOG_DEBUG>
	wifiif_firebase_get_data(dev->prop.name);
 800b62a:	2300      	movs	r3, #0
 800b62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b62e:	deff      	udf	#255	; 0xff
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b630:	4b05      	ldr	r3, [pc, #20]	; (800b648 <firebase_get_device_data+0x5c>)
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	4a08      	ldr	r2, [pc, #32]	; (800b658 <firebase_get_device_data+0x6c>)
 800b636:	4906      	ldr	r1, [pc, #24]	; (800b650 <firebase_get_device_data+0x64>)
 800b638:	4806      	ldr	r0, [pc, #24]	; (800b654 <firebase_get_device_data+0x68>)
 800b63a:	2384      	movs	r3, #132	; 0x84
 800b63c:	f7ff fbb6 	bl	800adac <LOG_DEBUG>
        return NULL;
 800b640:	e7f3      	b.n	800b62a <firebase_get_device_data+0x3e>
 800b642:	bf00      	nop
 800b644:	2000b9fc 	.word	0x2000b9fc
 800b648:	08011d68 	.word	0x08011d68
 800b64c:	08011d24 	.word	0x08011d24
 800b650:	08010d3c 	.word	0x08010d3c
 800b654:	08011d44 	.word	0x08011d44
 800b658:	08010e88 	.word	0x08010e88

0800b65c <_GLOBAL__sub_I_data_struct>:
	this->_M_next = this->_M_prev = this;
 800b65c:	4b02      	ldr	r3, [pc, #8]	; (800b668 <_GLOBAL__sub_I_data_struct+0xc>)
	this->_M_size = 0;
 800b65e:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 800b660:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 800b664:	609a      	str	r2, [r3, #8]
}
 800b666:	4770      	bx	lr
 800b668:	2000b9fc 	.word	0x2000b9fc

0800b66c <_GLOBAL__sub_D_data_struct>:
 800b66c:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800b66e:	4d06      	ldr	r5, [pc, #24]	; (800b688 <_GLOBAL__sub_D_data_struct+0x1c>)
 800b670:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 800b672:	42ac      	cmp	r4, r5
 800b674:	d006      	beq.n	800b684 <_GLOBAL__sub_D_data_struct+0x18>
 800b676:	4620      	mov	r0, r4
	  __cur = __tmp->_M_next;
 800b678:	6824      	ldr	r4, [r4, #0]
 800b67a:	210c      	movs	r1, #12
 800b67c:	f000 fd9c 	bl	800c1b8 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 800b680:	42ac      	cmp	r4, r5
 800b682:	d1f8      	bne.n	800b676 <_GLOBAL__sub_D_data_struct+0xa>
 800b684:	bd38      	pop	{r3, r4, r5, pc}
 800b686:	bf00      	nop
 800b688:	2000b9fc 	.word	0x2000b9fc

0800b68c <_ZL17exception_handlerv>:
		vTaskDelay(idle_time);
	}
}

static volatile  void exception_handler(void){
	gpio_set(GPIOB, 14);
 800b68c:	4801      	ldr	r0, [pc, #4]	; (800b694 <_ZL17exception_handlerv+0x8>)
 800b68e:	210e      	movs	r1, #14
 800b690:	f7fb be32 	b.w	80072f8 <gpio_set>
 800b694:	40020400 	.word	0x40020400

0800b698 <_Z27task_loraif_receive_processPv>:
void task_loraif_receive_process(void *){
 800b698:	b500      	push	{lr}
	spi5->init(&lora_spi_conf);
 800b69a:	4c22      	ldr	r4, [pc, #136]	; (800b724 <_Z27task_loraif_receive_processPv+0x8c>)
 800b69c:	4a22      	ldr	r2, [pc, #136]	; (800b728 <_Z27task_loraif_receive_processPv+0x90>)
 800b69e:	6821      	ldr	r1, [r4, #0]
void task_loraif_receive_process(void *){
 800b6a0:	b085      	sub	sp, #20
	spi5->init(&lora_spi_conf);
 800b6a2:	a802      	add	r0, sp, #8
 800b6a4:	f7fc f8f2 	bl	800788c <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, lora_gpioA0_event_handler, NULL);
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	491f      	ldr	r1, [pc, #124]	; (800b72c <_Z27task_loraif_receive_processPv+0x94>)
 800b6ae:	f7fb f8e1 	bl	8006874 <exti_register_event_handler>
	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize successful.");
 800b6b2:	2307      	movs	r3, #7
 800b6b4:	6821      	ldr	r1, [r4, #0]
 800b6b6:	4a1e      	ldr	r2, [pc, #120]	; (800b730 <_Z27task_loraif_receive_processPv+0x98>)
 800b6b8:	9300      	str	r3, [sp, #0]
 800b6ba:	481e      	ldr	r0, [pc, #120]	; (800b734 <_Z27task_loraif_receive_processPv+0x9c>)
 800b6bc:	2314      	movs	r3, #20
 800b6be:	f7f9 fd03 	bl	80050c8 <_ZN6sx127x4initEP3spilhm>
 800b6c2:	b348      	cbz	r0, 800b718 <_Z27task_loraif_receive_processPv+0x80>
 800b6c4:	491c      	ldr	r1, [pc, #112]	; (800b738 <_Z27task_loraif_receive_processPv+0xa0>)
 800b6c6:	481d      	ldr	r0, [pc, #116]	; (800b73c <_Z27task_loraif_receive_processPv+0xa4>)
 800b6c8:	f7ff fab6 	bl	800ac38 <LOG_INFO>
	lora.register_event_handler(NULL, lora_event_handler);
 800b6cc:	4a1c      	ldr	r2, [pc, #112]	; (800b740 <_Z27task_loraif_receive_processPv+0xa8>)
 800b6ce:	4819      	ldr	r0, [pc, #100]	; (800b734 <_Z27task_loraif_receive_processPv+0x9c>)
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b6d0:	4c1c      	ldr	r4, [pc, #112]	; (800b744 <_Z27task_loraif_receive_processPv+0xac>)
	lora.register_event_handler(NULL, lora_event_handler);
 800b6d2:	2100      	movs	r1, #0
	loraif_init(&lora, LORAIF_SEND_SYNCWORD, LORAIF_RECV_SYNCWORD, 10000, 3);
 800b6d4:	2503      	movs	r5, #3
	lora.register_event_handler(NULL, lora_event_handler);
 800b6d6:	f7f9 ff89 	bl	80055ec <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	loraif_init(&lora, LORAIF_SEND_SYNCWORD, LORAIF_RECV_SYNCWORD, 10000, 3);
 800b6da:	f242 7310 	movw	r3, #10000	; 0x2710
 800b6de:	22ab      	movs	r2, #171	; 0xab
 800b6e0:	2112      	movs	r1, #18
 800b6e2:	4814      	ldr	r0, [pc, #80]	; (800b734 <_Z27task_loraif_receive_processPv+0x9c>)
 800b6e4:	9500      	str	r5, [sp, #0]
 800b6e6:	f7f8 fe69 	bl	80043bc <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 800b6ea:	4817      	ldr	r0, [pc, #92]	; (800b748 <_Z27task_loraif_receive_processPv+0xb0>)
 800b6ec:	f7f8 fea8 	bl	8004440 <loraif_register_event_handler>
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2104      	movs	r1, #4
 800b6f4:	2014      	movs	r0, #20
 800b6f6:	f7f6 f9bd 	bl	8001a74 <xQueueGenericCreate>
	s_lora_enable_recv = xSemaphoreCreateBinary();
 800b6fa:	462a      	mov	r2, r5
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b6fc:	4603      	mov	r3, r0
	s_lora_enable_recv = xSemaphoreCreateBinary();
 800b6fe:	2100      	movs	r1, #0
 800b700:	2001      	movs	r0, #1
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b702:	6023      	str	r3, [r4, #0]
	s_lora_enable_recv = xSemaphoreCreateBinary();
 800b704:	f7f6 f9b6 	bl	8001a74 <xQueueGenericCreate>
 800b708:	4b10      	ldr	r3, [pc, #64]	; (800b74c <_Z27task_loraif_receive_processPv+0xb4>)
 800b70a:	6018      	str	r0, [r3, #0]
		loraif_receive_process(&q_loraif_receive_data);
 800b70c:	4620      	mov	r0, r4
 800b70e:	f7f8 ffcb 	bl	80046a8 <loraif_receive_process>
		loraif_check_device_timeout();
 800b712:	f7f9 f9a3 	bl	8004a5c <loraif_check_device_timeout>
	while(1){
 800b716:	e7f9      	b.n	800b70c <_Z27task_loraif_receive_processPv+0x74>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 800b718:	490d      	ldr	r1, [pc, #52]	; (800b750 <_Z27task_loraif_receive_processPv+0xb8>)
 800b71a:	4808      	ldr	r0, [pc, #32]	; (800b73c <_Z27task_loraif_receive_processPv+0xa4>)
 800b71c:	f7ff fb08 	bl	800ad30 <LOG_ERROR>
 800b720:	e7d4      	b.n	800b6cc <_Z27task_loraif_receive_processPv+0x34>
 800b722:	bf00      	nop
 800b724:	20000064 	.word	0x20000064
 800b728:	200000e8 	.word	0x200000e8
 800b72c:	0800b7f5 	.word	0x0800b7f5
 800b730:	19cf0e40 	.word	0x19cf0e40
 800b734:	2000ba20 	.word	0x2000ba20
 800b738:	08011fcc 	.word	0x08011fcc
 800b73c:	08011fe8 	.word	0x08011fe8
 800b740:	0800bd91 	.word	0x0800bd91
 800b744:	2000ba4c 	.word	0x2000ba4c
 800b748:	0800beb9 	.word	0x0800beb9
 800b74c:	2000ba50 	.word	0x2000ba50
 800b750:	08011ff0 	.word	0x08011ff0

0800b754 <_Z31task_loraif_request_device_dataPv>:
void task_loraif_request_device_data(void *){
 800b754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b758:	b084      	sub	sp, #16
	e_loraif_request_data = xEventGroupCreate();
 800b75a:	f7f5 ffef 	bl	800173c <xEventGroupCreate>
	tim5->init(&loraif_request_tim);
 800b75e:	4d1f      	ldr	r5, [pc, #124]	; (800b7dc <_Z31task_loraif_request_device_dataPv+0x88>)
	e_loraif_request_data = xEventGroupCreate();
 800b760:	4c1f      	ldr	r4, [pc, #124]	; (800b7e0 <_Z31task_loraif_request_device_dataPv+0x8c>)
	tim5->init(&loraif_request_tim);
 800b762:	6829      	ldr	r1, [r5, #0]
 800b764:	4a1f      	ldr	r2, [pc, #124]	; (800b7e4 <_Z31task_loraif_request_device_dataPv+0x90>)
	e_loraif_request_data = xEventGroupCreate();
 800b766:	6020      	str	r0, [r4, #0]
	tim5->init(&loraif_request_tim);
 800b768:	a802      	add	r0, sp, #8
 800b76a:	f7fc feff 	bl	800856c <_ZN3tim4initEP12tim_config_t>
	tim5->register_event_handler(loraif_request_data_tim_event_handler, NULL);
 800b76e:	6829      	ldr	r1, [r5, #0]
 800b770:	4a1d      	ldr	r2, [pc, #116]	; (800b7e8 <_Z31task_loraif_request_device_dataPv+0x94>)
 800b772:	4e1e      	ldr	r6, [pc, #120]	; (800b7ec <_Z31task_loraif_request_device_dataPv+0x98>)
					loraif_send_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800b774:	4f1e      	ldr	r7, [pc, #120]	; (800b7f0 <_Z31task_loraif_request_device_dataPv+0x9c>)
	tim5->register_event_handler(loraif_request_data_tim_event_handler, NULL);
 800b776:	2300      	movs	r3, #0
 800b778:	a802      	add	r0, sp, #8
 800b77a:	f7fd f811 	bl	80087a0 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_>
	tim5->start_it();
 800b77e:	6829      	ldr	r1, [r5, #0]
 800b780:	a802      	add	r0, sp, #8
 800b782:	f7fd f833 	bl	80087ec <_ZN3tim8start_itEv>
		EventBits_t bit = xEventGroupWaitBits(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, pdTRUE, pdFALSE, 10);
 800b786:	250a      	movs	r5, #10
 800b788:	6820      	ldr	r0, [r4, #0]
 800b78a:	9500      	str	r5, [sp, #0]
 800b78c:	2300      	movs	r3, #0
 800b78e:	2201      	movs	r2, #1
 800b790:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b794:	f7f5 ffe0 	bl	8001758 <xEventGroupWaitBits>
		if(bit == LORAIF_REQUEST_DATA_E_BITS && !loraif_device_list.empty()) {
 800b798:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b79c:	d1f4      	bne.n	800b788 <_Z31task_loraif_request_device_dataPv+0x34>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b79e:	f8d6 8000 	ldr.w	r8, [r6]
 800b7a2:	45b0      	cmp	r8, r6
 800b7a4:	d0f0      	beq.n	800b788 <_Z31task_loraif_request_device_dataPv+0x34>
			__IO uint32_t tick = get_tick();
 800b7a6:	f7fc fe87 	bl	80084b8 <get_tick>
 800b7aa:	9002      	str	r0, [sp, #8]
		    	if(get_tick() - tick > 2000){
 800b7ac:	f7fc fe84 	bl	80084b8 <get_tick>
 800b7b0:	9b02      	ldr	r3, [sp, #8]
 800b7b2:	1ac0      	subs	r0, r0, r3
 800b7b4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 800b7b8:	d9f8      	bls.n	800b7ac <_Z31task_loraif_request_device_dataPv+0x58>
					loraif_send_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800b7ba:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b7be:	2301      	movs	r3, #1
 800b7c0:	6810      	ldr	r0, [r2, #0]
 800b7c2:	2103      	movs	r1, #3
 800b7c4:	463a      	mov	r2, r7
 800b7c6:	f7f8 fe81 	bl	80044cc <loraif_send_request>
					tick = get_tick();
 800b7ca:	f7fc fe75 	bl	80084b8 <get_tick>
	_M_node = _M_node->_M_next;
 800b7ce:	f8d8 8000 	ldr.w	r8, [r8]
 800b7d2:	9002      	str	r0, [sp, #8]
      operator++() _GLIBCXX_NOEXCEPT
 800b7d4:	45b0      	cmp	r8, r6
 800b7d6:	d1e9      	bne.n	800b7ac <_Z31task_loraif_request_device_dataPv+0x58>
 800b7d8:	e7d6      	b.n	800b788 <_Z31task_loraif_request_device_dataPv+0x34>
 800b7da:	bf00      	nop
 800b7dc:	20000074 	.word	0x20000074
 800b7e0:	2000ba08 	.word	0x2000ba08
 800b7e4:	20000120 	.word	0x20000120
 800b7e8:	0800be1d 	.word	0x0800be1d
 800b7ec:	2000b26c 	.word	0x2000b26c
 800b7f0:	08012008 	.word	0x08012008

0800b7f4 <_Z25lora_gpioA0_event_handlerPv>:
	lora.IRQHandler();
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <_Z25lora_gpioA0_event_handlerPv+0x8>)
 800b7f6:	f7fa bb09 	b.w	8005e0c <_ZN6sx127x10IRQHandlerEv>
 800b7fa:	bf00      	nop
 800b7fc:	2000ba20 	.word	0x2000ba20

0800b800 <_Z27task_wifiif_get_device_dataPv>:
void task_wifiif_get_device_data(void *){
 800b800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b802:	b085      	sub	sp, #20
	e_wifiif_get_device_data = xEventGroupCreate();
 800b804:	f7f5 ff9a 	bl	800173c <xEventGroupCreate>
	tim2->init(&wifiif_get_control_tim);
 800b808:	4c1b      	ldr	r4, [pc, #108]	; (800b878 <_Z27task_wifiif_get_device_dataPv+0x78>)
	e_wifiif_get_device_data = xEventGroupCreate();
 800b80a:	4d1c      	ldr	r5, [pc, #112]	; (800b87c <_Z27task_wifiif_get_device_dataPv+0x7c>)
	tim2->init(&wifiif_get_control_tim);
 800b80c:	4a1c      	ldr	r2, [pc, #112]	; (800b880 <_Z27task_wifiif_get_device_dataPv+0x80>)
 800b80e:	6821      	ldr	r1, [r4, #0]
	e_wifiif_get_device_data = xEventGroupCreate();
 800b810:	6028      	str	r0, [r5, #0]
	tim2->init(&wifiif_get_control_tim);
 800b812:	a802      	add	r0, sp, #8
 800b814:	f7fc feaa 	bl	800856c <_ZN3tim4initEP12tim_config_t>
	tim2->register_event_handler(wifiif_get_device_data_tim_event_handler, NULL);
 800b818:	4a1a      	ldr	r2, [pc, #104]	; (800b884 <_Z27task_wifiif_get_device_dataPv+0x84>)
 800b81a:	6821      	ldr	r1, [r4, #0]
 800b81c:	4f1a      	ldr	r7, [pc, #104]	; (800b888 <_Z27task_wifiif_get_device_dataPv+0x88>)
 800b81e:	2300      	movs	r3, #0
 800b820:	a802      	add	r0, sp, #8
 800b822:	f7fc ffbd 	bl	80087a0 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_>
	tim2->start_it();
 800b826:	6821      	ldr	r1, [r4, #0]
 800b828:	a802      	add	r0, sp, #8
 800b82a:	f7fc ffdf 	bl	80087ec <_ZN3tim8start_itEv>
		EventBits_t bit = xEventGroupWaitBits(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, pdTRUE, pdFALSE, 20);
 800b82e:	2614      	movs	r6, #20
 800b830:	6828      	ldr	r0, [r5, #0]
 800b832:	9600      	str	r6, [sp, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	2201      	movs	r2, #1
 800b838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b83c:	f7f5 ff8c 	bl	8001758 <xEventGroupWaitBits>
		if(bit == WIFIIF_GET_DEVICE_DATA_E_BITS && !loraif_device_list.empty()) {
 800b840:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b844:	d1f4      	bne.n	800b830 <_Z27task_wifiif_get_device_dataPv+0x30>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b846:	683c      	ldr	r4, [r7, #0]
 800b848:	42bc      	cmp	r4, r7
 800b84a:	d0f1      	beq.n	800b830 <_Z27task_wifiif_get_device_dataPv+0x30>
			__IO uint32_t tick = get_tick();
 800b84c:	f7fc fe34 	bl	80084b8 <get_tick>
 800b850:	9002      	str	r0, [sp, #8]
				if(get_tick() - tick > 1000){
 800b852:	f7fc fe31 	bl	80084b8 <get_tick>
 800b856:	9b02      	ldr	r3, [sp, #8]
 800b858:	1ac0      	subs	r0, r0, r3
 800b85a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b85e:	d9f8      	bls.n	800b852 <_Z27task_wifiif_get_device_dataPv+0x52>
					firebase_get_device_data((*device)->address);
 800b860:	68a3      	ldr	r3, [r4, #8]
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	f7ff fec2 	bl	800b5ec <firebase_get_device_data>
					tick = get_tick();
 800b868:	f7fc fe26 	bl	80084b8 <get_tick>
	_M_node = _M_node->_M_next;
 800b86c:	6824      	ldr	r4, [r4, #0]
 800b86e:	9002      	str	r0, [sp, #8]
      operator++() _GLIBCXX_NOEXCEPT
 800b870:	42bc      	cmp	r4, r7
 800b872:	d1ee      	bne.n	800b852 <_Z27task_wifiif_get_device_dataPv+0x52>
 800b874:	e7dc      	b.n	800b830 <_Z27task_wifiif_get_device_dataPv+0x30>
 800b876:	bf00      	nop
 800b878:	20000070 	.word	0x20000070
 800b87c:	2000ba0c 	.word	0x2000ba0c
 800b880:	20000144 	.word	0x20000144
 800b884:	0800be41 	.word	0x0800be41
 800b888:	2000b26c 	.word	0x2000b26c

0800b88c <_Z17task_wifi_connectPv>:
void task_wifi_connect(void *){
 800b88c:	b500      	push	{lr}
	usart1->init(&wifiif_uart_conf);
 800b88e:	4c16      	ldr	r4, [pc, #88]	; (800b8e8 <_Z17task_wifi_connectPv+0x5c>)
 800b890:	4a16      	ldr	r2, [pc, #88]	; (800b8ec <_Z17task_wifi_connectPv+0x60>)
 800b892:	6821      	ldr	r1, [r4, #0]
void task_wifi_connect(void *){
 800b894:	b083      	sub	sp, #12
	usart1->init(&wifiif_uart_conf);
 800b896:	4668      	mov	r0, sp
 800b898:	f7fe f8aa 	bl	80099f0 <_ZN5usart4initEP14usart_config_t>
	usart1->register_event_handler(wifi_uart_handler, NULL);
 800b89c:	2300      	movs	r3, #0
 800b89e:	4a14      	ldr	r2, [pc, #80]	; (800b8f0 <_Z17task_wifi_connectPv+0x64>)
 800b8a0:	6821      	ldr	r1, [r4, #0]
 800b8a2:	4668      	mov	r0, sp
 800b8a4:	f7fe fa9c 	bl	8009de0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>
	usart1->receive_to_idle_start_it(WIFIIF_BUFF_SIZE);
 800b8a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b8ac:	6821      	ldr	r1, [r4, #0]
 800b8ae:	4668      	mov	r0, sp
 800b8b0:	f7fe faee 	bl	8009e90 <_ZN5usart24receive_to_idle_start_itEt>
	wifiif_init(wifiif_uart_send_string);
 800b8b4:	480f      	ldr	r0, [pc, #60]	; (800b8f4 <_Z17task_wifi_connectPv+0x68>)
 800b8b6:	f7fa fd01 	bl	80062bc <wifiif_init>
	wifiif_register_command_handler(wifiif_command_handler);
 800b8ba:	480f      	ldr	r0, [pc, #60]	; (800b8f8 <_Z17task_wifi_connectPv+0x6c>)
 800b8bc:	f7fa fd2e 	bl	800631c <wifiif_register_command_handler>
	gpio_reset(GPIOA, 8);
 800b8c0:	2108      	movs	r1, #8
 800b8c2:	480e      	ldr	r0, [pc, #56]	; (800b8fc <_Z17task_wifi_connectPv+0x70>)
 800b8c4:	f7fb fd20 	bl	8007308 <gpio_reset>
	vTaskDelay(50);
 800b8c8:	2032      	movs	r0, #50	; 0x32
 800b8ca:	f7f7 fb3d 	bl	8002f48 <vTaskDelay>
	gpio_set(GPIOA, 8);
 800b8ce:	480b      	ldr	r0, [pc, #44]	; (800b8fc <_Z17task_wifi_connectPv+0x70>)
 800b8d0:	2108      	movs	r1, #8
 800b8d2:	f7fb fd11 	bl	80072f8 <gpio_set>
	wifiif_check_connection();
 800b8d6:	f7fa fd27 	bl	8006328 <wifiif_check_connection>
		wifiif_check_connection();
 800b8da:	f7fa fd25 	bl	8006328 <wifiif_check_connection>
		vTaskDelay(2000);
 800b8de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b8e2:	f7f7 fb31 	bl	8002f48 <vTaskDelay>
	while(1){
 800b8e6:	e7f8      	b.n	800b8da <_Z17task_wifi_connectPv+0x4e>
 800b8e8:	20000078 	.word	0x20000078
 800b8ec:	20000168 	.word	0x20000168
 800b8f0:	0800be65 	.word	0x0800be65
 800b8f4:	0800b901 	.word	0x0800b901
 800b8f8:	0800b925 	.word	0x0800b925
 800b8fc:	40020000 	.word	0x40020000

0800b900 <_Z23wifiif_uart_send_stringPct>:
void wifiif_uart_send_string(char *str, uint16_t size){
 800b900:	b510      	push	{r4, lr}
	usart1->transmit((uint8_t *)str, size);
 800b902:	4c07      	ldr	r4, [pc, #28]	; (800b920 <_Z23wifiif_uart_send_stringPct+0x20>)
void wifiif_uart_send_string(char *str, uint16_t size){
 800b904:	b082      	sub	sp, #8
 800b906:	4602      	mov	r2, r0
 800b908:	460b      	mov	r3, r1
	usart1->transmit((uint8_t *)str, size);
 800b90a:	4668      	mov	r0, sp
 800b90c:	6821      	ldr	r1, [r4, #0]
 800b90e:	f7fe fa89 	bl	8009e24 <_ZN5usart8transmitEPht>
	vTaskDelay(50);
 800b912:	2032      	movs	r0, #50	; 0x32
}
 800b914:	b002      	add	sp, #8
 800b916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	vTaskDelay(50);
 800b91a:	f7f7 bb15 	b.w	8002f48 <vTaskDelay>
 800b91e:	bf00      	nop
 800b920:	20000078 	.word	0x20000078

0800b924 <_Z22wifiif_command_handler10wifi_cmd_tPv>:
void wifiif_command_handler(wifi_cmd_t cmd, void *data){
 800b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	460c      	mov	r4, r1
 800b92a:	b08c      	sub	sp, #48	; 0x30
	switch(cmd){
 800b92c:	280a      	cmp	r0, #10
 800b92e:	d81d      	bhi.n	800b96c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x48>
 800b930:	e8df f000 	tbb	[pc, r0]
 800b934:	a9470638 	.word	0xa9470638
 800b938:	1c1c1cbb 	.word	0x1c1c1cbb
 800b93c:	1c1c      	.short	0x1c1c
 800b93e:	1f          	.byte	0x1f
 800b93f:	00          	.byte	0x00
			pkt_err_t err = json_get_object((char *)data, &json, (char *)"state");
 800b940:	ad09      	add	r5, sp, #36	; 0x24
			pkt_json_t json;
 800b942:	2300      	movs	r3, #0
			pkt_err_t err = json_get_object((char *)data, &json, (char *)"state");
 800b944:	4a85      	ldr	r2, [pc, #532]	; (800bb5c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x238>)
			pkt_json_t json;
 800b946:	9309      	str	r3, [sp, #36]	; 0x24
			pkt_err_t err = json_get_object((char *)data, &json, (char *)"state");
 800b948:	4629      	mov	r1, r5
 800b94a:	4620      	mov	r0, r4
			pkt_json_t json;
 800b94c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800b950:	930b      	str	r3, [sp, #44]	; 0x2c
			pkt_err_t err = json_get_object((char *)data, &json, (char *)"state");
 800b952:	f7f9 fa0f 	bl	8004d74 <json_get_object>
			if(err == PKT_ERR_OK){
 800b956:	b930      	cbnz	r0, 800b966 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x42>
				if(strcmp(json.value, "disconnected") == 0) {
 800b958:	4981      	ldr	r1, [pc, #516]	; (800bb60 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x23c>)
 800b95a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b95c:	f7f4 fc48 	bl	80001f0 <strcmp>
 800b960:	2800      	cmp	r0, #0
 800b962:	f000 80e5 	beq.w	800bb30 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x20c>
				json_release_object(&json_sett);
 800b966:	4628      	mov	r0, r5
 800b968:	f7f9 fb10 	bl	8004f8c <json_release_object>
}
 800b96c:	b00c      	add	sp, #48	; 0x30
 800b96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pkt_json_t json, json_ctrl, json_sett;
 800b972:	2300      	movs	r3, #0
			err = json_get_object((char *)data, &json, (char *)"address");
 800b974:	4a7b      	ldr	r2, [pc, #492]	; (800bb64 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x240>)
			pkt_json_t json, json_ctrl, json_sett;
 800b976:	9303      	str	r3, [sp, #12]
			err = json_get_object((char *)data, &json, (char *)"address");
 800b978:	a903      	add	r1, sp, #12
 800b97a:	4620      	mov	r0, r4
			pkt_json_t json, json_ctrl, json_sett;
 800b97c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b980:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800b984:	f88d 3010 	strb.w	r3, [sp, #16]
 800b988:	f88d 301c 	strb.w	r3, [sp, #28]
 800b98c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 800b990:	930b      	str	r3, [sp, #44]	; 0x2c
			err = json_get_object((char *)data, &json, (char *)"address");
 800b992:	f7f9 f9ef 	bl	8004d74 <json_get_object>
			if(err != PKT_ERR_OK){
 800b996:	2800      	cmp	r0, #0
 800b998:	f000 8093 	beq.w	800bac2 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x19e>
				json_release_object(&json);
 800b99c:	a803      	add	r0, sp, #12
 800b99e:	f7f9 faf5 	bl	8004f8c <json_release_object>
				break;
 800b9a2:	e7e3      	b.n	800b96c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x48>
			LOG_EVENT(TAG, "WIFI error.");
 800b9a4:	4970      	ldr	r1, [pc, #448]	; (800bb68 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x244>)
 800b9a6:	4871      	ldr	r0, [pc, #452]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800b9a8:	f7ff fa3e 	bl	800ae28 <LOG_EVENT>
			wifi_err_cnt++;
 800b9ac:	4a70      	ldr	r2, [pc, #448]	; (800bb70 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x24c>)
 800b9ae:	7813      	ldrb	r3, [r2, #0]
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	b2db      	uxtb	r3, r3
			if(wifi_err_cnt == 10){
 800b9b4:	2b0a      	cmp	r3, #10
 800b9b6:	f000 80cb 	beq.w	800bb50 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x22c>
			wifi_err_cnt++;
 800b9ba:	7013      	strb	r3, [r2, #0]
}
 800b9bc:	b00c      	add	sp, #48	; 0x30
 800b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_set(GPIOA, 3);
 800b9c2:	486c      	ldr	r0, [pc, #432]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
			if(h_task_loraif_receive_process)     vTaskSuspend(h_task_loraif_receive_process);
 800b9c4:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 800bbc4 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x2a0>
			gpio_set(GPIOA, 3);
 800b9c8:	2103      	movs	r1, #3
 800b9ca:	f7fb fc95 	bl	80072f8 <gpio_set>
			LOG_ERROR(TAG, "WiFi restarted.");
 800b9ce:	496a      	ldr	r1, [pc, #424]	; (800bb78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x254>)
 800b9d0:	4866      	ldr	r0, [pc, #408]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800b9d2:	f7ff f9ad 	bl	800ad30 <LOG_ERROR>
			LOG_ERROR(TAG, "Stopped LoRa and WiFi interface services.");
 800b9d6:	4969      	ldr	r1, [pc, #420]	; (800bb7c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x258>)
 800b9d8:	4864      	ldr	r0, [pc, #400]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800b9da:	f7ff f9a9 	bl	800ad30 <LOG_ERROR>
			LOG_WARN(TAG, "WiFi connecting .......");
 800b9de:	4863      	ldr	r0, [pc, #396]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800b9e0:	4967      	ldr	r1, [pc, #412]	; (800bb80 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x25c>)
 800b9e2:	f7ff f967 	bl	800acb4 <LOG_WARN>
			if(h_task_loraif_receive_process)     vTaskSuspend(h_task_loraif_receive_process);
 800b9e6:	f8d8 0000 	ldr.w	r0, [r8]
 800b9ea:	b108      	cbz	r0, 800b9f0 <_Z22wifiif_command_handler10wifi_cmd_tPv+0xcc>
 800b9ec:	f7f7 fb06 	bl	8002ffc <vTaskSuspend>
			if(h_task_loraif_response_to_device)  vTaskSuspend(h_task_loraif_response_to_device);
 800b9f0:	4f64      	ldr	r7, [pc, #400]	; (800bb84 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x260>)
 800b9f2:	6838      	ldr	r0, [r7, #0]
 800b9f4:	b108      	cbz	r0, 800b9fa <_Z22wifiif_command_handler10wifi_cmd_tPv+0xd6>
 800b9f6:	f7f7 fb01 	bl	8002ffc <vTaskSuspend>
			if(h_task_loraif_request_device_data) vTaskSuspend(h_task_loraif_request_device_data);
 800b9fa:	4e63      	ldr	r6, [pc, #396]	; (800bb88 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x264>)
 800b9fc:	6830      	ldr	r0, [r6, #0]
 800b9fe:	b108      	cbz	r0, 800ba04 <_Z22wifiif_command_handler10wifi_cmd_tPv+0xe0>
 800ba00:	f7f7 fafc 	bl	8002ffc <vTaskSuspend>
			if(h_task_wifiif_get_device_data)     vTaskSuspend(h_task_wifiif_get_device_data);
 800ba04:	4d61      	ldr	r5, [pc, #388]	; (800bb8c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x268>)
 800ba06:	6828      	ldr	r0, [r5, #0]
 800ba08:	b108      	cbz	r0, 800ba0e <_Z22wifiif_command_handler10wifi_cmd_tPv+0xea>
 800ba0a:	f7f7 faf7 	bl	8002ffc <vTaskSuspend>
			if(s_lora_enable_recv) xSemaphoreTake(s_lora_enable_recv, 10);
 800ba0e:	4c60      	ldr	r4, [pc, #384]	; (800bb90 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x26c>)
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	b110      	cbz	r0, 800ba1a <_Z22wifiif_command_handler10wifi_cmd_tPv+0xf6>
 800ba14:	210a      	movs	r1, #10
 800ba16:	f7f6 fc65 	bl	80022e4 <xQueueSemaphoreTake>
			vTaskDelay(100);
 800ba1a:	2064      	movs	r0, #100	; 0x64
 800ba1c:	f7f7 fa94 	bl	8002f48 <vTaskDelay>
			wifiif_wifi_connect((char *)WIFI_SSID, (char *)WIFI_PASS, (char *)"WIFI_AUTH_WPA2_PSK");
 800ba20:	4a5c      	ldr	r2, [pc, #368]	; (800bb94 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x270>)
 800ba22:	495d      	ldr	r1, [pc, #372]	; (800bb98 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x274>)
 800ba24:	485d      	ldr	r0, [pc, #372]	; (800bb9c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x278>)
 800ba26:	f7fa fc85 	bl	8006334 <wifiif_wifi_connect>
 800ba2a:	e001      	b.n	800ba30 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x10c>
				vTaskDelay(100);
 800ba2c:	f7f7 fa8c 	bl	8002f48 <vTaskDelay>
			while(!wifiif_wificonnected()){
 800ba30:	f7fa fcf0 	bl	8006414 <wifiif_wificonnected>
 800ba34:	4603      	mov	r3, r0
				vTaskDelay(100);
 800ba36:	2064      	movs	r0, #100	; 0x64
			while(!wifiif_wificonnected()){
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d0f7      	beq.n	800ba2c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x108>
			wifiif_check_connection();
 800ba3c:	f7fa fc74 	bl	8006328 <wifiif_check_connection>
			firebase_init((char *)"https://iotnhakho-default-rtdb.asia-southeast1.firebasedatabase.app/", NULL);
 800ba40:	4857      	ldr	r0, [pc, #348]	; (800bba0 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x27c>)
 800ba42:	2100      	movs	r1, #0
 800ba44:	f7ff fca2 	bl	800b38c <firebase_init>
			if(h_task_loraif_receive_process)     vTaskResume(h_task_loraif_receive_process);
 800ba48:	f8d8 0000 	ldr.w	r0, [r8]
 800ba4c:	b108      	cbz	r0, 800ba52 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x12e>
 800ba4e:	f7f7 fb4d 	bl	80030ec <vTaskResume>
			if(h_task_loraif_response_to_device)  vTaskResume(h_task_loraif_response_to_device);
 800ba52:	6838      	ldr	r0, [r7, #0]
 800ba54:	b108      	cbz	r0, 800ba5a <_Z22wifiif_command_handler10wifi_cmd_tPv+0x136>
 800ba56:	f7f7 fb49 	bl	80030ec <vTaskResume>
			if(h_task_loraif_request_device_data) vTaskResume(h_task_loraif_request_device_data);
 800ba5a:	6830      	ldr	r0, [r6, #0]
 800ba5c:	b108      	cbz	r0, 800ba62 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x13e>
 800ba5e:	f7f7 fb45 	bl	80030ec <vTaskResume>
			if(h_task_wifiif_get_device_data)     vTaskResume(h_task_wifiif_get_device_data);
 800ba62:	6828      	ldr	r0, [r5, #0]
 800ba64:	b108      	cbz	r0, 800ba6a <_Z22wifiif_command_handler10wifi_cmd_tPv+0x146>
 800ba66:	f7f7 fb41 	bl	80030ec <vTaskResume>
			if(s_lora_enable_recv) xSemaphoreGive(s_lora_enable_recv);
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	b120      	cbz	r0, 800ba78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x154>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	461a      	mov	r2, r3
 800ba72:	4619      	mov	r1, r3
 800ba74:	f7f6 f840 	bl	8001af8 <xQueueGenericSend>
			LOG_INFO(TAG, "Started LoRa and WiFi interface services.");
 800ba78:	494a      	ldr	r1, [pc, #296]	; (800bba4 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x280>)
 800ba7a:	483c      	ldr	r0, [pc, #240]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
}
 800ba7c:	b00c      	add	sp, #48	; 0x30
 800ba7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			LOG_INFO(TAG, "Started LoRa and WiFi interface services.");
 800ba82:	f7ff b8d9 	b.w	800ac38 <LOG_INFO>
			LOG_ERROR(TAG, "WiFi require connect.");
 800ba86:	4948      	ldr	r1, [pc, #288]	; (800bba8 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x284>)
 800ba88:	4838      	ldr	r0, [pc, #224]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800ba8a:	f7ff f951 	bl	800ad30 <LOG_ERROR>
			gpio_reset(GPIOA, 8);
 800ba8e:	4839      	ldr	r0, [pc, #228]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
 800ba90:	2108      	movs	r1, #8
				gpio_reset(GPIOA, 8);
 800ba92:	f7fb fc39 	bl	8007308 <gpio_reset>
				vTaskDelay(50);
 800ba96:	2032      	movs	r0, #50	; 0x32
 800ba98:	f7f7 fa56 	bl	8002f48 <vTaskDelay>
				gpio_set(GPIOA, 8);
 800ba9c:	4835      	ldr	r0, [pc, #212]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
 800ba9e:	2108      	movs	r1, #8
}
 800baa0:	b00c      	add	sp, #48	; 0x30
 800baa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				gpio_set(GPIOA, 8);
 800baa6:	f7fb bc27 	b.w	80072f8 <gpio_set>
			LOG_EVENT(TAG, "WiFi connect state: %s", data);
 800baaa:	4940      	ldr	r1, [pc, #256]	; (800bbac <_Z22wifiif_command_handler10wifi_cmd_tPv+0x288>)
 800baac:	482f      	ldr	r0, [pc, #188]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800baae:	4622      	mov	r2, r4
 800bab0:	f7ff f9ba 	bl	800ae28 <LOG_EVENT>
			gpio_reset(GPIOA, 3);
 800bab4:	482f      	ldr	r0, [pc, #188]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
 800bab6:	2103      	movs	r1, #3
}
 800bab8:	b00c      	add	sp, #48	; 0x30
 800baba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			gpio_reset(GPIOA, 3);
 800babe:	f7fb bc23 	b.w	8007308 <gpio_reset>
			device_address = strtol(json.value, NULL, 16);
 800bac2:	4601      	mov	r1, r0
 800bac4:	2210      	movs	r2, #16
 800bac6:	9805      	ldr	r0, [sp, #20]
			if(update_time == false){
 800bac8:	4d39      	ldr	r5, [pc, #228]	; (800bbb0 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x28c>)
			device_address = strtol(json.value, NULL, 16);
 800baca:	f002 faa9 	bl	800e020 <strtol>
 800bace:	4606      	mov	r6, r0
			json_release_object(&json);
 800bad0:	a803      	add	r0, sp, #12
 800bad2:	f7f9 fa5b 	bl	8004f8c <json_release_object>
			dev_struct_t *dev = select_device_properties(device_address);
 800bad6:	4630      	mov	r0, r6
 800bad8:	f7ff fc28 	bl	800b32c <select_device_properties>
			if(update_time == false){
 800badc:	782b      	ldrb	r3, [r5, #0]
			dev_struct_t *dev = select_device_properties(device_address);
 800bade:	4607      	mov	r7, r0
			if(update_time == false){
 800bae0:	b953      	cbnz	r3, 800baf8 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x1d4>
				err = json_get_object((char *)data, &json_ctrl, (char *)"control");
 800bae2:	4a34      	ldr	r2, [pc, #208]	; (800bbb4 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x290>)
 800bae4:	a906      	add	r1, sp, #24
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7f9 f944 	bl	8004d74 <json_get_object>
				if(err != PKT_ERR_OK){
 800baec:	2800      	cmp	r0, #0
 800baee:	d06b      	beq.n	800bbc8 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x2a4>
					json_release_object(&json_ctrl);
 800baf0:	a806      	add	r0, sp, #24
 800baf2:	f7f9 fa4b 	bl	8004f8c <json_release_object>
					break;
 800baf6:	e739      	b.n	800b96c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x48>
				if(json_get_object((char *)data, &json, (char *)"time") != PKT_ERR_OK)
 800baf8:	4a2f      	ldr	r2, [pc, #188]	; (800bbb8 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x294>)
 800bafa:	4620      	mov	r0, r4
 800bafc:	a903      	add	r1, sp, #12
 800bafe:	f7f9 f939 	bl	8004d74 <json_get_object>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	f040 80e2 	bne.w	800bccc <_Z22wifiif_command_handler10wifi_cmd_tPv+0x3a8>
				asprintf(&tx_data, "{\"time\":%s}", json.value);
 800bb08:	9a05      	ldr	r2, [sp, #20]
 800bb0a:	492c      	ldr	r1, [pc, #176]	; (800bbbc <_Z22wifiif_command_handler10wifi_cmd_tPv+0x298>)
 800bb0c:	a802      	add	r0, sp, #8
 800bb0e:	f000 fbc7 	bl	800c2a0 <asiprintf>
				loraif_send_request(device_address, LORA_UPDATE_DATA, tx_data, 1);
 800bb12:	2301      	movs	r3, #1
 800bb14:	9a02      	ldr	r2, [sp, #8]
 800bb16:	2105      	movs	r1, #5
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f7f8 fcd7 	bl	80044cc <loraif_send_request>
				free(tx_data);
 800bb1e:	9802      	ldr	r0, [sp, #8]
 800bb20:	f000 fc1e 	bl	800c360 <free>
				json_release_object(&json);
 800bb24:	a803      	add	r0, sp, #12
 800bb26:	f7f9 fa31 	bl	8004f8c <json_release_object>
				update_time = false;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	702b      	strb	r3, [r5, #0]
}
 800bb2e:	e71d      	b.n	800b96c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x48>
					LOG_ERROR(TAG, "WiFi state disconnected.");
 800bb30:	4923      	ldr	r1, [pc, #140]	; (800bbc0 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x29c>)
 800bb32:	480e      	ldr	r0, [pc, #56]	; (800bb6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x248>)
 800bb34:	f7ff f8fc 	bl	800ad30 <LOG_ERROR>
					gpio_reset(GPIOA, 8);
 800bb38:	2108      	movs	r1, #8
 800bb3a:	480e      	ldr	r0, [pc, #56]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
 800bb3c:	f7fb fbe4 	bl	8007308 <gpio_reset>
					vTaskDelay(50);
 800bb40:	2032      	movs	r0, #50	; 0x32
 800bb42:	f7f7 fa01 	bl	8002f48 <vTaskDelay>
					gpio_set(GPIOA, 8);
 800bb46:	480b      	ldr	r0, [pc, #44]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
 800bb48:	2108      	movs	r1, #8
 800bb4a:	f7fb fbd5 	bl	80072f8 <gpio_set>
			json_release_object(&json);
 800bb4e:	e70a      	b.n	800b966 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x42>
				wifi_err_cnt = 0;
 800bb50:	2300      	movs	r3, #0
				gpio_reset(GPIOA, 8);
 800bb52:	4808      	ldr	r0, [pc, #32]	; (800bb74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x250>)
				wifi_err_cnt = 0;
 800bb54:	7013      	strb	r3, [r2, #0]
				gpio_reset(GPIOA, 8);
 800bb56:	2108      	movs	r1, #8
 800bb58:	e79b      	b.n	800ba92 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x16e>
 800bb5a:	bf00      	nop
 800bb5c:	08011234 	.word	0x08011234
 800bb60:	08011248 	.word	0x08011248
 800bb64:	08012154 	.word	0x08012154
 800bb68:	08012130 	.word	0x08012130
 800bb6c:	08011fe8 	.word	0x08011fe8
 800bb70:	2000ba55 	.word	0x2000ba55
 800bb74:	40020000 	.word	0x40020000
 800bb78:	0801200c 	.word	0x0801200c
 800bb7c:	0801201c 	.word	0x0801201c
 800bb80:	08012048 	.word	0x08012048
 800bb84:	2000ba18 	.word	0x2000ba18
 800bb88:	2000ba14 	.word	0x2000ba14
 800bb8c:	2000ba1c 	.word	0x2000ba1c
 800bb90:	2000ba50 	.word	0x2000ba50
 800bb94:	08012060 	.word	0x08012060
 800bb98:	08012074 	.word	0x08012074
 800bb9c:	08012080 	.word	0x08012080
 800bba0:	08012088 	.word	0x08012088
 800bba4:	080120d0 	.word	0x080120d0
 800bba8:	080120fc 	.word	0x080120fc
 800bbac:	0801213c 	.word	0x0801213c
 800bbb0:	2000ba54 	.word	0x2000ba54
 800bbb4:	0801215c 	.word	0x0801215c
 800bbb8:	08011d94 	.word	0x08011d94
 800bbbc:	080121f0 	.word	0x080121f0
 800bbc0:	08012114 	.word	0x08012114
 800bbc4:	2000ba10 	.word	0x2000ba10
				err = json_get_object((char *)data, &json_sett, (char *)"settings");
 800bbc8:	ad09      	add	r5, sp, #36	; 0x24
 800bbca:	4a65      	ldr	r2, [pc, #404]	; (800bd60 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x43c>)
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f7f9 f8d0 	bl	8004d74 <json_get_object>
				if(err != PKT_ERR_OK){
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	f47f aec6 	bne.w	800b966 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x42>
				if(json_get_object((char *)data, &json, (char *)"relay1") == PKT_ERR_OK)
 800bbda:	4a62      	ldr	r2, [pc, #392]	; (800bd64 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x440>)
 800bbdc:	a903      	add	r1, sp, #12
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7f9 f8c8 	bl	8004d74 <json_get_object>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	f000 80b6 	beq.w	800bd56 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x432>
				json_release_object(&json);
 800bbea:	a803      	add	r0, sp, #12
 800bbec:	f7f9 f9ce 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"relay2") == PKT_ERR_OK)
 800bbf0:	4a5d      	ldr	r2, [pc, #372]	; (800bd68 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x444>)
 800bbf2:	a903      	add	r1, sp, #12
 800bbf4:	4620      	mov	r0, r4
 800bbf6:	f7f9 f8bd 	bl	8004d74 <json_get_object>
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	f000 80a6 	beq.w	800bd4c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x428>
				json_release_object(&json);
 800bc00:	a803      	add	r0, sp, #12
 800bc02:	f7f9 f9c3 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"relay3") == PKT_ERR_OK)
 800bc06:	4a59      	ldr	r2, [pc, #356]	; (800bd6c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x448>)
 800bc08:	a903      	add	r1, sp, #12
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	f7f9 f8b2 	bl	8004d74 <json_get_object>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	f000 8096 	beq.w	800bd42 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x41e>
				json_release_object(&json);
 800bc16:	a803      	add	r0, sp, #12
 800bc18:	f7f9 f9b8 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"relay4") == PKT_ERR_OK)
 800bc1c:	4a54      	ldr	r2, [pc, #336]	; (800bd70 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x44c>)
 800bc1e:	a903      	add	r1, sp, #12
 800bc20:	4620      	mov	r0, r4
 800bc22:	f7f9 f8a7 	bl	8004d74 <json_get_object>
 800bc26:	2800      	cmp	r0, #0
 800bc28:	f000 8086 	beq.w	800bd38 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x414>
				json_release_object(&json);
 800bc2c:	a803      	add	r0, sp, #12
 800bc2e:	f7f9 f9ad 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"mode") == PKT_ERR_OK)
 800bc32:	4a50      	ldr	r2, [pc, #320]	; (800bd74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x450>)
 800bc34:	a903      	add	r1, sp, #12
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7f9 f89c 	bl	8004d74 <json_get_object>
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	d076      	beq.n	800bd2e <_Z22wifiif_command_handler10wifi_cmd_tPv+0x40a>
				json_release_object(&json);
 800bc40:	a803      	add	r0, sp, #12
 800bc42:	f7f9 f9a3 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"type") == PKT_ERR_OK)
 800bc46:	4a4c      	ldr	r2, [pc, #304]	; (800bd78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x454>)
 800bc48:	a903      	add	r1, sp, #12
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f7f9 f892 	bl	8004d74 <json_get_object>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d067      	beq.n	800bd24 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x400>
				json_release_object(&json);
 800bc54:	a803      	add	r0, sp, #12
 800bc56:	f7f9 f999 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"max_temp") == PKT_ERR_OK)
 800bc5a:	4a48      	ldr	r2, [pc, #288]	; (800bd7c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x458>)
 800bc5c:	a903      	add	r1, sp, #12
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f7f9 f888 	bl	8004d74 <json_get_object>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d054      	beq.n	800bd12 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x3ee>
				json_release_object(&json);
 800bc68:	a803      	add	r0, sp, #12
 800bc6a:	f7f9 f98f 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"min_temp") == PKT_ERR_OK)
 800bc6e:	4a44      	ldr	r2, [pc, #272]	; (800bd80 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x45c>)
 800bc70:	a903      	add	r1, sp, #12
 800bc72:	4620      	mov	r0, r4
 800bc74:	f7f9 f87e 	bl	8004d74 <json_get_object>
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d041      	beq.n	800bd00 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x3dc>
				json_release_object(&json);
 800bc7c:	a803      	add	r0, sp, #12
 800bc7e:	f7f9 f985 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"time_start") == PKT_ERR_OK)
 800bc82:	4a40      	ldr	r2, [pc, #256]	; (800bd84 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x460>)
 800bc84:	a903      	add	r1, sp, #12
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7f9 f874 	bl	8004d74 <json_get_object>
 800bc8c:	b368      	cbz	r0, 800bcea <_Z22wifiif_command_handler10wifi_cmd_tPv+0x3c6>
				json_release_object(&json);
 800bc8e:	a803      	add	r0, sp, #12
 800bc90:	f7f9 f97c 	bl	8004f8c <json_release_object>
				if(json_get_object((char *)data, &json, (char *)"time_stop") == PKT_ERR_OK)
 800bc94:	4a3c      	ldr	r2, [pc, #240]	; (800bd88 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x464>)
 800bc96:	4620      	mov	r0, r4
 800bc98:	a903      	add	r1, sp, #12
 800bc9a:	f7f9 f86b 	bl	8004d74 <json_get_object>
 800bc9e:	b1c8      	cbz	r0, 800bcd4 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x3b0>
				json_release_object(&json);
 800bca0:	a803      	add	r0, sp, #12
 800bca2:	f7f9 f973 	bl	8004f8c <json_release_object>
				asprintf(&tx_data, "{\"control\":%s,\"settings\":%s}", json_ctrl.value, json_sett.value);
 800bca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca8:	9a08      	ldr	r2, [sp, #32]
 800bcaa:	4938      	ldr	r1, [pc, #224]	; (800bd8c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x468>)
 800bcac:	a802      	add	r0, sp, #8
 800bcae:	f000 faf7 	bl	800c2a0 <asiprintf>
				loraif_send_request(device_address, LORA_UPDATE_DATA, tx_data, 1);
 800bcb2:	9a02      	ldr	r2, [sp, #8]
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	2105      	movs	r1, #5
 800bcba:	f7f8 fc07 	bl	80044cc <loraif_send_request>
				free(tx_data);
 800bcbe:	9802      	ldr	r0, [sp, #8]
 800bcc0:	f000 fb4e 	bl	800c360 <free>
				json_release_object(&json_ctrl);
 800bcc4:	a806      	add	r0, sp, #24
 800bcc6:	f7f9 f961 	bl	8004f8c <json_release_object>
 800bcca:	e64c      	b.n	800b966 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x42>
					json_release_object(&json);
 800bccc:	a803      	add	r0, sp, #12
 800bcce:	f7f9 f95d 	bl	8004f8c <json_release_object>
 800bcd2:	e719      	b.n	800bb08 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x1e4>
					memcpy(dev->sett.time_stop, json.value, strlen(json.value));
 800bcd4:	9905      	ldr	r1, [sp, #20]
 800bcd6:	9101      	str	r1, [sp, #4]
 800bcd8:	4608      	mov	r0, r1
 800bcda:	f7f4 fa93 	bl	8000204 <strlen>
 800bcde:	9901      	ldr	r1, [sp, #4]
 800bce0:	4602      	mov	r2, r0
 800bce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bce4:	f000 fb44 	bl	800c370 <memcpy>
 800bce8:	e7da      	b.n	800bca0 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x37c>
					memcpy(dev->sett.time_start, json.value, strlen(json.value));
 800bcea:	9905      	ldr	r1, [sp, #20]
 800bcec:	9101      	str	r1, [sp, #4]
 800bcee:	4608      	mov	r0, r1
 800bcf0:	f7f4 fa88 	bl	8000204 <strlen>
 800bcf4:	9901      	ldr	r1, [sp, #4]
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	6a38      	ldr	r0, [r7, #32]
 800bcfa:	f000 fb39 	bl	800c370 <memcpy>
 800bcfe:	e7c6      	b.n	800bc8e <_Z22wifiif_command_handler10wifi_cmd_tPv+0x36a>
					dev->sett.min_temp = atof(json.value);
 800bd00:	9805      	ldr	r0, [sp, #20]
 800bd02:	f000 faf1 	bl	800c2e8 <atof>
 800bd06:	ec51 0b10 	vmov	r0, r1, d0
 800bd0a:	f7f4 ff8d 	bl	8000c28 <__aeabi_d2f>
 800bd0e:	61f8      	str	r0, [r7, #28]
 800bd10:	e7b4      	b.n	800bc7c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x358>
					dev->sett.max_temp = atof(json.value);
 800bd12:	9805      	ldr	r0, [sp, #20]
 800bd14:	f000 fae8 	bl	800c2e8 <atof>
 800bd18:	ec51 0b10 	vmov	r0, r1, d0
 800bd1c:	f7f4 ff84 	bl	8000c28 <__aeabi_d2f>
 800bd20:	61b8      	str	r0, [r7, #24]
 800bd22:	e7a1      	b.n	800bc68 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x344>
					dev->sett.type = atoi(json.value);
 800bd24:	9805      	ldr	r0, [sp, #20]
 800bd26:	f000 fae2 	bl	800c2ee <atoi>
 800bd2a:	7578      	strb	r0, [r7, #21]
 800bd2c:	e792      	b.n	800bc54 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x330>
					dev->sett.mode = atoi(json.value);
 800bd2e:	9805      	ldr	r0, [sp, #20]
 800bd30:	f000 fadd 	bl	800c2ee <atoi>
 800bd34:	7538      	strb	r0, [r7, #20]
 800bd36:	e783      	b.n	800bc40 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x31c>
					dev->ctrl.relay4 = atoi(json.value);
 800bd38:	9805      	ldr	r0, [sp, #20]
 800bd3a:	f000 fad8 	bl	800c2ee <atoi>
 800bd3e:	74f8      	strb	r0, [r7, #19]
 800bd40:	e774      	b.n	800bc2c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x308>
					dev->ctrl.relay3 = atoi(json.value);
 800bd42:	9805      	ldr	r0, [sp, #20]
 800bd44:	f000 fad3 	bl	800c2ee <atoi>
 800bd48:	74b8      	strb	r0, [r7, #18]
 800bd4a:	e764      	b.n	800bc16 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x2f2>
					dev->ctrl.relay2 = atoi(json.value);
 800bd4c:	9805      	ldr	r0, [sp, #20]
 800bd4e:	f000 face 	bl	800c2ee <atoi>
 800bd52:	7478      	strb	r0, [r7, #17]
 800bd54:	e754      	b.n	800bc00 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x2dc>
					dev->ctrl.relay1 = atoi(json.value);
 800bd56:	9805      	ldr	r0, [sp, #20]
 800bd58:	f000 fac9 	bl	800c2ee <atoi>
 800bd5c:	7438      	strb	r0, [r7, #16]
 800bd5e:	e744      	b.n	800bbea <_Z22wifiif_command_handler10wifi_cmd_tPv+0x2c6>
 800bd60:	08012164 	.word	0x08012164
 800bd64:	08012170 	.word	0x08012170
 800bd68:	08012178 	.word	0x08012178
 800bd6c:	08012180 	.word	0x08012180
 800bd70:	08012188 	.word	0x08012188
 800bd74:	08012190 	.word	0x08012190
 800bd78:	08012198 	.word	0x08012198
 800bd7c:	080121a0 	.word	0x080121a0
 800bd80:	080121ac 	.word	0x080121ac
 800bd84:	080121b8 	.word	0x080121b8
 800bd88:	080121c4 	.word	0x080121c4
 800bd8c:	080121d0 	.word	0x080121d0

0800bd90 <_Z18lora_event_handlerPvh>:
	if(packetSize){
 800bd90:	b901      	cbnz	r1, 800bd94 <_Z18lora_event_handlerPvh+0x4>
 800bd92:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 800bd94:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 800bd96:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 800bd98:	b083      	sub	sp, #12
 800bd9a:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 800bd9c:	f000 fad8 	bl	800c350 <malloc>
 800bda0:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 800bda2:	4818      	ldr	r0, [pc, #96]	; (800be04 <_Z18lora_event_handlerPvh+0x74>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 800bda4:	9100      	str	r1, [sp, #0]
		lora.receive(lora_RxBuf);
 800bda6:	f7f9 fed3 	bl	8005b50 <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 800bdaa:	9b00      	ldr	r3, [sp, #0]
 800bdac:	2500      	movs	r5, #0
 800bdae:	551d      	strb	r5, [r3, r4]
		if(loraif_check_receive_data_crc(lora_RxBuf) == true){
 800bdb0:	9800      	ldr	r0, [sp, #0]
 800bdb2:	f7f8 fb4b 	bl	800444c <loraif_check_receive_data_crc>
 800bdb6:	b940      	cbnz	r0, 800bdca <_Z18lora_event_handlerPvh+0x3a>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 800bdb8:	4813      	ldr	r0, [pc, #76]	; (800be08 <_Z18lora_event_handlerPvh+0x78>)
 800bdba:	4914      	ldr	r1, [pc, #80]	; (800be0c <_Z18lora_event_handlerPvh+0x7c>)
 800bdbc:	f7fe ffb8 	bl	800ad30 <LOG_ERROR>
			free(lora_RxBuf);
 800bdc0:	9800      	ldr	r0, [sp, #0]
 800bdc2:	f000 facd 	bl	800c360 <free>
}
 800bdc6:	b003      	add	sp, #12
 800bdc8:	bd30      	pop	{r4, r5, pc}
			if(xSemaphoreTakeFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken)){
 800bdca:	4c11      	ldr	r4, [pc, #68]	; (800be10 <_Z18lora_event_handlerPvh+0x80>)
			BaseType_t pxHigherPriorityTaskWoken = pdTRUE;
 800bdcc:	2301      	movs	r3, #1
			if(xSemaphoreTakeFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken)){
 800bdce:	6820      	ldr	r0, [r4, #0]
			BaseType_t pxHigherPriorityTaskWoken = pdTRUE;
 800bdd0:	9301      	str	r3, [sp, #4]
			if(xSemaphoreTakeFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken)){
 800bdd2:	aa01      	add	r2, sp, #4
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	f7f6 fc0f 	bl	80025f8 <xQueueReceiveFromISR>
 800bdda:	2800      	cmp	r0, #0
 800bddc:	d0f0      	beq.n	800bdc0 <_Z18lora_event_handlerPvh+0x30>
				if(xQueueSendFromISR(q_loraif_receive_data, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS)
 800bdde:	4a0d      	ldr	r2, [pc, #52]	; (800be14 <_Z18lora_event_handlerPvh+0x84>)
 800bde0:	462b      	mov	r3, r5
 800bde2:	6810      	ldr	r0, [r2, #0]
 800bde4:	4669      	mov	r1, sp
 800bde6:	aa01      	add	r2, sp, #4
 800bde8:	f7f6 f83c 	bl	8001e64 <xQueueGenericSendFromISR>
 800bdec:	2801      	cmp	r0, #1
 800bdee:	d104      	bne.n	800bdfa <_Z18lora_event_handlerPvh+0x6a>
				xSemaphoreGiveFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken);
 800bdf0:	6820      	ldr	r0, [r4, #0]
 800bdf2:	a901      	add	r1, sp, #4
 800bdf4:	f7f6 f89c 	bl	8001f30 <xQueueGiveFromISR>
 800bdf8:	e7e5      	b.n	800bdc6 <_Z18lora_event_handlerPvh+0x36>
					LOG_ERROR(TAG, "LoRa error queue receive.");
 800bdfa:	4907      	ldr	r1, [pc, #28]	; (800be18 <_Z18lora_event_handlerPvh+0x88>)
 800bdfc:	4802      	ldr	r0, [pc, #8]	; (800be08 <_Z18lora_event_handlerPvh+0x78>)
 800bdfe:	f7fe ff97 	bl	800ad30 <LOG_ERROR>
 800be02:	e7f5      	b.n	800bdf0 <_Z18lora_event_handlerPvh+0x60>
 800be04:	2000ba20 	.word	0x2000ba20
 800be08:	08011fe8 	.word	0x08011fe8
 800be0c:	08012218 	.word	0x08012218
 800be10:	2000ba50 	.word	0x2000ba50
 800be14:	2000ba4c 	.word	0x2000ba4c
 800be18:	080121fc 	.word	0x080121fc

0800be1c <_Z37loraif_request_data_tim_event_handler13tim_channel_t11tim_event_tPv>:
	if(event == TIM_EVENT_UPDATE){
 800be1c:	b101      	cbz	r1, 800be20 <_Z37loraif_request_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x4>
 800be1e:	4770      	bx	lr
void loraif_request_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800be20:	b500      	push	{lr}
 800be22:	460b      	mov	r3, r1
		xEventGroupSetBitsFromISR(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800be24:	4905      	ldr	r1, [pc, #20]	; (800be3c <_Z37loraif_request_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x20>)
void loraif_request_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800be26:	b083      	sub	sp, #12
		xEventGroupSetBitsFromISR(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800be28:	6808      	ldr	r0, [r1, #0]
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800be2a:	9301      	str	r3, [sp, #4]
		xEventGroupSetBitsFromISR(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800be2c:	aa01      	add	r2, sp, #4
 800be2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800be32:	f7f5 fd19 	bl	8001868 <xEventGroupSetBitsFromISR>
}
 800be36:	b003      	add	sp, #12
 800be38:	f85d fb04 	ldr.w	pc, [sp], #4
 800be3c:	2000ba08 	.word	0x2000ba08

0800be40 <_Z40wifiif_get_device_data_tim_event_handler13tim_channel_t11tim_event_tPv>:
	if(event == TIM_EVENT_UPDATE){
 800be40:	b101      	cbz	r1, 800be44 <_Z40wifiif_get_device_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x4>
 800be42:	4770      	bx	lr
void wifiif_get_device_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800be44:	b500      	push	{lr}
		xEventGroupSetBitsFromISR(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800be46:	4a06      	ldr	r2, [pc, #24]	; (800be60 <_Z40wifiif_get_device_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x20>)
void wifiif_get_device_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800be48:	b083      	sub	sp, #12
		BaseType_t pxHigherPriorityTaskWoken = pdTRUE;
 800be4a:	2301      	movs	r3, #1
		xEventGroupSetBitsFromISR(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800be4c:	6810      	ldr	r0, [r2, #0]
		BaseType_t pxHigherPriorityTaskWoken = pdTRUE;
 800be4e:	9301      	str	r3, [sp, #4]
		xEventGroupSetBitsFromISR(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800be50:	aa01      	add	r2, sp, #4
 800be52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800be56:	f7f5 fd07 	bl	8001868 <xEventGroupSetBitsFromISR>
}
 800be5a:	b003      	add	sp, #12
 800be5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800be60:	2000ba0c 	.word	0x2000ba0c

0800be64 <_Z17wifi_uart_handler13usart_event_tPv>:
	if(event == (USART_EVENT_IDLE_STATE)){
 800be64:	2804      	cmp	r0, #4
 800be66:	d000      	beq.n	800be6a <_Z17wifi_uart_handler13usart_event_tPv+0x6>
 800be68:	4770      	bx	lr
void wifi_uart_handler(usart_event_t event, void *param){
 800be6a:	b510      	push	{r4, lr}
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800be6c:	4c0f      	ldr	r4, [pc, #60]	; (800beac <_Z17wifi_uart_handler13usart_event_tPv+0x48>)
void wifi_uart_handler(usart_event_t event, void *param){
 800be6e:	b086      	sub	sp, #24
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800be70:	a802      	add	r0, sp, #8
 800be72:	6821      	ldr	r1, [r4, #0]
 800be74:	aa01      	add	r2, sp, #4
 800be76:	f7fe f887 	bl	8009f88 <_ZN5usart10get_bufferEPPh>
		if(!is_oke(&ret)){
 800be7a:	a802      	add	r0, sp, #8
 800be7c:	f7ff f892 	bl	800afa4 <is_oke>
 800be80:	b150      	cbz	r0, 800be98 <_Z17wifi_uart_handler13usart_event_tPv+0x34>
			wifiif_get_break_data(rxdata);
 800be82:	9801      	ldr	r0, [sp, #4]
 800be84:	f7fa f9ec 	bl	8006260 <wifiif_get_break_data>
		usart1->receive_to_idle_start_it(WIFIIF_BUFF_SIZE);
 800be88:	6821      	ldr	r1, [r4, #0]
 800be8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800be8e:	a804      	add	r0, sp, #16
 800be90:	f7fd fffe 	bl	8009e90 <_ZN5usart24receive_to_idle_start_itEt>
}
 800be94:	b006      	add	sp, #24
 800be96:	bd10      	pop	{r4, pc}
			LOG_ERROR(TAG, "Can't get UART data.");
 800be98:	4805      	ldr	r0, [pc, #20]	; (800beb0 <_Z17wifi_uart_handler13usart_event_tPv+0x4c>)
 800be9a:	4906      	ldr	r1, [pc, #24]	; (800beb4 <_Z17wifi_uart_handler13usart_event_tPv+0x50>)
 800be9c:	f7fe ff48 	bl	800ad30 <LOG_ERROR>
			if(rxdata != NULL) free(rxdata);
 800bea0:	9801      	ldr	r0, [sp, #4]
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d0f6      	beq.n	800be94 <_Z17wifi_uart_handler13usart_event_tPv+0x30>
 800bea6:	f000 fa5b 	bl	800c360 <free>
			return;
 800beaa:	e7f3      	b.n	800be94 <_Z17wifi_uart_handler13usart_event_tPv+0x30>
 800beac:	20000078 	.word	0x20000078
 800beb0:	08011fe8 	.word	0x08011fe8
 800beb4:	08012238 	.word	0x08012238

0800beb8 <_Z20loraif_event_handler12lora_event_tmPc>:
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800beb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(h_task_loraif_request_device_data != NULL) vTaskSuspend(h_task_loraif_request_device_data);
 800bebc:	4f59      	ldr	r7, [pc, #356]	; (800c024 <_Z20loraif_event_handler12lora_event_tmPc+0x16c>)
 800bebe:	683b      	ldr	r3, [r7, #0]
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800bec0:	b084      	sub	sp, #16
 800bec2:	4604      	mov	r4, r0
 800bec4:	460e      	mov	r6, r1
 800bec6:	4615      	mov	r5, r2
	if(h_task_loraif_request_device_data != NULL) vTaskSuspend(h_task_loraif_request_device_data);
 800bec8:	b113      	cbz	r3, 800bed0 <_Z20loraif_event_handler12lora_event_tmPc+0x18>
 800beca:	4618      	mov	r0, r3
 800becc:	f7f7 f896 	bl	8002ffc <vTaskSuspend>
	if(data != NULL) LOG_INFO(TAG, "%s [packet RSSI = %d, RSSI = %d]", data, lora.packetRssi(), lora.rssi());
 800bed0:	b16d      	cbz	r5, 800beee <_Z20loraif_event_handler12lora_event_tmPc+0x36>
 800bed2:	4855      	ldr	r0, [pc, #340]	; (800c028 <_Z20loraif_event_handler12lora_event_tmPc+0x170>)
 800bed4:	f7f9 fd5e 	bl	8005994 <_ZN6sx127x10packetRssiEv>
 800bed8:	9003      	str	r0, [sp, #12]
 800beda:	4853      	ldr	r0, [pc, #332]	; (800c028 <_Z20loraif_event_handler12lora_event_tmPc+0x170>)
 800bedc:	f7f9 fd8a 	bl	80059f4 <_ZN6sx127x4rssiEv>
 800bee0:	9b03      	ldr	r3, [sp, #12]
 800bee2:	9000      	str	r0, [sp, #0]
 800bee4:	4951      	ldr	r1, [pc, #324]	; (800c02c <_Z20loraif_event_handler12lora_event_tmPc+0x174>)
 800bee6:	4852      	ldr	r0, [pc, #328]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bee8:	462a      	mov	r2, r5
 800beea:	f7fe fea5 	bl	800ac38 <LOG_INFO>
	switch(event){
 800beee:	2c08      	cmp	r4, #8
 800bef0:	d811      	bhi.n	800bf16 <_Z20loraif_event_handler12lora_event_tmPc+0x5e>
 800bef2:	e8df f004 	tbb	[pc, r4]
 800bef6:	1f1a      	.short	0x1f1a
 800bef8:	40102410 	.word	0x40102410
 800befc:	7b45      	.short	0x7b45
 800befe:	05          	.byte	0x05
 800beff:	00          	.byte	0x00
			LOG_WARN(TAG, "LORA_DEVICE_NOT_RESPONSE");
 800bf00:	494c      	ldr	r1, [pc, #304]	; (800c034 <_Z20loraif_event_handler12lora_event_tmPc+0x17c>)
 800bf02:	484b      	ldr	r0, [pc, #300]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bf04:	f7fe fed6 	bl	800acb4 <LOG_WARN>
	if(h_task_loraif_request_device_data != NULL) vTaskResume(h_task_loraif_request_device_data);
 800bf08:	6838      	ldr	r0, [r7, #0]
 800bf0a:	b158      	cbz	r0, 800bf24 <_Z20loraif_event_handler12lora_event_tmPc+0x6c>
}
 800bf0c:	b004      	add	sp, #16
 800bf0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	if(h_task_loraif_request_device_data != NULL) vTaskResume(h_task_loraif_request_device_data);
 800bf12:	f7f7 b8eb 	b.w	80030ec <vTaskResume>
			LOG_EVENT(TAG, "LoRa other event.");
 800bf16:	4846      	ldr	r0, [pc, #280]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bf18:	4947      	ldr	r1, [pc, #284]	; (800c038 <_Z20loraif_event_handler12lora_event_tmPc+0x180>)
 800bf1a:	f7fe ff85 	bl	800ae28 <LOG_EVENT>
	if(h_task_loraif_request_device_data != NULL) vTaskResume(h_task_loraif_request_device_data);
 800bf1e:	6838      	ldr	r0, [r7, #0]
 800bf20:	2800      	cmp	r0, #0
 800bf22:	d1f3      	bne.n	800bf0c <_Z20loraif_event_handler12lora_event_tmPc+0x54>
}
 800bf24:	b004      	add	sp, #16
 800bf26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_EVENT(TAG, "LORA_ERR");
 800bf2a:	4944      	ldr	r1, [pc, #272]	; (800c03c <_Z20loraif_event_handler12lora_event_tmPc+0x184>)
 800bf2c:	4840      	ldr	r0, [pc, #256]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bf2e:	f7fe ff7b 	bl	800ae28 <LOG_EVENT>
		break;
 800bf32:	e7e9      	b.n	800bf08 <_Z20loraif_event_handler12lora_event_tmPc+0x50>
			LOG_EVENT(TAG, "LORA_REQ_ADDRESS");
 800bf34:	4942      	ldr	r1, [pc, #264]	; (800c040 <_Z20loraif_event_handler12lora_event_tmPc+0x188>)
 800bf36:	483e      	ldr	r0, [pc, #248]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bf38:	f7fe ff76 	bl	800ae28 <LOG_EVENT>
		break;
 800bf3c:	e7e4      	b.n	800bf08 <_Z20loraif_event_handler12lora_event_tmPc+0x50>
			LOG_EVENT(TAG, "LORA_REQ_DATA");
 800bf3e:	483c      	ldr	r0, [pc, #240]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bf40:	4940      	ldr	r1, [pc, #256]	; (800c044 <_Z20loraif_event_handler12lora_event_tmPc+0x18c>)
 800bf42:	f7fe ff71 	bl	800ae28 <LOG_EVENT>
			if(loraif_isvalid_address(device_address))
 800bf46:	4630      	mov	r0, r6
 800bf48:	f7f8 fabc 	bl	80044c4 <loraif_isvalid_address>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d05e      	beq.n	800c00e <_Z20loraif_event_handler12lora_event_tmPc+0x156>
				send_data_to_firebase(device_address, data);
 800bf50:	4629      	mov	r1, r5
 800bf52:	4630      	mov	r0, r6
 800bf54:	f7ff fa78 	bl	800b448 <send_data_to_firebase>
		gpio_set(GPIOB, 14);
 800bf58:	210e      	movs	r1, #14
 800bf5a:	483b      	ldr	r0, [pc, #236]	; (800c048 <_Z20loraif_event_handler12lora_event_tmPc+0x190>)
 800bf5c:	f7fb f9cc 	bl	80072f8 <gpio_set>
		vTaskDelay(active_time);
 800bf60:	2032      	movs	r0, #50	; 0x32
 800bf62:	f7f6 fff1 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bf66:	4838      	ldr	r0, [pc, #224]	; (800c048 <_Z20loraif_event_handler12lora_event_tmPc+0x190>)
 800bf68:	210e      	movs	r1, #14
 800bf6a:	f7fb f9cd 	bl	8007308 <gpio_reset>
		vTaskDelay(idle_time);
 800bf6e:	2001      	movs	r0, #1
 800bf70:	f7f6 ffea 	bl	8002f48 <vTaskDelay>
	while(loop--){
 800bf74:	e7c8      	b.n	800bf08 <_Z20loraif_event_handler12lora_event_tmPc+0x50>
			LOG_EVENT(TAG, "LORA_UPDATE_DATA");
 800bf76:	4935      	ldr	r1, [pc, #212]	; (800c04c <_Z20loraif_event_handler12lora_event_tmPc+0x194>)
 800bf78:	482d      	ldr	r0, [pc, #180]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bf7a:	f7fe ff55 	bl	800ae28 <LOG_EVENT>
		break;
 800bf7e:	e7c3      	b.n	800bf08 <_Z20loraif_event_handler12lora_event_tmPc+0x50>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800bf80:	4933      	ldr	r1, [pc, #204]	; (800c050 <_Z20loraif_event_handler12lora_event_tmPc+0x198>)
 800bf82:	482b      	ldr	r0, [pc, #172]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
		gpio_set(GPIOB, 14);
 800bf84:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800c048 <_Z20loraif_event_handler12lora_event_tmPc+0x190>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800bf88:	f7fe ff4e 	bl	800ae28 <LOG_EVENT>
 800bf8c:	2403      	movs	r4, #3
		gpio_set(GPIOB, 14);
 800bf8e:	210e      	movs	r1, #14
 800bf90:	4640      	mov	r0, r8
 800bf92:	f7fb f9b1 	bl	80072f8 <gpio_set>
		vTaskDelay(active_time);
 800bf96:	2032      	movs	r0, #50	; 0x32
 800bf98:	f7f6 ffd6 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bf9c:	210e      	movs	r1, #14
 800bf9e:	4640      	mov	r0, r8
 800bfa0:	f7fb f9b2 	bl	8007308 <gpio_reset>
		vTaskDelay(idle_time);
 800bfa4:	2032      	movs	r0, #50	; 0x32
 800bfa6:	f7f6 ffcf 	bl	8002f48 <vTaskDelay>
	while(loop--){
 800bfaa:	1e63      	subs	r3, r4, #1
 800bfac:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800bfb0:	d1ed      	bne.n	800bf8e <_Z20loraif_event_handler12lora_event_tmPc+0xd6>
			LOG_ERROR(TAG, "%s", data);
 800bfb2:	462a      	mov	r2, r5
 800bfb4:	4927      	ldr	r1, [pc, #156]	; (800c054 <_Z20loraif_event_handler12lora_event_tmPc+0x19c>)
 800bfb6:	481e      	ldr	r0, [pc, #120]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bfb8:	f7fe feba 	bl	800ad30 <LOG_ERROR>
			dev_struct_t *dev = add_device_properties(device_address, data);
 800bfbc:	4629      	mov	r1, r5
 800bfbe:	4630      	mov	r0, r6
 800bfc0:	f7ff f916 	bl	800b1f0 <add_device_properties>
			loraif_add_device(device_address, data, dev);
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	4602      	mov	r2, r0
			dev_struct_t *dev = add_device_properties(device_address, data);
 800bfc8:	4604      	mov	r4, r0
			loraif_add_device(device_address, data, dev);
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f7f8 fdfe 	bl	8004bcc <loraif_add_device>
			firebase_new_device(dev);
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f7ff f9e3 	bl	800b39c <firebase_new_device>
			update_time = true;
 800bfd6:	4b20      	ldr	r3, [pc, #128]	; (800c058 <_Z20loraif_event_handler12lora_event_tmPc+0x1a0>)
 800bfd8:	2201      	movs	r2, #1
			vTaskDelay(2000);
 800bfda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
			update_time = true;
 800bfde:	701a      	strb	r2, [r3, #0]
			vTaskDelay(2000);
 800bfe0:	f7f6 ffb2 	bl	8002f48 <vTaskDelay>
			firebase_get_device_data(device_address);
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7ff fb01 	bl	800b5ec <firebase_get_device_data>
		break;
 800bfea:	e78d      	b.n	800bf08 <_Z20loraif_event_handler12lora_event_tmPc+0x50>
			LOG_WARN(TAG, "LORA_REMOVE_DEVICE");
 800bfec:	4810      	ldr	r0, [pc, #64]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800bfee:	491b      	ldr	r1, [pc, #108]	; (800c05c <_Z20loraif_event_handler12lora_event_tmPc+0x1a4>)
 800bff0:	f7fe fe60 	bl	800acb4 <LOG_WARN>
			dev_struct_t *dev = select_device_properties(device_address);
 800bff4:	4630      	mov	r0, r6
 800bff6:	f7ff f999 	bl	800b32c <select_device_properties>
			if(dev != NULL) firebase_remove_device(dev);
 800bffa:	b168      	cbz	r0, 800c018 <_Z20loraif_event_handler12lora_event_tmPc+0x160>
 800bffc:	f7ff fa18 	bl	800b430 <firebase_remove_device>
			remove_device_properties(device_address);
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff f941 	bl	800b288 <remove_device_properties>
			loraif_remove_device(device_address);
 800c006:	4630      	mov	r0, r6
 800c008:	f7f8 fe36 	bl	8004c78 <loraif_remove_device>
		break;
 800c00c:	e77c      	b.n	800bf08 <_Z20loraif_event_handler12lora_event_tmPc+0x50>
				LOG_ERROR(TAG, "Event device address invalid.");
 800c00e:	4914      	ldr	r1, [pc, #80]	; (800c060 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800c010:	4807      	ldr	r0, [pc, #28]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800c012:	f7fe fe8d 	bl	800ad30 <LOG_ERROR>
 800c016:	e79f      	b.n	800bf58 <_Z20loraif_event_handler12lora_event_tmPc+0xa0>
			else LOG_ERROR(TAG, "Event device error.");
 800c018:	4912      	ldr	r1, [pc, #72]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1ac>)
 800c01a:	4805      	ldr	r0, [pc, #20]	; (800c030 <_Z20loraif_event_handler12lora_event_tmPc+0x178>)
 800c01c:	f7fe fe88 	bl	800ad30 <LOG_ERROR>
 800c020:	e7ee      	b.n	800c000 <_Z20loraif_event_handler12lora_event_tmPc+0x148>
 800c022:	bf00      	nop
 800c024:	2000ba14 	.word	0x2000ba14
 800c028:	2000ba20 	.word	0x2000ba20
 800c02c:	08012250 	.word	0x08012250
 800c030:	08011fe8 	.word	0x08011fe8
 800c034:	08011148 	.word	0x08011148
 800c038:	080122a8 	.word	0x080122a8
 800c03c:	080110bc 	.word	0x080110bc
 800c040:	080110c8 	.word	0x080110c8
 800c044:	080110f0 	.word	0x080110f0
 800c048:	40020400 	.word	0x40020400
 800c04c:	08011110 	.word	0x08011110
 800c050:	08011124 	.word	0x08011124
 800c054:	08011944 	.word	0x08011944
 800c058:	2000ba54 	.word	0x2000ba54
 800c05c:	08011134 	.word	0x08011134
 800c060:	08012274 	.word	0x08012274
 800c064:	08012294 	.word	0x08012294

0800c068 <_Z8app_mainv>:
void app_main(void){
 800c068:	b500      	push	{lr}
 800c06a:	b083      	sub	sp, #12
	HAL_Driver_Init();
 800c06c:	f7f4 ffe4 	bl	8001038 <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOA);
 800c070:	4833      	ldr	r0, [pc, #204]	; (800c140 <_Z8app_mainv+0xd8>)
	xTaskCreate(task_loraif_receive_process,     "task_loraif_receive_process",     byte_to_word(8192), NULL, 15, &h_task_loraif_receive_process);
 800c072:	4c34      	ldr	r4, [pc, #208]	; (800c144 <_Z8app_mainv+0xdc>)
	gpio_port_clock_enable(GPIOA);
 800c074:	f7fa fff8 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOB);
 800c078:	4833      	ldr	r0, [pc, #204]	; (800c148 <_Z8app_mainv+0xe0>)
 800c07a:	f7fa fff5 	bl	8007068 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOC);
 800c07e:	4833      	ldr	r0, [pc, #204]	; (800c14c <_Z8app_mainv+0xe4>)
 800c080:	f7fa fff2 	bl	8007068 <gpio_port_clock_enable>
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 800c084:	4831      	ldr	r0, [pc, #196]	; (800c14c <_Z8app_mainv+0xe4>)
 800c086:	2207      	movs	r2, #7
 800c088:	210d      	movs	r1, #13
 800c08a:	f7fb f853 	bl	8007134 <gpio_set_mode>
	gpio_set_mode(GPIOB, 14, GPIO_OUTPUT_PUSHPULL);
 800c08e:	482e      	ldr	r0, [pc, #184]	; (800c148 <_Z8app_mainv+0xe0>)
 800c090:	2207      	movs	r2, #7
 800c092:	210e      	movs	r1, #14
 800c094:	f7fb f84e 	bl	8007134 <gpio_set_mode>
	gpio_set_mode(GPIOA, 8, GPIO_OUTPUT_PUSHPULL);
 800c098:	4829      	ldr	r0, [pc, #164]	; (800c140 <_Z8app_mainv+0xd8>)
 800c09a:	2207      	movs	r2, #7
 800c09c:	2108      	movs	r1, #8
 800c09e:	f7fb f849 	bl	8007134 <gpio_set_mode>
	gpio_set_mode(GPIOA, 3, GPIO_OUTPUT_PUSHPULL);
 800c0a2:	2207      	movs	r2, #7
 800c0a4:	4826      	ldr	r0, [pc, #152]	; (800c140 <_Z8app_mainv+0xd8>)
 800c0a6:	2103      	movs	r1, #3
 800c0a8:	f7fb f844 	bl	8007134 <gpio_set_mode>
	gpio_set(GPIOA, 3);
 800c0ac:	4824      	ldr	r0, [pc, #144]	; (800c140 <_Z8app_mainv+0xd8>)
 800c0ae:	2103      	movs	r1, #3
 800c0b0:	f7fb f922 	bl	80072f8 <gpio_set>
	gpio_set(GPIOA, 8);
 800c0b4:	2108      	movs	r1, #8
 800c0b6:	4822      	ldr	r0, [pc, #136]	; (800c140 <_Z8app_mainv+0xd8>)
 800c0b8:	f7fb f91e 	bl	80072f8 <gpio_set>
	register_exception_handler(exception_handler);
 800c0bc:	4824      	ldr	r0, [pc, #144]	; (800c150 <_Z8app_mainv+0xe8>)
 800c0be:	f7ff f879 	bl	800b1b4 <register_exception_handler>
	xTaskCreate(task_loraif_receive_process,     "task_loraif_receive_process",     byte_to_word(8192), NULL, 15, &h_task_loraif_receive_process);
 800c0c2:	200f      	movs	r0, #15
 800c0c4:	e9cd 0400 	strd	r0, r4, [sp]
 800c0c8:	4922      	ldr	r1, [pc, #136]	; (800c154 <_Z8app_mainv+0xec>)
	xTaskCreate(task_loraif_request_device_data, "task_loraif_request_device_data", byte_to_word(4096), NULL, 5,  &h_task_loraif_request_device_data);
 800c0ca:	4c23      	ldr	r4, [pc, #140]	; (800c158 <_Z8app_mainv+0xf0>)
	xTaskCreate(task_loraif_receive_process,     "task_loraif_receive_process",     byte_to_word(8192), NULL, 15, &h_task_loraif_receive_process);
 800c0cc:	4823      	ldr	r0, [pc, #140]	; (800c15c <_Z8app_mainv+0xf4>)
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0d4:	f7f6 fe84 	bl	8002de0 <xTaskCreate>
	xTaskCreate(task_loraif_request_device_data, "task_loraif_request_device_data", byte_to_word(4096), NULL, 5,  &h_task_loraif_request_device_data);
 800c0d8:	2005      	movs	r0, #5
 800c0da:	e9cd 0400 	strd	r0, r4, [sp]
 800c0de:	4920      	ldr	r1, [pc, #128]	; (800c160 <_Z8app_mainv+0xf8>)
	xTaskCreate(loraif_response_to_device,       "loraif_response_to_device",       byte_to_word(4096), NULL, 8,  &h_task_loraif_response_to_device);
 800c0e0:	4c20      	ldr	r4, [pc, #128]	; (800c164 <_Z8app_mainv+0xfc>)
	xTaskCreate(task_loraif_request_device_data, "task_loraif_request_device_data", byte_to_word(4096), NULL, 5,  &h_task_loraif_request_device_data);
 800c0e2:	4821      	ldr	r0, [pc, #132]	; (800c168 <_Z8app_mainv+0x100>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0ea:	f7f6 fe79 	bl	8002de0 <xTaskCreate>
	xTaskCreate(loraif_response_to_device,       "loraif_response_to_device",       byte_to_word(4096), NULL, 8,  &h_task_loraif_response_to_device);
 800c0ee:	2008      	movs	r0, #8
 800c0f0:	e9cd 0400 	strd	r0, r4, [sp]
 800c0f4:	491d      	ldr	r1, [pc, #116]	; (800c16c <_Z8app_mainv+0x104>)
 800c0f6:	481e      	ldr	r0, [pc, #120]	; (800c170 <_Z8app_mainv+0x108>)
	xTaskCreate(task_wifiif_get_device_data,     "task_wifiif_get_device_data",     byte_to_word(4096), NULL, 6,  &h_task_wifiif_get_device_data);
 800c0f8:	4c1e      	ldr	r4, [pc, #120]	; (800c174 <_Z8app_mainv+0x10c>)
	xTaskCreate(loraif_response_to_device,       "loraif_response_to_device",       byte_to_word(4096), NULL, 8,  &h_task_loraif_response_to_device);
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c100:	f7f6 fe6e 	bl	8002de0 <xTaskCreate>
	xTaskCreate(task_wifi_connect,               "task_wifi_connect",               byte_to_word(8192), NULL, 14, NULL);
 800c104:	2300      	movs	r3, #0
 800c106:	200e      	movs	r0, #14
 800c108:	e9cd 0300 	strd	r0, r3, [sp]
 800c10c:	491a      	ldr	r1, [pc, #104]	; (800c178 <_Z8app_mainv+0x110>)
 800c10e:	481b      	ldr	r0, [pc, #108]	; (800c17c <_Z8app_mainv+0x114>)
 800c110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c114:	f7f6 fe64 	bl	8002de0 <xTaskCreate>
	xTaskCreate(task_wifiif_get_device_data,     "task_wifiif_get_device_data",     byte_to_word(4096), NULL, 6,  &h_task_wifiif_get_device_data);
 800c118:	2206      	movs	r2, #6
 800c11a:	e9cd 2400 	strd	r2, r4, [sp]
 800c11e:	4918      	ldr	r1, [pc, #96]	; (800c180 <_Z8app_mainv+0x118>)
 800c120:	4818      	ldr	r0, [pc, #96]	; (800c184 <_Z8app_mainv+0x11c>)
		gpio_toggle(GPIOC, 13);
 800c122:	4c0a      	ldr	r4, [pc, #40]	; (800c14c <_Z8app_mainv+0xe4>)
	xTaskCreate(task_wifiif_get_device_data,     "task_wifiif_get_device_data",     byte_to_word(4096), NULL, 6,  &h_task_wifiif_get_device_data);
 800c124:	2300      	movs	r3, #0
 800c126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c12a:	f7f6 fe59 	bl	8002de0 <xTaskCreate>
		gpio_toggle(GPIOC, 13);
 800c12e:	4620      	mov	r0, r4
 800c130:	210d      	movs	r1, #13
 800c132:	f7fb f8f1 	bl	8007318 <gpio_toggle>
		vTaskDelay(500);
 800c136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c13a:	f7f6 ff05 	bl	8002f48 <vTaskDelay>
	while(1){
 800c13e:	e7f6      	b.n	800c12e <_Z8app_mainv+0xc6>
 800c140:	40020000 	.word	0x40020000
 800c144:	2000ba10 	.word	0x2000ba10
 800c148:	40020400 	.word	0x40020400
 800c14c:	40020800 	.word	0x40020800
 800c150:	0800b68d 	.word	0x0800b68d
 800c154:	080122bc 	.word	0x080122bc
 800c158:	2000ba14 	.word	0x2000ba14
 800c15c:	0800b699 	.word	0x0800b699
 800c160:	080122d8 	.word	0x080122d8
 800c164:	2000ba18 	.word	0x2000ba18
 800c168:	0800b755 	.word	0x0800b755
 800c16c:	08010fc8 	.word	0x08010fc8
 800c170:	08004989 	.word	0x08004989
 800c174:	2000ba1c 	.word	0x2000ba1c
 800c178:	080122f8 	.word	0x080122f8
 800c17c:	0800b88d 	.word	0x0800b88d
 800c180:	0801230c 	.word	0x0801230c
 800c184:	0800b801 	.word	0x0800b801

0800c188 <_GLOBAL__sub_I_lora_spi_conf>:
}
 800c188:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800c18a:	4908      	ldr	r1, [pc, #32]	; (800c1ac <_GLOBAL__sub_I_lora_spi_conf+0x24>)
 800c18c:	4b08      	ldr	r3, [pc, #32]	; (800c1b0 <_GLOBAL__sub_I_lora_spi_conf+0x28>)
}
 800c18e:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800c190:	2000      	movs	r0, #0
 800c192:	2203      	movs	r2, #3
 800c194:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c198:	9200      	str	r2, [sp, #0]
 800c19a:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800c19e:	2206      	movs	r2, #6
 800c1a0:	4804      	ldr	r0, [pc, #16]	; (800c1b4 <_GLOBAL__sub_I_lora_spi_conf+0x2c>)
 800c1a2:	f7f8 ff7f 	bl	80050a4 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 800c1a6:	b005      	add	sp, #20
 800c1a8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1ac:	40020000 	.word	0x40020000
 800c1b0:	40021000 	.word	0x40021000
 800c1b4:	2000ba20 	.word	0x2000ba20

0800c1b8 <_ZdlPvj>:
 800c1b8:	f000 b81d 	b.w	800c1f6 <_ZdlPv>

0800c1bc <_Znwj>:
 800c1bc:	2801      	cmp	r0, #1
 800c1be:	bf38      	it	cc
 800c1c0:	2001      	movcc	r0, #1
 800c1c2:	b510      	push	{r4, lr}
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f000 f8c2 	bl	800c350 <malloc>
 800c1cc:	b930      	cbnz	r0, 800c1dc <_Znwj+0x20>
 800c1ce:	f000 f815 	bl	800c1fc <_ZSt15get_new_handlerv>
 800c1d2:	b908      	cbnz	r0, 800c1d8 <_Znwj+0x1c>
 800c1d4:	f000 f85c 	bl	800c290 <abort>
 800c1d8:	4780      	blx	r0
 800c1da:	e7f4      	b.n	800c1c6 <_Znwj+0xa>
 800c1dc:	bd10      	pop	{r4, pc}

0800c1de <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800c1de:	684b      	ldr	r3, [r1, #4]
 800c1e0:	6043      	str	r3, [r0, #4]
 800c1e2:	684b      	ldr	r3, [r1, #4]
 800c1e4:	6001      	str	r1, [r0, #0]
 800c1e6:	6018      	str	r0, [r3, #0]
 800c1e8:	6048      	str	r0, [r1, #4]
 800c1ea:	4770      	bx	lr

0800c1ec <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800c1ec:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	605a      	str	r2, [r3, #4]
 800c1f4:	4770      	bx	lr

0800c1f6 <_ZdlPv>:
 800c1f6:	f000 b8b3 	b.w	800c360 <free>
	...

0800c1fc <_ZSt15get_new_handlerv>:
 800c1fc:	4b02      	ldr	r3, [pc, #8]	; (800c208 <_ZSt15get_new_handlerv+0xc>)
 800c1fe:	6818      	ldr	r0, [r3, #0]
 800c200:	f3bf 8f5b 	dmb	ish
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	2000ba58 	.word	0x2000ba58

0800c20c <ceilf>:
 800c20c:	ee10 3a10 	vmov	r3, s0
 800c210:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c214:	3a7f      	subs	r2, #127	; 0x7f
 800c216:	2a16      	cmp	r2, #22
 800c218:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c21c:	dc2a      	bgt.n	800c274 <ceilf+0x68>
 800c21e:	2a00      	cmp	r2, #0
 800c220:	da11      	bge.n	800c246 <ceilf+0x3a>
 800c222:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c288 <ceilf+0x7c>
 800c226:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c22a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c232:	dd05      	ble.n	800c240 <ceilf+0x34>
 800c234:	2b00      	cmp	r3, #0
 800c236:	db23      	blt.n	800c280 <ceilf+0x74>
 800c238:	2900      	cmp	r1, #0
 800c23a:	bf18      	it	ne
 800c23c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c240:	ee00 3a10 	vmov	s0, r3
 800c244:	4770      	bx	lr
 800c246:	4911      	ldr	r1, [pc, #68]	; (800c28c <ceilf+0x80>)
 800c248:	4111      	asrs	r1, r2
 800c24a:	420b      	tst	r3, r1
 800c24c:	d0fa      	beq.n	800c244 <ceilf+0x38>
 800c24e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c288 <ceilf+0x7c>
 800c252:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c256:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25e:	ddef      	ble.n	800c240 <ceilf+0x34>
 800c260:	2b00      	cmp	r3, #0
 800c262:	bfc2      	ittt	gt
 800c264:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c268:	fa40 f202 	asrgt.w	r2, r0, r2
 800c26c:	189b      	addgt	r3, r3, r2
 800c26e:	ea23 0301 	bic.w	r3, r3, r1
 800c272:	e7e5      	b.n	800c240 <ceilf+0x34>
 800c274:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c278:	d3e4      	bcc.n	800c244 <ceilf+0x38>
 800c27a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c27e:	4770      	bx	lr
 800c280:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c284:	e7dc      	b.n	800c240 <ceilf+0x34>
 800c286:	bf00      	nop
 800c288:	7149f2ca 	.word	0x7149f2ca
 800c28c:	007fffff 	.word	0x007fffff

0800c290 <abort>:
 800c290:	b508      	push	{r3, lr}
 800c292:	2006      	movs	r0, #6
 800c294:	f000 ffce 	bl	800d234 <raise>
 800c298:	2001      	movs	r0, #1
 800c29a:	f7f4 ff6d 	bl	8001178 <_exit>
	...

0800c2a0 <asiprintf>:
 800c2a0:	b40e      	push	{r1, r2, r3}
 800c2a2:	b530      	push	{r4, r5, lr}
 800c2a4:	b09c      	sub	sp, #112	; 0x70
 800c2a6:	ab1f      	add	r3, sp, #124	; 0x7c
 800c2a8:	4605      	mov	r5, r0
 800c2aa:	490d      	ldr	r1, [pc, #52]	; (800c2e0 <asiprintf+0x40>)
 800c2ac:	480d      	ldr	r0, [pc, #52]	; (800c2e4 <asiprintf+0x44>)
 800c2ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2b2:	6800      	ldr	r0, [r0, #0]
 800c2b4:	9301      	str	r3, [sp, #4]
 800c2b6:	2400      	movs	r4, #0
 800c2b8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 800c2bc:	a902      	add	r1, sp, #8
 800c2be:	9402      	str	r4, [sp, #8]
 800c2c0:	9404      	str	r4, [sp, #16]
 800c2c2:	9407      	str	r4, [sp, #28]
 800c2c4:	f000 fa14 	bl	800c6f0 <_svfiprintf_r>
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	bfa1      	itttt	ge
 800c2cc:	9b02      	ldrge	r3, [sp, #8]
 800c2ce:	701c      	strbge	r4, [r3, #0]
 800c2d0:	9b06      	ldrge	r3, [sp, #24]
 800c2d2:	602b      	strge	r3, [r5, #0]
 800c2d4:	b01c      	add	sp, #112	; 0x70
 800c2d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2da:	b003      	add	sp, #12
 800c2dc:	4770      	bx	lr
 800c2de:	bf00      	nop
 800c2e0:	ffff0288 	.word	0xffff0288
 800c2e4:	2000018c 	.word	0x2000018c

0800c2e8 <atof>:
 800c2e8:	2100      	movs	r1, #0
 800c2ea:	f001 be0b 	b.w	800df04 <strtod>

0800c2ee <atoi>:
 800c2ee:	220a      	movs	r2, #10
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	f001 be95 	b.w	800e020 <strtol>
	...

0800c2f8 <calloc>:
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <calloc+0xc>)
 800c2fa:	460a      	mov	r2, r1
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	6818      	ldr	r0, [r3, #0]
 800c300:	f000 b870 	b.w	800c3e4 <_calloc_r>
 800c304:	2000018c 	.word	0x2000018c

0800c308 <__libc_init_array>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	4d0d      	ldr	r5, [pc, #52]	; (800c340 <__libc_init_array+0x38>)
 800c30c:	4c0d      	ldr	r4, [pc, #52]	; (800c344 <__libc_init_array+0x3c>)
 800c30e:	1b64      	subs	r4, r4, r5
 800c310:	10a4      	asrs	r4, r4, #2
 800c312:	2600      	movs	r6, #0
 800c314:	42a6      	cmp	r6, r4
 800c316:	d109      	bne.n	800c32c <__libc_init_array+0x24>
 800c318:	4d0b      	ldr	r5, [pc, #44]	; (800c348 <__libc_init_array+0x40>)
 800c31a:	4c0c      	ldr	r4, [pc, #48]	; (800c34c <__libc_init_array+0x44>)
 800c31c:	f004 faee 	bl	80108fc <_init>
 800c320:	1b64      	subs	r4, r4, r5
 800c322:	10a4      	asrs	r4, r4, #2
 800c324:	2600      	movs	r6, #0
 800c326:	42a6      	cmp	r6, r4
 800c328:	d105      	bne.n	800c336 <__libc_init_array+0x2e>
 800c32a:	bd70      	pop	{r4, r5, r6, pc}
 800c32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c330:	4798      	blx	r3
 800c332:	3601      	adds	r6, #1
 800c334:	e7ee      	b.n	800c314 <__libc_init_array+0xc>
 800c336:	f855 3b04 	ldr.w	r3, [r5], #4
 800c33a:	4798      	blx	r3
 800c33c:	3601      	adds	r6, #1
 800c33e:	e7f2      	b.n	800c326 <__libc_init_array+0x1e>
 800c340:	080127d4 	.word	0x080127d4
 800c344:	080127d4 	.word	0x080127d4
 800c348:	080127d4 	.word	0x080127d4
 800c34c:	08012800 	.word	0x08012800

0800c350 <malloc>:
 800c350:	4b02      	ldr	r3, [pc, #8]	; (800c35c <malloc+0xc>)
 800c352:	4601      	mov	r1, r0
 800c354:	6818      	ldr	r0, [r3, #0]
 800c356:	f000 b8fb 	b.w	800c550 <_malloc_r>
 800c35a:	bf00      	nop
 800c35c:	2000018c 	.word	0x2000018c

0800c360 <free>:
 800c360:	4b02      	ldr	r3, [pc, #8]	; (800c36c <free+0xc>)
 800c362:	4601      	mov	r1, r0
 800c364:	6818      	ldr	r0, [r3, #0]
 800c366:	f000 b853 	b.w	800c410 <_free_r>
 800c36a:	bf00      	nop
 800c36c:	2000018c 	.word	0x2000018c

0800c370 <memcpy>:
 800c370:	440a      	add	r2, r1
 800c372:	4291      	cmp	r1, r2
 800c374:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c378:	d100      	bne.n	800c37c <memcpy+0xc>
 800c37a:	4770      	bx	lr
 800c37c:	b510      	push	{r4, lr}
 800c37e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c382:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c386:	4291      	cmp	r1, r2
 800c388:	d1f9      	bne.n	800c37e <memcpy+0xe>
 800c38a:	bd10      	pop	{r4, pc}

0800c38c <memmove>:
 800c38c:	4288      	cmp	r0, r1
 800c38e:	b510      	push	{r4, lr}
 800c390:	eb01 0402 	add.w	r4, r1, r2
 800c394:	d902      	bls.n	800c39c <memmove+0x10>
 800c396:	4284      	cmp	r4, r0
 800c398:	4623      	mov	r3, r4
 800c39a:	d807      	bhi.n	800c3ac <memmove+0x20>
 800c39c:	1e43      	subs	r3, r0, #1
 800c39e:	42a1      	cmp	r1, r4
 800c3a0:	d008      	beq.n	800c3b4 <memmove+0x28>
 800c3a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c3aa:	e7f8      	b.n	800c39e <memmove+0x12>
 800c3ac:	4402      	add	r2, r0
 800c3ae:	4601      	mov	r1, r0
 800c3b0:	428a      	cmp	r2, r1
 800c3b2:	d100      	bne.n	800c3b6 <memmove+0x2a>
 800c3b4:	bd10      	pop	{r4, pc}
 800c3b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3be:	e7f7      	b.n	800c3b0 <memmove+0x24>

0800c3c0 <memset>:
 800c3c0:	4402      	add	r2, r0
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d100      	bne.n	800c3ca <memset+0xa>
 800c3c8:	4770      	bx	lr
 800c3ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c3ce:	e7f9      	b.n	800c3c4 <memset+0x4>

0800c3d0 <mallinfo>:
 800c3d0:	b510      	push	{r4, lr}
 800c3d2:	4b03      	ldr	r3, [pc, #12]	; (800c3e0 <mallinfo+0x10>)
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	6819      	ldr	r1, [r3, #0]
 800c3d8:	f000 f866 	bl	800c4a8 <_mallinfo_r>
 800c3dc:	4620      	mov	r0, r4
 800c3de:	bd10      	pop	{r4, pc}
 800c3e0:	2000018c 	.word	0x2000018c

0800c3e4 <_calloc_r>:
 800c3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3e6:	fba1 2402 	umull	r2, r4, r1, r2
 800c3ea:	b94c      	cbnz	r4, 800c400 <_calloc_r+0x1c>
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	9201      	str	r2, [sp, #4]
 800c3f0:	f000 f8ae 	bl	800c550 <_malloc_r>
 800c3f4:	9a01      	ldr	r2, [sp, #4]
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	b930      	cbnz	r0, 800c408 <_calloc_r+0x24>
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	b003      	add	sp, #12
 800c3fe:	bd30      	pop	{r4, r5, pc}
 800c400:	220c      	movs	r2, #12
 800c402:	6002      	str	r2, [r0, #0]
 800c404:	2500      	movs	r5, #0
 800c406:	e7f8      	b.n	800c3fa <_calloc_r+0x16>
 800c408:	4621      	mov	r1, r4
 800c40a:	f7ff ffd9 	bl	800c3c0 <memset>
 800c40e:	e7f4      	b.n	800c3fa <_calloc_r+0x16>

0800c410 <_free_r>:
 800c410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c412:	2900      	cmp	r1, #0
 800c414:	d044      	beq.n	800c4a0 <_free_r+0x90>
 800c416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c41a:	9001      	str	r0, [sp, #4]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f1a1 0404 	sub.w	r4, r1, #4
 800c422:	bfb8      	it	lt
 800c424:	18e4      	addlt	r4, r4, r3
 800c426:	f003 f95f 	bl	800f6e8 <__malloc_lock>
 800c42a:	4a1e      	ldr	r2, [pc, #120]	; (800c4a4 <_free_r+0x94>)
 800c42c:	9801      	ldr	r0, [sp, #4]
 800c42e:	6813      	ldr	r3, [r2, #0]
 800c430:	b933      	cbnz	r3, 800c440 <_free_r+0x30>
 800c432:	6063      	str	r3, [r4, #4]
 800c434:	6014      	str	r4, [r2, #0]
 800c436:	b003      	add	sp, #12
 800c438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c43c:	f003 b95a 	b.w	800f6f4 <__malloc_unlock>
 800c440:	42a3      	cmp	r3, r4
 800c442:	d908      	bls.n	800c456 <_free_r+0x46>
 800c444:	6825      	ldr	r5, [r4, #0]
 800c446:	1961      	adds	r1, r4, r5
 800c448:	428b      	cmp	r3, r1
 800c44a:	bf01      	itttt	eq
 800c44c:	6819      	ldreq	r1, [r3, #0]
 800c44e:	685b      	ldreq	r3, [r3, #4]
 800c450:	1949      	addeq	r1, r1, r5
 800c452:	6021      	streq	r1, [r4, #0]
 800c454:	e7ed      	b.n	800c432 <_free_r+0x22>
 800c456:	461a      	mov	r2, r3
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	b10b      	cbz	r3, 800c460 <_free_r+0x50>
 800c45c:	42a3      	cmp	r3, r4
 800c45e:	d9fa      	bls.n	800c456 <_free_r+0x46>
 800c460:	6811      	ldr	r1, [r2, #0]
 800c462:	1855      	adds	r5, r2, r1
 800c464:	42a5      	cmp	r5, r4
 800c466:	d10b      	bne.n	800c480 <_free_r+0x70>
 800c468:	6824      	ldr	r4, [r4, #0]
 800c46a:	4421      	add	r1, r4
 800c46c:	1854      	adds	r4, r2, r1
 800c46e:	42a3      	cmp	r3, r4
 800c470:	6011      	str	r1, [r2, #0]
 800c472:	d1e0      	bne.n	800c436 <_free_r+0x26>
 800c474:	681c      	ldr	r4, [r3, #0]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	6053      	str	r3, [r2, #4]
 800c47a:	4421      	add	r1, r4
 800c47c:	6011      	str	r1, [r2, #0]
 800c47e:	e7da      	b.n	800c436 <_free_r+0x26>
 800c480:	d902      	bls.n	800c488 <_free_r+0x78>
 800c482:	230c      	movs	r3, #12
 800c484:	6003      	str	r3, [r0, #0]
 800c486:	e7d6      	b.n	800c436 <_free_r+0x26>
 800c488:	6825      	ldr	r5, [r4, #0]
 800c48a:	1961      	adds	r1, r4, r5
 800c48c:	428b      	cmp	r3, r1
 800c48e:	bf04      	itt	eq
 800c490:	6819      	ldreq	r1, [r3, #0]
 800c492:	685b      	ldreq	r3, [r3, #4]
 800c494:	6063      	str	r3, [r4, #4]
 800c496:	bf04      	itt	eq
 800c498:	1949      	addeq	r1, r1, r5
 800c49a:	6021      	streq	r1, [r4, #0]
 800c49c:	6054      	str	r4, [r2, #4]
 800c49e:	e7ca      	b.n	800c436 <_free_r+0x26>
 800c4a0:	b003      	add	sp, #12
 800c4a2:	bd30      	pop	{r4, r5, pc}
 800c4a4:	2000ba84 	.word	0x2000ba84

0800c4a8 <_mallinfo_r>:
 800c4a8:	b570      	push	{r4, r5, r6, lr}
 800c4aa:	4c16      	ldr	r4, [pc, #88]	; (800c504 <_mallinfo_r+0x5c>)
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	4608      	mov	r0, r1
 800c4b0:	460e      	mov	r6, r1
 800c4b2:	f003 f919 	bl	800f6e8 <__malloc_lock>
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	b143      	cbz	r3, 800c4cc <_mallinfo_r+0x24>
 800c4ba:	2100      	movs	r1, #0
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f000 fe81 	bl	800d1c4 <_sbrk_r>
 800c4c2:	1c42      	adds	r2, r0, #1
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	bf1c      	itt	ne
 800c4c8:	6820      	ldrne	r0, [r4, #0]
 800c4ca:	1a1b      	subne	r3, r3, r0
 800c4cc:	4a0e      	ldr	r2, [pc, #56]	; (800c508 <_mallinfo_r+0x60>)
 800c4ce:	6812      	ldr	r2, [r2, #0]
 800c4d0:	2000      	movs	r0, #0
 800c4d2:	b992      	cbnz	r2, 800c4fa <_mallinfo_r+0x52>
 800c4d4:	4c0d      	ldr	r4, [pc, #52]	; (800c50c <_mallinfo_r+0x64>)
 800c4d6:	6023      	str	r3, [r4, #0]
 800c4d8:	6220      	str	r0, [r4, #32]
 800c4da:	1a1b      	subs	r3, r3, r0
 800c4dc:	4630      	mov	r0, r6
 800c4de:	61e3      	str	r3, [r4, #28]
 800c4e0:	f003 f908 	bl	800f6f4 <__malloc_unlock>
 800c4e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4e6:	462e      	mov	r6, r5
 800c4e8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4ec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4f2:	e886 0003 	stmia.w	r6, {r0, r1}
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	bd70      	pop	{r4, r5, r6, pc}
 800c4fa:	6811      	ldr	r1, [r2, #0]
 800c4fc:	6852      	ldr	r2, [r2, #4]
 800c4fe:	4408      	add	r0, r1
 800c500:	e7e7      	b.n	800c4d2 <_mallinfo_r+0x2a>
 800c502:	bf00      	nop
 800c504:	2000ba88 	.word	0x2000ba88
 800c508:	2000ba84 	.word	0x2000ba84
 800c50c:	2000ba5c 	.word	0x2000ba5c

0800c510 <sbrk_aligned>:
 800c510:	b570      	push	{r4, r5, r6, lr}
 800c512:	4e0e      	ldr	r6, [pc, #56]	; (800c54c <sbrk_aligned+0x3c>)
 800c514:	460c      	mov	r4, r1
 800c516:	6831      	ldr	r1, [r6, #0]
 800c518:	4605      	mov	r5, r0
 800c51a:	b911      	cbnz	r1, 800c522 <sbrk_aligned+0x12>
 800c51c:	f000 fe52 	bl	800d1c4 <_sbrk_r>
 800c520:	6030      	str	r0, [r6, #0]
 800c522:	4621      	mov	r1, r4
 800c524:	4628      	mov	r0, r5
 800c526:	f000 fe4d 	bl	800d1c4 <_sbrk_r>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	d00a      	beq.n	800c544 <sbrk_aligned+0x34>
 800c52e:	1cc4      	adds	r4, r0, #3
 800c530:	f024 0403 	bic.w	r4, r4, #3
 800c534:	42a0      	cmp	r0, r4
 800c536:	d007      	beq.n	800c548 <sbrk_aligned+0x38>
 800c538:	1a21      	subs	r1, r4, r0
 800c53a:	4628      	mov	r0, r5
 800c53c:	f000 fe42 	bl	800d1c4 <_sbrk_r>
 800c540:	3001      	adds	r0, #1
 800c542:	d101      	bne.n	800c548 <sbrk_aligned+0x38>
 800c544:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c548:	4620      	mov	r0, r4
 800c54a:	bd70      	pop	{r4, r5, r6, pc}
 800c54c:	2000ba88 	.word	0x2000ba88

0800c550 <_malloc_r>:
 800c550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c554:	1ccd      	adds	r5, r1, #3
 800c556:	f025 0503 	bic.w	r5, r5, #3
 800c55a:	3508      	adds	r5, #8
 800c55c:	2d0c      	cmp	r5, #12
 800c55e:	bf38      	it	cc
 800c560:	250c      	movcc	r5, #12
 800c562:	2d00      	cmp	r5, #0
 800c564:	4607      	mov	r7, r0
 800c566:	db01      	blt.n	800c56c <_malloc_r+0x1c>
 800c568:	42a9      	cmp	r1, r5
 800c56a:	d905      	bls.n	800c578 <_malloc_r+0x28>
 800c56c:	230c      	movs	r3, #12
 800c56e:	603b      	str	r3, [r7, #0]
 800c570:	2600      	movs	r6, #0
 800c572:	4630      	mov	r0, r6
 800c574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c578:	4e2e      	ldr	r6, [pc, #184]	; (800c634 <_malloc_r+0xe4>)
 800c57a:	f003 f8b5 	bl	800f6e8 <__malloc_lock>
 800c57e:	6833      	ldr	r3, [r6, #0]
 800c580:	461c      	mov	r4, r3
 800c582:	bb34      	cbnz	r4, 800c5d2 <_malloc_r+0x82>
 800c584:	4629      	mov	r1, r5
 800c586:	4638      	mov	r0, r7
 800c588:	f7ff ffc2 	bl	800c510 <sbrk_aligned>
 800c58c:	1c43      	adds	r3, r0, #1
 800c58e:	4604      	mov	r4, r0
 800c590:	d14d      	bne.n	800c62e <_malloc_r+0xde>
 800c592:	6834      	ldr	r4, [r6, #0]
 800c594:	4626      	mov	r6, r4
 800c596:	2e00      	cmp	r6, #0
 800c598:	d140      	bne.n	800c61c <_malloc_r+0xcc>
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	4631      	mov	r1, r6
 800c59e:	4638      	mov	r0, r7
 800c5a0:	eb04 0803 	add.w	r8, r4, r3
 800c5a4:	f000 fe0e 	bl	800d1c4 <_sbrk_r>
 800c5a8:	4580      	cmp	r8, r0
 800c5aa:	d13a      	bne.n	800c622 <_malloc_r+0xd2>
 800c5ac:	6821      	ldr	r1, [r4, #0]
 800c5ae:	3503      	adds	r5, #3
 800c5b0:	1a6d      	subs	r5, r5, r1
 800c5b2:	f025 0503 	bic.w	r5, r5, #3
 800c5b6:	3508      	adds	r5, #8
 800c5b8:	2d0c      	cmp	r5, #12
 800c5ba:	bf38      	it	cc
 800c5bc:	250c      	movcc	r5, #12
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f7ff ffa5 	bl	800c510 <sbrk_aligned>
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	d02b      	beq.n	800c622 <_malloc_r+0xd2>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	442b      	add	r3, r5
 800c5ce:	6023      	str	r3, [r4, #0]
 800c5d0:	e00e      	b.n	800c5f0 <_malloc_r+0xa0>
 800c5d2:	6822      	ldr	r2, [r4, #0]
 800c5d4:	1b52      	subs	r2, r2, r5
 800c5d6:	d41e      	bmi.n	800c616 <_malloc_r+0xc6>
 800c5d8:	2a0b      	cmp	r2, #11
 800c5da:	d916      	bls.n	800c60a <_malloc_r+0xba>
 800c5dc:	1961      	adds	r1, r4, r5
 800c5de:	42a3      	cmp	r3, r4
 800c5e0:	6025      	str	r5, [r4, #0]
 800c5e2:	bf18      	it	ne
 800c5e4:	6059      	strne	r1, [r3, #4]
 800c5e6:	6863      	ldr	r3, [r4, #4]
 800c5e8:	bf08      	it	eq
 800c5ea:	6031      	streq	r1, [r6, #0]
 800c5ec:	5162      	str	r2, [r4, r5]
 800c5ee:	604b      	str	r3, [r1, #4]
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	f104 060b 	add.w	r6, r4, #11
 800c5f6:	f003 f87d 	bl	800f6f4 <__malloc_unlock>
 800c5fa:	f026 0607 	bic.w	r6, r6, #7
 800c5fe:	1d23      	adds	r3, r4, #4
 800c600:	1af2      	subs	r2, r6, r3
 800c602:	d0b6      	beq.n	800c572 <_malloc_r+0x22>
 800c604:	1b9b      	subs	r3, r3, r6
 800c606:	50a3      	str	r3, [r4, r2]
 800c608:	e7b3      	b.n	800c572 <_malloc_r+0x22>
 800c60a:	6862      	ldr	r2, [r4, #4]
 800c60c:	42a3      	cmp	r3, r4
 800c60e:	bf0c      	ite	eq
 800c610:	6032      	streq	r2, [r6, #0]
 800c612:	605a      	strne	r2, [r3, #4]
 800c614:	e7ec      	b.n	800c5f0 <_malloc_r+0xa0>
 800c616:	4623      	mov	r3, r4
 800c618:	6864      	ldr	r4, [r4, #4]
 800c61a:	e7b2      	b.n	800c582 <_malloc_r+0x32>
 800c61c:	4634      	mov	r4, r6
 800c61e:	6876      	ldr	r6, [r6, #4]
 800c620:	e7b9      	b.n	800c596 <_malloc_r+0x46>
 800c622:	230c      	movs	r3, #12
 800c624:	603b      	str	r3, [r7, #0]
 800c626:	4638      	mov	r0, r7
 800c628:	f003 f864 	bl	800f6f4 <__malloc_unlock>
 800c62c:	e7a1      	b.n	800c572 <_malloc_r+0x22>
 800c62e:	6025      	str	r5, [r4, #0]
 800c630:	e7de      	b.n	800c5f0 <_malloc_r+0xa0>
 800c632:	bf00      	nop
 800c634:	2000ba84 	.word	0x2000ba84

0800c638 <__ssputs_r>:
 800c638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c63c:	688e      	ldr	r6, [r1, #8]
 800c63e:	429e      	cmp	r6, r3
 800c640:	4682      	mov	sl, r0
 800c642:	460c      	mov	r4, r1
 800c644:	4690      	mov	r8, r2
 800c646:	461f      	mov	r7, r3
 800c648:	d838      	bhi.n	800c6bc <__ssputs_r+0x84>
 800c64a:	898a      	ldrh	r2, [r1, #12]
 800c64c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c650:	d032      	beq.n	800c6b8 <__ssputs_r+0x80>
 800c652:	6825      	ldr	r5, [r4, #0]
 800c654:	6909      	ldr	r1, [r1, #16]
 800c656:	eba5 0901 	sub.w	r9, r5, r1
 800c65a:	6965      	ldr	r5, [r4, #20]
 800c65c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c660:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c664:	3301      	adds	r3, #1
 800c666:	444b      	add	r3, r9
 800c668:	106d      	asrs	r5, r5, #1
 800c66a:	429d      	cmp	r5, r3
 800c66c:	bf38      	it	cc
 800c66e:	461d      	movcc	r5, r3
 800c670:	0553      	lsls	r3, r2, #21
 800c672:	d531      	bpl.n	800c6d8 <__ssputs_r+0xa0>
 800c674:	4629      	mov	r1, r5
 800c676:	f7ff ff6b 	bl	800c550 <_malloc_r>
 800c67a:	4606      	mov	r6, r0
 800c67c:	b950      	cbnz	r0, 800c694 <__ssputs_r+0x5c>
 800c67e:	230c      	movs	r3, #12
 800c680:	f8ca 3000 	str.w	r3, [sl]
 800c684:	89a3      	ldrh	r3, [r4, #12]
 800c686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c694:	6921      	ldr	r1, [r4, #16]
 800c696:	464a      	mov	r2, r9
 800c698:	f7ff fe6a 	bl	800c370 <memcpy>
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a6:	81a3      	strh	r3, [r4, #12]
 800c6a8:	6126      	str	r6, [r4, #16]
 800c6aa:	6165      	str	r5, [r4, #20]
 800c6ac:	444e      	add	r6, r9
 800c6ae:	eba5 0509 	sub.w	r5, r5, r9
 800c6b2:	6026      	str	r6, [r4, #0]
 800c6b4:	60a5      	str	r5, [r4, #8]
 800c6b6:	463e      	mov	r6, r7
 800c6b8:	42be      	cmp	r6, r7
 800c6ba:	d900      	bls.n	800c6be <__ssputs_r+0x86>
 800c6bc:	463e      	mov	r6, r7
 800c6be:	6820      	ldr	r0, [r4, #0]
 800c6c0:	4632      	mov	r2, r6
 800c6c2:	4641      	mov	r1, r8
 800c6c4:	f7ff fe62 	bl	800c38c <memmove>
 800c6c8:	68a3      	ldr	r3, [r4, #8]
 800c6ca:	1b9b      	subs	r3, r3, r6
 800c6cc:	60a3      	str	r3, [r4, #8]
 800c6ce:	6823      	ldr	r3, [r4, #0]
 800c6d0:	4433      	add	r3, r6
 800c6d2:	6023      	str	r3, [r4, #0]
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e7db      	b.n	800c690 <__ssputs_r+0x58>
 800c6d8:	462a      	mov	r2, r5
 800c6da:	f003 fcd2 	bl	8010082 <_realloc_r>
 800c6de:	4606      	mov	r6, r0
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d1e1      	bne.n	800c6a8 <__ssputs_r+0x70>
 800c6e4:	6921      	ldr	r1, [r4, #16]
 800c6e6:	4650      	mov	r0, sl
 800c6e8:	f7ff fe92 	bl	800c410 <_free_r>
 800c6ec:	e7c7      	b.n	800c67e <__ssputs_r+0x46>
	...

0800c6f0 <_svfiprintf_r>:
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	4698      	mov	r8, r3
 800c6f6:	898b      	ldrh	r3, [r1, #12]
 800c6f8:	061b      	lsls	r3, r3, #24
 800c6fa:	b09d      	sub	sp, #116	; 0x74
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	460d      	mov	r5, r1
 800c700:	4614      	mov	r4, r2
 800c702:	d50e      	bpl.n	800c722 <_svfiprintf_r+0x32>
 800c704:	690b      	ldr	r3, [r1, #16]
 800c706:	b963      	cbnz	r3, 800c722 <_svfiprintf_r+0x32>
 800c708:	2140      	movs	r1, #64	; 0x40
 800c70a:	f7ff ff21 	bl	800c550 <_malloc_r>
 800c70e:	6028      	str	r0, [r5, #0]
 800c710:	6128      	str	r0, [r5, #16]
 800c712:	b920      	cbnz	r0, 800c71e <_svfiprintf_r+0x2e>
 800c714:	230c      	movs	r3, #12
 800c716:	603b      	str	r3, [r7, #0]
 800c718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c71c:	e0d1      	b.n	800c8c2 <_svfiprintf_r+0x1d2>
 800c71e:	2340      	movs	r3, #64	; 0x40
 800c720:	616b      	str	r3, [r5, #20]
 800c722:	2300      	movs	r3, #0
 800c724:	9309      	str	r3, [sp, #36]	; 0x24
 800c726:	2320      	movs	r3, #32
 800c728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c72c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c730:	2330      	movs	r3, #48	; 0x30
 800c732:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8dc <_svfiprintf_r+0x1ec>
 800c736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c73a:	f04f 0901 	mov.w	r9, #1
 800c73e:	4623      	mov	r3, r4
 800c740:	469a      	mov	sl, r3
 800c742:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c746:	b10a      	cbz	r2, 800c74c <_svfiprintf_r+0x5c>
 800c748:	2a25      	cmp	r2, #37	; 0x25
 800c74a:	d1f9      	bne.n	800c740 <_svfiprintf_r+0x50>
 800c74c:	ebba 0b04 	subs.w	fp, sl, r4
 800c750:	d00b      	beq.n	800c76a <_svfiprintf_r+0x7a>
 800c752:	465b      	mov	r3, fp
 800c754:	4622      	mov	r2, r4
 800c756:	4629      	mov	r1, r5
 800c758:	4638      	mov	r0, r7
 800c75a:	f7ff ff6d 	bl	800c638 <__ssputs_r>
 800c75e:	3001      	adds	r0, #1
 800c760:	f000 80aa 	beq.w	800c8b8 <_svfiprintf_r+0x1c8>
 800c764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c766:	445a      	add	r2, fp
 800c768:	9209      	str	r2, [sp, #36]	; 0x24
 800c76a:	f89a 3000 	ldrb.w	r3, [sl]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	f000 80a2 	beq.w	800c8b8 <_svfiprintf_r+0x1c8>
 800c774:	2300      	movs	r3, #0
 800c776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c77a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c77e:	f10a 0a01 	add.w	sl, sl, #1
 800c782:	9304      	str	r3, [sp, #16]
 800c784:	9307      	str	r3, [sp, #28]
 800c786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c78a:	931a      	str	r3, [sp, #104]	; 0x68
 800c78c:	4654      	mov	r4, sl
 800c78e:	2205      	movs	r2, #5
 800c790:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c794:	4851      	ldr	r0, [pc, #324]	; (800c8dc <_svfiprintf_r+0x1ec>)
 800c796:	f7f3 fd43 	bl	8000220 <memchr>
 800c79a:	9a04      	ldr	r2, [sp, #16]
 800c79c:	b9d8      	cbnz	r0, 800c7d6 <_svfiprintf_r+0xe6>
 800c79e:	06d0      	lsls	r0, r2, #27
 800c7a0:	bf44      	itt	mi
 800c7a2:	2320      	movmi	r3, #32
 800c7a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a8:	0711      	lsls	r1, r2, #28
 800c7aa:	bf44      	itt	mi
 800c7ac:	232b      	movmi	r3, #43	; 0x2b
 800c7ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b8:	d015      	beq.n	800c7e6 <_svfiprintf_r+0xf6>
 800c7ba:	9a07      	ldr	r2, [sp, #28]
 800c7bc:	4654      	mov	r4, sl
 800c7be:	2000      	movs	r0, #0
 800c7c0:	f04f 0c0a 	mov.w	ip, #10
 800c7c4:	4621      	mov	r1, r4
 800c7c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ca:	3b30      	subs	r3, #48	; 0x30
 800c7cc:	2b09      	cmp	r3, #9
 800c7ce:	d94e      	bls.n	800c86e <_svfiprintf_r+0x17e>
 800c7d0:	b1b0      	cbz	r0, 800c800 <_svfiprintf_r+0x110>
 800c7d2:	9207      	str	r2, [sp, #28]
 800c7d4:	e014      	b.n	800c800 <_svfiprintf_r+0x110>
 800c7d6:	eba0 0308 	sub.w	r3, r0, r8
 800c7da:	fa09 f303 	lsl.w	r3, r9, r3
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	9304      	str	r3, [sp, #16]
 800c7e2:	46a2      	mov	sl, r4
 800c7e4:	e7d2      	b.n	800c78c <_svfiprintf_r+0x9c>
 800c7e6:	9b03      	ldr	r3, [sp, #12]
 800c7e8:	1d19      	adds	r1, r3, #4
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	9103      	str	r1, [sp, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	bfbb      	ittet	lt
 800c7f2:	425b      	neglt	r3, r3
 800c7f4:	f042 0202 	orrlt.w	r2, r2, #2
 800c7f8:	9307      	strge	r3, [sp, #28]
 800c7fa:	9307      	strlt	r3, [sp, #28]
 800c7fc:	bfb8      	it	lt
 800c7fe:	9204      	strlt	r2, [sp, #16]
 800c800:	7823      	ldrb	r3, [r4, #0]
 800c802:	2b2e      	cmp	r3, #46	; 0x2e
 800c804:	d10c      	bne.n	800c820 <_svfiprintf_r+0x130>
 800c806:	7863      	ldrb	r3, [r4, #1]
 800c808:	2b2a      	cmp	r3, #42	; 0x2a
 800c80a:	d135      	bne.n	800c878 <_svfiprintf_r+0x188>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	1d1a      	adds	r2, r3, #4
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	9203      	str	r2, [sp, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	bfb8      	it	lt
 800c818:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c81c:	3402      	adds	r4, #2
 800c81e:	9305      	str	r3, [sp, #20]
 800c820:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8ec <_svfiprintf_r+0x1fc>
 800c824:	7821      	ldrb	r1, [r4, #0]
 800c826:	2203      	movs	r2, #3
 800c828:	4650      	mov	r0, sl
 800c82a:	f7f3 fcf9 	bl	8000220 <memchr>
 800c82e:	b140      	cbz	r0, 800c842 <_svfiprintf_r+0x152>
 800c830:	2340      	movs	r3, #64	; 0x40
 800c832:	eba0 000a 	sub.w	r0, r0, sl
 800c836:	fa03 f000 	lsl.w	r0, r3, r0
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	4303      	orrs	r3, r0
 800c83e:	3401      	adds	r4, #1
 800c840:	9304      	str	r3, [sp, #16]
 800c842:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c846:	4826      	ldr	r0, [pc, #152]	; (800c8e0 <_svfiprintf_r+0x1f0>)
 800c848:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c84c:	2206      	movs	r2, #6
 800c84e:	f7f3 fce7 	bl	8000220 <memchr>
 800c852:	2800      	cmp	r0, #0
 800c854:	d038      	beq.n	800c8c8 <_svfiprintf_r+0x1d8>
 800c856:	4b23      	ldr	r3, [pc, #140]	; (800c8e4 <_svfiprintf_r+0x1f4>)
 800c858:	bb1b      	cbnz	r3, 800c8a2 <_svfiprintf_r+0x1b2>
 800c85a:	9b03      	ldr	r3, [sp, #12]
 800c85c:	3307      	adds	r3, #7
 800c85e:	f023 0307 	bic.w	r3, r3, #7
 800c862:	3308      	adds	r3, #8
 800c864:	9303      	str	r3, [sp, #12]
 800c866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c868:	4433      	add	r3, r6
 800c86a:	9309      	str	r3, [sp, #36]	; 0x24
 800c86c:	e767      	b.n	800c73e <_svfiprintf_r+0x4e>
 800c86e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c872:	460c      	mov	r4, r1
 800c874:	2001      	movs	r0, #1
 800c876:	e7a5      	b.n	800c7c4 <_svfiprintf_r+0xd4>
 800c878:	2300      	movs	r3, #0
 800c87a:	3401      	adds	r4, #1
 800c87c:	9305      	str	r3, [sp, #20]
 800c87e:	4619      	mov	r1, r3
 800c880:	f04f 0c0a 	mov.w	ip, #10
 800c884:	4620      	mov	r0, r4
 800c886:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c88a:	3a30      	subs	r2, #48	; 0x30
 800c88c:	2a09      	cmp	r2, #9
 800c88e:	d903      	bls.n	800c898 <_svfiprintf_r+0x1a8>
 800c890:	2b00      	cmp	r3, #0
 800c892:	d0c5      	beq.n	800c820 <_svfiprintf_r+0x130>
 800c894:	9105      	str	r1, [sp, #20]
 800c896:	e7c3      	b.n	800c820 <_svfiprintf_r+0x130>
 800c898:	fb0c 2101 	mla	r1, ip, r1, r2
 800c89c:	4604      	mov	r4, r0
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e7f0      	b.n	800c884 <_svfiprintf_r+0x194>
 800c8a2:	ab03      	add	r3, sp, #12
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	462a      	mov	r2, r5
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <_svfiprintf_r+0x1f8>)
 800c8aa:	a904      	add	r1, sp, #16
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f000 f8bf 	bl	800ca30 <_printf_float>
 800c8b2:	1c42      	adds	r2, r0, #1
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	d1d6      	bne.n	800c866 <_svfiprintf_r+0x176>
 800c8b8:	89ab      	ldrh	r3, [r5, #12]
 800c8ba:	065b      	lsls	r3, r3, #25
 800c8bc:	f53f af2c 	bmi.w	800c718 <_svfiprintf_r+0x28>
 800c8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8c2:	b01d      	add	sp, #116	; 0x74
 800c8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c8:	ab03      	add	r3, sp, #12
 800c8ca:	9300      	str	r3, [sp, #0]
 800c8cc:	462a      	mov	r2, r5
 800c8ce:	4b06      	ldr	r3, [pc, #24]	; (800c8e8 <_svfiprintf_r+0x1f8>)
 800c8d0:	a904      	add	r1, sp, #16
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	f000 fb50 	bl	800cf78 <_printf_i>
 800c8d8:	e7eb      	b.n	800c8b2 <_svfiprintf_r+0x1c2>
 800c8da:	bf00      	nop
 800c8dc:	08012430 	.word	0x08012430
 800c8e0:	0801243a 	.word	0x0801243a
 800c8e4:	0800ca31 	.word	0x0800ca31
 800c8e8:	0800c639 	.word	0x0800c639
 800c8ec:	08012436 	.word	0x08012436

0800c8f0 <__cvt>:
 800c8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f4:	ec55 4b10 	vmov	r4, r5, d0
 800c8f8:	2d00      	cmp	r5, #0
 800c8fa:	460e      	mov	r6, r1
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	462b      	mov	r3, r5
 800c900:	bfbb      	ittet	lt
 800c902:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c906:	461d      	movlt	r5, r3
 800c908:	2300      	movge	r3, #0
 800c90a:	232d      	movlt	r3, #45	; 0x2d
 800c90c:	700b      	strb	r3, [r1, #0]
 800c90e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c910:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c914:	4691      	mov	r9, r2
 800c916:	f023 0820 	bic.w	r8, r3, #32
 800c91a:	bfbc      	itt	lt
 800c91c:	4622      	movlt	r2, r4
 800c91e:	4614      	movlt	r4, r2
 800c920:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c924:	d005      	beq.n	800c932 <__cvt+0x42>
 800c926:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c92a:	d100      	bne.n	800c92e <__cvt+0x3e>
 800c92c:	3601      	adds	r6, #1
 800c92e:	2102      	movs	r1, #2
 800c930:	e000      	b.n	800c934 <__cvt+0x44>
 800c932:	2103      	movs	r1, #3
 800c934:	ab03      	add	r3, sp, #12
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	ab02      	add	r3, sp, #8
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	ec45 4b10 	vmov	d0, r4, r5
 800c940:	4653      	mov	r3, sl
 800c942:	4632      	mov	r2, r6
 800c944:	f001 fc4c 	bl	800e1e0 <_dtoa_r>
 800c948:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c94c:	4607      	mov	r7, r0
 800c94e:	d102      	bne.n	800c956 <__cvt+0x66>
 800c950:	f019 0f01 	tst.w	r9, #1
 800c954:	d022      	beq.n	800c99c <__cvt+0xac>
 800c956:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c95a:	eb07 0906 	add.w	r9, r7, r6
 800c95e:	d110      	bne.n	800c982 <__cvt+0x92>
 800c960:	783b      	ldrb	r3, [r7, #0]
 800c962:	2b30      	cmp	r3, #48	; 0x30
 800c964:	d10a      	bne.n	800c97c <__cvt+0x8c>
 800c966:	2200      	movs	r2, #0
 800c968:	2300      	movs	r3, #0
 800c96a:	4620      	mov	r0, r4
 800c96c:	4629      	mov	r1, r5
 800c96e:	f7f4 f8cb 	bl	8000b08 <__aeabi_dcmpeq>
 800c972:	b918      	cbnz	r0, 800c97c <__cvt+0x8c>
 800c974:	f1c6 0601 	rsb	r6, r6, #1
 800c978:	f8ca 6000 	str.w	r6, [sl]
 800c97c:	f8da 3000 	ldr.w	r3, [sl]
 800c980:	4499      	add	r9, r3
 800c982:	2200      	movs	r2, #0
 800c984:	2300      	movs	r3, #0
 800c986:	4620      	mov	r0, r4
 800c988:	4629      	mov	r1, r5
 800c98a:	f7f4 f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800c98e:	b108      	cbz	r0, 800c994 <__cvt+0xa4>
 800c990:	f8cd 900c 	str.w	r9, [sp, #12]
 800c994:	2230      	movs	r2, #48	; 0x30
 800c996:	9b03      	ldr	r3, [sp, #12]
 800c998:	454b      	cmp	r3, r9
 800c99a:	d307      	bcc.n	800c9ac <__cvt+0xbc>
 800c99c:	9b03      	ldr	r3, [sp, #12]
 800c99e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c9a0:	1bdb      	subs	r3, r3, r7
 800c9a2:	4638      	mov	r0, r7
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	b004      	add	sp, #16
 800c9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9ac:	1c59      	adds	r1, r3, #1
 800c9ae:	9103      	str	r1, [sp, #12]
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	e7f0      	b.n	800c996 <__cvt+0xa6>

0800c9b4 <__exponent>:
 800c9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2900      	cmp	r1, #0
 800c9ba:	bfb8      	it	lt
 800c9bc:	4249      	neglt	r1, r1
 800c9be:	f803 2b02 	strb.w	r2, [r3], #2
 800c9c2:	bfb4      	ite	lt
 800c9c4:	222d      	movlt	r2, #45	; 0x2d
 800c9c6:	222b      	movge	r2, #43	; 0x2b
 800c9c8:	2909      	cmp	r1, #9
 800c9ca:	7042      	strb	r2, [r0, #1]
 800c9cc:	dd2a      	ble.n	800ca24 <__exponent+0x70>
 800c9ce:	f10d 0407 	add.w	r4, sp, #7
 800c9d2:	46a4      	mov	ip, r4
 800c9d4:	270a      	movs	r7, #10
 800c9d6:	46a6      	mov	lr, r4
 800c9d8:	460a      	mov	r2, r1
 800c9da:	fb91 f6f7 	sdiv	r6, r1, r7
 800c9de:	fb07 1516 	mls	r5, r7, r6, r1
 800c9e2:	3530      	adds	r5, #48	; 0x30
 800c9e4:	2a63      	cmp	r2, #99	; 0x63
 800c9e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c9ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c9ee:	4631      	mov	r1, r6
 800c9f0:	dcf1      	bgt.n	800c9d6 <__exponent+0x22>
 800c9f2:	3130      	adds	r1, #48	; 0x30
 800c9f4:	f1ae 0502 	sub.w	r5, lr, #2
 800c9f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9fc:	1c44      	adds	r4, r0, #1
 800c9fe:	4629      	mov	r1, r5
 800ca00:	4561      	cmp	r1, ip
 800ca02:	d30a      	bcc.n	800ca1a <__exponent+0x66>
 800ca04:	f10d 0209 	add.w	r2, sp, #9
 800ca08:	eba2 020e 	sub.w	r2, r2, lr
 800ca0c:	4565      	cmp	r5, ip
 800ca0e:	bf88      	it	hi
 800ca10:	2200      	movhi	r2, #0
 800ca12:	4413      	add	r3, r2
 800ca14:	1a18      	subs	r0, r3, r0
 800ca16:	b003      	add	sp, #12
 800ca18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ca22:	e7ed      	b.n	800ca00 <__exponent+0x4c>
 800ca24:	2330      	movs	r3, #48	; 0x30
 800ca26:	3130      	adds	r1, #48	; 0x30
 800ca28:	7083      	strb	r3, [r0, #2]
 800ca2a:	70c1      	strb	r1, [r0, #3]
 800ca2c:	1d03      	adds	r3, r0, #4
 800ca2e:	e7f1      	b.n	800ca14 <__exponent+0x60>

0800ca30 <_printf_float>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	ed2d 8b02 	vpush	{d8}
 800ca38:	b08d      	sub	sp, #52	; 0x34
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca40:	4616      	mov	r6, r2
 800ca42:	461f      	mov	r7, r3
 800ca44:	4605      	mov	r5, r0
 800ca46:	f002 fe35 	bl	800f6b4 <_localeconv_r>
 800ca4a:	f8d0 a000 	ldr.w	sl, [r0]
 800ca4e:	4650      	mov	r0, sl
 800ca50:	f7f3 fbd8 	bl	8000204 <strlen>
 800ca54:	2300      	movs	r3, #0
 800ca56:	930a      	str	r3, [sp, #40]	; 0x28
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	9305      	str	r3, [sp, #20]
 800ca5c:	f8d8 3000 	ldr.w	r3, [r8]
 800ca60:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca64:	3307      	adds	r3, #7
 800ca66:	f023 0307 	bic.w	r3, r3, #7
 800ca6a:	f103 0208 	add.w	r2, r3, #8
 800ca6e:	f8c8 2000 	str.w	r2, [r8]
 800ca72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca76:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca7a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca82:	9307      	str	r3, [sp, #28]
 800ca84:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca88:	ee08 0a10 	vmov	s16, r0
 800ca8c:	4b9f      	ldr	r3, [pc, #636]	; (800cd0c <_printf_float+0x2dc>)
 800ca8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca96:	f7f4 f869 	bl	8000b6c <__aeabi_dcmpun>
 800ca9a:	bb88      	cbnz	r0, 800cb00 <_printf_float+0xd0>
 800ca9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800caa0:	4b9a      	ldr	r3, [pc, #616]	; (800cd0c <_printf_float+0x2dc>)
 800caa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caa6:	f7f4 f843 	bl	8000b30 <__aeabi_dcmple>
 800caaa:	bb48      	cbnz	r0, 800cb00 <_printf_float+0xd0>
 800caac:	2200      	movs	r2, #0
 800caae:	2300      	movs	r3, #0
 800cab0:	4640      	mov	r0, r8
 800cab2:	4649      	mov	r1, r9
 800cab4:	f7f4 f832 	bl	8000b1c <__aeabi_dcmplt>
 800cab8:	b110      	cbz	r0, 800cac0 <_printf_float+0x90>
 800caba:	232d      	movs	r3, #45	; 0x2d
 800cabc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cac0:	4b93      	ldr	r3, [pc, #588]	; (800cd10 <_printf_float+0x2e0>)
 800cac2:	4894      	ldr	r0, [pc, #592]	; (800cd14 <_printf_float+0x2e4>)
 800cac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cac8:	bf94      	ite	ls
 800caca:	4698      	movls	r8, r3
 800cacc:	4680      	movhi	r8, r0
 800cace:	2303      	movs	r3, #3
 800cad0:	6123      	str	r3, [r4, #16]
 800cad2:	9b05      	ldr	r3, [sp, #20]
 800cad4:	f023 0204 	bic.w	r2, r3, #4
 800cad8:	6022      	str	r2, [r4, #0]
 800cada:	f04f 0900 	mov.w	r9, #0
 800cade:	9700      	str	r7, [sp, #0]
 800cae0:	4633      	mov	r3, r6
 800cae2:	aa0b      	add	r2, sp, #44	; 0x2c
 800cae4:	4621      	mov	r1, r4
 800cae6:	4628      	mov	r0, r5
 800cae8:	f000 f9d8 	bl	800ce9c <_printf_common>
 800caec:	3001      	adds	r0, #1
 800caee:	f040 8090 	bne.w	800cc12 <_printf_float+0x1e2>
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caf6:	b00d      	add	sp, #52	; 0x34
 800caf8:	ecbd 8b02 	vpop	{d8}
 800cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb00:	4642      	mov	r2, r8
 800cb02:	464b      	mov	r3, r9
 800cb04:	4640      	mov	r0, r8
 800cb06:	4649      	mov	r1, r9
 800cb08:	f7f4 f830 	bl	8000b6c <__aeabi_dcmpun>
 800cb0c:	b140      	cbz	r0, 800cb20 <_printf_float+0xf0>
 800cb0e:	464b      	mov	r3, r9
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	bfbc      	itt	lt
 800cb14:	232d      	movlt	r3, #45	; 0x2d
 800cb16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cb1a:	487f      	ldr	r0, [pc, #508]	; (800cd18 <_printf_float+0x2e8>)
 800cb1c:	4b7f      	ldr	r3, [pc, #508]	; (800cd1c <_printf_float+0x2ec>)
 800cb1e:	e7d1      	b.n	800cac4 <_printf_float+0x94>
 800cb20:	6863      	ldr	r3, [r4, #4]
 800cb22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cb26:	9206      	str	r2, [sp, #24]
 800cb28:	1c5a      	adds	r2, r3, #1
 800cb2a:	d13f      	bne.n	800cbac <_printf_float+0x17c>
 800cb2c:	2306      	movs	r3, #6
 800cb2e:	6063      	str	r3, [r4, #4]
 800cb30:	9b05      	ldr	r3, [sp, #20]
 800cb32:	6861      	ldr	r1, [r4, #4]
 800cb34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb38:	2300      	movs	r3, #0
 800cb3a:	9303      	str	r3, [sp, #12]
 800cb3c:	ab0a      	add	r3, sp, #40	; 0x28
 800cb3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb42:	ab09      	add	r3, sp, #36	; 0x24
 800cb44:	ec49 8b10 	vmov	d0, r8, r9
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	6022      	str	r2, [r4, #0]
 800cb4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb50:	4628      	mov	r0, r5
 800cb52:	f7ff fecd 	bl	800c8f0 <__cvt>
 800cb56:	9b06      	ldr	r3, [sp, #24]
 800cb58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb5a:	2b47      	cmp	r3, #71	; 0x47
 800cb5c:	4680      	mov	r8, r0
 800cb5e:	d108      	bne.n	800cb72 <_printf_float+0x142>
 800cb60:	1cc8      	adds	r0, r1, #3
 800cb62:	db02      	blt.n	800cb6a <_printf_float+0x13a>
 800cb64:	6863      	ldr	r3, [r4, #4]
 800cb66:	4299      	cmp	r1, r3
 800cb68:	dd41      	ble.n	800cbee <_printf_float+0x1be>
 800cb6a:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb6e:	fa5f fb8b 	uxtb.w	fp, fp
 800cb72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb76:	d820      	bhi.n	800cbba <_printf_float+0x18a>
 800cb78:	3901      	subs	r1, #1
 800cb7a:	465a      	mov	r2, fp
 800cb7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb80:	9109      	str	r1, [sp, #36]	; 0x24
 800cb82:	f7ff ff17 	bl	800c9b4 <__exponent>
 800cb86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb88:	1813      	adds	r3, r2, r0
 800cb8a:	2a01      	cmp	r2, #1
 800cb8c:	4681      	mov	r9, r0
 800cb8e:	6123      	str	r3, [r4, #16]
 800cb90:	dc02      	bgt.n	800cb98 <_printf_float+0x168>
 800cb92:	6822      	ldr	r2, [r4, #0]
 800cb94:	07d2      	lsls	r2, r2, #31
 800cb96:	d501      	bpl.n	800cb9c <_printf_float+0x16c>
 800cb98:	3301      	adds	r3, #1
 800cb9a:	6123      	str	r3, [r4, #16]
 800cb9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d09c      	beq.n	800cade <_printf_float+0xae>
 800cba4:	232d      	movs	r3, #45	; 0x2d
 800cba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbaa:	e798      	b.n	800cade <_printf_float+0xae>
 800cbac:	9a06      	ldr	r2, [sp, #24]
 800cbae:	2a47      	cmp	r2, #71	; 0x47
 800cbb0:	d1be      	bne.n	800cb30 <_printf_float+0x100>
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d1bc      	bne.n	800cb30 <_printf_float+0x100>
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e7b9      	b.n	800cb2e <_printf_float+0xfe>
 800cbba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cbbe:	d118      	bne.n	800cbf2 <_printf_float+0x1c2>
 800cbc0:	2900      	cmp	r1, #0
 800cbc2:	6863      	ldr	r3, [r4, #4]
 800cbc4:	dd0b      	ble.n	800cbde <_printf_float+0x1ae>
 800cbc6:	6121      	str	r1, [r4, #16]
 800cbc8:	b913      	cbnz	r3, 800cbd0 <_printf_float+0x1a0>
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	07d0      	lsls	r0, r2, #31
 800cbce:	d502      	bpl.n	800cbd6 <_printf_float+0x1a6>
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	440b      	add	r3, r1
 800cbd4:	6123      	str	r3, [r4, #16]
 800cbd6:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbd8:	f04f 0900 	mov.w	r9, #0
 800cbdc:	e7de      	b.n	800cb9c <_printf_float+0x16c>
 800cbde:	b913      	cbnz	r3, 800cbe6 <_printf_float+0x1b6>
 800cbe0:	6822      	ldr	r2, [r4, #0]
 800cbe2:	07d2      	lsls	r2, r2, #31
 800cbe4:	d501      	bpl.n	800cbea <_printf_float+0x1ba>
 800cbe6:	3302      	adds	r3, #2
 800cbe8:	e7f4      	b.n	800cbd4 <_printf_float+0x1a4>
 800cbea:	2301      	movs	r3, #1
 800cbec:	e7f2      	b.n	800cbd4 <_printf_float+0x1a4>
 800cbee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbf4:	4299      	cmp	r1, r3
 800cbf6:	db05      	blt.n	800cc04 <_printf_float+0x1d4>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	6121      	str	r1, [r4, #16]
 800cbfc:	07d8      	lsls	r0, r3, #31
 800cbfe:	d5ea      	bpl.n	800cbd6 <_printf_float+0x1a6>
 800cc00:	1c4b      	adds	r3, r1, #1
 800cc02:	e7e7      	b.n	800cbd4 <_printf_float+0x1a4>
 800cc04:	2900      	cmp	r1, #0
 800cc06:	bfd4      	ite	le
 800cc08:	f1c1 0202 	rsble	r2, r1, #2
 800cc0c:	2201      	movgt	r2, #1
 800cc0e:	4413      	add	r3, r2
 800cc10:	e7e0      	b.n	800cbd4 <_printf_float+0x1a4>
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	055a      	lsls	r2, r3, #21
 800cc16:	d407      	bmi.n	800cc28 <_printf_float+0x1f8>
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	4642      	mov	r2, r8
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	d12c      	bne.n	800cc80 <_printf_float+0x250>
 800cc26:	e764      	b.n	800caf2 <_printf_float+0xc2>
 800cc28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc2c:	f240 80e0 	bls.w	800cdf0 <_printf_float+0x3c0>
 800cc30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc34:	2200      	movs	r2, #0
 800cc36:	2300      	movs	r3, #0
 800cc38:	f7f3 ff66 	bl	8000b08 <__aeabi_dcmpeq>
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	d034      	beq.n	800ccaa <_printf_float+0x27a>
 800cc40:	4a37      	ldr	r2, [pc, #220]	; (800cd20 <_printf_float+0x2f0>)
 800cc42:	2301      	movs	r3, #1
 800cc44:	4631      	mov	r1, r6
 800cc46:	4628      	mov	r0, r5
 800cc48:	47b8      	blx	r7
 800cc4a:	3001      	adds	r0, #1
 800cc4c:	f43f af51 	beq.w	800caf2 <_printf_float+0xc2>
 800cc50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc54:	429a      	cmp	r2, r3
 800cc56:	db02      	blt.n	800cc5e <_printf_float+0x22e>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	07d8      	lsls	r0, r3, #31
 800cc5c:	d510      	bpl.n	800cc80 <_printf_float+0x250>
 800cc5e:	ee18 3a10 	vmov	r3, s16
 800cc62:	4652      	mov	r2, sl
 800cc64:	4631      	mov	r1, r6
 800cc66:	4628      	mov	r0, r5
 800cc68:	47b8      	blx	r7
 800cc6a:	3001      	adds	r0, #1
 800cc6c:	f43f af41 	beq.w	800caf2 <_printf_float+0xc2>
 800cc70:	f04f 0800 	mov.w	r8, #0
 800cc74:	f104 091a 	add.w	r9, r4, #26
 800cc78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc7a:	3b01      	subs	r3, #1
 800cc7c:	4543      	cmp	r3, r8
 800cc7e:	dc09      	bgt.n	800cc94 <_printf_float+0x264>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	079b      	lsls	r3, r3, #30
 800cc84:	f100 8105 	bmi.w	800ce92 <_printf_float+0x462>
 800cc88:	68e0      	ldr	r0, [r4, #12]
 800cc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc8c:	4298      	cmp	r0, r3
 800cc8e:	bfb8      	it	lt
 800cc90:	4618      	movlt	r0, r3
 800cc92:	e730      	b.n	800caf6 <_printf_float+0xc6>
 800cc94:	2301      	movs	r3, #1
 800cc96:	464a      	mov	r2, r9
 800cc98:	4631      	mov	r1, r6
 800cc9a:	4628      	mov	r0, r5
 800cc9c:	47b8      	blx	r7
 800cc9e:	3001      	adds	r0, #1
 800cca0:	f43f af27 	beq.w	800caf2 <_printf_float+0xc2>
 800cca4:	f108 0801 	add.w	r8, r8, #1
 800cca8:	e7e6      	b.n	800cc78 <_printf_float+0x248>
 800ccaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	dc39      	bgt.n	800cd24 <_printf_float+0x2f4>
 800ccb0:	4a1b      	ldr	r2, [pc, #108]	; (800cd20 <_printf_float+0x2f0>)
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4631      	mov	r1, r6
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	f43f af19 	beq.w	800caf2 <_printf_float+0xc2>
 800ccc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	d102      	bne.n	800ccce <_printf_float+0x29e>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	07d9      	lsls	r1, r3, #31
 800cccc:	d5d8      	bpl.n	800cc80 <_printf_float+0x250>
 800ccce:	ee18 3a10 	vmov	r3, s16
 800ccd2:	4652      	mov	r2, sl
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	4628      	mov	r0, r5
 800ccd8:	47b8      	blx	r7
 800ccda:	3001      	adds	r0, #1
 800ccdc:	f43f af09 	beq.w	800caf2 <_printf_float+0xc2>
 800cce0:	f04f 0900 	mov.w	r9, #0
 800cce4:	f104 0a1a 	add.w	sl, r4, #26
 800cce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccea:	425b      	negs	r3, r3
 800ccec:	454b      	cmp	r3, r9
 800ccee:	dc01      	bgt.n	800ccf4 <_printf_float+0x2c4>
 800ccf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccf2:	e792      	b.n	800cc1a <_printf_float+0x1ea>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	4652      	mov	r2, sl
 800ccf8:	4631      	mov	r1, r6
 800ccfa:	4628      	mov	r0, r5
 800ccfc:	47b8      	blx	r7
 800ccfe:	3001      	adds	r0, #1
 800cd00:	f43f aef7 	beq.w	800caf2 <_printf_float+0xc2>
 800cd04:	f109 0901 	add.w	r9, r9, #1
 800cd08:	e7ee      	b.n	800cce8 <_printf_float+0x2b8>
 800cd0a:	bf00      	nop
 800cd0c:	7fefffff 	.word	0x7fefffff
 800cd10:	08012441 	.word	0x08012441
 800cd14:	08012445 	.word	0x08012445
 800cd18:	0801244d 	.word	0x0801244d
 800cd1c:	08012449 	.word	0x08012449
 800cd20:	08012451 	.word	0x08012451
 800cd24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	bfa8      	it	ge
 800cd2c:	461a      	movge	r2, r3
 800cd2e:	2a00      	cmp	r2, #0
 800cd30:	4691      	mov	r9, r2
 800cd32:	dc37      	bgt.n	800cda4 <_printf_float+0x374>
 800cd34:	f04f 0b00 	mov.w	fp, #0
 800cd38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd3c:	f104 021a 	add.w	r2, r4, #26
 800cd40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	eba3 0309 	sub.w	r3, r3, r9
 800cd48:	455b      	cmp	r3, fp
 800cd4a:	dc33      	bgt.n	800cdb4 <_printf_float+0x384>
 800cd4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd50:	429a      	cmp	r2, r3
 800cd52:	db3b      	blt.n	800cdcc <_printf_float+0x39c>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	07da      	lsls	r2, r3, #31
 800cd58:	d438      	bmi.n	800cdcc <_printf_float+0x39c>
 800cd5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd5c:	9a05      	ldr	r2, [sp, #20]
 800cd5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd60:	1a9a      	subs	r2, r3, r2
 800cd62:	eba3 0901 	sub.w	r9, r3, r1
 800cd66:	4591      	cmp	r9, r2
 800cd68:	bfa8      	it	ge
 800cd6a:	4691      	movge	r9, r2
 800cd6c:	f1b9 0f00 	cmp.w	r9, #0
 800cd70:	dc35      	bgt.n	800cdde <_printf_float+0x3ae>
 800cd72:	f04f 0800 	mov.w	r8, #0
 800cd76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd7a:	f104 0a1a 	add.w	sl, r4, #26
 800cd7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd82:	1a9b      	subs	r3, r3, r2
 800cd84:	eba3 0309 	sub.w	r3, r3, r9
 800cd88:	4543      	cmp	r3, r8
 800cd8a:	f77f af79 	ble.w	800cc80 <_printf_float+0x250>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4652      	mov	r2, sl
 800cd92:	4631      	mov	r1, r6
 800cd94:	4628      	mov	r0, r5
 800cd96:	47b8      	blx	r7
 800cd98:	3001      	adds	r0, #1
 800cd9a:	f43f aeaa 	beq.w	800caf2 <_printf_float+0xc2>
 800cd9e:	f108 0801 	add.w	r8, r8, #1
 800cda2:	e7ec      	b.n	800cd7e <_printf_float+0x34e>
 800cda4:	4613      	mov	r3, r2
 800cda6:	4631      	mov	r1, r6
 800cda8:	4642      	mov	r2, r8
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	d1c0      	bne.n	800cd34 <_printf_float+0x304>
 800cdb2:	e69e      	b.n	800caf2 <_printf_float+0xc2>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	4631      	mov	r1, r6
 800cdb8:	4628      	mov	r0, r5
 800cdba:	9205      	str	r2, [sp, #20]
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	f43f ae97 	beq.w	800caf2 <_printf_float+0xc2>
 800cdc4:	9a05      	ldr	r2, [sp, #20]
 800cdc6:	f10b 0b01 	add.w	fp, fp, #1
 800cdca:	e7b9      	b.n	800cd40 <_printf_float+0x310>
 800cdcc:	ee18 3a10 	vmov	r3, s16
 800cdd0:	4652      	mov	r2, sl
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	4628      	mov	r0, r5
 800cdd6:	47b8      	blx	r7
 800cdd8:	3001      	adds	r0, #1
 800cdda:	d1be      	bne.n	800cd5a <_printf_float+0x32a>
 800cddc:	e689      	b.n	800caf2 <_printf_float+0xc2>
 800cdde:	9a05      	ldr	r2, [sp, #20]
 800cde0:	464b      	mov	r3, r9
 800cde2:	4442      	add	r2, r8
 800cde4:	4631      	mov	r1, r6
 800cde6:	4628      	mov	r0, r5
 800cde8:	47b8      	blx	r7
 800cdea:	3001      	adds	r0, #1
 800cdec:	d1c1      	bne.n	800cd72 <_printf_float+0x342>
 800cdee:	e680      	b.n	800caf2 <_printf_float+0xc2>
 800cdf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdf2:	2a01      	cmp	r2, #1
 800cdf4:	dc01      	bgt.n	800cdfa <_printf_float+0x3ca>
 800cdf6:	07db      	lsls	r3, r3, #31
 800cdf8:	d538      	bpl.n	800ce6c <_printf_float+0x43c>
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	4642      	mov	r2, r8
 800cdfe:	4631      	mov	r1, r6
 800ce00:	4628      	mov	r0, r5
 800ce02:	47b8      	blx	r7
 800ce04:	3001      	adds	r0, #1
 800ce06:	f43f ae74 	beq.w	800caf2 <_printf_float+0xc2>
 800ce0a:	ee18 3a10 	vmov	r3, s16
 800ce0e:	4652      	mov	r2, sl
 800ce10:	4631      	mov	r1, r6
 800ce12:	4628      	mov	r0, r5
 800ce14:	47b8      	blx	r7
 800ce16:	3001      	adds	r0, #1
 800ce18:	f43f ae6b 	beq.w	800caf2 <_printf_float+0xc2>
 800ce1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ce20:	2200      	movs	r2, #0
 800ce22:	2300      	movs	r3, #0
 800ce24:	f7f3 fe70 	bl	8000b08 <__aeabi_dcmpeq>
 800ce28:	b9d8      	cbnz	r0, 800ce62 <_printf_float+0x432>
 800ce2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2c:	f108 0201 	add.w	r2, r8, #1
 800ce30:	3b01      	subs	r3, #1
 800ce32:	4631      	mov	r1, r6
 800ce34:	4628      	mov	r0, r5
 800ce36:	47b8      	blx	r7
 800ce38:	3001      	adds	r0, #1
 800ce3a:	d10e      	bne.n	800ce5a <_printf_float+0x42a>
 800ce3c:	e659      	b.n	800caf2 <_printf_float+0xc2>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4652      	mov	r2, sl
 800ce42:	4631      	mov	r1, r6
 800ce44:	4628      	mov	r0, r5
 800ce46:	47b8      	blx	r7
 800ce48:	3001      	adds	r0, #1
 800ce4a:	f43f ae52 	beq.w	800caf2 <_printf_float+0xc2>
 800ce4e:	f108 0801 	add.w	r8, r8, #1
 800ce52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce54:	3b01      	subs	r3, #1
 800ce56:	4543      	cmp	r3, r8
 800ce58:	dcf1      	bgt.n	800ce3e <_printf_float+0x40e>
 800ce5a:	464b      	mov	r3, r9
 800ce5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce60:	e6dc      	b.n	800cc1c <_printf_float+0x1ec>
 800ce62:	f04f 0800 	mov.w	r8, #0
 800ce66:	f104 0a1a 	add.w	sl, r4, #26
 800ce6a:	e7f2      	b.n	800ce52 <_printf_float+0x422>
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	4642      	mov	r2, r8
 800ce70:	e7df      	b.n	800ce32 <_printf_float+0x402>
 800ce72:	2301      	movs	r3, #1
 800ce74:	464a      	mov	r2, r9
 800ce76:	4631      	mov	r1, r6
 800ce78:	4628      	mov	r0, r5
 800ce7a:	47b8      	blx	r7
 800ce7c:	3001      	adds	r0, #1
 800ce7e:	f43f ae38 	beq.w	800caf2 <_printf_float+0xc2>
 800ce82:	f108 0801 	add.w	r8, r8, #1
 800ce86:	68e3      	ldr	r3, [r4, #12]
 800ce88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce8a:	1a5b      	subs	r3, r3, r1
 800ce8c:	4543      	cmp	r3, r8
 800ce8e:	dcf0      	bgt.n	800ce72 <_printf_float+0x442>
 800ce90:	e6fa      	b.n	800cc88 <_printf_float+0x258>
 800ce92:	f04f 0800 	mov.w	r8, #0
 800ce96:	f104 0919 	add.w	r9, r4, #25
 800ce9a:	e7f4      	b.n	800ce86 <_printf_float+0x456>

0800ce9c <_printf_common>:
 800ce9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cea0:	4616      	mov	r6, r2
 800cea2:	4699      	mov	r9, r3
 800cea4:	688a      	ldr	r2, [r1, #8]
 800cea6:	690b      	ldr	r3, [r1, #16]
 800cea8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ceac:	4293      	cmp	r3, r2
 800ceae:	bfb8      	it	lt
 800ceb0:	4613      	movlt	r3, r2
 800ceb2:	6033      	str	r3, [r6, #0]
 800ceb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ceb8:	4607      	mov	r7, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	b10a      	cbz	r2, 800cec2 <_printf_common+0x26>
 800cebe:	3301      	adds	r3, #1
 800cec0:	6033      	str	r3, [r6, #0]
 800cec2:	6823      	ldr	r3, [r4, #0]
 800cec4:	0699      	lsls	r1, r3, #26
 800cec6:	bf42      	ittt	mi
 800cec8:	6833      	ldrmi	r3, [r6, #0]
 800ceca:	3302      	addmi	r3, #2
 800cecc:	6033      	strmi	r3, [r6, #0]
 800cece:	6825      	ldr	r5, [r4, #0]
 800ced0:	f015 0506 	ands.w	r5, r5, #6
 800ced4:	d106      	bne.n	800cee4 <_printf_common+0x48>
 800ced6:	f104 0a19 	add.w	sl, r4, #25
 800ceda:	68e3      	ldr	r3, [r4, #12]
 800cedc:	6832      	ldr	r2, [r6, #0]
 800cede:	1a9b      	subs	r3, r3, r2
 800cee0:	42ab      	cmp	r3, r5
 800cee2:	dc26      	bgt.n	800cf32 <_printf_common+0x96>
 800cee4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cee8:	1e13      	subs	r3, r2, #0
 800ceea:	6822      	ldr	r2, [r4, #0]
 800ceec:	bf18      	it	ne
 800ceee:	2301      	movne	r3, #1
 800cef0:	0692      	lsls	r2, r2, #26
 800cef2:	d42b      	bmi.n	800cf4c <_printf_common+0xb0>
 800cef4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cef8:	4649      	mov	r1, r9
 800cefa:	4638      	mov	r0, r7
 800cefc:	47c0      	blx	r8
 800cefe:	3001      	adds	r0, #1
 800cf00:	d01e      	beq.n	800cf40 <_printf_common+0xa4>
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	68e5      	ldr	r5, [r4, #12]
 800cf06:	6832      	ldr	r2, [r6, #0]
 800cf08:	f003 0306 	and.w	r3, r3, #6
 800cf0c:	2b04      	cmp	r3, #4
 800cf0e:	bf08      	it	eq
 800cf10:	1aad      	subeq	r5, r5, r2
 800cf12:	68a3      	ldr	r3, [r4, #8]
 800cf14:	6922      	ldr	r2, [r4, #16]
 800cf16:	bf0c      	ite	eq
 800cf18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf1c:	2500      	movne	r5, #0
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	bfc4      	itt	gt
 800cf22:	1a9b      	subgt	r3, r3, r2
 800cf24:	18ed      	addgt	r5, r5, r3
 800cf26:	2600      	movs	r6, #0
 800cf28:	341a      	adds	r4, #26
 800cf2a:	42b5      	cmp	r5, r6
 800cf2c:	d11a      	bne.n	800cf64 <_printf_common+0xc8>
 800cf2e:	2000      	movs	r0, #0
 800cf30:	e008      	b.n	800cf44 <_printf_common+0xa8>
 800cf32:	2301      	movs	r3, #1
 800cf34:	4652      	mov	r2, sl
 800cf36:	4649      	mov	r1, r9
 800cf38:	4638      	mov	r0, r7
 800cf3a:	47c0      	blx	r8
 800cf3c:	3001      	adds	r0, #1
 800cf3e:	d103      	bne.n	800cf48 <_printf_common+0xac>
 800cf40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf48:	3501      	adds	r5, #1
 800cf4a:	e7c6      	b.n	800ceda <_printf_common+0x3e>
 800cf4c:	18e1      	adds	r1, r4, r3
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	2030      	movs	r0, #48	; 0x30
 800cf52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf56:	4422      	add	r2, r4
 800cf58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf60:	3302      	adds	r3, #2
 800cf62:	e7c7      	b.n	800cef4 <_printf_common+0x58>
 800cf64:	2301      	movs	r3, #1
 800cf66:	4622      	mov	r2, r4
 800cf68:	4649      	mov	r1, r9
 800cf6a:	4638      	mov	r0, r7
 800cf6c:	47c0      	blx	r8
 800cf6e:	3001      	adds	r0, #1
 800cf70:	d0e6      	beq.n	800cf40 <_printf_common+0xa4>
 800cf72:	3601      	adds	r6, #1
 800cf74:	e7d9      	b.n	800cf2a <_printf_common+0x8e>
	...

0800cf78 <_printf_i>:
 800cf78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf7c:	7e0f      	ldrb	r7, [r1, #24]
 800cf7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf80:	2f78      	cmp	r7, #120	; 0x78
 800cf82:	4691      	mov	r9, r2
 800cf84:	4680      	mov	r8, r0
 800cf86:	460c      	mov	r4, r1
 800cf88:	469a      	mov	sl, r3
 800cf8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf8e:	d807      	bhi.n	800cfa0 <_printf_i+0x28>
 800cf90:	2f62      	cmp	r7, #98	; 0x62
 800cf92:	d80a      	bhi.n	800cfaa <_printf_i+0x32>
 800cf94:	2f00      	cmp	r7, #0
 800cf96:	f000 80d8 	beq.w	800d14a <_printf_i+0x1d2>
 800cf9a:	2f58      	cmp	r7, #88	; 0x58
 800cf9c:	f000 80a3 	beq.w	800d0e6 <_printf_i+0x16e>
 800cfa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfa4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfa8:	e03a      	b.n	800d020 <_printf_i+0xa8>
 800cfaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfae:	2b15      	cmp	r3, #21
 800cfb0:	d8f6      	bhi.n	800cfa0 <_printf_i+0x28>
 800cfb2:	a101      	add	r1, pc, #4	; (adr r1, 800cfb8 <_printf_i+0x40>)
 800cfb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfb8:	0800d011 	.word	0x0800d011
 800cfbc:	0800d025 	.word	0x0800d025
 800cfc0:	0800cfa1 	.word	0x0800cfa1
 800cfc4:	0800cfa1 	.word	0x0800cfa1
 800cfc8:	0800cfa1 	.word	0x0800cfa1
 800cfcc:	0800cfa1 	.word	0x0800cfa1
 800cfd0:	0800d025 	.word	0x0800d025
 800cfd4:	0800cfa1 	.word	0x0800cfa1
 800cfd8:	0800cfa1 	.word	0x0800cfa1
 800cfdc:	0800cfa1 	.word	0x0800cfa1
 800cfe0:	0800cfa1 	.word	0x0800cfa1
 800cfe4:	0800d131 	.word	0x0800d131
 800cfe8:	0800d055 	.word	0x0800d055
 800cfec:	0800d113 	.word	0x0800d113
 800cff0:	0800cfa1 	.word	0x0800cfa1
 800cff4:	0800cfa1 	.word	0x0800cfa1
 800cff8:	0800d153 	.word	0x0800d153
 800cffc:	0800cfa1 	.word	0x0800cfa1
 800d000:	0800d055 	.word	0x0800d055
 800d004:	0800cfa1 	.word	0x0800cfa1
 800d008:	0800cfa1 	.word	0x0800cfa1
 800d00c:	0800d11b 	.word	0x0800d11b
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	1d1a      	adds	r2, r3, #4
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	602a      	str	r2, [r5, #0]
 800d018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d01c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d020:	2301      	movs	r3, #1
 800d022:	e0a3      	b.n	800d16c <_printf_i+0x1f4>
 800d024:	6820      	ldr	r0, [r4, #0]
 800d026:	6829      	ldr	r1, [r5, #0]
 800d028:	0606      	lsls	r6, r0, #24
 800d02a:	f101 0304 	add.w	r3, r1, #4
 800d02e:	d50a      	bpl.n	800d046 <_printf_i+0xce>
 800d030:	680e      	ldr	r6, [r1, #0]
 800d032:	602b      	str	r3, [r5, #0]
 800d034:	2e00      	cmp	r6, #0
 800d036:	da03      	bge.n	800d040 <_printf_i+0xc8>
 800d038:	232d      	movs	r3, #45	; 0x2d
 800d03a:	4276      	negs	r6, r6
 800d03c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d040:	485e      	ldr	r0, [pc, #376]	; (800d1bc <_printf_i+0x244>)
 800d042:	230a      	movs	r3, #10
 800d044:	e019      	b.n	800d07a <_printf_i+0x102>
 800d046:	680e      	ldr	r6, [r1, #0]
 800d048:	602b      	str	r3, [r5, #0]
 800d04a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d04e:	bf18      	it	ne
 800d050:	b236      	sxthne	r6, r6
 800d052:	e7ef      	b.n	800d034 <_printf_i+0xbc>
 800d054:	682b      	ldr	r3, [r5, #0]
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	1d19      	adds	r1, r3, #4
 800d05a:	6029      	str	r1, [r5, #0]
 800d05c:	0601      	lsls	r1, r0, #24
 800d05e:	d501      	bpl.n	800d064 <_printf_i+0xec>
 800d060:	681e      	ldr	r6, [r3, #0]
 800d062:	e002      	b.n	800d06a <_printf_i+0xf2>
 800d064:	0646      	lsls	r6, r0, #25
 800d066:	d5fb      	bpl.n	800d060 <_printf_i+0xe8>
 800d068:	881e      	ldrh	r6, [r3, #0]
 800d06a:	4854      	ldr	r0, [pc, #336]	; (800d1bc <_printf_i+0x244>)
 800d06c:	2f6f      	cmp	r7, #111	; 0x6f
 800d06e:	bf0c      	ite	eq
 800d070:	2308      	moveq	r3, #8
 800d072:	230a      	movne	r3, #10
 800d074:	2100      	movs	r1, #0
 800d076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d07a:	6865      	ldr	r5, [r4, #4]
 800d07c:	60a5      	str	r5, [r4, #8]
 800d07e:	2d00      	cmp	r5, #0
 800d080:	bfa2      	ittt	ge
 800d082:	6821      	ldrge	r1, [r4, #0]
 800d084:	f021 0104 	bicge.w	r1, r1, #4
 800d088:	6021      	strge	r1, [r4, #0]
 800d08a:	b90e      	cbnz	r6, 800d090 <_printf_i+0x118>
 800d08c:	2d00      	cmp	r5, #0
 800d08e:	d04d      	beq.n	800d12c <_printf_i+0x1b4>
 800d090:	4615      	mov	r5, r2
 800d092:	fbb6 f1f3 	udiv	r1, r6, r3
 800d096:	fb03 6711 	mls	r7, r3, r1, r6
 800d09a:	5dc7      	ldrb	r7, [r0, r7]
 800d09c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0a0:	4637      	mov	r7, r6
 800d0a2:	42bb      	cmp	r3, r7
 800d0a4:	460e      	mov	r6, r1
 800d0a6:	d9f4      	bls.n	800d092 <_printf_i+0x11a>
 800d0a8:	2b08      	cmp	r3, #8
 800d0aa:	d10b      	bne.n	800d0c4 <_printf_i+0x14c>
 800d0ac:	6823      	ldr	r3, [r4, #0]
 800d0ae:	07de      	lsls	r6, r3, #31
 800d0b0:	d508      	bpl.n	800d0c4 <_printf_i+0x14c>
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	6861      	ldr	r1, [r4, #4]
 800d0b6:	4299      	cmp	r1, r3
 800d0b8:	bfde      	ittt	le
 800d0ba:	2330      	movle	r3, #48	; 0x30
 800d0bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0c0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d0c4:	1b52      	subs	r2, r2, r5
 800d0c6:	6122      	str	r2, [r4, #16]
 800d0c8:	f8cd a000 	str.w	sl, [sp]
 800d0cc:	464b      	mov	r3, r9
 800d0ce:	aa03      	add	r2, sp, #12
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4640      	mov	r0, r8
 800d0d4:	f7ff fee2 	bl	800ce9c <_printf_common>
 800d0d8:	3001      	adds	r0, #1
 800d0da:	d14c      	bne.n	800d176 <_printf_i+0x1fe>
 800d0dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0e0:	b004      	add	sp, #16
 800d0e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0e6:	4835      	ldr	r0, [pc, #212]	; (800d1bc <_printf_i+0x244>)
 800d0e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0ec:	6829      	ldr	r1, [r5, #0]
 800d0ee:	6823      	ldr	r3, [r4, #0]
 800d0f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0f4:	6029      	str	r1, [r5, #0]
 800d0f6:	061d      	lsls	r5, r3, #24
 800d0f8:	d514      	bpl.n	800d124 <_printf_i+0x1ac>
 800d0fa:	07df      	lsls	r7, r3, #31
 800d0fc:	bf44      	itt	mi
 800d0fe:	f043 0320 	orrmi.w	r3, r3, #32
 800d102:	6023      	strmi	r3, [r4, #0]
 800d104:	b91e      	cbnz	r6, 800d10e <_printf_i+0x196>
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	f023 0320 	bic.w	r3, r3, #32
 800d10c:	6023      	str	r3, [r4, #0]
 800d10e:	2310      	movs	r3, #16
 800d110:	e7b0      	b.n	800d074 <_printf_i+0xfc>
 800d112:	6823      	ldr	r3, [r4, #0]
 800d114:	f043 0320 	orr.w	r3, r3, #32
 800d118:	6023      	str	r3, [r4, #0]
 800d11a:	2378      	movs	r3, #120	; 0x78
 800d11c:	4828      	ldr	r0, [pc, #160]	; (800d1c0 <_printf_i+0x248>)
 800d11e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d122:	e7e3      	b.n	800d0ec <_printf_i+0x174>
 800d124:	0659      	lsls	r1, r3, #25
 800d126:	bf48      	it	mi
 800d128:	b2b6      	uxthmi	r6, r6
 800d12a:	e7e6      	b.n	800d0fa <_printf_i+0x182>
 800d12c:	4615      	mov	r5, r2
 800d12e:	e7bb      	b.n	800d0a8 <_printf_i+0x130>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	6826      	ldr	r6, [r4, #0]
 800d134:	6961      	ldr	r1, [r4, #20]
 800d136:	1d18      	adds	r0, r3, #4
 800d138:	6028      	str	r0, [r5, #0]
 800d13a:	0635      	lsls	r5, r6, #24
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	d501      	bpl.n	800d144 <_printf_i+0x1cc>
 800d140:	6019      	str	r1, [r3, #0]
 800d142:	e002      	b.n	800d14a <_printf_i+0x1d2>
 800d144:	0670      	lsls	r0, r6, #25
 800d146:	d5fb      	bpl.n	800d140 <_printf_i+0x1c8>
 800d148:	8019      	strh	r1, [r3, #0]
 800d14a:	2300      	movs	r3, #0
 800d14c:	6123      	str	r3, [r4, #16]
 800d14e:	4615      	mov	r5, r2
 800d150:	e7ba      	b.n	800d0c8 <_printf_i+0x150>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	1d1a      	adds	r2, r3, #4
 800d156:	602a      	str	r2, [r5, #0]
 800d158:	681d      	ldr	r5, [r3, #0]
 800d15a:	6862      	ldr	r2, [r4, #4]
 800d15c:	2100      	movs	r1, #0
 800d15e:	4628      	mov	r0, r5
 800d160:	f7f3 f85e 	bl	8000220 <memchr>
 800d164:	b108      	cbz	r0, 800d16a <_printf_i+0x1f2>
 800d166:	1b40      	subs	r0, r0, r5
 800d168:	6060      	str	r0, [r4, #4]
 800d16a:	6863      	ldr	r3, [r4, #4]
 800d16c:	6123      	str	r3, [r4, #16]
 800d16e:	2300      	movs	r3, #0
 800d170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d174:	e7a8      	b.n	800d0c8 <_printf_i+0x150>
 800d176:	6923      	ldr	r3, [r4, #16]
 800d178:	462a      	mov	r2, r5
 800d17a:	4649      	mov	r1, r9
 800d17c:	4640      	mov	r0, r8
 800d17e:	47d0      	blx	sl
 800d180:	3001      	adds	r0, #1
 800d182:	d0ab      	beq.n	800d0dc <_printf_i+0x164>
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	079b      	lsls	r3, r3, #30
 800d188:	d413      	bmi.n	800d1b2 <_printf_i+0x23a>
 800d18a:	68e0      	ldr	r0, [r4, #12]
 800d18c:	9b03      	ldr	r3, [sp, #12]
 800d18e:	4298      	cmp	r0, r3
 800d190:	bfb8      	it	lt
 800d192:	4618      	movlt	r0, r3
 800d194:	e7a4      	b.n	800d0e0 <_printf_i+0x168>
 800d196:	2301      	movs	r3, #1
 800d198:	4632      	mov	r2, r6
 800d19a:	4649      	mov	r1, r9
 800d19c:	4640      	mov	r0, r8
 800d19e:	47d0      	blx	sl
 800d1a0:	3001      	adds	r0, #1
 800d1a2:	d09b      	beq.n	800d0dc <_printf_i+0x164>
 800d1a4:	3501      	adds	r5, #1
 800d1a6:	68e3      	ldr	r3, [r4, #12]
 800d1a8:	9903      	ldr	r1, [sp, #12]
 800d1aa:	1a5b      	subs	r3, r3, r1
 800d1ac:	42ab      	cmp	r3, r5
 800d1ae:	dcf2      	bgt.n	800d196 <_printf_i+0x21e>
 800d1b0:	e7eb      	b.n	800d18a <_printf_i+0x212>
 800d1b2:	2500      	movs	r5, #0
 800d1b4:	f104 0619 	add.w	r6, r4, #25
 800d1b8:	e7f5      	b.n	800d1a6 <_printf_i+0x22e>
 800d1ba:	bf00      	nop
 800d1bc:	08012453 	.word	0x08012453
 800d1c0:	08012464 	.word	0x08012464

0800d1c4 <_sbrk_r>:
 800d1c4:	b538      	push	{r3, r4, r5, lr}
 800d1c6:	4d06      	ldr	r5, [pc, #24]	; (800d1e0 <_sbrk_r+0x1c>)
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	4608      	mov	r0, r1
 800d1ce:	602b      	str	r3, [r5, #0]
 800d1d0:	f7f4 f802 	bl	80011d8 <_sbrk>
 800d1d4:	1c43      	adds	r3, r0, #1
 800d1d6:	d102      	bne.n	800d1de <_sbrk_r+0x1a>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	b103      	cbz	r3, 800d1de <_sbrk_r+0x1a>
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	2000b268 	.word	0x2000b268

0800d1e4 <_raise_r>:
 800d1e4:	291f      	cmp	r1, #31
 800d1e6:	b538      	push	{r3, r4, r5, lr}
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	460d      	mov	r5, r1
 800d1ec:	d904      	bls.n	800d1f8 <_raise_r+0x14>
 800d1ee:	2316      	movs	r3, #22
 800d1f0:	6003      	str	r3, [r0, #0]
 800d1f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1fa:	b112      	cbz	r2, 800d202 <_raise_r+0x1e>
 800d1fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d200:	b94b      	cbnz	r3, 800d216 <_raise_r+0x32>
 800d202:	4620      	mov	r0, r4
 800d204:	f000 f830 	bl	800d268 <_getpid_r>
 800d208:	462a      	mov	r2, r5
 800d20a:	4601      	mov	r1, r0
 800d20c:	4620      	mov	r0, r4
 800d20e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d212:	f000 b817 	b.w	800d244 <_kill_r>
 800d216:	2b01      	cmp	r3, #1
 800d218:	d00a      	beq.n	800d230 <_raise_r+0x4c>
 800d21a:	1c59      	adds	r1, r3, #1
 800d21c:	d103      	bne.n	800d226 <_raise_r+0x42>
 800d21e:	2316      	movs	r3, #22
 800d220:	6003      	str	r3, [r0, #0]
 800d222:	2001      	movs	r0, #1
 800d224:	e7e7      	b.n	800d1f6 <_raise_r+0x12>
 800d226:	2400      	movs	r4, #0
 800d228:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d22c:	4628      	mov	r0, r5
 800d22e:	4798      	blx	r3
 800d230:	2000      	movs	r0, #0
 800d232:	e7e0      	b.n	800d1f6 <_raise_r+0x12>

0800d234 <raise>:
 800d234:	4b02      	ldr	r3, [pc, #8]	; (800d240 <raise+0xc>)
 800d236:	4601      	mov	r1, r0
 800d238:	6818      	ldr	r0, [r3, #0]
 800d23a:	f7ff bfd3 	b.w	800d1e4 <_raise_r>
 800d23e:	bf00      	nop
 800d240:	2000018c 	.word	0x2000018c

0800d244 <_kill_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d07      	ldr	r5, [pc, #28]	; (800d264 <_kill_r+0x20>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	4611      	mov	r1, r2
 800d250:	602b      	str	r3, [r5, #0]
 800d252:	f7f3 ff89 	bl	8001168 <_kill>
 800d256:	1c43      	adds	r3, r0, #1
 800d258:	d102      	bne.n	800d260 <_kill_r+0x1c>
 800d25a:	682b      	ldr	r3, [r5, #0]
 800d25c:	b103      	cbz	r3, 800d260 <_kill_r+0x1c>
 800d25e:	6023      	str	r3, [r4, #0]
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	bf00      	nop
 800d264:	2000b268 	.word	0x2000b268

0800d268 <_getpid_r>:
 800d268:	f7f3 bf7c 	b.w	8001164 <_getpid>

0800d26c <strncmp>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	b17a      	cbz	r2, 800d290 <strncmp+0x24>
 800d270:	4603      	mov	r3, r0
 800d272:	3901      	subs	r1, #1
 800d274:	1884      	adds	r4, r0, r2
 800d276:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d27a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d27e:	4290      	cmp	r0, r2
 800d280:	d101      	bne.n	800d286 <strncmp+0x1a>
 800d282:	42a3      	cmp	r3, r4
 800d284:	d101      	bne.n	800d28a <strncmp+0x1e>
 800d286:	1a80      	subs	r0, r0, r2
 800d288:	bd10      	pop	{r4, pc}
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d1f3      	bne.n	800d276 <strncmp+0xa>
 800d28e:	e7fa      	b.n	800d286 <strncmp+0x1a>
 800d290:	4610      	mov	r0, r2
 800d292:	e7f9      	b.n	800d288 <strncmp+0x1c>

0800d294 <strstr>:
 800d294:	780a      	ldrb	r2, [r1, #0]
 800d296:	b570      	push	{r4, r5, r6, lr}
 800d298:	b96a      	cbnz	r2, 800d2b6 <strstr+0x22>
 800d29a:	bd70      	pop	{r4, r5, r6, pc}
 800d29c:	429a      	cmp	r2, r3
 800d29e:	d109      	bne.n	800d2b4 <strstr+0x20>
 800d2a0:	460c      	mov	r4, r1
 800d2a2:	4605      	mov	r5, r0
 800d2a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0f6      	beq.n	800d29a <strstr+0x6>
 800d2ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d2b0:	429e      	cmp	r6, r3
 800d2b2:	d0f7      	beq.n	800d2a4 <strstr+0x10>
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	7803      	ldrb	r3, [r0, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1ef      	bne.n	800d29c <strstr+0x8>
 800d2bc:	4618      	mov	r0, r3
 800d2be:	e7ec      	b.n	800d29a <strstr+0x6>

0800d2c0 <sulp>:
 800d2c0:	b570      	push	{r4, r5, r6, lr}
 800d2c2:	4604      	mov	r4, r0
 800d2c4:	460d      	mov	r5, r1
 800d2c6:	ec45 4b10 	vmov	d0, r4, r5
 800d2ca:	4616      	mov	r6, r2
 800d2cc:	f002 fd8a 	bl	800fde4 <__ulp>
 800d2d0:	ec51 0b10 	vmov	r0, r1, d0
 800d2d4:	b17e      	cbz	r6, 800d2f6 <sulp+0x36>
 800d2d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d2da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	dd09      	ble.n	800d2f6 <sulp+0x36>
 800d2e2:	051b      	lsls	r3, r3, #20
 800d2e4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d2e8:	2400      	movs	r4, #0
 800d2ea:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d2ee:	4622      	mov	r2, r4
 800d2f0:	462b      	mov	r3, r5
 800d2f2:	f7f3 f9a1 	bl	8000638 <__aeabi_dmul>
 800d2f6:	bd70      	pop	{r4, r5, r6, pc}

0800d2f8 <_strtod_l>:
 800d2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fc:	ed2d 8b02 	vpush	{d8}
 800d300:	b09d      	sub	sp, #116	; 0x74
 800d302:	461f      	mov	r7, r3
 800d304:	2300      	movs	r3, #0
 800d306:	9318      	str	r3, [sp, #96]	; 0x60
 800d308:	4ba2      	ldr	r3, [pc, #648]	; (800d594 <_strtod_l+0x29c>)
 800d30a:	9213      	str	r2, [sp, #76]	; 0x4c
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	9305      	str	r3, [sp, #20]
 800d310:	4604      	mov	r4, r0
 800d312:	4618      	mov	r0, r3
 800d314:	4688      	mov	r8, r1
 800d316:	f7f2 ff75 	bl	8000204 <strlen>
 800d31a:	f04f 0a00 	mov.w	sl, #0
 800d31e:	4605      	mov	r5, r0
 800d320:	f04f 0b00 	mov.w	fp, #0
 800d324:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d328:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d32a:	781a      	ldrb	r2, [r3, #0]
 800d32c:	2a2b      	cmp	r2, #43	; 0x2b
 800d32e:	d04e      	beq.n	800d3ce <_strtod_l+0xd6>
 800d330:	d83b      	bhi.n	800d3aa <_strtod_l+0xb2>
 800d332:	2a0d      	cmp	r2, #13
 800d334:	d834      	bhi.n	800d3a0 <_strtod_l+0xa8>
 800d336:	2a08      	cmp	r2, #8
 800d338:	d834      	bhi.n	800d3a4 <_strtod_l+0xac>
 800d33a:	2a00      	cmp	r2, #0
 800d33c:	d03e      	beq.n	800d3bc <_strtod_l+0xc4>
 800d33e:	2300      	movs	r3, #0
 800d340:	930a      	str	r3, [sp, #40]	; 0x28
 800d342:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d344:	7833      	ldrb	r3, [r6, #0]
 800d346:	2b30      	cmp	r3, #48	; 0x30
 800d348:	f040 80b0 	bne.w	800d4ac <_strtod_l+0x1b4>
 800d34c:	7873      	ldrb	r3, [r6, #1]
 800d34e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d352:	2b58      	cmp	r3, #88	; 0x58
 800d354:	d168      	bne.n	800d428 <_strtod_l+0x130>
 800d356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d358:	9301      	str	r3, [sp, #4]
 800d35a:	ab18      	add	r3, sp, #96	; 0x60
 800d35c:	9702      	str	r7, [sp, #8]
 800d35e:	9300      	str	r3, [sp, #0]
 800d360:	4a8d      	ldr	r2, [pc, #564]	; (800d598 <_strtod_l+0x2a0>)
 800d362:	ab19      	add	r3, sp, #100	; 0x64
 800d364:	a917      	add	r1, sp, #92	; 0x5c
 800d366:	4620      	mov	r0, r4
 800d368:	f001 fe9c 	bl	800f0a4 <__gethex>
 800d36c:	f010 0707 	ands.w	r7, r0, #7
 800d370:	4605      	mov	r5, r0
 800d372:	d005      	beq.n	800d380 <_strtod_l+0x88>
 800d374:	2f06      	cmp	r7, #6
 800d376:	d12c      	bne.n	800d3d2 <_strtod_l+0xda>
 800d378:	3601      	adds	r6, #1
 800d37a:	2300      	movs	r3, #0
 800d37c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d37e:	930a      	str	r3, [sp, #40]	; 0x28
 800d380:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d382:	2b00      	cmp	r3, #0
 800d384:	f040 8590 	bne.w	800dea8 <_strtod_l+0xbb0>
 800d388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d38a:	b1eb      	cbz	r3, 800d3c8 <_strtod_l+0xd0>
 800d38c:	4652      	mov	r2, sl
 800d38e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d392:	ec43 2b10 	vmov	d0, r2, r3
 800d396:	b01d      	add	sp, #116	; 0x74
 800d398:	ecbd 8b02 	vpop	{d8}
 800d39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a0:	2a20      	cmp	r2, #32
 800d3a2:	d1cc      	bne.n	800d33e <_strtod_l+0x46>
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3a8:	e7be      	b.n	800d328 <_strtod_l+0x30>
 800d3aa:	2a2d      	cmp	r2, #45	; 0x2d
 800d3ac:	d1c7      	bne.n	800d33e <_strtod_l+0x46>
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	920a      	str	r2, [sp, #40]	; 0x28
 800d3b2:	1c5a      	adds	r2, r3, #1
 800d3b4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d3b6:	785b      	ldrb	r3, [r3, #1]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1c2      	bne.n	800d342 <_strtod_l+0x4a>
 800d3bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3be:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f040 856e 	bne.w	800dea4 <_strtod_l+0xbac>
 800d3c8:	4652      	mov	r2, sl
 800d3ca:	465b      	mov	r3, fp
 800d3cc:	e7e1      	b.n	800d392 <_strtod_l+0x9a>
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	e7ee      	b.n	800d3b0 <_strtod_l+0xb8>
 800d3d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3d4:	b13a      	cbz	r2, 800d3e6 <_strtod_l+0xee>
 800d3d6:	2135      	movs	r1, #53	; 0x35
 800d3d8:	a81a      	add	r0, sp, #104	; 0x68
 800d3da:	f002 fe0e 	bl	800fffa <__copybits>
 800d3de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3e0:	4620      	mov	r0, r4
 800d3e2:	f002 f9cd 	bl	800f780 <_Bfree>
 800d3e6:	3f01      	subs	r7, #1
 800d3e8:	2f04      	cmp	r7, #4
 800d3ea:	d806      	bhi.n	800d3fa <_strtod_l+0x102>
 800d3ec:	e8df f007 	tbb	[pc, r7]
 800d3f0:	1714030a 	.word	0x1714030a
 800d3f4:	0a          	.byte	0x0a
 800d3f5:	00          	.byte	0x00
 800d3f6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d3fa:	0728      	lsls	r0, r5, #28
 800d3fc:	d5c0      	bpl.n	800d380 <_strtod_l+0x88>
 800d3fe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d402:	e7bd      	b.n	800d380 <_strtod_l+0x88>
 800d404:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d408:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d40a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d40e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d412:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d416:	e7f0      	b.n	800d3fa <_strtod_l+0x102>
 800d418:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d59c <_strtod_l+0x2a4>
 800d41c:	e7ed      	b.n	800d3fa <_strtod_l+0x102>
 800d41e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d422:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d426:	e7e8      	b.n	800d3fa <_strtod_l+0x102>
 800d428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d42e:	785b      	ldrb	r3, [r3, #1]
 800d430:	2b30      	cmp	r3, #48	; 0x30
 800d432:	d0f9      	beq.n	800d428 <_strtod_l+0x130>
 800d434:	2b00      	cmp	r3, #0
 800d436:	d0a3      	beq.n	800d380 <_strtod_l+0x88>
 800d438:	2301      	movs	r3, #1
 800d43a:	f04f 0900 	mov.w	r9, #0
 800d43e:	9304      	str	r3, [sp, #16]
 800d440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d442:	9308      	str	r3, [sp, #32]
 800d444:	f8cd 901c 	str.w	r9, [sp, #28]
 800d448:	464f      	mov	r7, r9
 800d44a:	220a      	movs	r2, #10
 800d44c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d44e:	7806      	ldrb	r6, [r0, #0]
 800d450:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d454:	b2d9      	uxtb	r1, r3
 800d456:	2909      	cmp	r1, #9
 800d458:	d92a      	bls.n	800d4b0 <_strtod_l+0x1b8>
 800d45a:	9905      	ldr	r1, [sp, #20]
 800d45c:	462a      	mov	r2, r5
 800d45e:	f7ff ff05 	bl	800d26c <strncmp>
 800d462:	b398      	cbz	r0, 800d4cc <_strtod_l+0x1d4>
 800d464:	2000      	movs	r0, #0
 800d466:	4632      	mov	r2, r6
 800d468:	463d      	mov	r5, r7
 800d46a:	9005      	str	r0, [sp, #20]
 800d46c:	4603      	mov	r3, r0
 800d46e:	2a65      	cmp	r2, #101	; 0x65
 800d470:	d001      	beq.n	800d476 <_strtod_l+0x17e>
 800d472:	2a45      	cmp	r2, #69	; 0x45
 800d474:	d118      	bne.n	800d4a8 <_strtod_l+0x1b0>
 800d476:	b91d      	cbnz	r5, 800d480 <_strtod_l+0x188>
 800d478:	9a04      	ldr	r2, [sp, #16]
 800d47a:	4302      	orrs	r2, r0
 800d47c:	d09e      	beq.n	800d3bc <_strtod_l+0xc4>
 800d47e:	2500      	movs	r5, #0
 800d480:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d484:	f108 0201 	add.w	r2, r8, #1
 800d488:	9217      	str	r2, [sp, #92]	; 0x5c
 800d48a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d48e:	2a2b      	cmp	r2, #43	; 0x2b
 800d490:	d075      	beq.n	800d57e <_strtod_l+0x286>
 800d492:	2a2d      	cmp	r2, #45	; 0x2d
 800d494:	d07b      	beq.n	800d58e <_strtod_l+0x296>
 800d496:	f04f 0c00 	mov.w	ip, #0
 800d49a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d49e:	2909      	cmp	r1, #9
 800d4a0:	f240 8082 	bls.w	800d5a8 <_strtod_l+0x2b0>
 800d4a4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d4a8:	2600      	movs	r6, #0
 800d4aa:	e09d      	b.n	800d5e8 <_strtod_l+0x2f0>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e7c4      	b.n	800d43a <_strtod_l+0x142>
 800d4b0:	2f08      	cmp	r7, #8
 800d4b2:	bfd8      	it	le
 800d4b4:	9907      	ldrle	r1, [sp, #28]
 800d4b6:	f100 0001 	add.w	r0, r0, #1
 800d4ba:	bfda      	itte	le
 800d4bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800d4c0:	9307      	strle	r3, [sp, #28]
 800d4c2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d4c6:	3701      	adds	r7, #1
 800d4c8:	9017      	str	r0, [sp, #92]	; 0x5c
 800d4ca:	e7bf      	b.n	800d44c <_strtod_l+0x154>
 800d4cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4ce:	195a      	adds	r2, r3, r5
 800d4d0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4d2:	5d5a      	ldrb	r2, [r3, r5]
 800d4d4:	2f00      	cmp	r7, #0
 800d4d6:	d037      	beq.n	800d548 <_strtod_l+0x250>
 800d4d8:	9005      	str	r0, [sp, #20]
 800d4da:	463d      	mov	r5, r7
 800d4dc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d4e0:	2b09      	cmp	r3, #9
 800d4e2:	d912      	bls.n	800d50a <_strtod_l+0x212>
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e7c2      	b.n	800d46e <_strtod_l+0x176>
 800d4e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4ee:	785a      	ldrb	r2, [r3, #1]
 800d4f0:	3001      	adds	r0, #1
 800d4f2:	2a30      	cmp	r2, #48	; 0x30
 800d4f4:	d0f8      	beq.n	800d4e8 <_strtod_l+0x1f0>
 800d4f6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	f200 84d9 	bhi.w	800deb2 <_strtod_l+0xbba>
 800d500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d502:	9005      	str	r0, [sp, #20]
 800d504:	2000      	movs	r0, #0
 800d506:	9308      	str	r3, [sp, #32]
 800d508:	4605      	mov	r5, r0
 800d50a:	3a30      	subs	r2, #48	; 0x30
 800d50c:	f100 0301 	add.w	r3, r0, #1
 800d510:	d014      	beq.n	800d53c <_strtod_l+0x244>
 800d512:	9905      	ldr	r1, [sp, #20]
 800d514:	4419      	add	r1, r3
 800d516:	9105      	str	r1, [sp, #20]
 800d518:	462b      	mov	r3, r5
 800d51a:	eb00 0e05 	add.w	lr, r0, r5
 800d51e:	210a      	movs	r1, #10
 800d520:	4573      	cmp	r3, lr
 800d522:	d113      	bne.n	800d54c <_strtod_l+0x254>
 800d524:	182b      	adds	r3, r5, r0
 800d526:	2b08      	cmp	r3, #8
 800d528:	f105 0501 	add.w	r5, r5, #1
 800d52c:	4405      	add	r5, r0
 800d52e:	dc1c      	bgt.n	800d56a <_strtod_l+0x272>
 800d530:	9907      	ldr	r1, [sp, #28]
 800d532:	230a      	movs	r3, #10
 800d534:	fb03 2301 	mla	r3, r3, r1, r2
 800d538:	9307      	str	r3, [sp, #28]
 800d53a:	2300      	movs	r3, #0
 800d53c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d53e:	1c51      	adds	r1, r2, #1
 800d540:	9117      	str	r1, [sp, #92]	; 0x5c
 800d542:	7852      	ldrb	r2, [r2, #1]
 800d544:	4618      	mov	r0, r3
 800d546:	e7c9      	b.n	800d4dc <_strtod_l+0x1e4>
 800d548:	4638      	mov	r0, r7
 800d54a:	e7d2      	b.n	800d4f2 <_strtod_l+0x1fa>
 800d54c:	2b08      	cmp	r3, #8
 800d54e:	dc04      	bgt.n	800d55a <_strtod_l+0x262>
 800d550:	9e07      	ldr	r6, [sp, #28]
 800d552:	434e      	muls	r6, r1
 800d554:	9607      	str	r6, [sp, #28]
 800d556:	3301      	adds	r3, #1
 800d558:	e7e2      	b.n	800d520 <_strtod_l+0x228>
 800d55a:	f103 0c01 	add.w	ip, r3, #1
 800d55e:	f1bc 0f10 	cmp.w	ip, #16
 800d562:	bfd8      	it	le
 800d564:	fb01 f909 	mulle.w	r9, r1, r9
 800d568:	e7f5      	b.n	800d556 <_strtod_l+0x25e>
 800d56a:	2d10      	cmp	r5, #16
 800d56c:	bfdc      	itt	le
 800d56e:	230a      	movle	r3, #10
 800d570:	fb03 2909 	mlale	r9, r3, r9, r2
 800d574:	e7e1      	b.n	800d53a <_strtod_l+0x242>
 800d576:	2300      	movs	r3, #0
 800d578:	9305      	str	r3, [sp, #20]
 800d57a:	2301      	movs	r3, #1
 800d57c:	e77c      	b.n	800d478 <_strtod_l+0x180>
 800d57e:	f04f 0c00 	mov.w	ip, #0
 800d582:	f108 0202 	add.w	r2, r8, #2
 800d586:	9217      	str	r2, [sp, #92]	; 0x5c
 800d588:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d58c:	e785      	b.n	800d49a <_strtod_l+0x1a2>
 800d58e:	f04f 0c01 	mov.w	ip, #1
 800d592:	e7f6      	b.n	800d582 <_strtod_l+0x28a>
 800d594:	0801265c 	.word	0x0801265c
 800d598:	08012478 	.word	0x08012478
 800d59c:	7ff00000 	.word	0x7ff00000
 800d5a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5a2:	1c51      	adds	r1, r2, #1
 800d5a4:	9117      	str	r1, [sp, #92]	; 0x5c
 800d5a6:	7852      	ldrb	r2, [r2, #1]
 800d5a8:	2a30      	cmp	r2, #48	; 0x30
 800d5aa:	d0f9      	beq.n	800d5a0 <_strtod_l+0x2a8>
 800d5ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d5b0:	2908      	cmp	r1, #8
 800d5b2:	f63f af79 	bhi.w	800d4a8 <_strtod_l+0x1b0>
 800d5b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d5ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5bc:	9206      	str	r2, [sp, #24]
 800d5be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5c0:	1c51      	adds	r1, r2, #1
 800d5c2:	9117      	str	r1, [sp, #92]	; 0x5c
 800d5c4:	7852      	ldrb	r2, [r2, #1]
 800d5c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d5ca:	2e09      	cmp	r6, #9
 800d5cc:	d937      	bls.n	800d63e <_strtod_l+0x346>
 800d5ce:	9e06      	ldr	r6, [sp, #24]
 800d5d0:	1b89      	subs	r1, r1, r6
 800d5d2:	2908      	cmp	r1, #8
 800d5d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d5d8:	dc02      	bgt.n	800d5e0 <_strtod_l+0x2e8>
 800d5da:	4576      	cmp	r6, lr
 800d5dc:	bfa8      	it	ge
 800d5de:	4676      	movge	r6, lr
 800d5e0:	f1bc 0f00 	cmp.w	ip, #0
 800d5e4:	d000      	beq.n	800d5e8 <_strtod_l+0x2f0>
 800d5e6:	4276      	negs	r6, r6
 800d5e8:	2d00      	cmp	r5, #0
 800d5ea:	d14d      	bne.n	800d688 <_strtod_l+0x390>
 800d5ec:	9904      	ldr	r1, [sp, #16]
 800d5ee:	4301      	orrs	r1, r0
 800d5f0:	f47f aec6 	bne.w	800d380 <_strtod_l+0x88>
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f47f aee1 	bne.w	800d3bc <_strtod_l+0xc4>
 800d5fa:	2a69      	cmp	r2, #105	; 0x69
 800d5fc:	d027      	beq.n	800d64e <_strtod_l+0x356>
 800d5fe:	dc24      	bgt.n	800d64a <_strtod_l+0x352>
 800d600:	2a49      	cmp	r2, #73	; 0x49
 800d602:	d024      	beq.n	800d64e <_strtod_l+0x356>
 800d604:	2a4e      	cmp	r2, #78	; 0x4e
 800d606:	f47f aed9 	bne.w	800d3bc <_strtod_l+0xc4>
 800d60a:	499f      	ldr	r1, [pc, #636]	; (800d888 <_strtod_l+0x590>)
 800d60c:	a817      	add	r0, sp, #92	; 0x5c
 800d60e:	f001 ffa1 	bl	800f554 <__match>
 800d612:	2800      	cmp	r0, #0
 800d614:	f43f aed2 	beq.w	800d3bc <_strtod_l+0xc4>
 800d618:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	2b28      	cmp	r3, #40	; 0x28
 800d61e:	d12d      	bne.n	800d67c <_strtod_l+0x384>
 800d620:	499a      	ldr	r1, [pc, #616]	; (800d88c <_strtod_l+0x594>)
 800d622:	aa1a      	add	r2, sp, #104	; 0x68
 800d624:	a817      	add	r0, sp, #92	; 0x5c
 800d626:	f001 ffa9 	bl	800f57c <__hexnan>
 800d62a:	2805      	cmp	r0, #5
 800d62c:	d126      	bne.n	800d67c <_strtod_l+0x384>
 800d62e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d630:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d634:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d638:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d63c:	e6a0      	b.n	800d380 <_strtod_l+0x88>
 800d63e:	210a      	movs	r1, #10
 800d640:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d644:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d648:	e7b9      	b.n	800d5be <_strtod_l+0x2c6>
 800d64a:	2a6e      	cmp	r2, #110	; 0x6e
 800d64c:	e7db      	b.n	800d606 <_strtod_l+0x30e>
 800d64e:	4990      	ldr	r1, [pc, #576]	; (800d890 <_strtod_l+0x598>)
 800d650:	a817      	add	r0, sp, #92	; 0x5c
 800d652:	f001 ff7f 	bl	800f554 <__match>
 800d656:	2800      	cmp	r0, #0
 800d658:	f43f aeb0 	beq.w	800d3bc <_strtod_l+0xc4>
 800d65c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d65e:	498d      	ldr	r1, [pc, #564]	; (800d894 <_strtod_l+0x59c>)
 800d660:	3b01      	subs	r3, #1
 800d662:	a817      	add	r0, sp, #92	; 0x5c
 800d664:	9317      	str	r3, [sp, #92]	; 0x5c
 800d666:	f001 ff75 	bl	800f554 <__match>
 800d66a:	b910      	cbnz	r0, 800d672 <_strtod_l+0x37a>
 800d66c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d66e:	3301      	adds	r3, #1
 800d670:	9317      	str	r3, [sp, #92]	; 0x5c
 800d672:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d8a4 <_strtod_l+0x5ac>
 800d676:	f04f 0a00 	mov.w	sl, #0
 800d67a:	e681      	b.n	800d380 <_strtod_l+0x88>
 800d67c:	4886      	ldr	r0, [pc, #536]	; (800d898 <_strtod_l+0x5a0>)
 800d67e:	f002 fe8b 	bl	8010398 <nan>
 800d682:	ec5b ab10 	vmov	sl, fp, d0
 800d686:	e67b      	b.n	800d380 <_strtod_l+0x88>
 800d688:	9b05      	ldr	r3, [sp, #20]
 800d68a:	9807      	ldr	r0, [sp, #28]
 800d68c:	1af3      	subs	r3, r6, r3
 800d68e:	2f00      	cmp	r7, #0
 800d690:	bf08      	it	eq
 800d692:	462f      	moveq	r7, r5
 800d694:	2d10      	cmp	r5, #16
 800d696:	9306      	str	r3, [sp, #24]
 800d698:	46a8      	mov	r8, r5
 800d69a:	bfa8      	it	ge
 800d69c:	f04f 0810 	movge.w	r8, #16
 800d6a0:	f7f2 ff50 	bl	8000544 <__aeabi_ui2d>
 800d6a4:	2d09      	cmp	r5, #9
 800d6a6:	4682      	mov	sl, r0
 800d6a8:	468b      	mov	fp, r1
 800d6aa:	dd13      	ble.n	800d6d4 <_strtod_l+0x3dc>
 800d6ac:	4b7b      	ldr	r3, [pc, #492]	; (800d89c <_strtod_l+0x5a4>)
 800d6ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d6b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d6b6:	f7f2 ffbf 	bl	8000638 <__aeabi_dmul>
 800d6ba:	4682      	mov	sl, r0
 800d6bc:	4648      	mov	r0, r9
 800d6be:	468b      	mov	fp, r1
 800d6c0:	f7f2 ff40 	bl	8000544 <__aeabi_ui2d>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	4650      	mov	r0, sl
 800d6ca:	4659      	mov	r1, fp
 800d6cc:	f7f2 fdfe 	bl	80002cc <__adddf3>
 800d6d0:	4682      	mov	sl, r0
 800d6d2:	468b      	mov	fp, r1
 800d6d4:	2d0f      	cmp	r5, #15
 800d6d6:	dc38      	bgt.n	800d74a <_strtod_l+0x452>
 800d6d8:	9b06      	ldr	r3, [sp, #24]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	f43f ae50 	beq.w	800d380 <_strtod_l+0x88>
 800d6e0:	dd24      	ble.n	800d72c <_strtod_l+0x434>
 800d6e2:	2b16      	cmp	r3, #22
 800d6e4:	dc0b      	bgt.n	800d6fe <_strtod_l+0x406>
 800d6e6:	496d      	ldr	r1, [pc, #436]	; (800d89c <_strtod_l+0x5a4>)
 800d6e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d6ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f0:	4652      	mov	r2, sl
 800d6f2:	465b      	mov	r3, fp
 800d6f4:	f7f2 ffa0 	bl	8000638 <__aeabi_dmul>
 800d6f8:	4682      	mov	sl, r0
 800d6fa:	468b      	mov	fp, r1
 800d6fc:	e640      	b.n	800d380 <_strtod_l+0x88>
 800d6fe:	9a06      	ldr	r2, [sp, #24]
 800d700:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d704:	4293      	cmp	r3, r2
 800d706:	db20      	blt.n	800d74a <_strtod_l+0x452>
 800d708:	4c64      	ldr	r4, [pc, #400]	; (800d89c <_strtod_l+0x5a4>)
 800d70a:	f1c5 050f 	rsb	r5, r5, #15
 800d70e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d712:	4652      	mov	r2, sl
 800d714:	465b      	mov	r3, fp
 800d716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d71a:	f7f2 ff8d 	bl	8000638 <__aeabi_dmul>
 800d71e:	9b06      	ldr	r3, [sp, #24]
 800d720:	1b5d      	subs	r5, r3, r5
 800d722:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d726:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d72a:	e7e3      	b.n	800d6f4 <_strtod_l+0x3fc>
 800d72c:	9b06      	ldr	r3, [sp, #24]
 800d72e:	3316      	adds	r3, #22
 800d730:	db0b      	blt.n	800d74a <_strtod_l+0x452>
 800d732:	9b05      	ldr	r3, [sp, #20]
 800d734:	1b9e      	subs	r6, r3, r6
 800d736:	4b59      	ldr	r3, [pc, #356]	; (800d89c <_strtod_l+0x5a4>)
 800d738:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d73c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d740:	4650      	mov	r0, sl
 800d742:	4659      	mov	r1, fp
 800d744:	f7f3 f8a2 	bl	800088c <__aeabi_ddiv>
 800d748:	e7d6      	b.n	800d6f8 <_strtod_l+0x400>
 800d74a:	9b06      	ldr	r3, [sp, #24]
 800d74c:	eba5 0808 	sub.w	r8, r5, r8
 800d750:	4498      	add	r8, r3
 800d752:	f1b8 0f00 	cmp.w	r8, #0
 800d756:	dd74      	ble.n	800d842 <_strtod_l+0x54a>
 800d758:	f018 030f 	ands.w	r3, r8, #15
 800d75c:	d00a      	beq.n	800d774 <_strtod_l+0x47c>
 800d75e:	494f      	ldr	r1, [pc, #316]	; (800d89c <_strtod_l+0x5a4>)
 800d760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d764:	4652      	mov	r2, sl
 800d766:	465b      	mov	r3, fp
 800d768:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d76c:	f7f2 ff64 	bl	8000638 <__aeabi_dmul>
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	f038 080f 	bics.w	r8, r8, #15
 800d778:	d04f      	beq.n	800d81a <_strtod_l+0x522>
 800d77a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d77e:	dd22      	ble.n	800d7c6 <_strtod_l+0x4ce>
 800d780:	2500      	movs	r5, #0
 800d782:	462e      	mov	r6, r5
 800d784:	9507      	str	r5, [sp, #28]
 800d786:	9505      	str	r5, [sp, #20]
 800d788:	2322      	movs	r3, #34	; 0x22
 800d78a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d8a4 <_strtod_l+0x5ac>
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	f04f 0a00 	mov.w	sl, #0
 800d794:	9b07      	ldr	r3, [sp, #28]
 800d796:	2b00      	cmp	r3, #0
 800d798:	f43f adf2 	beq.w	800d380 <_strtod_l+0x88>
 800d79c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d79e:	4620      	mov	r0, r4
 800d7a0:	f001 ffee 	bl	800f780 <_Bfree>
 800d7a4:	9905      	ldr	r1, [sp, #20]
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	f001 ffea 	bl	800f780 <_Bfree>
 800d7ac:	4631      	mov	r1, r6
 800d7ae:	4620      	mov	r0, r4
 800d7b0:	f001 ffe6 	bl	800f780 <_Bfree>
 800d7b4:	9907      	ldr	r1, [sp, #28]
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f001 ffe2 	bl	800f780 <_Bfree>
 800d7bc:	4629      	mov	r1, r5
 800d7be:	4620      	mov	r0, r4
 800d7c0:	f001 ffde 	bl	800f780 <_Bfree>
 800d7c4:	e5dc      	b.n	800d380 <_strtod_l+0x88>
 800d7c6:	4b36      	ldr	r3, [pc, #216]	; (800d8a0 <_strtod_l+0x5a8>)
 800d7c8:	9304      	str	r3, [sp, #16]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d7d0:	4650      	mov	r0, sl
 800d7d2:	4659      	mov	r1, fp
 800d7d4:	4699      	mov	r9, r3
 800d7d6:	f1b8 0f01 	cmp.w	r8, #1
 800d7da:	dc21      	bgt.n	800d820 <_strtod_l+0x528>
 800d7dc:	b10b      	cbz	r3, 800d7e2 <_strtod_l+0x4ea>
 800d7de:	4682      	mov	sl, r0
 800d7e0:	468b      	mov	fp, r1
 800d7e2:	4b2f      	ldr	r3, [pc, #188]	; (800d8a0 <_strtod_l+0x5a8>)
 800d7e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d7e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d7ec:	4652      	mov	r2, sl
 800d7ee:	465b      	mov	r3, fp
 800d7f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d7f4:	f7f2 ff20 	bl	8000638 <__aeabi_dmul>
 800d7f8:	4b2a      	ldr	r3, [pc, #168]	; (800d8a4 <_strtod_l+0x5ac>)
 800d7fa:	460a      	mov	r2, r1
 800d7fc:	400b      	ands	r3, r1
 800d7fe:	492a      	ldr	r1, [pc, #168]	; (800d8a8 <_strtod_l+0x5b0>)
 800d800:	428b      	cmp	r3, r1
 800d802:	4682      	mov	sl, r0
 800d804:	d8bc      	bhi.n	800d780 <_strtod_l+0x488>
 800d806:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d80a:	428b      	cmp	r3, r1
 800d80c:	bf86      	itte	hi
 800d80e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d8ac <_strtod_l+0x5b4>
 800d812:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800d816:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d81a:	2300      	movs	r3, #0
 800d81c:	9304      	str	r3, [sp, #16]
 800d81e:	e084      	b.n	800d92a <_strtod_l+0x632>
 800d820:	f018 0f01 	tst.w	r8, #1
 800d824:	d005      	beq.n	800d832 <_strtod_l+0x53a>
 800d826:	9b04      	ldr	r3, [sp, #16]
 800d828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82c:	f7f2 ff04 	bl	8000638 <__aeabi_dmul>
 800d830:	2301      	movs	r3, #1
 800d832:	9a04      	ldr	r2, [sp, #16]
 800d834:	3208      	adds	r2, #8
 800d836:	f109 0901 	add.w	r9, r9, #1
 800d83a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d83e:	9204      	str	r2, [sp, #16]
 800d840:	e7c9      	b.n	800d7d6 <_strtod_l+0x4de>
 800d842:	d0ea      	beq.n	800d81a <_strtod_l+0x522>
 800d844:	f1c8 0800 	rsb	r8, r8, #0
 800d848:	f018 020f 	ands.w	r2, r8, #15
 800d84c:	d00a      	beq.n	800d864 <_strtod_l+0x56c>
 800d84e:	4b13      	ldr	r3, [pc, #76]	; (800d89c <_strtod_l+0x5a4>)
 800d850:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d854:	4650      	mov	r0, sl
 800d856:	4659      	mov	r1, fp
 800d858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d85c:	f7f3 f816 	bl	800088c <__aeabi_ddiv>
 800d860:	4682      	mov	sl, r0
 800d862:	468b      	mov	fp, r1
 800d864:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d868:	d0d7      	beq.n	800d81a <_strtod_l+0x522>
 800d86a:	f1b8 0f1f 	cmp.w	r8, #31
 800d86e:	dd1f      	ble.n	800d8b0 <_strtod_l+0x5b8>
 800d870:	2500      	movs	r5, #0
 800d872:	462e      	mov	r6, r5
 800d874:	9507      	str	r5, [sp, #28]
 800d876:	9505      	str	r5, [sp, #20]
 800d878:	2322      	movs	r3, #34	; 0x22
 800d87a:	f04f 0a00 	mov.w	sl, #0
 800d87e:	f04f 0b00 	mov.w	fp, #0
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	e786      	b.n	800d794 <_strtod_l+0x49c>
 800d886:	bf00      	nop
 800d888:	0801244e 	.word	0x0801244e
 800d88c:	0801248c 	.word	0x0801248c
 800d890:	08012446 	.word	0x08012446
 800d894:	08012507 	.word	0x08012507
 800d898:	08012503 	.word	0x08012503
 800d89c:	080126f8 	.word	0x080126f8
 800d8a0:	080126d0 	.word	0x080126d0
 800d8a4:	7ff00000 	.word	0x7ff00000
 800d8a8:	7ca00000 	.word	0x7ca00000
 800d8ac:	7fefffff 	.word	0x7fefffff
 800d8b0:	f018 0310 	ands.w	r3, r8, #16
 800d8b4:	bf18      	it	ne
 800d8b6:	236a      	movne	r3, #106	; 0x6a
 800d8b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dc68 <_strtod_l+0x970>
 800d8bc:	9304      	str	r3, [sp, #16]
 800d8be:	4650      	mov	r0, sl
 800d8c0:	4659      	mov	r1, fp
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f018 0f01 	tst.w	r8, #1
 800d8c8:	d004      	beq.n	800d8d4 <_strtod_l+0x5dc>
 800d8ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d8ce:	f7f2 feb3 	bl	8000638 <__aeabi_dmul>
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d8d8:	f109 0908 	add.w	r9, r9, #8
 800d8dc:	d1f2      	bne.n	800d8c4 <_strtod_l+0x5cc>
 800d8de:	b10b      	cbz	r3, 800d8e4 <_strtod_l+0x5ec>
 800d8e0:	4682      	mov	sl, r0
 800d8e2:	468b      	mov	fp, r1
 800d8e4:	9b04      	ldr	r3, [sp, #16]
 800d8e6:	b1c3      	cbz	r3, 800d91a <_strtod_l+0x622>
 800d8e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d8ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	4659      	mov	r1, fp
 800d8f4:	dd11      	ble.n	800d91a <_strtod_l+0x622>
 800d8f6:	2b1f      	cmp	r3, #31
 800d8f8:	f340 8124 	ble.w	800db44 <_strtod_l+0x84c>
 800d8fc:	2b34      	cmp	r3, #52	; 0x34
 800d8fe:	bfde      	ittt	le
 800d900:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d904:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800d908:	fa03 f202 	lslle.w	r2, r3, r2
 800d90c:	f04f 0a00 	mov.w	sl, #0
 800d910:	bfcc      	ite	gt
 800d912:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d916:	ea02 0b01 	andle.w	fp, r2, r1
 800d91a:	2200      	movs	r2, #0
 800d91c:	2300      	movs	r3, #0
 800d91e:	4650      	mov	r0, sl
 800d920:	4659      	mov	r1, fp
 800d922:	f7f3 f8f1 	bl	8000b08 <__aeabi_dcmpeq>
 800d926:	2800      	cmp	r0, #0
 800d928:	d1a2      	bne.n	800d870 <_strtod_l+0x578>
 800d92a:	9b07      	ldr	r3, [sp, #28]
 800d92c:	9300      	str	r3, [sp, #0]
 800d92e:	9908      	ldr	r1, [sp, #32]
 800d930:	462b      	mov	r3, r5
 800d932:	463a      	mov	r2, r7
 800d934:	4620      	mov	r0, r4
 800d936:	f001 ff8b 	bl	800f850 <__s2b>
 800d93a:	9007      	str	r0, [sp, #28]
 800d93c:	2800      	cmp	r0, #0
 800d93e:	f43f af1f 	beq.w	800d780 <_strtod_l+0x488>
 800d942:	9b05      	ldr	r3, [sp, #20]
 800d944:	1b9e      	subs	r6, r3, r6
 800d946:	9b06      	ldr	r3, [sp, #24]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	bfb4      	ite	lt
 800d94c:	4633      	movlt	r3, r6
 800d94e:	2300      	movge	r3, #0
 800d950:	930c      	str	r3, [sp, #48]	; 0x30
 800d952:	9b06      	ldr	r3, [sp, #24]
 800d954:	2500      	movs	r5, #0
 800d956:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d95a:	9312      	str	r3, [sp, #72]	; 0x48
 800d95c:	462e      	mov	r6, r5
 800d95e:	9b07      	ldr	r3, [sp, #28]
 800d960:	4620      	mov	r0, r4
 800d962:	6859      	ldr	r1, [r3, #4]
 800d964:	f001 fecc 	bl	800f700 <_Balloc>
 800d968:	9005      	str	r0, [sp, #20]
 800d96a:	2800      	cmp	r0, #0
 800d96c:	f43f af0c 	beq.w	800d788 <_strtod_l+0x490>
 800d970:	9b07      	ldr	r3, [sp, #28]
 800d972:	691a      	ldr	r2, [r3, #16]
 800d974:	3202      	adds	r2, #2
 800d976:	f103 010c 	add.w	r1, r3, #12
 800d97a:	0092      	lsls	r2, r2, #2
 800d97c:	300c      	adds	r0, #12
 800d97e:	f7fe fcf7 	bl	800c370 <memcpy>
 800d982:	ec4b ab10 	vmov	d0, sl, fp
 800d986:	aa1a      	add	r2, sp, #104	; 0x68
 800d988:	a919      	add	r1, sp, #100	; 0x64
 800d98a:	4620      	mov	r0, r4
 800d98c:	f002 faa6 	bl	800fedc <__d2b>
 800d990:	ec4b ab18 	vmov	d8, sl, fp
 800d994:	9018      	str	r0, [sp, #96]	; 0x60
 800d996:	2800      	cmp	r0, #0
 800d998:	f43f aef6 	beq.w	800d788 <_strtod_l+0x490>
 800d99c:	2101      	movs	r1, #1
 800d99e:	4620      	mov	r0, r4
 800d9a0:	f001 fff0 	bl	800f984 <__i2b>
 800d9a4:	4606      	mov	r6, r0
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f43f aeee 	beq.w	800d788 <_strtod_l+0x490>
 800d9ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d9ae:	9904      	ldr	r1, [sp, #16]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	bfab      	itete	ge
 800d9b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d9b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d9b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d9ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d9be:	bfac      	ite	ge
 800d9c0:	eb03 0902 	addge.w	r9, r3, r2
 800d9c4:	1ad7      	sublt	r7, r2, r3
 800d9c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9c8:	eba3 0801 	sub.w	r8, r3, r1
 800d9cc:	4490      	add	r8, r2
 800d9ce:	4ba1      	ldr	r3, [pc, #644]	; (800dc54 <_strtod_l+0x95c>)
 800d9d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d9d4:	4598      	cmp	r8, r3
 800d9d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d9da:	f280 80c7 	bge.w	800db6c <_strtod_l+0x874>
 800d9de:	eba3 0308 	sub.w	r3, r3, r8
 800d9e2:	2b1f      	cmp	r3, #31
 800d9e4:	eba2 0203 	sub.w	r2, r2, r3
 800d9e8:	f04f 0101 	mov.w	r1, #1
 800d9ec:	f300 80b1 	bgt.w	800db52 <_strtod_l+0x85a>
 800d9f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d9f4:	930d      	str	r3, [sp, #52]	; 0x34
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	9308      	str	r3, [sp, #32]
 800d9fa:	eb09 0802 	add.w	r8, r9, r2
 800d9fe:	9b04      	ldr	r3, [sp, #16]
 800da00:	45c1      	cmp	r9, r8
 800da02:	4417      	add	r7, r2
 800da04:	441f      	add	r7, r3
 800da06:	464b      	mov	r3, r9
 800da08:	bfa8      	it	ge
 800da0a:	4643      	movge	r3, r8
 800da0c:	42bb      	cmp	r3, r7
 800da0e:	bfa8      	it	ge
 800da10:	463b      	movge	r3, r7
 800da12:	2b00      	cmp	r3, #0
 800da14:	bfc2      	ittt	gt
 800da16:	eba8 0803 	subgt.w	r8, r8, r3
 800da1a:	1aff      	subgt	r7, r7, r3
 800da1c:	eba9 0903 	subgt.w	r9, r9, r3
 800da20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da22:	2b00      	cmp	r3, #0
 800da24:	dd17      	ble.n	800da56 <_strtod_l+0x75e>
 800da26:	4631      	mov	r1, r6
 800da28:	461a      	mov	r2, r3
 800da2a:	4620      	mov	r0, r4
 800da2c:	f002 f86a 	bl	800fb04 <__pow5mult>
 800da30:	4606      	mov	r6, r0
 800da32:	2800      	cmp	r0, #0
 800da34:	f43f aea8 	beq.w	800d788 <_strtod_l+0x490>
 800da38:	4601      	mov	r1, r0
 800da3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da3c:	4620      	mov	r0, r4
 800da3e:	f001 ffb7 	bl	800f9b0 <__multiply>
 800da42:	900b      	str	r0, [sp, #44]	; 0x2c
 800da44:	2800      	cmp	r0, #0
 800da46:	f43f ae9f 	beq.w	800d788 <_strtod_l+0x490>
 800da4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da4c:	4620      	mov	r0, r4
 800da4e:	f001 fe97 	bl	800f780 <_Bfree>
 800da52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da54:	9318      	str	r3, [sp, #96]	; 0x60
 800da56:	f1b8 0f00 	cmp.w	r8, #0
 800da5a:	f300 808c 	bgt.w	800db76 <_strtod_l+0x87e>
 800da5e:	9b06      	ldr	r3, [sp, #24]
 800da60:	2b00      	cmp	r3, #0
 800da62:	dd08      	ble.n	800da76 <_strtod_l+0x77e>
 800da64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da66:	9905      	ldr	r1, [sp, #20]
 800da68:	4620      	mov	r0, r4
 800da6a:	f002 f84b 	bl	800fb04 <__pow5mult>
 800da6e:	9005      	str	r0, [sp, #20]
 800da70:	2800      	cmp	r0, #0
 800da72:	f43f ae89 	beq.w	800d788 <_strtod_l+0x490>
 800da76:	2f00      	cmp	r7, #0
 800da78:	dd08      	ble.n	800da8c <_strtod_l+0x794>
 800da7a:	9905      	ldr	r1, [sp, #20]
 800da7c:	463a      	mov	r2, r7
 800da7e:	4620      	mov	r0, r4
 800da80:	f002 f89a 	bl	800fbb8 <__lshift>
 800da84:	9005      	str	r0, [sp, #20]
 800da86:	2800      	cmp	r0, #0
 800da88:	f43f ae7e 	beq.w	800d788 <_strtod_l+0x490>
 800da8c:	f1b9 0f00 	cmp.w	r9, #0
 800da90:	dd08      	ble.n	800daa4 <_strtod_l+0x7ac>
 800da92:	4631      	mov	r1, r6
 800da94:	464a      	mov	r2, r9
 800da96:	4620      	mov	r0, r4
 800da98:	f002 f88e 	bl	800fbb8 <__lshift>
 800da9c:	4606      	mov	r6, r0
 800da9e:	2800      	cmp	r0, #0
 800daa0:	f43f ae72 	beq.w	800d788 <_strtod_l+0x490>
 800daa4:	9a05      	ldr	r2, [sp, #20]
 800daa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800daa8:	4620      	mov	r0, r4
 800daaa:	f002 f911 	bl	800fcd0 <__mdiff>
 800daae:	4605      	mov	r5, r0
 800dab0:	2800      	cmp	r0, #0
 800dab2:	f43f ae69 	beq.w	800d788 <_strtod_l+0x490>
 800dab6:	68c3      	ldr	r3, [r0, #12]
 800dab8:	930b      	str	r3, [sp, #44]	; 0x2c
 800daba:	2300      	movs	r3, #0
 800dabc:	60c3      	str	r3, [r0, #12]
 800dabe:	4631      	mov	r1, r6
 800dac0:	f002 f8ea 	bl	800fc98 <__mcmp>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	da60      	bge.n	800db8a <_strtod_l+0x892>
 800dac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daca:	ea53 030a 	orrs.w	r3, r3, sl
 800dace:	f040 8082 	bne.w	800dbd6 <_strtod_l+0x8de>
 800dad2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d17d      	bne.n	800dbd6 <_strtod_l+0x8de>
 800dada:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dade:	0d1b      	lsrs	r3, r3, #20
 800dae0:	051b      	lsls	r3, r3, #20
 800dae2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dae6:	d976      	bls.n	800dbd6 <_strtod_l+0x8de>
 800dae8:	696b      	ldr	r3, [r5, #20]
 800daea:	b913      	cbnz	r3, 800daf2 <_strtod_l+0x7fa>
 800daec:	692b      	ldr	r3, [r5, #16]
 800daee:	2b01      	cmp	r3, #1
 800daf0:	dd71      	ble.n	800dbd6 <_strtod_l+0x8de>
 800daf2:	4629      	mov	r1, r5
 800daf4:	2201      	movs	r2, #1
 800daf6:	4620      	mov	r0, r4
 800daf8:	f002 f85e 	bl	800fbb8 <__lshift>
 800dafc:	4631      	mov	r1, r6
 800dafe:	4605      	mov	r5, r0
 800db00:	f002 f8ca 	bl	800fc98 <__mcmp>
 800db04:	2800      	cmp	r0, #0
 800db06:	dd66      	ble.n	800dbd6 <_strtod_l+0x8de>
 800db08:	9904      	ldr	r1, [sp, #16]
 800db0a:	4a53      	ldr	r2, [pc, #332]	; (800dc58 <_strtod_l+0x960>)
 800db0c:	465b      	mov	r3, fp
 800db0e:	2900      	cmp	r1, #0
 800db10:	f000 8081 	beq.w	800dc16 <_strtod_l+0x91e>
 800db14:	ea02 010b 	and.w	r1, r2, fp
 800db18:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800db1c:	dc7b      	bgt.n	800dc16 <_strtod_l+0x91e>
 800db1e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800db22:	f77f aea9 	ble.w	800d878 <_strtod_l+0x580>
 800db26:	4b4d      	ldr	r3, [pc, #308]	; (800dc5c <_strtod_l+0x964>)
 800db28:	4650      	mov	r0, sl
 800db2a:	4659      	mov	r1, fp
 800db2c:	2200      	movs	r2, #0
 800db2e:	f7f2 fd83 	bl	8000638 <__aeabi_dmul>
 800db32:	460b      	mov	r3, r1
 800db34:	4303      	orrs	r3, r0
 800db36:	bf08      	it	eq
 800db38:	2322      	moveq	r3, #34	; 0x22
 800db3a:	4682      	mov	sl, r0
 800db3c:	468b      	mov	fp, r1
 800db3e:	bf08      	it	eq
 800db40:	6023      	streq	r3, [r4, #0]
 800db42:	e62b      	b.n	800d79c <_strtod_l+0x4a4>
 800db44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db48:	fa02 f303 	lsl.w	r3, r2, r3
 800db4c:	ea03 0a0a 	and.w	sl, r3, sl
 800db50:	e6e3      	b.n	800d91a <_strtod_l+0x622>
 800db52:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800db56:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800db5a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800db5e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800db62:	fa01 f308 	lsl.w	r3, r1, r8
 800db66:	9308      	str	r3, [sp, #32]
 800db68:	910d      	str	r1, [sp, #52]	; 0x34
 800db6a:	e746      	b.n	800d9fa <_strtod_l+0x702>
 800db6c:	2300      	movs	r3, #0
 800db6e:	9308      	str	r3, [sp, #32]
 800db70:	2301      	movs	r3, #1
 800db72:	930d      	str	r3, [sp, #52]	; 0x34
 800db74:	e741      	b.n	800d9fa <_strtod_l+0x702>
 800db76:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db78:	4642      	mov	r2, r8
 800db7a:	4620      	mov	r0, r4
 800db7c:	f002 f81c 	bl	800fbb8 <__lshift>
 800db80:	9018      	str	r0, [sp, #96]	; 0x60
 800db82:	2800      	cmp	r0, #0
 800db84:	f47f af6b 	bne.w	800da5e <_strtod_l+0x766>
 800db88:	e5fe      	b.n	800d788 <_strtod_l+0x490>
 800db8a:	465f      	mov	r7, fp
 800db8c:	d16e      	bne.n	800dc6c <_strtod_l+0x974>
 800db8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db94:	b342      	cbz	r2, 800dbe8 <_strtod_l+0x8f0>
 800db96:	4a32      	ldr	r2, [pc, #200]	; (800dc60 <_strtod_l+0x968>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d128      	bne.n	800dbee <_strtod_l+0x8f6>
 800db9c:	9b04      	ldr	r3, [sp, #16]
 800db9e:	4651      	mov	r1, sl
 800dba0:	b1eb      	cbz	r3, 800dbde <_strtod_l+0x8e6>
 800dba2:	4b2d      	ldr	r3, [pc, #180]	; (800dc58 <_strtod_l+0x960>)
 800dba4:	403b      	ands	r3, r7
 800dba6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dbaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbae:	d819      	bhi.n	800dbe4 <_strtod_l+0x8ec>
 800dbb0:	0d1b      	lsrs	r3, r3, #20
 800dbb2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dbb6:	fa02 f303 	lsl.w	r3, r2, r3
 800dbba:	4299      	cmp	r1, r3
 800dbbc:	d117      	bne.n	800dbee <_strtod_l+0x8f6>
 800dbbe:	4b29      	ldr	r3, [pc, #164]	; (800dc64 <_strtod_l+0x96c>)
 800dbc0:	429f      	cmp	r7, r3
 800dbc2:	d102      	bne.n	800dbca <_strtod_l+0x8d2>
 800dbc4:	3101      	adds	r1, #1
 800dbc6:	f43f addf 	beq.w	800d788 <_strtod_l+0x490>
 800dbca:	4b23      	ldr	r3, [pc, #140]	; (800dc58 <_strtod_l+0x960>)
 800dbcc:	403b      	ands	r3, r7
 800dbce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dbd2:	f04f 0a00 	mov.w	sl, #0
 800dbd6:	9b04      	ldr	r3, [sp, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1a4      	bne.n	800db26 <_strtod_l+0x82e>
 800dbdc:	e5de      	b.n	800d79c <_strtod_l+0x4a4>
 800dbde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbe2:	e7ea      	b.n	800dbba <_strtod_l+0x8c2>
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	e7e8      	b.n	800dbba <_strtod_l+0x8c2>
 800dbe8:	ea53 030a 	orrs.w	r3, r3, sl
 800dbec:	d08c      	beq.n	800db08 <_strtod_l+0x810>
 800dbee:	9b08      	ldr	r3, [sp, #32]
 800dbf0:	b1db      	cbz	r3, 800dc2a <_strtod_l+0x932>
 800dbf2:	423b      	tst	r3, r7
 800dbf4:	d0ef      	beq.n	800dbd6 <_strtod_l+0x8de>
 800dbf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbf8:	9a04      	ldr	r2, [sp, #16]
 800dbfa:	4650      	mov	r0, sl
 800dbfc:	4659      	mov	r1, fp
 800dbfe:	b1c3      	cbz	r3, 800dc32 <_strtod_l+0x93a>
 800dc00:	f7ff fb5e 	bl	800d2c0 <sulp>
 800dc04:	4602      	mov	r2, r0
 800dc06:	460b      	mov	r3, r1
 800dc08:	ec51 0b18 	vmov	r0, r1, d8
 800dc0c:	f7f2 fb5e 	bl	80002cc <__adddf3>
 800dc10:	4682      	mov	sl, r0
 800dc12:	468b      	mov	fp, r1
 800dc14:	e7df      	b.n	800dbd6 <_strtod_l+0x8de>
 800dc16:	4013      	ands	r3, r2
 800dc18:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc1c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc20:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dc28:	e7d5      	b.n	800dbd6 <_strtod_l+0x8de>
 800dc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc2c:	ea13 0f0a 	tst.w	r3, sl
 800dc30:	e7e0      	b.n	800dbf4 <_strtod_l+0x8fc>
 800dc32:	f7ff fb45 	bl	800d2c0 <sulp>
 800dc36:	4602      	mov	r2, r0
 800dc38:	460b      	mov	r3, r1
 800dc3a:	ec51 0b18 	vmov	r0, r1, d8
 800dc3e:	f7f2 fb43 	bl	80002c8 <__aeabi_dsub>
 800dc42:	2200      	movs	r2, #0
 800dc44:	2300      	movs	r3, #0
 800dc46:	4682      	mov	sl, r0
 800dc48:	468b      	mov	fp, r1
 800dc4a:	f7f2 ff5d 	bl	8000b08 <__aeabi_dcmpeq>
 800dc4e:	2800      	cmp	r0, #0
 800dc50:	d0c1      	beq.n	800dbd6 <_strtod_l+0x8de>
 800dc52:	e611      	b.n	800d878 <_strtod_l+0x580>
 800dc54:	fffffc02 	.word	0xfffffc02
 800dc58:	7ff00000 	.word	0x7ff00000
 800dc5c:	39500000 	.word	0x39500000
 800dc60:	000fffff 	.word	0x000fffff
 800dc64:	7fefffff 	.word	0x7fefffff
 800dc68:	080124a0 	.word	0x080124a0
 800dc6c:	4631      	mov	r1, r6
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f002 f990 	bl	800ff94 <__ratio>
 800dc74:	ec59 8b10 	vmov	r8, r9, d0
 800dc78:	ee10 0a10 	vmov	r0, s0
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc82:	4649      	mov	r1, r9
 800dc84:	f7f2 ff54 	bl	8000b30 <__aeabi_dcmple>
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d07a      	beq.n	800dd82 <_strtod_l+0xa8a>
 800dc8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d04a      	beq.n	800dd28 <_strtod_l+0xa30>
 800dc92:	4b95      	ldr	r3, [pc, #596]	; (800dee8 <_strtod_l+0xbf0>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc9a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dee8 <_strtod_l+0xbf0>
 800dc9e:	f04f 0800 	mov.w	r8, #0
 800dca2:	4b92      	ldr	r3, [pc, #584]	; (800deec <_strtod_l+0xbf4>)
 800dca4:	403b      	ands	r3, r7
 800dca6:	930d      	str	r3, [sp, #52]	; 0x34
 800dca8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcaa:	4b91      	ldr	r3, [pc, #580]	; (800def0 <_strtod_l+0xbf8>)
 800dcac:	429a      	cmp	r2, r3
 800dcae:	f040 80b0 	bne.w	800de12 <_strtod_l+0xb1a>
 800dcb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dcb6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dcba:	ec4b ab10 	vmov	d0, sl, fp
 800dcbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dcc2:	f002 f88f 	bl	800fde4 <__ulp>
 800dcc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dcca:	ec53 2b10 	vmov	r2, r3, d0
 800dcce:	f7f2 fcb3 	bl	8000638 <__aeabi_dmul>
 800dcd2:	4652      	mov	r2, sl
 800dcd4:	465b      	mov	r3, fp
 800dcd6:	f7f2 faf9 	bl	80002cc <__adddf3>
 800dcda:	460b      	mov	r3, r1
 800dcdc:	4983      	ldr	r1, [pc, #524]	; (800deec <_strtod_l+0xbf4>)
 800dcde:	4a85      	ldr	r2, [pc, #532]	; (800def4 <_strtod_l+0xbfc>)
 800dce0:	4019      	ands	r1, r3
 800dce2:	4291      	cmp	r1, r2
 800dce4:	4682      	mov	sl, r0
 800dce6:	d960      	bls.n	800ddaa <_strtod_l+0xab2>
 800dce8:	ee18 3a90 	vmov	r3, s17
 800dcec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d104      	bne.n	800dcfe <_strtod_l+0xa06>
 800dcf4:	ee18 3a10 	vmov	r3, s16
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	f43f ad45 	beq.w	800d788 <_strtod_l+0x490>
 800dcfe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800df00 <_strtod_l+0xc08>
 800dd02:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dd06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd08:	4620      	mov	r0, r4
 800dd0a:	f001 fd39 	bl	800f780 <_Bfree>
 800dd0e:	9905      	ldr	r1, [sp, #20]
 800dd10:	4620      	mov	r0, r4
 800dd12:	f001 fd35 	bl	800f780 <_Bfree>
 800dd16:	4631      	mov	r1, r6
 800dd18:	4620      	mov	r0, r4
 800dd1a:	f001 fd31 	bl	800f780 <_Bfree>
 800dd1e:	4629      	mov	r1, r5
 800dd20:	4620      	mov	r0, r4
 800dd22:	f001 fd2d 	bl	800f780 <_Bfree>
 800dd26:	e61a      	b.n	800d95e <_strtod_l+0x666>
 800dd28:	f1ba 0f00 	cmp.w	sl, #0
 800dd2c:	d11b      	bne.n	800dd66 <_strtod_l+0xa6e>
 800dd2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd32:	b9f3      	cbnz	r3, 800dd72 <_strtod_l+0xa7a>
 800dd34:	4b6c      	ldr	r3, [pc, #432]	; (800dee8 <_strtod_l+0xbf0>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	4640      	mov	r0, r8
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	f7f2 feee 	bl	8000b1c <__aeabi_dcmplt>
 800dd40:	b9d0      	cbnz	r0, 800dd78 <_strtod_l+0xa80>
 800dd42:	4640      	mov	r0, r8
 800dd44:	4649      	mov	r1, r9
 800dd46:	4b6c      	ldr	r3, [pc, #432]	; (800def8 <_strtod_l+0xc00>)
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f7f2 fc75 	bl	8000638 <__aeabi_dmul>
 800dd4e:	4680      	mov	r8, r0
 800dd50:	4689      	mov	r9, r1
 800dd52:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd56:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dd5a:	9315      	str	r3, [sp, #84]	; 0x54
 800dd5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dd60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd64:	e79d      	b.n	800dca2 <_strtod_l+0x9aa>
 800dd66:	f1ba 0f01 	cmp.w	sl, #1
 800dd6a:	d102      	bne.n	800dd72 <_strtod_l+0xa7a>
 800dd6c:	2f00      	cmp	r7, #0
 800dd6e:	f43f ad83 	beq.w	800d878 <_strtod_l+0x580>
 800dd72:	4b62      	ldr	r3, [pc, #392]	; (800defc <_strtod_l+0xc04>)
 800dd74:	2200      	movs	r2, #0
 800dd76:	e78e      	b.n	800dc96 <_strtod_l+0x99e>
 800dd78:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800def8 <_strtod_l+0xc00>
 800dd7c:	f04f 0800 	mov.w	r8, #0
 800dd80:	e7e7      	b.n	800dd52 <_strtod_l+0xa5a>
 800dd82:	4b5d      	ldr	r3, [pc, #372]	; (800def8 <_strtod_l+0xc00>)
 800dd84:	4640      	mov	r0, r8
 800dd86:	4649      	mov	r1, r9
 800dd88:	2200      	movs	r2, #0
 800dd8a:	f7f2 fc55 	bl	8000638 <__aeabi_dmul>
 800dd8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd90:	4680      	mov	r8, r0
 800dd92:	4689      	mov	r9, r1
 800dd94:	b933      	cbnz	r3, 800dda4 <_strtod_l+0xaac>
 800dd96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd9a:	900e      	str	r0, [sp, #56]	; 0x38
 800dd9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dda2:	e7dd      	b.n	800dd60 <_strtod_l+0xa68>
 800dda4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dda8:	e7f9      	b.n	800dd9e <_strtod_l+0xaa6>
 800ddaa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ddae:	9b04      	ldr	r3, [sp, #16]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d1a8      	bne.n	800dd06 <_strtod_l+0xa0e>
 800ddb4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ddb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ddba:	0d1b      	lsrs	r3, r3, #20
 800ddbc:	051b      	lsls	r3, r3, #20
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d1a1      	bne.n	800dd06 <_strtod_l+0xa0e>
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	4649      	mov	r1, r9
 800ddc6:	f7f2 ff97 	bl	8000cf8 <__aeabi_d2lz>
 800ddca:	f7f2 fc07 	bl	80005dc <__aeabi_l2d>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	4640      	mov	r0, r8
 800ddd4:	4649      	mov	r1, r9
 800ddd6:	f7f2 fa77 	bl	80002c8 <__aeabi_dsub>
 800ddda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dddc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dde0:	ea43 030a 	orr.w	r3, r3, sl
 800dde4:	4313      	orrs	r3, r2
 800dde6:	4680      	mov	r8, r0
 800dde8:	4689      	mov	r9, r1
 800ddea:	d055      	beq.n	800de98 <_strtod_l+0xba0>
 800ddec:	a336      	add	r3, pc, #216	; (adr r3, 800dec8 <_strtod_l+0xbd0>)
 800ddee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf2:	f7f2 fe93 	bl	8000b1c <__aeabi_dcmplt>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	f47f acd0 	bne.w	800d79c <_strtod_l+0x4a4>
 800ddfc:	a334      	add	r3, pc, #208	; (adr r3, 800ded0 <_strtod_l+0xbd8>)
 800ddfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de02:	4640      	mov	r0, r8
 800de04:	4649      	mov	r1, r9
 800de06:	f7f2 fea7 	bl	8000b58 <__aeabi_dcmpgt>
 800de0a:	2800      	cmp	r0, #0
 800de0c:	f43f af7b 	beq.w	800dd06 <_strtod_l+0xa0e>
 800de10:	e4c4      	b.n	800d79c <_strtod_l+0x4a4>
 800de12:	9b04      	ldr	r3, [sp, #16]
 800de14:	b333      	cbz	r3, 800de64 <_strtod_l+0xb6c>
 800de16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de18:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de1c:	d822      	bhi.n	800de64 <_strtod_l+0xb6c>
 800de1e:	a32e      	add	r3, pc, #184	; (adr r3, 800ded8 <_strtod_l+0xbe0>)
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	4640      	mov	r0, r8
 800de26:	4649      	mov	r1, r9
 800de28:	f7f2 fe82 	bl	8000b30 <__aeabi_dcmple>
 800de2c:	b1a0      	cbz	r0, 800de58 <_strtod_l+0xb60>
 800de2e:	4649      	mov	r1, r9
 800de30:	4640      	mov	r0, r8
 800de32:	f7f2 fed9 	bl	8000be8 <__aeabi_d2uiz>
 800de36:	2801      	cmp	r0, #1
 800de38:	bf38      	it	cc
 800de3a:	2001      	movcc	r0, #1
 800de3c:	f7f2 fb82 	bl	8000544 <__aeabi_ui2d>
 800de40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de42:	4680      	mov	r8, r0
 800de44:	4689      	mov	r9, r1
 800de46:	bb23      	cbnz	r3, 800de92 <_strtod_l+0xb9a>
 800de48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de4c:	9010      	str	r0, [sp, #64]	; 0x40
 800de4e:	9311      	str	r3, [sp, #68]	; 0x44
 800de50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800de54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de5a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de5c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800de60:	1a9b      	subs	r3, r3, r2
 800de62:	9309      	str	r3, [sp, #36]	; 0x24
 800de64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de68:	eeb0 0a48 	vmov.f32	s0, s16
 800de6c:	eef0 0a68 	vmov.f32	s1, s17
 800de70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de74:	f001 ffb6 	bl	800fde4 <__ulp>
 800de78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de7c:	ec53 2b10 	vmov	r2, r3, d0
 800de80:	f7f2 fbda 	bl	8000638 <__aeabi_dmul>
 800de84:	ec53 2b18 	vmov	r2, r3, d8
 800de88:	f7f2 fa20 	bl	80002cc <__adddf3>
 800de8c:	4682      	mov	sl, r0
 800de8e:	468b      	mov	fp, r1
 800de90:	e78d      	b.n	800ddae <_strtod_l+0xab6>
 800de92:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800de96:	e7db      	b.n	800de50 <_strtod_l+0xb58>
 800de98:	a311      	add	r3, pc, #68	; (adr r3, 800dee0 <_strtod_l+0xbe8>)
 800de9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9e:	f7f2 fe3d 	bl	8000b1c <__aeabi_dcmplt>
 800dea2:	e7b2      	b.n	800de0a <_strtod_l+0xb12>
 800dea4:	2300      	movs	r3, #0
 800dea6:	930a      	str	r3, [sp, #40]	; 0x28
 800dea8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800deaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800deac:	6013      	str	r3, [r2, #0]
 800deae:	f7ff ba6b 	b.w	800d388 <_strtod_l+0x90>
 800deb2:	2a65      	cmp	r2, #101	; 0x65
 800deb4:	f43f ab5f 	beq.w	800d576 <_strtod_l+0x27e>
 800deb8:	2a45      	cmp	r2, #69	; 0x45
 800deba:	f43f ab5c 	beq.w	800d576 <_strtod_l+0x27e>
 800debe:	2301      	movs	r3, #1
 800dec0:	f7ff bb94 	b.w	800d5ec <_strtod_l+0x2f4>
 800dec4:	f3af 8000 	nop.w
 800dec8:	94a03595 	.word	0x94a03595
 800decc:	3fdfffff 	.word	0x3fdfffff
 800ded0:	35afe535 	.word	0x35afe535
 800ded4:	3fe00000 	.word	0x3fe00000
 800ded8:	ffc00000 	.word	0xffc00000
 800dedc:	41dfffff 	.word	0x41dfffff
 800dee0:	94a03595 	.word	0x94a03595
 800dee4:	3fcfffff 	.word	0x3fcfffff
 800dee8:	3ff00000 	.word	0x3ff00000
 800deec:	7ff00000 	.word	0x7ff00000
 800def0:	7fe00000 	.word	0x7fe00000
 800def4:	7c9fffff 	.word	0x7c9fffff
 800def8:	3fe00000 	.word	0x3fe00000
 800defc:	bff00000 	.word	0xbff00000
 800df00:	7fefffff 	.word	0x7fefffff

0800df04 <strtod>:
 800df04:	460a      	mov	r2, r1
 800df06:	4601      	mov	r1, r0
 800df08:	4802      	ldr	r0, [pc, #8]	; (800df14 <strtod+0x10>)
 800df0a:	4b03      	ldr	r3, [pc, #12]	; (800df18 <strtod+0x14>)
 800df0c:	6800      	ldr	r0, [r0, #0]
 800df0e:	f7ff b9f3 	b.w	800d2f8 <_strtod_l>
 800df12:	bf00      	nop
 800df14:	2000018c 	.word	0x2000018c
 800df18:	200001f4 	.word	0x200001f4

0800df1c <_strtol_l.constprop.0>:
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df22:	d001      	beq.n	800df28 <_strtol_l.constprop.0+0xc>
 800df24:	2b24      	cmp	r3, #36	; 0x24
 800df26:	d906      	bls.n	800df36 <_strtol_l.constprop.0+0x1a>
 800df28:	f000 ff48 	bl	800edbc <__errno>
 800df2c:	2316      	movs	r3, #22
 800df2e:	6003      	str	r3, [r0, #0]
 800df30:	2000      	movs	r0, #0
 800df32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df36:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e01c <_strtol_l.constprop.0+0x100>
 800df3a:	460d      	mov	r5, r1
 800df3c:	462e      	mov	r6, r5
 800df3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df42:	f814 700c 	ldrb.w	r7, [r4, ip]
 800df46:	f017 0708 	ands.w	r7, r7, #8
 800df4a:	d1f7      	bne.n	800df3c <_strtol_l.constprop.0+0x20>
 800df4c:	2c2d      	cmp	r4, #45	; 0x2d
 800df4e:	d132      	bne.n	800dfb6 <_strtol_l.constprop.0+0x9a>
 800df50:	782c      	ldrb	r4, [r5, #0]
 800df52:	2701      	movs	r7, #1
 800df54:	1cb5      	adds	r5, r6, #2
 800df56:	2b00      	cmp	r3, #0
 800df58:	d05b      	beq.n	800e012 <_strtol_l.constprop.0+0xf6>
 800df5a:	2b10      	cmp	r3, #16
 800df5c:	d109      	bne.n	800df72 <_strtol_l.constprop.0+0x56>
 800df5e:	2c30      	cmp	r4, #48	; 0x30
 800df60:	d107      	bne.n	800df72 <_strtol_l.constprop.0+0x56>
 800df62:	782c      	ldrb	r4, [r5, #0]
 800df64:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800df68:	2c58      	cmp	r4, #88	; 0x58
 800df6a:	d14d      	bne.n	800e008 <_strtol_l.constprop.0+0xec>
 800df6c:	786c      	ldrb	r4, [r5, #1]
 800df6e:	2310      	movs	r3, #16
 800df70:	3502      	adds	r5, #2
 800df72:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800df76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df7a:	f04f 0c00 	mov.w	ip, #0
 800df7e:	fbb8 f9f3 	udiv	r9, r8, r3
 800df82:	4666      	mov	r6, ip
 800df84:	fb03 8a19 	mls	sl, r3, r9, r8
 800df88:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800df8c:	f1be 0f09 	cmp.w	lr, #9
 800df90:	d816      	bhi.n	800dfc0 <_strtol_l.constprop.0+0xa4>
 800df92:	4674      	mov	r4, lr
 800df94:	42a3      	cmp	r3, r4
 800df96:	dd24      	ble.n	800dfe2 <_strtol_l.constprop.0+0xc6>
 800df98:	f1bc 0f00 	cmp.w	ip, #0
 800df9c:	db1e      	blt.n	800dfdc <_strtol_l.constprop.0+0xc0>
 800df9e:	45b1      	cmp	r9, r6
 800dfa0:	d31c      	bcc.n	800dfdc <_strtol_l.constprop.0+0xc0>
 800dfa2:	d101      	bne.n	800dfa8 <_strtol_l.constprop.0+0x8c>
 800dfa4:	45a2      	cmp	sl, r4
 800dfa6:	db19      	blt.n	800dfdc <_strtol_l.constprop.0+0xc0>
 800dfa8:	fb06 4603 	mla	r6, r6, r3, r4
 800dfac:	f04f 0c01 	mov.w	ip, #1
 800dfb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfb4:	e7e8      	b.n	800df88 <_strtol_l.constprop.0+0x6c>
 800dfb6:	2c2b      	cmp	r4, #43	; 0x2b
 800dfb8:	bf04      	itt	eq
 800dfba:	782c      	ldrbeq	r4, [r5, #0]
 800dfbc:	1cb5      	addeq	r5, r6, #2
 800dfbe:	e7ca      	b.n	800df56 <_strtol_l.constprop.0+0x3a>
 800dfc0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dfc4:	f1be 0f19 	cmp.w	lr, #25
 800dfc8:	d801      	bhi.n	800dfce <_strtol_l.constprop.0+0xb2>
 800dfca:	3c37      	subs	r4, #55	; 0x37
 800dfcc:	e7e2      	b.n	800df94 <_strtol_l.constprop.0+0x78>
 800dfce:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dfd2:	f1be 0f19 	cmp.w	lr, #25
 800dfd6:	d804      	bhi.n	800dfe2 <_strtol_l.constprop.0+0xc6>
 800dfd8:	3c57      	subs	r4, #87	; 0x57
 800dfda:	e7db      	b.n	800df94 <_strtol_l.constprop.0+0x78>
 800dfdc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800dfe0:	e7e6      	b.n	800dfb0 <_strtol_l.constprop.0+0x94>
 800dfe2:	f1bc 0f00 	cmp.w	ip, #0
 800dfe6:	da05      	bge.n	800dff4 <_strtol_l.constprop.0+0xd8>
 800dfe8:	2322      	movs	r3, #34	; 0x22
 800dfea:	6003      	str	r3, [r0, #0]
 800dfec:	4646      	mov	r6, r8
 800dfee:	b942      	cbnz	r2, 800e002 <_strtol_l.constprop.0+0xe6>
 800dff0:	4630      	mov	r0, r6
 800dff2:	e79e      	b.n	800df32 <_strtol_l.constprop.0+0x16>
 800dff4:	b107      	cbz	r7, 800dff8 <_strtol_l.constprop.0+0xdc>
 800dff6:	4276      	negs	r6, r6
 800dff8:	2a00      	cmp	r2, #0
 800dffa:	d0f9      	beq.n	800dff0 <_strtol_l.constprop.0+0xd4>
 800dffc:	f1bc 0f00 	cmp.w	ip, #0
 800e000:	d000      	beq.n	800e004 <_strtol_l.constprop.0+0xe8>
 800e002:	1e69      	subs	r1, r5, #1
 800e004:	6011      	str	r1, [r2, #0]
 800e006:	e7f3      	b.n	800dff0 <_strtol_l.constprop.0+0xd4>
 800e008:	2430      	movs	r4, #48	; 0x30
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1b1      	bne.n	800df72 <_strtol_l.constprop.0+0x56>
 800e00e:	2308      	movs	r3, #8
 800e010:	e7af      	b.n	800df72 <_strtol_l.constprop.0+0x56>
 800e012:	2c30      	cmp	r4, #48	; 0x30
 800e014:	d0a5      	beq.n	800df62 <_strtol_l.constprop.0+0x46>
 800e016:	230a      	movs	r3, #10
 800e018:	e7ab      	b.n	800df72 <_strtol_l.constprop.0+0x56>
 800e01a:	bf00      	nop
 800e01c:	08012329 	.word	0x08012329

0800e020 <strtol>:
 800e020:	4613      	mov	r3, r2
 800e022:	460a      	mov	r2, r1
 800e024:	4601      	mov	r1, r0
 800e026:	4802      	ldr	r0, [pc, #8]	; (800e030 <strtol+0x10>)
 800e028:	6800      	ldr	r0, [r0, #0]
 800e02a:	f7ff bf77 	b.w	800df1c <_strtol_l.constprop.0>
 800e02e:	bf00      	nop
 800e030:	2000018c 	.word	0x2000018c

0800e034 <sbrk>:
 800e034:	4b02      	ldr	r3, [pc, #8]	; (800e040 <sbrk+0xc>)
 800e036:	4601      	mov	r1, r0
 800e038:	6818      	ldr	r0, [r3, #0]
 800e03a:	f7ff b8c3 	b.w	800d1c4 <_sbrk_r>
 800e03e:	bf00      	nop
 800e040:	2000018c 	.word	0x2000018c

0800e044 <_vasiprintf_r>:
 800e044:	b530      	push	{r4, r5, lr}
 800e046:	460d      	mov	r5, r1
 800e048:	4909      	ldr	r1, [pc, #36]	; (800e070 <_vasiprintf_r+0x2c>)
 800e04a:	b09b      	sub	sp, #108	; 0x6c
 800e04c:	2400      	movs	r4, #0
 800e04e:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800e052:	4669      	mov	r1, sp
 800e054:	9400      	str	r4, [sp, #0]
 800e056:	9402      	str	r4, [sp, #8]
 800e058:	9405      	str	r4, [sp, #20]
 800e05a:	f7fe fb49 	bl	800c6f0 <_svfiprintf_r>
 800e05e:	2800      	cmp	r0, #0
 800e060:	bfa1      	itttt	ge
 800e062:	9b00      	ldrge	r3, [sp, #0]
 800e064:	701c      	strbge	r4, [r3, #0]
 800e066:	9b04      	ldrge	r3, [sp, #16]
 800e068:	602b      	strge	r3, [r5, #0]
 800e06a:	b01b      	add	sp, #108	; 0x6c
 800e06c:	bd30      	pop	{r4, r5, pc}
 800e06e:	bf00      	nop
 800e070:	ffff0288 	.word	0xffff0288

0800e074 <vasiprintf>:
 800e074:	4613      	mov	r3, r2
 800e076:	460a      	mov	r2, r1
 800e078:	4601      	mov	r1, r0
 800e07a:	4802      	ldr	r0, [pc, #8]	; (800e084 <vasiprintf+0x10>)
 800e07c:	6800      	ldr	r0, [r0, #0]
 800e07e:	f7ff bfe1 	b.w	800e044 <_vasiprintf_r>
 800e082:	bf00      	nop
 800e084:	2000018c 	.word	0x2000018c

0800e088 <__assert_func>:
 800e088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e08a:	4614      	mov	r4, r2
 800e08c:	461a      	mov	r2, r3
 800e08e:	4b09      	ldr	r3, [pc, #36]	; (800e0b4 <__assert_func+0x2c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	4605      	mov	r5, r0
 800e094:	68d8      	ldr	r0, [r3, #12]
 800e096:	b14c      	cbz	r4, 800e0ac <__assert_func+0x24>
 800e098:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <__assert_func+0x30>)
 800e09a:	9100      	str	r1, [sp, #0]
 800e09c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e0a0:	4906      	ldr	r1, [pc, #24]	; (800e0bc <__assert_func+0x34>)
 800e0a2:	462b      	mov	r3, r5
 800e0a4:	f000 ff66 	bl	800ef74 <fiprintf>
 800e0a8:	f7fe f8f2 	bl	800c290 <abort>
 800e0ac:	4b04      	ldr	r3, [pc, #16]	; (800e0c0 <__assert_func+0x38>)
 800e0ae:	461c      	mov	r4, r3
 800e0b0:	e7f3      	b.n	800e09a <__assert_func+0x12>
 800e0b2:	bf00      	nop
 800e0b4:	2000018c 	.word	0x2000018c
 800e0b8:	080124c8 	.word	0x080124c8
 800e0bc:	080124d5 	.word	0x080124d5
 800e0c0:	08012503 	.word	0x08012503

0800e0c4 <quorem>:
 800e0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c8:	6903      	ldr	r3, [r0, #16]
 800e0ca:	690c      	ldr	r4, [r1, #16]
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	4607      	mov	r7, r0
 800e0d0:	f2c0 8081 	blt.w	800e1d6 <quorem+0x112>
 800e0d4:	3c01      	subs	r4, #1
 800e0d6:	f101 0814 	add.w	r8, r1, #20
 800e0da:	f100 0514 	add.w	r5, r0, #20
 800e0de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0e2:	9301      	str	r3, [sp, #4]
 800e0e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	429a      	cmp	r2, r3
 800e0f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0fc:	d331      	bcc.n	800e162 <quorem+0x9e>
 800e0fe:	f04f 0e00 	mov.w	lr, #0
 800e102:	4640      	mov	r0, r8
 800e104:	46ac      	mov	ip, r5
 800e106:	46f2      	mov	sl, lr
 800e108:	f850 2b04 	ldr.w	r2, [r0], #4
 800e10c:	b293      	uxth	r3, r2
 800e10e:	fb06 e303 	mla	r3, r6, r3, lr
 800e112:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e116:	b29b      	uxth	r3, r3
 800e118:	ebaa 0303 	sub.w	r3, sl, r3
 800e11c:	f8dc a000 	ldr.w	sl, [ip]
 800e120:	0c12      	lsrs	r2, r2, #16
 800e122:	fa13 f38a 	uxtah	r3, r3, sl
 800e126:	fb06 e202 	mla	r2, r6, r2, lr
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	9b00      	ldr	r3, [sp, #0]
 800e12e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e132:	b292      	uxth	r2, r2
 800e134:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e13c:	f8bd 3000 	ldrh.w	r3, [sp]
 800e140:	4581      	cmp	r9, r0
 800e142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e146:	f84c 3b04 	str.w	r3, [ip], #4
 800e14a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e14e:	d2db      	bcs.n	800e108 <quorem+0x44>
 800e150:	f855 300b 	ldr.w	r3, [r5, fp]
 800e154:	b92b      	cbnz	r3, 800e162 <quorem+0x9e>
 800e156:	9b01      	ldr	r3, [sp, #4]
 800e158:	3b04      	subs	r3, #4
 800e15a:	429d      	cmp	r5, r3
 800e15c:	461a      	mov	r2, r3
 800e15e:	d32e      	bcc.n	800e1be <quorem+0xfa>
 800e160:	613c      	str	r4, [r7, #16]
 800e162:	4638      	mov	r0, r7
 800e164:	f001 fd98 	bl	800fc98 <__mcmp>
 800e168:	2800      	cmp	r0, #0
 800e16a:	db24      	blt.n	800e1b6 <quorem+0xf2>
 800e16c:	3601      	adds	r6, #1
 800e16e:	4628      	mov	r0, r5
 800e170:	f04f 0c00 	mov.w	ip, #0
 800e174:	f858 2b04 	ldr.w	r2, [r8], #4
 800e178:	f8d0 e000 	ldr.w	lr, [r0]
 800e17c:	b293      	uxth	r3, r2
 800e17e:	ebac 0303 	sub.w	r3, ip, r3
 800e182:	0c12      	lsrs	r2, r2, #16
 800e184:	fa13 f38e 	uxtah	r3, r3, lr
 800e188:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e18c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e190:	b29b      	uxth	r3, r3
 800e192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e196:	45c1      	cmp	r9, r8
 800e198:	f840 3b04 	str.w	r3, [r0], #4
 800e19c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e1a0:	d2e8      	bcs.n	800e174 <quorem+0xb0>
 800e1a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1aa:	b922      	cbnz	r2, 800e1b6 <quorem+0xf2>
 800e1ac:	3b04      	subs	r3, #4
 800e1ae:	429d      	cmp	r5, r3
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	d30a      	bcc.n	800e1ca <quorem+0x106>
 800e1b4:	613c      	str	r4, [r7, #16]
 800e1b6:	4630      	mov	r0, r6
 800e1b8:	b003      	add	sp, #12
 800e1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1be:	6812      	ldr	r2, [r2, #0]
 800e1c0:	3b04      	subs	r3, #4
 800e1c2:	2a00      	cmp	r2, #0
 800e1c4:	d1cc      	bne.n	800e160 <quorem+0x9c>
 800e1c6:	3c01      	subs	r4, #1
 800e1c8:	e7c7      	b.n	800e15a <quorem+0x96>
 800e1ca:	6812      	ldr	r2, [r2, #0]
 800e1cc:	3b04      	subs	r3, #4
 800e1ce:	2a00      	cmp	r2, #0
 800e1d0:	d1f0      	bne.n	800e1b4 <quorem+0xf0>
 800e1d2:	3c01      	subs	r4, #1
 800e1d4:	e7eb      	b.n	800e1ae <quorem+0xea>
 800e1d6:	2000      	movs	r0, #0
 800e1d8:	e7ee      	b.n	800e1b8 <quorem+0xf4>
 800e1da:	0000      	movs	r0, r0
 800e1dc:	0000      	movs	r0, r0
	...

0800e1e0 <_dtoa_r>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	ed2d 8b04 	vpush	{d8-d9}
 800e1e8:	ec57 6b10 	vmov	r6, r7, d0
 800e1ec:	b093      	sub	sp, #76	; 0x4c
 800e1ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1f4:	9106      	str	r1, [sp, #24]
 800e1f6:	ee10 aa10 	vmov	sl, s0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800e200:	46bb      	mov	fp, r7
 800e202:	b975      	cbnz	r5, 800e222 <_dtoa_r+0x42>
 800e204:	2010      	movs	r0, #16
 800e206:	f7fe f8a3 	bl	800c350 <malloc>
 800e20a:	4602      	mov	r2, r0
 800e20c:	6260      	str	r0, [r4, #36]	; 0x24
 800e20e:	b920      	cbnz	r0, 800e21a <_dtoa_r+0x3a>
 800e210:	4ba7      	ldr	r3, [pc, #668]	; (800e4b0 <_dtoa_r+0x2d0>)
 800e212:	21ea      	movs	r1, #234	; 0xea
 800e214:	48a7      	ldr	r0, [pc, #668]	; (800e4b4 <_dtoa_r+0x2d4>)
 800e216:	f7ff ff37 	bl	800e088 <__assert_func>
 800e21a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e21e:	6005      	str	r5, [r0, #0]
 800e220:	60c5      	str	r5, [r0, #12]
 800e222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e224:	6819      	ldr	r1, [r3, #0]
 800e226:	b151      	cbz	r1, 800e23e <_dtoa_r+0x5e>
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	604a      	str	r2, [r1, #4]
 800e22c:	2301      	movs	r3, #1
 800e22e:	4093      	lsls	r3, r2
 800e230:	608b      	str	r3, [r1, #8]
 800e232:	4620      	mov	r0, r4
 800e234:	f001 faa4 	bl	800f780 <_Bfree>
 800e238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	1e3b      	subs	r3, r7, #0
 800e240:	bfaa      	itet	ge
 800e242:	2300      	movge	r3, #0
 800e244:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e248:	f8c8 3000 	strge.w	r3, [r8]
 800e24c:	4b9a      	ldr	r3, [pc, #616]	; (800e4b8 <_dtoa_r+0x2d8>)
 800e24e:	bfbc      	itt	lt
 800e250:	2201      	movlt	r2, #1
 800e252:	f8c8 2000 	strlt.w	r2, [r8]
 800e256:	ea33 030b 	bics.w	r3, r3, fp
 800e25a:	d11b      	bne.n	800e294 <_dtoa_r+0xb4>
 800e25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e25e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e262:	6013      	str	r3, [r2, #0]
 800e264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e268:	4333      	orrs	r3, r6
 800e26a:	f000 8592 	beq.w	800ed92 <_dtoa_r+0xbb2>
 800e26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e270:	b963      	cbnz	r3, 800e28c <_dtoa_r+0xac>
 800e272:	4b92      	ldr	r3, [pc, #584]	; (800e4bc <_dtoa_r+0x2dc>)
 800e274:	e022      	b.n	800e2bc <_dtoa_r+0xdc>
 800e276:	4b92      	ldr	r3, [pc, #584]	; (800e4c0 <_dtoa_r+0x2e0>)
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	3308      	adds	r3, #8
 800e27c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	9801      	ldr	r0, [sp, #4]
 800e282:	b013      	add	sp, #76	; 0x4c
 800e284:	ecbd 8b04 	vpop	{d8-d9}
 800e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	4b8b      	ldr	r3, [pc, #556]	; (800e4bc <_dtoa_r+0x2dc>)
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	3303      	adds	r3, #3
 800e292:	e7f3      	b.n	800e27c <_dtoa_r+0x9c>
 800e294:	2200      	movs	r2, #0
 800e296:	2300      	movs	r3, #0
 800e298:	4650      	mov	r0, sl
 800e29a:	4659      	mov	r1, fp
 800e29c:	f7f2 fc34 	bl	8000b08 <__aeabi_dcmpeq>
 800e2a0:	ec4b ab19 	vmov	d9, sl, fp
 800e2a4:	4680      	mov	r8, r0
 800e2a6:	b158      	cbz	r0, 800e2c0 <_dtoa_r+0xe0>
 800e2a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	6013      	str	r3, [r2, #0]
 800e2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 856b 	beq.w	800ed8c <_dtoa_r+0xbac>
 800e2b6:	4883      	ldr	r0, [pc, #524]	; (800e4c4 <_dtoa_r+0x2e4>)
 800e2b8:	6018      	str	r0, [r3, #0]
 800e2ba:	1e43      	subs	r3, r0, #1
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	e7df      	b.n	800e280 <_dtoa_r+0xa0>
 800e2c0:	ec4b ab10 	vmov	d0, sl, fp
 800e2c4:	aa10      	add	r2, sp, #64	; 0x40
 800e2c6:	a911      	add	r1, sp, #68	; 0x44
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f001 fe07 	bl	800fedc <__d2b>
 800e2ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e2d2:	ee08 0a10 	vmov	s16, r0
 800e2d6:	2d00      	cmp	r5, #0
 800e2d8:	f000 8084 	beq.w	800e3e4 <_dtoa_r+0x204>
 800e2dc:	ee19 3a90 	vmov	r3, s19
 800e2e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e2e8:	4656      	mov	r6, sl
 800e2ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e2ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e2f6:	4b74      	ldr	r3, [pc, #464]	; (800e4c8 <_dtoa_r+0x2e8>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	f7f1 ffe3 	bl	80002c8 <__aeabi_dsub>
 800e302:	a365      	add	r3, pc, #404	; (adr r3, 800e498 <_dtoa_r+0x2b8>)
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f7f2 f996 	bl	8000638 <__aeabi_dmul>
 800e30c:	a364      	add	r3, pc, #400	; (adr r3, 800e4a0 <_dtoa_r+0x2c0>)
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	f7f1 ffdb 	bl	80002cc <__adddf3>
 800e316:	4606      	mov	r6, r0
 800e318:	4628      	mov	r0, r5
 800e31a:	460f      	mov	r7, r1
 800e31c:	f7f2 f922 	bl	8000564 <__aeabi_i2d>
 800e320:	a361      	add	r3, pc, #388	; (adr r3, 800e4a8 <_dtoa_r+0x2c8>)
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	f7f2 f987 	bl	8000638 <__aeabi_dmul>
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	4630      	mov	r0, r6
 800e330:	4639      	mov	r1, r7
 800e332:	f7f1 ffcb 	bl	80002cc <__adddf3>
 800e336:	4606      	mov	r6, r0
 800e338:	460f      	mov	r7, r1
 800e33a:	f7f2 fc2d 	bl	8000b98 <__aeabi_d2iz>
 800e33e:	2200      	movs	r2, #0
 800e340:	9000      	str	r0, [sp, #0]
 800e342:	2300      	movs	r3, #0
 800e344:	4630      	mov	r0, r6
 800e346:	4639      	mov	r1, r7
 800e348:	f7f2 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 800e34c:	b150      	cbz	r0, 800e364 <_dtoa_r+0x184>
 800e34e:	9800      	ldr	r0, [sp, #0]
 800e350:	f7f2 f908 	bl	8000564 <__aeabi_i2d>
 800e354:	4632      	mov	r2, r6
 800e356:	463b      	mov	r3, r7
 800e358:	f7f2 fbd6 	bl	8000b08 <__aeabi_dcmpeq>
 800e35c:	b910      	cbnz	r0, 800e364 <_dtoa_r+0x184>
 800e35e:	9b00      	ldr	r3, [sp, #0]
 800e360:	3b01      	subs	r3, #1
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	9b00      	ldr	r3, [sp, #0]
 800e366:	2b16      	cmp	r3, #22
 800e368:	d85a      	bhi.n	800e420 <_dtoa_r+0x240>
 800e36a:	9a00      	ldr	r2, [sp, #0]
 800e36c:	4b57      	ldr	r3, [pc, #348]	; (800e4cc <_dtoa_r+0x2ec>)
 800e36e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	ec51 0b19 	vmov	r0, r1, d9
 800e37a:	f7f2 fbcf 	bl	8000b1c <__aeabi_dcmplt>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d050      	beq.n	800e424 <_dtoa_r+0x244>
 800e382:	9b00      	ldr	r3, [sp, #0]
 800e384:	3b01      	subs	r3, #1
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	2300      	movs	r3, #0
 800e38a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e38e:	1b5d      	subs	r5, r3, r5
 800e390:	1e6b      	subs	r3, r5, #1
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	bf45      	ittet	mi
 800e396:	f1c5 0301 	rsbmi	r3, r5, #1
 800e39a:	9304      	strmi	r3, [sp, #16]
 800e39c:	2300      	movpl	r3, #0
 800e39e:	2300      	movmi	r3, #0
 800e3a0:	bf4c      	ite	mi
 800e3a2:	9305      	strmi	r3, [sp, #20]
 800e3a4:	9304      	strpl	r3, [sp, #16]
 800e3a6:	9b00      	ldr	r3, [sp, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	db3d      	blt.n	800e428 <_dtoa_r+0x248>
 800e3ac:	9b05      	ldr	r3, [sp, #20]
 800e3ae:	9a00      	ldr	r2, [sp, #0]
 800e3b0:	920a      	str	r2, [sp, #40]	; 0x28
 800e3b2:	4413      	add	r3, r2
 800e3b4:	9305      	str	r3, [sp, #20]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	9307      	str	r3, [sp, #28]
 800e3ba:	9b06      	ldr	r3, [sp, #24]
 800e3bc:	2b09      	cmp	r3, #9
 800e3be:	f200 8089 	bhi.w	800e4d4 <_dtoa_r+0x2f4>
 800e3c2:	2b05      	cmp	r3, #5
 800e3c4:	bfc4      	itt	gt
 800e3c6:	3b04      	subgt	r3, #4
 800e3c8:	9306      	strgt	r3, [sp, #24]
 800e3ca:	9b06      	ldr	r3, [sp, #24]
 800e3cc:	f1a3 0302 	sub.w	r3, r3, #2
 800e3d0:	bfcc      	ite	gt
 800e3d2:	2500      	movgt	r5, #0
 800e3d4:	2501      	movle	r5, #1
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	f200 8087 	bhi.w	800e4ea <_dtoa_r+0x30a>
 800e3dc:	e8df f003 	tbb	[pc, r3]
 800e3e0:	59383a2d 	.word	0x59383a2d
 800e3e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3e8:	441d      	add	r5, r3
 800e3ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3ee:	2b20      	cmp	r3, #32
 800e3f0:	bfc1      	itttt	gt
 800e3f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e402:	bfda      	itte	le
 800e404:	f1c3 0320 	rsble	r3, r3, #32
 800e408:	fa06 f003 	lslle.w	r0, r6, r3
 800e40c:	4318      	orrgt	r0, r3
 800e40e:	f7f2 f899 	bl	8000544 <__aeabi_ui2d>
 800e412:	2301      	movs	r3, #1
 800e414:	4606      	mov	r6, r0
 800e416:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e41a:	3d01      	subs	r5, #1
 800e41c:	930e      	str	r3, [sp, #56]	; 0x38
 800e41e:	e76a      	b.n	800e2f6 <_dtoa_r+0x116>
 800e420:	2301      	movs	r3, #1
 800e422:	e7b2      	b.n	800e38a <_dtoa_r+0x1aa>
 800e424:	900b      	str	r0, [sp, #44]	; 0x2c
 800e426:	e7b1      	b.n	800e38c <_dtoa_r+0x1ac>
 800e428:	9b04      	ldr	r3, [sp, #16]
 800e42a:	9a00      	ldr	r2, [sp, #0]
 800e42c:	1a9b      	subs	r3, r3, r2
 800e42e:	9304      	str	r3, [sp, #16]
 800e430:	4253      	negs	r3, r2
 800e432:	9307      	str	r3, [sp, #28]
 800e434:	2300      	movs	r3, #0
 800e436:	930a      	str	r3, [sp, #40]	; 0x28
 800e438:	e7bf      	b.n	800e3ba <_dtoa_r+0x1da>
 800e43a:	2300      	movs	r3, #0
 800e43c:	9308      	str	r3, [sp, #32]
 800e43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	dc55      	bgt.n	800e4f0 <_dtoa_r+0x310>
 800e444:	2301      	movs	r3, #1
 800e446:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e44a:	461a      	mov	r2, r3
 800e44c:	9209      	str	r2, [sp, #36]	; 0x24
 800e44e:	e00c      	b.n	800e46a <_dtoa_r+0x28a>
 800e450:	2301      	movs	r3, #1
 800e452:	e7f3      	b.n	800e43c <_dtoa_r+0x25c>
 800e454:	2300      	movs	r3, #0
 800e456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e458:	9308      	str	r3, [sp, #32]
 800e45a:	9b00      	ldr	r3, [sp, #0]
 800e45c:	4413      	add	r3, r2
 800e45e:	9302      	str	r3, [sp, #8]
 800e460:	3301      	adds	r3, #1
 800e462:	2b01      	cmp	r3, #1
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	bfb8      	it	lt
 800e468:	2301      	movlt	r3, #1
 800e46a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e46c:	2200      	movs	r2, #0
 800e46e:	6042      	str	r2, [r0, #4]
 800e470:	2204      	movs	r2, #4
 800e472:	f102 0614 	add.w	r6, r2, #20
 800e476:	429e      	cmp	r6, r3
 800e478:	6841      	ldr	r1, [r0, #4]
 800e47a:	d93d      	bls.n	800e4f8 <_dtoa_r+0x318>
 800e47c:	4620      	mov	r0, r4
 800e47e:	f001 f93f 	bl	800f700 <_Balloc>
 800e482:	9001      	str	r0, [sp, #4]
 800e484:	2800      	cmp	r0, #0
 800e486:	d13b      	bne.n	800e500 <_dtoa_r+0x320>
 800e488:	4b11      	ldr	r3, [pc, #68]	; (800e4d0 <_dtoa_r+0x2f0>)
 800e48a:	4602      	mov	r2, r0
 800e48c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e490:	e6c0      	b.n	800e214 <_dtoa_r+0x34>
 800e492:	2301      	movs	r3, #1
 800e494:	e7df      	b.n	800e456 <_dtoa_r+0x276>
 800e496:	bf00      	nop
 800e498:	636f4361 	.word	0x636f4361
 800e49c:	3fd287a7 	.word	0x3fd287a7
 800e4a0:	8b60c8b3 	.word	0x8b60c8b3
 800e4a4:	3fc68a28 	.word	0x3fc68a28
 800e4a8:	509f79fb 	.word	0x509f79fb
 800e4ac:	3fd34413 	.word	0x3fd34413
 800e4b0:	08012511 	.word	0x08012511
 800e4b4:	08012528 	.word	0x08012528
 800e4b8:	7ff00000 	.word	0x7ff00000
 800e4bc:	0801250d 	.word	0x0801250d
 800e4c0:	08012504 	.word	0x08012504
 800e4c4:	08012452 	.word	0x08012452
 800e4c8:	3ff80000 	.word	0x3ff80000
 800e4cc:	080126f8 	.word	0x080126f8
 800e4d0:	08012583 	.word	0x08012583
 800e4d4:	2501      	movs	r5, #1
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	9306      	str	r3, [sp, #24]
 800e4da:	9508      	str	r5, [sp, #32]
 800e4dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2312      	movs	r3, #18
 800e4e8:	e7b0      	b.n	800e44c <_dtoa_r+0x26c>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	9308      	str	r3, [sp, #32]
 800e4ee:	e7f5      	b.n	800e4dc <_dtoa_r+0x2fc>
 800e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4f6:	e7b8      	b.n	800e46a <_dtoa_r+0x28a>
 800e4f8:	3101      	adds	r1, #1
 800e4fa:	6041      	str	r1, [r0, #4]
 800e4fc:	0052      	lsls	r2, r2, #1
 800e4fe:	e7b8      	b.n	800e472 <_dtoa_r+0x292>
 800e500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e502:	9a01      	ldr	r2, [sp, #4]
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	2b0e      	cmp	r3, #14
 800e50a:	f200 809d 	bhi.w	800e648 <_dtoa_r+0x468>
 800e50e:	2d00      	cmp	r5, #0
 800e510:	f000 809a 	beq.w	800e648 <_dtoa_r+0x468>
 800e514:	9b00      	ldr	r3, [sp, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	dd32      	ble.n	800e580 <_dtoa_r+0x3a0>
 800e51a:	4ab7      	ldr	r2, [pc, #732]	; (800e7f8 <_dtoa_r+0x618>)
 800e51c:	f003 030f 	and.w	r3, r3, #15
 800e520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e524:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e528:	9b00      	ldr	r3, [sp, #0]
 800e52a:	05d8      	lsls	r0, r3, #23
 800e52c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e530:	d516      	bpl.n	800e560 <_dtoa_r+0x380>
 800e532:	4bb2      	ldr	r3, [pc, #712]	; (800e7fc <_dtoa_r+0x61c>)
 800e534:	ec51 0b19 	vmov	r0, r1, d9
 800e538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e53c:	f7f2 f9a6 	bl	800088c <__aeabi_ddiv>
 800e540:	f007 070f 	and.w	r7, r7, #15
 800e544:	4682      	mov	sl, r0
 800e546:	468b      	mov	fp, r1
 800e548:	2503      	movs	r5, #3
 800e54a:	4eac      	ldr	r6, [pc, #688]	; (800e7fc <_dtoa_r+0x61c>)
 800e54c:	b957      	cbnz	r7, 800e564 <_dtoa_r+0x384>
 800e54e:	4642      	mov	r2, r8
 800e550:	464b      	mov	r3, r9
 800e552:	4650      	mov	r0, sl
 800e554:	4659      	mov	r1, fp
 800e556:	f7f2 f999 	bl	800088c <__aeabi_ddiv>
 800e55a:	4682      	mov	sl, r0
 800e55c:	468b      	mov	fp, r1
 800e55e:	e028      	b.n	800e5b2 <_dtoa_r+0x3d2>
 800e560:	2502      	movs	r5, #2
 800e562:	e7f2      	b.n	800e54a <_dtoa_r+0x36a>
 800e564:	07f9      	lsls	r1, r7, #31
 800e566:	d508      	bpl.n	800e57a <_dtoa_r+0x39a>
 800e568:	4640      	mov	r0, r8
 800e56a:	4649      	mov	r1, r9
 800e56c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e570:	f7f2 f862 	bl	8000638 <__aeabi_dmul>
 800e574:	3501      	adds	r5, #1
 800e576:	4680      	mov	r8, r0
 800e578:	4689      	mov	r9, r1
 800e57a:	107f      	asrs	r7, r7, #1
 800e57c:	3608      	adds	r6, #8
 800e57e:	e7e5      	b.n	800e54c <_dtoa_r+0x36c>
 800e580:	f000 809b 	beq.w	800e6ba <_dtoa_r+0x4da>
 800e584:	9b00      	ldr	r3, [sp, #0]
 800e586:	4f9d      	ldr	r7, [pc, #628]	; (800e7fc <_dtoa_r+0x61c>)
 800e588:	425e      	negs	r6, r3
 800e58a:	4b9b      	ldr	r3, [pc, #620]	; (800e7f8 <_dtoa_r+0x618>)
 800e58c:	f006 020f 	and.w	r2, r6, #15
 800e590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	ec51 0b19 	vmov	r0, r1, d9
 800e59c:	f7f2 f84c 	bl	8000638 <__aeabi_dmul>
 800e5a0:	1136      	asrs	r6, r6, #4
 800e5a2:	4682      	mov	sl, r0
 800e5a4:	468b      	mov	fp, r1
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2502      	movs	r5, #2
 800e5aa:	2e00      	cmp	r6, #0
 800e5ac:	d17a      	bne.n	800e6a4 <_dtoa_r+0x4c4>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1d3      	bne.n	800e55a <_dtoa_r+0x37a>
 800e5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 8082 	beq.w	800e6be <_dtoa_r+0x4de>
 800e5ba:	4b91      	ldr	r3, [pc, #580]	; (800e800 <_dtoa_r+0x620>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4650      	mov	r0, sl
 800e5c0:	4659      	mov	r1, fp
 800e5c2:	f7f2 faab 	bl	8000b1c <__aeabi_dcmplt>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d079      	beq.n	800e6be <_dtoa_r+0x4de>
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d076      	beq.n	800e6be <_dtoa_r+0x4de>
 800e5d0:	9b02      	ldr	r3, [sp, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dd36      	ble.n	800e644 <_dtoa_r+0x464>
 800e5d6:	9b00      	ldr	r3, [sp, #0]
 800e5d8:	4650      	mov	r0, sl
 800e5da:	4659      	mov	r1, fp
 800e5dc:	1e5f      	subs	r7, r3, #1
 800e5de:	2200      	movs	r2, #0
 800e5e0:	4b88      	ldr	r3, [pc, #544]	; (800e804 <_dtoa_r+0x624>)
 800e5e2:	f7f2 f829 	bl	8000638 <__aeabi_dmul>
 800e5e6:	9e02      	ldr	r6, [sp, #8]
 800e5e8:	4682      	mov	sl, r0
 800e5ea:	468b      	mov	fp, r1
 800e5ec:	3501      	adds	r5, #1
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f7f1 ffb8 	bl	8000564 <__aeabi_i2d>
 800e5f4:	4652      	mov	r2, sl
 800e5f6:	465b      	mov	r3, fp
 800e5f8:	f7f2 f81e 	bl	8000638 <__aeabi_dmul>
 800e5fc:	4b82      	ldr	r3, [pc, #520]	; (800e808 <_dtoa_r+0x628>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	f7f1 fe64 	bl	80002cc <__adddf3>
 800e604:	46d0      	mov	r8, sl
 800e606:	46d9      	mov	r9, fp
 800e608:	4682      	mov	sl, r0
 800e60a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e60e:	2e00      	cmp	r6, #0
 800e610:	d158      	bne.n	800e6c4 <_dtoa_r+0x4e4>
 800e612:	4b7e      	ldr	r3, [pc, #504]	; (800e80c <_dtoa_r+0x62c>)
 800e614:	2200      	movs	r2, #0
 800e616:	4640      	mov	r0, r8
 800e618:	4649      	mov	r1, r9
 800e61a:	f7f1 fe55 	bl	80002c8 <__aeabi_dsub>
 800e61e:	4652      	mov	r2, sl
 800e620:	465b      	mov	r3, fp
 800e622:	4680      	mov	r8, r0
 800e624:	4689      	mov	r9, r1
 800e626:	f7f2 fa97 	bl	8000b58 <__aeabi_dcmpgt>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f040 8295 	bne.w	800eb5a <_dtoa_r+0x97a>
 800e630:	4652      	mov	r2, sl
 800e632:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f2 fa6f 	bl	8000b1c <__aeabi_dcmplt>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f040 8289 	bne.w	800eb56 <_dtoa_r+0x976>
 800e644:	ec5b ab19 	vmov	sl, fp, d9
 800e648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f2c0 8148 	blt.w	800e8e0 <_dtoa_r+0x700>
 800e650:	9a00      	ldr	r2, [sp, #0]
 800e652:	2a0e      	cmp	r2, #14
 800e654:	f300 8144 	bgt.w	800e8e0 <_dtoa_r+0x700>
 800e658:	4b67      	ldr	r3, [pc, #412]	; (800e7f8 <_dtoa_r+0x618>)
 800e65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e65e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e664:	2b00      	cmp	r3, #0
 800e666:	f280 80d5 	bge.w	800e814 <_dtoa_r+0x634>
 800e66a:	9b03      	ldr	r3, [sp, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f300 80d1 	bgt.w	800e814 <_dtoa_r+0x634>
 800e672:	f040 826f 	bne.w	800eb54 <_dtoa_r+0x974>
 800e676:	4b65      	ldr	r3, [pc, #404]	; (800e80c <_dtoa_r+0x62c>)
 800e678:	2200      	movs	r2, #0
 800e67a:	4640      	mov	r0, r8
 800e67c:	4649      	mov	r1, r9
 800e67e:	f7f1 ffdb 	bl	8000638 <__aeabi_dmul>
 800e682:	4652      	mov	r2, sl
 800e684:	465b      	mov	r3, fp
 800e686:	f7f2 fa5d 	bl	8000b44 <__aeabi_dcmpge>
 800e68a:	9e03      	ldr	r6, [sp, #12]
 800e68c:	4637      	mov	r7, r6
 800e68e:	2800      	cmp	r0, #0
 800e690:	f040 8245 	bne.w	800eb1e <_dtoa_r+0x93e>
 800e694:	9d01      	ldr	r5, [sp, #4]
 800e696:	2331      	movs	r3, #49	; 0x31
 800e698:	f805 3b01 	strb.w	r3, [r5], #1
 800e69c:	9b00      	ldr	r3, [sp, #0]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	e240      	b.n	800eb26 <_dtoa_r+0x946>
 800e6a4:	07f2      	lsls	r2, r6, #31
 800e6a6:	d505      	bpl.n	800e6b4 <_dtoa_r+0x4d4>
 800e6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6ac:	f7f1 ffc4 	bl	8000638 <__aeabi_dmul>
 800e6b0:	3501      	adds	r5, #1
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	1076      	asrs	r6, r6, #1
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	e777      	b.n	800e5aa <_dtoa_r+0x3ca>
 800e6ba:	2502      	movs	r5, #2
 800e6bc:	e779      	b.n	800e5b2 <_dtoa_r+0x3d2>
 800e6be:	9f00      	ldr	r7, [sp, #0]
 800e6c0:	9e03      	ldr	r6, [sp, #12]
 800e6c2:	e794      	b.n	800e5ee <_dtoa_r+0x40e>
 800e6c4:	9901      	ldr	r1, [sp, #4]
 800e6c6:	4b4c      	ldr	r3, [pc, #304]	; (800e7f8 <_dtoa_r+0x618>)
 800e6c8:	4431      	add	r1, r6
 800e6ca:	910d      	str	r1, [sp, #52]	; 0x34
 800e6cc:	9908      	ldr	r1, [sp, #32]
 800e6ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e6d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	d043      	beq.n	800e762 <_dtoa_r+0x582>
 800e6da:	494d      	ldr	r1, [pc, #308]	; (800e810 <_dtoa_r+0x630>)
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f7f2 f8d5 	bl	800088c <__aeabi_ddiv>
 800e6e2:	4652      	mov	r2, sl
 800e6e4:	465b      	mov	r3, fp
 800e6e6:	f7f1 fdef 	bl	80002c8 <__aeabi_dsub>
 800e6ea:	9d01      	ldr	r5, [sp, #4]
 800e6ec:	4682      	mov	sl, r0
 800e6ee:	468b      	mov	fp, r1
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	f7f2 fa50 	bl	8000b98 <__aeabi_d2iz>
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	f7f1 ff33 	bl	8000564 <__aeabi_i2d>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4640      	mov	r0, r8
 800e704:	4649      	mov	r1, r9
 800e706:	f7f1 fddf 	bl	80002c8 <__aeabi_dsub>
 800e70a:	3630      	adds	r6, #48	; 0x30
 800e70c:	f805 6b01 	strb.w	r6, [r5], #1
 800e710:	4652      	mov	r2, sl
 800e712:	465b      	mov	r3, fp
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	f7f2 fa00 	bl	8000b1c <__aeabi_dcmplt>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d163      	bne.n	800e7e8 <_dtoa_r+0x608>
 800e720:	4642      	mov	r2, r8
 800e722:	464b      	mov	r3, r9
 800e724:	4936      	ldr	r1, [pc, #216]	; (800e800 <_dtoa_r+0x620>)
 800e726:	2000      	movs	r0, #0
 800e728:	f7f1 fdce 	bl	80002c8 <__aeabi_dsub>
 800e72c:	4652      	mov	r2, sl
 800e72e:	465b      	mov	r3, fp
 800e730:	f7f2 f9f4 	bl	8000b1c <__aeabi_dcmplt>
 800e734:	2800      	cmp	r0, #0
 800e736:	f040 80b5 	bne.w	800e8a4 <_dtoa_r+0x6c4>
 800e73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e73c:	429d      	cmp	r5, r3
 800e73e:	d081      	beq.n	800e644 <_dtoa_r+0x464>
 800e740:	4b30      	ldr	r3, [pc, #192]	; (800e804 <_dtoa_r+0x624>)
 800e742:	2200      	movs	r2, #0
 800e744:	4650      	mov	r0, sl
 800e746:	4659      	mov	r1, fp
 800e748:	f7f1 ff76 	bl	8000638 <__aeabi_dmul>
 800e74c:	4b2d      	ldr	r3, [pc, #180]	; (800e804 <_dtoa_r+0x624>)
 800e74e:	4682      	mov	sl, r0
 800e750:	468b      	mov	fp, r1
 800e752:	4640      	mov	r0, r8
 800e754:	4649      	mov	r1, r9
 800e756:	2200      	movs	r2, #0
 800e758:	f7f1 ff6e 	bl	8000638 <__aeabi_dmul>
 800e75c:	4680      	mov	r8, r0
 800e75e:	4689      	mov	r9, r1
 800e760:	e7c6      	b.n	800e6f0 <_dtoa_r+0x510>
 800e762:	4650      	mov	r0, sl
 800e764:	4659      	mov	r1, fp
 800e766:	f7f1 ff67 	bl	8000638 <__aeabi_dmul>
 800e76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e76c:	9d01      	ldr	r5, [sp, #4]
 800e76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e770:	4682      	mov	sl, r0
 800e772:	468b      	mov	fp, r1
 800e774:	4649      	mov	r1, r9
 800e776:	4640      	mov	r0, r8
 800e778:	f7f2 fa0e 	bl	8000b98 <__aeabi_d2iz>
 800e77c:	4606      	mov	r6, r0
 800e77e:	f7f1 fef1 	bl	8000564 <__aeabi_i2d>
 800e782:	3630      	adds	r6, #48	; 0x30
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	f7f1 fd9c 	bl	80002c8 <__aeabi_dsub>
 800e790:	f805 6b01 	strb.w	r6, [r5], #1
 800e794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e796:	429d      	cmp	r5, r3
 800e798:	4680      	mov	r8, r0
 800e79a:	4689      	mov	r9, r1
 800e79c:	f04f 0200 	mov.w	r2, #0
 800e7a0:	d124      	bne.n	800e7ec <_dtoa_r+0x60c>
 800e7a2:	4b1b      	ldr	r3, [pc, #108]	; (800e810 <_dtoa_r+0x630>)
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	4659      	mov	r1, fp
 800e7a8:	f7f1 fd90 	bl	80002cc <__adddf3>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	4640      	mov	r0, r8
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	f7f2 f9d0 	bl	8000b58 <__aeabi_dcmpgt>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d173      	bne.n	800e8a4 <_dtoa_r+0x6c4>
 800e7bc:	4652      	mov	r2, sl
 800e7be:	465b      	mov	r3, fp
 800e7c0:	4913      	ldr	r1, [pc, #76]	; (800e810 <_dtoa_r+0x630>)
 800e7c2:	2000      	movs	r0, #0
 800e7c4:	f7f1 fd80 	bl	80002c8 <__aeabi_dsub>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f2 f9a4 	bl	8000b1c <__aeabi_dcmplt>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f43f af35 	beq.w	800e644 <_dtoa_r+0x464>
 800e7da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e7dc:	1e6b      	subs	r3, r5, #1
 800e7de:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7e4:	2b30      	cmp	r3, #48	; 0x30
 800e7e6:	d0f8      	beq.n	800e7da <_dtoa_r+0x5fa>
 800e7e8:	9700      	str	r7, [sp, #0]
 800e7ea:	e049      	b.n	800e880 <_dtoa_r+0x6a0>
 800e7ec:	4b05      	ldr	r3, [pc, #20]	; (800e804 <_dtoa_r+0x624>)
 800e7ee:	f7f1 ff23 	bl	8000638 <__aeabi_dmul>
 800e7f2:	4680      	mov	r8, r0
 800e7f4:	4689      	mov	r9, r1
 800e7f6:	e7bd      	b.n	800e774 <_dtoa_r+0x594>
 800e7f8:	080126f8 	.word	0x080126f8
 800e7fc:	080126d0 	.word	0x080126d0
 800e800:	3ff00000 	.word	0x3ff00000
 800e804:	40240000 	.word	0x40240000
 800e808:	401c0000 	.word	0x401c0000
 800e80c:	40140000 	.word	0x40140000
 800e810:	3fe00000 	.word	0x3fe00000
 800e814:	9d01      	ldr	r5, [sp, #4]
 800e816:	4656      	mov	r6, sl
 800e818:	465f      	mov	r7, fp
 800e81a:	4642      	mov	r2, r8
 800e81c:	464b      	mov	r3, r9
 800e81e:	4630      	mov	r0, r6
 800e820:	4639      	mov	r1, r7
 800e822:	f7f2 f833 	bl	800088c <__aeabi_ddiv>
 800e826:	f7f2 f9b7 	bl	8000b98 <__aeabi_d2iz>
 800e82a:	4682      	mov	sl, r0
 800e82c:	f7f1 fe9a 	bl	8000564 <__aeabi_i2d>
 800e830:	4642      	mov	r2, r8
 800e832:	464b      	mov	r3, r9
 800e834:	f7f1 ff00 	bl	8000638 <__aeabi_dmul>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4630      	mov	r0, r6
 800e83e:	4639      	mov	r1, r7
 800e840:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e844:	f7f1 fd40 	bl	80002c8 <__aeabi_dsub>
 800e848:	f805 6b01 	strb.w	r6, [r5], #1
 800e84c:	9e01      	ldr	r6, [sp, #4]
 800e84e:	9f03      	ldr	r7, [sp, #12]
 800e850:	1bae      	subs	r6, r5, r6
 800e852:	42b7      	cmp	r7, r6
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	d135      	bne.n	800e8c6 <_dtoa_r+0x6e6>
 800e85a:	f7f1 fd37 	bl	80002cc <__adddf3>
 800e85e:	4642      	mov	r2, r8
 800e860:	464b      	mov	r3, r9
 800e862:	4606      	mov	r6, r0
 800e864:	460f      	mov	r7, r1
 800e866:	f7f2 f977 	bl	8000b58 <__aeabi_dcmpgt>
 800e86a:	b9d0      	cbnz	r0, 800e8a2 <_dtoa_r+0x6c2>
 800e86c:	4642      	mov	r2, r8
 800e86e:	464b      	mov	r3, r9
 800e870:	4630      	mov	r0, r6
 800e872:	4639      	mov	r1, r7
 800e874:	f7f2 f948 	bl	8000b08 <__aeabi_dcmpeq>
 800e878:	b110      	cbz	r0, 800e880 <_dtoa_r+0x6a0>
 800e87a:	f01a 0f01 	tst.w	sl, #1
 800e87e:	d110      	bne.n	800e8a2 <_dtoa_r+0x6c2>
 800e880:	4620      	mov	r0, r4
 800e882:	ee18 1a10 	vmov	r1, s16
 800e886:	f000 ff7b 	bl	800f780 <_Bfree>
 800e88a:	2300      	movs	r3, #0
 800e88c:	9800      	ldr	r0, [sp, #0]
 800e88e:	702b      	strb	r3, [r5, #0]
 800e890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e892:	3001      	adds	r0, #1
 800e894:	6018      	str	r0, [r3, #0]
 800e896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f43f acf1 	beq.w	800e280 <_dtoa_r+0xa0>
 800e89e:	601d      	str	r5, [r3, #0]
 800e8a0:	e4ee      	b.n	800e280 <_dtoa_r+0xa0>
 800e8a2:	9f00      	ldr	r7, [sp, #0]
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	461d      	mov	r5, r3
 800e8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8ac:	2a39      	cmp	r2, #57	; 0x39
 800e8ae:	d106      	bne.n	800e8be <_dtoa_r+0x6de>
 800e8b0:	9a01      	ldr	r2, [sp, #4]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d1f7      	bne.n	800e8a6 <_dtoa_r+0x6c6>
 800e8b6:	9901      	ldr	r1, [sp, #4]
 800e8b8:	2230      	movs	r2, #48	; 0x30
 800e8ba:	3701      	adds	r7, #1
 800e8bc:	700a      	strb	r2, [r1, #0]
 800e8be:	781a      	ldrb	r2, [r3, #0]
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	e790      	b.n	800e7e8 <_dtoa_r+0x608>
 800e8c6:	4ba6      	ldr	r3, [pc, #664]	; (800eb60 <_dtoa_r+0x980>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f7f1 feb5 	bl	8000638 <__aeabi_dmul>
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	f7f2 f917 	bl	8000b08 <__aeabi_dcmpeq>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d09d      	beq.n	800e81a <_dtoa_r+0x63a>
 800e8de:	e7cf      	b.n	800e880 <_dtoa_r+0x6a0>
 800e8e0:	9a08      	ldr	r2, [sp, #32]
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	f000 80d7 	beq.w	800ea96 <_dtoa_r+0x8b6>
 800e8e8:	9a06      	ldr	r2, [sp, #24]
 800e8ea:	2a01      	cmp	r2, #1
 800e8ec:	f300 80ba 	bgt.w	800ea64 <_dtoa_r+0x884>
 800e8f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8f2:	2a00      	cmp	r2, #0
 800e8f4:	f000 80b2 	beq.w	800ea5c <_dtoa_r+0x87c>
 800e8f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8fc:	9e07      	ldr	r6, [sp, #28]
 800e8fe:	9d04      	ldr	r5, [sp, #16]
 800e900:	9a04      	ldr	r2, [sp, #16]
 800e902:	441a      	add	r2, r3
 800e904:	9204      	str	r2, [sp, #16]
 800e906:	9a05      	ldr	r2, [sp, #20]
 800e908:	2101      	movs	r1, #1
 800e90a:	441a      	add	r2, r3
 800e90c:	4620      	mov	r0, r4
 800e90e:	9205      	str	r2, [sp, #20]
 800e910:	f001 f838 	bl	800f984 <__i2b>
 800e914:	4607      	mov	r7, r0
 800e916:	2d00      	cmp	r5, #0
 800e918:	dd0c      	ble.n	800e934 <_dtoa_r+0x754>
 800e91a:	9b05      	ldr	r3, [sp, #20]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	dd09      	ble.n	800e934 <_dtoa_r+0x754>
 800e920:	42ab      	cmp	r3, r5
 800e922:	9a04      	ldr	r2, [sp, #16]
 800e924:	bfa8      	it	ge
 800e926:	462b      	movge	r3, r5
 800e928:	1ad2      	subs	r2, r2, r3
 800e92a:	9204      	str	r2, [sp, #16]
 800e92c:	9a05      	ldr	r2, [sp, #20]
 800e92e:	1aed      	subs	r5, r5, r3
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	b31b      	cbz	r3, 800e980 <_dtoa_r+0x7a0>
 800e938:	9b08      	ldr	r3, [sp, #32]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 80af 	beq.w	800ea9e <_dtoa_r+0x8be>
 800e940:	2e00      	cmp	r6, #0
 800e942:	dd13      	ble.n	800e96c <_dtoa_r+0x78c>
 800e944:	4639      	mov	r1, r7
 800e946:	4632      	mov	r2, r6
 800e948:	4620      	mov	r0, r4
 800e94a:	f001 f8db 	bl	800fb04 <__pow5mult>
 800e94e:	ee18 2a10 	vmov	r2, s16
 800e952:	4601      	mov	r1, r0
 800e954:	4607      	mov	r7, r0
 800e956:	4620      	mov	r0, r4
 800e958:	f001 f82a 	bl	800f9b0 <__multiply>
 800e95c:	ee18 1a10 	vmov	r1, s16
 800e960:	4680      	mov	r8, r0
 800e962:	4620      	mov	r0, r4
 800e964:	f000 ff0c 	bl	800f780 <_Bfree>
 800e968:	ee08 8a10 	vmov	s16, r8
 800e96c:	9b07      	ldr	r3, [sp, #28]
 800e96e:	1b9a      	subs	r2, r3, r6
 800e970:	d006      	beq.n	800e980 <_dtoa_r+0x7a0>
 800e972:	ee18 1a10 	vmov	r1, s16
 800e976:	4620      	mov	r0, r4
 800e978:	f001 f8c4 	bl	800fb04 <__pow5mult>
 800e97c:	ee08 0a10 	vmov	s16, r0
 800e980:	2101      	movs	r1, #1
 800e982:	4620      	mov	r0, r4
 800e984:	f000 fffe 	bl	800f984 <__i2b>
 800e988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	4606      	mov	r6, r0
 800e98e:	f340 8088 	ble.w	800eaa2 <_dtoa_r+0x8c2>
 800e992:	461a      	mov	r2, r3
 800e994:	4601      	mov	r1, r0
 800e996:	4620      	mov	r0, r4
 800e998:	f001 f8b4 	bl	800fb04 <__pow5mult>
 800e99c:	9b06      	ldr	r3, [sp, #24]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	f340 8081 	ble.w	800eaa8 <_dtoa_r+0x8c8>
 800e9a6:	f04f 0800 	mov.w	r8, #0
 800e9aa:	6933      	ldr	r3, [r6, #16]
 800e9ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e9b0:	6918      	ldr	r0, [r3, #16]
 800e9b2:	f000 ff97 	bl	800f8e4 <__hi0bits>
 800e9b6:	f1c0 0020 	rsb	r0, r0, #32
 800e9ba:	9b05      	ldr	r3, [sp, #20]
 800e9bc:	4418      	add	r0, r3
 800e9be:	f010 001f 	ands.w	r0, r0, #31
 800e9c2:	f000 8092 	beq.w	800eaea <_dtoa_r+0x90a>
 800e9c6:	f1c0 0320 	rsb	r3, r0, #32
 800e9ca:	2b04      	cmp	r3, #4
 800e9cc:	f340 808a 	ble.w	800eae4 <_dtoa_r+0x904>
 800e9d0:	f1c0 001c 	rsb	r0, r0, #28
 800e9d4:	9b04      	ldr	r3, [sp, #16]
 800e9d6:	4403      	add	r3, r0
 800e9d8:	9304      	str	r3, [sp, #16]
 800e9da:	9b05      	ldr	r3, [sp, #20]
 800e9dc:	4403      	add	r3, r0
 800e9de:	4405      	add	r5, r0
 800e9e0:	9305      	str	r3, [sp, #20]
 800e9e2:	9b04      	ldr	r3, [sp, #16]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dd07      	ble.n	800e9f8 <_dtoa_r+0x818>
 800e9e8:	ee18 1a10 	vmov	r1, s16
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f001 f8e2 	bl	800fbb8 <__lshift>
 800e9f4:	ee08 0a10 	vmov	s16, r0
 800e9f8:	9b05      	ldr	r3, [sp, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	dd05      	ble.n	800ea0a <_dtoa_r+0x82a>
 800e9fe:	4631      	mov	r1, r6
 800ea00:	461a      	mov	r2, r3
 800ea02:	4620      	mov	r0, r4
 800ea04:	f001 f8d8 	bl	800fbb8 <__lshift>
 800ea08:	4606      	mov	r6, r0
 800ea0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d06e      	beq.n	800eaee <_dtoa_r+0x90e>
 800ea10:	ee18 0a10 	vmov	r0, s16
 800ea14:	4631      	mov	r1, r6
 800ea16:	f001 f93f 	bl	800fc98 <__mcmp>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	da67      	bge.n	800eaee <_dtoa_r+0x90e>
 800ea1e:	9b00      	ldr	r3, [sp, #0]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	ee18 1a10 	vmov	r1, s16
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	220a      	movs	r2, #10
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f000 fec9 	bl	800f7c4 <__multadd>
 800ea32:	9b08      	ldr	r3, [sp, #32]
 800ea34:	ee08 0a10 	vmov	s16, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 81b1 	beq.w	800eda0 <_dtoa_r+0xbc0>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4639      	mov	r1, r7
 800ea42:	220a      	movs	r2, #10
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 febd 	bl	800f7c4 <__multadd>
 800ea4a:	9b02      	ldr	r3, [sp, #8]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	4607      	mov	r7, r0
 800ea50:	f300 808e 	bgt.w	800eb70 <_dtoa_r+0x990>
 800ea54:	9b06      	ldr	r3, [sp, #24]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	dc51      	bgt.n	800eafe <_dtoa_r+0x91e>
 800ea5a:	e089      	b.n	800eb70 <_dtoa_r+0x990>
 800ea5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea62:	e74b      	b.n	800e8fc <_dtoa_r+0x71c>
 800ea64:	9b03      	ldr	r3, [sp, #12]
 800ea66:	1e5e      	subs	r6, r3, #1
 800ea68:	9b07      	ldr	r3, [sp, #28]
 800ea6a:	42b3      	cmp	r3, r6
 800ea6c:	bfbf      	itttt	lt
 800ea6e:	9b07      	ldrlt	r3, [sp, #28]
 800ea70:	9607      	strlt	r6, [sp, #28]
 800ea72:	1af2      	sublt	r2, r6, r3
 800ea74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea76:	bfb6      	itet	lt
 800ea78:	189b      	addlt	r3, r3, r2
 800ea7a:	1b9e      	subge	r6, r3, r6
 800ea7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea7e:	9b03      	ldr	r3, [sp, #12]
 800ea80:	bfb8      	it	lt
 800ea82:	2600      	movlt	r6, #0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bfb7      	itett	lt
 800ea88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea90:	1a9d      	sublt	r5, r3, r2
 800ea92:	2300      	movlt	r3, #0
 800ea94:	e734      	b.n	800e900 <_dtoa_r+0x720>
 800ea96:	9e07      	ldr	r6, [sp, #28]
 800ea98:	9d04      	ldr	r5, [sp, #16]
 800ea9a:	9f08      	ldr	r7, [sp, #32]
 800ea9c:	e73b      	b.n	800e916 <_dtoa_r+0x736>
 800ea9e:	9a07      	ldr	r2, [sp, #28]
 800eaa0:	e767      	b.n	800e972 <_dtoa_r+0x792>
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	dc18      	bgt.n	800eada <_dtoa_r+0x8fa>
 800eaa8:	f1ba 0f00 	cmp.w	sl, #0
 800eaac:	d115      	bne.n	800eada <_dtoa_r+0x8fa>
 800eaae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eab2:	b993      	cbnz	r3, 800eada <_dtoa_r+0x8fa>
 800eab4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eab8:	0d1b      	lsrs	r3, r3, #20
 800eaba:	051b      	lsls	r3, r3, #20
 800eabc:	b183      	cbz	r3, 800eae0 <_dtoa_r+0x900>
 800eabe:	9b04      	ldr	r3, [sp, #16]
 800eac0:	3301      	adds	r3, #1
 800eac2:	9304      	str	r3, [sp, #16]
 800eac4:	9b05      	ldr	r3, [sp, #20]
 800eac6:	3301      	adds	r3, #1
 800eac8:	9305      	str	r3, [sp, #20]
 800eaca:	f04f 0801 	mov.w	r8, #1
 800eace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f af6a 	bne.w	800e9aa <_dtoa_r+0x7ca>
 800ead6:	2001      	movs	r0, #1
 800ead8:	e76f      	b.n	800e9ba <_dtoa_r+0x7da>
 800eada:	f04f 0800 	mov.w	r8, #0
 800eade:	e7f6      	b.n	800eace <_dtoa_r+0x8ee>
 800eae0:	4698      	mov	r8, r3
 800eae2:	e7f4      	b.n	800eace <_dtoa_r+0x8ee>
 800eae4:	f43f af7d 	beq.w	800e9e2 <_dtoa_r+0x802>
 800eae8:	4618      	mov	r0, r3
 800eaea:	301c      	adds	r0, #28
 800eaec:	e772      	b.n	800e9d4 <_dtoa_r+0x7f4>
 800eaee:	9b03      	ldr	r3, [sp, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dc37      	bgt.n	800eb64 <_dtoa_r+0x984>
 800eaf4:	9b06      	ldr	r3, [sp, #24]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	dd34      	ble.n	800eb64 <_dtoa_r+0x984>
 800eafa:	9b03      	ldr	r3, [sp, #12]
 800eafc:	9302      	str	r3, [sp, #8]
 800eafe:	9b02      	ldr	r3, [sp, #8]
 800eb00:	b96b      	cbnz	r3, 800eb1e <_dtoa_r+0x93e>
 800eb02:	4631      	mov	r1, r6
 800eb04:	2205      	movs	r2, #5
 800eb06:	4620      	mov	r0, r4
 800eb08:	f000 fe5c 	bl	800f7c4 <__multadd>
 800eb0c:	4601      	mov	r1, r0
 800eb0e:	4606      	mov	r6, r0
 800eb10:	ee18 0a10 	vmov	r0, s16
 800eb14:	f001 f8c0 	bl	800fc98 <__mcmp>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	f73f adbb 	bgt.w	800e694 <_dtoa_r+0x4b4>
 800eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb20:	9d01      	ldr	r5, [sp, #4]
 800eb22:	43db      	mvns	r3, r3
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	f04f 0800 	mov.w	r8, #0
 800eb2a:	4631      	mov	r1, r6
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f000 fe27 	bl	800f780 <_Bfree>
 800eb32:	2f00      	cmp	r7, #0
 800eb34:	f43f aea4 	beq.w	800e880 <_dtoa_r+0x6a0>
 800eb38:	f1b8 0f00 	cmp.w	r8, #0
 800eb3c:	d005      	beq.n	800eb4a <_dtoa_r+0x96a>
 800eb3e:	45b8      	cmp	r8, r7
 800eb40:	d003      	beq.n	800eb4a <_dtoa_r+0x96a>
 800eb42:	4641      	mov	r1, r8
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fe1b 	bl	800f780 <_Bfree>
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f000 fe17 	bl	800f780 <_Bfree>
 800eb52:	e695      	b.n	800e880 <_dtoa_r+0x6a0>
 800eb54:	2600      	movs	r6, #0
 800eb56:	4637      	mov	r7, r6
 800eb58:	e7e1      	b.n	800eb1e <_dtoa_r+0x93e>
 800eb5a:	9700      	str	r7, [sp, #0]
 800eb5c:	4637      	mov	r7, r6
 800eb5e:	e599      	b.n	800e694 <_dtoa_r+0x4b4>
 800eb60:	40240000 	.word	0x40240000
 800eb64:	9b08      	ldr	r3, [sp, #32]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 80ca 	beq.w	800ed00 <_dtoa_r+0xb20>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	9302      	str	r3, [sp, #8]
 800eb70:	2d00      	cmp	r5, #0
 800eb72:	dd05      	ble.n	800eb80 <_dtoa_r+0x9a0>
 800eb74:	4639      	mov	r1, r7
 800eb76:	462a      	mov	r2, r5
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f001 f81d 	bl	800fbb8 <__lshift>
 800eb7e:	4607      	mov	r7, r0
 800eb80:	f1b8 0f00 	cmp.w	r8, #0
 800eb84:	d05b      	beq.n	800ec3e <_dtoa_r+0xa5e>
 800eb86:	6879      	ldr	r1, [r7, #4]
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f000 fdb9 	bl	800f700 <_Balloc>
 800eb8e:	4605      	mov	r5, r0
 800eb90:	b928      	cbnz	r0, 800eb9e <_dtoa_r+0x9be>
 800eb92:	4b87      	ldr	r3, [pc, #540]	; (800edb0 <_dtoa_r+0xbd0>)
 800eb94:	4602      	mov	r2, r0
 800eb96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb9a:	f7ff bb3b 	b.w	800e214 <_dtoa_r+0x34>
 800eb9e:	693a      	ldr	r2, [r7, #16]
 800eba0:	3202      	adds	r2, #2
 800eba2:	0092      	lsls	r2, r2, #2
 800eba4:	f107 010c 	add.w	r1, r7, #12
 800eba8:	300c      	adds	r0, #12
 800ebaa:	f7fd fbe1 	bl	800c370 <memcpy>
 800ebae:	2201      	movs	r2, #1
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f001 f800 	bl	800fbb8 <__lshift>
 800ebb8:	9b01      	ldr	r3, [sp, #4]
 800ebba:	f103 0901 	add.w	r9, r3, #1
 800ebbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	9305      	str	r3, [sp, #20]
 800ebc6:	f00a 0301 	and.w	r3, sl, #1
 800ebca:	46b8      	mov	r8, r7
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	4607      	mov	r7, r0
 800ebd0:	4631      	mov	r1, r6
 800ebd2:	ee18 0a10 	vmov	r0, s16
 800ebd6:	f7ff fa75 	bl	800e0c4 <quorem>
 800ebda:	4641      	mov	r1, r8
 800ebdc:	9002      	str	r0, [sp, #8]
 800ebde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ebe2:	ee18 0a10 	vmov	r0, s16
 800ebe6:	f001 f857 	bl	800fc98 <__mcmp>
 800ebea:	463a      	mov	r2, r7
 800ebec:	9003      	str	r0, [sp, #12]
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f001 f86d 	bl	800fcd0 <__mdiff>
 800ebf6:	68c2      	ldr	r2, [r0, #12]
 800ebf8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	bb02      	cbnz	r2, 800ec42 <_dtoa_r+0xa62>
 800ec00:	4601      	mov	r1, r0
 800ec02:	ee18 0a10 	vmov	r0, s16
 800ec06:	f001 f847 	bl	800fc98 <__mcmp>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	4620      	mov	r0, r4
 800ec10:	9207      	str	r2, [sp, #28]
 800ec12:	f000 fdb5 	bl	800f780 <_Bfree>
 800ec16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ec1a:	ea43 0102 	orr.w	r1, r3, r2
 800ec1e:	9b04      	ldr	r3, [sp, #16]
 800ec20:	430b      	orrs	r3, r1
 800ec22:	464d      	mov	r5, r9
 800ec24:	d10f      	bne.n	800ec46 <_dtoa_r+0xa66>
 800ec26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec2a:	d02a      	beq.n	800ec82 <_dtoa_r+0xaa2>
 800ec2c:	9b03      	ldr	r3, [sp, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	dd02      	ble.n	800ec38 <_dtoa_r+0xa58>
 800ec32:	9b02      	ldr	r3, [sp, #8]
 800ec34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec38:	f88b a000 	strb.w	sl, [fp]
 800ec3c:	e775      	b.n	800eb2a <_dtoa_r+0x94a>
 800ec3e:	4638      	mov	r0, r7
 800ec40:	e7ba      	b.n	800ebb8 <_dtoa_r+0x9d8>
 800ec42:	2201      	movs	r2, #1
 800ec44:	e7e2      	b.n	800ec0c <_dtoa_r+0xa2c>
 800ec46:	9b03      	ldr	r3, [sp, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	db04      	blt.n	800ec56 <_dtoa_r+0xa76>
 800ec4c:	9906      	ldr	r1, [sp, #24]
 800ec4e:	430b      	orrs	r3, r1
 800ec50:	9904      	ldr	r1, [sp, #16]
 800ec52:	430b      	orrs	r3, r1
 800ec54:	d122      	bne.n	800ec9c <_dtoa_r+0xabc>
 800ec56:	2a00      	cmp	r2, #0
 800ec58:	ddee      	ble.n	800ec38 <_dtoa_r+0xa58>
 800ec5a:	ee18 1a10 	vmov	r1, s16
 800ec5e:	2201      	movs	r2, #1
 800ec60:	4620      	mov	r0, r4
 800ec62:	f000 ffa9 	bl	800fbb8 <__lshift>
 800ec66:	4631      	mov	r1, r6
 800ec68:	ee08 0a10 	vmov	s16, r0
 800ec6c:	f001 f814 	bl	800fc98 <__mcmp>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	dc03      	bgt.n	800ec7c <_dtoa_r+0xa9c>
 800ec74:	d1e0      	bne.n	800ec38 <_dtoa_r+0xa58>
 800ec76:	f01a 0f01 	tst.w	sl, #1
 800ec7a:	d0dd      	beq.n	800ec38 <_dtoa_r+0xa58>
 800ec7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec80:	d1d7      	bne.n	800ec32 <_dtoa_r+0xa52>
 800ec82:	2339      	movs	r3, #57	; 0x39
 800ec84:	f88b 3000 	strb.w	r3, [fp]
 800ec88:	462b      	mov	r3, r5
 800ec8a:	461d      	mov	r5, r3
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec92:	2a39      	cmp	r2, #57	; 0x39
 800ec94:	d071      	beq.n	800ed7a <_dtoa_r+0xb9a>
 800ec96:	3201      	adds	r2, #1
 800ec98:	701a      	strb	r2, [r3, #0]
 800ec9a:	e746      	b.n	800eb2a <_dtoa_r+0x94a>
 800ec9c:	2a00      	cmp	r2, #0
 800ec9e:	dd07      	ble.n	800ecb0 <_dtoa_r+0xad0>
 800eca0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eca4:	d0ed      	beq.n	800ec82 <_dtoa_r+0xaa2>
 800eca6:	f10a 0301 	add.w	r3, sl, #1
 800ecaa:	f88b 3000 	strb.w	r3, [fp]
 800ecae:	e73c      	b.n	800eb2a <_dtoa_r+0x94a>
 800ecb0:	9b05      	ldr	r3, [sp, #20]
 800ecb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ecb6:	4599      	cmp	r9, r3
 800ecb8:	d047      	beq.n	800ed4a <_dtoa_r+0xb6a>
 800ecba:	ee18 1a10 	vmov	r1, s16
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	220a      	movs	r2, #10
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f000 fd7e 	bl	800f7c4 <__multadd>
 800ecc8:	45b8      	cmp	r8, r7
 800ecca:	ee08 0a10 	vmov	s16, r0
 800ecce:	f04f 0300 	mov.w	r3, #0
 800ecd2:	f04f 020a 	mov.w	r2, #10
 800ecd6:	4641      	mov	r1, r8
 800ecd8:	4620      	mov	r0, r4
 800ecda:	d106      	bne.n	800ecea <_dtoa_r+0xb0a>
 800ecdc:	f000 fd72 	bl	800f7c4 <__multadd>
 800ece0:	4680      	mov	r8, r0
 800ece2:	4607      	mov	r7, r0
 800ece4:	f109 0901 	add.w	r9, r9, #1
 800ece8:	e772      	b.n	800ebd0 <_dtoa_r+0x9f0>
 800ecea:	f000 fd6b 	bl	800f7c4 <__multadd>
 800ecee:	4639      	mov	r1, r7
 800ecf0:	4680      	mov	r8, r0
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	220a      	movs	r2, #10
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fd64 	bl	800f7c4 <__multadd>
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	e7f1      	b.n	800ece4 <_dtoa_r+0xb04>
 800ed00:	9b03      	ldr	r3, [sp, #12]
 800ed02:	9302      	str	r3, [sp, #8]
 800ed04:	9d01      	ldr	r5, [sp, #4]
 800ed06:	ee18 0a10 	vmov	r0, s16
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	f7ff f9da 	bl	800e0c4 <quorem>
 800ed10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed14:	9b01      	ldr	r3, [sp, #4]
 800ed16:	f805 ab01 	strb.w	sl, [r5], #1
 800ed1a:	1aea      	subs	r2, r5, r3
 800ed1c:	9b02      	ldr	r3, [sp, #8]
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	dd09      	ble.n	800ed36 <_dtoa_r+0xb56>
 800ed22:	ee18 1a10 	vmov	r1, s16
 800ed26:	2300      	movs	r3, #0
 800ed28:	220a      	movs	r2, #10
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f000 fd4a 	bl	800f7c4 <__multadd>
 800ed30:	ee08 0a10 	vmov	s16, r0
 800ed34:	e7e7      	b.n	800ed06 <_dtoa_r+0xb26>
 800ed36:	9b02      	ldr	r3, [sp, #8]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bfc8      	it	gt
 800ed3c:	461d      	movgt	r5, r3
 800ed3e:	9b01      	ldr	r3, [sp, #4]
 800ed40:	bfd8      	it	le
 800ed42:	2501      	movle	r5, #1
 800ed44:	441d      	add	r5, r3
 800ed46:	f04f 0800 	mov.w	r8, #0
 800ed4a:	ee18 1a10 	vmov	r1, s16
 800ed4e:	2201      	movs	r2, #1
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 ff31 	bl	800fbb8 <__lshift>
 800ed56:	4631      	mov	r1, r6
 800ed58:	ee08 0a10 	vmov	s16, r0
 800ed5c:	f000 ff9c 	bl	800fc98 <__mcmp>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	dc91      	bgt.n	800ec88 <_dtoa_r+0xaa8>
 800ed64:	d102      	bne.n	800ed6c <_dtoa_r+0xb8c>
 800ed66:	f01a 0f01 	tst.w	sl, #1
 800ed6a:	d18d      	bne.n	800ec88 <_dtoa_r+0xaa8>
 800ed6c:	462b      	mov	r3, r5
 800ed6e:	461d      	mov	r5, r3
 800ed70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed74:	2a30      	cmp	r2, #48	; 0x30
 800ed76:	d0fa      	beq.n	800ed6e <_dtoa_r+0xb8e>
 800ed78:	e6d7      	b.n	800eb2a <_dtoa_r+0x94a>
 800ed7a:	9a01      	ldr	r2, [sp, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d184      	bne.n	800ec8a <_dtoa_r+0xaaa>
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	3301      	adds	r3, #1
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	2331      	movs	r3, #49	; 0x31
 800ed88:	7013      	strb	r3, [r2, #0]
 800ed8a:	e6ce      	b.n	800eb2a <_dtoa_r+0x94a>
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <_dtoa_r+0xbd4>)
 800ed8e:	f7ff ba95 	b.w	800e2bc <_dtoa_r+0xdc>
 800ed92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f47f aa6e 	bne.w	800e276 <_dtoa_r+0x96>
 800ed9a:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <_dtoa_r+0xbd8>)
 800ed9c:	f7ff ba8e 	b.w	800e2bc <_dtoa_r+0xdc>
 800eda0:	9b02      	ldr	r3, [sp, #8]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	dcae      	bgt.n	800ed04 <_dtoa_r+0xb24>
 800eda6:	9b06      	ldr	r3, [sp, #24]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	f73f aea8 	bgt.w	800eafe <_dtoa_r+0x91e>
 800edae:	e7a9      	b.n	800ed04 <_dtoa_r+0xb24>
 800edb0:	08012583 	.word	0x08012583
 800edb4:	08012451 	.word	0x08012451
 800edb8:	08012504 	.word	0x08012504

0800edbc <__errno>:
 800edbc:	4b01      	ldr	r3, [pc, #4]	; (800edc4 <__errno+0x8>)
 800edbe:	6818      	ldr	r0, [r3, #0]
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	2000018c 	.word	0x2000018c

0800edc8 <std>:
 800edc8:	2300      	movs	r3, #0
 800edca:	b510      	push	{r4, lr}
 800edcc:	4604      	mov	r4, r0
 800edce:	e9c0 3300 	strd	r3, r3, [r0]
 800edd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edd6:	6083      	str	r3, [r0, #8]
 800edd8:	8181      	strh	r1, [r0, #12]
 800edda:	6643      	str	r3, [r0, #100]	; 0x64
 800eddc:	81c2      	strh	r2, [r0, #14]
 800edde:	6183      	str	r3, [r0, #24]
 800ede0:	4619      	mov	r1, r3
 800ede2:	2208      	movs	r2, #8
 800ede4:	305c      	adds	r0, #92	; 0x5c
 800ede6:	f7fd faeb 	bl	800c3c0 <memset>
 800edea:	4b05      	ldr	r3, [pc, #20]	; (800ee00 <std+0x38>)
 800edec:	6263      	str	r3, [r4, #36]	; 0x24
 800edee:	4b05      	ldr	r3, [pc, #20]	; (800ee04 <std+0x3c>)
 800edf0:	62a3      	str	r3, [r4, #40]	; 0x28
 800edf2:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <std+0x40>)
 800edf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edf6:	4b05      	ldr	r3, [pc, #20]	; (800ee0c <std+0x44>)
 800edf8:	6224      	str	r4, [r4, #32]
 800edfa:	6323      	str	r3, [r4, #48]	; 0x30
 800edfc:	bd10      	pop	{r4, pc}
 800edfe:	bf00      	nop
 800ee00:	080103a9 	.word	0x080103a9
 800ee04:	080103cb 	.word	0x080103cb
 800ee08:	08010403 	.word	0x08010403
 800ee0c:	08010427 	.word	0x08010427

0800ee10 <_cleanup_r>:
 800ee10:	4901      	ldr	r1, [pc, #4]	; (800ee18 <_cleanup_r+0x8>)
 800ee12:	f000 b8c1 	b.w	800ef98 <_fwalk_reent>
 800ee16:	bf00      	nop
 800ee18:	0801071d 	.word	0x0801071d

0800ee1c <__sfmoreglue>:
 800ee1c:	b570      	push	{r4, r5, r6, lr}
 800ee1e:	2268      	movs	r2, #104	; 0x68
 800ee20:	1e4d      	subs	r5, r1, #1
 800ee22:	4355      	muls	r5, r2
 800ee24:	460e      	mov	r6, r1
 800ee26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee2a:	f7fd fb91 	bl	800c550 <_malloc_r>
 800ee2e:	4604      	mov	r4, r0
 800ee30:	b140      	cbz	r0, 800ee44 <__sfmoreglue+0x28>
 800ee32:	2100      	movs	r1, #0
 800ee34:	e9c0 1600 	strd	r1, r6, [r0]
 800ee38:	300c      	adds	r0, #12
 800ee3a:	60a0      	str	r0, [r4, #8]
 800ee3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee40:	f7fd fabe 	bl	800c3c0 <memset>
 800ee44:	4620      	mov	r0, r4
 800ee46:	bd70      	pop	{r4, r5, r6, pc}

0800ee48 <__sfp_lock_acquire>:
 800ee48:	4801      	ldr	r0, [pc, #4]	; (800ee50 <__sfp_lock_acquire+0x8>)
 800ee4a:	f000 bc38 	b.w	800f6be <__retarget_lock_acquire_recursive>
 800ee4e:	bf00      	nop
 800ee50:	2000ba8d 	.word	0x2000ba8d

0800ee54 <__sfp_lock_release>:
 800ee54:	4801      	ldr	r0, [pc, #4]	; (800ee5c <__sfp_lock_release+0x8>)
 800ee56:	f000 bc33 	b.w	800f6c0 <__retarget_lock_release_recursive>
 800ee5a:	bf00      	nop
 800ee5c:	2000ba8d 	.word	0x2000ba8d

0800ee60 <__sinit_lock_acquire>:
 800ee60:	4801      	ldr	r0, [pc, #4]	; (800ee68 <__sinit_lock_acquire+0x8>)
 800ee62:	f000 bc2c 	b.w	800f6be <__retarget_lock_acquire_recursive>
 800ee66:	bf00      	nop
 800ee68:	2000ba8e 	.word	0x2000ba8e

0800ee6c <__sinit_lock_release>:
 800ee6c:	4801      	ldr	r0, [pc, #4]	; (800ee74 <__sinit_lock_release+0x8>)
 800ee6e:	f000 bc27 	b.w	800f6c0 <__retarget_lock_release_recursive>
 800ee72:	bf00      	nop
 800ee74:	2000ba8e 	.word	0x2000ba8e

0800ee78 <__sinit>:
 800ee78:	b510      	push	{r4, lr}
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	f7ff fff0 	bl	800ee60 <__sinit_lock_acquire>
 800ee80:	69a3      	ldr	r3, [r4, #24]
 800ee82:	b11b      	cbz	r3, 800ee8c <__sinit+0x14>
 800ee84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee88:	f7ff bff0 	b.w	800ee6c <__sinit_lock_release>
 800ee8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee90:	6523      	str	r3, [r4, #80]	; 0x50
 800ee92:	4b13      	ldr	r3, [pc, #76]	; (800eee0 <__sinit+0x68>)
 800ee94:	4a13      	ldr	r2, [pc, #76]	; (800eee4 <__sinit+0x6c>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	bf04      	itt	eq
 800ee9e:	2301      	moveq	r3, #1
 800eea0:	61a3      	streq	r3, [r4, #24]
 800eea2:	4620      	mov	r0, r4
 800eea4:	f000 f820 	bl	800eee8 <__sfp>
 800eea8:	6060      	str	r0, [r4, #4]
 800eeaa:	4620      	mov	r0, r4
 800eeac:	f000 f81c 	bl	800eee8 <__sfp>
 800eeb0:	60a0      	str	r0, [r4, #8]
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 f818 	bl	800eee8 <__sfp>
 800eeb8:	2200      	movs	r2, #0
 800eeba:	60e0      	str	r0, [r4, #12]
 800eebc:	2104      	movs	r1, #4
 800eebe:	6860      	ldr	r0, [r4, #4]
 800eec0:	f7ff ff82 	bl	800edc8 <std>
 800eec4:	68a0      	ldr	r0, [r4, #8]
 800eec6:	2201      	movs	r2, #1
 800eec8:	2109      	movs	r1, #9
 800eeca:	f7ff ff7d 	bl	800edc8 <std>
 800eece:	68e0      	ldr	r0, [r4, #12]
 800eed0:	2202      	movs	r2, #2
 800eed2:	2112      	movs	r1, #18
 800eed4:	f7ff ff78 	bl	800edc8 <std>
 800eed8:	2301      	movs	r3, #1
 800eeda:	61a3      	str	r3, [r4, #24]
 800eedc:	e7d2      	b.n	800ee84 <__sinit+0xc>
 800eede:	bf00      	nop
 800eee0:	0801242c 	.word	0x0801242c
 800eee4:	0800ee11 	.word	0x0800ee11

0800eee8 <__sfp>:
 800eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeea:	4607      	mov	r7, r0
 800eeec:	f7ff ffac 	bl	800ee48 <__sfp_lock_acquire>
 800eef0:	4b1e      	ldr	r3, [pc, #120]	; (800ef6c <__sfp+0x84>)
 800eef2:	681e      	ldr	r6, [r3, #0]
 800eef4:	69b3      	ldr	r3, [r6, #24]
 800eef6:	b913      	cbnz	r3, 800eefe <__sfp+0x16>
 800eef8:	4630      	mov	r0, r6
 800eefa:	f7ff ffbd 	bl	800ee78 <__sinit>
 800eefe:	3648      	adds	r6, #72	; 0x48
 800ef00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef04:	3b01      	subs	r3, #1
 800ef06:	d503      	bpl.n	800ef10 <__sfp+0x28>
 800ef08:	6833      	ldr	r3, [r6, #0]
 800ef0a:	b30b      	cbz	r3, 800ef50 <__sfp+0x68>
 800ef0c:	6836      	ldr	r6, [r6, #0]
 800ef0e:	e7f7      	b.n	800ef00 <__sfp+0x18>
 800ef10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef14:	b9d5      	cbnz	r5, 800ef4c <__sfp+0x64>
 800ef16:	4b16      	ldr	r3, [pc, #88]	; (800ef70 <__sfp+0x88>)
 800ef18:	60e3      	str	r3, [r4, #12]
 800ef1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef1e:	6665      	str	r5, [r4, #100]	; 0x64
 800ef20:	f000 fbcc 	bl	800f6bc <__retarget_lock_init_recursive>
 800ef24:	f7ff ff96 	bl	800ee54 <__sfp_lock_release>
 800ef28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef30:	6025      	str	r5, [r4, #0]
 800ef32:	61a5      	str	r5, [r4, #24]
 800ef34:	2208      	movs	r2, #8
 800ef36:	4629      	mov	r1, r5
 800ef38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef3c:	f7fd fa40 	bl	800c3c0 <memset>
 800ef40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef48:	4620      	mov	r0, r4
 800ef4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef4c:	3468      	adds	r4, #104	; 0x68
 800ef4e:	e7d9      	b.n	800ef04 <__sfp+0x1c>
 800ef50:	2104      	movs	r1, #4
 800ef52:	4638      	mov	r0, r7
 800ef54:	f7ff ff62 	bl	800ee1c <__sfmoreglue>
 800ef58:	4604      	mov	r4, r0
 800ef5a:	6030      	str	r0, [r6, #0]
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d1d5      	bne.n	800ef0c <__sfp+0x24>
 800ef60:	f7ff ff78 	bl	800ee54 <__sfp_lock_release>
 800ef64:	230c      	movs	r3, #12
 800ef66:	603b      	str	r3, [r7, #0]
 800ef68:	e7ee      	b.n	800ef48 <__sfp+0x60>
 800ef6a:	bf00      	nop
 800ef6c:	0801242c 	.word	0x0801242c
 800ef70:	ffff0001 	.word	0xffff0001

0800ef74 <fiprintf>:
 800ef74:	b40e      	push	{r1, r2, r3}
 800ef76:	b503      	push	{r0, r1, lr}
 800ef78:	4601      	mov	r1, r0
 800ef7a:	ab03      	add	r3, sp, #12
 800ef7c:	4805      	ldr	r0, [pc, #20]	; (800ef94 <fiprintf+0x20>)
 800ef7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef82:	6800      	ldr	r0, [r0, #0]
 800ef84:	9301      	str	r3, [sp, #4]
 800ef86:	f001 f8d5 	bl	8010134 <_vfiprintf_r>
 800ef8a:	b002      	add	sp, #8
 800ef8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef90:	b003      	add	sp, #12
 800ef92:	4770      	bx	lr
 800ef94:	2000018c 	.word	0x2000018c

0800ef98 <_fwalk_reent>:
 800ef98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef9c:	4606      	mov	r6, r0
 800ef9e:	4688      	mov	r8, r1
 800efa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800efa4:	2700      	movs	r7, #0
 800efa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800efaa:	f1b9 0901 	subs.w	r9, r9, #1
 800efae:	d505      	bpl.n	800efbc <_fwalk_reent+0x24>
 800efb0:	6824      	ldr	r4, [r4, #0]
 800efb2:	2c00      	cmp	r4, #0
 800efb4:	d1f7      	bne.n	800efa6 <_fwalk_reent+0xe>
 800efb6:	4638      	mov	r0, r7
 800efb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efbc:	89ab      	ldrh	r3, [r5, #12]
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d907      	bls.n	800efd2 <_fwalk_reent+0x3a>
 800efc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efc6:	3301      	adds	r3, #1
 800efc8:	d003      	beq.n	800efd2 <_fwalk_reent+0x3a>
 800efca:	4629      	mov	r1, r5
 800efcc:	4630      	mov	r0, r6
 800efce:	47c0      	blx	r8
 800efd0:	4307      	orrs	r7, r0
 800efd2:	3568      	adds	r5, #104	; 0x68
 800efd4:	e7e9      	b.n	800efaa <_fwalk_reent+0x12>

0800efd6 <rshift>:
 800efd6:	6903      	ldr	r3, [r0, #16]
 800efd8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800efdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efe0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efe4:	f100 0414 	add.w	r4, r0, #20
 800efe8:	dd45      	ble.n	800f076 <rshift+0xa0>
 800efea:	f011 011f 	ands.w	r1, r1, #31
 800efee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eff2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eff6:	d10c      	bne.n	800f012 <rshift+0x3c>
 800eff8:	f100 0710 	add.w	r7, r0, #16
 800effc:	4629      	mov	r1, r5
 800effe:	42b1      	cmp	r1, r6
 800f000:	d334      	bcc.n	800f06c <rshift+0x96>
 800f002:	1a9b      	subs	r3, r3, r2
 800f004:	009b      	lsls	r3, r3, #2
 800f006:	1eea      	subs	r2, r5, #3
 800f008:	4296      	cmp	r6, r2
 800f00a:	bf38      	it	cc
 800f00c:	2300      	movcc	r3, #0
 800f00e:	4423      	add	r3, r4
 800f010:	e015      	b.n	800f03e <rshift+0x68>
 800f012:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f016:	f1c1 0820 	rsb	r8, r1, #32
 800f01a:	40cf      	lsrs	r7, r1
 800f01c:	f105 0e04 	add.w	lr, r5, #4
 800f020:	46a1      	mov	r9, r4
 800f022:	4576      	cmp	r6, lr
 800f024:	46f4      	mov	ip, lr
 800f026:	d815      	bhi.n	800f054 <rshift+0x7e>
 800f028:	1a9a      	subs	r2, r3, r2
 800f02a:	0092      	lsls	r2, r2, #2
 800f02c:	3a04      	subs	r2, #4
 800f02e:	3501      	adds	r5, #1
 800f030:	42ae      	cmp	r6, r5
 800f032:	bf38      	it	cc
 800f034:	2200      	movcc	r2, #0
 800f036:	18a3      	adds	r3, r4, r2
 800f038:	50a7      	str	r7, [r4, r2]
 800f03a:	b107      	cbz	r7, 800f03e <rshift+0x68>
 800f03c:	3304      	adds	r3, #4
 800f03e:	1b1a      	subs	r2, r3, r4
 800f040:	42a3      	cmp	r3, r4
 800f042:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f046:	bf08      	it	eq
 800f048:	2300      	moveq	r3, #0
 800f04a:	6102      	str	r2, [r0, #16]
 800f04c:	bf08      	it	eq
 800f04e:	6143      	streq	r3, [r0, #20]
 800f050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f054:	f8dc c000 	ldr.w	ip, [ip]
 800f058:	fa0c fc08 	lsl.w	ip, ip, r8
 800f05c:	ea4c 0707 	orr.w	r7, ip, r7
 800f060:	f849 7b04 	str.w	r7, [r9], #4
 800f064:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f068:	40cf      	lsrs	r7, r1
 800f06a:	e7da      	b.n	800f022 <rshift+0x4c>
 800f06c:	f851 cb04 	ldr.w	ip, [r1], #4
 800f070:	f847 cf04 	str.w	ip, [r7, #4]!
 800f074:	e7c3      	b.n	800effe <rshift+0x28>
 800f076:	4623      	mov	r3, r4
 800f078:	e7e1      	b.n	800f03e <rshift+0x68>

0800f07a <__hexdig_fun>:
 800f07a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f07e:	2b09      	cmp	r3, #9
 800f080:	d802      	bhi.n	800f088 <__hexdig_fun+0xe>
 800f082:	3820      	subs	r0, #32
 800f084:	b2c0      	uxtb	r0, r0
 800f086:	4770      	bx	lr
 800f088:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f08c:	2b05      	cmp	r3, #5
 800f08e:	d801      	bhi.n	800f094 <__hexdig_fun+0x1a>
 800f090:	3847      	subs	r0, #71	; 0x47
 800f092:	e7f7      	b.n	800f084 <__hexdig_fun+0xa>
 800f094:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f098:	2b05      	cmp	r3, #5
 800f09a:	d801      	bhi.n	800f0a0 <__hexdig_fun+0x26>
 800f09c:	3827      	subs	r0, #39	; 0x27
 800f09e:	e7f1      	b.n	800f084 <__hexdig_fun+0xa>
 800f0a0:	2000      	movs	r0, #0
 800f0a2:	4770      	bx	lr

0800f0a4 <__gethex>:
 800f0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a8:	ed2d 8b02 	vpush	{d8}
 800f0ac:	b089      	sub	sp, #36	; 0x24
 800f0ae:	ee08 0a10 	vmov	s16, r0
 800f0b2:	9304      	str	r3, [sp, #16]
 800f0b4:	4bb4      	ldr	r3, [pc, #720]	; (800f388 <__gethex+0x2e4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	468b      	mov	fp, r1
 800f0be:	4690      	mov	r8, r2
 800f0c0:	f7f1 f8a0 	bl	8000204 <strlen>
 800f0c4:	9b01      	ldr	r3, [sp, #4]
 800f0c6:	f8db 2000 	ldr.w	r2, [fp]
 800f0ca:	4403      	add	r3, r0
 800f0cc:	4682      	mov	sl, r0
 800f0ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f0d2:	9305      	str	r3, [sp, #20]
 800f0d4:	1c93      	adds	r3, r2, #2
 800f0d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f0da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f0de:	32fe      	adds	r2, #254	; 0xfe
 800f0e0:	18d1      	adds	r1, r2, r3
 800f0e2:	461f      	mov	r7, r3
 800f0e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0e8:	9100      	str	r1, [sp, #0]
 800f0ea:	2830      	cmp	r0, #48	; 0x30
 800f0ec:	d0f8      	beq.n	800f0e0 <__gethex+0x3c>
 800f0ee:	f7ff ffc4 	bl	800f07a <__hexdig_fun>
 800f0f2:	4604      	mov	r4, r0
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d13a      	bne.n	800f16e <__gethex+0xca>
 800f0f8:	9901      	ldr	r1, [sp, #4]
 800f0fa:	4652      	mov	r2, sl
 800f0fc:	4638      	mov	r0, r7
 800f0fe:	f7fe f8b5 	bl	800d26c <strncmp>
 800f102:	4605      	mov	r5, r0
 800f104:	2800      	cmp	r0, #0
 800f106:	d168      	bne.n	800f1da <__gethex+0x136>
 800f108:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f10c:	eb07 060a 	add.w	r6, r7, sl
 800f110:	f7ff ffb3 	bl	800f07a <__hexdig_fun>
 800f114:	2800      	cmp	r0, #0
 800f116:	d062      	beq.n	800f1de <__gethex+0x13a>
 800f118:	4633      	mov	r3, r6
 800f11a:	7818      	ldrb	r0, [r3, #0]
 800f11c:	2830      	cmp	r0, #48	; 0x30
 800f11e:	461f      	mov	r7, r3
 800f120:	f103 0301 	add.w	r3, r3, #1
 800f124:	d0f9      	beq.n	800f11a <__gethex+0x76>
 800f126:	f7ff ffa8 	bl	800f07a <__hexdig_fun>
 800f12a:	2301      	movs	r3, #1
 800f12c:	fab0 f480 	clz	r4, r0
 800f130:	0964      	lsrs	r4, r4, #5
 800f132:	4635      	mov	r5, r6
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	463a      	mov	r2, r7
 800f138:	4616      	mov	r6, r2
 800f13a:	3201      	adds	r2, #1
 800f13c:	7830      	ldrb	r0, [r6, #0]
 800f13e:	f7ff ff9c 	bl	800f07a <__hexdig_fun>
 800f142:	2800      	cmp	r0, #0
 800f144:	d1f8      	bne.n	800f138 <__gethex+0x94>
 800f146:	9901      	ldr	r1, [sp, #4]
 800f148:	4652      	mov	r2, sl
 800f14a:	4630      	mov	r0, r6
 800f14c:	f7fe f88e 	bl	800d26c <strncmp>
 800f150:	b980      	cbnz	r0, 800f174 <__gethex+0xd0>
 800f152:	b94d      	cbnz	r5, 800f168 <__gethex+0xc4>
 800f154:	eb06 050a 	add.w	r5, r6, sl
 800f158:	462a      	mov	r2, r5
 800f15a:	4616      	mov	r6, r2
 800f15c:	3201      	adds	r2, #1
 800f15e:	7830      	ldrb	r0, [r6, #0]
 800f160:	f7ff ff8b 	bl	800f07a <__hexdig_fun>
 800f164:	2800      	cmp	r0, #0
 800f166:	d1f8      	bne.n	800f15a <__gethex+0xb6>
 800f168:	1bad      	subs	r5, r5, r6
 800f16a:	00ad      	lsls	r5, r5, #2
 800f16c:	e004      	b.n	800f178 <__gethex+0xd4>
 800f16e:	2400      	movs	r4, #0
 800f170:	4625      	mov	r5, r4
 800f172:	e7e0      	b.n	800f136 <__gethex+0x92>
 800f174:	2d00      	cmp	r5, #0
 800f176:	d1f7      	bne.n	800f168 <__gethex+0xc4>
 800f178:	7833      	ldrb	r3, [r6, #0]
 800f17a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f17e:	2b50      	cmp	r3, #80	; 0x50
 800f180:	d13b      	bne.n	800f1fa <__gethex+0x156>
 800f182:	7873      	ldrb	r3, [r6, #1]
 800f184:	2b2b      	cmp	r3, #43	; 0x2b
 800f186:	d02c      	beq.n	800f1e2 <__gethex+0x13e>
 800f188:	2b2d      	cmp	r3, #45	; 0x2d
 800f18a:	d02e      	beq.n	800f1ea <__gethex+0x146>
 800f18c:	1c71      	adds	r1, r6, #1
 800f18e:	f04f 0900 	mov.w	r9, #0
 800f192:	7808      	ldrb	r0, [r1, #0]
 800f194:	f7ff ff71 	bl	800f07a <__hexdig_fun>
 800f198:	1e43      	subs	r3, r0, #1
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	2b18      	cmp	r3, #24
 800f19e:	d82c      	bhi.n	800f1fa <__gethex+0x156>
 800f1a0:	f1a0 0210 	sub.w	r2, r0, #16
 800f1a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f1a8:	f7ff ff67 	bl	800f07a <__hexdig_fun>
 800f1ac:	1e43      	subs	r3, r0, #1
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	2b18      	cmp	r3, #24
 800f1b2:	d91d      	bls.n	800f1f0 <__gethex+0x14c>
 800f1b4:	f1b9 0f00 	cmp.w	r9, #0
 800f1b8:	d000      	beq.n	800f1bc <__gethex+0x118>
 800f1ba:	4252      	negs	r2, r2
 800f1bc:	4415      	add	r5, r2
 800f1be:	f8cb 1000 	str.w	r1, [fp]
 800f1c2:	b1e4      	cbz	r4, 800f1fe <__gethex+0x15a>
 800f1c4:	9b00      	ldr	r3, [sp, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	bf14      	ite	ne
 800f1ca:	2700      	movne	r7, #0
 800f1cc:	2706      	moveq	r7, #6
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	b009      	add	sp, #36	; 0x24
 800f1d2:	ecbd 8b02 	vpop	{d8}
 800f1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1da:	463e      	mov	r6, r7
 800f1dc:	4625      	mov	r5, r4
 800f1de:	2401      	movs	r4, #1
 800f1e0:	e7ca      	b.n	800f178 <__gethex+0xd4>
 800f1e2:	f04f 0900 	mov.w	r9, #0
 800f1e6:	1cb1      	adds	r1, r6, #2
 800f1e8:	e7d3      	b.n	800f192 <__gethex+0xee>
 800f1ea:	f04f 0901 	mov.w	r9, #1
 800f1ee:	e7fa      	b.n	800f1e6 <__gethex+0x142>
 800f1f0:	230a      	movs	r3, #10
 800f1f2:	fb03 0202 	mla	r2, r3, r2, r0
 800f1f6:	3a10      	subs	r2, #16
 800f1f8:	e7d4      	b.n	800f1a4 <__gethex+0x100>
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	e7df      	b.n	800f1be <__gethex+0x11a>
 800f1fe:	1bf3      	subs	r3, r6, r7
 800f200:	3b01      	subs	r3, #1
 800f202:	4621      	mov	r1, r4
 800f204:	2b07      	cmp	r3, #7
 800f206:	dc0b      	bgt.n	800f220 <__gethex+0x17c>
 800f208:	ee18 0a10 	vmov	r0, s16
 800f20c:	f000 fa78 	bl	800f700 <_Balloc>
 800f210:	4604      	mov	r4, r0
 800f212:	b940      	cbnz	r0, 800f226 <__gethex+0x182>
 800f214:	4b5d      	ldr	r3, [pc, #372]	; (800f38c <__gethex+0x2e8>)
 800f216:	4602      	mov	r2, r0
 800f218:	21de      	movs	r1, #222	; 0xde
 800f21a:	485d      	ldr	r0, [pc, #372]	; (800f390 <__gethex+0x2ec>)
 800f21c:	f7fe ff34 	bl	800e088 <__assert_func>
 800f220:	3101      	adds	r1, #1
 800f222:	105b      	asrs	r3, r3, #1
 800f224:	e7ee      	b.n	800f204 <__gethex+0x160>
 800f226:	f100 0914 	add.w	r9, r0, #20
 800f22a:	f04f 0b00 	mov.w	fp, #0
 800f22e:	f1ca 0301 	rsb	r3, sl, #1
 800f232:	f8cd 9008 	str.w	r9, [sp, #8]
 800f236:	f8cd b000 	str.w	fp, [sp]
 800f23a:	9306      	str	r3, [sp, #24]
 800f23c:	42b7      	cmp	r7, r6
 800f23e:	d340      	bcc.n	800f2c2 <__gethex+0x21e>
 800f240:	9802      	ldr	r0, [sp, #8]
 800f242:	9b00      	ldr	r3, [sp, #0]
 800f244:	f840 3b04 	str.w	r3, [r0], #4
 800f248:	eba0 0009 	sub.w	r0, r0, r9
 800f24c:	1080      	asrs	r0, r0, #2
 800f24e:	0146      	lsls	r6, r0, #5
 800f250:	6120      	str	r0, [r4, #16]
 800f252:	4618      	mov	r0, r3
 800f254:	f000 fb46 	bl	800f8e4 <__hi0bits>
 800f258:	1a30      	subs	r0, r6, r0
 800f25a:	f8d8 6000 	ldr.w	r6, [r8]
 800f25e:	42b0      	cmp	r0, r6
 800f260:	dd63      	ble.n	800f32a <__gethex+0x286>
 800f262:	1b87      	subs	r7, r0, r6
 800f264:	4639      	mov	r1, r7
 800f266:	4620      	mov	r0, r4
 800f268:	f000 feea 	bl	8010040 <__any_on>
 800f26c:	4682      	mov	sl, r0
 800f26e:	b1a8      	cbz	r0, 800f29c <__gethex+0x1f8>
 800f270:	1e7b      	subs	r3, r7, #1
 800f272:	1159      	asrs	r1, r3, #5
 800f274:	f003 021f 	and.w	r2, r3, #31
 800f278:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f27c:	f04f 0a01 	mov.w	sl, #1
 800f280:	fa0a f202 	lsl.w	r2, sl, r2
 800f284:	420a      	tst	r2, r1
 800f286:	d009      	beq.n	800f29c <__gethex+0x1f8>
 800f288:	4553      	cmp	r3, sl
 800f28a:	dd05      	ble.n	800f298 <__gethex+0x1f4>
 800f28c:	1eb9      	subs	r1, r7, #2
 800f28e:	4620      	mov	r0, r4
 800f290:	f000 fed6 	bl	8010040 <__any_on>
 800f294:	2800      	cmp	r0, #0
 800f296:	d145      	bne.n	800f324 <__gethex+0x280>
 800f298:	f04f 0a02 	mov.w	sl, #2
 800f29c:	4639      	mov	r1, r7
 800f29e:	4620      	mov	r0, r4
 800f2a0:	f7ff fe99 	bl	800efd6 <rshift>
 800f2a4:	443d      	add	r5, r7
 800f2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2aa:	42ab      	cmp	r3, r5
 800f2ac:	da4c      	bge.n	800f348 <__gethex+0x2a4>
 800f2ae:	ee18 0a10 	vmov	r0, s16
 800f2b2:	4621      	mov	r1, r4
 800f2b4:	f000 fa64 	bl	800f780 <_Bfree>
 800f2b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	6013      	str	r3, [r2, #0]
 800f2be:	27a3      	movs	r7, #163	; 0xa3
 800f2c0:	e785      	b.n	800f1ce <__gethex+0x12a>
 800f2c2:	1e73      	subs	r3, r6, #1
 800f2c4:	9a05      	ldr	r2, [sp, #20]
 800f2c6:	9303      	str	r3, [sp, #12]
 800f2c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d019      	beq.n	800f304 <__gethex+0x260>
 800f2d0:	f1bb 0f20 	cmp.w	fp, #32
 800f2d4:	d107      	bne.n	800f2e6 <__gethex+0x242>
 800f2d6:	9b02      	ldr	r3, [sp, #8]
 800f2d8:	9a00      	ldr	r2, [sp, #0]
 800f2da:	f843 2b04 	str.w	r2, [r3], #4
 800f2de:	9302      	str	r3, [sp, #8]
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	9300      	str	r3, [sp, #0]
 800f2e4:	469b      	mov	fp, r3
 800f2e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f2ea:	f7ff fec6 	bl	800f07a <__hexdig_fun>
 800f2ee:	9b00      	ldr	r3, [sp, #0]
 800f2f0:	f000 000f 	and.w	r0, r0, #15
 800f2f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f2f8:	4303      	orrs	r3, r0
 800f2fa:	9300      	str	r3, [sp, #0]
 800f2fc:	f10b 0b04 	add.w	fp, fp, #4
 800f300:	9b03      	ldr	r3, [sp, #12]
 800f302:	e00d      	b.n	800f320 <__gethex+0x27c>
 800f304:	9b03      	ldr	r3, [sp, #12]
 800f306:	9a06      	ldr	r2, [sp, #24]
 800f308:	4413      	add	r3, r2
 800f30a:	42bb      	cmp	r3, r7
 800f30c:	d3e0      	bcc.n	800f2d0 <__gethex+0x22c>
 800f30e:	4618      	mov	r0, r3
 800f310:	9901      	ldr	r1, [sp, #4]
 800f312:	9307      	str	r3, [sp, #28]
 800f314:	4652      	mov	r2, sl
 800f316:	f7fd ffa9 	bl	800d26c <strncmp>
 800f31a:	9b07      	ldr	r3, [sp, #28]
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d1d7      	bne.n	800f2d0 <__gethex+0x22c>
 800f320:	461e      	mov	r6, r3
 800f322:	e78b      	b.n	800f23c <__gethex+0x198>
 800f324:	f04f 0a03 	mov.w	sl, #3
 800f328:	e7b8      	b.n	800f29c <__gethex+0x1f8>
 800f32a:	da0a      	bge.n	800f342 <__gethex+0x29e>
 800f32c:	1a37      	subs	r7, r6, r0
 800f32e:	4621      	mov	r1, r4
 800f330:	ee18 0a10 	vmov	r0, s16
 800f334:	463a      	mov	r2, r7
 800f336:	f000 fc3f 	bl	800fbb8 <__lshift>
 800f33a:	1bed      	subs	r5, r5, r7
 800f33c:	4604      	mov	r4, r0
 800f33e:	f100 0914 	add.w	r9, r0, #20
 800f342:	f04f 0a00 	mov.w	sl, #0
 800f346:	e7ae      	b.n	800f2a6 <__gethex+0x202>
 800f348:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f34c:	42a8      	cmp	r0, r5
 800f34e:	dd72      	ble.n	800f436 <__gethex+0x392>
 800f350:	1b45      	subs	r5, r0, r5
 800f352:	42ae      	cmp	r6, r5
 800f354:	dc36      	bgt.n	800f3c4 <__gethex+0x320>
 800f356:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	d02a      	beq.n	800f3b4 <__gethex+0x310>
 800f35e:	2b03      	cmp	r3, #3
 800f360:	d02c      	beq.n	800f3bc <__gethex+0x318>
 800f362:	2b01      	cmp	r3, #1
 800f364:	d11c      	bne.n	800f3a0 <__gethex+0x2fc>
 800f366:	42ae      	cmp	r6, r5
 800f368:	d11a      	bne.n	800f3a0 <__gethex+0x2fc>
 800f36a:	2e01      	cmp	r6, #1
 800f36c:	d112      	bne.n	800f394 <__gethex+0x2f0>
 800f36e:	9a04      	ldr	r2, [sp, #16]
 800f370:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f374:	6013      	str	r3, [r2, #0]
 800f376:	2301      	movs	r3, #1
 800f378:	6123      	str	r3, [r4, #16]
 800f37a:	f8c9 3000 	str.w	r3, [r9]
 800f37e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f380:	2762      	movs	r7, #98	; 0x62
 800f382:	601c      	str	r4, [r3, #0]
 800f384:	e723      	b.n	800f1ce <__gethex+0x12a>
 800f386:	bf00      	nop
 800f388:	0801265c 	.word	0x0801265c
 800f38c:	08012583 	.word	0x08012583
 800f390:	080125f4 	.word	0x080125f4
 800f394:	1e71      	subs	r1, r6, #1
 800f396:	4620      	mov	r0, r4
 800f398:	f000 fe52 	bl	8010040 <__any_on>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	d1e6      	bne.n	800f36e <__gethex+0x2ca>
 800f3a0:	ee18 0a10 	vmov	r0, s16
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	f000 f9eb 	bl	800f780 <_Bfree>
 800f3aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	6013      	str	r3, [r2, #0]
 800f3b0:	2750      	movs	r7, #80	; 0x50
 800f3b2:	e70c      	b.n	800f1ce <__gethex+0x12a>
 800f3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d1f2      	bne.n	800f3a0 <__gethex+0x2fc>
 800f3ba:	e7d8      	b.n	800f36e <__gethex+0x2ca>
 800f3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1d5      	bne.n	800f36e <__gethex+0x2ca>
 800f3c2:	e7ed      	b.n	800f3a0 <__gethex+0x2fc>
 800f3c4:	1e6f      	subs	r7, r5, #1
 800f3c6:	f1ba 0f00 	cmp.w	sl, #0
 800f3ca:	d131      	bne.n	800f430 <__gethex+0x38c>
 800f3cc:	b127      	cbz	r7, 800f3d8 <__gethex+0x334>
 800f3ce:	4639      	mov	r1, r7
 800f3d0:	4620      	mov	r0, r4
 800f3d2:	f000 fe35 	bl	8010040 <__any_on>
 800f3d6:	4682      	mov	sl, r0
 800f3d8:	117b      	asrs	r3, r7, #5
 800f3da:	2101      	movs	r1, #1
 800f3dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f3e0:	f007 071f 	and.w	r7, r7, #31
 800f3e4:	fa01 f707 	lsl.w	r7, r1, r7
 800f3e8:	421f      	tst	r7, r3
 800f3ea:	4629      	mov	r1, r5
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	bf18      	it	ne
 800f3f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f3f4:	1b76      	subs	r6, r6, r5
 800f3f6:	f7ff fdee 	bl	800efd6 <rshift>
 800f3fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3fe:	2702      	movs	r7, #2
 800f400:	f1ba 0f00 	cmp.w	sl, #0
 800f404:	d048      	beq.n	800f498 <__gethex+0x3f4>
 800f406:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f40a:	2b02      	cmp	r3, #2
 800f40c:	d015      	beq.n	800f43a <__gethex+0x396>
 800f40e:	2b03      	cmp	r3, #3
 800f410:	d017      	beq.n	800f442 <__gethex+0x39e>
 800f412:	2b01      	cmp	r3, #1
 800f414:	d109      	bne.n	800f42a <__gethex+0x386>
 800f416:	f01a 0f02 	tst.w	sl, #2
 800f41a:	d006      	beq.n	800f42a <__gethex+0x386>
 800f41c:	f8d9 0000 	ldr.w	r0, [r9]
 800f420:	ea4a 0a00 	orr.w	sl, sl, r0
 800f424:	f01a 0f01 	tst.w	sl, #1
 800f428:	d10e      	bne.n	800f448 <__gethex+0x3a4>
 800f42a:	f047 0710 	orr.w	r7, r7, #16
 800f42e:	e033      	b.n	800f498 <__gethex+0x3f4>
 800f430:	f04f 0a01 	mov.w	sl, #1
 800f434:	e7d0      	b.n	800f3d8 <__gethex+0x334>
 800f436:	2701      	movs	r7, #1
 800f438:	e7e2      	b.n	800f400 <__gethex+0x35c>
 800f43a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f43c:	f1c3 0301 	rsb	r3, r3, #1
 800f440:	9315      	str	r3, [sp, #84]	; 0x54
 800f442:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f444:	2b00      	cmp	r3, #0
 800f446:	d0f0      	beq.n	800f42a <__gethex+0x386>
 800f448:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f44c:	f104 0314 	add.w	r3, r4, #20
 800f450:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f454:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f458:	f04f 0c00 	mov.w	ip, #0
 800f45c:	4618      	mov	r0, r3
 800f45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f462:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f466:	d01c      	beq.n	800f4a2 <__gethex+0x3fe>
 800f468:	3201      	adds	r2, #1
 800f46a:	6002      	str	r2, [r0, #0]
 800f46c:	2f02      	cmp	r7, #2
 800f46e:	f104 0314 	add.w	r3, r4, #20
 800f472:	d13f      	bne.n	800f4f4 <__gethex+0x450>
 800f474:	f8d8 2000 	ldr.w	r2, [r8]
 800f478:	3a01      	subs	r2, #1
 800f47a:	42b2      	cmp	r2, r6
 800f47c:	d10a      	bne.n	800f494 <__gethex+0x3f0>
 800f47e:	1171      	asrs	r1, r6, #5
 800f480:	2201      	movs	r2, #1
 800f482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f486:	f006 061f 	and.w	r6, r6, #31
 800f48a:	fa02 f606 	lsl.w	r6, r2, r6
 800f48e:	421e      	tst	r6, r3
 800f490:	bf18      	it	ne
 800f492:	4617      	movne	r7, r2
 800f494:	f047 0720 	orr.w	r7, r7, #32
 800f498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f49a:	601c      	str	r4, [r3, #0]
 800f49c:	9b04      	ldr	r3, [sp, #16]
 800f49e:	601d      	str	r5, [r3, #0]
 800f4a0:	e695      	b.n	800f1ce <__gethex+0x12a>
 800f4a2:	4299      	cmp	r1, r3
 800f4a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f4a8:	d8d8      	bhi.n	800f45c <__gethex+0x3b8>
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	459b      	cmp	fp, r3
 800f4ae:	db19      	blt.n	800f4e4 <__gethex+0x440>
 800f4b0:	6861      	ldr	r1, [r4, #4]
 800f4b2:	ee18 0a10 	vmov	r0, s16
 800f4b6:	3101      	adds	r1, #1
 800f4b8:	f000 f922 	bl	800f700 <_Balloc>
 800f4bc:	4681      	mov	r9, r0
 800f4be:	b918      	cbnz	r0, 800f4c8 <__gethex+0x424>
 800f4c0:	4b1a      	ldr	r3, [pc, #104]	; (800f52c <__gethex+0x488>)
 800f4c2:	4602      	mov	r2, r0
 800f4c4:	2184      	movs	r1, #132	; 0x84
 800f4c6:	e6a8      	b.n	800f21a <__gethex+0x176>
 800f4c8:	6922      	ldr	r2, [r4, #16]
 800f4ca:	3202      	adds	r2, #2
 800f4cc:	f104 010c 	add.w	r1, r4, #12
 800f4d0:	0092      	lsls	r2, r2, #2
 800f4d2:	300c      	adds	r0, #12
 800f4d4:	f7fc ff4c 	bl	800c370 <memcpy>
 800f4d8:	4621      	mov	r1, r4
 800f4da:	ee18 0a10 	vmov	r0, s16
 800f4de:	f000 f94f 	bl	800f780 <_Bfree>
 800f4e2:	464c      	mov	r4, r9
 800f4e4:	6923      	ldr	r3, [r4, #16]
 800f4e6:	1c5a      	adds	r2, r3, #1
 800f4e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4ec:	6122      	str	r2, [r4, #16]
 800f4ee:	2201      	movs	r2, #1
 800f4f0:	615a      	str	r2, [r3, #20]
 800f4f2:	e7bb      	b.n	800f46c <__gethex+0x3c8>
 800f4f4:	6922      	ldr	r2, [r4, #16]
 800f4f6:	455a      	cmp	r2, fp
 800f4f8:	dd0b      	ble.n	800f512 <__gethex+0x46e>
 800f4fa:	2101      	movs	r1, #1
 800f4fc:	4620      	mov	r0, r4
 800f4fe:	f7ff fd6a 	bl	800efd6 <rshift>
 800f502:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f506:	3501      	adds	r5, #1
 800f508:	42ab      	cmp	r3, r5
 800f50a:	f6ff aed0 	blt.w	800f2ae <__gethex+0x20a>
 800f50e:	2701      	movs	r7, #1
 800f510:	e7c0      	b.n	800f494 <__gethex+0x3f0>
 800f512:	f016 061f 	ands.w	r6, r6, #31
 800f516:	d0fa      	beq.n	800f50e <__gethex+0x46a>
 800f518:	4453      	add	r3, sl
 800f51a:	f1c6 0620 	rsb	r6, r6, #32
 800f51e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f522:	f000 f9df 	bl	800f8e4 <__hi0bits>
 800f526:	42b0      	cmp	r0, r6
 800f528:	dbe7      	blt.n	800f4fa <__gethex+0x456>
 800f52a:	e7f0      	b.n	800f50e <__gethex+0x46a>
 800f52c:	08012583 	.word	0x08012583

0800f530 <L_shift>:
 800f530:	f1c2 0208 	rsb	r2, r2, #8
 800f534:	0092      	lsls	r2, r2, #2
 800f536:	b570      	push	{r4, r5, r6, lr}
 800f538:	f1c2 0620 	rsb	r6, r2, #32
 800f53c:	6843      	ldr	r3, [r0, #4]
 800f53e:	6804      	ldr	r4, [r0, #0]
 800f540:	fa03 f506 	lsl.w	r5, r3, r6
 800f544:	432c      	orrs	r4, r5
 800f546:	40d3      	lsrs	r3, r2
 800f548:	6004      	str	r4, [r0, #0]
 800f54a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f54e:	4288      	cmp	r0, r1
 800f550:	d3f4      	bcc.n	800f53c <L_shift+0xc>
 800f552:	bd70      	pop	{r4, r5, r6, pc}

0800f554 <__match>:
 800f554:	b530      	push	{r4, r5, lr}
 800f556:	6803      	ldr	r3, [r0, #0]
 800f558:	3301      	adds	r3, #1
 800f55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f55e:	b914      	cbnz	r4, 800f566 <__match+0x12>
 800f560:	6003      	str	r3, [r0, #0]
 800f562:	2001      	movs	r0, #1
 800f564:	bd30      	pop	{r4, r5, pc}
 800f566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f56a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f56e:	2d19      	cmp	r5, #25
 800f570:	bf98      	it	ls
 800f572:	3220      	addls	r2, #32
 800f574:	42a2      	cmp	r2, r4
 800f576:	d0f0      	beq.n	800f55a <__match+0x6>
 800f578:	2000      	movs	r0, #0
 800f57a:	e7f3      	b.n	800f564 <__match+0x10>

0800f57c <__hexnan>:
 800f57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f580:	680b      	ldr	r3, [r1, #0]
 800f582:	115e      	asrs	r6, r3, #5
 800f584:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f588:	f013 031f 	ands.w	r3, r3, #31
 800f58c:	b087      	sub	sp, #28
 800f58e:	bf18      	it	ne
 800f590:	3604      	addne	r6, #4
 800f592:	2500      	movs	r5, #0
 800f594:	1f37      	subs	r7, r6, #4
 800f596:	4690      	mov	r8, r2
 800f598:	6802      	ldr	r2, [r0, #0]
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	4682      	mov	sl, r0
 800f59e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f5a2:	46b9      	mov	r9, r7
 800f5a4:	463c      	mov	r4, r7
 800f5a6:	9502      	str	r5, [sp, #8]
 800f5a8:	46ab      	mov	fp, r5
 800f5aa:	7851      	ldrb	r1, [r2, #1]
 800f5ac:	1c53      	adds	r3, r2, #1
 800f5ae:	9303      	str	r3, [sp, #12]
 800f5b0:	b341      	cbz	r1, 800f604 <__hexnan+0x88>
 800f5b2:	4608      	mov	r0, r1
 800f5b4:	9205      	str	r2, [sp, #20]
 800f5b6:	9104      	str	r1, [sp, #16]
 800f5b8:	f7ff fd5f 	bl	800f07a <__hexdig_fun>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d14f      	bne.n	800f660 <__hexnan+0xe4>
 800f5c0:	9904      	ldr	r1, [sp, #16]
 800f5c2:	9a05      	ldr	r2, [sp, #20]
 800f5c4:	2920      	cmp	r1, #32
 800f5c6:	d818      	bhi.n	800f5fa <__hexnan+0x7e>
 800f5c8:	9b02      	ldr	r3, [sp, #8]
 800f5ca:	459b      	cmp	fp, r3
 800f5cc:	dd13      	ble.n	800f5f6 <__hexnan+0x7a>
 800f5ce:	454c      	cmp	r4, r9
 800f5d0:	d206      	bcs.n	800f5e0 <__hexnan+0x64>
 800f5d2:	2d07      	cmp	r5, #7
 800f5d4:	dc04      	bgt.n	800f5e0 <__hexnan+0x64>
 800f5d6:	462a      	mov	r2, r5
 800f5d8:	4649      	mov	r1, r9
 800f5da:	4620      	mov	r0, r4
 800f5dc:	f7ff ffa8 	bl	800f530 <L_shift>
 800f5e0:	4544      	cmp	r4, r8
 800f5e2:	d950      	bls.n	800f686 <__hexnan+0x10a>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f1a4 0904 	sub.w	r9, r4, #4
 800f5ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5ee:	f8cd b008 	str.w	fp, [sp, #8]
 800f5f2:	464c      	mov	r4, r9
 800f5f4:	461d      	mov	r5, r3
 800f5f6:	9a03      	ldr	r2, [sp, #12]
 800f5f8:	e7d7      	b.n	800f5aa <__hexnan+0x2e>
 800f5fa:	2929      	cmp	r1, #41	; 0x29
 800f5fc:	d156      	bne.n	800f6ac <__hexnan+0x130>
 800f5fe:	3202      	adds	r2, #2
 800f600:	f8ca 2000 	str.w	r2, [sl]
 800f604:	f1bb 0f00 	cmp.w	fp, #0
 800f608:	d050      	beq.n	800f6ac <__hexnan+0x130>
 800f60a:	454c      	cmp	r4, r9
 800f60c:	d206      	bcs.n	800f61c <__hexnan+0xa0>
 800f60e:	2d07      	cmp	r5, #7
 800f610:	dc04      	bgt.n	800f61c <__hexnan+0xa0>
 800f612:	462a      	mov	r2, r5
 800f614:	4649      	mov	r1, r9
 800f616:	4620      	mov	r0, r4
 800f618:	f7ff ff8a 	bl	800f530 <L_shift>
 800f61c:	4544      	cmp	r4, r8
 800f61e:	d934      	bls.n	800f68a <__hexnan+0x10e>
 800f620:	f1a8 0204 	sub.w	r2, r8, #4
 800f624:	4623      	mov	r3, r4
 800f626:	f853 1b04 	ldr.w	r1, [r3], #4
 800f62a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f62e:	429f      	cmp	r7, r3
 800f630:	d2f9      	bcs.n	800f626 <__hexnan+0xaa>
 800f632:	1b3b      	subs	r3, r7, r4
 800f634:	f023 0303 	bic.w	r3, r3, #3
 800f638:	3304      	adds	r3, #4
 800f63a:	3401      	adds	r4, #1
 800f63c:	3e03      	subs	r6, #3
 800f63e:	42b4      	cmp	r4, r6
 800f640:	bf88      	it	hi
 800f642:	2304      	movhi	r3, #4
 800f644:	4443      	add	r3, r8
 800f646:	2200      	movs	r2, #0
 800f648:	f843 2b04 	str.w	r2, [r3], #4
 800f64c:	429f      	cmp	r7, r3
 800f64e:	d2fb      	bcs.n	800f648 <__hexnan+0xcc>
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	b91b      	cbnz	r3, 800f65c <__hexnan+0xe0>
 800f654:	4547      	cmp	r7, r8
 800f656:	d127      	bne.n	800f6a8 <__hexnan+0x12c>
 800f658:	2301      	movs	r3, #1
 800f65a:	603b      	str	r3, [r7, #0]
 800f65c:	2005      	movs	r0, #5
 800f65e:	e026      	b.n	800f6ae <__hexnan+0x132>
 800f660:	3501      	adds	r5, #1
 800f662:	2d08      	cmp	r5, #8
 800f664:	f10b 0b01 	add.w	fp, fp, #1
 800f668:	dd06      	ble.n	800f678 <__hexnan+0xfc>
 800f66a:	4544      	cmp	r4, r8
 800f66c:	d9c3      	bls.n	800f5f6 <__hexnan+0x7a>
 800f66e:	2300      	movs	r3, #0
 800f670:	f844 3c04 	str.w	r3, [r4, #-4]
 800f674:	2501      	movs	r5, #1
 800f676:	3c04      	subs	r4, #4
 800f678:	6822      	ldr	r2, [r4, #0]
 800f67a:	f000 000f 	and.w	r0, r0, #15
 800f67e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f682:	6022      	str	r2, [r4, #0]
 800f684:	e7b7      	b.n	800f5f6 <__hexnan+0x7a>
 800f686:	2508      	movs	r5, #8
 800f688:	e7b5      	b.n	800f5f6 <__hexnan+0x7a>
 800f68a:	9b01      	ldr	r3, [sp, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d0df      	beq.n	800f650 <__hexnan+0xd4>
 800f690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f694:	f1c3 0320 	rsb	r3, r3, #32
 800f698:	fa22 f303 	lsr.w	r3, r2, r3
 800f69c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6a0:	401a      	ands	r2, r3
 800f6a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800f6a6:	e7d3      	b.n	800f650 <__hexnan+0xd4>
 800f6a8:	3f04      	subs	r7, #4
 800f6aa:	e7d1      	b.n	800f650 <__hexnan+0xd4>
 800f6ac:	2004      	movs	r0, #4
 800f6ae:	b007      	add	sp, #28
 800f6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f6b4 <_localeconv_r>:
 800f6b4:	4800      	ldr	r0, [pc, #0]	; (800f6b8 <_localeconv_r+0x4>)
 800f6b6:	4770      	bx	lr
 800f6b8:	200002e4 	.word	0x200002e4

0800f6bc <__retarget_lock_init_recursive>:
 800f6bc:	4770      	bx	lr

0800f6be <__retarget_lock_acquire_recursive>:
 800f6be:	4770      	bx	lr

0800f6c0 <__retarget_lock_release_recursive>:
 800f6c0:	4770      	bx	lr

0800f6c2 <__ascii_mbtowc>:
 800f6c2:	b082      	sub	sp, #8
 800f6c4:	b901      	cbnz	r1, 800f6c8 <__ascii_mbtowc+0x6>
 800f6c6:	a901      	add	r1, sp, #4
 800f6c8:	b142      	cbz	r2, 800f6dc <__ascii_mbtowc+0x1a>
 800f6ca:	b14b      	cbz	r3, 800f6e0 <__ascii_mbtowc+0x1e>
 800f6cc:	7813      	ldrb	r3, [r2, #0]
 800f6ce:	600b      	str	r3, [r1, #0]
 800f6d0:	7812      	ldrb	r2, [r2, #0]
 800f6d2:	1e10      	subs	r0, r2, #0
 800f6d4:	bf18      	it	ne
 800f6d6:	2001      	movne	r0, #1
 800f6d8:	b002      	add	sp, #8
 800f6da:	4770      	bx	lr
 800f6dc:	4610      	mov	r0, r2
 800f6de:	e7fb      	b.n	800f6d8 <__ascii_mbtowc+0x16>
 800f6e0:	f06f 0001 	mvn.w	r0, #1
 800f6e4:	e7f8      	b.n	800f6d8 <__ascii_mbtowc+0x16>
	...

0800f6e8 <__malloc_lock>:
 800f6e8:	4801      	ldr	r0, [pc, #4]	; (800f6f0 <__malloc_lock+0x8>)
 800f6ea:	f7ff bfe8 	b.w	800f6be <__retarget_lock_acquire_recursive>
 800f6ee:	bf00      	nop
 800f6f0:	2000ba8c 	.word	0x2000ba8c

0800f6f4 <__malloc_unlock>:
 800f6f4:	4801      	ldr	r0, [pc, #4]	; (800f6fc <__malloc_unlock+0x8>)
 800f6f6:	f7ff bfe3 	b.w	800f6c0 <__retarget_lock_release_recursive>
 800f6fa:	bf00      	nop
 800f6fc:	2000ba8c 	.word	0x2000ba8c

0800f700 <_Balloc>:
 800f700:	b570      	push	{r4, r5, r6, lr}
 800f702:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f704:	4604      	mov	r4, r0
 800f706:	460d      	mov	r5, r1
 800f708:	b976      	cbnz	r6, 800f728 <_Balloc+0x28>
 800f70a:	2010      	movs	r0, #16
 800f70c:	f7fc fe20 	bl	800c350 <malloc>
 800f710:	4602      	mov	r2, r0
 800f712:	6260      	str	r0, [r4, #36]	; 0x24
 800f714:	b920      	cbnz	r0, 800f720 <_Balloc+0x20>
 800f716:	4b18      	ldr	r3, [pc, #96]	; (800f778 <_Balloc+0x78>)
 800f718:	4818      	ldr	r0, [pc, #96]	; (800f77c <_Balloc+0x7c>)
 800f71a:	2166      	movs	r1, #102	; 0x66
 800f71c:	f7fe fcb4 	bl	800e088 <__assert_func>
 800f720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f724:	6006      	str	r6, [r0, #0]
 800f726:	60c6      	str	r6, [r0, #12]
 800f728:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f72a:	68f3      	ldr	r3, [r6, #12]
 800f72c:	b183      	cbz	r3, 800f750 <_Balloc+0x50>
 800f72e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f736:	b9b8      	cbnz	r0, 800f768 <_Balloc+0x68>
 800f738:	2101      	movs	r1, #1
 800f73a:	fa01 f605 	lsl.w	r6, r1, r5
 800f73e:	1d72      	adds	r2, r6, #5
 800f740:	0092      	lsls	r2, r2, #2
 800f742:	4620      	mov	r0, r4
 800f744:	f7fc fe4e 	bl	800c3e4 <_calloc_r>
 800f748:	b160      	cbz	r0, 800f764 <_Balloc+0x64>
 800f74a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f74e:	e00e      	b.n	800f76e <_Balloc+0x6e>
 800f750:	2221      	movs	r2, #33	; 0x21
 800f752:	2104      	movs	r1, #4
 800f754:	4620      	mov	r0, r4
 800f756:	f7fc fe45 	bl	800c3e4 <_calloc_r>
 800f75a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f75c:	60f0      	str	r0, [r6, #12]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d1e4      	bne.n	800f72e <_Balloc+0x2e>
 800f764:	2000      	movs	r0, #0
 800f766:	bd70      	pop	{r4, r5, r6, pc}
 800f768:	6802      	ldr	r2, [r0, #0]
 800f76a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f76e:	2300      	movs	r3, #0
 800f770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f774:	e7f7      	b.n	800f766 <_Balloc+0x66>
 800f776:	bf00      	nop
 800f778:	08012511 	.word	0x08012511
 800f77c:	08012670 	.word	0x08012670

0800f780 <_Bfree>:
 800f780:	b570      	push	{r4, r5, r6, lr}
 800f782:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f784:	4605      	mov	r5, r0
 800f786:	460c      	mov	r4, r1
 800f788:	b976      	cbnz	r6, 800f7a8 <_Bfree+0x28>
 800f78a:	2010      	movs	r0, #16
 800f78c:	f7fc fde0 	bl	800c350 <malloc>
 800f790:	4602      	mov	r2, r0
 800f792:	6268      	str	r0, [r5, #36]	; 0x24
 800f794:	b920      	cbnz	r0, 800f7a0 <_Bfree+0x20>
 800f796:	4b09      	ldr	r3, [pc, #36]	; (800f7bc <_Bfree+0x3c>)
 800f798:	4809      	ldr	r0, [pc, #36]	; (800f7c0 <_Bfree+0x40>)
 800f79a:	218a      	movs	r1, #138	; 0x8a
 800f79c:	f7fe fc74 	bl	800e088 <__assert_func>
 800f7a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f7a4:	6006      	str	r6, [r0, #0]
 800f7a6:	60c6      	str	r6, [r0, #12]
 800f7a8:	b13c      	cbz	r4, 800f7ba <_Bfree+0x3a>
 800f7aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f7ac:	6862      	ldr	r2, [r4, #4]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7b4:	6021      	str	r1, [r4, #0]
 800f7b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
 800f7bc:	08012511 	.word	0x08012511
 800f7c0:	08012670 	.word	0x08012670

0800f7c4 <__multadd>:
 800f7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c8:	690d      	ldr	r5, [r1, #16]
 800f7ca:	4607      	mov	r7, r0
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	461e      	mov	r6, r3
 800f7d0:	f101 0c14 	add.w	ip, r1, #20
 800f7d4:	2000      	movs	r0, #0
 800f7d6:	f8dc 3000 	ldr.w	r3, [ip]
 800f7da:	b299      	uxth	r1, r3
 800f7dc:	fb02 6101 	mla	r1, r2, r1, r6
 800f7e0:	0c1e      	lsrs	r6, r3, #16
 800f7e2:	0c0b      	lsrs	r3, r1, #16
 800f7e4:	fb02 3306 	mla	r3, r2, r6, r3
 800f7e8:	b289      	uxth	r1, r1
 800f7ea:	3001      	adds	r0, #1
 800f7ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f7f0:	4285      	cmp	r5, r0
 800f7f2:	f84c 1b04 	str.w	r1, [ip], #4
 800f7f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f7fa:	dcec      	bgt.n	800f7d6 <__multadd+0x12>
 800f7fc:	b30e      	cbz	r6, 800f842 <__multadd+0x7e>
 800f7fe:	68a3      	ldr	r3, [r4, #8]
 800f800:	42ab      	cmp	r3, r5
 800f802:	dc19      	bgt.n	800f838 <__multadd+0x74>
 800f804:	6861      	ldr	r1, [r4, #4]
 800f806:	4638      	mov	r0, r7
 800f808:	3101      	adds	r1, #1
 800f80a:	f7ff ff79 	bl	800f700 <_Balloc>
 800f80e:	4680      	mov	r8, r0
 800f810:	b928      	cbnz	r0, 800f81e <__multadd+0x5a>
 800f812:	4602      	mov	r2, r0
 800f814:	4b0c      	ldr	r3, [pc, #48]	; (800f848 <__multadd+0x84>)
 800f816:	480d      	ldr	r0, [pc, #52]	; (800f84c <__multadd+0x88>)
 800f818:	21b5      	movs	r1, #181	; 0xb5
 800f81a:	f7fe fc35 	bl	800e088 <__assert_func>
 800f81e:	6922      	ldr	r2, [r4, #16]
 800f820:	3202      	adds	r2, #2
 800f822:	f104 010c 	add.w	r1, r4, #12
 800f826:	0092      	lsls	r2, r2, #2
 800f828:	300c      	adds	r0, #12
 800f82a:	f7fc fda1 	bl	800c370 <memcpy>
 800f82e:	4621      	mov	r1, r4
 800f830:	4638      	mov	r0, r7
 800f832:	f7ff ffa5 	bl	800f780 <_Bfree>
 800f836:	4644      	mov	r4, r8
 800f838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f83c:	3501      	adds	r5, #1
 800f83e:	615e      	str	r6, [r3, #20]
 800f840:	6125      	str	r5, [r4, #16]
 800f842:	4620      	mov	r0, r4
 800f844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f848:	08012583 	.word	0x08012583
 800f84c:	08012670 	.word	0x08012670

0800f850 <__s2b>:
 800f850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f854:	460c      	mov	r4, r1
 800f856:	4615      	mov	r5, r2
 800f858:	461f      	mov	r7, r3
 800f85a:	2209      	movs	r2, #9
 800f85c:	3308      	adds	r3, #8
 800f85e:	4606      	mov	r6, r0
 800f860:	fb93 f3f2 	sdiv	r3, r3, r2
 800f864:	2100      	movs	r1, #0
 800f866:	2201      	movs	r2, #1
 800f868:	429a      	cmp	r2, r3
 800f86a:	db09      	blt.n	800f880 <__s2b+0x30>
 800f86c:	4630      	mov	r0, r6
 800f86e:	f7ff ff47 	bl	800f700 <_Balloc>
 800f872:	b940      	cbnz	r0, 800f886 <__s2b+0x36>
 800f874:	4602      	mov	r2, r0
 800f876:	4b19      	ldr	r3, [pc, #100]	; (800f8dc <__s2b+0x8c>)
 800f878:	4819      	ldr	r0, [pc, #100]	; (800f8e0 <__s2b+0x90>)
 800f87a:	21ce      	movs	r1, #206	; 0xce
 800f87c:	f7fe fc04 	bl	800e088 <__assert_func>
 800f880:	0052      	lsls	r2, r2, #1
 800f882:	3101      	adds	r1, #1
 800f884:	e7f0      	b.n	800f868 <__s2b+0x18>
 800f886:	9b08      	ldr	r3, [sp, #32]
 800f888:	6143      	str	r3, [r0, #20]
 800f88a:	2d09      	cmp	r5, #9
 800f88c:	f04f 0301 	mov.w	r3, #1
 800f890:	6103      	str	r3, [r0, #16]
 800f892:	dd16      	ble.n	800f8c2 <__s2b+0x72>
 800f894:	f104 0909 	add.w	r9, r4, #9
 800f898:	46c8      	mov	r8, r9
 800f89a:	442c      	add	r4, r5
 800f89c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f8a0:	4601      	mov	r1, r0
 800f8a2:	3b30      	subs	r3, #48	; 0x30
 800f8a4:	220a      	movs	r2, #10
 800f8a6:	4630      	mov	r0, r6
 800f8a8:	f7ff ff8c 	bl	800f7c4 <__multadd>
 800f8ac:	45a0      	cmp	r8, r4
 800f8ae:	d1f5      	bne.n	800f89c <__s2b+0x4c>
 800f8b0:	f1a5 0408 	sub.w	r4, r5, #8
 800f8b4:	444c      	add	r4, r9
 800f8b6:	1b2d      	subs	r5, r5, r4
 800f8b8:	1963      	adds	r3, r4, r5
 800f8ba:	42bb      	cmp	r3, r7
 800f8bc:	db04      	blt.n	800f8c8 <__s2b+0x78>
 800f8be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c2:	340a      	adds	r4, #10
 800f8c4:	2509      	movs	r5, #9
 800f8c6:	e7f6      	b.n	800f8b6 <__s2b+0x66>
 800f8c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f8cc:	4601      	mov	r1, r0
 800f8ce:	3b30      	subs	r3, #48	; 0x30
 800f8d0:	220a      	movs	r2, #10
 800f8d2:	4630      	mov	r0, r6
 800f8d4:	f7ff ff76 	bl	800f7c4 <__multadd>
 800f8d8:	e7ee      	b.n	800f8b8 <__s2b+0x68>
 800f8da:	bf00      	nop
 800f8dc:	08012583 	.word	0x08012583
 800f8e0:	08012670 	.word	0x08012670

0800f8e4 <__hi0bits>:
 800f8e4:	0c03      	lsrs	r3, r0, #16
 800f8e6:	041b      	lsls	r3, r3, #16
 800f8e8:	b9d3      	cbnz	r3, 800f920 <__hi0bits+0x3c>
 800f8ea:	0400      	lsls	r0, r0, #16
 800f8ec:	2310      	movs	r3, #16
 800f8ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f8f2:	bf04      	itt	eq
 800f8f4:	0200      	lsleq	r0, r0, #8
 800f8f6:	3308      	addeq	r3, #8
 800f8f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f8fc:	bf04      	itt	eq
 800f8fe:	0100      	lsleq	r0, r0, #4
 800f900:	3304      	addeq	r3, #4
 800f902:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f906:	bf04      	itt	eq
 800f908:	0080      	lsleq	r0, r0, #2
 800f90a:	3302      	addeq	r3, #2
 800f90c:	2800      	cmp	r0, #0
 800f90e:	db05      	blt.n	800f91c <__hi0bits+0x38>
 800f910:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f914:	f103 0301 	add.w	r3, r3, #1
 800f918:	bf08      	it	eq
 800f91a:	2320      	moveq	r3, #32
 800f91c:	4618      	mov	r0, r3
 800f91e:	4770      	bx	lr
 800f920:	2300      	movs	r3, #0
 800f922:	e7e4      	b.n	800f8ee <__hi0bits+0xa>

0800f924 <__lo0bits>:
 800f924:	6803      	ldr	r3, [r0, #0]
 800f926:	f013 0207 	ands.w	r2, r3, #7
 800f92a:	4601      	mov	r1, r0
 800f92c:	d00b      	beq.n	800f946 <__lo0bits+0x22>
 800f92e:	07da      	lsls	r2, r3, #31
 800f930:	d423      	bmi.n	800f97a <__lo0bits+0x56>
 800f932:	0798      	lsls	r0, r3, #30
 800f934:	bf49      	itett	mi
 800f936:	085b      	lsrmi	r3, r3, #1
 800f938:	089b      	lsrpl	r3, r3, #2
 800f93a:	2001      	movmi	r0, #1
 800f93c:	600b      	strmi	r3, [r1, #0]
 800f93e:	bf5c      	itt	pl
 800f940:	600b      	strpl	r3, [r1, #0]
 800f942:	2002      	movpl	r0, #2
 800f944:	4770      	bx	lr
 800f946:	b298      	uxth	r0, r3
 800f948:	b9a8      	cbnz	r0, 800f976 <__lo0bits+0x52>
 800f94a:	0c1b      	lsrs	r3, r3, #16
 800f94c:	2010      	movs	r0, #16
 800f94e:	b2da      	uxtb	r2, r3
 800f950:	b90a      	cbnz	r2, 800f956 <__lo0bits+0x32>
 800f952:	3008      	adds	r0, #8
 800f954:	0a1b      	lsrs	r3, r3, #8
 800f956:	071a      	lsls	r2, r3, #28
 800f958:	bf04      	itt	eq
 800f95a:	091b      	lsreq	r3, r3, #4
 800f95c:	3004      	addeq	r0, #4
 800f95e:	079a      	lsls	r2, r3, #30
 800f960:	bf04      	itt	eq
 800f962:	089b      	lsreq	r3, r3, #2
 800f964:	3002      	addeq	r0, #2
 800f966:	07da      	lsls	r2, r3, #31
 800f968:	d403      	bmi.n	800f972 <__lo0bits+0x4e>
 800f96a:	085b      	lsrs	r3, r3, #1
 800f96c:	f100 0001 	add.w	r0, r0, #1
 800f970:	d005      	beq.n	800f97e <__lo0bits+0x5a>
 800f972:	600b      	str	r3, [r1, #0]
 800f974:	4770      	bx	lr
 800f976:	4610      	mov	r0, r2
 800f978:	e7e9      	b.n	800f94e <__lo0bits+0x2a>
 800f97a:	2000      	movs	r0, #0
 800f97c:	4770      	bx	lr
 800f97e:	2020      	movs	r0, #32
 800f980:	4770      	bx	lr
	...

0800f984 <__i2b>:
 800f984:	b510      	push	{r4, lr}
 800f986:	460c      	mov	r4, r1
 800f988:	2101      	movs	r1, #1
 800f98a:	f7ff feb9 	bl	800f700 <_Balloc>
 800f98e:	4602      	mov	r2, r0
 800f990:	b928      	cbnz	r0, 800f99e <__i2b+0x1a>
 800f992:	4b05      	ldr	r3, [pc, #20]	; (800f9a8 <__i2b+0x24>)
 800f994:	4805      	ldr	r0, [pc, #20]	; (800f9ac <__i2b+0x28>)
 800f996:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f99a:	f7fe fb75 	bl	800e088 <__assert_func>
 800f99e:	2301      	movs	r3, #1
 800f9a0:	6144      	str	r4, [r0, #20]
 800f9a2:	6103      	str	r3, [r0, #16]
 800f9a4:	bd10      	pop	{r4, pc}
 800f9a6:	bf00      	nop
 800f9a8:	08012583 	.word	0x08012583
 800f9ac:	08012670 	.word	0x08012670

0800f9b0 <__multiply>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	4691      	mov	r9, r2
 800f9b6:	690a      	ldr	r2, [r1, #16]
 800f9b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	bfb8      	it	lt
 800f9c0:	460b      	movlt	r3, r1
 800f9c2:	460c      	mov	r4, r1
 800f9c4:	bfbc      	itt	lt
 800f9c6:	464c      	movlt	r4, r9
 800f9c8:	4699      	movlt	r9, r3
 800f9ca:	6927      	ldr	r7, [r4, #16]
 800f9cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f9d0:	68a3      	ldr	r3, [r4, #8]
 800f9d2:	6861      	ldr	r1, [r4, #4]
 800f9d4:	eb07 060a 	add.w	r6, r7, sl
 800f9d8:	42b3      	cmp	r3, r6
 800f9da:	b085      	sub	sp, #20
 800f9dc:	bfb8      	it	lt
 800f9de:	3101      	addlt	r1, #1
 800f9e0:	f7ff fe8e 	bl	800f700 <_Balloc>
 800f9e4:	b930      	cbnz	r0, 800f9f4 <__multiply+0x44>
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	4b44      	ldr	r3, [pc, #272]	; (800fafc <__multiply+0x14c>)
 800f9ea:	4845      	ldr	r0, [pc, #276]	; (800fb00 <__multiply+0x150>)
 800f9ec:	f240 115d 	movw	r1, #349	; 0x15d
 800f9f0:	f7fe fb4a 	bl	800e088 <__assert_func>
 800f9f4:	f100 0514 	add.w	r5, r0, #20
 800f9f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f9fc:	462b      	mov	r3, r5
 800f9fe:	2200      	movs	r2, #0
 800fa00:	4543      	cmp	r3, r8
 800fa02:	d321      	bcc.n	800fa48 <__multiply+0x98>
 800fa04:	f104 0314 	add.w	r3, r4, #20
 800fa08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fa0c:	f109 0314 	add.w	r3, r9, #20
 800fa10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fa14:	9202      	str	r2, [sp, #8]
 800fa16:	1b3a      	subs	r2, r7, r4
 800fa18:	3a15      	subs	r2, #21
 800fa1a:	f022 0203 	bic.w	r2, r2, #3
 800fa1e:	3204      	adds	r2, #4
 800fa20:	f104 0115 	add.w	r1, r4, #21
 800fa24:	428f      	cmp	r7, r1
 800fa26:	bf38      	it	cc
 800fa28:	2204      	movcc	r2, #4
 800fa2a:	9201      	str	r2, [sp, #4]
 800fa2c:	9a02      	ldr	r2, [sp, #8]
 800fa2e:	9303      	str	r3, [sp, #12]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d80c      	bhi.n	800fa4e <__multiply+0x9e>
 800fa34:	2e00      	cmp	r6, #0
 800fa36:	dd03      	ble.n	800fa40 <__multiply+0x90>
 800fa38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d05a      	beq.n	800faf6 <__multiply+0x146>
 800fa40:	6106      	str	r6, [r0, #16]
 800fa42:	b005      	add	sp, #20
 800fa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa48:	f843 2b04 	str.w	r2, [r3], #4
 800fa4c:	e7d8      	b.n	800fa00 <__multiply+0x50>
 800fa4e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa52:	f1ba 0f00 	cmp.w	sl, #0
 800fa56:	d024      	beq.n	800faa2 <__multiply+0xf2>
 800fa58:	f104 0e14 	add.w	lr, r4, #20
 800fa5c:	46a9      	mov	r9, r5
 800fa5e:	f04f 0c00 	mov.w	ip, #0
 800fa62:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa66:	f8d9 1000 	ldr.w	r1, [r9]
 800fa6a:	fa1f fb82 	uxth.w	fp, r2
 800fa6e:	b289      	uxth	r1, r1
 800fa70:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa78:	f8d9 2000 	ldr.w	r2, [r9]
 800fa7c:	4461      	add	r1, ip
 800fa7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa82:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa8a:	b289      	uxth	r1, r1
 800fa8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa90:	4577      	cmp	r7, lr
 800fa92:	f849 1b04 	str.w	r1, [r9], #4
 800fa96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa9a:	d8e2      	bhi.n	800fa62 <__multiply+0xb2>
 800fa9c:	9a01      	ldr	r2, [sp, #4]
 800fa9e:	f845 c002 	str.w	ip, [r5, r2]
 800faa2:	9a03      	ldr	r2, [sp, #12]
 800faa4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800faa8:	3304      	adds	r3, #4
 800faaa:	f1b9 0f00 	cmp.w	r9, #0
 800faae:	d020      	beq.n	800faf2 <__multiply+0x142>
 800fab0:	6829      	ldr	r1, [r5, #0]
 800fab2:	f104 0c14 	add.w	ip, r4, #20
 800fab6:	46ae      	mov	lr, r5
 800fab8:	f04f 0a00 	mov.w	sl, #0
 800fabc:	f8bc b000 	ldrh.w	fp, [ip]
 800fac0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fac4:	fb09 220b 	mla	r2, r9, fp, r2
 800fac8:	4492      	add	sl, r2
 800faca:	b289      	uxth	r1, r1
 800facc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fad0:	f84e 1b04 	str.w	r1, [lr], #4
 800fad4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fad8:	f8be 1000 	ldrh.w	r1, [lr]
 800fadc:	0c12      	lsrs	r2, r2, #16
 800fade:	fb09 1102 	mla	r1, r9, r2, r1
 800fae2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fae6:	4567      	cmp	r7, ip
 800fae8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800faec:	d8e6      	bhi.n	800fabc <__multiply+0x10c>
 800faee:	9a01      	ldr	r2, [sp, #4]
 800faf0:	50a9      	str	r1, [r5, r2]
 800faf2:	3504      	adds	r5, #4
 800faf4:	e79a      	b.n	800fa2c <__multiply+0x7c>
 800faf6:	3e01      	subs	r6, #1
 800faf8:	e79c      	b.n	800fa34 <__multiply+0x84>
 800fafa:	bf00      	nop
 800fafc:	08012583 	.word	0x08012583
 800fb00:	08012670 	.word	0x08012670

0800fb04 <__pow5mult>:
 800fb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb08:	4615      	mov	r5, r2
 800fb0a:	f012 0203 	ands.w	r2, r2, #3
 800fb0e:	4606      	mov	r6, r0
 800fb10:	460f      	mov	r7, r1
 800fb12:	d007      	beq.n	800fb24 <__pow5mult+0x20>
 800fb14:	4c25      	ldr	r4, [pc, #148]	; (800fbac <__pow5mult+0xa8>)
 800fb16:	3a01      	subs	r2, #1
 800fb18:	2300      	movs	r3, #0
 800fb1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fb1e:	f7ff fe51 	bl	800f7c4 <__multadd>
 800fb22:	4607      	mov	r7, r0
 800fb24:	10ad      	asrs	r5, r5, #2
 800fb26:	d03d      	beq.n	800fba4 <__pow5mult+0xa0>
 800fb28:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb2a:	b97c      	cbnz	r4, 800fb4c <__pow5mult+0x48>
 800fb2c:	2010      	movs	r0, #16
 800fb2e:	f7fc fc0f 	bl	800c350 <malloc>
 800fb32:	4602      	mov	r2, r0
 800fb34:	6270      	str	r0, [r6, #36]	; 0x24
 800fb36:	b928      	cbnz	r0, 800fb44 <__pow5mult+0x40>
 800fb38:	4b1d      	ldr	r3, [pc, #116]	; (800fbb0 <__pow5mult+0xac>)
 800fb3a:	481e      	ldr	r0, [pc, #120]	; (800fbb4 <__pow5mult+0xb0>)
 800fb3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb40:	f7fe faa2 	bl	800e088 <__assert_func>
 800fb44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb48:	6004      	str	r4, [r0, #0]
 800fb4a:	60c4      	str	r4, [r0, #12]
 800fb4c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb54:	b94c      	cbnz	r4, 800fb6a <__pow5mult+0x66>
 800fb56:	f240 2171 	movw	r1, #625	; 0x271
 800fb5a:	4630      	mov	r0, r6
 800fb5c:	f7ff ff12 	bl	800f984 <__i2b>
 800fb60:	2300      	movs	r3, #0
 800fb62:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb66:	4604      	mov	r4, r0
 800fb68:	6003      	str	r3, [r0, #0]
 800fb6a:	f04f 0900 	mov.w	r9, #0
 800fb6e:	07eb      	lsls	r3, r5, #31
 800fb70:	d50a      	bpl.n	800fb88 <__pow5mult+0x84>
 800fb72:	4639      	mov	r1, r7
 800fb74:	4622      	mov	r2, r4
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7ff ff1a 	bl	800f9b0 <__multiply>
 800fb7c:	4639      	mov	r1, r7
 800fb7e:	4680      	mov	r8, r0
 800fb80:	4630      	mov	r0, r6
 800fb82:	f7ff fdfd 	bl	800f780 <_Bfree>
 800fb86:	4647      	mov	r7, r8
 800fb88:	106d      	asrs	r5, r5, #1
 800fb8a:	d00b      	beq.n	800fba4 <__pow5mult+0xa0>
 800fb8c:	6820      	ldr	r0, [r4, #0]
 800fb8e:	b938      	cbnz	r0, 800fba0 <__pow5mult+0x9c>
 800fb90:	4622      	mov	r2, r4
 800fb92:	4621      	mov	r1, r4
 800fb94:	4630      	mov	r0, r6
 800fb96:	f7ff ff0b 	bl	800f9b0 <__multiply>
 800fb9a:	6020      	str	r0, [r4, #0]
 800fb9c:	f8c0 9000 	str.w	r9, [r0]
 800fba0:	4604      	mov	r4, r0
 800fba2:	e7e4      	b.n	800fb6e <__pow5mult+0x6a>
 800fba4:	4638      	mov	r0, r7
 800fba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbaa:	bf00      	nop
 800fbac:	080127c0 	.word	0x080127c0
 800fbb0:	08012511 	.word	0x08012511
 800fbb4:	08012670 	.word	0x08012670

0800fbb8 <__lshift>:
 800fbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbbc:	460c      	mov	r4, r1
 800fbbe:	6849      	ldr	r1, [r1, #4]
 800fbc0:	6923      	ldr	r3, [r4, #16]
 800fbc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fbc6:	68a3      	ldr	r3, [r4, #8]
 800fbc8:	4607      	mov	r7, r0
 800fbca:	4691      	mov	r9, r2
 800fbcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fbd0:	f108 0601 	add.w	r6, r8, #1
 800fbd4:	42b3      	cmp	r3, r6
 800fbd6:	db0b      	blt.n	800fbf0 <__lshift+0x38>
 800fbd8:	4638      	mov	r0, r7
 800fbda:	f7ff fd91 	bl	800f700 <_Balloc>
 800fbde:	4605      	mov	r5, r0
 800fbe0:	b948      	cbnz	r0, 800fbf6 <__lshift+0x3e>
 800fbe2:	4602      	mov	r2, r0
 800fbe4:	4b2a      	ldr	r3, [pc, #168]	; (800fc90 <__lshift+0xd8>)
 800fbe6:	482b      	ldr	r0, [pc, #172]	; (800fc94 <__lshift+0xdc>)
 800fbe8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fbec:	f7fe fa4c 	bl	800e088 <__assert_func>
 800fbf0:	3101      	adds	r1, #1
 800fbf2:	005b      	lsls	r3, r3, #1
 800fbf4:	e7ee      	b.n	800fbd4 <__lshift+0x1c>
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f100 0114 	add.w	r1, r0, #20
 800fbfc:	f100 0210 	add.w	r2, r0, #16
 800fc00:	4618      	mov	r0, r3
 800fc02:	4553      	cmp	r3, sl
 800fc04:	db37      	blt.n	800fc76 <__lshift+0xbe>
 800fc06:	6920      	ldr	r0, [r4, #16]
 800fc08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fc0c:	f104 0314 	add.w	r3, r4, #20
 800fc10:	f019 091f 	ands.w	r9, r9, #31
 800fc14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fc18:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fc1c:	d02f      	beq.n	800fc7e <__lshift+0xc6>
 800fc1e:	f1c9 0e20 	rsb	lr, r9, #32
 800fc22:	468a      	mov	sl, r1
 800fc24:	f04f 0c00 	mov.w	ip, #0
 800fc28:	681a      	ldr	r2, [r3, #0]
 800fc2a:	fa02 f209 	lsl.w	r2, r2, r9
 800fc2e:	ea42 020c 	orr.w	r2, r2, ip
 800fc32:	f84a 2b04 	str.w	r2, [sl], #4
 800fc36:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc3a:	4298      	cmp	r0, r3
 800fc3c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc40:	d8f2      	bhi.n	800fc28 <__lshift+0x70>
 800fc42:	1b03      	subs	r3, r0, r4
 800fc44:	3b15      	subs	r3, #21
 800fc46:	f023 0303 	bic.w	r3, r3, #3
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	f104 0215 	add.w	r2, r4, #21
 800fc50:	4290      	cmp	r0, r2
 800fc52:	bf38      	it	cc
 800fc54:	2304      	movcc	r3, #4
 800fc56:	f841 c003 	str.w	ip, [r1, r3]
 800fc5a:	f1bc 0f00 	cmp.w	ip, #0
 800fc5e:	d001      	beq.n	800fc64 <__lshift+0xac>
 800fc60:	f108 0602 	add.w	r6, r8, #2
 800fc64:	3e01      	subs	r6, #1
 800fc66:	4638      	mov	r0, r7
 800fc68:	612e      	str	r6, [r5, #16]
 800fc6a:	4621      	mov	r1, r4
 800fc6c:	f7ff fd88 	bl	800f780 <_Bfree>
 800fc70:	4628      	mov	r0, r5
 800fc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc76:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	e7c1      	b.n	800fc02 <__lshift+0x4a>
 800fc7e:	3904      	subs	r1, #4
 800fc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc84:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc88:	4298      	cmp	r0, r3
 800fc8a:	d8f9      	bhi.n	800fc80 <__lshift+0xc8>
 800fc8c:	e7ea      	b.n	800fc64 <__lshift+0xac>
 800fc8e:	bf00      	nop
 800fc90:	08012583 	.word	0x08012583
 800fc94:	08012670 	.word	0x08012670

0800fc98 <__mcmp>:
 800fc98:	b530      	push	{r4, r5, lr}
 800fc9a:	6902      	ldr	r2, [r0, #16]
 800fc9c:	690c      	ldr	r4, [r1, #16]
 800fc9e:	1b12      	subs	r2, r2, r4
 800fca0:	d10e      	bne.n	800fcc0 <__mcmp+0x28>
 800fca2:	f100 0314 	add.w	r3, r0, #20
 800fca6:	3114      	adds	r1, #20
 800fca8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fcac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fcb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fcb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fcb8:	42a5      	cmp	r5, r4
 800fcba:	d003      	beq.n	800fcc4 <__mcmp+0x2c>
 800fcbc:	d305      	bcc.n	800fcca <__mcmp+0x32>
 800fcbe:	2201      	movs	r2, #1
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	bd30      	pop	{r4, r5, pc}
 800fcc4:	4283      	cmp	r3, r0
 800fcc6:	d3f3      	bcc.n	800fcb0 <__mcmp+0x18>
 800fcc8:	e7fa      	b.n	800fcc0 <__mcmp+0x28>
 800fcca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcce:	e7f7      	b.n	800fcc0 <__mcmp+0x28>

0800fcd0 <__mdiff>:
 800fcd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcd4:	460c      	mov	r4, r1
 800fcd6:	4606      	mov	r6, r0
 800fcd8:	4611      	mov	r1, r2
 800fcda:	4620      	mov	r0, r4
 800fcdc:	4690      	mov	r8, r2
 800fcde:	f7ff ffdb 	bl	800fc98 <__mcmp>
 800fce2:	1e05      	subs	r5, r0, #0
 800fce4:	d110      	bne.n	800fd08 <__mdiff+0x38>
 800fce6:	4629      	mov	r1, r5
 800fce8:	4630      	mov	r0, r6
 800fcea:	f7ff fd09 	bl	800f700 <_Balloc>
 800fcee:	b930      	cbnz	r0, 800fcfe <__mdiff+0x2e>
 800fcf0:	4b3a      	ldr	r3, [pc, #232]	; (800fddc <__mdiff+0x10c>)
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	f240 2132 	movw	r1, #562	; 0x232
 800fcf8:	4839      	ldr	r0, [pc, #228]	; (800fde0 <__mdiff+0x110>)
 800fcfa:	f7fe f9c5 	bl	800e088 <__assert_func>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fd04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd08:	bfa4      	itt	ge
 800fd0a:	4643      	movge	r3, r8
 800fd0c:	46a0      	movge	r8, r4
 800fd0e:	4630      	mov	r0, r6
 800fd10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fd14:	bfa6      	itte	ge
 800fd16:	461c      	movge	r4, r3
 800fd18:	2500      	movge	r5, #0
 800fd1a:	2501      	movlt	r5, #1
 800fd1c:	f7ff fcf0 	bl	800f700 <_Balloc>
 800fd20:	b920      	cbnz	r0, 800fd2c <__mdiff+0x5c>
 800fd22:	4b2e      	ldr	r3, [pc, #184]	; (800fddc <__mdiff+0x10c>)
 800fd24:	4602      	mov	r2, r0
 800fd26:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd2a:	e7e5      	b.n	800fcf8 <__mdiff+0x28>
 800fd2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd30:	6926      	ldr	r6, [r4, #16]
 800fd32:	60c5      	str	r5, [r0, #12]
 800fd34:	f104 0914 	add.w	r9, r4, #20
 800fd38:	f108 0514 	add.w	r5, r8, #20
 800fd3c:	f100 0e14 	add.w	lr, r0, #20
 800fd40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd48:	f108 0210 	add.w	r2, r8, #16
 800fd4c:	46f2      	mov	sl, lr
 800fd4e:	2100      	movs	r1, #0
 800fd50:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd58:	fa1f f883 	uxth.w	r8, r3
 800fd5c:	fa11 f18b 	uxtah	r1, r1, fp
 800fd60:	0c1b      	lsrs	r3, r3, #16
 800fd62:	eba1 0808 	sub.w	r8, r1, r8
 800fd66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd6e:	fa1f f888 	uxth.w	r8, r8
 800fd72:	1419      	asrs	r1, r3, #16
 800fd74:	454e      	cmp	r6, r9
 800fd76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd7a:	f84a 3b04 	str.w	r3, [sl], #4
 800fd7e:	d8e7      	bhi.n	800fd50 <__mdiff+0x80>
 800fd80:	1b33      	subs	r3, r6, r4
 800fd82:	3b15      	subs	r3, #21
 800fd84:	f023 0303 	bic.w	r3, r3, #3
 800fd88:	3304      	adds	r3, #4
 800fd8a:	3415      	adds	r4, #21
 800fd8c:	42a6      	cmp	r6, r4
 800fd8e:	bf38      	it	cc
 800fd90:	2304      	movcc	r3, #4
 800fd92:	441d      	add	r5, r3
 800fd94:	4473      	add	r3, lr
 800fd96:	469e      	mov	lr, r3
 800fd98:	462e      	mov	r6, r5
 800fd9a:	4566      	cmp	r6, ip
 800fd9c:	d30e      	bcc.n	800fdbc <__mdiff+0xec>
 800fd9e:	f10c 0203 	add.w	r2, ip, #3
 800fda2:	1b52      	subs	r2, r2, r5
 800fda4:	f022 0203 	bic.w	r2, r2, #3
 800fda8:	3d03      	subs	r5, #3
 800fdaa:	45ac      	cmp	ip, r5
 800fdac:	bf38      	it	cc
 800fdae:	2200      	movcc	r2, #0
 800fdb0:	441a      	add	r2, r3
 800fdb2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fdb6:	b17b      	cbz	r3, 800fdd8 <__mdiff+0x108>
 800fdb8:	6107      	str	r7, [r0, #16]
 800fdba:	e7a3      	b.n	800fd04 <__mdiff+0x34>
 800fdbc:	f856 8b04 	ldr.w	r8, [r6], #4
 800fdc0:	fa11 f288 	uxtah	r2, r1, r8
 800fdc4:	1414      	asrs	r4, r2, #16
 800fdc6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fdca:	b292      	uxth	r2, r2
 800fdcc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fdd0:	f84e 2b04 	str.w	r2, [lr], #4
 800fdd4:	1421      	asrs	r1, r4, #16
 800fdd6:	e7e0      	b.n	800fd9a <__mdiff+0xca>
 800fdd8:	3f01      	subs	r7, #1
 800fdda:	e7ea      	b.n	800fdb2 <__mdiff+0xe2>
 800fddc:	08012583 	.word	0x08012583
 800fde0:	08012670 	.word	0x08012670

0800fde4 <__ulp>:
 800fde4:	b082      	sub	sp, #8
 800fde6:	ed8d 0b00 	vstr	d0, [sp]
 800fdea:	9b01      	ldr	r3, [sp, #4]
 800fdec:	4912      	ldr	r1, [pc, #72]	; (800fe38 <__ulp+0x54>)
 800fdee:	4019      	ands	r1, r3
 800fdf0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fdf4:	2900      	cmp	r1, #0
 800fdf6:	dd05      	ble.n	800fe04 <__ulp+0x20>
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	460b      	mov	r3, r1
 800fdfc:	ec43 2b10 	vmov	d0, r2, r3
 800fe00:	b002      	add	sp, #8
 800fe02:	4770      	bx	lr
 800fe04:	4249      	negs	r1, r1
 800fe06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fe0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fe0e:	f04f 0200 	mov.w	r2, #0
 800fe12:	f04f 0300 	mov.w	r3, #0
 800fe16:	da04      	bge.n	800fe22 <__ulp+0x3e>
 800fe18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fe1c:	fa41 f300 	asr.w	r3, r1, r0
 800fe20:	e7ec      	b.n	800fdfc <__ulp+0x18>
 800fe22:	f1a0 0114 	sub.w	r1, r0, #20
 800fe26:	291e      	cmp	r1, #30
 800fe28:	bfda      	itte	le
 800fe2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fe2e:	fa20 f101 	lsrle.w	r1, r0, r1
 800fe32:	2101      	movgt	r1, #1
 800fe34:	460a      	mov	r2, r1
 800fe36:	e7e1      	b.n	800fdfc <__ulp+0x18>
 800fe38:	7ff00000 	.word	0x7ff00000

0800fe3c <__b2d>:
 800fe3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe3e:	6905      	ldr	r5, [r0, #16]
 800fe40:	f100 0714 	add.w	r7, r0, #20
 800fe44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe48:	1f2e      	subs	r6, r5, #4
 800fe4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f7ff fd48 	bl	800f8e4 <__hi0bits>
 800fe54:	f1c0 0320 	rsb	r3, r0, #32
 800fe58:	280a      	cmp	r0, #10
 800fe5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fed8 <__b2d+0x9c>
 800fe5e:	600b      	str	r3, [r1, #0]
 800fe60:	dc14      	bgt.n	800fe8c <__b2d+0x50>
 800fe62:	f1c0 0e0b 	rsb	lr, r0, #11
 800fe66:	fa24 f10e 	lsr.w	r1, r4, lr
 800fe6a:	42b7      	cmp	r7, r6
 800fe6c:	ea41 030c 	orr.w	r3, r1, ip
 800fe70:	bf34      	ite	cc
 800fe72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe76:	2100      	movcs	r1, #0
 800fe78:	3015      	adds	r0, #21
 800fe7a:	fa04 f000 	lsl.w	r0, r4, r0
 800fe7e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fe82:	ea40 0201 	orr.w	r2, r0, r1
 800fe86:	ec43 2b10 	vmov	d0, r2, r3
 800fe8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe8c:	42b7      	cmp	r7, r6
 800fe8e:	bf3a      	itte	cc
 800fe90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe94:	f1a5 0608 	subcc.w	r6, r5, #8
 800fe98:	2100      	movcs	r1, #0
 800fe9a:	380b      	subs	r0, #11
 800fe9c:	d017      	beq.n	800fece <__b2d+0x92>
 800fe9e:	f1c0 0c20 	rsb	ip, r0, #32
 800fea2:	fa04 f500 	lsl.w	r5, r4, r0
 800fea6:	42be      	cmp	r6, r7
 800fea8:	fa21 f40c 	lsr.w	r4, r1, ip
 800feac:	ea45 0504 	orr.w	r5, r5, r4
 800feb0:	bf8c      	ite	hi
 800feb2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800feb6:	2400      	movls	r4, #0
 800feb8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800febc:	fa01 f000 	lsl.w	r0, r1, r0
 800fec0:	fa24 f40c 	lsr.w	r4, r4, ip
 800fec4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fec8:	ea40 0204 	orr.w	r2, r0, r4
 800fecc:	e7db      	b.n	800fe86 <__b2d+0x4a>
 800fece:	ea44 030c 	orr.w	r3, r4, ip
 800fed2:	460a      	mov	r2, r1
 800fed4:	e7d7      	b.n	800fe86 <__b2d+0x4a>
 800fed6:	bf00      	nop
 800fed8:	3ff00000 	.word	0x3ff00000

0800fedc <__d2b>:
 800fedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fee0:	4689      	mov	r9, r1
 800fee2:	2101      	movs	r1, #1
 800fee4:	ec57 6b10 	vmov	r6, r7, d0
 800fee8:	4690      	mov	r8, r2
 800feea:	f7ff fc09 	bl	800f700 <_Balloc>
 800feee:	4604      	mov	r4, r0
 800fef0:	b930      	cbnz	r0, 800ff00 <__d2b+0x24>
 800fef2:	4602      	mov	r2, r0
 800fef4:	4b25      	ldr	r3, [pc, #148]	; (800ff8c <__d2b+0xb0>)
 800fef6:	4826      	ldr	r0, [pc, #152]	; (800ff90 <__d2b+0xb4>)
 800fef8:	f240 310a 	movw	r1, #778	; 0x30a
 800fefc:	f7fe f8c4 	bl	800e088 <__assert_func>
 800ff00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ff04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ff08:	bb35      	cbnz	r5, 800ff58 <__d2b+0x7c>
 800ff0a:	2e00      	cmp	r6, #0
 800ff0c:	9301      	str	r3, [sp, #4]
 800ff0e:	d028      	beq.n	800ff62 <__d2b+0x86>
 800ff10:	4668      	mov	r0, sp
 800ff12:	9600      	str	r6, [sp, #0]
 800ff14:	f7ff fd06 	bl	800f924 <__lo0bits>
 800ff18:	9900      	ldr	r1, [sp, #0]
 800ff1a:	b300      	cbz	r0, 800ff5e <__d2b+0x82>
 800ff1c:	9a01      	ldr	r2, [sp, #4]
 800ff1e:	f1c0 0320 	rsb	r3, r0, #32
 800ff22:	fa02 f303 	lsl.w	r3, r2, r3
 800ff26:	430b      	orrs	r3, r1
 800ff28:	40c2      	lsrs	r2, r0
 800ff2a:	6163      	str	r3, [r4, #20]
 800ff2c:	9201      	str	r2, [sp, #4]
 800ff2e:	9b01      	ldr	r3, [sp, #4]
 800ff30:	61a3      	str	r3, [r4, #24]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	bf14      	ite	ne
 800ff36:	2202      	movne	r2, #2
 800ff38:	2201      	moveq	r2, #1
 800ff3a:	6122      	str	r2, [r4, #16]
 800ff3c:	b1d5      	cbz	r5, 800ff74 <__d2b+0x98>
 800ff3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff42:	4405      	add	r5, r0
 800ff44:	f8c9 5000 	str.w	r5, [r9]
 800ff48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff4c:	f8c8 0000 	str.w	r0, [r8]
 800ff50:	4620      	mov	r0, r4
 800ff52:	b003      	add	sp, #12
 800ff54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff5c:	e7d5      	b.n	800ff0a <__d2b+0x2e>
 800ff5e:	6161      	str	r1, [r4, #20]
 800ff60:	e7e5      	b.n	800ff2e <__d2b+0x52>
 800ff62:	a801      	add	r0, sp, #4
 800ff64:	f7ff fcde 	bl	800f924 <__lo0bits>
 800ff68:	9b01      	ldr	r3, [sp, #4]
 800ff6a:	6163      	str	r3, [r4, #20]
 800ff6c:	2201      	movs	r2, #1
 800ff6e:	6122      	str	r2, [r4, #16]
 800ff70:	3020      	adds	r0, #32
 800ff72:	e7e3      	b.n	800ff3c <__d2b+0x60>
 800ff74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff7c:	f8c9 0000 	str.w	r0, [r9]
 800ff80:	6918      	ldr	r0, [r3, #16]
 800ff82:	f7ff fcaf 	bl	800f8e4 <__hi0bits>
 800ff86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff8a:	e7df      	b.n	800ff4c <__d2b+0x70>
 800ff8c:	08012583 	.word	0x08012583
 800ff90:	08012670 	.word	0x08012670

0800ff94 <__ratio>:
 800ff94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff98:	4688      	mov	r8, r1
 800ff9a:	4669      	mov	r1, sp
 800ff9c:	4681      	mov	r9, r0
 800ff9e:	f7ff ff4d 	bl	800fe3c <__b2d>
 800ffa2:	a901      	add	r1, sp, #4
 800ffa4:	4640      	mov	r0, r8
 800ffa6:	ec55 4b10 	vmov	r4, r5, d0
 800ffaa:	f7ff ff47 	bl	800fe3c <__b2d>
 800ffae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ffb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ffb6:	eba3 0c02 	sub.w	ip, r3, r2
 800ffba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ffbe:	1a9b      	subs	r3, r3, r2
 800ffc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ffc4:	ec51 0b10 	vmov	r0, r1, d0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	bfd6      	itet	le
 800ffcc:	460a      	movle	r2, r1
 800ffce:	462a      	movgt	r2, r5
 800ffd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ffd4:	468b      	mov	fp, r1
 800ffd6:	462f      	mov	r7, r5
 800ffd8:	bfd4      	ite	le
 800ffda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ffde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	ee10 2a10 	vmov	r2, s0
 800ffe8:	465b      	mov	r3, fp
 800ffea:	4639      	mov	r1, r7
 800ffec:	f7f0 fc4e 	bl	800088c <__aeabi_ddiv>
 800fff0:	ec41 0b10 	vmov	d0, r0, r1
 800fff4:	b003      	add	sp, #12
 800fff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fffa <__copybits>:
 800fffa:	3901      	subs	r1, #1
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	1149      	asrs	r1, r1, #5
 8010000:	6914      	ldr	r4, [r2, #16]
 8010002:	3101      	adds	r1, #1
 8010004:	f102 0314 	add.w	r3, r2, #20
 8010008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801000c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010010:	1f05      	subs	r5, r0, #4
 8010012:	42a3      	cmp	r3, r4
 8010014:	d30c      	bcc.n	8010030 <__copybits+0x36>
 8010016:	1aa3      	subs	r3, r4, r2
 8010018:	3b11      	subs	r3, #17
 801001a:	f023 0303 	bic.w	r3, r3, #3
 801001e:	3211      	adds	r2, #17
 8010020:	42a2      	cmp	r2, r4
 8010022:	bf88      	it	hi
 8010024:	2300      	movhi	r3, #0
 8010026:	4418      	add	r0, r3
 8010028:	2300      	movs	r3, #0
 801002a:	4288      	cmp	r0, r1
 801002c:	d305      	bcc.n	801003a <__copybits+0x40>
 801002e:	bd70      	pop	{r4, r5, r6, pc}
 8010030:	f853 6b04 	ldr.w	r6, [r3], #4
 8010034:	f845 6f04 	str.w	r6, [r5, #4]!
 8010038:	e7eb      	b.n	8010012 <__copybits+0x18>
 801003a:	f840 3b04 	str.w	r3, [r0], #4
 801003e:	e7f4      	b.n	801002a <__copybits+0x30>

08010040 <__any_on>:
 8010040:	f100 0214 	add.w	r2, r0, #20
 8010044:	6900      	ldr	r0, [r0, #16]
 8010046:	114b      	asrs	r3, r1, #5
 8010048:	4298      	cmp	r0, r3
 801004a:	b510      	push	{r4, lr}
 801004c:	db11      	blt.n	8010072 <__any_on+0x32>
 801004e:	dd0a      	ble.n	8010066 <__any_on+0x26>
 8010050:	f011 011f 	ands.w	r1, r1, #31
 8010054:	d007      	beq.n	8010066 <__any_on+0x26>
 8010056:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801005a:	fa24 f001 	lsr.w	r0, r4, r1
 801005e:	fa00 f101 	lsl.w	r1, r0, r1
 8010062:	428c      	cmp	r4, r1
 8010064:	d10b      	bne.n	801007e <__any_on+0x3e>
 8010066:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801006a:	4293      	cmp	r3, r2
 801006c:	d803      	bhi.n	8010076 <__any_on+0x36>
 801006e:	2000      	movs	r0, #0
 8010070:	bd10      	pop	{r4, pc}
 8010072:	4603      	mov	r3, r0
 8010074:	e7f7      	b.n	8010066 <__any_on+0x26>
 8010076:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801007a:	2900      	cmp	r1, #0
 801007c:	d0f5      	beq.n	801006a <__any_on+0x2a>
 801007e:	2001      	movs	r0, #1
 8010080:	e7f6      	b.n	8010070 <__any_on+0x30>

08010082 <_realloc_r>:
 8010082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010086:	4680      	mov	r8, r0
 8010088:	4614      	mov	r4, r2
 801008a:	460e      	mov	r6, r1
 801008c:	b921      	cbnz	r1, 8010098 <_realloc_r+0x16>
 801008e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010092:	4611      	mov	r1, r2
 8010094:	f7fc ba5c 	b.w	800c550 <_malloc_r>
 8010098:	b92a      	cbnz	r2, 80100a6 <_realloc_r+0x24>
 801009a:	f7fc f9b9 	bl	800c410 <_free_r>
 801009e:	4625      	mov	r5, r4
 80100a0:	4628      	mov	r0, r5
 80100a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100a6:	f000 fbed 	bl	8010884 <_malloc_usable_size_r>
 80100aa:	4284      	cmp	r4, r0
 80100ac:	4607      	mov	r7, r0
 80100ae:	d802      	bhi.n	80100b6 <_realloc_r+0x34>
 80100b0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80100b4:	d812      	bhi.n	80100dc <_realloc_r+0x5a>
 80100b6:	4621      	mov	r1, r4
 80100b8:	4640      	mov	r0, r8
 80100ba:	f7fc fa49 	bl	800c550 <_malloc_r>
 80100be:	4605      	mov	r5, r0
 80100c0:	2800      	cmp	r0, #0
 80100c2:	d0ed      	beq.n	80100a0 <_realloc_r+0x1e>
 80100c4:	42bc      	cmp	r4, r7
 80100c6:	4622      	mov	r2, r4
 80100c8:	4631      	mov	r1, r6
 80100ca:	bf28      	it	cs
 80100cc:	463a      	movcs	r2, r7
 80100ce:	f7fc f94f 	bl	800c370 <memcpy>
 80100d2:	4631      	mov	r1, r6
 80100d4:	4640      	mov	r0, r8
 80100d6:	f7fc f99b 	bl	800c410 <_free_r>
 80100da:	e7e1      	b.n	80100a0 <_realloc_r+0x1e>
 80100dc:	4635      	mov	r5, r6
 80100de:	e7df      	b.n	80100a0 <_realloc_r+0x1e>

080100e0 <__sfputc_r>:
 80100e0:	6893      	ldr	r3, [r2, #8]
 80100e2:	3b01      	subs	r3, #1
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	b410      	push	{r4}
 80100e8:	6093      	str	r3, [r2, #8]
 80100ea:	da08      	bge.n	80100fe <__sfputc_r+0x1e>
 80100ec:	6994      	ldr	r4, [r2, #24]
 80100ee:	42a3      	cmp	r3, r4
 80100f0:	db01      	blt.n	80100f6 <__sfputc_r+0x16>
 80100f2:	290a      	cmp	r1, #10
 80100f4:	d103      	bne.n	80100fe <__sfputc_r+0x1e>
 80100f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100fa:	f000 b999 	b.w	8010430 <__swbuf_r>
 80100fe:	6813      	ldr	r3, [r2, #0]
 8010100:	1c58      	adds	r0, r3, #1
 8010102:	6010      	str	r0, [r2, #0]
 8010104:	7019      	strb	r1, [r3, #0]
 8010106:	4608      	mov	r0, r1
 8010108:	f85d 4b04 	ldr.w	r4, [sp], #4
 801010c:	4770      	bx	lr

0801010e <__sfputs_r>:
 801010e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010110:	4606      	mov	r6, r0
 8010112:	460f      	mov	r7, r1
 8010114:	4614      	mov	r4, r2
 8010116:	18d5      	adds	r5, r2, r3
 8010118:	42ac      	cmp	r4, r5
 801011a:	d101      	bne.n	8010120 <__sfputs_r+0x12>
 801011c:	2000      	movs	r0, #0
 801011e:	e007      	b.n	8010130 <__sfputs_r+0x22>
 8010120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010124:	463a      	mov	r2, r7
 8010126:	4630      	mov	r0, r6
 8010128:	f7ff ffda 	bl	80100e0 <__sfputc_r>
 801012c:	1c43      	adds	r3, r0, #1
 801012e:	d1f3      	bne.n	8010118 <__sfputs_r+0xa>
 8010130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010134 <_vfiprintf_r>:
 8010134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010138:	460d      	mov	r5, r1
 801013a:	b09d      	sub	sp, #116	; 0x74
 801013c:	4614      	mov	r4, r2
 801013e:	4698      	mov	r8, r3
 8010140:	4606      	mov	r6, r0
 8010142:	b118      	cbz	r0, 801014c <_vfiprintf_r+0x18>
 8010144:	6983      	ldr	r3, [r0, #24]
 8010146:	b90b      	cbnz	r3, 801014c <_vfiprintf_r+0x18>
 8010148:	f7fe fe96 	bl	800ee78 <__sinit>
 801014c:	4b89      	ldr	r3, [pc, #548]	; (8010374 <_vfiprintf_r+0x240>)
 801014e:	429d      	cmp	r5, r3
 8010150:	d11b      	bne.n	801018a <_vfiprintf_r+0x56>
 8010152:	6875      	ldr	r5, [r6, #4]
 8010154:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010156:	07d9      	lsls	r1, r3, #31
 8010158:	d405      	bmi.n	8010166 <_vfiprintf_r+0x32>
 801015a:	89ab      	ldrh	r3, [r5, #12]
 801015c:	059a      	lsls	r2, r3, #22
 801015e:	d402      	bmi.n	8010166 <_vfiprintf_r+0x32>
 8010160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010162:	f7ff faac 	bl	800f6be <__retarget_lock_acquire_recursive>
 8010166:	89ab      	ldrh	r3, [r5, #12]
 8010168:	071b      	lsls	r3, r3, #28
 801016a:	d501      	bpl.n	8010170 <_vfiprintf_r+0x3c>
 801016c:	692b      	ldr	r3, [r5, #16]
 801016e:	b9eb      	cbnz	r3, 80101ac <_vfiprintf_r+0x78>
 8010170:	4629      	mov	r1, r5
 8010172:	4630      	mov	r0, r6
 8010174:	f000 f9ce 	bl	8010514 <__swsetup_r>
 8010178:	b1c0      	cbz	r0, 80101ac <_vfiprintf_r+0x78>
 801017a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801017c:	07dc      	lsls	r4, r3, #31
 801017e:	d50e      	bpl.n	801019e <_vfiprintf_r+0x6a>
 8010180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010184:	b01d      	add	sp, #116	; 0x74
 8010186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801018a:	4b7b      	ldr	r3, [pc, #492]	; (8010378 <_vfiprintf_r+0x244>)
 801018c:	429d      	cmp	r5, r3
 801018e:	d101      	bne.n	8010194 <_vfiprintf_r+0x60>
 8010190:	68b5      	ldr	r5, [r6, #8]
 8010192:	e7df      	b.n	8010154 <_vfiprintf_r+0x20>
 8010194:	4b79      	ldr	r3, [pc, #484]	; (801037c <_vfiprintf_r+0x248>)
 8010196:	429d      	cmp	r5, r3
 8010198:	bf08      	it	eq
 801019a:	68f5      	ldreq	r5, [r6, #12]
 801019c:	e7da      	b.n	8010154 <_vfiprintf_r+0x20>
 801019e:	89ab      	ldrh	r3, [r5, #12]
 80101a0:	0598      	lsls	r0, r3, #22
 80101a2:	d4ed      	bmi.n	8010180 <_vfiprintf_r+0x4c>
 80101a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80101a6:	f7ff fa8b 	bl	800f6c0 <__retarget_lock_release_recursive>
 80101aa:	e7e9      	b.n	8010180 <_vfiprintf_r+0x4c>
 80101ac:	2300      	movs	r3, #0
 80101ae:	9309      	str	r3, [sp, #36]	; 0x24
 80101b0:	2320      	movs	r3, #32
 80101b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80101ba:	2330      	movs	r3, #48	; 0x30
 80101bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010380 <_vfiprintf_r+0x24c>
 80101c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101c4:	f04f 0901 	mov.w	r9, #1
 80101c8:	4623      	mov	r3, r4
 80101ca:	469a      	mov	sl, r3
 80101cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101d0:	b10a      	cbz	r2, 80101d6 <_vfiprintf_r+0xa2>
 80101d2:	2a25      	cmp	r2, #37	; 0x25
 80101d4:	d1f9      	bne.n	80101ca <_vfiprintf_r+0x96>
 80101d6:	ebba 0b04 	subs.w	fp, sl, r4
 80101da:	d00b      	beq.n	80101f4 <_vfiprintf_r+0xc0>
 80101dc:	465b      	mov	r3, fp
 80101de:	4622      	mov	r2, r4
 80101e0:	4629      	mov	r1, r5
 80101e2:	4630      	mov	r0, r6
 80101e4:	f7ff ff93 	bl	801010e <__sfputs_r>
 80101e8:	3001      	adds	r0, #1
 80101ea:	f000 80aa 	beq.w	8010342 <_vfiprintf_r+0x20e>
 80101ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101f0:	445a      	add	r2, fp
 80101f2:	9209      	str	r2, [sp, #36]	; 0x24
 80101f4:	f89a 3000 	ldrb.w	r3, [sl]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	f000 80a2 	beq.w	8010342 <_vfiprintf_r+0x20e>
 80101fe:	2300      	movs	r3, #0
 8010200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010208:	f10a 0a01 	add.w	sl, sl, #1
 801020c:	9304      	str	r3, [sp, #16]
 801020e:	9307      	str	r3, [sp, #28]
 8010210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010214:	931a      	str	r3, [sp, #104]	; 0x68
 8010216:	4654      	mov	r4, sl
 8010218:	2205      	movs	r2, #5
 801021a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801021e:	4858      	ldr	r0, [pc, #352]	; (8010380 <_vfiprintf_r+0x24c>)
 8010220:	f7ef fffe 	bl	8000220 <memchr>
 8010224:	9a04      	ldr	r2, [sp, #16]
 8010226:	b9d8      	cbnz	r0, 8010260 <_vfiprintf_r+0x12c>
 8010228:	06d1      	lsls	r1, r2, #27
 801022a:	bf44      	itt	mi
 801022c:	2320      	movmi	r3, #32
 801022e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010232:	0713      	lsls	r3, r2, #28
 8010234:	bf44      	itt	mi
 8010236:	232b      	movmi	r3, #43	; 0x2b
 8010238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801023c:	f89a 3000 	ldrb.w	r3, [sl]
 8010240:	2b2a      	cmp	r3, #42	; 0x2a
 8010242:	d015      	beq.n	8010270 <_vfiprintf_r+0x13c>
 8010244:	9a07      	ldr	r2, [sp, #28]
 8010246:	4654      	mov	r4, sl
 8010248:	2000      	movs	r0, #0
 801024a:	f04f 0c0a 	mov.w	ip, #10
 801024e:	4621      	mov	r1, r4
 8010250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010254:	3b30      	subs	r3, #48	; 0x30
 8010256:	2b09      	cmp	r3, #9
 8010258:	d94e      	bls.n	80102f8 <_vfiprintf_r+0x1c4>
 801025a:	b1b0      	cbz	r0, 801028a <_vfiprintf_r+0x156>
 801025c:	9207      	str	r2, [sp, #28]
 801025e:	e014      	b.n	801028a <_vfiprintf_r+0x156>
 8010260:	eba0 0308 	sub.w	r3, r0, r8
 8010264:	fa09 f303 	lsl.w	r3, r9, r3
 8010268:	4313      	orrs	r3, r2
 801026a:	9304      	str	r3, [sp, #16]
 801026c:	46a2      	mov	sl, r4
 801026e:	e7d2      	b.n	8010216 <_vfiprintf_r+0xe2>
 8010270:	9b03      	ldr	r3, [sp, #12]
 8010272:	1d19      	adds	r1, r3, #4
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	9103      	str	r1, [sp, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	bfbb      	ittet	lt
 801027c:	425b      	neglt	r3, r3
 801027e:	f042 0202 	orrlt.w	r2, r2, #2
 8010282:	9307      	strge	r3, [sp, #28]
 8010284:	9307      	strlt	r3, [sp, #28]
 8010286:	bfb8      	it	lt
 8010288:	9204      	strlt	r2, [sp, #16]
 801028a:	7823      	ldrb	r3, [r4, #0]
 801028c:	2b2e      	cmp	r3, #46	; 0x2e
 801028e:	d10c      	bne.n	80102aa <_vfiprintf_r+0x176>
 8010290:	7863      	ldrb	r3, [r4, #1]
 8010292:	2b2a      	cmp	r3, #42	; 0x2a
 8010294:	d135      	bne.n	8010302 <_vfiprintf_r+0x1ce>
 8010296:	9b03      	ldr	r3, [sp, #12]
 8010298:	1d1a      	adds	r2, r3, #4
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	9203      	str	r2, [sp, #12]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	bfb8      	it	lt
 80102a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80102a6:	3402      	adds	r4, #2
 80102a8:	9305      	str	r3, [sp, #20]
 80102aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010390 <_vfiprintf_r+0x25c>
 80102ae:	7821      	ldrb	r1, [r4, #0]
 80102b0:	2203      	movs	r2, #3
 80102b2:	4650      	mov	r0, sl
 80102b4:	f7ef ffb4 	bl	8000220 <memchr>
 80102b8:	b140      	cbz	r0, 80102cc <_vfiprintf_r+0x198>
 80102ba:	2340      	movs	r3, #64	; 0x40
 80102bc:	eba0 000a 	sub.w	r0, r0, sl
 80102c0:	fa03 f000 	lsl.w	r0, r3, r0
 80102c4:	9b04      	ldr	r3, [sp, #16]
 80102c6:	4303      	orrs	r3, r0
 80102c8:	3401      	adds	r4, #1
 80102ca:	9304      	str	r3, [sp, #16]
 80102cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102d0:	482c      	ldr	r0, [pc, #176]	; (8010384 <_vfiprintf_r+0x250>)
 80102d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102d6:	2206      	movs	r2, #6
 80102d8:	f7ef ffa2 	bl	8000220 <memchr>
 80102dc:	2800      	cmp	r0, #0
 80102de:	d03f      	beq.n	8010360 <_vfiprintf_r+0x22c>
 80102e0:	4b29      	ldr	r3, [pc, #164]	; (8010388 <_vfiprintf_r+0x254>)
 80102e2:	bb1b      	cbnz	r3, 801032c <_vfiprintf_r+0x1f8>
 80102e4:	9b03      	ldr	r3, [sp, #12]
 80102e6:	3307      	adds	r3, #7
 80102e8:	f023 0307 	bic.w	r3, r3, #7
 80102ec:	3308      	adds	r3, #8
 80102ee:	9303      	str	r3, [sp, #12]
 80102f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102f2:	443b      	add	r3, r7
 80102f4:	9309      	str	r3, [sp, #36]	; 0x24
 80102f6:	e767      	b.n	80101c8 <_vfiprintf_r+0x94>
 80102f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80102fc:	460c      	mov	r4, r1
 80102fe:	2001      	movs	r0, #1
 8010300:	e7a5      	b.n	801024e <_vfiprintf_r+0x11a>
 8010302:	2300      	movs	r3, #0
 8010304:	3401      	adds	r4, #1
 8010306:	9305      	str	r3, [sp, #20]
 8010308:	4619      	mov	r1, r3
 801030a:	f04f 0c0a 	mov.w	ip, #10
 801030e:	4620      	mov	r0, r4
 8010310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010314:	3a30      	subs	r2, #48	; 0x30
 8010316:	2a09      	cmp	r2, #9
 8010318:	d903      	bls.n	8010322 <_vfiprintf_r+0x1ee>
 801031a:	2b00      	cmp	r3, #0
 801031c:	d0c5      	beq.n	80102aa <_vfiprintf_r+0x176>
 801031e:	9105      	str	r1, [sp, #20]
 8010320:	e7c3      	b.n	80102aa <_vfiprintf_r+0x176>
 8010322:	fb0c 2101 	mla	r1, ip, r1, r2
 8010326:	4604      	mov	r4, r0
 8010328:	2301      	movs	r3, #1
 801032a:	e7f0      	b.n	801030e <_vfiprintf_r+0x1da>
 801032c:	ab03      	add	r3, sp, #12
 801032e:	9300      	str	r3, [sp, #0]
 8010330:	462a      	mov	r2, r5
 8010332:	4b16      	ldr	r3, [pc, #88]	; (801038c <_vfiprintf_r+0x258>)
 8010334:	a904      	add	r1, sp, #16
 8010336:	4630      	mov	r0, r6
 8010338:	f7fc fb7a 	bl	800ca30 <_printf_float>
 801033c:	4607      	mov	r7, r0
 801033e:	1c78      	adds	r0, r7, #1
 8010340:	d1d6      	bne.n	80102f0 <_vfiprintf_r+0x1bc>
 8010342:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010344:	07d9      	lsls	r1, r3, #31
 8010346:	d405      	bmi.n	8010354 <_vfiprintf_r+0x220>
 8010348:	89ab      	ldrh	r3, [r5, #12]
 801034a:	059a      	lsls	r2, r3, #22
 801034c:	d402      	bmi.n	8010354 <_vfiprintf_r+0x220>
 801034e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010350:	f7ff f9b6 	bl	800f6c0 <__retarget_lock_release_recursive>
 8010354:	89ab      	ldrh	r3, [r5, #12]
 8010356:	065b      	lsls	r3, r3, #25
 8010358:	f53f af12 	bmi.w	8010180 <_vfiprintf_r+0x4c>
 801035c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801035e:	e711      	b.n	8010184 <_vfiprintf_r+0x50>
 8010360:	ab03      	add	r3, sp, #12
 8010362:	9300      	str	r3, [sp, #0]
 8010364:	462a      	mov	r2, r5
 8010366:	4b09      	ldr	r3, [pc, #36]	; (801038c <_vfiprintf_r+0x258>)
 8010368:	a904      	add	r1, sp, #16
 801036a:	4630      	mov	r0, r6
 801036c:	f7fc fe04 	bl	800cf78 <_printf_i>
 8010370:	e7e4      	b.n	801033c <_vfiprintf_r+0x208>
 8010372:	bf00      	nop
 8010374:	080125b4 	.word	0x080125b4
 8010378:	080125d4 	.word	0x080125d4
 801037c:	08012594 	.word	0x08012594
 8010380:	08012430 	.word	0x08012430
 8010384:	0801243a 	.word	0x0801243a
 8010388:	0800ca31 	.word	0x0800ca31
 801038c:	0801010f 	.word	0x0801010f
 8010390:	08012436 	.word	0x08012436
 8010394:	00000000 	.word	0x00000000

08010398 <nan>:
 8010398:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80103a0 <nan+0x8>
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	00000000 	.word	0x00000000
 80103a4:	7ff80000 	.word	0x7ff80000

080103a8 <__sread>:
 80103a8:	b510      	push	{r4, lr}
 80103aa:	460c      	mov	r4, r1
 80103ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b0:	f000 fa70 	bl	8010894 <_read_r>
 80103b4:	2800      	cmp	r0, #0
 80103b6:	bfab      	itete	ge
 80103b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103ba:	89a3      	ldrhlt	r3, [r4, #12]
 80103bc:	181b      	addge	r3, r3, r0
 80103be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103c2:	bfac      	ite	ge
 80103c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80103c6:	81a3      	strhlt	r3, [r4, #12]
 80103c8:	bd10      	pop	{r4, pc}

080103ca <__swrite>:
 80103ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ce:	461f      	mov	r7, r3
 80103d0:	898b      	ldrh	r3, [r1, #12]
 80103d2:	05db      	lsls	r3, r3, #23
 80103d4:	4605      	mov	r5, r0
 80103d6:	460c      	mov	r4, r1
 80103d8:	4616      	mov	r6, r2
 80103da:	d505      	bpl.n	80103e8 <__swrite+0x1e>
 80103dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e0:	2302      	movs	r3, #2
 80103e2:	2200      	movs	r2, #0
 80103e4:	f000 f9d6 	bl	8010794 <_lseek_r>
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103f2:	81a3      	strh	r3, [r4, #12]
 80103f4:	4632      	mov	r2, r6
 80103f6:	463b      	mov	r3, r7
 80103f8:	4628      	mov	r0, r5
 80103fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103fe:	f000 b877 	b.w	80104f0 <_write_r>

08010402 <__sseek>:
 8010402:	b510      	push	{r4, lr}
 8010404:	460c      	mov	r4, r1
 8010406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801040a:	f000 f9c3 	bl	8010794 <_lseek_r>
 801040e:	1c43      	adds	r3, r0, #1
 8010410:	89a3      	ldrh	r3, [r4, #12]
 8010412:	bf15      	itete	ne
 8010414:	6560      	strne	r0, [r4, #84]	; 0x54
 8010416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801041a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801041e:	81a3      	strheq	r3, [r4, #12]
 8010420:	bf18      	it	ne
 8010422:	81a3      	strhne	r3, [r4, #12]
 8010424:	bd10      	pop	{r4, pc}

08010426 <__sclose>:
 8010426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801042a:	f000 b8e1 	b.w	80105f0 <_close_r>
	...

08010430 <__swbuf_r>:
 8010430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010432:	460e      	mov	r6, r1
 8010434:	4614      	mov	r4, r2
 8010436:	4605      	mov	r5, r0
 8010438:	b118      	cbz	r0, 8010442 <__swbuf_r+0x12>
 801043a:	6983      	ldr	r3, [r0, #24]
 801043c:	b90b      	cbnz	r3, 8010442 <__swbuf_r+0x12>
 801043e:	f7fe fd1b 	bl	800ee78 <__sinit>
 8010442:	4b21      	ldr	r3, [pc, #132]	; (80104c8 <__swbuf_r+0x98>)
 8010444:	429c      	cmp	r4, r3
 8010446:	d12b      	bne.n	80104a0 <__swbuf_r+0x70>
 8010448:	686c      	ldr	r4, [r5, #4]
 801044a:	69a3      	ldr	r3, [r4, #24]
 801044c:	60a3      	str	r3, [r4, #8]
 801044e:	89a3      	ldrh	r3, [r4, #12]
 8010450:	071a      	lsls	r2, r3, #28
 8010452:	d52f      	bpl.n	80104b4 <__swbuf_r+0x84>
 8010454:	6923      	ldr	r3, [r4, #16]
 8010456:	b36b      	cbz	r3, 80104b4 <__swbuf_r+0x84>
 8010458:	6923      	ldr	r3, [r4, #16]
 801045a:	6820      	ldr	r0, [r4, #0]
 801045c:	1ac0      	subs	r0, r0, r3
 801045e:	6963      	ldr	r3, [r4, #20]
 8010460:	b2f6      	uxtb	r6, r6
 8010462:	4283      	cmp	r3, r0
 8010464:	4637      	mov	r7, r6
 8010466:	dc04      	bgt.n	8010472 <__swbuf_r+0x42>
 8010468:	4621      	mov	r1, r4
 801046a:	4628      	mov	r0, r5
 801046c:	f000 f956 	bl	801071c <_fflush_r>
 8010470:	bb30      	cbnz	r0, 80104c0 <__swbuf_r+0x90>
 8010472:	68a3      	ldr	r3, [r4, #8]
 8010474:	3b01      	subs	r3, #1
 8010476:	60a3      	str	r3, [r4, #8]
 8010478:	6823      	ldr	r3, [r4, #0]
 801047a:	1c5a      	adds	r2, r3, #1
 801047c:	6022      	str	r2, [r4, #0]
 801047e:	701e      	strb	r6, [r3, #0]
 8010480:	6963      	ldr	r3, [r4, #20]
 8010482:	3001      	adds	r0, #1
 8010484:	4283      	cmp	r3, r0
 8010486:	d004      	beq.n	8010492 <__swbuf_r+0x62>
 8010488:	89a3      	ldrh	r3, [r4, #12]
 801048a:	07db      	lsls	r3, r3, #31
 801048c:	d506      	bpl.n	801049c <__swbuf_r+0x6c>
 801048e:	2e0a      	cmp	r6, #10
 8010490:	d104      	bne.n	801049c <__swbuf_r+0x6c>
 8010492:	4621      	mov	r1, r4
 8010494:	4628      	mov	r0, r5
 8010496:	f000 f941 	bl	801071c <_fflush_r>
 801049a:	b988      	cbnz	r0, 80104c0 <__swbuf_r+0x90>
 801049c:	4638      	mov	r0, r7
 801049e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a0:	4b0a      	ldr	r3, [pc, #40]	; (80104cc <__swbuf_r+0x9c>)
 80104a2:	429c      	cmp	r4, r3
 80104a4:	d101      	bne.n	80104aa <__swbuf_r+0x7a>
 80104a6:	68ac      	ldr	r4, [r5, #8]
 80104a8:	e7cf      	b.n	801044a <__swbuf_r+0x1a>
 80104aa:	4b09      	ldr	r3, [pc, #36]	; (80104d0 <__swbuf_r+0xa0>)
 80104ac:	429c      	cmp	r4, r3
 80104ae:	bf08      	it	eq
 80104b0:	68ec      	ldreq	r4, [r5, #12]
 80104b2:	e7ca      	b.n	801044a <__swbuf_r+0x1a>
 80104b4:	4621      	mov	r1, r4
 80104b6:	4628      	mov	r0, r5
 80104b8:	f000 f82c 	bl	8010514 <__swsetup_r>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0cb      	beq.n	8010458 <__swbuf_r+0x28>
 80104c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80104c4:	e7ea      	b.n	801049c <__swbuf_r+0x6c>
 80104c6:	bf00      	nop
 80104c8:	080125b4 	.word	0x080125b4
 80104cc:	080125d4 	.word	0x080125d4
 80104d0:	08012594 	.word	0x08012594

080104d4 <__ascii_wctomb>:
 80104d4:	b149      	cbz	r1, 80104ea <__ascii_wctomb+0x16>
 80104d6:	2aff      	cmp	r2, #255	; 0xff
 80104d8:	bf85      	ittet	hi
 80104da:	238a      	movhi	r3, #138	; 0x8a
 80104dc:	6003      	strhi	r3, [r0, #0]
 80104de:	700a      	strbls	r2, [r1, #0]
 80104e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80104e4:	bf98      	it	ls
 80104e6:	2001      	movls	r0, #1
 80104e8:	4770      	bx	lr
 80104ea:	4608      	mov	r0, r1
 80104ec:	4770      	bx	lr
	...

080104f0 <_write_r>:
 80104f0:	b538      	push	{r3, r4, r5, lr}
 80104f2:	4d07      	ldr	r5, [pc, #28]	; (8010510 <_write_r+0x20>)
 80104f4:	4604      	mov	r4, r0
 80104f6:	4608      	mov	r0, r1
 80104f8:	4611      	mov	r1, r2
 80104fa:	2200      	movs	r2, #0
 80104fc:	602a      	str	r2, [r5, #0]
 80104fe:	461a      	mov	r2, r3
 8010500:	f7f0 fe4e 	bl	80011a0 <_write>
 8010504:	1c43      	adds	r3, r0, #1
 8010506:	d102      	bne.n	801050e <_write_r+0x1e>
 8010508:	682b      	ldr	r3, [r5, #0]
 801050a:	b103      	cbz	r3, 801050e <_write_r+0x1e>
 801050c:	6023      	str	r3, [r4, #0]
 801050e:	bd38      	pop	{r3, r4, r5, pc}
 8010510:	2000b268 	.word	0x2000b268

08010514 <__swsetup_r>:
 8010514:	4b32      	ldr	r3, [pc, #200]	; (80105e0 <__swsetup_r+0xcc>)
 8010516:	b570      	push	{r4, r5, r6, lr}
 8010518:	681d      	ldr	r5, [r3, #0]
 801051a:	4606      	mov	r6, r0
 801051c:	460c      	mov	r4, r1
 801051e:	b125      	cbz	r5, 801052a <__swsetup_r+0x16>
 8010520:	69ab      	ldr	r3, [r5, #24]
 8010522:	b913      	cbnz	r3, 801052a <__swsetup_r+0x16>
 8010524:	4628      	mov	r0, r5
 8010526:	f7fe fca7 	bl	800ee78 <__sinit>
 801052a:	4b2e      	ldr	r3, [pc, #184]	; (80105e4 <__swsetup_r+0xd0>)
 801052c:	429c      	cmp	r4, r3
 801052e:	d10f      	bne.n	8010550 <__swsetup_r+0x3c>
 8010530:	686c      	ldr	r4, [r5, #4]
 8010532:	89a3      	ldrh	r3, [r4, #12]
 8010534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010538:	0719      	lsls	r1, r3, #28
 801053a:	d42c      	bmi.n	8010596 <__swsetup_r+0x82>
 801053c:	06dd      	lsls	r5, r3, #27
 801053e:	d411      	bmi.n	8010564 <__swsetup_r+0x50>
 8010540:	2309      	movs	r3, #9
 8010542:	6033      	str	r3, [r6, #0]
 8010544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010548:	81a3      	strh	r3, [r4, #12]
 801054a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801054e:	e03e      	b.n	80105ce <__swsetup_r+0xba>
 8010550:	4b25      	ldr	r3, [pc, #148]	; (80105e8 <__swsetup_r+0xd4>)
 8010552:	429c      	cmp	r4, r3
 8010554:	d101      	bne.n	801055a <__swsetup_r+0x46>
 8010556:	68ac      	ldr	r4, [r5, #8]
 8010558:	e7eb      	b.n	8010532 <__swsetup_r+0x1e>
 801055a:	4b24      	ldr	r3, [pc, #144]	; (80105ec <__swsetup_r+0xd8>)
 801055c:	429c      	cmp	r4, r3
 801055e:	bf08      	it	eq
 8010560:	68ec      	ldreq	r4, [r5, #12]
 8010562:	e7e6      	b.n	8010532 <__swsetup_r+0x1e>
 8010564:	0758      	lsls	r0, r3, #29
 8010566:	d512      	bpl.n	801058e <__swsetup_r+0x7a>
 8010568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801056a:	b141      	cbz	r1, 801057e <__swsetup_r+0x6a>
 801056c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010570:	4299      	cmp	r1, r3
 8010572:	d002      	beq.n	801057a <__swsetup_r+0x66>
 8010574:	4630      	mov	r0, r6
 8010576:	f7fb ff4b 	bl	800c410 <_free_r>
 801057a:	2300      	movs	r3, #0
 801057c:	6363      	str	r3, [r4, #52]	; 0x34
 801057e:	89a3      	ldrh	r3, [r4, #12]
 8010580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010584:	81a3      	strh	r3, [r4, #12]
 8010586:	2300      	movs	r3, #0
 8010588:	6063      	str	r3, [r4, #4]
 801058a:	6923      	ldr	r3, [r4, #16]
 801058c:	6023      	str	r3, [r4, #0]
 801058e:	89a3      	ldrh	r3, [r4, #12]
 8010590:	f043 0308 	orr.w	r3, r3, #8
 8010594:	81a3      	strh	r3, [r4, #12]
 8010596:	6923      	ldr	r3, [r4, #16]
 8010598:	b94b      	cbnz	r3, 80105ae <__swsetup_r+0x9a>
 801059a:	89a3      	ldrh	r3, [r4, #12]
 801059c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80105a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105a4:	d003      	beq.n	80105ae <__swsetup_r+0x9a>
 80105a6:	4621      	mov	r1, r4
 80105a8:	4630      	mov	r0, r6
 80105aa:	f000 f92b 	bl	8010804 <__smakebuf_r>
 80105ae:	89a0      	ldrh	r0, [r4, #12]
 80105b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80105b4:	f010 0301 	ands.w	r3, r0, #1
 80105b8:	d00a      	beq.n	80105d0 <__swsetup_r+0xbc>
 80105ba:	2300      	movs	r3, #0
 80105bc:	60a3      	str	r3, [r4, #8]
 80105be:	6963      	ldr	r3, [r4, #20]
 80105c0:	425b      	negs	r3, r3
 80105c2:	61a3      	str	r3, [r4, #24]
 80105c4:	6923      	ldr	r3, [r4, #16]
 80105c6:	b943      	cbnz	r3, 80105da <__swsetup_r+0xc6>
 80105c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105cc:	d1ba      	bne.n	8010544 <__swsetup_r+0x30>
 80105ce:	bd70      	pop	{r4, r5, r6, pc}
 80105d0:	0781      	lsls	r1, r0, #30
 80105d2:	bf58      	it	pl
 80105d4:	6963      	ldrpl	r3, [r4, #20]
 80105d6:	60a3      	str	r3, [r4, #8]
 80105d8:	e7f4      	b.n	80105c4 <__swsetup_r+0xb0>
 80105da:	2000      	movs	r0, #0
 80105dc:	e7f7      	b.n	80105ce <__swsetup_r+0xba>
 80105de:	bf00      	nop
 80105e0:	2000018c 	.word	0x2000018c
 80105e4:	080125b4 	.word	0x080125b4
 80105e8:	080125d4 	.word	0x080125d4
 80105ec:	08012594 	.word	0x08012594

080105f0 <_close_r>:
 80105f0:	b538      	push	{r3, r4, r5, lr}
 80105f2:	4d06      	ldr	r5, [pc, #24]	; (801060c <_close_r+0x1c>)
 80105f4:	2300      	movs	r3, #0
 80105f6:	4604      	mov	r4, r0
 80105f8:	4608      	mov	r0, r1
 80105fa:	602b      	str	r3, [r5, #0]
 80105fc:	f7f0 fdde 	bl	80011bc <_close>
 8010600:	1c43      	adds	r3, r0, #1
 8010602:	d102      	bne.n	801060a <_close_r+0x1a>
 8010604:	682b      	ldr	r3, [r5, #0]
 8010606:	b103      	cbz	r3, 801060a <_close_r+0x1a>
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	bd38      	pop	{r3, r4, r5, pc}
 801060c:	2000b268 	.word	0x2000b268

08010610 <__sflush_r>:
 8010610:	898a      	ldrh	r2, [r1, #12]
 8010612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010616:	4605      	mov	r5, r0
 8010618:	0710      	lsls	r0, r2, #28
 801061a:	460c      	mov	r4, r1
 801061c:	d458      	bmi.n	80106d0 <__sflush_r+0xc0>
 801061e:	684b      	ldr	r3, [r1, #4]
 8010620:	2b00      	cmp	r3, #0
 8010622:	dc05      	bgt.n	8010630 <__sflush_r+0x20>
 8010624:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010626:	2b00      	cmp	r3, #0
 8010628:	dc02      	bgt.n	8010630 <__sflush_r+0x20>
 801062a:	2000      	movs	r0, #0
 801062c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010632:	2e00      	cmp	r6, #0
 8010634:	d0f9      	beq.n	801062a <__sflush_r+0x1a>
 8010636:	2300      	movs	r3, #0
 8010638:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801063c:	682f      	ldr	r7, [r5, #0]
 801063e:	602b      	str	r3, [r5, #0]
 8010640:	d032      	beq.n	80106a8 <__sflush_r+0x98>
 8010642:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	075a      	lsls	r2, r3, #29
 8010648:	d505      	bpl.n	8010656 <__sflush_r+0x46>
 801064a:	6863      	ldr	r3, [r4, #4]
 801064c:	1ac0      	subs	r0, r0, r3
 801064e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010650:	b10b      	cbz	r3, 8010656 <__sflush_r+0x46>
 8010652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010654:	1ac0      	subs	r0, r0, r3
 8010656:	2300      	movs	r3, #0
 8010658:	4602      	mov	r2, r0
 801065a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801065c:	6a21      	ldr	r1, [r4, #32]
 801065e:	4628      	mov	r0, r5
 8010660:	47b0      	blx	r6
 8010662:	1c43      	adds	r3, r0, #1
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	d106      	bne.n	8010676 <__sflush_r+0x66>
 8010668:	6829      	ldr	r1, [r5, #0]
 801066a:	291d      	cmp	r1, #29
 801066c:	d82c      	bhi.n	80106c8 <__sflush_r+0xb8>
 801066e:	4a2a      	ldr	r2, [pc, #168]	; (8010718 <__sflush_r+0x108>)
 8010670:	40ca      	lsrs	r2, r1
 8010672:	07d6      	lsls	r6, r2, #31
 8010674:	d528      	bpl.n	80106c8 <__sflush_r+0xb8>
 8010676:	2200      	movs	r2, #0
 8010678:	6062      	str	r2, [r4, #4]
 801067a:	04d9      	lsls	r1, r3, #19
 801067c:	6922      	ldr	r2, [r4, #16]
 801067e:	6022      	str	r2, [r4, #0]
 8010680:	d504      	bpl.n	801068c <__sflush_r+0x7c>
 8010682:	1c42      	adds	r2, r0, #1
 8010684:	d101      	bne.n	801068a <__sflush_r+0x7a>
 8010686:	682b      	ldr	r3, [r5, #0]
 8010688:	b903      	cbnz	r3, 801068c <__sflush_r+0x7c>
 801068a:	6560      	str	r0, [r4, #84]	; 0x54
 801068c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801068e:	602f      	str	r7, [r5, #0]
 8010690:	2900      	cmp	r1, #0
 8010692:	d0ca      	beq.n	801062a <__sflush_r+0x1a>
 8010694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010698:	4299      	cmp	r1, r3
 801069a:	d002      	beq.n	80106a2 <__sflush_r+0x92>
 801069c:	4628      	mov	r0, r5
 801069e:	f7fb feb7 	bl	800c410 <_free_r>
 80106a2:	2000      	movs	r0, #0
 80106a4:	6360      	str	r0, [r4, #52]	; 0x34
 80106a6:	e7c1      	b.n	801062c <__sflush_r+0x1c>
 80106a8:	6a21      	ldr	r1, [r4, #32]
 80106aa:	2301      	movs	r3, #1
 80106ac:	4628      	mov	r0, r5
 80106ae:	47b0      	blx	r6
 80106b0:	1c41      	adds	r1, r0, #1
 80106b2:	d1c7      	bne.n	8010644 <__sflush_r+0x34>
 80106b4:	682b      	ldr	r3, [r5, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d0c4      	beq.n	8010644 <__sflush_r+0x34>
 80106ba:	2b1d      	cmp	r3, #29
 80106bc:	d001      	beq.n	80106c2 <__sflush_r+0xb2>
 80106be:	2b16      	cmp	r3, #22
 80106c0:	d101      	bne.n	80106c6 <__sflush_r+0xb6>
 80106c2:	602f      	str	r7, [r5, #0]
 80106c4:	e7b1      	b.n	801062a <__sflush_r+0x1a>
 80106c6:	89a3      	ldrh	r3, [r4, #12]
 80106c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106cc:	81a3      	strh	r3, [r4, #12]
 80106ce:	e7ad      	b.n	801062c <__sflush_r+0x1c>
 80106d0:	690f      	ldr	r7, [r1, #16]
 80106d2:	2f00      	cmp	r7, #0
 80106d4:	d0a9      	beq.n	801062a <__sflush_r+0x1a>
 80106d6:	0793      	lsls	r3, r2, #30
 80106d8:	680e      	ldr	r6, [r1, #0]
 80106da:	bf08      	it	eq
 80106dc:	694b      	ldreq	r3, [r1, #20]
 80106de:	600f      	str	r7, [r1, #0]
 80106e0:	bf18      	it	ne
 80106e2:	2300      	movne	r3, #0
 80106e4:	eba6 0807 	sub.w	r8, r6, r7
 80106e8:	608b      	str	r3, [r1, #8]
 80106ea:	f1b8 0f00 	cmp.w	r8, #0
 80106ee:	dd9c      	ble.n	801062a <__sflush_r+0x1a>
 80106f0:	6a21      	ldr	r1, [r4, #32]
 80106f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106f4:	4643      	mov	r3, r8
 80106f6:	463a      	mov	r2, r7
 80106f8:	4628      	mov	r0, r5
 80106fa:	47b0      	blx	r6
 80106fc:	2800      	cmp	r0, #0
 80106fe:	dc06      	bgt.n	801070e <__sflush_r+0xfe>
 8010700:	89a3      	ldrh	r3, [r4, #12]
 8010702:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010706:	81a3      	strh	r3, [r4, #12]
 8010708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801070c:	e78e      	b.n	801062c <__sflush_r+0x1c>
 801070e:	4407      	add	r7, r0
 8010710:	eba8 0800 	sub.w	r8, r8, r0
 8010714:	e7e9      	b.n	80106ea <__sflush_r+0xda>
 8010716:	bf00      	nop
 8010718:	20400001 	.word	0x20400001

0801071c <_fflush_r>:
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	690b      	ldr	r3, [r1, #16]
 8010720:	4605      	mov	r5, r0
 8010722:	460c      	mov	r4, r1
 8010724:	b913      	cbnz	r3, 801072c <_fflush_r+0x10>
 8010726:	2500      	movs	r5, #0
 8010728:	4628      	mov	r0, r5
 801072a:	bd38      	pop	{r3, r4, r5, pc}
 801072c:	b118      	cbz	r0, 8010736 <_fflush_r+0x1a>
 801072e:	6983      	ldr	r3, [r0, #24]
 8010730:	b90b      	cbnz	r3, 8010736 <_fflush_r+0x1a>
 8010732:	f7fe fba1 	bl	800ee78 <__sinit>
 8010736:	4b14      	ldr	r3, [pc, #80]	; (8010788 <_fflush_r+0x6c>)
 8010738:	429c      	cmp	r4, r3
 801073a:	d11b      	bne.n	8010774 <_fflush_r+0x58>
 801073c:	686c      	ldr	r4, [r5, #4]
 801073e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d0ef      	beq.n	8010726 <_fflush_r+0xa>
 8010746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010748:	07d0      	lsls	r0, r2, #31
 801074a:	d404      	bmi.n	8010756 <_fflush_r+0x3a>
 801074c:	0599      	lsls	r1, r3, #22
 801074e:	d402      	bmi.n	8010756 <_fflush_r+0x3a>
 8010750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010752:	f7fe ffb4 	bl	800f6be <__retarget_lock_acquire_recursive>
 8010756:	4628      	mov	r0, r5
 8010758:	4621      	mov	r1, r4
 801075a:	f7ff ff59 	bl	8010610 <__sflush_r>
 801075e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010760:	07da      	lsls	r2, r3, #31
 8010762:	4605      	mov	r5, r0
 8010764:	d4e0      	bmi.n	8010728 <_fflush_r+0xc>
 8010766:	89a3      	ldrh	r3, [r4, #12]
 8010768:	059b      	lsls	r3, r3, #22
 801076a:	d4dd      	bmi.n	8010728 <_fflush_r+0xc>
 801076c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801076e:	f7fe ffa7 	bl	800f6c0 <__retarget_lock_release_recursive>
 8010772:	e7d9      	b.n	8010728 <_fflush_r+0xc>
 8010774:	4b05      	ldr	r3, [pc, #20]	; (801078c <_fflush_r+0x70>)
 8010776:	429c      	cmp	r4, r3
 8010778:	d101      	bne.n	801077e <_fflush_r+0x62>
 801077a:	68ac      	ldr	r4, [r5, #8]
 801077c:	e7df      	b.n	801073e <_fflush_r+0x22>
 801077e:	4b04      	ldr	r3, [pc, #16]	; (8010790 <_fflush_r+0x74>)
 8010780:	429c      	cmp	r4, r3
 8010782:	bf08      	it	eq
 8010784:	68ec      	ldreq	r4, [r5, #12]
 8010786:	e7da      	b.n	801073e <_fflush_r+0x22>
 8010788:	080125b4 	.word	0x080125b4
 801078c:	080125d4 	.word	0x080125d4
 8010790:	08012594 	.word	0x08012594

08010794 <_lseek_r>:
 8010794:	b538      	push	{r3, r4, r5, lr}
 8010796:	4d07      	ldr	r5, [pc, #28]	; (80107b4 <_lseek_r+0x20>)
 8010798:	4604      	mov	r4, r0
 801079a:	4608      	mov	r0, r1
 801079c:	4611      	mov	r1, r2
 801079e:	2200      	movs	r2, #0
 80107a0:	602a      	str	r2, [r5, #0]
 80107a2:	461a      	mov	r2, r3
 80107a4:	f7f0 fd16 	bl	80011d4 <_lseek>
 80107a8:	1c43      	adds	r3, r0, #1
 80107aa:	d102      	bne.n	80107b2 <_lseek_r+0x1e>
 80107ac:	682b      	ldr	r3, [r5, #0]
 80107ae:	b103      	cbz	r3, 80107b2 <_lseek_r+0x1e>
 80107b0:	6023      	str	r3, [r4, #0]
 80107b2:	bd38      	pop	{r3, r4, r5, pc}
 80107b4:	2000b268 	.word	0x2000b268

080107b8 <__swhatbuf_r>:
 80107b8:	b570      	push	{r4, r5, r6, lr}
 80107ba:	460e      	mov	r6, r1
 80107bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107c0:	2900      	cmp	r1, #0
 80107c2:	b096      	sub	sp, #88	; 0x58
 80107c4:	4614      	mov	r4, r2
 80107c6:	461d      	mov	r5, r3
 80107c8:	da08      	bge.n	80107dc <__swhatbuf_r+0x24>
 80107ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	602a      	str	r2, [r5, #0]
 80107d2:	061a      	lsls	r2, r3, #24
 80107d4:	d410      	bmi.n	80107f8 <__swhatbuf_r+0x40>
 80107d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107da:	e00e      	b.n	80107fa <__swhatbuf_r+0x42>
 80107dc:	466a      	mov	r2, sp
 80107de:	f000 f86b 	bl	80108b8 <_fstat_r>
 80107e2:	2800      	cmp	r0, #0
 80107e4:	dbf1      	blt.n	80107ca <__swhatbuf_r+0x12>
 80107e6:	9a01      	ldr	r2, [sp, #4]
 80107e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107f0:	425a      	negs	r2, r3
 80107f2:	415a      	adcs	r2, r3
 80107f4:	602a      	str	r2, [r5, #0]
 80107f6:	e7ee      	b.n	80107d6 <__swhatbuf_r+0x1e>
 80107f8:	2340      	movs	r3, #64	; 0x40
 80107fa:	2000      	movs	r0, #0
 80107fc:	6023      	str	r3, [r4, #0]
 80107fe:	b016      	add	sp, #88	; 0x58
 8010800:	bd70      	pop	{r4, r5, r6, pc}
	...

08010804 <__smakebuf_r>:
 8010804:	898b      	ldrh	r3, [r1, #12]
 8010806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010808:	079d      	lsls	r5, r3, #30
 801080a:	4606      	mov	r6, r0
 801080c:	460c      	mov	r4, r1
 801080e:	d507      	bpl.n	8010820 <__smakebuf_r+0x1c>
 8010810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	6123      	str	r3, [r4, #16]
 8010818:	2301      	movs	r3, #1
 801081a:	6163      	str	r3, [r4, #20]
 801081c:	b002      	add	sp, #8
 801081e:	bd70      	pop	{r4, r5, r6, pc}
 8010820:	ab01      	add	r3, sp, #4
 8010822:	466a      	mov	r2, sp
 8010824:	f7ff ffc8 	bl	80107b8 <__swhatbuf_r>
 8010828:	9900      	ldr	r1, [sp, #0]
 801082a:	4605      	mov	r5, r0
 801082c:	4630      	mov	r0, r6
 801082e:	f7fb fe8f 	bl	800c550 <_malloc_r>
 8010832:	b948      	cbnz	r0, 8010848 <__smakebuf_r+0x44>
 8010834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010838:	059a      	lsls	r2, r3, #22
 801083a:	d4ef      	bmi.n	801081c <__smakebuf_r+0x18>
 801083c:	f023 0303 	bic.w	r3, r3, #3
 8010840:	f043 0302 	orr.w	r3, r3, #2
 8010844:	81a3      	strh	r3, [r4, #12]
 8010846:	e7e3      	b.n	8010810 <__smakebuf_r+0xc>
 8010848:	4b0d      	ldr	r3, [pc, #52]	; (8010880 <__smakebuf_r+0x7c>)
 801084a:	62b3      	str	r3, [r6, #40]	; 0x28
 801084c:	89a3      	ldrh	r3, [r4, #12]
 801084e:	6020      	str	r0, [r4, #0]
 8010850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010854:	81a3      	strh	r3, [r4, #12]
 8010856:	9b00      	ldr	r3, [sp, #0]
 8010858:	6163      	str	r3, [r4, #20]
 801085a:	9b01      	ldr	r3, [sp, #4]
 801085c:	6120      	str	r0, [r4, #16]
 801085e:	b15b      	cbz	r3, 8010878 <__smakebuf_r+0x74>
 8010860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010864:	4630      	mov	r0, r6
 8010866:	f000 f839 	bl	80108dc <_isatty_r>
 801086a:	b128      	cbz	r0, 8010878 <__smakebuf_r+0x74>
 801086c:	89a3      	ldrh	r3, [r4, #12]
 801086e:	f023 0303 	bic.w	r3, r3, #3
 8010872:	f043 0301 	orr.w	r3, r3, #1
 8010876:	81a3      	strh	r3, [r4, #12]
 8010878:	89a0      	ldrh	r0, [r4, #12]
 801087a:	4305      	orrs	r5, r0
 801087c:	81a5      	strh	r5, [r4, #12]
 801087e:	e7cd      	b.n	801081c <__smakebuf_r+0x18>
 8010880:	0800ee11 	.word	0x0800ee11

08010884 <_malloc_usable_size_r>:
 8010884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010888:	1f18      	subs	r0, r3, #4
 801088a:	2b00      	cmp	r3, #0
 801088c:	bfbc      	itt	lt
 801088e:	580b      	ldrlt	r3, [r1, r0]
 8010890:	18c0      	addlt	r0, r0, r3
 8010892:	4770      	bx	lr

08010894 <_read_r>:
 8010894:	b538      	push	{r3, r4, r5, lr}
 8010896:	4d07      	ldr	r5, [pc, #28]	; (80108b4 <_read_r+0x20>)
 8010898:	4604      	mov	r4, r0
 801089a:	4608      	mov	r0, r1
 801089c:	4611      	mov	r1, r2
 801089e:	2200      	movs	r2, #0
 80108a0:	602a      	str	r2, [r5, #0]
 80108a2:	461a      	mov	r2, r3
 80108a4:	f7f0 fc6e 	bl	8001184 <_read>
 80108a8:	1c43      	adds	r3, r0, #1
 80108aa:	d102      	bne.n	80108b2 <_read_r+0x1e>
 80108ac:	682b      	ldr	r3, [r5, #0]
 80108ae:	b103      	cbz	r3, 80108b2 <_read_r+0x1e>
 80108b0:	6023      	str	r3, [r4, #0]
 80108b2:	bd38      	pop	{r3, r4, r5, pc}
 80108b4:	2000b268 	.word	0x2000b268

080108b8 <_fstat_r>:
 80108b8:	b538      	push	{r3, r4, r5, lr}
 80108ba:	4d07      	ldr	r5, [pc, #28]	; (80108d8 <_fstat_r+0x20>)
 80108bc:	2300      	movs	r3, #0
 80108be:	4604      	mov	r4, r0
 80108c0:	4608      	mov	r0, r1
 80108c2:	4611      	mov	r1, r2
 80108c4:	602b      	str	r3, [r5, #0]
 80108c6:	f7f0 fc7d 	bl	80011c4 <_fstat>
 80108ca:	1c43      	adds	r3, r0, #1
 80108cc:	d102      	bne.n	80108d4 <_fstat_r+0x1c>
 80108ce:	682b      	ldr	r3, [r5, #0]
 80108d0:	b103      	cbz	r3, 80108d4 <_fstat_r+0x1c>
 80108d2:	6023      	str	r3, [r4, #0]
 80108d4:	bd38      	pop	{r3, r4, r5, pc}
 80108d6:	bf00      	nop
 80108d8:	2000b268 	.word	0x2000b268

080108dc <_isatty_r>:
 80108dc:	b538      	push	{r3, r4, r5, lr}
 80108de:	4d06      	ldr	r5, [pc, #24]	; (80108f8 <_isatty_r+0x1c>)
 80108e0:	2300      	movs	r3, #0
 80108e2:	4604      	mov	r4, r0
 80108e4:	4608      	mov	r0, r1
 80108e6:	602b      	str	r3, [r5, #0]
 80108e8:	f7f0 fc72 	bl	80011d0 <_isatty>
 80108ec:	1c43      	adds	r3, r0, #1
 80108ee:	d102      	bne.n	80108f6 <_isatty_r+0x1a>
 80108f0:	682b      	ldr	r3, [r5, #0]
 80108f2:	b103      	cbz	r3, 80108f6 <_isatty_r+0x1a>
 80108f4:	6023      	str	r3, [r4, #0]
 80108f6:	bd38      	pop	{r3, r4, r5, pc}
 80108f8:	2000b268 	.word	0x2000b268

080108fc <_init>:
 80108fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108fe:	bf00      	nop
 8010900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010902:	bc08      	pop	{r3}
 8010904:	469e      	mov	lr, r3
 8010906:	4770      	bx	lr

08010908 <_fini>:
 8010908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090a:	bf00      	nop
 801090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801090e:	bc08      	pop	{r3}
 8010910:	469e      	mov	lr, r3
 8010912:	4770      	bx	lr
