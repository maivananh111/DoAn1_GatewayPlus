
DoAn1_GatewayPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001073c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fcc  080108f0  080108f0  000208f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128bc  080128bc  0003037c  2**0
                  CONTENTS
  4 .ARM          00000008  080128bc  080128bc  000228bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128c4  080128c4  0003037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  080128c4  080128c4  000228c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080128f0  080128f0  000228f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  080128fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003037c  2**0
                  CONTENTS
 10 .bss          0000b728  20000380  20000380  00030380  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000baa8  2000baa8  00030380  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00066c30  00000000  00000000  000303ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b0b3  00000000  00000000  00096fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002be27  00000000  00000000  000a208f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d28  00000000  00000000  000cdeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00008198  00000000  00000000  000cfbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001251f  00000000  00000000  000d7d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042b0d  00000000  00000000  000ea297  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108ec4  00000000  00000000  0012cda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00235c68  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000079c8  00000000  00000000  00235cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000380 	.word	0x20000380
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080108d4 	.word	0x080108d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000384 	.word	0x20000384
 80001ec:	080108d4 	.word	0x080108d4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <HAL_Driver_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8001038:	b086      	sub	sp, #24
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800103a:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <HAL_Driver_Init+0x70>)
 800103c:	2200      	movs	r2, #0
 800103e:	9201      	str	r2, [sp, #4]
 8001040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001042:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001046:	6319      	str	r1, [r3, #48]	; 0x30
 8001048:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800104a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800104e:	9101      	str	r1, [sp, #4]
 8001050:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	9202      	str	r2, [sp, #8]
 8001054:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001056:	f041 0104 	orr.w	r1, r1, #4
 800105a:	6319      	str	r1, [r3, #48]	; 0x30
 800105c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800105e:	f001 0104 	and.w	r1, r1, #4
 8001062:	9102      	str	r1, [sp, #8]
 8001064:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	9203      	str	r2, [sp, #12]
 8001068:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800106a:	f041 0101 	orr.w	r1, r1, #1
 800106e:	6319      	str	r1, [r3, #48]	; 0x30
 8001070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001072:	f001 0101 	and.w	r1, r1, #1
 8001076:	9103      	str	r1, [sp, #12]
 8001078:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107a:	9204      	str	r2, [sp, #16]
 800107c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800107e:	f041 0102 	orr.w	r1, r1, #2
 8001082:	6319      	str	r1, [r3, #48]	; 0x30
 8001084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001086:	f001 0102 	and.w	r1, r1, #2
 800108a:	9104      	str	r1, [sp, #16]
 800108c:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800108e:	9205      	str	r2, [sp, #20]
 8001090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001092:	f042 0208 	orr.w	r2, r2, #8
 8001096:	631a      	str	r2, [r3, #48]	; 0x30
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	9b05      	ldr	r3, [sp, #20]
}
 80010a2:	b006      	add	sp, #24
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <main>:
	return main_application();
 80010ac:	f009 bca4 	b.w	800a9f8 <main_application>

080010b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was handle(call NMI_Handler)...");
 80010b2:	4902      	ldr	r1, [pc, #8]	; (80010bc <NMI_Handler+0xc>)
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <NMI_Handler+0x10>)
 80010b6:	f00a f901 	bl	800b2bc <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <NMI_Handler+0xa>
 80010bc:	080108f0 	.word	0x080108f0
 80010c0:	08010928 	.word	0x08010928

080010c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was handle(call HardFault_Handler)...");
 80010c6:	4902      	ldr	r1, [pc, #8]	; (80010d0 <HardFault_Handler+0xc>)
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <HardFault_Handler+0x10>)
 80010ca:	f00a f8f7 	bl	800b2bc <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0xa>
 80010d0:	08010934 	.word	0x08010934
 80010d4:	08010970 	.word	0x08010970

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was handle(call MemManage_Handler)...");
 80010da:	4902      	ldr	r1, [pc, #8]	; (80010e4 <MemManage_Handler+0xc>)
 80010dc:	4802      	ldr	r0, [pc, #8]	; (80010e8 <MemManage_Handler+0x10>)
 80010de:	f00a f8ed 	bl	800b2bc <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <MemManage_Handler+0xa>
 80010e4:	0801097c 	.word	0x0801097c
 80010e8:	08010928 	.word	0x08010928

080010ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was handle(call BusFault_Handler)...");
 80010ee:	4902      	ldr	r1, [pc, #8]	; (80010f8 <BusFault_Handler+0xc>)
 80010f0:	4802      	ldr	r0, [pc, #8]	; (80010fc <BusFault_Handler+0x10>)
 80010f2:	f00a f8e3 	bl	800b2bc <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0xa>
 80010f8:	080109c0 	.word	0x080109c0
 80010fc:	08010970 	.word	0x08010970

08001100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001100:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was handle(call UsageFault_Handler)...");
 8001102:	4902      	ldr	r1, [pc, #8]	; (800110c <UsageFault_Handler+0xc>)
 8001104:	4802      	ldr	r0, [pc, #8]	; (8001110 <UsageFault_Handler+0x10>)
 8001106:	f00a f8d9 	bl	800b2bc <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <UsageFault_Handler+0xa>
 800110c:	080109fc 	.word	0x080109fc
 8001110:	08010970 	.word	0x08010970

08001114 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was handle(call DebugMon_Handler)...");
 8001114:	4901      	ldr	r1, [pc, #4]	; (800111c <DebugMon_Handler+0x8>)
 8001116:	4802      	ldr	r0, [pc, #8]	; (8001120 <DebugMon_Handler+0xc>)
 8001118:	f00a b8d0 	b.w	800b2bc <exception_interrupt_handler>
 800111c:	08010a3c 	.word	0x08010a3c
 8001120:	08010928 	.word	0x08010928

08001124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001124:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 8001126:	f007 fa13 	bl	8008550 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800112a:	f000 f8e7 	bl	80012fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800112e:	f002 faed 	bl	800370c <xTaskGetSchedulerState>
 8001132:	2801      	cmp	r0, #1
 8001134:	d100      	bne.n	8001138 <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bd08      	pop	{r3, pc}
 8001138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800113c:	f002 bec2 	b.w	8003ec4 <xPortSysTickHandler>

08001140 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001140:	4801      	ldr	r0, [pc, #4]	; (8001148 <DMA2_Stream3_IRQHandler+0x8>)
 8001142:	f000 b8e7 	b.w	8001314 <HAL_DMA_IRQHandler>
 8001146:	bf00      	nop
 8001148:	2000039c 	.word	0x2000039c

0800114c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800114c:	4801      	ldr	r0, [pc, #4]	; (8001154 <ETH_IRQHandler+0x8>)
 800114e:	f000 b9d5 	b.w	80014fc <HAL_ETH_IRQHandler>
 8001152:	bf00      	nop
 8001154:	2000046c 	.word	0x2000046c

08001158 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001158:	4801      	ldr	r0, [pc, #4]	; (8001160 <DMA2_Stream6_IRQHandler+0x8>)
 800115a:	f000 b8db 	b.w	8001314 <HAL_DMA_IRQHandler>
 800115e:	bf00      	nop
 8001160:	200003fc 	.word	0x200003fc

08001164 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001168:	4b02      	ldr	r3, [pc, #8]	; (8001174 <_kill+0xc>)
 800116a:	2216      	movs	r2, #22
 800116c:	601a      	str	r2, [r3, #0]
  return -1;
}
 800116e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001172:	4770      	bx	lr
 8001174:	2000b288 	.word	0x2000b288

08001178 <_exit>:
  errno = EINVAL;
 8001178:	4b01      	ldr	r3, [pc, #4]	; (8001180 <_exit+0x8>)
 800117a:	2216      	movs	r2, #22
 800117c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800117e:	e7fe      	b.n	800117e <_exit+0x6>
 8001180:	2000b288 	.word	0x2000b288

08001184 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001184:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	1e16      	subs	r6, r2, #0
 8001188:	dd07      	ble.n	800119a <_read+0x16>
 800118a:	460c      	mov	r4, r1
 800118c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800118e:	f3af 8000 	nop.w
 8001192:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001196:	42a5      	cmp	r5, r4
 8001198:	d1f9      	bne.n	800118e <_read+0xa>
  }

  return len;
}
 800119a:	4630      	mov	r0, r6
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	bf00      	nop

080011a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a2:	1e16      	subs	r6, r2, #0
 80011a4:	dd07      	ble.n	80011b6 <_write+0x16>
 80011a6:	460c      	mov	r4, r1
 80011a8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80011aa:	f814 0b01 	ldrb.w	r0, [r4], #1
 80011ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b2:	42ac      	cmp	r4, r5
 80011b4:	d1f9      	bne.n	80011aa <_write+0xa>
  }
  return len;
}
 80011b6:	4630      	mov	r0, r6
 80011b8:	bd70      	pop	{r4, r5, r6, pc}
 80011ba:	bf00      	nop

080011bc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80011ca:	2000      	movs	r0, #0
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80011d0:	2001      	movs	r0, #1
 80011d2:	4770      	bx	lr

080011d4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80011d4:	2000      	movs	r0, #0
 80011d6:	4770      	bx	lr

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011da:	4c0d      	ldr	r4, [pc, #52]	; (8001210 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <_sbrk+0x3c>)
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 80011e0:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e2:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 80011e4:	b182      	cbz	r2, 8001208 <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4410      	add	r0, r2
 80011e8:	4288      	cmp	r0, r1
 80011ea:	d804      	bhi.n	80011f6 <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80011ec:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 80011ee:	4610      	mov	r0, r2
 80011f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011f4:	4770      	bx	lr
    errno = ENOMEM;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <_sbrk+0x44>)
}
 80011f8:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 80011fc:	220c      	movs	r2, #12
 80011fe:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001204:	4610      	mov	r0, r2
 8001206:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8001208:	4a05      	ldr	r2, [pc, #20]	; (8001220 <_sbrk+0x48>)
 800120a:	6022      	str	r2, [r4, #0]
 800120c:	e7eb      	b.n	80011e6 <_sbrk+0xe>
 800120e:	bf00      	nop
 8001210:	2000045c 	.word	0x2000045c
 8001214:	20030000 	.word	0x20030000
 8001218:	00000400 	.word	0x00000400
 800121c:	2000b288 	.word	0x2000b288
 8001220:	2000baa8 	.word	0x2000baa8

08001224 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <SystemInit+0x10>)
 8001226:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800122a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800122e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001238:	4a16      	ldr	r2, [pc, #88]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800123a:	6893      	ldr	r3, [r2, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 8001240:	2b04      	cmp	r3, #4
 8001242:	d00c      	beq.n	800125e <SystemCoreClockUpdate+0x26>
 8001244:	2b08      	cmp	r3, #8
 8001246:	d00c      	beq.n	8001262 <SystemCoreClockUpdate+0x2a>
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800124a:	4a12      	ldr	r2, [pc, #72]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800124c:	4813      	ldr	r0, [pc, #76]	; (800129c <SystemCoreClockUpdate+0x64>)
 800124e:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001250:	4913      	ldr	r1, [pc, #76]	; (80012a0 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001252:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001256:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 8001258:	40d3      	lsrs	r3, r2
 800125a:	600b      	str	r3, [r1, #0]
}
 800125c:	4770      	bx	lr
  switch (tmp)
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <SystemCoreClockUpdate+0x6c>)
 8001260:	e7f3      	b.n	800124a <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001262:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001264:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 8001266:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800126e:	6853      	ldr	r3, [r2, #4]
 8001270:	bf14      	ite	ne
 8001272:	4a0c      	ldrne	r2, [pc, #48]	; (80012a4 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001274:	4a08      	ldreq	r2, [pc, #32]	; (8001298 <SystemCoreClockUpdate+0x60>)
 8001276:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <SystemCoreClockUpdate+0x5c>)
 800127c:	6852      	ldr	r2, [r2, #4]
 800127e:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001282:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001286:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001288:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800128c:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 800128e:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001292:	e7da      	b.n	800124a <SystemCoreClockUpdate+0x12>
 8001294:	40023800 	.word	0x40023800
 8001298:	00f42400 	.word	0x00f42400
 800129c:	08010a7c 	.word	0x08010a7c
 80012a0:	20000000 	.word	0x20000000
 80012a4:	017d7840 	.word	0x017d7840

080012a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80012a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012ac:	480d      	ldr	r0, [pc, #52]	; (80012e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ae:	490e      	ldr	r1, [pc, #56]	; (80012e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b0:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012b4:	e002      	b.n	80012bc <LoopCopyDataInit>

080012b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ba:	3304      	adds	r3, #4

080012bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c0:	d3f9      	bcc.n	80012b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012c2:	4a0b      	ldr	r2, [pc, #44]	; (80012f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012c4:	4c0b      	ldr	r4, [pc, #44]	; (80012f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c8:	e001      	b.n	80012ce <LoopFillZerobss>

080012ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012cc:	3204      	adds	r2, #4

080012ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d0:	d3fb      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d2:	f7ff ffa7 	bl	8001224 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012d6:	f00b f803 	bl	800c2e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012da:	f7ff fee7 	bl	80010ac <main>
  bx  lr    
 80012de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e8:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 80012ec:	080128fc 	.word	0x080128fc
  ldr r2, =_sbss
 80012f0:	20000380 	.word	0x20000380
  ldr r4, =_ebss
 80012f4:	2000baa8 	.word	0x2000baa8

080012f8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f8:	e7fe      	b.n	80012f8 <CAN1_RX0_IRQHandler>
	...

080012fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80012fc:	4a03      	ldr	r2, [pc, #12]	; (800130c <HAL_IncTick+0x10>)
 80012fe:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_IncTick+0x14>)
 8001300:	6811      	ldr	r1, [r2, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	440b      	add	r3, r1
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000460 	.word	0x20000460
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001318:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 800131a:	4a74      	ldr	r2, [pc, #464]	; (80014ec <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800131e:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 8001320:	2300      	movs	r3, #0
 8001322:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001324:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001326:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001328:	2208      	movs	r2, #8
 800132a:	409a      	lsls	r2, r3
 800132c:	4222      	tst	r2, r4
{
 800132e:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	d004      	beq.n	800133c <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001332:	6801      	ldr	r1, [r0, #0]
 8001334:	680f      	ldr	r7, [r1, #0]
 8001336:	0778      	lsls	r0, r7, #29
 8001338:	f100 808a 	bmi.w	8001450 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800133c:	2201      	movs	r2, #1
 800133e:	409a      	lsls	r2, r3
 8001340:	4222      	tst	r2, r4
 8001342:	d004      	beq.n	800134e <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001344:	f8d8 1000 	ldr.w	r1, [r8]
 8001348:	6949      	ldr	r1, [r1, #20]
 800134a:	0609      	lsls	r1, r1, #24
 800134c:	d478      	bmi.n	8001440 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800134e:	2204      	movs	r2, #4
 8001350:	409a      	lsls	r2, r3
 8001352:	4222      	tst	r2, r4
 8001354:	d004      	beq.n	8001360 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001356:	f8d8 1000 	ldr.w	r1, [r8]
 800135a:	6809      	ldr	r1, [r1, #0]
 800135c:	078f      	lsls	r7, r1, #30
 800135e:	d467      	bmi.n	8001430 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001360:	2210      	movs	r2, #16
 8001362:	409a      	lsls	r2, r3
 8001364:	4222      	tst	r2, r4
 8001366:	d004      	beq.n	8001372 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001368:	f8d8 1000 	ldr.w	r1, [r8]
 800136c:	680f      	ldr	r7, [r1, #0]
 800136e:	0738      	lsls	r0, r7, #28
 8001370:	d449      	bmi.n	8001406 <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001372:	2220      	movs	r2, #32
 8001374:	409a      	lsls	r2, r3
 8001376:	4222      	tst	r2, r4
 8001378:	d017      	beq.n	80013aa <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137a:	f8d8 1000 	ldr.w	r1, [r8]
 800137e:	680c      	ldr	r4, [r1, #0]
 8001380:	06e0      	lsls	r0, r4, #27
 8001382:	d512      	bpl.n	80013aa <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001384:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001386:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800138a:	2a05      	cmp	r2, #5
 800138c:	d073      	beq.n	8001476 <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800138e:	680b      	ldr	r3, [r1, #0]
 8001390:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001394:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001396:	f000 8090 	beq.w	80014ba <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800139a:	0319      	lsls	r1, r3, #12
 800139c:	f140 809b 	bpl.w	80014d6 <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 80013a0:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80013a4:	b10b      	cbz	r3, 80013aa <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80013a6:	4640      	mov	r0, r8
 80013a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80013aa:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013ae:	b33b      	cbz	r3, 8001400 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80013b0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80013b4:	07da      	lsls	r2, r3, #31
 80013b6:	d51b      	bpl.n	80013f0 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013b8:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013bc:	494c      	ldr	r1, [pc, #304]	; (80014f0 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80013be:	2305      	movs	r3, #5
 80013c0:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013c4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c6:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80013ca:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ce:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e002      	b.n	80013da <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	07db      	lsls	r3, r3, #31
 80013d8:	d504      	bpl.n	80013e4 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 80013da:	9b01      	ldr	r3, [sp, #4]
 80013dc:	3301      	adds	r3, #1
 80013de:	42ab      	cmp	r3, r5
 80013e0:	9301      	str	r3, [sp, #4]
 80013e2:	d9f7      	bls.n	80013d4 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013e4:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013e6:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80013e8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80013ec:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013f0:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80013f4:	b123      	cbz	r3, 8001400 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013f6:	4640      	mov	r0, r8
    }
  }
}
 80013f8:	b002      	add	sp, #8
 80013fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80013fe:	4718      	bx	r3
}
 8001400:	b002      	add	sp, #8
 8001402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001406:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001408:	680a      	ldr	r2, [r1, #0]
 800140a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800140e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001410:	d12a      	bne.n	8001468 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001412:	05d7      	lsls	r7, r2, #23
 8001414:	d403      	bmi.n	800141e <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001416:	680a      	ldr	r2, [r1, #0]
 8001418:	f022 0208 	bic.w	r2, r2, #8
 800141c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800141e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8001422:	2a00      	cmp	r2, #0
 8001424:	d0a5      	beq.n	8001372 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 8001426:	4640      	mov	r0, r8
 8001428:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800142a:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800142e:	e7a0      	b.n	8001372 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001430:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001432:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001436:	f042 0204 	orr.w	r2, r2, #4
 800143a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800143e:	e78f      	b.n	8001360 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001440:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001442:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8001446:	f042 0202 	orr.w	r2, r2, #2
 800144a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800144e:	e77e      	b.n	800134e <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001450:	680f      	ldr	r7, [r1, #0]
 8001452:	f027 0704 	bic.w	r7, r7, #4
 8001456:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001458:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800145a:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800145e:	f042 0201 	orr.w	r2, r2, #1
 8001462:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8001466:	e769      	b.n	800133c <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001468:	0312      	lsls	r2, r2, #12
 800146a:	d5d8      	bpl.n	800141e <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800146c:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001470:	2a00      	cmp	r2, #0
 8001472:	d1d8      	bne.n	8001426 <HAL_DMA_IRQHandler+0x112>
 8001474:	e77d      	b.n	8001372 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001476:	680a      	ldr	r2, [r1, #0]
 8001478:	f022 0216 	bic.w	r2, r2, #22
 800147c:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800147e:	694a      	ldr	r2, [r1, #20]
 8001480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001484:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001486:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800148a:	b352      	cbz	r2, 80014e2 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800148c:	680a      	ldr	r2, [r1, #0]
 800148e:	f022 0208 	bic.w	r2, r2, #8
 8001492:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001494:	223f      	movs	r2, #63	; 0x3f
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800149a:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149e:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80014a0:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 80014a2:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80014a4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80014a8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80014ac:	2900      	cmp	r1, #0
 80014ae:	d0a7      	beq.n	8001400 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 80014b0:	4640      	mov	r0, r8
}
 80014b2:	b002      	add	sp, #8
 80014b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 80014b8:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ba:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80014be:	f47f af6f 	bne.w	80013a0 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014c2:	680a      	ldr	r2, [r1, #0]
 80014c4:	f022 0210 	bic.w	r2, r2, #16
 80014c8:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80014ca:	2201      	movs	r2, #1
 80014cc:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80014d0:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 80014d4:	e764      	b.n	80013a0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 80014d6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f af63 	bne.w	80013a6 <HAL_DMA_IRQHandler+0x92>
 80014e0:	e763      	b.n	80013aa <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014e2:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d1d0      	bne.n	800148c <HAL_DMA_IRQHandler+0x178>
 80014ea:	e7d3      	b.n	8001494 <HAL_DMA_IRQHandler+0x180>
 80014ec:	20000000 	.word	0x20000000
 80014f0:	1b4e81b5 	.word	0x1b4e81b5

080014f4 <HAL_ETH_PMTCallback>:
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <HAL_ETH_WakeUpCallback>:
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop

080014fc <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80014fc:	6802      	ldr	r2, [r0, #0]
 80014fe:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001502:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001504:	6959      	ldr	r1, [r3, #20]
 8001506:	0649      	lsls	r1, r1, #25
{
 8001508:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800150a:	d502      	bpl.n	8001512 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800150c:	69d9      	ldr	r1, [r3, #28]
 800150e:	0649      	lsls	r1, r1, #25
 8001510:	d448      	bmi.n	80015a4 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001512:	6959      	ldr	r1, [r3, #20]
 8001514:	07c9      	lsls	r1, r1, #31
 8001516:	d502      	bpl.n	800151e <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001518:	69d9      	ldr	r1, [r3, #28]
 800151a:	07c8      	lsls	r0, r1, #31
 800151c:	d438      	bmi.n	8001590 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800151e:	6959      	ldr	r1, [r3, #20]
 8001520:	0409      	lsls	r1, r1, #16
 8001522:	d502      	bpl.n	800152a <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001524:	69d9      	ldr	r1, [r3, #28]
 8001526:	0408      	lsls	r0, r1, #16
 8001528:	d40e      	bmi.n	8001548 <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800152a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800152c:	0719      	lsls	r1, r3, #28
 800152e:	d423      	bmi.n	8001578 <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_ETH_IRQHandler+0xd0>)
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	0312      	lsls	r2, r2, #12
 8001536:	d400      	bmi.n	800153a <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001538:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800153a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800153e:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001540:	4620      	mov	r0, r4
 8001542:	f7ff ffd9 	bl	80014f8 <HAL_ETH_WakeUpCallback>
}
 8001546:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001548:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800154c:	f042 0208 	orr.w	r2, r2, #8
 8001550:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001554:	695a      	ldr	r2, [r3, #20]
 8001556:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800155a:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800155c:	d12a      	bne.n	80015b4 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800155e:	f248 6180 	movw	r1, #34432	; 0x8680
 8001562:	400a      	ands	r2, r1
 8001564:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001568:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 800156a:	4620      	mov	r0, r4
 800156c:	f000 f844 	bl	80015f8 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001570:	6822      	ldr	r2, [r4, #0]
 8001572:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001574:	0719      	lsls	r1, r3, #28
 8001576:	d5db      	bpl.n	8001530 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001578:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800157a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800157e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001582:	4620      	mov	r0, r4
 8001584:	f7ff ffb6 	bl	80014f4 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001588:	2300      	movs	r3, #0
 800158a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 800158e:	e7cf      	b.n	8001530 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001590:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001594:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001596:	4620      	mov	r0, r4
 8001598:	f000 f828 	bl	80015ec <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800159c:	6822      	ldr	r2, [r4, #0]
 800159e:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015a2:	e7bc      	b.n	800151e <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80015a4:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <HAL_ETH_IRQHandler+0xd4>)
 80015a6:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 80015a8:	f000 f81a 	bl	80015e0 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80015ac:	6822      	ldr	r2, [r4, #0]
 80015ae:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80015b2:	e7ae      	b.n	8001512 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <HAL_ETH_IRQHandler+0xd8>)
 80015b6:	4002      	ands	r2, r0
 80015b8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015bc:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80015be:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80015c0:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 80015c4:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80015c6:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 80015ca:	e7ce      	b.n	800156a <HAL_ETH_IRQHandler+0x6e>
 80015cc:	40013c00 	.word	0x40013c00
 80015d0:	00010040 	.word	0x00010040
 80015d4:	007e2000 	.word	0x007e2000

080015d8 <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 80015d8:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop

080015e0 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 80015e0:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <HAL_ETH_RxCpltCallback+0x8>)
 80015e2:	6818      	ldr	r0, [r3, #0]
 80015e4:	f000 b816 	b.w	8001614 <osSemaphoreRelease>
 80015e8:	20000464 	.word	0x20000464

080015ec <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 80015ec:	4b01      	ldr	r3, [pc, #4]	; (80015f4 <HAL_ETH_TxCpltCallback+0x8>)
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	f000 b810 	b.w	8001614 <osSemaphoreRelease>
 80015f4:	20000468 	.word	0x20000468

080015f8 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80015f8:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80015fa:	f7ff ffed 	bl	80015d8 <HAL_ETH_GetDMAError>
 80015fe:	0603      	lsls	r3, r0, #24
 8001600:	d400      	bmi.n	8001604 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001602:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001604:	4b02      	ldr	r3, [pc, #8]	; (8001610 <HAL_ETH_ErrorCallback+0x18>)
 8001606:	6818      	ldr	r0, [r3, #0]
}
 8001608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 800160c:	f000 b802 	b.w	8001614 <osSemaphoreRelease>
 8001610:	20000464 	.word	0x20000464

08001614 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8001614:	b330      	cbz	r0, 8001664 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001616:	b510      	push	{r4, lr}
 8001618:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800161a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800161e:	b1ab      	cbz	r3, 800164c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 8001620:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001622:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 8001624:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001626:	f000 fc83 	bl	8001f30 <xQueueGiveFromISR>
 800162a:	2801      	cmp	r0, #1
 800162c:	d117      	bne.n	800165e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 800162e:	9b01      	ldr	r3, [sp, #4]
 8001630:	b193      	cbz	r3, 8001658 <osSemaphoreRelease+0x44>
 8001632:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800163a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800163e:	f3bf 8f4f 	dsb	sy
 8001642:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8001646:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8001648:	b002      	add	sp, #8
 800164a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800164c:	461a      	mov	r2, r3
 800164e:	4619      	mov	r1, r3
 8001650:	f000 fa52 	bl	8001af8 <xQueueGenericSend>
 8001654:	2801      	cmp	r0, #1
 8001656:	d102      	bne.n	800165e <osSemaphoreRelease+0x4a>
  stat = osOK;
 8001658:	2000      	movs	r0, #0
}
 800165a:	b002      	add	sp, #8
 800165c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 800165e:	f06f 0002 	mvn.w	r0, #2
 8001662:	e7fa      	b.n	800165a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 8001664:	f06f 0003 	mvn.w	r0, #3
}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop

0800166c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <vApplicationGetIdleTaskMemory+0x14>)
 800166e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001670:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001672:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001674:	4c03      	ldr	r4, [pc, #12]	; (8001684 <vApplicationGetIdleTaskMemory+0x18>)
 8001676:	600c      	str	r4, [r1, #0]
}
 8001678:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800167c:	6013      	str	r3, [r2, #0]
}
 800167e:	4770      	bx	lr
 8001680:	2000071c 	.word	0x2000071c
 8001684:	2000051c 	.word	0x2000051c

08001688 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <vApplicationGetTimerTaskMemory+0x18>)
 800168a:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800168c:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800168e:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001692:	4c04      	ldr	r4, [pc, #16]	; (80016a4 <vApplicationGetTimerTaskMemory+0x1c>)
 8001694:	600c      	str	r4, [r1, #0]
}
 8001696:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000b88 	.word	0x20000b88
 80016a4:	20000788 	.word	0x20000788

080016a8 <vEventGroupSetBitsCallback>:
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80016a8:	2800      	cmp	r0, #0
 80016aa:	d03d      	beq.n	8001728 <vEventGroupSetBitsCallback+0x80>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80016ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80016b0:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
 80016b4:	4688      	mov	r8, r1
 80016b6:	d008      	beq.n	80016ca <vEventGroupSetBitsCallback+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80016b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80016bc:	f383 8811 	msr	BASEPRI, r3
 80016c0:	f3bf 8f6f 	isb	sy
 80016c4:	f3bf 8f4f 	dsb	sy
 80016c8:	e7fe      	b.n	80016c8 <vEventGroupSetBitsCallback+0x20>
 80016ca:	4605      	mov	r5, r0
	vTaskSuspendAll();
 80016cc:	f001 fdfc 	bl	80032c8 <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016d0:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 80016d2:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80016d4:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016d8:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
 80016dc:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
 80016de:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 80016e0:	d10c      	bne.n	80016fc <vEventGroupSetBitsCallback+0x54>
 80016e2:	e01c      	b.n	800171e <vEventGroupSetBitsCallback+0x76>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80016e4:	ea13 0f0c 	tst.w	r3, ip
 80016e8:	d006      	beq.n	80016f8 <vEventGroupSetBitsCallback+0x50>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80016ea:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 80016ec:	bf48      	it	mi
 80016ee:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80016f2:	f001 ff61 	bl	80035b8 <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80016f6:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 80016f8:	42a7      	cmp	r7, r4
 80016fa:	d00e      	beq.n	800171a <vEventGroupSetBitsCallback+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80016fc:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80016fe:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001702:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8001704:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8001706:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800170a:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800170e:	d0e9      	beq.n	80016e4 <vEventGroupSetBitsCallback+0x3c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8001710:	ea3c 0e03 	bics.w	lr, ip, r3
 8001714:	d0e9      	beq.n	80016ea <vEventGroupSetBitsCallback+0x42>
		while( pxListItem != pxListEnd )
 8001716:	42a7      	cmp	r7, r4
 8001718:	d1f0      	bne.n	80016fc <vEventGroupSetBitsCallback+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800171a:	ea23 0306 	bic.w	r3, r3, r6
 800171e:	602b      	str	r3, [r5, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
 8001720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
 8001724:	f001 bdd8 	b.w	80032d8 <xTaskResumeAll>
 8001728:	f04f 0340 	mov.w	r3, #64	; 0x40
 800172c:	f383 8811 	msr	BASEPRI, r3
 8001730:	f3bf 8f6f 	isb	sy
 8001734:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8001738:	e7fe      	b.n	8001738 <vEventGroupSetBitsCallback+0x90>
 800173a:	bf00      	nop

0800173c <xEventGroupCreate>:
	{
 800173c:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800173e:	2020      	movs	r0, #32
 8001740:	f002 fcb8 	bl	80040b4 <pvPortMalloc>
		if( pxEventBits != NULL )
 8001744:	4604      	mov	r4, r0
 8001746:	b128      	cbz	r0, 8001754 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 8001748:	2500      	movs	r5, #0
 800174a:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800174e:	f000 f895 	bl	800187c <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8001752:	7725      	strb	r5, [r4, #28]
	}
 8001754:	4620      	mov	r0, r4
 8001756:	bd38      	pop	{r3, r4, r5, pc}

08001758 <xEventGroupWaitBits>:
{
 8001758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 800175c:	b1b0      	cbz	r0, 800178c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800175e:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 8001762:	460c      	mov	r4, r1
 8001764:	d109      	bne.n	800177a <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 8001766:	b9d1      	cbnz	r1, 800179e <xEventGroupWaitBits+0x46>
 8001768:	f04f 0340 	mov.w	r3, #64	; 0x40
 800176c:	f383 8811 	msr	BASEPRI, r3
 8001770:	f3bf 8f6f 	isb	sy
 8001774:	f3bf 8f4f 	dsb	sy
 8001778:	e7fe      	b.n	8001778 <xEventGroupWaitBits+0x20>
 800177a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800178a:	e7fe      	b.n	800178a <xEventGroupWaitBits+0x32>
 800178c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 800179c:	e7fe      	b.n	800179c <xEventGroupWaitBits+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800179e:	4617      	mov	r7, r2
 80017a0:	461e      	mov	r6, r3
 80017a2:	4605      	mov	r5, r0
 80017a4:	f001 ffb2 	bl	800370c <xTaskGetSchedulerState>
 80017a8:	b910      	cbnz	r0, 80017b0 <xEventGroupWaitBits+0x58>
 80017aa:	9b08      	ldr	r3, [sp, #32]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d13c      	bne.n	800182a <xEventGroupWaitBits+0xd2>
	vTaskSuspendAll();
 80017b0:	f001 fd8a 	bl	80032c8 <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80017b4:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 80017b8:	b36e      	cbz	r6, 8001816 <xEventGroupWaitBits+0xbe>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80017ba:	ea34 0309 	bics.w	r3, r4, r9
 80017be:	d02d      	beq.n	800181c <xEventGroupWaitBits+0xc4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 80017c0:	9b08      	ldr	r3, [sp, #32]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d03a      	beq.n	800183c <xEventGroupWaitBits+0xe4>
			if( xClearOnExit != pdFALSE )
 80017c6:	2f00      	cmp	r7, #0
 80017c8:	bf16      	itet	ne
 80017ca:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
 80017ce:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 80017d2:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
 80017d6:	2e00      	cmp	r6, #0
 80017d8:	bf08      	it	eq
 80017da:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80017dc:	4321      	orrs	r1, r4
 80017de:	461a      	mov	r2, r3
 80017e0:	1d28      	adds	r0, r5, #4
 80017e2:	f001 fdf5 	bl	80033d0 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 80017e6:	f001 fd77 	bl	80032d8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80017ea:	b948      	cbnz	r0, 8001800 <xEventGroupWaitBits+0xa8>
			portYIELD_WITHIN_API();
 80017ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80017f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80017f8:	f3bf 8f4f 	dsb	sy
 80017fc:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8001800:	f002 f874 	bl	80038ec <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001804:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 8001808:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800180a:	d01a      	beq.n	8001842 <xEventGroupWaitBits+0xea>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800180c:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 8001810:	4648      	mov	r0, r9
 8001812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8001816:	ea14 0f09 	tst.w	r4, r9
 800181a:	d0d1      	beq.n	80017c0 <xEventGroupWaitBits+0x68>
			if( xClearOnExit != pdFALSE )
 800181c:	b177      	cbz	r7, 800183c <xEventGroupWaitBits+0xe4>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800181e:	ea29 0404 	bic.w	r4, r9, r4
 8001822:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
 8001824:	f001 fd58 	bl	80032d8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8001828:	e7f2      	b.n	8001810 <xEventGroupWaitBits+0xb8>
 800182a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800183a:	e7fe      	b.n	800183a <xEventGroupWaitBits+0xe2>
	xAlreadyYielded = xTaskResumeAll();
 800183c:	f001 fd4c 	bl	80032d8 <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 8001840:	e7e6      	b.n	8001810 <xEventGroupWaitBits+0xb8>
			taskENTER_CRITICAL();
 8001842:	f002 fad7 	bl	8003df4 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 8001846:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
 800184a:	b94e      	cbnz	r6, 8001860 <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800184c:	ea14 0f09 	tst.w	r4, r9
 8001850:	d003      	beq.n	800185a <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 8001852:	b117      	cbz	r7, 800185a <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8001854:	ea29 0404 	bic.w	r4, r9, r4
 8001858:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
 800185a:	f002 faed 	bl	8003e38 <vPortExitCritical>
 800185e:	e7d5      	b.n	800180c <xEventGroupWaitBits+0xb4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8001860:	ea34 0309 	bics.w	r3, r4, r9
 8001864:	d1f9      	bne.n	800185a <xEventGroupWaitBits+0x102>
 8001866:	e7f4      	b.n	8001852 <xEventGroupWaitBits+0xfa>

08001868 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8001868:	4684      	mov	ip, r0
 800186a:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <xEventGroupSetBitsFromISR+0x10>)
 800186e:	460a      	mov	r2, r1
 8001870:	4661      	mov	r1, ip
 8001872:	f002 ba41 	b.w	8003cf8 <xTimerPendFunctionCallFromISR>
 8001876:	bf00      	nop
 8001878:	080016a9 	.word	0x080016a9

0800187c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800187c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001880:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001884:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001886:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800188a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800188e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop

08001894 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001894:	2300      	movs	r3, #0
 8001896:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop

0800189c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800189c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80018a2:	6802      	ldr	r2, [r0, #0]
{
 80018a4:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018a6:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80018a8:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80018aa:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80018ac:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80018ae:	6099      	str	r1, [r3, #8]
}
 80018b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80018b4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80018b6:	6002      	str	r2, [r0, #0]
}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80018bc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80018be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018c0:	1c6b      	adds	r3, r5, #1
 80018c2:	d010      	beq.n	80018e6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80018c4:	f100 0308 	add.w	r3, r0, #8
 80018c8:	461c      	mov	r4, r3
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d9fa      	bls.n	80018c8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80018d2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80018d4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80018d6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018d8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018da:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80018dc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 80018de:	6108      	str	r0, [r1, #16]
}
 80018e0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80018e2:	6002      	str	r2, [r0, #0]
}
 80018e4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80018e6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	e7f2      	b.n	80018d2 <vListInsert+0x16>

080018ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80018ec:	6903      	ldr	r3, [r0, #16]
{
 80018ee:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018f0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018f4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018f6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80018f8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018fa:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018fc:	bf08      	it	eq
 80018fe:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001900:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001902:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 8001906:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 8001908:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800190a:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800190c:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 800190e:	6818      	ldr	r0, [r3, #0]
}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001914:	b570      	push	{r4, r5, r6, lr}
 8001916:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001918:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800191a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800191c:	b920      	cbnz	r0, 8001928 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800191e:	6825      	ldr	r5, [r4, #0]
 8001920:	b34d      	cbz	r5, 8001976 <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001922:	3601      	adds	r6, #1
 8001924:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8001926:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001928:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800192a:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 800192c:	b97d      	cbnz	r5, 800194e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800192e:	6860      	ldr	r0, [r4, #4]
 8001930:	f00a fd0a 	bl	800c348 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001934:	6863      	ldr	r3, [r4, #4]
 8001936:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001938:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800193a:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800193c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800193e:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001940:	bf24      	itt	cs
 8001942:	6823      	ldrcs	r3, [r4, #0]
 8001944:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001946:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001948:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800194a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800194c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800194e:	68e0      	ldr	r0, [r4, #12]
 8001950:	f00a fcfa 	bl	800c348 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001954:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001956:	68e3      	ldr	r3, [r4, #12]
 8001958:	4251      	negs	r1, r2
 800195a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800195c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800195e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001960:	4293      	cmp	r3, r2
 8001962:	d202      	bcs.n	800196a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001964:	68a3      	ldr	r3, [r4, #8]
 8001966:	440b      	add	r3, r1
 8001968:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800196a:	2d02      	cmp	r5, #2
 800196c:	d008      	beq.n	8001980 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800196e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001970:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001972:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001974:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001976:	68a0      	ldr	r0, [r4, #8]
 8001978:	f001 ff1e 	bl	80037b8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800197c:	60a5      	str	r5, [r4, #8]
 800197e:	e7d0      	b.n	8001922 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001980:	2e01      	cmp	r6, #1
 8001982:	bf38      	it	cc
 8001984:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8001986:	2000      	movs	r0, #0
 8001988:	e7cc      	b.n	8001924 <prvCopyDataToQueue+0x10>
 800198a:	bf00      	nop

0800198c <xQueueGenericCreateStatic>:
	{
 800198c:	b530      	push	{r4, r5, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001994:	b940      	cbnz	r0, 80019a8 <xQueueGenericCreateStatic+0x1c>
 8001996:	f04f 0340 	mov.w	r3, #64	; 0x40
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	e7fe      	b.n	80019a6 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80019a8:	461d      	mov	r5, r3
 80019aa:	b17b      	cbz	r3, 80019cc <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80019ac:	b302      	cbz	r2, 80019f0 <xQueueGenericCreateStatic+0x64>
 80019ae:	b1b1      	cbz	r1, 80019de <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80019b0:	2350      	movs	r3, #80	; 0x50
 80019b2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80019b4:	9b01      	ldr	r3, [sp, #4]
 80019b6:	2b50      	cmp	r3, #80	; 0x50
 80019b8:	d027      	beq.n	8001a0a <xQueueGenericCreateStatic+0x7e>
 80019ba:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019be:	f383 8811 	msr	BASEPRI, r3
 80019c2:	f3bf 8f6f 	isb	sy
 80019c6:	f3bf 8f4f 	dsb	sy
 80019ca:	e7fe      	b.n	80019ca <xQueueGenericCreateStatic+0x3e>
 80019cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	f3bf 8f6f 	isb	sy
 80019d8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 80019dc:	e7fe      	b.n	80019dc <xQueueGenericCreateStatic+0x50>
 80019de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019e2:	f383 8811 	msr	BASEPRI, r3
 80019e6:	f3bf 8f6f 	isb	sy
 80019ea:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80019ee:	e7fe      	b.n	80019ee <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d135      	bne.n	8001a60 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80019f4:	2250      	movs	r2, #80	; 0x50
 80019f6:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80019f8:	9a01      	ldr	r2, [sp, #4]
 80019fa:	2a50      	cmp	r2, #80	; 0x50
 80019fc:	d1dd      	bne.n	80019ba <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80019fe:	2201      	movs	r2, #1
 8001a00:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001a04:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a06:	462a      	mov	r2, r5
 8001a08:	e004      	b.n	8001a14 <xQueueGenericCreateStatic+0x88>
 8001a0a:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001a0e:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001a10:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 8001a14:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 8001a18:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 8001a1a:	f002 f9eb 	bl	8003df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a1e:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 8001a22:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a24:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a26:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a2a:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a2c:	4401      	add	r1, r0
 8001a2e:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a30:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a32:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a34:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a36:	21ff      	movs	r1, #255	; 0xff
 8001a38:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a3c:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001a3e:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a42:	f105 0010 	add.w	r0, r5, #16
 8001a46:	f7ff ff19 	bl	800187c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a4a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8001a4e:	f7ff ff15 	bl	800187c <vListInitialise>
	taskEXIT_CRITICAL();
 8001a52:	f002 f9f1 	bl	8003e38 <vPortExitCritical>
	}
 8001a56:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 8001a58:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 8001a5c:	b003      	add	sp, #12
 8001a5e:	bd30      	pop	{r4, r5, pc}
 8001a60:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a64:	f383 8811 	msr	BASEPRI, r3
 8001a68:	f3bf 8f6f 	isb	sy
 8001a6c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a70:	e7fe      	b.n	8001a70 <xQueueGenericCreateStatic+0xe4>
 8001a72:	bf00      	nop

08001a74 <xQueueGenericCreate>:
	{
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a76:	b940      	cbnz	r0, 8001a8a <xQueueGenericCreate+0x16>
 8001a78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a7c:	f383 8811 	msr	BASEPRI, r3
 8001a80:	f3bf 8f6f 	isb	sy
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	e7fe      	b.n	8001a88 <xQueueGenericCreate+0x14>
 8001a8a:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a8c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a90:	3050      	adds	r0, #80	; 0x50
 8001a92:	460e      	mov	r6, r1
 8001a94:	4617      	mov	r7, r2
 8001a96:	f002 fb0d 	bl	80040b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	b340      	cbz	r0, 8001af0 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001aa4:	b336      	cbz	r6, 8001af4 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001aa6:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001aaa:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001aac:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001ab0:	f002 f9a0 	bl	8003df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ab4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001ab8:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aba:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001abc:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ac0:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ac2:	440a      	add	r2, r1
 8001ac4:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ac6:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ac8:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001aca:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001acc:	22ff      	movs	r2, #255	; 0xff
 8001ace:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ad2:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001ad4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ad8:	f104 0010 	add.w	r0, r4, #16
 8001adc:	f7ff fece 	bl	800187c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001ae0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ae4:	f7ff feca 	bl	800187c <vListInitialise>
	taskEXIT_CRITICAL();
 8001ae8:	f002 f9a6 	bl	8003e38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001aec:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8001af0:	4620      	mov	r0, r4
 8001af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001af4:	4603      	mov	r3, r0
 8001af6:	e7d8      	b.n	8001aaa <xQueueGenericCreate+0x36>

08001af8 <xQueueGenericSend>:
{
 8001af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001afc:	b085      	sub	sp, #20
 8001afe:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001b00:	2800      	cmp	r0, #0
 8001b02:	f000 80a4 	beq.w	8001c4e <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001b06:	4688      	mov	r8, r1
 8001b08:	461f      	mov	r7, r3
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	2900      	cmp	r1, #0
 8001b0e:	f000 8091 	beq.w	8001c34 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001b12:	2f02      	cmp	r7, #2
 8001b14:	d10b      	bne.n	8001b2e <xQueueGenericSend+0x36>
 8001b16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d008      	beq.n	8001b2e <xQueueGenericSend+0x36>
 8001b1c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001b20:	f383 8811 	msr	BASEPRI, r3
 8001b24:	f3bf 8f6f 	isb	sy
 8001b28:	f3bf 8f4f 	dsb	sy
 8001b2c:	e7fe      	b.n	8001b2c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001b2e:	f001 fded 	bl	800370c <xTaskGetSchedulerState>
 8001b32:	4605      	mov	r5, r0
 8001b34:	2800      	cmp	r0, #0
 8001b36:	f000 8093 	beq.w	8001c60 <xQueueGenericSend+0x168>
 8001b3a:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b3c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8001b40:	f002 f958 	bl	8003df4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001b44:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f0c0 80ef 	bcc.w	8001d2c <xQueueGenericSend+0x234>
 8001b4e:	2f02      	cmp	r7, #2
 8001b50:	f000 80ec 	beq.w	8001d2c <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001b54:	9801      	ldr	r0, [sp, #4]
 8001b56:	2800      	cmp	r0, #0
 8001b58:	f000 8101 	beq.w	8001d5e <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8001b5c:	2d00      	cmp	r5, #0
 8001b5e:	f000 80e1 	beq.w	8001d24 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8001b62:	f002 f969 	bl	8003e38 <vPortExitCritical>
		vTaskSuspendAll();
 8001b66:	f001 fbaf 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001b6a:	f002 f943 	bl	8003df4 <vPortEnterCritical>
 8001b6e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b72:	2bff      	cmp	r3, #255	; 0xff
 8001b74:	bf04      	itt	eq
 8001b76:	2300      	moveq	r3, #0
 8001b78:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001b7c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	bf04      	itt	eq
 8001b84:	2300      	moveq	r3, #0
 8001b86:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001b8a:	f002 f955 	bl	8003e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b8e:	a901      	add	r1, sp, #4
 8001b90:	a802      	add	r0, sp, #8
 8001b92:	f001 fd61 	bl	8003658 <xTaskCheckForTimeOut>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	f040 80e6 	bne.w	8001d68 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b9c:	f002 f92a 	bl	8003df4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001ba0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ba2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d068      	beq.n	8001c7a <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001ba8:	f002 f946 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001bac:	f002 f922 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001bb0:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001bb4:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bb6:	2d00      	cmp	r5, #0
 8001bb8:	dc04      	bgt.n	8001bc4 <xQueueGenericSend+0xcc>
 8001bba:	e011      	b.n	8001be0 <xQueueGenericSend+0xe8>
			--cTxLock;
 8001bbc:	1e6a      	subs	r2, r5, #1
 8001bbe:	b2d3      	uxtb	r3, r2
 8001bc0:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bc2:	b16b      	cbz	r3, 8001be0 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bc6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001bc8:	b153      	cbz	r3, 8001be0 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001bca:	f001 fcad 	bl	8003528 <xTaskRemoveFromEventList>
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d0f4      	beq.n	8001bbc <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8001bd2:	f001 fd95 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8001bd6:	1e6a      	subs	r2, r5, #1
 8001bd8:	b2d3      	uxtb	r3, r2
 8001bda:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f1      	bne.n	8001bc4 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 8001be0:	23ff      	movs	r3, #255	; 0xff
 8001be2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001be6:	f002 f927 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001bea:	f002 f903 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001bee:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001bf2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bf4:	2d00      	cmp	r5, #0
 8001bf6:	dd14      	ble.n	8001c22 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001bf8:	f104 0910 	add.w	r9, r4, #16
 8001bfc:	e003      	b.n	8001c06 <xQueueGenericSend+0x10e>
				--cRxLock;
 8001bfe:	1e6a      	subs	r2, r5, #1
 8001c00:	b2d3      	uxtb	r3, r2
 8001c02:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c04:	b16b      	cbz	r3, 8001c22 <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c06:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c08:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c0a:	b153      	cbz	r3, 8001c22 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c0c:	f001 fc8c 	bl	8003528 <xTaskRemoveFromEventList>
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d0f4      	beq.n	8001bfe <xQueueGenericSend+0x106>
					vTaskMissedYield();
 8001c14:	f001 fd74 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 8001c18:	1e6a      	subs	r2, r5, #1
 8001c1a:	b2d3      	uxtb	r3, r2
 8001c1c:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f1      	bne.n	8001c06 <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 8001c22:	23ff      	movs	r3, #255	; 0xff
 8001c24:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001c28:	f002 f906 	bl	8003e38 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001c2c:	f001 fb54 	bl	80032d8 <xTaskResumeAll>
 8001c30:	2501      	movs	r5, #1
 8001c32:	e785      	b.n	8001b40 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c34:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f43f af6b 	beq.w	8001b12 <xQueueGenericSend+0x1a>
 8001c3c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c40:	f383 8811 	msr	BASEPRI, r3
 8001c44:	f3bf 8f6f 	isb	sy
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	e7fe      	b.n	8001c4c <xQueueGenericSend+0x154>
 8001c4e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001c5e:	e7fe      	b.n	8001c5e <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f43f af6a 	beq.w	8001b3c <xQueueGenericSend+0x44>
 8001c68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c6c:	f383 8811 	msr	BASEPRI, r3
 8001c70:	f3bf 8f6f 	isb	sy
 8001c74:	f3bf 8f4f 	dsb	sy
 8001c78:	e7fe      	b.n	8001c78 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c7a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8001c7e:	f002 f8db 	bl	8003e38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c82:	9901      	ldr	r1, [sp, #4]
 8001c84:	4648      	mov	r0, r9
 8001c86:	f001 fb5b 	bl	8003340 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001c8a:	f002 f8b3 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001c8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c92:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c94:	2d00      	cmp	r5, #0
 8001c96:	dc04      	bgt.n	8001ca2 <xQueueGenericSend+0x1aa>
 8001c98:	e011      	b.n	8001cbe <xQueueGenericSend+0x1c6>
			--cTxLock;
 8001c9a:	1e6b      	subs	r3, r5, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ca0:	b16a      	cbz	r2, 8001cbe <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca4:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ca6:	b153      	cbz	r3, 8001cbe <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ca8:	f001 fc3e 	bl	8003528 <xTaskRemoveFromEventList>
 8001cac:	2800      	cmp	r0, #0
 8001cae:	d0f4      	beq.n	8001c9a <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8001cb0:	f001 fd26 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8001cb4:	1e6b      	subs	r3, r5, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d1f1      	bne.n	8001ca2 <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8001cbe:	23ff      	movs	r3, #255	; 0xff
 8001cc0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001cc4:	f002 f8b8 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001cc8:	f002 f894 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001ccc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001cd0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cd2:	2d00      	cmp	r5, #0
 8001cd4:	dc04      	bgt.n	8001ce0 <xQueueGenericSend+0x1e8>
 8001cd6:	e011      	b.n	8001cfc <xQueueGenericSend+0x204>
				--cRxLock;
 8001cd8:	1e6b      	subs	r3, r5, #1
 8001cda:	b2da      	uxtb	r2, r3
 8001cdc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cde:	b16a      	cbz	r2, 8001cfc <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ce2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ce4:	b153      	cbz	r3, 8001cfc <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ce6:	f001 fc1f 	bl	8003528 <xTaskRemoveFromEventList>
 8001cea:	2800      	cmp	r0, #0
 8001cec:	d0f4      	beq.n	8001cd8 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8001cee:	f001 fd07 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 8001cf2:	1e6b      	subs	r3, r5, #1
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001cf8:	2a00      	cmp	r2, #0
 8001cfa:	d1f1      	bne.n	8001ce0 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8001cfc:	23ff      	movs	r3, #255	; 0xff
 8001cfe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001d02:	f002 f899 	bl	8003e38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8001d06:	f001 fae7 	bl	80032d8 <xTaskResumeAll>
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d190      	bne.n	8001c30 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8001d0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d1a:	f3bf 8f4f 	dsb	sy
 8001d1e:	f3bf 8f6f 	isb	sy
 8001d22:	e785      	b.n	8001c30 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001d24:	a802      	add	r0, sp, #8
 8001d26:	f001 fc8b 	bl	8003640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001d2a:	e71a      	b.n	8001b62 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d2c:	463a      	mov	r2, r7
 8001d2e:	4641      	mov	r1, r8
 8001d30:	4620      	mov	r0, r4
 8001d32:	f7ff fdef 	bl	8001914 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d153      	bne.n	8001de4 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8001d3c:	b148      	cbz	r0, 8001d52 <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8001d3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d46:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001d4a:	f3bf 8f4f 	dsb	sy
 8001d4e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001d52:	f002 f871 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 8001d56:	2001      	movs	r0, #1
}
 8001d58:	b005      	add	sp, #20
 8001d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d5e:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8001d60:	f002 f86a 	bl	8003e38 <vPortExitCritical>
					return errQUEUE_FULL;
 8001d64:	9800      	ldr	r0, [sp, #0]
 8001d66:	e7f7      	b.n	8001d58 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8001d68:	f002 f844 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001d6c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d70:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d72:	2d00      	cmp	r5, #0
 8001d74:	dd10      	ble.n	8001d98 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d76:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001d7a:	e003      	b.n	8001d84 <xQueueGenericSend+0x28c>
			--cTxLock;
 8001d7c:	1e6b      	subs	r3, r5, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d82:	b14a      	cbz	r2, 8001d98 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d86:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d88:	b133      	cbz	r3, 8001d98 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d8a:	f001 fbcd 	bl	8003528 <xTaskRemoveFromEventList>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d0f4      	beq.n	8001d7c <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8001d92:	f001 fcb5 	bl	8003700 <vTaskMissedYield>
 8001d96:	e7f1      	b.n	8001d7c <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8001d98:	23ff      	movs	r3, #255	; 0xff
 8001d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001d9e:	f002 f84b 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001da2:	f002 f827 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001da6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001daa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001dac:	2d00      	cmp	r5, #0
 8001dae:	dd10      	ble.n	8001dd2 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001db0:	f104 0610 	add.w	r6, r4, #16
 8001db4:	e003      	b.n	8001dbe <xQueueGenericSend+0x2c6>
				--cRxLock;
 8001db6:	1e6b      	subs	r3, r5, #1
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001dbc:	b14a      	cbz	r2, 8001dd2 <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dbe:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dc0:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dc2:	b133      	cbz	r3, 8001dd2 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001dc4:	f001 fbb0 	bl	8003528 <xTaskRemoveFromEventList>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d0f4      	beq.n	8001db6 <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8001dcc:	f001 fc98 	bl	8003700 <vTaskMissedYield>
 8001dd0:	e7f1      	b.n	8001db6 <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8001dd2:	23ff      	movs	r3, #255	; 0xff
 8001dd4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001dd8:	f002 f82e 	bl	8003e38 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001ddc:	f001 fa7c 	bl	80032d8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001de0:	2000      	movs	r0, #0
 8001de2:	e7b9      	b.n	8001d58 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001de4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001de8:	f001 fb9e 	bl	8003528 <xTaskRemoveFromEventList>
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d0b0      	beq.n	8001d52 <xQueueGenericSend+0x25a>
 8001df0:	e7a5      	b.n	8001d3e <xQueueGenericSend+0x246>
 8001df2:	bf00      	nop

08001df4 <xQueueCreateMutex>:
	{
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001df8:	2050      	movs	r0, #80	; 0x50
 8001dfa:	f002 f95b 	bl	80040b4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001dfe:	4604      	mov	r4, r0
 8001e00:	b370      	cbz	r0, 8001e60 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e02:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8001e04:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001e06:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001e0a:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001e0c:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001e10:	f001 fff0 	bl	8003df4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e14:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001e18:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e1a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e1c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e24:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e26:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001e28:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001e2a:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001e2c:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e2e:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8001e32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e3a:	f7ff fd1f 	bl	800187c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e42:	f7ff fd1b 	bl	800187c <vListInitialise>
	taskEXIT_CRITICAL();
 8001e46:	f001 fff7 	bl	8003e38 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001e4a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001e4e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001e50:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001e52:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001e54:	462b      	mov	r3, r5
 8001e56:	462a      	mov	r2, r5
 8001e58:	4629      	mov	r1, r5
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	f7ff fe4c 	bl	8001af8 <xQueueGenericSend>
	}
 8001e60:	4620      	mov	r0, r4
 8001e62:	bd70      	pop	{r4, r5, r6, pc}

08001e64 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d04b      	beq.n	8001f00 <xQueueGenericSendFromISR+0x9c>
{
 8001e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6c:	460e      	mov	r6, r1
 8001e6e:	4617      	mov	r7, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e74:	b321      	cbz	r1, 8001ec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e76:	2d02      	cmp	r5, #2
 8001e78:	d10b      	bne.n	8001e92 <xQueueGenericSendFromISR+0x2e>
 8001e7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d008      	beq.n	8001e92 <xQueueGenericSendFromISR+0x2e>
 8001e80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e84:	f383 8811 	msr	BASEPRI, r3
 8001e88:	f3bf 8f6f 	isb	sy
 8001e8c:	f3bf 8f4f 	dsb	sy
 8001e90:	e7fe      	b.n	8001e90 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e92:	f002 f8e1 	bl	8004058 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e96:	f3ef 8811 	mrs	r8, BASEPRI
 8001e9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e9e:	f383 8811 	msr	BASEPRI, r3
 8001ea2:	f3bf 8f6f 	isb	sy
 8001ea6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001eaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001eac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d312      	bcc.n	8001ed8 <xQueueGenericSendFromISR+0x74>
 8001eb2:	2d02      	cmp	r5, #2
 8001eb4:	d010      	beq.n	8001ed8 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8001eb6:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001eb8:	f388 8811 	msr	BASEPRI, r8
}
 8001ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ec0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0d7      	beq.n	8001e76 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8001ec6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001eca:	f383 8811 	msr	BASEPRI, r3
 8001ece:	f3bf 8f6f 	isb	sy
 8001ed2:	f3bf 8f4f 	dsb	sy
 8001ed6:	e7fe      	b.n	8001ed6 <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ed8:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8001eda:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ee0:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ee2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	f7ff fd15 	bl	8001914 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001eea:	1c6b      	adds	r3, r5, #1
 8001eec:	d011      	beq.n	8001f12 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001eee:	1c6b      	adds	r3, r5, #1
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8001ef6:	2001      	movs	r0, #1
	__asm volatile
 8001ef8:	f388 8811 	msr	BASEPRI, r8
}
 8001efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8001f00:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001f10:	e7fe      	b.n	8001f10 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d0ee      	beq.n	8001ef6 <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f1c:	f001 fb04 	bl	8003528 <xTaskRemoveFromEventList>
 8001f20:	2800      	cmp	r0, #0
 8001f22:	d0e8      	beq.n	8001ef6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8001f24:	2f00      	cmp	r7, #0
 8001f26:	d0e6      	beq.n	8001ef6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f28:	2001      	movs	r0, #1
 8001f2a:	6038      	str	r0, [r7, #0]
 8001f2c:	e7c4      	b.n	8001eb8 <xQueueGenericSendFromISR+0x54>
 8001f2e:	bf00      	nop

08001f30 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8001f30:	b370      	cbz	r0, 8001f90 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8001f34:	b570      	push	{r4, r5, r6, lr}
 8001f36:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001f38:	b143      	cbz	r3, 8001f4c <xQueueGiveFromISR+0x1c>
 8001f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	e7fe      	b.n	8001f4a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001f4c:	6803      	ldr	r3, [r0, #0]
 8001f4e:	460c      	mov	r4, r1
 8001f50:	b33b      	cbz	r3, 8001fa2 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f52:	f002 f881 	bl	8004058 <vPortValidateInterruptPriority>
	__asm volatile
 8001f56:	f3ef 8511 	mrs	r5, BASEPRI
 8001f5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f5e:	f383 8811 	msr	BASEPRI, r3
 8001f62:	f3bf 8f6f 	isb	sy
 8001f66:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f6a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001f6c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d923      	bls.n	8001fba <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f72:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f76:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8001f78:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f7a:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f7c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8001f7e:	d020      	beq.n	8001fc2 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f80:	3301      	adds	r3, #1
 8001f82:	b25b      	sxtb	r3, r3
 8001f84:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8001f88:	2001      	movs	r0, #1
	__asm volatile
 8001f8a:	f385 8811 	msr	BASEPRI, r5
}
 8001f8e:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8001f90:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f94:	f383 8811 	msr	BASEPRI, r3
 8001f98:	f3bf 8f6f 	isb	sy
 8001f9c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001fa0:	e7fe      	b.n	8001fa0 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001fa2:	6883      	ldr	r3, [r0, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0d4      	beq.n	8001f52 <xQueueGiveFromISR+0x22>
 8001fa8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001fac:	f383 8811 	msr	BASEPRI, r3
 8001fb0:	f3bf 8f6f 	isb	sy
 8001fb4:	f3bf 8f4f 	dsb	sy
 8001fb8:	e7fe      	b.n	8001fb8 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8001fba:	2000      	movs	r0, #0
	__asm volatile
 8001fbc:	f385 8811 	msr	BASEPRI, r5
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0df      	beq.n	8001f88 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fc8:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001fcc:	f001 faac 	bl	8003528 <xTaskRemoveFromEventList>
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d0d9      	beq.n	8001f88 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8001fd4:	2c00      	cmp	r4, #0
 8001fd6:	d0d7      	beq.n	8001f88 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fd8:	2001      	movs	r0, #1
 8001fda:	6020      	str	r0, [r4, #0]
 8001fdc:	e7ee      	b.n	8001fbc <xQueueGiveFromISR+0x8c>
 8001fde:	bf00      	nop

08001fe0 <xQueueReceive>:
{
 8001fe0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fe4:	b085      	sub	sp, #20
 8001fe6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001fe8:	2800      	cmp	r0, #0
 8001fea:	f000 815f 	beq.w	80022ac <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001fee:	460f      	mov	r7, r1
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	2900      	cmp	r1, #0
 8001ff4:	f000 8094 	beq.w	8002120 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ff8:	f001 fb88 	bl	800370c <xTaskGetSchedulerState>
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	f000 809c 	beq.w	800213a <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8002002:	f001 fef7 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002006:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002008:	2d00      	cmp	r5, #0
 800200a:	d172      	bne.n	80020f2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 800200c:	9b01      	ldr	r3, [sp, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80f1 	beq.w	80021f6 <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002014:	a802      	add	r0, sp, #8
 8002016:	f001 fb13 	bl	8003640 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 800201a:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800201c:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8002020:	f001 ff0a 	bl	8003e38 <vPortExitCritical>
		vTaskSuspendAll();
 8002024:	f001 f950 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002028:	f001 fee4 	bl	8003df4 <vPortEnterCritical>
 800202c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002030:	2bff      	cmp	r3, #255	; 0xff
 8002032:	bf08      	it	eq
 8002034:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002038:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800203c:	2bff      	cmp	r3, #255	; 0xff
 800203e:	bf08      	it	eq
 8002040:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002044:	f001 fef8 	bl	8003e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002048:	a901      	add	r1, sp, #4
 800204a:	a802      	add	r0, sp, #8
 800204c:	f001 fb04 	bl	8003658 <xTaskCheckForTimeOut>
 8002050:	2800      	cmp	r0, #0
 8002052:	d17f      	bne.n	8002154 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8002054:	f001 fece 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 80d1 	beq.w	8002202 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8002060:	f001 feea 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002064:	f001 fec6 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002068:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800206c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800206e:	2d00      	cmp	r5, #0
 8002070:	dc04      	bgt.n	800207c <xQueueReceive+0x9c>
 8002072:	e011      	b.n	8002098 <xQueueReceive+0xb8>
			--cTxLock;
 8002074:	1e6b      	subs	r3, r5, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800207a:	b16a      	cbz	r2, 8002098 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800207c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800207e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002080:	b153      	cbz	r3, 8002098 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002082:	f001 fa51 	bl	8003528 <xTaskRemoveFromEventList>
 8002086:	2800      	cmp	r0, #0
 8002088:	d0f4      	beq.n	8002074 <xQueueReceive+0x94>
						vTaskMissedYield();
 800208a:	f001 fb39 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 800208e:	1e6b      	subs	r3, r5, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002094:	2a00      	cmp	r2, #0
 8002096:	d1f1      	bne.n	800207c <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8002098:	23ff      	movs	r3, #255	; 0xff
 800209a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800209e:	f001 fecb 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 80020a2:	f001 fea7 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80020a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80020aa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020ac:	2d00      	cmp	r5, #0
 80020ae:	dd14      	ble.n	80020da <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020b0:	f104 0910 	add.w	r9, r4, #16
 80020b4:	e003      	b.n	80020be <xQueueReceive+0xde>
				--cRxLock;
 80020b6:	1e6b      	subs	r3, r5, #1
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020bc:	b16a      	cbz	r2, 80020da <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020be:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020c2:	b153      	cbz	r3, 80020da <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c4:	f001 fa30 	bl	8003528 <xTaskRemoveFromEventList>
 80020c8:	2800      	cmp	r0, #0
 80020ca:	d0f4      	beq.n	80020b6 <xQueueReceive+0xd6>
					vTaskMissedYield();
 80020cc:	f001 fb18 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 80020d0:	1e6b      	subs	r3, r5, #1
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d1f1      	bne.n	80020be <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80020e0:	f001 feaa 	bl	8003e38 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80020e4:	f001 f8f8 	bl	80032d8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80020e8:	f001 fe84 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80020ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80020ee:	2d00      	cmp	r5, #0
 80020f0:	d07d      	beq.n	80021ee <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80020f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020f4:	b152      	cbz	r2, 800210c <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020f6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020f8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020fa:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80020fc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80020fe:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002100:	bf24      	itt	cs
 8002102:	6821      	ldrcs	r1, [r4, #0]
 8002104:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002106:	4638      	mov	r0, r7
 8002108:	f00a f91e 	bl	800c348 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800210c:	3d01      	subs	r5, #1
 800210e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002110:	6923      	ldr	r3, [r4, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f040 80d3 	bne.w	80022be <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8002118:	f001 fe8e 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 800211c:	2001      	movs	r0, #1
 800211e:	e06d      	b.n	80021fc <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002120:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	f43f af68 	beq.w	8001ff8 <xQueueReceive+0x18>
	__asm volatile
 8002128:	f04f 0340 	mov.w	r3, #64	; 0x40
 800212c:	f383 8811 	msr	BASEPRI, r3
 8002130:	f3bf 8f6f 	isb	sy
 8002134:	f3bf 8f4f 	dsb	sy
 8002138:	e7fe      	b.n	8002138 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800213a:	9b01      	ldr	r3, [sp, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f43f af60 	beq.w	8002002 <xQueueReceive+0x22>
 8002142:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	e7fe      	b.n	8002152 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8002154:	f001 fe4e 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002158:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800215c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800215e:	2d00      	cmp	r5, #0
 8002160:	dc04      	bgt.n	800216c <xQueueReceive+0x18c>
 8002162:	e011      	b.n	8002188 <xQueueReceive+0x1a8>
			--cTxLock;
 8002164:	1e6b      	subs	r3, r5, #1
 8002166:	b2da      	uxtb	r2, r3
 8002168:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800216a:	b16a      	cbz	r2, 8002188 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800216c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800216e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002170:	b153      	cbz	r3, 8002188 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002172:	f001 f9d9 	bl	8003528 <xTaskRemoveFromEventList>
 8002176:	2800      	cmp	r0, #0
 8002178:	d0f4      	beq.n	8002164 <xQueueReceive+0x184>
						vTaskMissedYield();
 800217a:	f001 fac1 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 800217e:	1e6b      	subs	r3, r5, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002184:	2a00      	cmp	r2, #0
 8002186:	d1f1      	bne.n	800216c <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8002188:	23ff      	movs	r3, #255	; 0xff
 800218a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800218e:	f001 fe53 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002192:	f001 fe2f 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002196:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800219a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800219c:	2d00      	cmp	r5, #0
 800219e:	dd14      	ble.n	80021ca <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021a0:	f104 0910 	add.w	r9, r4, #16
 80021a4:	e003      	b.n	80021ae <xQueueReceive+0x1ce>
				--cRxLock;
 80021a6:	1e6b      	subs	r3, r5, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ac:	b16a      	cbz	r2, 80021ca <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021ae:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b0:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021b2:	b153      	cbz	r3, 80021ca <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021b4:	f001 f9b8 	bl	8003528 <xTaskRemoveFromEventList>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d0f4      	beq.n	80021a6 <xQueueReceive+0x1c6>
					vTaskMissedYield();
 80021bc:	f001 faa0 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 80021c0:	1e6b      	subs	r3, r5, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d1f1      	bne.n	80021ae <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80021d0:	f001 fe32 	bl	8003e38 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80021d4:	f001 f880 	bl	80032d8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80021d8:	f001 fe0c 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80021dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021de:	b153      	cbz	r3, 80021f6 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 80021e0:	f001 fe2a 	bl	8003e38 <vPortExitCritical>
		taskENTER_CRITICAL();
 80021e4:	f001 fe06 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	d181      	bne.n	80020f2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 80021ee:	9b01      	ldr	r3, [sp, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f47f af15 	bne.w	8002020 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 80021f6:	f001 fe1f 	bl	8003e38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80021fa:	2000      	movs	r0, #0
}
 80021fc:	b005      	add	sp, #20
 80021fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002202:	f001 fe19 	bl	8003e38 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002206:	9901      	ldr	r1, [sp, #4]
 8002208:	4630      	mov	r0, r6
 800220a:	f001 f899 	bl	8003340 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800220e:	f001 fdf1 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002212:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002216:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002218:	2d00      	cmp	r5, #0
 800221a:	dc04      	bgt.n	8002226 <xQueueReceive+0x246>
 800221c:	e011      	b.n	8002242 <xQueueReceive+0x262>
			--cTxLock;
 800221e:	1e6b      	subs	r3, r5, #1
 8002220:	b2da      	uxtb	r2, r3
 8002222:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002224:	b16a      	cbz	r2, 8002242 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002226:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002228:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800222a:	b153      	cbz	r3, 8002242 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800222c:	f001 f97c 	bl	8003528 <xTaskRemoveFromEventList>
 8002230:	2800      	cmp	r0, #0
 8002232:	d0f4      	beq.n	800221e <xQueueReceive+0x23e>
						vTaskMissedYield();
 8002234:	f001 fa64 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8002238:	1e6b      	subs	r3, r5, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800223e:	2a00      	cmp	r2, #0
 8002240:	d1f1      	bne.n	8002226 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8002242:	23ff      	movs	r3, #255	; 0xff
 8002244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002248:	f001 fdf6 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 800224c:	f001 fdd2 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002250:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002254:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002256:	2d00      	cmp	r5, #0
 8002258:	dd14      	ble.n	8002284 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225a:	f104 0910 	add.w	r9, r4, #16
 800225e:	e003      	b.n	8002268 <xQueueReceive+0x288>
				--cRxLock;
 8002260:	1e6b      	subs	r3, r5, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002266:	b16a      	cbz	r2, 8002284 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002268:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800226c:	b153      	cbz	r3, 8002284 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800226e:	f001 f95b 	bl	8003528 <xTaskRemoveFromEventList>
 8002272:	2800      	cmp	r0, #0
 8002274:	d0f4      	beq.n	8002260 <xQueueReceive+0x280>
					vTaskMissedYield();
 8002276:	f001 fa43 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 800227a:	1e6b      	subs	r3, r5, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002280:	2a00      	cmp	r2, #0
 8002282:	d1f1      	bne.n	8002268 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002284:	23ff      	movs	r3, #255	; 0xff
 8002286:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800228a:	f001 fdd5 	bl	8003e38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800228e:	f001 f823 	bl	80032d8 <xTaskResumeAll>
 8002292:	2800      	cmp	r0, #0
 8002294:	d1a6      	bne.n	80021e4 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8002296:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800229a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800229e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 80022aa:	e79b      	b.n	80021e4 <xQueueReceive+0x204>
 80022ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80022bc:	e7fe      	b.n	80022bc <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022be:	f104 0010 	add.w	r0, r4, #16
 80022c2:	f001 f931 	bl	8003528 <xTaskRemoveFromEventList>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	f43f af26 	beq.w	8002118 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 80022cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022d4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80022d8:	f3bf 8f4f 	dsb	sy
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	e71a      	b.n	8002118 <xQueueReceive+0x138>
 80022e2:	bf00      	nop

080022e4 <xQueueSemaphoreTake>:
{
 80022e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022e8:	b084      	sub	sp, #16
 80022ea:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d05c      	beq.n	80023aa <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 80022f0:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80022f2:	4604      	mov	r4, r0
 80022f4:	b147      	cbz	r7, 8002308 <xQueueSemaphoreTake+0x24>
 80022f6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80022fa:	f383 8811 	msr	BASEPRI, r3
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f3bf 8f4f 	dsb	sy
 8002306:	e7fe      	b.n	8002306 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002308:	f001 fa00 	bl	800370c <xTaskGetSchedulerState>
 800230c:	4605      	mov	r5, r0
 800230e:	2800      	cmp	r0, #0
 8002310:	d054      	beq.n	80023bc <xQueueSemaphoreTake+0xd8>
 8002312:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002314:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8002318:	f001 fd6c 	bl	8003df4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800231c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800231e:	2b00      	cmp	r3, #0
 8002320:	f040 8148 	bne.w	80025b4 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002324:	9b01      	ldr	r3, [sp, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 813a 	beq.w	80025a0 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 800232c:	2d00      	cmp	r5, #0
 800232e:	f000 809d 	beq.w	800246c <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 8002332:	f001 fd81 	bl	8003e38 <vPortExitCritical>
		vTaskSuspendAll();
 8002336:	f000 ffc7 	bl	80032c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800233a:	f001 fd5b 	bl	8003df4 <vPortEnterCritical>
 800233e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	bf04      	itt	eq
 8002346:	2300      	moveq	r3, #0
 8002348:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800234c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002350:	2bff      	cmp	r3, #255	; 0xff
 8002352:	bf04      	itt	eq
 8002354:	2300      	moveq	r3, #0
 8002356:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800235a:	f001 fd6d 	bl	8003e38 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800235e:	a901      	add	r1, sp, #4
 8002360:	a802      	add	r0, sp, #8
 8002362:	f001 f979 	bl	8003658 <xTaskCheckForTimeOut>
 8002366:	2800      	cmp	r0, #0
 8002368:	d135      	bne.n	80023d6 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 800236a:	f001 fd43 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800236e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a4 	beq.w	80024be <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 8002376:	f001 fd5f 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 800237a:	f001 fd3b 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800237e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002382:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002384:	2d00      	cmp	r5, #0
 8002386:	dc05      	bgt.n	8002394 <xQueueSemaphoreTake+0xb0>
 8002388:	e074      	b.n	8002474 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800238a:	1e6b      	subs	r3, r5, #1
 800238c:	b2da      	uxtb	r2, r3
 800238e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002390:	2a00      	cmp	r2, #0
 8002392:	d06f      	beq.n	8002474 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002394:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002396:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06b      	beq.n	8002474 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800239c:	f001 f8c4 	bl	8003528 <xTaskRemoveFromEventList>
 80023a0:	2800      	cmp	r0, #0
 80023a2:	d0f2      	beq.n	800238a <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 80023a4:	f001 f9ac 	bl	8003700 <vTaskMissedYield>
 80023a8:	e7ef      	b.n	800238a <xQueueSemaphoreTake+0xa6>
 80023aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023ae:	f383 8811 	msr	BASEPRI, r3
 80023b2:	f3bf 8f6f 	isb	sy
 80023b6:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80023ba:	e7fe      	b.n	80023ba <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023bc:	9b01      	ldr	r3, [sp, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80d4 	beq.w	800256c <xQueueSemaphoreTake+0x288>
 80023c4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	e7fe      	b.n	80023d4 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 80023d6:	f001 fd0d 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80023da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80023de:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023e0:	2d00      	cmp	r5, #0
 80023e2:	dc04      	bgt.n	80023ee <xQueueSemaphoreTake+0x10a>
 80023e4:	e011      	b.n	800240a <xQueueSemaphoreTake+0x126>
			--cTxLock;
 80023e6:	1e6b      	subs	r3, r5, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80023ec:	b16a      	cbz	r2, 800240a <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023f2:	b153      	cbz	r3, 800240a <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f4:	f001 f898 	bl	8003528 <xTaskRemoveFromEventList>
 80023f8:	2800      	cmp	r0, #0
 80023fa:	d0f4      	beq.n	80023e6 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 80023fc:	f001 f980 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8002400:	1e6b      	subs	r3, r5, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002406:	2a00      	cmp	r2, #0
 8002408:	d1f1      	bne.n	80023ee <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 800240a:	23ff      	movs	r3, #255	; 0xff
 800240c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002410:	f001 fd12 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002414:	f001 fcee 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002418:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800241c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800241e:	2d00      	cmp	r5, #0
 8002420:	dd14      	ble.n	800244c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002422:	f104 0810 	add.w	r8, r4, #16
 8002426:	e003      	b.n	8002430 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 8002428:	1e6b      	subs	r3, r5, #1
 800242a:	b2da      	uxtb	r2, r3
 800242c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800242e:	b16a      	cbz	r2, 800244c <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002430:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002432:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002434:	b153      	cbz	r3, 800244c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002436:	f001 f877 	bl	8003528 <xTaskRemoveFromEventList>
 800243a:	2800      	cmp	r0, #0
 800243c:	d0f4      	beq.n	8002428 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 800243e:	f001 f95f 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 8002442:	1e6b      	subs	r3, r5, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002448:	2a00      	cmp	r2, #0
 800244a:	d1f1      	bne.n	8002430 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 800244c:	23ff      	movs	r3, #255	; 0xff
 800244e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002452:	f001 fcf1 	bl	8003e38 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002456:	f000 ff3f 	bl	80032d8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800245a:	f001 fccb 	bl	8003df4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800245e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07c      	beq.n	800255e <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 8002464:	f001 fce8 	bl	8003e38 <vPortExitCritical>
	return xReturn;
 8002468:	2501      	movs	r5, #1
 800246a:	e755      	b.n	8002318 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800246c:	a802      	add	r0, sp, #8
 800246e:	f001 f8e7 	bl	8003640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002472:	e75e      	b.n	8002332 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002474:	23ff      	movs	r3, #255	; 0xff
 8002476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800247a:	f001 fcdd 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 800247e:	f001 fcb9 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002482:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002486:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002488:	2d00      	cmp	r5, #0
 800248a:	dd10      	ble.n	80024ae <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800248c:	f104 0810 	add.w	r8, r4, #16
 8002490:	e003      	b.n	800249a <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002492:	1e6b      	subs	r3, r5, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002498:	b14a      	cbz	r2, 80024ae <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800249c:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249e:	b133      	cbz	r3, 80024ae <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a0:	f001 f842 	bl	8003528 <xTaskRemoveFromEventList>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d0f4      	beq.n	8002492 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 80024a8:	f001 f92a 	bl	8003700 <vTaskMissedYield>
 80024ac:	e7f1      	b.n	8002492 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 80024ae:	23ff      	movs	r3, #255	; 0xff
 80024b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80024b4:	f001 fcc0 	bl	8003e38 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80024b8:	f000 ff0e 	bl	80032d8 <xTaskResumeAll>
 80024bc:	e7d4      	b.n	8002468 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 80024be:	f001 fcbb 	bl	8003e38 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d062      	beq.n	800258e <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024c8:	9901      	ldr	r1, [sp, #4]
 80024ca:	4630      	mov	r0, r6
 80024cc:	f000 ff38 	bl	8003340 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80024d0:	f001 fc90 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80024d4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80024d8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024da:	2d00      	cmp	r5, #0
 80024dc:	dc04      	bgt.n	80024e8 <xQueueSemaphoreTake+0x204>
 80024de:	e00d      	b.n	80024fc <xQueueSemaphoreTake+0x218>
			--cTxLock;
 80024e0:	1e6b      	subs	r3, r5, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80024e6:	b14a      	cbz	r2, 80024fc <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ea:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ec:	b133      	cbz	r3, 80024fc <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024ee:	f001 f81b 	bl	8003528 <xTaskRemoveFromEventList>
 80024f2:	2800      	cmp	r0, #0
 80024f4:	d0f4      	beq.n	80024e0 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 80024f6:	f001 f903 	bl	8003700 <vTaskMissedYield>
 80024fa:	e7f1      	b.n	80024e0 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 80024fc:	23ff      	movs	r3, #255	; 0xff
 80024fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002502:	f001 fc99 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002506:	f001 fc75 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800250a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800250e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002510:	2d00      	cmp	r5, #0
 8002512:	dd10      	ble.n	8002536 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002514:	f104 0810 	add.w	r8, r4, #16
 8002518:	e003      	b.n	8002522 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 800251a:	1e6b      	subs	r3, r5, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002520:	b14a      	cbz	r2, 8002536 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002522:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002524:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002526:	b133      	cbz	r3, 8002536 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002528:	f000 fffe 	bl	8003528 <xTaskRemoveFromEventList>
 800252c:	2800      	cmp	r0, #0
 800252e:	d0f4      	beq.n	800251a <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 8002530:	f001 f8e6 	bl	8003700 <vTaskMissedYield>
 8002534:	e7f1      	b.n	800251a <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 8002536:	23ff      	movs	r3, #255	; 0xff
 8002538:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800253c:	f001 fc7c 	bl	8003e38 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002540:	f000 feca 	bl	80032d8 <xTaskResumeAll>
 8002544:	2800      	cmp	r0, #0
 8002546:	d18f      	bne.n	8002468 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 8002548:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800254c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002550:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	e784      	b.n	8002468 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 800255e:	f001 fc6b 	bl	8003e38 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8002562:	b92f      	cbnz	r7, 8002570 <xQueueSemaphoreTake+0x28c>
}
 8002564:	4638      	mov	r0, r7
 8002566:	b004      	add	sp, #16
 8002568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800256c:	4607      	mov	r7, r0
 800256e:	e6d1      	b.n	8002314 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002570:	f001 fc40 	bl	8003df4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002574:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002576:	b119      	cbz	r1, 8002580 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002578:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002580:	68a0      	ldr	r0, [r4, #8]
 8002582:	f001 f95f 	bl	8003844 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002586:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 8002588:	f001 fc56 	bl	8003e38 <vPortExitCritical>
 800258c:	e7ea      	b.n	8002564 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 800258e:	f001 fc31 	bl	8003df4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002592:	68a0      	ldr	r0, [r4, #8]
 8002594:	f001 f8ca 	bl	800372c <xTaskPriorityInherit>
 8002598:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800259a:	f001 fc4d 	bl	8003e38 <vPortExitCritical>
 800259e:	e793      	b.n	80024c8 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80025a0:	b197      	cbz	r7, 80025c8 <xQueueSemaphoreTake+0x2e4>
 80025a2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
 80025b2:	e7fe      	b.n	80025b2 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025b4:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80025b6:	3b01      	subs	r3, #1
 80025b8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025ba:	b1ca      	cbz	r2, 80025f0 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025bc:	6923      	ldr	r3, [r4, #16]
 80025be:	b933      	cbnz	r3, 80025ce <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 80025c0:	f001 fc3a 	bl	8003e38 <vPortExitCritical>
				return pdPASS;
 80025c4:	2701      	movs	r7, #1
 80025c6:	e7cd      	b.n	8002564 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 80025c8:	f001 fc36 	bl	8003e38 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80025cc:	e7ca      	b.n	8002564 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025ce:	f104 0010 	add.w	r0, r4, #16
 80025d2:	f000 ffa9 	bl	8003528 <xTaskRemoveFromEventList>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d0f2      	beq.n	80025c0 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 80025da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80025de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	f3bf 8f6f 	isb	sy
 80025ee:	e7e7      	b.n	80025c0 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80025f0:	f001 f988 	bl	8003904 <pvTaskIncrementMutexHeldCount>
 80025f4:	60a0      	str	r0, [r4, #8]
 80025f6:	e7e1      	b.n	80025bc <xQueueSemaphoreTake+0x2d8>

080025f8 <xQueueReceiveFromISR>:
{
 80025f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80025fc:	b310      	cbz	r0, 8002644 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025fe:	460e      	mov	r6, r1
 8002600:	4617      	mov	r7, r2
 8002602:	4604      	mov	r4, r0
 8002604:	b191      	cbz	r1, 800262c <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002606:	f001 fd27 	bl	8004058 <vPortValidateInterruptPriority>
	__asm volatile
 800260a:	f3ef 8911 	mrs	r9, BASEPRI
 800260e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800261e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002620:	b9cd      	cbnz	r5, 8002656 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8002622:	4628      	mov	r0, r5
	__asm volatile
 8002624:	f389 8811 	msr	BASEPRI, r9
}
 8002628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800262c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0e9      	beq.n	8002606 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8002632:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	e7fe      	b.n	8002642 <xQueueReceiveFromISR+0x4a>
 8002644:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002648:	f383 8811 	msr	BASEPRI, r3
 800264c:	f3bf 8f6f 	isb	sy
 8002650:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002654:	e7fe      	b.n	8002654 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002656:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800265a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800265c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002660:	b152      	cbz	r2, 8002678 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002662:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002664:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002666:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002668:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800266a:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800266c:	bf24      	itt	cs
 800266e:	6821      	ldrcs	r1, [r4, #0]
 8002670:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002672:	4630      	mov	r0, r6
 8002674:	f009 fe68 	bl	800c348 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002678:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800267a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800267e:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002680:	d009      	beq.n	8002696 <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002682:	f108 0301 	add.w	r3, r8, #1
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800268c:	2001      	movs	r0, #1
	__asm volatile
 800268e:	f389 8811 	msr	BASEPRI, r9
}
 8002692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f7      	beq.n	800268c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800269c:	f104 0010 	add.w	r0, r4, #16
 80026a0:	f000 ff42 	bl	8003528 <xTaskRemoveFromEventList>
 80026a4:	2800      	cmp	r0, #0
 80026a6:	d0f1      	beq.n	800268c <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 80026a8:	2f00      	cmp	r7, #0
 80026aa:	d0ef      	beq.n	800268c <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80026ac:	2001      	movs	r0, #1
 80026ae:	6038      	str	r0, [r7, #0]
 80026b0:	e7b8      	b.n	8002624 <xQueueReceiveFromISR+0x2c>
 80026b2:	bf00      	nop

080026b4 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80026b4:	b158      	cbz	r0, 80026ce <uxQueueMessagesWaiting+0x1a>
{
 80026b6:	b510      	push	{r4, lr}
 80026b8:	4604      	mov	r4, r0
 80026ba:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 80026bc:	f001 fb9a 	bl	8003df4 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80026c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80026c2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80026c4:	f001 fbb8 	bl	8003e38 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80026c8:	9801      	ldr	r0, [sp, #4]
 80026ca:	b002      	add	sp, #8
 80026cc:	bd10      	pop	{r4, pc}
	__asm volatile
 80026ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80026d2:	f383 8811 	msr	BASEPRI, r3
 80026d6:	f3bf 8f6f 	isb	sy
 80026da:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80026de:	e7fe      	b.n	80026de <uxQueueMessagesWaiting+0x2a>

080026e0 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80026e0:	4b12      	ldr	r3, [pc, #72]	; (800272c <vQueueAddToRegistry+0x4c>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	b17a      	cbz	r2, 8002706 <vQueueAddToRegistry+0x26>
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	b162      	cbz	r2, 8002704 <vQueueAddToRegistry+0x24>
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	b192      	cbz	r2, 8002714 <vQueueAddToRegistry+0x34>
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	b192      	cbz	r2, 8002718 <vQueueAddToRegistry+0x38>
 80026f2:	6a1a      	ldr	r2, [r3, #32]
 80026f4:	b192      	cbz	r2, 800271c <vQueueAddToRegistry+0x3c>
 80026f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026f8:	b192      	cbz	r2, 8002720 <vQueueAddToRegistry+0x40>
 80026fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026fc:	b192      	cbz	r2, 8002724 <vQueueAddToRegistry+0x44>
 80026fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002700:	b192      	cbz	r2, 8002728 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002702:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002704:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002706:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800270a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800270e:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8002712:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002714:	2202      	movs	r2, #2
 8002716:	e7f6      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002718:	2203      	movs	r2, #3
 800271a:	e7f4      	b.n	8002706 <vQueueAddToRegistry+0x26>
 800271c:	2204      	movs	r2, #4
 800271e:	e7f2      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002720:	2205      	movs	r2, #5
 8002722:	e7f0      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002724:	2206      	movs	r2, #6
 8002726:	e7ee      	b.n	8002706 <vQueueAddToRegistry+0x26>
 8002728:	2207      	movs	r2, #7
 800272a:	e7ec      	b.n	8002706 <vQueueAddToRegistry+0x26>
 800272c:	20000bf8 	.word	0x20000bf8

08002730 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002730:	b570      	push	{r4, r5, r6, lr}
 8002732:	4605      	mov	r5, r0
 8002734:	460e      	mov	r6, r1
 8002736:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002738:	f001 fb5c 	bl	8003df4 <vPortEnterCritical>
 800273c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002740:	2bff      	cmp	r3, #255	; 0xff
 8002742:	bf04      	itt	eq
 8002744:	2300      	moveq	r3, #0
 8002746:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 800274a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	bf04      	itt	eq
 8002752:	2300      	moveq	r3, #0
 8002754:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 8002758:	f001 fb6e 	bl	8003e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800275c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800275e:	2b00      	cmp	r3, #0
 8002760:	d043      	beq.n	80027ea <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8002762:	f001 fb47 	bl	8003df4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002766:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800276a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800276c:	2c00      	cmp	r4, #0
 800276e:	dd14      	ble.n	800279a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002770:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002774:	e003      	b.n	800277e <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8002776:	1e63      	subs	r3, r4, #1
 8002778:	b2da      	uxtb	r2, r3
 800277a:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800277c:	b16a      	cbz	r2, 800279a <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800277e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002780:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002782:	b153      	cbz	r3, 800279a <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002784:	f000 fed0 	bl	8003528 <xTaskRemoveFromEventList>
 8002788:	2800      	cmp	r0, #0
 800278a:	d0f4      	beq.n	8002776 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 800278c:	f000 ffb8 	bl	8003700 <vTaskMissedYield>
			--cTxLock;
 8002790:	1e63      	subs	r3, r4, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002796:	2a00      	cmp	r2, #0
 8002798:	d1f1      	bne.n	800277e <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800279a:	23ff      	movs	r3, #255	; 0xff
 800279c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80027a0:	f001 fb4a 	bl	8003e38 <vPortExitCritical>
	taskENTER_CRITICAL();
 80027a4:	f001 fb26 	bl	8003df4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80027a8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80027ac:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027ae:	2c00      	cmp	r4, #0
 80027b0:	dd14      	ble.n	80027dc <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b2:	f105 0610 	add.w	r6, r5, #16
 80027b6:	e003      	b.n	80027c0 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 80027b8:	1e63      	subs	r3, r4, #1
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027be:	b16a      	cbz	r2, 80027dc <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c0:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c2:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c4:	b153      	cbz	r3, 80027dc <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c6:	f000 feaf 	bl	8003528 <xTaskRemoveFromEventList>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d0f4      	beq.n	80027b8 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 80027ce:	f000 ff97 	bl	8003700 <vTaskMissedYield>
				--cRxLock;
 80027d2:	1e63      	subs	r3, r4, #1
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d8:	2a00      	cmp	r2, #0
 80027da:	d1f1      	bne.n	80027c0 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 80027dc:	23ff      	movs	r3, #255	; 0xff
 80027de:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 80027e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80027e6:	f001 bb27 	b.w	8003e38 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027ea:	4622      	mov	r2, r4
 80027ec:	4631      	mov	r1, r6
 80027ee:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80027f2:	f000 fe49 	bl	8003488 <vTaskPlaceOnEventListRestricted>
 80027f6:	e7b4      	b.n	8002762 <vQueueWaitForMessageRestricted+0x32>

080027f8 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80027f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027fc:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80027fe:	f001 faf9 	bl	8003df4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002802:	4a34      	ldr	r2, [pc, #208]	; (80028d4 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002804:	4e34      	ldr	r6, [pc, #208]	; (80028d8 <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 8002806:	6813      	ldr	r3, [r2, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800280c:	6833      	ldr	r3, [r6, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d032      	beq.n	8002878 <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002812:	4c32      	ldr	r4, [pc, #200]	; (80028dc <prvAddNewTaskToReadyList+0xe4>)
 8002814:	6823      	ldr	r3, [r4, #0]
 8002816:	b33b      	cbz	r3, 8002868 <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002818:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800281a:	4f31      	ldr	r7, [pc, #196]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800281e:	4932      	ldr	r1, [pc, #200]	; (80028e8 <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 8002820:	6813      	ldr	r3, [r2, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002826:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 8002828:	680b      	ldr	r3, [r1, #0]
 800282a:	4283      	cmp	r3, r0
 800282c:	bf38      	it	cc
 800282e:	6008      	strcc	r0, [r1, #0]
 8002830:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002834:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8002838:	1d29      	adds	r1, r5, #4
 800283a:	f7ff f82f 	bl	800189c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800283e:	f001 fafb 	bl	8003e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	b173      	cbz	r3, 8002864 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002846:	6832      	ldr	r2, [r6, #0]
 8002848:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800284a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d209      	bcs.n	8002864 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002850:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002858:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002868:	6833      	ldr	r3, [r6, #0]
 800286a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	4f1c      	ldr	r7, [pc, #112]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
 8002870:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002872:	bf98      	it	ls
 8002874:	6035      	strls	r5, [r6, #0]
 8002876:	e7d1      	b.n	800281c <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8002878:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800287a:	6813      	ldr	r3, [r2, #0]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d003      	beq.n	8002888 <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002880:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002882:	4f17      	ldr	r7, [pc, #92]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
 8002884:	4c15      	ldr	r4, [pc, #84]	; (80028dc <prvAddNewTaskToReadyList+0xe4>)
 8002886:	e7c9      	b.n	800281c <prvAddNewTaskToReadyList+0x24>
 8002888:	4f15      	ldr	r7, [pc, #84]	; (80028e0 <prvAddNewTaskToReadyList+0xe8>)
 800288a:	463c      	mov	r4, r7
 800288c:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002890:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002892:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002894:	f7fe fff2 	bl	800187c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002898:	45a0      	cmp	r8, r4
 800289a:	d1f9      	bne.n	8002890 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 800289c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002900 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 80028a0:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002904 <prvAddNewTaskToReadyList+0x10c>
 80028a4:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 80028a6:	4648      	mov	r0, r9
 80028a8:	f7fe ffe8 	bl	800187c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80028ac:	4640      	mov	r0, r8
 80028ae:	f7fe ffe5 	bl	800187c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80028b2:	480e      	ldr	r0, [pc, #56]	; (80028ec <prvAddNewTaskToReadyList+0xf4>)
 80028b4:	f7fe ffe2 	bl	800187c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80028b8:	480d      	ldr	r0, [pc, #52]	; (80028f0 <prvAddNewTaskToReadyList+0xf8>)
 80028ba:	f7fe ffdf 	bl	800187c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80028be:	480d      	ldr	r0, [pc, #52]	; (80028f4 <prvAddNewTaskToReadyList+0xfc>)
 80028c0:	f7fe ffdc 	bl	800187c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 80028c6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 80028c8:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <prvAddNewTaskToReadyList+0x104>)
 80028ce:	f8c3 8000 	str.w	r8, [r3]
}
 80028d2:	e7a3      	b.n	800281c <prvAddNewTaskToReadyList+0x24>
 80028d4:	200010a4 	.word	0x200010a4
 80028d8:	20000c38 	.word	0x20000c38
 80028dc:	20001100 	.word	0x20001100
 80028e0:	20000c44 	.word	0x20000c44
 80028e4:	200010b0 	.word	0x200010b0
 80028e8:	200010b4 	.word	0x200010b4
 80028ec:	200010ec 	.word	0x200010ec
 80028f0:	20001118 	.word	0x20001118
 80028f4:	20001104 	.word	0x20001104
 80028f8:	20000c3c 	.word	0x20000c3c
 80028fc:	20000c40 	.word	0x20000c40
 8002900:	200010b8 	.word	0x200010b8
 8002904:	200010cc 	.word	0x200010cc

08002908 <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 8002908:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <vTaskSwitchContext.part.0+0x90>)
		taskCHECK_FOR_STACK_OVERFLOW();
 800290c:	4c23      	ldr	r4, [pc, #140]	; (800299c <vTaskSwitchContext.part.0+0x94>)
		xYieldPending = pdFALSE;
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800291c:	d103      	bne.n	8002926 <vTaskSwitchContext.part.0+0x1e>
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002924:	d02f      	beq.n	8002986 <vTaskSwitchContext.part.0+0x7e>
 8002926:	6820      	ldr	r0, [r4, #0]
 8002928:	6821      	ldr	r1, [r4, #0]
 800292a:	3134      	adds	r1, #52	; 0x34
 800292c:	f008 f9a0 	bl	800ac70 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002930:	4d1b      	ldr	r5, [pc, #108]	; (80029a0 <vTaskSwitchContext.part.0+0x98>)
 8002932:	491c      	ldr	r1, [pc, #112]	; (80029a4 <vTaskSwitchContext.part.0+0x9c>)
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	0098      	lsls	r0, r3, #2
 800293e:	588a      	ldr	r2, [r1, r2]
 8002940:	b942      	cbnz	r2, 8002954 <vTaskSwitchContext.part.0+0x4c>
 8002942:	b1bb      	cbz	r3, 8002974 <vTaskSwitchContext.part.0+0x6c>
 8002944:	3b01      	subs	r3, #1
 8002946:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800294a:	0098      	lsls	r0, r3, #2
 800294c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002950:	2a00      	cmp	r2, #0
 8002952:	d0f6      	beq.n	8002942 <vTaskSwitchContext.part.0+0x3a>
 8002954:	18c2      	adds	r2, r0, r3
 8002956:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800295a:	4602      	mov	r2, r0
 800295c:	6841      	ldr	r1, [r0, #4]
 800295e:	6849      	ldr	r1, [r1, #4]
 8002960:	6041      	str	r1, [r0, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	4291      	cmp	r1, r2
 8002966:	bf04      	itt	eq
 8002968:	6849      	ldreq	r1, [r1, #4]
 800296a:	6041      	streq	r1, [r0, #4]
 800296c:	68ca      	ldr	r2, [r1, #12]
 800296e:	6022      	str	r2, [r4, #0]
 8002970:	602b      	str	r3, [r5, #0]
}
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002984:	e7fe      	b.n	8002984 <vTaskSwitchContext.part.0+0x7c>
		taskCHECK_FOR_STACK_OVERFLOW();
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800298c:	d1cb      	bne.n	8002926 <vTaskSwitchContext.part.0+0x1e>
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002994:	d1c7      	bne.n	8002926 <vTaskSwitchContext.part.0+0x1e>
 8002996:	e7cb      	b.n	8002930 <vTaskSwitchContext.part.0+0x28>
 8002998:	20001130 	.word	0x20001130
 800299c:	20000c38 	.word	0x20000c38
 80029a0:	200010b4 	.word	0x200010b4
 80029a4:	20000c44 	.word	0x20000c44

080029a8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80029ae:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029b2:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80029b6:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80029b8:	4606      	mov	r6, r0
 80029ba:	460c      	mov	r4, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80029be:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80029c0:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029c2:	f009 fce9 	bl	800c398 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029c8:	f1a9 0904 	sub.w	r9, r9, #4
 80029cc:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80029ce:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80029d2:	2c00      	cmp	r4, #0
 80029d4:	d03a      	beq.n	8002a4c <prvInitialiseNewTask.constprop.0+0xa4>
 80029d6:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80029da:	f104 011f 	add.w	r1, r4, #31
 80029de:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 80029e2:	e001      	b.n	80029e8 <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80029e4:	458c      	cmp	ip, r1
 80029e6:	d005      	beq.n	80029f4 <prvInitialiseNewTask.constprop.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80029e8:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80029ec:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80029f0:	2c00      	cmp	r4, #0
 80029f2:	d1f7      	bne.n	80029e4 <prvInitialiseNewTask.constprop.0+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80029f4:	2300      	movs	r3, #0
 80029f6:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80029fa:	9c08      	ldr	r4, [sp, #32]
 80029fc:	2c37      	cmp	r4, #55	; 0x37
 80029fe:	bf28      	it	cs
 8002a00:	2437      	movcs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8002a02:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8002a06:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002a08:	65ec      	str	r4, [r5, #92]	; 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a0a:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002a0c:	f8c5 a060 	str.w	sl, [r5, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a10:	f7fe ff40 	bl	8001894 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a14:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a18:	f105 0018 	add.w	r0, r5, #24
 8002a1c:	f7fe ff3a 	bl	8001894 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002a20:	f8c5 a064 	str.w	sl, [r5, #100]	; 0x64
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a24:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002a26:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002a28:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002a2a:	f885 a068 	strb.w	sl, [r5, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002a2e:	f885 a06a 	strb.w	sl, [r5, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002a32:	463a      	mov	r2, r7
 8002a34:	4631      	mov	r1, r6
 8002a36:	4648      	mov	r0, r9
 8002a38:	f001 f9b0 	bl	8003d9c <pxPortInitialiseStack>
 8002a3c:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8002a3e:	f1b8 0f00 	cmp.w	r8, #0
 8002a42:	d001      	beq.n	8002a48 <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002a44:	f8c8 5000 	str.w	r5, [r8]
}
 8002a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a4c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8002a50:	e7d3      	b.n	80029fa <prvInitialiseNewTask.constprop.0+0x52>
 8002a52:	bf00      	nop

08002a54 <prvIdleTask>:
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	4c22      	ldr	r4, [pc, #136]	; (8002ae0 <prvIdleTask+0x8c>)
 8002a58:	4e22      	ldr	r6, [pc, #136]	; (8002ae4 <prvIdleTask+0x90>)
 8002a5a:	4d23      	ldr	r5, [pc, #140]	; (8002ae8 <prvIdleTask+0x94>)
 8002a5c:	4f23      	ldr	r7, [pc, #140]	; (8002aec <prvIdleTask+0x98>)
				taskYIELD();
 8002a5e:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8002a62:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	b353      	cbz	r3, 8002ac0 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 8002a6a:	f001 f9c3 	bl	8003df4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a6e:	68f3      	ldr	r3, [r6, #12]
 8002a70:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a74:	f10a 0004 	add.w	r0, sl, #4
 8002a78:	f7fe ff38 	bl	80018ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a7c:	682b      	ldr	r3, [r5, #0]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	3b01      	subs	r3, #1
 8002a86:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8002a88:	f001 f9d6 	bl	8003e38 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a8c:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
 8002a90:	b163      	cbz	r3, 8002aac <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d020      	beq.n	8002ad8 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d0e5      	beq.n	8002a66 <prvIdleTask+0x12>
 8002a9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	e7fe      	b.n	8002aaa <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8002aac:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8002ab0:	f001 fbba 	bl	8004228 <vPortFree>
				vPortFree( pxTCB );
 8002ab4:	4650      	mov	r0, sl
 8002ab6:	f001 fbb7 	bl	8004228 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aba:	6823      	ldr	r3, [r4, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1d4      	bne.n	8002a6a <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d905      	bls.n	8002ad2 <prvIdleTask+0x7e>
				taskYIELD();
 8002ac6:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8002ad2:	f008 f8c5 	bl	800ac60 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002ad6:	e7c6      	b.n	8002a66 <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8002ad8:	4650      	mov	r0, sl
 8002ada:	f001 fba5 	bl	8004228 <vPortFree>
 8002ade:	e7c2      	b.n	8002a66 <prvIdleTask+0x12>
 8002ae0:	200010a8 	.word	0x200010a8
 8002ae4:	20001118 	.word	0x20001118
 8002ae8:	200010a4 	.word	0x200010a4
 8002aec:	20000c44 	.word	0x20000c44

08002af0 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8002af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002af4:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <xTaskIncrementTick.part.0+0x124>)
 8002af6:	681e      	ldr	r6, [r3, #0]
 8002af8:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8002afa:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8002afc:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002afe:	2e00      	cmp	r6, #0
 8002b00:	d040      	beq.n	8002b84 <xTaskIncrementTick.part.0+0x94>
 8002b02:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002c28 <xTaskIncrementTick.part.0+0x138>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002b06:	f8db 3000 	ldr.w	r3, [fp]
 8002b0a:	429e      	cmp	r6, r3
 8002b0c:	d347      	bcc.n	8002b9e <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b0e:	4f42      	ldr	r7, [pc, #264]	; (8002c18 <xTaskIncrementTick.part.0+0x128>)
 8002b10:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002c2c <xTaskIncrementTick.part.0+0x13c>
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002c30 <xTaskIncrementTick.part.0+0x140>
 8002b1a:	681d      	ldr	r5, [r3, #0]
 8002b1c:	2d00      	cmp	r5, #0
 8002b1e:	d073      	beq.n	8002c08 <xTaskIncrementTick.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 8002b20:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002c34 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8002b24:	2500      	movs	r5, #0
 8002b26:	e022      	b.n	8002b6e <xTaskIncrementTick.part.0+0x7e>
 8002b28:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b2a:	f7fe fedf 	bl	80018ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b30:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b32:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b36:	b113      	cbz	r3, 8002b3e <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b38:	f7fe fed8 	bl	80018ec <uxListRemove>
 8002b3c:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8002b3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b40:	f8d8 2000 	ldr.w	r2, [r8]
 8002b44:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002b4e:	bf88      	it	hi
 8002b50:	f8c8 3000 	strhi.w	r3, [r8]
 8002b54:	f7fe fea2 	bl	800189c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b58:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b5c:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002b60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b62:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8002b64:	4291      	cmp	r1, r2
 8002b66:	bf28      	it	cs
 8002b68:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d04c      	beq.n	8002c08 <xTaskIncrementTick.part.0+0x118>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b74:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b76:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8002b78:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b7a:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8002b7c:	d2d4      	bcs.n	8002b28 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8002b7e:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b82:	e011      	b.n	8002ba8 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <xTaskIncrementTick.part.0+0x128>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	6812      	ldr	r2, [r2, #0]
 8002b8a:	b30a      	cbz	r2, 8002bd0 <xTaskIncrementTick.part.0+0xe0>
 8002b8c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	e7fe      	b.n	8002b9c <xTaskIncrementTick.part.0+0xac>
 8002b9e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002c2c <xTaskIncrementTick.part.0+0x13c>
 8002ba2:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002c30 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8002ba6:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ba8:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8002bac:	491b      	ldr	r1, [pc, #108]	; (8002c1c <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8002bba:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8002bbc:	2a02      	cmp	r2, #2
 8002bbe:	bf28      	it	cs
 8002bc0:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8002bc2:	2b00      	cmp	r3, #0
}
 8002bc4:	bf0c      	ite	eq
 8002bc6:	4628      	moveq	r0, r5
 8002bc8:	2001      	movne	r0, #1
 8002bca:	b003      	add	sp, #12
 8002bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002bd0:	4a13      	ldr	r2, [pc, #76]	; (8002c20 <xTaskIncrementTick.part.0+0x130>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	6811      	ldr	r1, [r2, #0]
 8002bd6:	6019      	str	r1, [r3, #0]
 8002bd8:	4912      	ldr	r1, [pc, #72]	; (8002c24 <xTaskIncrementTick.part.0+0x134>)
 8002bda:	6010      	str	r0, [r2, #0]
 8002bdc:	680a      	ldr	r2, [r1, #0]
 8002bde:	3201      	adds	r2, #1
 8002be0:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	b932      	cbnz	r2, 8002bf6 <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002be8:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8002c28 <xTaskIncrementTick.part.0+0x138>
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bf0:	f8cb 3000 	str.w	r3, [fp]
 8002bf4:	e787      	b.n	8002b06 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf6:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bf8:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8002c28 <xTaskIncrementTick.part.0+0x138>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bfc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8002c06:	e77e      	b.n	8002b06 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0c:	f8cb 3000 	str.w	r3, [fp]
					break;
 8002c10:	e7ca      	b.n	8002ba8 <xTaskIncrementTick.part.0+0xb8>
 8002c12:	bf00      	nop
 8002c14:	2000112c 	.word	0x2000112c
 8002c18:	20000c3c 	.word	0x20000c3c
 8002c1c:	20001130 	.word	0x20001130
 8002c20:	20000c40 	.word	0x20000c40
 8002c24:	200010e4 	.word	0x200010e4
 8002c28:	200010e0 	.word	0x200010e0
 8002c2c:	20000c44 	.word	0x20000c44
 8002c30:	20000c38 	.word	0x20000c38
 8002c34:	200010b4 	.word	0x200010b4

08002c38 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8002c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8002c3c:	4d41      	ldr	r5, [pc, #260]	; (8002d44 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8002c3e:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8002c40:	f001 f8d8 	bl	8003df4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002c44:	682b      	ldr	r3, [r5, #0]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c4a:	682b      	ldr	r3, [r5, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d161      	bne.n	8002d14 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c50:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <xTaskResumeAll.part.0+0x110>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d05d      	beq.n	8002d14 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c58:	4e3c      	ldr	r6, [pc, #240]	; (8002d4c <xTaskResumeAll.part.0+0x114>)
 8002c5a:	6833      	ldr	r3, [r6, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d06e      	beq.n	8002d3e <xTaskResumeAll.part.0+0x106>
 8002c60:	4f3b      	ldr	r7, [pc, #236]	; (8002d50 <xTaskResumeAll.part.0+0x118>)
 8002c62:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002d60 <xTaskResumeAll.part.0+0x128>
 8002c66:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002d64 <xTaskResumeAll.part.0+0x12c>
 8002c6a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002d68 <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c6e:	68f3      	ldr	r3, [r6, #12]
 8002c70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c72:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c76:	f104 0018 	add.w	r0, r4, #24
 8002c7a:	f7fe fe37 	bl	80018ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c7e:	4658      	mov	r0, fp
 8002c80:	f7fe fe34 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	4659      	mov	r1, fp
 8002c90:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c94:	bf88      	it	hi
 8002c96:	603b      	strhi	r3, [r7, #0]
 8002c98:	f7fe fe00 	bl	800189c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8002ca0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d33d      	bcc.n	8002d24 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cae:	6833      	ldr	r3, [r6, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1dc      	bne.n	8002c6e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <xTaskResumeAll.part.0+0x11c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	2a00      	cmp	r2, #0
 8002cbc:	d03a      	beq.n	8002d34 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cbe:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cc0:	4b25      	ldr	r3, [pc, #148]	; (8002d58 <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cc2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002cca:	4e24      	ldr	r6, [pc, #144]	; (8002d5c <xTaskResumeAll.part.0+0x124>)
 8002ccc:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002cce:	b194      	cbz	r4, 8002cf6 <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8002cd0:	2701      	movs	r7, #1
 8002cd2:	e006      	b.n	8002ce2 <xTaskResumeAll.part.0+0xaa>
 8002cd4:	f7ff ff0c 	bl	8002af0 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8002cd8:	b108      	cbz	r0, 8002cde <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8002cda:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cde:	3c01      	subs	r4, #1
 8002ce0:	d008      	beq.n	8002cf4 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ce2:	682b      	ldr	r3, [r5, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d0f5      	beq.n	8002cd4 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8002ce8:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cea:	3c01      	subs	r4, #1
		++xPendedTicks;
 8002cec:	f103 0301 	add.w	r3, r3, #1
 8002cf0:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002cf2:	d1f6      	bne.n	8002ce2 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8002cf4:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8002cf6:	f8da 3000 	ldr.w	r3, [sl]
 8002cfa:	b15b      	cbz	r3, 8002d14 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8002cfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002d10:	2001      	movs	r0, #1
 8002d12:	e000      	b.n	8002d16 <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8002d14:	2000      	movs	r0, #0
 8002d16:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002d18:	f001 f88e 	bl	8003e38 <vPortExitCritical>
}
 8002d1c:	9801      	ldr	r0, [sp, #4]
 8002d1e:	b003      	add	sp, #12
 8002d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d24:	6833      	ldr	r3, [r6, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1a1      	bne.n	8002c6e <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <xTaskResumeAll.part.0+0x11c>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	2a00      	cmp	r2, #0
 8002d32:	d1c4      	bne.n	8002cbe <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d34:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <xTaskResumeAll.part.0+0x120>)
 8002d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e7c5      	b.n	8002cca <xTaskResumeAll.part.0+0x92>
 8002d3e:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002d68 <xTaskResumeAll.part.0+0x130>
 8002d42:	e7c2      	b.n	8002cca <xTaskResumeAll.part.0+0x92>
 8002d44:	200010ac 	.word	0x200010ac
 8002d48:	200010a4 	.word	0x200010a4
 8002d4c:	200010ec 	.word	0x200010ec
 8002d50:	200010b4 	.word	0x200010b4
 8002d54:	20000c3c 	.word	0x20000c3c
 8002d58:	200010e0 	.word	0x200010e0
 8002d5c:	200010e8 	.word	0x200010e8
 8002d60:	20000c44 	.word	0x20000c44
 8002d64:	20000c38 	.word	0x20000c38
 8002d68:	20001130 	.word	0x20001130

08002d6c <xTaskCreateStatic>:
	{
 8002d6c:	b530      	push	{r4, r5, lr}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002d72:	b1c4      	cbz	r4, 8002da6 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8002d74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d76:	b16d      	cbz	r5, 8002d94 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d78:	256c      	movs	r5, #108	; 0x6c
 8002d7a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d7c:	9d05      	ldr	r5, [sp, #20]
 8002d7e:	2d6c      	cmp	r5, #108	; 0x6c
 8002d80:	d01a      	beq.n	8002db8 <xTaskCreateStatic+0x4c>
 8002d82:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	e7fe      	b.n	8002d92 <xTaskCreateStatic+0x26>
 8002d94:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002da4:	e7fe      	b.n	8002da4 <xTaskCreateStatic+0x38>
 8002da6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002db6:	e7fe      	b.n	8002db6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002db8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dba:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dbc:	2402      	movs	r4, #2
 8002dbe:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dc2:	ac04      	add	r4, sp, #16
 8002dc4:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002dc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002dca:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dcc:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002dce:	f7ff fdeb 	bl	80029a8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002dd2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002dd4:	f7ff fd10 	bl	80027f8 <prvAddNewTaskToReadyList>
	}
 8002dd8:	9804      	ldr	r0, [sp, #16]
 8002dda:	b007      	add	sp, #28
 8002ddc:	bd30      	pop	{r4, r5, pc}
 8002dde:	bf00      	nop

08002de0 <xTaskCreate>:
	{
 8002de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002de4:	4607      	mov	r7, r0
 8002de6:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002de8:	0090      	lsls	r0, r2, #2
	{
 8002dea:	4615      	mov	r5, r2
 8002dec:	4688      	mov	r8, r1
 8002dee:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002df0:	f001 f960 	bl	80040b4 <pvPortMalloc>
			if( pxStack != NULL )
 8002df4:	b1d8      	cbz	r0, 8002e2e <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002df6:	4604      	mov	r4, r0
 8002df8:	206c      	movs	r0, #108	; 0x6c
 8002dfa:	f001 f95b 	bl	80040b4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002dfe:	4606      	mov	r6, r0
 8002e00:	b1d0      	cbz	r0, 8002e38 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8002e02:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e04:	2400      	movs	r4, #0
 8002e06:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002e0c:	9401      	str	r4, [sp, #4]
 8002e0e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002e10:	9602      	str	r6, [sp, #8]
 8002e12:	464b      	mov	r3, r9
 8002e14:	462a      	mov	r2, r5
 8002e16:	4641      	mov	r1, r8
 8002e18:	4638      	mov	r0, r7
 8002e1a:	9400      	str	r4, [sp, #0]
 8002e1c:	f7ff fdc4 	bl	80029a8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e20:	4630      	mov	r0, r6
 8002e22:	f7ff fce9 	bl	80027f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e26:	2001      	movs	r0, #1
	}
 8002e28:	b005      	add	sp, #20
 8002e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8002e32:	b005      	add	sp, #20
 8002e34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002e38:	4620      	mov	r0, r4
 8002e3a:	f001 f9f5 	bl	8004228 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e42:	e7f1      	b.n	8002e28 <xTaskCreate+0x48>

08002e44 <vTaskDelete>:
	{
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e48:	4d36      	ldr	r5, [pc, #216]	; (8002f24 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 8002e4a:	f000 ffd3 	bl	8003df4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e4e:	2c00      	cmp	r4, #0
 8002e50:	d044      	beq.n	8002edc <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e52:	1d26      	adds	r6, r4, #4
 8002e54:	4630      	mov	r0, r6
 8002e56:	f7fe fd49 	bl	80018ec <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e5a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e5c:	b11b      	cbz	r3, 8002e66 <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e5e:	f104 0018 	add.w	r0, r4, #24
 8002e62:	f7fe fd43 	bl	80018ec <uxListRemove>
			uxTaskNumber++;
 8002e66:	4a30      	ldr	r2, [pc, #192]	; (8002f28 <vTaskDelete+0xe4>)
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8002e6e:	682b      	ldr	r3, [r5, #0]
 8002e70:	42a3      	cmp	r3, r4
 8002e72:	d02a      	beq.n	8002eca <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8002e74:	492d      	ldr	r1, [pc, #180]	; (8002f2c <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e76:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				--uxCurrentNumberOfTasks;
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e80:	b162      	cbz	r2, 8002e9c <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e82:	2a01      	cmp	r2, #1
 8002e84:	d03f      	beq.n	8002f06 <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e86:	2a02      	cmp	r2, #2
 8002e88:	d00e      	beq.n	8002ea8 <vTaskDelete+0x64>
 8002e8a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	e7fe      	b.n	8002e9a <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8002e9c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e9e:	f001 f9c3 	bl	8004228 <vPortFree>
				vPortFree( pxTCB );
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f001 f9c0 	bl	8004228 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <vTaskDelete+0xec>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	b9ba      	cbnz	r2, 8002ee0 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <vTaskDelete+0xf0>)
 8002eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb6:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002eb8:	f000 ffbe 	bl	8003e38 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <vTaskDelete+0xf4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	b113      	cbz	r3, 8002ec8 <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8002ec2:	682b      	ldr	r3, [r5, #0]
 8002ec4:	42a3      	cmp	r3, r4
 8002ec6:	d012      	beq.n	8002eee <vTaskDelete+0xaa>
	}
 8002ec8:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002eca:	481c      	ldr	r0, [pc, #112]	; (8002f3c <vTaskDelete+0xf8>)
 8002ecc:	4631      	mov	r1, r6
 8002ece:	f7fe fce5 	bl	800189c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002ed2:	4a1b      	ldr	r2, [pc, #108]	; (8002f40 <vTaskDelete+0xfc>)
 8002ed4:	6813      	ldr	r3, [r2, #0]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8002eda:	e7ed      	b.n	8002eb8 <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002edc:	682c      	ldr	r4, [r5, #0]
 8002ede:	e7b8      	b.n	8002e52 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee0:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ee4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002ee6:	68d2      	ldr	r2, [r2, #12]
 8002ee8:	6852      	ldr	r2, [r2, #4]
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	e7e4      	b.n	8002eb8 <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <vTaskDelete+0x100>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	b163      	cbz	r3, 8002f0e <vTaskDelete+0xca>
 8002ef4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	e7fe      	b.n	8002f04 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 8002f06:	4620      	mov	r0, r4
 8002f08:	f001 f98e 	bl	8004228 <vPortFree>
 8002f0c:	e7cc      	b.n	8002ea8 <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8002f0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002f1a:	f3bf 8f4f 	dsb	sy
 8002f1e:	f3bf 8f6f 	isb	sy
	}
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	20000c38 	.word	0x20000c38
 8002f28:	200010b0 	.word	0x200010b0
 8002f2c:	200010a4 	.word	0x200010a4
 8002f30:	20000c3c 	.word	0x20000c3c
 8002f34:	200010e0 	.word	0x200010e0
 8002f38:	20001100 	.word	0x20001100
 8002f3c:	20001118 	.word	0x20001118
 8002f40:	200010a8 	.word	0x200010a8
 8002f44:	200010ac 	.word	0x200010ac

08002f48 <vTaskDelay>:
	{
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f4a:	b950      	cbnz	r0, 8002f62 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002f58:	f3bf 8f4f 	dsb	sy
 8002f5c:	f3bf 8f6f 	isb	sy
	}
 8002f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002f62:	4d20      	ldr	r5, [pc, #128]	; (8002fe4 <vTaskDelay+0x9c>)
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	b143      	cbz	r3, 8002f7a <vTaskDelay+0x32>
 8002f68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f6c:	f383 8811 	msr	BASEPRI, r3
 8002f70:	f3bf 8f6f 	isb	sy
 8002f74:	f3bf 8f4f 	dsb	sy
 8002f78:	e7fe      	b.n	8002f78 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8002f7a:	682a      	ldr	r2, [r5, #0]
 8002f7c:	3201      	adds	r2, #1
 8002f7e:	4604      	mov	r4, r0
 8002f80:	602a      	str	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f82:	4e19      	ldr	r6, [pc, #100]	; (8002fe8 <vTaskDelay+0xa0>)
const TickType_t xConstTickCount = xTickCount;
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <vTaskDelay+0xa4>)
 8002f86:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f88:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f8a:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f8c:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f90:	3004      	adds	r0, #4
 8002f92:	f7fe fcab 	bl	80018ec <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f96:	6833      	ldr	r3, [r6, #0]
 8002f98:	19e4      	adds	r4, r4, r7
 8002f9a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002f9c:	d310      	bcc.n	8002fc0 <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <vTaskDelay+0xa8>)
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	6831      	ldr	r1, [r6, #0]
 8002fa4:	3104      	adds	r1, #4
 8002fa6:	f7fe fc89 	bl	80018bc <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8002faa:	682b      	ldr	r3, [r5, #0]
 8002fac:	b9a3      	cbnz	r3, 8002fd8 <vTaskDelay+0x90>
 8002fae:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002fb2:	f383 8811 	msr	BASEPRI, r3
 8002fb6:	f3bf 8f6f 	isb	sy
 8002fba:	f3bf 8f4f 	dsb	sy
 8002fbe:	e7fe      	b.n	8002fbe <vTaskDelay+0x76>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <vTaskDelay+0xac>)
 8002fc2:	6818      	ldr	r0, [r3, #0]
 8002fc4:	6831      	ldr	r1, [r6, #0]
 8002fc6:	3104      	adds	r1, #4
 8002fc8:	f7fe fc78 	bl	80018bc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <vTaskDelay+0xb0>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002fd2:	bf38      	it	cc
 8002fd4:	601c      	strcc	r4, [r3, #0]
 8002fd6:	e7e8      	b.n	8002faa <vTaskDelay+0x62>
 8002fd8:	f7ff fe2e 	bl	8002c38 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d0b5      	beq.n	8002f4c <vTaskDelay+0x4>
	}
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200010ac 	.word	0x200010ac
 8002fe8:	20000c38 	.word	0x20000c38
 8002fec:	2000112c 	.word	0x2000112c
 8002ff0:	20000c40 	.word	0x20000c40
 8002ff4:	20000c3c 	.word	0x20000c3c
 8002ff8:	200010e0 	.word	0x200010e0

08002ffc <vTaskSuspend>:
	{
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003000:	4e32      	ldr	r6, [pc, #200]	; (80030cc <vTaskSuspend+0xd0>)
		taskENTER_CRITICAL();
 8003002:	f000 fef7 	bl	8003df4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003006:	2c00      	cmp	r4, #0
 8003008:	d03b      	beq.n	8003082 <vTaskSuspend+0x86>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800300a:	1d25      	adds	r5, r4, #4
 800300c:	4628      	mov	r0, r5
 800300e:	f7fe fc6d 	bl	80018ec <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003012:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003014:	b11b      	cbz	r3, 800301e <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003016:	f104 0018 	add.w	r0, r4, #24
 800301a:	f7fe fc67 	bl	80018ec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800301e:	4629      	mov	r1, r5
 8003020:	482b      	ldr	r0, [pc, #172]	; (80030d0 <vTaskSuspend+0xd4>)
		if( xSchedulerRunning != pdFALSE )
 8003022:	4d2c      	ldr	r5, [pc, #176]	; (80030d4 <vTaskSuspend+0xd8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003024:	f7fe fc3a 	bl	800189c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003028:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 800302c:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800302e:	bf04      	itt	eq
 8003030:	2300      	moveq	r3, #0
 8003032:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 8003036:	f000 feff 	bl	8003e38 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800303a:	682b      	ldr	r3, [r5, #0]
 800303c:	b993      	cbnz	r3, 8003064 <vTaskSuspend+0x68>
		if( pxTCB == pxCurrentTCB )
 800303e:	6833      	ldr	r3, [r6, #0]
 8003040:	42a3      	cmp	r3, r4
 8003042:	d000      	beq.n	8003046 <vTaskSuspend+0x4a>
	}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8003046:	682b      	ldr	r3, [r5, #0]
 8003048:	b313      	cbz	r3, 8003090 <vTaskSuspend+0x94>
				configASSERT( uxSchedulerSuspended == 0 );
 800304a:	4b23      	ldr	r3, [pc, #140]	; (80030d8 <vTaskSuspend+0xdc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d02b      	beq.n	80030aa <vTaskSuspend+0xae>
 8003052:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	e7fe      	b.n	8003062 <vTaskSuspend+0x66>
			taskENTER_CRITICAL();
 8003064:	f000 fec6 	bl	8003df4 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003068:	4b1c      	ldr	r3, [pc, #112]	; (80030dc <vTaskSuspend+0xe0>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	b152      	cbz	r2, 8003086 <vTaskSuspend+0x8a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003070:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003072:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <vTaskSuspend+0xe4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003074:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003076:	68d2      	ldr	r2, [r2, #12]
 8003078:	6852      	ldr	r2, [r2, #4]
 800307a:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 800307c:	f000 fedc 	bl	8003e38 <vPortExitCritical>
 8003080:	e7dd      	b.n	800303e <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003082:	6834      	ldr	r4, [r6, #0]
 8003084:	e7c1      	b.n	800300a <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003086:	4b16      	ldr	r3, [pc, #88]	; (80030e0 <vTaskSuspend+0xe4>)
 8003088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e7f5      	b.n	800307c <vTaskSuspend+0x80>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003090:	490f      	ldr	r1, [pc, #60]	; (80030d0 <vTaskSuspend+0xd4>)
 8003092:	4a14      	ldr	r2, [pc, #80]	; (80030e4 <vTaskSuspend+0xe8>)
 8003094:	6809      	ldr	r1, [r1, #0]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	4291      	cmp	r1, r2
 800309a:	d011      	beq.n	80030c0 <vTaskSuspend+0xc4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <vTaskSuspend+0xdc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b183      	cbz	r3, 80030c4 <vTaskSuspend+0xc8>
		xYieldPending = pdTRUE;
 80030a2:	4b11      	ldr	r3, [pc, #68]	; (80030e8 <vTaskSuspend+0xec>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
	}
 80030a8:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 80030aa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	f3bf 8f6f 	isb	sy
	}
 80030be:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB = NULL;
 80030c0:	6033      	str	r3, [r6, #0]
	}
 80030c2:	bd70      	pop	{r4, r5, r6, pc}
 80030c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80030c8:	f7ff bc1e 	b.w	8002908 <vTaskSwitchContext.part.0>
 80030cc:	20000c38 	.word	0x20000c38
 80030d0:	20001104 	.word	0x20001104
 80030d4:	20001100 	.word	0x20001100
 80030d8:	200010ac 	.word	0x200010ac
 80030dc:	20000c3c 	.word	0x20000c3c
 80030e0:	200010e0 	.word	0x200010e0
 80030e4:	200010a4 	.word	0x200010a4
 80030e8:	20001130 	.word	0x20001130

080030ec <vTaskResume>:
		configASSERT( xTaskToResume );
 80030ec:	b198      	cbz	r0, 8003116 <vTaskResume+0x2a>
	{
 80030ee:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80030f0:	4d22      	ldr	r5, [pc, #136]	; (800317c <vTaskResume+0x90>)
 80030f2:	682b      	ldr	r3, [r5, #0]
 80030f4:	4283      	cmp	r3, r0
	{
 80030f6:	b083      	sub	sp, #12
 80030f8:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80030fa:	d00a      	beq.n	8003112 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 80030fc:	f000 fe7a 	bl	8003df4 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <vTaskResume+0x94>)
 8003102:	6962      	ldr	r2, [r4, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	d00f      	beq.n	8003128 <vTaskResume+0x3c>
	}
 8003108:	b003      	add	sp, #12
 800310a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 800310e:	f000 be93 	b.w	8003e38 <vPortExitCritical>
	}
 8003112:	b003      	add	sp, #12
 8003114:	bd30      	pop	{r4, r5, pc}
 8003116:	f04f 0340 	mov.w	r3, #64	; 0x40
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 8003126:	e7fe      	b.n	8003126 <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003128:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800312a:	4a16      	ldr	r2, [pc, #88]	; (8003184 <vTaskResume+0x98>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d0eb      	beq.n	8003108 <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e9      	bne.n	8003108 <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003134:	1d21      	adds	r1, r4, #4
 8003136:	4608      	mov	r0, r1
 8003138:	9101      	str	r1, [sp, #4]
 800313a:	f7fe fbd7 	bl	80018ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800313e:	4a12      	ldr	r2, [pc, #72]	; (8003188 <vTaskResume+0x9c>)
 8003140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003142:	6810      	ldr	r0, [r2, #0]
 8003144:	9901      	ldr	r1, [sp, #4]
 8003146:	4283      	cmp	r3, r0
 8003148:	4810      	ldr	r0, [pc, #64]	; (800318c <vTaskResume+0xa0>)
 800314a:	bf88      	it	hi
 800314c:	6013      	strhi	r3, [r2, #0]
 800314e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003152:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003156:	f7fe fba1 	bl	800189c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800315a:	682b      	ldr	r3, [r5, #0]
 800315c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	429a      	cmp	r2, r3
 8003162:	d3d1      	bcc.n	8003108 <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 8003164:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800316c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e7c6      	b.n	8003108 <vTaskResume+0x1c>
 800317a:	bf00      	nop
 800317c:	20000c38 	.word	0x20000c38
 8003180:	20001104 	.word	0x20001104
 8003184:	200010ec 	.word	0x200010ec
 8003188:	200010b4 	.word	0x200010b4
 800318c:	20000c44 	.word	0x20000c44

08003190 <vTaskStartScheduler>:
{
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003194:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003196:	4668      	mov	r0, sp
 8003198:	aa02      	add	r2, sp, #8
 800319a:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800319c:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80031a0:	f7fe fa64 	bl	800166c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031a4:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 80031a6:	b1c8      	cbz	r0, 80031dc <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031a8:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 80031aa:	b174      	cbz	r4, 80031ca <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 80031ac:	236c      	movs	r3, #108	; 0x6c
 80031ae:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031b0:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031b2:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d01a      	beq.n	80031ee <vTaskStartScheduler+0x5e>
 80031b8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	e7fe      	b.n	80031c8 <vTaskStartScheduler+0x38>
 80031ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80031da:	e7fe      	b.n	80031da <vTaskStartScheduler+0x4a>
 80031dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80031ec:	e7fe      	b.n	80031ec <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031ee:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f0:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031f2:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031f4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031f8:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031fa:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031fc:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031fe:	f009 f8cb 	bl	800c398 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003202:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003204:	4b2b      	ldr	r3, [pc, #172]	; (80032b4 <vTaskStartScheduler+0x124>)
 8003206:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003208:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800320a:	4415      	add	r5, r2
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800320c:	2249      	movs	r2, #73	; 0x49
 800320e:	f801 2f34 	strb.w	r2, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003212:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 8003216:	f103 001f 	add.w	r0, r3, #31
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800321a:	4298      	cmp	r0, r3
 800321c:	d005      	beq.n	800322a <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800321e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8003222:	f801 2f01 	strb.w	r2, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8003226:	2a00      	cmp	r2, #0
 8003228:	d1f7      	bne.n	800321a <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800322a:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800322c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800322e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003232:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 8003236:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003238:	f7fe fb2c 	bl	8001894 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800323c:	f104 0018 	add.w	r0, r4, #24
 8003240:	f7fe fb28 	bl	8001894 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003244:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003246:	491c      	ldr	r1, [pc, #112]	; (80032b8 <vTaskStartScheduler+0x128>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003248:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800324a:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 800324c:	6665      	str	r5, [r4, #100]	; 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800324e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003250:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003252:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8003256:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800325a:	4630      	mov	r0, r6
 800325c:	f000 fd9e 	bl	8003d9c <pxPortInitialiseStack>
 8003260:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff fac8 	bl	80027f8 <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8003268:	f000 fce8 	bl	8003c3c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800326c:	2801      	cmp	r0, #1
 800326e:	d00c      	beq.n	800328a <vTaskStartScheduler+0xfa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003270:	3001      	adds	r0, #1
 8003272:	d001      	beq.n	8003278 <vTaskStartScheduler+0xe8>
}
 8003274:	b004      	add	sp, #16
 8003276:	bd70      	pop	{r4, r5, r6, pc}
 8003278:	f04f 0340 	mov.w	r3, #64	; 0x40
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003288:	e7fe      	b.n	8003288 <vTaskStartScheduler+0xf8>
 800328a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800329a:	4908      	ldr	r1, [pc, #32]	; (80032bc <vTaskStartScheduler+0x12c>)
		xSchedulerRunning = pdTRUE;
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <vTaskStartScheduler+0x130>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <vTaskStartScheduler+0x134>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80032a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80032a4:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80032a6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80032a8:	601d      	str	r5, [r3, #0]
}
 80032aa:	b004      	add	sp, #16
 80032ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 80032b0:	f000 be32 	b.w	8003f18 <xPortStartScheduler>
 80032b4:	08010a94 	.word	0x08010a94
 80032b8:	08002a55 	.word	0x08002a55
 80032bc:	200010e0 	.word	0x200010e0
 80032c0:	20001100 	.word	0x20001100
 80032c4:	2000112c 	.word	0x2000112c

080032c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80032c8:	4a02      	ldr	r2, [pc, #8]	; (80032d4 <vTaskSuspendAll+0xc>)
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	200010ac 	.word	0x200010ac

080032d8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <xTaskResumeAll+0x1c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	b943      	cbnz	r3, 80032f0 <xTaskResumeAll+0x18>
 80032de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	e7fe      	b.n	80032ee <xTaskResumeAll+0x16>
 80032f0:	f7ff bca2 	b.w	8002c38 <xTaskResumeAll.part.0>
 80032f4:	200010ac 	.word	0x200010ac

080032f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80032f8:	4b01      	ldr	r3, [pc, #4]	; (8003300 <xTaskGetTickCount+0x8>)
 80032fa:	6818      	ldr	r0, [r3, #0]
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	2000112c 	.word	0x2000112c

08003304 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <xTaskIncrementTick+0x18>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b90b      	cbnz	r3, 800330e <xTaskIncrementTick+0xa>
 800330a:	f7ff bbf1 	b.w	8002af0 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 800330e:	4a04      	ldr	r2, [pc, #16]	; (8003320 <xTaskIncrementTick+0x1c>)
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	3301      	adds	r3, #1
}
 8003314:	2000      	movs	r0, #0
		++xPendedTicks;
 8003316:	6013      	str	r3, [r2, #0]
}
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	200010ac 	.word	0x200010ac
 8003320:	200010e8 	.word	0x200010e8

08003324 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003324:	4b04      	ldr	r3, [pc, #16]	; (8003338 <vTaskSwitchContext+0x14>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	b11b      	cbz	r3, 8003332 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <vTaskSwitchContext+0x18>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]
}
 8003330:	4770      	bx	lr
 8003332:	f7ff bae9 	b.w	8002908 <vTaskSwitchContext.part.0>
 8003336:	bf00      	nop
 8003338:	200010ac 	.word	0x200010ac
 800333c:	20001130 	.word	0x20001130

08003340 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003340:	b1f0      	cbz	r0, 8003380 <vTaskPlaceOnEventList+0x40>
{
 8003342:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003344:	4d1c      	ldr	r5, [pc, #112]	; (80033b8 <vTaskPlaceOnEventList+0x78>)
 8003346:	460c      	mov	r4, r1
 8003348:	6829      	ldr	r1, [r5, #0]
 800334a:	3118      	adds	r1, #24
 800334c:	f7fe fab6 	bl	80018bc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <vTaskPlaceOnEventList+0x7c>)
 8003352:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003354:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003356:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003358:	2200      	movs	r2, #0
 800335a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800335e:	3004      	adds	r0, #4
 8003360:	f7fe fac4 	bl	80018ec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003364:	1c63      	adds	r3, r4, #1
 8003366:	d014      	beq.n	8003392 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	19a4      	adds	r4, r4, r6
 800336c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800336e:	d317      	bcc.n	80033a0 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <vTaskPlaceOnEventList+0x80>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	6829      	ldr	r1, [r5, #0]
}
 8003376:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800337a:	3104      	adds	r1, #4
 800337c:	f7fe ba9e 	b.w	80018bc <vListInsert>
 8003380:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003390:	e7fe      	b.n	8003390 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003392:	6829      	ldr	r1, [r5, #0]
 8003394:	480b      	ldr	r0, [pc, #44]	; (80033c4 <vTaskPlaceOnEventList+0x84>)
}
 8003396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800339a:	3104      	adds	r1, #4
 800339c:	f7fe ba7e 	b.w	800189c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033a0:	4b09      	ldr	r3, [pc, #36]	; (80033c8 <vTaskPlaceOnEventList+0x88>)
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	6829      	ldr	r1, [r5, #0]
 80033a6:	3104      	adds	r1, #4
 80033a8:	f7fe fa88 	bl	80018bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033ac:	4b07      	ldr	r3, [pc, #28]	; (80033cc <vTaskPlaceOnEventList+0x8c>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80033b2:	bf38      	it	cc
 80033b4:	601c      	strcc	r4, [r3, #0]
}
 80033b6:	bd70      	pop	{r4, r5, r6, pc}
 80033b8:	20000c38 	.word	0x20000c38
 80033bc:	2000112c 	.word	0x2000112c
 80033c0:	20000c40 	.word	0x20000c40
 80033c4:	20001104 	.word	0x20001104
 80033c8:	20000c3c 	.word	0x20000c3c
 80033cc:	200010e0 	.word	0x200010e0

080033d0 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d02e      	beq.n	8003432 <vTaskPlaceOnUnorderedEventList+0x62>
	configASSERT( uxSchedulerSuspended != 0 );
 80033d4:	4b25      	ldr	r3, [pc, #148]	; (800346c <vTaskPlaceOnUnorderedEventList+0x9c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	b943      	cbnz	r3, 80033ec <vTaskPlaceOnUnorderedEventList+0x1c>
 80033da:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033de:	f383 8811 	msr	BASEPRI, r3
 80033e2:	f3bf 8f6f 	isb	sy
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	e7fe      	b.n	80033ea <vTaskPlaceOnUnorderedEventList+0x1a>
{
 80033ec:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80033ee:	4d20      	ldr	r5, [pc, #128]	; (8003470 <vTaskPlaceOnUnorderedEventList+0xa0>)
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80033f6:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033f8:	6829      	ldr	r1, [r5, #0]
 80033fa:	3118      	adds	r1, #24
 80033fc:	4614      	mov	r4, r2
 80033fe:	f7fe fa4d 	bl	800189c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <vTaskPlaceOnUnorderedEventList+0xa4>)
 8003404:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003406:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003408:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800340a:	2200      	movs	r2, #0
 800340c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003410:	3004      	adds	r0, #4
 8003412:	f7fe fa6b 	bl	80018ec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003416:	1c63      	adds	r3, r4, #1
 8003418:	d014      	beq.n	8003444 <vTaskPlaceOnUnorderedEventList+0x74>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	19a4      	adds	r4, r4, r6
 800341e:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003420:	d317      	bcc.n	8003452 <vTaskPlaceOnUnorderedEventList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <vTaskPlaceOnUnorderedEventList+0xa8>)
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	6829      	ldr	r1, [r5, #0]
}
 8003428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800342c:	3104      	adds	r1, #4
 800342e:	f7fe ba45 	b.w	80018bc <vListInsert>
 8003432:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003442:	e7fe      	b.n	8003442 <vTaskPlaceOnUnorderedEventList+0x72>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003444:	6829      	ldr	r1, [r5, #0]
 8003446:	480d      	ldr	r0, [pc, #52]	; (800347c <vTaskPlaceOnUnorderedEventList+0xac>)
}
 8003448:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800344c:	3104      	adds	r1, #4
 800344e:	f7fe ba25 	b.w	800189c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003452:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <vTaskPlaceOnUnorderedEventList+0xb0>)
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	6829      	ldr	r1, [r5, #0]
 8003458:	3104      	adds	r1, #4
 800345a:	f7fe fa2f 	bl	80018bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <vTaskPlaceOnUnorderedEventList+0xb4>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003464:	bf38      	it	cc
 8003466:	601c      	strcc	r4, [r3, #0]
}
 8003468:	bd70      	pop	{r4, r5, r6, pc}
 800346a:	bf00      	nop
 800346c:	200010ac 	.word	0x200010ac
 8003470:	20000c38 	.word	0x20000c38
 8003474:	2000112c 	.word	0x2000112c
 8003478:	20000c40 	.word	0x20000c40
 800347c:	20001104 	.word	0x20001104
 8003480:	20000c3c 	.word	0x20000c3c
 8003484:	200010e0 	.word	0x200010e0

08003488 <vTaskPlaceOnEventListRestricted>:
	{
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800348a:	b360      	cbz	r0, 80034e6 <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800348c:	4e20      	ldr	r6, [pc, #128]	; (8003510 <vTaskPlaceOnEventListRestricted+0x88>)
 800348e:	460c      	mov	r4, r1
 8003490:	6831      	ldr	r1, [r6, #0]
 8003492:	4615      	mov	r5, r2
 8003494:	3118      	adds	r1, #24
 8003496:	f7fe fa01 	bl	800189c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800349a:	4b1e      	ldr	r3, [pc, #120]	; (8003514 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 800349c:	b99d      	cbnz	r5, 80034c6 <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 800349e:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034a0:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a2:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034a4:	f883 506a 	strb.w	r5, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034a8:	3004      	adds	r0, #4
 80034aa:	f7fe fa1f 	bl	80018ec <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034ae:	6833      	ldr	r3, [r6, #0]
 80034b0:	19e4      	adds	r4, r4, r7
 80034b2:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034b4:	d320      	bcc.n	80034f8 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <vTaskPlaceOnEventListRestricted+0x90>)
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	6831      	ldr	r1, [r6, #0]
	}
 80034bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034c0:	3104      	adds	r1, #4
 80034c2:	f7fe b9fb 	b.w	80018bc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80034c6:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034c8:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034ca:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034d2:	3004      	adds	r0, #4
 80034d4:	f7fe fa0a 	bl	80018ec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d8:	6831      	ldr	r1, [r6, #0]
 80034da:	4810      	ldr	r0, [pc, #64]	; (800351c <vTaskPlaceOnEventListRestricted+0x94>)
	}
 80034dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e0:	3104      	adds	r1, #4
 80034e2:	f7fe b9db 	b.w	800189c <vListInsertEnd>
 80034e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 80034f6:	e7fe      	b.n	80034f6 <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034f8:	4b09      	ldr	r3, [pc, #36]	; (8003520 <vTaskPlaceOnEventListRestricted+0x98>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	6831      	ldr	r1, [r6, #0]
 80034fe:	3104      	adds	r1, #4
 8003500:	f7fe f9dc 	bl	80018bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003504:	4b07      	ldr	r3, [pc, #28]	; (8003524 <vTaskPlaceOnEventListRestricted+0x9c>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800350a:	bf38      	it	cc
 800350c:	601c      	strcc	r4, [r3, #0]
	}
 800350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003510:	20000c38 	.word	0x20000c38
 8003514:	2000112c 	.word	0x2000112c
 8003518:	20000c40 	.word	0x20000c40
 800351c:	20001104 	.word	0x20001104
 8003520:	20000c3c 	.word	0x20000c3c
 8003524:	200010e0 	.word	0x200010e0

08003528 <xTaskRemoveFromEventList>:
{
 8003528:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800352a:	68c3      	ldr	r3, [r0, #12]
 800352c:	68dc      	ldr	r4, [r3, #12]
{
 800352e:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8003530:	2c00      	cmp	r4, #0
 8003532:	d02b      	beq.n	800358c <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003534:	f104 0518 	add.w	r5, r4, #24
 8003538:	4628      	mov	r0, r5
 800353a:	f7fe f9d7 	bl	80018ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <xTaskRemoveFromEventList+0x78>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	b17b      	cbz	r3, 8003564 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003544:	4817      	ldr	r0, [pc, #92]	; (80035a4 <xTaskRemoveFromEventList+0x7c>)
 8003546:	4629      	mov	r1, r5
 8003548:	f7fe f9a8 	bl	800189c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <xTaskRemoveFromEventList+0x80>)
 800354e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003556:	bf85      	ittet	hi
 8003558:	4b14      	ldrhi	r3, [pc, #80]	; (80035ac <xTaskRemoveFromEventList+0x84>)
 800355a:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 800355c:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800355e:	6018      	strhi	r0, [r3, #0]
}
 8003560:	b003      	add	sp, #12
 8003562:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003564:	1d21      	adds	r1, r4, #4
 8003566:	4608      	mov	r0, r1
 8003568:	9101      	str	r1, [sp, #4]
 800356a:	f7fe f9bf 	bl	80018ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <xTaskRemoveFromEventList+0x88>)
 8003570:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003572:	6810      	ldr	r0, [r2, #0]
 8003574:	9901      	ldr	r1, [sp, #4]
 8003576:	4283      	cmp	r3, r0
 8003578:	480e      	ldr	r0, [pc, #56]	; (80035b4 <xTaskRemoveFromEventList+0x8c>)
 800357a:	bf88      	it	hi
 800357c:	6013      	strhi	r3, [r2, #0]
 800357e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003582:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003586:	f7fe f989 	bl	800189c <vListInsertEnd>
 800358a:	e7df      	b.n	800354c <xTaskRemoveFromEventList+0x24>
 800358c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800359c:	e7fe      	b.n	800359c <xTaskRemoveFromEventList+0x74>
 800359e:	bf00      	nop
 80035a0:	200010ac 	.word	0x200010ac
 80035a4:	200010ec 	.word	0x200010ec
 80035a8:	20000c38 	.word	0x20000c38
 80035ac:	20001130 	.word	0x20001130
 80035b0:	200010b4 	.word	0x200010b4
 80035b4:	20000c44 	.word	0x20000c44

080035b8 <vTaskRemoveFromUnorderedEventList>:
{
 80035b8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80035ba:	4b1c      	ldr	r3, [pc, #112]	; (800362c <vTaskRemoveFromUnorderedEventList+0x74>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	b942      	cbnz	r2, 80035d2 <vTaskRemoveFromUnorderedEventList+0x1a>
 80035c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	e7fe      	b.n	80035d0 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d2:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80035d4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80035d8:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 80035da:	b1ec      	cbz	r4, 8003618 <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035dc:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 80035de:	f7fe f985 	bl	80018ec <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035e2:	4628      	mov	r0, r5
 80035e4:	f7fe f982 	bl	80018ec <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80035e8:	4a11      	ldr	r2, [pc, #68]	; (8003630 <vTaskRemoveFromUnorderedEventList+0x78>)
 80035ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80035ec:	6811      	ldr	r1, [r2, #0]
 80035ee:	4811      	ldr	r0, [pc, #68]	; (8003634 <vTaskRemoveFromUnorderedEventList+0x7c>)
 80035f0:	428b      	cmp	r3, r1
 80035f2:	bf88      	it	hi
 80035f4:	6013      	strhi	r3, [r2, #0]
 80035f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80035fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80035fe:	4629      	mov	r1, r5
 8003600:	f7fe f94c 	bl	800189c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <vTaskRemoveFromUnorderedEventList+0x80>)
 8003606:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	429a      	cmp	r2, r3
 800360e:	d902      	bls.n	8003616 <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
 8003610:	4b0a      	ldr	r3, [pc, #40]	; (800363c <vTaskRemoveFromUnorderedEventList+0x84>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bd38      	pop	{r3, r4, r5, pc}
 8003618:	f04f 0340 	mov.w	r3, #64	; 0x40
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003628:	e7fe      	b.n	8003628 <vTaskRemoveFromUnorderedEventList+0x70>
 800362a:	bf00      	nop
 800362c:	200010ac 	.word	0x200010ac
 8003630:	200010b4 	.word	0x200010b4
 8003634:	20000c44 	.word	0x20000c44
 8003638:	20000c38 	.word	0x20000c38
 800363c:	20001130 	.word	0x20001130

08003640 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003640:	4a03      	ldr	r2, [pc, #12]	; (8003650 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003644:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	e9c0 2300 	strd	r2, r3, [r0]
}
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	200010e4 	.word	0x200010e4
 8003654:	2000112c 	.word	0x2000112c

08003658 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8003658:	b328      	cbz	r0, 80036a6 <xTaskCheckForTimeOut+0x4e>
{
 800365a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365c:	460d      	mov	r5, r1
 800365e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8003660:	b1c1      	cbz	r1, 8003694 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 8003662:	4604      	mov	r4, r0
 8003664:	f000 fbc6 	bl	8003df4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003668:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <xTaskCheckForTimeOut+0x9c>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800366a:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <xTaskCheckForTimeOut+0xa0>)
		const TickType_t xConstTickCount = xTickCount;
 800366c:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800366e:	6819      	ldr	r1, [r3, #0]
 8003670:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
 8003674:	bb00      	cbnz	r0, 80036b8 <xTaskCheckForTimeOut+0x60>
			if( *pxTicksToWait == portMAX_DELAY )
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	1c59      	adds	r1, r3, #1
 800367a:	d022      	beq.n	80036c2 <xTaskCheckForTimeOut+0x6a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800367c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80036fc <xTaskCheckForTimeOut+0xa4>
 8003680:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003684:	f8de 7000 	ldr.w	r7, [lr]
 8003688:	42b8      	cmp	r0, r7
 800368a:	d020      	beq.n	80036ce <xTaskCheckForTimeOut+0x76>
 800368c:	42b1      	cmp	r1, r6
 800368e:	d81e      	bhi.n	80036ce <xTaskCheckForTimeOut+0x76>
			xReturn = pdTRUE;
 8003690:	2001      	movs	r0, #1
 8003692:	e016      	b.n	80036c2 <xTaskCheckForTimeOut+0x6a>
 8003694:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003698:	f383 8811 	msr	BASEPRI, r3
 800369c:	f3bf 8f6f 	isb	sy
 80036a0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 80036a4:	e7fe      	b.n	80036a4 <xTaskCheckForTimeOut+0x4c>
 80036a6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80036b6:	e7fe      	b.n	80036b6 <xTaskCheckForTimeOut+0x5e>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 80036c0:	2001      	movs	r0, #1
 80036c2:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80036c4:	f000 fbb8 	bl	8003e38 <vPortExitCritical>
}
 80036c8:	9801      	ldr	r0, [sp, #4]
 80036ca:	b003      	add	sp, #12
 80036cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036ce:	eba6 0c01 	sub.w	ip, r6, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036d2:	4563      	cmp	r3, ip
 80036d4:	d909      	bls.n	80036ea <xTaskCheckForTimeOut+0x92>
			*pxTicksToWait -= xElapsedTime;
 80036d6:	1b9b      	subs	r3, r3, r6
 80036d8:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036da:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036de:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80036e0:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 80036e2:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036e4:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80036e8:	e7eb      	b.n	80036c2 <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80036ee:	2001      	movs	r0, #1
 80036f0:	e7e7      	b.n	80036c2 <xTaskCheckForTimeOut+0x6a>
 80036f2:	bf00      	nop
 80036f4:	2000112c 	.word	0x2000112c
 80036f8:	20000c38 	.word	0x20000c38
 80036fc:	200010e4 	.word	0x200010e4

08003700 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003700:	4b01      	ldr	r3, [pc, #4]	; (8003708 <vTaskMissedYield+0x8>)
 8003702:	2201      	movs	r2, #1
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	4770      	bx	lr
 8003708:	20001130 	.word	0x20001130

0800370c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800370c:	4b05      	ldr	r3, [pc, #20]	; (8003724 <xTaskGetSchedulerState+0x18>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	b133      	cbz	r3, 8003720 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <xTaskGetSchedulerState+0x1c>)
 8003714:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8003716:	2b00      	cmp	r3, #0
 8003718:	bf0c      	ite	eq
 800371a:	2002      	moveq	r0, #2
 800371c:	2000      	movne	r0, #0
 800371e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003720:	2001      	movs	r0, #1
	}
 8003722:	4770      	bx	lr
 8003724:	20001100 	.word	0x20001100
 8003728:	200010ac 	.word	0x200010ac

0800372c <xTaskPriorityInherit>:
	{
 800372c:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800372e:	4604      	mov	r4, r0
	{
 8003730:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8003732:	b1c8      	cbz	r0, 8003768 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003734:	4d1d      	ldr	r5, [pc, #116]	; (80037ac <xTaskPriorityInherit+0x80>)
 8003736:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003738:	682a      	ldr	r2, [r5, #0]
 800373a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800373c:	4293      	cmp	r3, r2
 800373e:	d215      	bcs.n	800376c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003740:	6982      	ldr	r2, [r0, #24]
 8003742:	2a00      	cmp	r2, #0
 8003744:	db04      	blt.n	8003750 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003746:	682a      	ldr	r2, [r5, #0]
 8003748:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800374a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800374e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003750:	4e17      	ldr	r6, [pc, #92]	; (80037b0 <xTaskPriorityInherit+0x84>)
 8003752:	6962      	ldr	r2, [r4, #20]
 8003754:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003758:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d00e      	beq.n	800377e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003760:	682b      	ldr	r3, [r5, #0]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003766:	2001      	movs	r0, #1
	}
 8003768:	b002      	add	sp, #8
 800376a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800376c:	682b      	ldr	r3, [r5, #0]
 800376e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8003770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003772:	4298      	cmp	r0, r3
 8003774:	bf2c      	ite	cs
 8003776:	2000      	movcs	r0, #0
 8003778:	2001      	movcc	r0, #1
	}
 800377a:	b002      	add	sp, #8
 800377c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800377e:	1d21      	adds	r1, r4, #4
 8003780:	4608      	mov	r0, r1
 8003782:	9101      	str	r1, [sp, #4]
 8003784:	f7fe f8b2 	bl	80018ec <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003788:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800378a:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800378c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800378e:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003790:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003792:	4290      	cmp	r0, r2
 8003794:	bf88      	it	hi
 8003796:	6018      	strhi	r0, [r3, #0]
 8003798:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800379c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80037a0:	9901      	ldr	r1, [sp, #4]
 80037a2:	f7fe f87b 	bl	800189c <vListInsertEnd>
				xReturn = pdTRUE;
 80037a6:	2001      	movs	r0, #1
 80037a8:	e7de      	b.n	8003768 <xTaskPriorityInherit+0x3c>
 80037aa:	bf00      	nop
 80037ac:	20000c38 	.word	0x20000c38
 80037b0:	20000c44 	.word	0x20000c44
 80037b4:	200010b4 	.word	0x200010b4

080037b8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80037b8:	b318      	cbz	r0, 8003802 <xTaskPriorityDisinherit+0x4a>
	{
 80037ba:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80037bc:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <xTaskPriorityDisinherit+0x80>)
 80037be:	681c      	ldr	r4, [r3, #0]
 80037c0:	4284      	cmp	r4, r0
	{
 80037c2:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 80037c4:	d008      	beq.n	80037d8 <xTaskPriorityDisinherit+0x20>
 80037c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	e7fe      	b.n	80037d6 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 80037d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80037da:	b14b      	cbz	r3, 80037f0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037de:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 80037e0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037e2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80037e4:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80037e6:	d000      	beq.n	80037ea <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80037e8:	b16b      	cbz	r3, 8003806 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80037ea:	2000      	movs	r0, #0
	}
 80037ec:	b002      	add	sp, #8
 80037ee:	bd10      	pop	{r4, pc}
 80037f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003800:	e7fe      	b.n	8003800 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003802:	2000      	movs	r0, #0
	}
 8003804:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003806:	1d21      	adds	r1, r4, #4
 8003808:	4608      	mov	r0, r1
 800380a:	9101      	str	r1, [sp, #4]
 800380c:	f7fe f86e 	bl	80018ec <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003810:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 8003812:	4a0a      	ldr	r2, [pc, #40]	; (800383c <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003814:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003816:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 800381a:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800381c:	6810      	ldr	r0, [r2, #0]
 800381e:	9901      	ldr	r1, [sp, #4]
 8003820:	4283      	cmp	r3, r0
 8003822:	4807      	ldr	r0, [pc, #28]	; (8003840 <xTaskPriorityDisinherit+0x88>)
 8003824:	bf88      	it	hi
 8003826:	6013      	strhi	r3, [r2, #0]
 8003828:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800382c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003830:	f7fe f834 	bl	800189c <vListInsertEnd>
					xReturn = pdTRUE;
 8003834:	2001      	movs	r0, #1
		return xReturn;
 8003836:	e7d9      	b.n	80037ec <xTaskPriorityDisinherit+0x34>
 8003838:	20000c38 	.word	0x20000c38
 800383c:	200010b4 	.word	0x200010b4
 8003840:	20000c44 	.word	0x20000c44

08003844 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003844:	2800      	cmp	r0, #0
 8003846:	d041      	beq.n	80038cc <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8003848:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800384a:	6e03      	ldr	r3, [r0, #96]	; 0x60
	{
 800384c:	b083      	sub	sp, #12
 800384e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8003850:	b153      	cbz	r3, 8003868 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003852:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003854:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003856:	4281      	cmp	r1, r0
 8003858:	bf38      	it	cc
 800385a:	4601      	movcc	r1, r0
 800385c:	428a      	cmp	r2, r1
 800385e:	d001      	beq.n	8003864 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003860:	2b01      	cmp	r3, #1
 8003862:	d00a      	beq.n	800387a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8003864:	b003      	add	sp, #12
 8003866:	bd30      	pop	{r4, r5, pc}
 8003868:	f04f 0340 	mov.w	r3, #64	; 0x40
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003878:	e7fe      	b.n	8003878 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 800387a:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	42a3      	cmp	r3, r4
 8003880:	d025      	beq.n	80038ce <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003882:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003884:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003886:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003888:	bfa8      	it	ge
 800388a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800388e:	4d15      	ldr	r5, [pc, #84]	; (80038e4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003890:	bfa8      	it	ge
 8003892:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003894:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003898:	6961      	ldr	r1, [r4, #20]
 800389a:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800389e:	4299      	cmp	r1, r3
 80038a0:	d1e0      	bne.n	8003864 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a2:	1d21      	adds	r1, r4, #4
 80038a4:	4608      	mov	r0, r1
 80038a6:	9101      	str	r1, [sp, #4]
 80038a8:	f7fe f820 	bl	80018ec <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80038ac:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 80038ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	9901      	ldr	r1, [sp, #4]
 80038b4:	4290      	cmp	r0, r2
 80038b6:	bf88      	it	hi
 80038b8:	6018      	strhi	r0, [r3, #0]
 80038ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80038be:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 80038c2:	b003      	add	sp, #12
 80038c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 80038c8:	f7fd bfe8 	b.w	800189c <vListInsertEnd>
 80038cc:	4770      	bx	lr
 80038ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 80038de:	e7fe      	b.n	80038de <vTaskPriorityDisinheritAfterTimeout+0x9a>
 80038e0:	20000c38 	.word	0x20000c38
 80038e4:	20000c44 	.word	0x20000c44
 80038e8:	200010b4 	.word	0x200010b4

080038ec <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <uxTaskResetEventItemValue+0x14>)
 80038ee:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f0:	6813      	ldr	r3, [r2, #0]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80038f6:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038f8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80038fc:	6193      	str	r3, [r2, #24]
}
 80038fe:	4770      	bx	lr
 8003900:	20000c38 	.word	0x20000c38

08003904 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <pvTaskIncrementMutexHeldCount+0x14>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	b11a      	cbz	r2, 8003912 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800390a:	6819      	ldr	r1, [r3, #0]
 800390c:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 800390e:	3201      	adds	r2, #1
 8003910:	660a      	str	r2, [r1, #96]	; 0x60
		return pxCurrentTCB;
 8003912:	6818      	ldr	r0, [r3, #0]
	}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	20000c38 	.word	0x20000c38

0800391c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800391c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003920:	4e22      	ldr	r6, [pc, #136]	; (80039ac <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 8003922:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80039b4 <prvSwitchTimerLists+0x98>
{
 8003926:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8003928:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800392c:	e00d      	b.n	800394a <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800392e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003930:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003932:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003934:	1d25      	adds	r5, r4, #4
 8003936:	4628      	mov	r0, r5
 8003938:	f7fd ffd8 	bl	80018ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800393c:	6a23      	ldr	r3, [r4, #32]
 800393e:	4620      	mov	r0, r4
 8003940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003942:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003946:	075b      	lsls	r3, r3, #29
 8003948:	d40a      	bmi.n	8003960 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800394a:	6833      	ldr	r3, [r6, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	2a00      	cmp	r2, #0
 8003950:	d1ed      	bne.n	800392e <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8003952:	4a17      	ldr	r2, [pc, #92]	; (80039b0 <prvSwitchTimerLists+0x94>)
 8003954:	6811      	ldr	r1, [r2, #0]
 8003956:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	b005      	add	sp, #20
 800395c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003960:	69a3      	ldr	r3, [r4, #24]
 8003962:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8003964:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003966:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8003968:	d205      	bcs.n	8003976 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800396a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800396c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800396e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003970:	f7fd ffa4 	bl	80018bc <vListInsert>
 8003974:	e7e9      	b.n	800394a <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 8003976:	f8d9 3000 	ldr.w	r3, [r9]
 800397a:	b16b      	cbz	r3, 8003998 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800397c:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003980:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003982:	f7ff fec3 	bl	800370c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003986:	2300      	movs	r3, #0
 8003988:	f8d9 0000 	ldr.w	r0, [r9]
 800398c:	461a      	mov	r2, r3
 800398e:	4669      	mov	r1, sp
 8003990:	f7fe f8b2 	bl	8001af8 <xQueueGenericSend>
				configASSERT( xResult );
 8003994:	2800      	cmp	r0, #0
 8003996:	d1d8      	bne.n	800394a <prvSwitchTimerLists+0x2e>
 8003998:	f04f 0340 	mov.w	r3, #64	; 0x40
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	e7fe      	b.n	80039a8 <prvSwitchTimerLists+0x8c>
 80039aa:	bf00      	nop
 80039ac:	20001134 	.word	0x20001134
 80039b0:	20001138 	.word	0x20001138
 80039b4:	20001258 	.word	0x20001258

080039b8 <prvTimerTask>:
{
 80039b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039bc:	4e9b      	ldr	r6, [pc, #620]	; (8003c2c <prvTimerTask+0x274>)
 80039be:	4d9c      	ldr	r5, [pc, #624]	; (8003c30 <prvTimerTask+0x278>)
 80039c0:	4c9c      	ldr	r4, [pc, #624]	; (8003c34 <prvTimerTask+0x27c>)
 80039c2:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 80039c4:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80039c8:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	681f      	ldr	r7, [r3, #0]
 80039d0:	2f00      	cmp	r7, #0
 80039d2:	f000 80a8 	beq.w	8003b26 <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 80039da:	f7ff fc75 	bl	80032c8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80039de:	f7ff fc8b 	bl	80032f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80039e2:	682a      	ldr	r2, [r5, #0]
 80039e4:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 80039e6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80039e8:	f0c0 80ae 	bcc.w	8003b48 <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039ec:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 80039ee:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80039f0:	f080 80b4 	bcs.w	8003b5c <prvTimerTask+0x1a4>
 80039f4:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80039f6:	6820      	ldr	r0, [r4, #0]
 80039f8:	eba7 010a 	sub.w	r1, r7, sl
 80039fc:	f7fe fe98 	bl	8002730 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a00:	f7ff fc6a 	bl	80032d8 <xTaskResumeAll>
 8003a04:	b928      	cbnz	r0, 8003a12 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8003a06:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	a902      	add	r1, sp, #8
 8003a18:	f7fe fae2 	bl	8001fe0 <xQueueReceive>
 8003a1c:	2800      	cmp	r0, #0
 8003a1e:	d0d5      	beq.n	80039cc <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a20:	9b02      	ldr	r3, [sp, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	db76      	blt.n	8003b14 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a26:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	b113      	cbz	r3, 8003a32 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a2c:	1d38      	adds	r0, r7, #4
 8003a2e:	f7fd ff5d 	bl	80018ec <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003a32:	f7ff fc61 	bl	80032f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003a36:	682b      	ldr	r3, [r5, #0]
 8003a38:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003a3a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003a3c:	f0c0 808b 	bcc.w	8003b56 <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 8003a40:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8003a42:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 8003a46:	2b09      	cmp	r3, #9
 8003a48:	d8e3      	bhi.n	8003a12 <prvTimerTask+0x5a>
 8003a4a:	e8df f003 	tbb	[pc, r3]
 8003a4e:	0505      	.short	0x0505
 8003a50:	5a3d5305 	.word	0x5a3d5305
 8003a54:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a5c:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a5e:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	1899      	adds	r1, r3, r2
 8003a6c:	bf2c      	ite	cs
 8003a6e:	2001      	movcs	r0, #1
 8003a70:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8003a72:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a74:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003a76:	f200 808c 	bhi.w	8003b92 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a7a:	ebaa 0303 	sub.w	r3, sl, r3
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d832      	bhi.n	8003ae8 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	4638      	mov	r0, r7
 8003a86:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a8c:	075b      	lsls	r3, r3, #29
 8003a8e:	d5c0      	bpl.n	8003a12 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	b183      	cbz	r3, 8003ab6 <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8003a94:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a96:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8003a98:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a9a:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a9c:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a9e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003aa0:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003aa2:	f7ff fe33 	bl	800370c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	6820      	ldr	r0, [r4, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	a906      	add	r1, sp, #24
 8003aae:	f7fe f823 	bl	8001af8 <xQueueGenericSend>
							configASSERT( xResult );
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d1ad      	bne.n	8003a12 <prvTimerTask+0x5a>
 8003ab6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	e7fe      	b.n	8003ac6 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ac8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ad4:	9b03      	ldr	r3, [sp, #12]
 8003ad6:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 809d 	beq.w	8003c18 <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ade:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8003ae0:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003ae2:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ae4:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003ae6:	d85e      	bhi.n	8003ba6 <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ae8:	4b53      	ldr	r3, [pc, #332]	; (8003c38 <prvTimerTask+0x280>)
 8003aea:	1d39      	adds	r1, r7, #4
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	f7fd fee5 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003af2:	e78e      	b.n	8003a12 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003af4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003af8:	f023 0301 	bic.w	r3, r3, #1
 8003afc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8003b00:	e787      	b.n	8003a12 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b06:	079a      	lsls	r2, r3, #30
 8003b08:	d552      	bpl.n	8003bb0 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003b12:	e77e      	b.n	8003a12 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003b1a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003b1c:	9b02      	ldr	r3, [sp, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f6ff af77 	blt.w	8003a12 <prvTimerTask+0x5a>
 8003b24:	e77f      	b.n	8003a26 <prvTimerTask+0x6e>
	vTaskSuspendAll();
 8003b26:	f7ff fbcf 	bl	80032c8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003b2a:	f7ff fbe5 	bl	80032f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003b2e:	682a      	ldr	r2, [r5, #0]
 8003b30:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8003b32:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003b34:	d808      	bhi.n	8003b48 <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b36:	4b40      	ldr	r3, [pc, #256]	; (8003c38 <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 8003b38:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	fab2 f282 	clz	r2, r2
 8003b44:	0952      	lsrs	r2, r2, #5
 8003b46:	e756      	b.n	80039f6 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8003b48:	f7ff fee8 	bl	800391c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003b4c:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8003b50:	f7ff fbc2 	bl	80032d8 <xTaskResumeAll>
 8003b54:	e75d      	b.n	8003a12 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8003b56:	f7ff fee1 	bl	800391c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003b5a:	e771      	b.n	8003a40 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003b5c:	f7ff fbbc 	bl	80032d8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b60:	6832      	ldr	r2, [r6, #0]
 8003b62:	68d2      	ldr	r2, [r2, #12]
 8003b64:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b68:	f10b 0104 	add.w	r1, fp, #4
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	9101      	str	r1, [sp, #4]
 8003b70:	f7fd febc 	bl	80018ec <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b74:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8003b78:	9901      	ldr	r1, [sp, #4]
 8003b7a:	f010 0f04 	tst.w	r0, #4
 8003b7e:	d11b      	bne.n	8003bb8 <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b80:	f020 0001 	bic.w	r0, r0, #1
 8003b84:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b88:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003b8c:	4658      	mov	r0, fp
 8003b8e:	4798      	blx	r3
}
 8003b90:	e73f      	b.n	8003a12 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b92:	4553      	cmp	r3, sl
 8003b94:	d902      	bls.n	8003b9c <prvTimerTask+0x1e4>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	f43f af73 	beq.w	8003a82 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b9c:	6830      	ldr	r0, [r6, #0]
 8003b9e:	1d39      	adds	r1, r7, #4
 8003ba0:	f7fd fe8c 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003ba4:	e735      	b.n	8003a12 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ba6:	6830      	ldr	r0, [r6, #0]
 8003ba8:	1d39      	adds	r1, r7, #4
 8003baa:	f7fd fe87 	bl	80018bc <vListInsert>
 8003bae:	e730      	b.n	8003a12 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	f000 fb39 	bl	8004228 <vPortFree>
 8003bb6:	e72c      	b.n	8003a12 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bb8:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003bbc:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003bc0:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8003bc2:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003bc4:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003bc8:	d203      	bcs.n	8003bd2 <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003bca:	6830      	ldr	r0, [r6, #0]
 8003bcc:	f7fd fe76 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003bd0:	e7da      	b.n	8003b88 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bd2:	ebaa 0307 	sub.w	r3, sl, r7
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d819      	bhi.n	8003c0e <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	b173      	cbz	r3, 8003bfc <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 8003bde:	2300      	movs	r3, #0
 8003be0:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003be2:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003be4:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003be8:	f7ff fd90 	bl	800370c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bec:	2300      	movs	r3, #0
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	a906      	add	r1, sp, #24
 8003bf4:	f7fd ff80 	bl	8001af8 <xQueueGenericSend>
			configASSERT( xResult );
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d1c5      	bne.n	8003b88 <prvTimerTask+0x1d0>
 8003bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	e7fe      	b.n	8003c0c <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c0e:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvTimerTask+0x280>)
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	f7fd fe53 	bl	80018bc <vListInsert>
	return xProcessTimerNow;
 8003c16:	e7b7      	b.n	8003b88 <prvTimerTask+0x1d0>
 8003c18:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003c28:	e7fe      	b.n	8003c28 <prvTimerTask+0x270>
 8003c2a:	bf00      	nop
 8003c2c:	20001134 	.word	0x20001134
 8003c30:	20001204 	.word	0x20001204
 8003c34:	20001258 	.word	0x20001258
 8003c38:	20001138 	.word	0x20001138

08003c3c <xTimerCreateTimerTask>:
{
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003c3e:	4c23      	ldr	r4, [pc, #140]	; (8003ccc <xTimerCreateTimerTask+0x90>)
{
 8003c40:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8003c42:	f000 f8d7 	bl	8003df4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003c46:	6825      	ldr	r5, [r4, #0]
 8003c48:	b335      	cbz	r5, 8003c98 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c4a:	f000 f8f5 	bl	8003e38 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	b1cb      	cbz	r3, 8003c86 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003c52:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c54:	aa07      	add	r2, sp, #28
 8003c56:	a906      	add	r1, sp, #24
 8003c58:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003c5a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003c5e:	f7fd fd13 	bl	8001688 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003c62:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8003c66:	2302      	movs	r3, #2
 8003c68:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	9a07      	ldr	r2, [sp, #28]
 8003c70:	4917      	ldr	r1, [pc, #92]	; (8003cd0 <xTimerCreateTimerTask+0x94>)
 8003c72:	4818      	ldr	r0, [pc, #96]	; (8003cd4 <xTimerCreateTimerTask+0x98>)
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7ff f879 	bl	8002d6c <xTaskCreateStatic>
 8003c7a:	4b17      	ldr	r3, [pc, #92]	; (8003cd8 <xTimerCreateTimerTask+0x9c>)
 8003c7c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003c7e:	b110      	cbz	r0, 8003c86 <xTimerCreateTimerTask+0x4a>
}
 8003c80:	2001      	movs	r0, #1
 8003c82:	b009      	add	sp, #36	; 0x24
 8003c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003c96:	e7fe      	b.n	8003c96 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8003c98:	4f10      	ldr	r7, [pc, #64]	; (8003cdc <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8003c9a:	4e11      	ldr	r6, [pc, #68]	; (8003ce0 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	f7fd fded 	bl	800187c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	f7fd fdea 	bl	800187c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003ca8:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003caa:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8003cac:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cb0:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8003cb2:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cb4:	2110      	movs	r1, #16
 8003cb6:	4a0e      	ldr	r2, [pc, #56]	; (8003cf0 <xTimerCreateTimerTask+0xb4>)
 8003cb8:	200a      	movs	r0, #10
 8003cba:	f7fd fe67 	bl	800198c <xQueueGenericCreateStatic>
 8003cbe:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	d0c2      	beq.n	8003c4a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cc4:	490b      	ldr	r1, [pc, #44]	; (8003cf4 <xTimerCreateTimerTask+0xb8>)
 8003cc6:	f7fe fd0b 	bl	80026e0 <vQueueAddToRegistry>
 8003cca:	e7be      	b.n	8003c4a <xTimerCreateTimerTask+0xe>
 8003ccc:	20001258 	.word	0x20001258
 8003cd0:	08010aa4 	.word	0x08010aa4
 8003cd4:	080039b9 	.word	0x080039b9
 8003cd8:	2000125c 	.word	0x2000125c
 8003cdc:	200011dc 	.word	0x200011dc
 8003ce0:	200011f0 	.word	0x200011f0
 8003ce4:	20001134 	.word	0x20001134
 8003ce8:	20001138 	.word	0x20001138
 8003cec:	20001208 	.word	0x20001208
 8003cf0:	2000113c 	.word	0x2000113c
 8003cf4:	08010a9c 	.word	0x08010a9c

08003cf8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003cf8:	b530      	push	{r4, r5, lr}
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003cfe:	461a      	mov	r2, r3
 8003d00:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8003d02:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8003d04:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d06:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8003d08:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003d0a:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003d12:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003d14:	f7fe f8a6 	bl	8001e64 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8003d18:	b005      	add	sp, #20
 8003d1a:	bd30      	pop	{r4, r5, pc}
 8003d1c:	20001258 	.word	0x20001258

08003d20 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d20:	4808      	ldr	r0, [pc, #32]	; (8003d44 <prvPortStartFirstTask+0x24>)
 8003d22:	6800      	ldr	r0, [r0, #0]
 8003d24:	6800      	ldr	r0, [r0, #0]
 8003d26:	f380 8808 	msr	MSP, r0
 8003d2a:	f04f 0000 	mov.w	r0, #0
 8003d2e:	f380 8814 	msr	CONTROL, r0
 8003d32:	b662      	cpsie	i
 8003d34:	b661      	cpsie	f
 8003d36:	f3bf 8f4f 	dsb	sy
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	df00      	svc	0
 8003d40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d42:	0000      	.short	0x0000
 8003d44:	e000ed08 	.word	0xe000ed08

08003d48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d58 <vPortEnableVFP+0x10>
 8003d4c:	6801      	ldr	r1, [r0, #0]
 8003d4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d52:	6001      	str	r1, [r0, #0]
 8003d54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d56:	0000      	.short	0x0000
 8003d58:	e000ed88 	.word	0xe000ed88

08003d5c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	; (8003d98 <prvTaskExitError+0x3c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
{
 8003d60:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003d62:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8003d64:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8003d66:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8003d68:	d008      	beq.n	8003d7c <prvTaskExitError+0x20>
 8003d6a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	e7fe      	b.n	8003d7a <prvTaskExitError+0x1e>
 8003d7c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003d8c:	9b01      	ldr	r3, [sp, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0fc      	beq.n	8003d8c <prvTaskExitError+0x30>
}
 8003d92:	b002      	add	sp, #8
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	20000008 	.word	0x20000008

08003d9c <pxPortInitialiseStack>:
{
 8003d9c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003da2:	4c07      	ldr	r4, [pc, #28]	; (8003dc0 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003da4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003da8:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003dac:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003db0:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003db4:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8003db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003dbc:	3844      	subs	r0, #68	; 0x44
 8003dbe:	4770      	bx	lr
 8003dc0:	08003d5d 	.word	0x08003d5d
	...

08003dd0 <SVC_Handler>:
	__asm volatile (
 8003dd0:	4b07      	ldr	r3, [pc, #28]	; (8003df0 <pxCurrentTCBConst2>)
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	6808      	ldr	r0, [r1, #0]
 8003dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dda:	f380 8809 	msr	PSP, r0
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f380 8811 	msr	BASEPRI, r0
 8003dea:	4770      	bx	lr
 8003dec:	f3af 8000 	nop.w

08003df0 <pxCurrentTCBConst2>:
 8003df0:	20000c38 	.word	0x20000c38

08003df4 <vPortEnterCritical>:
 8003df4:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003e04:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <vPortEnterCritical+0x40>)
 8003e06:	6813      	ldr	r3, [r2, #0]
 8003e08:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003e0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003e0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003e0e:	d000      	beq.n	8003e12 <vPortEnterCritical+0x1e>
}
 8003e10:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e12:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e16:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f7      	beq.n	8003e10 <vPortEnterCritical+0x1c>
 8003e20:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	e7fe      	b.n	8003e30 <vPortEnterCritical+0x3c>
 8003e32:	bf00      	nop
 8003e34:	20000008 	.word	0x20000008

08003e38 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003e38:	4a08      	ldr	r2, [pc, #32]	; (8003e5c <vPortExitCritical+0x24>)
 8003e3a:	6813      	ldr	r3, [r2, #0]
 8003e3c:	b943      	cbnz	r3, 8003e50 <vPortExitCritical+0x18>
 8003e3e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	e7fe      	b.n	8003e4e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003e50:	3b01      	subs	r3, #1
 8003e52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e54:	b90b      	cbnz	r3, 8003e5a <vPortExitCritical+0x22>
	__asm volatile
 8003e56:	f383 8811 	msr	BASEPRI, r3
}
 8003e5a:	4770      	bx	lr
 8003e5c:	20000008 	.word	0x20000008

08003e60 <PendSV_Handler>:
	__asm volatile
 8003e60:	f3ef 8009 	mrs	r0, PSP
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	4b15      	ldr	r3, [pc, #84]	; (8003ec0 <pxCurrentTCBConst>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	f01e 0f10 	tst.w	lr, #16
 8003e70:	bf08      	it	eq
 8003e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e7a:	6010      	str	r0, [r2, #0]
 8003e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e80:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003e84:	f380 8811 	msr	BASEPRI, r0
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f7ff fa48 	bl	8003324 <vTaskSwitchContext>
 8003e94:	f04f 0000 	mov.w	r0, #0
 8003e98:	f380 8811 	msr	BASEPRI, r0
 8003e9c:	bc09      	pop	{r0, r3}
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	6808      	ldr	r0, [r1, #0]
 8003ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ea6:	f01e 0f10 	tst.w	lr, #16
 8003eaa:	bf08      	it	eq
 8003eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003eb0:	f380 8809 	msr	PSP, r0
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	f3af 8000 	nop.w

08003ec0 <pxCurrentTCBConst>:
 8003ec0:	20000c38 	.word	0x20000c38

08003ec4 <xPortSysTickHandler>:
{
 8003ec4:	b508      	push	{r3, lr}
	__asm volatile
 8003ec6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003eca:	f383 8811 	msr	BASEPRI, r3
 8003ece:	f3bf 8f6f 	isb	sy
 8003ed2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003ed6:	f7ff fa15 	bl	8003304 <xTaskIncrementTick>
 8003eda:	b128      	cbz	r0, 8003ee8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003edc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f383 8811 	msr	BASEPRI, r3
}
 8003eee:	bd08      	pop	{r3, pc}

08003ef0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003ef4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ef6:	4906      	ldr	r1, [pc, #24]	; (8003f10 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003efa:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003efc:	680b      	ldr	r3, [r1, #0]
 8003efe:	4805      	ldr	r0, [pc, #20]	; (8003f14 <vPortSetupTimerInterrupt+0x24>)
 8003f00:	fba0 0303 	umull	r0, r3, r0, r3
 8003f04:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f06:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f0c:	6111      	str	r1, [r2, #16]
}
 8003f0e:	4770      	bx	lr
 8003f10:	20000000 	.word	0x20000000
 8003f14:	10624dd3 	.word	0x10624dd3

08003f18 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f1c:	4a48      	ldr	r2, [pc, #288]	; (8004040 <xPortStartScheduler+0x128>)
 8003f1e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8003f22:	4291      	cmp	r1, r2
 8003f24:	d041      	beq.n	8003faa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f26:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003f2a:	4b46      	ldr	r3, [pc, #280]	; (8004044 <xPortStartScheduler+0x12c>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d033      	beq.n	8003f98 <xPortStartScheduler+0x80>
{
 8003f30:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f32:	4b45      	ldr	r3, [pc, #276]	; (8004048 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f34:	4c45      	ldr	r4, [pc, #276]	; (800404c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f36:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f38:	4845      	ldr	r0, [pc, #276]	; (8004050 <xPortStartScheduler+0x138>)
{
 8003f3a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f3c:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f50:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f58:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f5a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f5c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f60:	bf48      	it	mi
 8003f62:	2206      	movmi	r2, #6
 8003f64:	d50f      	bpl.n	8003f86 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	4611      	mov	r1, r2
 8003f7a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003f7e:	d4f2      	bmi.n	8003f66 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f80:	2903      	cmp	r1, #3
 8003f82:	d01b      	beq.n	8003fbc <xPortStartScheduler+0xa4>
 8003f84:	6001      	str	r1, [r0, #0]
	__asm volatile
 8003f86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	e7fe      	b.n	8003f96 <xPortStartScheduler+0x7e>
 8003f98:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fa8:	e7fe      	b.n	8003fa8 <xPortStartScheduler+0x90>
 8003faa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003fba:	e7fe      	b.n	8003fba <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fbc:	9b02      	ldr	r3, [sp, #8]
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8003fc0:	4d24      	ldr	r5, [pc, #144]	; (8004054 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fc2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fc6:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fca:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fcc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fd0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fdc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fe4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8003fe8:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8003fea:	f7ff ff81 	bl	8003ef0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003fee:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8003ff0:	f7ff feaa 	bl	8003d48 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ff4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003ff8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ffc:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8004000:	f7ff fe8e 	bl	8003d20 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004004:	f7ff f98e 	bl	8003324 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8004008:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 800400a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800400c:	3301      	adds	r3, #1
 800400e:	d008      	beq.n	8004022 <xPortStartScheduler+0x10a>
 8004010:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	e7fe      	b.n	8004020 <xPortStartScheduler+0x108>
 8004022:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004032:	9b03      	ldr	r3, [sp, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0fc      	beq.n	8004032 <xPortStartScheduler+0x11a>
}
 8004038:	2000      	movs	r0, #0
 800403a:	b004      	add	sp, #16
 800403c:	bd70      	pop	{r4, r5, r6, pc}
 800403e:	bf00      	nop
 8004040:	410fc271 	.word	0x410fc271
 8004044:	410fc270 	.word	0x410fc270
 8004048:	e000e400 	.word	0xe000e400
 800404c:	20001260 	.word	0x20001260
 8004050:	20001264 	.word	0x20001264
 8004054:	20000008 	.word	0x20000008

08004058 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004058:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800405c:	2b0f      	cmp	r3, #15
 800405e:	d90e      	bls.n	800407e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004060:	4911      	ldr	r1, [pc, #68]	; (80040a8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004062:	4a12      	ldr	r2, [pc, #72]	; (80040ac <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004064:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d908      	bls.n	800407e <vPortValidateInterruptPriority+0x26>
 800406c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	e7fe      	b.n	800407c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800407e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004082:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <vPortValidateInterruptPriority+0x58>)
 8004084:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800408e:	4293      	cmp	r3, r2
 8004090:	d908      	bls.n	80040a4 <vPortValidateInterruptPriority+0x4c>
 8004092:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	e7fe      	b.n	80040a2 <vPortValidateInterruptPriority+0x4a>
	}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000e3f0 	.word	0xe000e3f0
 80040ac:	20001260 	.word	0x20001260
 80040b0:	20001264 	.word	0x20001264

080040b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040b8:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80040ba:	f7ff f905 	bl	80032c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040be:	4b53      	ldr	r3, [pc, #332]	; (800420c <pvPortMalloc+0x158>)
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	2d00      	cmp	r5, #0
 80040c4:	d070      	beq.n	80041a8 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040c6:	4b52      	ldr	r3, [pc, #328]	; (8004210 <pvPortMalloc+0x15c>)
 80040c8:	681f      	ldr	r7, [r3, #0]
 80040ca:	423e      	tst	r6, r7
 80040cc:	d12e      	bne.n	800412c <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040ce:	b36e      	cbz	r6, 800412c <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 80040d0:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040d4:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040d6:	bf1c      	itt	ne
 80040d8:	f024 0407 	bicne.w	r4, r4, #7
 80040dc:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80040de:	b32c      	cbz	r4, 800412c <pvPortMalloc+0x78>
 80040e0:	f8df c140 	ldr.w	ip, [pc, #320]	; 8004224 <pvPortMalloc+0x170>
 80040e4:	f8dc 6000 	ldr.w	r6, [ip]
 80040e8:	42a6      	cmp	r6, r4
 80040ea:	d31f      	bcc.n	800412c <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 80040ec:	4849      	ldr	r0, [pc, #292]	; (8004214 <pvPortMalloc+0x160>)
 80040ee:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040f0:	e003      	b.n	80040fa <pvPortMalloc+0x46>
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	b122      	cbz	r2, 8004100 <pvPortMalloc+0x4c>
 80040f6:	4618      	mov	r0, r3
 80040f8:	4613      	mov	r3, r2
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	42a1      	cmp	r1, r4
 80040fe:	d3f8      	bcc.n	80040f2 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004100:	42ab      	cmp	r3, r5
 8004102:	d013      	beq.n	800412c <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004104:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004106:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004108:	f858 eb08 	ldr.w	lr, [r8], #8
 800410c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004110:	2a10      	cmp	r2, #16
 8004112:	d92b      	bls.n	800416c <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004114:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	0748      	lsls	r0, r1, #29
 8004118:	d011      	beq.n	800413e <pvPortMalloc+0x8a>
 800411a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	e7fe      	b.n	800412a <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800412c:	f7ff f8d4 	bl	80032d8 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8004130:	f04f 0800 	mov.w	r8, #0
 8004134:	f006 fdae 	bl	800ac94 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8004138:	4640      	mov	r0, r8
 800413a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800413e:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004140:	4a34      	ldr	r2, [pc, #208]	; (8004214 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 8004142:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004144:	4614      	mov	r4, r2
 8004146:	6812      	ldr	r2, [r2, #0]
 8004148:	4291      	cmp	r1, r2
 800414a:	d8fb      	bhi.n	8004144 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800414c:	6860      	ldr	r0, [r4, #4]
 800414e:	eb04 0e00 	add.w	lr, r4, r0
 8004152:	4571      	cmp	r1, lr
 8004154:	d04a      	beq.n	80041ec <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004156:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800415a:	eb01 000e 	add.w	r0, r1, lr
 800415e:	4282      	cmp	r2, r0
 8004160:	d04b      	beq.n	80041fa <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004162:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004164:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004166:	bf18      	it	ne
 8004168:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800416a:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800416c:	482a      	ldr	r0, [pc, #168]	; (8004218 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 800416e:	4a2b      	ldr	r2, [pc, #172]	; (800421c <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004170:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004172:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004174:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004176:	bf38      	it	cc
 8004178:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800417a:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 800417c:	2000      	movs	r0, #0
 800417e:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8004182:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004184:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 8004188:	3301      	adds	r3, #1
 800418a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800418c:	f7ff f8a4 	bl	80032d8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004190:	f018 0f07 	tst.w	r8, #7
 8004194:	d0d0      	beq.n	8004138 <pvPortMalloc+0x84>
 8004196:	f04f 0340 	mov.w	r3, #64	; 0x40
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	e7fe      	b.n	80041a6 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 80041a8:	491d      	ldr	r1, [pc, #116]	; (8004220 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041aa:	4c19      	ldr	r4, [pc, #100]	; (8004210 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80041ac:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80041ae:	bf14      	ite	ne
 80041b0:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80041b2:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041b4:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 80041b8:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041bc:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80041c0:	bf18      	it	ne
 80041c2:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041c6:	4914      	ldr	r1, [pc, #80]	; (8004218 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 80041c8:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80041ca:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80041cc:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041ce:	4a15      	ldr	r2, [pc, #84]	; (8004224 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d0:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041d2:	4910      	ldr	r1, [pc, #64]	; (8004214 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80041d4:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041d6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 80041da:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80041dc:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80041de:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80041e0:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80041e2:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80041e6:	e9c0 5300 	strd	r5, r3, [r0]
}
 80041ea:	e76e      	b.n	80040ca <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80041ec:	6849      	ldr	r1, [r1, #4]
 80041ee:	eb00 0e01 	add.w	lr, r0, r1
 80041f2:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 80041f6:	4621      	mov	r1, r4
 80041f8:	e7af      	b.n	800415a <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80041fa:	42aa      	cmp	r2, r5
 80041fc:	d0b1      	beq.n	8004162 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80041fe:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004200:	6812      	ldr	r2, [r2, #0]
 8004202:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004204:	4470      	add	r0, lr
 8004206:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004208:	e7ac      	b.n	8004164 <pvPortMalloc+0xb0>
 800420a:	bf00      	nop
 800420c:	20001268 	.word	0x20001268
 8004210:	2000b26c 	.word	0x2000b26c
 8004214:	2000b280 	.word	0x2000b280
 8004218:	2000b274 	.word	0x2000b274
 800421c:	2000b278 	.word	0x2000b278
 8004220:	2000126c 	.word	0x2000126c
 8004224:	2000b270 	.word	0x2000b270

08004228 <vPortFree>:
	if( pv != NULL )
 8004228:	b1d0      	cbz	r0, 8004260 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800422a:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <vPortFree+0xb0>)
 800422c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	4213      	tst	r3, r2
 8004234:	d00b      	beq.n	800424e <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004236:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800423a:	b191      	cbz	r1, 8004262 <vPortFree+0x3a>
 800423c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	e7fe      	b.n	800424c <vPortFree+0x24>
 800424e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800425e:	e7fe      	b.n	800425e <vPortFree+0x36>
 8004260:	4770      	bx	lr
{
 8004262:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004264:	ea23 0302 	bic.w	r3, r3, r2
{
 8004268:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800426a:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 800426e:	4c1b      	ldr	r4, [pc, #108]	; (80042dc <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004270:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8004272:	f7ff f829 	bl	80032c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004276:	9801      	ldr	r0, [sp, #4]
 8004278:	6822      	ldr	r2, [r4, #0]
 800427a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004280:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8004282:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004284:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004286:	461a      	mov	r2, r3
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4298      	cmp	r0, r3
 800428c:	d8fb      	bhi.n	8004286 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800428e:	6854      	ldr	r4, [r2, #4]
 8004290:	eb02 0e04 	add.w	lr, r2, r4
 8004294:	4570      	cmp	r0, lr
 8004296:	d01a      	beq.n	80042ce <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004298:	eb00 0c01 	add.w	ip, r0, r1
 800429c:	4563      	cmp	r3, ip
 800429e:	d00c      	beq.n	80042ba <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80042a0:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 80042a2:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80042a4:	bf18      	it	ne
 80042a6:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 80042a8:	4a0e      	ldr	r2, [pc, #56]	; (80042e4 <vPortFree+0xbc>)
 80042aa:	6813      	ldr	r3, [r2, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	6013      	str	r3, [r2, #0]
}
 80042b0:	b002      	add	sp, #8
 80042b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80042b6:	f7ff b80f 	b.w	80032d8 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80042ba:	4c0b      	ldr	r4, [pc, #44]	; (80042e8 <vPortFree+0xc0>)
 80042bc:	6824      	ldr	r4, [r4, #0]
 80042be:	42a3      	cmp	r3, r4
 80042c0:	d0ee      	beq.n	80042a0 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042c2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80042c6:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80042c8:	e9c0 3100 	strd	r3, r1, [r0]
 80042cc:	e7e9      	b.n	80042a2 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80042ce:	4421      	add	r1, r4
 80042d0:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80042d2:	4610      	mov	r0, r2
 80042d4:	e7e0      	b.n	8004298 <vPortFree+0x70>
 80042d6:	bf00      	nop
 80042d8:	2000b26c 	.word	0x2000b26c
 80042dc:	2000b270 	.word	0x2000b270
 80042e0:	2000b280 	.word	0x2000b280
 80042e4:	2000b27c 	.word	0x2000b27c
 80042e8:	20001268 	.word	0x20001268

080042ec <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 80042ec:	b199      	cbz	r1, 8004316 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 80042ee:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	4d0a      	ldr	r5, [pc, #40]	; (800431c <cal_crc16+0x30>)
 80042f4:	4c0a      	ldr	r4, [pc, #40]	; (8004320 <cal_crc16+0x34>)
 80042f6:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 80042fa:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 80042fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004300:	4053      	eors	r3, r2
    while(length--) {
 8004302:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8004304:	5cea      	ldrb	r2, [r5, r3]
 8004306:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 800430a:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 800430c:	d1f6      	bne.n	80042fc <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 800430e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8004312:	bc30      	pop	{r4, r5}
 8004314:	4770      	bx	lr
    while(length--) {
 8004316:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 800431a:	4770      	bx	lr
 800431c:	08010aac 	.word	0x08010aac
 8004320:	08010bac 	.word	0x08010bac

08004324 <_ZL15set_response_okm12lora_event_t>:
	}

	return false;
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8004324:	b530      	push	{r4, r5, lr}
 8004326:	460a      	mov	r2, r1
 8004328:	b087      	sub	sp, #28
	uint16_t crc = 0;
	char *temp = NULL;
 800432a:	2300      	movs	r3, #0
	char *response_to_device = NULL;
	char *cmd_str = cmd_to_str(cmd, command_string);
 800432c:	491b      	ldr	r1, [pc, #108]	; (800439c <_ZL15set_response_okm12lora_event_t+0x78>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 800432e:	4604      	mov	r4, r0
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004330:	4610      	mov	r0, r2
	char *response_to_device = NULL;
 8004332:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004336:	f000 fee5 	bl	8005104 <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 800433a:	4623      	mov	r3, r4
	char *cmd_str = cmd_to_str(cmd, command_string);
 800433c:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 800433e:	4918      	ldr	r1, [pc, #96]	; (80043a0 <_ZL15set_response_okm12lora_event_t+0x7c>)
 8004340:	9003      	str	r0, [sp, #12]
 8004342:	a804      	add	r0, sp, #16
 8004344:	f007 ff9c 	bl	800c280 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004348:	9d04      	ldr	r5, [sp, #16]
 800434a:	4628      	mov	r0, r5
 800434c:	f7fb ff5a 	bl	8000204 <strlen>
 8004350:	b281      	uxth	r1, r0
 8004352:	4628      	mov	r0, r5
 8004354:	f7ff ffca 	bl	80042ec <cal_crc16>
	if(temp != NULL) free(temp);
 8004358:	9b04      	ldr	r3, [sp, #16]
 800435a:	9a03      	ldr	r2, [sp, #12]
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 800435c:	4605      	mov	r5, r0
	if(temp != NULL) free(temp);
 800435e:	b11b      	cbz	r3, 8004368 <_ZL15set_response_okm12lora_event_t+0x44>
 8004360:	4618      	mov	r0, r3
 8004362:	f007 ffe9 	bl	800c338 <free>
 8004366:	9a03      	ldr	r2, [sp, #12]

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, (unsigned int)addr, crc);
 8004368:	490e      	ldr	r1, [pc, #56]	; (80043a4 <_ZL15set_response_okm12lora_event_t+0x80>)
 800436a:	9500      	str	r5, [sp, #0]
 800436c:	4623      	mov	r3, r4
 800436e:	a805      	add	r0, sp, #20
 8004370:	f007 ff86 	bl	800c280 <asiprintf>

	if(xQueueSend(q_response, &response_to_device, 5) == pdFALSE){
 8004374:	4a0c      	ldr	r2, [pc, #48]	; (80043a8 <_ZL15set_response_okm12lora_event_t+0x84>)
 8004376:	2300      	movs	r3, #0
 8004378:	6810      	ldr	r0, [r2, #0]
 800437a:	a905      	add	r1, sp, #20
 800437c:	2205      	movs	r2, #5
 800437e:	f7fd fbbb 	bl	8001af8 <xQueueGenericSend>
 8004382:	b108      	cbz	r0, 8004388 <_ZL15set_response_okm12lora_event_t+0x64>
		loraif_debug((char *)"Can't send to q_response", __LINE__, __FUNCTION__);
	}
}
 8004384:	b007      	add	sp, #28
 8004386:	bd30      	pop	{r4, r5, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004388:	4b08      	ldr	r3, [pc, #32]	; (80043ac <_ZL15set_response_okm12lora_event_t+0x88>)
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	4a08      	ldr	r2, [pc, #32]	; (80043b0 <_ZL15set_response_okm12lora_event_t+0x8c>)
 800438e:	4909      	ldr	r1, [pc, #36]	; (80043b4 <_ZL15set_response_okm12lora_event_t+0x90>)
 8004390:	4809      	ldr	r0, [pc, #36]	; (80043b8 <_ZL15set_response_okm12lora_event_t+0x94>)
 8004392:	237d      	movs	r3, #125	; 0x7d
 8004394:	f006 fd4a 	bl	800ae2c <LOG_DEBUG>
}
 8004398:	b007      	add	sp, #28
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	2000000c 	.word	0x2000000c
 80043a0:	08010cac 	.word	0x08010cac
 80043a4:	08010ccc 	.word	0x08010ccc
 80043a8:	2000b29c 	.word	0x2000b29c
 80043ac:	08010d38 	.word	0x08010d38
 80043b0:	08010cf8 	.word	0x08010cf8
 80043b4:	08010d14 	.word	0x08010d14
 80043b8:	08010d30 	.word	0x08010d30

080043bc <_ZL15loraif_transmitPc.part.0>:
static bool loraif_transmit(char *str){
 80043bc:	b538      	push	{r3, r4, r5, lr}
		loraif->setSyncWord(_send_syncword);
 80043be:	4c14      	ldr	r4, [pc, #80]	; (8004410 <_ZL15loraif_transmitPc.part.0+0x54>)
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <_ZL15loraif_transmitPc.part.0+0x58>)
static bool loraif_transmit(char *str){
 80043c2:	4605      	mov	r5, r0
		loraif->setSyncWord(_send_syncword);
 80043c4:	7819      	ldrb	r1, [r3, #0]
 80043c6:	6820      	ldr	r0, [r4, #0]
 80043c8:	f001 fd30 	bl	8005e2c <_ZN6sx127x11setSyncWordEh>
		loraif->beginPacket();
 80043cc:	2100      	movs	r1, #0
 80043ce:	6820      	ldr	r0, [r4, #0]
 80043d0:	f001 f944 	bl	800565c <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7fb ff15 	bl	8000204 <strlen>
 80043da:	4629      	mov	r1, r5
 80043dc:	4602      	mov	r2, r0
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	f001 fb6c 	bl	8005abc <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	2100      	movs	r1, #0
 80043e8:	f001 fa78 	bl	80058dc <_ZN6sx127x9endPacketEb>
		loraif->setSyncWord(_recv_syncword);
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <_ZL15loraif_transmitPc.part.0+0x5c>)
 80043ee:	6820      	ldr	r0, [r4, #0]
 80043f0:	7819      	ldrb	r1, [r3, #0]
 80043f2:	f001 fd1b 	bl	8005e2c <_ZN6sx127x11setSyncWordEh>
		loraif->receive_it(0);
 80043f6:	6820      	ldr	r0, [r4, #0]
 80043f8:	2100      	movs	r1, #0
 80043fa:	f001 fc33 	bl	8005c64 <_ZN6sx127x10receive_itEh>
		xSemaphoreGive(s_lora_transfer);
 80043fe:	4a07      	ldr	r2, [pc, #28]	; (800441c <_ZL15loraif_transmitPc.part.0+0x60>)
 8004400:	2300      	movs	r3, #0
 8004402:	6810      	ldr	r0, [r2, #0]
 8004404:	4619      	mov	r1, r3
 8004406:	461a      	mov	r2, r3
 8004408:	f7fd fb76 	bl	8001af8 <xQueueGenericSend>
}
 800440c:	2001      	movs	r0, #1
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	2000b2b8 	.word	0x2000b2b8
 8004414:	2000b2a9 	.word	0x2000b2a9
 8004418:	2000b2a8 	.word	0x2000b2a8
 800441c:	2000b2b4 	.word	0x2000b2b4

08004420 <loraif_init>:


void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 8004420:	b538      	push	{r3, r4, r5, lr}
	loraif = lora;
	resp_timeout = timeout;
	max_not_resp = max_not_response;
	_send_syncword = send_syncword;
	_recv_syncword = recv_syncword;
 8004422:	4d18      	ldr	r5, [pc, #96]	; (8004484 <loraif_init+0x64>)
void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 8004424:	f89d c010 	ldrb.w	ip, [sp, #16]
	_recv_syncword = recv_syncword;
 8004428:	702a      	strb	r2, [r5, #0]
	resp_timeout = timeout;
 800442a:	4a17      	ldr	r2, [pc, #92]	; (8004488 <loraif_init+0x68>)
	loraif = lora;
 800442c:	4c17      	ldr	r4, [pc, #92]	; (800448c <loraif_init+0x6c>)
	resp_timeout = timeout;
 800442e:	6013      	str	r3, [r2, #0]
	max_not_resp = max_not_response;
 8004430:	4b17      	ldr	r3, [pc, #92]	; (8004490 <loraif_init+0x70>)
	loraif = lora;
 8004432:	6020      	str	r0, [r4, #0]
	max_not_resp = max_not_response;
 8004434:	f883 c000 	strb.w	ip, [r3]
	_send_syncword = send_syncword;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <loraif_init+0x74>)

	q_wait_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 800443a:	2200      	movs	r2, #0
	_send_syncword = send_syncword;
 800443c:	7019      	strb	r1, [r3, #0]
	q_wait_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 800443e:	201e      	movs	r0, #30
 8004440:	2104      	movs	r1, #4
 8004442:	f7fd fb17 	bl	8001a74 <xQueueGenericCreate>
 8004446:	4b14      	ldr	r3, [pc, #80]	; (8004498 <loraif_init+0x78>)
	q_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8004448:	2200      	movs	r2, #0
	q_wait_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 800444a:	6018      	str	r0, [r3, #0]
	q_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 800444c:	2104      	movs	r1, #4
 800444e:	201e      	movs	r0, #30
 8004450:	f7fd fb10 	bl	8001a74 <xQueueGenericCreate>
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <loraif_init+0x7c>)

	s_lora_transfer = xSemaphoreCreateBinary();
 8004456:	2203      	movs	r2, #3
	q_response = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8004458:	6018      	str	r0, [r3, #0]
	s_lora_transfer = xSemaphoreCreateBinary();
 800445a:	2100      	movs	r1, #0
 800445c:	2001      	movs	r0, #1
 800445e:	f7fd fb09 	bl	8001a74 <xQueueGenericCreate>
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <loraif_init+0x80>)
 8004464:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(s_lora_transfer);
 8004466:	2300      	movs	r3, #0
 8004468:	4619      	mov	r1, r3
 800446a:	461a      	mov	r2, r3
 800446c:	f7fd fb44 	bl	8001af8 <xQueueGenericSend>

	loraif->setSyncWord(_recv_syncword);
 8004470:	7829      	ldrb	r1, [r5, #0]
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	f001 fcda 	bl	8005e2c <_ZN6sx127x11setSyncWordEh>
	loraif->receive_it(0);
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	2100      	movs	r1, #0
}
 800447c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	loraif->receive_it(0);
 8004480:	f001 bbf0 	b.w	8005c64 <_ZN6sx127x10receive_itEh>
 8004484:	2000b2a8 	.word	0x2000b2a8
 8004488:	2000b2a4 	.word	0x2000b2a4
 800448c:	2000b2b8 	.word	0x2000b2b8
 8004490:	2000b2a0 	.word	0x2000b2a0
 8004494:	2000b2a9 	.word	0x2000b2a9
 8004498:	2000b2b0 	.word	0x2000b2b0
 800449c:	2000b29c 	.word	0x2000b29c
 80044a0:	2000b2b4 	.word	0x2000b2b4

080044a4 <loraif_register_event_handler>:

void loraif_register_event_handler(void (*peventhandler)(lora_event_t event, uint32_t device_address, char *data)){
	fpeventhandler = peventhandler;
 80044a4:	4b01      	ldr	r3, [pc, #4]	; (80044ac <loraif_register_event_handler+0x8>)
 80044a6:	6018      	str	r0, [r3, #0]
}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000b2ac 	.word	0x2000b2ac

080044b0 <loraif_check_receive_data_crc>:

bool loraif_check_receive_data_crc(char *data){
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	b086      	sub	sp, #24
	char *src_cpy = data;
	char *crc_start;
	uint16_t crc, icrc, len;
	pkt_t pkt;
	pkt_err_t err;
	pkt_json_t json;
 80044b4:	2300      	movs	r3, #0
	pkt_t pkt;
 80044b6:	2500      	movs	r5, #0
 80044b8:	2400      	movs	r4, #0

	crc_start = strstr(src_cpy, "\"crc\"");
 80044ba:	4919      	ldr	r1, [pc, #100]	; (8004520 <loraif_check_receive_data_crc+0x70>)
	pkt_json_t json;
 80044bc:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 80044be:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 80044c2:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_receive_data_crc(char *data){
 80044c6:	4605      	mov	r5, r0
	pkt_json_t json;
 80044c8:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 80044ca:	f008 fecf 	bl	800d26c <strstr>
	if(crc_start == NULL) return false;
 80044ce:	b128      	cbz	r0, 80044dc <loraif_check_receive_data_crc+0x2c>

	err = parse_packet(src_cpy, &pkt);
 80044d0:	4604      	mov	r4, r0
 80044d2:	4669      	mov	r1, sp
 80044d4:	4628      	mov	r0, r5
 80044d6:	f000 fd95 	bl	8005004 <parse_packet>
	if(err != PKT_ERR_OK) return false;
 80044da:	b110      	cbz	r0, 80044e2 <loraif_check_receive_data_crc+0x32>
	if(crc_start == NULL) return false;
 80044dc:	2000      	movs	r0, #0
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
	crc = cal_crc16((uint8_t *)src_cpy, len);
	if(crc != icrc) return false;

	return true;
}
 80044de:	b006      	add	sp, #24
 80044e0:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <loraif_check_receive_data_crc+0x74>)
 80044e4:	9801      	ldr	r0, [sp, #4]
 80044e6:	a903      	add	r1, sp, #12
 80044e8:	f000 fc62 	bl	8004db0 <json_get_object>
	if(err != PKT_ERR_OK) return false;
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d1f5      	bne.n	80044dc <loraif_check_receive_data_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 80044f0:	4601      	mov	r1, r0
 80044f2:	2210      	movs	r2, #16
 80044f4:	9805      	ldr	r0, [sp, #20]
 80044f6:	f009 fd7f 	bl	800dff8 <strtol>
 80044fa:	4606      	mov	r6, r0
	json_release_object(&json);
 80044fc:	a803      	add	r0, sp, #12
 80044fe:	f000 fd6f 	bl	8004fe0 <json_release_object>
	release_packet(&pkt);
 8004502:	4668      	mov	r0, sp
 8004504:	f000 fdd8 	bl	80050b8 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 8004508:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 800450a:	b289      	uxth	r1, r1
 800450c:	4628      	mov	r0, r5
 800450e:	f7ff feed 	bl	80042ec <cal_crc16>
	if(crc != icrc) return false;
 8004512:	b2b6      	uxth	r6, r6
 8004514:	1a30      	subs	r0, r6, r0
 8004516:	fab0 f080 	clz	r0, r0
 800451a:	0940      	lsrs	r0, r0, #5
}
 800451c:	b006      	add	sp, #24
 800451e:	bd70      	pop	{r4, r5, r6, pc}
 8004520:	08010d48 	.word	0x08010d48
 8004524:	08010d50 	.word	0x08010d50

08004528 <loraif_isvalid_address>:

bool loraif_isvalid_address(uint32_t address){
	return (address != LORAIF_INVALID_ADDRESS);
}
 8004528:	3800      	subs	r0, #0
 800452a:	bf18      	it	ne
 800452c:	2001      	movne	r0, #1
 800452e:	4770      	bx	lr

08004530 <loraif_send_request>:


void loraif_send_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 8004530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004534:	4d72      	ldr	r5, [pc, #456]	; (8004700 <loraif_send_request+0x1d0>)
 8004536:	461e      	mov	r6, r3
	if (loraif_device_list.empty()) {
 8004538:	682b      	ldr	r3, [r5, #0]
 800453a:	42ab      	cmp	r3, r5
void loraif_send_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 800453c:	b08b      	sub	sp, #44	; 0x2c
	if (loraif_device_list.empty()) {
 800453e:	f000 80b4 	beq.w	80046aa <loraif_send_request+0x17a>
		loraif_debug((char *)"Device list empty", __LINE__, __FUNCTION__);
		return;
	}

	uint16_t crc = 0;
	char *req_data = NULL, *temp = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	4604      	mov	r4, r0
 8004546:	4608      	mov	r0, r1

	char *cmd_str = cmd_to_str(cmd, command_string);
 8004548:	496e      	ldr	r1, [pc, #440]	; (8004704 <loraif_send_request+0x1d4>)
 800454a:	4617      	mov	r7, r2
	char *req_data = NULL, *temp = NULL;
 800454c:	e9cd 3306 	strd	r3, r3, [sp, #24]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004550:	f000 fdd8 	bl	8005104 <cmd_to_str>
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 8004554:	496c      	ldr	r1, [pc, #432]	; (8004708 <loraif_send_request+0x1d8>)
 8004556:	9005      	str	r0, [sp, #20]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8004558:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 800455a:	4623      	mov	r3, r4
 800455c:	e9cd 7600 	strd	r7, r6, [sp]
 8004560:	a807      	add	r0, sp, #28
 8004562:	f007 fe8d 	bl	800c280 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8004566:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800456a:	4640      	mov	r0, r8
 800456c:	f7fb fe4a 	bl	8000204 <strlen>
 8004570:	b281      	uxth	r1, r0
 8004572:	4640      	mov	r0, r8
 8004574:	f7ff feba 	bl	80042ec <cal_crc16>
 8004578:	4680      	mov	r8, r0
	if(temp != NULL) free(temp);
 800457a:	9807      	ldr	r0, [sp, #28]
 800457c:	9a05      	ldr	r2, [sp, #20]
 800457e:	b110      	cbz	r0, 8004586 <loraif_send_request+0x56>
 8004580:	f007 feda 	bl	800c338 <free>
 8004584:	9a05      	ldr	r2, [sp, #20]

	asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,\"crc\":0x%04x}", cmd_str, (unsigned int)dev_address, data, require_resp, crc);
 8004586:	4961      	ldr	r1, [pc, #388]	; (800470c <loraif_send_request+0x1dc>)
 8004588:	9700      	str	r7, [sp, #0]
 800458a:	e9cd 6801 	strd	r6, r8, [sp, #4]
 800458e:	4623      	mov	r3, r4
 8004590:	a806      	add	r0, sp, #24
 8004592:	f007 fe75 	bl	800c280 <asiprintf>
 8004596:	682a      	ldr	r2, [r5, #0]
	show_device_list();
}

loraif_dev_t *loraif_select_device(uint32_t device_address){

    if (loraif_device_list.empty()) {
 8004598:	42aa      	cmp	r2, r5
 800459a:	f000 809c 	beq.w	80046d6 <loraif_send_request+0x1a6>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == device_address) {
 800459e:	6891      	ldr	r1, [r2, #8]
 80045a0:	6809      	ldr	r1, [r1, #0]
 80045a2:	428c      	cmp	r4, r1
 80045a4:	d016      	beq.n	80045d4 <loraif_send_request+0xa4>
	_M_node = _M_node->_M_next;
 80045a6:	6812      	ldr	r2, [r2, #0]
    while (device != loraif_device_list.end()) {
 80045a8:	42aa      	cmp	r2, r5
 80045aa:	d1f8      	bne.n	800459e <loraif_send_request+0x6e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80045ac:	4b58      	ldr	r3, [pc, #352]	; (8004710 <loraif_send_request+0x1e0>)
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	4a58      	ldr	r2, [pc, #352]	; (8004714 <loraif_send_request+0x1e4>)
 80045b2:	4959      	ldr	r1, [pc, #356]	; (8004718 <loraif_send_request+0x1e8>)
 80045b4:	4859      	ldr	r0, [pc, #356]	; (800471c <loraif_send_request+0x1ec>)
 80045b6:	f240 13ef 	movw	r3, #495	; 0x1ef
 80045ba:	f006 fc37 	bl	800ae2c <LOG_DEBUG>
		if(req_data != NULL) free(req_data);
 80045be:	9806      	ldr	r0, [sp, #24]
 80045c0:	b108      	cbz	r0, 80045c6 <loraif_send_request+0x96>
 80045c2:	f007 feb9 	bl	800c338 <free>
		LOG_ERROR(TAG, "No device to request");
 80045c6:	4956      	ldr	r1, [pc, #344]	; (8004720 <loraif_send_request+0x1f0>)
 80045c8:	4854      	ldr	r0, [pc, #336]	; (800471c <loraif_send_request+0x1ec>)
 80045ca:	f006 fbf1 	bl	800adb0 <LOG_ERROR>
}
 80045ce:	b00b      	add	sp, #44	; 0x2c
 80045d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(require_resp != 0){
 80045d4:	b99e      	cbnz	r6, 80045fe <loraif_send_request+0xce>
	if(xSemaphoreTake(s_lora_transfer, 10)){
 80045d6:	4b53      	ldr	r3, [pc, #332]	; (8004724 <loraif_send_request+0x1f4>)
		if(loraif_transmit(req_data) != true){
 80045d8:	9c06      	ldr	r4, [sp, #24]
	if(xSemaphoreTake(s_lora_transfer, 10)){
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	210a      	movs	r1, #10
 80045de:	f7fd fe81 	bl	80022e4 <xQueueSemaphoreTake>
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d16c      	bne.n	80046c0 <loraif_send_request+0x190>
			LOG_ERROR(TAG, "LoRa busy.");
 80045e6:	4950      	ldr	r1, [pc, #320]	; (8004728 <loraif_send_request+0x1f8>)
 80045e8:	484c      	ldr	r0, [pc, #304]	; (800471c <loraif_send_request+0x1ec>)
 80045ea:	f006 fbe1 	bl	800adb0 <LOG_ERROR>
	if(req_data != NULL) free(req_data);
 80045ee:	9806      	ldr	r0, [sp, #24]
 80045f0:	2800      	cmp	r0, #0
 80045f2:	d0ec      	beq.n	80045ce <loraif_send_request+0x9e>
 80045f4:	f007 fea0 	bl	800c338 <free>
}
 80045f8:	b00b      	add	sp, #44	; 0x2c
 80045fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			loraif_request_prop_t *wait_response = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 80045fe:	2008      	movs	r0, #8
 8004600:	f007 fe92 	bl	800c328 <malloc>
 8004604:	4606      	mov	r6, r0
 8004606:	9008      	str	r0, [sp, #32]
			if(wait_response == NULL){
 8004608:	2800      	cmp	r0, #0
 800460a:	d06e      	beq.n	80046ea <loraif_send_request+0x1ba>
			wait_response->address = dev_address;
 800460c:	6034      	str	r4, [r6, #0]
			wait_response->tick_start = get_tick();
 800460e:	f003 ff93 	bl	8008538 <get_tick>
			uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004612:	4d46      	ldr	r5, [pc, #280]	; (800472c <loraif_send_request+0x1fc>)
			wait_response->tick_start = get_tick();
 8004614:	6070      	str	r0, [r6, #4]
			loraif_request_prop_t *in_queue = NULL;
 8004616:	2400      	movs	r4, #0
			uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004618:	6828      	ldr	r0, [r5, #0]
			loraif_request_prop_t *in_queue = NULL;
 800461a:	9409      	str	r4, [sp, #36]	; 0x24
			uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 800461c:	f7fe f84a 	bl	80026b4 <uxQueueMessagesWaiting>
			for(uint8_t i=0; i<queue_len; i++){
 8004620:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8004624:	d02d      	beq.n	8004682 <loraif_send_request+0x152>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004626:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8004730 <loraif_send_request+0x200>
 800462a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8004734 <loraif_send_request+0x204>
 800462e:	4f3a      	ldr	r7, [pc, #232]	; (8004718 <loraif_send_request+0x1e8>)
 8004630:	e002      	b.n	8004638 <loraif_send_request+0x108>
			for(uint8_t i=0; i<queue_len; i++){
 8004632:	b2e3      	uxtb	r3, r4
 8004634:	42b3      	cmp	r3, r6
 8004636:	d224      	bcs.n	8004682 <loraif_send_request+0x152>
				if(xQueueReceive(q_wait_response, &in_queue, 5) == pdTRUE && in_queue != NULL){
 8004638:	6828      	ldr	r0, [r5, #0]
 800463a:	2205      	movs	r2, #5
 800463c:	a909      	add	r1, sp, #36	; 0x24
 800463e:	f7fd fccf 	bl	8001fe0 <xQueueReceive>
 8004642:	2801      	cmp	r0, #1
			for(uint8_t i=0; i<queue_len; i++){
 8004644:	f104 0401 	add.w	r4, r4, #1
				if(xQueueReceive(q_wait_response, &in_queue, 5) == pdTRUE && in_queue != NULL){
 8004648:	d1f3      	bne.n	8004632 <loraif_send_request+0x102>
 800464a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <loraif_send_request+0x102>
					if(in_queue->address == wait_response->address){
 8004650:	9808      	ldr	r0, [sp, #32]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	6803      	ldr	r3, [r0, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d038      	beq.n	80046cc <loraif_send_request+0x19c>
					if(xQueueSend(q_wait_response, &in_queue, 5) != pdTRUE){
 800465a:	2300      	movs	r3, #0
 800465c:	6828      	ldr	r0, [r5, #0]
 800465e:	2205      	movs	r2, #5
 8004660:	a909      	add	r1, sp, #36	; 0x24
 8004662:	f7fd fa49 	bl	8001af8 <xQueueGenericSend>
 8004666:	2801      	cmp	r0, #1
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004668:	f04f 03df 	mov.w	r3, #223	; 0xdf
					if(xQueueSend(q_wait_response, &in_queue, 5) != pdTRUE){
 800466c:	d0e1      	beq.n	8004632 <loraif_send_request+0x102>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800466e:	482b      	ldr	r0, [pc, #172]	; (800471c <loraif_send_request+0x1ec>)
 8004670:	f8cd 9000 	str.w	r9, [sp]
 8004674:	4642      	mov	r2, r8
 8004676:	4639      	mov	r1, r7
 8004678:	f006 fbd8 	bl	800ae2c <LOG_DEBUG>
			for(uint8_t i=0; i<queue_len; i++){
 800467c:	b2e3      	uxtb	r3, r4
 800467e:	42b3      	cmp	r3, r6
 8004680:	d3da      	bcc.n	8004638 <loraif_send_request+0x108>
			if(wait_response != NULL){
 8004682:	9b08      	ldr	r3, [sp, #32]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0a6      	beq.n	80045d6 <loraif_send_request+0xa6>
				if(xQueueSend(q_wait_response, &wait_response, 5) != pdTRUE){
 8004688:	6828      	ldr	r0, [r5, #0]
 800468a:	2300      	movs	r3, #0
 800468c:	2205      	movs	r2, #5
 800468e:	a908      	add	r1, sp, #32
 8004690:	f7fd fa32 	bl	8001af8 <xQueueGenericSend>
 8004694:	2801      	cmp	r0, #1
 8004696:	d09e      	beq.n	80045d6 <loraif_send_request+0xa6>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004698:	4b25      	ldr	r3, [pc, #148]	; (8004730 <loraif_send_request+0x200>)
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	4a25      	ldr	r2, [pc, #148]	; (8004734 <loraif_send_request+0x204>)
 800469e:	491e      	ldr	r1, [pc, #120]	; (8004718 <loraif_send_request+0x1e8>)
 80046a0:	481e      	ldr	r0, [pc, #120]	; (800471c <loraif_send_request+0x1ec>)
 80046a2:	23e5      	movs	r3, #229	; 0xe5
 80046a4:	f006 fbc2 	bl	800ae2c <LOG_DEBUG>
}
 80046a8:	e795      	b.n	80045d6 <loraif_send_request+0xa6>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80046aa:	4b21      	ldr	r3, [pc, #132]	; (8004730 <loraif_send_request+0x200>)
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <loraif_send_request+0x208>)
 80046b0:	4919      	ldr	r1, [pc, #100]	; (8004718 <loraif_send_request+0x1e8>)
 80046b2:	481a      	ldr	r0, [pc, #104]	; (800471c <loraif_send_request+0x1ec>)
 80046b4:	23b8      	movs	r3, #184	; 0xb8
 80046b6:	f006 fbb9 	bl	800ae2c <LOG_DEBUG>
}
 80046ba:	b00b      	add	sp, #44	; 0x2c
 80046bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046c0:	4620      	mov	r0, r4
 80046c2:	f7ff fe7b 	bl	80043bc <_ZL15loraif_transmitPc.part.0>
		if(loraif_transmit(req_data) != true){
 80046c6:	2800      	cmp	r0, #0
 80046c8:	d191      	bne.n	80045ee <loraif_send_request+0xbe>
 80046ca:	e78c      	b.n	80045e6 <loraif_send_request+0xb6>
						if(wait_response != NULL) free(wait_response);
 80046cc:	f007 fe34 	bl	800c338 <free>
						wait_response = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	9308      	str	r3, [sp, #32]
 80046d4:	e7c1      	b.n	800465a <loraif_send_request+0x12a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80046d6:	4b0e      	ldr	r3, [pc, #56]	; (8004710 <loraif_send_request+0x1e0>)
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4a17      	ldr	r2, [pc, #92]	; (8004738 <loraif_send_request+0x208>)
 80046dc:	490e      	ldr	r1, [pc, #56]	; (8004718 <loraif_send_request+0x1e8>)
 80046de:	480f      	ldr	r0, [pc, #60]	; (800471c <loraif_send_request+0x1ec>)
 80046e0:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80046e4:	f006 fba2 	bl	800ae2c <LOG_DEBUG>
	if(dev == NULL){
 80046e8:	e769      	b.n	80045be <loraif_send_request+0x8e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80046ea:	4b11      	ldr	r3, [pc, #68]	; (8004730 <loraif_send_request+0x200>)
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4a13      	ldr	r2, [pc, #76]	; (800473c <loraif_send_request+0x20c>)
 80046f0:	4909      	ldr	r1, [pc, #36]	; (8004718 <loraif_send_request+0x1e8>)
 80046f2:	480a      	ldr	r0, [pc, #40]	; (800471c <loraif_send_request+0x1ec>)
 80046f4:	23d1      	movs	r3, #209	; 0xd1
 80046f6:	f006 fb99 	bl	800ae2c <LOG_DEBUG>
			wait_response->address = dev_address;
 80046fa:	9e08      	ldr	r6, [sp, #32]
}
 80046fc:	e786      	b.n	800460c <loraif_send_request+0xdc>
 80046fe:	bf00      	nop
 8004700:	2000b28c 	.word	0x2000b28c
 8004704:	2000000c 	.word	0x2000000c
 8004708:	08010d7c 	.word	0x08010d7c
 800470c:	08010db0 	.word	0x08010db0
 8004710:	08010df4 	.word	0x08010df4
 8004714:	08010e68 	.word	0x08010e68
 8004718:	08010d14 	.word	0x08010d14
 800471c:	08010d30 	.word	0x08010d30
 8004720:	08010e0c 	.word	0x08010e0c
 8004724:	2000b2b4 	.word	0x2000b2b4
 8004728:	08010e5c 	.word	0x08010e5c
 800472c:	2000b2b0 	.word	0x2000b2b0
 8004730:	08010d68 	.word	0x08010d68
 8004734:	08010e3c 	.word	0x08010e3c
 8004738:	08010d54 	.word	0x08010d54
 800473c:	08010e24 	.word	0x08010e24

08004740 <loraif_receive_process>:
void loraif_receive_process(void *param){
 8004740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004744:	b08d      	sub	sp, #52	; 0x34
	if(xQueueReceive(*queue, &rx_full, 5)){
 8004746:	6800      	ldr	r0, [r0, #0]
 8004748:	2205      	movs	r2, #5
 800474a:	a902      	add	r1, sp, #8
 800474c:	f7fd fc48 	bl	8001fe0 <xQueueReceive>
 8004750:	b910      	cbnz	r0, 8004758 <loraif_receive_process+0x18>
}
 8004752:	b00d      	add	sp, #52	; 0x34
 8004754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt_json_t json;
 8004758:	2300      	movs	r3, #0
		pkt_t pkt;
 800475a:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 800475c:	9802      	ldr	r0, [sp, #8]
		pkt_json_t json;
 800475e:	9309      	str	r3, [sp, #36]	; 0x24
		pkt_t pkt;
 8004760:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 8004762:	a906      	add	r1, sp, #24
		pkt_t pkt;
 8004764:	e9cd 4506 	strd	r4, r5, [sp, #24]
		char *response_to_device = NULL;
 8004768:	e9cd 3303 	strd	r3, r3, [sp, #12]
		pkt_json_t json;
 800476c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004770:	930b      	str	r3, [sp, #44]	; 0x2c
		err = parse_packet(rx_full, &pkt);
 8004772:	f000 fc47 	bl	8005004 <parse_packet>
		if(err == PKT_ERR_OK){
 8004776:	4605      	mov	r5, r0
 8004778:	2800      	cmp	r0, #0
 800477a:	d150      	bne.n	800481e <loraif_receive_process+0xde>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 800477c:	4991      	ldr	r1, [pc, #580]	; (80049c4 <loraif_receive_process+0x284>)
 800477e:	9806      	ldr	r0, [sp, #24]
 8004780:	2209      	movs	r2, #9
 8004782:	f000 fca9 	bl	80050d8 <str_to_cmd>
 8004786:	b2c6      	uxtb	r6, r0
			if(cmd == LORA_REQ_ADDRESS){
 8004788:	2e01      	cmp	r6, #1
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 800478a:	af09      	add	r7, sp, #36	; 0x24
			if(cmd == LORA_REQ_ADDRESS){
 800478c:	d05f      	beq.n	800484e <loraif_receive_process+0x10e>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 800478e:	4a8e      	ldr	r2, [pc, #568]	; (80049c8 <loraif_receive_process+0x288>)
 8004790:	9807      	ldr	r0, [sp, #28]
 8004792:	4639      	mov	r1, r7
 8004794:	f000 fb0c 	bl	8004db0 <json_get_object>
				addr = strtol(json.value, NULL, 16);
 8004798:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 800479a:	4604      	mov	r4, r0
				addr = strtol(json.value, NULL, 16);
 800479c:	4629      	mov	r1, r5
 800479e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80047a0:	f009 fc2a 	bl	800dff8 <strtol>
 80047a4:	4680      	mov	r8, r0
				if(err == PKT_ERR_OK){
 80047a6:	2c00      	cmp	r4, #0
 80047a8:	f040 80c4 	bne.w	8004934 <loraif_receive_process+0x1f4>
					if(cmd == LORA_ERR){
 80047ac:	2e00      	cmp	r6, #0
 80047ae:	d073      	beq.n	8004898 <loraif_receive_process+0x158>
					else if(cmd == LORA_UPDATE_ADDRESS){
 80047b0:	2e02      	cmp	r6, #2
 80047b2:	f000 80c6 	beq.w	8004942 <loraif_receive_process+0x202>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 80047b6:	2e04      	cmp	r6, #4
 80047b8:	4d84      	ldr	r5, [pc, #528]	; (80049cc <loraif_receive_process+0x28c>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047ba:	f8df b218 	ldr.w	fp, [pc, #536]	; 80049d4 <loraif_receive_process+0x294>
 80047be:	f8df a258 	ldr.w	sl, [pc, #600]	; 8004a18 <loraif_receive_process+0x2d8>
 80047c2:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80049dc <loraif_receive_process+0x29c>
						loraif_request_prop_t *require_resp_prop = NULL;
 80047c6:	9405      	str	r4, [sp, #20]
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 80047c8:	bf08      	it	eq
 80047ca:	2603      	moveq	r6, #3
						for(uint8_t i=0; i<uxQueueMessagesWaiting(q_wait_response); i++){
 80047cc:	6828      	ldr	r0, [r5, #0]
 80047ce:	f7fd ff71 	bl	80026b4 <uxQueueMessagesWaiting>
 80047d2:	b2e3      	uxtb	r3, r4
 80047d4:	4298      	cmp	r0, r3
							if(xQueueReceive(q_wait_response, &require_resp_prop, 5) == pdTRUE && require_resp_prop != NULL){
 80047d6:	f04f 0205 	mov.w	r2, #5
 80047da:	a905      	add	r1, sp, #20
						for(uint8_t i=0; i<uxQueueMessagesWaiting(q_wait_response); i++){
 80047dc:	d947      	bls.n	800486e <loraif_receive_process+0x12e>
							if(xQueueReceive(q_wait_response, &require_resp_prop, 5) == pdTRUE && require_resp_prop != NULL){
 80047de:	6828      	ldr	r0, [r5, #0]
 80047e0:	f7fd fbfe 	bl	8001fe0 <xQueueReceive>
 80047e4:	2801      	cmp	r0, #1
 80047e6:	f104 0401 	add.w	r4, r4, #1
 80047ea:	d1ef      	bne.n	80047cc <loraif_receive_process+0x8c>
 80047ec:	9805      	ldr	r0, [sp, #20]
									if(xQueueSend(q_wait_response, &require_resp_prop, 5) != pdTRUE){
 80047ee:	2300      	movs	r3, #0
 80047f0:	a905      	add	r1, sp, #20
							if(xQueueReceive(q_wait_response, &require_resp_prop, 5) == pdTRUE && require_resp_prop != NULL){
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d0ea      	beq.n	80047cc <loraif_receive_process+0x8c>
								if(require_resp_prop->address == addr){
 80047f6:	6802      	ldr	r2, [r0, #0]
 80047f8:	4542      	cmp	r2, r8
 80047fa:	f000 80b5 	beq.w	8004968 <loraif_receive_process+0x228>
									if(xQueueSend(q_wait_response, &require_resp_prop, 5) != pdTRUE){
 80047fe:	6828      	ldr	r0, [r5, #0]
 8004800:	2205      	movs	r2, #5
 8004802:	f7fd f979 	bl	8001af8 <xQueueGenericSend>
 8004806:	2801      	cmp	r0, #1
 8004808:	d0e0      	beq.n	80047cc <loraif_receive_process+0x8c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800480a:	4871      	ldr	r0, [pc, #452]	; (80049d0 <loraif_receive_process+0x290>)
 800480c:	f8cd b000 	str.w	fp, [sp]
 8004810:	f240 134d 	movw	r3, #333	; 0x14d
 8004814:	4652      	mov	r2, sl
 8004816:	4649      	mov	r1, r9
 8004818:	f006 fb08 	bl	800ae2c <LOG_DEBUG>
						for(uint8_t i=0; i<uxQueueMessagesWaiting(q_wait_response); i++){
 800481c:	e7d6      	b.n	80047cc <loraif_receive_process+0x8c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <loraif_receive_process+0x294>)
 8004820:	9300      	str	r3, [sp, #0]
 8004822:	4a6d      	ldr	r2, [pc, #436]	; (80049d8 <loraif_receive_process+0x298>)
 8004824:	496d      	ldr	r1, [pc, #436]	; (80049dc <loraif_receive_process+0x29c>)
 8004826:	486a      	ldr	r0, [pc, #424]	; (80049d0 <loraif_receive_process+0x290>)
 8004828:	f44f 73b8 	mov.w	r3, #368	; 0x170
 800482c:	f006 fafe 	bl	800ae2c <LOG_DEBUG>
 8004830:	af09      	add	r7, sp, #36	; 0x24
		json_release_object(&json);
 8004832:	4638      	mov	r0, r7
 8004834:	f000 fbd4 	bl	8004fe0 <json_release_object>
		release_packet(&pkt);
 8004838:	a806      	add	r0, sp, #24
 800483a:	f000 fc3d 	bl	80050b8 <release_packet>
		if(rx_full != NULL) free(rx_full);
 800483e:	9802      	ldr	r0, [sp, #8]
 8004840:	2800      	cmp	r0, #0
 8004842:	d086      	beq.n	8004752 <loraif_receive_process+0x12>
 8004844:	f007 fd78 	bl	800c338 <free>
}
 8004848:	b00d      	add	sp, #52	; 0x34
 800484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 800484e:	4a64      	ldr	r2, [pc, #400]	; (80049e0 <loraif_receive_process+0x2a0>)
 8004850:	9807      	ldr	r0, [sp, #28]
 8004852:	4639      	mov	r1, r7
 8004854:	f000 faac 	bl	8004db0 <json_get_object>
				if(err == PKT_ERR_OK){
 8004858:	b340      	cbz	r0, 80048ac <loraif_receive_process+0x16c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800485a:	4b5e      	ldr	r3, [pc, #376]	; (80049d4 <loraif_receive_process+0x294>)
 800485c:	4a61      	ldr	r2, [pc, #388]	; (80049e4 <loraif_receive_process+0x2a4>)
 800485e:	9300      	str	r3, [sp, #0]
		uint32_t addr = LORAIF_INVALID_ADDRESS;
 8004860:	46a8      	mov	r8, r5
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004862:	f44f 7392 	mov.w	r3, #292	; 0x124
 8004866:	495d      	ldr	r1, [pc, #372]	; (80049dc <loraif_receive_process+0x29c>)
 8004868:	4859      	ldr	r0, [pc, #356]	; (80049d0 <loraif_receive_process+0x290>)
 800486a:	f006 fadf 	bl	800ae2c <LOG_DEBUG>
				json_release_object(&json);
 800486e:	4638      	mov	r0, r7
 8004870:	f000 fbb6 	bl	8004fe0 <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 8004874:	9a07      	ldr	r2, [sp, #28]
 8004876:	495c      	ldr	r1, [pc, #368]	; (80049e8 <loraif_receive_process+0x2a8>)
 8004878:	a803      	add	r0, sp, #12
 800487a:	f007 fd01 	bl	800c280 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, addr, evt_data);
 800487e:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <loraif_receive_process+0x2ac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	b11b      	cbz	r3, 800488c <loraif_receive_process+0x14c>
 8004884:	9a03      	ldr	r2, [sp, #12]
 8004886:	4641      	mov	r1, r8
 8004888:	4630      	mov	r0, r6
 800488a:	4798      	blx	r3
			if(evt_data != NULL) free(evt_data);
 800488c:	9803      	ldr	r0, [sp, #12]
 800488e:	2800      	cmp	r0, #0
 8004890:	d0cf      	beq.n	8004832 <loraif_receive_process+0xf2>
 8004892:	f007 fd51 	bl	800c338 <free>
 8004896:	e7cc      	b.n	8004832 <loraif_receive_process+0xf2>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004898:	4b4e      	ldr	r3, [pc, #312]	; (80049d4 <loraif_receive_process+0x294>)
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	4a54      	ldr	r2, [pc, #336]	; (80049f0 <loraif_receive_process+0x2b0>)
 800489e:	494f      	ldr	r1, [pc, #316]	; (80049dc <loraif_receive_process+0x29c>)
 80048a0:	484b      	ldr	r0, [pc, #300]	; (80049d0 <loraif_receive_process+0x290>)
 80048a2:	f240 1331 	movw	r3, #305	; 0x131
 80048a6:	f006 fac1 	bl	800ae2c <LOG_DEBUG>
						cmd = LORA_ERR;
 80048aa:	e7e0      	b.n	800486e <loraif_receive_process+0x12e>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 80048ac:	4601      	mov	r1, r0
 80048ae:	2210      	movs	r2, #16
 80048b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80048b2:	4c50      	ldr	r4, [pc, #320]	; (80049f4 <loraif_receive_process+0x2b4>)
 80048b4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8004a1c <loraif_receive_process+0x2dc>
 80048b8:	f009 fb9e 	bl	800dff8 <strtol>
 80048bc:	4605      	mov	r5, r0
					rng_set_seed(rand_num);
 80048be:	f002 ffe3 	bl	8007888 <rng_set_seed>
						addr_by_gw = rng_generate_random_number();
 80048c2:	f002 ffe7 	bl	8007894 <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 80048c6:	f8d9 2000 	ldr.w	r2, [r9]
 80048ca:	6020      	str	r0, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80048cc:	454a      	cmp	r2, r9
 80048ce:	d006      	beq.n	80048de <loraif_receive_process+0x19e>
        if ((*device)->address == num) {
 80048d0:	6891      	ldr	r1, [r2, #8]
 80048d2:	6809      	ldr	r1, [r1, #0]
 80048d4:	4288      	cmp	r0, r1
 80048d6:	d0f4      	beq.n	80048c2 <loraif_receive_process+0x182>
	_M_node = _M_node->_M_next;
 80048d8:	6812      	ldr	r2, [r2, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80048da:	454a      	cmp	r2, r9
 80048dc:	d1f8      	bne.n	80048d0 <loraif_receive_process+0x190>
					addr_by_gw &= 0x7FFFFFFFU;
 80048de:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					char *temp = NULL;
 80048e2:	2000      	movs	r0, #0
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 80048e4:	4944      	ldr	r1, [pc, #272]	; (80049f8 <loraif_receive_process+0x2b8>)
					char *temp = NULL;
 80048e6:	9005      	str	r0, [sp, #20]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 80048e8:	462b      	mov	r3, r5
 80048ea:	a805      	add	r0, sp, #20
					addr_by_gw &= 0x7FFFFFFFU;
 80048ec:	6022      	str	r2, [r4, #0]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 80048ee:	f007 fcc7 	bl	800c280 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80048f2:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80048f6:	4640      	mov	r0, r8
 80048f8:	f7fb fc84 	bl	8000204 <strlen>
 80048fc:	b281      	uxth	r1, r0
 80048fe:	4640      	mov	r0, r8
 8004900:	f7ff fcf4 	bl	80042ec <cal_crc16>
 8004904:	4680      	mov	r8, r0
					if(temp != NULL) free(temp);
 8004906:	9805      	ldr	r0, [sp, #20]
 8004908:	b108      	cbz	r0, 800490e <loraif_receive_process+0x1ce>
 800490a:	f007 fd15 	bl	800c338 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,\"crc\":0x%04x}", (unsigned int)addr_by_gw, (unsigned int)rand_num, crc);
 800490e:	f8cd 8000 	str.w	r8, [sp]
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	4939      	ldr	r1, [pc, #228]	; (80049fc <loraif_receive_process+0x2bc>)
 8004916:	462b      	mov	r3, r5
 8004918:	a804      	add	r0, sp, #16
 800491a:	f007 fcb1 	bl	800c280 <asiprintf>
					if(xQueueSend(q_response, &response_to_device, 5) == pdFALSE){
 800491e:	4b38      	ldr	r3, [pc, #224]	; (8004a00 <loraif_receive_process+0x2c0>)
 8004920:	a904      	add	r1, sp, #16
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	2205      	movs	r2, #5
 8004926:	2300      	movs	r3, #0
 8004928:	f7fd f8e6 	bl	8001af8 <xQueueGenericSend>
 800492c:	b190      	cbz	r0, 8004954 <loraif_receive_process+0x214>
		uint32_t addr = LORAIF_INVALID_ADDRESS;
 800492e:	f04f 0800 	mov.w	r8, #0
 8004932:	e79f      	b.n	8004874 <loraif_receive_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004934:	4b27      	ldr	r3, [pc, #156]	; (80049d4 <loraif_receive_process+0x294>)
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	4a32      	ldr	r2, [pc, #200]	; (8004a04 <loraif_receive_process+0x2c4>)
 800493a:	f240 1361 	movw	r3, #353	; 0x161
					cmd = LORA_ERR;
 800493e:	462e      	mov	r6, r5
 8004940:	e791      	b.n	8004866 <loraif_receive_process+0x126>
						if(addr == addr_by_gw){
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <loraif_receive_process+0x2b4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4283      	cmp	r3, r0
 8004948:	d191      	bne.n	800486e <loraif_receive_process+0x12e>
							set_response_ok(addr, cmd);
 800494a:	4631      	mov	r1, r6
 800494c:	f7ff fcea 	bl	8004324 <_ZL15set_response_okm12lora_event_t>
							cmd = LORA_ADD_DEVICE;
 8004950:	2606      	movs	r6, #6
							goto event_handle;
 8004952:	e78f      	b.n	8004874 <loraif_receive_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004954:	4b1f      	ldr	r3, [pc, #124]	; (80049d4 <loraif_receive_process+0x294>)
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	4a2b      	ldr	r2, [pc, #172]	; (8004a08 <loraif_receive_process+0x2c8>)
 800495a:	4920      	ldr	r1, [pc, #128]	; (80049dc <loraif_receive_process+0x29c>)
 800495c:	481c      	ldr	r0, [pc, #112]	; (80049d0 <loraif_receive_process+0x290>)
 800495e:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8004962:	f006 fa63 	bl	800ae2c <LOG_DEBUG>
}
 8004966:	e7e2      	b.n	800492e <loraif_receive_process+0x1ee>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004968:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004a1c <loraif_receive_process+0x2dc>
									free(require_resp_prop);
 800496c:	f007 fce4 	bl	800c338 <free>
 8004970:	f8d9 3000 	ldr.w	r3, [r9]
									require_resp_prop = NULL;
 8004974:	2200      	movs	r2, #0
    if (loraif_device_list.empty()) {
 8004976:	454b      	cmp	r3, r9
									require_resp_prop = NULL;
 8004978:	9205      	str	r2, [sp, #20]
    if (loraif_device_list.empty()) {
 800497a:	d018      	beq.n	80049ae <loraif_receive_process+0x26e>
        if ((*device)->address == device_address) {
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	6811      	ldr	r1, [r2, #0]
 8004980:	4588      	cmp	r8, r1
 8004982:	d00d      	beq.n	80049a0 <loraif_receive_process+0x260>
	_M_node = _M_node->_M_next;
 8004984:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004986:	454b      	cmp	r3, r9
 8004988:	d1f8      	bne.n	800497c <loraif_receive_process+0x23c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <loraif_receive_process+0x2cc>)
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	4a20      	ldr	r2, [pc, #128]	; (8004a10 <loraif_receive_process+0x2d0>)
 8004990:	4912      	ldr	r1, [pc, #72]	; (80049dc <loraif_receive_process+0x29c>)
 8004992:	480f      	ldr	r0, [pc, #60]	; (80049d0 <loraif_receive_process+0x290>)
 8004994:	f240 13ef 	movw	r3, #495	; 0x1ef
 8004998:	f006 fa48 	bl	800ae2c <LOG_DEBUG>
								cmd = LORA_ERR;
 800499c:	2600      	movs	r6, #0
 800499e:	e769      	b.n	8004874 <loraif_receive_process+0x134>
							err_dev->err_count = 0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	7213      	strb	r3, [r2, #8]
							set_response_ok(addr, cmd);
 80049a4:	4631      	mov	r1, r6
 80049a6:	4640      	mov	r0, r8
 80049a8:	f7ff fcbc 	bl	8004324 <_ZL15set_response_okm12lora_event_t>
							goto event_handle;
 80049ac:	e762      	b.n	8004874 <loraif_receive_process+0x134>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049ae:	4b17      	ldr	r3, [pc, #92]	; (8004a0c <loraif_receive_process+0x2cc>)
 80049b0:	9300      	str	r3, [sp, #0]
								cmd = LORA_ERR;
 80049b2:	4616      	mov	r6, r2
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049b4:	4909      	ldr	r1, [pc, #36]	; (80049dc <loraif_receive_process+0x29c>)
 80049b6:	4a17      	ldr	r2, [pc, #92]	; (8004a14 <loraif_receive_process+0x2d4>)
 80049b8:	4805      	ldr	r0, [pc, #20]	; (80049d0 <loraif_receive_process+0x290>)
 80049ba:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 80049be:	f006 fa35 	bl	800ae2c <LOG_DEBUG>
							if(err_dev == NULL){
 80049c2:	e757      	b.n	8004874 <loraif_receive_process+0x134>
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	08010f34 	.word	0x08010f34
 80049cc:	2000b2b0 	.word	0x2000b2b0
 80049d0:	08010d30 	.word	0x08010d30
 80049d4:	08010ef8 	.word	0x08010ef8
 80049d8:	08010f5c 	.word	0x08010f5c
 80049dc:	08010d14 	.word	0x08010d14
 80049e0:	08010e94 	.word	0x08010e94
 80049e4:	08010f10 	.word	0x08010f10
 80049e8:	080119cc 	.word	0x080119cc
 80049ec:	2000b2ac 	.word	0x2000b2ac
 80049f0:	08010f3c 	.word	0x08010f3c
 80049f4:	2000b298 	.word	0x2000b298
 80049f8:	08010f78 	.word	0x08010f78
 80049fc:	08010e98 	.word	0x08010e98
 8004a00:	2000b29c 	.word	0x2000b29c
 8004a04:	08010f4c 	.word	0x08010f4c
 8004a08:	08010ed4 	.word	0x08010ed4
 8004a0c:	08010df4 	.word	0x08010df4
 8004a10:	08010e68 	.word	0x08010e68
 8004a14:	08010d54 	.word	0x08010d54
 8004a18:	08010e3c 	.word	0x08010e3c
 8004a1c:	2000b28c 	.word	0x2000b28c

08004a20 <loraif_response_to_device>:
void loraif_response_to_device(void){
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	4d18      	ldr	r5, [pc, #96]	; (8004a88 <loraif_response_to_device+0x68>)
	if(xSemaphoreTake(s_lora_transfer, 10)){
 8004a26:	4e19      	ldr	r6, [pc, #100]	; (8004a8c <loraif_response_to_device+0x6c>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a28:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004a9c <loraif_response_to_device+0x7c>
 8004a2c:	4f18      	ldr	r7, [pc, #96]	; (8004a90 <loraif_response_to_device+0x70>)
void loraif_response_to_device(void){
 8004a2e:	b084      	sub	sp, #16
	while(xQueueReceive(q_response, &response, 5) && response != NULL){
 8004a30:	a903      	add	r1, sp, #12
 8004a32:	6828      	ldr	r0, [r5, #0]
 8004a34:	2205      	movs	r2, #5
 8004a36:	f7fd fad3 	bl	8001fe0 <xQueueReceive>
	if(xSemaphoreTake(s_lora_transfer, 10)){
 8004a3a:	210a      	movs	r1, #10
	while(xQueueReceive(q_response, &response, 5) && response != NULL){
 8004a3c:	b300      	cbz	r0, 8004a80 <loraif_response_to_device+0x60>
 8004a3e:	9c03      	ldr	r4, [sp, #12]
 8004a40:	b1f4      	cbz	r4, 8004a80 <loraif_response_to_device+0x60>
	if(xSemaphoreTake(s_lora_transfer, 10)){
 8004a42:	6830      	ldr	r0, [r6, #0]
 8004a44:	f7fd fc4e 	bl	80022e4 <xQueueSemaphoreTake>
 8004a48:	b988      	cbnz	r0, 8004a6e <loraif_response_to_device+0x4e>
			if(xQueueSend(q_response, &response, 5) != pdTRUE){
 8004a4a:	a903      	add	r1, sp, #12
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	2205      	movs	r2, #5
 8004a50:	6828      	ldr	r0, [r5, #0]
 8004a52:	f7fd f851 	bl	8001af8 <xQueueGenericSend>
 8004a56:	2801      	cmp	r0, #1
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a58:	490e      	ldr	r1, [pc, #56]	; (8004a94 <loraif_response_to_device+0x74>)
 8004a5a:	480f      	ldr	r0, [pc, #60]	; (8004a98 <loraif_response_to_device+0x78>)
 8004a5c:	f44f 73c1 	mov.w	r3, #386	; 0x182
 8004a60:	463a      	mov	r2, r7
			if(xQueueSend(q_response, &response, 5) != pdTRUE){
 8004a62:	d0e5      	beq.n	8004a30 <loraif_response_to_device+0x10>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a64:	f8cd 8000 	str.w	r8, [sp]
 8004a68:	f006 f9e0 	bl	800ae2c <LOG_DEBUG>
}
 8004a6c:	e7e0      	b.n	8004a30 <loraif_response_to_device+0x10>
 8004a6e:	4620      	mov	r0, r4
 8004a70:	f7ff fca4 	bl	80043bc <_ZL15loraif_transmitPc.part.0>
		if(loraif_transmit(response) == true)
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d0e8      	beq.n	8004a4a <loraif_response_to_device+0x2a>
			free(response);
 8004a78:	9803      	ldr	r0, [sp, #12]
 8004a7a:	f007 fc5d 	bl	800c338 <free>
 8004a7e:	e7d7      	b.n	8004a30 <loraif_response_to_device+0x10>
}
 8004a80:	b004      	add	sp, #16
 8004a82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a86:	bf00      	nop
 8004a88:	2000b29c 	.word	0x2000b29c
 8004a8c:	2000b2b4 	.word	0x2000b2b4
 8004a90:	08010cf8 	.word	0x08010cf8
 8004a94:	08010d14 	.word	0x08010d14
 8004a98:	08010d30 	.word	0x08010d30
 8004a9c:	08010fa8 	.word	0x08010fa8

08004aa0 <loraif_check_device_timeout>:
void loraif_check_device_timeout(void){
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004aa4:	4f50      	ldr	r7, [pc, #320]	; (8004be8 <loraif_check_device_timeout+0x148>)
void loraif_check_device_timeout(void){
 8004aa6:	b087      	sub	sp, #28
	uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004aa8:	6838      	ldr	r0, [r7, #0]
	loraif_request_prop_t *wait_response = NULL;
 8004aaa:	2400      	movs	r4, #0
 8004aac:	9404      	str	r4, [sp, #16]
	uint8_t queue_len = uxQueueMessagesWaiting(q_wait_response);
 8004aae:	f7fd fe01 	bl	80026b4 <uxQueueMessagesWaiting>
	for(uint8_t i=0; i<queue_len; i++){
 8004ab2:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8004ab6:	d038      	beq.n	8004b2a <loraif_check_device_timeout+0x8a>
			if(dt >= resp_timeout){
 8004ab8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8004c14 <loraif_check_device_timeout+0x174>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004abc:	f8df a158 	ldr.w	sl, [pc, #344]	; 8004c18 <loraif_check_device_timeout+0x178>
 8004ac0:	e003      	b.n	8004aca <loraif_check_device_timeout+0x2a>
	for(uint8_t i=0; i<queue_len; i++){
 8004ac2:	3401      	adds	r4, #1
 8004ac4:	b2e3      	uxtb	r3, r4
 8004ac6:	42b3      	cmp	r3, r6
 8004ac8:	d22f      	bcs.n	8004b2a <loraif_check_device_timeout+0x8a>
		if(xQueueReceive(q_wait_response, &wait_response, 5) == pdTRUE && wait_response != NULL){
 8004aca:	6838      	ldr	r0, [r7, #0]
 8004acc:	2205      	movs	r2, #5
 8004ace:	a904      	add	r1, sp, #16
 8004ad0:	f7fd fa86 	bl	8001fe0 <xQueueReceive>
 8004ad4:	2801      	cmp	r0, #1
 8004ad6:	d1f4      	bne.n	8004ac2 <loraif_check_device_timeout+0x22>
 8004ad8:	9b04      	ldr	r3, [sp, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f1      	beq.n	8004ac2 <loraif_check_device_timeout+0x22>
			uint32_t dt = 0, tick_now = get_tick();
 8004ade:	f003 fd2b 	bl	8008538 <get_tick>
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004ae2:	9a04      	ldr	r2, [sp, #16]
 8004ae4:	6853      	ldr	r3, [r2, #4]
 8004ae6:	4283      	cmp	r3, r0
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004ae8:	bf8c      	ite	hi
 8004aea:	ea6f 0803 	mvnhi.w	r8, r3
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004aee:	eba0 0803 	subls.w	r8, r0, r3
			if(dt >= resp_timeout){
 8004af2:	f8d9 3000 	ldr.w	r3, [r9]
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004af6:	bf88      	it	hi
 8004af8:	4480      	addhi	r8, r0
			if(dt >= resp_timeout){
 8004afa:	4543      	cmp	r3, r8
 8004afc:	d818      	bhi.n	8004b30 <loraif_check_device_timeout+0x90>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004afe:	483b      	ldr	r0, [pc, #236]	; (8004bec <loraif_check_device_timeout+0x14c>)
				loraif_dev_t *err_dev = loraif_select_device(wait_response->address);
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6803      	ldr	r3, [r0, #0]
    if (loraif_device_list.empty()) {
 8004b04:	4283      	cmp	r3, r0
 8004b06:	d065      	beq.n	8004bd4 <loraif_check_device_timeout+0x134>
        if ((*device)->address == device_address) {
 8004b08:	689d      	ldr	r5, [r3, #8]
 8004b0a:	6829      	ldr	r1, [r5, #0]
 8004b0c:	428a      	cmp	r2, r1
 8004b0e:	d021      	beq.n	8004b54 <loraif_check_device_timeout+0xb4>
	_M_node = _M_node->_M_next;
 8004b10:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004b12:	4283      	cmp	r3, r0
 8004b14:	d1f8      	bne.n	8004b08 <loraif_check_device_timeout+0x68>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b16:	4b36      	ldr	r3, [pc, #216]	; (8004bf0 <loraif_check_device_timeout+0x150>)
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	4a36      	ldr	r2, [pc, #216]	; (8004bf4 <loraif_check_device_timeout+0x154>)
 8004b1c:	4936      	ldr	r1, [pc, #216]	; (8004bf8 <loraif_check_device_timeout+0x158>)
 8004b1e:	4837      	ldr	r0, [pc, #220]	; (8004bfc <loraif_check_device_timeout+0x15c>)
 8004b20:	f240 13ef 	movw	r3, #495	; 0x1ef
 8004b24:	f006 f982 	bl	800ae2c <LOG_DEBUG>
				if(err_dev != NULL){
 8004b28:	e7cb      	b.n	8004ac2 <loraif_check_device_timeout+0x22>
}
 8004b2a:	b007      	add	sp, #28
 8004b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(xQueueSend(q_wait_response, &wait_response, 5) != pdTRUE){
 8004b30:	6838      	ldr	r0, [r7, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	2205      	movs	r2, #5
 8004b36:	a904      	add	r1, sp, #16
 8004b38:	f7fc ffde 	bl	8001af8 <xQueueGenericSend>
 8004b3c:	2801      	cmp	r0, #1
 8004b3e:	d0c0      	beq.n	8004ac2 <loraif_check_device_timeout+0x22>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b40:	4b2f      	ldr	r3, [pc, #188]	; (8004c00 <loraif_check_device_timeout+0x160>)
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	492c      	ldr	r1, [pc, #176]	; (8004bf8 <loraif_check_device_timeout+0x158>)
 8004b46:	482d      	ldr	r0, [pc, #180]	; (8004bfc <loraif_check_device_timeout+0x15c>)
 8004b48:	f240 13a7 	movw	r3, #423	; 0x1a7
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	f006 f96d 	bl	800ae2c <LOG_DEBUG>
}
 8004b52:	e7b6      	b.n	8004ac2 <loraif_check_device_timeout+0x22>
					char *evt_data = NULL;
 8004b54:	2000      	movs	r0, #0
					asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004b56:	686b      	ldr	r3, [r5, #4]
 8004b58:	492a      	ldr	r1, [pc, #168]	; (8004c04 <loraif_check_device_timeout+0x164>)
					char *evt_data = NULL;
 8004b5a:	9005      	str	r0, [sp, #20]
					asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004b5c:	a805      	add	r0, sp, #20
 8004b5e:	f007 fb8f 	bl	800c280 <asiprintf>
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004b62:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8004c1c <loraif_check_device_timeout+0x17c>
					err_dev->err_count++;
 8004b66:	7a29      	ldrb	r1, [r5, #8]
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004b68:	f8db 3000 	ldr.w	r3, [fp]
					err_dev->err_count++;
 8004b6c:	3101      	adds	r1, #1
 8004b6e:	b2c9      	uxtb	r1, r1
 8004b70:	7229      	strb	r1, [r5, #8]
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004b72:	b14b      	cbz	r3, 8004b88 <loraif_check_device_timeout+0xe8>
 8004b74:	9a04      	ldr	r2, [sp, #16]
 8004b76:	2008      	movs	r0, #8
 8004b78:	6811      	ldr	r1, [r2, #0]
 8004b7a:	9a05      	ldr	r2, [sp, #20]
 8004b7c:	4798      	blx	r3
					if(err_dev->err_count >= max_not_resp){
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <loraif_check_device_timeout+0x168>)
 8004b80:	7a29      	ldrb	r1, [r5, #8]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	428b      	cmp	r3, r1
 8004b86:	d91a      	bls.n	8004bbe <loraif_check_device_timeout+0x11e>
					LOG_RET(TAG, "Device 0x%08x time = %lu, %d time not response. Queue size %d", (unsigned int)wait_response->address, dt, err_dev->err_count, uxQueueMessagesWaiting(q_wait_response));
 8004b88:	9b04      	ldr	r3, [sp, #16]
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	9103      	str	r1, [sp, #12]
 8004b90:	9202      	str	r2, [sp, #8]
 8004b92:	f7fd fd8f 	bl	80026b4 <uxQueueMessagesWaiting>
 8004b96:	9903      	ldr	r1, [sp, #12]
 8004b98:	9001      	str	r0, [sp, #4]
 8004b9a:	9100      	str	r1, [sp, #0]
 8004b9c:	4817      	ldr	r0, [pc, #92]	; (8004bfc <loraif_check_device_timeout+0x15c>)
 8004b9e:	9a02      	ldr	r2, [sp, #8]
 8004ba0:	491a      	ldr	r1, [pc, #104]	; (8004c0c <loraif_check_device_timeout+0x16c>)
 8004ba2:	4643      	mov	r3, r8
 8004ba4:	f006 f9fc 	bl	800afa0 <LOG_RET>
					if(evt_data != NULL) free(evt_data);
 8004ba8:	9805      	ldr	r0, [sp, #20]
 8004baa:	b108      	cbz	r0, 8004bb0 <loraif_check_device_timeout+0x110>
 8004bac:	f007 fbc4 	bl	800c338 <free>
					if(wait_response != NULL) free(wait_response);
 8004bb0:	9804      	ldr	r0, [sp, #16]
 8004bb2:	b108      	cbz	r0, 8004bb8 <loraif_check_device_timeout+0x118>
 8004bb4:	f007 fbc0 	bl	800c338 <free>
					wait_response = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9304      	str	r3, [sp, #16]
 8004bbc:	e781      	b.n	8004ac2 <loraif_check_device_timeout+0x22>
						if(fpeventhandler != NULL) fpeventhandler(LORA_REMOVE_DEVICE, wait_response->address, evt_data);
 8004bbe:	f8db 3000 	ldr.w	r3, [fp]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0e0      	beq.n	8004b88 <loraif_check_device_timeout+0xe8>
 8004bc6:	9a04      	ldr	r2, [sp, #16]
 8004bc8:	2007      	movs	r0, #7
 8004bca:	6811      	ldr	r1, [r2, #0]
 8004bcc:	9a05      	ldr	r2, [sp, #20]
 8004bce:	4798      	blx	r3
					LOG_RET(TAG, "Device 0x%08x time = %lu, %d time not response. Queue size %d", (unsigned int)wait_response->address, dt, err_dev->err_count, uxQueueMessagesWaiting(q_wait_response));
 8004bd0:	7a29      	ldrb	r1, [r5, #8]
 8004bd2:	e7d9      	b.n	8004b88 <loraif_check_device_timeout+0xe8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004bd4:	4b06      	ldr	r3, [pc, #24]	; (8004bf0 <loraif_check_device_timeout+0x150>)
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4a0d      	ldr	r2, [pc, #52]	; (8004c10 <loraif_check_device_timeout+0x170>)
 8004bda:	4907      	ldr	r1, [pc, #28]	; (8004bf8 <loraif_check_device_timeout+0x158>)
 8004bdc:	4807      	ldr	r0, [pc, #28]	; (8004bfc <loraif_check_device_timeout+0x15c>)
 8004bde:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 8004be2:	f006 f923 	bl	800ae2c <LOG_DEBUG>
				if(err_dev != NULL){
 8004be6:	e76c      	b.n	8004ac2 <loraif_check_device_timeout+0x22>
 8004be8:	2000b2b0 	.word	0x2000b2b0
 8004bec:	2000b28c 	.word	0x2000b28c
 8004bf0:	08010df4 	.word	0x08010df4
 8004bf4:	08010e68 	.word	0x08010e68
 8004bf8:	08010d14 	.word	0x08010d14
 8004bfc:	08010d30 	.word	0x08010d30
 8004c00:	08011004 	.word	0x08011004
 8004c04:	08011020 	.word	0x08011020
 8004c08:	2000b2a0 	.word	0x2000b2a0
 8004c0c:	08010fc4 	.word	0x08010fc4
 8004c10:	08010d54 	.word	0x08010d54
 8004c14:	2000b2a4 	.word	0x2000b2a4
 8004c18:	08010e3c 	.word	0x08010e3c
 8004c1c:	2000b2ac 	.word	0x2000b2ac

08004c20 <loraif_add_device>:
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c24:	b087      	sub	sp, #28
	pkt_json_t json;
 8004c26:	2500      	movs	r5, #0
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004c28:	4607      	mov	r7, r0
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004c2a:	2010      	movs	r0, #16
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004c2c:	4688      	mov	r8, r1
 8004c2e:	4616      	mov	r6, r2
	pkt_json_t json;
 8004c30:	9503      	str	r5, [sp, #12]
 8004c32:	f88d 5010 	strb.w	r5, [sp, #16]
 8004c36:	9505      	str	r5, [sp, #20]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004c38:	f007 fb76 	bl	800c328 <malloc>
 8004c3c:	4604      	mov	r4, r0
	err = json_get_object(jdata, &json, (char *)"name");
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	; (8004cb0 <loraif_add_device+0x90>)
    newdev->address = device_address;
 8004c40:	6027      	str	r7, [r4, #0]
	err = json_get_object(jdata, &json, (char *)"name");
 8004c42:	4640      	mov	r0, r8
    newdev->err_count = 0;
 8004c44:	7225      	strb	r5, [r4, #8]
    newdev->data = dev_data;
 8004c46:	60e6      	str	r6, [r4, #12]
	err = json_get_object(jdata, &json, (char *)"name");
 8004c48:	a903      	add	r1, sp, #12
 8004c4a:	f000 f8b1 	bl	8004db0 <json_get_object>
	if(err == PKT_ERR_OK)
 8004c4e:	b340      	cbz	r0, 8004ca2 <loraif_add_device+0x82>
	json_release_object(&json);
 8004c50:	a803      	add	r0, sp, #12
 8004c52:	f000 f9c5 	bl	8004fe0 <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004c56:	200c      	movs	r0, #12
 8004c58:	f007 faa0 	bl	800c19c <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8004c5c:	4f15      	ldr	r7, [pc, #84]	; (8004cb4 <loraif_add_device+0x94>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004c5e:	6084      	str	r4, [r0, #8]
 8004c60:	4639      	mov	r1, r7
 8004c62:	f007 faac 	bl	800c1be <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c66:	68bb      	ldr	r3, [r7, #8]
      { return iterator(this->_M_impl._M_node._M_next); }
 8004c68:	683d      	ldr	r5, [r7, #0]
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c6a:	3301      	adds	r3, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c6c:	42bd      	cmp	r5, r7
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	d012      	beq.n	8004c98 <loraif_add_device+0x78>
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c72:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8004cbc <loraif_add_device+0x9c>
 8004c76:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8004cc0 <loraif_add_device+0xa0>
	uint8_t i = 1;
 8004c7a:	2401      	movs	r4, #1
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c7c:	68ae      	ldr	r6, [r5, #8]
 8004c7e:	e9d6 3100 	ldrd	r3, r1, [r6]
 8004c82:	4622      	mov	r2, r4
 8004c84:	9100      	str	r1, [sp, #0]
 8004c86:	4640      	mov	r0, r8
 8004c88:	4649      	mov	r1, r9
 8004c8a:	f006 f853 	bl	800ad34 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004c8e:	682d      	ldr	r5, [r5, #0]
 8004c90:	3401      	adds	r4, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c92:	42bd      	cmp	r5, r7
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c94:	b2e4      	uxtb	r4, r4
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c96:	d1f1      	bne.n	8004c7c <loraif_add_device+0x5c>
	loraif_response_to_device();
 8004c98:	f7ff fec2 	bl	8004a20 <loraif_response_to_device>
}
 8004c9c:	b007      	add	sp, #28
 8004c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		asprintf(&newdev->name, "%s", json.value);
 8004ca2:	9a05      	ldr	r2, [sp, #20]
 8004ca4:	4904      	ldr	r1, [pc, #16]	; (8004cb8 <loraif_add_device+0x98>)
 8004ca6:	1d20      	adds	r0, r4, #4
 8004ca8:	f007 faea 	bl	800c280 <asiprintf>
 8004cac:	e7d0      	b.n	8004c50 <loraif_add_device+0x30>
 8004cae:	bf00      	nop
 8004cb0:	0801103c 	.word	0x0801103c
 8004cb4:	2000b28c 	.word	0x2000b28c
 8004cb8:	080119cc 	.word	0x080119cc
 8004cbc:	08011044 	.word	0x08011044
 8004cc0:	08010d30 	.word	0x08010d30

08004cc4 <loraif_remove_device>:
void loraif_remove_device(uint32_t device_address){
 8004cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004cc8:	4e26      	ldr	r6, [pc, #152]	; (8004d64 <loraif_remove_device+0xa0>)
 8004cca:	6834      	ldr	r4, [r6, #0]
    if (loraif_device_list.empty()) {
 8004ccc:	42b4      	cmp	r4, r6
void loraif_remove_device(uint32_t device_address){
 8004cce:	b083      	sub	sp, #12
    if (loraif_device_list.empty()) {
 8004cd0:	d03d      	beq.n	8004d4e <loraif_remove_device+0x8a>
        if ((*device)->address == device_address) {
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4282      	cmp	r2, r0
 8004cd8:	d00e      	beq.n	8004cf8 <loraif_remove_device+0x34>
	_M_node = _M_node->_M_next;
 8004cda:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 8004cdc:	42b4      	cmp	r4, r6
 8004cde:	d1f8      	bne.n	8004cd2 <loraif_remove_device+0xe>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ce0:	4b21      	ldr	r3, [pc, #132]	; (8004d68 <loraif_remove_device+0xa4>)
 8004ce2:	9300      	str	r3, [sp, #0]
 8004ce4:	4a21      	ldr	r2, [pc, #132]	; (8004d6c <loraif_remove_device+0xa8>)
 8004ce6:	4922      	ldr	r1, [pc, #136]	; (8004d70 <loraif_remove_device+0xac>)
 8004ce8:	4822      	ldr	r0, [pc, #136]	; (8004d74 <loraif_remove_device+0xb0>)
 8004cea:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8004cee:	f006 f89d 	bl	800ae2c <LOG_DEBUG>
}
 8004cf2:	b003      	add	sp, #12
 8004cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((*device)->name != NULL) free((*device)->name);
 8004cf8:	6858      	ldr	r0, [r3, #4]
 8004cfa:	b108      	cbz	r0, 8004d00 <loraif_remove_device+0x3c>
 8004cfc:	f007 fb1c 	bl	800c338 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004d00:	68b3      	ldr	r3, [r6, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004d02:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004d04:	3b01      	subs	r3, #1
 8004d06:	60b3      	str	r3, [r6, #8]
	__position._M_node->_M_unhook();
 8004d08:	f007 fa60 	bl	800c1cc <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	210c      	movs	r1, #12
 8004d10:	f007 fa42 	bl	800c198 <_ZdlPvj>
    if((*device) != NULL) free((*device));
 8004d14:	68a0      	ldr	r0, [r4, #8]
 8004d16:	b108      	cbz	r0, 8004d1c <loraif_remove_device+0x58>
 8004d18:	f007 fb0e 	bl	800c338 <free>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004d1c:	6835      	ldr	r5, [r6, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d1e:	42b5      	cmp	r5, r6
 8004d20:	d0e7      	beq.n	8004cf2 <loraif_remove_device+0x2e>
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004d22:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004d7c <loraif_remove_device+0xb8>
 8004d26:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8004d74 <loraif_remove_device+0xb0>
	uint8_t i = 1;
 8004d2a:	2401      	movs	r4, #1
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004d2c:	68af      	ldr	r7, [r5, #8]
 8004d2e:	e9d7 3100 	ldrd	r3, r1, [r7]
 8004d32:	4622      	mov	r2, r4
 8004d34:	9100      	str	r1, [sp, #0]
 8004d36:	4640      	mov	r0, r8
 8004d38:	4649      	mov	r1, r9
 8004d3a:	f005 fffb 	bl	800ad34 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004d3e:	682d      	ldr	r5, [r5, #0]
 8004d40:	3401      	adds	r4, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d42:	42b5      	cmp	r5, r6
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004d44:	b2e4      	uxtb	r4, r4
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d46:	d1f1      	bne.n	8004d2c <loraif_remove_device+0x68>
}
 8004d48:	b003      	add	sp, #12
 8004d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d4e:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <loraif_remove_device+0xa4>)
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4a09      	ldr	r2, [pc, #36]	; (8004d78 <loraif_remove_device+0xb4>)
 8004d54:	4906      	ldr	r1, [pc, #24]	; (8004d70 <loraif_remove_device+0xac>)
 8004d56:	4807      	ldr	r0, [pc, #28]	; (8004d74 <loraif_remove_device+0xb0>)
 8004d58:	f240 13c7 	movw	r3, #455	; 0x1c7
 8004d5c:	f006 f866 	bl	800ae2c <LOG_DEBUG>
        return;
 8004d60:	e7c7      	b.n	8004cf2 <loraif_remove_device+0x2e>
 8004d62:	bf00      	nop
 8004d64:	2000b28c 	.word	0x2000b28c
 8004d68:	0801106c 	.word	0x0801106c
 8004d6c:	08010e68 	.word	0x08010e68
 8004d70:	08010d14 	.word	0x08010d14
 8004d74:	08010d30 	.word	0x08010d30
 8004d78:	08010d54 	.word	0x08010d54
 8004d7c:	08011044 	.word	0x08011044

08004d80 <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 8004d80:	4b02      	ldr	r3, [pc, #8]	; (8004d8c <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 8004d82:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8004d84:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8004d88:	609a      	str	r2, [r3, #8]
        return NULL;
    }

    return (*device);

}
 8004d8a:	4770      	bx	lr
 8004d8c:	2000b28c 	.word	0x2000b28c

08004d90 <_GLOBAL__sub_D_loraif>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004d92:	4d06      	ldr	r5, [pc, #24]	; (8004dac <_GLOBAL__sub_D_loraif+0x1c>)
 8004d94:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 8004d96:	42ac      	cmp	r4, r5
 8004d98:	d006      	beq.n	8004da8 <_GLOBAL__sub_D_loraif+0x18>
 8004d9a:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8004d9c:	6824      	ldr	r4, [r4, #0]
 8004d9e:	210c      	movs	r1, #12
 8004da0:	f007 f9fa 	bl	800c198 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8004da4:	42ac      	cmp	r4, r5
 8004da6:	d1f8      	bne.n	8004d9a <_GLOBAL__sub_D_loraif+0xa>
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	2000b28c 	.word	0x2000b28c

08004db0 <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 8004db0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004db4:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004db6:	2900      	cmp	r1, #0
 8004db8:	d079      	beq.n	8004eae <json_get_object+0xfe>
 8004dba:	4614      	mov	r4, r2
 8004dbc:	2a00      	cmp	r2, #0
 8004dbe:	d076      	beq.n	8004eae <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004dc0:	7803      	ldrb	r3, [r0, #0]
 8004dc2:	2b7b      	cmp	r3, #123	; 0x7b
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	d166      	bne.n	8004e96 <json_get_object+0xe6>
 8004dc8:	460e      	mov	r6, r1
	int src_len = strlen(src);
 8004dca:	f7fb fa1b 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004dce:	182b      	adds	r3, r5, r0
	int src_len = strlen(src);
 8004dd0:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004dd2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004dd6:	2b7d      	cmp	r3, #125	; 0x7d
 8004dd8:	d15d      	bne.n	8004e96 <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 8004dda:	4622      	mov	r2, r4
 8004ddc:	4977      	ldr	r1, [pc, #476]	; (8004fbc <json_get_object+0x20c>)
 8004dde:	a805      	add	r0, sp, #20
 8004de0:	f007 fa4e 	bl	800c280 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8004de4:	9905      	ldr	r1, [sp, #20]
 8004de6:	9103      	str	r1, [sp, #12]
 8004de8:	4628      	mov	r0, r5
 8004dea:	f008 fa3f 	bl	800d26c <strstr>
	free(tmp);
 8004dee:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 8004df0:	4604      	mov	r4, r0
	free(tmp);
 8004df2:	4608      	mov	r0, r1
 8004df4:	f007 faa0 	bl	800c338 <free>
	if(pkstart == NULL){
 8004df8:	2c00      	cmp	r4, #0
 8004dfa:	f000 80b3 	beq.w	8004f64 <json_get_object+0x1b4>
		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 8004dfe:	f104 0801 	add.w	r8, r4, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004e02:	4640      	mov	r0, r8
 8004e04:	f7fb f9fe 	bl	8000204 <strlen>
 8004e08:	4623      	mov	r3, r4
 8004e0a:	2400      	movs	r4, #0
 8004e0c:	e004      	b.n	8004e18 <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 8004e0e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004e12:	2a22      	cmp	r2, #34	; 0x22
 8004e14:	d002      	beq.n	8004e1c <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004e16:	3401      	adds	r4, #1
 8004e18:	42a0      	cmp	r0, r4
 8004e1a:	dcf8      	bgt.n	8004e0e <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 8004e1c:	1c60      	adds	r0, r4, #1
 8004e1e:	f007 fa83 	bl	800c328 <malloc>
 8004e22:	4681      	mov	r9, r0
 8004e24:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 8004e26:	2800      	cmp	r0, #0
 8004e28:	f000 80a9 	beq.w	8004f7e <json_get_object+0x1ce>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 8004e2c:	4622      	mov	r2, r4
 8004e2e:	4641      	mov	r1, r8
 8004e30:	f007 fa8a 	bl	800c348 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004e34:	1ca3      	adds	r3, r4, #2
	dest->key[key_len] = '\0';
 8004e36:	2200      	movs	r2, #0
 8004e38:	f809 2004 	strb.w	r2, [r9, r4]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004e3c:	f818 2003 	ldrb.w	r2, [r8, r3]
 8004e40:	2a7b      	cmp	r2, #123	; 0x7b
 8004e42:	eb08 0903 	add.w	r9, r8, r3
 8004e46:	d03e      	beq.n	8004ec6 <json_get_object+0x116>
		dest->leaf = true;
 8004e48:	2201      	movs	r2, #1
 8004e4a:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 8004e4c:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004e50:	2b22      	cmp	r3, #34	; 0x22
 8004e52:	d06d      	beq.n	8004f30 <json_get_object+0x180>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004e54:	4648      	mov	r0, r9
 8004e56:	f7fb f9d5 	bl	8000204 <strlen>
 8004e5a:	2400      	movs	r4, #0
 8004e5c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8004e60:	e006      	b.n	8004e70 <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 8004e62:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004e66:	2b7d      	cmp	r3, #125	; 0x7d
 8004e68:	d004      	beq.n	8004e74 <json_get_object+0xc4>
 8004e6a:	2b2c      	cmp	r3, #44	; 0x2c
 8004e6c:	d002      	beq.n	8004e74 <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004e6e:	3401      	adds	r4, #1
 8004e70:	42a0      	cmp	r0, r4
 8004e72:	dcf6      	bgt.n	8004e62 <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 8004e74:	2c00      	cmp	r4, #0
 8004e76:	d06b      	beq.n	8004f50 <json_get_object+0x1a0>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 8004e78:	1c60      	adds	r0, r4, #1
 8004e7a:	f007 fa55 	bl	800c328 <malloc>
 8004e7e:	4605      	mov	r5, r0
 8004e80:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004e82:	2800      	cmp	r0, #0
 8004e84:	f000 808f 	beq.w	8004fa6 <json_get_object+0x1f6>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004e88:	4622      	mov	r2, r4
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	f007 fa5c 	bl	800c348 <memcpy>
		dest->value[val_len] = '\0';
 8004e90:	2000      	movs	r0, #0
 8004e92:	5528      	strb	r0, [r5, r4]
 8004e94:	e008      	b.n	8004ea8 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004e96:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <json_get_object+0x210>)
 8004e98:	484a      	ldr	r0, [pc, #296]	; (8004fc4 <json_get_object+0x214>)
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	4a4a      	ldr	r2, [pc, #296]	; (8004fc8 <json_get_object+0x218>)
 8004e9e:	494b      	ldr	r1, [pc, #300]	; (8004fcc <json_get_object+0x21c>)
 8004ea0:	232b      	movs	r3, #43	; 0x2b
 8004ea2:	f005 ffc3 	bl	800ae2c <LOG_DEBUG>
		return ret;
 8004ea6:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 8004ea8:	b007      	add	sp, #28
 8004eaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004eae:	4b44      	ldr	r3, [pc, #272]	; (8004fc0 <json_get_object+0x210>)
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	4a47      	ldr	r2, [pc, #284]	; (8004fd0 <json_get_object+0x220>)
 8004eb4:	4945      	ldr	r1, [pc, #276]	; (8004fcc <json_get_object+0x21c>)
 8004eb6:	4843      	ldr	r0, [pc, #268]	; (8004fc4 <json_get_object+0x214>)
 8004eb8:	2326      	movs	r3, #38	; 0x26
 8004eba:	f005 ffb7 	bl	800ae2c <LOG_DEBUG>
		return ret;
 8004ebe:	2001      	movs	r0, #1
}
 8004ec0:	b007      	add	sp, #28
 8004ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 8004ec6:	7931      	ldrb	r1, [r6, #4]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d1bf      	bne.n	8004e4c <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 8004ecc:	eba8 0805 	sub.w	r8, r8, r5
 8004ed0:	4444      	add	r4, r8
 8004ed2:	f104 0c02 	add.w	ip, r4, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004ed6:	4567      	cmp	r7, ip
 8004ed8:	dd4e      	ble.n	8004f78 <json_get_object+0x1c8>
 8004eda:	3401      	adds	r4, #1
 8004edc:	4425      	add	r5, r4
 8004ede:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 8004ee0:	4608      	mov	r0, r1
 8004ee2:	e007      	b.n	8004ef4 <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8004ee4:	2a7d      	cmp	r2, #125	; 0x7d
 8004ee6:	bf08      	it	eq
 8004ee8:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 8004eea:	4281      	cmp	r1, r0
 8004eec:	d008      	beq.n	8004f00 <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004eee:	3301      	adds	r3, #1
 8004ef0:	429f      	cmp	r7, r3
 8004ef2:	d018      	beq.n	8004f26 <json_get_object+0x176>
			if(src_cpy[ivend] == '{') l_brace++;
 8004ef4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004ef8:	2a7b      	cmp	r2, #123	; 0x7b
 8004efa:	d1f3      	bne.n	8004ee4 <json_get_object+0x134>
 8004efc:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 8004efe:	e7f4      	b.n	8004eea <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 8004f00:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8004f04:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 8004f06:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 8004f08:	f007 fa0e 	bl	800c328 <malloc>
 8004f0c:	4604      	mov	r4, r0
 8004f0e:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d03e      	beq.n	8004f92 <json_get_object+0x1e2>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004f14:	463a      	mov	r2, r7
 8004f16:	4649      	mov	r1, r9
 8004f18:	f007 fa16 	bl	800c348 <memcpy>
		dest->value[val_len] = '\0';
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	55e0      	strb	r0, [r4, r7]
}
 8004f20:	b007      	add	sp, #28
 8004f22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 8004f26:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 8004f2a:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 8004f2c:	3701      	adds	r7, #1
 8004f2e:	e7eb      	b.n	8004f08 <json_get_object+0x158>
			pvstart++;
 8004f30:	f109 0501 	add.w	r5, r9, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004f34:	4628      	mov	r0, r5
 8004f36:	f7fb f965 	bl	8000204 <strlen>
 8004f3a:	2400      	movs	r4, #0
 8004f3c:	e004      	b.n	8004f48 <json_get_object+0x198>
				if(pvstart[val_len] == '"') break;
 8004f3e:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8004f42:	2b22      	cmp	r3, #34	; 0x22
 8004f44:	d002      	beq.n	8004f4c <json_get_object+0x19c>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004f46:	3401      	adds	r4, #1
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	dcf8      	bgt.n	8004f3e <json_get_object+0x18e>
 8004f4c:	46a9      	mov	r9, r5
 8004f4e:	e791      	b.n	8004e74 <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f50:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <json_get_object+0x210>)
 8004f52:	481c      	ldr	r0, [pc, #112]	; (8004fc4 <json_get_object+0x214>)
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <json_get_object+0x224>)
 8004f58:	491c      	ldr	r1, [pc, #112]	; (8004fcc <json_get_object+0x21c>)
 8004f5a:	2366      	movs	r3, #102	; 0x66
 8004f5c:	f005 ff66 	bl	800ae2c <LOG_DEBUG>
			return ret;
 8004f60:	2008      	movs	r0, #8
 8004f62:	e7a1      	b.n	8004ea8 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f64:	4b16      	ldr	r3, [pc, #88]	; (8004fc0 <json_get_object+0x210>)
 8004f66:	4817      	ldr	r0, [pc, #92]	; (8004fc4 <json_get_object+0x214>)
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <json_get_object+0x228>)
 8004f6c:	4917      	ldr	r1, [pc, #92]	; (8004fcc <json_get_object+0x21c>)
 8004f6e:	2336      	movs	r3, #54	; 0x36
 8004f70:	f005 ff5c 	bl	800ae2c <LOG_DEBUG>
		return ret;
 8004f74:	2004      	movs	r0, #4
 8004f76:	e797      	b.n	8004ea8 <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004f78:	2701      	movs	r7, #1
 8004f7a:	2002      	movs	r0, #2
 8004f7c:	e7c4      	b.n	8004f08 <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <json_get_object+0x210>)
 8004f80:	4810      	ldr	r0, [pc, #64]	; (8004fc4 <json_get_object+0x214>)
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	4a15      	ldr	r2, [pc, #84]	; (8004fdc <json_get_object+0x22c>)
 8004f86:	4911      	ldr	r1, [pc, #68]	; (8004fcc <json_get_object+0x21c>)
 8004f88:	2344      	movs	r3, #68	; 0x44
 8004f8a:	f005 ff4f 	bl	800ae2c <LOG_DEBUG>
		return ret;
 8004f8e:	2010      	movs	r0, #16
 8004f90:	e78a      	b.n	8004ea8 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f92:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <json_get_object+0x210>)
 8004f94:	480b      	ldr	r0, [pc, #44]	; (8004fc4 <json_get_object+0x214>)
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <json_get_object+0x22c>)
 8004f9a:	490c      	ldr	r1, [pc, #48]	; (8004fcc <json_get_object+0x21c>)
 8004f9c:	237e      	movs	r3, #126	; 0x7e
 8004f9e:	f005 ff45 	bl	800ae2c <LOG_DEBUG>
			return ret;
 8004fa2:	2010      	movs	r0, #16
 8004fa4:	e780      	b.n	8004ea8 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <json_get_object+0x210>)
 8004fa8:	4806      	ldr	r0, [pc, #24]	; (8004fc4 <json_get_object+0x214>)
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4a0b      	ldr	r2, [pc, #44]	; (8004fdc <json_get_object+0x22c>)
 8004fae:	4907      	ldr	r1, [pc, #28]	; (8004fcc <json_get_object+0x21c>)
 8004fb0:	236c      	movs	r3, #108	; 0x6c
 8004fb2:	f005 ff3b 	bl	800ae2c <LOG_DEBUG>
			return ret;
 8004fb6:	2010      	movs	r0, #16
 8004fb8:	e776      	b.n	8004ea8 <json_get_object+0xf8>
 8004fba:	bf00      	nop
 8004fbc:	08011178 	.word	0x08011178
 8004fc0:	08011168 	.word	0x08011168
 8004fc4:	08011158 	.word	0x08011158
 8004fc8:	08011180 	.word	0x08011180
 8004fcc:	08010d14 	.word	0x08010d14
 8004fd0:	0801113c 	.word	0x0801113c
 8004fd4:	080111f8 	.word	0x080111f8
 8004fd8:	080111a4 	.word	0x080111a4
 8004fdc:	080111d8 	.word	0x080111d8

08004fe0 <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 8004fe0:	b510      	push	{r4, lr}
 8004fe2:	4604      	mov	r4, r0
	if(json->key != NULL) {
 8004fe4:	6800      	ldr	r0, [r0, #0]
 8004fe6:	b118      	cbz	r0, 8004ff0 <json_release_object+0x10>
		free(json->key);
 8004fe8:	f007 f9a6 	bl	800c338 <free>
		json->key = NULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	6023      	str	r3, [r4, #0]
	}
	if(json->value != NULL) {
 8004ff0:	68a0      	ldr	r0, [r4, #8]
 8004ff2:	b118      	cbz	r0, 8004ffc <json_release_object+0x1c>
		free(json->value);
 8004ff4:	f007 f9a0 	bl	800c338 <free>
		json->value = NULL;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60a3      	str	r3, [r4, #8]
	}
	json->leaf = false;
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop

08005004 <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 8005004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	4688      	mov	r8, r1
 800500a:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 800500c:	4924      	ldr	r1, [pc, #144]	; (80050a0 <parse_packet+0x9c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 800500e:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 8005010:	f008 f92c 	bl	800d26c <strstr>
	if(pvstart == NULL){
 8005014:	b318      	cbz	r0, 800505e <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 8005016:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8005018:	4604      	mov	r4, r0
 800501a:	1c78      	adds	r0, r7, #1
 800501c:	f007 f984 	bl	800c328 <malloc>
 8005020:	4606      	mov	r6, r0
 8005022:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 8005026:	b330      	cbz	r0, 8005076 <parse_packet+0x72>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8005028:	4629      	mov	r1, r5
 800502a:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 800502c:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 800502e:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8005030:	f007 f98a 	bl	800c348 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 8005034:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 8005036:	4620      	mov	r0, r4
 8005038:	f7fb f8e4 	bl	8000204 <strlen>
 800503c:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 800503e:	3001      	adds	r0, #1
 8005040:	f007 f972 	bl	800c328 <malloc>
 8005044:	4607      	mov	r7, r0
 8005046:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 800504a:	b1f0      	cbz	r0, 800508a <parse_packet+0x86>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 800504c:	4621      	mov	r1, r4
 800504e:	4632      	mov	r2, r6
 8005050:	f007 f97a 	bl	800c348 <memcpy>
	dest->data_str[data_len] = '\0';
 8005054:	55bd      	strb	r5, [r7, r6]

	return ret;
 8005056:	4628      	mov	r0, r5
}
 8005058:	b002      	add	sp, #8
 800505a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800505e:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <parse_packet+0xa0>)
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	4a11      	ldr	r2, [pc, #68]	; (80050a8 <parse_packet+0xa4>)
 8005064:	4911      	ldr	r1, [pc, #68]	; (80050ac <parse_packet+0xa8>)
 8005066:	4812      	ldr	r0, [pc, #72]	; (80050b0 <parse_packet+0xac>)
 8005068:	23a0      	movs	r3, #160	; 0xa0
 800506a:	f005 fedf 	bl	800ae2c <LOG_DEBUG>
		return ret;
 800506e:	2002      	movs	r0, #2
}
 8005070:	b002      	add	sp, #8
 8005072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <parse_packet+0xa0>)
 8005078:	480d      	ldr	r0, [pc, #52]	; (80050b0 <parse_packet+0xac>)
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <parse_packet+0xb0>)
 800507e:	490b      	ldr	r1, [pc, #44]	; (80050ac <parse_packet+0xa8>)
 8005080:	23ab      	movs	r3, #171	; 0xab
 8005082:	f005 fed3 	bl	800ae2c <LOG_DEBUG>
		return ret;
 8005086:	2010      	movs	r0, #16
 8005088:	e7e6      	b.n	8005058 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <parse_packet+0xa0>)
 800508c:	4808      	ldr	r0, [pc, #32]	; (80050b0 <parse_packet+0xac>)
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <parse_packet+0xb0>)
 8005092:	4906      	ldr	r1, [pc, #24]	; (80050ac <parse_packet+0xa8>)
 8005094:	23b8      	movs	r3, #184	; 0xb8
 8005096:	f005 fec9 	bl	800ae2c <LOG_DEBUG>
		return ret;
 800509a:	2010      	movs	r0, #16
 800509c:	e7dc      	b.n	8005058 <parse_packet+0x54>
 800509e:	bf00      	nop
 80050a0:	0801120c 	.word	0x0801120c
 80050a4:	08011224 	.word	0x08011224
 80050a8:	08011210 	.word	0x08011210
 80050ac:	08010d14 	.word	0x08010d14
 80050b0:	08011158 	.word	0x08011158
 80050b4:	080111d8 	.word	0x080111d8

080050b8 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 80050b8:	b510      	push	{r4, lr}
 80050ba:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) {
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	b118      	cbz	r0, 80050c8 <release_packet+0x10>
		free(packet->cmd_str);
 80050c0:	f007 f93a 	bl	800c338 <free>
		packet->cmd_str = NULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	6023      	str	r3, [r4, #0]
	}
	if(packet->data_str != NULL) {
 80050c8:	6860      	ldr	r0, [r4, #4]
 80050ca:	b118      	cbz	r0, 80050d4 <release_packet+0x1c>
		free(packet->data_str);
 80050cc:	f007 f934 	bl	800c338 <free>
		packet->data_str = NULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	6063      	str	r3, [r4, #4]
	}

	return PKT_ERR_OK;
}
 80050d4:	2000      	movs	r0, #0
 80050d6:	bd10      	pop	{r4, pc}

080050d8 <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 80050da:	1e16      	subs	r6, r2, #0
 80050dc:	dd0f      	ble.n	80050fe <str_to_cmd+0x26>
 80050de:	4607      	mov	r7, r0
 80050e0:	1f0d      	subs	r5, r1, #4
 80050e2:	2400      	movs	r4, #0
 80050e4:	e002      	b.n	80050ec <str_to_cmd+0x14>
 80050e6:	3401      	adds	r4, #1
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d008      	beq.n	80050fe <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 80050ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80050f0:	4638      	mov	r0, r7
 80050f2:	f7fb f87d 	bl	80001f0 <strcmp>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d1f5      	bne.n	80050e6 <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 80050fa:	4620      	mov	r0, r4
 80050fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 80050fe:	2400      	movs	r4, #0
}
 8005100:	4620      	mov	r0, r4
 8005102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005104 <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 8005104:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop

0800510c <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 800510c:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8005110:	2300      	movs	r3, #0
 8005112:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8005116:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 800511a:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 800511e:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 8005120:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8005122:	9a01      	ldr	r2, [sp, #4]
 8005124:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 8005128:	6142      	str	r2, [r0, #20]
	_it = itpin;
 800512a:	8103      	strh	r3, [r0, #8]
}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop

08005130 <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8005130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005134:	4604      	mov	r4, r0
 8005136:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 8005138:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 800513a:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 800513c:	4698      	mov	r8, r3
 800513e:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 8005140:	f001 ffd2 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 8005144:	6920      	ldr	r0, [r4, #16]
 8005146:	f001 ffcf 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 800514a:	6960      	ldr	r0, [r4, #20]
 800514c:	f001 ffcc 	bl	80070e8 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 8005150:	2207      	movs	r2, #7
 8005152:	88a1      	ldrh	r1, [r4, #4]
 8005154:	68e0      	ldr	r0, [r4, #12]
 8005156:	f002 f82d 	bl	80071b4 <gpio_set_mode>
	gpio_set(_csport, _cs);
 800515a:	88a1      	ldrh	r1, [r4, #4]
 800515c:	68e0      	ldr	r0, [r4, #12]
 800515e:	f002 f90b 	bl	8007378 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 8005162:	2207      	movs	r2, #7
 8005164:	88e1      	ldrh	r1, [r4, #6]
 8005166:	6920      	ldr	r0, [r4, #16]
 8005168:	f002 f824 	bl	80071b4 <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 800516c:	88e1      	ldrh	r1, [r4, #6]
 800516e:	6920      	ldr	r0, [r4, #16]
 8005170:	f002 f90a 	bl	8007388 <gpio_reset>
    delay_ms(50);
 8005174:	2032      	movs	r0, #50	; 0x32
 8005176:	f003 f9e5 	bl	8008544 <delay_ms>
    gpio_set(_rstport, _rst);
 800517a:	88e1      	ldrh	r1, [r4, #6]
 800517c:	6920      	ldr	r0, [r4, #16]
 800517e:	f002 f8fb 	bl	8007378 <gpio_set>
    delay_ms(50);
 8005182:	2032      	movs	r0, #50	; 0x32
 8005184:	f003 f9de 	bl	8008544 <delay_ms>

    if(_it >= 0 && _itport != NULL){
 8005188:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 800518c:	2a00      	cmp	r2, #0
 800518e:	db0e      	blt.n	80051ae <_ZN6sx127x4initEP3spilhm+0x7e>
 8005190:	6961      	ldr	r1, [r4, #20]
 8005192:	b161      	cbz	r1, 80051ae <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 8005194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	ad04      	add	r5, sp, #16
 800519a:	4628      	mov	r0, r5
 800519c:	b292      	uxth	r2, r2
 800519e:	2301      	movs	r3, #1
 80051a0:	f001 fae0 	bl	8006764 <exti_init>
		gpio_set_pulldown(_itport, _it);
 80051a4:	8921      	ldrh	r1, [r4, #8]
 80051a6:	6960      	ldr	r0, [r4, #20]
 80051a8:	f002 f8d8 	bl	800735c <gpio_set_pulldown>
 80051ac:	e000      	b.n	80051b0 <_ZN6sx127x4initEP3spilhm+0x80>
 80051ae:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 80051b0:	88a1      	ldrh	r1, [r4, #4]
 80051b2:	68e0      	ldr	r0, [r4, #12]
 80051b4:	f002 f8e8 	bl	8007388 <gpio_reset>

  txdt = address;
 80051b8:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051ba:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80051bc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051c0:	f10d 020f 	add.w	r2, sp, #15
 80051c4:	2301      	movs	r3, #1
 80051c6:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051c8:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051ca:	f002 fcfd 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051ce:	9600      	str	r6, [sp, #0]
 80051d0:	f10d 030e 	add.w	r3, sp, #14
 80051d4:	6821      	ldr	r1, [r4, #0]
 80051d6:	f10d 020f 	add.w	r2, sp, #15
 80051da:	4628      	mov	r0, r5
  txdt = value;
 80051dc:	2700      	movs	r7, #0
 80051de:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051e2:	f002 fd9d 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 80051e6:	88a1      	ldrh	r1, [r4, #4]
 80051e8:	68e0      	ldr	r0, [r4, #12]
 80051ea:	f002 f8c5 	bl	8007378 <gpio_set>

  return response;
 80051ee:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 80051f2:	2b12      	cmp	r3, #18
 80051f4:	d003      	beq.n	80051fe <_ZN6sx127x4initEP3spilhm+0xce>
 80051f6:	4638      	mov	r0, r7
}
 80051f8:	b006      	add	sp, #24
 80051fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 80051fe:	88a1      	ldrh	r1, [r4, #4]
 8005200:	68e0      	ldr	r0, [r4, #12]
 8005202:	f002 f8c1 	bl	8007388 <gpio_reset>
  txdt = address;
 8005206:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 800520a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800520c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005210:	4633      	mov	r3, r6
 8005212:	f10d 020f 	add.w	r2, sp, #15
 8005216:	4628      	mov	r0, r5
 8005218:	f002 fcd6 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800521c:	9600      	str	r6, [sp, #0]
  txdt = value;
 800521e:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005222:	f10d 030e 	add.w	r3, sp, #14
 8005226:	f10d 020f 	add.w	r2, sp, #15
 800522a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800522c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005230:	4628      	mov	r0, r5
 8005232:	f002 fd75 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005236:	88a1      	ldrh	r1, [r4, #4]
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	f002 f89d 	bl	8007378 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800523e:	ea4f 71e9 	mov.w	r1, r9, asr #31
 8005242:	04c9      	lsls	r1, r1, #19
 8005244:	4a9e      	ldr	r2, [pc, #632]	; (80054c0 <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 8005246:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800524a:	2300      	movs	r3, #0
 800524c:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 8005250:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 8005254:	f7fb fd38 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 8005258:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800525a:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 800525c:	68e0      	ldr	r0, [r4, #12]
 800525e:	f002 f893 	bl	8007388 <gpio_reset>
  txdt = address;
 8005262:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005266:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005268:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800526c:	4633      	mov	r3, r6
 800526e:	f10d 020f 	add.w	r2, sp, #15
 8005272:	4628      	mov	r0, r5
 8005274:	f002 fca8 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005278:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 800527a:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800527e:	f10d 030e 	add.w	r3, sp, #14
 8005282:	f10d 020f 	add.w	r2, sp, #15
 8005286:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8005288:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800528c:	4628      	mov	r0, r5
 800528e:	f002 fd47 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005292:	88a1      	ldrh	r1, [r4, #4]
 8005294:	68e0      	ldr	r0, [r4, #12]
 8005296:	f002 f86f 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 800529a:	88a1      	ldrh	r1, [r4, #4]
 800529c:	68e0      	ldr	r0, [r4, #12]
 800529e:	f002 f873 	bl	8007388 <gpio_reset>
  txdt = address;
 80052a2:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052a6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052a8:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052ac:	4633      	mov	r3, r6
 80052ae:	f10d 020f 	add.w	r2, sp, #15
 80052b2:	4628      	mov	r0, r5
 80052b4:	f002 fc88 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052b8:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80052ba:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052be:	f10d 030e 	add.w	r3, sp, #14
 80052c2:	f10d 020f 	add.w	r2, sp, #15
 80052c6:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80052c8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052cc:	4628      	mov	r0, r5
 80052ce:	f002 fd27 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052d2:	88a1      	ldrh	r1, [r4, #4]
 80052d4:	68e0      	ldr	r0, [r4, #12]
 80052d6:	f002 f84f 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 80052da:	88a1      	ldrh	r1, [r4, #4]
 80052dc:	68e0      	ldr	r0, [r4, #12]
 80052de:	f002 f853 	bl	8007388 <gpio_reset>
  txdt = address;
 80052e2:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052e6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052e8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052ec:	4633      	mov	r3, r6
 80052ee:	f10d 020f 	add.w	r2, sp, #15
 80052f2:	4628      	mov	r0, r5
 80052f4:	f002 fc68 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052f8:	9600      	str	r6, [sp, #0]
 80052fa:	f10d 030e 	add.w	r3, sp, #14
 80052fe:	f10d 020f 	add.w	r2, sp, #15
 8005302:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8005304:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005308:	4628      	mov	r0, r5
 800530a:	f002 fd09 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800530e:	88a1      	ldrh	r1, [r4, #4]
 8005310:	68e0      	ldr	r0, [r4, #12]
 8005312:	f002 f831 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005316:	88a1      	ldrh	r1, [r4, #4]
 8005318:	68e0      	ldr	r0, [r4, #12]
 800531a:	f002 f835 	bl	8007388 <gpio_reset>
  txdt = address;
 800531e:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005322:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005324:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005328:	4633      	mov	r3, r6
 800532a:	f10d 020f 	add.w	r2, sp, #15
 800532e:	4628      	mov	r0, r5
 8005330:	f002 fc4a 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005334:	9600      	str	r6, [sp, #0]
 8005336:	f10d 030e 	add.w	r3, sp, #14
 800533a:	f10d 020f 	add.w	r2, sp, #15
 800533e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005340:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005344:	4628      	mov	r0, r5
 8005346:	f002 fceb 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800534a:	88a1      	ldrh	r1, [r4, #4]
 800534c:	68e0      	ldr	r0, [r4, #12]
 800534e:	f002 f813 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005352:	88a1      	ldrh	r1, [r4, #4]
 8005354:	68e0      	ldr	r0, [r4, #12]
 8005356:	f002 f817 	bl	8007388 <gpio_reset>
  txdt = address;
 800535a:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 800535e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005360:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005364:	4633      	mov	r3, r6
 8005366:	f10d 020f 	add.w	r2, sp, #15
 800536a:	4628      	mov	r0, r5
 800536c:	f002 fc2c 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005370:	9600      	str	r6, [sp, #0]
 8005372:	f10d 030e 	add.w	r3, sp, #14
 8005376:	f10d 020f 	add.w	r2, sp, #15
 800537a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800537c:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005380:	4628      	mov	r0, r5
 8005382:	f002 fccd 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005386:	88a1      	ldrh	r1, [r4, #4]
 8005388:	68e0      	ldr	r0, [r4, #12]
 800538a:	f001 fff5 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 800538e:	88a1      	ldrh	r1, [r4, #4]
 8005390:	68e0      	ldr	r0, [r4, #12]
 8005392:	f001 fff9 	bl	8007388 <gpio_reset>
  txdt = address;
 8005396:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 800539a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800539c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053a0:	4633      	mov	r3, r6
 80053a2:	f10d 020f 	add.w	r2, sp, #15
 80053a6:	4628      	mov	r0, r5
 80053a8:	f002 fc0e 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053ac:	9600      	str	r6, [sp, #0]
 80053ae:	f10d 030e 	add.w	r3, sp, #14
 80053b2:	f10d 020f 	add.w	r2, sp, #15
 80053b6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80053b8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053bc:	4628      	mov	r0, r5
 80053be:	f002 fcaf 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053c2:	88a1      	ldrh	r1, [r4, #4]
 80053c4:	68e0      	ldr	r0, [r4, #12]
 80053c6:	f001 ffd7 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 80053ca:	88a1      	ldrh	r1, [r4, #4]
 80053cc:	68e0      	ldr	r0, [r4, #12]
  return response;
 80053ce:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 80053d2:	f001 ffd9 	bl	8007388 <gpio_reset>
  txdt = address;
 80053d6:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053da:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053dc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053e0:	4633      	mov	r3, r6
 80053e2:	f10d 020f 	add.w	r2, sp, #15
 80053e6:	4628      	mov	r0, r5
 80053e8:	f002 fbee 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053ec:	9600      	str	r6, [sp, #0]
 80053ee:	f10d 030e 	add.w	r3, sp, #14
 80053f2:	f10d 020f 	add.w	r2, sp, #15
 80053f6:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 80053f8:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053fc:	4628      	mov	r0, r5
  txdt = value;
 80053fe:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005402:	f002 fc8d 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005406:	88a1      	ldrh	r1, [r4, #4]
 8005408:	68e0      	ldr	r0, [r4, #12]
 800540a:	f001 ffb5 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 800540e:	88a1      	ldrh	r1, [r4, #4]
 8005410:	68e0      	ldr	r0, [r4, #12]
 8005412:	f001 ffb9 	bl	8007388 <gpio_reset>
  txdt = address;
 8005416:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005418:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800541a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800541e:	4633      	mov	r3, r6
 8005420:	f10d 020f 	add.w	r2, sp, #15
 8005424:	4628      	mov	r0, r5
 8005426:	f002 fbcf 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800542a:	9600      	str	r6, [sp, #0]
  txdt = value;
 800542c:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800542e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005430:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005434:	4628      	mov	r0, r5
 8005436:	f10d 030e 	add.w	r3, sp, #14
 800543a:	f10d 020f 	add.w	r2, sp, #15
 800543e:	f002 fc6f 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005442:	88a1      	ldrh	r1, [r4, #4]
 8005444:	68e0      	ldr	r0, [r4, #12]
 8005446:	f001 ff97 	bl	8007378 <gpio_set>
		if(level > 17){
 800544a:	f1b8 0f11 	cmp.w	r8, #17
 800544e:	f200 80c8 	bhi.w	80055e2 <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 8005452:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 8005456:	88a1      	ldrh	r1, [r4, #4]
 8005458:	68e0      	ldr	r0, [r4, #12]
 800545a:	bf38      	it	cc
 800545c:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 8005460:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 8005462:	f001 ff91 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005466:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005468:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800546c:	4633      	mov	r3, r6
 800546e:	f10d 020f 	add.w	r2, sp, #15
 8005472:	4628      	mov	r0, r5
 8005474:	f002 fba8 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005478:	9600      	str	r6, [sp, #0]
 800547a:	f10d 030e 	add.w	r3, sp, #14
 800547e:	f10d 020f 	add.w	r2, sp, #15
 8005482:	6821      	ldr	r1, [r4, #0]
 8005484:	4628      	mov	r0, r5
  txdt = value;
 8005486:	2784      	movs	r7, #132	; 0x84
 8005488:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800548c:	f002 fc48 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005490:	88a1      	ldrh	r1, [r4, #4]
 8005492:	68e0      	ldr	r0, [r4, #12]
 8005494:	f001 ff70 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005498:	88a1      	ldrh	r1, [r4, #4]
 800549a:	68e0      	ldr	r0, [r4, #12]
 800549c:	f001 ff74 	bl	8007388 <gpio_reset>
  txdt = address;
 80054a0:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054a2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054a4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054a8:	4633      	mov	r3, r6
 80054aa:	4628      	mov	r0, r5
 80054ac:	f10d 020f 	add.w	r2, sp, #15
 80054b0:	f002 fb8a 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054b4:	9600      	str	r6, [sp, #0]
 80054b6:	6821      	ldr	r1, [r4, #0]
 80054b8:	4628      	mov	r0, r5
  txdt = value;
 80054ba:	232b      	movs	r3, #43	; 0x2b
 80054bc:	e002      	b.n	80054c4 <_ZN6sx127x4initEP3spilhm+0x394>
 80054be:	bf00      	nop
 80054c0:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054c4:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 80054c8:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054cc:	f10d 030e 	add.w	r3, sp, #14
 80054d0:	f002 fc26 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054d4:	88a1      	ldrh	r1, [r4, #4]
 80054d6:	68e0      	ldr	r0, [r4, #12]
 80054d8:	f001 ff4e 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 80054dc:	88a1      	ldrh	r1, [r4, #4]
 80054de:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054e0:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 80054e2:	f001 ff51 	bl	8007388 <gpio_reset>
  txdt = address;
 80054e6:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054e8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054ea:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054ee:	f10d 020f 	add.w	r2, sp, #15
 80054f2:	4628      	mov	r0, r5
 80054f4:	2301      	movs	r3, #1
 80054f6:	f002 fb67 	bl	8007bc8 <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80054fa:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054fe:	9700      	str	r7, [sp, #0]
 8005500:	f10d 030e 	add.w	r3, sp, #14
 8005504:	f10d 020f 	add.w	r2, sp, #15
 8005508:	6821      	ldr	r1, [r4, #0]
 800550a:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 800550c:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 8005510:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005514:	f002 fc04 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005518:	88a1      	ldrh	r1, [r4, #4]
 800551a:	68e0      	ldr	r0, [r4, #12]
 800551c:	f001 ff2c 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005520:	88a1      	ldrh	r1, [r4, #4]
 8005522:	68e0      	ldr	r0, [r4, #12]
 8005524:	f001 ff30 	bl	8007388 <gpio_reset>
  txdt = address;
 8005528:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 800552a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800552c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005530:	463b      	mov	r3, r7
 8005532:	f10d 020f 	add.w	r2, sp, #15
 8005536:	4628      	mov	r0, r5
 8005538:	f002 fb46 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800553c:	9700      	str	r7, [sp, #0]
 800553e:	f10d 030e 	add.w	r3, sp, #14
 8005542:	f10d 020f 	add.w	r2, sp, #15
 8005546:	6821      	ldr	r1, [r4, #0]
 8005548:	4628      	mov	r0, r5
  txdt = value;
 800554a:	2600      	movs	r6, #0
 800554c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005550:	f002 fbe6 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005554:	88a1      	ldrh	r1, [r4, #4]
 8005556:	68e0      	ldr	r0, [r4, #12]
 8005558:	f001 ff0e 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 800555c:	88a1      	ldrh	r1, [r4, #4]
 800555e:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005560:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005564:	f001 ff10 	bl	8007388 <gpio_reset>
  txdt = address;
 8005568:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 800556c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800556e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005572:	463b      	mov	r3, r7
 8005574:	f10d 020f 	add.w	r2, sp, #15
 8005578:	4628      	mov	r0, r5
 800557a:	f002 fb25 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800557e:	9700      	str	r7, [sp, #0]
 8005580:	f10d 030e 	add.w	r3, sp, #14
 8005584:	f10d 020f 	add.w	r2, sp, #15
 8005588:	6821      	ldr	r1, [r4, #0]
 800558a:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 800558c:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 8005590:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005594:	f002 fbc4 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005598:	88a1      	ldrh	r1, [r4, #4]
 800559a:	68e0      	ldr	r0, [r4, #12]
 800559c:	f001 feec 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 80055a0:	88a1      	ldrh	r1, [r4, #4]
 80055a2:	68e0      	ldr	r0, [r4, #12]
 80055a4:	f001 fef0 	bl	8007388 <gpio_reset>
  txdt = address;
 80055a8:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055aa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055ac:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055b0:	463b      	mov	r3, r7
 80055b2:	f10d 020f 	add.w	r2, sp, #15
 80055b6:	4628      	mov	r0, r5
 80055b8:	f002 fb06 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055bc:	9700      	str	r7, [sp, #0]
 80055be:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80055c0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055c4:	f10d 030e 	add.w	r3, sp, #14
 80055c8:	f10d 020f 	add.w	r2, sp, #15
 80055cc:	4628      	mov	r0, r5
 80055ce:	f002 fba7 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055d2:	68e0      	ldr	r0, [r4, #12]
 80055d4:	88a1      	ldrh	r1, [r4, #4]
 80055d6:	f001 fecf 	bl	8007378 <gpio_set>
	return true;
 80055da:	4638      	mov	r0, r7
}
 80055dc:	b006      	add	sp, #24
 80055de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 80055e2:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 80055e6:	88a1      	ldrh	r1, [r4, #4]
 80055e8:	68e0      	ldr	r0, [r4, #12]
 80055ea:	bf28      	it	cs
 80055ec:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 80055f0:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 80055f2:	f001 fec9 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055f6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055f8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055fc:	4633      	mov	r3, r6
 80055fe:	f10d 020f 	add.w	r2, sp, #15
 8005602:	4628      	mov	r0, r5
 8005604:	f002 fae0 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005608:	9600      	str	r6, [sp, #0]
 800560a:	f10d 030e 	add.w	r3, sp, #14
 800560e:	f10d 020f 	add.w	r2, sp, #15
 8005612:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005614:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005618:	4628      	mov	r0, r5
 800561a:	f002 fb81 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800561e:	88a1      	ldrh	r1, [r4, #4]
 8005620:	68e0      	ldr	r0, [r4, #12]
 8005622:	f001 fea9 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005626:	88a1      	ldrh	r1, [r4, #4]
 8005628:	68e0      	ldr	r0, [r4, #12]
 800562a:	f001 fead 	bl	8007388 <gpio_reset>
  txdt = address;
 800562e:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005630:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005632:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005636:	4633      	mov	r3, r6
 8005638:	4628      	mov	r0, r5
 800563a:	f10d 020f 	add.w	r2, sp, #15
 800563e:	f002 fac3 	bl	8007bc8 <_ZN3spi8transmitEmm>
			level -= 3;
 8005642:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005646:	9600      	str	r6, [sp, #0]
 8005648:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 800564a:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800564e:	4628      	mov	r0, r5
  txdt = value;
 8005650:	2331      	movs	r3, #49	; 0x31
 8005652:	e737      	b.n	80054c4 <_ZN6sx127x4initEP3spilhm+0x394>

08005654 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 8005654:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop

0800565c <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 800565c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	b087      	sub	sp, #28
  txdt = address;
 8005662:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 8005664:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 8005666:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 8005668:	88a1      	ldrh	r1, [r4, #4]
 800566a:	f001 fe8d 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800566e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005670:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005674:	4633      	mov	r3, r6
 8005676:	f10d 020f 	add.w	r2, sp, #15
 800567a:	a804      	add	r0, sp, #16
 800567c:	f002 faa4 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005680:	9600      	str	r6, [sp, #0]
 8005682:	f10d 030e 	add.w	r3, sp, #14
 8005686:	6821      	ldr	r1, [r4, #0]
 8005688:	f10d 020f 	add.w	r2, sp, #15
 800568c:	a804      	add	r0, sp, #16
  txdt = value;
 800568e:	2500      	movs	r5, #0
 8005690:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005694:	f002 fb44 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005698:	88a1      	ldrh	r1, [r4, #4]
 800569a:	68e0      	ldr	r0, [r4, #12]
 800569c:	f001 fe6c 	bl	8007378 <gpio_set>
  return response;
 80056a0:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 80056a4:	f003 0303 	and.w	r3, r3, #3
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	f000 80e1 	beq.w	8005870 <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 80056ae:	88a1      	ldrh	r1, [r4, #4]
 80056b0:	68e0      	ldr	r0, [r4, #12]
 80056b2:	f001 fe69 	bl	8007388 <gpio_reset>
  txdt = address;
 80056b6:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056ba:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056bc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056c0:	4633      	mov	r3, r6
 80056c2:	f10d 020f 	add.w	r2, sp, #15
 80056c6:	a804      	add	r0, sp, #16
 80056c8:	f002 fa7e 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056cc:	9600      	str	r6, [sp, #0]
 80056ce:	f10d 030e 	add.w	r3, sp, #14
 80056d2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80056d4:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056d8:	f10d 020f 	add.w	r2, sp, #15
 80056dc:	a804      	add	r0, sp, #16
 80056de:	f002 fb1f 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056e2:	88a1      	ldrh	r1, [r4, #4]
 80056e4:	68e0      	ldr	r0, [r4, #12]
 80056e6:	f001 fe47 	bl	8007378 <gpio_set>
  return response;
 80056ea:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80056ee:	071b      	lsls	r3, r3, #28
 80056f0:	f100 809f 	bmi.w	8005832 <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 80056f4:	88a1      	ldrh	r1, [r4, #4]
 80056f6:	68e0      	ldr	r0, [r4, #12]
 80056f8:	f001 fe46 	bl	8007388 <gpio_reset>
  txdt = address;
 80056fc:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056fe:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005700:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005704:	2301      	movs	r3, #1
 8005706:	f10d 020f 	add.w	r2, sp, #15
 800570a:	a804      	add	r0, sp, #16
 800570c:	f002 fa5c 	bl	8007bc8 <_ZN3spi8transmitEmm>
  txdt = value;
 8005710:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005714:	2501      	movs	r5, #1
 8005716:	9500      	str	r5, [sp, #0]
 8005718:	6821      	ldr	r1, [r4, #0]
 800571a:	a804      	add	r0, sp, #16
 800571c:	f10d 030e 	add.w	r3, sp, #14
 8005720:	f10d 020f 	add.w	r2, sp, #15
 8005724:	f002 fafc 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005728:	88a1      	ldrh	r1, [r4, #4]
 800572a:	68e0      	ldr	r0, [r4, #12]
 800572c:	f001 fe24 	bl	8007378 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 8005730:	2f00      	cmp	r7, #0
 8005732:	f000 80a0 	beq.w	8005876 <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 8005736:	88a1      	ldrh	r1, [r4, #4]
 8005738:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 800573a:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 800573c:	f001 fe24 	bl	8007388 <gpio_reset>
  txdt = address;
 8005740:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005742:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005744:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005748:	462b      	mov	r3, r5
 800574a:	f10d 020f 	add.w	r2, sp, #15
 800574e:	a804      	add	r0, sp, #16
 8005750:	f002 fa3a 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005754:	9500      	str	r5, [sp, #0]
 8005756:	f10d 030e 	add.w	r3, sp, #14
 800575a:	f10d 020f 	add.w	r2, sp, #15
 800575e:	6821      	ldr	r1, [r4, #0]
 8005760:	a804      	add	r0, sp, #16
  txdt = value;
 8005762:	2600      	movs	r6, #0
 8005764:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005768:	f002 fada 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800576c:	88a1      	ldrh	r1, [r4, #4]
 800576e:	68e0      	ldr	r0, [r4, #12]
 8005770:	f001 fe02 	bl	8007378 <gpio_set>
  return response;
 8005774:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005778:	88a1      	ldrh	r1, [r4, #4]
 800577a:	68e0      	ldr	r0, [r4, #12]
 800577c:	f001 fe04 	bl	8007388 <gpio_reset>
  txdt = address;
 8005780:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005782:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005784:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005788:	462b      	mov	r3, r5
 800578a:	f10d 020f 	add.w	r2, sp, #15
 800578e:	a804      	add	r0, sp, #16
 8005790:	f002 fa1a 	bl	8007bc8 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005794:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005796:	9500      	str	r5, [sp, #0]
 8005798:	f10d 030e 	add.w	r3, sp, #14
 800579c:	f10d 020f 	add.w	r2, sp, #15
 80057a0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057a2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a6:	a804      	add	r0, sp, #16
 80057a8:	f002 faba 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057ac:	88a1      	ldrh	r1, [r4, #4]
 80057ae:	68e0      	ldr	r0, [r4, #12]
 80057b0:	f001 fde2 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 80057b4:	88a1      	ldrh	r1, [r4, #4]
 80057b6:	68e0      	ldr	r0, [r4, #12]
 80057b8:	f001 fde6 	bl	8007388 <gpio_reset>
  txdt = address;
 80057bc:	238d      	movs	r3, #141	; 0x8d
 80057be:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057c2:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057c4:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057c6:	6821      	ldr	r1, [r4, #0]
 80057c8:	f10d 020f 	add.w	r2, sp, #15
 80057cc:	a804      	add	r0, sp, #16
 80057ce:	f002 f9fb 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057d2:	9500      	str	r5, [sp, #0]
 80057d4:	f10d 030e 	add.w	r3, sp, #14
 80057d8:	f10d 020f 	add.w	r2, sp, #15
 80057dc:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057de:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057e0:	a804      	add	r0, sp, #16
  txdt = value;
 80057e2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057e6:	f002 fa9b 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057ea:	88a1      	ldrh	r1, [r4, #4]
 80057ec:	68e0      	ldr	r0, [r4, #12]
 80057ee:	f001 fdc3 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 80057f2:	88a1      	ldrh	r1, [r4, #4]
 80057f4:	68e0      	ldr	r0, [r4, #12]
 80057f6:	f001 fdc7 	bl	8007388 <gpio_reset>
  txdt = address;
 80057fa:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057fc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057fe:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005802:	462b      	mov	r3, r5
 8005804:	f10d 020f 	add.w	r2, sp, #15
 8005808:	a804      	add	r0, sp, #16
 800580a:	f002 f9dd 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800580e:	9500      	str	r5, [sp, #0]
 8005810:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005812:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005816:	f10d 030e 	add.w	r3, sp, #14
 800581a:	f10d 020f 	add.w	r2, sp, #15
 800581e:	a804      	add	r0, sp, #16
 8005820:	f002 fa7e 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005824:	68e0      	ldr	r0, [r4, #12]
 8005826:	88a1      	ldrh	r1, [r4, #4]
 8005828:	f001 fda6 	bl	8007378 <gpio_set>
	return true;
 800582c:	4628      	mov	r0, r5
}
 800582e:	b007      	add	sp, #28
 8005830:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 8005832:	88a1      	ldrh	r1, [r4, #4]
 8005834:	68e0      	ldr	r0, [r4, #12]
 8005836:	f001 fda7 	bl	8007388 <gpio_reset>
  txdt = address;
 800583a:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 800583c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800583e:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005842:	4633      	mov	r3, r6
 8005844:	f10d 020f 	add.w	r2, sp, #15
 8005848:	a804      	add	r0, sp, #16
 800584a:	f002 f9bd 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800584e:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005850:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005852:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005854:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005858:	a804      	add	r0, sp, #16
 800585a:	f10d 030e 	add.w	r3, sp, #14
 800585e:	f10d 020f 	add.w	r2, sp, #15
 8005862:	f002 fa5d 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005866:	88a1      	ldrh	r1, [r4, #4]
 8005868:	68e0      	ldr	r0, [r4, #12]
 800586a:	f001 fd85 	bl	8007378 <gpio_set>
  return response;
 800586e:	e741      	b.n	80056f4 <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 8005870:	4628      	mov	r0, r5
}
 8005872:	b007      	add	sp, #28
 8005874:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 8005876:	88a1      	ldrh	r1, [r4, #4]
 8005878:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 800587a:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 800587c:	f001 fd84 	bl	8007388 <gpio_reset>
  txdt = address;
 8005880:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005882:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005884:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005888:	462b      	mov	r3, r5
 800588a:	f10d 020f 	add.w	r2, sp, #15
 800588e:	a804      	add	r0, sp, #16
 8005890:	f002 f99a 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005894:	9500      	str	r5, [sp, #0]
 8005896:	f10d 030e 	add.w	r3, sp, #14
 800589a:	f10d 020f 	add.w	r2, sp, #15
 800589e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058a0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058a4:	a804      	add	r0, sp, #16
 80058a6:	f002 fa3b 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058aa:	88a1      	ldrh	r1, [r4, #4]
 80058ac:	68e0      	ldr	r0, [r4, #12]
 80058ae:	f001 fd63 	bl	8007378 <gpio_set>
  return response;
 80058b2:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 80058b6:	88a1      	ldrh	r1, [r4, #4]
 80058b8:	68e0      	ldr	r0, [r4, #12]
 80058ba:	f001 fd65 	bl	8007388 <gpio_reset>
  txdt = address;
 80058be:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058c0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058c2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058c6:	462b      	mov	r3, r5
 80058c8:	f10d 020f 	add.w	r2, sp, #15
 80058cc:	a804      	add	r0, sp, #16
 80058ce:	f002 f97b 	bl	8007bc8 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80058d2:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058d6:	9500      	str	r5, [sp, #0]
 80058d8:	e75e      	b.n	8005798 <_ZN6sx127x11beginPacketEb+0x13c>
 80058da:	bf00      	nop

080058dc <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 80058dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e0:	4604      	mov	r4, r0
 80058e2:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 80058e4:	460f      	mov	r7, r1
 80058e6:	b319      	cbz	r1, 8005930 <_ZN6sx127x9endPacketEb+0x54>
 80058e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80058ea:	b30b      	cbz	r3, 8005930 <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 80058ec:	8881      	ldrh	r1, [r0, #4]
 80058ee:	68c0      	ldr	r0, [r0, #12]
 80058f0:	f001 fd4a 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058f4:	f10d 050f 	add.w	r5, sp, #15
 80058f8:	ae04      	add	r6, sp, #16
  txdt = address;
 80058fa:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058fc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058fe:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005902:	462a      	mov	r2, r5
 8005904:	4630      	mov	r0, r6
 8005906:	2301      	movs	r3, #1
 8005908:	f002 f95e 	bl	8007bc8 <_ZN3spi8transmitEmm>
  txdt = value;
 800590c:	2340      	movs	r3, #64	; 0x40
 800590e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005912:	2301      	movs	r3, #1
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	f10d 080e 	add.w	r8, sp, #14
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	4630      	mov	r0, r6
 800591e:	4643      	mov	r3, r8
 8005920:	462a      	mov	r2, r5
 8005922:	f002 f9fd 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005926:	88a1      	ldrh	r1, [r4, #4]
 8005928:	68e0      	ldr	r0, [r4, #12]
 800592a:	f001 fd25 	bl	8007378 <gpio_set>
  return response;
 800592e:	e004      	b.n	800593a <_ZN6sx127x9endPacketEb+0x5e>
 8005930:	f10d 050f 	add.w	r5, sp, #15
 8005934:	ae04      	add	r6, sp, #16
 8005936:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 800593a:	88a1      	ldrh	r1, [r4, #4]
 800593c:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800593e:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005942:	f001 fd21 	bl	8007388 <gpio_reset>
  txdt = address;
 8005946:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 800594a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800594c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005950:	464b      	mov	r3, r9
 8005952:	462a      	mov	r2, r5
 8005954:	4630      	mov	r0, r6
 8005956:	f002 f937 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800595a:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 800595e:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005960:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005962:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005966:	4630      	mov	r0, r6
 8005968:	4643      	mov	r3, r8
 800596a:	462a      	mov	r2, r5
 800596c:	f002 f9d8 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005970:	88a1      	ldrh	r1, [r4, #4]
 8005972:	68e0      	ldr	r0, [r4, #12]
 8005974:	f001 fd00 	bl	8007378 <gpio_set>
	if(!async){
 8005978:	2f00      	cmp	r7, #0
 800597a:	d13b      	bne.n	80059f4 <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 800597c:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 8005980:	88a1      	ldrh	r1, [r4, #4]
 8005982:	68e0      	ldr	r0, [r4, #12]
 8005984:	f001 fd00 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005988:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800598a:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800598e:	2301      	movs	r3, #1
 8005990:	462a      	mov	r2, r5
 8005992:	4630      	mov	r0, r6
 8005994:	f002 f918 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005998:	6821      	ldr	r1, [r4, #0]
 800599a:	f8cd 9000 	str.w	r9, [sp]
 800599e:	4643      	mov	r3, r8
 80059a0:	462a      	mov	r2, r5
 80059a2:	4630      	mov	r0, r6
  txdt = value;
 80059a4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059a8:	f002 f9ba 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059ac:	88a1      	ldrh	r1, [r4, #4]
 80059ae:	68e0      	ldr	r0, [r4, #12]
 80059b0:	f001 fce2 	bl	8007378 <gpio_set>
  return response;
 80059b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 80059b8:	071b      	lsls	r3, r3, #28
 80059ba:	d5e1      	bpl.n	8005980 <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 80059bc:	88a1      	ldrh	r1, [r4, #4]
 80059be:	68e0      	ldr	r0, [r4, #12]
 80059c0:	f001 fce2 	bl	8007388 <gpio_reset>
  txdt = address;
 80059c4:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059c6:	462a      	mov	r2, r5
 80059c8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059ca:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059ce:	2301      	movs	r3, #1
 80059d0:	4630      	mov	r0, r6
 80059d2:	f002 f8f9 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059d6:	f8cd 9000 	str.w	r9, [sp]
 80059da:	6821      	ldr	r1, [r4, #0]
 80059dc:	4630      	mov	r0, r6
 80059de:	462a      	mov	r2, r5
 80059e0:	4643      	mov	r3, r8
  txdt = value;
 80059e2:	2508      	movs	r5, #8
 80059e4:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059e8:	f002 f99a 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059ec:	88a1      	ldrh	r1, [r4, #4]
 80059ee:	68e0      	ldr	r0, [r4, #12]
 80059f0:	f001 fcc2 	bl	8007378 <gpio_set>
}
 80059f4:	2001      	movs	r0, #1
 80059f6:	b006      	add	sp, #24
 80059f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059fc <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 80059fc:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 80059fe:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 8005a00:	b087      	sub	sp, #28
 8005a02:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005a04:	68c0      	ldr	r0, [r0, #12]
 8005a06:	f001 fcbf 	bl	8007388 <gpio_reset>
  txdt = address;
 8005a0a:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a0c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a0e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a12:	f10d 020f 	add.w	r2, sp, #15
 8005a16:	a804      	add	r0, sp, #16
 8005a18:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a1a:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a1c:	f002 f8d4 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a20:	6821      	ldr	r1, [r4, #0]
 8005a22:	9500      	str	r5, [sp, #0]
 8005a24:	f10d 030e 	add.w	r3, sp, #14
 8005a28:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005a2c:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a30:	a804      	add	r0, sp, #16
  txdt = value;
 8005a32:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a36:	f002 f973 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a3a:	68e0      	ldr	r0, [r4, #12]
 8005a3c:	88a1      	ldrh	r1, [r4, #4]
 8005a3e:	f001 fc9b 	bl	8007378 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005a42:	4a05      	ldr	r2, [pc, #20]	; (8005a58 <_ZN6sx127x10packetRssiEv+0x5c>)
 8005a44:	6a23      	ldr	r3, [r4, #32]
  return response;
 8005a46:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	bfd4      	ite	le
 8005a4e:	23a4      	movle	r3, #164	; 0xa4
 8005a50:	239d      	movgt	r3, #157	; 0x9d
}
 8005a52:	1ac0      	subs	r0, r0, r3
 8005a54:	b007      	add	sp, #28
 8005a56:	bd30      	pop	{r4, r5, pc}
 8005a58:	1f4add3f 	.word	0x1f4add3f

08005a5c <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 8005a5c:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005a5e:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 8005a60:	b087      	sub	sp, #28
 8005a62:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005a64:	68c0      	ldr	r0, [r0, #12]
 8005a66:	f001 fc8f 	bl	8007388 <gpio_reset>
  txdt = address;
 8005a6a:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a6c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a6e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a72:	f10d 020f 	add.w	r2, sp, #15
 8005a76:	a804      	add	r0, sp, #16
 8005a78:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a7a:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a7c:	f002 f8a4 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a80:	6821      	ldr	r1, [r4, #0]
 8005a82:	9500      	str	r5, [sp, #0]
 8005a84:	f10d 030e 	add.w	r3, sp, #14
 8005a88:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005a8c:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a90:	a804      	add	r0, sp, #16
  txdt = value;
 8005a92:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a96:	f002 f943 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a9a:	68e0      	ldr	r0, [r4, #12]
 8005a9c:	88a1      	ldrh	r1, [r4, #4]
 8005a9e:	f001 fc6b 	bl	8007378 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005aa2:	4a05      	ldr	r2, [pc, #20]	; (8005ab8 <_ZN6sx127x4rssiEv+0x5c>)
 8005aa4:	6a23      	ldr	r3, [r4, #32]
 8005aa6:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	bfd4      	ite	le
 8005aae:	23a4      	movle	r3, #164	; 0xa4
 8005ab0:	239d      	movgt	r3, #157	; 0x9d
}
 8005ab2:	1ac0      	subs	r0, r0, r3
 8005ab4:	b007      	add	sp, #28
 8005ab6:	bd30      	pop	{r4, r5, pc}
 8005ab8:	1f4add3f 	.word	0x1f4add3f

08005abc <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005ac4:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005ac6:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005ac8:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005aca:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005acc:	f001 fc5c 	bl	8007388 <gpio_reset>
  txdt = address;
 8005ad0:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ad2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ad4:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ad8:	f10d 020f 	add.w	r2, sp, #15
 8005adc:	2301      	movs	r3, #1
 8005ade:	a804      	add	r0, sp, #16
 8005ae0:	f002 f872 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	6821      	ldr	r1, [r4, #0]
 8005aea:	f10d 030e 	add.w	r3, sp, #14
 8005aee:	f10d 020f 	add.w	r2, sp, #15
 8005af2:	a804      	add	r0, sp, #16
  txdt = value;
 8005af4:	2600      	movs	r6, #0
 8005af6:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005afa:	f002 f911 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005afe:	88a1      	ldrh	r1, [r4, #4]
 8005b00:	68e0      	ldr	r0, [r4, #12]
 8005b02:	f001 fc39 	bl	8007378 <gpio_set>
  return response;
 8005b06:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 8005b0a:	eb03 0a09 	add.w	sl, r3, r9
 8005b0e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8005b12:	bf84      	itt	hi
 8005b14:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b18:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	d025      	beq.n	8005b6e <_ZN6sx127x8transmitEPKhj+0xb2>
 8005b22:	3d01      	subs	r5, #1
 8005b24:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 8005b28:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b2c:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8005b2e:	88a1      	ldrh	r1, [r4, #4]
 8005b30:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b32:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 8005b36:	f001 fc27 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b3a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b3c:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b40:	2301      	movs	r3, #1
 8005b42:	f10d 020f 	add.w	r2, sp, #15
 8005b46:	a804      	add	r0, sp, #16
 8005b48:	f002 f83e 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b4c:	6821      	ldr	r1, [r4, #0]
 8005b4e:	9700      	str	r7, [sp, #0]
 8005b50:	a804      	add	r0, sp, #16
 8005b52:	f10d 030e 	add.w	r3, sp, #14
 8005b56:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005b5a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b5e:	f002 f8df 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b62:	88a1      	ldrh	r1, [r4, #4]
 8005b64:	68e0      	ldr	r0, [r4, #12]
 8005b66:	f001 fc07 	bl	8007378 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b6a:	45ab      	cmp	fp, r5
 8005b6c:	d1df      	bne.n	8005b2e <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 8005b6e:	88a1      	ldrh	r1, [r4, #4]
 8005b70:	68e0      	ldr	r0, [r4, #12]
 8005b72:	f001 fc09 	bl	8007388 <gpio_reset>
  txdt = address;
 8005b76:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b78:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b7a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b7e:	f10d 020f 	add.w	r2, sp, #15
 8005b82:	a804      	add	r0, sp, #16
 8005b84:	2301      	movs	r3, #1
 8005b86:	f002 f81f 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	9100      	str	r1, [sp, #0]
 8005b8e:	6821      	ldr	r1, [r4, #0]
 8005b90:	a804      	add	r0, sp, #16
 8005b92:	f10d 030e 	add.w	r3, sp, #14
 8005b96:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8005b9a:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 8005b9e:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ba2:	f002 f8bd 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ba6:	68e0      	ldr	r0, [r4, #12]
 8005ba8:	88a1      	ldrh	r1, [r4, #4]
 8005baa:	f001 fbe5 	bl	8007378 <gpio_set>
}
 8005bae:	4648      	mov	r0, r9
 8005bb0:	b007      	add	sp, #28
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	bf00      	nop

08005bb8 <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 8005bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bbc:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	4689      	mov	r9, r1
  txdt = address;
 8005bc4:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bc8:	2701      	movs	r7, #1
  txdt = value;
 8005bca:	462e      	mov	r6, r5
 8005bcc:	e020      	b.n	8005c10 <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 8005bce:	88a1      	ldrh	r1, [r4, #4]
 8005bd0:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 8005bd2:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005bd4:	f001 fbd8 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bd8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005bda:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bde:	2301      	movs	r3, #1
 8005be0:	f10d 020f 	add.w	r2, sp, #15
 8005be4:	a804      	add	r0, sp, #16
 8005be6:	f001 ffef 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bea:	6821      	ldr	r1, [r4, #0]
 8005bec:	9700      	str	r7, [sp, #0]
 8005bee:	f10d 030e 	add.w	r3, sp, #14
 8005bf2:	f10d 020f 	add.w	r2, sp, #15
 8005bf6:	a804      	add	r0, sp, #16
  txdt = value;
 8005bf8:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bfc:	f002 f890 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c00:	88a1      	ldrh	r1, [r4, #4]
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	f001 fbb8 	bl	8007378 <gpio_set>
  return response;
 8005c08:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 8005c0c:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 8005c10:	88a1      	ldrh	r1, [r4, #4]
 8005c12:	68e0      	ldr	r0, [r4, #12]
 8005c14:	f001 fbb8 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c18:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c1a:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c1e:	f10d 020f 	add.w	r2, sp, #15
 8005c22:	a804      	add	r0, sp, #16
 8005c24:	2301      	movs	r3, #1
 8005c26:	f001 ffcf 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	9700      	str	r7, [sp, #0]
 8005c2e:	f10d 030e 	add.w	r3, sp, #14
 8005c32:	f10d 020f 	add.w	r2, sp, #15
 8005c36:	a804      	add	r0, sp, #16
  txdt = value;
 8005c38:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c3c:	f002 f870 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c40:	68e0      	ldr	r0, [r4, #12]
 8005c42:	88a1      	ldrh	r1, [r4, #4]
 8005c44:	f001 fb98 	bl	8007378 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005c48:	69a0      	ldr	r0, [r4, #24]
  return response;
 8005c4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 8005c4e:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005c50:	b2c0      	uxtb	r0, r0
	while(available()){
 8005c52:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 8005c54:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 8005c58:	f105 0501 	add.w	r5, r5, #1
 8005c5c:	d1b7      	bne.n	8005bce <_ZN6sx127x7receiveEPc+0x16>
}
 8005c5e:	b006      	add	sp, #24
 8005c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c64 <_ZN6sx127x10receive_itEh>:
void sx127x::receive_it(uint8_t size){
 8005c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005c68:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::receive_it(uint8_t size){
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 80d4 	beq.w	8005e1e <_ZN6sx127x10receive_itEh+0x1ba>
  gpio_reset(_csport, _cs);
 8005c76:	8881      	ldrh	r1, [r0, #4]
 8005c78:	68c0      	ldr	r0, [r0, #12]
 8005c7a:	f001 fb85 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c7e:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 8005c82:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c84:	ae04      	add	r6, sp, #16
 8005c86:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c88:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	2301      	movs	r3, #1
 8005c90:	4630      	mov	r0, r6
 8005c92:	f001 ff99 	bl	8007bc8 <_ZN3spi8transmitEmm>
  txdt = value;
 8005c96:	2300      	movs	r3, #0
 8005c98:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	f10d 080e 	add.w	r8, sp, #14
 8005ca4:	6821      	ldr	r1, [r4, #0]
 8005ca6:	4630      	mov	r0, r6
 8005ca8:	4643      	mov	r3, r8
 8005caa:	462a      	mov	r2, r5
 8005cac:	f002 f838 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005cb0:	88a1      	ldrh	r1, [r4, #4]
 8005cb2:	68e0      	ldr	r0, [r4, #12]
 8005cb4:	f001 fb60 	bl	8007378 <gpio_set>
	if (size > 0) {
 8005cb8:	2f00      	cmp	r7, #0
 8005cba:	d07c      	beq.n	8005db6 <_ZN6sx127x10receive_itEh+0x152>
	_implicitHeaderMode = 1;
 8005cbc:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005cc0:	88a1      	ldrh	r1, [r4, #4]
 8005cc2:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005cc4:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 8005cc8:	f001 fb5e 	bl	8007388 <gpio_reset>
  txdt = address;
 8005ccc:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cd0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005cd2:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f001 ff74 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ce0:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005ce4:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ce8:	4643      	mov	r3, r8
 8005cea:	462a      	mov	r2, r5
 8005cec:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005cee:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f002 f814 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005cf8:	88a1      	ldrh	r1, [r4, #4]
 8005cfa:	68e0      	ldr	r0, [r4, #12]
 8005cfc:	f001 fb3c 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d00:	88a1      	ldrh	r1, [r4, #4]
 8005d02:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005d04:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 8005d08:	f001 fb3e 	bl	8007388 <gpio_reset>
  txdt = address;
 8005d0c:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d10:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d12:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d16:	464b      	mov	r3, r9
 8005d18:	462a      	mov	r2, r5
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f001 ff54 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d20:	f8cd 9000 	str.w	r9, [sp]
 8005d24:	4643      	mov	r3, r8
 8005d26:	462a      	mov	r2, r5
 8005d28:	6821      	ldr	r1, [r4, #0]
 8005d2a:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005d2c:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 8005d30:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d34:	f001 fff4 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d38:	88a1      	ldrh	r1, [r4, #4]
 8005d3a:	68e0      	ldr	r0, [r4, #12]
 8005d3c:	f001 fb1c 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d40:	88a1      	ldrh	r1, [r4, #4]
 8005d42:	68e0      	ldr	r0, [r4, #12]
 8005d44:	f001 fb20 	bl	8007388 <gpio_reset>
  txdt = address;
 8005d48:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d4c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d4e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d52:	464b      	mov	r3, r9
 8005d54:	462a      	mov	r2, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f001 ff36 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d5c:	f8cd 9000 	str.w	r9, [sp]
 8005d60:	4643      	mov	r3, r8
 8005d62:	462a      	mov	r2, r5
 8005d64:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005d66:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f001 ffd8 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d70:	88a1      	ldrh	r1, [r4, #4]
 8005d72:	68e0      	ldr	r0, [r4, #12]
 8005d74:	f001 fb00 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d78:	88a1      	ldrh	r1, [r4, #4]
 8005d7a:	68e0      	ldr	r0, [r4, #12]
 8005d7c:	f001 fb04 	bl	8007388 <gpio_reset>
  txdt = address;
 8005d80:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d82:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d84:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d88:	462a      	mov	r2, r5
 8005d8a:	4630      	mov	r0, r6
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f001 ff1b 	bl	8007bc8 <_ZN3spi8transmitEmm>
  txdt = value;
 8005d92:	2185      	movs	r1, #133	; 0x85
 8005d94:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d98:	2101      	movs	r1, #1
 8005d9a:	9100      	str	r1, [sp, #0]
 8005d9c:	6821      	ldr	r1, [r4, #0]
 8005d9e:	4630      	mov	r0, r6
 8005da0:	4643      	mov	r3, r8
 8005da2:	462a      	mov	r2, r5
 8005da4:	f001 ffbc 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005da8:	88a1      	ldrh	r1, [r4, #4]
 8005daa:	68e0      	ldr	r0, [r4, #12]
 8005dac:	f001 fae4 	bl	8007378 <gpio_set>
}
 8005db0:	b006      	add	sp, #24
 8005db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005db6:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005dba:	88a1      	ldrh	r1, [r4, #4]
 8005dbc:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005dbe:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005dc0:	f001 fae2 	bl	8007388 <gpio_reset>
  txdt = address;
 8005dc4:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005dc8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005dca:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005dce:	464b      	mov	r3, r9
 8005dd0:	462a      	mov	r2, r5
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	f001 fef8 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dd8:	f8cd 9000 	str.w	r9, [sp]
 8005ddc:	4643      	mov	r3, r8
 8005dde:	462a      	mov	r2, r5
 8005de0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005de2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005de6:	4630      	mov	r0, r6
 8005de8:	f001 ff9a 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005dec:	88a1      	ldrh	r1, [r4, #4]
 8005dee:	68e0      	ldr	r0, [r4, #12]
 8005df0:	f001 fac2 	bl	8007378 <gpio_set>
  return response;
 8005df4:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8005df8:	88a1      	ldrh	r1, [r4, #4]
 8005dfa:	68e0      	ldr	r0, [r4, #12]
 8005dfc:	f001 fac4 	bl	8007388 <gpio_reset>
  txdt = address;
 8005e00:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e04:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e06:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	462a      	mov	r2, r5
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f001 feda 	bl	8007bc8 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005e14:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e18:	f8cd 9000 	str.w	r9, [sp]
 8005e1c:	e7a0      	b.n	8005d60 <_ZN6sx127x10receive_itEh+0xfc>
 8005e1e:	f10d 050f 	add.w	r5, sp, #15
 8005e22:	ae04      	add	r6, sp, #16
 8005e24:	f10d 080e 	add.w	r8, sp, #14
 8005e28:	e746      	b.n	8005cb8 <_ZN6sx127x10receive_itEh+0x54>
 8005e2a:	bf00      	nop

08005e2c <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 8005e2c:	b530      	push	{r4, r5, lr}
 8005e2e:	4604      	mov	r4, r0
 8005e30:	b087      	sub	sp, #28
 8005e32:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005e34:	68c0      	ldr	r0, [r0, #12]
 8005e36:	88a1      	ldrh	r1, [r4, #4]
 8005e38:	f001 faa6 	bl	8007388 <gpio_reset>
  txdt = address;
 8005e3c:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e3e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e40:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e44:	f10d 020f 	add.w	r2, sp, #15
 8005e48:	a804      	add	r0, sp, #16
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	f001 febc 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e50:	2301      	movs	r3, #1
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005e56:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e5a:	a804      	add	r0, sp, #16
 8005e5c:	f10d 030e 	add.w	r3, sp, #14
 8005e60:	f10d 020f 	add.w	r2, sp, #15
 8005e64:	f001 ff5c 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e68:	88a1      	ldrh	r1, [r4, #4]
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	f001 fa84 	bl	8007378 <gpio_set>
}
 8005e70:	b007      	add	sp, #28
 8005e72:	bd30      	pop	{r4, r5, pc}

08005e74 <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 8005e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 8005e78:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005e7e:	68c0      	ldr	r0, [r0, #12]
 8005e80:	f001 fa82 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e84:	2301      	movs	r3, #1
  txdt = address;
 8005e86:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e88:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e8a:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 8005e8e:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e92:	a804      	add	r0, sp, #16
 8005e94:	6821      	ldr	r1, [r4, #0]
 8005e96:	f001 fe97 	bl	8007bc8 <_ZN3spi8transmitEmm>
  txdt = value;
 8005e9a:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e9c:	9600      	str	r6, [sp, #0]
 8005e9e:	f10d 020f 	add.w	r2, sp, #15
 8005ea2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005ea4:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ea8:	a804      	add	r0, sp, #16
 8005eaa:	f10d 030e 	add.w	r3, sp, #14
 8005eae:	f001 ff37 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005eb2:	88a1      	ldrh	r1, [r4, #4]
 8005eb4:	68e0      	ldr	r0, [r4, #12]
 8005eb6:	f001 fa5f 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005eba:	88a1      	ldrh	r1, [r4, #4]
 8005ebc:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005ebe:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 8005ec2:	f001 fa61 	bl	8007388 <gpio_reset>
  txdt = address;
 8005ec6:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eca:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ecc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ed0:	4633      	mov	r3, r6
 8005ed2:	f10d 020f 	add.w	r2, sp, #15
 8005ed6:	a804      	add	r0, sp, #16
 8005ed8:	f001 fe76 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005edc:	9600      	str	r6, [sp, #0]
 8005ede:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005ee0:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ee4:	a804      	add	r0, sp, #16
 8005ee6:	f10d 030e 	add.w	r3, sp, #14
 8005eea:	f10d 020f 	add.w	r2, sp, #15
 8005eee:	f001 ff17 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ef2:	88a1      	ldrh	r1, [r4, #4]
 8005ef4:	68e0      	ldr	r0, [r4, #12]
 8005ef6:	f001 fa3f 	bl	8007378 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8005efa:	f015 0720 	ands.w	r7, r5, #32
 8005efe:	d16d      	bne.n	8005fdc <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 8005f00:	066a      	lsls	r2, r5, #25
 8005f02:	d569      	bpl.n	8005fd8 <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005f04:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005f06:	88a1      	ldrh	r1, [r4, #4]
 8005f08:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 8005f0a:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005f0c:	2d00      	cmp	r5, #0
 8005f0e:	d168      	bne.n	8005fe2 <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 8005f10:	f001 fa3a 	bl	8007388 <gpio_reset>
  txdt = address;
 8005f14:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f16:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f18:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f1c:	4633      	mov	r3, r6
 8005f1e:	f10d 020f 	add.w	r2, sp, #15
 8005f22:	a804      	add	r0, sp, #16
 8005f24:	f001 fe50 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f28:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005f2a:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f2e:	f10d 030e 	add.w	r3, sp, #14
 8005f32:	f10d 020f 	add.w	r2, sp, #15
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	a804      	add	r0, sp, #16
 8005f3a:	f001 fef1 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f3e:	88a1      	ldrh	r1, [r4, #4]
 8005f40:	68e0      	ldr	r0, [r4, #12]
 8005f42:	f001 fa19 	bl	8007378 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f46:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 8005f48:	88a1      	ldrh	r1, [r4, #4]
 8005f4a:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005f4c:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 8005f50:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 8005f52:	f001 fa19 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f56:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f58:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	f10d 020f 	add.w	r2, sp, #15
 8005f62:	a804      	add	r0, sp, #16
 8005f64:	f001 fe30 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f68:	9500      	str	r5, [sp, #0]
 8005f6a:	f10d 030e 	add.w	r3, sp, #14
 8005f6e:	f10d 020f 	add.w	r2, sp, #15
 8005f72:	eb0d 0006 	add.w	r0, sp, r6
 8005f76:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f78:	2600      	movs	r6, #0
 8005f7a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f7e:	f001 fecf 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f82:	88a1      	ldrh	r1, [r4, #4]
 8005f84:	68e0      	ldr	r0, [r4, #12]
 8005f86:	f001 f9f7 	bl	8007378 <gpio_set>
  gpio_reset(_csport, _cs);
 8005f8a:	88a1      	ldrh	r1, [r4, #4]
 8005f8c:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005f8e:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 8005f92:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 8005f94:	f001 f9f8 	bl	8007388 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f98:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f9a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f9e:	462b      	mov	r3, r5
 8005fa0:	f10d 020f 	add.w	r2, sp, #15
 8005fa4:	a804      	add	r0, sp, #16
 8005fa6:	f001 fe0f 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005faa:	9500      	str	r5, [sp, #0]
 8005fac:	f10d 030e 	add.w	r3, sp, #14
 8005fb0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005fb2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fb6:	f10d 020f 	add.w	r2, sp, #15
 8005fba:	a804      	add	r0, sp, #16
 8005fbc:	f001 feb0 	bl	8007d20 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005fc0:	88a1      	ldrh	r1, [r4, #4]
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	f001 f9d8 	bl	8007378 <gpio_set>
			if (RxDoneHandler) {
 8005fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005fca:	b13b      	cbz	r3, 8005fdc <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4620      	mov	r0, r4
}
 8005fd0:	b006      	add	sp, #24
 8005fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 8005fd6:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 8005fd8:	072b      	lsls	r3, r5, #28
 8005fda:	d412      	bmi.n	8006002 <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 8005fdc:	b006      	add	sp, #24
 8005fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 8005fe2:	f001 f9d1 	bl	8007388 <gpio_reset>
  txdt = address;
 8005fe6:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fe8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005fea:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fee:	4633      	mov	r3, r6
 8005ff0:	f10d 020f 	add.w	r2, sp, #15
 8005ff4:	a804      	add	r0, sp, #16
 8005ff6:	f001 fde7 	bl	8007bc8 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ffa:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005ffc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006000:	e795      	b.n	8005f2e <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 8006002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0e9      	beq.n	8005fdc <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 8006008:	4620      	mov	r0, r4
}
 800600a:	b006      	add	sp, #24
 800600c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 8006010:	4718      	bx	r3
 8006012:	bf00      	nop

08006014 <_ZL14wifiif_request10wifi_cmd_tPc>:

static int wifiif_is_err(char *str){
	return strcmp(str, "ERR");
}

static void wifiif_request(wifi_cmd_t cmd, char *data){
 8006014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006018:	b08d      	sub	sp, #52	; 0x34
 800601a:	4f94      	ldr	r7, [pc, #592]	; (800626c <_ZL14wifiif_request10wifi_cmd_tPc+0x258>)
 800601c:	9103      	str	r1, [sp, #12]
	char *cmd_str = cmd_to_str(cmd, command_string);
 800601e:	4994      	ldr	r1, [pc, #592]	; (8006270 <_ZL14wifiif_request10wifi_cmd_tPc+0x25c>)
 8006020:	f7ff f870 	bl	8005104 <cmd_to_str>
	char *req_data;
	asprintf(&req_data, "%s: %s", cmd_str, data);
 8006024:	9b03      	ldr	r3, [sp, #12]
 8006026:	4993      	ldr	r1, [pc, #588]	; (8006274 <_ZL14wifiif_request10wifi_cmd_tPc+0x260>)
	char *cmd_str = cmd_to_str(cmd, command_string);
 8006028:	4602      	mov	r2, r0
	asprintf(&req_data, "%s: %s", cmd_str, data);
 800602a:	a805      	add	r0, sp, #20
 800602c:	f006 f928 	bl	800c280 <asiprintf>
	wifiif_transmit(req_data);
 8006030:	9d05      	ldr	r5, [sp, #20]
	int16_t len = strlen(str);
 8006032:	4628      	mov	r0, r5
 8006034:	f7fa f8e6 	bl	8000204 <strlen>
 8006038:	b204      	sxth	r4, r0
	while(remaining > 0){
 800603a:	2c00      	cmp	r4, #0
 800603c:	dd0e      	ble.n	800605c <_ZL14wifiif_request10wifi_cmd_tPc+0x48>
		int16_t sendSize = (remaining > MAX_UART_TX_BUFFER_SIZE)? MAX_UART_TX_BUFFER_SIZE : remaining;
 800603e:	2c64      	cmp	r4, #100	; 0x64
 8006040:	4623      	mov	r3, r4
		if(fprequest) fprequest(str, sendSize);
 8006042:	683a      	ldr	r2, [r7, #0]
		int16_t sendSize = (remaining > MAX_UART_TX_BUFFER_SIZE)? MAX_UART_TX_BUFFER_SIZE : remaining;
 8006044:	bfa8      	it	ge
 8006046:	2364      	movge	r3, #100	; 0x64
		if(fprequest) fprequest(str, sendSize);
 8006048:	b29e      	uxth	r6, r3
 800604a:	4628      	mov	r0, r5
 800604c:	4631      	mov	r1, r6
		str += sendSize;
 800604e:	441d      	add	r5, r3
		if(fprequest) fprequest(str, sendSize);
 8006050:	b122      	cbz	r2, 800605c <_ZL14wifiif_request10wifi_cmd_tPc+0x48>
		remaining -= sendSize;
 8006052:	1ba4      	subs	r4, r4, r6
 8006054:	b224      	sxth	r4, r4
		if(fprequest) fprequest(str, sendSize);
 8006056:	4790      	blx	r2
	while(remaining > 0){
 8006058:	2c00      	cmp	r4, #0
 800605a:	dcf0      	bgt.n	800603e <_ZL14wifiif_request10wifi_cmd_tPc+0x2a>
	delay_ms(1);
 800605c:	2001      	movs	r0, #1
 800605e:	f002 fa71 	bl	8008544 <delay_ms>
	if(fprequest) fprequest((char *)"\r\nend\r\n", 7);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	b113      	cbz	r3, 800606c <_ZL14wifiif_request10wifi_cmd_tPc+0x58>
 8006066:	4884      	ldr	r0, [pc, #528]	; (8006278 <_ZL14wifiif_request10wifi_cmd_tPc+0x264>)
 8006068:	2107      	movs	r1, #7
 800606a:	4798      	blx	r3
#if ENABLE_COMPONENT_WIFIIF_DEBUG
//	wifiif_debug(req_data, __LINE__, __FUNCTION__);
#endif /* ENABLE_COMPONENT_WIFIIF_DEBUG */
	free(req_data);
 800606c:	9805      	ldr	r0, [sp, #20]
 800606e:	f006 f963 	bl	800c338 <free>

	EventBits_t bits = xEventGroupWaitBits(e_response, DATA_EVENTBIT, pdTRUE, pdFALSE, WIFI_DEFAULT_TIMEOUT);
 8006072:	4a82      	ldr	r2, [pc, #520]	; (800627c <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
 8006074:	f242 7310 	movw	r3, #10000	; 0x2710
 8006078:	6810      	ldr	r0, [r2, #0]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2201      	movs	r2, #1
 800607e:	2300      	movs	r3, #0
 8006080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006084:	f7fb fb68 	bl	8001758 <xEventGroupWaitBits>
	if(bits == DATA_EVENTBIT){
 8006088:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800608c:	d010      	beq.n	80060b0 <_ZL14wifiif_request10wifi_cmd_tPc+0x9c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800608e:	4b7c      	ldr	r3, [pc, #496]	; (8006280 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4a7c      	ldr	r2, [pc, #496]	; (8006284 <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
 8006094:	497c      	ldr	r1, [pc, #496]	; (8006288 <_ZL14wifiif_request10wifi_cmd_tPc+0x274>)
 8006096:	487d      	ldr	r0, [pc, #500]	; (800628c <_ZL14wifiif_request10wifi_cmd_tPc+0x278>)
 8006098:	23c1      	movs	r3, #193	; 0xc1
 800609a:	f004 fec7 	bl	800ae2c <LOG_DEBUG>
		release_packet(&pkt);
		if(response_data != NULL) free(response_data);
	}
	else{ // Parse packet fail.
		wifiif_debug((char *)"WiFi module not response the request", __LINE__, __FUNCTION__);
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 800609e:	4b7c      	ldr	r3, [pc, #496]	; (8006290 <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	b113      	cbz	r3, 80060aa <_ZL14wifiif_request10wifi_cmd_tPc+0x96>
 80060a4:	2100      	movs	r1, #0
 80060a6:	4608      	mov	r0, r1
 80060a8:	4798      	blx	r3
	}

}
 80060aa:	b00d      	add	sp, #52	; 0x34
 80060ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 	   uint8_t queue_len = uxQueueMessagesWaiting(q_response);
 80060b0:	4e78      	ldr	r6, [pc, #480]	; (8006294 <_ZL14wifiif_request10wifi_cmd_tPc+0x280>)
		pkt_t pkt;
 80060b2:	2200      	movs	r2, #0
 80060b4:	2300      	movs	r3, #0
 	   uint8_t queue_len = uxQueueMessagesWaiting(q_response);
 80060b6:	6830      	ldr	r0, [r6, #0]
		pkt_t pkt;
 80060b8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 	   uint8_t queue_len = uxQueueMessagesWaiting(q_response);
 80060bc:	f7fc fafa 	bl	80026b4 <uxQueueMessagesWaiting>
 	   for(uint8_t i=0; i<queue_len; i++){
 80060c0:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80060c4:	f000 80a7 	beq.w	8006216 <_ZL14wifiif_request10wifi_cmd_tPc+0x202>
 80060c8:	2400      	movs	r4, #0
 	   uint16_t total_len = 0;
 80060ca:	46a0      	mov	r8, r4
 80060cc:	af09      	add	r7, sp, #36	; 0x24
 80060ce:	e002      	b.n	80060d6 <_ZL14wifiif_request10wifi_cmd_tPc+0xc2>
 	   for(uint8_t i=0; i<queue_len; i++){
 80060d0:	b2e3      	uxtb	r3, r4
 80060d2:	429d      	cmp	r5, r3
 80060d4:	d917      	bls.n	8006106 <_ZL14wifiif_request10wifi_cmd_tPc+0xf2>
 		   if(xQueueReceive(q_response, &break_data, 2) == pdTRUE){
 80060d6:	6830      	ldr	r0, [r6, #0]
 80060d8:	2202      	movs	r2, #2
 80060da:	4639      	mov	r1, r7
 80060dc:	f7fb ff80 	bl	8001fe0 <xQueueReceive>
 80060e0:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 80060e2:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(q_response, &break_data, 2) == pdTRUE){
 80060e6:	d1f3      	bne.n	80060d0 <_ZL14wifiif_request10wifi_cmd_tPc+0xbc>
 			   total_len += strlen(break_data);
 80060e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060ea:	f7fa f88b 	bl	8000204 <strlen>
 80060ee:	4440      	add	r0, r8
 			   xQueueSend(q_response, &break_data, 2);
 80060f0:	2300      	movs	r3, #0
 			   total_len += strlen(break_data);
 80060f2:	fa1f f880 	uxth.w	r8, r0
 			   xQueueSend(q_response, &break_data, 2);
 80060f6:	2202      	movs	r2, #2
 80060f8:	6830      	ldr	r0, [r6, #0]
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fb fcfc 	bl	8001af8 <xQueueGenericSend>
 	   for(uint8_t i=0; i<queue_len; i++){
 8006100:	b2e3      	uxtb	r3, r4
 8006102:	429d      	cmp	r5, r3
 8006104:	d8e7      	bhi.n	80060d6 <_ZL14wifiif_request10wifi_cmd_tPc+0xc2>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 8006106:	f108 0001 	add.w	r0, r8, #1
 800610a:	f006 f90d 	bl	800c328 <malloc>
 800610e:	2400      	movs	r4, #0
 8006110:	4681      	mov	r9, r0
 8006112:	4682      	mov	sl, r0
 8006114:	e002      	b.n	800611c <_ZL14wifiif_request10wifi_cmd_tPc+0x108>
 	   for(uint8_t i=0; i<queue_len; i++){
 8006116:	b2e3      	uxtb	r3, r4
 8006118:	42ab      	cmp	r3, r5
 800611a:	d219      	bcs.n	8006150 <_ZL14wifiif_request10wifi_cmd_tPc+0x13c>
 		   if(xQueueReceive(q_response, &break_data, 2) == pdTRUE){
 800611c:	6830      	ldr	r0, [r6, #0]
 800611e:	2202      	movs	r2, #2
 8006120:	4639      	mov	r1, r7
 8006122:	f7fb ff5d 	bl	8001fe0 <xQueueReceive>
 8006126:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 8006128:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(q_response, &break_data, 2) == pdTRUE){
 800612c:	d1f3      	bne.n	8006116 <_ZL14wifiif_request10wifi_cmd_tPc+0x102>
 			   uint16_t len = strlen(break_data);
 800612e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8006132:	4658      	mov	r0, fp
 8006134:	f7fa f866 	bl	8000204 <strlen>
 			   memcpy(tmp_data, break_data, len);
 8006138:	4659      	mov	r1, fp
 800613a:	b282      	uxth	r2, r0
 800613c:	4650      	mov	r0, sl
 			   tmp_data += len;
 800613e:	4492      	add	sl, r2
 			   memcpy(tmp_data, break_data, len);
 8006140:	f006 f902 	bl	800c348 <memcpy>
 			   free(break_data);
 8006144:	4658      	mov	r0, fp
 8006146:	f006 f8f7 	bl	800c338 <free>
 	   for(uint8_t i=0; i<queue_len; i++){
 800614a:	b2e3      	uxtb	r3, r4
 800614c:	42ab      	cmp	r3, r5
 800614e:	d3e5      	bcc.n	800611c <_ZL14wifiif_request10wifi_cmd_tPc+0x108>
 	  (*dest_buffer)[total_len] = '\0';
 8006150:	44c8      	add	r8, r9
 8006152:	2300      	movs	r3, #0
 8006154:	f888 3000 	strb.w	r3, [r8]
		err = parse_packet(response_data, &pkt);
 8006158:	a906      	add	r1, sp, #24
 800615a:	4648      	mov	r0, r9
 800615c:	f7fe ff52 	bl	8005004 <parse_packet>
		if(err != PKT_ERR_OK){
 8006160:	4604      	mov	r4, r0
 8006162:	2800      	cmp	r0, #0
 8006164:	d148      	bne.n	80061f8 <_ZL14wifiif_request10wifi_cmd_tPc+0x1e4>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 8006166:	9e07      	ldr	r6, [sp, #28]
	return strcmp(str, "ERR");
 8006168:	494b      	ldr	r1, [pc, #300]	; (8006298 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
 800616a:	4630      	mov	r0, r6
 800616c:	f7fa f840 	bl	80001f0 <strcmp>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 8006170:	4605      	mov	r5, r0
 8006172:	b9c8      	cbnz	r0, 80061a8 <_ZL14wifiif_request10wifi_cmd_tPc+0x194>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8006174:	4b42      	ldr	r3, [pc, #264]	; (8006280 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 8006176:	9300      	str	r3, [sp, #0]
 8006178:	4a48      	ldr	r2, [pc, #288]	; (800629c <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 800617a:	4943      	ldr	r1, [pc, #268]	; (8006288 <_ZL14wifiif_request10wifi_cmd_tPc+0x274>)
 800617c:	4843      	ldr	r0, [pc, #268]	; (800628c <_ZL14wifiif_request10wifi_cmd_tPc+0x278>)
 800617e:	23ba      	movs	r3, #186	; 0xba
 8006180:	f004 fe54 	bl	800ae2c <LOG_DEBUG>
			if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8006184:	4b42      	ldr	r3, [pc, #264]	; (8006290 <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	b113      	cbz	r3, 8006190 <_ZL14wifiif_request10wifi_cmd_tPc+0x17c>
 800618a:	4629      	mov	r1, r5
 800618c:	4628      	mov	r0, r5
 800618e:	4798      	blx	r3
		release_packet(&pkt);
 8006190:	a806      	add	r0, sp, #24
 8006192:	f7fe ff91 	bl	80050b8 <release_packet>
		if(response_data != NULL) free(response_data);
 8006196:	f1b9 0f00 	cmp.w	r9, #0
 800619a:	d086      	beq.n	80060aa <_ZL14wifiif_request10wifi_cmd_tPc+0x96>
 800619c:	4648      	mov	r0, r9
}
 800619e:	b00d      	add	sp, #52	; 0x34
 80061a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(response_data != NULL) free(response_data);
 80061a4:	f006 b8c8 	b.w	800c338 <free>
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 80061a8:	4630      	mov	r0, r6
 80061aa:	f7fa f82b 	bl	8000204 <strlen>
 80061ae:	4607      	mov	r7, r0
 80061b0:	3001      	adds	r0, #1
 80061b2:	f006 f8b9 	bl	800c328 <malloc>
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 80061b6:	4631      	mov	r1, r6
 80061b8:	463a      	mov	r2, r7
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 80061ba:	4605      	mov	r5, r0
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 80061bc:	f006 f8c4 	bl	800c348 <memcpy>
			data[strlen(pkt.data_str)] = '\0';
 80061c0:	4630      	mov	r0, r6
 80061c2:	f7fa f81f 	bl	8000204 <strlen>
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 80061c6:	492a      	ldr	r1, [pc, #168]	; (8006270 <_ZL14wifiif_request10wifi_cmd_tPc+0x25c>)
			data[strlen(pkt.data_str)] = '\0';
 80061c8:	542c      	strb	r4, [r5, r0]
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 80061ca:	2211      	movs	r2, #17
 80061cc:	9806      	ldr	r0, [sp, #24]
 80061ce:	f7fe ff83 	bl	80050d8 <str_to_cmd>
 80061d2:	b2c6      	uxtb	r6, r0
			if(command == WIFI_ISCONNECTED){
 80061d4:	2e03      	cmp	r6, #3
 80061d6:	d024      	beq.n	8006222 <_ZL14wifiif_request10wifi_cmd_tPc+0x20e>
			else if(command == WIFI_RESTART){
 80061d8:	2e01      	cmp	r6, #1
 80061da:	d103      	bne.n	80061e4 <_ZL14wifiif_request10wifi_cmd_tPc+0x1d0>
				wifi_state = false;
 80061dc:	4b30      	ldr	r3, [pc, #192]	; (80062a0 <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
 80061de:	701c      	strb	r4, [r3, #0]
				wifi_connected = false;
 80061e0:	4b30      	ldr	r3, [pc, #192]	; (80062a4 <_ZL14wifiif_request10wifi_cmd_tPc+0x290>)
 80061e2:	701c      	strb	r4, [r3, #0]
			if(fpcommand_handler) fpcommand_handler(command, data); // Handle wifiif event.
 80061e4:	4b2a      	ldr	r3, [pc, #168]	; (8006290 <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	b113      	cbz	r3, 80061f0 <_ZL14wifiif_request10wifi_cmd_tPc+0x1dc>
 80061ea:	4630      	mov	r0, r6
 80061ec:	4629      	mov	r1, r5
 80061ee:	4798      	blx	r3
			if(data != NULL) free(data);
 80061f0:	4628      	mov	r0, r5
 80061f2:	f006 f8a1 	bl	800c338 <free>
 80061f6:	e7cb      	b.n	8006190 <_ZL14wifiif_request10wifi_cmd_tPc+0x17c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80061f8:	4b21      	ldr	r3, [pc, #132]	; (8006280 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 80061fa:	4824      	ldr	r0, [pc, #144]	; (800628c <_ZL14wifiif_request10wifi_cmd_tPc+0x278>)
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4a2a      	ldr	r2, [pc, #168]	; (80062a8 <_ZL14wifiif_request10wifi_cmd_tPc+0x294>)
 8006200:	4921      	ldr	r1, [pc, #132]	; (8006288 <_ZL14wifiif_request10wifi_cmd_tPc+0x274>)
 8006202:	2395      	movs	r3, #149	; 0x95
 8006204:	f004 fe12 	bl	800ae2c <LOG_DEBUG>
			release_packet(&pkt);
 8006208:	a806      	add	r0, sp, #24
 800620a:	f7fe ff55 	bl	80050b8 <release_packet>
			if(response_data != NULL) free(response_data);
 800620e:	f1b9 0f00 	cmp.w	r9, #0
 8006212:	d1c3      	bne.n	800619c <_ZL14wifiif_request10wifi_cmd_tPc+0x188>
 8006214:	e749      	b.n	80060aa <_ZL14wifiif_request10wifi_cmd_tPc+0x96>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 8006216:	2001      	movs	r0, #1
 8006218:	f006 f886 	bl	800c328 <malloc>
 800621c:	4681      	mov	r9, r0
 800621e:	4680      	mov	r8, r0
 8006220:	e797      	b.n	8006152 <_ZL14wifiif_request10wifi_cmd_tPc+0x13e>
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 8006222:	af09      	add	r7, sp, #36	; 0x24
 8006224:	4a21      	ldr	r2, [pc, #132]	; (80062ac <_ZL14wifiif_request10wifi_cmd_tPc+0x298>)
 8006226:	9807      	ldr	r0, [sp, #28]
				pkt_json_t json;
 8006228:	9409      	str	r4, [sp, #36]	; 0x24
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 800622a:	4639      	mov	r1, r7
				pkt_json_t json;
 800622c:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 8006230:	940b      	str	r4, [sp, #44]	; 0x2c
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 8006232:	f7fe fdbd 	bl	8004db0 <json_get_object>
				if(err == PKT_ERR_OK){
 8006236:	b950      	cbnz	r0, 800624e <_ZL14wifiif_request10wifi_cmd_tPc+0x23a>
					if(strcmp(json.value, "1") == 0) {
 8006238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800623a:	781a      	ldrb	r2, [r3, #0]
 800623c:	2a31      	cmp	r2, #49	; 0x31
 800623e:	d10a      	bne.n	8006256 <_ZL14wifiif_request10wifi_cmd_tPc+0x242>
 8006240:	7859      	ldrb	r1, [r3, #1]
 8006242:	b941      	cbnz	r1, 8006256 <_ZL14wifiif_request10wifi_cmd_tPc+0x242>
						wifi_state = true;
 8006244:	4916      	ldr	r1, [pc, #88]	; (80062a0 <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
						wifi_connected = true;
 8006246:	4a17      	ldr	r2, [pc, #92]	; (80062a4 <_ZL14wifiif_request10wifi_cmd_tPc+0x290>)
						wifi_state = true;
 8006248:	2301      	movs	r3, #1
 800624a:	700b      	strb	r3, [r1, #0]
						wifi_connected = true;
 800624c:	7013      	strb	r3, [r2, #0]
				json_release_object(&json);
 800624e:	4638      	mov	r0, r7
 8006250:	f7fe fec6 	bl	8004fe0 <json_release_object>
 8006254:	e7c6      	b.n	80061e4 <_ZL14wifiif_request10wifi_cmd_tPc+0x1d0>
					else if(strcmp(json.value, "0") == 0) {
 8006256:	2a30      	cmp	r2, #48	; 0x30
 8006258:	d1f9      	bne.n	800624e <_ZL14wifiif_request10wifi_cmd_tPc+0x23a>
 800625a:	785b      	ldrb	r3, [r3, #1]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1f6      	bne.n	800624e <_ZL14wifiif_request10wifi_cmd_tPc+0x23a>
						wifi_state = false;
 8006260:	4a0f      	ldr	r2, [pc, #60]	; (80062a0 <_ZL14wifiif_request10wifi_cmd_tPc+0x28c>)
 8006262:	7013      	strb	r3, [r2, #0]
						wifi_connected = false;
 8006264:	4a0f      	ldr	r2, [pc, #60]	; (80062a4 <_ZL14wifiif_request10wifi_cmd_tPc+0x290>)
 8006266:	7013      	strb	r3, [r2, #0]
 8006268:	e7f1      	b.n	800624e <_ZL14wifiif_request10wifi_cmd_tPc+0x23a>
 800626a:	bf00      	nop
 800626c:	2000b2cc 	.word	0x2000b2cc
 8006270:	20000034 	.word	0x20000034
 8006274:	08011234 	.word	0x08011234
 8006278:	0801123c 	.word	0x0801123c
 800627c:	2000b2bc 	.word	0x2000b2bc
 8006280:	08011264 	.word	0x08011264
 8006284:	08011294 	.word	0x08011294
 8006288:	08010d14 	.word	0x08010d14
 800628c:	0801125c 	.word	0x0801125c
 8006290:	2000b2c8 	.word	0x2000b2c8
 8006294:	2000b2c0 	.word	0x2000b2c0
 8006298:	08011cc8 	.word	0x08011cc8
 800629c:	08011280 	.word	0x08011280
 80062a0:	2000b2c4 	.word	0x2000b2c4
 80062a4:	2000b2c5 	.word	0x2000b2c5
 80062a8:	08011244 	.word	0x08011244
 80062ac:	08011274 	.word	0x08011274

080062b0 <wifiif_get_break_data>:
void wifiif_get_break_data(char *brk_data){
 80062b0:	b530      	push	{r4, r5, lr}
 80062b2:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80062b4:	2500      	movs	r5, #0
    if(strcmp(brk_data, "\r\nend\r\n") != 0) {
 80062b6:	4912      	ldr	r1, [pc, #72]	; (8006300 <wifiif_get_break_data+0x50>)
void wifiif_get_break_data(char *brk_data){
 80062b8:	9001      	str	r0, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80062ba:	9503      	str	r5, [sp, #12]
    if(strcmp(brk_data, "\r\nend\r\n") != 0) {
 80062bc:	4604      	mov	r4, r0
 80062be:	f7f9 ff97 	bl	80001f0 <strcmp>
 80062c2:	b150      	cbz	r0, 80062da <wifiif_get_break_data+0x2a>
		if(xQueueSendFromISR(q_response, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 80062c4:	4a0f      	ldr	r2, [pc, #60]	; (8006304 <wifiif_get_break_data+0x54>)
 80062c6:	462b      	mov	r3, r5
 80062c8:	6810      	ldr	r0, [r2, #0]
 80062ca:	a901      	add	r1, sp, #4
 80062cc:	aa03      	add	r2, sp, #12
 80062ce:	f7fb fdc9 	bl	8001e64 <xQueueGenericSendFromISR>
 80062d2:	2801      	cmp	r0, #1
 80062d4:	d10d      	bne.n	80062f2 <wifiif_get_break_data+0x42>
}
 80062d6:	b005      	add	sp, #20
 80062d8:	bd30      	pop	{r4, r5, pc}
    	free(brk_data);
 80062da:	4620      	mov	r0, r4
 80062dc:	f006 f82c 	bl	800c338 <free>
    	xEventGroupSetBitsFromISR(e_response, DATA_EVENTBIT, &xHigherPriorityTaskWoken);
 80062e0:	4b09      	ldr	r3, [pc, #36]	; (8006308 <wifiif_get_break_data+0x58>)
 80062e2:	aa03      	add	r2, sp, #12
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ea:	f7fb fabd 	bl	8001868 <xEventGroupSetBitsFromISR>
}
 80062ee:	b005      	add	sp, #20
 80062f0:	bd30      	pop	{r4, r5, pc}
		if(xQueueSendFromISR(q_response, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 80062f2:	4906      	ldr	r1, [pc, #24]	; (800630c <wifiif_get_break_data+0x5c>)
 80062f4:	4806      	ldr	r0, [pc, #24]	; (8006310 <wifiif_get_break_data+0x60>)
 80062f6:	f004 fd5b 	bl	800adb0 <LOG_ERROR>
}
 80062fa:	b005      	add	sp, #20
 80062fc:	bd30      	pop	{r4, r5, pc}
 80062fe:	bf00      	nop
 8006300:	0801123c 	.word	0x0801123c
 8006304:	2000b2c0 	.word	0x2000b2c0
 8006308:	2000b2bc 	.word	0x2000b2bc
 800630c:	080112bc 	.word	0x080112bc
 8006310:	0801125c 	.word	0x0801125c

08006314 <wifiif_init>:

/**
 * WiFi setup function.
 */
void wifiif_init(void (*prequest)(char *, uint16_t)){
	fprequest = prequest;
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <wifiif_init+0x20>)
void wifiif_init(void (*prequest)(char *, uint16_t)){
 8006316:	b510      	push	{r4, lr}

	q_response = xQueueCreate(20, sizeof(char *));
 8006318:	2200      	movs	r2, #0
void wifiif_init(void (*prequest)(char *, uint16_t)){
 800631a:	4604      	mov	r4, r0
	q_response = xQueueCreate(20, sizeof(char *));
 800631c:	2104      	movs	r1, #4
 800631e:	2014      	movs	r0, #20
	fprequest = prequest;
 8006320:	601c      	str	r4, [r3, #0]
	q_response = xQueueCreate(20, sizeof(char *));
 8006322:	f7fb fba7 	bl	8001a74 <xQueueGenericCreate>
 8006326:	4b04      	ldr	r3, [pc, #16]	; (8006338 <wifiif_init+0x24>)
 8006328:	6018      	str	r0, [r3, #0]
	e_response = xEventGroupCreate();
 800632a:	f7fb fa07 	bl	800173c <xEventGroupCreate>
 800632e:	4b03      	ldr	r3, [pc, #12]	; (800633c <wifiif_init+0x28>)
 8006330:	6018      	str	r0, [r3, #0]
}
 8006332:	bd10      	pop	{r4, pc}
 8006334:	2000b2cc 	.word	0x2000b2cc
 8006338:	2000b2c0 	.word	0x2000b2c0
 800633c:	2000b2bc 	.word	0x2000b2bc

08006340 <wifiif_register_command_handler>:

void wifiif_register_command_handler(void (*pcommand_handler)(wifi_cmd_t cmd, void *param)){
	fpcommand_handler = pcommand_handler;
 8006340:	4b01      	ldr	r3, [pc, #4]	; (8006348 <wifiif_register_command_handler+0x8>)
 8006342:	6018      	str	r0, [r3, #0]
}
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	2000b2c8 	.word	0x2000b2c8

0800634c <wifiif_restart>:

/**
 * WiFi control.
 */
void wifiif_restart(void){
 800634c:	b508      	push	{r3, lr}
	wifiif_request(WIFI_RESTART, (char *)"{}");
 800634e:	4905      	ldr	r1, [pc, #20]	; (8006364 <wifiif_restart+0x18>)
 8006350:	2001      	movs	r0, #1
 8006352:	f7ff fe5f 	bl	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>
	wifi_state = false;
 8006356:	4904      	ldr	r1, [pc, #16]	; (8006368 <wifiif_restart+0x1c>)
	wifi_connected = false;
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <wifiif_restart+0x20>)
	wifi_state = false;
 800635a:	2300      	movs	r3, #0
 800635c:	700b      	strb	r3, [r1, #0]
	wifi_connected = false;
 800635e:	7013      	strb	r3, [r2, #0]
}
 8006360:	bd08      	pop	{r3, pc}
 8006362:	bf00      	nop
 8006364:	080112d0 	.word	0x080112d0
 8006368:	2000b2c4 	.word	0x2000b2c4
 800636c:	2000b2c5 	.word	0x2000b2c5

08006370 <wifiif_checkconnect>:
void wifiif_scan(void){
	wifiif_request(WIFI_SCAN, (char *)"{}");
}
void wifiif_checkconnect(void){
	wifiif_request(WIFI_ISCONNECTED, (char *)"{}");
 8006370:	4901      	ldr	r1, [pc, #4]	; (8006378 <wifiif_checkconnect+0x8>)
 8006372:	2003      	movs	r0, #3
 8006374:	f7ff be4e 	b.w	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>
 8006378:	080112d0 	.word	0x080112d0

0800637c <wifiif_wificonnected>:
}
bool wifiif_wificonnected(void){
	return wifi_connected;
 800637c:	4b01      	ldr	r3, [pc, #4]	; (8006384 <wifiif_wificonnected+0x8>)
 800637e:	7818      	ldrb	r0, [r3, #0]
}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000b2c5 	.word	0x2000b2c5

08006388 <wifiif_set_wificonnect_state>:
void wifiif_set_wificonnect_state(bool state){
	wifi_connected = state;
 8006388:	4b01      	ldr	r3, [pc, #4]	; (8006390 <wifiif_set_wificonnect_state+0x8>)
 800638a:	7018      	strb	r0, [r3, #0]
}
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	2000b2c5 	.word	0x2000b2c5

08006394 <wifiif_connect>:
void wifiif_connect(char *ssid, char *pass, char *auth){
 8006394:	b510      	push	{r4, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	4614      	mov	r4, r2
 800639a:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"ssid\":\"%s\",\"pass\":\"%s\",\"auth\":\"%s\"}", ssid, pass, auth);
 800639c:	4602      	mov	r2, r0
 800639e:	4907      	ldr	r1, [pc, #28]	; (80063bc <wifiif_connect+0x28>)
 80063a0:	9400      	str	r4, [sp, #0]
 80063a2:	a803      	add	r0, sp, #12
 80063a4:	f005 ff6c 	bl	800c280 <asiprintf>

	wifiif_request(WIFI_CONN, data);
 80063a8:	9903      	ldr	r1, [sp, #12]
 80063aa:	2004      	movs	r0, #4
 80063ac:	f7ff fe32 	bl	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 80063b0:	9803      	ldr	r0, [sp, #12]
 80063b2:	f005 ffc1 	bl	800c338 <free>
}
 80063b6:	b004      	add	sp, #16
 80063b8:	bd10      	pop	{r4, pc}
 80063ba:	bf00      	nop
 80063bc:	080112d4 	.word	0x080112d4

080063c0 <wifiif_http_client_new>:

/**
 * HTTP Client.
 */
void wifiif_http_client_new(void){
	wifiif_request(WIFI_HTTP_CLIENT_NEW, (char *)"{}");
 80063c0:	4901      	ldr	r1, [pc, #4]	; (80063c8 <wifiif_http_client_new+0x8>)
 80063c2:	2007      	movs	r0, #7
 80063c4:	f7ff be26 	b.w	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>
 80063c8:	080112d0 	.word	0x080112d0

080063cc <wifiif_http_client_config>:
}

void wifiif_http_client_config(char *config){
 80063cc:	4601      	mov	r1, r0
	wifiif_request(WIFI_HTTP_CLIENT_CONFIG, config);
 80063ce:	2008      	movs	r0, #8
 80063d0:	f7ff be20 	b.w	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>

080063d4 <wifiif_http_client_init>:
}

void wifiif_http_client_init(void){
	wifiif_request(WIFI_HTTP_CLIENT_INIT, (char *)"{}");
 80063d4:	4901      	ldr	r1, [pc, #4]	; (80063dc <wifiif_http_client_init+0x8>)
 80063d6:	2009      	movs	r0, #9
 80063d8:	f7ff be1c 	b.w	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>
 80063dc:	080112d0 	.word	0x080112d0

080063e0 <wifiif_http_client_set_header>:

void wifiif_http_client_clean(void){
	wifiif_request(WIFI_HTTP_CLIENT_CLEAN, (char *)"{}");
}

void wifiif_http_client_set_header(char *key, char *value){
 80063e0:	b500      	push	{lr}
 80063e2:	b083      	sub	sp, #12
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"key\":\"%s\",\"value\":\"%s\"}", key, value);
 80063e8:	a801      	add	r0, sp, #4
 80063ea:	4906      	ldr	r1, [pc, #24]	; (8006404 <wifiif_http_client_set_header+0x24>)
 80063ec:	f005 ff48 	bl	800c280 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_HEADER, data);
 80063f0:	9901      	ldr	r1, [sp, #4]
 80063f2:	200b      	movs	r0, #11
 80063f4:	f7ff fe0e 	bl	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 80063f8:	9801      	ldr	r0, [sp, #4]
 80063fa:	f005 ff9d 	bl	800c338 <free>
}
 80063fe:	b003      	add	sp, #12
 8006400:	f85d fb04 	ldr.w	pc, [sp], #4
 8006404:	080112fc 	.word	0x080112fc

08006408 <wifiif_http_client_set_url>:

void wifiif_http_client_set_url(char *url){
 8006408:	b500      	push	{lr}
 800640a:	b083      	sub	sp, #12
 800640c:	4602      	mov	r2, r0
	char *tmp;
	asprintf(&tmp, "{\"url\":\"%s\"}", url);
 800640e:	4907      	ldr	r1, [pc, #28]	; (800642c <wifiif_http_client_set_url+0x24>)
 8006410:	a801      	add	r0, sp, #4
 8006412:	f005 ff35 	bl	800c280 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_URL, tmp);
 8006416:	9901      	ldr	r1, [sp, #4]
 8006418:	200c      	movs	r0, #12
 800641a:	f7ff fdfb 	bl	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 800641e:	9801      	ldr	r0, [sp, #4]
 8006420:	f005 ff8a 	bl	800c338 <free>
}
 8006424:	b003      	add	sp, #12
 8006426:	f85d fb04 	ldr.w	pc, [sp], #4
 800642a:	bf00      	nop
 800642c:	08011318 	.word	0x08011318

08006430 <wifiif_http_client_set_method>:

void wifiif_http_client_set_method(char *method){
 8006430:	b500      	push	{lr}
 8006432:	b083      	sub	sp, #12
 8006434:	4602      	mov	r2, r0
	char *tmp;
	asprintf(&tmp, "{\"method\":\"%s\"}", method);
 8006436:	4907      	ldr	r1, [pc, #28]	; (8006454 <wifiif_http_client_set_method+0x24>)
 8006438:	a801      	add	r0, sp, #4
 800643a:	f005 ff21 	bl	800c280 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_METHOD, tmp);
 800643e:	9901      	ldr	r1, [sp, #4]
 8006440:	200d      	movs	r0, #13
 8006442:	f7ff fde7 	bl	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 8006446:	9801      	ldr	r0, [sp, #4]
 8006448:	f005 ff76 	bl	800c338 <free>
}
 800644c:	b003      	add	sp, #12
 800644e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006452:	bf00      	nop
 8006454:	08011328 	.word	0x08011328

08006458 <wifiif_http_client_set_data>:

void wifiif_http_client_set_data(char *data){
 8006458:	b500      	push	{lr}
 800645a:	b083      	sub	sp, #12
 800645c:	4602      	mov	r2, r0
	char *tmp;
	asprintf(&tmp, "{\"data\":%s}", data);
 800645e:	4907      	ldr	r1, [pc, #28]	; (800647c <wifiif_http_client_set_data+0x24>)
 8006460:	a801      	add	r0, sp, #4
 8006462:	f005 ff0d 	bl	800c280 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_DATA, tmp);
 8006466:	9901      	ldr	r1, [sp, #4]
 8006468:	200e      	movs	r0, #14
 800646a:	f7ff fdd3 	bl	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 800646e:	9801      	ldr	r0, [sp, #4]
 8006470:	f005 ff62 	bl	800c338 <free>
}
 8006474:	b003      	add	sp, #12
 8006476:	f85d fb04 	ldr.w	pc, [sp], #4
 800647a:	bf00      	nop
 800647c:	08011338 	.word	0x08011338

08006480 <wifiif_http_client_request>:

void wifiif_http_client_request(void){
	wifiif_request(WIFI_HTTP_CLIENT_REQUEST, (char *)"{}");
 8006480:	4901      	ldr	r1, [pc, #4]	; (8006488 <wifiif_http_client_request+0x8>)
 8006482:	200f      	movs	r0, #15
 8006484:	f7ff bdc6 	b.w	8006014 <_ZL14wifiif_request10wifi_cmd_tPc>
 8006488:	080112d0 	.word	0x080112d0

0800648c <wifiif_state_running>:
}


void wifiif_state_running(bool state){
	wifi_state = state;
 800648c:	4b01      	ldr	r3, [pc, #4]	; (8006494 <wifiif_state_running+0x8>)
 800648e:	7018      	strb	r0, [r3, #0]
}
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	2000b2c4 	.word	0x2000b2c4

08006498 <wifiif_state_is_running>:
bool wifiif_state_is_running(void){
	return wifi_state;
 8006498:	4b01      	ldr	r3, [pc, #4]	; (80064a0 <wifiif_state_is_running+0x8>)
 800649a:	7818      	ldrb	r0, [r3, #0]
}
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	2000b2c4 	.word	0x2000b2c4

080064a4 <ADC_IRQHandler>:



void ADC_IRQHandler(adc *adc){

}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef>:
	_adc = adc;
 80064a8:	a10f      	add	r1, pc, #60	; (adr r1, 80064e8 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x40>)
 80064aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ae:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80064d0 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x28>
 80064b2:	4b09      	ldr	r3, [pc, #36]	; (80064d8 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x30>)
 80064b4:	4a09      	ldr	r2, [pc, #36]	; (80064dc <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x34>)
 80064b6:	ed83 7b00 	vstr	d7, [r3]
 80064ba:	e9c2 0100 	strd	r0, r1, [r2]
 80064be:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x38>)
 80064c0:	4808      	ldr	r0, [pc, #32]	; (80064e4 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x3c>)
 80064c2:	2100      	movs	r1, #0
 80064c4:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(ADC3)
adc adc_3(ADC3);
adc_t adc3;
void ADC3_IRQHandler(void){
	ADC_IRQHandler(adc3);
}
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	f3af 8000 	nop.w
 80064d0:	40012000 	.word	0x40012000
 80064d4:	00000000 	.word	0x00000000
 80064d8:	2000b2d0 	.word	0x2000b2d0
 80064dc:	2000b2d8 	.word	0x2000b2d8
 80064e0:	2000b2e0 	.word	0x2000b2e0
 80064e4:	40012200 	.word	0x40012200
 80064e8:	40012100 	.word	0x40012100
 80064ec:	00000000 	.word	0x00000000

080064f0 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 80064f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064f2:	460e      	mov	r6, r1
	stm_ret_t ret;
 80064f4:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 80064f6:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 80064f8:	7002      	strb	r2, [r0, #0]
 80064fa:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 80064fc:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 80064fe:	b085      	sub	sp, #20
 8006500:	4604      	mov	r4, r0
	stm_ret_t ret;
 8006502:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 8006504:	d006      	beq.n	8006514 <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 8006506:	f240 122b 	movw	r2, #299	; 0x12b
 800650a:	f004 fdc3 	bl	800b094 <set_return>
		return ret;
	}

	return ret;
}
 800650e:	4620      	mov	r0, r4
 8006510:	b005      	add	sp, #20
 8006512:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8006514:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8006516:	68f1      	ldr	r1, [r6, #12]
 8006518:	680d      	ldr	r5, [r1, #0]
 800651a:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 800651c:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 800651e:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 8006522:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8006524:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 8006526:	6969      	ldr	r1, [r5, #20]
 8006528:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800652c:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 800652e:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8006530:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 8006532:	f021 0101 	bic.w	r1, r1, #1
 8006536:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8006538:	9000      	str	r0, [sp, #0]
 800653a:	4629      	mov	r1, r5
 800653c:	4638      	mov	r0, r7
 800653e:	f004 fd6d 	bl	800b01c <wait_flag_in_register_timeout>
 8006542:	e897 0003 	ldmia.w	r7, {r0, r1}
 8006546:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 800654a:	4620      	mov	r0, r4
 800654c:	f004 fdb0 	bl	800b0b0 <is_timeout>
 8006550:	bb20      	cbnz	r0, 800659c <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8006552:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 8006554:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8006556:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 8006558:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 800655c:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 800655e:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8006562:	bf94      	ite	ls
 8006564:	6093      	strls	r3, [r2, #8]
 8006566:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 8006568:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 800656c:	2a00      	cmp	r2, #0
 800656e:	dbce      	blt.n	800650e <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006570:	0953      	lsrs	r3, r2, #5
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006578:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800657c:	2101      	movs	r1, #1
 800657e:	f002 021f 	and.w	r2, r2, #31
 8006582:	fa01 f202 	lsl.w	r2, r1, r2
 8006586:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800658a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800658e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006592:	f3bf 8f6f 	isb	sy
}
 8006596:	4620      	mov	r0, r4
 8006598:	b005      	add	sp, #20
 800659a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 800659c:	4620      	mov	r0, r4
 800659e:	f240 1119 	movw	r1, #281	; 0x119
 80065a2:	f004 fd7b 	bl	800b09c <set_return_line>
}
 80065a6:	4620      	mov	r0, r4
 80065a8:	b005      	add	sp, #20
 80065aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080065ac <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 80065ac:	68c3      	ldr	r3, [r0, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 80065b2:	b280      	uxth	r0, r0
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop

080065b8 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 80065b8:	68c0      	ldr	r0, [r0, #12]
 80065ba:	4770      	bx	lr

080065bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 80065bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 80065c0:	4857      	ldr	r0, [pc, #348]	; (8006720 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 80065c2:	f8df e188 	ldr.w	lr, [pc, #392]	; 800674c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 80065c6:	4f57      	ldr	r7, [pc, #348]	; (8006724 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 80065c8:	4e57      	ldr	r6, [pc, #348]	; (8006728 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 80065ca:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006750 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 80065ce:	f8df a184 	ldr.w	sl, [pc, #388]	; 8006754 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 80065d2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006758 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 80065d6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800675c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 80065da:	f8df c184 	ldr.w	ip, [pc, #388]	; 8006760 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 80065de:	4953      	ldr	r1, [pc, #332]	; (800672c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 80065e0:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 80065e4:	2300      	movs	r3, #0
 80065e6:	2205      	movs	r2, #5
 80065e8:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 80065ec:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 80065f0:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 80065f4:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 80065f8:	f8c9 3014 	str.w	r3, [r9, #20]
 80065fc:	e9cb 3308 	strd	r3, r3, [fp, #32]
 8006600:	f8c8 3014 	str.w	r3, [r8, #20]
 8006604:	e9ca 3308 	strd	r3, r3, [sl, #32]
 8006608:	e9c9 3308 	strd	r3, r3, [r9, #32]
 800660c:	e9c8 3308 	strd	r3, r3, [r8, #32]
 8006610:	f8cb 2010 	str.w	r2, [fp, #16]
 8006614:	f8cb 3018 	str.w	r3, [fp, #24]
 8006618:	f88b 301c 	strb.w	r3, [fp, #28]
 800661c:	f8ca 2010 	str.w	r2, [sl, #16]
 8006620:	f8ca 3018 	str.w	r3, [sl, #24]
 8006624:	f88a 301c 	strb.w	r3, [sl, #28]
 8006628:	f8c9 2010 	str.w	r2, [r9, #16]
 800662c:	f8c9 3018 	str.w	r3, [r9, #24]
 8006630:	f889 301c 	strb.w	r3, [r9, #28]
 8006634:	f8c8 2010 	str.w	r2, [r8, #16]
 8006638:	f8c8 3018 	str.w	r3, [r8, #24]
 800663c:	f888 301c 	strb.w	r3, [r8, #28]
 8006640:	f8ce 2010 	str.w	r2, [lr, #16]
 8006644:	f8ce 3014 	str.w	r3, [lr, #20]
 8006648:	f8ce 3018 	str.w	r3, [lr, #24]
 800664c:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 8006650:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 8006654:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 8006658:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 800665a:	617b      	str	r3, [r7, #20]
 800665c:	6102      	str	r2, [r0, #16]
 800665e:	6173      	str	r3, [r6, #20]
 8006660:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8006664:	6143      	str	r3, [r0, #20]
 8006666:	6132      	str	r2, [r6, #16]
 8006668:	61b3      	str	r3, [r6, #24]
 800666a:	7733      	strb	r3, [r6, #28]
 800666c:	6183      	str	r3, [r0, #24]
 800666e:	4606      	mov	r6, r0
 8006670:	7703      	strb	r3, [r0, #28]
 8006672:	6203      	str	r3, [r0, #32]
 8006674:	6243      	str	r3, [r0, #36]	; 0x24
 8006676:	482e      	ldr	r0, [pc, #184]	; (8006730 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	f8ce 1008 	str.w	r1, [lr, #8]
 800667e:	f8cc 1008 	str.w	r1, [ip, #8]
 8006682:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 8006686:	e9c7 3308 	strd	r3, r3, [r7, #32]
 800668a:	613a      	str	r2, [r7, #16]
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	773b      	strb	r3, [r7, #28]
 8006690:	6102      	str	r2, [r0, #16]
 8006692:	6143      	str	r3, [r0, #20]
 8006694:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8006698:	f8ce 3020 	str.w	r3, [lr, #32]
 800669c:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 80066a0:	f8cc 2010 	str.w	r2, [ip, #16]
 80066a4:	f8cc 3018 	str.w	r3, [ip, #24]
 80066a8:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 80066ac:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80066ae:	4e21      	ldr	r6, [pc, #132]	; (8006734 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 80066b0:	4f21      	ldr	r7, [pc, #132]	; (8006738 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 80066b2:	6173      	str	r3, [r6, #20]
 80066b4:	4e21      	ldr	r6, [pc, #132]	; (800673c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	6173      	str	r3, [r6, #20]
 80066ba:	4e1e      	ldr	r6, [pc, #120]	; (8006734 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 80066bc:	4d20      	ldr	r5, [pc, #128]	; (8006740 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 80066be:	6132      	str	r2, [r6, #16]
 80066c0:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80066c4:	61b3      	str	r3, [r6, #24]
 80066c6:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 80066c8:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80066ca:	6183      	str	r3, [r0, #24]
 80066cc:	4e1b      	ldr	r6, [pc, #108]	; (800673c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 80066ce:	7703      	strb	r3, [r0, #28]
 80066d0:	6203      	str	r3, [r0, #32]
 80066d2:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 80066d4:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 80066d6:	481b      	ldr	r0, [pc, #108]	; (8006744 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 80066d8:	4c1b      	ldr	r4, [pc, #108]	; (8006748 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 80066da:	613a      	str	r2, [r7, #16]
 80066dc:	e9c7 3308 	strd	r3, r3, [r7, #32]
 80066e0:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80066e4:	e9c5 3308 	strd	r3, r3, [r5, #32]
 80066e8:	61bb      	str	r3, [r7, #24]
 80066ea:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 80066ec:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 80066ee:	6132      	str	r2, [r6, #16]
 80066f0:	61b3      	str	r3, [r6, #24]
 80066f2:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 80066f4:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80066f6:	612a      	str	r2, [r5, #16]
 80066f8:	616b      	str	r3, [r5, #20]
 80066fa:	61ab      	str	r3, [r5, #24]
 80066fc:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 80066fe:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 8006700:	6102      	str	r2, [r0, #16]
 8006702:	7703      	strb	r3, [r0, #28]
 8006704:	6163      	str	r3, [r4, #20]
 8006706:	e9c4 3308 	strd	r3, r3, [r4, #32]
 800670a:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800670e:	6122      	str	r2, [r4, #16]
 8006710:	61a3      	str	r3, [r4, #24]
 8006712:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 8006714:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 8006716:	6143      	str	r3, [r0, #20]
 8006718:	6183      	str	r3, [r0, #24]
	_dma = dma;
 800671a:	6081      	str	r1, [r0, #8]
}
 800671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	2000b428 	.word	0x2000b428
 8006724:	2000b3d8 	.word	0x2000b3d8
 8006728:	2000b400 	.word	0x2000b400
 800672c:	40026000 	.word	0x40026000
 8006730:	2000b450 	.word	0x2000b450
 8006734:	2000b478 	.word	0x2000b478
 8006738:	2000b4a0 	.word	0x2000b4a0
 800673c:	2000b4c8 	.word	0x2000b4c8
 8006740:	2000b4f0 	.word	0x2000b4f0
 8006744:	2000b540 	.word	0x2000b540
 8006748:	2000b518 	.word	0x2000b518
 800674c:	2000b388 	.word	0x2000b388
 8006750:	2000b2e8 	.word	0x2000b2e8
 8006754:	2000b310 	.word	0x2000b310
 8006758:	2000b338 	.word	0x2000b338
 800675c:	2000b360 	.word	0x2000b360
 8006760:	2000b3b0 	.word	0x2000b3b0

08006764 <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8006764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006768:	b083      	sub	sp, #12
	stm_ret_t ret;
 800676a:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 800676e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 8006772:	f880 c000 	strb.w	ip, [r0]
 8006776:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006778:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 800677c:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 800677e:	f240 8085 	bls.w	800688c <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 8006782:	2a03      	cmp	r2, #3
 8006784:	4604      	mov	r4, r0
 8006786:	d84b      	bhi.n	8006820 <exti_init+0xbc>
 8006788:	46ae      	mov	lr, r5
 800678a:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 800678c:	1d97      	adds	r7, r2, #6
 800678e:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006790:	2501      	movs	r5, #1
 8006792:	40bd      	lsls	r5, r7
 8006794:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8006796:	484d      	ldr	r0, [pc, #308]	; (80068cc <exti_init+0x168>)
 8006798:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 800679c:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 80067a0:	d105      	bne.n	80067ae <exti_init+0x4a>
 80067a2:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 80067a6:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 80067aa:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 80067ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80067b2:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 80067b6:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 80067ba:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 80067be:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80067c2:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 80067c4:	9801      	ldr	r0, [sp, #4]
 80067c6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 80067ca:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 80067ce:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 80067d2:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 80067d6:	fa09 fe0e 	lsl.w	lr, r9, lr
 80067da:	ea20 000e 	bic.w	r0, r0, lr
 80067de:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 80067e0:	9801      	ldr	r0, [sp, #4]
 80067e2:	4301      	orrs	r1, r0
 80067e4:	9101      	str	r1, [sp, #4]

	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 80067e6:	9901      	ldr	r1, [sp, #4]
 80067e8:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 80067ec:	07db      	lsls	r3, r3, #31
 80067ee:	d423      	bmi.n	8006838 <exti_init+0xd4>
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 80067f6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80068d4 <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 80067fa:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067fc:	4c34      	ldr	r4, [pc, #208]	; (80068d0 <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 80067fe:	f8dc 1000 	ldr.w	r1, [ip]
 8006802:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8006806:	19e2      	adds	r2, r4, r7
 8006808:	b2db      	uxtb	r3, r3
 800680a:	ea41 010e 	orr.w	r1, r1, lr
 800680e:	f8cc 1000 	str.w	r1, [ip]
 8006812:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006816:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 800681a:	b003      	add	sp, #12
 800681c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 8006820:	1f10      	subs	r0, r2, #4
 8006822:	2803      	cmp	r0, #3
 8006824:	d915      	bls.n	8006852 <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 8006826:	f1a2 0008 	sub.w	r0, r2, #8
 800682a:	2803      	cmp	r0, #3
 800682c:	d825      	bhi.n	800687a <exti_init+0x116>
 800682e:	f04f 0e08 	mov.w	lr, #8
 8006832:	f04f 0c02 	mov.w	ip, #2
 8006836:	e012      	b.n	800685e <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8006838:	4b26      	ldr	r3, [pc, #152]	; (80068d4 <exti_init+0x170>)
 800683a:	2101      	movs	r1, #1
 800683c:	fa01 fe02 	lsl.w	lr, r1, r2
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	ea42 020e 	orr.w	r2, r2, lr
 8006846:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 8006848:	68da      	ldr	r2, [r3, #12]
 800684a:	ea4e 0202 	orr.w	r2, lr, r2
 800684e:	60da      	str	r2, [r3, #12]
 8006850:	e7d1      	b.n	80067f6 <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8006852:	2a04      	cmp	r2, #4
 8006854:	bf08      	it	eq
 8006856:	4696      	moveq	lr, r2
 8006858:	d098      	beq.n	800678c <exti_init+0x28>
 800685a:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 800685e:	1f50      	subs	r0, r2, #5
 8006860:	b280      	uxth	r0, r0
 8006862:	2804      	cmp	r0, #4
 8006864:	bf35      	itete	cc
 8006866:	2717      	movcc	r7, #23
 8006868:	2728      	movcs	r7, #40	; 0x28
 800686a:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 800686e:	f44f 7580 	movcs.w	r5, #256	; 0x100
 8006872:	bf34      	ite	cc
 8006874:	2600      	movcc	r6, #0
 8006876:	2601      	movcs	r6, #1
 8006878:	e78d      	b.n	8006796 <exti_init+0x32>
 800687a:	4666      	mov	r6, ip
 800687c:	2728      	movs	r7, #40	; 0x28
 800687e:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006882:	f04f 0e0c 	mov.w	lr, #12
 8006886:	f04f 0c03 	mov.w	ip, #3
 800688a:	e784      	b.n	8006796 <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 800688c:	4629      	mov	r1, r5
 800688e:	223a      	movs	r2, #58	; 0x3a
 8006890:	f004 fc00 	bl	800b094 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <exti_init+0x174>)
 8006896:	4a11      	ldr	r2, [pc, #68]	; (80068dc <exti_init+0x178>)
 8006898:	4911      	ldr	r1, [pc, #68]	; (80068e0 <exti_init+0x17c>)
 800689a:	4812      	ldr	r0, [pc, #72]	; (80068e4 <exti_init+0x180>)
 800689c:	f004 fa88 	bl	800adb0 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 80068a0:	4911      	ldr	r1, [pc, #68]	; (80068e8 <exti_init+0x184>)
 80068a2:	4810      	ldr	r0, [pc, #64]	; (80068e4 <exti_init+0x180>)
 80068a4:	2205      	movs	r2, #5
 80068a6:	f004 fa07 	bl	800acb8 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 80068aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80068ae:	f001 fe13 	bl	80084d8 <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 80068b2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80068b6:	490d      	ldr	r1, [pc, #52]	; (80068ec <exti_init+0x188>)
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <exti_init+0x18c>)
 80068ba:	68ca      	ldr	r2, [r1, #12]
 80068bc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80068c0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80068c2:	60cb      	str	r3, [r1, #12]
 80068c4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80068c8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80068ca:	e7fd      	b.n	80068c8 <exti_init+0x164>
 80068cc:	40023800 	.word	0x40023800
 80068d0:	e000e100 	.word	0xe000e100
 80068d4:	40013c00 	.word	0x40013c00
 80068d8:	080114c0 	.word	0x080114c0
 80068dc:	080114cc 	.word	0x080114cc
 80068e0:	080114f4 	.word	0x080114f4
 80068e4:	08011538 	.word	0x08011538
 80068e8:	08011540 	.word	0x08011540
 80068ec:	e000ed00 	.word	0xe000ed00
 80068f0:	05fa0004 	.word	0x05fa0004

080068f4 <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 80068f4:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 80068f6:	4b04      	ldr	r3, [pc, #16]	; (8006908 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 80068f8:	4c04      	ldr	r4, [pc, #16]	; (800690c <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 80068fa:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 80068fe:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 8006902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006906:	4770      	bx	lr
 8006908:	2000b5a8 	.word	0x2000b5a8
 800690c:	2000b568 	.word	0x2000b568

08006910 <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 8006910:	4b06      	ldr	r3, [pc, #24]	; (800692c <EXTI0_IRQHandler+0x1c>)
 8006912:	695a      	ldr	r2, [r3, #20]
 8006914:	07d2      	lsls	r2, r2, #31
 8006916:	d507      	bpl.n	8006928 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006918:	4a05      	ldr	r2, [pc, #20]	; (8006930 <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 800691a:	2101      	movs	r1, #1
 800691c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	b113      	cbz	r3, 8006928 <EXTI0_IRQHandler+0x18>
 8006922:	4a04      	ldr	r2, [pc, #16]	; (8006934 <EXTI0_IRQHandler+0x24>)
 8006924:	6810      	ldr	r0, [r2, #0]
 8006926:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40013c00 	.word	0x40013c00
 8006930:	2000b568 	.word	0x2000b568
 8006934:	2000b5a8 	.word	0x2000b5a8

08006938 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006938:	4b06      	ldr	r3, [pc, #24]	; (8006954 <EXTI1_IRQHandler+0x1c>)
 800693a:	695a      	ldr	r2, [r3, #20]
 800693c:	0792      	lsls	r2, r2, #30
 800693e:	d507      	bpl.n	8006950 <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006940:	4a05      	ldr	r2, [pc, #20]	; (8006958 <EXTI1_IRQHandler+0x20>)
 8006942:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 8006944:	2102      	movs	r1, #2
 8006946:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006948:	b112      	cbz	r2, 8006950 <EXTI1_IRQHandler+0x18>
 800694a:	4b04      	ldr	r3, [pc, #16]	; (800695c <EXTI1_IRQHandler+0x24>)
 800694c:	6858      	ldr	r0, [r3, #4]
 800694e:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	40013c00 	.word	0x40013c00
 8006958:	2000b568 	.word	0x2000b568
 800695c:	2000b5a8 	.word	0x2000b5a8

08006960 <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <EXTI2_IRQHandler+0x1c>)
 8006962:	695a      	ldr	r2, [r3, #20]
 8006964:	0752      	lsls	r2, r2, #29
 8006966:	d507      	bpl.n	8006978 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006968:	4a05      	ldr	r2, [pc, #20]	; (8006980 <EXTI2_IRQHandler+0x20>)
 800696a:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 800696c:	2104      	movs	r1, #4
 800696e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006970:	b112      	cbz	r2, 8006978 <EXTI2_IRQHandler+0x18>
 8006972:	4b04      	ldr	r3, [pc, #16]	; (8006984 <EXTI2_IRQHandler+0x24>)
 8006974:	6898      	ldr	r0, [r3, #8]
 8006976:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	40013c00 	.word	0x40013c00
 8006980:	2000b568 	.word	0x2000b568
 8006984:	2000b5a8 	.word	0x2000b5a8

08006988 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <EXTI3_IRQHandler+0x1c>)
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	0712      	lsls	r2, r2, #28
 800698e:	d507      	bpl.n	80069a0 <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006990:	4a05      	ldr	r2, [pc, #20]	; (80069a8 <EXTI3_IRQHandler+0x20>)
 8006992:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 8006994:	2108      	movs	r1, #8
 8006996:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006998:	b112      	cbz	r2, 80069a0 <EXTI3_IRQHandler+0x18>
 800699a:	4b04      	ldr	r3, [pc, #16]	; (80069ac <EXTI3_IRQHandler+0x24>)
 800699c:	68d8      	ldr	r0, [r3, #12]
 800699e:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	40013c00 	.word	0x40013c00
 80069a8:	2000b568 	.word	0x2000b568
 80069ac:	2000b5a8 	.word	0x2000b5a8

080069b0 <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <EXTI4_IRQHandler+0x1c>)
 80069b2:	695a      	ldr	r2, [r3, #20]
 80069b4:	06d2      	lsls	r2, r2, #27
 80069b6:	d507      	bpl.n	80069c8 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069b8:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <EXTI4_IRQHandler+0x20>)
 80069ba:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 80069bc:	2110      	movs	r1, #16
 80069be:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069c0:	b112      	cbz	r2, 80069c8 <EXTI4_IRQHandler+0x18>
 80069c2:	4b04      	ldr	r3, [pc, #16]	; (80069d4 <EXTI4_IRQHandler+0x24>)
 80069c4:	6918      	ldr	r0, [r3, #16]
 80069c6:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40013c00 	.word	0x40013c00
 80069d0:	2000b568 	.word	0x2000b568
 80069d4:	2000b5a8 	.word	0x2000b5a8

080069d8 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <EXTI9_5_IRQHandler+0x84>)
 80069da:	695a      	ldr	r2, [r3, #20]
 80069dc:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 80069de:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 80069e0:	d507      	bpl.n	80069f2 <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069e2:	4a1f      	ldr	r2, [pc, #124]	; (8006a60 <EXTI9_5_IRQHandler+0x88>)
 80069e4:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 80069e6:	2120      	movs	r1, #32
 80069e8:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069ea:	b112      	cbz	r2, 80069f2 <EXTI9_5_IRQHandler+0x1a>
 80069ec:	4b1d      	ldr	r3, [pc, #116]	; (8006a64 <EXTI9_5_IRQHandler+0x8c>)
 80069ee:	6958      	ldr	r0, [r3, #20]
 80069f0:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80069f2:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <EXTI9_5_IRQHandler+0x84>)
 80069f4:	695a      	ldr	r2, [r3, #20]
 80069f6:	0654      	lsls	r4, r2, #25
 80069f8:	d507      	bpl.n	8006a0a <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069fa:	4a19      	ldr	r2, [pc, #100]	; (8006a60 <EXTI9_5_IRQHandler+0x88>)
 80069fc:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 80069fe:	2140      	movs	r1, #64	; 0x40
 8006a00:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a02:	b112      	cbz	r2, 8006a0a <EXTI9_5_IRQHandler+0x32>
 8006a04:	4b17      	ldr	r3, [pc, #92]	; (8006a64 <EXTI9_5_IRQHandler+0x8c>)
 8006a06:	6998      	ldr	r0, [r3, #24]
 8006a08:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <EXTI9_5_IRQHandler+0x84>)
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	0610      	lsls	r0, r2, #24
 8006a10:	d507      	bpl.n	8006a22 <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a12:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <EXTI9_5_IRQHandler+0x88>)
 8006a14:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 8006a16:	2180      	movs	r1, #128	; 0x80
 8006a18:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a1a:	b112      	cbz	r2, 8006a22 <EXTI9_5_IRQHandler+0x4a>
 8006a1c:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <EXTI9_5_IRQHandler+0x8c>)
 8006a1e:	69d8      	ldr	r0, [r3, #28]
 8006a20:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a22:	4b0e      	ldr	r3, [pc, #56]	; (8006a5c <EXTI9_5_IRQHandler+0x84>)
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	05d1      	lsls	r1, r2, #23
 8006a28:	d508      	bpl.n	8006a3c <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a2a:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <EXTI9_5_IRQHandler+0x88>)
 8006a2c:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 8006a2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a32:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a34:	b112      	cbz	r2, 8006a3c <EXTI9_5_IRQHandler+0x64>
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <EXTI9_5_IRQHandler+0x8c>)
 8006a38:	6a18      	ldr	r0, [r3, #32]
 8006a3a:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a3c:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <EXTI9_5_IRQHandler+0x84>)
 8006a3e:	695a      	ldr	r2, [r3, #20]
 8006a40:	0592      	lsls	r2, r2, #22
 8006a42:	d50a      	bpl.n	8006a5a <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a44:	4a06      	ldr	r2, [pc, #24]	; (8006a60 <EXTI9_5_IRQHandler+0x88>)
 8006a46:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 8006a48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a4c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a4e:	b122      	cbz	r2, 8006a5a <EXTI9_5_IRQHandler+0x82>
 8006a50:	4b04      	ldr	r3, [pc, #16]	; (8006a64 <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 8006a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a56:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006a58:	4710      	bx	r2
}
 8006a5a:	bd10      	pop	{r4, pc}
 8006a5c:	40013c00 	.word	0x40013c00
 8006a60:	2000b568 	.word	0x2000b568
 8006a64:	2000b5a8 	.word	0x2000b5a8

08006a68 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006a68:	4b28      	ldr	r3, [pc, #160]	; (8006b0c <EXTI15_10_IRQHandler+0xa4>)
 8006a6a:	695a      	ldr	r2, [r3, #20]
 8006a6c:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 8006a6e:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006a70:	d508      	bpl.n	8006a84 <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a72:	4a27      	ldr	r2, [pc, #156]	; (8006b10 <EXTI15_10_IRQHandler+0xa8>)
 8006a74:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 8006a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a7a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a7c:	b112      	cbz	r2, 8006a84 <EXTI15_10_IRQHandler+0x1c>
 8006a7e:	4b25      	ldr	r3, [pc, #148]	; (8006b14 <EXTI15_10_IRQHandler+0xac>)
 8006a80:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006a82:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a84:	4b21      	ldr	r3, [pc, #132]	; (8006b0c <EXTI15_10_IRQHandler+0xa4>)
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	0512      	lsls	r2, r2, #20
 8006a8a:	d508      	bpl.n	8006a9e <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a8c:	4a20      	ldr	r2, [pc, #128]	; (8006b10 <EXTI15_10_IRQHandler+0xa8>)
 8006a8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 8006a90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a94:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a96:	b112      	cbz	r2, 8006a9e <EXTI15_10_IRQHandler+0x36>
 8006a98:	4b1e      	ldr	r3, [pc, #120]	; (8006b14 <EXTI15_10_IRQHandler+0xac>)
 8006a9a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a9c:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a9e:	4b1b      	ldr	r3, [pc, #108]	; (8006b0c <EXTI15_10_IRQHandler+0xa4>)
 8006aa0:	695a      	ldr	r2, [r3, #20]
 8006aa2:	04d4      	lsls	r4, r2, #19
 8006aa4:	d508      	bpl.n	8006ab8 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006aa6:	4a1a      	ldr	r2, [pc, #104]	; (8006b10 <EXTI15_10_IRQHandler+0xa8>)
 8006aa8:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 8006aaa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006aae:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ab0:	b112      	cbz	r2, 8006ab8 <EXTI15_10_IRQHandler+0x50>
 8006ab2:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <EXTI15_10_IRQHandler+0xac>)
 8006ab4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006ab6:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006ab8:	4b14      	ldr	r3, [pc, #80]	; (8006b0c <EXTI15_10_IRQHandler+0xa4>)
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	0490      	lsls	r0, r2, #18
 8006abe:	d508      	bpl.n	8006ad2 <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ac0:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <EXTI15_10_IRQHandler+0xa8>)
 8006ac2:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8006ac4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ac8:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006aca:	b112      	cbz	r2, 8006ad2 <EXTI15_10_IRQHandler+0x6a>
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <EXTI15_10_IRQHandler+0xac>)
 8006ace:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006ad0:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	; (8006b0c <EXTI15_10_IRQHandler+0xa4>)
 8006ad4:	695a      	ldr	r2, [r3, #20]
 8006ad6:	0451      	lsls	r1, r2, #17
 8006ad8:	d508      	bpl.n	8006aec <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ada:	4a0d      	ldr	r2, [pc, #52]	; (8006b10 <EXTI15_10_IRQHandler+0xa8>)
 8006adc:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 8006ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ae2:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006ae4:	b112      	cbz	r2, 8006aec <EXTI15_10_IRQHandler+0x84>
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <EXTI15_10_IRQHandler+0xac>)
 8006ae8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006aea:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006aec:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <EXTI15_10_IRQHandler+0xa4>)
 8006aee:	695a      	ldr	r2, [r3, #20]
 8006af0:	0412      	lsls	r2, r2, #16
 8006af2:	d50a      	bpl.n	8006b0a <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006af4:	4a06      	ldr	r2, [pc, #24]	; (8006b10 <EXTI15_10_IRQHandler+0xa8>)
 8006af6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 8006af8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006afc:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006afe:	b122      	cbz	r2, 8006b0a <EXTI15_10_IRQHandler+0xa2>
 8006b00:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 8006b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006b06:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006b08:	4710      	bx	r2
}
 8006b0a:	bd10      	pop	{r4, pc}
 8006b0c:	40013c00 	.word	0x40013c00
 8006b10:	2000b568 	.word	0x2000b568
 8006b14:	2000b5a8 	.word	0x2000b5a8

08006b18 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 8006b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b1c:	4c3a      	ldr	r4, [pc, #232]	; (8006c08 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 8006b1e:	4d3b      	ldr	r5, [pc, #236]	; (8006c0c <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b22:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006c14 <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 8006b26:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b28:	4939      	ldr	r1, [pc, #228]	; (8006c10 <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 8006b2a:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 8006b2c:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006b2e:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b30:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b32:	9b05      	ldr	r3, [sp, #20]
 8006b34:	ea03 0308 	and.w	r3, r3, r8
 8006b38:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b3a:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006b3c:	bf0c      	ite	eq
 8006b3e:	2710      	moveq	r7, #16
 8006b40:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b42:	433b      	orrs	r3, r7
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b4a:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b4e:	9b05      	ldr	r3, [sp, #20]
 8006b50:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b52:	2220      	movs	r2, #32
 8006b54:	2300      	movs	r3, #0
 8006b56:	a806      	add	r0, sp, #24
 8006b58:	9600      	str	r6, [sp, #0]
 8006b5a:	f004 fa5f 	bl	800b01c <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 8006b5e:	2001      	movs	r0, #1
 8006b60:	f001 fcf0 	bl	8008544 <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b64:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b66:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b68:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b6a:	4929      	ldr	r1, [pc, #164]	; (8006c10 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b6c:	ea03 0308 	and.w	r3, r3, r8
 8006b70:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	433b      	orrs	r3, r7
 8006b76:	f043 0302 	orr.w	r3, r3, #2
 8006b7a:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b7c:	9b04      	ldr	r3, [sp, #16]
 8006b7e:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b80:	a806      	add	r0, sp, #24
 8006b82:	9600      	str	r6, [sp, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	2220      	movs	r2, #32
 8006b88:	f004 fa48 	bl	800b01c <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b8c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b8e:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b90:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b92:	491f      	ldr	r1, [pc, #124]	; (8006c10 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b94:	ea03 0308 	and.w	r3, r3, r8
 8006b98:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b9a:	9b03      	ldr	r3, [sp, #12]
 8006b9c:	433b      	orrs	r3, r7
 8006b9e:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8006ba2:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006ba8:	a806      	add	r0, sp, #24
 8006baa:	9600      	str	r6, [sp, #0]
 8006bac:	2300      	movs	r3, #0
 8006bae:	2220      	movs	r2, #32
 8006bb0:	f004 fa34 	bl	800b01c <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006bb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006bb6:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006bb8:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006bba:	4915      	ldr	r1, [pc, #84]	; (8006c10 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006bbc:	ea03 0308 	and.w	r3, r3, r8
 8006bc0:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006bc2:	9b02      	ldr	r3, [sp, #8]
 8006bc4:	433b      	orrs	r3, r7
 8006bc6:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8006bca:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006bce:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006bd0:	9b02      	ldr	r3, [sp, #8]
 8006bd2:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006bd4:	a806      	add	r0, sp, #24
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9600      	str	r6, [sp, #0]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f004 fa1e 	bl	800b01c <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 8006be0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006be2:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006be4:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006be6:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006be8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006bec:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006bf0:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006bf2:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006bf4:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006bf6:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006bfa:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006bfc:	9b06      	ldr	r3, [sp, #24]
 8006bfe:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006c00:	b008      	add	sp, #32
 8006c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c06:	bf00      	nop
 8006c08:	a0000100 	.word	0xa0000100
 8006c0c:	2000b5e8 	.word	0x2000b5e8
 8006c10:	a0000158 	.word	0xa0000158
 8006c14:	ffc00000 	.word	0xffc00000

08006c18 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 8006c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 8006c1c:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8006f54 <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 8006c20:	4ec8      	ldr	r6, [pc, #800]	; (8006f44 <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 8006c22:	4dc9      	ldr	r5, [pc, #804]	; (8006f48 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 8006c24:	4cc9      	ldr	r4, [pc, #804]	; (8006f4c <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 8006c26:	4fca      	ldr	r7, [pc, #808]	; (8006f50 <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 8006c28:	4640      	mov	r0, r8
 8006c2a:	f000 fa5d 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 fa5a 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fa57 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f000 fa54 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006c40:	4638      	mov	r0, r7
 8006c42:	f000 fa51 	bl	80070e8 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 8006c46:	4620      	mov	r0, r4
 8006c48:	220c      	movs	r2, #12
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	f000 fb34 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006c50:	4620      	mov	r0, r4
 8006c52:	2207      	movs	r2, #7
 8006c54:	2100      	movs	r1, #0
 8006c56:	f000 fb6d 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	220c      	movs	r2, #12
 8006c5e:	2101      	movs	r1, #1
 8006c60:	f000 fb2a 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 8006c64:	4620      	mov	r0, r4
 8006c66:	2207      	movs	r2, #7
 8006c68:	2101      	movs	r1, #1
 8006c6a:	f000 fb63 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 8006c6e:	4620      	mov	r0, r4
 8006c70:	220c      	movs	r2, #12
 8006c72:	2102      	movs	r1, #2
 8006c74:	f000 fb20 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 8006c78:	4620      	mov	r0, r4
 8006c7a:	2207      	movs	r2, #7
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	f000 fb59 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 8006c82:	4620      	mov	r0, r4
 8006c84:	220c      	movs	r2, #12
 8006c86:	2103      	movs	r1, #3
 8006c88:	f000 fb16 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	2207      	movs	r2, #7
 8006c90:	2103      	movs	r1, #3
 8006c92:	f000 fb4f 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 8006c96:	4620      	mov	r0, r4
 8006c98:	220c      	movs	r2, #12
 8006c9a:	2104      	movs	r1, #4
 8006c9c:	f000 fb0c 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	2207      	movs	r2, #7
 8006ca4:	2104      	movs	r1, #4
 8006ca6:	f000 fb45 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 8006caa:	4620      	mov	r0, r4
 8006cac:	220c      	movs	r2, #12
 8006cae:	2105      	movs	r1, #5
 8006cb0:	f000 fb02 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	2207      	movs	r2, #7
 8006cb8:	2105      	movs	r1, #5
 8006cba:	f000 fb3b 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 8006cbe:	220c      	movs	r2, #12
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 faf8 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006cc8:	4620      	mov	r0, r4
 8006cca:	2207      	movs	r2, #7
 8006ccc:	210c      	movs	r1, #12
 8006cce:	f000 fb31 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	220c      	movs	r2, #12
 8006cd6:	210d      	movs	r1, #13
 8006cd8:	f000 faee 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006cdc:	4620      	mov	r0, r4
 8006cde:	2207      	movs	r2, #7
 8006ce0:	210d      	movs	r1, #13
 8006ce2:	f000 fb27 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	220c      	movs	r2, #12
 8006cea:	210e      	movs	r1, #14
 8006cec:	f000 fae4 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	2207      	movs	r2, #7
 8006cf4:	210e      	movs	r1, #14
 8006cf6:	f000 fb1d 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	220c      	movs	r2, #12
 8006cfe:	210f      	movs	r1, #15
 8006d00:	f000 fada 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 8006d04:	4620      	mov	r0, r4
 8006d06:	2207      	movs	r2, #7
 8006d08:	210f      	movs	r1, #15
 8006d0a:	f000 fb13 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006d0e:	4638      	mov	r0, r7
 8006d10:	220c      	movs	r2, #12
 8006d12:	2100      	movs	r1, #0
 8006d14:	f000 fad0 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006d18:	4638      	mov	r0, r7
 8006d1a:	2207      	movs	r2, #7
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	f000 fb09 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 8006d22:	4638      	mov	r0, r7
 8006d24:	220c      	movs	r2, #12
 8006d26:	2101      	movs	r1, #1
 8006d28:	f000 fac6 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	2207      	movs	r2, #7
 8006d30:	2101      	movs	r1, #1
 8006d32:	f000 faff 	bl	8007334 <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 8006d36:	4630      	mov	r0, r6
 8006d38:	220c      	movs	r2, #12
 8006d3a:	210e      	movs	r1, #14
 8006d3c:	f000 fabc 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006d40:	4630      	mov	r0, r6
 8006d42:	2207      	movs	r2, #7
 8006d44:	210e      	movs	r1, #14
 8006d46:	f000 faf5 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006d4a:	4630      	mov	r0, r6
 8006d4c:	220c      	movs	r2, #12
 8006d4e:	210f      	movs	r1, #15
 8006d50:	f000 fab2 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 8006d54:	4630      	mov	r0, r6
 8006d56:	2207      	movs	r2, #7
 8006d58:	210f      	movs	r1, #15
 8006d5a:	f000 faeb 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006d5e:	4630      	mov	r0, r6
 8006d60:	220c      	movs	r2, #12
 8006d62:	2100      	movs	r1, #0
 8006d64:	f000 faa8 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006d68:	4630      	mov	r0, r6
 8006d6a:	2207      	movs	r2, #7
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f000 fae1 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 8006d72:	4630      	mov	r0, r6
 8006d74:	220c      	movs	r2, #12
 8006d76:	2101      	movs	r1, #1
 8006d78:	f000 fa9e 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	2207      	movs	r2, #7
 8006d80:	2101      	movs	r1, #1
 8006d82:	f000 fad7 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 8006d86:	4628      	mov	r0, r5
 8006d88:	220c      	movs	r2, #12
 8006d8a:	2107      	movs	r1, #7
 8006d8c:	f000 fa94 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 8006d90:	2207      	movs	r2, #7
 8006d92:	4611      	mov	r1, r2
 8006d94:	4628      	mov	r0, r5
 8006d96:	f000 facd 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	220c      	movs	r2, #12
 8006d9e:	2108      	movs	r1, #8
 8006da0:	f000 fa8a 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 8006da4:	4628      	mov	r0, r5
 8006da6:	2207      	movs	r2, #7
 8006da8:	2108      	movs	r1, #8
 8006daa:	f000 fac3 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 8006dae:	4628      	mov	r0, r5
 8006db0:	220c      	movs	r2, #12
 8006db2:	2109      	movs	r1, #9
 8006db4:	f000 fa80 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 8006db8:	4628      	mov	r0, r5
 8006dba:	2207      	movs	r2, #7
 8006dbc:	2109      	movs	r1, #9
 8006dbe:	f000 fab9 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	220c      	movs	r2, #12
 8006dc6:	210a      	movs	r1, #10
 8006dc8:	f000 fa76 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 8006dcc:	4628      	mov	r0, r5
 8006dce:	2207      	movs	r2, #7
 8006dd0:	210a      	movs	r1, #10
 8006dd2:	f000 faaf 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	220c      	movs	r2, #12
 8006dda:	210b      	movs	r1, #11
 8006ddc:	f000 fa6c 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006de0:	4628      	mov	r0, r5
 8006de2:	2207      	movs	r2, #7
 8006de4:	210b      	movs	r1, #11
 8006de6:	f000 faa5 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006dea:	220c      	movs	r2, #12
 8006dec:	4611      	mov	r1, r2
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 fa62 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 8006df4:	4628      	mov	r0, r5
 8006df6:	2207      	movs	r2, #7
 8006df8:	210c      	movs	r1, #12
 8006dfa:	f000 fa9b 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006dfe:	4628      	mov	r0, r5
 8006e00:	220c      	movs	r2, #12
 8006e02:	210d      	movs	r1, #13
 8006e04:	f000 fa58 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006e08:	4628      	mov	r0, r5
 8006e0a:	2207      	movs	r2, #7
 8006e0c:	210d      	movs	r1, #13
 8006e0e:	f000 fa91 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 8006e12:	4628      	mov	r0, r5
 8006e14:	220c      	movs	r2, #12
 8006e16:	210e      	movs	r1, #14
 8006e18:	f000 fa4e 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	2207      	movs	r2, #7
 8006e20:	210e      	movs	r1, #14
 8006e22:	f000 fa87 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 8006e26:	4628      	mov	r0, r5
 8006e28:	220c      	movs	r2, #12
 8006e2a:	210f      	movs	r1, #15
 8006e2c:	f000 fa44 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006e30:	4628      	mov	r0, r5
 8006e32:	2207      	movs	r2, #7
 8006e34:	210f      	movs	r1, #15
 8006e36:	f000 fa7d 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006e3a:	4630      	mov	r0, r6
 8006e3c:	220c      	movs	r2, #12
 8006e3e:	2108      	movs	r1, #8
 8006e40:	f000 fa3a 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006e44:	4630      	mov	r0, r6
 8006e46:	2207      	movs	r2, #7
 8006e48:	2108      	movs	r1, #8
 8006e4a:	f000 fa73 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006e4e:	4630      	mov	r0, r6
 8006e50:	220c      	movs	r2, #12
 8006e52:	2109      	movs	r1, #9
 8006e54:	f000 fa30 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006e58:	4630      	mov	r0, r6
 8006e5a:	2207      	movs	r2, #7
 8006e5c:	2109      	movs	r1, #9
 8006e5e:	f000 fa69 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006e62:	4630      	mov	r0, r6
 8006e64:	220c      	movs	r2, #12
 8006e66:	210a      	movs	r1, #10
 8006e68:	f000 fa26 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	2207      	movs	r2, #7
 8006e70:	210a      	movs	r1, #10
 8006e72:	f000 fa5f 	bl	8007334 <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006e76:	4628      	mov	r0, r5
 8006e78:	220c      	movs	r2, #12
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	f000 fa1c 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006e80:	4628      	mov	r0, r5
 8006e82:	2207      	movs	r2, #7
 8006e84:	2100      	movs	r1, #0
 8006e86:	f000 fa55 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	220c      	movs	r2, #12
 8006e8e:	2101      	movs	r1, #1
 8006e90:	f000 fa12 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006e94:	4628      	mov	r0, r5
 8006e96:	2207      	movs	r2, #7
 8006e98:	2101      	movs	r1, #1
 8006e9a:	f000 fa4b 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	220c      	movs	r2, #12
 8006ea2:	2104      	movs	r1, #4
 8006ea4:	f000 fa08 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	2207      	movs	r2, #7
 8006eac:	2104      	movs	r1, #4
 8006eae:	f000 fa41 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006eb2:	4638      	mov	r0, r7
 8006eb4:	220c      	movs	r2, #12
 8006eb6:	2105      	movs	r1, #5
 8006eb8:	f000 f9fe 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	2207      	movs	r2, #7
 8006ec0:	2105      	movs	r1, #5
 8006ec2:	f000 fa37 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	220c      	movs	r2, #12
 8006eca:	210f      	movs	r1, #15
 8006ecc:	f000 f9f4 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	210f      	movs	r1, #15
 8006ed6:	f000 fa2d 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006eda:	4620      	mov	r0, r4
 8006edc:	220c      	movs	r2, #12
 8006ede:	210b      	movs	r1, #11
 8006ee0:	f000 f9ea 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	210b      	movs	r1, #11
 8006eea:	f000 fa23 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006eee:	4638      	mov	r0, r7
 8006ef0:	220c      	movs	r2, #12
 8006ef2:	2108      	movs	r1, #8
 8006ef4:	f000 f9e0 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006ef8:	4638      	mov	r0, r7
 8006efa:	2207      	movs	r2, #7
 8006efc:	2108      	movs	r1, #8
 8006efe:	f000 fa19 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 8006f02:	4640      	mov	r0, r8
 8006f04:	220c      	movs	r2, #12
 8006f06:	2100      	movs	r1, #0
 8006f08:	f000 f9d6 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	2207      	movs	r2, #7
 8006f10:	2100      	movs	r1, #0
 8006f12:	f000 fa0f 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 8006f16:	4640      	mov	r0, r8
 8006f18:	220c      	movs	r2, #12
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	f000 f9cc 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006f20:	4640      	mov	r0, r8
 8006f22:	2207      	movs	r2, #7
 8006f24:	2102      	movs	r1, #2
 8006f26:	f000 fa05 	bl	8007334 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	220c      	movs	r2, #12
 8006f2e:	2103      	movs	r1, #3
 8006f30:	f000 f9c2 	bl	80072b8 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006f34:	4640      	mov	r0, r8
 8006f36:	2207      	movs	r2, #7

}
 8006f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006f3c:	2103      	movs	r1, #3
 8006f3e:	f000 b9f9 	b.w	8007334 <gpio_set_alternatefunction_type>
 8006f42:	bf00      	nop
 8006f44:	40020c00 	.word	0x40020c00
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	40021400 	.word	0x40021400
 8006f50:	40021800 	.word	0x40021800
 8006f54:	40020800 	.word	0x40020800

08006f58 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006f58:	b530      	push	{r4, r5, lr}
	_conf = conf;
 8006f5a:	4c60      	ldr	r4, [pc, #384]	; (80070dc <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 8006f5c:	b083      	sub	sp, #12
	_conf = conf;
 8006f5e:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006f60:	f7ff fe5a 	bl	8006c18 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006f64:	4a5e      	ldr	r2, [pc, #376]	; (80070e0 <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006f66:	495f      	ldr	r1, [pc, #380]	; (80070e4 <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006f68:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006f6a:	f043 0301 	orr.w	r3, r3, #1
 8006f6e:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	781a      	ldrb	r2, [r3, #0]
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	d148      	bne.n	800700a <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006f78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f7a:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f7c:	7a9c      	ldrb	r4, [r3, #10]
 8006f7e:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 8006f80:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 8006f82:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f84:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 8006f86:	7b1c      	ldrb	r4, [r3, #12]
 8006f88:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 8006f8a:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 8006f8c:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006f8e:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006f90:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 8006f92:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 8006f94:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006f96:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 8006f98:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f9a:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006f9c:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 8006f9e:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006fa0:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006fa2:	4302      	orrs	r2, r0
 8006fa4:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006fa6:	b119      	cbz	r1, 8006fb0 <fmc_sdram_init+0x58>
 8006fa8:	9a00      	ldr	r2, [sp, #0]
 8006faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fae:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006fb0:	7cda      	ldrb	r2, [r3, #19]
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f040 808c 	bne.w	80070d0 <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006fb8:	494a      	ldr	r1, [pc, #296]	; (80070e4 <fmc_sdram_init+0x18c>)
 8006fba:	9a00      	ldr	r2, [sp, #0]
 8006fbc:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006fbe:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006fc0:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	9a00      	ldr	r2, [sp, #0]
 8006fc6:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fc8:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006fca:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fcc:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006fce:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fd0:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006fd2:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fd4:	432a      	orrs	r2, r5
 8006fd6:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006fda:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fdc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006fe0:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006fe4:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fe6:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006fea:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006fec:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006ff0:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 8006ff4:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006ff6:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006ffa:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006ffc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007000:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8007002:	9b00      	ldr	r3, [sp, #0]
 8007004:	648b      	str	r3, [r1, #72]	; 0x48
}
 8007006:	b003      	add	sp, #12
 8007008:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 800700a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800700c:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 800700e:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8007010:	891a      	ldrh	r2, [r3, #8]
 8007012:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8007014:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8007018:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 800701a:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 800701c:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 800701e:	4322      	orrs	r2, r4
 8007020:	b292      	uxth	r2, r2
 8007022:	4302      	orrs	r2, r0
 8007024:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8007026:	b119      	cbz	r1, 8007030 <fmc_sdram_init+0xd8>
 8007028:	9a01      	ldr	r2, [sp, #4]
 800702a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800702e:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8007030:	4a2c      	ldr	r2, [pc, #176]	; (80070e4 <fmc_sdram_init+0x18c>)
 8007032:	9901      	ldr	r1, [sp, #4]
 8007034:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 8007036:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007038:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 800703a:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 800703c:	7adc      	ldrb	r4, [r3, #11]
 800703e:	7a9a      	ldrb	r2, [r3, #10]
 8007040:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 8007042:	0c09      	lsrs	r1, r1, #16
 8007044:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8007046:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 8007048:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 800704a:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 800704c:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 800704e:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 8007050:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 8007052:	4322      	orrs	r2, r4
 8007054:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8007056:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 8007058:	4302      	orrs	r2, r0
 800705a:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 800705c:	b119      	cbz	r1, 8007066 <fmc_sdram_init+0x10e>
 800705e:	9a01      	ldr	r2, [sp, #4]
 8007060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007064:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 8007066:	491f      	ldr	r1, [pc, #124]	; (80070e4 <fmc_sdram_init+0x18c>)
 8007068:	9a01      	ldr	r2, [sp, #4]
 800706a:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 800706c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800706e:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8007070:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8007074:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8007076:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 800707a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 800707e:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007080:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8007082:	9801      	ldr	r0, [sp, #4]
 8007084:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007086:	0512      	lsls	r2, r2, #20
 8007088:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800708c:	4302      	orrs	r2, r0
 800708e:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8007090:	9a01      	ldr	r2, [sp, #4]
 8007092:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 8007094:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8007096:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 8007098:	2000      	movs	r0, #0
 800709a:	9a01      	ldr	r2, [sp, #4]
 800709c:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800709e:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 80070a0:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80070a2:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 80070a4:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80070a6:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 80070a8:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80070aa:	432a      	orrs	r2, r5
 80070ac:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 80070b0:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80070b2:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80070b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80070b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80070ba:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80070bc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80070c0:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80070c2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80070c6:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 80070cc:	b003      	add	sp, #12
 80070ce:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80070d0:	9a00      	ldr	r2, [sp, #0]
 80070d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80070d6:	9200      	str	r2, [sp, #0]
 80070d8:	e76e      	b.n	8006fb8 <fmc_sdram_init+0x60>
 80070da:	bf00      	nop
 80070dc:	2000b5e8 	.word	0x2000b5e8
 80070e0:	40023800 	.word	0x40023800
 80070e4:	a0000100 	.word	0xa0000100

080070e8 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 80070e8:	4b28      	ldr	r3, [pc, #160]	; (800718c <gpio_port_clock_enable+0xa4>)
 80070ea:	4298      	cmp	r0, r3
 80070ec:	d01e      	beq.n	800712c <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 80070ee:	4b28      	ldr	r3, [pc, #160]	; (8007190 <gpio_port_clock_enable+0xa8>)
 80070f0:	4298      	cmp	r0, r3
 80070f2:	d021      	beq.n	8007138 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 80070f4:	4b27      	ldr	r3, [pc, #156]	; (8007194 <gpio_port_clock_enable+0xac>)
 80070f6:	4298      	cmp	r0, r3
 80070f8:	d024      	beq.n	8007144 <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 80070fa:	4b27      	ldr	r3, [pc, #156]	; (8007198 <gpio_port_clock_enable+0xb0>)
 80070fc:	4298      	cmp	r0, r3
 80070fe:	d00f      	beq.n	8007120 <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8007100:	4b26      	ldr	r3, [pc, #152]	; (800719c <gpio_port_clock_enable+0xb4>)
 8007102:	4298      	cmp	r0, r3
 8007104:	d024      	beq.n	8007150 <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 8007106:	4b26      	ldr	r3, [pc, #152]	; (80071a0 <gpio_port_clock_enable+0xb8>)
 8007108:	4298      	cmp	r0, r3
 800710a:	d027      	beq.n	800715c <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 800710c:	4b25      	ldr	r3, [pc, #148]	; (80071a4 <gpio_port_clock_enable+0xbc>)
 800710e:	4298      	cmp	r0, r3
 8007110:	d02a      	beq.n	8007168 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8007112:	4b25      	ldr	r3, [pc, #148]	; (80071a8 <gpio_port_clock_enable+0xc0>)
 8007114:	4298      	cmp	r0, r3
 8007116:	d033      	beq.n	8007180 <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8007118:	4b24      	ldr	r3, [pc, #144]	; (80071ac <gpio_port_clock_enable+0xc4>)
 800711a:	4298      	cmp	r0, r3
 800711c:	d02a      	beq.n	8007174 <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 800711e:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8007120:	4a23      	ldr	r2, [pc, #140]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 8007122:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007124:	f043 0308 	orr.w	r3, r3, #8
 8007128:	6313      	str	r3, [r2, #48]	; 0x30
 800712a:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 800712c:	4a20      	ldr	r2, [pc, #128]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 800712e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007130:	f043 0301 	orr.w	r3, r3, #1
 8007134:	6313      	str	r3, [r2, #48]	; 0x30
 8007136:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8007138:	4a1d      	ldr	r2, [pc, #116]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 800713a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800713c:	f043 0302 	orr.w	r3, r3, #2
 8007140:	6313      	str	r3, [r2, #48]	; 0x30
 8007142:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 8007144:	4a1a      	ldr	r2, [pc, #104]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 8007146:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007148:	f043 0304 	orr.w	r3, r3, #4
 800714c:	6313      	str	r3, [r2, #48]	; 0x30
 800714e:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8007150:	4a17      	ldr	r2, [pc, #92]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 8007152:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007154:	f043 0310 	orr.w	r3, r3, #16
 8007158:	6313      	str	r3, [r2, #48]	; 0x30
 800715a:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 800715c:	4a14      	ldr	r2, [pc, #80]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 800715e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007160:	f043 0320 	orr.w	r3, r3, #32
 8007164:	6313      	str	r3, [r2, #48]	; 0x30
 8007166:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8007168:	4a11      	ldr	r2, [pc, #68]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 800716a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800716c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007170:	6313      	str	r3, [r2, #48]	; 0x30
 8007172:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8007174:	4a0e      	ldr	r2, [pc, #56]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 8007176:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717c:	6313      	str	r3, [r2, #48]	; 0x30
 800717e:	e7ce      	b.n	800711e <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8007180:	4a0b      	ldr	r2, [pc, #44]	; (80071b0 <gpio_port_clock_enable+0xc8>)
 8007182:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007188:	6313      	str	r3, [r2, #48]	; 0x30
 800718a:	4770      	bx	lr
 800718c:	40020000 	.word	0x40020000
 8007190:	40020400 	.word	0x40020400
 8007194:	40020800 	.word	0x40020800
 8007198:	40020c00 	.word	0x40020c00
 800719c:	40021000 	.word	0x40021000
 80071a0:	40021400 	.word	0x40021400
 80071a4:	40021800 	.word	0x40021800
 80071a8:	40021c00 	.word	0x40021c00
 80071ac:	40022000 	.word	0x40022000
 80071b0:	40023800 	.word	0x40023800

080071b4 <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 80071b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071b6:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 80071b8:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 80071ba:	2a03      	cmp	r2, #3
	__IO uint32_t tmpreg = 0U;
 80071bc:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 80071be:	d81c      	bhi.n	80071fa <gpio_set_mode+0x46>
		port -> MODER &=~ (3U << (pin * 2));
 80071c0:	6804      	ldr	r4, [r0, #0]
 80071c2:	0049      	lsls	r1, r1, #1
 80071c4:	2303      	movs	r3, #3
 80071c6:	408b      	lsls	r3, r1
 80071c8:	ea24 0403 	bic.w	r4, r4, r3
 80071cc:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 80071ce:	68c4      	ldr	r4, [r0, #12]
 80071d0:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 80071d2:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 80071d4:	2a02      	cmp	r2, #2
		tmpreg &=~ (3U << (pin * 2));
 80071d6:	ea24 0303 	bic.w	r3, r4, r3
 80071da:	9301      	str	r3, [sp, #4]
		switch(mode){
 80071dc:	d046      	beq.n	800726c <gpio_set_mode+0xb8>
 80071de:	2a03      	cmp	r2, #3
 80071e0:	d105      	bne.n	80071ee <gpio_set_mode+0x3a>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 80071e2:	9a01      	ldr	r2, [sp, #4]
 80071e4:	2302      	movs	r3, #2
 80071e6:	fa03 f101 	lsl.w	r1, r3, r1
 80071ea:	4311      	orrs	r1, r2
 80071ec:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 80071ee:	9a01      	ldr	r2, [sp, #4]
 80071f0:	68c3      	ldr	r3, [r0, #12]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 80071f6:	b003      	add	sp, #12
 80071f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 80071fa:	1f13      	subs	r3, r2, #4
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b05      	cmp	r3, #5
 8007200:	d82b      	bhi.n	800725a <gpio_set_mode+0xa6>
		port -> MODER &=~ (3U << (pin * 2));
 8007202:	6804      	ldr	r4, [r0, #0]
 8007204:	004d      	lsls	r5, r1, #1
 8007206:	f04f 0c03 	mov.w	ip, #3
 800720a:	fa0c fc05 	lsl.w	ip, ip, r5
 800720e:	ea24 040c 	bic.w	r4, r4, ip
 8007212:	6004      	str	r4, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 8007214:	6807      	ldr	r7, [r0, #0]
 8007216:	2401      	movs	r4, #1
 8007218:	fa04 f605 	lsl.w	r6, r4, r5
 800721c:	4337      	orrs	r7, r6
 800721e:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 8007220:	2b02      	cmp	r3, #2
 8007222:	fa04 f101 	lsl.w	r1, r4, r1
		port -> MODER &=~ (3U << (pin * 2));
 8007226:	ea6f 0e0c 	mvn.w	lr, ip
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 800722a:	6844      	ldr	r4, [r0, #4]
 800722c:	d825      	bhi.n	800727a <gpio_set_mode+0xc6>
 800722e:	4321      	orrs	r1, r4
 8007230:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8007232:	6883      	ldr	r3, [r0, #8]
 8007234:	ea0e 0303 	and.w	r3, lr, r3
 8007238:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 800723a:	6883      	ldr	r3, [r0, #8]
 800723c:	ea4c 0303 	orr.w	r3, ip, r3
 8007240:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8007242:	68c3      	ldr	r3, [r0, #12]
 8007244:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8007246:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007248:	2a05      	cmp	r2, #5
		tmpreg &=~ (3U << (pin * 2));
 800724a:	ea0e 0303 	and.w	r3, lr, r3
 800724e:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007250:	d12f      	bne.n	80072b2 <gpio_set_mode+0xfe>
 8007252:	9b01      	ldr	r3, [sp, #4]
 8007254:	431e      	orrs	r6, r3
 8007256:	9601      	str	r6, [sp, #4]
 8007258:	e7c9      	b.n	80071ee <gpio_set_mode+0x3a>
		port -> MODER |= (3U << (pin * 2));
 800725a:	6802      	ldr	r2, [r0, #0]
 800725c:	2303      	movs	r3, #3
 800725e:	0049      	lsls	r1, r1, #1
 8007260:	fa03 f101 	lsl.w	r1, r3, r1
 8007264:	4311      	orrs	r1, r2
 8007266:	6001      	str	r1, [r0, #0]
}
 8007268:	b003      	add	sp, #12
 800726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmpreg |=  (1U << (pin * 2));
 800726c:	9a01      	ldr	r2, [sp, #4]
 800726e:	2301      	movs	r3, #1
 8007270:	fa03 f101 	lsl.w	r1, r3, r1
 8007274:	4311      	orrs	r1, r2
 8007276:	9101      	str	r1, [sp, #4]
			break;
 8007278:	e7b9      	b.n	80071ee <gpio_set_mode+0x3a>
		else port -> OTYPER &=~ (1U << pin);
 800727a:	ea24 0101 	bic.w	r1, r4, r1
 800727e:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8007280:	6883      	ldr	r3, [r0, #8]
 8007282:	ea0e 0303 	and.w	r3, lr, r3
 8007286:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007288:	6883      	ldr	r3, [r0, #8]
 800728a:	ea4c 0303 	orr.w	r3, ip, r3
 800728e:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8007290:	68c3      	ldr	r3, [r0, #12]
 8007292:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 8007294:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007296:	2a08      	cmp	r2, #8
		tmpreg &=~ (3U << (pin * 2));
 8007298:	ea0e 0303 	and.w	r3, lr, r3
 800729c:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 800729e:	d0d8      	beq.n	8007252 <gpio_set_mode+0x9e>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 80072a0:	2a09      	cmp	r2, #9
 80072a2:	d1a4      	bne.n	80071ee <gpio_set_mode+0x3a>
 80072a4:	9a01      	ldr	r2, [sp, #4]
 80072a6:	2302      	movs	r3, #2
 80072a8:	fa03 f505 	lsl.w	r5, r3, r5
 80072ac:	4315      	orrs	r5, r2
 80072ae:	9501      	str	r5, [sp, #4]
 80072b0:	e79d      	b.n	80071ee <gpio_set_mode+0x3a>
 80072b2:	2a06      	cmp	r2, #6
 80072b4:	d0f6      	beq.n	80072a4 <gpio_set_mode+0xf0>
 80072b6:	e79a      	b.n	80071ee <gpio_set_mode+0x3a>

080072b8 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 80072b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 80072bc:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 80072be:	2303      	movs	r3, #3
 80072c0:	6805      	ldr	r5, [r0, #0]
 80072c2:	fa03 f30c 	lsl.w	r3, r3, ip
 80072c6:	ea25 0503 	bic.w	r5, r5, r3
 80072ca:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 80072cc:	6805      	ldr	r5, [r0, #0]
 80072ce:	2402      	movs	r4, #2
 80072d0:	fa04 f40c 	lsl.w	r4, r4, ip
 80072d4:	432c      	orrs	r4, r5
 80072d6:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 80072d8:	6844      	ldr	r4, [r0, #4]
 80072da:	f04f 0c01 	mov.w	ip, #1
 80072de:	fa0c fc01 	lsl.w	ip, ip, r1
 80072e2:	ea24 040c 	bic.w	r4, r4, ip
 80072e6:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 80072e8:	6884      	ldr	r4, [r0, #8]
 80072ea:	ea24 0403 	bic.w	r4, r4, r3
 80072ee:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80072f0:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 80072f2:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80072f4:	ea43 0304 	orr.w	r3, r3, r4
 80072f8:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 80072fa:	d80d      	bhi.n	8007318 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 80072fc:	6a03      	ldr	r3, [r0, #32]
 80072fe:	0089      	lsls	r1, r1, #2
 8007300:	240f      	movs	r4, #15
 8007302:	408c      	lsls	r4, r1
 8007304:	ea23 0304 	bic.w	r3, r3, r4
 8007308:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 800730a:	6a03      	ldr	r3, [r0, #32]
 800730c:	fa02 f101 	lsl.w	r1, r2, r1
 8007310:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 8007312:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 8007314:	6201      	str	r1, [r0, #32]
}
 8007316:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 8007318:	3908      	subs	r1, #8
 800731a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800731c:	0089      	lsls	r1, r1, #2
 800731e:	240f      	movs	r4, #15
 8007320:	408c      	lsls	r4, r1
 8007322:	ea23 0304 	bic.w	r3, r3, r4
 8007326:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 8007328:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800732a:	408a      	lsls	r2, r1
 800732c:	431a      	orrs	r2, r3
}
 800732e:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 8007330:	6242      	str	r2, [r0, #36]	; 0x24
}
 8007332:	4770      	bx	lr

08007334 <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 8007334:	2a04      	cmp	r2, #4
 8007336:	d00a      	beq.n	800734e <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 8007338:	2a07      	cmp	r2, #7
 800733a:	d000      	beq.n	800733e <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 800733c:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 800733e:	6843      	ldr	r3, [r0, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	fa02 f101 	lsl.w	r1, r2, r1
 8007346:	ea23 0101 	bic.w	r1, r3, r1
 800734a:	6041      	str	r1, [r0, #4]
}
 800734c:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 800734e:	6842      	ldr	r2, [r0, #4]
 8007350:	2301      	movs	r3, #1
 8007352:	fa03 f101 	lsl.w	r1, r3, r1
 8007356:	4311      	orrs	r1, r2
 8007358:	6041      	str	r1, [r0, #4]
 800735a:	4770      	bx	lr

0800735c <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 800735c:	68c3      	ldr	r3, [r0, #12]
 800735e:	0049      	lsls	r1, r1, #1
 8007360:	2203      	movs	r2, #3
 8007362:	408a      	lsls	r2, r1
 8007364:	ea23 0302 	bic.w	r3, r3, r2
 8007368:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 800736a:	68c2      	ldr	r2, [r0, #12]
 800736c:	2302      	movs	r3, #2
 800736e:	fa03 f101 	lsl.w	r1, r3, r1
 8007372:	4311      	orrs	r1, r2
 8007374:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 8007376:	4770      	bx	lr

08007378 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 8007378:	6982      	ldr	r2, [r0, #24]
 800737a:	2301      	movs	r3, #1
 800737c:	fa03 f101 	lsl.w	r1, r3, r1
 8007380:	4311      	orrs	r1, r2
 8007382:	6181      	str	r1, [r0, #24]
}
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 8007388:	6982      	ldr	r2, [r0, #24]
 800738a:	3110      	adds	r1, #16
 800738c:	2301      	movs	r3, #1
 800738e:	fa03 f101 	lsl.w	r1, r3, r1
 8007392:	4311      	orrs	r1, r2
 8007394:	6181      	str	r1, [r0, #24]
}
 8007396:	4770      	bx	lr

08007398 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8007398:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 800739a:	2301      	movs	r3, #1
 800739c:	6944      	ldr	r4, [r0, #20]
 800739e:	fa03 f201 	lsl.w	r2, r3, r1
 80073a2:	4214      	tst	r4, r2
 80073a4:	d008      	beq.n	80073b8 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 80073a6:	6982      	ldr	r2, [r0, #24]
}
 80073a8:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 80073ac:	3110      	adds	r1, #16
 80073ae:	fa03 f101 	lsl.w	r1, r3, r1
 80073b2:	4311      	orrs	r1, r2
 80073b4:	6181      	str	r1, [r0, #24]
}
 80073b6:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 80073b8:	6983      	ldr	r3, [r0, #24]
}
 80073ba:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 80073be:	431a      	orrs	r2, r3
 80073c0:	6182      	str	r2, [r0, #24]
}
 80073c2:	4770      	bx	lr

080073c4 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 80073c4:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 80073c6:	480a      	ldr	r0, [pc, #40]	; (80073f0 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 80073c8:	4c0a      	ldr	r4, [pc, #40]	; (80073f4 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 80073ca:	490b      	ldr	r1, [pc, #44]	; (80073f8 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	e9c4 2300 	strd	r2, r3, [r4]
 80073d4:	e9c0 2300 	strd	r2, r3, [r0]
 80073d8:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 80073dc:	4b07      	ldr	r3, [pc, #28]	; (80073fc <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 80073de:	60a3      	str	r3, [r4, #8]
 80073e0:	4a07      	ldr	r2, [pc, #28]	; (8007400 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 80073e2:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 80073e6:	6082      	str	r2, [r0, #8]
 80073e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80073ec:	608b      	str	r3, [r1, #8]
}
 80073ee:	4770      	bx	lr
 80073f0:	2000b5f0 	.word	0x2000b5f0
 80073f4:	2000b610 	.word	0x2000b610
 80073f8:	2000b600 	.word	0x2000b600
 80073fc:	40005c00 	.word	0x40005c00
 8007400:	40005400 	.word	0x40005400

08007404 <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007404:	b530      	push	{r4, r5, lr}
	stm_ret_t ret;

	IWDG -> KR = IWDG_KEY_ENABLE;
 8007406:	4c0c      	ldr	r4, [pc, #48]	; (8007438 <iwdg_init+0x34>)
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007408:	b083      	sub	sp, #12
	IWDG -> KR = IWDG_KEY_ENABLE;
 800740a:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 800740e:	6023      	str	r3, [r4, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;

	IWDG -> PR = psc;
	IWDG -> RLR = arr-1;
 8007410:	3a01      	subs	r2, #1
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8007412:	f245 5355 	movw	r3, #21845	; 0x5555

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8007416:	2531      	movs	r5, #49	; 0x31
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8007418:	6023      	str	r3, [r4, #0]
	IWDG -> PR = psc;
 800741a:	6061      	str	r1, [r4, #4]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 800741c:	2300      	movs	r3, #0
	IWDG -> RLR = arr-1;
 800741e:	60a2      	str	r2, [r4, #8]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8007420:	4906      	ldr	r1, [pc, #24]	; (800743c <iwdg_init+0x38>)
 8007422:	9500      	str	r5, [sp, #0]
 8007424:	2203      	movs	r2, #3
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007426:	4605      	mov	r5, r0
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8007428:	f003 fdf8 	bl	800b01c <wait_flag_in_register_timeout>

	IWDG -> KR = IWDG_KEY_RELOAD;
 800742c:	f64a 23aa 	movw	r3, #43690	; 0xaaaa

	return ret;
}
 8007430:	4628      	mov	r0, r5
	IWDG -> KR = IWDG_KEY_RELOAD;
 8007432:	6023      	str	r3, [r4, #0]
}
 8007434:	b003      	add	sp, #12
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	40003000 	.word	0x40003000
 800743c:	4000300c 	.word	0x4000300c

08007440 <iwdg_disable_in_debugmode>:

void iwdg_disable_in_debugmode(void){
#if defined(STM32F1)
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP;
#elif defined(STM32F4)
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 8007440:	4a02      	ldr	r2, [pc, #8]	; (800744c <iwdg_disable_in_debugmode+0xc>)
 8007442:	6893      	ldr	r3, [r2, #8]
 8007444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007448:	6093      	str	r3, [r2, #8]
#endif /* STM32F4 */
}
 800744a:	4770      	bx	lr
 800744c:	e0042000 	.word	0xe0042000

08007450 <iwdg_refresh>:

void iwdg_refresh(void){
	IWDG -> KR = IWDG_KEY_RELOAD;
 8007450:	4b02      	ldr	r3, [pc, #8]	; (800745c <iwdg_refresh+0xc>)
 8007452:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007456:	601a      	str	r2, [r3, #0]
}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40003000 	.word	0x40003000

08007460 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8007460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 8007466:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007468:	4ab9      	ldr	r2, [pc, #740]	; (8007750 <rcc_init+0x2f0>)
	stm_ret_t ret;
 800746a:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 800746c:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 800746e:	2301      	movs	r3, #1
 8007470:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007472:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 8007474:	4eb7      	ldr	r6, [pc, #732]	; (8007754 <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007476:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8007478:	4604      	mov	r4, r0
	_conf = rcc_conf;
 800747a:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 800747c:	d412      	bmi.n	80074a4 <rcc_init+0x44>
 800747e:	6893      	ldr	r3, [r2, #8]
 8007480:	071f      	lsls	r7, r3, #28
 8007482:	d40c      	bmi.n	800749e <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 8007484:	7b0b      	ldrb	r3, [r1, #12]
 8007486:	b1db      	cbz	r3, 80074c0 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 8007488:	2b01      	cmp	r3, #1
 800748a:	d03b      	beq.n	8007504 <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 800748c:	2255      	movs	r2, #85	; 0x55
 800748e:	2100      	movs	r1, #0
 8007490:	4620      	mov	r0, r4
 8007492:	f003 fdff 	bl	800b094 <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 8007496:	4620      	mov	r0, r4
 8007498:	b006      	add	sp, #24
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 800749e:	6853      	ldr	r3, [r2, #4]
 80074a0:	025d      	lsls	r5, r3, #9
 80074a2:	d5ef      	bpl.n	8007484 <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 80074a4:	4baa      	ldr	r3, [pc, #680]	; (8007750 <rcc_init+0x2f0>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80074ac:	d1ea      	bne.n	8007484 <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 80074ae:	4620      	mov	r0, r4
 80074b0:	2234      	movs	r2, #52	; 0x34
 80074b2:	4619      	mov	r1, r3
 80074b4:	f003 fdee 	bl	800b094 <set_return>
}
 80074b8:	4620      	mov	r0, r4
 80074ba:	b006      	add	sp, #24
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 80074c0:	4fa3      	ldr	r7, [pc, #652]	; (8007750 <rcc_init+0x2f0>)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	f043 0301 	orr.w	r3, r3, #1
 80074c8:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 80074ca:	ad02      	add	r5, sp, #8
 80074cc:	2364      	movs	r3, #100	; 0x64
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	4639      	mov	r1, r7
 80074d2:	4628      	mov	r0, r5
 80074d4:	2301      	movs	r3, #1
 80074d6:	2202      	movs	r2, #2
 80074d8:	f003 fda0 	bl	800b01c <wait_flag_in_register_timeout>
 80074dc:	e895 0003 	ldmia.w	r5, {r0, r1}
 80074e0:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 80074e4:	4620      	mov	r0, r4
 80074e6:	f003 fde3 	bl	800b0b0 <is_timeout>
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d155      	bne.n	800759a <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 80074ee:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 80074f0:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 80074f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80074f6:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6891      	ldr	r1, [r2, #8]
 80074fc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007500:	603b      	str	r3, [r7, #0]
 8007502:	e016      	b.n	8007532 <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 8007504:	4992      	ldr	r1, [pc, #584]	; (8007750 <rcc_init+0x2f0>)
 8007506:	680a      	ldr	r2, [r1, #0]
 8007508:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800750c:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 800750e:	ad02      	add	r5, sp, #8
 8007510:	22c8      	movs	r2, #200	; 0xc8
 8007512:	9200      	str	r2, [sp, #0]
 8007514:	4628      	mov	r0, r5
 8007516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800751a:	f003 fd7f 	bl	800b01c <wait_flag_in_register_timeout>
 800751e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007522:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 8007526:	4620      	mov	r0, r4
 8007528:	f003 fdc2 	bl	800b0b0 <is_timeout>
 800752c:	2800      	cmp	r0, #0
 800752e:	d17c      	bne.n	800762a <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 8007530:	6832      	ldr	r2, [r6, #0]
 8007532:	7b53      	ldrb	r3, [r2, #13]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d104      	bne.n	8007542 <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 8007538:	4f85      	ldr	r7, [pc, #532]	; (8007750 <rcc_init+0x2f0>)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f013 0308 	ands.w	r3, r3, #8
 8007540:	d078      	beq.n	8007634 <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 8007542:	6910      	ldr	r0, [r2, #16]
 8007544:	f003 fe0e 	bl	800b164 <embedded_flash_calculate_latency>
 8007548:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 800754a:	f003 fe37 	bl	800b1bc <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 800754e:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 8007550:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8007552:	d866      	bhi.n	8007622 <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 8007554:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8007764 <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8007558:	497f      	ldr	r1, [pc, #508]	; (8007758 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 800755a:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 800755e:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 8007562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007566:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 800756a:	4628      	mov	r0, r5
 800756c:	f8cd a000 	str.w	sl, [sp]
 8007570:	2301      	movs	r3, #1
 8007572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007576:	f003 fd51 	bl	800b01c <wait_flag_in_register_timeout>
 800757a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800757e:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007582:	4620      	mov	r0, r4
 8007584:	f003 fd94 	bl	800b0b0 <is_timeout>
 8007588:	b160      	cbz	r0, 80075a4 <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 800758a:	4620      	mov	r0, r4
 800758c:	2188      	movs	r1, #136	; 0x88
 800758e:	f003 fd85 	bl	800b09c <set_return_line>
}
 8007592:	4620      	mov	r0, r4
 8007594:	b006      	add	sp, #24
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 800759a:	2141      	movs	r1, #65	; 0x41
 800759c:	4620      	mov	r0, r4
 800759e:	f003 fd7d 	bl	800b09c <set_return_line>
			return ret;
 80075a2:	e778      	b.n	8007496 <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 80075a4:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 80075a8:	496b      	ldr	r1, [pc, #428]	; (8007758 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 80075aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ae:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 80075b2:	4628      	mov	r0, r5
 80075b4:	f8cd a000 	str.w	sl, [sp]
 80075b8:	2301      	movs	r3, #1
 80075ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80075be:	f003 fd2d 	bl	800b01c <wait_flag_in_register_timeout>
 80075c2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80075c6:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 80075ca:	4620      	mov	r0, r4
 80075cc:	f003 fd70 	bl	800b0b0 <is_timeout>
 80075d0:	2800      	cmp	r0, #0
 80075d2:	f040 8087 	bne.w	80076e4 <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 80075d6:	6833      	ldr	r3, [r6, #0]
 80075d8:	7b5a      	ldrb	r2, [r3, #13]
 80075da:	2a00      	cmp	r2, #0
 80075dc:	d074      	beq.n	80076c8 <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 80075de:	2a01      	cmp	r2, #1
 80075e0:	f000 80a8 	beq.w	8007734 <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 80075e4:	2a02      	cmp	r2, #2
 80075e6:	f000 80bf 	beq.w	8007768 <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 80075ea:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8007750 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 80075ee:	495b      	ldr	r1, [pc, #364]	; (800775c <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 80075f0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80075f4:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 80075f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	4628      	mov	r0, r5
 8007600:	2301      	movs	r3, #1
 8007602:	f003 fd0b 	bl	800b01c <wait_flag_in_register_timeout>
 8007606:	e895 0003 	ldmia.w	r5, {r0, r1}
 800760a:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 800760e:	4620      	mov	r0, r4
 8007610:	f003 fd4e 	bl	800b0b0 <is_timeout>
 8007614:	2800      	cmp	r0, #0
 8007616:	d06a      	beq.n	80076ee <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 8007618:	21ad      	movs	r1, #173	; 0xad
 800761a:	4620      	mov	r0, r4
 800761c:	f003 fd3e 	bl	800b09c <set_return_line>
		return ret;
 8007620:	e739      	b.n	8007496 <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8007622:	4638      	mov	r0, r7
 8007624:	f003 fd94 	bl	800b150 <embedded_flash_set_latency>
 8007628:	e794      	b.n	8007554 <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 800762a:	2150      	movs	r1, #80	; 0x50
 800762c:	4620      	mov	r0, r4
 800762e:	f003 fd35 	bl	800b09c <set_return_line>
			return ret;
 8007632:	e730      	b.n	8007496 <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 8007634:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8007636:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 800763a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800763e:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8007640:	4639      	mov	r1, r7
 8007642:	4628      	mov	r0, r5
 8007644:	f8cd 8000 	str.w	r8, [sp]
 8007648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800764c:	f003 fce6 	bl	800b01c <wait_flag_in_register_timeout>
 8007650:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007654:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8007658:	4620      	mov	r0, r4
 800765a:	f003 fd29 	bl	800b0b0 <is_timeout>
 800765e:	2800      	cmp	r0, #0
 8007660:	d13b      	bne.n	80076da <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 8007666:	9b05      	ldr	r3, [sp, #20]
 8007668:	4a3d      	ldr	r2, [pc, #244]	; (8007760 <rcc_init+0x300>)
 800766a:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 800766c:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 800766e:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8007670:	9b05      	ldr	r3, [sp, #20]
 8007672:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8007674:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8007676:	430b      	orrs	r3, r1
 8007678:	69d1      	ldr	r1, [r2, #28]
 800767a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800767e:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8007680:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8007682:	0849      	lsrs	r1, r1, #1
 8007684:	3901      	subs	r1, #1
 8007686:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800768a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800768e:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8007692:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 8007694:	9b05      	ldr	r3, [sp, #20]
 8007696:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800769e:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 80076a0:	4639      	mov	r1, r7
 80076a2:	4628      	mov	r0, r5
 80076a4:	f8cd 8000 	str.w	r8, [sp]
 80076a8:	2301      	movs	r3, #1
 80076aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80076ae:	f003 fcb5 	bl	800b01c <wait_flag_in_register_timeout>
 80076b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80076b6:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 80076ba:	4620      	mov	r0, r4
 80076bc:	f003 fcf8 	bl	800b0b0 <is_timeout>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d15b      	bne.n	800777c <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 80076c4:	6832      	ldr	r2, [r6, #0]
 80076c6:	e73c      	b.n	8007542 <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 80076c8:	4b21      	ldr	r3, [pc, #132]	; (8007750 <rcc_init+0x2f0>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	0798      	lsls	r0, r3, #30
 80076ce:	d48c      	bmi.n	80075ea <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80076d0:	2199      	movs	r1, #153	; 0x99
 80076d2:	4620      	mov	r0, r4
 80076d4:	f003 fce2 	bl	800b09c <set_return_line>
			return ret;
 80076d8:	e6dd      	b.n	8007496 <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 80076da:	2161      	movs	r1, #97	; 0x61
 80076dc:	4620      	mov	r0, r4
 80076de:	f003 fcdd 	bl	800b09c <set_return_line>
				return ret;
 80076e2:	e6d8      	b.n	8007496 <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 80076e4:	218f      	movs	r1, #143	; 0x8f
 80076e6:	4620      	mov	r0, r4
 80076e8:	f003 fcd8 	bl	800b09c <set_return_line>
		return ret;
 80076ec:	e6d3      	b.n	8007496 <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 80076ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80076f2:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 80076f4:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 80076f6:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 80076f8:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80076fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007700:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8007702:	7d53      	ldrb	r3, [r2, #21]
 8007704:	7d11      	ldrb	r1, [r2, #20]
 8007706:	7d92      	ldrb	r2, [r2, #22]
 8007708:	3303      	adds	r3, #3
 800770a:	3107      	adds	r1, #7
 800770c:	029b      	lsls	r3, r3, #10
 800770e:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007712:	9905      	ldr	r1, [sp, #20]
 8007714:	3203      	adds	r2, #3
 8007716:	430b      	orrs	r3, r1
 8007718:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800771c:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 800771e:	9b05      	ldr	r3, [sp, #20]
 8007720:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 8007724:	f7f9 fd88 	bl	8001238 <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8007728:	4547      	cmp	r7, r8
 800772a:	d30d      	bcc.n	8007748 <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 800772c:	200f      	movs	r0, #15
 800772e:	f000 fee1 	bl	80084f4 <systick_init>
	return ret;
 8007732:	e6b0      	b.n	8007496 <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <rcc_init+0x2f0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	0399      	lsls	r1, r3, #14
 800773a:	f53f af56 	bmi.w	80075ea <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 800773e:	219f      	movs	r1, #159	; 0x9f
 8007740:	4620      	mov	r0, r4
 8007742:	f003 fcab 	bl	800b09c <set_return_line>
			return ret;
 8007746:	e6a6      	b.n	8007496 <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8007748:	4638      	mov	r0, r7
 800774a:	f003 fd01 	bl	800b150 <embedded_flash_set_latency>
 800774e:	e7ed      	b.n	800772c <rcc_init+0x2cc>
 8007750:	40023800 	.word	0x40023800
 8007754:	2000b620 	.word	0x2000b620
 8007758:	40007004 	.word	0x40007004
 800775c:	40023808 	.word	0x40023808
 8007760:	f0bc8000 	.word	0xf0bc8000
 8007764:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 8007768:	4b07      	ldr	r3, [pc, #28]	; (8007788 <rcc_init+0x328>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	019b      	lsls	r3, r3, #6
 800776e:	f53f af3c 	bmi.w	80075ea <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8007772:	21a5      	movs	r1, #165	; 0xa5
 8007774:	4620      	mov	r0, r4
 8007776:	f003 fc91 	bl	800b09c <set_return_line>
			return ret;
 800777a:	e68c      	b.n	8007496 <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 800777c:	2172      	movs	r1, #114	; 0x72
 800777e:	4620      	mov	r0, r4
 8007780:	f003 fc8c 	bl	800b09c <set_return_line>
				return ret;
 8007784:	e687      	b.n	8007496 <rcc_init+0x36>
 8007786:	bf00      	nop
 8007788:	40023800 	.word	0x40023800

0800778c <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 800778c:	2805      	cmp	r0, #5
 800778e:	d819      	bhi.n	80077c4 <rcc_get_bus_frequency+0x38>
 8007790:	e8df f000 	tbb	[pc, r0]
 8007794:	2f251a0e 	.word	0x2f251a0e
 8007798:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 800779a:	4b2a      	ldr	r3, [pc, #168]	; (8007844 <rcc_get_bus_frequency+0xb8>)
 800779c:	492a      	ldr	r1, [pc, #168]	; (8007848 <rcc_get_bus_frequency+0xbc>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	4a2a      	ldr	r2, [pc, #168]	; (800784c <rcc_get_bus_frequency+0xc0>)
 80077a2:	6808      	ldr	r0, [r1, #0]
 80077a4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80077a8:	5cd3      	ldrb	r3, [r2, r3]
 80077aa:	40d8      	lsrs	r0, r3
 80077ac:	0040      	lsls	r0, r0, #1
 80077ae:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 80077b0:	4b27      	ldr	r3, [pc, #156]	; (8007850 <rcc_get_bus_frequency+0xc4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	7b1a      	ldrb	r2, [r3, #12]
 80077b6:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 80077b8:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 80077ba:	d02f      	beq.n	800781c <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 80077bc:	2a00      	cmp	r2, #0
 80077be:	d03f      	beq.n	8007840 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 80077c0:	2a02      	cmp	r2, #2
 80077c2:	d032      	beq.n	800782a <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 80077c4:	2000      	movs	r0, #0
}
 80077c6:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 80077c8:	4b21      	ldr	r3, [pc, #132]	; (8007850 <rcc_get_bus_frequency+0xc4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	7d18      	ldrb	r0, [r3, #20]
 80077ce:	2807      	cmp	r0, #7
 80077d0:	d928      	bls.n	8007824 <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 80077d2:	4a1d      	ldr	r2, [pc, #116]	; (8007848 <rcc_get_bus_frequency+0xbc>)
 80077d4:	1f83      	subs	r3, r0, #6
 80077d6:	6810      	ldr	r0, [r2, #0]
 80077d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80077dc:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80077de:	4b19      	ldr	r3, [pc, #100]	; (8007844 <rcc_get_bus_frequency+0xb8>)
 80077e0:	4919      	ldr	r1, [pc, #100]	; (8007848 <rcc_get_bus_frequency+0xbc>)
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	4a19      	ldr	r2, [pc, #100]	; (800784c <rcc_get_bus_frequency+0xc0>)
 80077e6:	6808      	ldr	r0, [r1, #0]
 80077e8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80077ec:	5cd3      	ldrb	r3, [r2, r3]
 80077ee:	40d8      	lsrs	r0, r3
 80077f0:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80077f2:	4b14      	ldr	r3, [pc, #80]	; (8007844 <rcc_get_bus_frequency+0xb8>)
 80077f4:	4914      	ldr	r1, [pc, #80]	; (8007848 <rcc_get_bus_frequency+0xbc>)
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	4a14      	ldr	r2, [pc, #80]	; (800784c <rcc_get_bus_frequency+0xc0>)
 80077fa:	6808      	ldr	r0, [r1, #0]
 80077fc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007800:	5cd3      	ldrb	r3, [r2, r3]
 8007802:	40d8      	lsrs	r0, r3
 8007804:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 8007806:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <rcc_get_bus_frequency+0xb8>)
 8007808:	490f      	ldr	r1, [pc, #60]	; (8007848 <rcc_get_bus_frequency+0xbc>)
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4a0f      	ldr	r2, [pc, #60]	; (800784c <rcc_get_bus_frequency+0xc0>)
 800780e:	6808      	ldr	r0, [r1, #0]
 8007810:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007814:	5cd3      	ldrb	r3, [r2, r3]
 8007816:	40d8      	lsrs	r0, r3
 8007818:	0040      	lsls	r0, r0, #1
 800781a:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 800781c:	2a01      	cmp	r2, #1
 800781e:	d1cf      	bne.n	80077c0 <rcc_get_bus_frequency+0x34>
 8007820:	480c      	ldr	r0, [pc, #48]	; (8007854 <rcc_get_bus_frequency+0xc8>)
 8007822:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8007824:	4b08      	ldr	r3, [pc, #32]	; (8007848 <rcc_get_bus_frequency+0xbc>)
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 800782a:	69da      	ldr	r2, [r3, #28]
 800782c:	6999      	ldr	r1, [r3, #24]
 800782e:	4809      	ldr	r0, [pc, #36]	; (8007854 <rcc_get_bus_frequency+0xc8>)
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	fbb0 f0f1 	udiv	r0, r0, r1
 8007836:	fb02 f000 	mul.w	r0, r2, r0
 800783a:	fbb0 f0f3 	udiv	r0, r0, r3
 800783e:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8007840:	4805      	ldr	r0, [pc, #20]	; (8007858 <rcc_get_bus_frequency+0xcc>)
 8007842:	4770      	bx	lr
 8007844:	40023800 	.word	0x40023800
 8007848:	20000000 	.word	0x20000000
 800784c:	08010a8c 	.word	0x08010a8c
 8007850:	2000b620 	.word	0x2000b620
 8007854:	017d7840 	.word	0x017d7840
 8007858:	00f42400 	.word	0x00f42400

0800785c <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 800785c:	4907      	ldr	r1, [pc, #28]	; (800787c <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 800785e:	4a08      	ldr	r2, [pc, #32]	; (8007880 <rng_init+0x24>)
void rng_init(void){
 8007860:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8007862:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8007864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007868:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	f043 0304 	orr.w	r3, r3, #4
 8007870:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 8007872:	f003 fcef 	bl	800b254 <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 8007876:	4b03      	ldr	r3, [pc, #12]	; (8007884 <rng_init+0x28>)
 8007878:	6018      	str	r0, [r3, #0]
}
 800787a:	bd08      	pop	{r3, pc}
 800787c:	40023800 	.word	0x40023800
 8007880:	50060800 	.word	0x50060800
 8007884:	2000b624 	.word	0x2000b624

08007888 <rng_set_seed>:
	_seed = seed;
 8007888:	4b01      	ldr	r3, [pc, #4]	; (8007890 <rng_set_seed+0x8>)
 800788a:	6018      	str	r0, [r3, #0]
}
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	2000b624 	.word	0x2000b624

08007894 <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 8007894:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 8007896:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007898:	4c1b      	ldr	r4, [pc, #108]	; (8007908 <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 800789a:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 800789c:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 800789e:	2602      	movs	r6, #2
 80078a0:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 80078a2:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 80078a4:	f000 fe48 	bl	8008538 <get_tick>
 80078a8:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 80078aa:	9505      	str	r5, [sp, #20]
 80078ac:	e005      	b.n	80078ba <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 80078ae:	f000 fe43 	bl	8008538 <get_tick>
 80078b2:	9b04      	ldr	r3, [sp, #16]
 80078b4:	1ac0      	subs	r0, r0, r3
 80078b6:	2802      	cmp	r0, #2
 80078b8:	d802      	bhi.n	80078c0 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 80078ba:	6863      	ldr	r3, [r4, #4]
 80078bc:	07da      	lsls	r2, r3, #31
 80078be:	d5f6      	bpl.n	80078ae <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 80078c0:	68a3      	ldr	r3, [r4, #8]
 80078c2:	9305      	str	r3, [sp, #20]
	return random_number;
 80078c4:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	4053      	eors	r3, r2
 80078ca:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 80078cc:	f000 fe34 	bl	8008538 <get_tick>
 80078d0:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 80078d2:	9503      	str	r5, [sp, #12]
 80078d4:	e005      	b.n	80078e2 <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 80078d6:	f000 fe2f 	bl	8008538 <get_tick>
 80078da:	9b02      	ldr	r3, [sp, #8]
 80078dc:	1ac0      	subs	r0, r0, r3
 80078de:	2802      	cmp	r0, #2
 80078e0:	d802      	bhi.n	80078e8 <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 80078e2:	6863      	ldr	r3, [r4, #4]
 80078e4:	07db      	lsls	r3, r3, #31
 80078e6:	d5f6      	bpl.n	80078d6 <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 80078e8:	68a3      	ldr	r3, [r4, #8]
 80078ea:	9303      	str	r3, [sp, #12]
	return random_number;
 80078ec:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 80078ee:	9b01      	ldr	r3, [sp, #4]
 80078f0:	4053      	eors	r3, r2
 80078f2:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 80078f4:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 80078f6:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 80078f8:	d102      	bne.n	8007900 <rng_generate_random_number+0x6c>
	}
	return rand;
 80078fa:	9801      	ldr	r0, [sp, #4]
}
 80078fc:	b006      	add	sp, #24
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	2601      	movs	r6, #1
 8007902:	e7cf      	b.n	80078a4 <rng_generate_random_number+0x10>
 8007904:	2000b624 	.word	0x2000b624
 8007908:	50060800 	.word	0x50060800

0800790c <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	460c      	mov	r4, r1
 8007910:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 8007912:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007914:	68cb      	ldr	r3, [r1, #12]
 8007916:	499e      	ldr	r1, [pc, #632]	; (8007b90 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 8007918:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 800791a:	2001      	movs	r0, #1
 800791c:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 800791e:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8007920:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007922:	428b      	cmp	r3, r1
	stm_ret_t ret;
 8007924:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 8007928:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 800792a:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 800792c:	f000 80cd 	beq.w	8007aca <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8007930:	4998      	ldr	r1, [pc, #608]	; (8007b94 <_ZN3spi4initEP12spi_config_t+0x288>)
 8007932:	428b      	cmp	r3, r1
 8007934:	d015      	beq.n	8007962 <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8007936:	4998      	ldr	r1, [pc, #608]	; (8007b98 <_ZN3spi4initEP12spi_config_t+0x28c>)
 8007938:	428b      	cmp	r3, r1
 800793a:	f000 810b 	beq.w	8007b54 <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 800793e:	4997      	ldr	r1, [pc, #604]	; (8007b9c <_ZN3spi4initEP12spi_config_t+0x290>)
 8007940:	428b      	cmp	r3, r1
 8007942:	f000 8112 	beq.w	8007b6a <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8007946:	4996      	ldr	r1, [pc, #600]	; (8007ba0 <_ZN3spi4initEP12spi_config_t+0x294>)
 8007948:	428b      	cmp	r3, r1
 800794a:	f000 80d5 	beq.w	8007af8 <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 800794e:	4995      	ldr	r1, [pc, #596]	; (8007ba4 <_ZN3spi4initEP12spi_config_t+0x298>)
 8007950:	428b      	cmp	r3, r1
 8007952:	d10c      	bne.n	800796e <_ZN3spi4initEP12spi_config_t+0x62>
 8007954:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 8007958:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800795a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800795e:	644b      	str	r3, [r1, #68]	; 0x44
 8007960:	e005      	b.n	800796e <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8007962:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8007966:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800796c:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 800796e:	6910      	ldr	r0, [r2, #16]
 8007970:	f7ff fbba 	bl	80070e8 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 8007974:	68a3      	ldr	r3, [r4, #8]
 8007976:	2205      	movs	r2, #5
 8007978:	8a99      	ldrh	r1, [r3, #20]
 800797a:	6918      	ldr	r0, [r3, #16]
 800797c:	f7ff fc9c 	bl	80072b8 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8007980:	68a3      	ldr	r3, [r4, #8]
 8007982:	2207      	movs	r2, #7
 8007984:	8a99      	ldrh	r1, [r3, #20]
 8007986:	6918      	ldr	r0, [r3, #16]
 8007988:	f7ff fcd4 	bl	8007334 <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 800798c:	68a2      	ldr	r2, [r4, #8]
 800798e:	7813      	ldrb	r3, [r2, #0]
 8007990:	f013 0f0d 	tst.w	r3, #13
 8007994:	f040 8087 	bne.w	8007aa6 <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007998:	075b      	lsls	r3, r3, #29
 800799a:	d15f      	bne.n	8007a5c <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 800799c:	7b10      	ldrb	r0, [r2, #12]
 800799e:	2801      	cmp	r0, #1
 80079a0:	d06f      	beq.n	8007a82 <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 80079a2:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 80079a4:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 80079a6:	2100      	movs	r1, #0
 80079a8:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 80079aa:	7991      	ldrb	r1, [r2, #6]
 80079ac:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 80079b0:	681e      	ldr	r6, [r3, #0]
 80079b2:	4331      	orrs	r1, r6
 80079b4:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 80079b6:	7911      	ldrb	r1, [r2, #4]
 80079b8:	78d6      	ldrb	r6, [r2, #3]
 80079ba:	01c9      	lsls	r1, r1, #7
 80079bc:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 80079c0:	681e      	ldr	r6, [r3, #0]
 80079c2:	4331      	orrs	r1, r6
 80079c4:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 80079c6:	7811      	ldrb	r1, [r2, #0]
 80079c8:	f011 0703 	ands.w	r7, r1, #3
 80079cc:	d003      	beq.n	80079d6 <_ZN3spi4initEP12spi_config_t+0xca>
 80079ce:	681e      	ldr	r6, [r3, #0]
 80079d0:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 80079d4:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 80079d6:	f011 0f0a 	tst.w	r1, #10
 80079da:	d003      	beq.n	80079e4 <_ZN3spi4initEP12spi_config_t+0xd8>
 80079dc:	6819      	ldr	r1, [r3, #0]
 80079de:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80079e2:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 80079e4:	bb78      	cbnz	r0, 8007a46 <_ZN3spi4initEP12spi_config_t+0x13a>
 80079e6:	6819      	ldr	r1, [r3, #0]
 80079e8:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80079ec:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 80079ee:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 80079f0:	7851      	ldrb	r1, [r2, #1]
 80079f2:	f011 0f05 	tst.w	r1, #5
 80079f6:	d024      	beq.n	8007a42 <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 80079f8:	4965      	ldr	r1, [pc, #404]	; (8007b90 <_ZN3spi4initEP12spi_config_t+0x284>)
 80079fa:	428b      	cmp	r3, r1
 80079fc:	f000 8083 	beq.w	8007b06 <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007a00:	4964      	ldr	r1, [pc, #400]	; (8007b94 <_ZN3spi4initEP12spi_config_t+0x288>)
 8007a02:	428b      	cmp	r3, r1
 8007a04:	f000 80ad 	beq.w	8007b62 <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007a08:	4963      	ldr	r1, [pc, #396]	; (8007b98 <_ZN3spi4initEP12spi_config_t+0x28c>)
 8007a0a:	428b      	cmp	r3, r1
 8007a0c:	d064      	beq.n	8007ad8 <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007a0e:	4963      	ldr	r1, [pc, #396]	; (8007b9c <_ZN3spi4initEP12spi_config_t+0x290>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	f000 80b1 	beq.w	8007b78 <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007a16:	4962      	ldr	r1, [pc, #392]	; (8007ba0 <_ZN3spi4initEP12spi_config_t+0x294>)
 8007a18:	428b      	cmp	r3, r1
 8007a1a:	f000 80b1 	beq.w	8007b80 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007a1e:	4961      	ldr	r1, [pc, #388]	; (8007ba4 <_ZN3spi4initEP12spi_config_t+0x298>)
 8007a20:	428b      	cmp	r3, r1
 8007a22:	f000 80b1 	beq.w	8007b88 <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a26:	6892      	ldr	r2, [r2, #8]
 8007a28:	2a03      	cmp	r2, #3
 8007a2a:	d972      	bls.n	8007b12 <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8007a2c:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da57      	bge.n	8007ae4 <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a34:	495c      	ldr	r1, [pc, #368]	; (8007ba8 <_ZN3spi4initEP12spi_config_t+0x29c>)
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	0112      	lsls	r2, r2, #4
 8007a3c:	4419      	add	r1, r3
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 8007a42:	4628      	mov	r0, r5
 8007a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 8007a46:	2100      	movs	r1, #0
 8007a48:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d0d0      	beq.n	80079f0 <_ZN3spi4initEP12spi_config_t+0xe4>
 8007a4e:	2801      	cmp	r0, #1
 8007a50:	d1ce      	bne.n	80079f0 <_ZN3spi4initEP12spi_config_t+0xe4>
 8007a52:	6859      	ldr	r1, [r3, #4]
 8007a54:	f041 0104 	orr.w	r1, r1, #4
 8007a58:	6059      	str	r1, [r3, #4]
 8007a5a:	e7c9      	b.n	80079f0 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 8007a5c:	6a10      	ldr	r0, [r2, #32]
 8007a5e:	f7ff fb43 	bl	80070e8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 8007a62:	68a3      	ldr	r3, [r4, #8]
 8007a64:	2205      	movs	r2, #5
 8007a66:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007a68:	6a18      	ldr	r0, [r3, #32]
 8007a6a:	f7ff fc25 	bl	80072b8 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 8007a6e:	68a3      	ldr	r3, [r4, #8]
 8007a70:	2207      	movs	r2, #7
 8007a72:	6a18      	ldr	r0, [r3, #32]
 8007a74:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007a76:	f7ff fc5d 	bl	8007334 <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007a7a:	68a2      	ldr	r2, [r4, #8]
 8007a7c:	7b10      	ldrb	r0, [r2, #12]
 8007a7e:	2801      	cmp	r0, #1
 8007a80:	d18f      	bne.n	80079a2 <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 8007a82:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8007a84:	f7ff fb30 	bl	80070e8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	2205      	movs	r2, #5
 8007a8c:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007a8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a90:	f7ff fc12 	bl	80072b8 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 8007a94:	68a3      	ldr	r3, [r4, #8]
 8007a96:	2207      	movs	r2, #7
 8007a98:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a9a:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007a9c:	f7ff fc4a 	bl	8007334 <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007aa0:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007aa2:	7b10      	ldrb	r0, [r2, #12]
 8007aa4:	e77d      	b.n	80079a2 <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 8007aa6:	6990      	ldr	r0, [r2, #24]
 8007aa8:	f7ff fb1e 	bl	80070e8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8007aac:	68a3      	ldr	r3, [r4, #8]
 8007aae:	2205      	movs	r2, #5
 8007ab0:	8b99      	ldrh	r1, [r3, #28]
 8007ab2:	6998      	ldr	r0, [r3, #24]
 8007ab4:	f7ff fc00 	bl	80072b8 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 8007ab8:	68a3      	ldr	r3, [r4, #8]
 8007aba:	2207      	movs	r2, #7
 8007abc:	8b99      	ldrh	r1, [r3, #28]
 8007abe:	6998      	ldr	r0, [r3, #24]
 8007ac0:	f7ff fc38 	bl	8007334 <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007ac4:	68a2      	ldr	r2, [r4, #8]
 8007ac6:	7813      	ldrb	r3, [r2, #0]
 8007ac8:	e766      	b.n	8007998 <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007aca:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8007ace:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ad4:	644b      	str	r3, [r1, #68]	; 0x44
 8007ad6:	e74a      	b.n	800796e <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007ad8:	2333      	movs	r3, #51	; 0x33
 8007ada:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007ade:	6892      	ldr	r2, [r2, #8]
 8007ae0:	2a03      	cmp	r2, #3
 8007ae2:	d916      	bls.n	8007b12 <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ae4:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007ae8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8007aec:	0112      	lsls	r2, r2, #4
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007af4:	4628      	mov	r0, r5
 8007af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8007af8:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8007afc:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b02:	644b      	str	r3, [r1, #68]	; 0x44
 8007b04:	e733      	b.n	800796e <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b06:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007b08:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b0a:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007b0c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007b10:	d8e8      	bhi.n	8007ae4 <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 8007b12:	4628      	mov	r0, r5
 8007b14:	22b0      	movs	r2, #176	; 0xb0
 8007b16:	2100      	movs	r1, #0
 8007b18:	f003 fabc 	bl	800b094 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8007b1c:	4b23      	ldr	r3, [pc, #140]	; (8007bac <_ZN3spi4initEP12spi_config_t+0x2a0>)
 8007b1e:	4a24      	ldr	r2, [pc, #144]	; (8007bb0 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 8007b20:	4924      	ldr	r1, [pc, #144]	; (8007bb4 <_ZN3spi4initEP12spi_config_t+0x2a8>)
 8007b22:	4825      	ldr	r0, [pc, #148]	; (8007bb8 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007b24:	f003 f944 	bl	800adb0 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8007b28:	4924      	ldr	r1, [pc, #144]	; (8007bbc <_ZN3spi4initEP12spi_config_t+0x2b0>)
 8007b2a:	4823      	ldr	r0, [pc, #140]	; (8007bb8 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007b2c:	2205      	movs	r2, #5
 8007b2e:	f003 f8c3 	bl	800acb8 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8007b32:	f241 3088 	movw	r0, #5000	; 0x1388
 8007b36:	f000 fccf 	bl	80084d8 <systick_delay_ms>
 8007b3a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007b3e:	4920      	ldr	r1, [pc, #128]	; (8007bc0 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 8007b40:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <_ZN3spi4initEP12spi_config_t+0x2b8>)
 8007b42:	68ca      	ldr	r2, [r1, #12]
 8007b44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007b48:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007b4a:	60cb      	str	r3, [r1, #12]
 8007b4c:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007b50:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007b52:	e7fd      	b.n	8007b50 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8007b54:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8007b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b5e:	640b      	str	r3, [r1, #64]	; 0x40
 8007b60:	e705      	b.n	800796e <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007b62:	2324      	movs	r3, #36	; 0x24
 8007b64:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b68:	e7b9      	b.n	8007ade <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8007b6a:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 8007b6e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007b70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b74:	644b      	str	r3, [r1, #68]	; 0x44
 8007b76:	e6fa      	b.n	800796e <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007b78:	2354      	movs	r3, #84	; 0x54
 8007b7a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b7e:	e7ae      	b.n	8007ade <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007b80:	2355      	movs	r3, #85	; 0x55
 8007b82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b86:	e7aa      	b.n	8007ade <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007b88:	2356      	movs	r3, #86	; 0x56
 8007b8a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b8e:	e7a6      	b.n	8007ade <_ZN3spi4initEP12spi_config_t+0x1d2>
 8007b90:	40013000 	.word	0x40013000
 8007b94:	40003800 	.word	0x40003800
 8007b98:	40003c00 	.word	0x40003c00
 8007b9c:	40013400 	.word	0x40013400
 8007ba0:	40015000 	.word	0x40015000
 8007ba4:	40015400 	.word	0x40015400
 8007ba8:	e000ecfc 	.word	0xe000ecfc
 8007bac:	0801155c 	.word	0x0801155c
 8007bb0:	08011564 	.word	0x08011564
 8007bb4:	080114f4 	.word	0x080114f4
 8007bb8:	0801158c 	.word	0x0801158c
 8007bbc:	08011540 	.word	0x08011540
 8007bc0:	e000ed00 	.word	0xe000ed00
 8007bc4:	05fa0004 	.word	0x05fa0004

08007bc8 <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bcc:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007bce:	2101      	movs	r1, #1
 8007bd0:	7001      	strb	r1, [r0, #0]
 8007bd2:	2100      	movs	r1, #0
 8007bd4:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 8007bd6:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007bd8:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 8007bda:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007bdc:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007bde:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007be0:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007be2:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007be4:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007be6:	d463      	bmi.n	8007cb0 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007be8:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007bec:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007bee:	d007      	beq.n	8007c00 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007bf0:	680a      	ldr	r2, [r1, #0]
 8007bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bf6:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 8007bf8:	680a      	ldr	r2, [r1, #0]
 8007bfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bfe:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007c00:	680a      	ldr	r2, [r1, #0]
 8007c02:	0652      	lsls	r2, r2, #25
 8007c04:	d54f      	bpl.n	8007ca6 <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 8007c06:	ae02      	add	r6, sp, #8
 8007c08:	b36b      	cbz	r3, 8007c66 <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007c0a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007c0e:	e006      	b.n	8007c1e <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007c10:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 8007c14:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007c16:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007c18:	61a0      	str	r0, [r4, #24]
		txcount++;
 8007c1a:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007c1c:	d923      	bls.n	8007c66 <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007c1e:	3108      	adds	r1, #8
 8007c20:	4630      	mov	r0, r6
 8007c22:	2301      	movs	r3, #1
 8007c24:	2202      	movs	r2, #2
 8007c26:	f8cd 8000 	str.w	r8, [sp]
 8007c2a:	f003 f9f7 	bl	800b01c <wait_flag_in_register_timeout>
 8007c2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007c32:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007c36:	4628      	mov	r0, r5
 8007c38:	f003 fa32 	bl	800b0a0 <is_oke>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	d047      	beq.n	8007cd0 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007c40:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007c42:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007c44:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007c46:	68e1      	ldr	r1, [r4, #12]
 8007c48:	681f      	ldr	r7, [r3, #0]
 8007c4a:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007c4c:	1c58      	adds	r0, r3, #1
 8007c4e:	2a00      	cmp	r2, #0
 8007c50:	d0de      	beq.n	8007c10 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 8007c52:	2a01      	cmp	r2, #1
 8007c54:	bf04      	itt	eq
 8007c56:	3302      	addeq	r3, #2
 8007c58:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 8007c5a:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 8007c5e:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007c60:	429a      	cmp	r2, r3
		txcount++;
 8007c62:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007c64:	d8db      	bhi.n	8007c1e <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007c66:	2364      	movs	r3, #100	; 0x64
 8007c68:	3108      	adds	r1, #8
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	2300      	movs	r3, #0
 8007c70:	2280      	movs	r2, #128	; 0x80
 8007c72:	f003 f9d3 	bl	800b01c <wait_flag_in_register_timeout>
 8007c76:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007c7a:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f003 fa0e 	bl	800b0a0 <is_oke>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	d032      	beq.n	8007cee <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	f013 0f0a 	tst.w	r3, #10
 8007c90:	d105      	bne.n	8007c9e <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 8007c92:	68e3      	ldr	r3, [r4, #12]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007c9c:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 8007c9e:	4628      	mov	r0, r5
 8007ca0:	b006      	add	sp, #24
 8007ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007ca6:	680a      	ldr	r2, [r1, #0]
 8007ca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cac:	600a      	str	r2, [r1, #0]
 8007cae:	e7aa      	b.n	8007c06 <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 8007cb0:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <_ZN3spi8transmitEmm+0x144>)
 8007cb2:	4a17      	ldr	r2, [pc, #92]	; (8007d10 <_ZN3spi8transmitEmm+0x148>)
 8007cb4:	4917      	ldr	r1, [pc, #92]	; (8007d14 <_ZN3spi8transmitEmm+0x14c>)
 8007cb6:	4818      	ldr	r0, [pc, #96]	; (8007d18 <_ZN3spi8transmitEmm+0x150>)
 8007cb8:	f003 f87a 	bl	800adb0 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007cc2:	2103      	movs	r1, #3
 8007cc4:	f003 f9e6 	bl	800b094 <set_return>
}
 8007cc8:	4628      	mov	r0, r5
 8007cca:	b006      	add	sp, #24
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007cd0:	4b0e      	ldr	r3, [pc, #56]	; (8007d0c <_ZN3spi8transmitEmm+0x144>)
 8007cd2:	4a0f      	ldr	r2, [pc, #60]	; (8007d10 <_ZN3spi8transmitEmm+0x148>)
 8007cd4:	4911      	ldr	r1, [pc, #68]	; (8007d1c <_ZN3spi8transmitEmm+0x154>)
 8007cd6:	4810      	ldr	r0, [pc, #64]	; (8007d18 <_ZN3spi8transmitEmm+0x150>)
 8007cd8:	f003 f86a 	bl	800adb0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f240 1123 	movw	r1, #291	; 0x123
 8007ce2:	f003 f9db 	bl	800b09c <set_return_line>
}
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	b006      	add	sp, #24
 8007cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <_ZN3spi8transmitEmm+0x144>)
 8007cf0:	4a07      	ldr	r2, [pc, #28]	; (8007d10 <_ZN3spi8transmitEmm+0x148>)
 8007cf2:	490a      	ldr	r1, [pc, #40]	; (8007d1c <_ZN3spi8transmitEmm+0x154>)
 8007cf4:	4808      	ldr	r0, [pc, #32]	; (8007d18 <_ZN3spi8transmitEmm+0x150>)
 8007cf6:	f003 f85b 	bl	800adb0 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007d00:	f003 f9cc 	bl	800b09c <set_return_line>
}
 8007d04:	4628      	mov	r0, r5
 8007d06:	b006      	add	sp, #24
 8007d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0c:	08011590 	.word	0x08011590
 8007d10:	08011564 	.word	0x08011564
 8007d14:	0801159c 	.word	0x0801159c
 8007d18:	0801158c 	.word	0x0801158c
 8007d1c:	080115e0 	.word	0x080115e0

08007d20 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 8007d24:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007d26:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007d28:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007d2a:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007d2c:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007d2e:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007d30:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007d32:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 8007d34:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 8007d36:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 8007d38:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007d3a:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 8007d3e:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 8007d42:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 8007d44:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 8007d46:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007d48:	d158      	bne.n	8007dfc <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	68c9      	ldr	r1, [r1, #12]
 8007d4e:	680b      	ldr	r3, [r1, #0]
 8007d50:	065b      	lsls	r3, r3, #25
 8007d52:	d54e      	bpl.n	8007df2 <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 8007d54:	ae02      	add	r6, sp, #8
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d060      	beq.n	8007e1c <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007d5a:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007d5e:	e00e      	b.n	8007d7e <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 8007d60:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 8007d64:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 8007d66:	3301      	adds	r3, #1
 8007d68:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 8007d6c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 8007d70:	6a23      	ldr	r3, [r4, #32]
 8007d72:	3301      	adds	r3, #1
		rxcount++;
 8007d74:	3201      	adds	r2, #1
	while(txcount < txlen){
 8007d76:	4298      	cmp	r0, r3
		txcount++;
 8007d78:	6223      	str	r3, [r4, #32]
		rxcount++;
 8007d7a:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 8007d7c:	d94e      	bls.n	8007e1c <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007d7e:	2301      	movs	r3, #1
 8007d80:	2202      	movs	r2, #2
 8007d82:	3108      	adds	r1, #8
 8007d84:	4630      	mov	r0, r6
 8007d86:	f8cd 8000 	str.w	r8, [sp]
 8007d8a:	f003 f947 	bl	800b01c <wait_flag_in_register_timeout>
 8007d8e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d92:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007d96:	4628      	mov	r0, r5
 8007d98:	f003 f982 	bl	800b0a0 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d9c:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 8007d9e:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007da0:	461a      	mov	r2, r3
 8007da2:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 8007da4:	2900      	cmp	r1, #0
 8007da6:	d055      	beq.n	8007e54 <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 8007da8:	69a7      	ldr	r7, [r4, #24]
 8007daa:	68e1      	ldr	r1, [r4, #12]
 8007dac:	f8d7 c000 	ldr.w	ip, [r7]
 8007db0:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007db4:	3108      	adds	r1, #8
 8007db6:	f8cd 8000 	str.w	r8, [sp]
 8007dba:	f003 f92f 	bl	800b01c <wait_flag_in_register_timeout>
 8007dbe:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007dc2:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f003 f96a 	bl	800b0a0 <is_oke>
 8007dcc:	2800      	cmp	r0, #0
 8007dce:	d050      	beq.n	8007e72 <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007dd0:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007dd4:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007dd6:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 8007dd8:	68c8      	ldr	r0, [r1, #12]
 8007dda:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0bf      	beq.n	8007d60 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d1c3      	bne.n	8007d6c <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 8007de4:	69a3      	ldr	r3, [r4, #24]
 8007de6:	3302      	adds	r3, #2
 8007de8:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 8007dea:	69e3      	ldr	r3, [r4, #28]
 8007dec:	3302      	adds	r3, #2
 8007dee:	61e3      	str	r3, [r4, #28]
 8007df0:	e7bc      	b.n	8007d6c <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007df2:	680b      	ldr	r3, [r1, #0]
 8007df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007df8:	600b      	str	r3, [r1, #0]
 8007dfa:	e7ab      	b.n	8007d54 <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007dfc:	4a2a      	ldr	r2, [pc, #168]	; (8007ea8 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007dfe:	492b      	ldr	r1, [pc, #172]	; (8007eac <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007e00:	482b      	ldr	r0, [pc, #172]	; (8007eb0 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e02:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e04:	f002 ffd4 	bl	800adb0 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007e08:	f240 1293 	movw	r2, #403	; 0x193
 8007e0c:	2103      	movs	r1, #3
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f003 f940 	bl	800b094 <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 8007e14:	4628      	mov	r0, r5
 8007e16:	b006      	add	sp, #24
 8007e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007e1c:	2364      	movs	r3, #100	; 0x64
 8007e1e:	3108      	adds	r1, #8
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	4630      	mov	r0, r6
 8007e24:	2300      	movs	r3, #0
 8007e26:	2280      	movs	r2, #128	; 0x80
 8007e28:	f003 f8f8 	bl	800b01c <wait_flag_in_register_timeout>
 8007e2c:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007e30:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007e34:	4628      	mov	r0, r5
 8007e36:	f003 f933 	bl	800b0a0 <is_oke>
 8007e3a:	b348      	cbz	r0, 8007e90 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007e3c:	68a3      	ldr	r3, [r4, #8]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	f013 0f0a 	tst.w	r3, #10
 8007e44:	d1e6      	bne.n	8007e14 <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 8007e46:	68e3      	ldr	r3, [r4, #12]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007e50:	9b05      	ldr	r3, [sp, #20]
 8007e52:	e7df      	b.n	8007e14 <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007e54:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e56:	4a14      	ldr	r2, [pc, #80]	; (8007ea8 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e58:	4917      	ldr	r1, [pc, #92]	; (8007eb8 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007e5a:	4815      	ldr	r0, [pc, #84]	; (8007eb0 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e5c:	f002 ffa8 	bl	800adb0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007e60:	4628      	mov	r0, r5
 8007e62:	f240 119f 	movw	r1, #415	; 0x19f
 8007e66:	f003 f919 	bl	800b09c <set_return_line>
}
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	b006      	add	sp, #24
 8007e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e74:	4a0c      	ldr	r2, [pc, #48]	; (8007ea8 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e76:	4910      	ldr	r1, [pc, #64]	; (8007eb8 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007e78:	480d      	ldr	r0, [pc, #52]	; (8007eb0 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e7a:	f002 ff99 	bl	800adb0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007e7e:	4628      	mov	r0, r5
 8007e80:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007e84:	f003 f90a 	bl	800b09c <set_return_line>
}
 8007e88:	4628      	mov	r0, r5
 8007e8a:	b006      	add	sp, #24
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007e90:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e92:	4a05      	ldr	r2, [pc, #20]	; (8007ea8 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e94:	4908      	ldr	r1, [pc, #32]	; (8007eb8 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007e96:	4806      	ldr	r0, [pc, #24]	; (8007eb0 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e98:	f002 ff8a 	bl	800adb0 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007e9c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f003 f8fb 	bl	800b09c <set_return_line>
		return ret;
 8007ea6:	e7b5      	b.n	8007e14 <_ZN3spi16transmit_receiveEmmm+0xf4>
 8007ea8:	08011564 	.word	0x08011564
 8007eac:	08011614 	.word	0x08011614
 8007eb0:	0801158c 	.word	0x0801158c
 8007eb4:	08011600 	.word	0x08011600
 8007eb8:	080115e0 	.word	0x080115e0

08007ebc <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007ec0:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007ec2:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007ec4:	68c9      	ldr	r1, [r1, #12]
 8007ec6:	6813      	ldr	r3, [r2, #0]
 8007ec8:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007eca:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007ecc:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007ece:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007ed0:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 8007ed2:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007ed4:	b088      	sub	sp, #32
	spi -> txcount++;
 8007ed6:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007ed8:	b960      	cbnz	r0, 8007ef4 <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 8007eda:	3201      	adds	r2, #1
 8007edc:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007ede:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00e      	beq.n	8007f02 <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	702a      	strb	r2, [r5, #0]
 8007eea:	606b      	str	r3, [r5, #4]
}
 8007eec:	4628      	mov	r0, r5
 8007eee:	b008      	add	sp, #32
 8007ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007ef4:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 8007ef6:	bf04      	itt	eq
 8007ef8:	3202      	addeq	r2, #2
 8007efa:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007efc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d1f0      	bne.n	8007ee4 <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007f02:	ae06      	add	r6, sp, #24
 8007f04:	2764      	movs	r7, #100	; 0x64
 8007f06:	4630      	mov	r0, r6
 8007f08:	3108      	adds	r1, #8
 8007f0a:	9700      	str	r7, [sp, #0]
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f003 f884 	bl	800b01c <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007f14:	4630      	mov	r0, r6
 8007f16:	f003 f8c3 	bl	800b0a0 <is_oke>
 8007f1a:	b1f8      	cbz	r0, 8007f5c <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007f1c:	68e1      	ldr	r1, [r4, #12]
 8007f1e:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007f20:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007f24:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f28:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	3108      	adds	r1, #8
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2280      	movs	r2, #128	; 0x80
 8007f32:	9700      	str	r7, [sp, #0]
 8007f34:	f003 f872 	bl	800b01c <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007f38:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007f3a:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007f42:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007f46:	d11c      	bne.n	8007f82 <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007f48:	f013 0f0a 	tst.w	r3, #10
 8007f4c:	d1ca      	bne.n	8007ee4 <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007f4e:	68e3      	ldr	r3, [r4, #12]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	9305      	str	r3, [sp, #20]
			(void)tmp;
 8007f58:	9b05      	ldr	r3, [sp, #20]
 8007f5a:	e7c3      	b.n	8007ee4 <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 8007f5c:	4630      	mov	r0, r6
 8007f5e:	f240 3129 	movw	r1, #809	; 0x329
 8007f62:	f003 f89b 	bl	800b09c <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007f66:	4919      	ldr	r1, [pc, #100]	; (8007fcc <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007f68:	4819      	ldr	r0, [pc, #100]	; (8007fd0 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007f6a:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007f6c:	4a1a      	ldr	r2, [pc, #104]	; (8007fd8 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007f6e:	f002 ff1f 	bl	800adb0 <LOG_ERROR>
			return ret;
 8007f72:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f76:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	b008      	add	sp, #32
 8007f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 8007f82:	4630      	mov	r0, r6
 8007f84:	f003 f88c 	bl	800b0a0 <is_oke>
 8007f88:	b110      	cbz	r0, 8007f90 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007f8a:	68a3      	ldr	r3, [r4, #8]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	e7db      	b.n	8007f48 <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007f90:	4b10      	ldr	r3, [pc, #64]	; (8007fd4 <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007f92:	4a11      	ldr	r2, [pc, #68]	; (8007fd8 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007f94:	490d      	ldr	r1, [pc, #52]	; (8007fcc <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007f96:	480e      	ldr	r0, [pc, #56]	; (8007fd0 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007f98:	f002 ff0a 	bl	800adb0 <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 8007f9c:	f44f 714e 	mov.w	r1, #824	; 0x338
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f003 f87b 	bl	800b09c <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007fa6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007faa:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007fac:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007fae:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 8007fb2:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007fb4:	078b      	lsls	r3, r1, #30
 8007fb6:	d503      	bpl.n	8007fc0 <_Z10SPI_Tx_ISRP3spi+0x104>
 8007fb8:	6813      	ldr	r3, [r2, #0]
 8007fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fbe:	6013      	str	r3, [r2, #0]
				return ret;
 8007fc0:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8007fc8:	e790      	b.n	8007eec <_Z10SPI_Tx_ISRP3spi+0x30>
 8007fca:	bf00      	nop
 8007fcc:	080115e0 	.word	0x080115e0
 8007fd0:	0801158c 	.word	0x0801158c
 8007fd4:	0801166c 	.word	0x0801166c
 8007fd8:	08011564 	.word	0x08011564

08007fdc <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007fe0:	68c9      	ldr	r1, [r1, #12]
 8007fe2:	69e3      	ldr	r3, [r4, #28]
 8007fe4:	68ca      	ldr	r2, [r1, #12]
 8007fe6:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007fe8:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 8007fea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007fec:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8007fee:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8007ff0:	b086      	sub	sp, #24
 8007ff2:	4605      	mov	r5, r0
	spi -> rxcount++;
 8007ff4:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007ff6:	b962      	cbnz	r2, 8008012 <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 8007ff8:	69e2      	ldr	r2, [r4, #28]
 8007ffa:	3201      	adds	r2, #1
 8007ffc:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8007ffe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008000:	4293      	cmp	r3, r2
 8008002:	d00e      	beq.n	8008022 <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8008004:	2201      	movs	r2, #1
 8008006:	2300      	movs	r3, #0
 8008008:	702a      	strb	r2, [r5, #0]
 800800a:	606b      	str	r3, [r5, #4]
}
 800800c:	4628      	mov	r0, r5
 800800e:	b006      	add	sp, #24
 8008010:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8008012:	2a01      	cmp	r2, #1
 8008014:	d1f3      	bne.n	8007ffe <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 8008016:	69e2      	ldr	r2, [r4, #28]
 8008018:	3202      	adds	r2, #2
 800801a:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 800801c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800801e:	4293      	cmp	r3, r2
 8008020:	d1f0      	bne.n	8008004 <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8008022:	684b      	ldr	r3, [r1, #4]
 8008024:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008028:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 800802a:	ae04      	add	r6, sp, #16
 800802c:	2364      	movs	r3, #100	; 0x64
 800802e:	9300      	str	r3, [sp, #0]
 8008030:	4630      	mov	r0, r6
 8008032:	3108      	adds	r1, #8
 8008034:	2300      	movs	r3, #0
 8008036:	2201      	movs	r2, #1
 8008038:	f002 fff0 	bl	800b01c <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 800803c:	4630      	mov	r0, r6
 800803e:	f003 f82f 	bl	800b0a0 <is_oke>
 8008042:	b158      	cbz	r0, 800805c <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8008044:	68a3      	ldr	r3, [r4, #8]
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	f013 0f0a 	tst.w	r3, #10
 800804c:	d1da      	bne.n	8008004 <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 800804e:	68e3      	ldr	r3, [r4, #12]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	9303      	str	r3, [sp, #12]
			(void)tmp;
 8008058:	9b03      	ldr	r3, [sp, #12]
 800805a:	e7d3      	b.n	8008004 <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 800805c:	4b07      	ldr	r3, [pc, #28]	; (800807c <_Z10SPI_Rx_ISRP3spi+0xa0>)
 800805e:	4a08      	ldr	r2, [pc, #32]	; (8008080 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 8008060:	4908      	ldr	r1, [pc, #32]	; (8008084 <_Z10SPI_Rx_ISRP3spi+0xa8>)
 8008062:	4809      	ldr	r0, [pc, #36]	; (8008088 <_Z10SPI_Rx_ISRP3spi+0xac>)
 8008064:	f002 fea4 	bl	800adb0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8008068:	f240 315d 	movw	r1, #861	; 0x35d
 800806c:	4630      	mov	r0, r6
 800806e:	f003 f815 	bl	800b09c <set_return_line>
			return ret;
 8008072:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008076:	e885 0003 	stmia.w	r5, {r0, r1}
 800807a:	e7c7      	b.n	800800c <_Z10SPI_Rx_ISRP3spi+0x30>
 800807c:	08011678 	.word	0x08011678
 8008080:	08011564 	.word	0x08011564
 8008084:	080115e0 	.word	0x080115e0
 8008088:	0801158c 	.word	0x0801158c

0800808c <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 800808c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800808e:	4c22      	ldr	r4, [pc, #136]	; (8008118 <SPI1_IRQHandler+0x8c>)
 8008090:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 8008092:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008098:	689a      	ldr	r2, [r3, #8]
 800809a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800809c:	9a00      	ldr	r2, [sp, #0]
 800809e:	0611      	lsls	r1, r2, #24
 80080a0:	d502      	bpl.n	80080a8 <SPI1_IRQHandler+0x1c>
 80080a2:	9a01      	ldr	r2, [sp, #4]
 80080a4:	0792      	lsls	r2, r2, #30
 80080a6:	d41e      	bmi.n	80080e6 <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80080a8:	9a00      	ldr	r2, [sp, #0]
 80080aa:	0650      	lsls	r0, r2, #25
 80080ac:	d502      	bpl.n	80080b4 <SPI1_IRQHandler+0x28>
 80080ae:	9a01      	ldr	r2, [sp, #4]
 80080b0:	07d1      	lsls	r1, r2, #31
 80080b2:	d424      	bmi.n	80080fe <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80080b4:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80080b6:	0652      	lsls	r2, r2, #25
 80080b8:	d40a      	bmi.n	80080d0 <SPI1_IRQHandler+0x44>
 80080ba:	9801      	ldr	r0, [sp, #4]
 80080bc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80080c0:	d106      	bne.n	80080d0 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080c2:	6963      	ldr	r3, [r4, #20]
 80080c4:	b16b      	cbz	r3, 80080e2 <SPI1_IRQHandler+0x56>
 80080c6:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 80080c8:	b004      	add	sp, #16
 80080ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080ce:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80080d8:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080da:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80080dc:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1f1      	bne.n	80080c6 <SPI1_IRQHandler+0x3a>
}
 80080e2:	b004      	add	sp, #16
 80080e4:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80080e6:	4621      	mov	r1, r4
 80080e8:	a802      	add	r0, sp, #8
 80080ea:	f7ff fee7 	bl	8007ebc <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80080ee:	a802      	add	r0, sp, #8
 80080f0:	f002 ffd6 	bl	800b0a0 <is_oke>
			event = SPI_EVENT_ERROR;
 80080f4:	2800      	cmp	r0, #0
 80080f6:	bf14      	ite	ne
 80080f8:	2001      	movne	r0, #1
 80080fa:	2003      	moveq	r0, #3
 80080fc:	e7e1      	b.n	80080c2 <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80080fe:	4906      	ldr	r1, [pc, #24]	; (8008118 <SPI1_IRQHandler+0x8c>)
 8008100:	a802      	add	r0, sp, #8
 8008102:	f7ff ff6b 	bl	8007fdc <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008106:	a802      	add	r0, sp, #8
 8008108:	f002 ffca 	bl	800b0a0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800810c:	2800      	cmp	r0, #0
 800810e:	bf0c      	ite	eq
 8008110:	2003      	moveq	r0, #3
 8008112:	2002      	movne	r0, #2
 8008114:	e7d5      	b.n	80080c2 <SPI1_IRQHandler+0x36>
 8008116:	bf00      	nop
 8008118:	2000b628 	.word	0x2000b628

0800811c <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 800811c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800811e:	4c22      	ldr	r4, [pc, #136]	; (80081a8 <SPI2_IRQHandler+0x8c>)
 8008120:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 8008122:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008124:	685a      	ldr	r2, [r3, #4]
 8008126:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800812c:	9a00      	ldr	r2, [sp, #0]
 800812e:	0611      	lsls	r1, r2, #24
 8008130:	d502      	bpl.n	8008138 <SPI2_IRQHandler+0x1c>
 8008132:	9a01      	ldr	r2, [sp, #4]
 8008134:	0792      	lsls	r2, r2, #30
 8008136:	d41e      	bmi.n	8008176 <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008138:	9a00      	ldr	r2, [sp, #0]
 800813a:	0650      	lsls	r0, r2, #25
 800813c:	d502      	bpl.n	8008144 <SPI2_IRQHandler+0x28>
 800813e:	9a01      	ldr	r2, [sp, #4]
 8008140:	07d1      	lsls	r1, r2, #31
 8008142:	d424      	bmi.n	800818e <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008144:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008146:	0652      	lsls	r2, r2, #25
 8008148:	d40a      	bmi.n	8008160 <SPI2_IRQHandler+0x44>
 800814a:	9801      	ldr	r0, [sp, #4]
 800814c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008150:	d106      	bne.n	8008160 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008152:	6963      	ldr	r3, [r4, #20]
 8008154:	b16b      	cbz	r3, 8008172 <SPI2_IRQHandler+0x56>
 8008156:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 8008158:	b004      	add	sp, #16
 800815a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800815e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008168:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800816a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800816c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f1      	bne.n	8008156 <SPI2_IRQHandler+0x3a>
}
 8008172:	b004      	add	sp, #16
 8008174:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008176:	4621      	mov	r1, r4
 8008178:	a802      	add	r0, sp, #8
 800817a:	f7ff fe9f 	bl	8007ebc <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800817e:	a802      	add	r0, sp, #8
 8008180:	f002 ff8e 	bl	800b0a0 <is_oke>
			event = SPI_EVENT_ERROR;
 8008184:	2800      	cmp	r0, #0
 8008186:	bf14      	ite	ne
 8008188:	2001      	movne	r0, #1
 800818a:	2003      	moveq	r0, #3
 800818c:	e7e1      	b.n	8008152 <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800818e:	4906      	ldr	r1, [pc, #24]	; (80081a8 <SPI2_IRQHandler+0x8c>)
 8008190:	a802      	add	r0, sp, #8
 8008192:	f7ff ff23 	bl	8007fdc <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008196:	a802      	add	r0, sp, #8
 8008198:	f002 ff82 	bl	800b0a0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800819c:	2800      	cmp	r0, #0
 800819e:	bf0c      	ite	eq
 80081a0:	2003      	moveq	r0, #3
 80081a2:	2002      	movne	r0, #2
 80081a4:	e7d5      	b.n	8008152 <SPI2_IRQHandler+0x36>
 80081a6:	bf00      	nop
 80081a8:	2000b65c 	.word	0x2000b65c

080081ac <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 80081ac:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081ae:	4c22      	ldr	r4, [pc, #136]	; (8008238 <SPI3_IRQHandler+0x8c>)
 80081b0:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 80081b2:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80081bc:	9a00      	ldr	r2, [sp, #0]
 80081be:	0611      	lsls	r1, r2, #24
 80081c0:	d502      	bpl.n	80081c8 <SPI3_IRQHandler+0x1c>
 80081c2:	9a01      	ldr	r2, [sp, #4]
 80081c4:	0792      	lsls	r2, r2, #30
 80081c6:	d41e      	bmi.n	8008206 <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80081c8:	9a00      	ldr	r2, [sp, #0]
 80081ca:	0650      	lsls	r0, r2, #25
 80081cc:	d502      	bpl.n	80081d4 <SPI3_IRQHandler+0x28>
 80081ce:	9a01      	ldr	r2, [sp, #4]
 80081d0:	07d1      	lsls	r1, r2, #31
 80081d2:	d424      	bmi.n	800821e <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80081d4:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80081d6:	0652      	lsls	r2, r2, #25
 80081d8:	d40a      	bmi.n	80081f0 <SPI3_IRQHandler+0x44>
 80081da:	9801      	ldr	r0, [sp, #4]
 80081dc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80081e0:	d106      	bne.n	80081f0 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081e2:	6963      	ldr	r3, [r4, #20]
 80081e4:	b16b      	cbz	r3, 8008202 <SPI3_IRQHandler+0x56>
 80081e6:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 80081e8:	b004      	add	sp, #16
 80081ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081ee:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80081f8:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081fa:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80081fc:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1f1      	bne.n	80081e6 <SPI3_IRQHandler+0x3a>
}
 8008202:	b004      	add	sp, #16
 8008204:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008206:	4621      	mov	r1, r4
 8008208:	a802      	add	r0, sp, #8
 800820a:	f7ff fe57 	bl	8007ebc <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800820e:	a802      	add	r0, sp, #8
 8008210:	f002 ff46 	bl	800b0a0 <is_oke>
			event = SPI_EVENT_ERROR;
 8008214:	2800      	cmp	r0, #0
 8008216:	bf14      	ite	ne
 8008218:	2001      	movne	r0, #1
 800821a:	2003      	moveq	r0, #3
 800821c:	e7e1      	b.n	80081e2 <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800821e:	4906      	ldr	r1, [pc, #24]	; (8008238 <SPI3_IRQHandler+0x8c>)
 8008220:	a802      	add	r0, sp, #8
 8008222:	f7ff fedb 	bl	8007fdc <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008226:	a802      	add	r0, sp, #8
 8008228:	f002 ff3a 	bl	800b0a0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800822c:	2800      	cmp	r0, #0
 800822e:	bf0c      	ite	eq
 8008230:	2003      	moveq	r0, #3
 8008232:	2002      	movne	r0, #2
 8008234:	e7d5      	b.n	80081e2 <SPI3_IRQHandler+0x36>
 8008236:	bf00      	nop
 8008238:	2000b690 	.word	0x2000b690

0800823c <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 800823c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800823e:	4c22      	ldr	r4, [pc, #136]	; (80082c8 <SPI4_IRQHandler+0x8c>)
 8008240:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 8008242:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800824c:	9a00      	ldr	r2, [sp, #0]
 800824e:	0611      	lsls	r1, r2, #24
 8008250:	d502      	bpl.n	8008258 <SPI4_IRQHandler+0x1c>
 8008252:	9a01      	ldr	r2, [sp, #4]
 8008254:	0792      	lsls	r2, r2, #30
 8008256:	d41e      	bmi.n	8008296 <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008258:	9a00      	ldr	r2, [sp, #0]
 800825a:	0650      	lsls	r0, r2, #25
 800825c:	d502      	bpl.n	8008264 <SPI4_IRQHandler+0x28>
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	07d1      	lsls	r1, r2, #31
 8008262:	d424      	bmi.n	80082ae <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008264:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008266:	0652      	lsls	r2, r2, #25
 8008268:	d40a      	bmi.n	8008280 <SPI4_IRQHandler+0x44>
 800826a:	9801      	ldr	r0, [sp, #4]
 800826c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008270:	d106      	bne.n	8008280 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008272:	6963      	ldr	r3, [r4, #20]
 8008274:	b16b      	cbz	r3, 8008292 <SPI4_IRQHandler+0x56>
 8008276:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 8008278:	b004      	add	sp, #16
 800827a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800827e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008280:	68da      	ldr	r2, [r3, #12]
 8008282:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008288:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800828a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800828c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f1      	bne.n	8008276 <SPI4_IRQHandler+0x3a>
}
 8008292:	b004      	add	sp, #16
 8008294:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008296:	4621      	mov	r1, r4
 8008298:	a802      	add	r0, sp, #8
 800829a:	f7ff fe0f 	bl	8007ebc <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800829e:	a802      	add	r0, sp, #8
 80082a0:	f002 fefe 	bl	800b0a0 <is_oke>
			event = SPI_EVENT_ERROR;
 80082a4:	2800      	cmp	r0, #0
 80082a6:	bf14      	ite	ne
 80082a8:	2001      	movne	r0, #1
 80082aa:	2003      	moveq	r0, #3
 80082ac:	e7e1      	b.n	8008272 <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80082ae:	4906      	ldr	r1, [pc, #24]	; (80082c8 <SPI4_IRQHandler+0x8c>)
 80082b0:	a802      	add	r0, sp, #8
 80082b2:	f7ff fe93 	bl	8007fdc <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80082b6:	a802      	add	r0, sp, #8
 80082b8:	f002 fef2 	bl	800b0a0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80082bc:	2800      	cmp	r0, #0
 80082be:	bf0c      	ite	eq
 80082c0:	2003      	moveq	r0, #3
 80082c2:	2002      	movne	r0, #2
 80082c4:	e7d5      	b.n	8008272 <SPI4_IRQHandler+0x36>
 80082c6:	bf00      	nop
 80082c8:	2000b6c4 	.word	0x2000b6c4

080082cc <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 80082cc:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082ce:	4c22      	ldr	r4, [pc, #136]	; (8008358 <SPI5_IRQHandler+0x8c>)
 80082d0:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 80082d2:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80082d8:	689a      	ldr	r2, [r3, #8]
 80082da:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80082dc:	9a00      	ldr	r2, [sp, #0]
 80082de:	0611      	lsls	r1, r2, #24
 80082e0:	d502      	bpl.n	80082e8 <SPI5_IRQHandler+0x1c>
 80082e2:	9a01      	ldr	r2, [sp, #4]
 80082e4:	0792      	lsls	r2, r2, #30
 80082e6:	d41e      	bmi.n	8008326 <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80082e8:	9a00      	ldr	r2, [sp, #0]
 80082ea:	0650      	lsls	r0, r2, #25
 80082ec:	d502      	bpl.n	80082f4 <SPI5_IRQHandler+0x28>
 80082ee:	9a01      	ldr	r2, [sp, #4]
 80082f0:	07d1      	lsls	r1, r2, #31
 80082f2:	d424      	bmi.n	800833e <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80082f4:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80082f6:	0652      	lsls	r2, r2, #25
 80082f8:	d40a      	bmi.n	8008310 <SPI5_IRQHandler+0x44>
 80082fa:	9801      	ldr	r0, [sp, #4]
 80082fc:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008300:	d106      	bne.n	8008310 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008302:	6963      	ldr	r3, [r4, #20]
 8008304:	b16b      	cbz	r3, 8008322 <SPI5_IRQHandler+0x56>
 8008306:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 8008308:	b004      	add	sp, #16
 800830a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800830e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008310:	68da      	ldr	r2, [r3, #12]
 8008312:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008318:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800831a:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 800831c:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f1      	bne.n	8008306 <SPI5_IRQHandler+0x3a>
}
 8008322:	b004      	add	sp, #16
 8008324:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8008326:	4621      	mov	r1, r4
 8008328:	a802      	add	r0, sp, #8
 800832a:	f7ff fdc7 	bl	8007ebc <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 800832e:	a802      	add	r0, sp, #8
 8008330:	f002 feb6 	bl	800b0a0 <is_oke>
			event = SPI_EVENT_ERROR;
 8008334:	2800      	cmp	r0, #0
 8008336:	bf14      	ite	ne
 8008338:	2001      	movne	r0, #1
 800833a:	2003      	moveq	r0, #3
 800833c:	e7e1      	b.n	8008302 <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 800833e:	4906      	ldr	r1, [pc, #24]	; (8008358 <SPI5_IRQHandler+0x8c>)
 8008340:	a802      	add	r0, sp, #8
 8008342:	f7ff fe4b 	bl	8007fdc <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8008346:	a802      	add	r0, sp, #8
 8008348:	f002 feaa 	bl	800b0a0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 800834c:	2800      	cmp	r0, #0
 800834e:	bf0c      	ite	eq
 8008350:	2003      	moveq	r0, #3
 8008352:	2002      	movne	r0, #2
 8008354:	e7d5      	b.n	8008302 <SPI5_IRQHandler+0x36>
 8008356:	bf00      	nop
 8008358:	2000b6f8 	.word	0x2000b6f8

0800835c <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 800835c:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800835e:	4c22      	ldr	r4, [pc, #136]	; (80083e8 <SPI6_IRQHandler+0x8c>)
 8008360:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 8008362:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008364:	685a      	ldr	r2, [r3, #4]
 8008366:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008368:	689a      	ldr	r2, [r3, #8]
 800836a:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 800836c:	9a00      	ldr	r2, [sp, #0]
 800836e:	0611      	lsls	r1, r2, #24
 8008370:	d502      	bpl.n	8008378 <SPI6_IRQHandler+0x1c>
 8008372:	9a01      	ldr	r2, [sp, #4]
 8008374:	0792      	lsls	r2, r2, #30
 8008376:	d41e      	bmi.n	80083b6 <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008378:	9a00      	ldr	r2, [sp, #0]
 800837a:	0650      	lsls	r0, r2, #25
 800837c:	d502      	bpl.n	8008384 <SPI6_IRQHandler+0x28>
 800837e:	9a01      	ldr	r2, [sp, #4]
 8008380:	07d1      	lsls	r1, r2, #31
 8008382:	d424      	bmi.n	80083ce <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 8008384:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 8008386:	0652      	lsls	r2, r2, #25
 8008388:	d40a      	bmi.n	80083a0 <SPI6_IRQHandler+0x44>
 800838a:	9801      	ldr	r0, [sp, #4]
 800838c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008390:	d106      	bne.n	80083a0 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008392:	6963      	ldr	r3, [r4, #20]
 8008394:	b16b      	cbz	r3, 80083b2 <SPI6_IRQHandler+0x56>
 8008396:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 8008398:	b004      	add	sp, #16
 800839a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800839e:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80083a0:	68da      	ldr	r2, [r3, #12]
 80083a2:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80083a8:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80083aa:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80083ac:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1f1      	bne.n	8008396 <SPI6_IRQHandler+0x3a>
}
 80083b2:	b004      	add	sp, #16
 80083b4:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80083b6:	4621      	mov	r1, r4
 80083b8:	a802      	add	r0, sp, #8
 80083ba:	f7ff fd7f 	bl	8007ebc <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80083be:	a802      	add	r0, sp, #8
 80083c0:	f002 fe6e 	bl	800b0a0 <is_oke>
			event = SPI_EVENT_ERROR;
 80083c4:	2800      	cmp	r0, #0
 80083c6:	bf14      	ite	ne
 80083c8:	2001      	movne	r0, #1
 80083ca:	2003      	moveq	r0, #3
 80083cc:	e7e1      	b.n	8008392 <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80083ce:	4906      	ldr	r1, [pc, #24]	; (80083e8 <SPI6_IRQHandler+0x8c>)
 80083d0:	a802      	add	r0, sp, #8
 80083d2:	f7ff fe03 	bl	8007fdc <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80083d6:	a802      	add	r0, sp, #8
 80083d8:	f002 fe62 	bl	800b0a0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80083dc:	2800      	cmp	r0, #0
 80083de:	bf0c      	ite	eq
 80083e0:	2003      	moveq	r0, #3
 80083e2:	2002      	movne	r0, #2
 80083e4:	e7d5      	b.n	8008392 <SPI6_IRQHandler+0x36>
 80083e6:	bf00      	nop
 80083e8:	2000b72c 	.word	0x2000b72c

080083ec <_GLOBAL__sub_I_cc>:
}
 80083ec:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 80083ee:	4e2c      	ldr	r6, [pc, #176]	; (80084a0 <_GLOBAL__sub_I_cc+0xb4>)
 80083f0:	4c2c      	ldr	r4, [pc, #176]	; (80084a4 <_GLOBAL__sub_I_cc+0xb8>)
 80083f2:	4d2d      	ldr	r5, [pc, #180]	; (80084a8 <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 80083f4:	4f2d      	ldr	r7, [pc, #180]	; (80084ac <_GLOBAL__sub_I_cc+0xc0>)
 80083f6:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 80083f8:	2300      	movs	r3, #0
 80083fa:	e9c6 3300 	strd	r3, r3, [r6]
 80083fe:	e9c6 3304 	strd	r3, r3, [r6, #16]
 8008402:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8008406:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800840a:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 800840e:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 8008410:	4e27      	ldr	r6, [pc, #156]	; (80084b0 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 8008412:	60ab      	str	r3, [r5, #8]
 8008414:	e9c5 3300 	strd	r3, r3, [r5]
 8008418:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800841c:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8008420:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8008424:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8008428:	e9c4 3300 	strd	r3, r3, [r4]
 800842c:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8008430:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8008434:	60a3      	str	r3, [r4, #8]
 8008436:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 8008438:	60ee      	str	r6, [r5, #12]
 800843a:	4d1e      	ldr	r5, [pc, #120]	; (80084b4 <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 800843c:	481e      	ldr	r0, [pc, #120]	; (80084b8 <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 800843e:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 8008440:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 8008444:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 8008446:	4c1d      	ldr	r4, [pc, #116]	; (80084bc <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 8008448:	491d      	ldr	r1, [pc, #116]	; (80084c0 <_GLOBAL__sub_I_cc+0xd4>)
 800844a:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 800844c:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 800844e:	e9c0 3300 	strd	r3, r3, [r0]
 8008452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008456:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800845a:	e9c0 3308 	strd	r3, r3, [r0, #32]
 800845e:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8008462:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 8008464:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008468:	4817      	ldr	r0, [pc, #92]	; (80084c8 <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 800846a:	608b      	str	r3, [r1, #8]
 800846c:	e9c1 3300 	strd	r3, r3, [r1]
 8008470:	e9c1 3304 	strd	r3, r3, [r1, #16]
 8008474:	e9c1 3306 	strd	r3, r3, [r1, #24]
 8008478:	e9c1 3308 	strd	r3, r3, [r1, #32]
 800847c:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 8008480:	e9c2 3300 	strd	r3, r3, [r2]
 8008484:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8008488:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 800848a:	60cc      	str	r4, [r1, #12]
}
 800848c:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 800848e:	e9c2 3306 	strd	r3, r3, [r2, #24]
 8008492:	e9c2 3308 	strd	r3, r3, [r2, #32]
 8008496:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 800849a:	60d0      	str	r0, [r2, #12]
}
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	2000b628 	.word	0x2000b628
 80084a4:	2000b690 	.word	0x2000b690
 80084a8:	2000b65c 	.word	0x2000b65c
 80084ac:	40013000 	.word	0x40013000
 80084b0:	40003800 	.word	0x40003800
 80084b4:	40003c00 	.word	0x40003c00
 80084b8:	2000b6c4 	.word	0x2000b6c4
 80084bc:	40013400 	.word	0x40013400
 80084c0:	2000b6f8 	.word	0x2000b6f8
 80084c4:	2000b72c 	.word	0x2000b72c
 80084c8:	40015400 	.word	0x40015400

080084cc <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 80084cc:	4b01      	ldr	r3, [pc, #4]	; (80084d4 <systick_get_tick+0x8>)
 80084ce:	6818      	ldr	r0, [r3, #0]
}
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	2000b760 	.word	0x2000b760

080084d8 <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 80084d8:	4a05      	ldr	r2, [pc, #20]	; (80084f0 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 80084da:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80084de:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 80084e0:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 80084e2:	bf38      	it	cc
 80084e4:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 80084e6:	6813      	ldr	r3, [r2, #0]
 80084e8:	1a5b      	subs	r3, r3, r1
 80084ea:	4283      	cmp	r3, r0
 80084ec:	d3fb      	bcc.n	80084e6 <systick_delay_ms+0xe>
}
 80084ee:	4770      	bx	lr
 80084f0:	2000b760 	.word	0x2000b760

080084f4 <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 80084f4:	4b0d      	ldr	r3, [pc, #52]	; (800852c <systick_init+0x38>)
 80084f6:	4a0e      	ldr	r2, [pc, #56]	; (8008530 <systick_init+0x3c>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	fba2 2303 	umull	r2, r3, r2, r3
 80084fe:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008500:	3b01      	subs	r3, #1
 8008502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 8008506:	4601      	mov	r1, r0
 8008508:	d20b      	bcs.n	8008522 <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800850a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800850e:	4809      	ldr	r0, [pc, #36]	; (8008534 <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008510:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008512:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8008516:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800851a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800851c:	2000      	movs	r0, #0
 800851e:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008520:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 8008522:	2200      	movs	r2, #0
 8008524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008528:	f002 be50 	b.w	800b1cc <NVIC_Set_Priority>
 800852c:	20000000 	.word	0x20000000
 8008530:	10624dd3 	.word	0x10624dd3
 8008534:	e000ed00 	.word	0xe000ed00

08008538 <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 8008538:	4b01      	ldr	r3, [pc, #4]	; (8008540 <get_tick+0x8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4718      	bx	r3
 800853e:	bf00      	nop
 8008540:	20000084 	.word	0x20000084

08008544 <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <delay_ms+0x8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4718      	bx	r3
 800854a:	bf00      	nop
 800854c:	20000080 	.word	0x20000080

08008550 <app_systick_process>:
	sdk_tick++;
 8008550:	4a17      	ldr	r2, [pc, #92]	; (80085b0 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 8008552:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 8008554:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 8008556:	4c17      	ldr	r4, [pc, #92]	; (80085b4 <app_systick_process+0x64>)
	sdk_tick++;
 8008558:	3301      	adds	r3, #1
 800855a:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 800855c:	6823      	ldr	r3, [r4, #0]
 800855e:	3301      	adds	r3, #1
 8008560:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008568:	d000      	beq.n	800856c <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 800856a:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 800856c:	4d12      	ldr	r5, [pc, #72]	; (80085b8 <app_systick_process+0x68>)
 800856e:	ed95 7a00 	vldr	s14, [r5]
 8008572:	edd4 7a00 	vldr	s15, [r4]
 8008576:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8008582:	ee17 0a90 	vmov	r0, s15
 8008586:	f7f7 ffff 	bl	8000588 <__aeabi_f2d>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	2000      	movs	r0, #0
 8008590:	490a      	ldr	r1, [pc, #40]	; (80085bc <app_systick_process+0x6c>)
 8008592:	f7f7 fe99 	bl	80002c8 <__aeabi_dsub>
 8008596:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <app_systick_process+0x70>)
 8008598:	2200      	movs	r2, #0
 800859a:	f7f8 f84d 	bl	8000638 <__aeabi_dmul>
 800859e:	f7f8 fb43 	bl	8000c28 <__aeabi_d2f>
 80085a2:	4a08      	ldr	r2, [pc, #32]	; (80085c4 <app_systick_process+0x74>)
			systick_total_ticks = 0;
 80085a4:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 80085a6:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 80085a8:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 80085aa:	602b      	str	r3, [r5, #0]
	}
 80085ac:	bd38      	pop	{r3, r4, r5, pc}
 80085ae:	bf00      	nop
 80085b0:	2000b760 	.word	0x2000b760
 80085b4:	2000ba10 	.word	0x2000ba10
 80085b8:	2000ba0c 	.word	0x2000ba0c
 80085bc:	3ff00000 	.word	0x3ff00000
 80085c0:	40590000 	.word	0x40590000
 80085c4:	2000ba04 	.word	0x2000ba04

080085c8 <__NVIC_SystemReset>:
 80085c8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80085cc:	4905      	ldr	r1, [pc, #20]	; (80085e4 <__NVIC_SystemReset+0x1c>)
 80085ce:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <__NVIC_SystemReset+0x20>)
 80085d0:	68ca      	ldr	r2, [r1, #12]
 80085d2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80085d6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80085d8:	60cb      	str	r3, [r1, #12]
 80085da:	f3bf 8f4f 	dsb	sy
    __NOP();
 80085de:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80085e0:	e7fd      	b.n	80085de <__NVIC_SystemReset+0x16>
 80085e2:	bf00      	nop
 80085e4:	e000ed00 	.word	0xe000ed00
 80085e8:	05fa0004 	.word	0x05fa0004

080085ec <_ZN3tim4initEP12tim_config_t>:
tim::tim(TIM_TypeDef *Timer){
	_tim = Timer;
}

/* TIM Basic */
stm_ret_t tim::init(tim_config_t *conf){
 80085ec:	b470      	push	{r4, r5, r6}
	stm_ret_t ret;

	_conf = conf;

#if defined(TIM1)
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80085ee:	684b      	ldr	r3, [r1, #4]
 80085f0:	4c7d      	ldr	r4, [pc, #500]	; (80087e8 <_ZN3tim4initEP12tim_config_t+0x1fc>)
	_conf = conf;
 80085f2:	610a      	str	r2, [r1, #16]
	stm_ret_t ret;
 80085f4:	2501      	movs	r5, #1
 80085f6:	7005      	strb	r5, [r0, #0]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 80085f8:	42a3      	cmp	r3, r4
	stm_ret_t ret;
 80085fa:	f04f 0500 	mov.w	r5, #0
 80085fe:	6045      	str	r5, [r0, #4]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008600:	f000 8087 	beq.w	8008712 <_ZN3tim4initEP12tim_config_t+0x126>
#endif
#if defined(TIM2)
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008608:	d033      	beq.n	8008672 <_ZN3tim4initEP12tim_config_t+0x86>
#endif
#if defined(TIM3)
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 800860a:	4c78      	ldr	r4, [pc, #480]	; (80087ec <_ZN3tim4initEP12tim_config_t+0x200>)
 800860c:	42a3      	cmp	r3, r4
 800860e:	f000 808f 	beq.w	8008730 <_ZN3tim4initEP12tim_config_t+0x144>
#endif
#if defined(TIM4)
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008612:	4c77      	ldr	r4, [pc, #476]	; (80087f0 <_ZN3tim4initEP12tim_config_t+0x204>)
 8008614:	42a3      	cmp	r3, r4
 8008616:	f000 8095 	beq.w	8008744 <_ZN3tim4initEP12tim_config_t+0x158>
#endif
#if defined(TIM5)
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800861a:	4c76      	ldr	r4, [pc, #472]	; (80087f4 <_ZN3tim4initEP12tim_config_t+0x208>)
 800861c:	42a3      	cmp	r3, r4
 800861e:	d07e      	beq.n	800871e <_ZN3tim4initEP12tim_config_t+0x132>
#endif
#if defined(TIM6)
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8008620:	4c75      	ldr	r4, [pc, #468]	; (80087f8 <_ZN3tim4initEP12tim_config_t+0x20c>)
 8008622:	42a3      	cmp	r3, r4
 8008624:	f000 8094 	beq.w	8008750 <_ZN3tim4initEP12tim_config_t+0x164>
#endif
#if defined(TIM7)
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8008628:	4c74      	ldr	r4, [pc, #464]	; (80087fc <_ZN3tim4initEP12tim_config_t+0x210>)
 800862a:	42a3      	cmp	r3, r4
 800862c:	f000 80a2 	beq.w	8008774 <_ZN3tim4initEP12tim_config_t+0x188>
#endif
#if defined(TIM8)
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8008630:	4c73      	ldr	r4, [pc, #460]	; (8008800 <_ZN3tim4initEP12tim_config_t+0x214>)
 8008632:	42a3      	cmp	r3, r4
 8008634:	f000 80a7 	beq.w	8008786 <_ZN3tim4initEP12tim_config_t+0x19a>
#endif
#if defined(TIM9)
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 8008638:	4c72      	ldr	r4, [pc, #456]	; (8008804 <_ZN3tim4initEP12tim_config_t+0x218>)
 800863a:	42a3      	cmp	r3, r4
 800863c:	f000 808e 	beq.w	800875c <_ZN3tim4initEP12tim_config_t+0x170>
#endif
#if defined(TIM10)
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8008640:	4c71      	ldr	r4, [pc, #452]	; (8008808 <_ZN3tim4initEP12tim_config_t+0x21c>)
 8008642:	42a3      	cmp	r3, r4
 8008644:	f000 80a8 	beq.w	8008798 <_ZN3tim4initEP12tim_config_t+0x1ac>
#endif
#if defined(TIM11)
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8008648:	4c70      	ldr	r4, [pc, #448]	; (800880c <_ZN3tim4initEP12tim_config_t+0x220>)
 800864a:	42a3      	cmp	r3, r4
 800864c:	f000 80b0 	beq.w	80087b0 <_ZN3tim4initEP12tim_config_t+0x1c4>
#endif
#if defined(TIM12)
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8008650:	4c6f      	ldr	r4, [pc, #444]	; (8008810 <_ZN3tim4initEP12tim_config_t+0x224>)
 8008652:	42a3      	cmp	r3, r4
 8008654:	f000 80b5 	beq.w	80087c2 <_ZN3tim4initEP12tim_config_t+0x1d6>
#endif
#if defined(TIM13)
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8008658:	4c6e      	ldr	r4, [pc, #440]	; (8008814 <_ZN3tim4initEP12tim_config_t+0x228>)
 800865a:	42a3      	cmp	r3, r4
 800865c:	f000 80b7 	beq.w	80087ce <_ZN3tim4initEP12tim_config_t+0x1e2>
#endif
#if defined(TIM14)
	else if(_tim == TIM14) RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 8008660:	4c6d      	ldr	r4, [pc, #436]	; (8008818 <_ZN3tim4initEP12tim_config_t+0x22c>)
 8008662:	42a3      	cmp	r3, r4
 8008664:	d10a      	bne.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
 8008666:	4d6d      	ldr	r5, [pc, #436]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008668:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 800866a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800866e:	642c      	str	r4, [r5, #64]	; 0x40
 8008670:	e004      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8008672:	4d6a      	ldr	r5, [pc, #424]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008674:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008676:	f044 0401 	orr.w	r4, r4, #1
 800867a:	642c      	str	r4, [r5, #64]	; 0x40
#endif

	/* BASIC TIMER */
	_tim -> CR1 = 0U;
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 800867c:	7a94      	ldrb	r4, [r2, #10]
 800867e:	7a16      	ldrb	r6, [r2, #8]
 8008680:	01e4      	lsls	r4, r4, #7
	_tim -> CR1 = 0U;
 8008682:	2500      	movs	r5, #0
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8008684:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8008688:	7a56      	ldrb	r6, [r2, #9]
	_tim -> CR1 = 0U;
 800868a:	601d      	str	r5, [r3, #0]
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 800868c:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 8008690:	681e      	ldr	r6, [r3, #0]
 8008692:	4334      	orrs	r4, r6
 8008694:	601c      	str	r4, [r3, #0]

	_tim -> ARR = 0U;
	_tim -> ARR = _conf -> reload - 1;
 8008696:	6854      	ldr	r4, [r2, #4]
	_tim -> ARR = 0U;
 8008698:	62dd      	str	r5, [r3, #44]	; 0x2c
	_tim -> ARR = _conf -> reload - 1;
 800869a:	3c01      	subs	r4, #1
 800869c:	62dc      	str	r4, [r3, #44]	; 0x2c
	_tim -> PSC = 0U;
	_tim -> PSC = _conf -> prescaler - 1;
 800869e:	6814      	ldr	r4, [r2, #0]
	_tim -> PSC = 0U;
 80086a0:	629d      	str	r5, [r3, #40]	; 0x28

	_tim -> EGR = TIM_EGR_UG;

	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 80086a2:	7ad5      	ldrb	r5, [r2, #11]
	_tim -> EGR = TIM_EGR_UG;
 80086a4:	2201      	movs	r2, #1
	_tim -> PSC = _conf -> prescaler - 1;
 80086a6:	3c01      	subs	r4, #1
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 80086a8:	4295      	cmp	r5, r2
	_tim -> PSC = _conf -> prescaler - 1;
 80086aa:	629c      	str	r4, [r3, #40]	; 0x28
	_tim -> EGR = TIM_EGR_UG;
 80086ac:	615a      	str	r2, [r3, #20]
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 80086ae:	d001      	beq.n	80086b4 <_ZN3tim4initEP12tim_config_t+0xc8>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
#endif
	}

	return ret;
}
 80086b0:	bc70      	pop	{r4, r5, r6}
 80086b2:	4770      	bx	lr
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 80086b4:	4a4c      	ldr	r2, [pc, #304]	; (80087e8 <_ZN3tim4initEP12tim_config_t+0x1fc>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d040      	beq.n	800873c <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 80086ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086be:	d034      	beq.n	800872a <_ZN3tim4initEP12tim_config_t+0x13e>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 80086c0:	4a4a      	ldr	r2, [pc, #296]	; (80087ec <_ZN3tim4initEP12tim_config_t+0x200>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d053      	beq.n	800876e <_ZN3tim4initEP12tim_config_t+0x182>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 80086c6:	4a4a      	ldr	r2, [pc, #296]	; (80087f0 <_ZN3tim4initEP12tim_config_t+0x204>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d059      	beq.n	8008780 <_ZN3tim4initEP12tim_config_t+0x194>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 80086cc:	4a49      	ldr	r2, [pc, #292]	; (80087f4 <_ZN3tim4initEP12tim_config_t+0x208>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d05f      	beq.n	8008792 <_ZN3tim4initEP12tim_config_t+0x1a6>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 80086d2:	4a49      	ldr	r2, [pc, #292]	; (80087f8 <_ZN3tim4initEP12tim_config_t+0x20c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d047      	beq.n	8008768 <_ZN3tim4initEP12tim_config_t+0x17c>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 80086d8:	4a48      	ldr	r2, [pc, #288]	; (80087fc <_ZN3tim4initEP12tim_config_t+0x210>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d062      	beq.n	80087a4 <_ZN3tim4initEP12tim_config_t+0x1b8>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 80086de:	4a48      	ldr	r2, [pc, #288]	; (8008800 <_ZN3tim4initEP12tim_config_t+0x214>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d062      	beq.n	80087aa <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 80086e4:	4a47      	ldr	r2, [pc, #284]	; (8008804 <_ZN3tim4initEP12tim_config_t+0x218>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d068      	beq.n	80087bc <_ZN3tim4initEP12tim_config_t+0x1d0>
		else if(_tim == TIM10) IRQn = TIM1_UP_TIM10_IRQn;
 80086ea:	4a47      	ldr	r2, [pc, #284]	; (8008808 <_ZN3tim4initEP12tim_config_t+0x21c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d025      	beq.n	800873c <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 80086f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d070      	beq.n	80087da <_ZN3tim4initEP12tim_config_t+0x1ee>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 80086f8:	4a45      	ldr	r2, [pc, #276]	; (8008810 <_ZN3tim4initEP12tim_config_t+0x224>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d070      	beq.n	80087e0 <_ZN3tim4initEP12tim_config_t+0x1f4>
		else if(_tim == TIM13) IRQn = TIM8_UP_TIM13_IRQn;
 80086fe:	4a45      	ldr	r2, [pc, #276]	; (8008814 <_ZN3tim4initEP12tim_config_t+0x228>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d052      	beq.n	80087aa <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
 8008704:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008708:	4293      	cmp	r3, r2
 800870a:	bf04      	itt	eq
 800870c:	232d      	moveq	r3, #45	; 0x2d
 800870e:	750b      	strbeq	r3, [r1, #20]
	return ret;
 8008710:	e7ce      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8008712:	4d42      	ldr	r5, [pc, #264]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008714:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8008716:	f044 0401 	orr.w	r4, r4, #1
 800871a:	646c      	str	r4, [r5, #68]	; 0x44
 800871c:	e7ae      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 800871e:	4d3f      	ldr	r5, [pc, #252]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008720:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008722:	f044 0408 	orr.w	r4, r4, #8
 8008726:	642c      	str	r4, [r5, #64]	; 0x40
 8008728:	e7a8      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 800872a:	231c      	movs	r3, #28
 800872c:	750b      	strb	r3, [r1, #20]
 800872e:	e7bf      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8008730:	4d3a      	ldr	r5, [pc, #232]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008732:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008734:	f044 0402 	orr.w	r4, r4, #2
 8008738:	642c      	str	r4, [r5, #64]	; 0x40
 800873a:	e79f      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 800873c:	2319      	movs	r3, #25
}
 800873e:	bc70      	pop	{r4, r5, r6}
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8008740:	750b      	strb	r3, [r1, #20]
}
 8008742:	4770      	bx	lr
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8008744:	4d35      	ldr	r5, [pc, #212]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008746:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008748:	f044 0404 	orr.w	r4, r4, #4
 800874c:	642c      	str	r4, [r5, #64]	; 0x40
 800874e:	e795      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8008750:	4d32      	ldr	r5, [pc, #200]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008752:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008754:	f044 0410 	orr.w	r4, r4, #16
 8008758:	642c      	str	r4, [r5, #64]	; 0x40
 800875a:	e78f      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 800875c:	4d2f      	ldr	r5, [pc, #188]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 800875e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8008760:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8008764:	646c      	str	r4, [r5, #68]	; 0x44
 8008766:	e789      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8008768:	2336      	movs	r3, #54	; 0x36
 800876a:	750b      	strb	r3, [r1, #20]
 800876c:	e7a0      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 800876e:	231d      	movs	r3, #29
 8008770:	750b      	strb	r3, [r1, #20]
 8008772:	e79d      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8008774:	4d29      	ldr	r5, [pc, #164]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008776:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8008778:	f044 0420 	orr.w	r4, r4, #32
 800877c:	642c      	str	r4, [r5, #64]	; 0x40
 800877e:	e77d      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8008780:	231e      	movs	r3, #30
 8008782:	750b      	strb	r3, [r1, #20]
 8008784:	e794      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8008786:	4d25      	ldr	r5, [pc, #148]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 8008788:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800878a:	f044 0402 	orr.w	r4, r4, #2
 800878e:	646c      	str	r4, [r5, #68]	; 0x44
 8008790:	e774      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8008792:	2332      	movs	r3, #50	; 0x32
 8008794:	750b      	strb	r3, [r1, #20]
 8008796:	e78b      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8008798:	4d20      	ldr	r5, [pc, #128]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 800879a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 800879c:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 80087a0:	646c      	str	r4, [r5, #68]	; 0x44
 80087a2:	e76b      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 80087a4:	2337      	movs	r3, #55	; 0x37
 80087a6:	750b      	strb	r3, [r1, #20]
 80087a8:	e782      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 80087aa:	232c      	movs	r3, #44	; 0x2c
 80087ac:	750b      	strb	r3, [r1, #20]
 80087ae:	e77f      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 80087b0:	4d1a      	ldr	r5, [pc, #104]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 80087b2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 80087b4:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 80087b8:	646c      	str	r4, [r5, #68]	; 0x44
 80087ba:	e75f      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 80087bc:	2318      	movs	r3, #24
 80087be:	750b      	strb	r3, [r1, #20]
 80087c0:	e776      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 80087c2:	4d16      	ldr	r5, [pc, #88]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 80087c4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80087c6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80087ca:	642c      	str	r4, [r5, #64]	; 0x40
 80087cc:	e756      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 80087ce:	4d13      	ldr	r5, [pc, #76]	; (800881c <_ZN3tim4initEP12tim_config_t+0x230>)
 80087d0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 80087d2:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 80087d6:	642c      	str	r4, [r5, #64]	; 0x40
 80087d8:	e750      	b.n	800867c <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 80087da:	231a      	movs	r3, #26
 80087dc:	750b      	strb	r3, [r1, #20]
 80087de:	e767      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 80087e0:	232b      	movs	r3, #43	; 0x2b
 80087e2:	750b      	strb	r3, [r1, #20]
 80087e4:	e764      	b.n	80086b0 <_ZN3tim4initEP12tim_config_t+0xc4>
 80087e6:	bf00      	nop
 80087e8:	40010000 	.word	0x40010000
 80087ec:	40000400 	.word	0x40000400
 80087f0:	40000800 	.word	0x40000800
 80087f4:	40000c00 	.word	0x40000c00
 80087f8:	40001000 	.word	0x40001000
 80087fc:	40001400 	.word	0x40001400
 8008800:	40010400 	.word	0x40010400
 8008804:	40014000 	.word	0x40014000
 8008808:	40014400 	.word	0x40014400
 800880c:	40014800 	.word	0x40014800
 8008810:	40001800 	.word	0x40001800
 8008814:	40001c00 	.word	0x40001c00
 8008818:	40002000 	.word	0x40002000
 800881c:	40023800 	.word	0x40023800

08008820 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_>:
void tim::clear_update_isr(void){
	_tim -> SR &=~ TIM_DIER_UIE;
}


stm_ret_t tim::register_event_handler(void(*function_ptr)(tim_channel_t channel, tim_event_t event, void *param), void *param){
 8008820:	b538      	push	{r3, r4, r5, lr}
	stm_ret_t ret;

	if(_conf -> interrupt != TIM_INTERRUPT_ENABLE) {
 8008822:	690d      	ldr	r5, [r1, #16]
 8008824:	f895 c00b 	ldrb.w	ip, [r5, #11]
	stm_ret_t ret;
 8008828:	2501      	movs	r5, #1
 800882a:	7005      	strb	r5, [r0, #0]
	if(_conf -> interrupt != TIM_INTERRUPT_ENABLE) {
 800882c:	f1bc 0f01 	cmp.w	ip, #1
	stm_ret_t ret;
 8008830:	f04f 0500 	mov.w	r5, #0
stm_ret_t tim::register_event_handler(void(*function_ptr)(tim_channel_t channel, tim_event_t event, void *param), void *param){
 8008834:	4604      	mov	r4, r0
	stm_ret_t ret;
 8008836:	6045      	str	r5, [r0, #4]
	if(_conf -> interrupt != TIM_INTERRUPT_ENABLE) {
 8008838:	d103      	bne.n	8008842 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x22>
		LOG_ERROR(TAG, "%s -> %s -> Timer interrupt disabled, can't register timer event handler.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}

	parameter = param;
 800883a:	608b      	str	r3, [r1, #8]
	handler_callback = function_ptr;
 800883c:	600a      	str	r2, [r1, #0]

	return ret;
}
 800883e:	4620      	mov	r0, r4
 8008840:	bd38      	pop	{r3, r4, r5, pc}
		set_return(&ret, STM_ERR, __LINE__);
 8008842:	4629      	mov	r1, r5
 8008844:	22b2      	movs	r2, #178	; 0xb2
 8008846:	f002 fc25 	bl	800b094 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Timer interrupt disabled, can't register timer event handler.", __FILE__, __FUNCTION__);
 800884a:	4b04      	ldr	r3, [pc, #16]	; (800885c <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x3c>)
 800884c:	4a04      	ldr	r2, [pc, #16]	; (8008860 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x40>)
 800884e:	4905      	ldr	r1, [pc, #20]	; (8008864 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x44>)
 8008850:	4805      	ldr	r0, [pc, #20]	; (8008868 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_+0x48>)
 8008852:	f002 faad 	bl	800adb0 <LOG_ERROR>
}
 8008856:	4620      	mov	r0, r4
 8008858:	bd38      	pop	{r3, r4, r5, pc}
 800885a:	bf00      	nop
 800885c:	08011684 	.word	0x08011684
 8008860:	0801169c 	.word	0x0801169c
 8008864:	080116c4 	.word	0x080116c4
 8008868:	08011710 	.word	0x08011710

0800886c <_ZN3tim8start_itEv>:
	_tim -> CR1 &=~ TIM_CR1_CEN;

	return ret;
}

stm_ret_t tim::start_it(void){
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	stm_ret_t ret;

	if(_conf -> interrupt == TIM_INTERRUPT_DISABLE){
 800886e:	690b      	ldr	r3, [r1, #16]
 8008870:	7add      	ldrb	r5, [r3, #11]
	stm_ret_t ret;
 8008872:	2201      	movs	r2, #1
 8008874:	2600      	movs	r6, #0
stm_ret_t tim::start_it(void){
 8008876:	4604      	mov	r4, r0
	stm_ret_t ret;
 8008878:	7002      	strb	r2, [r0, #0]
 800887a:	6046      	str	r6, [r0, #4]
	if(_conf -> interrupt == TIM_INTERRUPT_DISABLE){
 800887c:	2d00      	cmp	r5, #0
 800887e:	d041      	beq.n	8008904 <_ZN3tim8start_itEv+0x98>
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}


	if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8008880:	68dd      	ldr	r5, [r3, #12]
 8008882:	2d03      	cmp	r5, #3
 8008884:	d952      	bls.n	800892c <_ZN3tim8start_itEv+0xc0>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(_tim -> CR1 & TIM_CR1_CEN){
 8008886:	684e      	ldr	r6, [r1, #4]
 8008888:	6837      	ldr	r7, [r6, #0]
 800888a:	07ff      	lsls	r7, r7, #31
 800888c:	d42d      	bmi.n	80088ea <_ZN3tim8start_itEv+0x7e>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart in interrupt mode.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}

	_tim -> DIER |= TIM_DIER_UIE;
 800888e:	68f0      	ldr	r0, [r6, #12]
 8008890:	f040 0001 	orr.w	r0, r0, #1
 8008894:	60f0      	str	r0, [r6, #12]
	__NVIC_ClearPendingIRQ(IRQn);
 8008896:	f991 0014 	ldrsb.w	r0, [r1, #20]
  if ((int32_t)(IRQn) >= 0)
 800889a:	2800      	cmp	r0, #0
 800889c:	db3e      	blt.n	800891c <_ZN3tim8start_itEv+0xb0>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800889e:	0946      	lsrs	r6, r0, #5
 80088a0:	4d2d      	ldr	r5, [pc, #180]	; (8008958 <_ZN3tim8start_itEv+0xec>)
 80088a2:	f000 071f 	and.w	r7, r0, #31
 80088a6:	3660      	adds	r6, #96	; 0x60
 80088a8:	40ba      	lsls	r2, r7
 80088aa:	f845 2026 	str.w	r2, [r5, r6, lsl #2]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	4428      	add	r0, r5
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
	__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
	__NVIC_EnableIRQ(IRQn);
 80088ba:	f991 3014 	ldrsb.w	r3, [r1, #20]
  if ((int32_t)(IRQn) >= 0)
 80088be:	2b00      	cmp	r3, #0
 80088c0:	db0c      	blt.n	80088dc <_ZN3tim8start_itEv+0x70>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088c2:	f003 001f 	and.w	r0, r3, #31
 80088c6:	095b      	lsrs	r3, r3, #5
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80088ce:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80088d2:	2201      	movs	r2, #1
 80088d4:	4082      	lsls	r2, r0
 80088d6:	601a      	str	r2, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80088d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	__NVIC_ClearPendingIRQ(IRQn);

	_tim -> CR1 |= TIM_CR1_CEN;
 80088dc:	684a      	ldr	r2, [r1, #4]
 80088de:	6813      	ldr	r3, [r2, #0]
 80088e0:	f043 0301 	orr.w	r3, r3, #1
 80088e4:	6013      	str	r3, [r2, #0]

	return ret;
}
 80088e6:	4620      	mov	r0, r4
 80088e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		set_return(&ret, STM_BUSY, __LINE__);
 80088ea:	f44f 7285 	mov.w	r2, #266	; 0x10a
 80088ee:	2104      	movs	r1, #4
 80088f0:	f002 fbd0 	bl	800b094 <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart in interrupt mode.", __FILE__, __FUNCTION__);
 80088f4:	4b19      	ldr	r3, [pc, #100]	; (800895c <_ZN3tim8start_itEv+0xf0>)
 80088f6:	4a1a      	ldr	r2, [pc, #104]	; (8008960 <_ZN3tim8start_itEv+0xf4>)
 80088f8:	491a      	ldr	r1, [pc, #104]	; (8008964 <_ZN3tim8start_itEv+0xf8>)
 80088fa:	481b      	ldr	r0, [pc, #108]	; (8008968 <_ZN3tim8start_itEv+0xfc>)
 80088fc:	f002 fa1a 	bl	800ad34 <LOG_WARN>
}
 8008900:	4620      	mov	r0, r4
 8008902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		set_return(&ret, STM_ERR, __LINE__);
 8008904:	4629      	mov	r1, r5
 8008906:	22f1      	movs	r2, #241	; 0xf1
 8008908:	f002 fbc4 	bl	800b094 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Timer interrupt disabled.", __FILE__, __FUNCTION__);
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <_ZN3tim8start_itEv+0xf0>)
 800890e:	4a14      	ldr	r2, [pc, #80]	; (8008960 <_ZN3tim8start_itEv+0xf4>)
 8008910:	4916      	ldr	r1, [pc, #88]	; (800896c <_ZN3tim8start_itEv+0x100>)
 8008912:	4815      	ldr	r0, [pc, #84]	; (8008968 <_ZN3tim8start_itEv+0xfc>)
 8008914:	f002 fa4c 	bl	800adb0 <LOG_ERROR>
}
 8008918:	4620      	mov	r0, r4
 800891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800891c:	4b14      	ldr	r3, [pc, #80]	; (8008970 <_ZN3tim8start_itEv+0x104>)
 800891e:	f000 000f 	and.w	r0, r0, #15
 8008922:	012d      	lsls	r5, r5, #4
 8008924:	4403      	add	r3, r0
 8008926:	b2ed      	uxtb	r5, r5
 8008928:	761d      	strb	r5, [r3, #24]
 800892a:	e7c6      	b.n	80088ba <_ZN3tim8start_itEv+0x4e>
		set_return(&ret, STM_ERR, __LINE__);
 800892c:	22fa      	movs	r2, #250	; 0xfa
 800892e:	4631      	mov	r1, r6
 8008930:	f002 fbb0 	bl	800b094 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8008934:	4b09      	ldr	r3, [pc, #36]	; (800895c <_ZN3tim8start_itEv+0xf0>)
 8008936:	4a0a      	ldr	r2, [pc, #40]	; (8008960 <_ZN3tim8start_itEv+0xf4>)
 8008938:	490e      	ldr	r1, [pc, #56]	; (8008974 <_ZN3tim8start_itEv+0x108>)
 800893a:	480b      	ldr	r0, [pc, #44]	; (8008968 <_ZN3tim8start_itEv+0xfc>)
 800893c:	f002 fa38 	bl	800adb0 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8008940:	490d      	ldr	r1, [pc, #52]	; (8008978 <_ZN3tim8start_itEv+0x10c>)
 8008942:	4809      	ldr	r0, [pc, #36]	; (8008968 <_ZN3tim8start_itEv+0xfc>)
 8008944:	2205      	movs	r2, #5
 8008946:	f002 f9b7 	bl	800acb8 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 800894a:	f241 3088 	movw	r0, #5000	; 0x1388
 800894e:	f7ff fdc3 	bl	80084d8 <systick_delay_ms>
			__NVIC_SystemReset();
 8008952:	f7ff fe39 	bl	80085c8 <__NVIC_SystemReset>
 8008956:	bf00      	nop
 8008958:	e000e100 	.word	0xe000e100
 800895c:	080118a0 	.word	0x080118a0
 8008960:	0801169c 	.word	0x0801169c
 8008964:	0801173c 	.word	0x0801173c
 8008968:	08011710 	.word	0x08011710
 800896c:	08011714 	.word	0x08011714
 8008970:	e000ecfc 	.word	0xe000ecfc
 8008974:	080114f4 	.word	0x080114f4
 8008978:	08011540 	.word	0x08011540

0800897c <TIM1_CC_IRQHandler>:

void TIM_IRQHandler(tim *timptr){
	tim_event_t event = TIM_EVENT_NOEVENT;
	tim_channel_t channel = TIM_NOCHANNEL;

	timptr -> counter = timptr -> _tim -> CNT;
 800897c:	4a2f      	ldr	r2, [pc, #188]	; (8008a3c <TIM1_CC_IRQHandler+0xc0>)
 800897e:	6853      	ldr	r3, [r2, #4]
 8008980:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008982:	60d1      	str	r1, [r2, #12]

	/* TIMER CAPTURE-COMPARE 1 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008984:	6919      	ldr	r1, [r3, #16]
 8008986:	0788      	lsls	r0, r1, #30
 8008988:	d502      	bpl.n	8008990 <TIM1_CC_IRQHandler+0x14>
 800898a:	68d9      	ldr	r1, [r3, #12]
 800898c:	0789      	lsls	r1, r1, #30
 800898e:	d433      	bmi.n	80089f8 <TIM1_CC_IRQHandler+0x7c>
		channel = TIM_CHANNEL1;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 2 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008990:	6919      	ldr	r1, [r3, #16]
 8008992:	0748      	lsls	r0, r1, #29
 8008994:	d502      	bpl.n	800899c <TIM1_CC_IRQHandler+0x20>
 8008996:	68d9      	ldr	r1, [r3, #12]
 8008998:	0749      	lsls	r1, r1, #29
 800899a:	d43c      	bmi.n	8008a16 <TIM1_CC_IRQHandler+0x9a>
		channel = TIM_CHANNEL2;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 3 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800899c:	6919      	ldr	r1, [r3, #16]
 800899e:	0708      	lsls	r0, r1, #28
 80089a0:	d502      	bpl.n	80089a8 <TIM1_CC_IRQHandler+0x2c>
 80089a2:	68d9      	ldr	r1, [r3, #12]
 80089a4:	0709      	lsls	r1, r1, #28
 80089a6:	d43c      	bmi.n	8008a22 <TIM1_CC_IRQHandler+0xa6>
		channel = TIM_CHANNEL3;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 4 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80089a8:	6919      	ldr	r1, [r3, #16]
 80089aa:	06c8      	lsls	r0, r1, #27
 80089ac:	d411      	bmi.n	80089d2 <TIM1_CC_IRQHandler+0x56>
		channel = TIM_CHANNEL4;
		goto EventCB;
	}

	/* TIMER UPDATE INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80089ae:	6919      	ldr	r1, [r3, #16]
 80089b0:	07c8      	lsls	r0, r1, #31
 80089b2:	d502      	bpl.n	80089ba <TIM1_CC_IRQHandler+0x3e>
 80089b4:	68d9      	ldr	r1, [r3, #12]
 80089b6:	07c9      	lsls	r1, r1, #31
 80089b8:	d439      	bmi.n	8008a2e <TIM1_CC_IRQHandler+0xb2>
		event = TIM_EVENT_UPDATE;
		goto EventCB;
	}

	/* TIMER BREAK INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 80089ba:	6919      	ldr	r1, [r3, #16]
 80089bc:	0608      	lsls	r0, r1, #24
 80089be:	d511      	bpl.n	80089e4 <TIM1_CC_IRQHandler+0x68>
 80089c0:	68d9      	ldr	r1, [r3, #12]
 80089c2:	0609      	lsls	r1, r1, #24
 80089c4:	d50e      	bpl.n	80089e4 <TIM1_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 80089c6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80089ca:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80089cc:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80089ce:	2101      	movs	r1, #1
		goto EventCB;
 80089d0:	e00d      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80089d2:	68d9      	ldr	r1, [r3, #12]
 80089d4:	06c9      	lsls	r1, r1, #27
 80089d6:	d5ea      	bpl.n	80089ae <TIM1_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80089d8:	f06f 0110 	mvn.w	r1, #16
 80089dc:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80089de:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80089e0:	2106      	movs	r1, #6
		goto EventCB;
 80089e2:	e004      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
	}

	/* TIMER TRIGER INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80089e4:	6919      	ldr	r1, [r3, #16]
 80089e6:	0648      	lsls	r0, r1, #25
 80089e8:	d40c      	bmi.n	8008a04 <TIM1_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 80089ea:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80089ec:	2107      	movs	r1, #7
		event = TIM_EVENT_TRIGER;
		goto EventCB;
	}

	EventCB:
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80089ee:	6813      	ldr	r3, [r2, #0]
 80089f0:	b10b      	cbz	r3, 80089f6 <TIM1_CC_IRQHandler+0x7a>
 80089f2:	6892      	ldr	r2, [r2, #8]
 80089f4:	4718      	bx	r3
#if defined(TIM1)
tim tim_1(TIM1);
tim_t tim1 = &tim_1;
void TIM1_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_1);
}
 80089f6:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80089f8:	f06f 0102 	mvn.w	r1, #2
 80089fc:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80089fe:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008a00:	2103      	movs	r1, #3
		goto EventCB;
 8008a02:	e7f4      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008a04:	68d9      	ldr	r1, [r3, #12]
 8008a06:	0649      	lsls	r1, r1, #25
 8008a08:	d5ef      	bpl.n	80089ea <TIM1_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008a0a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008a0e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a10:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008a12:	2102      	movs	r1, #2
		goto EventCB;
 8008a14:	e7eb      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008a16:	f06f 0104 	mvn.w	r1, #4
 8008a1a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008a1c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008a1e:	2104      	movs	r1, #4
		goto EventCB;
 8008a20:	e7e5      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008a22:	f06f 0108 	mvn.w	r1, #8
 8008a26:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008a28:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008a2a:	2105      	movs	r1, #5
		goto EventCB;
 8008a2c:	e7df      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008a2e:	f06f 0101 	mvn.w	r1, #1
 8008a32:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a34:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008a36:	2100      	movs	r1, #0
		goto EventCB;
 8008a38:	e7d9      	b.n	80089ee <TIM1_CC_IRQHandler+0x72>
 8008a3a:	bf00      	nop
 8008a3c:	2000b764 	.word	0x2000b764

08008a40 <TIM2_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008a40:	4a2f      	ldr	r2, [pc, #188]	; (8008b00 <TIM2_IRQHandler+0xc0>)
 8008a42:	6853      	ldr	r3, [r2, #4]
 8008a44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a46:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008a48:	6919      	ldr	r1, [r3, #16]
 8008a4a:	0788      	lsls	r0, r1, #30
 8008a4c:	d502      	bpl.n	8008a54 <TIM2_IRQHandler+0x14>
 8008a4e:	68d9      	ldr	r1, [r3, #12]
 8008a50:	0789      	lsls	r1, r1, #30
 8008a52:	d433      	bmi.n	8008abc <TIM2_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008a54:	6919      	ldr	r1, [r3, #16]
 8008a56:	0748      	lsls	r0, r1, #29
 8008a58:	d502      	bpl.n	8008a60 <TIM2_IRQHandler+0x20>
 8008a5a:	68d9      	ldr	r1, [r3, #12]
 8008a5c:	0749      	lsls	r1, r1, #29
 8008a5e:	d43c      	bmi.n	8008ada <TIM2_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008a60:	6919      	ldr	r1, [r3, #16]
 8008a62:	0708      	lsls	r0, r1, #28
 8008a64:	d502      	bpl.n	8008a6c <TIM2_IRQHandler+0x2c>
 8008a66:	68d9      	ldr	r1, [r3, #12]
 8008a68:	0709      	lsls	r1, r1, #28
 8008a6a:	d43c      	bmi.n	8008ae6 <TIM2_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008a6c:	6919      	ldr	r1, [r3, #16]
 8008a6e:	06c8      	lsls	r0, r1, #27
 8008a70:	d411      	bmi.n	8008a96 <TIM2_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008a72:	6919      	ldr	r1, [r3, #16]
 8008a74:	07c8      	lsls	r0, r1, #31
 8008a76:	d502      	bpl.n	8008a7e <TIM2_IRQHandler+0x3e>
 8008a78:	68d9      	ldr	r1, [r3, #12]
 8008a7a:	07c9      	lsls	r1, r1, #31
 8008a7c:	d439      	bmi.n	8008af2 <TIM2_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008a7e:	6919      	ldr	r1, [r3, #16]
 8008a80:	0608      	lsls	r0, r1, #24
 8008a82:	d511      	bpl.n	8008aa8 <TIM2_IRQHandler+0x68>
 8008a84:	68d9      	ldr	r1, [r3, #12]
 8008a86:	0609      	lsls	r1, r1, #24
 8008a88:	d50e      	bpl.n	8008aa8 <TIM2_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008a8a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008a8e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008a90:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008a92:	2101      	movs	r1, #1
		goto EventCB;
 8008a94:	e00d      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008a96:	68d9      	ldr	r1, [r3, #12]
 8008a98:	06c9      	lsls	r1, r1, #27
 8008a9a:	d5ea      	bpl.n	8008a72 <TIM2_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008a9c:	f06f 0110 	mvn.w	r1, #16
 8008aa0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008aa2:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008aa4:	2106      	movs	r1, #6
		goto EventCB;
 8008aa6:	e004      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008aa8:	6919      	ldr	r1, [r3, #16]
 8008aaa:	0648      	lsls	r0, r1, #25
 8008aac:	d40c      	bmi.n	8008ac8 <TIM2_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008aae:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008ab0:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	b10b      	cbz	r3, 8008aba <TIM2_IRQHandler+0x7a>
 8008ab6:	6892      	ldr	r2, [r2, #8]
 8008ab8:	4718      	bx	r3
#if defined(TIM2)
tim tim_2(TIM2);
tim_t tim2 = &tim_2;
void TIM2_IRQHandler(void){
	TIM_IRQHandler(&tim_2);
}
 8008aba:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008abc:	f06f 0102 	mvn.w	r1, #2
 8008ac0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008ac2:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008ac4:	2103      	movs	r1, #3
		goto EventCB;
 8008ac6:	e7f4      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008ac8:	68d9      	ldr	r1, [r3, #12]
 8008aca:	0649      	lsls	r1, r1, #25
 8008acc:	d5ef      	bpl.n	8008aae <TIM2_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008ace:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008ad2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ad4:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008ad6:	2102      	movs	r1, #2
		goto EventCB;
 8008ad8:	e7eb      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008ada:	f06f 0104 	mvn.w	r1, #4
 8008ade:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008ae0:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008ae2:	2104      	movs	r1, #4
		goto EventCB;
 8008ae4:	e7e5      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008ae6:	f06f 0108 	mvn.w	r1, #8
 8008aea:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008aec:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008aee:	2105      	movs	r1, #5
		goto EventCB;
 8008af0:	e7df      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008af2:	f06f 0101 	mvn.w	r1, #1
 8008af6:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008af8:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008afa:	2100      	movs	r1, #0
		goto EventCB;
 8008afc:	e7d9      	b.n	8008ab2 <TIM2_IRQHandler+0x72>
 8008afe:	bf00      	nop
 8008b00:	2000b7f4 	.word	0x2000b7f4

08008b04 <TIM3_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008b04:	4a2f      	ldr	r2, [pc, #188]	; (8008bc4 <TIM3_IRQHandler+0xc0>)
 8008b06:	6853      	ldr	r3, [r2, #4]
 8008b08:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b0a:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008b0c:	6919      	ldr	r1, [r3, #16]
 8008b0e:	0788      	lsls	r0, r1, #30
 8008b10:	d502      	bpl.n	8008b18 <TIM3_IRQHandler+0x14>
 8008b12:	68d9      	ldr	r1, [r3, #12]
 8008b14:	0789      	lsls	r1, r1, #30
 8008b16:	d433      	bmi.n	8008b80 <TIM3_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008b18:	6919      	ldr	r1, [r3, #16]
 8008b1a:	0748      	lsls	r0, r1, #29
 8008b1c:	d502      	bpl.n	8008b24 <TIM3_IRQHandler+0x20>
 8008b1e:	68d9      	ldr	r1, [r3, #12]
 8008b20:	0749      	lsls	r1, r1, #29
 8008b22:	d43c      	bmi.n	8008b9e <TIM3_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008b24:	6919      	ldr	r1, [r3, #16]
 8008b26:	0708      	lsls	r0, r1, #28
 8008b28:	d502      	bpl.n	8008b30 <TIM3_IRQHandler+0x2c>
 8008b2a:	68d9      	ldr	r1, [r3, #12]
 8008b2c:	0709      	lsls	r1, r1, #28
 8008b2e:	d43c      	bmi.n	8008baa <TIM3_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008b30:	6919      	ldr	r1, [r3, #16]
 8008b32:	06c8      	lsls	r0, r1, #27
 8008b34:	d411      	bmi.n	8008b5a <TIM3_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008b36:	6919      	ldr	r1, [r3, #16]
 8008b38:	07c8      	lsls	r0, r1, #31
 8008b3a:	d502      	bpl.n	8008b42 <TIM3_IRQHandler+0x3e>
 8008b3c:	68d9      	ldr	r1, [r3, #12]
 8008b3e:	07c9      	lsls	r1, r1, #31
 8008b40:	d439      	bmi.n	8008bb6 <TIM3_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008b42:	6919      	ldr	r1, [r3, #16]
 8008b44:	0608      	lsls	r0, r1, #24
 8008b46:	d511      	bpl.n	8008b6c <TIM3_IRQHandler+0x68>
 8008b48:	68d9      	ldr	r1, [r3, #12]
 8008b4a:	0609      	lsls	r1, r1, #24
 8008b4c:	d50e      	bpl.n	8008b6c <TIM3_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008b4e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008b52:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008b54:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008b56:	2101      	movs	r1, #1
		goto EventCB;
 8008b58:	e00d      	b.n	8008b76 <TIM3_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008b5a:	68d9      	ldr	r1, [r3, #12]
 8008b5c:	06c9      	lsls	r1, r1, #27
 8008b5e:	d5ea      	bpl.n	8008b36 <TIM3_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008b60:	f06f 0110 	mvn.w	r1, #16
 8008b64:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008b66:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008b68:	2106      	movs	r1, #6
		goto EventCB;
 8008b6a:	e004      	b.n	8008b76 <TIM3_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008b6c:	6919      	ldr	r1, [r3, #16]
 8008b6e:	0648      	lsls	r0, r1, #25
 8008b70:	d40c      	bmi.n	8008b8c <TIM3_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008b72:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008b74:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008b76:	6813      	ldr	r3, [r2, #0]
 8008b78:	b10b      	cbz	r3, 8008b7e <TIM3_IRQHandler+0x7a>
 8008b7a:	6892      	ldr	r2, [r2, #8]
 8008b7c:	4718      	bx	r3
#if defined(TIM3)
tim tim_3(TIM3);
tim_t tim3 = &tim_3;
void TIM3_IRQHandler(void){
	TIM_IRQHandler(&tim_3);
}
 8008b7e:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008b80:	f06f 0102 	mvn.w	r1, #2
 8008b84:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008b86:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008b88:	2103      	movs	r1, #3
		goto EventCB;
 8008b8a:	e7f4      	b.n	8008b76 <TIM3_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008b8c:	68d9      	ldr	r1, [r3, #12]
 8008b8e:	0649      	lsls	r1, r1, #25
 8008b90:	d5ef      	bpl.n	8008b72 <TIM3_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008b92:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008b96:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008b98:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008b9a:	2102      	movs	r1, #2
		goto EventCB;
 8008b9c:	e7eb      	b.n	8008b76 <TIM3_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008b9e:	f06f 0104 	mvn.w	r1, #4
 8008ba2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008ba4:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008ba6:	2104      	movs	r1, #4
		goto EventCB;
 8008ba8:	e7e5      	b.n	8008b76 <TIM3_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008baa:	f06f 0108 	mvn.w	r1, #8
 8008bae:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008bb0:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008bb2:	2105      	movs	r1, #5
		goto EventCB;
 8008bb4:	e7df      	b.n	8008b76 <TIM3_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008bb6:	f06f 0101 	mvn.w	r1, #1
 8008bba:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008bbc:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008bbe:	2100      	movs	r1, #0
		goto EventCB;
 8008bc0:	e7d9      	b.n	8008b76 <TIM3_IRQHandler+0x72>
 8008bc2:	bf00      	nop
 8008bc4:	2000b80c 	.word	0x2000b80c

08008bc8 <TIM4_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008bc8:	4a2f      	ldr	r2, [pc, #188]	; (8008c88 <TIM4_IRQHandler+0xc0>)
 8008bca:	6853      	ldr	r3, [r2, #4]
 8008bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008bce:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008bd0:	6919      	ldr	r1, [r3, #16]
 8008bd2:	0788      	lsls	r0, r1, #30
 8008bd4:	d502      	bpl.n	8008bdc <TIM4_IRQHandler+0x14>
 8008bd6:	68d9      	ldr	r1, [r3, #12]
 8008bd8:	0789      	lsls	r1, r1, #30
 8008bda:	d433      	bmi.n	8008c44 <TIM4_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008bdc:	6919      	ldr	r1, [r3, #16]
 8008bde:	0748      	lsls	r0, r1, #29
 8008be0:	d502      	bpl.n	8008be8 <TIM4_IRQHandler+0x20>
 8008be2:	68d9      	ldr	r1, [r3, #12]
 8008be4:	0749      	lsls	r1, r1, #29
 8008be6:	d43c      	bmi.n	8008c62 <TIM4_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008be8:	6919      	ldr	r1, [r3, #16]
 8008bea:	0708      	lsls	r0, r1, #28
 8008bec:	d502      	bpl.n	8008bf4 <TIM4_IRQHandler+0x2c>
 8008bee:	68d9      	ldr	r1, [r3, #12]
 8008bf0:	0709      	lsls	r1, r1, #28
 8008bf2:	d43c      	bmi.n	8008c6e <TIM4_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008bf4:	6919      	ldr	r1, [r3, #16]
 8008bf6:	06c8      	lsls	r0, r1, #27
 8008bf8:	d411      	bmi.n	8008c1e <TIM4_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008bfa:	6919      	ldr	r1, [r3, #16]
 8008bfc:	07c8      	lsls	r0, r1, #31
 8008bfe:	d502      	bpl.n	8008c06 <TIM4_IRQHandler+0x3e>
 8008c00:	68d9      	ldr	r1, [r3, #12]
 8008c02:	07c9      	lsls	r1, r1, #31
 8008c04:	d439      	bmi.n	8008c7a <TIM4_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008c06:	6919      	ldr	r1, [r3, #16]
 8008c08:	0608      	lsls	r0, r1, #24
 8008c0a:	d511      	bpl.n	8008c30 <TIM4_IRQHandler+0x68>
 8008c0c:	68d9      	ldr	r1, [r3, #12]
 8008c0e:	0609      	lsls	r1, r1, #24
 8008c10:	d50e      	bpl.n	8008c30 <TIM4_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008c12:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008c16:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c18:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008c1a:	2101      	movs	r1, #1
		goto EventCB;
 8008c1c:	e00d      	b.n	8008c3a <TIM4_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008c1e:	68d9      	ldr	r1, [r3, #12]
 8008c20:	06c9      	lsls	r1, r1, #27
 8008c22:	d5ea      	bpl.n	8008bfa <TIM4_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008c24:	f06f 0110 	mvn.w	r1, #16
 8008c28:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008c2a:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008c2c:	2106      	movs	r1, #6
		goto EventCB;
 8008c2e:	e004      	b.n	8008c3a <TIM4_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008c30:	6919      	ldr	r1, [r3, #16]
 8008c32:	0648      	lsls	r0, r1, #25
 8008c34:	d40c      	bmi.n	8008c50 <TIM4_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c36:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008c38:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008c3a:	6813      	ldr	r3, [r2, #0]
 8008c3c:	b10b      	cbz	r3, 8008c42 <TIM4_IRQHandler+0x7a>
 8008c3e:	6892      	ldr	r2, [r2, #8]
 8008c40:	4718      	bx	r3
#if defined(TIM4)
tim tim_4(TIM4);
tim_t tim4 = &tim_4;
void TIM4_IRQHandler(void){
	TIM_IRQHandler(&tim_4);
}
 8008c42:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008c44:	f06f 0102 	mvn.w	r1, #2
 8008c48:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008c4a:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008c4c:	2103      	movs	r1, #3
		goto EventCB;
 8008c4e:	e7f4      	b.n	8008c3a <TIM4_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008c50:	68d9      	ldr	r1, [r3, #12]
 8008c52:	0649      	lsls	r1, r1, #25
 8008c54:	d5ef      	bpl.n	8008c36 <TIM4_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008c56:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008c5a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c5c:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008c5e:	2102      	movs	r1, #2
		goto EventCB;
 8008c60:	e7eb      	b.n	8008c3a <TIM4_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008c62:	f06f 0104 	mvn.w	r1, #4
 8008c66:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008c68:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008c6a:	2104      	movs	r1, #4
		goto EventCB;
 8008c6c:	e7e5      	b.n	8008c3a <TIM4_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008c6e:	f06f 0108 	mvn.w	r1, #8
 8008c72:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008c74:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008c76:	2105      	movs	r1, #5
		goto EventCB;
 8008c78:	e7df      	b.n	8008c3a <TIM4_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008c7a:	f06f 0101 	mvn.w	r1, #1
 8008c7e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008c80:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008c82:	2100      	movs	r1, #0
		goto EventCB;
 8008c84:	e7d9      	b.n	8008c3a <TIM4_IRQHandler+0x72>
 8008c86:	bf00      	nop
 8008c88:	2000b824 	.word	0x2000b824

08008c8c <TIM5_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008c8c:	4a2f      	ldr	r2, [pc, #188]	; (8008d4c <TIM5_IRQHandler+0xc0>)
 8008c8e:	6853      	ldr	r3, [r2, #4]
 8008c90:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008c92:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008c94:	6919      	ldr	r1, [r3, #16]
 8008c96:	0788      	lsls	r0, r1, #30
 8008c98:	d502      	bpl.n	8008ca0 <TIM5_IRQHandler+0x14>
 8008c9a:	68d9      	ldr	r1, [r3, #12]
 8008c9c:	0789      	lsls	r1, r1, #30
 8008c9e:	d433      	bmi.n	8008d08 <TIM5_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008ca0:	6919      	ldr	r1, [r3, #16]
 8008ca2:	0748      	lsls	r0, r1, #29
 8008ca4:	d502      	bpl.n	8008cac <TIM5_IRQHandler+0x20>
 8008ca6:	68d9      	ldr	r1, [r3, #12]
 8008ca8:	0749      	lsls	r1, r1, #29
 8008caa:	d43c      	bmi.n	8008d26 <TIM5_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008cac:	6919      	ldr	r1, [r3, #16]
 8008cae:	0708      	lsls	r0, r1, #28
 8008cb0:	d502      	bpl.n	8008cb8 <TIM5_IRQHandler+0x2c>
 8008cb2:	68d9      	ldr	r1, [r3, #12]
 8008cb4:	0709      	lsls	r1, r1, #28
 8008cb6:	d43c      	bmi.n	8008d32 <TIM5_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008cb8:	6919      	ldr	r1, [r3, #16]
 8008cba:	06c8      	lsls	r0, r1, #27
 8008cbc:	d411      	bmi.n	8008ce2 <TIM5_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008cbe:	6919      	ldr	r1, [r3, #16]
 8008cc0:	07c8      	lsls	r0, r1, #31
 8008cc2:	d502      	bpl.n	8008cca <TIM5_IRQHandler+0x3e>
 8008cc4:	68d9      	ldr	r1, [r3, #12]
 8008cc6:	07c9      	lsls	r1, r1, #31
 8008cc8:	d439      	bmi.n	8008d3e <TIM5_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008cca:	6919      	ldr	r1, [r3, #16]
 8008ccc:	0608      	lsls	r0, r1, #24
 8008cce:	d511      	bpl.n	8008cf4 <TIM5_IRQHandler+0x68>
 8008cd0:	68d9      	ldr	r1, [r3, #12]
 8008cd2:	0609      	lsls	r1, r1, #24
 8008cd4:	d50e      	bpl.n	8008cf4 <TIM5_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008cd6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008cda:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008cdc:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008cde:	2101      	movs	r1, #1
		goto EventCB;
 8008ce0:	e00d      	b.n	8008cfe <TIM5_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008ce2:	68d9      	ldr	r1, [r3, #12]
 8008ce4:	06c9      	lsls	r1, r1, #27
 8008ce6:	d5ea      	bpl.n	8008cbe <TIM5_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008ce8:	f06f 0110 	mvn.w	r1, #16
 8008cec:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008cee:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008cf0:	2106      	movs	r1, #6
		goto EventCB;
 8008cf2:	e004      	b.n	8008cfe <TIM5_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008cf4:	6919      	ldr	r1, [r3, #16]
 8008cf6:	0648      	lsls	r0, r1, #25
 8008cf8:	d40c      	bmi.n	8008d14 <TIM5_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008cfa:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008cfc:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008cfe:	6813      	ldr	r3, [r2, #0]
 8008d00:	b10b      	cbz	r3, 8008d06 <TIM5_IRQHandler+0x7a>
 8008d02:	6892      	ldr	r2, [r2, #8]
 8008d04:	4718      	bx	r3
#if defined(TIM5)
tim tim_5(TIM5);
tim_t tim5 = &tim_5;
void TIM5_IRQHandler(void){
	TIM_IRQHandler(&tim_5);
}
 8008d06:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008d08:	f06f 0102 	mvn.w	r1, #2
 8008d0c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008d0e:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008d10:	2103      	movs	r1, #3
		goto EventCB;
 8008d12:	e7f4      	b.n	8008cfe <TIM5_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008d14:	68d9      	ldr	r1, [r3, #12]
 8008d16:	0649      	lsls	r1, r1, #25
 8008d18:	d5ef      	bpl.n	8008cfa <TIM5_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008d1a:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008d1e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008d20:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008d22:	2102      	movs	r1, #2
		goto EventCB;
 8008d24:	e7eb      	b.n	8008cfe <TIM5_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008d26:	f06f 0104 	mvn.w	r1, #4
 8008d2a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008d2c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008d2e:	2104      	movs	r1, #4
		goto EventCB;
 8008d30:	e7e5      	b.n	8008cfe <TIM5_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008d32:	f06f 0108 	mvn.w	r1, #8
 8008d36:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008d38:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008d3a:	2105      	movs	r1, #5
		goto EventCB;
 8008d3c:	e7df      	b.n	8008cfe <TIM5_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008d3e:	f06f 0101 	mvn.w	r1, #1
 8008d42:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008d44:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008d46:	2100      	movs	r1, #0
		goto EventCB;
 8008d48:	e7d9      	b.n	8008cfe <TIM5_IRQHandler+0x72>
 8008d4a:	bf00      	nop
 8008d4c:	2000b83c 	.word	0x2000b83c

08008d50 <TIM6_DAC_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008d50:	4a2f      	ldr	r2, [pc, #188]	; (8008e10 <TIM6_DAC_IRQHandler+0xc0>)
 8008d52:	6853      	ldr	r3, [r2, #4]
 8008d54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008d56:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008d58:	6919      	ldr	r1, [r3, #16]
 8008d5a:	0788      	lsls	r0, r1, #30
 8008d5c:	d502      	bpl.n	8008d64 <TIM6_DAC_IRQHandler+0x14>
 8008d5e:	68d9      	ldr	r1, [r3, #12]
 8008d60:	0789      	lsls	r1, r1, #30
 8008d62:	d433      	bmi.n	8008dcc <TIM6_DAC_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008d64:	6919      	ldr	r1, [r3, #16]
 8008d66:	0748      	lsls	r0, r1, #29
 8008d68:	d502      	bpl.n	8008d70 <TIM6_DAC_IRQHandler+0x20>
 8008d6a:	68d9      	ldr	r1, [r3, #12]
 8008d6c:	0749      	lsls	r1, r1, #29
 8008d6e:	d43c      	bmi.n	8008dea <TIM6_DAC_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008d70:	6919      	ldr	r1, [r3, #16]
 8008d72:	0708      	lsls	r0, r1, #28
 8008d74:	d502      	bpl.n	8008d7c <TIM6_DAC_IRQHandler+0x2c>
 8008d76:	68d9      	ldr	r1, [r3, #12]
 8008d78:	0709      	lsls	r1, r1, #28
 8008d7a:	d43c      	bmi.n	8008df6 <TIM6_DAC_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008d7c:	6919      	ldr	r1, [r3, #16]
 8008d7e:	06c8      	lsls	r0, r1, #27
 8008d80:	d411      	bmi.n	8008da6 <TIM6_DAC_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008d82:	6919      	ldr	r1, [r3, #16]
 8008d84:	07c8      	lsls	r0, r1, #31
 8008d86:	d502      	bpl.n	8008d8e <TIM6_DAC_IRQHandler+0x3e>
 8008d88:	68d9      	ldr	r1, [r3, #12]
 8008d8a:	07c9      	lsls	r1, r1, #31
 8008d8c:	d439      	bmi.n	8008e02 <TIM6_DAC_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008d8e:	6919      	ldr	r1, [r3, #16]
 8008d90:	0608      	lsls	r0, r1, #24
 8008d92:	d511      	bpl.n	8008db8 <TIM6_DAC_IRQHandler+0x68>
 8008d94:	68d9      	ldr	r1, [r3, #12]
 8008d96:	0609      	lsls	r1, r1, #24
 8008d98:	d50e      	bpl.n	8008db8 <TIM6_DAC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008d9a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008d9e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008da0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008da2:	2101      	movs	r1, #1
		goto EventCB;
 8008da4:	e00d      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008da6:	68d9      	ldr	r1, [r3, #12]
 8008da8:	06c9      	lsls	r1, r1, #27
 8008daa:	d5ea      	bpl.n	8008d82 <TIM6_DAC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008dac:	f06f 0110 	mvn.w	r1, #16
 8008db0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008db2:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008db4:	2106      	movs	r1, #6
		goto EventCB;
 8008db6:	e004      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008db8:	6919      	ldr	r1, [r3, #16]
 8008dba:	0648      	lsls	r0, r1, #25
 8008dbc:	d40c      	bmi.n	8008dd8 <TIM6_DAC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008dbe:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008dc0:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	b10b      	cbz	r3, 8008dca <TIM6_DAC_IRQHandler+0x7a>
 8008dc6:	6892      	ldr	r2, [r2, #8]
 8008dc8:	4718      	bx	r3
void TIM6_DAC_IRQHandler(void){
	TIM_IRQHandler(&tim_6);
#if ENABLE_DAC
	DAC_IRQHandler();
#endif
}
 8008dca:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008dcc:	f06f 0102 	mvn.w	r1, #2
 8008dd0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008dd2:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008dd4:	2103      	movs	r1, #3
		goto EventCB;
 8008dd6:	e7f4      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008dd8:	68d9      	ldr	r1, [r3, #12]
 8008dda:	0649      	lsls	r1, r1, #25
 8008ddc:	d5ef      	bpl.n	8008dbe <TIM6_DAC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008dde:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008de2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008de4:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008de6:	2102      	movs	r1, #2
		goto EventCB;
 8008de8:	e7eb      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008dea:	f06f 0104 	mvn.w	r1, #4
 8008dee:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008df0:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008df2:	2104      	movs	r1, #4
		goto EventCB;
 8008df4:	e7e5      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008df6:	f06f 0108 	mvn.w	r1, #8
 8008dfa:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008dfc:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008dfe:	2105      	movs	r1, #5
		goto EventCB;
 8008e00:	e7df      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008e02:	f06f 0101 	mvn.w	r1, #1
 8008e06:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008e08:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008e0a:	2100      	movs	r1, #0
		goto EventCB;
 8008e0c:	e7d9      	b.n	8008dc2 <TIM6_DAC_IRQHandler+0x72>
 8008e0e:	bf00      	nop
 8008e10:	2000b854 	.word	0x2000b854

08008e14 <TIM7_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008e14:	4a2f      	ldr	r2, [pc, #188]	; (8008ed4 <TIM7_IRQHandler+0xc0>)
 8008e16:	6853      	ldr	r3, [r2, #4]
 8008e18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008e1a:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008e1c:	6919      	ldr	r1, [r3, #16]
 8008e1e:	0788      	lsls	r0, r1, #30
 8008e20:	d502      	bpl.n	8008e28 <TIM7_IRQHandler+0x14>
 8008e22:	68d9      	ldr	r1, [r3, #12]
 8008e24:	0789      	lsls	r1, r1, #30
 8008e26:	d433      	bmi.n	8008e90 <TIM7_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008e28:	6919      	ldr	r1, [r3, #16]
 8008e2a:	0748      	lsls	r0, r1, #29
 8008e2c:	d502      	bpl.n	8008e34 <TIM7_IRQHandler+0x20>
 8008e2e:	68d9      	ldr	r1, [r3, #12]
 8008e30:	0749      	lsls	r1, r1, #29
 8008e32:	d43c      	bmi.n	8008eae <TIM7_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008e34:	6919      	ldr	r1, [r3, #16]
 8008e36:	0708      	lsls	r0, r1, #28
 8008e38:	d502      	bpl.n	8008e40 <TIM7_IRQHandler+0x2c>
 8008e3a:	68d9      	ldr	r1, [r3, #12]
 8008e3c:	0709      	lsls	r1, r1, #28
 8008e3e:	d43c      	bmi.n	8008eba <TIM7_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008e40:	6919      	ldr	r1, [r3, #16]
 8008e42:	06c8      	lsls	r0, r1, #27
 8008e44:	d411      	bmi.n	8008e6a <TIM7_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008e46:	6919      	ldr	r1, [r3, #16]
 8008e48:	07c8      	lsls	r0, r1, #31
 8008e4a:	d502      	bpl.n	8008e52 <TIM7_IRQHandler+0x3e>
 8008e4c:	68d9      	ldr	r1, [r3, #12]
 8008e4e:	07c9      	lsls	r1, r1, #31
 8008e50:	d439      	bmi.n	8008ec6 <TIM7_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008e52:	6919      	ldr	r1, [r3, #16]
 8008e54:	0608      	lsls	r0, r1, #24
 8008e56:	d511      	bpl.n	8008e7c <TIM7_IRQHandler+0x68>
 8008e58:	68d9      	ldr	r1, [r3, #12]
 8008e5a:	0609      	lsls	r1, r1, #24
 8008e5c:	d50e      	bpl.n	8008e7c <TIM7_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008e5e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008e62:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008e64:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008e66:	2101      	movs	r1, #1
		goto EventCB;
 8008e68:	e00d      	b.n	8008e86 <TIM7_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008e6a:	68d9      	ldr	r1, [r3, #12]
 8008e6c:	06c9      	lsls	r1, r1, #27
 8008e6e:	d5ea      	bpl.n	8008e46 <TIM7_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008e70:	f06f 0110 	mvn.w	r1, #16
 8008e74:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008e76:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008e78:	2106      	movs	r1, #6
		goto EventCB;
 8008e7a:	e004      	b.n	8008e86 <TIM7_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008e7c:	6919      	ldr	r1, [r3, #16]
 8008e7e:	0648      	lsls	r0, r1, #25
 8008e80:	d40c      	bmi.n	8008e9c <TIM7_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008e82:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008e84:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008e86:	6813      	ldr	r3, [r2, #0]
 8008e88:	b10b      	cbz	r3, 8008e8e <TIM7_IRQHandler+0x7a>
 8008e8a:	6892      	ldr	r2, [r2, #8]
 8008e8c:	4718      	bx	r3
#if defined(TIM7)
tim tim_7(TIM7);
tim_t tim7 = &tim_7;
void TIM7_IRQHandler(void){
	TIM_IRQHandler(&tim_7);
}
 8008e8e:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008e90:	f06f 0102 	mvn.w	r1, #2
 8008e94:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008e96:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008e98:	2103      	movs	r1, #3
		goto EventCB;
 8008e9a:	e7f4      	b.n	8008e86 <TIM7_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008e9c:	68d9      	ldr	r1, [r3, #12]
 8008e9e:	0649      	lsls	r1, r1, #25
 8008ea0:	d5ef      	bpl.n	8008e82 <TIM7_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008ea2:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008ea6:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ea8:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008eaa:	2102      	movs	r1, #2
		goto EventCB;
 8008eac:	e7eb      	b.n	8008e86 <TIM7_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008eae:	f06f 0104 	mvn.w	r1, #4
 8008eb2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008eb4:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008eb6:	2104      	movs	r1, #4
		goto EventCB;
 8008eb8:	e7e5      	b.n	8008e86 <TIM7_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008eba:	f06f 0108 	mvn.w	r1, #8
 8008ebe:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008ec0:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008ec2:	2105      	movs	r1, #5
		goto EventCB;
 8008ec4:	e7df      	b.n	8008e86 <TIM7_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008ec6:	f06f 0101 	mvn.w	r1, #1
 8008eca:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ecc:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008ece:	2100      	movs	r1, #0
		goto EventCB;
 8008ed0:	e7d9      	b.n	8008e86 <TIM7_IRQHandler+0x72>
 8008ed2:	bf00      	nop
 8008ed4:	2000b86c 	.word	0x2000b86c

08008ed8 <TIM8_CC_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008ed8:	4a2f      	ldr	r2, [pc, #188]	; (8008f98 <TIM8_CC_IRQHandler+0xc0>)
 8008eda:	6853      	ldr	r3, [r2, #4]
 8008edc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008ede:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008ee0:	6919      	ldr	r1, [r3, #16]
 8008ee2:	0788      	lsls	r0, r1, #30
 8008ee4:	d502      	bpl.n	8008eec <TIM8_CC_IRQHandler+0x14>
 8008ee6:	68d9      	ldr	r1, [r3, #12]
 8008ee8:	0789      	lsls	r1, r1, #30
 8008eea:	d433      	bmi.n	8008f54 <TIM8_CC_IRQHandler+0x7c>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008eec:	6919      	ldr	r1, [r3, #16]
 8008eee:	0748      	lsls	r0, r1, #29
 8008ef0:	d502      	bpl.n	8008ef8 <TIM8_CC_IRQHandler+0x20>
 8008ef2:	68d9      	ldr	r1, [r3, #12]
 8008ef4:	0749      	lsls	r1, r1, #29
 8008ef6:	d43c      	bmi.n	8008f72 <TIM8_CC_IRQHandler+0x9a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008ef8:	6919      	ldr	r1, [r3, #16]
 8008efa:	0708      	lsls	r0, r1, #28
 8008efc:	d502      	bpl.n	8008f04 <TIM8_CC_IRQHandler+0x2c>
 8008efe:	68d9      	ldr	r1, [r3, #12]
 8008f00:	0709      	lsls	r1, r1, #28
 8008f02:	d43c      	bmi.n	8008f7e <TIM8_CC_IRQHandler+0xa6>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008f04:	6919      	ldr	r1, [r3, #16]
 8008f06:	06c8      	lsls	r0, r1, #27
 8008f08:	d411      	bmi.n	8008f2e <TIM8_CC_IRQHandler+0x56>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008f0a:	6919      	ldr	r1, [r3, #16]
 8008f0c:	07c8      	lsls	r0, r1, #31
 8008f0e:	d502      	bpl.n	8008f16 <TIM8_CC_IRQHandler+0x3e>
 8008f10:	68d9      	ldr	r1, [r3, #12]
 8008f12:	07c9      	lsls	r1, r1, #31
 8008f14:	d439      	bmi.n	8008f8a <TIM8_CC_IRQHandler+0xb2>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008f16:	6919      	ldr	r1, [r3, #16]
 8008f18:	0608      	lsls	r0, r1, #24
 8008f1a:	d511      	bpl.n	8008f40 <TIM8_CC_IRQHandler+0x68>
 8008f1c:	68d9      	ldr	r1, [r3, #12]
 8008f1e:	0609      	lsls	r1, r1, #24
 8008f20:	d50e      	bpl.n	8008f40 <TIM8_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008f22:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008f26:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f28:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008f2a:	2101      	movs	r1, #1
		goto EventCB;
 8008f2c:	e00d      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008f2e:	68d9      	ldr	r1, [r3, #12]
 8008f30:	06c9      	lsls	r1, r1, #27
 8008f32:	d5ea      	bpl.n	8008f0a <TIM8_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008f34:	f06f 0110 	mvn.w	r1, #16
 8008f38:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8008f3a:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8008f3c:	2106      	movs	r1, #6
		goto EventCB;
 8008f3e:	e004      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008f40:	6919      	ldr	r1, [r3, #16]
 8008f42:	0648      	lsls	r0, r1, #25
 8008f44:	d40c      	bmi.n	8008f60 <TIM8_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f46:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8008f48:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8008f4a:	6813      	ldr	r3, [r2, #0]
 8008f4c:	b10b      	cbz	r3, 8008f52 <TIM8_CC_IRQHandler+0x7a>
 8008f4e:	6892      	ldr	r2, [r2, #8]
 8008f50:	4718      	bx	r3
#if defined(TIM8)
tim tim_8(TIM8);
tim_t tim8 = &tim_8;
void TIM8_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_8);
}
 8008f52:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8008f54:	f06f 0102 	mvn.w	r1, #2
 8008f58:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8008f5a:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8008f5c:	2103      	movs	r1, #3
		goto EventCB;
 8008f5e:	e7f4      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8008f60:	68d9      	ldr	r1, [r3, #12]
 8008f62:	0649      	lsls	r1, r1, #25
 8008f64:	d5ef      	bpl.n	8008f46 <TIM8_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8008f66:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8008f6a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f6c:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8008f6e:	2102      	movs	r1, #2
		goto EventCB;
 8008f70:	e7eb      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8008f72:	f06f 0104 	mvn.w	r1, #4
 8008f76:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008f78:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008f7a:	2104      	movs	r1, #4
		goto EventCB;
 8008f7c:	e7e5      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008f7e:	f06f 0108 	mvn.w	r1, #8
 8008f82:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8008f84:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8008f86:	2105      	movs	r1, #5
		goto EventCB;
 8008f88:	e7df      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008f8a:	f06f 0101 	mvn.w	r1, #1
 8008f8e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008f90:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8008f92:	2100      	movs	r1, #0
		goto EventCB;
 8008f94:	e7d9      	b.n	8008f4a <TIM8_CC_IRQHandler+0x72>
 8008f96:	bf00      	nop
 8008f98:	2000b884 	.word	0x2000b884

08008f9c <TIM1_BRK_TIM9_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8008f9c:	4a60      	ldr	r2, [pc, #384]	; (8009120 <TIM1_BRK_TIM9_IRQHandler+0x184>)
 8008f9e:	6853      	ldr	r3, [r2, #4]
 8008fa0:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM8) */

#if defined(TIM9) && defined(TIM1)
tim tim_9(TIM9);
tim_t tim9 = &tim_9;
void TIM1_BRK_TIM9_IRQHandler(void){
 8008fa2:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 8008fa4:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008fa6:	6919      	ldr	r1, [r3, #16]
 8008fa8:	0789      	lsls	r1, r1, #30
 8008faa:	d502      	bpl.n	8008fb2 <TIM1_BRK_TIM9_IRQHandler+0x16>
 8008fac:	68d9      	ldr	r1, [r3, #12]
 8008fae:	078c      	lsls	r4, r1, #30
 8008fb0:	d46d      	bmi.n	800908e <TIM1_BRK_TIM9_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008fb2:	6919      	ldr	r1, [r3, #16]
 8008fb4:	0748      	lsls	r0, r1, #29
 8008fb6:	d502      	bpl.n	8008fbe <TIM1_BRK_TIM9_IRQHandler+0x22>
 8008fb8:	68d9      	ldr	r1, [r3, #12]
 8008fba:	0749      	lsls	r1, r1, #29
 8008fbc:	d47f      	bmi.n	80090be <TIM1_BRK_TIM9_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008fbe:	6919      	ldr	r1, [r3, #16]
 8008fc0:	070c      	lsls	r4, r1, #28
 8008fc2:	d502      	bpl.n	8008fca <TIM1_BRK_TIM9_IRQHandler+0x2e>
 8008fc4:	68d9      	ldr	r1, [r3, #12]
 8008fc6:	0708      	lsls	r0, r1, #28
 8008fc8:	d47f      	bmi.n	80090ca <TIM1_BRK_TIM9_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008fca:	6919      	ldr	r1, [r3, #16]
 8008fcc:	06c9      	lsls	r1, r1, #27
 8008fce:	d412      	bmi.n	8008ff6 <TIM1_BRK_TIM9_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008fd0:	6919      	ldr	r1, [r3, #16]
 8008fd2:	07c8      	lsls	r0, r1, #31
 8008fd4:	d503      	bpl.n	8008fde <TIM1_BRK_TIM9_IRQHandler+0x42>
 8008fd6:	68d9      	ldr	r1, [r3, #12]
 8008fd8:	07c9      	lsls	r1, r1, #31
 8008fda:	f100 8082 	bmi.w	80090e2 <TIM1_BRK_TIM9_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8008fde:	6919      	ldr	r1, [r3, #16]
 8008fe0:	060c      	lsls	r4, r1, #24
 8008fe2:	d511      	bpl.n	8009008 <TIM1_BRK_TIM9_IRQHandler+0x6c>
 8008fe4:	68d9      	ldr	r1, [r3, #12]
 8008fe6:	0608      	lsls	r0, r1, #24
 8008fe8:	d50e      	bpl.n	8009008 <TIM1_BRK_TIM9_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8008fea:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8008fee:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008ff0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8008ff2:	2101      	movs	r1, #1
		goto EventCB;
 8008ff4:	e00d      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8008ff6:	68d9      	ldr	r1, [r3, #12]
 8008ff8:	06cc      	lsls	r4, r1, #27
 8008ffa:	d5e9      	bpl.n	8008fd0 <TIM1_BRK_TIM9_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8008ffc:	f06f 0110 	mvn.w	r1, #16
 8009000:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009002:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009004:	2106      	movs	r1, #6
		goto EventCB;
 8009006:	e004      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009008:	6919      	ldr	r1, [r3, #16]
 800900a:	0649      	lsls	r1, r1, #25
 800900c:	d445      	bmi.n	800909a <TIM1_BRK_TIM9_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 800900e:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009010:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	b10b      	cbz	r3, 800901a <TIM1_BRK_TIM9_IRQHandler+0x7e>
 8009016:	6892      	ldr	r2, [r2, #8]
 8009018:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 800901a:	4a42      	ldr	r2, [pc, #264]	; (8009124 <TIM1_BRK_TIM9_IRQHandler+0x188>)
 800901c:	6853      	ldr	r3, [r2, #4]
 800901e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009020:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8009022:	6919      	ldr	r1, [r3, #16]
 8009024:	0788      	lsls	r0, r1, #30
 8009026:	d502      	bpl.n	800902e <TIM1_BRK_TIM9_IRQHandler+0x92>
 8009028:	68d9      	ldr	r1, [r3, #12]
 800902a:	0789      	lsls	r1, r1, #30
 800902c:	d465      	bmi.n	80090fa <TIM1_BRK_TIM9_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800902e:	6919      	ldr	r1, [r3, #16]
 8009030:	074c      	lsls	r4, r1, #29
 8009032:	d502      	bpl.n	800903a <TIM1_BRK_TIM9_IRQHandler+0x9e>
 8009034:	68d9      	ldr	r1, [r3, #12]
 8009036:	0748      	lsls	r0, r1, #29
 8009038:	d465      	bmi.n	8009106 <TIM1_BRK_TIM9_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800903a:	6919      	ldr	r1, [r3, #16]
 800903c:	0709      	lsls	r1, r1, #28
 800903e:	d502      	bpl.n	8009046 <TIM1_BRK_TIM9_IRQHandler+0xaa>
 8009040:	68d9      	ldr	r1, [r3, #12]
 8009042:	070c      	lsls	r4, r1, #28
 8009044:	d465      	bmi.n	8009112 <TIM1_BRK_TIM9_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009046:	6919      	ldr	r1, [r3, #16]
 8009048:	06c8      	lsls	r0, r1, #27
 800904a:	d502      	bpl.n	8009052 <TIM1_BRK_TIM9_IRQHandler+0xb6>
 800904c:	68d9      	ldr	r1, [r3, #12]
 800904e:	06c9      	lsls	r1, r1, #27
 8009050:	d441      	bmi.n	80090d6 <TIM1_BRK_TIM9_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009052:	6919      	ldr	r1, [r3, #16]
 8009054:	07cc      	lsls	r4, r1, #31
 8009056:	d502      	bpl.n	800905e <TIM1_BRK_TIM9_IRQHandler+0xc2>
 8009058:	68d9      	ldr	r1, [r3, #12]
 800905a:	07c8      	lsls	r0, r1, #31
 800905c:	d447      	bmi.n	80090ee <TIM1_BRK_TIM9_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800905e:	6919      	ldr	r1, [r3, #16]
 8009060:	0609      	lsls	r1, r1, #24
 8009062:	d508      	bpl.n	8009076 <TIM1_BRK_TIM9_IRQHandler+0xda>
 8009064:	68d9      	ldr	r1, [r3, #12]
 8009066:	060c      	lsls	r4, r1, #24
 8009068:	d505      	bpl.n	8009076 <TIM1_BRK_TIM9_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800906a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800906e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009070:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009072:	2101      	movs	r1, #1
		goto EventCB;
 8009074:	e004      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009076:	6919      	ldr	r1, [r3, #16]
 8009078:	0648      	lsls	r0, r1, #25
 800907a:	d417      	bmi.n	80090ac <TIM1_BRK_TIM9_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 800907c:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800907e:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009080:	6813      	ldr	r3, [r2, #0]
 8009082:	b11b      	cbz	r3, 800908c <TIM1_BRK_TIM9_IRQHandler+0xf0>
#if USE_TIM1
	TIM_IRQHandler(&tim_1);
#endif
	TIM_IRQHandler(&tim_9);
}
 8009084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009088:	6892      	ldr	r2, [r2, #8]
 800908a:	4718      	bx	r3
}
 800908c:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800908e:	f06f 0102 	mvn.w	r1, #2
 8009092:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009094:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009096:	2103      	movs	r1, #3
		goto EventCB;
 8009098:	e7bb      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800909a:	68d9      	ldr	r1, [r3, #12]
 800909c:	064c      	lsls	r4, r1, #25
 800909e:	d5b6      	bpl.n	800900e <TIM1_BRK_TIM9_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80090a0:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80090a4:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80090a6:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80090a8:	2102      	movs	r1, #2
		goto EventCB;
 80090aa:	e7b2      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80090ac:	68d9      	ldr	r1, [r3, #12]
 80090ae:	0649      	lsls	r1, r1, #25
 80090b0:	d5e4      	bpl.n	800907c <TIM1_BRK_TIM9_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80090b2:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80090b6:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80090b8:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80090ba:	2102      	movs	r1, #2
		goto EventCB;
 80090bc:	e7e0      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80090be:	f06f 0104 	mvn.w	r1, #4
 80090c2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80090c4:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80090c6:	2104      	movs	r1, #4
		goto EventCB;
 80090c8:	e7a3      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80090ca:	f06f 0108 	mvn.w	r1, #8
 80090ce:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80090d0:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80090d2:	2105      	movs	r1, #5
		goto EventCB;
 80090d4:	e79d      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80090d6:	f06f 0110 	mvn.w	r1, #16
 80090da:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80090dc:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80090de:	2106      	movs	r1, #6
		goto EventCB;
 80090e0:	e7ce      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80090e2:	f06f 0101 	mvn.w	r1, #1
 80090e6:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80090e8:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80090ea:	2100      	movs	r1, #0
		goto EventCB;
 80090ec:	e791      	b.n	8009012 <TIM1_BRK_TIM9_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80090ee:	f06f 0101 	mvn.w	r1, #1
 80090f2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80090f4:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80090f6:	2100      	movs	r1, #0
		goto EventCB;
 80090f8:	e7c2      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80090fa:	f06f 0102 	mvn.w	r1, #2
 80090fe:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009100:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009102:	2103      	movs	r1, #3
		goto EventCB;
 8009104:	e7bc      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009106:	f06f 0104 	mvn.w	r1, #4
 800910a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 800910c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800910e:	2104      	movs	r1, #4
		goto EventCB;
 8009110:	e7b6      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009112:	f06f 0108 	mvn.w	r1, #8
 8009116:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009118:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800911a:	2105      	movs	r1, #5
		goto EventCB;
 800911c:	e7b0      	b.n	8009080 <TIM1_BRK_TIM9_IRQHandler+0xe4>
 800911e:	bf00      	nop
 8009120:	2000b764 	.word	0x2000b764
 8009124:	2000b89c 	.word	0x2000b89c

08009128 <TIM1_UP_TIM10_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8009128:	4a60      	ldr	r2, [pc, #384]	; (80092ac <TIM1_UP_TIM10_IRQHandler+0x184>)
 800912a:	6853      	ldr	r3, [r2, #4]
 800912c:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM9) && defined(TIM1) */

#if defined(TIM10) && defined(TIM1)
tim tim_10(TIM10);
tim_t tim10 = &tim_10;
void TIM1_UP_TIM10_IRQHandler(void){
 800912e:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 8009130:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8009132:	6919      	ldr	r1, [r3, #16]
 8009134:	0789      	lsls	r1, r1, #30
 8009136:	d502      	bpl.n	800913e <TIM1_UP_TIM10_IRQHandler+0x16>
 8009138:	68d9      	ldr	r1, [r3, #12]
 800913a:	078c      	lsls	r4, r1, #30
 800913c:	d46d      	bmi.n	800921a <TIM1_UP_TIM10_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800913e:	6919      	ldr	r1, [r3, #16]
 8009140:	0748      	lsls	r0, r1, #29
 8009142:	d502      	bpl.n	800914a <TIM1_UP_TIM10_IRQHandler+0x22>
 8009144:	68d9      	ldr	r1, [r3, #12]
 8009146:	0749      	lsls	r1, r1, #29
 8009148:	d47f      	bmi.n	800924a <TIM1_UP_TIM10_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800914a:	6919      	ldr	r1, [r3, #16]
 800914c:	070c      	lsls	r4, r1, #28
 800914e:	d502      	bpl.n	8009156 <TIM1_UP_TIM10_IRQHandler+0x2e>
 8009150:	68d9      	ldr	r1, [r3, #12]
 8009152:	0708      	lsls	r0, r1, #28
 8009154:	d47f      	bmi.n	8009256 <TIM1_UP_TIM10_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009156:	6919      	ldr	r1, [r3, #16]
 8009158:	06c9      	lsls	r1, r1, #27
 800915a:	d412      	bmi.n	8009182 <TIM1_UP_TIM10_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800915c:	6919      	ldr	r1, [r3, #16]
 800915e:	07c8      	lsls	r0, r1, #31
 8009160:	d503      	bpl.n	800916a <TIM1_UP_TIM10_IRQHandler+0x42>
 8009162:	68d9      	ldr	r1, [r3, #12]
 8009164:	07c9      	lsls	r1, r1, #31
 8009166:	f100 8082 	bmi.w	800926e <TIM1_UP_TIM10_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800916a:	6919      	ldr	r1, [r3, #16]
 800916c:	060c      	lsls	r4, r1, #24
 800916e:	d511      	bpl.n	8009194 <TIM1_UP_TIM10_IRQHandler+0x6c>
 8009170:	68d9      	ldr	r1, [r3, #12]
 8009172:	0608      	lsls	r0, r1, #24
 8009174:	d50e      	bpl.n	8009194 <TIM1_UP_TIM10_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009176:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800917a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800917c:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800917e:	2101      	movs	r1, #1
		goto EventCB;
 8009180:	e00d      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009182:	68d9      	ldr	r1, [r3, #12]
 8009184:	06cc      	lsls	r4, r1, #27
 8009186:	d5e9      	bpl.n	800915c <TIM1_UP_TIM10_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009188:	f06f 0110 	mvn.w	r1, #16
 800918c:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800918e:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009190:	2106      	movs	r1, #6
		goto EventCB;
 8009192:	e004      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009194:	6919      	ldr	r1, [r3, #16]
 8009196:	0649      	lsls	r1, r1, #25
 8009198:	d445      	bmi.n	8009226 <TIM1_UP_TIM10_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 800919a:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800919c:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800919e:	6813      	ldr	r3, [r2, #0]
 80091a0:	b10b      	cbz	r3, 80091a6 <TIM1_UP_TIM10_IRQHandler+0x7e>
 80091a2:	6892      	ldr	r2, [r2, #8]
 80091a4:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 80091a6:	4a42      	ldr	r2, [pc, #264]	; (80092b0 <TIM1_UP_TIM10_IRQHandler+0x188>)
 80091a8:	6853      	ldr	r3, [r2, #4]
 80091aa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80091ac:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80091ae:	6919      	ldr	r1, [r3, #16]
 80091b0:	0788      	lsls	r0, r1, #30
 80091b2:	d502      	bpl.n	80091ba <TIM1_UP_TIM10_IRQHandler+0x92>
 80091b4:	68d9      	ldr	r1, [r3, #12]
 80091b6:	0789      	lsls	r1, r1, #30
 80091b8:	d465      	bmi.n	8009286 <TIM1_UP_TIM10_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80091ba:	6919      	ldr	r1, [r3, #16]
 80091bc:	074c      	lsls	r4, r1, #29
 80091be:	d502      	bpl.n	80091c6 <TIM1_UP_TIM10_IRQHandler+0x9e>
 80091c0:	68d9      	ldr	r1, [r3, #12]
 80091c2:	0748      	lsls	r0, r1, #29
 80091c4:	d465      	bmi.n	8009292 <TIM1_UP_TIM10_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80091c6:	6919      	ldr	r1, [r3, #16]
 80091c8:	0709      	lsls	r1, r1, #28
 80091ca:	d502      	bpl.n	80091d2 <TIM1_UP_TIM10_IRQHandler+0xaa>
 80091cc:	68d9      	ldr	r1, [r3, #12]
 80091ce:	070c      	lsls	r4, r1, #28
 80091d0:	d465      	bmi.n	800929e <TIM1_UP_TIM10_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80091d2:	6919      	ldr	r1, [r3, #16]
 80091d4:	06c8      	lsls	r0, r1, #27
 80091d6:	d502      	bpl.n	80091de <TIM1_UP_TIM10_IRQHandler+0xb6>
 80091d8:	68d9      	ldr	r1, [r3, #12]
 80091da:	06c9      	lsls	r1, r1, #27
 80091dc:	d441      	bmi.n	8009262 <TIM1_UP_TIM10_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80091de:	6919      	ldr	r1, [r3, #16]
 80091e0:	07cc      	lsls	r4, r1, #31
 80091e2:	d502      	bpl.n	80091ea <TIM1_UP_TIM10_IRQHandler+0xc2>
 80091e4:	68d9      	ldr	r1, [r3, #12]
 80091e6:	07c8      	lsls	r0, r1, #31
 80091e8:	d447      	bmi.n	800927a <TIM1_UP_TIM10_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 80091ea:	6919      	ldr	r1, [r3, #16]
 80091ec:	0609      	lsls	r1, r1, #24
 80091ee:	d508      	bpl.n	8009202 <TIM1_UP_TIM10_IRQHandler+0xda>
 80091f0:	68d9      	ldr	r1, [r3, #12]
 80091f2:	060c      	lsls	r4, r1, #24
 80091f4:	d505      	bpl.n	8009202 <TIM1_UP_TIM10_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 80091f6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80091fa:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80091fc:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80091fe:	2101      	movs	r1, #1
		goto EventCB;
 8009200:	e004      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009202:	6919      	ldr	r1, [r3, #16]
 8009204:	0648      	lsls	r0, r1, #25
 8009206:	d417      	bmi.n	8009238 <TIM1_UP_TIM10_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009208:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800920a:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800920c:	6813      	ldr	r3, [r2, #0]
 800920e:	b11b      	cbz	r3, 8009218 <TIM1_UP_TIM10_IRQHandler+0xf0>
#if USE_TIM1
	TIM_IRQHandler(&tim_1);
#endif
	TIM_IRQHandler(&tim_10);
}
 8009210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009214:	6892      	ldr	r2, [r2, #8]
 8009216:	4718      	bx	r3
}
 8009218:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800921a:	f06f 0102 	mvn.w	r1, #2
 800921e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009220:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009222:	2103      	movs	r1, #3
		goto EventCB;
 8009224:	e7bb      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009226:	68d9      	ldr	r1, [r3, #12]
 8009228:	064c      	lsls	r4, r1, #25
 800922a:	d5b6      	bpl.n	800919a <TIM1_UP_TIM10_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 800922c:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009230:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009232:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009234:	2102      	movs	r1, #2
		goto EventCB;
 8009236:	e7b2      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009238:	68d9      	ldr	r1, [r3, #12]
 800923a:	0649      	lsls	r1, r1, #25
 800923c:	d5e4      	bpl.n	8009208 <TIM1_UP_TIM10_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 800923e:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009242:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009244:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009246:	2102      	movs	r1, #2
		goto EventCB;
 8009248:	e7e0      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800924a:	f06f 0104 	mvn.w	r1, #4
 800924e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009250:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009252:	2104      	movs	r1, #4
		goto EventCB;
 8009254:	e7a3      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009256:	f06f 0108 	mvn.w	r1, #8
 800925a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 800925c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800925e:	2105      	movs	r1, #5
		goto EventCB;
 8009260:	e79d      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009262:	f06f 0110 	mvn.w	r1, #16
 8009266:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009268:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800926a:	2106      	movs	r1, #6
		goto EventCB;
 800926c:	e7ce      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800926e:	f06f 0101 	mvn.w	r1, #1
 8009272:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009274:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009276:	2100      	movs	r1, #0
		goto EventCB;
 8009278:	e791      	b.n	800919e <TIM1_UP_TIM10_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800927a:	f06f 0101 	mvn.w	r1, #1
 800927e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009280:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009282:	2100      	movs	r1, #0
		goto EventCB;
 8009284:	e7c2      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009286:	f06f 0102 	mvn.w	r1, #2
 800928a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 800928c:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800928e:	2103      	movs	r1, #3
		goto EventCB;
 8009290:	e7bc      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009292:	f06f 0104 	mvn.w	r1, #4
 8009296:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009298:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800929a:	2104      	movs	r1, #4
		goto EventCB;
 800929c:	e7b6      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800929e:	f06f 0108 	mvn.w	r1, #8
 80092a2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80092a4:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80092a6:	2105      	movs	r1, #5
		goto EventCB;
 80092a8:	e7b0      	b.n	800920c <TIM1_UP_TIM10_IRQHandler+0xe4>
 80092aa:	bf00      	nop
 80092ac:	2000b764 	.word	0x2000b764
 80092b0:	2000b77c 	.word	0x2000b77c

080092b4 <TIM1_TRG_COM_TIM11_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 80092b4:	4a60      	ldr	r2, [pc, #384]	; (8009438 <TIM1_TRG_COM_TIM11_IRQHandler+0x184>)
 80092b6:	6853      	ldr	r3, [r2, #4]
 80092b8:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM10) && defined(TIM1) */

#if defined(TIM11) && defined(TIM1)
tim tim_11(TIM11);
tim_t tim11 = &tim_11;
void TIM1_TRG_COM_TIM11_IRQHandler(void){
 80092ba:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 80092bc:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80092be:	6919      	ldr	r1, [r3, #16]
 80092c0:	0789      	lsls	r1, r1, #30
 80092c2:	d502      	bpl.n	80092ca <TIM1_TRG_COM_TIM11_IRQHandler+0x16>
 80092c4:	68d9      	ldr	r1, [r3, #12]
 80092c6:	078c      	lsls	r4, r1, #30
 80092c8:	d46d      	bmi.n	80093a6 <TIM1_TRG_COM_TIM11_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80092ca:	6919      	ldr	r1, [r3, #16]
 80092cc:	0748      	lsls	r0, r1, #29
 80092ce:	d502      	bpl.n	80092d6 <TIM1_TRG_COM_TIM11_IRQHandler+0x22>
 80092d0:	68d9      	ldr	r1, [r3, #12]
 80092d2:	0749      	lsls	r1, r1, #29
 80092d4:	d47f      	bmi.n	80093d6 <TIM1_TRG_COM_TIM11_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80092d6:	6919      	ldr	r1, [r3, #16]
 80092d8:	070c      	lsls	r4, r1, #28
 80092da:	d502      	bpl.n	80092e2 <TIM1_TRG_COM_TIM11_IRQHandler+0x2e>
 80092dc:	68d9      	ldr	r1, [r3, #12]
 80092de:	0708      	lsls	r0, r1, #28
 80092e0:	d47f      	bmi.n	80093e2 <TIM1_TRG_COM_TIM11_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80092e2:	6919      	ldr	r1, [r3, #16]
 80092e4:	06c9      	lsls	r1, r1, #27
 80092e6:	d412      	bmi.n	800930e <TIM1_TRG_COM_TIM11_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80092e8:	6919      	ldr	r1, [r3, #16]
 80092ea:	07c8      	lsls	r0, r1, #31
 80092ec:	d503      	bpl.n	80092f6 <TIM1_TRG_COM_TIM11_IRQHandler+0x42>
 80092ee:	68d9      	ldr	r1, [r3, #12]
 80092f0:	07c9      	lsls	r1, r1, #31
 80092f2:	f100 8082 	bmi.w	80093fa <TIM1_TRG_COM_TIM11_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 80092f6:	6919      	ldr	r1, [r3, #16]
 80092f8:	060c      	lsls	r4, r1, #24
 80092fa:	d511      	bpl.n	8009320 <TIM1_TRG_COM_TIM11_IRQHandler+0x6c>
 80092fc:	68d9      	ldr	r1, [r3, #12]
 80092fe:	0608      	lsls	r0, r1, #24
 8009300:	d50e      	bpl.n	8009320 <TIM1_TRG_COM_TIM11_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009302:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009306:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009308:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800930a:	2101      	movs	r1, #1
		goto EventCB;
 800930c:	e00d      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800930e:	68d9      	ldr	r1, [r3, #12]
 8009310:	06cc      	lsls	r4, r1, #27
 8009312:	d5e9      	bpl.n	80092e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009314:	f06f 0110 	mvn.w	r1, #16
 8009318:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800931a:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800931c:	2106      	movs	r1, #6
		goto EventCB;
 800931e:	e004      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009320:	6919      	ldr	r1, [r3, #16]
 8009322:	0649      	lsls	r1, r1, #25
 8009324:	d445      	bmi.n	80093b2 <TIM1_TRG_COM_TIM11_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009326:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009328:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800932a:	6813      	ldr	r3, [r2, #0]
 800932c:	b10b      	cbz	r3, 8009332 <TIM1_TRG_COM_TIM11_IRQHandler+0x7e>
 800932e:	6892      	ldr	r2, [r2, #8]
 8009330:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 8009332:	4a42      	ldr	r2, [pc, #264]	; (800943c <TIM1_TRG_COM_TIM11_IRQHandler+0x188>)
 8009334:	6853      	ldr	r3, [r2, #4]
 8009336:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009338:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 800933a:	6919      	ldr	r1, [r3, #16]
 800933c:	0788      	lsls	r0, r1, #30
 800933e:	d502      	bpl.n	8009346 <TIM1_TRG_COM_TIM11_IRQHandler+0x92>
 8009340:	68d9      	ldr	r1, [r3, #12]
 8009342:	0789      	lsls	r1, r1, #30
 8009344:	d465      	bmi.n	8009412 <TIM1_TRG_COM_TIM11_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8009346:	6919      	ldr	r1, [r3, #16]
 8009348:	074c      	lsls	r4, r1, #29
 800934a:	d502      	bpl.n	8009352 <TIM1_TRG_COM_TIM11_IRQHandler+0x9e>
 800934c:	68d9      	ldr	r1, [r3, #12]
 800934e:	0748      	lsls	r0, r1, #29
 8009350:	d465      	bmi.n	800941e <TIM1_TRG_COM_TIM11_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8009352:	6919      	ldr	r1, [r3, #16]
 8009354:	0709      	lsls	r1, r1, #28
 8009356:	d502      	bpl.n	800935e <TIM1_TRG_COM_TIM11_IRQHandler+0xaa>
 8009358:	68d9      	ldr	r1, [r3, #12]
 800935a:	070c      	lsls	r4, r1, #28
 800935c:	d465      	bmi.n	800942a <TIM1_TRG_COM_TIM11_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800935e:	6919      	ldr	r1, [r3, #16]
 8009360:	06c8      	lsls	r0, r1, #27
 8009362:	d502      	bpl.n	800936a <TIM1_TRG_COM_TIM11_IRQHandler+0xb6>
 8009364:	68d9      	ldr	r1, [r3, #12]
 8009366:	06c9      	lsls	r1, r1, #27
 8009368:	d441      	bmi.n	80093ee <TIM1_TRG_COM_TIM11_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800936a:	6919      	ldr	r1, [r3, #16]
 800936c:	07cc      	lsls	r4, r1, #31
 800936e:	d502      	bpl.n	8009376 <TIM1_TRG_COM_TIM11_IRQHandler+0xc2>
 8009370:	68d9      	ldr	r1, [r3, #12]
 8009372:	07c8      	lsls	r0, r1, #31
 8009374:	d447      	bmi.n	8009406 <TIM1_TRG_COM_TIM11_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8009376:	6919      	ldr	r1, [r3, #16]
 8009378:	0609      	lsls	r1, r1, #24
 800937a:	d508      	bpl.n	800938e <TIM1_TRG_COM_TIM11_IRQHandler+0xda>
 800937c:	68d9      	ldr	r1, [r3, #12]
 800937e:	060c      	lsls	r4, r1, #24
 8009380:	d505      	bpl.n	800938e <TIM1_TRG_COM_TIM11_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009382:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009386:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009388:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800938a:	2101      	movs	r1, #1
		goto EventCB;
 800938c:	e004      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800938e:	6919      	ldr	r1, [r3, #16]
 8009390:	0648      	lsls	r0, r1, #25
 8009392:	d417      	bmi.n	80093c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009394:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009396:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009398:	6813      	ldr	r3, [r2, #0]
 800939a:	b11b      	cbz	r3, 80093a4 <TIM1_TRG_COM_TIM11_IRQHandler+0xf0>
#if USE_TIM1
	TIM_IRQHandler(&tim_1);
#endif
	TIM_IRQHandler(&tim_11);
}
 800939c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80093a0:	6892      	ldr	r2, [r2, #8]
 80093a2:	4718      	bx	r3
}
 80093a4:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80093a6:	f06f 0102 	mvn.w	r1, #2
 80093aa:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80093ac:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80093ae:	2103      	movs	r1, #3
		goto EventCB;
 80093b0:	e7bb      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80093b2:	68d9      	ldr	r1, [r3, #12]
 80093b4:	064c      	lsls	r4, r1, #25
 80093b6:	d5b6      	bpl.n	8009326 <TIM1_TRG_COM_TIM11_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80093b8:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80093bc:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80093be:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80093c0:	2102      	movs	r1, #2
		goto EventCB;
 80093c2:	e7b2      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80093c4:	68d9      	ldr	r1, [r3, #12]
 80093c6:	0649      	lsls	r1, r1, #25
 80093c8:	d5e4      	bpl.n	8009394 <TIM1_TRG_COM_TIM11_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80093ca:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80093ce:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80093d0:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80093d2:	2102      	movs	r1, #2
		goto EventCB;
 80093d4:	e7e0      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80093d6:	f06f 0104 	mvn.w	r1, #4
 80093da:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80093dc:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80093de:	2104      	movs	r1, #4
		goto EventCB;
 80093e0:	e7a3      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80093e2:	f06f 0108 	mvn.w	r1, #8
 80093e6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80093e8:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80093ea:	2105      	movs	r1, #5
		goto EventCB;
 80093ec:	e79d      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80093ee:	f06f 0110 	mvn.w	r1, #16
 80093f2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80093f4:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80093f6:	2106      	movs	r1, #6
		goto EventCB;
 80093f8:	e7ce      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80093fa:	f06f 0101 	mvn.w	r1, #1
 80093fe:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009400:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009402:	2100      	movs	r1, #0
		goto EventCB;
 8009404:	e791      	b.n	800932a <TIM1_TRG_COM_TIM11_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009406:	f06f 0101 	mvn.w	r1, #1
 800940a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800940c:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800940e:	2100      	movs	r1, #0
		goto EventCB;
 8009410:	e7c2      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009412:	f06f 0102 	mvn.w	r1, #2
 8009416:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009418:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800941a:	2103      	movs	r1, #3
		goto EventCB;
 800941c:	e7bc      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800941e:	f06f 0104 	mvn.w	r1, #4
 8009422:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009424:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009426:	2104      	movs	r1, #4
		goto EventCB;
 8009428:	e7b6      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800942a:	f06f 0108 	mvn.w	r1, #8
 800942e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009430:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009432:	2105      	movs	r1, #5
		goto EventCB;
 8009434:	e7b0      	b.n	8009398 <TIM1_TRG_COM_TIM11_IRQHandler+0xe4>
 8009436:	bf00      	nop
 8009438:	2000b764 	.word	0x2000b764
 800943c:	2000b794 	.word	0x2000b794

08009440 <TIM8_BRK_TIM12_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8009440:	4a60      	ldr	r2, [pc, #384]	; (80095c4 <TIM8_BRK_TIM12_IRQHandler+0x184>)
 8009442:	6853      	ldr	r3, [r2, #4]
 8009444:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM11) && defined(TIM1) */

#if defined(TIM12) && defined(TIM8)
tim tim_12(TIM12);
tim_t tim12 = &tim_12;
void TIM8_BRK_TIM12_IRQHandler(void){
 8009446:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 8009448:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 800944a:	6919      	ldr	r1, [r3, #16]
 800944c:	0789      	lsls	r1, r1, #30
 800944e:	d502      	bpl.n	8009456 <TIM8_BRK_TIM12_IRQHandler+0x16>
 8009450:	68d9      	ldr	r1, [r3, #12]
 8009452:	078c      	lsls	r4, r1, #30
 8009454:	d46d      	bmi.n	8009532 <TIM8_BRK_TIM12_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8009456:	6919      	ldr	r1, [r3, #16]
 8009458:	0748      	lsls	r0, r1, #29
 800945a:	d502      	bpl.n	8009462 <TIM8_BRK_TIM12_IRQHandler+0x22>
 800945c:	68d9      	ldr	r1, [r3, #12]
 800945e:	0749      	lsls	r1, r1, #29
 8009460:	d47f      	bmi.n	8009562 <TIM8_BRK_TIM12_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8009462:	6919      	ldr	r1, [r3, #16]
 8009464:	070c      	lsls	r4, r1, #28
 8009466:	d502      	bpl.n	800946e <TIM8_BRK_TIM12_IRQHandler+0x2e>
 8009468:	68d9      	ldr	r1, [r3, #12]
 800946a:	0708      	lsls	r0, r1, #28
 800946c:	d47f      	bmi.n	800956e <TIM8_BRK_TIM12_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800946e:	6919      	ldr	r1, [r3, #16]
 8009470:	06c9      	lsls	r1, r1, #27
 8009472:	d412      	bmi.n	800949a <TIM8_BRK_TIM12_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009474:	6919      	ldr	r1, [r3, #16]
 8009476:	07c8      	lsls	r0, r1, #31
 8009478:	d503      	bpl.n	8009482 <TIM8_BRK_TIM12_IRQHandler+0x42>
 800947a:	68d9      	ldr	r1, [r3, #12]
 800947c:	07c9      	lsls	r1, r1, #31
 800947e:	f100 8082 	bmi.w	8009586 <TIM8_BRK_TIM12_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8009482:	6919      	ldr	r1, [r3, #16]
 8009484:	060c      	lsls	r4, r1, #24
 8009486:	d511      	bpl.n	80094ac <TIM8_BRK_TIM12_IRQHandler+0x6c>
 8009488:	68d9      	ldr	r1, [r3, #12]
 800948a:	0608      	lsls	r0, r1, #24
 800948c:	d50e      	bpl.n	80094ac <TIM8_BRK_TIM12_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800948e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009492:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009494:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009496:	2101      	movs	r1, #1
		goto EventCB;
 8009498:	e00d      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800949a:	68d9      	ldr	r1, [r3, #12]
 800949c:	06cc      	lsls	r4, r1, #27
 800949e:	d5e9      	bpl.n	8009474 <TIM8_BRK_TIM12_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80094a0:	f06f 0110 	mvn.w	r1, #16
 80094a4:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80094a6:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80094a8:	2106      	movs	r1, #6
		goto EventCB;
 80094aa:	e004      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80094ac:	6919      	ldr	r1, [r3, #16]
 80094ae:	0649      	lsls	r1, r1, #25
 80094b0:	d445      	bmi.n	800953e <TIM8_BRK_TIM12_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 80094b2:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80094b4:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80094b6:	6813      	ldr	r3, [r2, #0]
 80094b8:	b10b      	cbz	r3, 80094be <TIM8_BRK_TIM12_IRQHandler+0x7e>
 80094ba:	6892      	ldr	r2, [r2, #8]
 80094bc:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 80094be:	4a42      	ldr	r2, [pc, #264]	; (80095c8 <TIM8_BRK_TIM12_IRQHandler+0x188>)
 80094c0:	6853      	ldr	r3, [r2, #4]
 80094c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80094c4:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80094c6:	6919      	ldr	r1, [r3, #16]
 80094c8:	0788      	lsls	r0, r1, #30
 80094ca:	d502      	bpl.n	80094d2 <TIM8_BRK_TIM12_IRQHandler+0x92>
 80094cc:	68d9      	ldr	r1, [r3, #12]
 80094ce:	0789      	lsls	r1, r1, #30
 80094d0:	d465      	bmi.n	800959e <TIM8_BRK_TIM12_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80094d2:	6919      	ldr	r1, [r3, #16]
 80094d4:	074c      	lsls	r4, r1, #29
 80094d6:	d502      	bpl.n	80094de <TIM8_BRK_TIM12_IRQHandler+0x9e>
 80094d8:	68d9      	ldr	r1, [r3, #12]
 80094da:	0748      	lsls	r0, r1, #29
 80094dc:	d465      	bmi.n	80095aa <TIM8_BRK_TIM12_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80094de:	6919      	ldr	r1, [r3, #16]
 80094e0:	0709      	lsls	r1, r1, #28
 80094e2:	d502      	bpl.n	80094ea <TIM8_BRK_TIM12_IRQHandler+0xaa>
 80094e4:	68d9      	ldr	r1, [r3, #12]
 80094e6:	070c      	lsls	r4, r1, #28
 80094e8:	d465      	bmi.n	80095b6 <TIM8_BRK_TIM12_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80094ea:	6919      	ldr	r1, [r3, #16]
 80094ec:	06c8      	lsls	r0, r1, #27
 80094ee:	d502      	bpl.n	80094f6 <TIM8_BRK_TIM12_IRQHandler+0xb6>
 80094f0:	68d9      	ldr	r1, [r3, #12]
 80094f2:	06c9      	lsls	r1, r1, #27
 80094f4:	d441      	bmi.n	800957a <TIM8_BRK_TIM12_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 80094f6:	6919      	ldr	r1, [r3, #16]
 80094f8:	07cc      	lsls	r4, r1, #31
 80094fa:	d502      	bpl.n	8009502 <TIM8_BRK_TIM12_IRQHandler+0xc2>
 80094fc:	68d9      	ldr	r1, [r3, #12]
 80094fe:	07c8      	lsls	r0, r1, #31
 8009500:	d447      	bmi.n	8009592 <TIM8_BRK_TIM12_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 8009502:	6919      	ldr	r1, [r3, #16]
 8009504:	0609      	lsls	r1, r1, #24
 8009506:	d508      	bpl.n	800951a <TIM8_BRK_TIM12_IRQHandler+0xda>
 8009508:	68d9      	ldr	r1, [r3, #12]
 800950a:	060c      	lsls	r4, r1, #24
 800950c:	d505      	bpl.n	800951a <TIM8_BRK_TIM12_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800950e:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8009512:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009514:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009516:	2101      	movs	r1, #1
		goto EventCB;
 8009518:	e004      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800951a:	6919      	ldr	r1, [r3, #16]
 800951c:	0648      	lsls	r0, r1, #25
 800951e:	d417      	bmi.n	8009550 <TIM8_BRK_TIM12_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009520:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009522:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009524:	6813      	ldr	r3, [r2, #0]
 8009526:	b11b      	cbz	r3, 8009530 <TIM8_BRK_TIM12_IRQHandler+0xf0>
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_12);
}
 8009528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800952c:	6892      	ldr	r2, [r2, #8]
 800952e:	4718      	bx	r3
}
 8009530:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 8009532:	f06f 0102 	mvn.w	r1, #2
 8009536:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009538:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 800953a:	2103      	movs	r1, #3
		goto EventCB;
 800953c:	e7bb      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 800953e:	68d9      	ldr	r1, [r3, #12]
 8009540:	064c      	lsls	r4, r1, #25
 8009542:	d5b6      	bpl.n	80094b2 <TIM8_BRK_TIM12_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009544:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009548:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800954a:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 800954c:	2102      	movs	r1, #2
		goto EventCB;
 800954e:	e7b2      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009550:	68d9      	ldr	r1, [r3, #12]
 8009552:	0649      	lsls	r1, r1, #25
 8009554:	d5e4      	bpl.n	8009520 <TIM8_BRK_TIM12_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 8009556:	f06f 0140 	mvn.w	r1, #64	; 0x40
 800955a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800955c:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 800955e:	2102      	movs	r1, #2
		goto EventCB;
 8009560:	e7e0      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009562:	f06f 0104 	mvn.w	r1, #4
 8009566:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009568:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800956a:	2104      	movs	r1, #4
		goto EventCB;
 800956c:	e7a3      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 800956e:	f06f 0108 	mvn.w	r1, #8
 8009572:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009574:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009576:	2105      	movs	r1, #5
		goto EventCB;
 8009578:	e79d      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 800957a:	f06f 0110 	mvn.w	r1, #16
 800957e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009580:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009582:	2106      	movs	r1, #6
		goto EventCB;
 8009584:	e7ce      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009586:	f06f 0101 	mvn.w	r1, #1
 800958a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800958c:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800958e:	2100      	movs	r1, #0
		goto EventCB;
 8009590:	e791      	b.n	80094b6 <TIM8_BRK_TIM12_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009592:	f06f 0101 	mvn.w	r1, #1
 8009596:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009598:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800959a:	2100      	movs	r1, #0
		goto EventCB;
 800959c:	e7c2      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800959e:	f06f 0102 	mvn.w	r1, #2
 80095a2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80095a4:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80095a6:	2103      	movs	r1, #3
		goto EventCB;
 80095a8:	e7bc      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80095aa:	f06f 0104 	mvn.w	r1, #4
 80095ae:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80095b0:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80095b2:	2104      	movs	r1, #4
		goto EventCB;
 80095b4:	e7b6      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80095b6:	f06f 0108 	mvn.w	r1, #8
 80095ba:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80095bc:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80095be:	2105      	movs	r1, #5
		goto EventCB;
 80095c0:	e7b0      	b.n	8009524 <TIM8_BRK_TIM12_IRQHandler+0xe4>
 80095c2:	bf00      	nop
 80095c4:	2000b884 	.word	0x2000b884
 80095c8:	2000b7ac 	.word	0x2000b7ac

080095cc <TIM8_UP_TIM13_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 80095cc:	4a60      	ldr	r2, [pc, #384]	; (8009750 <TIM8_UP_TIM13_IRQHandler+0x184>)
 80095ce:	6853      	ldr	r3, [r2, #4]
 80095d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM12) && defined(TIM8) */

#if defined(TIM13) && defined(TIM8)
tim tim_13(TIM13);
tim_t tim13 = &tim_13;
void TIM8_UP_TIM13_IRQHandler(void){
 80095d2:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 80095d4:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80095d6:	6919      	ldr	r1, [r3, #16]
 80095d8:	0789      	lsls	r1, r1, #30
 80095da:	d502      	bpl.n	80095e2 <TIM8_UP_TIM13_IRQHandler+0x16>
 80095dc:	68d9      	ldr	r1, [r3, #12]
 80095de:	078c      	lsls	r4, r1, #30
 80095e0:	d46d      	bmi.n	80096be <TIM8_UP_TIM13_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80095e2:	6919      	ldr	r1, [r3, #16]
 80095e4:	0748      	lsls	r0, r1, #29
 80095e6:	d502      	bpl.n	80095ee <TIM8_UP_TIM13_IRQHandler+0x22>
 80095e8:	68d9      	ldr	r1, [r3, #12]
 80095ea:	0749      	lsls	r1, r1, #29
 80095ec:	d47f      	bmi.n	80096ee <TIM8_UP_TIM13_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80095ee:	6919      	ldr	r1, [r3, #16]
 80095f0:	070c      	lsls	r4, r1, #28
 80095f2:	d502      	bpl.n	80095fa <TIM8_UP_TIM13_IRQHandler+0x2e>
 80095f4:	68d9      	ldr	r1, [r3, #12]
 80095f6:	0708      	lsls	r0, r1, #28
 80095f8:	d47f      	bmi.n	80096fa <TIM8_UP_TIM13_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80095fa:	6919      	ldr	r1, [r3, #16]
 80095fc:	06c9      	lsls	r1, r1, #27
 80095fe:	d412      	bmi.n	8009626 <TIM8_UP_TIM13_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009600:	6919      	ldr	r1, [r3, #16]
 8009602:	07c8      	lsls	r0, r1, #31
 8009604:	d503      	bpl.n	800960e <TIM8_UP_TIM13_IRQHandler+0x42>
 8009606:	68d9      	ldr	r1, [r3, #12]
 8009608:	07c9      	lsls	r1, r1, #31
 800960a:	f100 8082 	bmi.w	8009712 <TIM8_UP_TIM13_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800960e:	6919      	ldr	r1, [r3, #16]
 8009610:	060c      	lsls	r4, r1, #24
 8009612:	d511      	bpl.n	8009638 <TIM8_UP_TIM13_IRQHandler+0x6c>
 8009614:	68d9      	ldr	r1, [r3, #12]
 8009616:	0608      	lsls	r0, r1, #24
 8009618:	d50e      	bpl.n	8009638 <TIM8_UP_TIM13_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800961a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800961e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009620:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 8009622:	2101      	movs	r1, #1
		goto EventCB;
 8009624:	e00d      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009626:	68d9      	ldr	r1, [r3, #12]
 8009628:	06cc      	lsls	r4, r1, #27
 800962a:	d5e9      	bpl.n	8009600 <TIM8_UP_TIM13_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 800962c:	f06f 0110 	mvn.w	r1, #16
 8009630:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009632:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 8009634:	2106      	movs	r1, #6
		goto EventCB;
 8009636:	e004      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009638:	6919      	ldr	r1, [r3, #16]
 800963a:	0649      	lsls	r1, r1, #25
 800963c:	d445      	bmi.n	80096ca <TIM8_UP_TIM13_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 800963e:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 8009640:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009642:	6813      	ldr	r3, [r2, #0]
 8009644:	b10b      	cbz	r3, 800964a <TIM8_UP_TIM13_IRQHandler+0x7e>
 8009646:	6892      	ldr	r2, [r2, #8]
 8009648:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 800964a:	4a42      	ldr	r2, [pc, #264]	; (8009754 <TIM8_UP_TIM13_IRQHandler+0x188>)
 800964c:	6853      	ldr	r3, [r2, #4]
 800964e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009650:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8009652:	6919      	ldr	r1, [r3, #16]
 8009654:	0788      	lsls	r0, r1, #30
 8009656:	d502      	bpl.n	800965e <TIM8_UP_TIM13_IRQHandler+0x92>
 8009658:	68d9      	ldr	r1, [r3, #12]
 800965a:	0789      	lsls	r1, r1, #30
 800965c:	d465      	bmi.n	800972a <TIM8_UP_TIM13_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800965e:	6919      	ldr	r1, [r3, #16]
 8009660:	074c      	lsls	r4, r1, #29
 8009662:	d502      	bpl.n	800966a <TIM8_UP_TIM13_IRQHandler+0x9e>
 8009664:	68d9      	ldr	r1, [r3, #12]
 8009666:	0748      	lsls	r0, r1, #29
 8009668:	d465      	bmi.n	8009736 <TIM8_UP_TIM13_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800966a:	6919      	ldr	r1, [r3, #16]
 800966c:	0709      	lsls	r1, r1, #28
 800966e:	d502      	bpl.n	8009676 <TIM8_UP_TIM13_IRQHandler+0xaa>
 8009670:	68d9      	ldr	r1, [r3, #12]
 8009672:	070c      	lsls	r4, r1, #28
 8009674:	d465      	bmi.n	8009742 <TIM8_UP_TIM13_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009676:	6919      	ldr	r1, [r3, #16]
 8009678:	06c8      	lsls	r0, r1, #27
 800967a:	d502      	bpl.n	8009682 <TIM8_UP_TIM13_IRQHandler+0xb6>
 800967c:	68d9      	ldr	r1, [r3, #12]
 800967e:	06c9      	lsls	r1, r1, #27
 8009680:	d441      	bmi.n	8009706 <TIM8_UP_TIM13_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8009682:	6919      	ldr	r1, [r3, #16]
 8009684:	07cc      	lsls	r4, r1, #31
 8009686:	d502      	bpl.n	800968e <TIM8_UP_TIM13_IRQHandler+0xc2>
 8009688:	68d9      	ldr	r1, [r3, #12]
 800968a:	07c8      	lsls	r0, r1, #31
 800968c:	d447      	bmi.n	800971e <TIM8_UP_TIM13_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800968e:	6919      	ldr	r1, [r3, #16]
 8009690:	0609      	lsls	r1, r1, #24
 8009692:	d508      	bpl.n	80096a6 <TIM8_UP_TIM13_IRQHandler+0xda>
 8009694:	68d9      	ldr	r1, [r3, #12]
 8009696:	060c      	lsls	r4, r1, #24
 8009698:	d505      	bpl.n	80096a6 <TIM8_UP_TIM13_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 800969a:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800969e:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80096a0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80096a2:	2101      	movs	r1, #1
		goto EventCB;
 80096a4:	e004      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80096a6:	6919      	ldr	r1, [r3, #16]
 80096a8:	0648      	lsls	r0, r1, #25
 80096aa:	d417      	bmi.n	80096dc <TIM8_UP_TIM13_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 80096ac:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80096ae:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80096b0:	6813      	ldr	r3, [r2, #0]
 80096b2:	b11b      	cbz	r3, 80096bc <TIM8_UP_TIM13_IRQHandler+0xf0>
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_13);
}
 80096b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80096b8:	6892      	ldr	r2, [r2, #8]
 80096ba:	4718      	bx	r3
}
 80096bc:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80096be:	f06f 0102 	mvn.w	r1, #2
 80096c2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80096c4:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80096c6:	2103      	movs	r1, #3
		goto EventCB;
 80096c8:	e7bb      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80096ca:	68d9      	ldr	r1, [r3, #12]
 80096cc:	064c      	lsls	r4, r1, #25
 80096ce:	d5b6      	bpl.n	800963e <TIM8_UP_TIM13_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80096d0:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80096d4:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80096d6:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80096d8:	2102      	movs	r1, #2
		goto EventCB;
 80096da:	e7b2      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80096dc:	68d9      	ldr	r1, [r3, #12]
 80096de:	0649      	lsls	r1, r1, #25
 80096e0:	d5e4      	bpl.n	80096ac <TIM8_UP_TIM13_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80096e2:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80096e6:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80096e8:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80096ea:	2102      	movs	r1, #2
		goto EventCB;
 80096ec:	e7e0      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80096ee:	f06f 0104 	mvn.w	r1, #4
 80096f2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80096f4:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80096f6:	2104      	movs	r1, #4
		goto EventCB;
 80096f8:	e7a3      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80096fa:	f06f 0108 	mvn.w	r1, #8
 80096fe:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009700:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 8009702:	2105      	movs	r1, #5
		goto EventCB;
 8009704:	e79d      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009706:	f06f 0110 	mvn.w	r1, #16
 800970a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 800970c:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800970e:	2106      	movs	r1, #6
		goto EventCB;
 8009710:	e7ce      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8009712:	f06f 0101 	mvn.w	r1, #1
 8009716:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009718:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800971a:	2100      	movs	r1, #0
		goto EventCB;
 800971c:	e791      	b.n	8009642 <TIM8_UP_TIM13_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800971e:	f06f 0101 	mvn.w	r1, #1
 8009722:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009724:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 8009726:	2100      	movs	r1, #0
		goto EventCB;
 8009728:	e7c2      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800972a:	f06f 0102 	mvn.w	r1, #2
 800972e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009730:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009732:	2103      	movs	r1, #3
		goto EventCB;
 8009734:	e7bc      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 8009736:	f06f 0104 	mvn.w	r1, #4
 800973a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 800973c:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 800973e:	2104      	movs	r1, #4
		goto EventCB;
 8009740:	e7b6      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009742:	f06f 0108 	mvn.w	r1, #8
 8009746:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 8009748:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800974a:	2105      	movs	r1, #5
		goto EventCB;
 800974c:	e7b0      	b.n	80096b0 <TIM8_UP_TIM13_IRQHandler+0xe4>
 800974e:	bf00      	nop
 8009750:	2000b884 	.word	0x2000b884
 8009754:	2000b7c4 	.word	0x2000b7c4

08009758 <TIM8_TRG_COM_TIM14_IRQHandler>:
	timptr -> counter = timptr -> _tim -> CNT;
 8009758:	4a60      	ldr	r2, [pc, #384]	; (80098dc <TIM8_TRG_COM_TIM14_IRQHandler+0x184>)
 800975a:	6853      	ldr	r3, [r2, #4]
 800975c:	6a59      	ldr	r1, [r3, #36]	; 0x24
#endif /* defined(TIM13) && defined(TIM8) */

#if defined(TIM14) && defined(TIM8)
tim tim_14(TIM14);
tim_t tim14 = &tim_14;
void TIM8_TRG_COM_TIM14_IRQHandler(void){
 800975e:	b510      	push	{r4, lr}
	timptr -> counter = timptr -> _tim -> CNT;
 8009760:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8009762:	6919      	ldr	r1, [r3, #16]
 8009764:	0789      	lsls	r1, r1, #30
 8009766:	d502      	bpl.n	800976e <TIM8_TRG_COM_TIM14_IRQHandler+0x16>
 8009768:	68d9      	ldr	r1, [r3, #12]
 800976a:	078c      	lsls	r4, r1, #30
 800976c:	d46d      	bmi.n	800984a <TIM8_TRG_COM_TIM14_IRQHandler+0xf2>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 800976e:	6919      	ldr	r1, [r3, #16]
 8009770:	0748      	lsls	r0, r1, #29
 8009772:	d502      	bpl.n	800977a <TIM8_TRG_COM_TIM14_IRQHandler+0x22>
 8009774:	68d9      	ldr	r1, [r3, #12]
 8009776:	0749      	lsls	r1, r1, #29
 8009778:	d47f      	bmi.n	800987a <TIM8_TRG_COM_TIM14_IRQHandler+0x122>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 800977a:	6919      	ldr	r1, [r3, #16]
 800977c:	070c      	lsls	r4, r1, #28
 800977e:	d502      	bpl.n	8009786 <TIM8_TRG_COM_TIM14_IRQHandler+0x2e>
 8009780:	68d9      	ldr	r1, [r3, #12]
 8009782:	0708      	lsls	r0, r1, #28
 8009784:	d47f      	bmi.n	8009886 <TIM8_TRG_COM_TIM14_IRQHandler+0x12e>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009786:	6919      	ldr	r1, [r3, #16]
 8009788:	06c9      	lsls	r1, r1, #27
 800978a:	d412      	bmi.n	80097b2 <TIM8_TRG_COM_TIM14_IRQHandler+0x5a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800978c:	6919      	ldr	r1, [r3, #16]
 800978e:	07c8      	lsls	r0, r1, #31
 8009790:	d503      	bpl.n	800979a <TIM8_TRG_COM_TIM14_IRQHandler+0x42>
 8009792:	68d9      	ldr	r1, [r3, #12]
 8009794:	07c9      	lsls	r1, r1, #31
 8009796:	f100 8082 	bmi.w	800989e <TIM8_TRG_COM_TIM14_IRQHandler+0x146>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800979a:	6919      	ldr	r1, [r3, #16]
 800979c:	060c      	lsls	r4, r1, #24
 800979e:	d511      	bpl.n	80097c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x6c>
 80097a0:	68d9      	ldr	r1, [r3, #12]
 80097a2:	0608      	lsls	r0, r1, #24
 80097a4:	d50e      	bpl.n	80097c4 <TIM8_TRG_COM_TIM14_IRQHandler+0x6c>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 80097a6:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80097aa:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80097ac:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80097ae:	2101      	movs	r1, #1
		goto EventCB;
 80097b0:	e00d      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80097b2:	68d9      	ldr	r1, [r3, #12]
 80097b4:	06cc      	lsls	r4, r1, #27
 80097b6:	d5e9      	bpl.n	800978c <TIM8_TRG_COM_TIM14_IRQHandler+0x34>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80097b8:	f06f 0110 	mvn.w	r1, #16
 80097bc:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80097be:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80097c0:	2106      	movs	r1, #6
		goto EventCB;
 80097c2:	e004      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80097c4:	6919      	ldr	r1, [r3, #16]
 80097c6:	0649      	lsls	r1, r1, #25
 80097c8:	d445      	bmi.n	8009856 <TIM8_TRG_COM_TIM14_IRQHandler+0xfe>
	tim_channel_t channel = TIM_NOCHANNEL;
 80097ca:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80097cc:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80097ce:	6813      	ldr	r3, [r2, #0]
 80097d0:	b10b      	cbz	r3, 80097d6 <TIM8_TRG_COM_TIM14_IRQHandler+0x7e>
 80097d2:	6892      	ldr	r2, [r2, #8]
 80097d4:	4798      	blx	r3
	timptr -> counter = timptr -> _tim -> CNT;
 80097d6:	4a42      	ldr	r2, [pc, #264]	; (80098e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x188>)
 80097d8:	6853      	ldr	r3, [r2, #4]
 80097da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80097dc:	60d1      	str	r1, [r2, #12]
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 80097de:	6919      	ldr	r1, [r3, #16]
 80097e0:	0788      	lsls	r0, r1, #30
 80097e2:	d502      	bpl.n	80097ea <TIM8_TRG_COM_TIM14_IRQHandler+0x92>
 80097e4:	68d9      	ldr	r1, [r3, #12]
 80097e6:	0789      	lsls	r1, r1, #30
 80097e8:	d465      	bmi.n	80098b6 <TIM8_TRG_COM_TIM14_IRQHandler+0x15e>
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 80097ea:	6919      	ldr	r1, [r3, #16]
 80097ec:	074c      	lsls	r4, r1, #29
 80097ee:	d502      	bpl.n	80097f6 <TIM8_TRG_COM_TIM14_IRQHandler+0x9e>
 80097f0:	68d9      	ldr	r1, [r3, #12]
 80097f2:	0748      	lsls	r0, r1, #29
 80097f4:	d465      	bmi.n	80098c2 <TIM8_TRG_COM_TIM14_IRQHandler+0x16a>
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 80097f6:	6919      	ldr	r1, [r3, #16]
 80097f8:	0709      	lsls	r1, r1, #28
 80097fa:	d502      	bpl.n	8009802 <TIM8_TRG_COM_TIM14_IRQHandler+0xaa>
 80097fc:	68d9      	ldr	r1, [r3, #12]
 80097fe:	070c      	lsls	r4, r1, #28
 8009800:	d465      	bmi.n	80098ce <TIM8_TRG_COM_TIM14_IRQHandler+0x176>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 8009802:	6919      	ldr	r1, [r3, #16]
 8009804:	06c8      	lsls	r0, r1, #27
 8009806:	d502      	bpl.n	800980e <TIM8_TRG_COM_TIM14_IRQHandler+0xb6>
 8009808:	68d9      	ldr	r1, [r3, #12]
 800980a:	06c9      	lsls	r1, r1, #27
 800980c:	d441      	bmi.n	8009892 <TIM8_TRG_COM_TIM14_IRQHandler+0x13a>
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 800980e:	6919      	ldr	r1, [r3, #16]
 8009810:	07cc      	lsls	r4, r1, #31
 8009812:	d502      	bpl.n	800981a <TIM8_TRG_COM_TIM14_IRQHandler+0xc2>
 8009814:	68d9      	ldr	r1, [r3, #12]
 8009816:	07c8      	lsls	r0, r1, #31
 8009818:	d447      	bmi.n	80098aa <TIM8_TRG_COM_TIM14_IRQHandler+0x152>
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800981a:	6919      	ldr	r1, [r3, #16]
 800981c:	0609      	lsls	r1, r1, #24
 800981e:	d508      	bpl.n	8009832 <TIM8_TRG_COM_TIM14_IRQHandler+0xda>
 8009820:	68d9      	ldr	r1, [r3, #12]
 8009822:	060c      	lsls	r4, r1, #24
 8009824:	d505      	bpl.n	8009832 <TIM8_TRG_COM_TIM14_IRQHandler+0xda>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 8009826:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800982a:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 800982c:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 800982e:	2101      	movs	r1, #1
		goto EventCB;
 8009830:	e004      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009832:	6919      	ldr	r1, [r3, #16]
 8009834:	0648      	lsls	r0, r1, #25
 8009836:	d417      	bmi.n	8009868 <TIM8_TRG_COM_TIM14_IRQHandler+0x110>
	tim_channel_t channel = TIM_NOCHANNEL;
 8009838:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 800983a:	2107      	movs	r1, #7
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 800983c:	6813      	ldr	r3, [r2, #0]
 800983e:	b11b      	cbz	r3, 8009848 <TIM8_TRG_COM_TIM14_IRQHandler+0xf0>
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 8009840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 8009844:	6892      	ldr	r2, [r2, #8]
 8009846:	4718      	bx	r3
}
 8009848:	bd10      	pop	{r4, pc}
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 800984a:	f06f 0102 	mvn.w	r1, #2
 800984e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 8009850:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 8009852:	2103      	movs	r1, #3
		goto EventCB;
 8009854:	e7bb      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009856:	68d9      	ldr	r1, [r3, #12]
 8009858:	064c      	lsls	r4, r1, #25
 800985a:	d5b6      	bpl.n	80097ca <TIM8_TRG_COM_TIM14_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 800985c:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009860:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009862:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009864:	2102      	movs	r1, #2
		goto EventCB;
 8009866:	e7b2      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 8009868:	68d9      	ldr	r1, [r3, #12]
 800986a:	0649      	lsls	r1, r1, #25
 800986c:	d5e4      	bpl.n	8009838 <TIM8_TRG_COM_TIM14_IRQHandler+0xe0>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 800986e:	f06f 0140 	mvn.w	r1, #64	; 0x40
 8009872:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8009874:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 8009876:	2102      	movs	r1, #2
		goto EventCB;
 8009878:	e7e0      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 800987a:	f06f 0104 	mvn.w	r1, #4
 800987e:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8009880:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8009882:	2104      	movs	r1, #4
		goto EventCB;
 8009884:	e7a3      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8009886:	f06f 0108 	mvn.w	r1, #8
 800988a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 800988c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800988e:	2105      	movs	r1, #5
		goto EventCB;
 8009890:	e79d      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 8009892:	f06f 0110 	mvn.w	r1, #16
 8009896:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 8009898:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 800989a:	2106      	movs	r1, #6
		goto EventCB;
 800989c:	e7ce      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 800989e:	f06f 0101 	mvn.w	r1, #1
 80098a2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80098a4:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80098a6:	2100      	movs	r1, #0
		goto EventCB;
 80098a8:	e791      	b.n	80097ce <TIM8_TRG_COM_TIM14_IRQHandler+0x76>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 80098aa:	f06f 0101 	mvn.w	r1, #1
 80098ae:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80098b0:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 80098b2:	2100      	movs	r1, #0
		goto EventCB;
 80098b4:	e7c2      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80098b6:	f06f 0102 	mvn.w	r1, #2
 80098ba:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80098bc:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80098be:	2103      	movs	r1, #3
		goto EventCB;
 80098c0:	e7bc      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80098c2:	f06f 0104 	mvn.w	r1, #4
 80098c6:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 80098c8:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 80098ca:	2104      	movs	r1, #4
		goto EventCB;
 80098cc:	e7b6      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 80098ce:	f06f 0108 	mvn.w	r1, #8
 80098d2:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 80098d4:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 80098d6:	2105      	movs	r1, #5
		goto EventCB;
 80098d8:	e7b0      	b.n	800983c <TIM8_TRG_COM_TIM14_IRQHandler+0xe4>
 80098da:	bf00      	nop
 80098dc:	2000b884 	.word	0x2000b884
 80098e0:	2000b7dc 	.word	0x2000b7dc

080098e4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
}
 80098e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 80098e8:	f8df a154 	ldr.w	sl, [pc, #340]	; 8009a40 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 80098ec:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8009a44 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 80098f0:	4f4a      	ldr	r7, [pc, #296]	; (8009a1c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 80098f2:	4a4b      	ldr	r2, [pc, #300]	; (8009a20 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 80098f4:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8009a48 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 80098f8:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 80098fc:	2300      	movs	r3, #0
 80098fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8009902:	f8ca 3000 	str.w	r3, [sl]
 8009906:	f8ca 3008 	str.w	r3, [sl, #8]
 800990a:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 800990e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8009a4c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 8009912:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8009a50 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 8009916:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8009918:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 800991c:	f8c9 300c 	str.w	r3, [r9, #12]
 8009920:	f8c9 3000 	str.w	r3, [r9]
 8009924:	f8c9 3008 	str.w	r3, [r9, #8]
 8009928:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 800992c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8009a54 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 8009930:	f8df c124 	ldr.w	ip, [pc, #292]	; 8009a58 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 8009934:	4e3b      	ldr	r6, [pc, #236]	; (8009a24 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 8009936:	4d3c      	ldr	r5, [pc, #240]	; (8009a28 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 8009938:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 800993c:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 8009940:	f8c8 3000 	str.w	r3, [r8]
 8009944:	f8c8 3008 	str.w	r3, [r8, #8]
 8009948:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 800994c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8009a5c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 8009950:	4c36      	ldr	r4, [pc, #216]	; (8009a2c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 8009952:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 8009956:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 800995a:	f8ce 3000 	str.w	r3, [lr]
 800995e:	f8ce 3008 	str.w	r3, [lr, #8]
 8009962:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 8009966:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800996a:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8009a60 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 800996e:	4830      	ldr	r0, [pc, #192]	; (8009a30 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 8009970:	f8cc e004 	str.w	lr, [ip, #4]
 8009974:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 8009978:	f8cc 3000 	str.w	r3, [ip]
 800997c:	f8cc 3008 	str.w	r3, [ip, #8]
 8009980:	f8cc 300c 	str.w	r3, [ip, #12]
 8009984:	f8cc 3010 	str.w	r3, [ip, #16]
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	60b3      	str	r3, [r6, #8]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 8009992:	f8c7 9004 	str.w	r9, [r7, #4]
 8009996:	606a      	str	r2, [r5, #4]
 8009998:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 800999c:	4925      	ldr	r1, [pc, #148]	; (8009a34 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 800999e:	6062      	str	r2, [r4, #4]
 80099a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80099a4:	6042      	str	r2, [r0, #4]
 80099a6:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 80099aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 80099ae:	60f3      	str	r3, [r6, #12]
 80099b0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8009a64 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 80099b4:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 80099b8:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 80099ba:	604a      	str	r2, [r1, #4]
 80099bc:	4e1e      	ldr	r6, [pc, #120]	; (8009a38 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 80099be:	4a1f      	ldr	r2, [pc, #124]	; (8009a3c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 80099c0:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8009a68 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 80099c4:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 80099c6:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 80099ca:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 80099ce:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 80099d0:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 80099d4:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 80099d6:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 80099da:	60cb      	str	r3, [r1, #12]
 80099dc:	602b      	str	r3, [r5, #0]
 80099de:	60d3      	str	r3, [r2, #12]
 80099e0:	60ab      	str	r3, [r5, #8]
 80099e2:	612b      	str	r3, [r5, #16]
 80099e4:	6023      	str	r3, [r4, #0]
 80099e6:	60a3      	str	r3, [r4, #8]
 80099e8:	6123      	str	r3, [r4, #16]
 80099ea:	6003      	str	r3, [r0, #0]
 80099ec:	6083      	str	r3, [r0, #8]
 80099ee:	6103      	str	r3, [r0, #16]
 80099f0:	600b      	str	r3, [r1, #0]
 80099f2:	608b      	str	r3, [r1, #8]
 80099f4:	610b      	str	r3, [r1, #16]
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	6093      	str	r3, [r2, #8]
 80099fa:	6113      	str	r3, [r2, #16]
 80099fc:	6033      	str	r3, [r6, #0]
 80099fe:	60b3      	str	r3, [r6, #8]
 8009a00:	60f3      	str	r3, [r6, #12]
 8009a02:	6133      	str	r3, [r6, #16]
 8009a04:	f8cb 3000 	str.w	r3, [fp]
 8009a08:	f8cb 3008 	str.w	r3, [fp, #8]
 8009a0c:	f8cb 300c 	str.w	r3, [fp, #12]
 8009a10:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 8009a14:	f8cb c004 	str.w	ip, [fp, #4]
}
 8009a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a1c:	2000b7f4 	.word	0x2000b7f4
 8009a20:	40010000 	.word	0x40010000
 8009a24:	2000b86c 	.word	0x2000b86c
 8009a28:	2000b884 	.word	0x2000b884
 8009a2c:	2000b89c 	.word	0x2000b89c
 8009a30:	2000b77c 	.word	0x2000b77c
 8009a34:	2000b794 	.word	0x2000b794
 8009a38:	2000b7c4 	.word	0x2000b7c4
 8009a3c:	2000b7ac 	.word	0x2000b7ac
 8009a40:	2000b764 	.word	0x2000b764
 8009a44:	2000b80c 	.word	0x2000b80c
 8009a48:	2000b824 	.word	0x2000b824
 8009a4c:	40000400 	.word	0x40000400
 8009a50:	2000b83c 	.word	0x2000b83c
 8009a54:	40000800 	.word	0x40000800
 8009a58:	2000b854 	.word	0x2000b854
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40001000 	.word	0x40001000
 8009a64:	2000b7dc 	.word	0x2000b7dc
 8009a68:	40002000 	.word	0x40002000
 8009a6c:	00000000 	.word	0x00000000

08009a70 <_ZN5usart4initEP14usart_config_t>:

usart::usart(USART_TypeDef *usart){
	_usart = usart;
}

stm_ret_t usart::init(usart_config_t *conf){
 8009a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a74:	460d      	mov	r5, r1
 8009a76:	e9d2 4107 	ldrd	r4, r1, [r2, #28]
 8009a7a:	b08b      	sub	sp, #44	; 0x2c
 8009a7c:	4606      	mov	r6, r0
	stm_ret_t ret;
 8009a7e:	2001      	movs	r0, #1
 8009a80:	2300      	movs	r3, #0
	_conf = conf;
 8009a82:	622a      	str	r2, [r5, #32]
	stm_ret_t ret;
 8009a84:	f88d 0018 	strb.w	r0, [sp, #24]
#if ENABLE_DMA
	_rxdma = _conf -> rxdma;
	_txdma = _conf -> txdma;
 8009a88:	606c      	str	r4, [r5, #4]
#endif /* ENABLE_DMA */
	__IO uint32_t usart_bus_frequency = 0UL;

	gpio_port_clock_enable(_conf -> txport);
 8009a8a:	68d0      	ldr	r0, [r2, #12]
	_txdma = _conf -> txdma;
 8009a8c:	60a9      	str	r1, [r5, #8]
	stm_ret_t ret;
 8009a8e:	9307      	str	r3, [sp, #28]
	__IO uint32_t usart_bus_frequency = 0UL;
 8009a90:	9304      	str	r3, [sp, #16]
	gpio_port_clock_enable(_conf -> txport);
 8009a92:	f7fd fb29 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(_conf -> rxport);
 8009a96:	6a2b      	ldr	r3, [r5, #32]
 8009a98:	6958      	ldr	r0, [r3, #20]
 8009a9a:	f7fd fb25 	bl	80070e8 <gpio_port_clock_enable>
	gpio_set_alternatefunction(conf->txport, conf->txpin, GPIO_ALTERNATE_PUSHPULL);
	gpio_set_mode(conf->rxport, conf->rxpin, GPIO_INPUT);
#elif defined(STM32F4)
	if(
#if defined(USART1)
			_usart == USART1
 8009a9e:	682b      	ldr	r3, [r5, #0]
	if(
 8009aa0:	4ab1      	ldr	r2, [pc, #708]	; (8009d68 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d014      	beq.n	8009ad0 <_ZN5usart4initEP14usart_config_t+0x60>
#endif /* defined(USART1) */
			||
 8009aa6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d010      	beq.n	8009ad0 <_ZN5usart4initEP14usart_config_t+0x60>
#if defined(USART2)
			_usart == USART2
#endif /* defined(USART2) */
			||
 8009aae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d00c      	beq.n	8009ad0 <_ZN5usart4initEP14usart_config_t+0x60>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
	}
	else{
#if defined(UART7) & defined(UART8)
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_8);
 8009ab6:	6a2b      	ldr	r3, [r5, #32]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	8a19      	ldrh	r1, [r3, #16]
 8009abc:	68d8      	ldr	r0, [r3, #12]
 8009abe:	f7fd fbfb 	bl	80072b8 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_8);
 8009ac2:	6a2b      	ldr	r3, [r5, #32]
 8009ac4:	2208      	movs	r2, #8
 8009ac6:	8b19      	ldrh	r1, [r3, #24]
 8009ac8:	6958      	ldr	r0, [r3, #20]
 8009aca:	f7fd fbf5 	bl	80072b8 <gpio_set_alternatefunction>
 8009ace:	e00b      	b.n	8009ae8 <_ZN5usart4initEP14usart_config_t+0x78>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
 8009ad0:	6a2b      	ldr	r3, [r5, #32]
 8009ad2:	2207      	movs	r2, #7
 8009ad4:	8a19      	ldrh	r1, [r3, #16]
 8009ad6:	68d8      	ldr	r0, [r3, #12]
 8009ad8:	f7fd fbee 	bl	80072b8 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
 8009adc:	6a2b      	ldr	r3, [r5, #32]
 8009ade:	2207      	movs	r2, #7
 8009ae0:	8b19      	ldrh	r1, [r3, #24]
 8009ae2:	6958      	ldr	r0, [r3, #20]
 8009ae4:	f7fd fbe8 	bl	80072b8 <gpio_set_alternatefunction>
#else
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_6);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_6);
#endif /* defined(UART7) & defined(UART8) */
	}
	gpio_set_alternatefunction_type(_conf -> txport, _conf -> txpin, GPIO_OUTPUT_PUSHPULL);
 8009ae8:	6a2b      	ldr	r3, [r5, #32]
 8009aea:	2207      	movs	r2, #7
 8009aec:	8a19      	ldrh	r1, [r3, #16]
 8009aee:	68d8      	ldr	r0, [r3, #12]
 8009af0:	f7fd fc20 	bl	8007334 <gpio_set_alternatefunction_type>
	gpio_set_alternatefunction_type(_conf -> rxport, _conf -> rxpin, GPIO_OUTPUT_PUSHPULL);
 8009af4:	6a2b      	ldr	r3, [r5, #32]
 8009af6:	2207      	movs	r2, #7
 8009af8:	8b19      	ldrh	r1, [r3, #24]
 8009afa:	6958      	ldr	r0, [r3, #20]
 8009afc:	f7fd fc1a 	bl	8007334 <gpio_set_alternatefunction_type>
#endif /* STM32F4 */

#if defined(USART1)
	if(_usart == USART1){
 8009b00:	682c      	ldr	r4, [r5, #0]
 8009b02:	4b99      	ldr	r3, [pc, #612]	; (8009d68 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	f000 8147 	beq.w	8009d98 <_ZN5usart4initEP14usart_config_t+0x328>
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART1) */
#if defined(USART2)
	if(_usart == USART2){
 8009b0a:	4b98      	ldr	r3, [pc, #608]	; (8009d6c <_ZN5usart4initEP14usart_config_t+0x2fc>)
 8009b0c:	429c      	cmp	r4, r3
 8009b0e:	f000 8151 	beq.w	8009db4 <_ZN5usart4initEP14usart_config_t+0x344>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART2) */
#if defined(USART3)
	if(_usart == USART3){
 8009b12:	4b97      	ldr	r3, [pc, #604]	; (8009d70 <_ZN5usart4initEP14usart_config_t+0x300>)
 8009b14:	429c      	cmp	r4, r3
 8009b16:	f000 80d2 	beq.w	8009cbe <_ZN5usart4initEP14usart_config_t+0x24e>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART3) */
#if defined(UART4)
	if(_usart == UART4){
 8009b1a:	4b96      	ldr	r3, [pc, #600]	; (8009d74 <_ZN5usart4initEP14usart_config_t+0x304>)
 8009b1c:	429c      	cmp	r4, r3
 8009b1e:	f000 80dc 	beq.w	8009cda <_ZN5usart4initEP14usart_config_t+0x26a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART4) */
#if defined(UART5)
	if(_usart == UART5){
 8009b22:	4b95      	ldr	r3, [pc, #596]	; (8009d78 <_ZN5usart4initEP14usart_config_t+0x308>)
 8009b24:	429c      	cmp	r4, r3
 8009b26:	f000 80e6 	beq.w	8009cf6 <_ZN5usart4initEP14usart_config_t+0x286>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART5) */
#if defined(USART6)
	if(_usart == USART6){
 8009b2a:	4b94      	ldr	r3, [pc, #592]	; (8009d7c <_ZN5usart4initEP14usart_config_t+0x30c>)
 8009b2c:	429c      	cmp	r4, r3
 8009b2e:	f000 80f0 	beq.w	8009d12 <_ZN5usart4initEP14usart_config_t+0x2a2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART6) */
#if defined(UART7)
	if(_usart == UART7){
 8009b32:	4b93      	ldr	r3, [pc, #588]	; (8009d80 <_ZN5usart4initEP14usart_config_t+0x310>)
 8009b34:	429c      	cmp	r4, r3
 8009b36:	f000 80fa 	beq.w	8009d2e <_ZN5usart4initEP14usart_config_t+0x2be>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART7) */
#if defined(UART8)
	if(_usart == UART8){
 8009b3a:	4b92      	ldr	r3, [pc, #584]	; (8009d84 <_ZN5usart4initEP14usart_config_t+0x314>)
 8009b3c:	429c      	cmp	r4, r3
 8009b3e:	f000 8104 	beq.w	8009d4a <_ZN5usart4initEP14usart_config_t+0x2da>
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART8) */


	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009b42:	68e3      	ldr	r3, [r4, #12]

	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8009b44:	6a2f      	ldr	r7, [r5, #32]
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009b46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b4a:	f043 030c 	orr.w	r3, r3, #12
 8009b4e:	60e3      	str	r3, [r4, #12]
	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8009b50:	9804      	ldr	r0, [sp, #16]
 8009b52:	f7f6 fcf7 	bl	8000544 <__aeabi_ui2d>
 8009b56:	4b8c      	ldr	r3, [pc, #560]	; (8009d88 <_ZN5usart4initEP14usart_config_t+0x318>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f7f6 fd6d 	bl	8000638 <__aeabi_dmul>
 8009b5e:	4680      	mov	r8, r0
 8009b60:	6838      	ldr	r0, [r7, #0]
 8009b62:	4689      	mov	r9, r1
 8009b64:	f7f6 fcee 	bl	8000544 <__aeabi_ui2d>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4640      	mov	r0, r8
 8009b6e:	4649      	mov	r1, r9
 8009b70:	f7f6 fe8c 	bl	800088c <__aeabi_ddiv>
 8009b74:	f7f7 f858 	bl	8000c28 <__aeabi_d2f>
 8009b78:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Fraction = 0x00UL;
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 8009b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 8009b80:	ee17 3a90 	vmov	r3, s15
 8009b84:	fa1f f883 	uxth.w	r8, r3
 8009b88:	f7f6 fcfe 	bl	8000588 <__aeabi_f2d>
 8009b8c:	4b7f      	ldr	r3, [pc, #508]	; (8009d8c <_ZN5usart4initEP14usart_config_t+0x31c>)
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f7f6 fd52 	bl	8000638 <__aeabi_dmul>
 8009b94:	f7f7 f828 	bl	8000be8 <__aeabi_d2uiz>
 8009b98:	fa1f f980 	uxth.w	r9, r0
 8009b9c:	4640      	mov	r0, r8
 8009b9e:	f7f6 fce1 	bl	8000564 <__aeabi_i2d>
 8009ba2:	4b7a      	ldr	r3, [pc, #488]	; (8009d8c <_ZN5usart4initEP14usart_config_t+0x31c>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	f7f6 fd47 	bl	8000638 <__aeabi_dmul>
 8009baa:	f7f7 f81d 	bl	8000be8 <__aeabi_d2uiz>
 8009bae:	b280      	uxth	r0, r0
 8009bb0:	eba9 0000 	sub.w	r0, r9, r0
 8009bb4:	f7f6 fcd6 	bl	8000564 <__aeabi_i2d>
 8009bb8:	a369      	add	r3, pc, #420	; (adr r3, 8009d60 <_ZN5usart4initEP14usart_config_t+0x2f0>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	f7f6 fd3b 	bl	8000638 <__aeabi_dmul>
 8009bc2:	f7f7 f831 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8009bc6:	ee07 0a90 	vmov	s15, r0
 8009bca:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8009bce:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009bd2:	f002 fb0b 	bl	800c1ec <ceilf>
	DIV_Fraction = ceil(Fraction);
 8009bd6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8009bda:	793a      	ldrb	r2, [r7, #4]
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8009bdc:	ee10 3a10 	vmov	r3, s0
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8009be6:	60a3      	str	r3, [r4, #8]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8009be8:	b36a      	cbz	r2, 8009c46 <_ZN5usart4initEP14usart_config_t+0x1d6>

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	2a03      	cmp	r2, #3
 8009bee:	f240 8104 	bls.w	8009dfa <_ZN5usart4initEP14usart_config_t+0x38a>
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}

#if defined(USART1)
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8009bf2:	4b5d      	ldr	r3, [pc, #372]	; (8009d68 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8009bf4:	429c      	cmp	r4, r3
 8009bf6:	d04c      	beq.n	8009c92 <_ZN5usart4initEP14usart_config_t+0x222>
#endif /* defined(USART1) */
#if defined(USART2)
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8009bf8:	4b5c      	ldr	r3, [pc, #368]	; (8009d6c <_ZN5usart4initEP14usart_config_t+0x2fc>)
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	f000 80e5 	beq.w	8009dca <_ZN5usart4initEP14usart_config_t+0x35a>
#endif /* defined(USART2) */
#if defined(USART3)
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8009c00:	4b5b      	ldr	r3, [pc, #364]	; (8009d70 <_ZN5usart4initEP14usart_config_t+0x300>)
 8009c02:	429c      	cmp	r4, r3
 8009c04:	f000 80e5 	beq.w	8009dd2 <_ZN5usart4initEP14usart_config_t+0x362>
#endif /* defined(USART3) */
#if defined(UART4)
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8009c08:	4b5a      	ldr	r3, [pc, #360]	; (8009d74 <_ZN5usart4initEP14usart_config_t+0x304>)
 8009c0a:	429c      	cmp	r4, r3
 8009c0c:	d053      	beq.n	8009cb6 <_ZN5usart4initEP14usart_config_t+0x246>
#endif /* defined(USART4) */
#if defined(UART5)
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8009c0e:	4b5a      	ldr	r3, [pc, #360]	; (8009d78 <_ZN5usart4initEP14usart_config_t+0x308>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	f000 80e6 	beq.w	8009de2 <_ZN5usart4initEP14usart_config_t+0x372>
#endif /* defined(USART5) */
#if defined(USART6)
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8009c16:	4b59      	ldr	r3, [pc, #356]	; (8009d7c <_ZN5usart4initEP14usart_config_t+0x30c>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	f000 80e6 	beq.w	8009dea <_ZN5usart4initEP14usart_config_t+0x37a>
#endif /* defined(USART6) */
#if defined(UART7)
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8009c1e:	4b58      	ldr	r3, [pc, #352]	; (8009d80 <_ZN5usart4initEP14usart_config_t+0x310>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	f000 80e6 	beq.w	8009df2 <_ZN5usart4initEP14usart_config_t+0x382>
#endif /* defined(USART7) */
#if defined(UART8)
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8009c26:	4b57      	ldr	r3, [pc, #348]	; (8009d84 <_ZN5usart4initEP14usart_config_t+0x314>)
 8009c28:	429c      	cmp	r4, r3
 8009c2a:	f000 80d6 	beq.w	8009dda <_ZN5usart4initEP14usart_config_t+0x36a>
#endif /* defined(UART8) */
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8009c2e:	f995 3024 	ldrsb.w	r3, [r5, #36]	; 0x24
  if ((int32_t)(IRQn) >= 0)
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	da30      	bge.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c36:	4956      	ldr	r1, [pc, #344]	; (8009d90 <_ZN5usart4initEP14usart_config_t+0x320>)
 8009c38:	f003 030f 	and.w	r3, r3, #15
 8009c3c:	0112      	lsls	r2, r2, #4
 8009c3e:	4419      	add	r1, r3
 8009c40:	b2d2      	uxtb	r2, r2
 8009c42:	760a      	strb	r2, [r1, #24]


stm_ret_t usart::transmit(uint8_t data){
	stm_ret_t ret;

	_usart -> DR = data;
 8009c44:	682c      	ldr	r4, [r5, #0]
	stm_ret_t ret;
 8009c46:	2200      	movs	r2, #0
 8009c48:	9209      	str	r2, [sp, #36]	; 0x24
	_usart -> DR = data;
 8009c4a:	220a      	movs	r2, #10
 8009c4c:	6062      	str	r2, [r4, #4]

	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009c4e:	af02      	add	r7, sp, #8
 8009c50:	2264      	movs	r2, #100	; 0x64
 8009c52:	4621      	mov	r1, r4
	stm_ret_t ret;
 8009c54:	2301      	movs	r3, #1
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009c56:	9200      	str	r2, [sp, #0]
 8009c58:	4638      	mov	r0, r7
 8009c5a:	2240      	movs	r2, #64	; 0x40
	stm_ret_t ret;
 8009c5c:	f88d 3020 	strb.w	r3, [sp, #32]
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009c60:	f001 f9dc 	bl	800b01c <wait_flag_in_register_timeout>
 8009c64:	e897 0003 	ldmia.w	r7, {r0, r1}
 8009c68:	ac08      	add	r4, sp, #32
 8009c6a:	e884 0003 	stmia.w	r4, {r0, r1}
	if(!is_oke(&ret)){
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f001 fa16 	bl	800b0a0 <is_oke>
 8009c74:	b1d0      	cbz	r0, 8009cac <_ZN5usart4initEP14usart_config_t+0x23c>
 8009c76:	682b      	ldr	r3, [r5, #0]
		set_return_line(&ret, __LINE__);
		return ret;
	}

	volatile uint32_t tmp = _usart -> SR;
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	9205      	str	r2, [sp, #20]
	tmp = _usart -> DR;
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	9305      	str	r3, [sp, #20]
	(void)tmp;
 8009c80:	9b05      	ldr	r3, [sp, #20]
	return {STM_OKE, 0};
 8009c82:	2201      	movs	r2, #1
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4630      	mov	r0, r6
	return {STM_OKE, 0};
 8009c88:	7032      	strb	r2, [r6, #0]
 8009c8a:	6073      	str	r3, [r6, #4]
}
 8009c8c:	b00b      	add	sp, #44	; 0x2c
 8009c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8009c92:	2325      	movs	r3, #37	; 0x25
 8009c94:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c98:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8009c9c:	0112      	lsls	r2, r2, #4
 8009c9e:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8009ca2:	b2d2      	uxtb	r2, r2
 8009ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	_usart -> DR = data;
 8009ca8:	682c      	ldr	r4, [r5, #0]
 8009caa:	e7cc      	b.n	8009c46 <_ZN5usart4initEP14usart_config_t+0x1d6>
		set_return_line(&ret, __LINE__);
 8009cac:	21fe      	movs	r1, #254	; 0xfe
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f001 f9f4 	bl	800b09c <set_return_line>
		return ret;
 8009cb4:	e7e5      	b.n	8009c82 <_ZN5usart4initEP14usart_config_t+0x212>
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8009cb6:	2334      	movs	r3, #52	; 0x34
 8009cb8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009cbc:	e7ec      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8009cbe:	4a35      	ldr	r2, [pc, #212]	; (8009d94 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009cc0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009cc6:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cc8:	2002      	movs	r0, #2
 8009cca:	f7fd fd5f 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == UART4){
 8009cce:	682c      	ldr	r4, [r5, #0]
 8009cd0:	4b28      	ldr	r3, [pc, #160]	; (8009d74 <_ZN5usart4initEP14usart_config_t+0x304>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cd2:	9004      	str	r0, [sp, #16]
	if(_usart == UART4){
 8009cd4:	429c      	cmp	r4, r3
 8009cd6:	f47f af24 	bne.w	8009b22 <_ZN5usart4initEP14usart_config_t+0xb2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8009cda:	4a2e      	ldr	r2, [pc, #184]	; (8009d94 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009cdc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009ce2:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009ce4:	2002      	movs	r0, #2
 8009ce6:	f7fd fd51 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == UART5){
 8009cea:	682c      	ldr	r4, [r5, #0]
 8009cec:	4b22      	ldr	r3, [pc, #136]	; (8009d78 <_ZN5usart4initEP14usart_config_t+0x308>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009cee:	9004      	str	r0, [sp, #16]
	if(_usart == UART5){
 8009cf0:	429c      	cmp	r4, r3
 8009cf2:	f47f af1a 	bne.w	8009b2a <_ZN5usart4initEP14usart_config_t+0xba>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8009cf6:	4a27      	ldr	r2, [pc, #156]	; (8009d94 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009cf8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009cfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009cfe:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d00:	2002      	movs	r0, #2
 8009d02:	f7fd fd43 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == USART6){
 8009d06:	682c      	ldr	r4, [r5, #0]
 8009d08:	4b1c      	ldr	r3, [pc, #112]	; (8009d7c <_ZN5usart4initEP14usart_config_t+0x30c>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d0a:	9004      	str	r0, [sp, #16]
	if(_usart == USART6){
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	f47f af10 	bne.w	8009b32 <_ZN5usart4initEP14usart_config_t+0xc2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8009d12:	4a20      	ldr	r2, [pc, #128]	; (8009d94 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009d14:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009d16:	f043 0320 	orr.w	r3, r3, #32
 8009d1a:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009d1c:	2003      	movs	r0, #3
 8009d1e:	f7fd fd35 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == UART7){
 8009d22:	682c      	ldr	r4, [r5, #0]
 8009d24:	4b16      	ldr	r3, [pc, #88]	; (8009d80 <_ZN5usart4initEP14usart_config_t+0x310>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009d26:	9004      	str	r0, [sp, #16]
	if(_usart == UART7){
 8009d28:	429c      	cmp	r4, r3
 8009d2a:	f47f af06 	bne.w	8009b3a <_ZN5usart4initEP14usart_config_t+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
 8009d2e:	4a19      	ldr	r2, [pc, #100]	; (8009d94 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009d30:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009d32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d36:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d38:	2002      	movs	r0, #2
 8009d3a:	f7fd fd27 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == UART8){
 8009d3e:	682c      	ldr	r4, [r5, #0]
 8009d40:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <_ZN5usart4initEP14usart_config_t+0x314>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d42:	9004      	str	r0, [sp, #16]
	if(_usart == UART8){
 8009d44:	429c      	cmp	r4, r3
 8009d46:	f47f aefc 	bne.w	8009b42 <_ZN5usart4initEP14usart_config_t+0xd2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8009d4a:	4a12      	ldr	r2, [pc, #72]	; (8009d94 <_ZN5usart4initEP14usart_config_t+0x324>)
 8009d4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009d4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d52:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8009d54:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d56:	f7fd fd19 	bl	800778c <rcc_get_bus_frequency>
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009d5a:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009d5c:	9004      	str	r0, [sp, #16]
 8009d5e:	e6f0      	b.n	8009b42 <_ZN5usart4initEP14usart_config_t+0xd2>
 8009d60:	47ae147b 	.word	0x47ae147b
 8009d64:	3f847ae1 	.word	0x3f847ae1
 8009d68:	40011000 	.word	0x40011000
 8009d6c:	40004400 	.word	0x40004400
 8009d70:	40004800 	.word	0x40004800
 8009d74:	40004c00 	.word	0x40004c00
 8009d78:	40005000 	.word	0x40005000
 8009d7c:	40011400 	.word	0x40011400
 8009d80:	40007800 	.word	0x40007800
 8009d84:	40007c00 	.word	0x40007c00
 8009d88:	3fb00000 	.word	0x3fb00000
 8009d8c:	40590000 	.word	0x40590000
 8009d90:	e000ecfc 	.word	0xe000ecfc
 8009d94:	40023800 	.word	0x40023800
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8009d98:	4a28      	ldr	r2, [pc, #160]	; (8009e3c <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8009d9a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8009d9c:	f043 0310 	orr.w	r3, r3, #16
 8009da0:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009da2:	2003      	movs	r0, #3
 8009da4:	f7fd fcf2 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == USART2){
 8009da8:	682c      	ldr	r4, [r5, #0]
 8009daa:	4b25      	ldr	r3, [pc, #148]	; (8009e40 <_ZN5usart4initEP14usart_config_t+0x3d0>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8009dac:	9004      	str	r0, [sp, #16]
	if(_usart == USART2){
 8009dae:	429c      	cmp	r4, r3
 8009db0:	f47f aeaf 	bne.w	8009b12 <_ZN5usart4initEP14usart_config_t+0xa2>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8009db4:	4a21      	ldr	r2, [pc, #132]	; (8009e3c <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8009db6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8009db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009dbc:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8009dbe:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009dc0:	f7fd fce4 	bl	800778c <rcc_get_bus_frequency>
	if(_usart == USART3){
 8009dc4:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8009dc6:	9004      	str	r0, [sp, #16]
 8009dc8:	e6a3      	b.n	8009b12 <_ZN5usart4initEP14usart_config_t+0xa2>
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8009dca:	2326      	movs	r3, #38	; 0x26
 8009dcc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009dd0:	e762      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8009dd2:	2327      	movs	r3, #39	; 0x27
 8009dd4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009dd8:	e75e      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8009dda:	2353      	movs	r3, #83	; 0x53
 8009ddc:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009de0:	e75a      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8009de2:	2335      	movs	r3, #53	; 0x35
 8009de4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009de8:	e756      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8009dea:	2347      	movs	r3, #71	; 0x47
 8009dec:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009df0:	e752      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8009df2:	2352      	movs	r3, #82	; 0x52
 8009df4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8009df8:	e74e      	b.n	8009c98 <_ZN5usart4initEP14usart_config_t+0x228>
			set_return(&ret, STM_ERR, __LINE__);
 8009dfa:	a806      	add	r0, sp, #24
 8009dfc:	228c      	movs	r2, #140	; 0x8c
 8009dfe:	2100      	movs	r1, #0
 8009e00:	f001 f948 	bl	800b094 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <_ZN5usart4initEP14usart_config_t+0x3d4>)
 8009e06:	4a10      	ldr	r2, [pc, #64]	; (8009e48 <_ZN5usart4initEP14usart_config_t+0x3d8>)
 8009e08:	4910      	ldr	r1, [pc, #64]	; (8009e4c <_ZN5usart4initEP14usart_config_t+0x3dc>)
 8009e0a:	4811      	ldr	r0, [pc, #68]	; (8009e50 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8009e0c:	f000 ffd0 	bl	800adb0 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8009e10:	4910      	ldr	r1, [pc, #64]	; (8009e54 <_ZN5usart4initEP14usart_config_t+0x3e4>)
 8009e12:	480f      	ldr	r0, [pc, #60]	; (8009e50 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8009e14:	2205      	movs	r2, #5
 8009e16:	f000 ff4f 	bl	800acb8 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8009e1a:	f241 3088 	movw	r0, #5000	; 0x1388
 8009e1e:	f7fe fb5b 	bl	80084d8 <systick_delay_ms>
 8009e22:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009e26:	490c      	ldr	r1, [pc, #48]	; (8009e58 <_ZN5usart4initEP14usart_config_t+0x3e8>)
 8009e28:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <_ZN5usart4initEP14usart_config_t+0x3ec>)
 8009e2a:	68ca      	ldr	r2, [r1, #12]
 8009e2c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009e30:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009e32:	60cb      	str	r3, [r1, #12]
 8009e34:	f3bf 8f4f 	dsb	sy
    __NOP();
 8009e38:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009e3a:	e7fd      	b.n	8009e38 <_ZN5usart4initEP14usart_config_t+0x3c8>
 8009e3c:	40023800 	.word	0x40023800
 8009e40:	40004400 	.word	0x40004400
 8009e44:	0801155c 	.word	0x0801155c
 8009e48:	08011778 	.word	0x08011778
 8009e4c:	080114f4 	.word	0x080114f4
 8009e50:	080117a0 	.word	0x080117a0
 8009e54:	08011540 	.word	0x08011540
 8009e58:	e000ed00 	.word	0xe000ed00
 8009e5c:	05fa0004 	.word	0x05fa0004

08009e60 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>:
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8009e60:	b570      	push	{r4, r5, r6, lr}
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009e62:	6a0d      	ldr	r5, [r1, #32]
	stm_ret_t ret;
 8009e64:	2601      	movs	r6, #1
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009e66:	792d      	ldrb	r5, [r5, #4]
	stm_ret_t ret;
 8009e68:	7006      	strb	r6, [r0, #0]
 8009e6a:	2600      	movs	r6, #0
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8009e6c:	4604      	mov	r4, r0
	stm_ret_t ret;
 8009e6e:	6046      	str	r6, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009e70:	b11d      	cbz	r5, 8009e7a <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x1a>
		parameter = param;
 8009e72:	e9c1 3203 	strd	r3, r2, [r1, #12]
}
 8009e76:	4620      	mov	r0, r4
 8009e78:	bd70      	pop	{r4, r5, r6, pc}
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8009e7a:	22ed      	movs	r2, #237	; 0xed
 8009e7c:	2103      	movs	r1, #3
 8009e7e:	f001 f909 	bl	800b094 <set_return>
		LOG_WARN(TAG, "%s -> %s, USART peripheral control unsuported register event handler.", __FILE__, __FUNCTION__ );
 8009e82:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x34>)
 8009e84:	4a04      	ldr	r2, [pc, #16]	; (8009e98 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x38>)
 8009e86:	4905      	ldr	r1, [pc, #20]	; (8009e9c <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x3c>)
 8009e88:	4805      	ldr	r0, [pc, #20]	; (8009ea0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x40>)
 8009e8a:	f000 ff53 	bl	800ad34 <LOG_WARN>
}
 8009e8e:	4620      	mov	r0, r4
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	bf00      	nop
 8009e94:	08011684 	.word	0x08011684
 8009e98:	08011778 	.word	0x08011778
 8009e9c:	080117a8 	.word	0x080117a8
 8009ea0:	080117a0 	.word	0x080117a0

08009ea4 <_ZN5usart8transmitEPht>:

	return ret;
}


stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8009ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009ea8:	4615      	mov	r5, r2
	stm_ret_t ret;
 8009eaa:	2201      	movs	r2, #1
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8009eac:	b085      	sub	sp, #20
	stm_ret_t ret;
 8009eae:	7002      	strb	r2, [r0, #0]
 8009eb0:	2200      	movs	r2, #0
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	4688      	mov	r8, r1
	stm_ret_t ret;
 8009eb6:	6042      	str	r2, [r0, #4]
	uint16_t TxCount = len;
 8009eb8:	18ef      	adds	r7, r5, r3

	while(TxCount--) {
		_usart -> DR = *data++;

		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009eba:	ae02      	add	r6, sp, #8
 8009ebc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009ec0:	e011      	b.n	8009ee6 <_ZN5usart8transmitEPht+0x42>
		_usart -> DR = *data++;
 8009ec2:	f8d8 1000 	ldr.w	r1, [r8]
 8009ec6:	f815 cb01 	ldrb.w	ip, [r5], #1
 8009eca:	f8c1 c004 	str.w	ip, [r1, #4]
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009ece:	f8cd 9000 	str.w	r9, [sp]
 8009ed2:	f001 f8a3 	bl	800b01c <wait_flag_in_register_timeout>
 8009ed6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8009eda:	e884 0003 	stmia.w	r4, {r0, r1}
		if(!is_oke(&ret)){
 8009ede:	4620      	mov	r0, r4
 8009ee0:	f001 f8de 	bl	800b0a0 <is_oke>
 8009ee4:	b150      	cbz	r0, 8009efc <_ZN5usart8transmitEPht+0x58>
	while(TxCount--) {
 8009ee6:	42bd      	cmp	r5, r7
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8009ee8:	f04f 0301 	mov.w	r3, #1
 8009eec:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009ef0:	4630      	mov	r0, r6
	while(TxCount--) {
 8009ef2:	d1e6      	bne.n	8009ec2 <_ZN5usart8transmitEPht+0x1e>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	return ret;
}
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	b005      	add	sp, #20
 8009ef8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			set_return_line(&ret, __LINE__);
 8009efc:	4620      	mov	r0, r4
 8009efe:	f240 1113 	movw	r1, #275	; 0x113
 8009f02:	f001 f8cb 	bl	800b09c <set_return_line>
}
 8009f06:	4620      	mov	r0, r4
 8009f08:	b005      	add	sp, #20
 8009f0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f0e:	bf00      	nop

08009f10 <_ZN5usart24receive_to_idle_start_itEt>:
}



stm_ret_t usart::receive_start_it(uint16_t buffer_size){
	stm_ret_t ret;
 8009f10:	2301      	movs	r3, #1
}
#endif /* ENABLE_DMA */



stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8009f12:	b570      	push	{r4, r5, r6, lr}
	stm_ret_t ret;
 8009f14:	7003      	strb	r3, [r0, #0]
 8009f16:	2300      	movs	r3, #0
 8009f18:	6043      	str	r3, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009f1a:	6a0b      	ldr	r3, [r1, #32]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8009f1c:	4616      	mov	r6, r2
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009f1e:	791a      	ldrb	r2, [r3, #4]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8009f20:	b082      	sub	sp, #8
 8009f22:	460c      	mov	r4, r1
 8009f24:	4605      	mov	r5, r0
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8009f26:	2a00      	cmp	r2, #0
 8009f28:	d047      	beq.n	8009fba <_ZN5usart24receive_to_idle_start_itEt+0xaa>
		if(_conf -> interruptoption && (USART_RECEIVE_INTERRUPT | USART_TRANSMIT_RECEIVE_INTERRUPT))
 8009f2a:	795b      	ldrb	r3, [r3, #5]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d03d      	beq.n	8009fac <_ZN5usart24receive_to_idle_start_itEt+0x9c>
			_usart -> CR1 |= USART_CR1_RXNEIE;
 8009f30:	680a      	ldr	r2, [r1, #0]
 8009f32:	68d3      	ldr	r3, [r2, #12]
 8009f34:	f043 0320 	orr.w	r3, r3, #32
 8009f38:	60d3      	str	r3, [r2, #12]
	if(rxbuffer != NULL) {
 8009f3a:	6960      	ldr	r0, [r4, #20]
	rxlen = buffer_size;
 8009f3c:	8326      	strh	r6, [r4, #24]
	rxcount = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	8363      	strh	r3, [r4, #26]
	reception = USART_RECEPTION_NORMAL;
 8009f42:	7763      	strb	r3, [r4, #29]
	if(rxbuffer != NULL) {
 8009f44:	b110      	cbz	r0, 8009f4c <_ZN5usart24receive_to_idle_start_itEt+0x3c>
		free(rxbuffer);
 8009f46:	f002 f9f7 	bl	800c338 <free>
	rxbuffer = (uint8_t *)malloc((rxlen +1) * sizeof(uint8_t));
 8009f4a:	8b26      	ldrh	r6, [r4, #24]
 8009f4c:	2101      	movs	r1, #1
 8009f4e:	1870      	adds	r0, r6, r1
 8009f50:	f002 f9be 	bl	800c2d0 <calloc>
 8009f54:	4606      	mov	r6, r0
 8009f56:	6160      	str	r0, [r4, #20]
	if(rxbuffer == NULL){
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d03b      	beq.n	8009fd4 <_ZN5usart24receive_to_idle_start_itEt+0xc4>
	_usart -> CR1 |= USART_CR1_PEIE;
 8009f5c:	6823      	ldr	r3, [r4, #0]
	__NVIC_ClearPendingIRQ(IRQn);
 8009f5e:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
	_usart -> CR1 |= USART_CR1_PEIE;
 8009f62:	68d9      	ldr	r1, [r3, #12]
 8009f64:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009f68:	60d9      	str	r1, [r3, #12]
	_usart -> CR3 |= USART_CR3_EIE;
 8009f6a:	6959      	ldr	r1, [r3, #20]
  if ((int32_t)(IRQn) >= 0)
 8009f6c:	2a00      	cmp	r2, #0
 8009f6e:	f041 0101 	orr.w	r1, r1, #1
 8009f72:	6159      	str	r1, [r3, #20]
 8009f74:	db0c      	blt.n	8009f90 <_ZN5usart24receive_to_idle_start_itEt+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f76:	f002 001f 	and.w	r0, r2, #31
 8009f7a:	0952      	lsrs	r2, r2, #5
 8009f7c:	0092      	lsls	r2, r2, #2
 8009f7e:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8009f82:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8009f86:	2101      	movs	r1, #1
 8009f88:	4081      	lsls	r1, r0
 8009f8a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f8e:	6011      	str	r1, [r2, #0]
	volatile uint32_t tmp = _usart -> SR;
 8009f90:	681a      	ldr	r2, [r3, #0]
 8009f92:	9201      	str	r2, [sp, #4]
	tmp = _usart -> DR;
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	9201      	str	r2, [sp, #4]
	(void)tmp;
 8009f98:	9a01      	ldr	r2, [sp, #4]
	stm_ret_t ret = receive_start_it(buffer_size);

	reception = USART_RECEPTION_TOIDLE;

	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f9a:	68da      	ldr	r2, [r3, #12]
	reception = USART_RECEPTION_TOIDLE;
 8009f9c:	2102      	movs	r1, #2
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009f9e:	f042 0210 	orr.w	r2, r2, #16

	return ret;
}
 8009fa2:	4628      	mov	r0, r5
	reception = USART_RECEPTION_TOIDLE;
 8009fa4:	7761      	strb	r1, [r4, #29]
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009fa6:	60da      	str	r2, [r3, #12]
}
 8009fa8:	b002      	add	sp, #8
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERROR(TAG, "%s -> %s, USART not selected receive interrupt.", __FILE__, __FUNCTION__ );
 8009fac:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8009fae:	4a11      	ldr	r2, [pc, #68]	; (8009ff4 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8009fb0:	4911      	ldr	r1, [pc, #68]	; (8009ff8 <_ZN5usart24receive_to_idle_start_itEt+0xe8>)
 8009fb2:	4812      	ldr	r0, [pc, #72]	; (8009ffc <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8009fb4:	f000 fefc 	bl	800adb0 <LOG_ERROR>
 8009fb8:	e7bf      	b.n	8009f3a <_ZN5usart24receive_to_idle_start_itEt+0x2a>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8009fba:	f240 12a5 	movw	r2, #421	; 0x1a5
 8009fbe:	2103      	movs	r1, #3
 8009fc0:	f001 f868 	bl	800b094 <set_return>
		LOG_ERROR(TAG, "%s -> %s, USART not selected interrupt control.", __FILE__, __FUNCTION__ );
 8009fc4:	4b0a      	ldr	r3, [pc, #40]	; (8009ff0 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8009fc6:	4a0b      	ldr	r2, [pc, #44]	; (8009ff4 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8009fc8:	490d      	ldr	r1, [pc, #52]	; (800a000 <_ZN5usart24receive_to_idle_start_itEt+0xf0>)
 8009fca:	480c      	ldr	r0, [pc, #48]	; (8009ffc <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8009fcc:	f000 fef0 	bl	800adb0 <LOG_ERROR>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009fd0:	6823      	ldr	r3, [r4, #0]
		return ret;
 8009fd2:	e7e2      	b.n	8009f9a <_ZN5usart24receive_to_idle_start_itEt+0x8a>
		LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
 8009fd4:	4b06      	ldr	r3, [pc, #24]	; (8009ff0 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8009fd6:	4a07      	ldr	r2, [pc, #28]	; (8009ff4 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8009fd8:	490a      	ldr	r1, [pc, #40]	; (800a004 <_ZN5usart24receive_to_idle_start_itEt+0xf4>)
 8009fda:	4808      	ldr	r0, [pc, #32]	; (8009ffc <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8009fdc:	f000 fee8 	bl	800adb0 <LOG_ERROR>
		set_return(&ret, STM_ERR, __LINE__);
 8009fe0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009fe4:	4631      	mov	r1, r6
 8009fe6:	4628      	mov	r0, r5
 8009fe8:	f001 f854 	bl	800b094 <set_return>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8009fec:	6823      	ldr	r3, [r4, #0]
		return ret;
 8009fee:	e7d4      	b.n	8009f9a <_ZN5usart24receive_to_idle_start_itEt+0x8a>
 8009ff0:	08011898 	.word	0x08011898
 8009ff4:	08011778 	.word	0x08011778
 8009ff8:	080118ac 	.word	0x080118ac
 8009ffc:	080117a0 	.word	0x080117a0
 800a000:	08011868 	.word	0x08011868
 800a004:	080117f8 	.word	0x080117f8

0800a008 <_ZN5usart10get_bufferEPPh>:
	this->endchar = '\0';
	return receive_stop_dma();
}
#endif /* ENABLE_DMA */

stm_ret_t usart::get_buffer(uint8_t **data){
 800a008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a00a:	460c      	mov	r4, r1
	stm_ret_t ret;

	if(rxbuffer != NULL){
 800a00c:	6949      	ldr	r1, [r1, #20]
	stm_ret_t ret;
 800a00e:	2301      	movs	r3, #1
 800a010:	2700      	movs	r7, #0
stm_ret_t usart::get_buffer(uint8_t **data){
 800a012:	b083      	sub	sp, #12
 800a014:	4605      	mov	r5, r0
	stm_ret_t ret;
 800a016:	7003      	strb	r3, [r0, #0]
 800a018:	6047      	str	r7, [r0, #4]
	if(rxbuffer != NULL){
 800a01a:	b1b1      	cbz	r1, 800a04a <_ZN5usart10get_bufferEPPh+0x42>
		rxbuffer[rxcount+1] = '\0';
 800a01c:	8b63      	ldrh	r3, [r4, #26]
 800a01e:	4419      	add	r1, r3
 800a020:	4616      	mov	r6, r2
 800a022:	704f      	strb	r7, [r1, #1]
		*data = (uint8_t *)malloc(rxcount+1);
 800a024:	8b62      	ldrh	r2, [r4, #26]
 800a026:	3201      	adds	r2, #1
 800a028:	4610      	mov	r0, r2
 800a02a:	9201      	str	r2, [sp, #4]
 800a02c:	f002 f97c 	bl	800c328 <malloc>
 800a030:	6030      	str	r0, [r6, #0]
			LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
	#endif
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
		memcpy(*data, rxbuffer, rxcount+1);
 800a032:	6966      	ldr	r6, [r4, #20]
 800a034:	9a01      	ldr	r2, [sp, #4]
 800a036:	4631      	mov	r1, r6
 800a038:	f002 f986 	bl	800c348 <memcpy>

		free(rxbuffer);
 800a03c:	4630      	mov	r0, r6
 800a03e:	f002 f97b 	bl	800c338 <free>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */

	return ret;
}
 800a042:	4628      	mov	r0, r5
		rxbuffer = NULL;
 800a044:	6167      	str	r7, [r4, #20]
}
 800a046:	b003      	add	sp, #12
 800a048:	bdf0      	pop	{r4, r5, r6, r7, pc}
	set_return(&ret, STM_ERR, __LINE__);
 800a04a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a04e:	f001 f821 	bl	800b094 <set_return>
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
 800a052:	4b04      	ldr	r3, [pc, #16]	; (800a064 <_ZN5usart10get_bufferEPPh+0x5c>)
 800a054:	4a04      	ldr	r2, [pc, #16]	; (800a068 <_ZN5usart10get_bufferEPPh+0x60>)
 800a056:	4905      	ldr	r1, [pc, #20]	; (800a06c <_ZN5usart10get_bufferEPPh+0x64>)
 800a058:	4805      	ldr	r0, [pc, #20]	; (800a070 <_ZN5usart10get_bufferEPPh+0x68>)
 800a05a:	f000 fea9 	bl	800adb0 <LOG_ERROR>
}
 800a05e:	4628      	mov	r0, r5
 800a060:	b003      	add	sp, #12
 800a062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a064:	080118dc 	.word	0x080118dc
 800a068:	08011778 	.word	0x08011778
 800a06c:	080118e8 	.word	0x080118e8
 800a070:	080117a0 	.word	0x080117a0

0800a074 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 800a074:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a076:	4c3c      	ldr	r4, [pc, #240]	; (800a168 <USART1_IRQHandler+0xf4>)
 800a078:	6823      	ldr	r3, [r4, #0]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a07e:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 800a080:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a082:	d51a      	bpl.n	800a0ba <USART1_IRQHandler+0x46>
 800a084:	068d      	lsls	r5, r1, #26
 800a086:	d518      	bpl.n	800a0ba <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a08c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a08e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a090:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a092:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a094:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a098:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a09a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a09c:	d93a      	bls.n	800a114 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a09e:	6962      	ldr	r2, [r4, #20]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a0a4:	7f63      	ldrb	r3, [r4, #29]
 800a0a6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a0a8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a0aa:	d04c      	beq.n	800a146 <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a0ac:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a0b2:	6923      	ldr	r3, [r4, #16]
 800a0b4:	b95b      	cbnz	r3, 800a0ce <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 800a0b6:	b005      	add	sp, #20
 800a0b8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a0ba:	0650      	lsls	r0, r2, #25
 800a0bc:	d501      	bpl.n	800a0c2 <USART1_IRQHandler+0x4e>
 800a0be:	064d      	lsls	r5, r1, #25
 800a0c0:	d41d      	bmi.n	800a0fe <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a0c2:	06d0      	lsls	r0, r2, #27
 800a0c4:	d408      	bmi.n	800a0d8 <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a0c6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a0c8:	6923      	ldr	r3, [r4, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0f3      	beq.n	800a0b6 <USART1_IRQHandler+0x42>
 800a0ce:	68e1      	ldr	r1, [r4, #12]
}
 800a0d0:	b005      	add	sp, #20
 800a0d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a0d6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a0d8:	06ca      	lsls	r2, r1, #27
 800a0da:	d5f4      	bpl.n	800a0c6 <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a0e0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a0e2:	6859      	ldr	r1, [r3, #4]
 800a0e4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a0e6:	2a02      	cmp	r2, #2
		(void)tmp;
 800a0e8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a0ea:	d1ec      	bne.n	800a0c6 <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a0f2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a0f4:	695b      	ldr	r3, [r3, #20]
 800a0f6:	065b      	lsls	r3, r3, #25
 800a0f8:	d40e      	bmi.n	800a118 <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a0fa:	2004      	movs	r0, #4
 800a0fc:	e7e4      	b.n	800a0c8 <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a102:	685a      	ldr	r2, [r3, #4]
 800a104:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a106:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a10e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a110:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a112:	e7d9      	b.n	800a0c8 <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a114:	2003      	movs	r0, #3
 800a116:	e7d7      	b.n	800a0c8 <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a118:	68a0      	ldr	r0, [r4, #8]
 800a11a:	8b25      	ldrh	r5, [r4, #24]
 800a11c:	f7fc fa46 	bl	80065ac <_ZN3dma11get_counterEv>
 800a120:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a122:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a124:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a126:	f7fc fa47 	bl	80065b8 <_ZN3dma10get_configEv>
 800a12a:	7983      	ldrb	r3, [r0, #6]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d0e4      	beq.n	800a0fa <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a130:	a802      	add	r0, sp, #8
 800a132:	68a1      	ldr	r1, [r4, #8]
 800a134:	f7fc f9dc 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	6953      	ldr	r3, [r2, #20]
 800a13c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a140:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a142:	6153      	str	r3, [r2, #20]
 800a144:	e7c0      	b.n	800a0c8 <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a146:	6961      	ldr	r1, [r4, #20]
 800a148:	7f22      	ldrb	r2, [r4, #28]
 800a14a:	5cc9      	ldrb	r1, [r1, r3]
 800a14c:	4291      	cmp	r1, r2
 800a14e:	d1ad      	bne.n	800a0ac <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a150:	6822      	ldr	r2, [r4, #0]
 800a152:	68d1      	ldr	r1, [r2, #12]
 800a154:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a158:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a15a:	6951      	ldr	r1, [r2, #20]
 800a15c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a160:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a162:	6151      	str	r1, [r2, #20]
 800a164:	e7a3      	b.n	800a0ae <USART1_IRQHandler+0x3a>
 800a166:	bf00      	nop
 800a168:	2000b954 	.word	0x2000b954

0800a16c <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 800a16c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a16e:	4c3c      	ldr	r4, [pc, #240]	; (800a260 <USART2_IRQHandler+0xf4>)
 800a170:	6823      	ldr	r3, [r4, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a176:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 800a178:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a17a:	d51a      	bpl.n	800a1b2 <USART2_IRQHandler+0x46>
 800a17c:	068d      	lsls	r5, r1, #26
 800a17e:	d518      	bpl.n	800a1b2 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a184:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a186:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a188:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a18a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a18c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a190:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a192:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a194:	d93a      	bls.n	800a20c <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a196:	6962      	ldr	r2, [r4, #20]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a19c:	7f63      	ldrb	r3, [r4, #29]
 800a19e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a1a0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a1a2:	d04c      	beq.n	800a23e <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a1a4:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	b95b      	cbnz	r3, 800a1c6 <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 800a1ae:	b005      	add	sp, #20
 800a1b0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a1b2:	0650      	lsls	r0, r2, #25
 800a1b4:	d501      	bpl.n	800a1ba <USART2_IRQHandler+0x4e>
 800a1b6:	064d      	lsls	r5, r1, #25
 800a1b8:	d41d      	bmi.n	800a1f6 <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a1ba:	06d0      	lsls	r0, r2, #27
 800a1bc:	d408      	bmi.n	800a1d0 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a1be:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f3      	beq.n	800a1ae <USART2_IRQHandler+0x42>
 800a1c6:	68e1      	ldr	r1, [r4, #12]
}
 800a1c8:	b005      	add	sp, #20
 800a1ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a1ce:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a1d0:	06ca      	lsls	r2, r1, #27
 800a1d2:	d5f4      	bpl.n	800a1be <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a1d8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a1da:	6859      	ldr	r1, [r3, #4]
 800a1dc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a1de:	2a02      	cmp	r2, #2
		(void)tmp;
 800a1e0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a1e2:	d1ec      	bne.n	800a1be <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a1ea:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	065b      	lsls	r3, r3, #25
 800a1f0:	d40e      	bmi.n	800a210 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a1f2:	2004      	movs	r0, #4
 800a1f4:	e7e4      	b.n	800a1c0 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a1fe:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a206:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a208:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a20a:	e7d9      	b.n	800a1c0 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a20c:	2003      	movs	r0, #3
 800a20e:	e7d7      	b.n	800a1c0 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a210:	68a0      	ldr	r0, [r4, #8]
 800a212:	8b25      	ldrh	r5, [r4, #24]
 800a214:	f7fc f9ca 	bl	80065ac <_ZN3dma11get_counterEv>
 800a218:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a21a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a21c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a21e:	f7fc f9cb 	bl	80065b8 <_ZN3dma10get_configEv>
 800a222:	7983      	ldrb	r3, [r0, #6]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d0e4      	beq.n	800a1f2 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a228:	a802      	add	r0, sp, #8
 800a22a:	68a1      	ldr	r1, [r4, #8]
 800a22c:	f7fc f960 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a230:	6822      	ldr	r2, [r4, #0]
 800a232:	6953      	ldr	r3, [r2, #20]
 800a234:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a238:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a23a:	6153      	str	r3, [r2, #20]
 800a23c:	e7c0      	b.n	800a1c0 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a23e:	6961      	ldr	r1, [r4, #20]
 800a240:	7f22      	ldrb	r2, [r4, #28]
 800a242:	5cc9      	ldrb	r1, [r1, r3]
 800a244:	4291      	cmp	r1, r2
 800a246:	d1ad      	bne.n	800a1a4 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a248:	6822      	ldr	r2, [r4, #0]
 800a24a:	68d1      	ldr	r1, [r2, #12]
 800a24c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a250:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a252:	6951      	ldr	r1, [r2, #20]
 800a254:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a258:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a25a:	6151      	str	r1, [r2, #20]
 800a25c:	e7a3      	b.n	800a1a6 <USART2_IRQHandler+0x3a>
 800a25e:	bf00      	nop
 800a260:	2000b97c 	.word	0x2000b97c

0800a264 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 800a264:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a266:	4c3c      	ldr	r4, [pc, #240]	; (800a358 <USART3_IRQHandler+0xf4>)
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a26e:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 800a270:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a272:	d51a      	bpl.n	800a2aa <USART3_IRQHandler+0x46>
 800a274:	068d      	lsls	r5, r1, #26
 800a276:	d518      	bpl.n	800a2aa <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a27c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a27e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a280:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a282:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a284:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a288:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a28a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a28c:	d93a      	bls.n	800a304 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a28e:	6962      	ldr	r2, [r4, #20]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a294:	7f63      	ldrb	r3, [r4, #29]
 800a296:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a298:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a29a:	d04c      	beq.n	800a336 <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a29c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a29e:	3301      	adds	r3, #1
 800a2a0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	b95b      	cbnz	r3, 800a2be <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 800a2a6:	b005      	add	sp, #20
 800a2a8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a2aa:	0650      	lsls	r0, r2, #25
 800a2ac:	d501      	bpl.n	800a2b2 <USART3_IRQHandler+0x4e>
 800a2ae:	064d      	lsls	r5, r1, #25
 800a2b0:	d41d      	bmi.n	800a2ee <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a2b2:	06d0      	lsls	r0, r2, #27
 800a2b4:	d408      	bmi.n	800a2c8 <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a2b6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a2b8:	6923      	ldr	r3, [r4, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d0f3      	beq.n	800a2a6 <USART3_IRQHandler+0x42>
 800a2be:	68e1      	ldr	r1, [r4, #12]
}
 800a2c0:	b005      	add	sp, #20
 800a2c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a2c6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a2c8:	06ca      	lsls	r2, r1, #27
 800a2ca:	d5f4      	bpl.n	800a2b6 <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a2d0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a2d2:	6859      	ldr	r1, [r3, #4]
 800a2d4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a2d6:	2a02      	cmp	r2, #2
		(void)tmp;
 800a2d8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a2da:	d1ec      	bne.n	800a2b6 <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a2e2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a2e4:	695b      	ldr	r3, [r3, #20]
 800a2e6:	065b      	lsls	r3, r3, #25
 800a2e8:	d40e      	bmi.n	800a308 <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a2ea:	2004      	movs	r0, #4
 800a2ec:	e7e4      	b.n	800a2b8 <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a2f6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a2fe:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a300:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a302:	e7d9      	b.n	800a2b8 <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a304:	2003      	movs	r0, #3
 800a306:	e7d7      	b.n	800a2b8 <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a308:	68a0      	ldr	r0, [r4, #8]
 800a30a:	8b25      	ldrh	r5, [r4, #24]
 800a30c:	f7fc f94e 	bl	80065ac <_ZN3dma11get_counterEv>
 800a310:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a312:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a314:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a316:	f7fc f94f 	bl	80065b8 <_ZN3dma10get_configEv>
 800a31a:	7983      	ldrb	r3, [r0, #6]
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d0e4      	beq.n	800a2ea <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a320:	a802      	add	r0, sp, #8
 800a322:	68a1      	ldr	r1, [r4, #8]
 800a324:	f7fc f8e4 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	6953      	ldr	r3, [r2, #20]
 800a32c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a330:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a332:	6153      	str	r3, [r2, #20]
 800a334:	e7c0      	b.n	800a2b8 <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a336:	6961      	ldr	r1, [r4, #20]
 800a338:	7f22      	ldrb	r2, [r4, #28]
 800a33a:	5cc9      	ldrb	r1, [r1, r3]
 800a33c:	4291      	cmp	r1, r2
 800a33e:	d1ad      	bne.n	800a29c <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a340:	6822      	ldr	r2, [r4, #0]
 800a342:	68d1      	ldr	r1, [r2, #12]
 800a344:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a348:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a34a:	6951      	ldr	r1, [r2, #20]
 800a34c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a350:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a352:	6151      	str	r1, [r2, #20]
 800a354:	e7a3      	b.n	800a29e <USART3_IRQHandler+0x3a>
 800a356:	bf00      	nop
 800a358:	2000b9a4 	.word	0x2000b9a4

0800a35c <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 800a35c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a35e:	4c3c      	ldr	r4, [pc, #240]	; (800a450 <UART4_IRQHandler+0xf4>)
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a366:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 800a368:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a36a:	d51a      	bpl.n	800a3a2 <UART4_IRQHandler+0x46>
 800a36c:	068d      	lsls	r5, r1, #26
 800a36e:	d518      	bpl.n	800a3a2 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a374:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a376:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a378:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a37a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a37c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a380:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a382:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a384:	d93a      	bls.n	800a3fc <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a386:	6962      	ldr	r2, [r4, #20]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a38c:	7f63      	ldrb	r3, [r4, #29]
 800a38e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a390:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a392:	d04c      	beq.n	800a42e <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a394:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a396:	3301      	adds	r3, #1
 800a398:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	b95b      	cbnz	r3, 800a3b6 <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 800a39e:	b005      	add	sp, #20
 800a3a0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a3a2:	0650      	lsls	r0, r2, #25
 800a3a4:	d501      	bpl.n	800a3aa <UART4_IRQHandler+0x4e>
 800a3a6:	064d      	lsls	r5, r1, #25
 800a3a8:	d41d      	bmi.n	800a3e6 <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a3aa:	06d0      	lsls	r0, r2, #27
 800a3ac:	d408      	bmi.n	800a3c0 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a3ae:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0f3      	beq.n	800a39e <UART4_IRQHandler+0x42>
 800a3b6:	68e1      	ldr	r1, [r4, #12]
}
 800a3b8:	b005      	add	sp, #20
 800a3ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a3be:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a3c0:	06ca      	lsls	r2, r1, #27
 800a3c2:	d5f4      	bpl.n	800a3ae <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a3c8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a3ca:	6859      	ldr	r1, [r3, #4]
 800a3cc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a3ce:	2a02      	cmp	r2, #2
		(void)tmp;
 800a3d0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a3d2:	d1ec      	bne.n	800a3ae <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a3da:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	065b      	lsls	r3, r3, #25
 800a3e0:	d40e      	bmi.n	800a400 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a3e2:	2004      	movs	r0, #4
 800a3e4:	e7e4      	b.n	800a3b0 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a3ee:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a3f6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a3f8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a3fa:	e7d9      	b.n	800a3b0 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a3fc:	2003      	movs	r0, #3
 800a3fe:	e7d7      	b.n	800a3b0 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a400:	68a0      	ldr	r0, [r4, #8]
 800a402:	8b25      	ldrh	r5, [r4, #24]
 800a404:	f7fc f8d2 	bl	80065ac <_ZN3dma11get_counterEv>
 800a408:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a40a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a40c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a40e:	f7fc f8d3 	bl	80065b8 <_ZN3dma10get_configEv>
 800a412:	7983      	ldrb	r3, [r0, #6]
 800a414:	2b01      	cmp	r3, #1
 800a416:	d0e4      	beq.n	800a3e2 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a418:	a802      	add	r0, sp, #8
 800a41a:	68a1      	ldr	r1, [r4, #8]
 800a41c:	f7fc f868 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a420:	6822      	ldr	r2, [r4, #0]
 800a422:	6953      	ldr	r3, [r2, #20]
 800a424:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a428:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a42a:	6153      	str	r3, [r2, #20]
 800a42c:	e7c0      	b.n	800a3b0 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a42e:	6961      	ldr	r1, [r4, #20]
 800a430:	7f22      	ldrb	r2, [r4, #28]
 800a432:	5cc9      	ldrb	r1, [r1, r3]
 800a434:	4291      	cmp	r1, r2
 800a436:	d1ad      	bne.n	800a394 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	68d1      	ldr	r1, [r2, #12]
 800a43c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a440:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a442:	6951      	ldr	r1, [r2, #20]
 800a444:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a448:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a44a:	6151      	str	r1, [r2, #20]
 800a44c:	e7a3      	b.n	800a396 <UART4_IRQHandler+0x3a>
 800a44e:	bf00      	nop
 800a450:	2000b8b4 	.word	0x2000b8b4

0800a454 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 800a454:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a456:	4c3c      	ldr	r4, [pc, #240]	; (800a548 <UART5_IRQHandler+0xf4>)
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a45e:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 800a460:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a462:	d51a      	bpl.n	800a49a <UART5_IRQHandler+0x46>
 800a464:	068d      	lsls	r5, r1, #26
 800a466:	d518      	bpl.n	800a49a <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a46c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a46e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a470:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a472:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a474:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a478:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a47a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a47c:	d93a      	bls.n	800a4f4 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a47e:	6962      	ldr	r2, [r4, #20]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a484:	7f63      	ldrb	r3, [r4, #29]
 800a486:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a488:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a48a:	d04c      	beq.n	800a526 <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a48c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a48e:	3301      	adds	r3, #1
 800a490:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a492:	6923      	ldr	r3, [r4, #16]
 800a494:	b95b      	cbnz	r3, 800a4ae <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 800a496:	b005      	add	sp, #20
 800a498:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a49a:	0650      	lsls	r0, r2, #25
 800a49c:	d501      	bpl.n	800a4a2 <UART5_IRQHandler+0x4e>
 800a49e:	064d      	lsls	r5, r1, #25
 800a4a0:	d41d      	bmi.n	800a4de <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a4a2:	06d0      	lsls	r0, r2, #27
 800a4a4:	d408      	bmi.n	800a4b8 <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a4a6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0f3      	beq.n	800a496 <UART5_IRQHandler+0x42>
 800a4ae:	68e1      	ldr	r1, [r4, #12]
}
 800a4b0:	b005      	add	sp, #20
 800a4b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a4b6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a4b8:	06ca      	lsls	r2, r1, #27
 800a4ba:	d5f4      	bpl.n	800a4a6 <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a4c0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a4c2:	6859      	ldr	r1, [r3, #4]
 800a4c4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a4c6:	2a02      	cmp	r2, #2
		(void)tmp;
 800a4c8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a4ca:	d1ec      	bne.n	800a4a6 <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a4cc:	681a      	ldr	r2, [r3, #0]
 800a4ce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a4d2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a4d4:	695b      	ldr	r3, [r3, #20]
 800a4d6:	065b      	lsls	r3, r3, #25
 800a4d8:	d40e      	bmi.n	800a4f8 <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a4da:	2004      	movs	r0, #4
 800a4dc:	e7e4      	b.n	800a4a8 <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a4e6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a4ee:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a4f0:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a4f2:	e7d9      	b.n	800a4a8 <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a4f4:	2003      	movs	r0, #3
 800a4f6:	e7d7      	b.n	800a4a8 <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a4f8:	68a0      	ldr	r0, [r4, #8]
 800a4fa:	8b25      	ldrh	r5, [r4, #24]
 800a4fc:	f7fc f856 	bl	80065ac <_ZN3dma11get_counterEv>
 800a500:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a502:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a504:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a506:	f7fc f857 	bl	80065b8 <_ZN3dma10get_configEv>
 800a50a:	7983      	ldrb	r3, [r0, #6]
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d0e4      	beq.n	800a4da <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a510:	a802      	add	r0, sp, #8
 800a512:	68a1      	ldr	r1, [r4, #8]
 800a514:	f7fb ffec 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a518:	6822      	ldr	r2, [r4, #0]
 800a51a:	6953      	ldr	r3, [r2, #20]
 800a51c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a520:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a522:	6153      	str	r3, [r2, #20]
 800a524:	e7c0      	b.n	800a4a8 <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a526:	6961      	ldr	r1, [r4, #20]
 800a528:	7f22      	ldrb	r2, [r4, #28]
 800a52a:	5cc9      	ldrb	r1, [r1, r3]
 800a52c:	4291      	cmp	r1, r2
 800a52e:	d1ad      	bne.n	800a48c <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a530:	6822      	ldr	r2, [r4, #0]
 800a532:	68d1      	ldr	r1, [r2, #12]
 800a534:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a538:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a53a:	6951      	ldr	r1, [r2, #20]
 800a53c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a540:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a542:	6151      	str	r1, [r2, #20]
 800a544:	e7a3      	b.n	800a48e <UART5_IRQHandler+0x3a>
 800a546:	bf00      	nop
 800a548:	2000b8dc 	.word	0x2000b8dc

0800a54c <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 800a54c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a54e:	4c3c      	ldr	r4, [pc, #240]	; (800a640 <USART6_IRQHandler+0xf4>)
 800a550:	6823      	ldr	r3, [r4, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a556:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 800a558:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a55a:	d51a      	bpl.n	800a592 <USART6_IRQHandler+0x46>
 800a55c:	068d      	lsls	r5, r1, #26
 800a55e:	d518      	bpl.n	800a592 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a560:	681a      	ldr	r2, [r3, #0]
 800a562:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a564:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a566:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a568:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a56a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a56c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a570:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a572:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a574:	d93a      	bls.n	800a5ec <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a576:	6962      	ldr	r2, [r4, #20]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a57c:	7f63      	ldrb	r3, [r4, #29]
 800a57e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a580:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a582:	d04c      	beq.n	800a61e <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a584:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a586:	3301      	adds	r3, #1
 800a588:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a58a:	6923      	ldr	r3, [r4, #16]
 800a58c:	b95b      	cbnz	r3, 800a5a6 <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 800a58e:	b005      	add	sp, #20
 800a590:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a592:	0650      	lsls	r0, r2, #25
 800a594:	d501      	bpl.n	800a59a <USART6_IRQHandler+0x4e>
 800a596:	064d      	lsls	r5, r1, #25
 800a598:	d41d      	bmi.n	800a5d6 <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a59a:	06d0      	lsls	r0, r2, #27
 800a59c:	d408      	bmi.n	800a5b0 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a59e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a5a0:	6923      	ldr	r3, [r4, #16]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d0f3      	beq.n	800a58e <USART6_IRQHandler+0x42>
 800a5a6:	68e1      	ldr	r1, [r4, #12]
}
 800a5a8:	b005      	add	sp, #20
 800a5aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a5ae:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a5b0:	06ca      	lsls	r2, r1, #27
 800a5b2:	d5f4      	bpl.n	800a59e <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a5b8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a5ba:	6859      	ldr	r1, [r3, #4]
 800a5bc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a5be:	2a02      	cmp	r2, #2
		(void)tmp;
 800a5c0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a5c2:	d1ec      	bne.n	800a59e <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a5ca:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	065b      	lsls	r3, r3, #25
 800a5d0:	d40e      	bmi.n	800a5f0 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a5d2:	2004      	movs	r0, #4
 800a5d4:	e7e4      	b.n	800a5a0 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a5da:	685a      	ldr	r2, [r3, #4]
 800a5dc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a5de:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a5e6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a5e8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a5ea:	e7d9      	b.n	800a5a0 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a5ec:	2003      	movs	r0, #3
 800a5ee:	e7d7      	b.n	800a5a0 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a5f0:	68a0      	ldr	r0, [r4, #8]
 800a5f2:	8b25      	ldrh	r5, [r4, #24]
 800a5f4:	f7fb ffda 	bl	80065ac <_ZN3dma11get_counterEv>
 800a5f8:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a5fa:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a5fc:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a5fe:	f7fb ffdb 	bl	80065b8 <_ZN3dma10get_configEv>
 800a602:	7983      	ldrb	r3, [r0, #6]
 800a604:	2b01      	cmp	r3, #1
 800a606:	d0e4      	beq.n	800a5d2 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a608:	a802      	add	r0, sp, #8
 800a60a:	68a1      	ldr	r1, [r4, #8]
 800a60c:	f7fb ff70 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a610:	6822      	ldr	r2, [r4, #0]
 800a612:	6953      	ldr	r3, [r2, #20]
 800a614:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a618:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a61a:	6153      	str	r3, [r2, #20]
 800a61c:	e7c0      	b.n	800a5a0 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a61e:	6961      	ldr	r1, [r4, #20]
 800a620:	7f22      	ldrb	r2, [r4, #28]
 800a622:	5cc9      	ldrb	r1, [r1, r3]
 800a624:	4291      	cmp	r1, r2
 800a626:	d1ad      	bne.n	800a584 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a628:	6822      	ldr	r2, [r4, #0]
 800a62a:	68d1      	ldr	r1, [r2, #12]
 800a62c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a630:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a632:	6951      	ldr	r1, [r2, #20]
 800a634:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a638:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a63a:	6151      	str	r1, [r2, #20]
 800a63c:	e7a3      	b.n	800a586 <USART6_IRQHandler+0x3a>
 800a63e:	bf00      	nop
 800a640:	2000b9cc 	.word	0x2000b9cc

0800a644 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 800a644:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a646:	4c3c      	ldr	r4, [pc, #240]	; (800a738 <UART7_IRQHandler+0xf4>)
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	681a      	ldr	r2, [r3, #0]
 800a64c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a64e:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 800a650:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a652:	d51a      	bpl.n	800a68a <UART7_IRQHandler+0x46>
 800a654:	068d      	lsls	r5, r1, #26
 800a656:	d518      	bpl.n	800a68a <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a65c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a65e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a660:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a662:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a664:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a668:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a66a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a66c:	d93a      	bls.n	800a6e4 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a66e:	6962      	ldr	r2, [r4, #20]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a674:	7f63      	ldrb	r3, [r4, #29]
 800a676:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a678:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a67a:	d04c      	beq.n	800a716 <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a67c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a67e:	3301      	adds	r3, #1
 800a680:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	b95b      	cbnz	r3, 800a69e <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 800a686:	b005      	add	sp, #20
 800a688:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a68a:	0650      	lsls	r0, r2, #25
 800a68c:	d501      	bpl.n	800a692 <UART7_IRQHandler+0x4e>
 800a68e:	064d      	lsls	r5, r1, #25
 800a690:	d41d      	bmi.n	800a6ce <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a692:	06d0      	lsls	r0, r2, #27
 800a694:	d408      	bmi.n	800a6a8 <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a696:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0f3      	beq.n	800a686 <UART7_IRQHandler+0x42>
 800a69e:	68e1      	ldr	r1, [r4, #12]
}
 800a6a0:	b005      	add	sp, #20
 800a6a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a6a6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a6a8:	06ca      	lsls	r2, r1, #27
 800a6aa:	d5f4      	bpl.n	800a696 <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a6b0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a6b2:	6859      	ldr	r1, [r3, #4]
 800a6b4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a6b6:	2a02      	cmp	r2, #2
		(void)tmp;
 800a6b8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a6ba:	d1ec      	bne.n	800a696 <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a6c2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a6c4:	695b      	ldr	r3, [r3, #20]
 800a6c6:	065b      	lsls	r3, r3, #25
 800a6c8:	d40e      	bmi.n	800a6e8 <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a6ca:	2004      	movs	r0, #4
 800a6cc:	e7e4      	b.n	800a698 <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a6d6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a6de:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a6e0:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a6e2:	e7d9      	b.n	800a698 <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a6e4:	2003      	movs	r0, #3
 800a6e6:	e7d7      	b.n	800a698 <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a6e8:	68a0      	ldr	r0, [r4, #8]
 800a6ea:	8b25      	ldrh	r5, [r4, #24]
 800a6ec:	f7fb ff5e 	bl	80065ac <_ZN3dma11get_counterEv>
 800a6f0:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a6f2:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a6f4:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a6f6:	f7fb ff5f 	bl	80065b8 <_ZN3dma10get_configEv>
 800a6fa:	7983      	ldrb	r3, [r0, #6]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d0e4      	beq.n	800a6ca <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a700:	a802      	add	r0, sp, #8
 800a702:	68a1      	ldr	r1, [r4, #8]
 800a704:	f7fb fef4 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	6953      	ldr	r3, [r2, #20]
 800a70c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a710:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a712:	6153      	str	r3, [r2, #20]
 800a714:	e7c0      	b.n	800a698 <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a716:	6961      	ldr	r1, [r4, #20]
 800a718:	7f22      	ldrb	r2, [r4, #28]
 800a71a:	5cc9      	ldrb	r1, [r1, r3]
 800a71c:	4291      	cmp	r1, r2
 800a71e:	d1ad      	bne.n	800a67c <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a720:	6822      	ldr	r2, [r4, #0]
 800a722:	68d1      	ldr	r1, [r2, #12]
 800a724:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a728:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a72a:	6951      	ldr	r1, [r2, #20]
 800a72c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a730:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a732:	6151      	str	r1, [r2, #20]
 800a734:	e7a3      	b.n	800a67e <UART7_IRQHandler+0x3a>
 800a736:	bf00      	nop
 800a738:	2000b904 	.word	0x2000b904

0800a73c <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 800a73c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800a73e:	4c3c      	ldr	r4, [pc, #240]	; (800a830 <UART8_IRQHandler+0xf4>)
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a746:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 800a748:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800a74a:	d51a      	bpl.n	800a782 <UART8_IRQHandler+0x46>
 800a74c:	068d      	lsls	r5, r1, #26
 800a74e:	d518      	bpl.n	800a782 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800a754:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a756:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a758:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a75a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a75c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 800a760:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800a762:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800a764:	d93a      	bls.n	800a7dc <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800a766:	6962      	ldr	r2, [r4, #20]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a76c:	7f63      	ldrb	r3, [r4, #29]
 800a76e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a770:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800a772:	d04c      	beq.n	800a80e <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800a774:	2002      	movs	r0, #2
		usart -> rxcount++;
 800a776:	3301      	adds	r3, #1
 800a778:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	b95b      	cbnz	r3, 800a796 <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 800a77e:	b005      	add	sp, #20
 800a780:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800a782:	0650      	lsls	r0, r2, #25
 800a784:	d501      	bpl.n	800a78a <UART8_IRQHandler+0x4e>
 800a786:	064d      	lsls	r5, r1, #25
 800a788:	d41d      	bmi.n	800a7c6 <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a78a:	06d0      	lsls	r0, r2, #27
 800a78c:	d408      	bmi.n	800a7a0 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800a78e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a790:	6923      	ldr	r3, [r4, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0f3      	beq.n	800a77e <UART8_IRQHandler+0x42>
 800a796:	68e1      	ldr	r1, [r4, #12]
}
 800a798:	b005      	add	sp, #20
 800a79a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800a79e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800a7a0:	06ca      	lsls	r2, r1, #27
 800a7a2:	d5f4      	bpl.n	800a78e <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a7a8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800a7aa:	6859      	ldr	r1, [r3, #4]
 800a7ac:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a7ae:	2a02      	cmp	r2, #2
		(void)tmp;
 800a7b0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800a7b2:	d1ec      	bne.n	800a78e <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800a7ba:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	065b      	lsls	r3, r3, #25
 800a7c0:	d40e      	bmi.n	800a7e0 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800a7c2:	2004      	movs	r0, #4
 800a7c4:	e7e4      	b.n	800a790 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800a7ce:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800a7d6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 800a7d8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800a7da:	e7d9      	b.n	800a790 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800a7dc:	2003      	movs	r0, #3
 800a7de:	e7d7      	b.n	800a790 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a7e0:	68a0      	ldr	r0, [r4, #8]
 800a7e2:	8b25      	ldrh	r5, [r4, #24]
 800a7e4:	f7fb fee2 	bl	80065ac <_ZN3dma11get_counterEv>
 800a7e8:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a7ea:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800a7ec:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800a7ee:	f7fb fee3 	bl	80065b8 <_ZN3dma10get_configEv>
 800a7f2:	7983      	ldrb	r3, [r0, #6]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d0e4      	beq.n	800a7c2 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 800a7f8:	a802      	add	r0, sp, #8
 800a7fa:	68a1      	ldr	r1, [r4, #8]
 800a7fc:	f7fb fe78 	bl	80064f0 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a800:	6822      	ldr	r2, [r4, #0]
 800a802:	6953      	ldr	r3, [r2, #20]
 800a804:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 800a808:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800a80a:	6153      	str	r3, [r2, #20]
 800a80c:	e7c0      	b.n	800a790 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800a80e:	6961      	ldr	r1, [r4, #20]
 800a810:	7f22      	ldrb	r2, [r4, #28]
 800a812:	5cc9      	ldrb	r1, [r1, r3]
 800a814:	4291      	cmp	r1, r2
 800a816:	d1ad      	bne.n	800a774 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800a818:	6822      	ldr	r2, [r4, #0]
 800a81a:	68d1      	ldr	r1, [r2, #12]
 800a81c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a820:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a822:	6951      	ldr	r1, [r2, #20]
 800a824:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 800a828:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800a82a:	6151      	str	r1, [r2, #20]
 800a82c:	e7a3      	b.n	800a776 <UART8_IRQHandler+0x3a>
 800a82e:	bf00      	nop
 800a830:	2000b92c 	.word	0x2000b92c

0800a834 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 800a834:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a91c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 800a838:	482d      	ldr	r0, [pc, #180]	; (800a8f0 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 800a83a:	492e      	ldr	r1, [pc, #184]	; (800a8f4 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 800a83c:	4a2e      	ldr	r2, [pc, #184]	; (800a8f8 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 800a83e:	2300      	movs	r3, #0
}
 800a840:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 800a842:	4f2e      	ldr	r7, [pc, #184]	; (800a8fc <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 800a844:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 800a920 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 800a848:	4e2d      	ldr	r6, [pc, #180]	; (800a900 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 800a84a:	f8cc 3014 	str.w	r3, [ip, #20]
 800a84e:	e9cc 3301 	strd	r3, r3, [ip, #4]
 800a852:	e9cc 3303 	strd	r3, r3, [ip, #12]
 800a856:	f8ac 301c 	strh.w	r3, [ip, #28]
 800a85a:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 800a85e:	f8cc e000 	str.w	lr, [ip]
 800a862:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800a924 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 800a866:	4c27      	ldr	r4, [pc, #156]	; (800a904 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 800a868:	4d27      	ldr	r5, [pc, #156]	; (800a908 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 800a86a:	617b      	str	r3, [r7, #20]
 800a86c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800a870:	e9c7 3303 	strd	r3, r3, [r7, #12]
 800a874:	83bb      	strh	r3, [r7, #28]
 800a876:	623b      	str	r3, [r7, #32]
	_usart = usart;
 800a878:	f8c7 c000 	str.w	ip, [r7]
 800a87c:	4f23      	ldr	r7, [pc, #140]	; (800a90c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 800a87e:	6173      	str	r3, [r6, #20]
 800a880:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800a884:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800a888:	83b3      	strh	r3, [r6, #28]
 800a88a:	6233      	str	r3, [r6, #32]
	_usart = usart;
 800a88c:	6037      	str	r7, [r6, #0]
 800a88e:	4e20      	ldr	r6, [pc, #128]	; (800a910 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 800a890:	616b      	str	r3, [r5, #20]
 800a892:	e9c5 3301 	strd	r3, r3, [r5, #4]
 800a896:	e9c5 3303 	strd	r3, r3, [r5, #12]
 800a89a:	83ab      	strh	r3, [r5, #28]
 800a89c:	622b      	str	r3, [r5, #32]
	_usart = usart;
 800a89e:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 800a8a0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800a8a4:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a8a8:	6163      	str	r3, [r4, #20]
 800a8aa:	83a3      	strh	r3, [r4, #28]
 800a8ac:	6223      	str	r3, [r4, #32]
 800a8ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800a8b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8b6:	e9c1 3301 	strd	r3, r3, [r1, #4]
 800a8ba:	e9c1 3303 	strd	r3, r3, [r1, #12]
 800a8be:	e9c2 3301 	strd	r3, r3, [r2, #4]
 800a8c2:	e9c2 3303 	strd	r3, r3, [r2, #12]
 800a8c6:	6143      	str	r3, [r0, #20]
 800a8c8:	8383      	strh	r3, [r0, #28]
 800a8ca:	6203      	str	r3, [r0, #32]
 800a8cc:	614b      	str	r3, [r1, #20]
 800a8ce:	838b      	strh	r3, [r1, #28]
 800a8d0:	620b      	str	r3, [r1, #32]
 800a8d2:	6153      	str	r3, [r2, #20]
 800a8d4:	8393      	strh	r3, [r2, #28]
 800a8d6:	6213      	str	r3, [r2, #32]
	_usart = usart;
 800a8d8:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 800a8da:	6023      	str	r3, [r4, #0]
 800a8dc:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 800a8e0:	4c0d      	ldr	r4, [pc, #52]	; (800a918 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 800a8e2:	6003      	str	r3, [r0, #0]
 800a8e4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800a8e8:	600c      	str	r4, [r1, #0]
 800a8ea:	6013      	str	r3, [r2, #0]
}
 800a8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	2000b8dc 	.word	0x2000b8dc
 800a8f4:	2000b9cc 	.word	0x2000b9cc
 800a8f8:	2000b904 	.word	0x2000b904
 800a8fc:	2000b97c 	.word	0x2000b97c
 800a900:	2000b9a4 	.word	0x2000b9a4
 800a904:	2000b92c 	.word	0x2000b92c
 800a908:	2000b8b4 	.word	0x2000b8b4
 800a90c:	40004800 	.word	0x40004800
 800a910:	40004c00 	.word	0x40004c00
 800a914:	40007c00 	.word	0x40007c00
 800a918:	40011400 	.word	0x40011400
 800a91c:	2000b954 	.word	0x2000b954
 800a920:	40011000 	.word	0x40011000
 800a924:	40004400 	.word	0x40004400

0800a928 <__NVIC_SystemReset>:
 800a928:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a92c:	4905      	ldr	r1, [pc, #20]	; (800a944 <__NVIC_SystemReset+0x1c>)
 800a92e:	4b06      	ldr	r3, [pc, #24]	; (800a948 <__NVIC_SystemReset+0x20>)
 800a930:	68ca      	ldr	r2, [r1, #12]
 800a932:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a936:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a938:	60cb      	str	r3, [r1, #12]
 800a93a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800a93e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800a940:	e7fd      	b.n	800a93e <__NVIC_SystemReset+0x16>
 800a942:	bf00      	nop
 800a944:	e000ed00 	.word	0xe000ed00
 800a948:	05fa0004 	.word	0x05fa0004

0800a94c <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 800a94c:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 800a94e:	4807      	ldr	r0, [pc, #28]	; (800a96c <app_main_task+0x20>)
 800a950:	4907      	ldr	r1, [pc, #28]	; (800a970 <app_main_task+0x24>)
 800a952:	f000 f9b1 	bl	800acb8 <LOG_INFO>
	extern void app_main(void);
	app_main();
 800a956:	f001 fb9f 	bl	800c098 <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 800a95a:	4804      	ldr	r0, [pc, #16]	; (800a96c <app_main_task+0x20>)
 800a95c:	4905      	ldr	r1, [pc, #20]	; (800a974 <app_main_task+0x28>)
 800a95e:	f000 f9ab 	bl	800acb8 <LOG_INFO>
	vTaskDelete(NULL);
}
 800a962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 800a966:	2000      	movs	r0, #0
 800a968:	f7f8 ba6c 	b.w	8002e44 <vTaskDelete>
 800a96c:	08011924 	.word	0x08011924
 800a970:	08011910 	.word	0x08011910
 800a974:	0801192c 	.word	0x0801192c

0800a978 <uart_log>:

	uart_log((char *)"\r\n\r\n");
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 800a978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a97a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a97c:	2100      	movs	r1, #0
static void uart_log(char *log){
 800a97e:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800a980:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a982:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800a986:	4d19      	ldr	r5, [pc, #100]	; (800a9ec <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 800a988:	b93c      	cbnz	r4, 800a99a <uart_log+0x22>
 800a98a:	6828      	ldr	r0, [r5, #0]
 800a98c:	210a      	movs	r1, #10
 800a98e:	f7f7 fca9 	bl	80022e4 <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 800a992:	2801      	cmp	r0, #1
 800a994:	d01f      	beq.n	800a9d6 <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 800a996:	b003      	add	sp, #12
 800a998:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800a99a:	af01      	add	r7, sp, #4
 800a99c:	6828      	ldr	r0, [r5, #0]
 800a99e:	463a      	mov	r2, r7
 800a9a0:	f7f7 fe2a 	bl	80025f8 <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 800a9a4:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800a9a6:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 800a9a8:	d1f5      	bne.n	800a996 <uart_log+0x1e>
		while(*log) {
 800a9aa:	7833      	ldrb	r3, [r6, #0]
 800a9ac:	b1c3      	cbz	r3, 800a9e0 <uart_log+0x68>
			log_uart -> DR = *log++;
 800a9ae:	4a10      	ldr	r2, [pc, #64]	; (800a9f0 <uart_log+0x78>)
 800a9b0:	4631      	mov	r1, r6
 800a9b2:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 800a9b4:	6813      	ldr	r3, [r2, #0]
 800a9b6:	065b      	lsls	r3, r3, #25
 800a9b8:	d5fc      	bpl.n	800a9b4 <uart_log+0x3c>
		while(*log) {
 800a9ba:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d1f7      	bne.n	800a9b2 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 800a9c2:	2c01      	cmp	r4, #1
 800a9c4:	d00b      	beq.n	800a9de <uart_log+0x66>
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	6828      	ldr	r0, [r5, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f7f7 f893 	bl	8001af8 <xQueueGenericSend>
}
 800a9d2:	b003      	add	sp, #12
 800a9d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 800a9d6:	7833      	ldrb	r3, [r6, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1e8      	bne.n	800a9ae <uart_log+0x36>
 800a9dc:	e7f3      	b.n	800a9c6 <uart_log+0x4e>
 800a9de:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 800a9e0:	6828      	ldr	r0, [r5, #0]
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f7 faa4 	bl	8001f30 <xQueueGiveFromISR>
}
 800a9e8:	b003      	add	sp, #12
 800a9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9ec:	2000b9f4 	.word	0x2000b9f4
 800a9f0:	40011400 	.word	0x40011400
 800a9f4:	00000000 	.word	0x00000000

0800a9f8 <main_application>:
int main_application(void){
 800a9f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fa:	b085      	sub	sp, #20
	system_init();
 800a9fc:	f000 fb74 	bl	800b0e8 <system_init>
	rcc_init(&rcc);
 800aa00:	4979      	ldr	r1, [pc, #484]	; (800abe8 <main_application+0x1f0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800aa02:	4e7a      	ldr	r6, [pc, #488]	; (800abec <main_application+0x1f4>)
	rcc_init(&rcc);
 800aa04:	a802      	add	r0, sp, #8
 800aa06:	f7fc fd2b 	bl	8007460 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 800aa0a:	4879      	ldr	r0, [pc, #484]	; (800abf0 <main_application+0x1f8>)
 800aa0c:	f7fc fb6c 	bl	80070e8 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 800aa10:	4878      	ldr	r0, [pc, #480]	; (800abf4 <main_application+0x1fc>)
 800aa12:	f7fc faa1 	bl	8006f58 <fmc_sdram_init>
	sdram_init();
 800aa16:	f7fc f87f 	bl	8006b18 <sdram_init>
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 800aa1a:	2104      	movs	r1, #4
 800aa1c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800aa20:	a802      	add	r0, sp, #8
 800aa22:	f7fc fcef 	bl	8007404 <iwdg_init>
	iwdg_disable_in_debugmode();
 800aa26:	f7fc fd0b 	bl	8007440 <iwdg_disable_in_debugmode>
	rng_init();
 800aa2a:	f7fc ff17 	bl	800785c <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800aa2e:	2001      	movs	r0, #1
 800aa30:	f7f7 f9e0 	bl	8001df4 <xQueueCreateMutex>
 800aa34:	4b70      	ldr	r3, [pc, #448]	; (800abf8 <main_application+0x200>)
 800aa36:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 800aa38:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800aa3a:	4870      	ldr	r0, [pc, #448]	; (800abfc <main_application+0x204>)
	log_semaph = xSemaphoreCreateMutex();
 800aa3c:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 800aa3e:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800aa40:	f7fc fb52 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 800aa44:	486d      	ldr	r0, [pc, #436]	; (800abfc <main_application+0x204>)
 800aa46:	f7fc fb4f 	bl	80070e8 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 800aa4a:	486c      	ldr	r0, [pc, #432]	; (800abfc <main_application+0x204>)
 800aa4c:	2208      	movs	r2, #8
 800aa4e:	210e      	movs	r1, #14
 800aa50:	f7fc fc32 	bl	80072b8 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 800aa54:	2109      	movs	r1, #9
 800aa56:	4869      	ldr	r0, [pc, #420]	; (800abfc <main_application+0x204>)
 800aa58:	2208      	movs	r2, #8
 800aa5a:	f7fc fc2d 	bl	80072b8 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800aa5e:	4a68      	ldr	r2, [pc, #416]	; (800ac00 <main_application+0x208>)
 800aa60:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800aa62:	f043 0320 	orr.w	r3, r3, #32
 800aa66:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 800aa68:	2003      	movs	r0, #3
 800aa6a:	f7fc fe8f 	bl	800778c <rcc_get_bus_frequency>
 800aa6e:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 800aa70:	68f3      	ldr	r3, [r6, #12]
 800aa72:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa76:	f043 030c 	orr.w	r3, r3, #12
 800aa7a:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 800aa7c:	9802      	ldr	r0, [sp, #8]
 800aa7e:	f7f5 fd61 	bl	8000544 <__aeabi_ui2d>
 800aa82:	a355      	add	r3, pc, #340	; (adr r3, 800abd8 <main_application+0x1e0>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	f7f5 fdd6 	bl	8000638 <__aeabi_dmul>
 800aa8c:	f7f6 f8cc 	bl	8000c28 <__aeabi_d2f>
 800aa90:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 800aa94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 800aa98:	ee17 3a90 	vmov	r3, s15
 800aa9c:	b29c      	uxth	r4, r3
 800aa9e:	f7f5 fd73 	bl	8000588 <__aeabi_f2d>
 800aaa2:	4b58      	ldr	r3, [pc, #352]	; (800ac04 <main_application+0x20c>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f7f5 fdc7 	bl	8000638 <__aeabi_dmul>
 800aaaa:	f7f6 f89d 	bl	8000be8 <__aeabi_d2uiz>
 800aaae:	4607      	mov	r7, r0
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7f5 fd57 	bl	8000564 <__aeabi_i2d>
 800aab6:	4b53      	ldr	r3, [pc, #332]	; (800ac04 <main_application+0x20c>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	f7f5 fdbd 	bl	8000638 <__aeabi_dmul>
 800aabe:	f7f6 f893 	bl	8000be8 <__aeabi_d2uiz>
 800aac2:	b2bf      	uxth	r7, r7
 800aac4:	b280      	uxth	r0, r0
 800aac6:	1a38      	subs	r0, r7, r0
 800aac8:	f7f5 fd4c 	bl	8000564 <__aeabi_i2d>
 800aacc:	a344      	add	r3, pc, #272	; (adr r3, 800abe0 <main_application+0x1e8>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 fdb1 	bl	8000638 <__aeabi_dmul>
 800aad6:	f7f6 f8a7 	bl	8000c28 <__aeabi_d2f>
 800aada:	ee07 0a90 	vmov	s15, r0
 800aade:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 800aae2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800aae6:	f001 fb81 	bl	800c1ec <ceilf>
	DIV_Fraction = ceil(Fraction);
 800aaea:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n");
 800aaee:	4846      	ldr	r0, [pc, #280]	; (800ac08 <main_application+0x210>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 800aaf0:	ee10 3a10 	vmov	r3, s0
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800aafa:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n");
 800aafc:	f7ff ff3c 	bl	800a978 <uart_log>
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 800ab00:	4842      	ldr	r0, [pc, #264]	; (800ac0c <main_application+0x214>)
 800ab02:	f7ff ff39 	bl	800a978 <uart_log>
	log_init(uart_log);
 800ab06:	4842      	ldr	r0, [pc, #264]	; (800ac10 <main_application+0x218>)
 800ab08:	f000 f8d0 	bl	800acac <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 800ab0c:	4941      	ldr	r1, [pc, #260]	; (800ac14 <main_application+0x21c>)
 800ab0e:	4a42      	ldr	r2, [pc, #264]	; (800ac18 <main_application+0x220>)
 800ab10:	4842      	ldr	r0, [pc, #264]	; (800ac1c <main_application+0x224>)
 800ab12:	f000 f8d1 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 800ab16:	f000 fad3 	bl	800b0c0 <get_revid>
 800ab1a:	4941      	ldr	r1, [pc, #260]	; (800ac20 <main_application+0x228>)
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	483f      	ldr	r0, [pc, #252]	; (800ac1c <main_application+0x224>)
 800ab20:	f000 f8ca 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 800ab24:	f000 fad2 	bl	800b0cc <get_devid>
 800ab28:	493e      	ldr	r1, [pc, #248]	; (800ac24 <main_application+0x22c>)
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	483b      	ldr	r0, [pc, #236]	; (800ac1c <main_application+0x224>)
 800ab2e:	f000 f8c3 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 800ab32:	f000 fad3 	bl	800b0dc <get_flashsize>
 800ab36:	493c      	ldr	r1, [pc, #240]	; (800ac28 <main_application+0x230>)
 800ab38:	4602      	mov	r2, r0
 800ab3a:	4838      	ldr	r0, [pc, #224]	; (800ac1c <main_application+0x224>)
 800ab3c:	f000 f8bc 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 800ab40:	493a      	ldr	r1, [pc, #232]	; (800ac2c <main_application+0x234>)
 800ab42:	4836      	ldr	r0, [pc, #216]	; (800ac1c <main_application+0x224>)
 800ab44:	2280      	movs	r2, #128	; 0x80
 800ab46:	f000 f8b7 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 800ab4a:	4939      	ldr	r1, [pc, #228]	; (800ac30 <main_application+0x238>)
 800ab4c:	4a39      	ldr	r2, [pc, #228]	; (800ac34 <main_application+0x23c>)
 800ab4e:	4833      	ldr	r0, [pc, #204]	; (800ac1c <main_application+0x224>)
 800ab50:	f000 f8b2 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 800ab54:	4628      	mov	r0, r5
 800ab56:	f7fc fe19 	bl	800778c <rcc_get_bus_frequency>
 800ab5a:	4937      	ldr	r1, [pc, #220]	; (800ac38 <main_application+0x240>)
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	482f      	ldr	r0, [pc, #188]	; (800ac1c <main_application+0x224>)
 800ab60:	f000 f8aa 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 800ab64:	2001      	movs	r0, #1
 800ab66:	f7fc fe11 	bl	800778c <rcc_get_bus_frequency>
 800ab6a:	4934      	ldr	r1, [pc, #208]	; (800ac3c <main_application+0x244>)
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	482b      	ldr	r0, [pc, #172]	; (800ac1c <main_application+0x224>)
 800ab70:	f000 f8a2 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 800ab74:	2002      	movs	r0, #2
 800ab76:	f7fc fe09 	bl	800778c <rcc_get_bus_frequency>
 800ab7a:	4931      	ldr	r1, [pc, #196]	; (800ac40 <main_application+0x248>)
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	4827      	ldr	r0, [pc, #156]	; (800ac1c <main_application+0x224>)
 800ab80:	f000 f89a 	bl	800acb8 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 800ab84:	2003      	movs	r0, #3
 800ab86:	f7fc fe01 	bl	800778c <rcc_get_bus_frequency>
 800ab8a:	492e      	ldr	r1, [pc, #184]	; (800ac44 <main_application+0x24c>)
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	4823      	ldr	r0, [pc, #140]	; (800ac1c <main_application+0x224>)
 800ab90:	f000 f892 	bl	800acb8 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 800ab94:	2301      	movs	r3, #1
 800ab96:	e9cd 3500 	strd	r3, r5, [sp]
 800ab9a:	492b      	ldr	r1, [pc, #172]	; (800ac48 <main_application+0x250>)
 800ab9c:	482b      	ldr	r0, [pc, #172]	; (800ac4c <main_application+0x254>)
 800ab9e:	462b      	mov	r3, r5
 800aba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aba4:	f7f8 f91c 	bl	8002de0 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 800aba8:	2801      	cmp	r0, #1
 800abaa:	d00b      	beq.n	800abc4 <main_application+0x1cc>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 800abac:	206a      	movs	r0, #106	; 0x6a
 800abae:	9000      	str	r0, [sp, #0]
 800abb0:	4b27      	ldr	r3, [pc, #156]	; (800ac50 <main_application+0x258>)
 800abb2:	4a28      	ldr	r2, [pc, #160]	; (800ac54 <main_application+0x25c>)
 800abb4:	4928      	ldr	r1, [pc, #160]	; (800ac58 <main_application+0x260>)
 800abb6:	4819      	ldr	r0, [pc, #100]	; (800ac1c <main_application+0x224>)
 800abb8:	f000 f8fa 	bl	800adb0 <LOG_ERROR>
		return 0;
 800abbc:	462c      	mov	r4, r5
}
 800abbe:	4620      	mov	r0, r4
 800abc0:	b005      	add	sp, #20
 800abc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 800abc4:	4925      	ldr	r1, [pc, #148]	; (800ac5c <main_application+0x264>)
 800abc6:	4604      	mov	r4, r0
 800abc8:	4814      	ldr	r0, [pc, #80]	; (800ac1c <main_application+0x224>)
 800abca:	f000 f875 	bl	800acb8 <LOG_INFO>
	vTaskStartScheduler();
 800abce:	f7f8 fadf 	bl	8003190 <vTaskStartScheduler>
}
 800abd2:	4620      	mov	r0, r4
 800abd4:	b005      	add	sp, #20
 800abd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abd8:	789abcdf 	.word	0x789abcdf
 800abdc:	3ea23456 	.word	0x3ea23456
 800abe0:	47ae147b 	.word	0x47ae147b
 800abe4:	3f847ae1 	.word	0x3f847ae1
 800abe8:	20000094 	.word	0x20000094
 800abec:	40011400 	.word	0x40011400
 800abf0:	40021c00 	.word	0x40021c00
 800abf4:	200000bc 	.word	0x200000bc
 800abf8:	2000b9f4 	.word	0x2000b9f4
 800abfc:	40021800 	.word	0x40021800
 800ac00:	40023800 	.word	0x40023800
 800ac04:	40590000 	.word	0x40590000
 800ac08:	08011948 	.word	0x08011948
 800ac0c:	08011950 	.word	0x08011950
 800ac10:	0800a979 	.word	0x0800a979
 800ac14:	080119bc 	.word	0x080119bc
 800ac18:	080119b0 	.word	0x080119b0
 800ac1c:	08011924 	.word	0x08011924
 800ac20:	080119d0 	.word	0x080119d0
 800ac24:	080119e8 	.word	0x080119e8
 800ac28:	08011a00 	.word	0x08011a00
 800ac2c:	08011a18 	.word	0x08011a18
 800ac30:	08011a38 	.word	0x08011a38
 800ac34:	08011a30 	.word	0x08011a30
 800ac38:	08011a4c 	.word	0x08011a4c
 800ac3c:	08011a64 	.word	0x08011a64
 800ac40:	08011a7c 	.word	0x08011a7c
 800ac44:	08011a94 	.word	0x08011a94
 800ac48:	08011aac 	.word	0x08011aac
 800ac4c:	0800a94d 	.word	0x0800a94d
 800ac50:	08011abc 	.word	0x08011abc
 800ac54:	08011ad0 	.word	0x08011ad0
 800ac58:	08011af0 	.word	0x08011af0
 800ac5c:	08011b28 	.word	0x08011b28

0800ac60 <vApplicationIdleHook>:
	void vApplicationIdleHook(void){
 800ac60:	b508      	push	{r3, lr}
		iwdg_refresh();
 800ac62:	f7fc fbf5 	bl	8007450 <iwdg_refresh>
	}
 800ac66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_calculate_cpu_load_percent();
 800ac6a:	f000 bb0d 	b.w	800b288 <sys_calculate_cpu_load_percent>
 800ac6e:	bf00      	nop

0800ac70 <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 800ac70:	b508      	push	{r3, lr}
 800ac72:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 800ac74:	4804      	ldr	r0, [pc, #16]	; (800ac88 <vApplicationStackOverflowHook+0x18>)
 800ac76:	4905      	ldr	r1, [pc, #20]	; (800ac8c <vApplicationStackOverflowHook+0x1c>)
 800ac78:	f000 f89a 	bl	800adb0 <LOG_ERROR>
 800ac7c:	4b04      	ldr	r3, [pc, #16]	; (800ac90 <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 800ac7e:	bf00      	nop
 800ac80:	3b01      	subs	r3, #1
 800ac82:	d1fc      	bne.n	800ac7e <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 800ac84:	f7ff fe50 	bl	800a928 <__NVIC_SystemReset>
 800ac88:	08011924 	.word	0x08011924
 800ac8c:	08011b44 	.word	0x08011b44
 800ac90:	003d0900 	.word	0x003d0900

0800ac94 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 800ac94:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 800ac96:	4903      	ldr	r1, [pc, #12]	; (800aca4 <vApplicationMallocFailedHook+0x10>)
 800ac98:	4803      	ldr	r0, [pc, #12]	; (800aca8 <vApplicationMallocFailedHook+0x14>)
 800ac9a:	f000 f889 	bl	800adb0 <LOG_ERROR>
		__NVIC_SystemReset();
 800ac9e:	f7ff fe43 	bl	800a928 <__NVIC_SystemReset>
 800aca2:	bf00      	nop
 800aca4:	08011b5c 	.word	0x08011b5c
 800aca8:	08011924 	.word	0x08011924

0800acac <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 800acac:	4b01      	ldr	r3, [pc, #4]	; (800acb4 <log_init+0x8>)
 800acae:	6018      	str	r0, [r3, #0]
}
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	2000b9f8 	.word	0x2000b9f8

0800acb8 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 800acb8:	b40e      	push	{r1, r2, r3}
 800acba:	b570      	push	{r4, r5, r6, lr}
 800acbc:	b08b      	sub	sp, #44	; 0x2c
 800acbe:	ac0f      	add	r4, sp, #60	; 0x3c
 800acc0:	4606      	mov	r6, r0
 800acc2:	f854 1b04 	ldr.w	r1, [r4], #4
 800acc6:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800acc8:	f7fd fc36 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800accc:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800acce:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800acd0:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800acd2:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800acd4:	4622      	mov	r2, r4
 800acd6:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800acd8:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800acda:	f003 f9b7 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 800acde:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <LOG_INFO+0x64>)
 800ace0:	4a0f      	ldr	r2, [pc, #60]	; (800ad20 <LOG_INFO+0x68>)
 800ace2:	7819      	ldrb	r1, [r3, #0]
 800ace4:	4b0f      	ldr	r3, [pc, #60]	; (800ad24 <LOG_INFO+0x6c>)
 800ace6:	9303      	str	r3, [sp, #12]
 800ace8:	9b07      	ldr	r3, [sp, #28]
 800acea:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800acee:	9302      	str	r3, [sp, #8]
 800acf0:	490d      	ldr	r1, [pc, #52]	; (800ad28 <LOG_INFO+0x70>)
 800acf2:	4b0e      	ldr	r3, [pc, #56]	; (800ad2c <LOG_INFO+0x74>)
 800acf4:	e9cd 5600 	strd	r5, r6, [sp]
 800acf8:	a809      	add	r0, sp, #36	; 0x24
 800acfa:	f001 fac1 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800acfe:	4b0c      	ldr	r3, [pc, #48]	; (800ad30 <LOG_INFO+0x78>)
 800ad00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4798      	blx	r3
	free(Temp_buffer);
 800ad06:	9807      	ldr	r0, [sp, #28]
 800ad08:	f001 fb16 	bl	800c338 <free>
	free(Output_buffer);
 800ad0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad0e:	f001 fb13 	bl	800c338 <free>
}
 800ad12:	b00b      	add	sp, #44	; 0x2c
 800ad14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad18:	b003      	add	sp, #12
 800ad1a:	4770      	bx	lr
 800ad1c:	200000f2 	.word	0x200000f2
 800ad20:	08011d08 	.word	0x08011d08
 800ad24:	08011b8c 	.word	0x08011b8c
 800ad28:	08011b98 	.word	0x08011b98
 800ad2c:	08011b94 	.word	0x08011b94
 800ad30:	2000b9f8 	.word	0x2000b9f8

0800ad34 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 800ad34:	b40e      	push	{r1, r2, r3}
 800ad36:	b570      	push	{r4, r5, r6, lr}
 800ad38:	b08b      	sub	sp, #44	; 0x2c
 800ad3a:	ac0f      	add	r4, sp, #60	; 0x3c
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad42:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800ad44:	f7fd fbf8 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800ad48:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800ad4a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800ad4c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800ad4e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800ad50:	4622      	mov	r2, r4
 800ad52:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800ad54:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800ad56:	f003 f979 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 800ad5a:	4b0f      	ldr	r3, [pc, #60]	; (800ad98 <LOG_WARN+0x64>)
 800ad5c:	4a0f      	ldr	r2, [pc, #60]	; (800ad9c <LOG_WARN+0x68>)
 800ad5e:	7819      	ldrb	r1, [r3, #0]
 800ad60:	4b0f      	ldr	r3, [pc, #60]	; (800ada0 <LOG_WARN+0x6c>)
 800ad62:	9303      	str	r3, [sp, #12]
 800ad64:	9b07      	ldr	r3, [sp, #28]
 800ad66:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ad6a:	9302      	str	r3, [sp, #8]
 800ad6c:	490d      	ldr	r1, [pc, #52]	; (800ada4 <LOG_WARN+0x70>)
 800ad6e:	4b0e      	ldr	r3, [pc, #56]	; (800ada8 <LOG_WARN+0x74>)
 800ad70:	e9cd 5600 	strd	r5, r6, [sp]
 800ad74:	a809      	add	r0, sp, #36	; 0x24
 800ad76:	f001 fa83 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800ad7a:	4b0c      	ldr	r3, [pc, #48]	; (800adac <LOG_WARN+0x78>)
 800ad7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4798      	blx	r3
	free(Temp_buffer);
 800ad82:	9807      	ldr	r0, [sp, #28]
 800ad84:	f001 fad8 	bl	800c338 <free>
	free(Output_buffer);
 800ad88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad8a:	f001 fad5 	bl	800c338 <free>
}
 800ad8e:	b00b      	add	sp, #44	; 0x2c
 800ad90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad94:	b003      	add	sp, #12
 800ad96:	4770      	bx	lr
 800ad98:	200000f6 	.word	0x200000f6
 800ad9c:	08011d08 	.word	0x08011d08
 800ada0:	08011b8c 	.word	0x08011b8c
 800ada4:	08011b98 	.word	0x08011b98
 800ada8:	08011bb0 	.word	0x08011bb0
 800adac:	2000b9f8 	.word	0x2000b9f8

0800adb0 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 800adb0:	b40e      	push	{r1, r2, r3}
 800adb2:	b570      	push	{r4, r5, r6, lr}
 800adb4:	b08b      	sub	sp, #44	; 0x2c
 800adb6:	ac0f      	add	r4, sp, #60	; 0x3c
 800adb8:	4606      	mov	r6, r0
 800adba:	f854 1b04 	ldr.w	r1, [r4], #4
 800adbe:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800adc0:	f7fd fbba 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800adc4:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800adc6:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800adc8:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800adca:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800adcc:	4622      	mov	r2, r4
 800adce:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800add0:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800add2:	f003 f93b 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 800add6:	4b0f      	ldr	r3, [pc, #60]	; (800ae14 <LOG_ERROR+0x64>)
 800add8:	4a0f      	ldr	r2, [pc, #60]	; (800ae18 <LOG_ERROR+0x68>)
 800adda:	7819      	ldrb	r1, [r3, #0]
 800addc:	4b0f      	ldr	r3, [pc, #60]	; (800ae1c <LOG_ERROR+0x6c>)
 800adde:	9303      	str	r3, [sp, #12]
 800ade0:	9b07      	ldr	r3, [sp, #28]
 800ade2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ade6:	9302      	str	r3, [sp, #8]
 800ade8:	490d      	ldr	r1, [pc, #52]	; (800ae20 <LOG_ERROR+0x70>)
 800adea:	4b0e      	ldr	r3, [pc, #56]	; (800ae24 <LOG_ERROR+0x74>)
 800adec:	e9cd 5600 	strd	r5, r6, [sp]
 800adf0:	a809      	add	r0, sp, #36	; 0x24
 800adf2:	f001 fa45 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800adf6:	4b0c      	ldr	r3, [pc, #48]	; (800ae28 <LOG_ERROR+0x78>)
 800adf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4798      	blx	r3
	free(Temp_buffer);
 800adfe:	9807      	ldr	r0, [sp, #28]
 800ae00:	f001 fa9a 	bl	800c338 <free>
	free(Output_buffer);
 800ae04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae06:	f001 fa97 	bl	800c338 <free>
}
 800ae0a:	b00b      	add	sp, #44	; 0x2c
 800ae0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	200000f1 	.word	0x200000f1
 800ae18:	08011d08 	.word	0x08011d08
 800ae1c:	08011b8c 	.word	0x08011b8c
 800ae20:	08011b98 	.word	0x08011b98
 800ae24:	080114ac 	.word	0x080114ac
 800ae28:	2000b9f8 	.word	0x2000b9f8

0800ae2c <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 800ae2c:	b40e      	push	{r1, r2, r3}
 800ae2e:	b570      	push	{r4, r5, r6, lr}
 800ae30:	b08b      	sub	sp, #44	; 0x2c
 800ae32:	ac0f      	add	r4, sp, #60	; 0x3c
 800ae34:	4606      	mov	r6, r0
 800ae36:	f854 1b04 	ldr.w	r1, [r4], #4
 800ae3a:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800ae3c:	f7fd fb7c 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800ae40:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800ae42:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800ae44:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800ae46:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800ae48:	4622      	mov	r2, r4
 800ae4a:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800ae4c:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800ae4e:	f003 f8fd 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 800ae52:	4b0f      	ldr	r3, [pc, #60]	; (800ae90 <LOG_DEBUG+0x64>)
 800ae54:	4a0f      	ldr	r2, [pc, #60]	; (800ae94 <LOG_DEBUG+0x68>)
 800ae56:	7819      	ldrb	r1, [r3, #0]
 800ae58:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <LOG_DEBUG+0x6c>)
 800ae5a:	9303      	str	r3, [sp, #12]
 800ae5c:	9b07      	ldr	r3, [sp, #28]
 800ae5e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	490d      	ldr	r1, [pc, #52]	; (800ae9c <LOG_DEBUG+0x70>)
 800ae66:	4b0e      	ldr	r3, [pc, #56]	; (800aea0 <LOG_DEBUG+0x74>)
 800ae68:	e9cd 5600 	strd	r5, r6, [sp]
 800ae6c:	a809      	add	r0, sp, #36	; 0x24
 800ae6e:	f001 fa07 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800ae72:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <LOG_DEBUG+0x78>)
 800ae74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4798      	blx	r3
	free(Temp_buffer);
 800ae7a:	9807      	ldr	r0, [sp, #28]
 800ae7c:	f001 fa5c 	bl	800c338 <free>
	free(Output_buffer);
 800ae80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae82:	f001 fa59 	bl	800c338 <free>
}
 800ae86:	b00b      	add	sp, #44	; 0x2c
 800ae88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae8c:	b003      	add	sp, #12
 800ae8e:	4770      	bx	lr
 800ae90:	200000f0 	.word	0x200000f0
 800ae94:	08011d08 	.word	0x08011d08
 800ae98:	08011b8c 	.word	0x08011b8c
 800ae9c:	08011b98 	.word	0x08011b98
 800aea0:	08011bb4 	.word	0x08011bb4
 800aea4:	2000b9f8 	.word	0x2000b9f8

0800aea8 <LOG_MEM>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_MEM(const char *tag,  const char *format, ...){
 800aea8:	b40e      	push	{r1, r2, r3}
 800aeaa:	b570      	push	{r4, r5, r6, lr}
 800aeac:	b08b      	sub	sp, #44	; 0x2c
 800aeae:	ac0f      	add	r4, sp, #60	; 0x3c
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	f854 1b04 	ldr.w	r1, [r4], #4
 800aeb6:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800aeb8:	f7fd fb3e 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800aebc:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800aebe:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800aec0:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800aec2:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800aec4:	4622      	mov	r2, r4
 800aec6:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800aec8:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800aeca:	f003 f8bf 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logm], log_level_str[4], time, tag, Temp_buffer, COLOR_END);
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <LOG_MEM+0x64>)
 800aed0:	4a0f      	ldr	r2, [pc, #60]	; (800af10 <LOG_MEM+0x68>)
 800aed2:	7819      	ldrb	r1, [r3, #0]
 800aed4:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <LOG_MEM+0x6c>)
 800aed6:	9303      	str	r3, [sp, #12]
 800aed8:	9b07      	ldr	r3, [sp, #28]
 800aeda:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	490d      	ldr	r1, [pc, #52]	; (800af18 <LOG_MEM+0x70>)
 800aee2:	4b0e      	ldr	r3, [pc, #56]	; (800af1c <LOG_MEM+0x74>)
 800aee4:	e9cd 5600 	strd	r5, r6, [sp]
 800aee8:	a809      	add	r0, sp, #36	; 0x24
 800aeea:	f001 f9c9 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logm], log_level_str[4], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800aeee:	4b0c      	ldr	r3, [pc, #48]	; (800af20 <LOG_MEM+0x78>)
 800aef0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4798      	blx	r3
	free(Temp_buffer);
 800aef6:	9807      	ldr	r0, [sp, #28]
 800aef8:	f001 fa1e 	bl	800c338 <free>
	free(Output_buffer);
 800aefc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aefe:	f001 fa1b 	bl	800c338 <free>
}
 800af02:	b00b      	add	sp, #44	; 0x2c
 800af04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af08:	b003      	add	sp, #12
 800af0a:	4770      	bx	lr
 800af0c:	200000f3 	.word	0x200000f3
 800af10:	08011d08 	.word	0x08011d08
 800af14:	08011b8c 	.word	0x08011b8c
 800af18:	08011b98 	.word	0x08011b98
 800af1c:	08011bb8 	.word	0x08011bb8
 800af20:	2000b9f8 	.word	0x2000b9f8

0800af24 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 800af24:	b40e      	push	{r1, r2, r3}
 800af26:	b570      	push	{r4, r5, r6, lr}
 800af28:	b08b      	sub	sp, #44	; 0x2c
 800af2a:	ac0f      	add	r4, sp, #60	; 0x3c
 800af2c:	4606      	mov	r6, r0
 800af2e:	f854 1b04 	ldr.w	r1, [r4], #4
 800af32:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800af34:	f7fd fb00 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800af38:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800af3a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800af3c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800af3e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800af40:	4622      	mov	r2, r4
 800af42:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800af44:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800af46:	f003 f881 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 800af4a:	4b0f      	ldr	r3, [pc, #60]	; (800af88 <LOG_EVENT+0x64>)
 800af4c:	4a0f      	ldr	r2, [pc, #60]	; (800af8c <LOG_EVENT+0x68>)
 800af4e:	7819      	ldrb	r1, [r3, #0]
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <LOG_EVENT+0x6c>)
 800af52:	9303      	str	r3, [sp, #12]
 800af54:	9b07      	ldr	r3, [sp, #28]
 800af56:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800af5a:	9302      	str	r3, [sp, #8]
 800af5c:	490d      	ldr	r1, [pc, #52]	; (800af94 <LOG_EVENT+0x70>)
 800af5e:	4b0e      	ldr	r3, [pc, #56]	; (800af98 <LOG_EVENT+0x74>)
 800af60:	e9cd 5600 	strd	r5, r6, [sp]
 800af64:	a809      	add	r0, sp, #36	; 0x24
 800af66:	f001 f98b 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logp], log_level_str[5], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800af6a:	4b0c      	ldr	r3, [pc, #48]	; (800af9c <LOG_EVENT+0x78>)
 800af6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4798      	blx	r3
	free(Temp_buffer);
 800af72:	9807      	ldr	r0, [sp, #28]
 800af74:	f001 f9e0 	bl	800c338 <free>
	free(Output_buffer);
 800af78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af7a:	f001 f9dd 	bl	800c338 <free>
}
 800af7e:	b00b      	add	sp, #44	; 0x2c
 800af80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800af84:	b003      	add	sp, #12
 800af86:	4770      	bx	lr
 800af88:	200000f5 	.word	0x200000f5
 800af8c:	08011d08 	.word	0x08011d08
 800af90:	08011b8c 	.word	0x08011b8c
 800af94:	08011b98 	.word	0x08011b98
 800af98:	08011bbc 	.word	0x08011bbc
 800af9c:	2000b9f8 	.word	0x2000b9f8

0800afa0 <LOG_RET>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_RET(const char *tag,  const char *format, ...){
 800afa0:	b40e      	push	{r1, r2, r3}
 800afa2:	b570      	push	{r4, r5, r6, lr}
 800afa4:	b08b      	sub	sp, #44	; 0x2c
 800afa6:	ac0f      	add	r4, sp, #60	; 0x3c
 800afa8:	4606      	mov	r6, r0
 800afaa:	f854 1b04 	ldr.w	r1, [r4], #4
 800afae:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800afb0:	f7fd fac2 	bl	8008538 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 800afb4:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 800afb6:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 800afb8:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 800afba:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 800afbc:	4622      	mov	r2, r4
 800afbe:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 800afc0:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 800afc2:	f003 f843 	bl	800e04c <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logr], log_level_str[6], time, tag, Temp_buffer, COLOR_END);
 800afc6:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <LOG_RET+0x64>)
 800afc8:	4a0f      	ldr	r2, [pc, #60]	; (800b008 <LOG_RET+0x68>)
 800afca:	7819      	ldrb	r1, [r3, #0]
 800afcc:	4b0f      	ldr	r3, [pc, #60]	; (800b00c <LOG_RET+0x6c>)
 800afce:	9303      	str	r3, [sp, #12]
 800afd0:	9b07      	ldr	r3, [sp, #28]
 800afd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800afd6:	9302      	str	r3, [sp, #8]
 800afd8:	490d      	ldr	r1, [pc, #52]	; (800b010 <LOG_RET+0x70>)
 800afda:	4b0e      	ldr	r3, [pc, #56]	; (800b014 <LOG_RET+0x74>)
 800afdc:	e9cd 5600 	strd	r5, r6, [sp]
 800afe0:	a809      	add	r0, sp, #36	; 0x24
 800afe2:	f001 f94d 	bl	800c280 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logr], log_level_str[6], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 800afe6:	4b0c      	ldr	r3, [pc, #48]	; (800b018 <LOG_RET+0x78>)
 800afe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4798      	blx	r3
	free(Temp_buffer);
 800afee:	9807      	ldr	r0, [sp, #28]
 800aff0:	f001 f9a2 	bl	800c338 <free>
	free(Output_buffer);
 800aff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aff6:	f001 f99f 	bl	800c338 <free>
}
 800affa:	b00b      	add	sp, #44	; 0x2c
 800affc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b000:	b003      	add	sp, #12
 800b002:	4770      	bx	lr
 800b004:	200000f4 	.word	0x200000f4
 800b008:	08011d08 	.word	0x08011d08
 800b00c:	08011b8c 	.word	0x08011b8c
 800b010:	08011b98 	.word	0x08011b98
 800b014:	08011bc0 	.word	0x08011bc0
 800b018:	2000b9f8 	.word	0x2000b9f8

0800b01c <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800b01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 800b020:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800b090 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800b024:	b083      	sub	sp, #12
 800b026:	461f      	mov	r7, r3
	stm_ret_t res;
 800b028:	2301      	movs	r3, #1
 800b02a:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800b02c:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 800b02e:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800b032:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 800b036:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 800b038:	4606      	mov	r6, r0
 800b03a:	460d      	mov	r5, r1
	stm_ret_t res;
 800b03c:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 800b03e:	4798      	blx	r3
 800b040:	9001      	str	r0, [sp, #4]
 800b042:	b14f      	cbz	r7, 800b058 <wait_flag_in_register_timeout+0x3c>
 800b044:	f1b8 0f00 	cmp.w	r8, #0
 800b048:	d110      	bne.n	800b06c <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	421c      	tst	r4, r3
 800b04e:	d0fc      	beq.n	800b04a <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 800b050:	4630      	mov	r0, r6
 800b052:	b003      	add	sp, #12
 800b054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b058:	f1b8 0f00 	cmp.w	r8, #0
 800b05c:	d113      	bne.n	800b086 <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800b05e:	682b      	ldr	r3, [r5, #0]
 800b060:	421c      	tst	r4, r3
 800b062:	d1fc      	bne.n	800b05e <wait_flag_in_register_timeout+0x42>
}
 800b064:	4630      	mov	r0, r6
 800b066:	b003      	add	sp, #12
 800b068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	4223      	tst	r3, r4
 800b070:	d1ee      	bne.n	800b050 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 800b072:	f8d9 3000 	ldr.w	r3, [r9]
 800b076:	4798      	blx	r3
 800b078:	9b01      	ldr	r3, [sp, #4]
 800b07a:	1ac0      	subs	r0, r0, r3
 800b07c:	4540      	cmp	r0, r8
 800b07e:	d3e0      	bcc.n	800b042 <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 800b080:	2302      	movs	r3, #2
 800b082:	7033      	strb	r3, [r6, #0]
				return res;
 800b084:	e7e4      	b.n	800b050 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 800b086:	682b      	ldr	r3, [r5, #0]
 800b088:	4223      	tst	r3, r4
 800b08a:	d1f2      	bne.n	800b072 <wait_flag_in_register_timeout+0x56>
 800b08c:	e7e0      	b.n	800b050 <wait_flag_in_register_timeout+0x34>
 800b08e:	bf00      	nop
 800b090:	200000f8 	.word	0x200000f8

0800b094 <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 800b094:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 800b096:	6042      	str	r2, [r0, #4]
}
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop

0800b09c <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 800b09c:	6041      	str	r1, [r0, #4]
}
 800b09e:	4770      	bx	lr

0800b0a0 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 800b0a0:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 800b0a2:	f1a0 0001 	sub.w	r0, r0, #1
 800b0a6:	fab0 f080 	clz	r0, r0
 800b0aa:	0940      	lsrs	r0, r0, #5
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 800b0b0:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 800b0b2:	f1a0 0002 	sub.w	r0, r0, #2
 800b0b6:	fab0 f080 	clz	r0, r0
 800b0ba:	0940      	lsrs	r0, r0, #5
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop

0800b0c0 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 800b0c0:	4b01      	ldr	r3, [pc, #4]	; (800b0c8 <get_revid+0x8>)
 800b0c2:	6818      	ldr	r0, [r3, #0]
}
 800b0c4:	0c00      	lsrs	r0, r0, #16
 800b0c6:	4770      	bx	lr
 800b0c8:	e0042000 	.word	0xe0042000

0800b0cc <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 800b0cc:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <get_devid+0xc>)
 800b0ce:	6818      	ldr	r0, [r3, #0]
}
 800b0d0:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	e0042000 	.word	0xe0042000

0800b0dc <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 800b0dc:	4b01      	ldr	r3, [pc, #4]	; (800b0e4 <get_flashsize+0x8>)
 800b0de:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 800b0e0:	b280      	uxth	r0, r0
 800b0e2:	4770      	bx	lr
 800b0e4:	1fff7a00 	.word	0x1fff7a00

0800b0e8 <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 800b0e8:	4b14      	ldr	r3, [pc, #80]	; (800b13c <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 800b0ea:	4a15      	ldr	r2, [pc, #84]	; (800b140 <system_init+0x58>)
 800b0ec:	6819      	ldr	r1, [r3, #0]
 800b0ee:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 800b0f2:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 800b0f4:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 800b0f6:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b0f8:	4c12      	ldr	r4, [pc, #72]	; (800b144 <system_init+0x5c>)
 800b0fa:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800b0fe:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800b106:	6019      	str	r1, [r3, #0]
 800b108:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b10a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 800b10e:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 800b112:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 800b114:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 800b116:	200f      	movs	r0, #15
 800b118:	f7fd f9ec 	bl	80084f4 <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800b11c:	4b0a      	ldr	r3, [pc, #40]	; (800b148 <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 800b11e:	490b      	ldr	r1, [pc, #44]	; (800b14c <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800b120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b122:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b126:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800b128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b12a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b12e:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 800b130:	680b      	ldr	r3, [r1, #0]
 800b132:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b136:	600b      	str	r3, [r1, #0]
}
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	bf00      	nop
 800b13c:	40023c00 	.word	0x40023c00
 800b140:	05fa0300 	.word	0x05fa0300
 800b144:	e000ed00 	.word	0xe000ed00
 800b148:	40023800 	.word	0x40023800
 800b14c:	40007000 	.word	0x40007000

0800b150 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 800b150:	4a03      	ldr	r2, [pc, #12]	; (800b160 <embedded_flash_set_latency+0x10>)
 800b152:	6813      	ldr	r3, [r2, #0]
 800b154:	f023 030f 	bic.w	r3, r3, #15
 800b158:	4318      	orrs	r0, r3
 800b15a:	6010      	str	r0, [r2, #0]
}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop
 800b160:	40023c00 	.word	0x40023c00

0800b164 <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800b164:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800b166:	490e      	ldr	r1, [pc, #56]	; (800b1a0 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800b168:	4c0e      	ldr	r4, [pc, #56]	; (800b1a4 <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800b16a:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800b16c:	09c3      	lsrs	r3, r0, #7
 800b16e:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800b172:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 800b174:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 800b178:	d00e      	beq.n	800b198 <embedded_flash_calculate_latency+0x34>
 800b17a:	4b0b      	ldr	r3, [pc, #44]	; (800b1a8 <embedded_flash_calculate_latency+0x44>)
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d00b      	beq.n	800b198 <embedded_flash_calculate_latency+0x34>
 800b180:	4b0a      	ldr	r3, [pc, #40]	; (800b1ac <embedded_flash_calculate_latency+0x48>)
 800b182:	429a      	cmp	r2, r3
 800b184:	d008      	beq.n	800b198 <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 800b186:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <embedded_flash_calculate_latency+0x4c>)
 800b188:	429a      	cmp	r2, r3
 800b18a:	d005      	beq.n	800b198 <embedded_flash_calculate_latency+0x34>
 800b18c:	4b09      	ldr	r3, [pc, #36]	; (800b1b4 <embedded_flash_calculate_latency+0x50>)
 800b18e:	429a      	cmp	r2, r3
 800b190:	d002      	beq.n	800b198 <embedded_flash_calculate_latency+0x34>
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <embedded_flash_calculate_latency+0x54>)
 800b194:	429a      	cmp	r2, r3
 800b196:	d100      	bne.n	800b19a <embedded_flash_calculate_latency+0x36>
 800b198:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 800b19a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19e:	4770      	bx	lr
 800b1a0:	01c9c380 	.word	0x01c9c380
 800b1a4:	011e54c7 	.word	0x011e54c7
 800b1a8:	03938700 	.word	0x03938700
 800b1ac:	055d4a80 	.word	0x055d4a80
 800b1b0:	07270e00 	.word	0x07270e00
 800b1b4:	08f0d180 	.word	0x08f0d180
 800b1b8:	0aba9500 	.word	0x0aba9500

0800b1bc <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 800b1bc:	4b02      	ldr	r3, [pc, #8]	; (800b1c8 <embedded_flash_get_latency+0xc>)
 800b1be:	6818      	ldr	r0, [r3, #0]
}
 800b1c0:	f000 000f 	and.w	r0, r0, #15
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	40023c00 	.word	0x40023c00

0800b1cc <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b1cc:	4b1f      	ldr	r3, [pc, #124]	; (800b24c <NVIC_Set_Priority+0x80>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b1d4:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 800b1d6:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b1d8:	f1c3 0e07 	rsb	lr, r3, #7
 800b1dc:	bf28      	it	cs
 800b1de:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b1e0:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b1e4:	f1be 0f04 	cmp.w	lr, #4
 800b1e8:	bf28      	it	cs
 800b1ea:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b1ee:	f1bc 0f06 	cmp.w	ip, #6
 800b1f2:	d91f      	bls.n	800b234 <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1f4:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b1f6:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1fa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b1fe:	bf28      	it	cs
 800b200:	220f      	movcs	r2, #15
 800b202:	fa0c fc03 	lsl.w	ip, ip, r3
 800b206:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b20a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b20e:	fa0c fc0e 	lsl.w	ip, ip, lr
 800b212:	ea21 010c 	bic.w	r1, r1, ip
 800b216:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800b218:	2800      	cmp	r0, #0
         );
 800b21a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800b21e:	db0c      	blt.n	800b23a <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b220:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800b224:	0109      	lsls	r1, r1, #4
 800b226:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800b22a:	b2c9      	uxtb	r1, r1
 800b22c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800b230:	f85d fb04 	ldr.w	pc, [sp], #4
 800b234:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b236:	4613      	mov	r3, r2
 800b238:	e7e7      	b.n	800b20a <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b23a:	4b05      	ldr	r3, [pc, #20]	; (800b250 <NVIC_Set_Priority+0x84>)
 800b23c:	f000 000f 	and.w	r0, r0, #15
 800b240:	0109      	lsls	r1, r1, #4
 800b242:	4403      	add	r3, r0
 800b244:	b2c9      	uxtb	r1, r1
 800b246:	7619      	strb	r1, [r3, #24]
 800b248:	f85d fb04 	ldr.w	pc, [sp], #4
 800b24c:	e000ed00 	.word	0xe000ed00
 800b250:	e000ecfc 	.word	0xe000ecfc

0800b254 <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 800b254:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 800b256:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 800b258:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 800b25a:	f002 fed7 	bl	800e00c <sbrk>
 800b25e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800b260:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 800b264:	4668      	mov	r0, sp
 800b266:	f001 f89f 	bl	800c3a8 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 800b26a:	4b06      	ldr	r3, [pc, #24]	; (800b284 <sys_get_free_heap_size+0x30>)
 800b26c:	9808      	ldr	r0, [sp, #32]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	42ab      	cmp	r3, r5
 800b272:	bf94      	ite	ls
 800b274:	ebc4 0403 	rsbls	r4, r4, r3
 800b278:	ebc4 0405 	rsbhi	r4, r4, r5
}
 800b27c:	4420      	add	r0, r4
 800b27e:	b00b      	add	sp, #44	; 0x2c
 800b280:	bd30      	pop	{r4, r5, pc}
 800b282:	bf00      	nop
 800b284:	2000ba00 	.word	0x2000ba00

0800b288 <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 800b288:	4a06      	ldr	r2, [pc, #24]	; (800b2a4 <sys_calculate_cpu_load_percent+0x1c>)
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <sys_calculate_cpu_load_percent+0x20>)
 800b28c:	6810      	ldr	r0, [r2, #0]
 800b28e:	6819      	ldr	r1, [r3, #0]
 800b290:	4288      	cmp	r0, r1
 800b292:	d005      	beq.n	800b2a0 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 800b294:	4805      	ldr	r0, [pc, #20]	; (800b2ac <sys_calculate_cpu_load_percent+0x24>)
 800b296:	6801      	ldr	r1, [r0, #0]
 800b298:	3101      	adds	r1, #1
 800b29a:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 800b29c:	6812      	ldr	r2, [r2, #0]
 800b29e:	601a      	str	r2, [r3, #0]
    }
}
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	2000b760 	.word	0x2000b760
 800b2a8:	2000ba08 	.word	0x2000ba08
 800b2ac:	2000ba0c 	.word	0x2000ba0c

0800b2b0 <register_exception_handler>:

	return (float)(((float)total_ram_use / (float)total_ram_size) * 100.0F);
}

void register_exception_handler(volatile void(*p_exception_hander)(void)){
	exception_hander = p_exception_hander;
 800b2b0:	4b01      	ldr	r3, [pc, #4]	; (800b2b8 <register_exception_handler+0x8>)
 800b2b2:	6018      	str	r0, [r3, #0]
}
 800b2b4:	4770      	bx	lr
 800b2b6:	bf00      	nop
 800b2b8:	2000b9fc 	.word	0x2000b9fc

0800b2bc <exception_interrupt_handler>:

void exception_interrupt_handler(const char *tag, char *message){
 800b2bc:	b510      	push	{r4, lr}
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 800b2be:	f7ff fd77 	bl	800adb0 <LOG_ERROR>
	if(exception_hander != NULL) exception_hander();
 800b2c2:	4b03      	ldr	r3, [pc, #12]	; (800b2d0 <exception_interrupt_handler+0x14>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	b113      	cbz	r3, 800b2ce <exception_interrupt_handler+0x12>
#endif /* CONFIG_USE_LOG_MONITOR */
}
 800b2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(exception_hander != NULL) exception_hander();
 800b2cc:	4718      	bx	r3
}
 800b2ce:	bd10      	pop	{r4, pc}
 800b2d0:	2000b9fc 	.word	0x2000b9fc

0800b2d4 <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 800b2d4:	4b02      	ldr	r3, [pc, #8]	; (800b2e0 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 800b2d6:	4903      	ldr	r1, [pc, #12]	; (800b2e4 <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 800b2d8:	4a03      	ldr	r2, [pc, #12]	; (800b2e8 <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 800b2da:	1a5b      	subs	r3, r3, r1
 800b2dc:	6013      	str	r3, [r2, #0]
}
 800b2de:	4770      	bx	lr
 800b2e0:	20030000 	.word	0x20030000
 800b2e4:	00000400 	.word	0x00000400
 800b2e8:	2000ba00 	.word	0x2000ba00

0800b2ec <add_device_properties>:
			dev->prop.address, dev->prop.name,
			dev->sett.mode, dev->sett.type, dev->sett.max_temp, dev->sett.min_temp, dev->sett.time_start, dev->sett.time_stop
	);
}

dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800b2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2ee:	b085      	sub	sp, #20
	pkt_err_t err;
	pkt_json_t json;
 800b2f0:	2500      	movs	r5, #0
dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800b2f2:	4607      	mov	r7, r0

	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800b2f4:	2030      	movs	r0, #48	; 0x30
dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800b2f6:	460e      	mov	r6, r1
	pkt_json_t json;
 800b2f8:	9501      	str	r5, [sp, #4]
 800b2fa:	f88d 5008 	strb.w	r5, [sp, #8]
 800b2fe:	9503      	str	r5, [sp, #12]
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800b300:	f001 f812 	bl	800c328 <malloc>

	dev_prop->prop.address = device_address;

	dev_prop->env.temp = 0.0;
 800b304:	2300      	movs	r3, #0
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800b306:	4604      	mov	r4, r0
	dev_prop->env.temp = 0.0;
 800b308:	6003      	str	r3, [r0, #0]
	dev_prop->env.humi = 0.0;
 800b30a:	6043      	str	r3, [r0, #4]
	dev_prop->env.curr = 0.0;
 800b30c:	6083      	str	r3, [r0, #8]
	dev_prop->prop.address = device_address;
 800b30e:	6287      	str	r7, [r0, #40]	; 0x28
	dev_prop->ctrl.relay1 = 0;
 800b310:	6105      	str	r5, [r0, #16]
	dev_prop->ctrl.relay2 = 0;
	dev_prop->ctrl.relay3 = 0;
	dev_prop->ctrl.relay4 = 0;
	dev_prop->sett.mode = 0;
 800b312:	8285      	strh	r5, [r0, #20]
	dev_prop->sett.type = 0;
	dev_prop->sett.max_temp = 0.0;
	dev_prop->sett.min_temp = 0.0;
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800b314:	4916      	ldr	r1, [pc, #88]	; (800b370 <add_device_properties+0x84>)
	dev_prop->sett.max_temp = 0.0;
 800b316:	61a3      	str	r3, [r4, #24]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800b318:	3020      	adds	r0, #32
	dev_prop->sett.min_temp = 0.0;
 800b31a:	61e3      	str	r3, [r4, #28]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800b31c:	f000 ffb0 	bl	800c280 <asiprintf>
	asprintf(&(dev_prop->sett.time_stop), "00:00:00");
 800b320:	4913      	ldr	r1, [pc, #76]	; (800b370 <add_device_properties+0x84>)
 800b322:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800b326:	f000 ffab 	bl	800c280 <asiprintf>
	asprintf(&(dev_prop->env.time), "14:30:00 05/05/23 thu 2");
 800b32a:	4912      	ldr	r1, [pc, #72]	; (800b374 <add_device_properties+0x88>)
 800b32c:	f104 000c 	add.w	r0, r4, #12
 800b330:	f000 ffa6 	bl	800c280 <asiprintf>

	err = json_get_object(jdata, &json, (char *)"name");
 800b334:	4a10      	ldr	r2, [pc, #64]	; (800b378 <add_device_properties+0x8c>)
 800b336:	a901      	add	r1, sp, #4
 800b338:	4630      	mov	r0, r6
 800b33a:	f7f9 fd39 	bl	8004db0 <json_get_object>
	if(err == PKT_ERR_OK)
 800b33e:	b180      	cbz	r0, 800b362 <add_device_properties+0x76>
		asprintf(&(dev_prop->prop.name), "%s", json.value);
	json_release_object(&json);
 800b340:	a801      	add	r0, sp, #4
 800b342:	f7f9 fe4d 	bl	8004fe0 <json_release_object>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b346:	200c      	movs	r0, #12
 800b348:	f000 ff28 	bl	800c19c <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 800b34c:	4d0b      	ldr	r5, [pc, #44]	; (800b37c <add_device_properties+0x90>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800b34e:	6084      	str	r4, [r0, #8]
 800b350:	4629      	mov	r1, r5
 800b352:	f000 ff34 	bl	800c1be <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800b356:	68ab      	ldr	r3, [r5, #8]

	device_properties_list.push_back(dev_prop);

	return dev_prop;
}
 800b358:	4620      	mov	r0, r4
 800b35a:	3301      	adds	r3, #1
 800b35c:	60ab      	str	r3, [r5, #8]
 800b35e:	b005      	add	sp, #20
 800b360:	bdf0      	pop	{r4, r5, r6, r7, pc}
		asprintf(&(dev_prop->prop.name), "%s", json.value);
 800b362:	9a03      	ldr	r2, [sp, #12]
 800b364:	4906      	ldr	r1, [pc, #24]	; (800b380 <add_device_properties+0x94>)
 800b366:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800b36a:	f000 ff89 	bl	800c280 <asiprintf>
 800b36e:	e7e7      	b.n	800b340 <add_device_properties+0x54>
 800b370:	08011d88 	.word	0x08011d88
 800b374:	08011d94 	.word	0x08011d94
 800b378:	0801103c 	.word	0x0801103c
 800b37c:	2000ba14 	.word	0x2000ba14
 800b380:	080119cc 	.word	0x080119cc

0800b384 <remove_device_properties>:

void remove_device_properties(uint32_t device_address){
 800b384:	b530      	push	{r4, r5, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b386:	4d22      	ldr	r5, [pc, #136]	; (800b410 <remove_device_properties+0x8c>)
 800b388:	682c      	ldr	r4, [r5, #0]
    if (device_properties_list.empty()) {
 800b38a:	42ac      	cmp	r4, r5
void remove_device_properties(uint32_t device_address){
 800b38c:	b083      	sub	sp, #12
    if (device_properties_list.empty()) {
 800b38e:	d035      	beq.n	800b3fc <remove_device_properties+0x78>
        return;
    }

    auto device = device_properties_list.begin();
    while (device != device_properties_list.end()) {
        if ((*device)->prop.address == device_address) {
 800b390:	68a3      	ldr	r3, [r4, #8]
 800b392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b394:	4282      	cmp	r2, r0
 800b396:	d00c      	beq.n	800b3b2 <remove_device_properties+0x2e>
	_M_node = _M_node->_M_next;
 800b398:	6824      	ldr	r4, [r4, #0]
    while (device != device_properties_list.end()) {
 800b39a:	42ac      	cmp	r4, r5
 800b39c:	d1f8      	bne.n	800b390 <remove_device_properties+0xc>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b39e:	4b1d      	ldr	r3, [pc, #116]	; (800b414 <remove_device_properties+0x90>)
 800b3a0:	9300      	str	r3, [sp, #0]
 800b3a2:	4a1d      	ldr	r2, [pc, #116]	; (800b418 <remove_device_properties+0x94>)
 800b3a4:	491d      	ldr	r1, [pc, #116]	; (800b41c <remove_device_properties+0x98>)
 800b3a6:	481e      	ldr	r0, [pc, #120]	; (800b420 <remove_device_properties+0x9c>)
 800b3a8:	2366      	movs	r3, #102	; 0x66
 800b3aa:	f7ff fd3f 	bl	800ae2c <LOG_DEBUG>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
	if((*device)->env.time != NULL) free((*device)->env.time);

	device_properties_list.erase(device);
	if((*device) != NULL) free((*device));
}
 800b3ae:	b003      	add	sp, #12
 800b3b0:	bd30      	pop	{r4, r5, pc}
	if((*device)->prop.name != NULL) free((*device)->prop.name);
 800b3b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800b3b4:	b110      	cbz	r0, 800b3bc <remove_device_properties+0x38>
 800b3b6:	f000 ffbf 	bl	800c338 <free>
	if((*device)->sett.time_start != NULL) free((*device)->sett.time_start);
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	6a18      	ldr	r0, [r3, #32]
 800b3be:	b110      	cbz	r0, 800b3c6 <remove_device_properties+0x42>
 800b3c0:	f000 ffba 	bl	800c338 <free>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
 800b3c4:	68a3      	ldr	r3, [r4, #8]
 800b3c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b3c8:	b110      	cbz	r0, 800b3d0 <remove_device_properties+0x4c>
 800b3ca:	f000 ffb5 	bl	800c338 <free>
	if((*device)->env.time != NULL) free((*device)->env.time);
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	68d8      	ldr	r0, [r3, #12]
 800b3d2:	b108      	cbz	r0, 800b3d8 <remove_device_properties+0x54>
 800b3d4:	f000 ffb0 	bl	800c338 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800b3d8:	68ab      	ldr	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800b3da:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800b3e0:	f000 fef4 	bl	800c1cc <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	210c      	movs	r1, #12
 800b3e8:	f000 fed6 	bl	800c198 <_ZdlPvj>
	if((*device) != NULL) free((*device));
 800b3ec:	68a0      	ldr	r0, [r4, #8]
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d0dd      	beq.n	800b3ae <remove_device_properties+0x2a>
}
 800b3f2:	b003      	add	sp, #12
 800b3f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if((*device) != NULL) free((*device));
 800b3f8:	f000 bf9e 	b.w	800c338 <free>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b3fc:	4b05      	ldr	r3, [pc, #20]	; (800b414 <remove_device_properties+0x90>)
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	4a08      	ldr	r2, [pc, #32]	; (800b424 <remove_device_properties+0xa0>)
 800b402:	4906      	ldr	r1, [pc, #24]	; (800b41c <remove_device_properties+0x98>)
 800b404:	4806      	ldr	r0, [pc, #24]	; (800b420 <remove_device_properties+0x9c>)
 800b406:	2359      	movs	r3, #89	; 0x59
 800b408:	f7ff fd10 	bl	800ae2c <LOG_DEBUG>
        return;
 800b40c:	e7cf      	b.n	800b3ae <remove_device_properties+0x2a>
 800b40e:	bf00      	nop
 800b410:	2000ba14 	.word	0x2000ba14
 800b414:	08011dd4 	.word	0x08011dd4
 800b418:	08010e68 	.word	0x08010e68
 800b41c:	08010d14 	.word	0x08010d14
 800b420:	08011dcc 	.word	0x08011dcc
 800b424:	08011dac 	.word	0x08011dac

0800b428 <select_device_properties>:

dev_struct_t *select_device_properties(uint32_t device_address){
 800b428:	b510      	push	{r4, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b42a:	4c11      	ldr	r4, [pc, #68]	; (800b470 <select_device_properties+0x48>)
 800b42c:	6823      	ldr	r3, [r4, #0]
    if (device_properties_list.empty()) {
 800b42e:	42a3      	cmp	r3, r4
dev_struct_t *select_device_properties(uint32_t device_address){
 800b430:	b082      	sub	sp, #8
 800b432:	bf18      	it	ne
 800b434:	4601      	movne	r1, r0
    if (device_properties_list.empty()) {
 800b436:	d011      	beq.n	800b45c <select_device_properties+0x34>
        return NULL;
    }

    auto device = device_properties_list.begin();
    while (device != device_properties_list.end()) {
        if ((*device)->prop.address == device_address) {
 800b438:	6898      	ldr	r0, [r3, #8]
 800b43a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800b43c:	428a      	cmp	r2, r1
 800b43e:	d00b      	beq.n	800b458 <select_device_properties+0x30>
	_M_node = _M_node->_M_next;
 800b440:	681b      	ldr	r3, [r3, #0]
    while (device != device_properties_list.end()) {
 800b442:	42a3      	cmp	r3, r4
 800b444:	d1f8      	bne.n	800b438 <select_device_properties+0x10>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <select_device_properties+0x4c>)
 800b448:	480b      	ldr	r0, [pc, #44]	; (800b478 <select_device_properties+0x50>)
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	4a0b      	ldr	r2, [pc, #44]	; (800b47c <select_device_properties+0x54>)
 800b44e:	490c      	ldr	r1, [pc, #48]	; (800b480 <select_device_properties+0x58>)
 800b450:	2383      	movs	r3, #131	; 0x83
 800b452:	f7ff fceb 	bl	800ae2c <LOG_DEBUG>
 800b456:	2000      	movs	r0, #0
    	device_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
        return NULL;
    }

    return (*device);
}
 800b458:	b002      	add	sp, #8
 800b45a:	bd10      	pop	{r4, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b45c:	4b05      	ldr	r3, [pc, #20]	; (800b474 <select_device_properties+0x4c>)
 800b45e:	4806      	ldr	r0, [pc, #24]	; (800b478 <select_device_properties+0x50>)
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	4a08      	ldr	r2, [pc, #32]	; (800b484 <select_device_properties+0x5c>)
 800b464:	4906      	ldr	r1, [pc, #24]	; (800b480 <select_device_properties+0x58>)
 800b466:	2376      	movs	r3, #118	; 0x76
 800b468:	f7ff fce0 	bl	800ae2c <LOG_DEBUG>
        return NULL;
 800b46c:	2000      	movs	r0, #0
 800b46e:	e7f3      	b.n	800b458 <select_device_properties+0x30>
 800b470:	2000ba14 	.word	0x2000ba14
 800b474:	08011df0 	.word	0x08011df0
 800b478:	08011dcc 	.word	0x08011dcc
 800b47c:	08010e68 	.word	0x08010e68
 800b480:	08010d14 	.word	0x08010d14
 800b484:	08011dac 	.word	0x08011dac

0800b488 <firebase_init>:

void firebase_init(char *url, char *secret_key){
 800b488:	b510      	push	{r4, lr}
	char *tmp;

	if(prj_url != NULL) free(prj_url);
 800b48a:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <firebase_init+0x58>)
 800b48c:	681b      	ldr	r3, [r3, #0]
void firebase_init(char *url, char *secret_key){
 800b48e:	b084      	sub	sp, #16
 800b490:	4602      	mov	r2, r0
 800b492:	460c      	mov	r4, r1
	if(prj_url != NULL) free(prj_url);
 800b494:	b123      	cbz	r3, 800b4a0 <firebase_init+0x18>
 800b496:	9001      	str	r0, [sp, #4]
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 ff4d 	bl	800c338 <free>
 800b49e:	9a01      	ldr	r2, [sp, #4]
	asprintf(&prj_url, "%s", url);
 800b4a0:	4910      	ldr	r1, [pc, #64]	; (800b4e4 <firebase_init+0x5c>)
 800b4a2:	480f      	ldr	r0, [pc, #60]	; (800b4e0 <firebase_init+0x58>)
 800b4a4:	9201      	str	r2, [sp, #4]
 800b4a6:	f000 feeb 	bl	800c280 <asiprintf>
	asprintf(&tmp, "{\"url\":\"%s\", \"transport_ssl\":1, \"crt_bundle\":1}", url);
 800b4aa:	9a01      	ldr	r2, [sp, #4]
 800b4ac:	490e      	ldr	r1, [pc, #56]	; (800b4e8 <firebase_init+0x60>)
 800b4ae:	a803      	add	r0, sp, #12
 800b4b0:	f000 fee6 	bl	800c280 <asiprintf>
	if(secret_key != NULL) asprintf(&secret, "%s", secret_key);
 800b4b4:	b124      	cbz	r4, 800b4c0 <firebase_init+0x38>
 800b4b6:	490b      	ldr	r1, [pc, #44]	; (800b4e4 <firebase_init+0x5c>)
 800b4b8:	480c      	ldr	r0, [pc, #48]	; (800b4ec <firebase_init+0x64>)
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	f000 fee0 	bl	800c280 <asiprintf>

	wifiif_http_client_new();
 800b4c0:	f7fa ff7e 	bl	80063c0 <wifiif_http_client_new>
	wifiif_http_client_config(tmp);
 800b4c4:	9803      	ldr	r0, [sp, #12]
 800b4c6:	f7fa ff81 	bl	80063cc <wifiif_http_client_config>
	wifiif_http_client_init();
 800b4ca:	f7fa ff83 	bl	80063d4 <wifiif_http_client_init>
	wifiif_http_client_set_header((char *)"Content-Type", (char *)"application/json");
 800b4ce:	4908      	ldr	r1, [pc, #32]	; (800b4f0 <firebase_init+0x68>)
 800b4d0:	4808      	ldr	r0, [pc, #32]	; (800b4f4 <firebase_init+0x6c>)
 800b4d2:	f7fa ff85 	bl	80063e0 <wifiif_http_client_set_header>

	free(tmp);
 800b4d6:	9803      	ldr	r0, [sp, #12]
 800b4d8:	f000 ff2e 	bl	800c338 <free>
}
 800b4dc:	b004      	add	sp, #16
 800b4de:	bd10      	pop	{r4, pc}
 800b4e0:	2000ba20 	.word	0x2000ba20
 800b4e4:	080119cc 	.word	0x080119cc
 800b4e8:	08011e0c 	.word	0x08011e0c
 800b4ec:	2000ba24 	.word	0x2000ba24
 800b4f0:	08011e3c 	.word	0x08011e3c
 800b4f4:	08011e50 	.word	0x08011e50

0800b4f8 <firebase_new_device>:

void firebase_new_device(dev_struct_t *dev){
 800b4f8:	b530      	push	{r4, r5, lr}
	char *path, *data;

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800b4fa:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <firebase_new_device+0xbc>)
 800b4fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b4fe:	681b      	ldr	r3, [r3, #0]
void firebase_new_device(dev_struct_t *dev){
 800b500:	b099      	sub	sp, #100	; 0x64
 800b502:	4604      	mov	r4, r0
	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800b504:	2b00      	cmp	r3, #0
 800b506:	d04f      	beq.n	800b5a8 <firebase_new_device+0xb0>
 800b508:	492b      	ldr	r1, [pc, #172]	; (800b5b8 <firebase_new_device+0xc0>)
 800b50a:	a816      	add	r0, sp, #88	; 0x58
 800b50c:	f000 feb8 	bl	800c280 <asiprintf>
	else asprintf(&path, "/%s/.json", dev->prop.name);

	wifiif_http_client_set_url(path);
 800b510:	9816      	ldr	r0, [sp, #88]	; 0x58
	asprintf(str, full_struct,
 800b512:	4d2a      	ldr	r5, [pc, #168]	; (800b5bc <firebase_new_device+0xc4>)
	wifiif_http_client_set_url(path);
 800b514:	f7fa ff78 	bl	8006408 <wifiif_http_client_set_url>
	wifiif_http_client_set_method((char *)"HTTP_METHOD_PATCH");
 800b518:	4829      	ldr	r0, [pc, #164]	; (800b5c0 <firebase_new_device+0xc8>)
 800b51a:	f7fa ff89 	bl	8006430 <wifiif_http_client_set_method>
	asprintf(str, full_struct,
 800b51e:	6820      	ldr	r0, [r4, #0]
 800b520:	f7f5 f832 	bl	8000588 <__aeabi_f2d>
 800b524:	460b      	mov	r3, r1
 800b526:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b528:	682d      	ldr	r5, [r5, #0]
 800b52a:	9113      	str	r1, [sp, #76]	; 0x4c
 800b52c:	6a21      	ldr	r1, [r4, #32]
 800b52e:	9112      	str	r1, [sp, #72]	; 0x48
 800b530:	4602      	mov	r2, r0
 800b532:	69e0      	ldr	r0, [r4, #28]
 800b534:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b538:	f7f5 f826 	bl	8000588 <__aeabi_f2d>
 800b53c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b540:	69a0      	ldr	r0, [r4, #24]
 800b542:	f7f5 f821 	bl	8000588 <__aeabi_f2d>
 800b546:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b54a:	7d61      	ldrb	r1, [r4, #21]
 800b54c:	910c      	str	r1, [sp, #48]	; 0x30
 800b54e:	7d21      	ldrb	r1, [r4, #20]
 800b550:	910b      	str	r1, [sp, #44]	; 0x2c
 800b552:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b554:	910a      	str	r1, [sp, #40]	; 0x28
 800b556:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800b558:	9109      	str	r1, [sp, #36]	; 0x24
 800b55a:	7ce1      	ldrb	r1, [r4, #19]
 800b55c:	9108      	str	r1, [sp, #32]
 800b55e:	7ca1      	ldrb	r1, [r4, #18]
 800b560:	9107      	str	r1, [sp, #28]
 800b562:	7c61      	ldrb	r1, [r4, #17]
 800b564:	9106      	str	r1, [sp, #24]
 800b566:	7c21      	ldrb	r1, [r4, #16]
 800b568:	9105      	str	r1, [sp, #20]
 800b56a:	68e1      	ldr	r1, [r4, #12]
 800b56c:	9104      	str	r1, [sp, #16]
 800b56e:	68a0      	ldr	r0, [r4, #8]
 800b570:	f7f5 f80a 	bl	8000588 <__aeabi_f2d>
 800b574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b578:	6860      	ldr	r0, [r4, #4]
 800b57a:	f7f5 f805 	bl	8000588 <__aeabi_f2d>
 800b57e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b582:	e9cd 0100 	strd	r0, r1, [sp]
 800b586:	4629      	mov	r1, r5
 800b588:	a817      	add	r0, sp, #92	; 0x5c
 800b58a:	f000 fe79 	bl	800c280 <asiprintf>
	assign_struct(&data, dev);
	wifiif_http_client_set_data(data);
 800b58e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b590:	f7fa ff62 	bl	8006458 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800b594:	f7fa ff74 	bl	8006480 <wifiif_http_client_request>

	free(data);
 800b598:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b59a:	f000 fecd 	bl	800c338 <free>
	free(path);
 800b59e:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b5a0:	f000 feca 	bl	800c338 <free>
}
 800b5a4:	b019      	add	sp, #100	; 0x64
 800b5a6:	bd30      	pop	{r4, r5, pc}
	else asprintf(&path, "/%s/.json", dev->prop.name);
 800b5a8:	4906      	ldr	r1, [pc, #24]	; (800b5c4 <firebase_new_device+0xcc>)
 800b5aa:	a816      	add	r0, sp, #88	; 0x58
 800b5ac:	f000 fe68 	bl	800c280 <asiprintf>
 800b5b0:	e7ae      	b.n	800b510 <firebase_new_device+0x18>
 800b5b2:	bf00      	nop
 800b5b4:	2000ba24 	.word	0x2000ba24
 800b5b8:	08011e60 	.word	0x08011e60
 800b5bc:	20000100 	.word	0x20000100
 800b5c0:	08011e80 	.word	0x08011e80
 800b5c4:	08011e74 	.word	0x08011e74

0800b5c8 <firebase_remove_device>:

void firebase_remove_device(dev_struct_t *dev){
	if(dev == NULL || dev->prop.name == NULL) return;
 800b5c8:	b320      	cbz	r0, 800b614 <firebase_remove_device+0x4c>
void firebase_remove_device(dev_struct_t *dev){
 800b5ca:	b510      	push	{r4, lr}
	if(dev == NULL || dev->prop.name == NULL) return;
 800b5cc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
void firebase_remove_device(dev_struct_t *dev){
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	4604      	mov	r4, r0
	if(dev == NULL || dev->prop.name == NULL) return;
 800b5d2:	b1c3      	cbz	r3, 800b606 <firebase_remove_device+0x3e>
	char *path = NULL;
 800b5d4:	2300      	movs	r3, #0

	wifiif_http_client_set_method((char *)"HTTP_METHOD_DELETE");
 800b5d6:	4810      	ldr	r0, [pc, #64]	; (800b618 <firebase_remove_device+0x50>)
	char *path = NULL;
 800b5d8:	9301      	str	r3, [sp, #4]
	wifiif_http_client_set_method((char *)"HTTP_METHOD_DELETE");
 800b5da:	f7fa ff29 	bl	8006430 <wifiif_http_client_set_method>
	wifiif_http_client_set_data((char *)"{}");
 800b5de:	480f      	ldr	r0, [pc, #60]	; (800b61c <firebase_remove_device+0x54>)
 800b5e0:	f7fa ff3a 	bl	8006458 <wifiif_http_client_set_data>

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <firebase_remove_device+0x58>)
 800b5e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	b173      	cbz	r3, 800b60a <firebase_remove_device+0x42>
 800b5ec:	490d      	ldr	r1, [pc, #52]	; (800b624 <firebase_remove_device+0x5c>)
 800b5ee:	a801      	add	r0, sp, #4
 800b5f0:	f000 fe46 	bl	800c280 <asiprintf>
	else asprintf(&path, "/%s/.json", dev->prop.name);
	wifiif_http_client_set_url(path);
 800b5f4:	9801      	ldr	r0, [sp, #4]
 800b5f6:	f7fa ff07 	bl	8006408 <wifiif_http_client_set_url>

	wifiif_http_client_request();
 800b5fa:	f7fa ff41 	bl	8006480 <wifiif_http_client_request>
	if(path != NULL) free(path);
 800b5fe:	9801      	ldr	r0, [sp, #4]
 800b600:	b108      	cbz	r0, 800b606 <firebase_remove_device+0x3e>
 800b602:	f000 fe99 	bl	800c338 <free>
}
 800b606:	b002      	add	sp, #8
 800b608:	bd10      	pop	{r4, pc}
	else asprintf(&path, "/%s/.json", dev->prop.name);
 800b60a:	4907      	ldr	r1, [pc, #28]	; (800b628 <firebase_remove_device+0x60>)
 800b60c:	a801      	add	r0, sp, #4
 800b60e:	f000 fe37 	bl	800c280 <asiprintf>
 800b612:	e7ef      	b.n	800b5f4 <firebase_remove_device+0x2c>
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	08011e94 	.word	0x08011e94
 800b61c:	080112d0 	.word	0x080112d0
 800b620:	2000ba24 	.word	0x2000ba24
 800b624:	08011e60 	.word	0x08011e60
 800b628:	08011e74 	.word	0x08011e74

0800b62c <send_envdata_to_firebase>:

void send_envdata_to_firebase(uint32_t address, char *jdata){
 800b62c:	b570      	push	{r4, r5, r6, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b62e:	4d57      	ldr	r5, [pc, #348]	; (800b78c <send_envdata_to_firebase+0x160>)
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b08e      	sub	sp, #56	; 0x38
	char *path, *data;
	pkt_json_t json;
 800b634:	2400      	movs	r4, #0
    if (device_properties_list.empty()) {
 800b636:	42ab      	cmp	r3, r5
	pkt_json_t json;
 800b638:	940b      	str	r4, [sp, #44]	; 0x2c
 800b63a:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
 800b63e:	940d      	str	r4, [sp, #52]	; 0x34
void send_envdata_to_firebase(uint32_t address, char *jdata){
 800b640:	460e      	mov	r6, r1
    if (device_properties_list.empty()) {
 800b642:	f000 809a 	beq.w	800b77a <send_envdata_to_firebase+0x14e>
        if ((*device)->prop.address == device_address) {
 800b646:	689c      	ldr	r4, [r3, #8]
 800b648:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b64a:	4290      	cmp	r0, r2
 800b64c:	d00b      	beq.n	800b666 <send_envdata_to_firebase+0x3a>
	_M_node = _M_node->_M_next;
 800b64e:	681b      	ldr	r3, [r3, #0]
    while (device != device_properties_list.end()) {
 800b650:	42ab      	cmp	r3, r5
 800b652:	d1f8      	bne.n	800b646 <send_envdata_to_firebase+0x1a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b654:	4b4e      	ldr	r3, [pc, #312]	; (800b790 <send_envdata_to_firebase+0x164>)
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	4a4e      	ldr	r2, [pc, #312]	; (800b794 <send_envdata_to_firebase+0x168>)
 800b65a:	494f      	ldr	r1, [pc, #316]	; (800b798 <send_envdata_to_firebase+0x16c>)
 800b65c:	484f      	ldr	r0, [pc, #316]	; (800b79c <send_envdata_to_firebase+0x170>)
 800b65e:	2383      	movs	r3, #131	; 0x83
 800b660:	f7ff fbe4 	bl	800ae2c <LOG_DEBUG>
 800b664:	2400      	movs	r4, #0

	dev_struct_t *dev = select_device_properties(address);
	if(json_get_object(jdata, &json, "temp") == PKT_ERR_OK)
 800b666:	4a4e      	ldr	r2, [pc, #312]	; (800b7a0 <send_envdata_to_firebase+0x174>)
 800b668:	a90b      	add	r1, sp, #44	; 0x2c
 800b66a:	4630      	mov	r0, r6
 800b66c:	f7f9 fba0 	bl	8004db0 <json_get_object>
 800b670:	2800      	cmp	r0, #0
 800b672:	d074      	beq.n	800b75e <send_envdata_to_firebase+0x132>
		dev->env.temp = atof(json.value);
	json_release_object(&json);
 800b674:	a80b      	add	r0, sp, #44	; 0x2c
 800b676:	f7f9 fcb3 	bl	8004fe0 <json_release_object>
	if(json_get_object(jdata, &json, "humi") == PKT_ERR_OK)
 800b67a:	4a4a      	ldr	r2, [pc, #296]	; (800b7a4 <send_envdata_to_firebase+0x178>)
 800b67c:	a90b      	add	r1, sp, #44	; 0x2c
 800b67e:	4630      	mov	r0, r6
 800b680:	f7f9 fb96 	bl	8004db0 <json_get_object>
 800b684:	2800      	cmp	r0, #0
 800b686:	d061      	beq.n	800b74c <send_envdata_to_firebase+0x120>
		dev->env.humi = atof(json.value);
	json_release_object(&json);
 800b688:	a80b      	add	r0, sp, #44	; 0x2c
 800b68a:	f7f9 fca9 	bl	8004fe0 <json_release_object>
	if(json_get_object(jdata, &json, "current") == PKT_ERR_OK)
 800b68e:	4a46      	ldr	r2, [pc, #280]	; (800b7a8 <send_envdata_to_firebase+0x17c>)
 800b690:	a90b      	add	r1, sp, #44	; 0x2c
 800b692:	4630      	mov	r0, r6
 800b694:	f7f9 fb8c 	bl	8004db0 <json_get_object>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d04e      	beq.n	800b73a <send_envdata_to_firebase+0x10e>
		dev->env.curr = atof(json.value);
	json_release_object(&json);
 800b69c:	a80b      	add	r0, sp, #44	; 0x2c
 800b69e:	f7f9 fc9f 	bl	8004fe0 <json_release_object>
	if(json_get_object(jdata, &json, "time") == PKT_ERR_OK)
 800b6a2:	4a42      	ldr	r2, [pc, #264]	; (800b7ac <send_envdata_to_firebase+0x180>)
 800b6a4:	a90b      	add	r1, sp, #44	; 0x2c
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	f7f9 fb82 	bl	8004db0 <json_get_object>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d039      	beq.n	800b724 <send_envdata_to_firebase+0xf8>
		memcpy(dev->env.time, json.value, strlen(json.value));
	json_release_object(&json);
 800b6b0:	a80b      	add	r0, sp, #44	; 0x2c
 800b6b2:	f7f9 fc95 	bl	8004fe0 <json_release_object>

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800b6b6:	4b3e      	ldr	r3, [pc, #248]	; (800b7b0 <send_envdata_to_firebase+0x184>)
 800b6b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d057      	beq.n	800b770 <send_envdata_to_firebase+0x144>
 800b6c0:	493c      	ldr	r1, [pc, #240]	; (800b7b4 <send_envdata_to_firebase+0x188>)
 800b6c2:	a809      	add	r0, sp, #36	; 0x24
 800b6c4:	f000 fddc 	bl	800c280 <asiprintf>
	else asprintf(&path, "/%s/.json", dev->prop.name);

	asprintf(&data, data_struct, dev->env.temp, dev->env.humi, dev->env.curr, dev->env.time);
 800b6c8:	6820      	ldr	r0, [r4, #0]
 800b6ca:	4d3b      	ldr	r5, [pc, #236]	; (800b7b8 <send_envdata_to_firebase+0x18c>)
 800b6cc:	f7f4 ff5c 	bl	8000588 <__aeabi_f2d>
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	68e1      	ldr	r1, [r4, #12]
 800b6d4:	682d      	ldr	r5, [r5, #0]
 800b6d6:	9104      	str	r1, [sp, #16]
 800b6d8:	4602      	mov	r2, r0
 800b6da:	68a0      	ldr	r0, [r4, #8]
 800b6dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b6e0:	f7f4 ff52 	bl	8000588 <__aeabi_f2d>
 800b6e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6e8:	6860      	ldr	r0, [r4, #4]
 800b6ea:	f7f4 ff4d 	bl	8000588 <__aeabi_f2d>
 800b6ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6f2:	e9cd 0100 	strd	r0, r1, [sp]
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	a80a      	add	r0, sp, #40	; 0x28
 800b6fa:	f000 fdc1 	bl	800c280 <asiprintf>

	wifiif_http_client_set_method((char *)"HTTP_METHOD_PATCH");
 800b6fe:	482f      	ldr	r0, [pc, #188]	; (800b7bc <send_envdata_to_firebase+0x190>)
 800b700:	f7fa fe96 	bl	8006430 <wifiif_http_client_set_method>
	wifiif_http_client_set_url(path);
 800b704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b706:	f7fa fe7f 	bl	8006408 <wifiif_http_client_set_url>
	wifiif_http_client_set_data(data);
 800b70a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b70c:	f7fa fea4 	bl	8006458 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800b710:	f7fa feb6 	bl	8006480 <wifiif_http_client_request>

	free(path);
 800b714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b716:	f000 fe0f 	bl	800c338 <free>
	free(data);
 800b71a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800b71c:	f000 fe0c 	bl	800c338 <free>
}
 800b720:	b00e      	add	sp, #56	; 0x38
 800b722:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(dev->env.time, json.value, strlen(json.value));
 800b724:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b726:	9106      	str	r1, [sp, #24]
 800b728:	4608      	mov	r0, r1
 800b72a:	f7f4 fd6b 	bl	8000204 <strlen>
 800b72e:	9906      	ldr	r1, [sp, #24]
 800b730:	4602      	mov	r2, r0
 800b732:	68e0      	ldr	r0, [r4, #12]
 800b734:	f000 fe08 	bl	800c348 <memcpy>
 800b738:	e7ba      	b.n	800b6b0 <send_envdata_to_firebase+0x84>
		dev->env.curr = atof(json.value);
 800b73a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b73c:	f000 fdc4 	bl	800c2c8 <atof>
 800b740:	ec51 0b10 	vmov	r0, r1, d0
 800b744:	f7f5 fa70 	bl	8000c28 <__aeabi_d2f>
 800b748:	60a0      	str	r0, [r4, #8]
 800b74a:	e7a7      	b.n	800b69c <send_envdata_to_firebase+0x70>
		dev->env.humi = atof(json.value);
 800b74c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b74e:	f000 fdbb 	bl	800c2c8 <atof>
 800b752:	ec51 0b10 	vmov	r0, r1, d0
 800b756:	f7f5 fa67 	bl	8000c28 <__aeabi_d2f>
 800b75a:	6060      	str	r0, [r4, #4]
 800b75c:	e794      	b.n	800b688 <send_envdata_to_firebase+0x5c>
		dev->env.temp = atof(json.value);
 800b75e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b760:	f000 fdb2 	bl	800c2c8 <atof>
 800b764:	ec51 0b10 	vmov	r0, r1, d0
 800b768:	f7f5 fa5e 	bl	8000c28 <__aeabi_d2f>
 800b76c:	6020      	str	r0, [r4, #0]
 800b76e:	e781      	b.n	800b674 <send_envdata_to_firebase+0x48>
	else asprintf(&path, "/%s/.json", dev->prop.name);
 800b770:	4913      	ldr	r1, [pc, #76]	; (800b7c0 <send_envdata_to_firebase+0x194>)
 800b772:	a809      	add	r0, sp, #36	; 0x24
 800b774:	f000 fd84 	bl	800c280 <asiprintf>
 800b778:	e7a6      	b.n	800b6c8 <send_envdata_to_firebase+0x9c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800b77a:	4b05      	ldr	r3, [pc, #20]	; (800b790 <send_envdata_to_firebase+0x164>)
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	4a11      	ldr	r2, [pc, #68]	; (800b7c4 <send_envdata_to_firebase+0x198>)
 800b780:	4905      	ldr	r1, [pc, #20]	; (800b798 <send_envdata_to_firebase+0x16c>)
 800b782:	4806      	ldr	r0, [pc, #24]	; (800b79c <send_envdata_to_firebase+0x170>)
 800b784:	2376      	movs	r3, #118	; 0x76
 800b786:	f7ff fb51 	bl	800ae2c <LOG_DEBUG>
        return NULL;
 800b78a:	e76c      	b.n	800b666 <send_envdata_to_firebase+0x3a>
 800b78c:	2000ba14 	.word	0x2000ba14
 800b790:	08011df0 	.word	0x08011df0
 800b794:	08010e68 	.word	0x08010e68
 800b798:	08010d14 	.word	0x08010d14
 800b79c:	08011dcc 	.word	0x08011dcc
 800b7a0:	08011ea8 	.word	0x08011ea8
 800b7a4:	08011eb0 	.word	0x08011eb0
 800b7a8:	08011eb8 	.word	0x08011eb8
 800b7ac:	08011ec0 	.word	0x08011ec0
 800b7b0:	2000ba24 	.word	0x2000ba24
 800b7b4:	08011e60 	.word	0x08011e60
 800b7b8:	200000fc 	.word	0x200000fc
 800b7bc:	08011e80 	.word	0x08011e80
 800b7c0:	08011e74 	.word	0x08011e74
 800b7c4:	08011dac 	.word	0x08011dac

0800b7c8 <firebase_get_device_data>:

	free(path);
	free(data);
}

void firebase_get_device_data(dev_struct_t *dev){
 800b7c8:	b500      	push	{lr}
	char *path;

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800b7ca:	4b0f      	ldr	r3, [pc, #60]	; (800b808 <firebase_get_device_data+0x40>)
 800b7cc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b7ce:	681b      	ldr	r3, [r3, #0]
void firebase_get_device_data(dev_struct_t *dev){
 800b7d0:	b083      	sub	sp, #12
	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 800b7d2:	b1a3      	cbz	r3, 800b7fe <firebase_get_device_data+0x36>
 800b7d4:	490d      	ldr	r1, [pc, #52]	; (800b80c <firebase_get_device_data+0x44>)
 800b7d6:	a801      	add	r0, sp, #4
 800b7d8:	f000 fd52 	bl	800c280 <asiprintf>
	else asprintf(&path, "/%s/.json", dev->prop.name);

	wifiif_http_client_set_method((char *)"HTTP_METHOD_GET");
 800b7dc:	480c      	ldr	r0, [pc, #48]	; (800b810 <firebase_get_device_data+0x48>)
 800b7de:	f7fa fe27 	bl	8006430 <wifiif_http_client_set_method>
	wifiif_http_client_set_url(path);
 800b7e2:	9801      	ldr	r0, [sp, #4]
 800b7e4:	f7fa fe10 	bl	8006408 <wifiif_http_client_set_url>
	wifiif_http_client_set_data((char *)"{}");
 800b7e8:	480a      	ldr	r0, [pc, #40]	; (800b814 <firebase_get_device_data+0x4c>)
 800b7ea:	f7fa fe35 	bl	8006458 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 800b7ee:	f7fa fe47 	bl	8006480 <wifiif_http_client_request>

	free(path);
 800b7f2:	9801      	ldr	r0, [sp, #4]
 800b7f4:	f000 fda0 	bl	800c338 <free>
}
 800b7f8:	b003      	add	sp, #12
 800b7fa:	f85d fb04 	ldr.w	pc, [sp], #4
	else asprintf(&path, "/%s/.json", dev->prop.name);
 800b7fe:	4906      	ldr	r1, [pc, #24]	; (800b818 <firebase_get_device_data+0x50>)
 800b800:	a801      	add	r0, sp, #4
 800b802:	f000 fd3d 	bl	800c280 <asiprintf>
 800b806:	e7e9      	b.n	800b7dc <firebase_get_device_data+0x14>
 800b808:	2000ba24 	.word	0x2000ba24
 800b80c:	08011e60 	.word	0x08011e60
 800b810:	08011ec8 	.word	0x08011ec8
 800b814:	080112d0 	.word	0x080112d0
 800b818:	08011e74 	.word	0x08011e74

0800b81c <_GLOBAL__sub_I_secret>:
	this->_M_next = this->_M_prev = this;
 800b81c:	4b02      	ldr	r3, [pc, #8]	; (800b828 <_GLOBAL__sub_I_secret+0xc>)
	this->_M_size = 0;
 800b81e:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 800b820:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 800b824:	609a      	str	r2, [r3, #8]
}
 800b826:	4770      	bx	lr
 800b828:	2000ba14 	.word	0x2000ba14

0800b82c <_GLOBAL__sub_D_secret>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800b82e:	4d06      	ldr	r5, [pc, #24]	; (800b848 <_GLOBAL__sub_D_secret+0x1c>)
 800b830:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 800b832:	42ac      	cmp	r4, r5
 800b834:	d006      	beq.n	800b844 <_GLOBAL__sub_D_secret+0x18>
 800b836:	4620      	mov	r0, r4
	  __cur = __tmp->_M_next;
 800b838:	6824      	ldr	r4, [r4, #0]
 800b83a:	210c      	movs	r1, #12
 800b83c:	f000 fcac 	bl	800c198 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 800b840:	42ac      	cmp	r4, r5
 800b842:	d1f8      	bne.n	800b836 <_GLOBAL__sub_D_secret+0xa>
 800b844:	bd38      	pop	{r3, r4, r5, pc}
 800b846:	bf00      	nop
 800b848:	2000ba14 	.word	0x2000ba14

0800b84c <_ZL17exception_handlerv>:
		vTaskDelay(idle_time);
	}
}

static volatile  void exception_handler(void){
	gpio_set(GPIOB, 14);
 800b84c:	4801      	ldr	r0, [pc, #4]	; (800b854 <_ZL17exception_handlerv+0x8>)
 800b84e:	210e      	movs	r1, #14
 800b850:	f7fb bd92 	b.w	8007378 <gpio_set>
 800b854:	40020400 	.word	0x40020400

0800b858 <_Z27task_loraif_receive_processPv>:
void task_loraif_receive_process(void *){
 800b858:	b500      	push	{lr}
	spi5->init(&lora_spi_conf);
 800b85a:	4c23      	ldr	r4, [pc, #140]	; (800b8e8 <_Z27task_loraif_receive_processPv+0x90>)
 800b85c:	4a23      	ldr	r2, [pc, #140]	; (800b8ec <_Z27task_loraif_receive_processPv+0x94>)
 800b85e:	6821      	ldr	r1, [r4, #0]
void task_loraif_receive_process(void *){
 800b860:	b085      	sub	sp, #20
	spi5->init(&lora_spi_conf);
 800b862:	a802      	add	r0, sp, #8
 800b864:	f7fc f852 	bl	800790c <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, lora_gpioA0_event_handler, NULL);
 800b868:	2200      	movs	r2, #0
 800b86a:	4610      	mov	r0, r2
 800b86c:	4920      	ldr	r1, [pc, #128]	; (800b8f0 <_Z27task_loraif_receive_processPv+0x98>)
 800b86e:	f7fb f841 	bl	80068f4 <exti_register_event_handler>
	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize successful.");
 800b872:	2307      	movs	r3, #7
 800b874:	6821      	ldr	r1, [r4, #0]
 800b876:	4a1f      	ldr	r2, [pc, #124]	; (800b8f4 <_Z27task_loraif_receive_processPv+0x9c>)
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	481f      	ldr	r0, [pc, #124]	; (800b8f8 <_Z27task_loraif_receive_processPv+0xa0>)
 800b87c:	2314      	movs	r3, #20
 800b87e:	f7f9 fc57 	bl	8005130 <_ZN6sx127x4initEP3spilhm>
 800b882:	b358      	cbz	r0, 800b8dc <_Z27task_loraif_receive_processPv+0x84>
 800b884:	491d      	ldr	r1, [pc, #116]	; (800b8fc <_Z27task_loraif_receive_processPv+0xa4>)
 800b886:	481e      	ldr	r0, [pc, #120]	; (800b900 <_Z27task_loraif_receive_processPv+0xa8>)
 800b888:	f7ff fa16 	bl	800acb8 <LOG_INFO>
	lora.register_event_handler(NULL, lora_event_handler);
 800b88c:	4a1d      	ldr	r2, [pc, #116]	; (800b904 <_Z27task_loraif_receive_processPv+0xac>)
 800b88e:	481a      	ldr	r0, [pc, #104]	; (800b8f8 <_Z27task_loraif_receive_processPv+0xa0>)
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b890:	4c1d      	ldr	r4, [pc, #116]	; (800b908 <_Z27task_loraif_receive_processPv+0xb0>)
	lora.register_event_handler(NULL, lora_event_handler);
 800b892:	2100      	movs	r1, #0
	loraif_init(&lora, LORAIF_SEND_SYNCWORD, LORAIF_RECV_SYNCWORD, 10000, 3);
 800b894:	2503      	movs	r5, #3
	lora.register_event_handler(NULL, lora_event_handler);
 800b896:	f7f9 fedd 	bl	8005654 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	loraif_init(&lora, LORAIF_SEND_SYNCWORD, LORAIF_RECV_SYNCWORD, 10000, 3);
 800b89a:	f242 7310 	movw	r3, #10000	; 0x2710
 800b89e:	22ab      	movs	r2, #171	; 0xab
 800b8a0:	2112      	movs	r1, #18
 800b8a2:	4815      	ldr	r0, [pc, #84]	; (800b8f8 <_Z27task_loraif_receive_processPv+0xa0>)
 800b8a4:	9500      	str	r5, [sp, #0]
 800b8a6:	f7f8 fdbb 	bl	8004420 <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 800b8aa:	4818      	ldr	r0, [pc, #96]	; (800b90c <_Z27task_loraif_receive_processPv+0xb4>)
 800b8ac:	f7f8 fdfa 	bl	80044a4 <loraif_register_event_handler>
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2104      	movs	r1, #4
 800b8b4:	2014      	movs	r0, #20
 800b8b6:	f7f6 f8dd 	bl	8001a74 <xQueueGenericCreate>
	s_lora_enable_recv = xSemaphoreCreateBinary();
 800b8ba:	462a      	mov	r2, r5
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b8bc:	4603      	mov	r3, r0
	s_lora_enable_recv = xSemaphoreCreateBinary();
 800b8be:	2100      	movs	r1, #0
 800b8c0:	2001      	movs	r0, #1
	q_loraif_receive_data = xQueueCreate(20, sizeof(uint32_t));
 800b8c2:	6023      	str	r3, [r4, #0]
	s_lora_enable_recv = xSemaphoreCreateBinary();
 800b8c4:	f7f6 f8d6 	bl	8001a74 <xQueueGenericCreate>
 800b8c8:	4b11      	ldr	r3, [pc, #68]	; (800b910 <_Z27task_loraif_receive_processPv+0xb8>)
 800b8ca:	6018      	str	r0, [r3, #0]
		loraif_response_to_device();
 800b8cc:	f7f9 f8a8 	bl	8004a20 <loraif_response_to_device>
		loraif_receive_process(&q_loraif_receive_data);
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f7f8 ff35 	bl	8004740 <loraif_receive_process>
		loraif_check_device_timeout();
 800b8d6:	f7f9 f8e3 	bl	8004aa0 <loraif_check_device_timeout>
	while(1){
 800b8da:	e7f7      	b.n	800b8cc <_Z27task_loraif_receive_processPv+0x74>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 800b8dc:	490d      	ldr	r1, [pc, #52]	; (800b914 <_Z27task_loraif_receive_processPv+0xbc>)
 800b8de:	4808      	ldr	r0, [pc, #32]	; (800b900 <_Z27task_loraif_receive_processPv+0xa8>)
 800b8e0:	f7ff fa66 	bl	800adb0 <LOG_ERROR>
 800b8e4:	e7d2      	b.n	800b88c <_Z27task_loraif_receive_processPv+0x34>
 800b8e6:	bf00      	nop
 800b8e8:	2000007c 	.word	0x2000007c
 800b8ec:	20000104 	.word	0x20000104
 800b8f0:	0800b9b9 	.word	0x0800b9b9
 800b8f4:	19cf0e40 	.word	0x19cf0e40
 800b8f8:	2000ba38 	.word	0x2000ba38
 800b8fc:	08012108 	.word	0x08012108
 800b900:	08012124 	.word	0x08012124
 800b904:	0800ba79 	.word	0x0800ba79
 800b908:	2000ba64 	.word	0x2000ba64
 800b90c:	0800bea9 	.word	0x0800bea9
 800b910:	2000ba6c 	.word	0x2000ba6c
 800b914:	0801212c 	.word	0x0801212c

0800b918 <_Z31task_loraif_request_device_dataPv>:
void task_loraif_request_device_data(void *){
 800b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	b084      	sub	sp, #16
	e_loraif_request_data = xEventGroupCreate();
 800b91e:	f7f5 ff0d 	bl	800173c <xEventGroupCreate>
	tim5->init(&loraif_request_tim);
 800b922:	4d1f      	ldr	r5, [pc, #124]	; (800b9a0 <_Z31task_loraif_request_device_dataPv+0x88>)
	e_loraif_request_data = xEventGroupCreate();
 800b924:	4c1f      	ldr	r4, [pc, #124]	; (800b9a4 <_Z31task_loraif_request_device_dataPv+0x8c>)
	tim5->init(&loraif_request_tim);
 800b926:	6829      	ldr	r1, [r5, #0]
 800b928:	4a1f      	ldr	r2, [pc, #124]	; (800b9a8 <_Z31task_loraif_request_device_dataPv+0x90>)
	e_loraif_request_data = xEventGroupCreate();
 800b92a:	6020      	str	r0, [r4, #0]
	tim5->init(&loraif_request_tim);
 800b92c:	a802      	add	r0, sp, #8
 800b92e:	f7fc fe5d 	bl	80085ec <_ZN3tim4initEP12tim_config_t>
	tim5->register_event_handler(loraif_request_data_tim_event_handler, NULL);
 800b932:	6829      	ldr	r1, [r5, #0]
 800b934:	4a1d      	ldr	r2, [pc, #116]	; (800b9ac <_Z31task_loraif_request_device_dataPv+0x94>)
 800b936:	4e1e      	ldr	r6, [pc, #120]	; (800b9b0 <_Z31task_loraif_request_device_dataPv+0x98>)
					loraif_send_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800b938:	4f1e      	ldr	r7, [pc, #120]	; (800b9b4 <_Z31task_loraif_request_device_dataPv+0x9c>)
	tim5->register_event_handler(loraif_request_data_tim_event_handler, NULL);
 800b93a:	2300      	movs	r3, #0
 800b93c:	a802      	add	r0, sp, #8
 800b93e:	f7fc ff6f 	bl	8008820 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_>
	tim5->start_it();
 800b942:	6829      	ldr	r1, [r5, #0]
 800b944:	a802      	add	r0, sp, #8
 800b946:	f7fc ff91 	bl	800886c <_ZN3tim8start_itEv>
		EventBits_t bit = xEventGroupWaitBits(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, pdTRUE, pdFALSE, 10);
 800b94a:	250a      	movs	r5, #10
 800b94c:	6820      	ldr	r0, [r4, #0]
 800b94e:	9500      	str	r5, [sp, #0]
 800b950:	2300      	movs	r3, #0
 800b952:	2201      	movs	r2, #1
 800b954:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b958:	f7f5 fefe 	bl	8001758 <xEventGroupWaitBits>
		if(bit == LORAIF_REQUEST_DATA_E_BITS && !loraif_device_list.empty()) {
 800b95c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800b960:	d1f4      	bne.n	800b94c <_Z31task_loraif_request_device_dataPv+0x34>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800b962:	f8d6 8000 	ldr.w	r8, [r6]
 800b966:	45b0      	cmp	r8, r6
 800b968:	d0f0      	beq.n	800b94c <_Z31task_loraif_request_device_dataPv+0x34>
			__IO uint32_t tick = get_tick();
 800b96a:	f7fc fde5 	bl	8008538 <get_tick>
 800b96e:	9002      	str	r0, [sp, #8]
		    	if(get_tick() - tick > 1000){
 800b970:	f7fc fde2 	bl	8008538 <get_tick>
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	1ac0      	subs	r0, r0, r3
 800b978:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b97c:	d9f8      	bls.n	800b970 <_Z31task_loraif_request_device_dataPv+0x58>
					loraif_send_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800b97e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800b982:	2301      	movs	r3, #1
 800b984:	6810      	ldr	r0, [r2, #0]
 800b986:	2103      	movs	r1, #3
 800b988:	463a      	mov	r2, r7
 800b98a:	f7f8 fdd1 	bl	8004530 <loraif_send_request>
					tick = get_tick();
 800b98e:	f7fc fdd3 	bl	8008538 <get_tick>
	_M_node = _M_node->_M_next;
 800b992:	f8d8 8000 	ldr.w	r8, [r8]
 800b996:	9002      	str	r0, [sp, #8]
      operator++() _GLIBCXX_NOEXCEPT
 800b998:	45b0      	cmp	r8, r6
 800b99a:	d1e9      	bne.n	800b970 <_Z31task_loraif_request_device_dataPv+0x58>
 800b99c:	e7d6      	b.n	800b94c <_Z31task_loraif_request_device_dataPv+0x34>
 800b99e:	bf00      	nop
 800b9a0:	2000008c 	.word	0x2000008c
 800b9a4:	2000ba28 	.word	0x2000ba28
 800b9a8:	2000013c 	.word	0x2000013c
 800b9ac:	0800bb05 	.word	0x0800bb05
 800b9b0:	2000b28c 	.word	0x2000b28c
 800b9b4:	08012144 	.word	0x08012144

0800b9b8 <_Z25lora_gpioA0_event_handlerPv>:
	lora.IRQHandler();
 800b9b8:	4801      	ldr	r0, [pc, #4]	; (800b9c0 <_Z25lora_gpioA0_event_handlerPv+0x8>)
 800b9ba:	f7fa ba5b 	b.w	8005e74 <_ZN6sx127x10IRQHandlerEv>
 800b9be:	bf00      	nop
 800b9c0:	2000ba38 	.word	0x2000ba38

0800b9c4 <_Z27task_wifiif_get_device_dataPv>:
void task_wifiif_get_device_data(void *){
 800b9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9c6:	b085      	sub	sp, #20
	e_wifiif_get_device_data = xEventGroupCreate();
 800b9c8:	f7f5 feb8 	bl	800173c <xEventGroupCreate>
	tim2->init(&wifiif_get_control_tim);
 800b9cc:	4c1c      	ldr	r4, [pc, #112]	; (800ba40 <_Z27task_wifiif_get_device_dataPv+0x7c>)
	e_wifiif_get_device_data = xEventGroupCreate();
 800b9ce:	4d1d      	ldr	r5, [pc, #116]	; (800ba44 <_Z27task_wifiif_get_device_dataPv+0x80>)
	tim2->init(&wifiif_get_control_tim);
 800b9d0:	4a1d      	ldr	r2, [pc, #116]	; (800ba48 <_Z27task_wifiif_get_device_dataPv+0x84>)
 800b9d2:	6821      	ldr	r1, [r4, #0]
	e_wifiif_get_device_data = xEventGroupCreate();
 800b9d4:	6028      	str	r0, [r5, #0]
	tim2->init(&wifiif_get_control_tim);
 800b9d6:	a802      	add	r0, sp, #8
 800b9d8:	f7fc fe08 	bl	80085ec <_ZN3tim4initEP12tim_config_t>
	tim2->register_event_handler(wifiif_get_device_data_tim_event_handler, NULL);
 800b9dc:	4a1b      	ldr	r2, [pc, #108]	; (800ba4c <_Z27task_wifiif_get_device_dataPv+0x88>)
 800b9de:	6821      	ldr	r1, [r4, #0]
 800b9e0:	4f1b      	ldr	r7, [pc, #108]	; (800ba50 <_Z27task_wifiif_get_device_dataPv+0x8c>)
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	a802      	add	r0, sp, #8
 800b9e6:	f7fc ff1b 	bl	8008820 <_ZN3tim22register_event_handlerEPFv13tim_channel_t11tim_event_tPvES2_>
	tim2->start_it();
 800b9ea:	6821      	ldr	r1, [r4, #0]
 800b9ec:	a802      	add	r0, sp, #8
 800b9ee:	f7fc ff3d 	bl	800886c <_ZN3tim8start_itEv>
		EventBits_t bit = xEventGroupWaitBits(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, pdTRUE, pdFALSE, 5);
 800b9f2:	2605      	movs	r6, #5
 800b9f4:	6828      	ldr	r0, [r5, #0]
 800b9f6:	9600      	str	r6, [sp, #0]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba00:	f7f5 feaa 	bl	8001758 <xEventGroupWaitBits>
		if(bit == WIFIIF_GET_DEVICE_DATA_E_BITS && !loraif_device_list.empty()) {
 800ba04:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800ba08:	d1f4      	bne.n	800b9f4 <_Z27task_wifiif_get_device_dataPv+0x30>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800ba0a:	683c      	ldr	r4, [r7, #0]
 800ba0c:	42bc      	cmp	r4, r7
 800ba0e:	d0f1      	beq.n	800b9f4 <_Z27task_wifiif_get_device_dataPv+0x30>
			__IO uint32_t tick = get_tick();
 800ba10:	f7fc fd92 	bl	8008538 <get_tick>
 800ba14:	9002      	str	r0, [sp, #8]
		    	if(get_tick() - tick > 1000){
 800ba16:	f7fc fd8f 	bl	8008538 <get_tick>
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	1ac0      	subs	r0, r0, r3
 800ba1e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800ba22:	d9f8      	bls.n	800ba16 <_Z27task_wifiif_get_device_dataPv+0x52>
			    	dev_struct_t *dev = select_device_properties((*device)->address);
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	6818      	ldr	r0, [r3, #0]
 800ba28:	f7ff fcfe 	bl	800b428 <select_device_properties>
			    	firebase_get_device_data(dev);
 800ba2c:	f7ff fecc 	bl	800b7c8 <firebase_get_device_data>
					tick = get_tick();
 800ba30:	f7fc fd82 	bl	8008538 <get_tick>
	_M_node = _M_node->_M_next;
 800ba34:	6824      	ldr	r4, [r4, #0]
 800ba36:	9002      	str	r0, [sp, #8]
      operator++() _GLIBCXX_NOEXCEPT
 800ba38:	42bc      	cmp	r4, r7
 800ba3a:	d1ec      	bne.n	800ba16 <_Z27task_wifiif_get_device_dataPv+0x52>
 800ba3c:	e7da      	b.n	800b9f4 <_Z27task_wifiif_get_device_dataPv+0x30>
 800ba3e:	bf00      	nop
 800ba40:	20000088 	.word	0x20000088
 800ba44:	2000ba2c 	.word	0x2000ba2c
 800ba48:	20000160 	.word	0x20000160
 800ba4c:	0800bb29 	.word	0x0800bb29
 800ba50:	2000b28c 	.word	0x2000b28c

0800ba54 <_Z23wifiif_uart_send_stringPct>:
void wifiif_uart_send_string(char *str, uint16_t size){
 800ba54:	b510      	push	{r4, lr}
	usart1->transmit((uint8_t *)str, size);
 800ba56:	4c07      	ldr	r4, [pc, #28]	; (800ba74 <_Z23wifiif_uart_send_stringPct+0x20>)
void wifiif_uart_send_string(char *str, uint16_t size){
 800ba58:	b082      	sub	sp, #8
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
	usart1->transmit((uint8_t *)str, size);
 800ba5e:	4668      	mov	r0, sp
 800ba60:	6821      	ldr	r1, [r4, #0]
 800ba62:	f7fe fa1f 	bl	8009ea4 <_ZN5usart8transmitEPht>
	delay_ms(1);
 800ba66:	2001      	movs	r0, #1
}
 800ba68:	b002      	add	sp, #8
 800ba6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(1);
 800ba6e:	f7fc bd69 	b.w	8008544 <delay_ms>
 800ba72:	bf00      	nop
 800ba74:	20000090 	.word	0x20000090

0800ba78 <_Z18lora_event_handlerPvh>:
	if(packetSize){
 800ba78:	b901      	cbnz	r1, 800ba7c <_Z18lora_event_handlerPvh+0x4>
 800ba7a:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 800ba7c:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 800ba7e:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 800ba80:	b083      	sub	sp, #12
 800ba82:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 800ba84:	f000 fc50 	bl	800c328 <malloc>
 800ba88:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 800ba8a:	4818      	ldr	r0, [pc, #96]	; (800baec <_Z18lora_event_handlerPvh+0x74>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 800ba8c:	9100      	str	r1, [sp, #0]
		lora.receive(lora_RxBuf);
 800ba8e:	f7fa f893 	bl	8005bb8 <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 800ba92:	9b00      	ldr	r3, [sp, #0]
 800ba94:	2500      	movs	r5, #0
 800ba96:	551d      	strb	r5, [r3, r4]
		if(loraif_check_receive_data_crc(lora_RxBuf) == true){
 800ba98:	9800      	ldr	r0, [sp, #0]
 800ba9a:	f7f8 fd09 	bl	80044b0 <loraif_check_receive_data_crc>
 800ba9e:	b940      	cbnz	r0, 800bab2 <_Z18lora_event_handlerPvh+0x3a>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 800baa0:	4813      	ldr	r0, [pc, #76]	; (800baf0 <_Z18lora_event_handlerPvh+0x78>)
 800baa2:	4914      	ldr	r1, [pc, #80]	; (800baf4 <_Z18lora_event_handlerPvh+0x7c>)
 800baa4:	f7ff f984 	bl	800adb0 <LOG_ERROR>
			free(lora_RxBuf);
 800baa8:	9800      	ldr	r0, [sp, #0]
 800baaa:	f000 fc45 	bl	800c338 <free>
}
 800baae:	b003      	add	sp, #12
 800bab0:	bd30      	pop	{r4, r5, pc}
			if(xSemaphoreTakeFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken)){
 800bab2:	4c11      	ldr	r4, [pc, #68]	; (800baf8 <_Z18lora_event_handlerPvh+0x80>)
			BaseType_t pxHigherPriorityTaskWoken = pdTRUE;
 800bab4:	2301      	movs	r3, #1
			if(xSemaphoreTakeFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken)){
 800bab6:	6820      	ldr	r0, [r4, #0]
			BaseType_t pxHigherPriorityTaskWoken = pdTRUE;
 800bab8:	9301      	str	r3, [sp, #4]
			if(xSemaphoreTakeFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken)){
 800baba:	aa01      	add	r2, sp, #4
 800babc:	4629      	mov	r1, r5
 800babe:	f7f6 fd9b 	bl	80025f8 <xQueueReceiveFromISR>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d0f0      	beq.n	800baa8 <_Z18lora_event_handlerPvh+0x30>
				if(xQueueSendFromISR(q_loraif_receive_data, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS)
 800bac6:	4a0d      	ldr	r2, [pc, #52]	; (800bafc <_Z18lora_event_handlerPvh+0x84>)
 800bac8:	462b      	mov	r3, r5
 800baca:	6810      	ldr	r0, [r2, #0]
 800bacc:	4669      	mov	r1, sp
 800bace:	aa01      	add	r2, sp, #4
 800bad0:	f7f6 f9c8 	bl	8001e64 <xQueueGenericSendFromISR>
 800bad4:	2801      	cmp	r0, #1
 800bad6:	d104      	bne.n	800bae2 <_Z18lora_event_handlerPvh+0x6a>
				xSemaphoreGiveFromISR(s_lora_enable_recv, &pxHigherPriorityTaskWoken);
 800bad8:	6820      	ldr	r0, [r4, #0]
 800bada:	a901      	add	r1, sp, #4
 800badc:	f7f6 fa28 	bl	8001f30 <xQueueGiveFromISR>
 800bae0:	e7e5      	b.n	800baae <_Z18lora_event_handlerPvh+0x36>
					LOG_ERROR(TAG, "LoRa error queue receive.");
 800bae2:	4907      	ldr	r1, [pc, #28]	; (800bb00 <_Z18lora_event_handlerPvh+0x88>)
 800bae4:	4802      	ldr	r0, [pc, #8]	; (800baf0 <_Z18lora_event_handlerPvh+0x78>)
 800bae6:	f7ff f963 	bl	800adb0 <LOG_ERROR>
 800baea:	e7f5      	b.n	800bad8 <_Z18lora_event_handlerPvh+0x60>
 800baec:	2000ba38 	.word	0x2000ba38
 800baf0:	08012124 	.word	0x08012124
 800baf4:	08012164 	.word	0x08012164
 800baf8:	2000ba6c 	.word	0x2000ba6c
 800bafc:	2000ba64 	.word	0x2000ba64
 800bb00:	08012148 	.word	0x08012148

0800bb04 <_Z37loraif_request_data_tim_event_handler13tim_channel_t11tim_event_tPv>:
	if(event == TIM_EVENT_UPDATE){
 800bb04:	b101      	cbz	r1, 800bb08 <_Z37loraif_request_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x4>
 800bb06:	4770      	bx	lr
void loraif_request_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800bb08:	b500      	push	{lr}
 800bb0a:	460b      	mov	r3, r1
		xEventGroupSetBitsFromISR(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800bb0c:	4905      	ldr	r1, [pc, #20]	; (800bb24 <_Z37loraif_request_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x20>)
void loraif_request_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800bb0e:	b083      	sub	sp, #12
		xEventGroupSetBitsFromISR(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800bb10:	6808      	ldr	r0, [r1, #0]
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800bb12:	9301      	str	r3, [sp, #4]
		xEventGroupSetBitsFromISR(e_loraif_request_data, LORAIF_REQUEST_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800bb14:	aa01      	add	r2, sp, #4
 800bb16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800bb1a:	f7f5 fea5 	bl	8001868 <xEventGroupSetBitsFromISR>
}
 800bb1e:	b003      	add	sp, #12
 800bb20:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb24:	2000ba28 	.word	0x2000ba28

0800bb28 <_Z40wifiif_get_device_data_tim_event_handler13tim_channel_t11tim_event_tPv>:
	if(event == TIM_EVENT_UPDATE){
 800bb28:	b101      	cbz	r1, 800bb2c <_Z40wifiif_get_device_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x4>
 800bb2a:	4770      	bx	lr
void wifiif_get_device_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800bb2c:	b500      	push	{lr}
 800bb2e:	460b      	mov	r3, r1
		xEventGroupSetBitsFromISR(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800bb30:	4905      	ldr	r1, [pc, #20]	; (800bb48 <_Z40wifiif_get_device_data_tim_event_handler13tim_channel_t11tim_event_tPv+0x20>)
void wifiif_get_device_data_tim_event_handler(tim_channel_t channel, tim_event_t event, void *param){
 800bb32:	b083      	sub	sp, #12
		xEventGroupSetBitsFromISR(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800bb34:	6808      	ldr	r0, [r1, #0]
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800bb36:	9301      	str	r3, [sp, #4]
		xEventGroupSetBitsFromISR(e_wifiif_get_device_data, WIFIIF_GET_DEVICE_DATA_E_BITS, &pxHigherPriorityTaskWoken);
 800bb38:	aa01      	add	r2, sp, #4
 800bb3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bb3e:	f7f5 fe93 	bl	8001868 <xEventGroupSetBitsFromISR>
}
 800bb42:	b003      	add	sp, #12
 800bb44:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb48:	2000ba2c 	.word	0x2000ba2c

0800bb4c <_Z17wifi_uart_handler13usart_event_tPv>:
	if(event == (USART_EVENT_IDLE_STATE)){
 800bb4c:	2804      	cmp	r0, #4
 800bb4e:	d000      	beq.n	800bb52 <_Z17wifi_uart_handler13usart_event_tPv+0x6>
 800bb50:	4770      	bx	lr
void wifi_uart_handler(usart_event_t event, void *param){
 800bb52:	b510      	push	{r4, lr}
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800bb54:	4c0d      	ldr	r4, [pc, #52]	; (800bb8c <_Z17wifi_uart_handler13usart_event_tPv+0x40>)
void wifi_uart_handler(usart_event_t event, void *param){
 800bb56:	b086      	sub	sp, #24
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800bb58:	a802      	add	r0, sp, #8
 800bb5a:	6821      	ldr	r1, [r4, #0]
 800bb5c:	aa01      	add	r2, sp, #4
 800bb5e:	f7fe fa53 	bl	800a008 <_ZN5usart10get_bufferEPPh>
		if(!is_oke(&ret)){
 800bb62:	a802      	add	r0, sp, #8
 800bb64:	f7ff fa9c 	bl	800b0a0 <is_oke>
 800bb68:	b150      	cbz	r0, 800bb80 <_Z17wifi_uart_handler13usart_event_tPv+0x34>
		wifiif_get_break_data(rxdata);
 800bb6a:	9801      	ldr	r0, [sp, #4]
 800bb6c:	f7fa fba0 	bl	80062b0 <wifiif_get_break_data>
		usart1->receive_to_idle_start_it(WIFIIF_BUFF_SIZE);
 800bb70:	6821      	ldr	r1, [r4, #0]
 800bb72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bb76:	a804      	add	r0, sp, #16
 800bb78:	f7fe f9ca 	bl	8009f10 <_ZN5usart24receive_to_idle_start_itEt>
}
 800bb7c:	b006      	add	sp, #24
 800bb7e:	bd10      	pop	{r4, pc}
			LOG_ERROR(TAG, "Can't get UART data.");
 800bb80:	4903      	ldr	r1, [pc, #12]	; (800bb90 <_Z17wifi_uart_handler13usart_event_tPv+0x44>)
 800bb82:	4804      	ldr	r0, [pc, #16]	; (800bb94 <_Z17wifi_uart_handler13usart_event_tPv+0x48>)
 800bb84:	f7ff f914 	bl	800adb0 <LOG_ERROR>
			return;
 800bb88:	e7f8      	b.n	800bb7c <_Z17wifi_uart_handler13usart_event_tPv+0x30>
 800bb8a:	bf00      	nop
 800bb8c:	20000090 	.word	0x20000090
 800bb90:	08012184 	.word	0x08012184
 800bb94:	08012124 	.word	0x08012124

0800bb98 <_Z17task_wifiif_startPv>:
void task_wifiif_start(void *){
 800bb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	usart1->init(&wifiif_uart_conf);
 800bb9c:	4c52      	ldr	r4, [pc, #328]	; (800bce8 <_Z17task_wifiif_startPv+0x150>)
 800bb9e:	4a53      	ldr	r2, [pc, #332]	; (800bcec <_Z17task_wifiif_startPv+0x154>)
 800bba0:	6821      	ldr	r1, [r4, #0]
 800bba2:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800bd24 <_Z17task_wifiif_startPv+0x18c>
 800bba6:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800bd28 <_Z17task_wifiif_startPv+0x190>
 800bbaa:	4f51      	ldr	r7, [pc, #324]	; (800bcf0 <_Z17task_wifiif_startPv+0x158>)
 800bbac:	4e51      	ldr	r6, [pc, #324]	; (800bcf4 <_Z17task_wifiif_startPv+0x15c>)
	LOG_ERROR(TAG, "Stopped LoRa and WiFi interface services.");
 800bbae:	f8df a17c 	ldr.w	sl, [pc, #380]	; 800bd2c <_Z17task_wifiif_startPv+0x194>
 800bbb2:	4d51      	ldr	r5, [pc, #324]	; (800bcf8 <_Z17task_wifiif_startPv+0x160>)
void task_wifiif_start(void *){
 800bbb4:	b083      	sub	sp, #12
	usart1->init(&wifiif_uart_conf);
 800bbb6:	4668      	mov	r0, sp
 800bbb8:	f7fd ff5a 	bl	8009a70 <_ZN5usart4initEP14usart_config_t>
	usart1->register_event_handler(wifi_uart_handler, NULL);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	6821      	ldr	r1, [r4, #0]
 800bbc0:	4a4e      	ldr	r2, [pc, #312]	; (800bcfc <_Z17task_wifiif_startPv+0x164>)
 800bbc2:	4668      	mov	r0, sp
 800bbc4:	f7fe f94c 	bl	8009e60 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>
	usart1->receive_to_idle_start_it(WIFIIF_BUFF_SIZE);
 800bbc8:	6821      	ldr	r1, [r4, #0]
		gpio_set(GPIOB, 14);
 800bbca:	4c4d      	ldr	r4, [pc, #308]	; (800bd00 <_Z17task_wifiif_startPv+0x168>)
	usart1->receive_to_idle_start_it(WIFIIF_BUFF_SIZE);
 800bbcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800bbd0:	4668      	mov	r0, sp
 800bbd2:	f7fe f99d 	bl	8009f10 <_ZN5usart24receive_to_idle_start_itEt>
	wifiif_init(wifiif_uart_send_string);
 800bbd6:	484b      	ldr	r0, [pc, #300]	; (800bd04 <_Z17task_wifiif_startPv+0x16c>)
 800bbd8:	f7fa fb9c 	bl	8006314 <wifiif_init>
	wifiif_register_command_handler(wifiif_command_handler);
 800bbdc:	484a      	ldr	r0, [pc, #296]	; (800bd08 <_Z17task_wifiif_startPv+0x170>)
 800bbde:	f7fa fbaf 	bl	8006340 <wifiif_register_command_handler>
	wifiif_restart();
 800bbe2:	f7fa fbb3 	bl	800634c <wifiif_restart>
	LOG_ERROR(TAG, "Stopped LoRa and WiFi interface services.");
 800bbe6:	4651      	mov	r1, sl
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f7ff f8e1 	bl	800adb0 <LOG_ERROR>
	vTaskSuspend(h_task_loraif_receive_process);
 800bbee:	f8d9 0000 	ldr.w	r0, [r9]
 800bbf2:	f7f7 fa03 	bl	8002ffc <vTaskSuspend>
	vTaskSuspend(h_task_loraif_request_device_data);
 800bbf6:	f8d8 0000 	ldr.w	r0, [r8]
 800bbfa:	f7f7 f9ff 	bl	8002ffc <vTaskSuspend>
	vTaskSuspend(q_task_wifiif_get_device_data);
 800bbfe:	6838      	ldr	r0, [r7, #0]
 800bc00:	f7f7 f9fc 	bl	8002ffc <vTaskSuspend>
	xSemaphoreTake(s_lora_enable_recv, 5);
 800bc04:	2105      	movs	r1, #5
 800bc06:	6830      	ldr	r0, [r6, #0]
 800bc08:	f7f6 fb6c 	bl	80022e4 <xQueueSemaphoreTake>
		gpio_set(GPIOB, 14);
 800bc0c:	210e      	movs	r1, #14
 800bc0e:	4620      	mov	r0, r4
 800bc10:	f7fb fbb2 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800bc14:	2014      	movs	r0, #20
 800bc16:	f7f7 f997 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bc1a:	210e      	movs	r1, #14
 800bc1c:	4620      	mov	r0, r4
 800bc1e:	f7fb fbb3 	bl	8007388 <gpio_reset>
		vTaskDelay(idle_time);
 800bc22:	2001      	movs	r0, #1
 800bc24:	f7f7 f990 	bl	8002f48 <vTaskDelay>
	if(!wifiif_state_is_running()) wifiif_restart();
 800bc28:	f7fa fc36 	bl	8006498 <wifiif_state_is_running>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	d058      	beq.n	800bce2 <_Z17task_wifiif_startPv+0x14a>
	vTaskDelay(1000);
 800bc30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc34:	f7f7 f988 	bl	8002f48 <vTaskDelay>
	wifiif_connect((char *)"NTTAX", (char *)"66668888", (char *)"WIFI_AUTH_WPA2_PSK");
 800bc38:	4a34      	ldr	r2, [pc, #208]	; (800bd0c <_Z17task_wifiif_startPv+0x174>)
 800bc3a:	4935      	ldr	r1, [pc, #212]	; (800bd10 <_Z17task_wifiif_startPv+0x178>)
 800bc3c:	4835      	ldr	r0, [pc, #212]	; (800bd14 <_Z17task_wifiif_startPv+0x17c>)
 800bc3e:	f7fa fba9 	bl	8006394 <wifiif_connect>
	vTaskDelay(1000);
 800bc42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc46:	f7f7 f97f 	bl	8002f48 <vTaskDelay>
 800bc4a:	f04f 0b03 	mov.w	fp, #3
	while(wifiif_wificonnected() == false) {
 800bc4e:	f7fa fb95 	bl	800637c <wifiif_wificonnected>
 800bc52:	b970      	cbnz	r0, 800bc72 <_Z17task_wifiif_startPv+0xda>
		wifiif_checkconnect();
 800bc54:	f7fa fb8c 	bl	8006370 <wifiif_checkconnect>
		vTaskDelay(2000);
 800bc58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc5c:	f7f7 f974 	bl	8002f48 <vTaskDelay>
		if(reconn_num > 2) goto restart_wifi;
 800bc60:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800bc64:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800bc68:	d0bd      	beq.n	800bbe6 <_Z17task_wifiif_startPv+0x4e>
	while(wifiif_wificonnected() == false) {
 800bc6a:	f7fa fb87 	bl	800637c <wifiif_wificonnected>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d0f0      	beq.n	800bc54 <_Z17task_wifiif_startPv+0xbc>
	wifiif_state_running(true);
 800bc72:	2001      	movs	r0, #1
 800bc74:	f7fa fc0a 	bl	800648c <wifiif_state_running>
	vTaskDelay(1000);
 800bc78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc7c:	f7f7 f964 	bl	8002f48 <vTaskDelay>
	firebase_init((char *)"https://iotnhakho-default-rtdb.asia-southeast1.firebasedatabase.app/", NULL);
 800bc80:	2100      	movs	r1, #0
 800bc82:	4825      	ldr	r0, [pc, #148]	; (800bd18 <_Z17task_wifiif_startPv+0x180>)
 800bc84:	f7ff fc00 	bl	800b488 <firebase_init>
	vTaskDelay(1000);
 800bc88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bc8c:	f7f7 f95c 	bl	8002f48 <vTaskDelay>
	vTaskResume(h_task_loraif_receive_process);
 800bc90:	f8d9 0000 	ldr.w	r0, [r9]
 800bc94:	f7f7 fa2a 	bl	80030ec <vTaskResume>
	vTaskResume(h_task_loraif_request_device_data);
 800bc98:	f8d8 0000 	ldr.w	r0, [r8]
 800bc9c:	f7f7 fa26 	bl	80030ec <vTaskResume>
	vTaskResume(q_task_wifiif_get_device_data);
 800bca0:	6838      	ldr	r0, [r7, #0]
 800bca2:	f7f7 fa23 	bl	80030ec <vTaskResume>
	xSemaphoreGive(s_lora_enable_recv);
 800bca6:	2300      	movs	r3, #0
 800bca8:	4619      	mov	r1, r3
 800bcaa:	6830      	ldr	r0, [r6, #0]
 800bcac:	461a      	mov	r2, r3
 800bcae:	f7f5 ff23 	bl	8001af8 <xQueueGenericSend>
	LOG_INFO(TAG, "Started LoRa and WiFi interface services.");
 800bcb2:	491a      	ldr	r1, [pc, #104]	; (800bd1c <_Z17task_wifiif_startPv+0x184>)
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7fe ffff 	bl	800acb8 <LOG_INFO>
 800bcba:	e007      	b.n	800bccc <_Z17task_wifiif_startPv+0x134>
		if(wifiif_state_is_running() == false || wifiif_wificonnected() == false) {
 800bcbc:	f7fa fb5e 	bl	800637c <wifiif_wificonnected>
 800bcc0:	4603      	mov	r3, r0
		vTaskDelay(10000);
 800bcc2:	f242 7010 	movw	r0, #10000	; 0x2710
		if(wifiif_state_is_running() == false || wifiif_wificonnected() == false) {
 800bcc6:	b13b      	cbz	r3, 800bcd8 <_Z17task_wifiif_startPv+0x140>
		vTaskDelay(10000);
 800bcc8:	f7f7 f93e 	bl	8002f48 <vTaskDelay>
		wifiif_checkconnect();
 800bccc:	f7fa fb50 	bl	8006370 <wifiif_checkconnect>
		if(wifiif_state_is_running() == false || wifiif_wificonnected() == false) {
 800bcd0:	f7fa fbe2 	bl	8006498 <wifiif_state_is_running>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d1f1      	bne.n	800bcbc <_Z17task_wifiif_startPv+0x124>
			LOG_ERROR(TAG, "WiFi module error.");
 800bcd8:	4911      	ldr	r1, [pc, #68]	; (800bd20 <_Z17task_wifiif_startPv+0x188>)
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f7ff f868 	bl	800adb0 <LOG_ERROR>
			goto restart_wifi;
 800bce0:	e781      	b.n	800bbe6 <_Z17task_wifiif_startPv+0x4e>
	if(!wifiif_state_is_running()) wifiif_restart();
 800bce2:	f7fa fb33 	bl	800634c <wifiif_restart>
 800bce6:	e7a3      	b.n	800bc30 <_Z17task_wifiif_startPv+0x98>
 800bce8:	20000090 	.word	0x20000090
 800bcec:	20000184 	.word	0x20000184
 800bcf0:	2000ba68 	.word	0x2000ba68
 800bcf4:	2000ba6c 	.word	0x2000ba6c
 800bcf8:	08012124 	.word	0x08012124
 800bcfc:	0800bb4d 	.word	0x0800bb4d
 800bd00:	40020400 	.word	0x40020400
 800bd04:	0800ba55 	.word	0x0800ba55
 800bd08:	0800bd31 	.word	0x0800bd31
 800bd0c:	080121c8 	.word	0x080121c8
 800bd10:	080121dc 	.word	0x080121dc
 800bd14:	080121e8 	.word	0x080121e8
 800bd18:	080121f0 	.word	0x080121f0
 800bd1c:	08012238 	.word	0x08012238
 800bd20:	08011280 	.word	0x08011280
 800bd24:	2000ba30 	.word	0x2000ba30
 800bd28:	2000ba34 	.word	0x2000ba34
 800bd2c:	0801219c 	.word	0x0801219c

0800bd30 <_Z22wifiif_command_handler10wifi_cmd_tPv>:
void wifiif_command_handler(wifi_cmd_t cmd, void *param){
 800bd30:	b530      	push	{r4, r5, lr}
 800bd32:	460c      	mov	r4, r1
 800bd34:	b08b      	sub	sp, #44	; 0x2c
	switch(cmd){
 800bd36:	2810      	cmp	r0, #16
 800bd38:	d826      	bhi.n	800bd88 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x58>
 800bd3a:	e8df f000 	tbb	[pc, r0]
 800bd3e:	3c27      	.short	0x3c27
 800bd40:	255d4e43 	.word	0x255d4e43
 800bd44:	25252525 	.word	0x25252525
 800bd48:	25252525 	.word	0x25252525
 800bd4c:	2525      	.short	0x2525
 800bd4e:	09          	.byte	0x09
 800bd4f:	00          	.byte	0x00
			LOG_RET(TAG, "HTTP data: %s", resp_data);
 800bd50:	4948      	ldr	r1, [pc, #288]	; (800be74 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x144>)
 800bd52:	4849      	ldr	r0, [pc, #292]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
 800bd54:	4622      	mov	r2, r4
 800bd56:	f7ff f923 	bl	800afa0 <LOG_RET>
			pkt_json_t json, json_ctrl, json_sett;
 800bd5a:	2300      	movs	r3, #0
			err = json_get_object(resp_data, &json, (char *)"address");
 800bd5c:	4a47      	ldr	r2, [pc, #284]	; (800be7c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x14c>)
			pkt_json_t json, json_ctrl, json_sett;
 800bd5e:	9301      	str	r3, [sp, #4]
			err = json_get_object(resp_data, &json, (char *)"address");
 800bd60:	a901      	add	r1, sp, #4
 800bd62:	4620      	mov	r0, r4
			pkt_json_t json, json_ctrl, json_sett;
 800bd64:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800bd68:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800bd6c:	f88d 3008 	strb.w	r3, [sp, #8]
 800bd70:	f88d 3014 	strb.w	r3, [sp, #20]
 800bd74:	f88d 3020 	strb.w	r3, [sp, #32]
 800bd78:	9309      	str	r3, [sp, #36]	; 0x24
			err = json_get_object(resp_data, &json, (char *)"address");
 800bd7a:	f7f9 f819 	bl	8004db0 <json_get_object>
			if(err != PKT_ERR_OK){
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d048      	beq.n	800be14 <_Z22wifiif_command_handler10wifi_cmd_tPv+0xe4>
				json_release_object(&json);
 800bd82:	a801      	add	r0, sp, #4
 800bd84:	f7f9 f92c 	bl	8004fe0 <json_release_object>
}
 800bd88:	b00b      	add	sp, #44	; 0x2c
 800bd8a:	bd30      	pop	{r4, r5, pc}
			LOG_EVENT(TAG, "WIFI error.");
 800bd8c:	493c      	ldr	r1, [pc, #240]	; (800be80 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x150>)
 800bd8e:	483a      	ldr	r0, [pc, #232]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
 800bd90:	f7ff f8c8 	bl	800af24 <LOG_EVENT>
		gpio_set(GPIOB, 14);
 800bd94:	210e      	movs	r1, #14
 800bd96:	483b      	ldr	r0, [pc, #236]	; (800be84 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x154>)
 800bd98:	f7fb faee 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800bd9c:	2064      	movs	r0, #100	; 0x64
 800bd9e:	f7f7 f8d3 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bda2:	4838      	ldr	r0, [pc, #224]	; (800be84 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x154>)
 800bda4:	210e      	movs	r1, #14
 800bda6:	f7fb faef 	bl	8007388 <gpio_reset>
		vTaskDelay(idle_time);
 800bdaa:	2001      	movs	r0, #1
}
 800bdac:	b00b      	add	sp, #44	; 0x2c
 800bdae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		vTaskDelay(idle_time);
 800bdb2:	f7f7 b8c9 	b.w	8002f48 <vTaskDelay>
			LOG_ERROR(TAG, "wifi module restart.");
 800bdb6:	4934      	ldr	r1, [pc, #208]	; (800be88 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x158>)
 800bdb8:	482f      	ldr	r0, [pc, #188]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
}
 800bdba:	b00b      	add	sp, #44	; 0x2c
 800bdbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_ERROR(TAG, "wifi module restart.");
 800bdc0:	f7fe bff6 	b.w	800adb0 <LOG_ERROR>
			wifiif_state_running(true);
 800bdc4:	2001      	movs	r0, #1
 800bdc6:	f7fa fb61 	bl	800648c <wifiif_state_running>
			LOG_EVENT(TAG, "WiFi scan access point list: %s", resp_data);
 800bdca:	4930      	ldr	r1, [pc, #192]	; (800be8c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x15c>)
			LOG_EVENT(TAG, "WiFi connect state: %s", resp_data);
 800bdcc:	482a      	ldr	r0, [pc, #168]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
			LOG_EVENT(TAG, "WiFi scan access point list: %s", resp_data);
 800bdce:	4622      	mov	r2, r4
}
 800bdd0:	b00b      	add	sp, #44	; 0x2c
 800bdd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_EVENT(TAG, "WiFi connect state: %s", resp_data);
 800bdd6:	f7ff b8a5 	b.w	800af24 <LOG_EVENT>
			LOG_EVENT(TAG, "WiFi check connect state: %s", resp_data);
 800bdda:	4622      	mov	r2, r4
 800bddc:	492c      	ldr	r1, [pc, #176]	; (800be90 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x160>)
 800bdde:	4826      	ldr	r0, [pc, #152]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
 800bde0:	f7ff f8a0 	bl	800af24 <LOG_EVENT>
			LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800bde4:	f7ff fa36 	bl	800b254 <sys_get_free_heap_size>
 800bde8:	492a      	ldr	r1, [pc, #168]	; (800be94 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x164>)
 800bdea:	4602      	mov	r2, r0
 800bdec:	4822      	ldr	r0, [pc, #136]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
}
 800bdee:	b00b      	add	sp, #44	; 0x2c
 800bdf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800bdf4:	f7ff b858 	b.w	800aea8 <LOG_MEM>
			wifiif_state_running(true);
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	f7fa fb47 	bl	800648c <wifiif_state_running>
			wifiif_set_wificonnect_state(true);
 800bdfe:	2001      	movs	r0, #1
 800be00:	f7fa fac2 	bl	8006388 <wifiif_set_wificonnect_state>
			LOG_EVENT(TAG, "WiFi connect state: %s", resp_data);
 800be04:	4924      	ldr	r1, [pc, #144]	; (800be98 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x168>)
 800be06:	481c      	ldr	r0, [pc, #112]	; (800be78 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x148>)
 800be08:	4622      	mov	r2, r4
}
 800be0a:	b00b      	add	sp, #44	; 0x2c
 800be0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_EVENT(TAG, "WiFi connect state: %s", resp_data);
 800be10:	f7ff b888 	b.w	800af24 <LOG_EVENT>
			device_address = strtol(json.value, NULL, 16);
 800be14:	4601      	mov	r1, r0
 800be16:	2210      	movs	r2, #16
 800be18:	9803      	ldr	r0, [sp, #12]
 800be1a:	f002 f8ed 	bl	800dff8 <strtol>
 800be1e:	4605      	mov	r5, r0
			json_release_object(&json);
 800be20:	a801      	add	r0, sp, #4
 800be22:	f7f9 f8dd 	bl	8004fe0 <json_release_object>
			err = json_get_object(resp_data, &json_ctrl, (char *)"control");
 800be26:	4a1d      	ldr	r2, [pc, #116]	; (800be9c <_Z22wifiif_command_handler10wifi_cmd_tPv+0x16c>)
 800be28:	a904      	add	r1, sp, #16
 800be2a:	4620      	mov	r0, r4
 800be2c:	f7f8 ffc0 	bl	8004db0 <json_get_object>
			if(err != PKT_ERR_OK){
 800be30:	b9d8      	cbnz	r0, 800be6a <_Z22wifiif_command_handler10wifi_cmd_tPv+0x13a>
			err = json_get_object(resp_data, &json_sett, (char *)"settings");
 800be32:	4a1b      	ldr	r2, [pc, #108]	; (800bea0 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x170>)
 800be34:	4620      	mov	r0, r4
 800be36:	a907      	add	r1, sp, #28
 800be38:	f7f8 ffba 	bl	8004db0 <json_get_object>
			if(err != PKT_ERR_OK){
 800be3c:	b988      	cbnz	r0, 800be62 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x132>
			asprintf(&tx_data, "{\"control\":%s,\"settings\":%s}", json_ctrl.value, json_sett.value);
 800be3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be40:	9a06      	ldr	r2, [sp, #24]
 800be42:	4918      	ldr	r1, [pc, #96]	; (800bea4 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x174>)
 800be44:	4668      	mov	r0, sp
 800be46:	f000 fa1b 	bl	800c280 <asiprintf>
			loraif_send_request(device_address, LORA_UPDATE_DATA, tx_data, 1);
 800be4a:	9a00      	ldr	r2, [sp, #0]
 800be4c:	2301      	movs	r3, #1
 800be4e:	4628      	mov	r0, r5
 800be50:	2105      	movs	r1, #5
 800be52:	f7f8 fb6d 	bl	8004530 <loraif_send_request>
			free(tx_data);
 800be56:	9800      	ldr	r0, [sp, #0]
 800be58:	f000 fa6e 	bl	800c338 <free>
			json_release_object(&json_ctrl);
 800be5c:	a804      	add	r0, sp, #16
 800be5e:	f7f9 f8bf 	bl	8004fe0 <json_release_object>
			json_release_object(&json_sett);
 800be62:	a807      	add	r0, sp, #28
 800be64:	f7f9 f8bc 	bl	8004fe0 <json_release_object>
		break;
 800be68:	e78e      	b.n	800bd88 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x58>
				json_release_object(&json_ctrl);
 800be6a:	a804      	add	r0, sp, #16
 800be6c:	f7f9 f8b8 	bl	8004fe0 <json_release_object>
				break;
 800be70:	e78a      	b.n	800bd88 <_Z22wifiif_command_handler10wifi_cmd_tPv+0x58>
 800be72:	bf00      	nop
 800be74:	080122f4 	.word	0x080122f4
 800be78:	08012124 	.word	0x08012124
 800be7c:	08012304 	.word	0x08012304
 800be80:	080122b0 	.word	0x080122b0
 800be84:	40020400 	.word	0x40020400
 800be88:	08012264 	.word	0x08012264
 800be8c:	080122bc 	.word	0x080122bc
 800be90:	0801227c 	.word	0x0801227c
 800be94:	0801229c 	.word	0x0801229c
 800be98:	080122dc 	.word	0x080122dc
 800be9c:	0801230c 	.word	0x0801230c
 800bea0:	08012314 	.word	0x08012314
 800bea4:	08012320 	.word	0x08012320

0800bea8 <_Z20loraif_event_handler12lora_event_tmPc>:
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800bea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	vTaskSuspend(h_task_loraif_request_device_data);
 800beac:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 800c094 <_Z20loraif_event_handler12lora_event_tmPc+0x1ec>
	vTaskSuspend(q_task_wifiif_get_device_data);
 800beb0:	4f69      	ldr	r7, [pc, #420]	; (800c058 <_Z20loraif_event_handler12lora_event_tmPc+0x1b0>)
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800beb2:	b085      	sub	sp, #20
 800beb4:	4604      	mov	r4, r0
	vTaskSuspend(h_task_loraif_request_device_data);
 800beb6:	f8d8 0000 	ldr.w	r0, [r8]
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800beba:	4615      	mov	r5, r2
 800bebc:	460e      	mov	r6, r1
	vTaskSuspend(h_task_loraif_request_device_data);
 800bebe:	f7f7 f89d 	bl	8002ffc <vTaskSuspend>
	vTaskSuspend(q_task_wifiif_get_device_data);
 800bec2:	6838      	ldr	r0, [r7, #0]
 800bec4:	f7f7 f89a 	bl	8002ffc <vTaskSuspend>
	if(data != NULL) LOG_INFO(TAG, "%s  [packet RSSI = %d, RSSI = %d]", data, lora.packetRssi(), lora.rssi());
 800bec8:	b16d      	cbz	r5, 800bee6 <_Z20loraif_event_handler12lora_event_tmPc+0x3e>
 800beca:	4864      	ldr	r0, [pc, #400]	; (800c05c <_Z20loraif_event_handler12lora_event_tmPc+0x1b4>)
 800becc:	f7f9 fd96 	bl	80059fc <_ZN6sx127x10packetRssiEv>
 800bed0:	9003      	str	r0, [sp, #12]
 800bed2:	4862      	ldr	r0, [pc, #392]	; (800c05c <_Z20loraif_event_handler12lora_event_tmPc+0x1b4>)
 800bed4:	f7f9 fdc2 	bl	8005a5c <_ZN6sx127x4rssiEv>
 800bed8:	9b03      	ldr	r3, [sp, #12]
 800beda:	9000      	str	r0, [sp, #0]
 800bedc:	4960      	ldr	r1, [pc, #384]	; (800c060 <_Z20loraif_event_handler12lora_event_tmPc+0x1b8>)
 800bede:	4861      	ldr	r0, [pc, #388]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800bee0:	462a      	mov	r2, r5
 800bee2:	f7fe fee9 	bl	800acb8 <LOG_INFO>
	switch(event){
 800bee6:	2c08      	cmp	r4, #8
 800bee8:	d814      	bhi.n	800bf14 <_Z20loraif_event_handler12lora_event_tmPc+0x6c>
 800beea:	e8df f004 	tbb	[pc, r4]
 800beee:	1d18      	.short	0x1d18
 800bef0:	5a133e13 	.word	0x5a133e13
 800bef4:	8a5f      	.short	0x8a5f
 800bef6:	05          	.byte	0x05
 800bef7:	00          	.byte	0x00
			LOG_WARN(TAG, "LORA_DEVICE_NOT_RESPONSE");
 800bef8:	495b      	ldr	r1, [pc, #364]	; (800c068 <_Z20loraif_event_handler12lora_event_tmPc+0x1c0>)
 800befa:	485a      	ldr	r0, [pc, #360]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800befc:	f7fe ff1a 	bl	800ad34 <LOG_WARN>
	vTaskResume(h_task_loraif_request_device_data);
 800bf00:	f8d8 0000 	ldr.w	r0, [r8]
 800bf04:	f7f7 f8f2 	bl	80030ec <vTaskResume>
	vTaskResume(q_task_wifiif_get_device_data);
 800bf08:	6838      	ldr	r0, [r7, #0]
}
 800bf0a:	b005      	add	sp, #20
 800bf0c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	vTaskResume(q_task_wifiif_get_device_data);
 800bf10:	f7f7 b8ec 	b.w	80030ec <vTaskResume>
			LOG_EVENT(TAG, "LoRa other event.");
 800bf14:	4955      	ldr	r1, [pc, #340]	; (800c06c <_Z20loraif_event_handler12lora_event_tmPc+0x1c4>)
 800bf16:	4853      	ldr	r0, [pc, #332]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800bf18:	f7ff f804 	bl	800af24 <LOG_EVENT>
		break;
 800bf1c:	e7f0      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
			LOG_EVENT(TAG, "LORA_ERR");
 800bf1e:	4954      	ldr	r1, [pc, #336]	; (800c070 <_Z20loraif_event_handler12lora_event_tmPc+0x1c8>)
 800bf20:	4850      	ldr	r0, [pc, #320]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800bf22:	f7fe ffff 	bl	800af24 <LOG_EVENT>
		break;
 800bf26:	e7eb      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
			LOG_EVENT(TAG, "LORA_REQ_ADDRESS");
 800bf28:	4952      	ldr	r1, [pc, #328]	; (800c074 <_Z20loraif_event_handler12lora_event_tmPc+0x1cc>)
 800bf2a:	484e      	ldr	r0, [pc, #312]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800bf2c:	f7fe fffa 	bl	800af24 <LOG_EVENT>
		gpio_set(GPIOB, 14);
 800bf30:	210e      	movs	r1, #14
 800bf32:	4851      	ldr	r0, [pc, #324]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800bf34:	f7fb fa20 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800bf38:	2032      	movs	r0, #50	; 0x32
 800bf3a:	f7f7 f805 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bf3e:	210e      	movs	r1, #14
 800bf40:	484d      	ldr	r0, [pc, #308]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800bf42:	f7fb fa21 	bl	8007388 <gpio_reset>
		vTaskDelay(idle_time);
 800bf46:	2032      	movs	r0, #50	; 0x32
 800bf48:	f7f6 fffe 	bl	8002f48 <vTaskDelay>
		gpio_set(GPIOB, 14);
 800bf4c:	210e      	movs	r1, #14
 800bf4e:	484a      	ldr	r0, [pc, #296]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800bf50:	f7fb fa12 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800bf54:	2032      	movs	r0, #50	; 0x32
 800bf56:	f7f6 fff7 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bf5a:	4847      	ldr	r0, [pc, #284]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800bf5c:	210e      	movs	r1, #14
 800bf5e:	f7fb fa13 	bl	8007388 <gpio_reset>
		vTaskDelay(idle_time);
 800bf62:	2032      	movs	r0, #50	; 0x32
 800bf64:	f7f6 fff0 	bl	8002f48 <vTaskDelay>
	while(loop--){
 800bf68:	e7ca      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
			LOG_EVENT(TAG, "LORA_REQ_DATA");
 800bf6a:	483e      	ldr	r0, [pc, #248]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800bf6c:	4943      	ldr	r1, [pc, #268]	; (800c07c <_Z20loraif_event_handler12lora_event_tmPc+0x1d4>)
 800bf6e:	f7fe ffd9 	bl	800af24 <LOG_EVENT>
			if(loraif_isvalid_address(device_address))
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7f8 fad8 	bl	8004528 <loraif_isvalid_address>
 800bf78:	2800      	cmp	r0, #0
 800bf7a:	d062      	beq.n	800c042 <_Z20loraif_event_handler12lora_event_tmPc+0x19a>
				send_envdata_to_firebase(device_address, data);
 800bf7c:	4629      	mov	r1, r5
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f7ff fb54 	bl	800b62c <send_envdata_to_firebase>
		gpio_set(GPIOB, 14);
 800bf84:	483c      	ldr	r0, [pc, #240]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800bf86:	210e      	movs	r1, #14
 800bf88:	f7fb f9f6 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800bf8c:	2032      	movs	r0, #50	; 0x32
 800bf8e:	f7f6 ffdb 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bf92:	4839      	ldr	r0, [pc, #228]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800bf94:	210e      	movs	r1, #14
 800bf96:	f7fb f9f7 	bl	8007388 <gpio_reset>
		vTaskDelay(idle_time);
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	f7f6 ffd4 	bl	8002f48 <vTaskDelay>
	while(loop--){
 800bfa0:	e7ae      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
			LOG_EVENT(TAG, "LORA_UPDATE_DATA");
 800bfa2:	4937      	ldr	r1, [pc, #220]	; (800c080 <_Z20loraif_event_handler12lora_event_tmPc+0x1d8>)
 800bfa4:	482f      	ldr	r0, [pc, #188]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800bfa6:	f7fe ffbd 	bl	800af24 <LOG_EVENT>
		break;
 800bfaa:	e7a9      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800bfac:	4935      	ldr	r1, [pc, #212]	; (800c084 <_Z20loraif_event_handler12lora_event_tmPc+0x1dc>)
 800bfae:	482d      	ldr	r0, [pc, #180]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
		gpio_set(GPIOB, 14);
 800bfb0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800bfb4:	f7fe ffb6 	bl	800af24 <LOG_EVENT>
 800bfb8:	2403      	movs	r4, #3
		gpio_set(GPIOB, 14);
 800bfba:	210e      	movs	r1, #14
 800bfbc:	4648      	mov	r0, r9
 800bfbe:	f7fb f9db 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800bfc2:	2032      	movs	r0, #50	; 0x32
 800bfc4:	f7f6 ffc0 	bl	8002f48 <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800bfc8:	210e      	movs	r1, #14
 800bfca:	4648      	mov	r0, r9
 800bfcc:	f7fb f9dc 	bl	8007388 <gpio_reset>
		vTaskDelay(idle_time);
 800bfd0:	2032      	movs	r0, #50	; 0x32
 800bfd2:	f7f6 ffb9 	bl	8002f48 <vTaskDelay>
	while(loop--){
 800bfd6:	1e63      	subs	r3, r4, #1
 800bfd8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800bfdc:	d1ed      	bne.n	800bfba <_Z20loraif_event_handler12lora_event_tmPc+0x112>
			if(loraif_isvalid_address(device_address)){
 800bfde:	4630      	mov	r0, r6
 800bfe0:	f7f8 faa2 	bl	8004528 <loraif_isvalid_address>
 800bfe4:	b340      	cbz	r0, 800c038 <_Z20loraif_event_handler12lora_event_tmPc+0x190>
				dev_struct_t *dev = add_device_properties(device_address, data);
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	4630      	mov	r0, r6
 800bfea:	f7ff f97f 	bl	800b2ec <add_device_properties>
 800bfee:	4604      	mov	r4, r0
				loraif_add_device(device_address, data, dev);
 800bff0:	4629      	mov	r1, r5
 800bff2:	4630      	mov	r0, r6
 800bff4:	4622      	mov	r2, r4
 800bff6:	f7f8 fe13 	bl	8004c20 <loraif_add_device>
				firebase_new_device(dev);
 800bffa:	4620      	mov	r0, r4
 800bffc:	f7ff fa7c 	bl	800b4f8 <firebase_new_device>
 800c000:	e77e      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
			LOG_WARN(TAG, "LORA_REMOVE_DEVICE");
 800c002:	4818      	ldr	r0, [pc, #96]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800c004:	4920      	ldr	r1, [pc, #128]	; (800c088 <_Z20loraif_event_handler12lora_event_tmPc+0x1e0>)
 800c006:	f7fe fe95 	bl	800ad34 <LOG_WARN>
			if(loraif_isvalid_address(device_address)){
 800c00a:	4630      	mov	r0, r6
 800c00c:	f7f8 fa8c 	bl	8004528 <loraif_isvalid_address>
 800c010:	b190      	cbz	r0, 800c038 <_Z20loraif_event_handler12lora_event_tmPc+0x190>
				dev_struct_t *dev = select_device_properties(device_address);
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff fa08 	bl	800b428 <select_device_properties>
				if(dev != NULL) firebase_remove_device(dev);
 800c018:	b1c0      	cbz	r0, 800c04c <_Z20loraif_event_handler12lora_event_tmPc+0x1a4>
 800c01a:	f7ff fad5 	bl	800b5c8 <firebase_remove_device>
				remove_device_properties(device_address);
 800c01e:	4630      	mov	r0, r6
 800c020:	f7ff f9b0 	bl	800b384 <remove_device_properties>
				loraif_remove_device(device_address);
 800c024:	4630      	mov	r0, r6
 800c026:	f7f8 fe4d 	bl	8004cc4 <loraif_remove_device>
		gpio_set(GPIOB, 14);
 800c02a:	4813      	ldr	r0, [pc, #76]	; (800c078 <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800c02c:	210e      	movs	r1, #14
 800c02e:	f7fb f9a3 	bl	8007378 <gpio_set>
		vTaskDelay(active_time);
 800c032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c036:	e7aa      	b.n	800bf8e <_Z20loraif_event_handler12lora_event_tmPc+0xe6>
				LOG_ERROR(TAG, "Event device address invalid.");
 800c038:	4914      	ldr	r1, [pc, #80]	; (800c08c <_Z20loraif_event_handler12lora_event_tmPc+0x1e4>)
 800c03a:	480a      	ldr	r0, [pc, #40]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800c03c:	f7fe feb8 	bl	800adb0 <LOG_ERROR>
 800c040:	e75e      	b.n	800bf00 <_Z20loraif_event_handler12lora_event_tmPc+0x58>
				LOG_ERROR(TAG, "Event device address invalid.");
 800c042:	4912      	ldr	r1, [pc, #72]	; (800c08c <_Z20loraif_event_handler12lora_event_tmPc+0x1e4>)
 800c044:	4807      	ldr	r0, [pc, #28]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800c046:	f7fe feb3 	bl	800adb0 <LOG_ERROR>
 800c04a:	e79b      	b.n	800bf84 <_Z20loraif_event_handler12lora_event_tmPc+0xdc>
				else LOG_ERROR(TAG, "Event device error.");
 800c04c:	4910      	ldr	r1, [pc, #64]	; (800c090 <_Z20loraif_event_handler12lora_event_tmPc+0x1e8>)
 800c04e:	4805      	ldr	r0, [pc, #20]	; (800c064 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800c050:	f7fe feae 	bl	800adb0 <LOG_ERROR>
 800c054:	e7e3      	b.n	800c01e <_Z20loraif_event_handler12lora_event_tmPc+0x176>
 800c056:	bf00      	nop
 800c058:	2000ba68 	.word	0x2000ba68
 800c05c:	2000ba38 	.word	0x2000ba38
 800c060:	08012340 	.word	0x08012340
 800c064:	08012124 	.word	0x08012124
 800c068:	08011110 	.word	0x08011110
 800c06c:	08012398 	.word	0x08012398
 800c070:	08011084 	.word	0x08011084
 800c074:	08011090 	.word	0x08011090
 800c078:	40020400 	.word	0x40020400
 800c07c:	080110b8 	.word	0x080110b8
 800c080:	080110d8 	.word	0x080110d8
 800c084:	080110ec 	.word	0x080110ec
 800c088:	080110fc 	.word	0x080110fc
 800c08c:	08012364 	.word	0x08012364
 800c090:	08012384 	.word	0x08012384
 800c094:	2000ba34 	.word	0x2000ba34

0800c098 <_Z8app_mainv>:
void app_main(void){
 800c098:	b500      	push	{lr}
 800c09a:	b083      	sub	sp, #12
	HAL_Driver_Init();
 800c09c:	f7f4 ffcc 	bl	8001038 <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOB);
 800c0a0:	4823      	ldr	r0, [pc, #140]	; (800c130 <_Z8app_mainv+0x98>)
	xTaskCreate(task_loraif_receive_process,     "task_loraif_receive_process",     byte_to_word(8192), NULL, 15, &h_task_loraif_receive_process);
 800c0a2:	4c24      	ldr	r4, [pc, #144]	; (800c134 <_Z8app_mainv+0x9c>)
	gpio_port_clock_enable(GPIOB);
 800c0a4:	f7fb f820 	bl	80070e8 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOC);
 800c0a8:	4823      	ldr	r0, [pc, #140]	; (800c138 <_Z8app_mainv+0xa0>)
 800c0aa:	f7fb f81d 	bl	80070e8 <gpio_port_clock_enable>
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 800c0ae:	4822      	ldr	r0, [pc, #136]	; (800c138 <_Z8app_mainv+0xa0>)
 800c0b0:	2207      	movs	r2, #7
 800c0b2:	210d      	movs	r1, #13
 800c0b4:	f7fb f87e 	bl	80071b4 <gpio_set_mode>
	gpio_set_mode(GPIOB, 14, GPIO_OUTPUT_PUSHPULL);
 800c0b8:	2207      	movs	r2, #7
 800c0ba:	210e      	movs	r1, #14
 800c0bc:	481c      	ldr	r0, [pc, #112]	; (800c130 <_Z8app_mainv+0x98>)
 800c0be:	f7fb f879 	bl	80071b4 <gpio_set_mode>
	register_exception_handler(exception_handler);
 800c0c2:	481e      	ldr	r0, [pc, #120]	; (800c13c <_Z8app_mainv+0xa4>)
 800c0c4:	f7ff f8f4 	bl	800b2b0 <register_exception_handler>
	xTaskCreate(task_loraif_receive_process,     "task_loraif_receive_process",     byte_to_word(8192), NULL, 15, &h_task_loraif_receive_process);
 800c0c8:	200f      	movs	r0, #15
 800c0ca:	e9cd 0400 	strd	r0, r4, [sp]
 800c0ce:	491c      	ldr	r1, [pc, #112]	; (800c140 <_Z8app_mainv+0xa8>)
	xTaskCreate(task_loraif_request_device_data, "task_loraif_request_device_data", byte_to_word(4096), NULL, 5,  &h_task_loraif_request_device_data);
 800c0d0:	4c1c      	ldr	r4, [pc, #112]	; (800c144 <_Z8app_mainv+0xac>)
	xTaskCreate(task_loraif_receive_process,     "task_loraif_receive_process",     byte_to_word(8192), NULL, 15, &h_task_loraif_receive_process);
 800c0d2:	481d      	ldr	r0, [pc, #116]	; (800c148 <_Z8app_mainv+0xb0>)
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c0da:	f7f6 fe81 	bl	8002de0 <xTaskCreate>
	xTaskCreate(task_loraif_request_device_data, "task_loraif_request_device_data", byte_to_word(4096), NULL, 5,  &h_task_loraif_request_device_data);
 800c0de:	2005      	movs	r0, #5
 800c0e0:	e9cd 0400 	strd	r0, r4, [sp]
 800c0e4:	4919      	ldr	r1, [pc, #100]	; (800c14c <_Z8app_mainv+0xb4>)
 800c0e6:	481a      	ldr	r0, [pc, #104]	; (800c150 <_Z8app_mainv+0xb8>)
	xTaskCreate(task_wifiif_get_device_data,     "task_wifiif_get_device_data",     byte_to_word(4096), NULL, 6,  &q_task_wifiif_get_device_data);
 800c0e8:	4c1a      	ldr	r4, [pc, #104]	; (800c154 <_Z8app_mainv+0xbc>)
	xTaskCreate(task_loraif_request_device_data, "task_loraif_request_device_data", byte_to_word(4096), NULL, 5,  &h_task_loraif_request_device_data);
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0f0:	f7f6 fe76 	bl	8002de0 <xTaskCreate>
	xTaskCreate(task_wifiif_start,               "task_wifiif_start",               byte_to_word(4096), NULL, 2, NULL);
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	2002      	movs	r0, #2
 800c0f8:	e9cd 0300 	strd	r0, r3, [sp]
 800c0fc:	4916      	ldr	r1, [pc, #88]	; (800c158 <_Z8app_mainv+0xc0>)
 800c0fe:	4817      	ldr	r0, [pc, #92]	; (800c15c <_Z8app_mainv+0xc4>)
 800c100:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c104:	f7f6 fe6c 	bl	8002de0 <xTaskCreate>
	xTaskCreate(task_wifiif_get_device_data,     "task_wifiif_get_device_data",     byte_to_word(4096), NULL, 6,  &q_task_wifiif_get_device_data);
 800c108:	2206      	movs	r2, #6
 800c10a:	e9cd 2400 	strd	r2, r4, [sp]
 800c10e:	4914      	ldr	r1, [pc, #80]	; (800c160 <_Z8app_mainv+0xc8>)
 800c110:	4814      	ldr	r0, [pc, #80]	; (800c164 <_Z8app_mainv+0xcc>)
		gpio_toggle(GPIOC, 13);
 800c112:	4c09      	ldr	r4, [pc, #36]	; (800c138 <_Z8app_mainv+0xa0>)
	xTaskCreate(task_wifiif_get_device_data,     "task_wifiif_get_device_data",     byte_to_word(4096), NULL, 6,  &q_task_wifiif_get_device_data);
 800c114:	2300      	movs	r3, #0
 800c116:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c11a:	f7f6 fe61 	bl	8002de0 <xTaskCreate>
		gpio_toggle(GPIOC, 13);
 800c11e:	4620      	mov	r0, r4
 800c120:	210d      	movs	r1, #13
 800c122:	f7fb f939 	bl	8007398 <gpio_toggle>
		vTaskDelay(100);
 800c126:	2064      	movs	r0, #100	; 0x64
 800c128:	f7f6 ff0e 	bl	8002f48 <vTaskDelay>
	while(1){
 800c12c:	e7f7      	b.n	800c11e <_Z8app_mainv+0x86>
 800c12e:	bf00      	nop
 800c130:	40020400 	.word	0x40020400
 800c134:	2000ba30 	.word	0x2000ba30
 800c138:	40020800 	.word	0x40020800
 800c13c:	0800b84d 	.word	0x0800b84d
 800c140:	080123ac 	.word	0x080123ac
 800c144:	2000ba34 	.word	0x2000ba34
 800c148:	0800b859 	.word	0x0800b859
 800c14c:	080123c8 	.word	0x080123c8
 800c150:	0800b919 	.word	0x0800b919
 800c154:	2000ba68 	.word	0x2000ba68
 800c158:	080123e8 	.word	0x080123e8
 800c15c:	0800bb99 	.word	0x0800bb99
 800c160:	080123fc 	.word	0x080123fc
 800c164:	0800b9c5 	.word	0x0800b9c5

0800c168 <_GLOBAL__sub_I_lora_spi_conf>:
}
 800c168:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800c16a:	4908      	ldr	r1, [pc, #32]	; (800c18c <_GLOBAL__sub_I_lora_spi_conf+0x24>)
 800c16c:	4b08      	ldr	r3, [pc, #32]	; (800c190 <_GLOBAL__sub_I_lora_spi_conf+0x28>)
}
 800c16e:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800c170:	2000      	movs	r0, #0
 800c172:	2203      	movs	r2, #3
 800c174:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c178:	9200      	str	r2, [sp, #0]
 800c17a:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800c17e:	2206      	movs	r2, #6
 800c180:	4804      	ldr	r0, [pc, #16]	; (800c194 <_GLOBAL__sub_I_lora_spi_conf+0x2c>)
 800c182:	f7f8 ffc3 	bl	800510c <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 800c186:	b005      	add	sp, #20
 800c188:	f85d fb04 	ldr.w	pc, [sp], #4
 800c18c:	40020000 	.word	0x40020000
 800c190:	40021000 	.word	0x40021000
 800c194:	2000ba38 	.word	0x2000ba38

0800c198 <_ZdlPvj>:
 800c198:	f000 b81d 	b.w	800c1d6 <_ZdlPv>

0800c19c <_Znwj>:
 800c19c:	2801      	cmp	r0, #1
 800c19e:	bf38      	it	cc
 800c1a0:	2001      	movcc	r0, #1
 800c1a2:	b510      	push	{r4, lr}
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f000 f8be 	bl	800c328 <malloc>
 800c1ac:	b930      	cbnz	r0, 800c1bc <_Znwj+0x20>
 800c1ae:	f000 f815 	bl	800c1dc <_ZSt15get_new_handlerv>
 800c1b2:	b908      	cbnz	r0, 800c1b8 <_Znwj+0x1c>
 800c1b4:	f000 f85c 	bl	800c270 <abort>
 800c1b8:	4780      	blx	r0
 800c1ba:	e7f4      	b.n	800c1a6 <_Znwj+0xa>
 800c1bc:	bd10      	pop	{r4, pc}

0800c1be <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800c1be:	684b      	ldr	r3, [r1, #4]
 800c1c0:	6043      	str	r3, [r0, #4]
 800c1c2:	684b      	ldr	r3, [r1, #4]
 800c1c4:	6001      	str	r1, [r0, #0]
 800c1c6:	6018      	str	r0, [r3, #0]
 800c1c8:	6048      	str	r0, [r1, #4]
 800c1ca:	4770      	bx	lr

0800c1cc <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800c1cc:	e9d0 3200 	ldrd	r3, r2, [r0]
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	605a      	str	r2, [r3, #4]
 800c1d4:	4770      	bx	lr

0800c1d6 <_ZdlPv>:
 800c1d6:	f000 b8af 	b.w	800c338 <free>
	...

0800c1dc <_ZSt15get_new_handlerv>:
 800c1dc:	4b02      	ldr	r3, [pc, #8]	; (800c1e8 <_ZSt15get_new_handlerv+0xc>)
 800c1de:	6818      	ldr	r0, [r3, #0]
 800c1e0:	f3bf 8f5b 	dmb	ish
 800c1e4:	4770      	bx	lr
 800c1e6:	bf00      	nop
 800c1e8:	2000ba70 	.word	0x2000ba70

0800c1ec <ceilf>:
 800c1ec:	ee10 3a10 	vmov	r3, s0
 800c1f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1f4:	3a7f      	subs	r2, #127	; 0x7f
 800c1f6:	2a16      	cmp	r2, #22
 800c1f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c1fc:	dc2a      	bgt.n	800c254 <ceilf+0x68>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	da11      	bge.n	800c226 <ceilf+0x3a>
 800c202:	eddf 7a19 	vldr	s15, [pc, #100]	; 800c268 <ceilf+0x7c>
 800c206:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c20a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	dd05      	ble.n	800c220 <ceilf+0x34>
 800c214:	2b00      	cmp	r3, #0
 800c216:	db23      	blt.n	800c260 <ceilf+0x74>
 800c218:	2900      	cmp	r1, #0
 800c21a:	bf18      	it	ne
 800c21c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800c220:	ee00 3a10 	vmov	s0, r3
 800c224:	4770      	bx	lr
 800c226:	4911      	ldr	r1, [pc, #68]	; (800c26c <ceilf+0x80>)
 800c228:	4111      	asrs	r1, r2
 800c22a:	420b      	tst	r3, r1
 800c22c:	d0fa      	beq.n	800c224 <ceilf+0x38>
 800c22e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800c268 <ceilf+0x7c>
 800c232:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c236:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c23a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23e:	ddef      	ble.n	800c220 <ceilf+0x34>
 800c240:	2b00      	cmp	r3, #0
 800c242:	bfc2      	ittt	gt
 800c244:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800c248:	fa40 f202 	asrgt.w	r2, r0, r2
 800c24c:	189b      	addgt	r3, r3, r2
 800c24e:	ea23 0301 	bic.w	r3, r3, r1
 800c252:	e7e5      	b.n	800c220 <ceilf+0x34>
 800c254:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c258:	d3e4      	bcc.n	800c224 <ceilf+0x38>
 800c25a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c25e:	4770      	bx	lr
 800c260:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c264:	e7dc      	b.n	800c220 <ceilf+0x34>
 800c266:	bf00      	nop
 800c268:	7149f2ca 	.word	0x7149f2ca
 800c26c:	007fffff 	.word	0x007fffff

0800c270 <abort>:
 800c270:	b508      	push	{r3, lr}
 800c272:	2006      	movs	r0, #6
 800c274:	f000 ffca 	bl	800d20c <raise>
 800c278:	2001      	movs	r0, #1
 800c27a:	f7f4 ff7d 	bl	8001178 <_exit>
	...

0800c280 <asiprintf>:
 800c280:	b40e      	push	{r1, r2, r3}
 800c282:	b530      	push	{r4, r5, lr}
 800c284:	b09c      	sub	sp, #112	; 0x70
 800c286:	ab1f      	add	r3, sp, #124	; 0x7c
 800c288:	4605      	mov	r5, r0
 800c28a:	490d      	ldr	r1, [pc, #52]	; (800c2c0 <asiprintf+0x40>)
 800c28c:	480d      	ldr	r0, [pc, #52]	; (800c2c4 <asiprintf+0x44>)
 800c28e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c292:	6800      	ldr	r0, [r0, #0]
 800c294:	9301      	str	r3, [sp, #4]
 800c296:	2400      	movs	r4, #0
 800c298:	e9cd 1405 	strd	r1, r4, [sp, #20]
 800c29c:	a902      	add	r1, sp, #8
 800c29e:	9402      	str	r4, [sp, #8]
 800c2a0:	9404      	str	r4, [sp, #16]
 800c2a2:	9407      	str	r4, [sp, #28]
 800c2a4:	f000 fa10 	bl	800c6c8 <_svfiprintf_r>
 800c2a8:	2800      	cmp	r0, #0
 800c2aa:	bfa1      	itttt	ge
 800c2ac:	9b02      	ldrge	r3, [sp, #8]
 800c2ae:	701c      	strbge	r4, [r3, #0]
 800c2b0:	9b06      	ldrge	r3, [sp, #24]
 800c2b2:	602b      	strge	r3, [r5, #0]
 800c2b4:	b01c      	add	sp, #112	; 0x70
 800c2b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2ba:	b003      	add	sp, #12
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	ffff0288 	.word	0xffff0288
 800c2c4:	200001a8 	.word	0x200001a8

0800c2c8 <atof>:
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	f001 be07 	b.w	800dedc <strtod>
	...

0800c2d0 <calloc>:
 800c2d0:	4b02      	ldr	r3, [pc, #8]	; (800c2dc <calloc+0xc>)
 800c2d2:	460a      	mov	r2, r1
 800c2d4:	4601      	mov	r1, r0
 800c2d6:	6818      	ldr	r0, [r3, #0]
 800c2d8:	f000 b870 	b.w	800c3bc <_calloc_r>
 800c2dc:	200001a8 	.word	0x200001a8

0800c2e0 <__libc_init_array>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	4d0d      	ldr	r5, [pc, #52]	; (800c318 <__libc_init_array+0x38>)
 800c2e4:	4c0d      	ldr	r4, [pc, #52]	; (800c31c <__libc_init_array+0x3c>)
 800c2e6:	1b64      	subs	r4, r4, r5
 800c2e8:	10a4      	asrs	r4, r4, #2
 800c2ea:	2600      	movs	r6, #0
 800c2ec:	42a6      	cmp	r6, r4
 800c2ee:	d109      	bne.n	800c304 <__libc_init_array+0x24>
 800c2f0:	4d0b      	ldr	r5, [pc, #44]	; (800c320 <__libc_init_array+0x40>)
 800c2f2:	4c0c      	ldr	r4, [pc, #48]	; (800c324 <__libc_init_array+0x44>)
 800c2f4:	f004 faee 	bl	80108d4 <_init>
 800c2f8:	1b64      	subs	r4, r4, r5
 800c2fa:	10a4      	asrs	r4, r4, #2
 800c2fc:	2600      	movs	r6, #0
 800c2fe:	42a6      	cmp	r6, r4
 800c300:	d105      	bne.n	800c30e <__libc_init_array+0x2e>
 800c302:	bd70      	pop	{r4, r5, r6, pc}
 800c304:	f855 3b04 	ldr.w	r3, [r5], #4
 800c308:	4798      	blx	r3
 800c30a:	3601      	adds	r6, #1
 800c30c:	e7ee      	b.n	800c2ec <__libc_init_array+0xc>
 800c30e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c312:	4798      	blx	r3
 800c314:	3601      	adds	r6, #1
 800c316:	e7f2      	b.n	800c2fe <__libc_init_array+0x1e>
 800c318:	080128c4 	.word	0x080128c4
 800c31c:	080128c4 	.word	0x080128c4
 800c320:	080128c4 	.word	0x080128c4
 800c324:	080128f0 	.word	0x080128f0

0800c328 <malloc>:
 800c328:	4b02      	ldr	r3, [pc, #8]	; (800c334 <malloc+0xc>)
 800c32a:	4601      	mov	r1, r0
 800c32c:	6818      	ldr	r0, [r3, #0]
 800c32e:	f000 b8fb 	b.w	800c528 <_malloc_r>
 800c332:	bf00      	nop
 800c334:	200001a8 	.word	0x200001a8

0800c338 <free>:
 800c338:	4b02      	ldr	r3, [pc, #8]	; (800c344 <free+0xc>)
 800c33a:	4601      	mov	r1, r0
 800c33c:	6818      	ldr	r0, [r3, #0]
 800c33e:	f000 b853 	b.w	800c3e8 <_free_r>
 800c342:	bf00      	nop
 800c344:	200001a8 	.word	0x200001a8

0800c348 <memcpy>:
 800c348:	440a      	add	r2, r1
 800c34a:	4291      	cmp	r1, r2
 800c34c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c350:	d100      	bne.n	800c354 <memcpy+0xc>
 800c352:	4770      	bx	lr
 800c354:	b510      	push	{r4, lr}
 800c356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c35a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c35e:	4291      	cmp	r1, r2
 800c360:	d1f9      	bne.n	800c356 <memcpy+0xe>
 800c362:	bd10      	pop	{r4, pc}

0800c364 <memmove>:
 800c364:	4288      	cmp	r0, r1
 800c366:	b510      	push	{r4, lr}
 800c368:	eb01 0402 	add.w	r4, r1, r2
 800c36c:	d902      	bls.n	800c374 <memmove+0x10>
 800c36e:	4284      	cmp	r4, r0
 800c370:	4623      	mov	r3, r4
 800c372:	d807      	bhi.n	800c384 <memmove+0x20>
 800c374:	1e43      	subs	r3, r0, #1
 800c376:	42a1      	cmp	r1, r4
 800c378:	d008      	beq.n	800c38c <memmove+0x28>
 800c37a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c37e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c382:	e7f8      	b.n	800c376 <memmove+0x12>
 800c384:	4402      	add	r2, r0
 800c386:	4601      	mov	r1, r0
 800c388:	428a      	cmp	r2, r1
 800c38a:	d100      	bne.n	800c38e <memmove+0x2a>
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c392:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c396:	e7f7      	b.n	800c388 <memmove+0x24>

0800c398 <memset>:
 800c398:	4402      	add	r2, r0
 800c39a:	4603      	mov	r3, r0
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d100      	bne.n	800c3a2 <memset+0xa>
 800c3a0:	4770      	bx	lr
 800c3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c3a6:	e7f9      	b.n	800c39c <memset+0x4>

0800c3a8 <mallinfo>:
 800c3a8:	b510      	push	{r4, lr}
 800c3aa:	4b03      	ldr	r3, [pc, #12]	; (800c3b8 <mallinfo+0x10>)
 800c3ac:	4604      	mov	r4, r0
 800c3ae:	6819      	ldr	r1, [r3, #0]
 800c3b0:	f000 f866 	bl	800c480 <_mallinfo_r>
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	bd10      	pop	{r4, pc}
 800c3b8:	200001a8 	.word	0x200001a8

0800c3bc <_calloc_r>:
 800c3bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3be:	fba1 2402 	umull	r2, r4, r1, r2
 800c3c2:	b94c      	cbnz	r4, 800c3d8 <_calloc_r+0x1c>
 800c3c4:	4611      	mov	r1, r2
 800c3c6:	9201      	str	r2, [sp, #4]
 800c3c8:	f000 f8ae 	bl	800c528 <_malloc_r>
 800c3cc:	9a01      	ldr	r2, [sp, #4]
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	b930      	cbnz	r0, 800c3e0 <_calloc_r+0x24>
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	b003      	add	sp, #12
 800c3d6:	bd30      	pop	{r4, r5, pc}
 800c3d8:	220c      	movs	r2, #12
 800c3da:	6002      	str	r2, [r0, #0]
 800c3dc:	2500      	movs	r5, #0
 800c3de:	e7f8      	b.n	800c3d2 <_calloc_r+0x16>
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	f7ff ffd9 	bl	800c398 <memset>
 800c3e6:	e7f4      	b.n	800c3d2 <_calloc_r+0x16>

0800c3e8 <_free_r>:
 800c3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ea:	2900      	cmp	r1, #0
 800c3ec:	d044      	beq.n	800c478 <_free_r+0x90>
 800c3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3f2:	9001      	str	r0, [sp, #4]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800c3fa:	bfb8      	it	lt
 800c3fc:	18e4      	addlt	r4, r4, r3
 800c3fe:	f003 f95f 	bl	800f6c0 <__malloc_lock>
 800c402:	4a1e      	ldr	r2, [pc, #120]	; (800c47c <_free_r+0x94>)
 800c404:	9801      	ldr	r0, [sp, #4]
 800c406:	6813      	ldr	r3, [r2, #0]
 800c408:	b933      	cbnz	r3, 800c418 <_free_r+0x30>
 800c40a:	6063      	str	r3, [r4, #4]
 800c40c:	6014      	str	r4, [r2, #0]
 800c40e:	b003      	add	sp, #12
 800c410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c414:	f003 b95a 	b.w	800f6cc <__malloc_unlock>
 800c418:	42a3      	cmp	r3, r4
 800c41a:	d908      	bls.n	800c42e <_free_r+0x46>
 800c41c:	6825      	ldr	r5, [r4, #0]
 800c41e:	1961      	adds	r1, r4, r5
 800c420:	428b      	cmp	r3, r1
 800c422:	bf01      	itttt	eq
 800c424:	6819      	ldreq	r1, [r3, #0]
 800c426:	685b      	ldreq	r3, [r3, #4]
 800c428:	1949      	addeq	r1, r1, r5
 800c42a:	6021      	streq	r1, [r4, #0]
 800c42c:	e7ed      	b.n	800c40a <_free_r+0x22>
 800c42e:	461a      	mov	r2, r3
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	b10b      	cbz	r3, 800c438 <_free_r+0x50>
 800c434:	42a3      	cmp	r3, r4
 800c436:	d9fa      	bls.n	800c42e <_free_r+0x46>
 800c438:	6811      	ldr	r1, [r2, #0]
 800c43a:	1855      	adds	r5, r2, r1
 800c43c:	42a5      	cmp	r5, r4
 800c43e:	d10b      	bne.n	800c458 <_free_r+0x70>
 800c440:	6824      	ldr	r4, [r4, #0]
 800c442:	4421      	add	r1, r4
 800c444:	1854      	adds	r4, r2, r1
 800c446:	42a3      	cmp	r3, r4
 800c448:	6011      	str	r1, [r2, #0]
 800c44a:	d1e0      	bne.n	800c40e <_free_r+0x26>
 800c44c:	681c      	ldr	r4, [r3, #0]
 800c44e:	685b      	ldr	r3, [r3, #4]
 800c450:	6053      	str	r3, [r2, #4]
 800c452:	4421      	add	r1, r4
 800c454:	6011      	str	r1, [r2, #0]
 800c456:	e7da      	b.n	800c40e <_free_r+0x26>
 800c458:	d902      	bls.n	800c460 <_free_r+0x78>
 800c45a:	230c      	movs	r3, #12
 800c45c:	6003      	str	r3, [r0, #0]
 800c45e:	e7d6      	b.n	800c40e <_free_r+0x26>
 800c460:	6825      	ldr	r5, [r4, #0]
 800c462:	1961      	adds	r1, r4, r5
 800c464:	428b      	cmp	r3, r1
 800c466:	bf04      	itt	eq
 800c468:	6819      	ldreq	r1, [r3, #0]
 800c46a:	685b      	ldreq	r3, [r3, #4]
 800c46c:	6063      	str	r3, [r4, #4]
 800c46e:	bf04      	itt	eq
 800c470:	1949      	addeq	r1, r1, r5
 800c472:	6021      	streq	r1, [r4, #0]
 800c474:	6054      	str	r4, [r2, #4]
 800c476:	e7ca      	b.n	800c40e <_free_r+0x26>
 800c478:	b003      	add	sp, #12
 800c47a:	bd30      	pop	{r4, r5, pc}
 800c47c:	2000ba9c 	.word	0x2000ba9c

0800c480 <_mallinfo_r>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	4c16      	ldr	r4, [pc, #88]	; (800c4dc <_mallinfo_r+0x5c>)
 800c484:	4605      	mov	r5, r0
 800c486:	4608      	mov	r0, r1
 800c488:	460e      	mov	r6, r1
 800c48a:	f003 f919 	bl	800f6c0 <__malloc_lock>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	b143      	cbz	r3, 800c4a4 <_mallinfo_r+0x24>
 800c492:	2100      	movs	r1, #0
 800c494:	4630      	mov	r0, r6
 800c496:	f000 fe81 	bl	800d19c <_sbrk_r>
 800c49a:	1c42      	adds	r2, r0, #1
 800c49c:	4603      	mov	r3, r0
 800c49e:	bf1c      	itt	ne
 800c4a0:	6820      	ldrne	r0, [r4, #0]
 800c4a2:	1a1b      	subne	r3, r3, r0
 800c4a4:	4a0e      	ldr	r2, [pc, #56]	; (800c4e0 <_mallinfo_r+0x60>)
 800c4a6:	6812      	ldr	r2, [r2, #0]
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	b992      	cbnz	r2, 800c4d2 <_mallinfo_r+0x52>
 800c4ac:	4c0d      	ldr	r4, [pc, #52]	; (800c4e4 <_mallinfo_r+0x64>)
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	6220      	str	r0, [r4, #32]
 800c4b2:	1a1b      	subs	r3, r3, r0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	61e3      	str	r3, [r4, #28]
 800c4b8:	f003 f908 	bl	800f6cc <__malloc_unlock>
 800c4bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4be:	462e      	mov	r6, r5
 800c4c0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c4c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c4c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c4ca:	e886 0003 	stmia.w	r6, {r0, r1}
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	bd70      	pop	{r4, r5, r6, pc}
 800c4d2:	6811      	ldr	r1, [r2, #0]
 800c4d4:	6852      	ldr	r2, [r2, #4]
 800c4d6:	4408      	add	r0, r1
 800c4d8:	e7e7      	b.n	800c4aa <_mallinfo_r+0x2a>
 800c4da:	bf00      	nop
 800c4dc:	2000baa0 	.word	0x2000baa0
 800c4e0:	2000ba9c 	.word	0x2000ba9c
 800c4e4:	2000ba74 	.word	0x2000ba74

0800c4e8 <sbrk_aligned>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	4e0e      	ldr	r6, [pc, #56]	; (800c524 <sbrk_aligned+0x3c>)
 800c4ec:	460c      	mov	r4, r1
 800c4ee:	6831      	ldr	r1, [r6, #0]
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	b911      	cbnz	r1, 800c4fa <sbrk_aligned+0x12>
 800c4f4:	f000 fe52 	bl	800d19c <_sbrk_r>
 800c4f8:	6030      	str	r0, [r6, #0]
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f000 fe4d 	bl	800d19c <_sbrk_r>
 800c502:	1c43      	adds	r3, r0, #1
 800c504:	d00a      	beq.n	800c51c <sbrk_aligned+0x34>
 800c506:	1cc4      	adds	r4, r0, #3
 800c508:	f024 0403 	bic.w	r4, r4, #3
 800c50c:	42a0      	cmp	r0, r4
 800c50e:	d007      	beq.n	800c520 <sbrk_aligned+0x38>
 800c510:	1a21      	subs	r1, r4, r0
 800c512:	4628      	mov	r0, r5
 800c514:	f000 fe42 	bl	800d19c <_sbrk_r>
 800c518:	3001      	adds	r0, #1
 800c51a:	d101      	bne.n	800c520 <sbrk_aligned+0x38>
 800c51c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c520:	4620      	mov	r0, r4
 800c522:	bd70      	pop	{r4, r5, r6, pc}
 800c524:	2000baa0 	.word	0x2000baa0

0800c528 <_malloc_r>:
 800c528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c52c:	1ccd      	adds	r5, r1, #3
 800c52e:	f025 0503 	bic.w	r5, r5, #3
 800c532:	3508      	adds	r5, #8
 800c534:	2d0c      	cmp	r5, #12
 800c536:	bf38      	it	cc
 800c538:	250c      	movcc	r5, #12
 800c53a:	2d00      	cmp	r5, #0
 800c53c:	4607      	mov	r7, r0
 800c53e:	db01      	blt.n	800c544 <_malloc_r+0x1c>
 800c540:	42a9      	cmp	r1, r5
 800c542:	d905      	bls.n	800c550 <_malloc_r+0x28>
 800c544:	230c      	movs	r3, #12
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	2600      	movs	r6, #0
 800c54a:	4630      	mov	r0, r6
 800c54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c550:	4e2e      	ldr	r6, [pc, #184]	; (800c60c <_malloc_r+0xe4>)
 800c552:	f003 f8b5 	bl	800f6c0 <__malloc_lock>
 800c556:	6833      	ldr	r3, [r6, #0]
 800c558:	461c      	mov	r4, r3
 800c55a:	bb34      	cbnz	r4, 800c5aa <_malloc_r+0x82>
 800c55c:	4629      	mov	r1, r5
 800c55e:	4638      	mov	r0, r7
 800c560:	f7ff ffc2 	bl	800c4e8 <sbrk_aligned>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	4604      	mov	r4, r0
 800c568:	d14d      	bne.n	800c606 <_malloc_r+0xde>
 800c56a:	6834      	ldr	r4, [r6, #0]
 800c56c:	4626      	mov	r6, r4
 800c56e:	2e00      	cmp	r6, #0
 800c570:	d140      	bne.n	800c5f4 <_malloc_r+0xcc>
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	4631      	mov	r1, r6
 800c576:	4638      	mov	r0, r7
 800c578:	eb04 0803 	add.w	r8, r4, r3
 800c57c:	f000 fe0e 	bl	800d19c <_sbrk_r>
 800c580:	4580      	cmp	r8, r0
 800c582:	d13a      	bne.n	800c5fa <_malloc_r+0xd2>
 800c584:	6821      	ldr	r1, [r4, #0]
 800c586:	3503      	adds	r5, #3
 800c588:	1a6d      	subs	r5, r5, r1
 800c58a:	f025 0503 	bic.w	r5, r5, #3
 800c58e:	3508      	adds	r5, #8
 800c590:	2d0c      	cmp	r5, #12
 800c592:	bf38      	it	cc
 800c594:	250c      	movcc	r5, #12
 800c596:	4629      	mov	r1, r5
 800c598:	4638      	mov	r0, r7
 800c59a:	f7ff ffa5 	bl	800c4e8 <sbrk_aligned>
 800c59e:	3001      	adds	r0, #1
 800c5a0:	d02b      	beq.n	800c5fa <_malloc_r+0xd2>
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	442b      	add	r3, r5
 800c5a6:	6023      	str	r3, [r4, #0]
 800c5a8:	e00e      	b.n	800c5c8 <_malloc_r+0xa0>
 800c5aa:	6822      	ldr	r2, [r4, #0]
 800c5ac:	1b52      	subs	r2, r2, r5
 800c5ae:	d41e      	bmi.n	800c5ee <_malloc_r+0xc6>
 800c5b0:	2a0b      	cmp	r2, #11
 800c5b2:	d916      	bls.n	800c5e2 <_malloc_r+0xba>
 800c5b4:	1961      	adds	r1, r4, r5
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	6025      	str	r5, [r4, #0]
 800c5ba:	bf18      	it	ne
 800c5bc:	6059      	strne	r1, [r3, #4]
 800c5be:	6863      	ldr	r3, [r4, #4]
 800c5c0:	bf08      	it	eq
 800c5c2:	6031      	streq	r1, [r6, #0]
 800c5c4:	5162      	str	r2, [r4, r5]
 800c5c6:	604b      	str	r3, [r1, #4]
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	f104 060b 	add.w	r6, r4, #11
 800c5ce:	f003 f87d 	bl	800f6cc <__malloc_unlock>
 800c5d2:	f026 0607 	bic.w	r6, r6, #7
 800c5d6:	1d23      	adds	r3, r4, #4
 800c5d8:	1af2      	subs	r2, r6, r3
 800c5da:	d0b6      	beq.n	800c54a <_malloc_r+0x22>
 800c5dc:	1b9b      	subs	r3, r3, r6
 800c5de:	50a3      	str	r3, [r4, r2]
 800c5e0:	e7b3      	b.n	800c54a <_malloc_r+0x22>
 800c5e2:	6862      	ldr	r2, [r4, #4]
 800c5e4:	42a3      	cmp	r3, r4
 800c5e6:	bf0c      	ite	eq
 800c5e8:	6032      	streq	r2, [r6, #0]
 800c5ea:	605a      	strne	r2, [r3, #4]
 800c5ec:	e7ec      	b.n	800c5c8 <_malloc_r+0xa0>
 800c5ee:	4623      	mov	r3, r4
 800c5f0:	6864      	ldr	r4, [r4, #4]
 800c5f2:	e7b2      	b.n	800c55a <_malloc_r+0x32>
 800c5f4:	4634      	mov	r4, r6
 800c5f6:	6876      	ldr	r6, [r6, #4]
 800c5f8:	e7b9      	b.n	800c56e <_malloc_r+0x46>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	603b      	str	r3, [r7, #0]
 800c5fe:	4638      	mov	r0, r7
 800c600:	f003 f864 	bl	800f6cc <__malloc_unlock>
 800c604:	e7a1      	b.n	800c54a <_malloc_r+0x22>
 800c606:	6025      	str	r5, [r4, #0]
 800c608:	e7de      	b.n	800c5c8 <_malloc_r+0xa0>
 800c60a:	bf00      	nop
 800c60c:	2000ba9c 	.word	0x2000ba9c

0800c610 <__ssputs_r>:
 800c610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c614:	688e      	ldr	r6, [r1, #8]
 800c616:	429e      	cmp	r6, r3
 800c618:	4682      	mov	sl, r0
 800c61a:	460c      	mov	r4, r1
 800c61c:	4690      	mov	r8, r2
 800c61e:	461f      	mov	r7, r3
 800c620:	d838      	bhi.n	800c694 <__ssputs_r+0x84>
 800c622:	898a      	ldrh	r2, [r1, #12]
 800c624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c628:	d032      	beq.n	800c690 <__ssputs_r+0x80>
 800c62a:	6825      	ldr	r5, [r4, #0]
 800c62c:	6909      	ldr	r1, [r1, #16]
 800c62e:	eba5 0901 	sub.w	r9, r5, r1
 800c632:	6965      	ldr	r5, [r4, #20]
 800c634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c63c:	3301      	adds	r3, #1
 800c63e:	444b      	add	r3, r9
 800c640:	106d      	asrs	r5, r5, #1
 800c642:	429d      	cmp	r5, r3
 800c644:	bf38      	it	cc
 800c646:	461d      	movcc	r5, r3
 800c648:	0553      	lsls	r3, r2, #21
 800c64a:	d531      	bpl.n	800c6b0 <__ssputs_r+0xa0>
 800c64c:	4629      	mov	r1, r5
 800c64e:	f7ff ff6b 	bl	800c528 <_malloc_r>
 800c652:	4606      	mov	r6, r0
 800c654:	b950      	cbnz	r0, 800c66c <__ssputs_r+0x5c>
 800c656:	230c      	movs	r3, #12
 800c658:	f8ca 3000 	str.w	r3, [sl]
 800c65c:	89a3      	ldrh	r3, [r4, #12]
 800c65e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c662:	81a3      	strh	r3, [r4, #12]
 800c664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66c:	6921      	ldr	r1, [r4, #16]
 800c66e:	464a      	mov	r2, r9
 800c670:	f7ff fe6a 	bl	800c348 <memcpy>
 800c674:	89a3      	ldrh	r3, [r4, #12]
 800c676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c67a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c67e:	81a3      	strh	r3, [r4, #12]
 800c680:	6126      	str	r6, [r4, #16]
 800c682:	6165      	str	r5, [r4, #20]
 800c684:	444e      	add	r6, r9
 800c686:	eba5 0509 	sub.w	r5, r5, r9
 800c68a:	6026      	str	r6, [r4, #0]
 800c68c:	60a5      	str	r5, [r4, #8]
 800c68e:	463e      	mov	r6, r7
 800c690:	42be      	cmp	r6, r7
 800c692:	d900      	bls.n	800c696 <__ssputs_r+0x86>
 800c694:	463e      	mov	r6, r7
 800c696:	6820      	ldr	r0, [r4, #0]
 800c698:	4632      	mov	r2, r6
 800c69a:	4641      	mov	r1, r8
 800c69c:	f7ff fe62 	bl	800c364 <memmove>
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	1b9b      	subs	r3, r3, r6
 800c6a4:	60a3      	str	r3, [r4, #8]
 800c6a6:	6823      	ldr	r3, [r4, #0]
 800c6a8:	4433      	add	r3, r6
 800c6aa:	6023      	str	r3, [r4, #0]
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e7db      	b.n	800c668 <__ssputs_r+0x58>
 800c6b0:	462a      	mov	r2, r5
 800c6b2:	f003 fcd2 	bl	801005a <_realloc_r>
 800c6b6:	4606      	mov	r6, r0
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d1e1      	bne.n	800c680 <__ssputs_r+0x70>
 800c6bc:	6921      	ldr	r1, [r4, #16]
 800c6be:	4650      	mov	r0, sl
 800c6c0:	f7ff fe92 	bl	800c3e8 <_free_r>
 800c6c4:	e7c7      	b.n	800c656 <__ssputs_r+0x46>
	...

0800c6c8 <_svfiprintf_r>:
 800c6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6cc:	4698      	mov	r8, r3
 800c6ce:	898b      	ldrh	r3, [r1, #12]
 800c6d0:	061b      	lsls	r3, r3, #24
 800c6d2:	b09d      	sub	sp, #116	; 0x74
 800c6d4:	4607      	mov	r7, r0
 800c6d6:	460d      	mov	r5, r1
 800c6d8:	4614      	mov	r4, r2
 800c6da:	d50e      	bpl.n	800c6fa <_svfiprintf_r+0x32>
 800c6dc:	690b      	ldr	r3, [r1, #16]
 800c6de:	b963      	cbnz	r3, 800c6fa <_svfiprintf_r+0x32>
 800c6e0:	2140      	movs	r1, #64	; 0x40
 800c6e2:	f7ff ff21 	bl	800c528 <_malloc_r>
 800c6e6:	6028      	str	r0, [r5, #0]
 800c6e8:	6128      	str	r0, [r5, #16]
 800c6ea:	b920      	cbnz	r0, 800c6f6 <_svfiprintf_r+0x2e>
 800c6ec:	230c      	movs	r3, #12
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6f4:	e0d1      	b.n	800c89a <_svfiprintf_r+0x1d2>
 800c6f6:	2340      	movs	r3, #64	; 0x40
 800c6f8:	616b      	str	r3, [r5, #20]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6fe:	2320      	movs	r3, #32
 800c700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c704:	f8cd 800c 	str.w	r8, [sp, #12]
 800c708:	2330      	movs	r3, #48	; 0x30
 800c70a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8b4 <_svfiprintf_r+0x1ec>
 800c70e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c712:	f04f 0901 	mov.w	r9, #1
 800c716:	4623      	mov	r3, r4
 800c718:	469a      	mov	sl, r3
 800c71a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c71e:	b10a      	cbz	r2, 800c724 <_svfiprintf_r+0x5c>
 800c720:	2a25      	cmp	r2, #37	; 0x25
 800c722:	d1f9      	bne.n	800c718 <_svfiprintf_r+0x50>
 800c724:	ebba 0b04 	subs.w	fp, sl, r4
 800c728:	d00b      	beq.n	800c742 <_svfiprintf_r+0x7a>
 800c72a:	465b      	mov	r3, fp
 800c72c:	4622      	mov	r2, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff ff6d 	bl	800c610 <__ssputs_r>
 800c736:	3001      	adds	r0, #1
 800c738:	f000 80aa 	beq.w	800c890 <_svfiprintf_r+0x1c8>
 800c73c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c73e:	445a      	add	r2, fp
 800c740:	9209      	str	r2, [sp, #36]	; 0x24
 800c742:	f89a 3000 	ldrb.w	r3, [sl]
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 80a2 	beq.w	800c890 <_svfiprintf_r+0x1c8>
 800c74c:	2300      	movs	r3, #0
 800c74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c756:	f10a 0a01 	add.w	sl, sl, #1
 800c75a:	9304      	str	r3, [sp, #16]
 800c75c:	9307      	str	r3, [sp, #28]
 800c75e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c762:	931a      	str	r3, [sp, #104]	; 0x68
 800c764:	4654      	mov	r4, sl
 800c766:	2205      	movs	r2, #5
 800c768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c76c:	4851      	ldr	r0, [pc, #324]	; (800c8b4 <_svfiprintf_r+0x1ec>)
 800c76e:	f7f3 fd57 	bl	8000220 <memchr>
 800c772:	9a04      	ldr	r2, [sp, #16]
 800c774:	b9d8      	cbnz	r0, 800c7ae <_svfiprintf_r+0xe6>
 800c776:	06d0      	lsls	r0, r2, #27
 800c778:	bf44      	itt	mi
 800c77a:	2320      	movmi	r3, #32
 800c77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c780:	0711      	lsls	r1, r2, #28
 800c782:	bf44      	itt	mi
 800c784:	232b      	movmi	r3, #43	; 0x2b
 800c786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78a:	f89a 3000 	ldrb.w	r3, [sl]
 800c78e:	2b2a      	cmp	r3, #42	; 0x2a
 800c790:	d015      	beq.n	800c7be <_svfiprintf_r+0xf6>
 800c792:	9a07      	ldr	r2, [sp, #28]
 800c794:	4654      	mov	r4, sl
 800c796:	2000      	movs	r0, #0
 800c798:	f04f 0c0a 	mov.w	ip, #10
 800c79c:	4621      	mov	r1, r4
 800c79e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7a2:	3b30      	subs	r3, #48	; 0x30
 800c7a4:	2b09      	cmp	r3, #9
 800c7a6:	d94e      	bls.n	800c846 <_svfiprintf_r+0x17e>
 800c7a8:	b1b0      	cbz	r0, 800c7d8 <_svfiprintf_r+0x110>
 800c7aa:	9207      	str	r2, [sp, #28]
 800c7ac:	e014      	b.n	800c7d8 <_svfiprintf_r+0x110>
 800c7ae:	eba0 0308 	sub.w	r3, r0, r8
 800c7b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7b6:	4313      	orrs	r3, r2
 800c7b8:	9304      	str	r3, [sp, #16]
 800c7ba:	46a2      	mov	sl, r4
 800c7bc:	e7d2      	b.n	800c764 <_svfiprintf_r+0x9c>
 800c7be:	9b03      	ldr	r3, [sp, #12]
 800c7c0:	1d19      	adds	r1, r3, #4
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	9103      	str	r1, [sp, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	bfbb      	ittet	lt
 800c7ca:	425b      	neglt	r3, r3
 800c7cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c7d0:	9307      	strge	r3, [sp, #28]
 800c7d2:	9307      	strlt	r3, [sp, #28]
 800c7d4:	bfb8      	it	lt
 800c7d6:	9204      	strlt	r2, [sp, #16]
 800c7d8:	7823      	ldrb	r3, [r4, #0]
 800c7da:	2b2e      	cmp	r3, #46	; 0x2e
 800c7dc:	d10c      	bne.n	800c7f8 <_svfiprintf_r+0x130>
 800c7de:	7863      	ldrb	r3, [r4, #1]
 800c7e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e2:	d135      	bne.n	800c850 <_svfiprintf_r+0x188>
 800c7e4:	9b03      	ldr	r3, [sp, #12]
 800c7e6:	1d1a      	adds	r2, r3, #4
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	9203      	str	r2, [sp, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	bfb8      	it	lt
 800c7f0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7f4:	3402      	adds	r4, #2
 800c7f6:	9305      	str	r3, [sp, #20]
 800c7f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8c4 <_svfiprintf_r+0x1fc>
 800c7fc:	7821      	ldrb	r1, [r4, #0]
 800c7fe:	2203      	movs	r2, #3
 800c800:	4650      	mov	r0, sl
 800c802:	f7f3 fd0d 	bl	8000220 <memchr>
 800c806:	b140      	cbz	r0, 800c81a <_svfiprintf_r+0x152>
 800c808:	2340      	movs	r3, #64	; 0x40
 800c80a:	eba0 000a 	sub.w	r0, r0, sl
 800c80e:	fa03 f000 	lsl.w	r0, r3, r0
 800c812:	9b04      	ldr	r3, [sp, #16]
 800c814:	4303      	orrs	r3, r0
 800c816:	3401      	adds	r4, #1
 800c818:	9304      	str	r3, [sp, #16]
 800c81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c81e:	4826      	ldr	r0, [pc, #152]	; (800c8b8 <_svfiprintf_r+0x1f0>)
 800c820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c824:	2206      	movs	r2, #6
 800c826:	f7f3 fcfb 	bl	8000220 <memchr>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d038      	beq.n	800c8a0 <_svfiprintf_r+0x1d8>
 800c82e:	4b23      	ldr	r3, [pc, #140]	; (800c8bc <_svfiprintf_r+0x1f4>)
 800c830:	bb1b      	cbnz	r3, 800c87a <_svfiprintf_r+0x1b2>
 800c832:	9b03      	ldr	r3, [sp, #12]
 800c834:	3307      	adds	r3, #7
 800c836:	f023 0307 	bic.w	r3, r3, #7
 800c83a:	3308      	adds	r3, #8
 800c83c:	9303      	str	r3, [sp, #12]
 800c83e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c840:	4433      	add	r3, r6
 800c842:	9309      	str	r3, [sp, #36]	; 0x24
 800c844:	e767      	b.n	800c716 <_svfiprintf_r+0x4e>
 800c846:	fb0c 3202 	mla	r2, ip, r2, r3
 800c84a:	460c      	mov	r4, r1
 800c84c:	2001      	movs	r0, #1
 800c84e:	e7a5      	b.n	800c79c <_svfiprintf_r+0xd4>
 800c850:	2300      	movs	r3, #0
 800c852:	3401      	adds	r4, #1
 800c854:	9305      	str	r3, [sp, #20]
 800c856:	4619      	mov	r1, r3
 800c858:	f04f 0c0a 	mov.w	ip, #10
 800c85c:	4620      	mov	r0, r4
 800c85e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c862:	3a30      	subs	r2, #48	; 0x30
 800c864:	2a09      	cmp	r2, #9
 800c866:	d903      	bls.n	800c870 <_svfiprintf_r+0x1a8>
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d0c5      	beq.n	800c7f8 <_svfiprintf_r+0x130>
 800c86c:	9105      	str	r1, [sp, #20]
 800c86e:	e7c3      	b.n	800c7f8 <_svfiprintf_r+0x130>
 800c870:	fb0c 2101 	mla	r1, ip, r1, r2
 800c874:	4604      	mov	r4, r0
 800c876:	2301      	movs	r3, #1
 800c878:	e7f0      	b.n	800c85c <_svfiprintf_r+0x194>
 800c87a:	ab03      	add	r3, sp, #12
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	462a      	mov	r2, r5
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <_svfiprintf_r+0x1f8>)
 800c882:	a904      	add	r1, sp, #16
 800c884:	4638      	mov	r0, r7
 800c886:	f000 f8bf 	bl	800ca08 <_printf_float>
 800c88a:	1c42      	adds	r2, r0, #1
 800c88c:	4606      	mov	r6, r0
 800c88e:	d1d6      	bne.n	800c83e <_svfiprintf_r+0x176>
 800c890:	89ab      	ldrh	r3, [r5, #12]
 800c892:	065b      	lsls	r3, r3, #25
 800c894:	f53f af2c 	bmi.w	800c6f0 <_svfiprintf_r+0x28>
 800c898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c89a:	b01d      	add	sp, #116	; 0x74
 800c89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8a0:	ab03      	add	r3, sp, #12
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	462a      	mov	r2, r5
 800c8a6:	4b06      	ldr	r3, [pc, #24]	; (800c8c0 <_svfiprintf_r+0x1f8>)
 800c8a8:	a904      	add	r1, sp, #16
 800c8aa:	4638      	mov	r0, r7
 800c8ac:	f000 fb50 	bl	800cf50 <_printf_i>
 800c8b0:	e7eb      	b.n	800c88a <_svfiprintf_r+0x1c2>
 800c8b2:	bf00      	nop
 800c8b4:	08012520 	.word	0x08012520
 800c8b8:	0801252a 	.word	0x0801252a
 800c8bc:	0800ca09 	.word	0x0800ca09
 800c8c0:	0800c611 	.word	0x0800c611
 800c8c4:	08012526 	.word	0x08012526

0800c8c8 <__cvt>:
 800c8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8cc:	ec55 4b10 	vmov	r4, r5, d0
 800c8d0:	2d00      	cmp	r5, #0
 800c8d2:	460e      	mov	r6, r1
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	bfbb      	ittet	lt
 800c8da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c8de:	461d      	movlt	r5, r3
 800c8e0:	2300      	movge	r3, #0
 800c8e2:	232d      	movlt	r3, #45	; 0x2d
 800c8e4:	700b      	strb	r3, [r1, #0]
 800c8e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c8ec:	4691      	mov	r9, r2
 800c8ee:	f023 0820 	bic.w	r8, r3, #32
 800c8f2:	bfbc      	itt	lt
 800c8f4:	4622      	movlt	r2, r4
 800c8f6:	4614      	movlt	r4, r2
 800c8f8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c8fc:	d005      	beq.n	800c90a <__cvt+0x42>
 800c8fe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c902:	d100      	bne.n	800c906 <__cvt+0x3e>
 800c904:	3601      	adds	r6, #1
 800c906:	2102      	movs	r1, #2
 800c908:	e000      	b.n	800c90c <__cvt+0x44>
 800c90a:	2103      	movs	r1, #3
 800c90c:	ab03      	add	r3, sp, #12
 800c90e:	9301      	str	r3, [sp, #4]
 800c910:	ab02      	add	r3, sp, #8
 800c912:	9300      	str	r3, [sp, #0]
 800c914:	ec45 4b10 	vmov	d0, r4, r5
 800c918:	4653      	mov	r3, sl
 800c91a:	4632      	mov	r2, r6
 800c91c:	f001 fc4c 	bl	800e1b8 <_dtoa_r>
 800c920:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c924:	4607      	mov	r7, r0
 800c926:	d102      	bne.n	800c92e <__cvt+0x66>
 800c928:	f019 0f01 	tst.w	r9, #1
 800c92c:	d022      	beq.n	800c974 <__cvt+0xac>
 800c92e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c932:	eb07 0906 	add.w	r9, r7, r6
 800c936:	d110      	bne.n	800c95a <__cvt+0x92>
 800c938:	783b      	ldrb	r3, [r7, #0]
 800c93a:	2b30      	cmp	r3, #48	; 0x30
 800c93c:	d10a      	bne.n	800c954 <__cvt+0x8c>
 800c93e:	2200      	movs	r2, #0
 800c940:	2300      	movs	r3, #0
 800c942:	4620      	mov	r0, r4
 800c944:	4629      	mov	r1, r5
 800c946:	f7f4 f8df 	bl	8000b08 <__aeabi_dcmpeq>
 800c94a:	b918      	cbnz	r0, 800c954 <__cvt+0x8c>
 800c94c:	f1c6 0601 	rsb	r6, r6, #1
 800c950:	f8ca 6000 	str.w	r6, [sl]
 800c954:	f8da 3000 	ldr.w	r3, [sl]
 800c958:	4499      	add	r9, r3
 800c95a:	2200      	movs	r2, #0
 800c95c:	2300      	movs	r3, #0
 800c95e:	4620      	mov	r0, r4
 800c960:	4629      	mov	r1, r5
 800c962:	f7f4 f8d1 	bl	8000b08 <__aeabi_dcmpeq>
 800c966:	b108      	cbz	r0, 800c96c <__cvt+0xa4>
 800c968:	f8cd 900c 	str.w	r9, [sp, #12]
 800c96c:	2230      	movs	r2, #48	; 0x30
 800c96e:	9b03      	ldr	r3, [sp, #12]
 800c970:	454b      	cmp	r3, r9
 800c972:	d307      	bcc.n	800c984 <__cvt+0xbc>
 800c974:	9b03      	ldr	r3, [sp, #12]
 800c976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c978:	1bdb      	subs	r3, r3, r7
 800c97a:	4638      	mov	r0, r7
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	b004      	add	sp, #16
 800c980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c984:	1c59      	adds	r1, r3, #1
 800c986:	9103      	str	r1, [sp, #12]
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	e7f0      	b.n	800c96e <__cvt+0xa6>

0800c98c <__exponent>:
 800c98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c98e:	4603      	mov	r3, r0
 800c990:	2900      	cmp	r1, #0
 800c992:	bfb8      	it	lt
 800c994:	4249      	neglt	r1, r1
 800c996:	f803 2b02 	strb.w	r2, [r3], #2
 800c99a:	bfb4      	ite	lt
 800c99c:	222d      	movlt	r2, #45	; 0x2d
 800c99e:	222b      	movge	r2, #43	; 0x2b
 800c9a0:	2909      	cmp	r1, #9
 800c9a2:	7042      	strb	r2, [r0, #1]
 800c9a4:	dd2a      	ble.n	800c9fc <__exponent+0x70>
 800c9a6:	f10d 0407 	add.w	r4, sp, #7
 800c9aa:	46a4      	mov	ip, r4
 800c9ac:	270a      	movs	r7, #10
 800c9ae:	46a6      	mov	lr, r4
 800c9b0:	460a      	mov	r2, r1
 800c9b2:	fb91 f6f7 	sdiv	r6, r1, r7
 800c9b6:	fb07 1516 	mls	r5, r7, r6, r1
 800c9ba:	3530      	adds	r5, #48	; 0x30
 800c9bc:	2a63      	cmp	r2, #99	; 0x63
 800c9be:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800c9c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	dcf1      	bgt.n	800c9ae <__exponent+0x22>
 800c9ca:	3130      	adds	r1, #48	; 0x30
 800c9cc:	f1ae 0502 	sub.w	r5, lr, #2
 800c9d0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c9d4:	1c44      	adds	r4, r0, #1
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4561      	cmp	r1, ip
 800c9da:	d30a      	bcc.n	800c9f2 <__exponent+0x66>
 800c9dc:	f10d 0209 	add.w	r2, sp, #9
 800c9e0:	eba2 020e 	sub.w	r2, r2, lr
 800c9e4:	4565      	cmp	r5, ip
 800c9e6:	bf88      	it	hi
 800c9e8:	2200      	movhi	r2, #0
 800c9ea:	4413      	add	r3, r2
 800c9ec:	1a18      	subs	r0, r3, r0
 800c9ee:	b003      	add	sp, #12
 800c9f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9f6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c9fa:	e7ed      	b.n	800c9d8 <__exponent+0x4c>
 800c9fc:	2330      	movs	r3, #48	; 0x30
 800c9fe:	3130      	adds	r1, #48	; 0x30
 800ca00:	7083      	strb	r3, [r0, #2]
 800ca02:	70c1      	strb	r1, [r0, #3]
 800ca04:	1d03      	adds	r3, r0, #4
 800ca06:	e7f1      	b.n	800c9ec <__exponent+0x60>

0800ca08 <_printf_float>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	ed2d 8b02 	vpush	{d8}
 800ca10:	b08d      	sub	sp, #52	; 0x34
 800ca12:	460c      	mov	r4, r1
 800ca14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ca18:	4616      	mov	r6, r2
 800ca1a:	461f      	mov	r7, r3
 800ca1c:	4605      	mov	r5, r0
 800ca1e:	f002 fe35 	bl	800f68c <_localeconv_r>
 800ca22:	f8d0 a000 	ldr.w	sl, [r0]
 800ca26:	4650      	mov	r0, sl
 800ca28:	f7f3 fbec 	bl	8000204 <strlen>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca30:	6823      	ldr	r3, [r4, #0]
 800ca32:	9305      	str	r3, [sp, #20]
 800ca34:	f8d8 3000 	ldr.w	r3, [r8]
 800ca38:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ca3c:	3307      	adds	r3, #7
 800ca3e:	f023 0307 	bic.w	r3, r3, #7
 800ca42:	f103 0208 	add.w	r2, r3, #8
 800ca46:	f8c8 2000 	str.w	r2, [r8]
 800ca4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ca52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ca56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ca5a:	9307      	str	r3, [sp, #28]
 800ca5c:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca60:	ee08 0a10 	vmov	s16, r0
 800ca64:	4b9f      	ldr	r3, [pc, #636]	; (800cce4 <_printf_float+0x2dc>)
 800ca66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca6e:	f7f4 f87d 	bl	8000b6c <__aeabi_dcmpun>
 800ca72:	bb88      	cbnz	r0, 800cad8 <_printf_float+0xd0>
 800ca74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca78:	4b9a      	ldr	r3, [pc, #616]	; (800cce4 <_printf_float+0x2dc>)
 800ca7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca7e:	f7f4 f857 	bl	8000b30 <__aeabi_dcmple>
 800ca82:	bb48      	cbnz	r0, 800cad8 <_printf_float+0xd0>
 800ca84:	2200      	movs	r2, #0
 800ca86:	2300      	movs	r3, #0
 800ca88:	4640      	mov	r0, r8
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	f7f4 f846 	bl	8000b1c <__aeabi_dcmplt>
 800ca90:	b110      	cbz	r0, 800ca98 <_printf_float+0x90>
 800ca92:	232d      	movs	r3, #45	; 0x2d
 800ca94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca98:	4b93      	ldr	r3, [pc, #588]	; (800cce8 <_printf_float+0x2e0>)
 800ca9a:	4894      	ldr	r0, [pc, #592]	; (800ccec <_printf_float+0x2e4>)
 800ca9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800caa0:	bf94      	ite	ls
 800caa2:	4698      	movls	r8, r3
 800caa4:	4680      	movhi	r8, r0
 800caa6:	2303      	movs	r3, #3
 800caa8:	6123      	str	r3, [r4, #16]
 800caaa:	9b05      	ldr	r3, [sp, #20]
 800caac:	f023 0204 	bic.w	r2, r3, #4
 800cab0:	6022      	str	r2, [r4, #0]
 800cab2:	f04f 0900 	mov.w	r9, #0
 800cab6:	9700      	str	r7, [sp, #0]
 800cab8:	4633      	mov	r3, r6
 800caba:	aa0b      	add	r2, sp, #44	; 0x2c
 800cabc:	4621      	mov	r1, r4
 800cabe:	4628      	mov	r0, r5
 800cac0:	f000 f9d8 	bl	800ce74 <_printf_common>
 800cac4:	3001      	adds	r0, #1
 800cac6:	f040 8090 	bne.w	800cbea <_printf_float+0x1e2>
 800caca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cace:	b00d      	add	sp, #52	; 0x34
 800cad0:	ecbd 8b02 	vpop	{d8}
 800cad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cad8:	4642      	mov	r2, r8
 800cada:	464b      	mov	r3, r9
 800cadc:	4640      	mov	r0, r8
 800cade:	4649      	mov	r1, r9
 800cae0:	f7f4 f844 	bl	8000b6c <__aeabi_dcmpun>
 800cae4:	b140      	cbz	r0, 800caf8 <_printf_float+0xf0>
 800cae6:	464b      	mov	r3, r9
 800cae8:	2b00      	cmp	r3, #0
 800caea:	bfbc      	itt	lt
 800caec:	232d      	movlt	r3, #45	; 0x2d
 800caee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800caf2:	487f      	ldr	r0, [pc, #508]	; (800ccf0 <_printf_float+0x2e8>)
 800caf4:	4b7f      	ldr	r3, [pc, #508]	; (800ccf4 <_printf_float+0x2ec>)
 800caf6:	e7d1      	b.n	800ca9c <_printf_float+0x94>
 800caf8:	6863      	ldr	r3, [r4, #4]
 800cafa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cafe:	9206      	str	r2, [sp, #24]
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	d13f      	bne.n	800cb84 <_printf_float+0x17c>
 800cb04:	2306      	movs	r3, #6
 800cb06:	6063      	str	r3, [r4, #4]
 800cb08:	9b05      	ldr	r3, [sp, #20]
 800cb0a:	6861      	ldr	r1, [r4, #4]
 800cb0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cb10:	2300      	movs	r3, #0
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	ab0a      	add	r3, sp, #40	; 0x28
 800cb16:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cb1a:	ab09      	add	r3, sp, #36	; 0x24
 800cb1c:	ec49 8b10 	vmov	d0, r8, r9
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	6022      	str	r2, [r4, #0]
 800cb24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb28:	4628      	mov	r0, r5
 800cb2a:	f7ff fecd 	bl	800c8c8 <__cvt>
 800cb2e:	9b06      	ldr	r3, [sp, #24]
 800cb30:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb32:	2b47      	cmp	r3, #71	; 0x47
 800cb34:	4680      	mov	r8, r0
 800cb36:	d108      	bne.n	800cb4a <_printf_float+0x142>
 800cb38:	1cc8      	adds	r0, r1, #3
 800cb3a:	db02      	blt.n	800cb42 <_printf_float+0x13a>
 800cb3c:	6863      	ldr	r3, [r4, #4]
 800cb3e:	4299      	cmp	r1, r3
 800cb40:	dd41      	ble.n	800cbc6 <_printf_float+0x1be>
 800cb42:	f1ab 0b02 	sub.w	fp, fp, #2
 800cb46:	fa5f fb8b 	uxtb.w	fp, fp
 800cb4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb4e:	d820      	bhi.n	800cb92 <_printf_float+0x18a>
 800cb50:	3901      	subs	r1, #1
 800cb52:	465a      	mov	r2, fp
 800cb54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cb58:	9109      	str	r1, [sp, #36]	; 0x24
 800cb5a:	f7ff ff17 	bl	800c98c <__exponent>
 800cb5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb60:	1813      	adds	r3, r2, r0
 800cb62:	2a01      	cmp	r2, #1
 800cb64:	4681      	mov	r9, r0
 800cb66:	6123      	str	r3, [r4, #16]
 800cb68:	dc02      	bgt.n	800cb70 <_printf_float+0x168>
 800cb6a:	6822      	ldr	r2, [r4, #0]
 800cb6c:	07d2      	lsls	r2, r2, #31
 800cb6e:	d501      	bpl.n	800cb74 <_printf_float+0x16c>
 800cb70:	3301      	adds	r3, #1
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d09c      	beq.n	800cab6 <_printf_float+0xae>
 800cb7c:	232d      	movs	r3, #45	; 0x2d
 800cb7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb82:	e798      	b.n	800cab6 <_printf_float+0xae>
 800cb84:	9a06      	ldr	r2, [sp, #24]
 800cb86:	2a47      	cmp	r2, #71	; 0x47
 800cb88:	d1be      	bne.n	800cb08 <_printf_float+0x100>
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d1bc      	bne.n	800cb08 <_printf_float+0x100>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e7b9      	b.n	800cb06 <_printf_float+0xfe>
 800cb92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb96:	d118      	bne.n	800cbca <_printf_float+0x1c2>
 800cb98:	2900      	cmp	r1, #0
 800cb9a:	6863      	ldr	r3, [r4, #4]
 800cb9c:	dd0b      	ble.n	800cbb6 <_printf_float+0x1ae>
 800cb9e:	6121      	str	r1, [r4, #16]
 800cba0:	b913      	cbnz	r3, 800cba8 <_printf_float+0x1a0>
 800cba2:	6822      	ldr	r2, [r4, #0]
 800cba4:	07d0      	lsls	r0, r2, #31
 800cba6:	d502      	bpl.n	800cbae <_printf_float+0x1a6>
 800cba8:	3301      	adds	r3, #1
 800cbaa:	440b      	add	r3, r1
 800cbac:	6123      	str	r3, [r4, #16]
 800cbae:	65a1      	str	r1, [r4, #88]	; 0x58
 800cbb0:	f04f 0900 	mov.w	r9, #0
 800cbb4:	e7de      	b.n	800cb74 <_printf_float+0x16c>
 800cbb6:	b913      	cbnz	r3, 800cbbe <_printf_float+0x1b6>
 800cbb8:	6822      	ldr	r2, [r4, #0]
 800cbba:	07d2      	lsls	r2, r2, #31
 800cbbc:	d501      	bpl.n	800cbc2 <_printf_float+0x1ba>
 800cbbe:	3302      	adds	r3, #2
 800cbc0:	e7f4      	b.n	800cbac <_printf_float+0x1a4>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e7f2      	b.n	800cbac <_printf_float+0x1a4>
 800cbc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cbca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbcc:	4299      	cmp	r1, r3
 800cbce:	db05      	blt.n	800cbdc <_printf_float+0x1d4>
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	6121      	str	r1, [r4, #16]
 800cbd4:	07d8      	lsls	r0, r3, #31
 800cbd6:	d5ea      	bpl.n	800cbae <_printf_float+0x1a6>
 800cbd8:	1c4b      	adds	r3, r1, #1
 800cbda:	e7e7      	b.n	800cbac <_printf_float+0x1a4>
 800cbdc:	2900      	cmp	r1, #0
 800cbde:	bfd4      	ite	le
 800cbe0:	f1c1 0202 	rsble	r2, r1, #2
 800cbe4:	2201      	movgt	r2, #1
 800cbe6:	4413      	add	r3, r2
 800cbe8:	e7e0      	b.n	800cbac <_printf_float+0x1a4>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	055a      	lsls	r2, r3, #21
 800cbee:	d407      	bmi.n	800cc00 <_printf_float+0x1f8>
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	4642      	mov	r2, r8
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	47b8      	blx	r7
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d12c      	bne.n	800cc58 <_printf_float+0x250>
 800cbfe:	e764      	b.n	800caca <_printf_float+0xc2>
 800cc00:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cc04:	f240 80e0 	bls.w	800cdc8 <_printf_float+0x3c0>
 800cc08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	2300      	movs	r3, #0
 800cc10:	f7f3 ff7a 	bl	8000b08 <__aeabi_dcmpeq>
 800cc14:	2800      	cmp	r0, #0
 800cc16:	d034      	beq.n	800cc82 <_printf_float+0x27a>
 800cc18:	4a37      	ldr	r2, [pc, #220]	; (800ccf8 <_printf_float+0x2f0>)
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4631      	mov	r1, r6
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	f43f af51 	beq.w	800caca <_printf_float+0xc2>
 800cc28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	db02      	blt.n	800cc36 <_printf_float+0x22e>
 800cc30:	6823      	ldr	r3, [r4, #0]
 800cc32:	07d8      	lsls	r0, r3, #31
 800cc34:	d510      	bpl.n	800cc58 <_printf_float+0x250>
 800cc36:	ee18 3a10 	vmov	r3, s16
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	f43f af41 	beq.w	800caca <_printf_float+0xc2>
 800cc48:	f04f 0800 	mov.w	r8, #0
 800cc4c:	f104 091a 	add.w	r9, r4, #26
 800cc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc52:	3b01      	subs	r3, #1
 800cc54:	4543      	cmp	r3, r8
 800cc56:	dc09      	bgt.n	800cc6c <_printf_float+0x264>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	079b      	lsls	r3, r3, #30
 800cc5c:	f100 8105 	bmi.w	800ce6a <_printf_float+0x462>
 800cc60:	68e0      	ldr	r0, [r4, #12]
 800cc62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc64:	4298      	cmp	r0, r3
 800cc66:	bfb8      	it	lt
 800cc68:	4618      	movlt	r0, r3
 800cc6a:	e730      	b.n	800cace <_printf_float+0xc6>
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	464a      	mov	r2, r9
 800cc70:	4631      	mov	r1, r6
 800cc72:	4628      	mov	r0, r5
 800cc74:	47b8      	blx	r7
 800cc76:	3001      	adds	r0, #1
 800cc78:	f43f af27 	beq.w	800caca <_printf_float+0xc2>
 800cc7c:	f108 0801 	add.w	r8, r8, #1
 800cc80:	e7e6      	b.n	800cc50 <_printf_float+0x248>
 800cc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dc39      	bgt.n	800ccfc <_printf_float+0x2f4>
 800cc88:	4a1b      	ldr	r2, [pc, #108]	; (800ccf8 <_printf_float+0x2f0>)
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	4631      	mov	r1, r6
 800cc8e:	4628      	mov	r0, r5
 800cc90:	47b8      	blx	r7
 800cc92:	3001      	adds	r0, #1
 800cc94:	f43f af19 	beq.w	800caca <_printf_float+0xc2>
 800cc98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	d102      	bne.n	800cca6 <_printf_float+0x29e>
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	07d9      	lsls	r1, r3, #31
 800cca4:	d5d8      	bpl.n	800cc58 <_printf_float+0x250>
 800cca6:	ee18 3a10 	vmov	r3, s16
 800ccaa:	4652      	mov	r2, sl
 800ccac:	4631      	mov	r1, r6
 800ccae:	4628      	mov	r0, r5
 800ccb0:	47b8      	blx	r7
 800ccb2:	3001      	adds	r0, #1
 800ccb4:	f43f af09 	beq.w	800caca <_printf_float+0xc2>
 800ccb8:	f04f 0900 	mov.w	r9, #0
 800ccbc:	f104 0a1a 	add.w	sl, r4, #26
 800ccc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc2:	425b      	negs	r3, r3
 800ccc4:	454b      	cmp	r3, r9
 800ccc6:	dc01      	bgt.n	800cccc <_printf_float+0x2c4>
 800ccc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccca:	e792      	b.n	800cbf2 <_printf_float+0x1ea>
 800cccc:	2301      	movs	r3, #1
 800ccce:	4652      	mov	r2, sl
 800ccd0:	4631      	mov	r1, r6
 800ccd2:	4628      	mov	r0, r5
 800ccd4:	47b8      	blx	r7
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	f43f aef7 	beq.w	800caca <_printf_float+0xc2>
 800ccdc:	f109 0901 	add.w	r9, r9, #1
 800cce0:	e7ee      	b.n	800ccc0 <_printf_float+0x2b8>
 800cce2:	bf00      	nop
 800cce4:	7fefffff 	.word	0x7fefffff
 800cce8:	08012531 	.word	0x08012531
 800ccec:	08012535 	.word	0x08012535
 800ccf0:	0801253d 	.word	0x0801253d
 800ccf4:	08012539 	.word	0x08012539
 800ccf8:	08012541 	.word	0x08012541
 800ccfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd00:	429a      	cmp	r2, r3
 800cd02:	bfa8      	it	ge
 800cd04:	461a      	movge	r2, r3
 800cd06:	2a00      	cmp	r2, #0
 800cd08:	4691      	mov	r9, r2
 800cd0a:	dc37      	bgt.n	800cd7c <_printf_float+0x374>
 800cd0c:	f04f 0b00 	mov.w	fp, #0
 800cd10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd14:	f104 021a 	add.w	r2, r4, #26
 800cd18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cd1a:	9305      	str	r3, [sp, #20]
 800cd1c:	eba3 0309 	sub.w	r3, r3, r9
 800cd20:	455b      	cmp	r3, fp
 800cd22:	dc33      	bgt.n	800cd8c <_printf_float+0x384>
 800cd24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	db3b      	blt.n	800cda4 <_printf_float+0x39c>
 800cd2c:	6823      	ldr	r3, [r4, #0]
 800cd2e:	07da      	lsls	r2, r3, #31
 800cd30:	d438      	bmi.n	800cda4 <_printf_float+0x39c>
 800cd32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd34:	9a05      	ldr	r2, [sp, #20]
 800cd36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd38:	1a9a      	subs	r2, r3, r2
 800cd3a:	eba3 0901 	sub.w	r9, r3, r1
 800cd3e:	4591      	cmp	r9, r2
 800cd40:	bfa8      	it	ge
 800cd42:	4691      	movge	r9, r2
 800cd44:	f1b9 0f00 	cmp.w	r9, #0
 800cd48:	dc35      	bgt.n	800cdb6 <_printf_float+0x3ae>
 800cd4a:	f04f 0800 	mov.w	r8, #0
 800cd4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cd52:	f104 0a1a 	add.w	sl, r4, #26
 800cd56:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd5a:	1a9b      	subs	r3, r3, r2
 800cd5c:	eba3 0309 	sub.w	r3, r3, r9
 800cd60:	4543      	cmp	r3, r8
 800cd62:	f77f af79 	ble.w	800cc58 <_printf_float+0x250>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4652      	mov	r2, sl
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4628      	mov	r0, r5
 800cd6e:	47b8      	blx	r7
 800cd70:	3001      	adds	r0, #1
 800cd72:	f43f aeaa 	beq.w	800caca <_printf_float+0xc2>
 800cd76:	f108 0801 	add.w	r8, r8, #1
 800cd7a:	e7ec      	b.n	800cd56 <_printf_float+0x34e>
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	4631      	mov	r1, r6
 800cd80:	4642      	mov	r2, r8
 800cd82:	4628      	mov	r0, r5
 800cd84:	47b8      	blx	r7
 800cd86:	3001      	adds	r0, #1
 800cd88:	d1c0      	bne.n	800cd0c <_printf_float+0x304>
 800cd8a:	e69e      	b.n	800caca <_printf_float+0xc2>
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	4631      	mov	r1, r6
 800cd90:	4628      	mov	r0, r5
 800cd92:	9205      	str	r2, [sp, #20]
 800cd94:	47b8      	blx	r7
 800cd96:	3001      	adds	r0, #1
 800cd98:	f43f ae97 	beq.w	800caca <_printf_float+0xc2>
 800cd9c:	9a05      	ldr	r2, [sp, #20]
 800cd9e:	f10b 0b01 	add.w	fp, fp, #1
 800cda2:	e7b9      	b.n	800cd18 <_printf_float+0x310>
 800cda4:	ee18 3a10 	vmov	r3, s16
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4631      	mov	r1, r6
 800cdac:	4628      	mov	r0, r5
 800cdae:	47b8      	blx	r7
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d1be      	bne.n	800cd32 <_printf_float+0x32a>
 800cdb4:	e689      	b.n	800caca <_printf_float+0xc2>
 800cdb6:	9a05      	ldr	r2, [sp, #20]
 800cdb8:	464b      	mov	r3, r9
 800cdba:	4442      	add	r2, r8
 800cdbc:	4631      	mov	r1, r6
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	47b8      	blx	r7
 800cdc2:	3001      	adds	r0, #1
 800cdc4:	d1c1      	bne.n	800cd4a <_printf_float+0x342>
 800cdc6:	e680      	b.n	800caca <_printf_float+0xc2>
 800cdc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cdca:	2a01      	cmp	r2, #1
 800cdcc:	dc01      	bgt.n	800cdd2 <_printf_float+0x3ca>
 800cdce:	07db      	lsls	r3, r3, #31
 800cdd0:	d538      	bpl.n	800ce44 <_printf_float+0x43c>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	4642      	mov	r2, r8
 800cdd6:	4631      	mov	r1, r6
 800cdd8:	4628      	mov	r0, r5
 800cdda:	47b8      	blx	r7
 800cddc:	3001      	adds	r0, #1
 800cdde:	f43f ae74 	beq.w	800caca <_printf_float+0xc2>
 800cde2:	ee18 3a10 	vmov	r3, s16
 800cde6:	4652      	mov	r2, sl
 800cde8:	4631      	mov	r1, r6
 800cdea:	4628      	mov	r0, r5
 800cdec:	47b8      	blx	r7
 800cdee:	3001      	adds	r0, #1
 800cdf0:	f43f ae6b 	beq.w	800caca <_printf_float+0xc2>
 800cdf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	f7f3 fe84 	bl	8000b08 <__aeabi_dcmpeq>
 800ce00:	b9d8      	cbnz	r0, 800ce3a <_printf_float+0x432>
 800ce02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce04:	f108 0201 	add.w	r2, r8, #1
 800ce08:	3b01      	subs	r3, #1
 800ce0a:	4631      	mov	r1, r6
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	47b8      	blx	r7
 800ce10:	3001      	adds	r0, #1
 800ce12:	d10e      	bne.n	800ce32 <_printf_float+0x42a>
 800ce14:	e659      	b.n	800caca <_printf_float+0xc2>
 800ce16:	2301      	movs	r3, #1
 800ce18:	4652      	mov	r2, sl
 800ce1a:	4631      	mov	r1, r6
 800ce1c:	4628      	mov	r0, r5
 800ce1e:	47b8      	blx	r7
 800ce20:	3001      	adds	r0, #1
 800ce22:	f43f ae52 	beq.w	800caca <_printf_float+0xc2>
 800ce26:	f108 0801 	add.w	r8, r8, #1
 800ce2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2c:	3b01      	subs	r3, #1
 800ce2e:	4543      	cmp	r3, r8
 800ce30:	dcf1      	bgt.n	800ce16 <_printf_float+0x40e>
 800ce32:	464b      	mov	r3, r9
 800ce34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ce38:	e6dc      	b.n	800cbf4 <_printf_float+0x1ec>
 800ce3a:	f04f 0800 	mov.w	r8, #0
 800ce3e:	f104 0a1a 	add.w	sl, r4, #26
 800ce42:	e7f2      	b.n	800ce2a <_printf_float+0x422>
 800ce44:	2301      	movs	r3, #1
 800ce46:	4642      	mov	r2, r8
 800ce48:	e7df      	b.n	800ce0a <_printf_float+0x402>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	464a      	mov	r2, r9
 800ce4e:	4631      	mov	r1, r6
 800ce50:	4628      	mov	r0, r5
 800ce52:	47b8      	blx	r7
 800ce54:	3001      	adds	r0, #1
 800ce56:	f43f ae38 	beq.w	800caca <_printf_float+0xc2>
 800ce5a:	f108 0801 	add.w	r8, r8, #1
 800ce5e:	68e3      	ldr	r3, [r4, #12]
 800ce60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce62:	1a5b      	subs	r3, r3, r1
 800ce64:	4543      	cmp	r3, r8
 800ce66:	dcf0      	bgt.n	800ce4a <_printf_float+0x442>
 800ce68:	e6fa      	b.n	800cc60 <_printf_float+0x258>
 800ce6a:	f04f 0800 	mov.w	r8, #0
 800ce6e:	f104 0919 	add.w	r9, r4, #25
 800ce72:	e7f4      	b.n	800ce5e <_printf_float+0x456>

0800ce74 <_printf_common>:
 800ce74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce78:	4616      	mov	r6, r2
 800ce7a:	4699      	mov	r9, r3
 800ce7c:	688a      	ldr	r2, [r1, #8]
 800ce7e:	690b      	ldr	r3, [r1, #16]
 800ce80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	bfb8      	it	lt
 800ce88:	4613      	movlt	r3, r2
 800ce8a:	6033      	str	r3, [r6, #0]
 800ce8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ce90:	4607      	mov	r7, r0
 800ce92:	460c      	mov	r4, r1
 800ce94:	b10a      	cbz	r2, 800ce9a <_printf_common+0x26>
 800ce96:	3301      	adds	r3, #1
 800ce98:	6033      	str	r3, [r6, #0]
 800ce9a:	6823      	ldr	r3, [r4, #0]
 800ce9c:	0699      	lsls	r1, r3, #26
 800ce9e:	bf42      	ittt	mi
 800cea0:	6833      	ldrmi	r3, [r6, #0]
 800cea2:	3302      	addmi	r3, #2
 800cea4:	6033      	strmi	r3, [r6, #0]
 800cea6:	6825      	ldr	r5, [r4, #0]
 800cea8:	f015 0506 	ands.w	r5, r5, #6
 800ceac:	d106      	bne.n	800cebc <_printf_common+0x48>
 800ceae:	f104 0a19 	add.w	sl, r4, #25
 800ceb2:	68e3      	ldr	r3, [r4, #12]
 800ceb4:	6832      	ldr	r2, [r6, #0]
 800ceb6:	1a9b      	subs	r3, r3, r2
 800ceb8:	42ab      	cmp	r3, r5
 800ceba:	dc26      	bgt.n	800cf0a <_printf_common+0x96>
 800cebc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cec0:	1e13      	subs	r3, r2, #0
 800cec2:	6822      	ldr	r2, [r4, #0]
 800cec4:	bf18      	it	ne
 800cec6:	2301      	movne	r3, #1
 800cec8:	0692      	lsls	r2, r2, #26
 800ceca:	d42b      	bmi.n	800cf24 <_printf_common+0xb0>
 800cecc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ced0:	4649      	mov	r1, r9
 800ced2:	4638      	mov	r0, r7
 800ced4:	47c0      	blx	r8
 800ced6:	3001      	adds	r0, #1
 800ced8:	d01e      	beq.n	800cf18 <_printf_common+0xa4>
 800ceda:	6823      	ldr	r3, [r4, #0]
 800cedc:	68e5      	ldr	r5, [r4, #12]
 800cede:	6832      	ldr	r2, [r6, #0]
 800cee0:	f003 0306 	and.w	r3, r3, #6
 800cee4:	2b04      	cmp	r3, #4
 800cee6:	bf08      	it	eq
 800cee8:	1aad      	subeq	r5, r5, r2
 800ceea:	68a3      	ldr	r3, [r4, #8]
 800ceec:	6922      	ldr	r2, [r4, #16]
 800ceee:	bf0c      	ite	eq
 800cef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cef4:	2500      	movne	r5, #0
 800cef6:	4293      	cmp	r3, r2
 800cef8:	bfc4      	itt	gt
 800cefa:	1a9b      	subgt	r3, r3, r2
 800cefc:	18ed      	addgt	r5, r5, r3
 800cefe:	2600      	movs	r6, #0
 800cf00:	341a      	adds	r4, #26
 800cf02:	42b5      	cmp	r5, r6
 800cf04:	d11a      	bne.n	800cf3c <_printf_common+0xc8>
 800cf06:	2000      	movs	r0, #0
 800cf08:	e008      	b.n	800cf1c <_printf_common+0xa8>
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	4652      	mov	r2, sl
 800cf0e:	4649      	mov	r1, r9
 800cf10:	4638      	mov	r0, r7
 800cf12:	47c0      	blx	r8
 800cf14:	3001      	adds	r0, #1
 800cf16:	d103      	bne.n	800cf20 <_printf_common+0xac>
 800cf18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf20:	3501      	adds	r5, #1
 800cf22:	e7c6      	b.n	800ceb2 <_printf_common+0x3e>
 800cf24:	18e1      	adds	r1, r4, r3
 800cf26:	1c5a      	adds	r2, r3, #1
 800cf28:	2030      	movs	r0, #48	; 0x30
 800cf2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf2e:	4422      	add	r2, r4
 800cf30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf38:	3302      	adds	r3, #2
 800cf3a:	e7c7      	b.n	800cecc <_printf_common+0x58>
 800cf3c:	2301      	movs	r3, #1
 800cf3e:	4622      	mov	r2, r4
 800cf40:	4649      	mov	r1, r9
 800cf42:	4638      	mov	r0, r7
 800cf44:	47c0      	blx	r8
 800cf46:	3001      	adds	r0, #1
 800cf48:	d0e6      	beq.n	800cf18 <_printf_common+0xa4>
 800cf4a:	3601      	adds	r6, #1
 800cf4c:	e7d9      	b.n	800cf02 <_printf_common+0x8e>
	...

0800cf50 <_printf_i>:
 800cf50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf54:	7e0f      	ldrb	r7, [r1, #24]
 800cf56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf58:	2f78      	cmp	r7, #120	; 0x78
 800cf5a:	4691      	mov	r9, r2
 800cf5c:	4680      	mov	r8, r0
 800cf5e:	460c      	mov	r4, r1
 800cf60:	469a      	mov	sl, r3
 800cf62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cf66:	d807      	bhi.n	800cf78 <_printf_i+0x28>
 800cf68:	2f62      	cmp	r7, #98	; 0x62
 800cf6a:	d80a      	bhi.n	800cf82 <_printf_i+0x32>
 800cf6c:	2f00      	cmp	r7, #0
 800cf6e:	f000 80d8 	beq.w	800d122 <_printf_i+0x1d2>
 800cf72:	2f58      	cmp	r7, #88	; 0x58
 800cf74:	f000 80a3 	beq.w	800d0be <_printf_i+0x16e>
 800cf78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cf80:	e03a      	b.n	800cff8 <_printf_i+0xa8>
 800cf82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cf86:	2b15      	cmp	r3, #21
 800cf88:	d8f6      	bhi.n	800cf78 <_printf_i+0x28>
 800cf8a:	a101      	add	r1, pc, #4	; (adr r1, 800cf90 <_printf_i+0x40>)
 800cf8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cf90:	0800cfe9 	.word	0x0800cfe9
 800cf94:	0800cffd 	.word	0x0800cffd
 800cf98:	0800cf79 	.word	0x0800cf79
 800cf9c:	0800cf79 	.word	0x0800cf79
 800cfa0:	0800cf79 	.word	0x0800cf79
 800cfa4:	0800cf79 	.word	0x0800cf79
 800cfa8:	0800cffd 	.word	0x0800cffd
 800cfac:	0800cf79 	.word	0x0800cf79
 800cfb0:	0800cf79 	.word	0x0800cf79
 800cfb4:	0800cf79 	.word	0x0800cf79
 800cfb8:	0800cf79 	.word	0x0800cf79
 800cfbc:	0800d109 	.word	0x0800d109
 800cfc0:	0800d02d 	.word	0x0800d02d
 800cfc4:	0800d0eb 	.word	0x0800d0eb
 800cfc8:	0800cf79 	.word	0x0800cf79
 800cfcc:	0800cf79 	.word	0x0800cf79
 800cfd0:	0800d12b 	.word	0x0800d12b
 800cfd4:	0800cf79 	.word	0x0800cf79
 800cfd8:	0800d02d 	.word	0x0800d02d
 800cfdc:	0800cf79 	.word	0x0800cf79
 800cfe0:	0800cf79 	.word	0x0800cf79
 800cfe4:	0800d0f3 	.word	0x0800d0f3
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	1d1a      	adds	r2, r3, #4
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	602a      	str	r2, [r5, #0]
 800cff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cff4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cff8:	2301      	movs	r3, #1
 800cffa:	e0a3      	b.n	800d144 <_printf_i+0x1f4>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	6829      	ldr	r1, [r5, #0]
 800d000:	0606      	lsls	r6, r0, #24
 800d002:	f101 0304 	add.w	r3, r1, #4
 800d006:	d50a      	bpl.n	800d01e <_printf_i+0xce>
 800d008:	680e      	ldr	r6, [r1, #0]
 800d00a:	602b      	str	r3, [r5, #0]
 800d00c:	2e00      	cmp	r6, #0
 800d00e:	da03      	bge.n	800d018 <_printf_i+0xc8>
 800d010:	232d      	movs	r3, #45	; 0x2d
 800d012:	4276      	negs	r6, r6
 800d014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d018:	485e      	ldr	r0, [pc, #376]	; (800d194 <_printf_i+0x244>)
 800d01a:	230a      	movs	r3, #10
 800d01c:	e019      	b.n	800d052 <_printf_i+0x102>
 800d01e:	680e      	ldr	r6, [r1, #0]
 800d020:	602b      	str	r3, [r5, #0]
 800d022:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d026:	bf18      	it	ne
 800d028:	b236      	sxthne	r6, r6
 800d02a:	e7ef      	b.n	800d00c <_printf_i+0xbc>
 800d02c:	682b      	ldr	r3, [r5, #0]
 800d02e:	6820      	ldr	r0, [r4, #0]
 800d030:	1d19      	adds	r1, r3, #4
 800d032:	6029      	str	r1, [r5, #0]
 800d034:	0601      	lsls	r1, r0, #24
 800d036:	d501      	bpl.n	800d03c <_printf_i+0xec>
 800d038:	681e      	ldr	r6, [r3, #0]
 800d03a:	e002      	b.n	800d042 <_printf_i+0xf2>
 800d03c:	0646      	lsls	r6, r0, #25
 800d03e:	d5fb      	bpl.n	800d038 <_printf_i+0xe8>
 800d040:	881e      	ldrh	r6, [r3, #0]
 800d042:	4854      	ldr	r0, [pc, #336]	; (800d194 <_printf_i+0x244>)
 800d044:	2f6f      	cmp	r7, #111	; 0x6f
 800d046:	bf0c      	ite	eq
 800d048:	2308      	moveq	r3, #8
 800d04a:	230a      	movne	r3, #10
 800d04c:	2100      	movs	r1, #0
 800d04e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d052:	6865      	ldr	r5, [r4, #4]
 800d054:	60a5      	str	r5, [r4, #8]
 800d056:	2d00      	cmp	r5, #0
 800d058:	bfa2      	ittt	ge
 800d05a:	6821      	ldrge	r1, [r4, #0]
 800d05c:	f021 0104 	bicge.w	r1, r1, #4
 800d060:	6021      	strge	r1, [r4, #0]
 800d062:	b90e      	cbnz	r6, 800d068 <_printf_i+0x118>
 800d064:	2d00      	cmp	r5, #0
 800d066:	d04d      	beq.n	800d104 <_printf_i+0x1b4>
 800d068:	4615      	mov	r5, r2
 800d06a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d06e:	fb03 6711 	mls	r7, r3, r1, r6
 800d072:	5dc7      	ldrb	r7, [r0, r7]
 800d074:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d078:	4637      	mov	r7, r6
 800d07a:	42bb      	cmp	r3, r7
 800d07c:	460e      	mov	r6, r1
 800d07e:	d9f4      	bls.n	800d06a <_printf_i+0x11a>
 800d080:	2b08      	cmp	r3, #8
 800d082:	d10b      	bne.n	800d09c <_printf_i+0x14c>
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	07de      	lsls	r6, r3, #31
 800d088:	d508      	bpl.n	800d09c <_printf_i+0x14c>
 800d08a:	6923      	ldr	r3, [r4, #16]
 800d08c:	6861      	ldr	r1, [r4, #4]
 800d08e:	4299      	cmp	r1, r3
 800d090:	bfde      	ittt	le
 800d092:	2330      	movle	r3, #48	; 0x30
 800d094:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d098:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d09c:	1b52      	subs	r2, r2, r5
 800d09e:	6122      	str	r2, [r4, #16]
 800d0a0:	f8cd a000 	str.w	sl, [sp]
 800d0a4:	464b      	mov	r3, r9
 800d0a6:	aa03      	add	r2, sp, #12
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	f7ff fee2 	bl	800ce74 <_printf_common>
 800d0b0:	3001      	adds	r0, #1
 800d0b2:	d14c      	bne.n	800d14e <_printf_i+0x1fe>
 800d0b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d0b8:	b004      	add	sp, #16
 800d0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0be:	4835      	ldr	r0, [pc, #212]	; (800d194 <_printf_i+0x244>)
 800d0c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d0c4:	6829      	ldr	r1, [r5, #0]
 800d0c6:	6823      	ldr	r3, [r4, #0]
 800d0c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d0cc:	6029      	str	r1, [r5, #0]
 800d0ce:	061d      	lsls	r5, r3, #24
 800d0d0:	d514      	bpl.n	800d0fc <_printf_i+0x1ac>
 800d0d2:	07df      	lsls	r7, r3, #31
 800d0d4:	bf44      	itt	mi
 800d0d6:	f043 0320 	orrmi.w	r3, r3, #32
 800d0da:	6023      	strmi	r3, [r4, #0]
 800d0dc:	b91e      	cbnz	r6, 800d0e6 <_printf_i+0x196>
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	f023 0320 	bic.w	r3, r3, #32
 800d0e4:	6023      	str	r3, [r4, #0]
 800d0e6:	2310      	movs	r3, #16
 800d0e8:	e7b0      	b.n	800d04c <_printf_i+0xfc>
 800d0ea:	6823      	ldr	r3, [r4, #0]
 800d0ec:	f043 0320 	orr.w	r3, r3, #32
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	2378      	movs	r3, #120	; 0x78
 800d0f4:	4828      	ldr	r0, [pc, #160]	; (800d198 <_printf_i+0x248>)
 800d0f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d0fa:	e7e3      	b.n	800d0c4 <_printf_i+0x174>
 800d0fc:	0659      	lsls	r1, r3, #25
 800d0fe:	bf48      	it	mi
 800d100:	b2b6      	uxthmi	r6, r6
 800d102:	e7e6      	b.n	800d0d2 <_printf_i+0x182>
 800d104:	4615      	mov	r5, r2
 800d106:	e7bb      	b.n	800d080 <_printf_i+0x130>
 800d108:	682b      	ldr	r3, [r5, #0]
 800d10a:	6826      	ldr	r6, [r4, #0]
 800d10c:	6961      	ldr	r1, [r4, #20]
 800d10e:	1d18      	adds	r0, r3, #4
 800d110:	6028      	str	r0, [r5, #0]
 800d112:	0635      	lsls	r5, r6, #24
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	d501      	bpl.n	800d11c <_printf_i+0x1cc>
 800d118:	6019      	str	r1, [r3, #0]
 800d11a:	e002      	b.n	800d122 <_printf_i+0x1d2>
 800d11c:	0670      	lsls	r0, r6, #25
 800d11e:	d5fb      	bpl.n	800d118 <_printf_i+0x1c8>
 800d120:	8019      	strh	r1, [r3, #0]
 800d122:	2300      	movs	r3, #0
 800d124:	6123      	str	r3, [r4, #16]
 800d126:	4615      	mov	r5, r2
 800d128:	e7ba      	b.n	800d0a0 <_printf_i+0x150>
 800d12a:	682b      	ldr	r3, [r5, #0]
 800d12c:	1d1a      	adds	r2, r3, #4
 800d12e:	602a      	str	r2, [r5, #0]
 800d130:	681d      	ldr	r5, [r3, #0]
 800d132:	6862      	ldr	r2, [r4, #4]
 800d134:	2100      	movs	r1, #0
 800d136:	4628      	mov	r0, r5
 800d138:	f7f3 f872 	bl	8000220 <memchr>
 800d13c:	b108      	cbz	r0, 800d142 <_printf_i+0x1f2>
 800d13e:	1b40      	subs	r0, r0, r5
 800d140:	6060      	str	r0, [r4, #4]
 800d142:	6863      	ldr	r3, [r4, #4]
 800d144:	6123      	str	r3, [r4, #16]
 800d146:	2300      	movs	r3, #0
 800d148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d14c:	e7a8      	b.n	800d0a0 <_printf_i+0x150>
 800d14e:	6923      	ldr	r3, [r4, #16]
 800d150:	462a      	mov	r2, r5
 800d152:	4649      	mov	r1, r9
 800d154:	4640      	mov	r0, r8
 800d156:	47d0      	blx	sl
 800d158:	3001      	adds	r0, #1
 800d15a:	d0ab      	beq.n	800d0b4 <_printf_i+0x164>
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	079b      	lsls	r3, r3, #30
 800d160:	d413      	bmi.n	800d18a <_printf_i+0x23a>
 800d162:	68e0      	ldr	r0, [r4, #12]
 800d164:	9b03      	ldr	r3, [sp, #12]
 800d166:	4298      	cmp	r0, r3
 800d168:	bfb8      	it	lt
 800d16a:	4618      	movlt	r0, r3
 800d16c:	e7a4      	b.n	800d0b8 <_printf_i+0x168>
 800d16e:	2301      	movs	r3, #1
 800d170:	4632      	mov	r2, r6
 800d172:	4649      	mov	r1, r9
 800d174:	4640      	mov	r0, r8
 800d176:	47d0      	blx	sl
 800d178:	3001      	adds	r0, #1
 800d17a:	d09b      	beq.n	800d0b4 <_printf_i+0x164>
 800d17c:	3501      	adds	r5, #1
 800d17e:	68e3      	ldr	r3, [r4, #12]
 800d180:	9903      	ldr	r1, [sp, #12]
 800d182:	1a5b      	subs	r3, r3, r1
 800d184:	42ab      	cmp	r3, r5
 800d186:	dcf2      	bgt.n	800d16e <_printf_i+0x21e>
 800d188:	e7eb      	b.n	800d162 <_printf_i+0x212>
 800d18a:	2500      	movs	r5, #0
 800d18c:	f104 0619 	add.w	r6, r4, #25
 800d190:	e7f5      	b.n	800d17e <_printf_i+0x22e>
 800d192:	bf00      	nop
 800d194:	08012543 	.word	0x08012543
 800d198:	08012554 	.word	0x08012554

0800d19c <_sbrk_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	; (800d1b8 <_sbrk_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f4 f816 	bl	80011d8 <_sbrk>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_sbrk_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_sbrk_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	2000b288 	.word	0x2000b288

0800d1bc <_raise_r>:
 800d1bc:	291f      	cmp	r1, #31
 800d1be:	b538      	push	{r3, r4, r5, lr}
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	460d      	mov	r5, r1
 800d1c4:	d904      	bls.n	800d1d0 <_raise_r+0x14>
 800d1c6:	2316      	movs	r3, #22
 800d1c8:	6003      	str	r3, [r0, #0]
 800d1ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1ce:	bd38      	pop	{r3, r4, r5, pc}
 800d1d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1d2:	b112      	cbz	r2, 800d1da <_raise_r+0x1e>
 800d1d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1d8:	b94b      	cbnz	r3, 800d1ee <_raise_r+0x32>
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f000 f830 	bl	800d240 <_getpid_r>
 800d1e0:	462a      	mov	r2, r5
 800d1e2:	4601      	mov	r1, r0
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ea:	f000 b817 	b.w	800d21c <_kill_r>
 800d1ee:	2b01      	cmp	r3, #1
 800d1f0:	d00a      	beq.n	800d208 <_raise_r+0x4c>
 800d1f2:	1c59      	adds	r1, r3, #1
 800d1f4:	d103      	bne.n	800d1fe <_raise_r+0x42>
 800d1f6:	2316      	movs	r3, #22
 800d1f8:	6003      	str	r3, [r0, #0]
 800d1fa:	2001      	movs	r0, #1
 800d1fc:	e7e7      	b.n	800d1ce <_raise_r+0x12>
 800d1fe:	2400      	movs	r4, #0
 800d200:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d204:	4628      	mov	r0, r5
 800d206:	4798      	blx	r3
 800d208:	2000      	movs	r0, #0
 800d20a:	e7e0      	b.n	800d1ce <_raise_r+0x12>

0800d20c <raise>:
 800d20c:	4b02      	ldr	r3, [pc, #8]	; (800d218 <raise+0xc>)
 800d20e:	4601      	mov	r1, r0
 800d210:	6818      	ldr	r0, [r3, #0]
 800d212:	f7ff bfd3 	b.w	800d1bc <_raise_r>
 800d216:	bf00      	nop
 800d218:	200001a8 	.word	0x200001a8

0800d21c <_kill_r>:
 800d21c:	b538      	push	{r3, r4, r5, lr}
 800d21e:	4d07      	ldr	r5, [pc, #28]	; (800d23c <_kill_r+0x20>)
 800d220:	2300      	movs	r3, #0
 800d222:	4604      	mov	r4, r0
 800d224:	4608      	mov	r0, r1
 800d226:	4611      	mov	r1, r2
 800d228:	602b      	str	r3, [r5, #0]
 800d22a:	f7f3 ff9d 	bl	8001168 <_kill>
 800d22e:	1c43      	adds	r3, r0, #1
 800d230:	d102      	bne.n	800d238 <_kill_r+0x1c>
 800d232:	682b      	ldr	r3, [r5, #0]
 800d234:	b103      	cbz	r3, 800d238 <_kill_r+0x1c>
 800d236:	6023      	str	r3, [r4, #0]
 800d238:	bd38      	pop	{r3, r4, r5, pc}
 800d23a:	bf00      	nop
 800d23c:	2000b288 	.word	0x2000b288

0800d240 <_getpid_r>:
 800d240:	f7f3 bf90 	b.w	8001164 <_getpid>

0800d244 <strncmp>:
 800d244:	b510      	push	{r4, lr}
 800d246:	b17a      	cbz	r2, 800d268 <strncmp+0x24>
 800d248:	4603      	mov	r3, r0
 800d24a:	3901      	subs	r1, #1
 800d24c:	1884      	adds	r4, r0, r2
 800d24e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d252:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d256:	4290      	cmp	r0, r2
 800d258:	d101      	bne.n	800d25e <strncmp+0x1a>
 800d25a:	42a3      	cmp	r3, r4
 800d25c:	d101      	bne.n	800d262 <strncmp+0x1e>
 800d25e:	1a80      	subs	r0, r0, r2
 800d260:	bd10      	pop	{r4, pc}
 800d262:	2800      	cmp	r0, #0
 800d264:	d1f3      	bne.n	800d24e <strncmp+0xa>
 800d266:	e7fa      	b.n	800d25e <strncmp+0x1a>
 800d268:	4610      	mov	r0, r2
 800d26a:	e7f9      	b.n	800d260 <strncmp+0x1c>

0800d26c <strstr>:
 800d26c:	780a      	ldrb	r2, [r1, #0]
 800d26e:	b570      	push	{r4, r5, r6, lr}
 800d270:	b96a      	cbnz	r2, 800d28e <strstr+0x22>
 800d272:	bd70      	pop	{r4, r5, r6, pc}
 800d274:	429a      	cmp	r2, r3
 800d276:	d109      	bne.n	800d28c <strstr+0x20>
 800d278:	460c      	mov	r4, r1
 800d27a:	4605      	mov	r5, r0
 800d27c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d280:	2b00      	cmp	r3, #0
 800d282:	d0f6      	beq.n	800d272 <strstr+0x6>
 800d284:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d288:	429e      	cmp	r6, r3
 800d28a:	d0f7      	beq.n	800d27c <strstr+0x10>
 800d28c:	3001      	adds	r0, #1
 800d28e:	7803      	ldrb	r3, [r0, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1ef      	bne.n	800d274 <strstr+0x8>
 800d294:	4618      	mov	r0, r3
 800d296:	e7ec      	b.n	800d272 <strstr+0x6>

0800d298 <sulp>:
 800d298:	b570      	push	{r4, r5, r6, lr}
 800d29a:	4604      	mov	r4, r0
 800d29c:	460d      	mov	r5, r1
 800d29e:	ec45 4b10 	vmov	d0, r4, r5
 800d2a2:	4616      	mov	r6, r2
 800d2a4:	f002 fd8a 	bl	800fdbc <__ulp>
 800d2a8:	ec51 0b10 	vmov	r0, r1, d0
 800d2ac:	b17e      	cbz	r6, 800d2ce <sulp+0x36>
 800d2ae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d2b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	dd09      	ble.n	800d2ce <sulp+0x36>
 800d2ba:	051b      	lsls	r3, r3, #20
 800d2bc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d2c0:	2400      	movs	r4, #0
 800d2c2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d2c6:	4622      	mov	r2, r4
 800d2c8:	462b      	mov	r3, r5
 800d2ca:	f7f3 f9b5 	bl	8000638 <__aeabi_dmul>
 800d2ce:	bd70      	pop	{r4, r5, r6, pc}

0800d2d0 <_strtod_l>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	ed2d 8b02 	vpush	{d8}
 800d2d8:	b09d      	sub	sp, #116	; 0x74
 800d2da:	461f      	mov	r7, r3
 800d2dc:	2300      	movs	r3, #0
 800d2de:	9318      	str	r3, [sp, #96]	; 0x60
 800d2e0:	4ba2      	ldr	r3, [pc, #648]	; (800d56c <_strtod_l+0x29c>)
 800d2e2:	9213      	str	r2, [sp, #76]	; 0x4c
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	9305      	str	r3, [sp, #20]
 800d2e8:	4604      	mov	r4, r0
 800d2ea:	4618      	mov	r0, r3
 800d2ec:	4688      	mov	r8, r1
 800d2ee:	f7f2 ff89 	bl	8000204 <strlen>
 800d2f2:	f04f 0a00 	mov.w	sl, #0
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	f04f 0b00 	mov.w	fp, #0
 800d2fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d302:	781a      	ldrb	r2, [r3, #0]
 800d304:	2a2b      	cmp	r2, #43	; 0x2b
 800d306:	d04e      	beq.n	800d3a6 <_strtod_l+0xd6>
 800d308:	d83b      	bhi.n	800d382 <_strtod_l+0xb2>
 800d30a:	2a0d      	cmp	r2, #13
 800d30c:	d834      	bhi.n	800d378 <_strtod_l+0xa8>
 800d30e:	2a08      	cmp	r2, #8
 800d310:	d834      	bhi.n	800d37c <_strtod_l+0xac>
 800d312:	2a00      	cmp	r2, #0
 800d314:	d03e      	beq.n	800d394 <_strtod_l+0xc4>
 800d316:	2300      	movs	r3, #0
 800d318:	930a      	str	r3, [sp, #40]	; 0x28
 800d31a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d31c:	7833      	ldrb	r3, [r6, #0]
 800d31e:	2b30      	cmp	r3, #48	; 0x30
 800d320:	f040 80b0 	bne.w	800d484 <_strtod_l+0x1b4>
 800d324:	7873      	ldrb	r3, [r6, #1]
 800d326:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d32a:	2b58      	cmp	r3, #88	; 0x58
 800d32c:	d168      	bne.n	800d400 <_strtod_l+0x130>
 800d32e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	ab18      	add	r3, sp, #96	; 0x60
 800d334:	9702      	str	r7, [sp, #8]
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	4a8d      	ldr	r2, [pc, #564]	; (800d570 <_strtod_l+0x2a0>)
 800d33a:	ab19      	add	r3, sp, #100	; 0x64
 800d33c:	a917      	add	r1, sp, #92	; 0x5c
 800d33e:	4620      	mov	r0, r4
 800d340:	f001 fe9c 	bl	800f07c <__gethex>
 800d344:	f010 0707 	ands.w	r7, r0, #7
 800d348:	4605      	mov	r5, r0
 800d34a:	d005      	beq.n	800d358 <_strtod_l+0x88>
 800d34c:	2f06      	cmp	r7, #6
 800d34e:	d12c      	bne.n	800d3aa <_strtod_l+0xda>
 800d350:	3601      	adds	r6, #1
 800d352:	2300      	movs	r3, #0
 800d354:	9617      	str	r6, [sp, #92]	; 0x5c
 800d356:	930a      	str	r3, [sp, #40]	; 0x28
 800d358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f040 8590 	bne.w	800de80 <_strtod_l+0xbb0>
 800d360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d362:	b1eb      	cbz	r3, 800d3a0 <_strtod_l+0xd0>
 800d364:	4652      	mov	r2, sl
 800d366:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d36a:	ec43 2b10 	vmov	d0, r2, r3
 800d36e:	b01d      	add	sp, #116	; 0x74
 800d370:	ecbd 8b02 	vpop	{d8}
 800d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d378:	2a20      	cmp	r2, #32
 800d37a:	d1cc      	bne.n	800d316 <_strtod_l+0x46>
 800d37c:	3301      	adds	r3, #1
 800d37e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d380:	e7be      	b.n	800d300 <_strtod_l+0x30>
 800d382:	2a2d      	cmp	r2, #45	; 0x2d
 800d384:	d1c7      	bne.n	800d316 <_strtod_l+0x46>
 800d386:	2201      	movs	r2, #1
 800d388:	920a      	str	r2, [sp, #40]	; 0x28
 800d38a:	1c5a      	adds	r2, r3, #1
 800d38c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d38e:	785b      	ldrb	r3, [r3, #1]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d1c2      	bne.n	800d31a <_strtod_l+0x4a>
 800d394:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d396:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f040 856e 	bne.w	800de7c <_strtod_l+0xbac>
 800d3a0:	4652      	mov	r2, sl
 800d3a2:	465b      	mov	r3, fp
 800d3a4:	e7e1      	b.n	800d36a <_strtod_l+0x9a>
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	e7ee      	b.n	800d388 <_strtod_l+0xb8>
 800d3aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d3ac:	b13a      	cbz	r2, 800d3be <_strtod_l+0xee>
 800d3ae:	2135      	movs	r1, #53	; 0x35
 800d3b0:	a81a      	add	r0, sp, #104	; 0x68
 800d3b2:	f002 fe0e 	bl	800ffd2 <__copybits>
 800d3b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d3b8:	4620      	mov	r0, r4
 800d3ba:	f002 f9cd 	bl	800f758 <_Bfree>
 800d3be:	3f01      	subs	r7, #1
 800d3c0:	2f04      	cmp	r7, #4
 800d3c2:	d806      	bhi.n	800d3d2 <_strtod_l+0x102>
 800d3c4:	e8df f007 	tbb	[pc, r7]
 800d3c8:	1714030a 	.word	0x1714030a
 800d3cc:	0a          	.byte	0x0a
 800d3cd:	00          	.byte	0x00
 800d3ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d3d2:	0728      	lsls	r0, r5, #28
 800d3d4:	d5c0      	bpl.n	800d358 <_strtod_l+0x88>
 800d3d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d3da:	e7bd      	b.n	800d358 <_strtod_l+0x88>
 800d3dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d3e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d3e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d3e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d3ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d3ee:	e7f0      	b.n	800d3d2 <_strtod_l+0x102>
 800d3f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d574 <_strtod_l+0x2a4>
 800d3f4:	e7ed      	b.n	800d3d2 <_strtod_l+0x102>
 800d3f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d3fa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d3fe:	e7e8      	b.n	800d3d2 <_strtod_l+0x102>
 800d400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	9217      	str	r2, [sp, #92]	; 0x5c
 800d406:	785b      	ldrb	r3, [r3, #1]
 800d408:	2b30      	cmp	r3, #48	; 0x30
 800d40a:	d0f9      	beq.n	800d400 <_strtod_l+0x130>
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d0a3      	beq.n	800d358 <_strtod_l+0x88>
 800d410:	2301      	movs	r3, #1
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	9304      	str	r3, [sp, #16]
 800d418:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d41a:	9308      	str	r3, [sp, #32]
 800d41c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d420:	464f      	mov	r7, r9
 800d422:	220a      	movs	r2, #10
 800d424:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d426:	7806      	ldrb	r6, [r0, #0]
 800d428:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d42c:	b2d9      	uxtb	r1, r3
 800d42e:	2909      	cmp	r1, #9
 800d430:	d92a      	bls.n	800d488 <_strtod_l+0x1b8>
 800d432:	9905      	ldr	r1, [sp, #20]
 800d434:	462a      	mov	r2, r5
 800d436:	f7ff ff05 	bl	800d244 <strncmp>
 800d43a:	b398      	cbz	r0, 800d4a4 <_strtod_l+0x1d4>
 800d43c:	2000      	movs	r0, #0
 800d43e:	4632      	mov	r2, r6
 800d440:	463d      	mov	r5, r7
 800d442:	9005      	str	r0, [sp, #20]
 800d444:	4603      	mov	r3, r0
 800d446:	2a65      	cmp	r2, #101	; 0x65
 800d448:	d001      	beq.n	800d44e <_strtod_l+0x17e>
 800d44a:	2a45      	cmp	r2, #69	; 0x45
 800d44c:	d118      	bne.n	800d480 <_strtod_l+0x1b0>
 800d44e:	b91d      	cbnz	r5, 800d458 <_strtod_l+0x188>
 800d450:	9a04      	ldr	r2, [sp, #16]
 800d452:	4302      	orrs	r2, r0
 800d454:	d09e      	beq.n	800d394 <_strtod_l+0xc4>
 800d456:	2500      	movs	r5, #0
 800d458:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d45c:	f108 0201 	add.w	r2, r8, #1
 800d460:	9217      	str	r2, [sp, #92]	; 0x5c
 800d462:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d466:	2a2b      	cmp	r2, #43	; 0x2b
 800d468:	d075      	beq.n	800d556 <_strtod_l+0x286>
 800d46a:	2a2d      	cmp	r2, #45	; 0x2d
 800d46c:	d07b      	beq.n	800d566 <_strtod_l+0x296>
 800d46e:	f04f 0c00 	mov.w	ip, #0
 800d472:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d476:	2909      	cmp	r1, #9
 800d478:	f240 8082 	bls.w	800d580 <_strtod_l+0x2b0>
 800d47c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d480:	2600      	movs	r6, #0
 800d482:	e09d      	b.n	800d5c0 <_strtod_l+0x2f0>
 800d484:	2300      	movs	r3, #0
 800d486:	e7c4      	b.n	800d412 <_strtod_l+0x142>
 800d488:	2f08      	cmp	r7, #8
 800d48a:	bfd8      	it	le
 800d48c:	9907      	ldrle	r1, [sp, #28]
 800d48e:	f100 0001 	add.w	r0, r0, #1
 800d492:	bfda      	itte	le
 800d494:	fb02 3301 	mlale	r3, r2, r1, r3
 800d498:	9307      	strle	r3, [sp, #28]
 800d49a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d49e:	3701      	adds	r7, #1
 800d4a0:	9017      	str	r0, [sp, #92]	; 0x5c
 800d4a2:	e7bf      	b.n	800d424 <_strtod_l+0x154>
 800d4a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4a6:	195a      	adds	r2, r3, r5
 800d4a8:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4aa:	5d5a      	ldrb	r2, [r3, r5]
 800d4ac:	2f00      	cmp	r7, #0
 800d4ae:	d037      	beq.n	800d520 <_strtod_l+0x250>
 800d4b0:	9005      	str	r0, [sp, #20]
 800d4b2:	463d      	mov	r5, r7
 800d4b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d4b8:	2b09      	cmp	r3, #9
 800d4ba:	d912      	bls.n	800d4e2 <_strtod_l+0x212>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	e7c2      	b.n	800d446 <_strtod_l+0x176>
 800d4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4c6:	785a      	ldrb	r2, [r3, #1]
 800d4c8:	3001      	adds	r0, #1
 800d4ca:	2a30      	cmp	r2, #48	; 0x30
 800d4cc:	d0f8      	beq.n	800d4c0 <_strtod_l+0x1f0>
 800d4ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d4d2:	2b08      	cmp	r3, #8
 800d4d4:	f200 84d9 	bhi.w	800de8a <_strtod_l+0xbba>
 800d4d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4da:	9005      	str	r0, [sp, #20]
 800d4dc:	2000      	movs	r0, #0
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	4605      	mov	r5, r0
 800d4e2:	3a30      	subs	r2, #48	; 0x30
 800d4e4:	f100 0301 	add.w	r3, r0, #1
 800d4e8:	d014      	beq.n	800d514 <_strtod_l+0x244>
 800d4ea:	9905      	ldr	r1, [sp, #20]
 800d4ec:	4419      	add	r1, r3
 800d4ee:	9105      	str	r1, [sp, #20]
 800d4f0:	462b      	mov	r3, r5
 800d4f2:	eb00 0e05 	add.w	lr, r0, r5
 800d4f6:	210a      	movs	r1, #10
 800d4f8:	4573      	cmp	r3, lr
 800d4fa:	d113      	bne.n	800d524 <_strtod_l+0x254>
 800d4fc:	182b      	adds	r3, r5, r0
 800d4fe:	2b08      	cmp	r3, #8
 800d500:	f105 0501 	add.w	r5, r5, #1
 800d504:	4405      	add	r5, r0
 800d506:	dc1c      	bgt.n	800d542 <_strtod_l+0x272>
 800d508:	9907      	ldr	r1, [sp, #28]
 800d50a:	230a      	movs	r3, #10
 800d50c:	fb03 2301 	mla	r3, r3, r1, r2
 800d510:	9307      	str	r3, [sp, #28]
 800d512:	2300      	movs	r3, #0
 800d514:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d516:	1c51      	adds	r1, r2, #1
 800d518:	9117      	str	r1, [sp, #92]	; 0x5c
 800d51a:	7852      	ldrb	r2, [r2, #1]
 800d51c:	4618      	mov	r0, r3
 800d51e:	e7c9      	b.n	800d4b4 <_strtod_l+0x1e4>
 800d520:	4638      	mov	r0, r7
 800d522:	e7d2      	b.n	800d4ca <_strtod_l+0x1fa>
 800d524:	2b08      	cmp	r3, #8
 800d526:	dc04      	bgt.n	800d532 <_strtod_l+0x262>
 800d528:	9e07      	ldr	r6, [sp, #28]
 800d52a:	434e      	muls	r6, r1
 800d52c:	9607      	str	r6, [sp, #28]
 800d52e:	3301      	adds	r3, #1
 800d530:	e7e2      	b.n	800d4f8 <_strtod_l+0x228>
 800d532:	f103 0c01 	add.w	ip, r3, #1
 800d536:	f1bc 0f10 	cmp.w	ip, #16
 800d53a:	bfd8      	it	le
 800d53c:	fb01 f909 	mulle.w	r9, r1, r9
 800d540:	e7f5      	b.n	800d52e <_strtod_l+0x25e>
 800d542:	2d10      	cmp	r5, #16
 800d544:	bfdc      	itt	le
 800d546:	230a      	movle	r3, #10
 800d548:	fb03 2909 	mlale	r9, r3, r9, r2
 800d54c:	e7e1      	b.n	800d512 <_strtod_l+0x242>
 800d54e:	2300      	movs	r3, #0
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	2301      	movs	r3, #1
 800d554:	e77c      	b.n	800d450 <_strtod_l+0x180>
 800d556:	f04f 0c00 	mov.w	ip, #0
 800d55a:	f108 0202 	add.w	r2, r8, #2
 800d55e:	9217      	str	r2, [sp, #92]	; 0x5c
 800d560:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d564:	e785      	b.n	800d472 <_strtod_l+0x1a2>
 800d566:	f04f 0c01 	mov.w	ip, #1
 800d56a:	e7f6      	b.n	800d55a <_strtod_l+0x28a>
 800d56c:	0801274c 	.word	0x0801274c
 800d570:	08012568 	.word	0x08012568
 800d574:	7ff00000 	.word	0x7ff00000
 800d578:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d57a:	1c51      	adds	r1, r2, #1
 800d57c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d57e:	7852      	ldrb	r2, [r2, #1]
 800d580:	2a30      	cmp	r2, #48	; 0x30
 800d582:	d0f9      	beq.n	800d578 <_strtod_l+0x2a8>
 800d584:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d588:	2908      	cmp	r1, #8
 800d58a:	f63f af79 	bhi.w	800d480 <_strtod_l+0x1b0>
 800d58e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d592:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d594:	9206      	str	r2, [sp, #24]
 800d596:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d598:	1c51      	adds	r1, r2, #1
 800d59a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d59c:	7852      	ldrb	r2, [r2, #1]
 800d59e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d5a2:	2e09      	cmp	r6, #9
 800d5a4:	d937      	bls.n	800d616 <_strtod_l+0x346>
 800d5a6:	9e06      	ldr	r6, [sp, #24]
 800d5a8:	1b89      	subs	r1, r1, r6
 800d5aa:	2908      	cmp	r1, #8
 800d5ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d5b0:	dc02      	bgt.n	800d5b8 <_strtod_l+0x2e8>
 800d5b2:	4576      	cmp	r6, lr
 800d5b4:	bfa8      	it	ge
 800d5b6:	4676      	movge	r6, lr
 800d5b8:	f1bc 0f00 	cmp.w	ip, #0
 800d5bc:	d000      	beq.n	800d5c0 <_strtod_l+0x2f0>
 800d5be:	4276      	negs	r6, r6
 800d5c0:	2d00      	cmp	r5, #0
 800d5c2:	d14d      	bne.n	800d660 <_strtod_l+0x390>
 800d5c4:	9904      	ldr	r1, [sp, #16]
 800d5c6:	4301      	orrs	r1, r0
 800d5c8:	f47f aec6 	bne.w	800d358 <_strtod_l+0x88>
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f47f aee1 	bne.w	800d394 <_strtod_l+0xc4>
 800d5d2:	2a69      	cmp	r2, #105	; 0x69
 800d5d4:	d027      	beq.n	800d626 <_strtod_l+0x356>
 800d5d6:	dc24      	bgt.n	800d622 <_strtod_l+0x352>
 800d5d8:	2a49      	cmp	r2, #73	; 0x49
 800d5da:	d024      	beq.n	800d626 <_strtod_l+0x356>
 800d5dc:	2a4e      	cmp	r2, #78	; 0x4e
 800d5de:	f47f aed9 	bne.w	800d394 <_strtod_l+0xc4>
 800d5e2:	499f      	ldr	r1, [pc, #636]	; (800d860 <_strtod_l+0x590>)
 800d5e4:	a817      	add	r0, sp, #92	; 0x5c
 800d5e6:	f001 ffa1 	bl	800f52c <__match>
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	f43f aed2 	beq.w	800d394 <_strtod_l+0xc4>
 800d5f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	2b28      	cmp	r3, #40	; 0x28
 800d5f6:	d12d      	bne.n	800d654 <_strtod_l+0x384>
 800d5f8:	499a      	ldr	r1, [pc, #616]	; (800d864 <_strtod_l+0x594>)
 800d5fa:	aa1a      	add	r2, sp, #104	; 0x68
 800d5fc:	a817      	add	r0, sp, #92	; 0x5c
 800d5fe:	f001 ffa9 	bl	800f554 <__hexnan>
 800d602:	2805      	cmp	r0, #5
 800d604:	d126      	bne.n	800d654 <_strtod_l+0x384>
 800d606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d608:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d60c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d610:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d614:	e6a0      	b.n	800d358 <_strtod_l+0x88>
 800d616:	210a      	movs	r1, #10
 800d618:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d61c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d620:	e7b9      	b.n	800d596 <_strtod_l+0x2c6>
 800d622:	2a6e      	cmp	r2, #110	; 0x6e
 800d624:	e7db      	b.n	800d5de <_strtod_l+0x30e>
 800d626:	4990      	ldr	r1, [pc, #576]	; (800d868 <_strtod_l+0x598>)
 800d628:	a817      	add	r0, sp, #92	; 0x5c
 800d62a:	f001 ff7f 	bl	800f52c <__match>
 800d62e:	2800      	cmp	r0, #0
 800d630:	f43f aeb0 	beq.w	800d394 <_strtod_l+0xc4>
 800d634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d636:	498d      	ldr	r1, [pc, #564]	; (800d86c <_strtod_l+0x59c>)
 800d638:	3b01      	subs	r3, #1
 800d63a:	a817      	add	r0, sp, #92	; 0x5c
 800d63c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d63e:	f001 ff75 	bl	800f52c <__match>
 800d642:	b910      	cbnz	r0, 800d64a <_strtod_l+0x37a>
 800d644:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d646:	3301      	adds	r3, #1
 800d648:	9317      	str	r3, [sp, #92]	; 0x5c
 800d64a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d87c <_strtod_l+0x5ac>
 800d64e:	f04f 0a00 	mov.w	sl, #0
 800d652:	e681      	b.n	800d358 <_strtod_l+0x88>
 800d654:	4886      	ldr	r0, [pc, #536]	; (800d870 <_strtod_l+0x5a0>)
 800d656:	f002 fe8b 	bl	8010370 <nan>
 800d65a:	ec5b ab10 	vmov	sl, fp, d0
 800d65e:	e67b      	b.n	800d358 <_strtod_l+0x88>
 800d660:	9b05      	ldr	r3, [sp, #20]
 800d662:	9807      	ldr	r0, [sp, #28]
 800d664:	1af3      	subs	r3, r6, r3
 800d666:	2f00      	cmp	r7, #0
 800d668:	bf08      	it	eq
 800d66a:	462f      	moveq	r7, r5
 800d66c:	2d10      	cmp	r5, #16
 800d66e:	9306      	str	r3, [sp, #24]
 800d670:	46a8      	mov	r8, r5
 800d672:	bfa8      	it	ge
 800d674:	f04f 0810 	movge.w	r8, #16
 800d678:	f7f2 ff64 	bl	8000544 <__aeabi_ui2d>
 800d67c:	2d09      	cmp	r5, #9
 800d67e:	4682      	mov	sl, r0
 800d680:	468b      	mov	fp, r1
 800d682:	dd13      	ble.n	800d6ac <_strtod_l+0x3dc>
 800d684:	4b7b      	ldr	r3, [pc, #492]	; (800d874 <_strtod_l+0x5a4>)
 800d686:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d68a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d68e:	f7f2 ffd3 	bl	8000638 <__aeabi_dmul>
 800d692:	4682      	mov	sl, r0
 800d694:	4648      	mov	r0, r9
 800d696:	468b      	mov	fp, r1
 800d698:	f7f2 ff54 	bl	8000544 <__aeabi_ui2d>
 800d69c:	4602      	mov	r2, r0
 800d69e:	460b      	mov	r3, r1
 800d6a0:	4650      	mov	r0, sl
 800d6a2:	4659      	mov	r1, fp
 800d6a4:	f7f2 fe12 	bl	80002cc <__adddf3>
 800d6a8:	4682      	mov	sl, r0
 800d6aa:	468b      	mov	fp, r1
 800d6ac:	2d0f      	cmp	r5, #15
 800d6ae:	dc38      	bgt.n	800d722 <_strtod_l+0x452>
 800d6b0:	9b06      	ldr	r3, [sp, #24]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	f43f ae50 	beq.w	800d358 <_strtod_l+0x88>
 800d6b8:	dd24      	ble.n	800d704 <_strtod_l+0x434>
 800d6ba:	2b16      	cmp	r3, #22
 800d6bc:	dc0b      	bgt.n	800d6d6 <_strtod_l+0x406>
 800d6be:	496d      	ldr	r1, [pc, #436]	; (800d874 <_strtod_l+0x5a4>)
 800d6c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d6c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6c8:	4652      	mov	r2, sl
 800d6ca:	465b      	mov	r3, fp
 800d6cc:	f7f2 ffb4 	bl	8000638 <__aeabi_dmul>
 800d6d0:	4682      	mov	sl, r0
 800d6d2:	468b      	mov	fp, r1
 800d6d4:	e640      	b.n	800d358 <_strtod_l+0x88>
 800d6d6:	9a06      	ldr	r2, [sp, #24]
 800d6d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	db20      	blt.n	800d722 <_strtod_l+0x452>
 800d6e0:	4c64      	ldr	r4, [pc, #400]	; (800d874 <_strtod_l+0x5a4>)
 800d6e2:	f1c5 050f 	rsb	r5, r5, #15
 800d6e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d6ea:	4652      	mov	r2, sl
 800d6ec:	465b      	mov	r3, fp
 800d6ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6f2:	f7f2 ffa1 	bl	8000638 <__aeabi_dmul>
 800d6f6:	9b06      	ldr	r3, [sp, #24]
 800d6f8:	1b5d      	subs	r5, r3, r5
 800d6fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d6fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d702:	e7e3      	b.n	800d6cc <_strtod_l+0x3fc>
 800d704:	9b06      	ldr	r3, [sp, #24]
 800d706:	3316      	adds	r3, #22
 800d708:	db0b      	blt.n	800d722 <_strtod_l+0x452>
 800d70a:	9b05      	ldr	r3, [sp, #20]
 800d70c:	1b9e      	subs	r6, r3, r6
 800d70e:	4b59      	ldr	r3, [pc, #356]	; (800d874 <_strtod_l+0x5a4>)
 800d710:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d714:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d718:	4650      	mov	r0, sl
 800d71a:	4659      	mov	r1, fp
 800d71c:	f7f3 f8b6 	bl	800088c <__aeabi_ddiv>
 800d720:	e7d6      	b.n	800d6d0 <_strtod_l+0x400>
 800d722:	9b06      	ldr	r3, [sp, #24]
 800d724:	eba5 0808 	sub.w	r8, r5, r8
 800d728:	4498      	add	r8, r3
 800d72a:	f1b8 0f00 	cmp.w	r8, #0
 800d72e:	dd74      	ble.n	800d81a <_strtod_l+0x54a>
 800d730:	f018 030f 	ands.w	r3, r8, #15
 800d734:	d00a      	beq.n	800d74c <_strtod_l+0x47c>
 800d736:	494f      	ldr	r1, [pc, #316]	; (800d874 <_strtod_l+0x5a4>)
 800d738:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d73c:	4652      	mov	r2, sl
 800d73e:	465b      	mov	r3, fp
 800d740:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d744:	f7f2 ff78 	bl	8000638 <__aeabi_dmul>
 800d748:	4682      	mov	sl, r0
 800d74a:	468b      	mov	fp, r1
 800d74c:	f038 080f 	bics.w	r8, r8, #15
 800d750:	d04f      	beq.n	800d7f2 <_strtod_l+0x522>
 800d752:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d756:	dd22      	ble.n	800d79e <_strtod_l+0x4ce>
 800d758:	2500      	movs	r5, #0
 800d75a:	462e      	mov	r6, r5
 800d75c:	9507      	str	r5, [sp, #28]
 800d75e:	9505      	str	r5, [sp, #20]
 800d760:	2322      	movs	r3, #34	; 0x22
 800d762:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d87c <_strtod_l+0x5ac>
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	f04f 0a00 	mov.w	sl, #0
 800d76c:	9b07      	ldr	r3, [sp, #28]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f43f adf2 	beq.w	800d358 <_strtod_l+0x88>
 800d774:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d776:	4620      	mov	r0, r4
 800d778:	f001 ffee 	bl	800f758 <_Bfree>
 800d77c:	9905      	ldr	r1, [sp, #20]
 800d77e:	4620      	mov	r0, r4
 800d780:	f001 ffea 	bl	800f758 <_Bfree>
 800d784:	4631      	mov	r1, r6
 800d786:	4620      	mov	r0, r4
 800d788:	f001 ffe6 	bl	800f758 <_Bfree>
 800d78c:	9907      	ldr	r1, [sp, #28]
 800d78e:	4620      	mov	r0, r4
 800d790:	f001 ffe2 	bl	800f758 <_Bfree>
 800d794:	4629      	mov	r1, r5
 800d796:	4620      	mov	r0, r4
 800d798:	f001 ffde 	bl	800f758 <_Bfree>
 800d79c:	e5dc      	b.n	800d358 <_strtod_l+0x88>
 800d79e:	4b36      	ldr	r3, [pc, #216]	; (800d878 <_strtod_l+0x5a8>)
 800d7a0:	9304      	str	r3, [sp, #16]
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d7a8:	4650      	mov	r0, sl
 800d7aa:	4659      	mov	r1, fp
 800d7ac:	4699      	mov	r9, r3
 800d7ae:	f1b8 0f01 	cmp.w	r8, #1
 800d7b2:	dc21      	bgt.n	800d7f8 <_strtod_l+0x528>
 800d7b4:	b10b      	cbz	r3, 800d7ba <_strtod_l+0x4ea>
 800d7b6:	4682      	mov	sl, r0
 800d7b8:	468b      	mov	fp, r1
 800d7ba:	4b2f      	ldr	r3, [pc, #188]	; (800d878 <_strtod_l+0x5a8>)
 800d7bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d7c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d7c4:	4652      	mov	r2, sl
 800d7c6:	465b      	mov	r3, fp
 800d7c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d7cc:	f7f2 ff34 	bl	8000638 <__aeabi_dmul>
 800d7d0:	4b2a      	ldr	r3, [pc, #168]	; (800d87c <_strtod_l+0x5ac>)
 800d7d2:	460a      	mov	r2, r1
 800d7d4:	400b      	ands	r3, r1
 800d7d6:	492a      	ldr	r1, [pc, #168]	; (800d880 <_strtod_l+0x5b0>)
 800d7d8:	428b      	cmp	r3, r1
 800d7da:	4682      	mov	sl, r0
 800d7dc:	d8bc      	bhi.n	800d758 <_strtod_l+0x488>
 800d7de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d7e2:	428b      	cmp	r3, r1
 800d7e4:	bf86      	itte	hi
 800d7e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d884 <_strtod_l+0x5b4>
 800d7ea:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800d7ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	e084      	b.n	800d902 <_strtod_l+0x632>
 800d7f8:	f018 0f01 	tst.w	r8, #1
 800d7fc:	d005      	beq.n	800d80a <_strtod_l+0x53a>
 800d7fe:	9b04      	ldr	r3, [sp, #16]
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	f7f2 ff18 	bl	8000638 <__aeabi_dmul>
 800d808:	2301      	movs	r3, #1
 800d80a:	9a04      	ldr	r2, [sp, #16]
 800d80c:	3208      	adds	r2, #8
 800d80e:	f109 0901 	add.w	r9, r9, #1
 800d812:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d816:	9204      	str	r2, [sp, #16]
 800d818:	e7c9      	b.n	800d7ae <_strtod_l+0x4de>
 800d81a:	d0ea      	beq.n	800d7f2 <_strtod_l+0x522>
 800d81c:	f1c8 0800 	rsb	r8, r8, #0
 800d820:	f018 020f 	ands.w	r2, r8, #15
 800d824:	d00a      	beq.n	800d83c <_strtod_l+0x56c>
 800d826:	4b13      	ldr	r3, [pc, #76]	; (800d874 <_strtod_l+0x5a4>)
 800d828:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d82c:	4650      	mov	r0, sl
 800d82e:	4659      	mov	r1, fp
 800d830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d834:	f7f3 f82a 	bl	800088c <__aeabi_ddiv>
 800d838:	4682      	mov	sl, r0
 800d83a:	468b      	mov	fp, r1
 800d83c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d840:	d0d7      	beq.n	800d7f2 <_strtod_l+0x522>
 800d842:	f1b8 0f1f 	cmp.w	r8, #31
 800d846:	dd1f      	ble.n	800d888 <_strtod_l+0x5b8>
 800d848:	2500      	movs	r5, #0
 800d84a:	462e      	mov	r6, r5
 800d84c:	9507      	str	r5, [sp, #28]
 800d84e:	9505      	str	r5, [sp, #20]
 800d850:	2322      	movs	r3, #34	; 0x22
 800d852:	f04f 0a00 	mov.w	sl, #0
 800d856:	f04f 0b00 	mov.w	fp, #0
 800d85a:	6023      	str	r3, [r4, #0]
 800d85c:	e786      	b.n	800d76c <_strtod_l+0x49c>
 800d85e:	bf00      	nop
 800d860:	0801253e 	.word	0x0801253e
 800d864:	0801257c 	.word	0x0801257c
 800d868:	08012536 	.word	0x08012536
 800d86c:	080125f7 	.word	0x080125f7
 800d870:	080125f3 	.word	0x080125f3
 800d874:	080127e8 	.word	0x080127e8
 800d878:	080127c0 	.word	0x080127c0
 800d87c:	7ff00000 	.word	0x7ff00000
 800d880:	7ca00000 	.word	0x7ca00000
 800d884:	7fefffff 	.word	0x7fefffff
 800d888:	f018 0310 	ands.w	r3, r8, #16
 800d88c:	bf18      	it	ne
 800d88e:	236a      	movne	r3, #106	; 0x6a
 800d890:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dc40 <_strtod_l+0x970>
 800d894:	9304      	str	r3, [sp, #16]
 800d896:	4650      	mov	r0, sl
 800d898:	4659      	mov	r1, fp
 800d89a:	2300      	movs	r3, #0
 800d89c:	f018 0f01 	tst.w	r8, #1
 800d8a0:	d004      	beq.n	800d8ac <_strtod_l+0x5dc>
 800d8a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d8a6:	f7f2 fec7 	bl	8000638 <__aeabi_dmul>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d8b0:	f109 0908 	add.w	r9, r9, #8
 800d8b4:	d1f2      	bne.n	800d89c <_strtod_l+0x5cc>
 800d8b6:	b10b      	cbz	r3, 800d8bc <_strtod_l+0x5ec>
 800d8b8:	4682      	mov	sl, r0
 800d8ba:	468b      	mov	fp, r1
 800d8bc:	9b04      	ldr	r3, [sp, #16]
 800d8be:	b1c3      	cbz	r3, 800d8f2 <_strtod_l+0x622>
 800d8c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d8c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	4659      	mov	r1, fp
 800d8cc:	dd11      	ble.n	800d8f2 <_strtod_l+0x622>
 800d8ce:	2b1f      	cmp	r3, #31
 800d8d0:	f340 8124 	ble.w	800db1c <_strtod_l+0x84c>
 800d8d4:	2b34      	cmp	r3, #52	; 0x34
 800d8d6:	bfde      	ittt	le
 800d8d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d8dc:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800d8e0:	fa03 f202 	lslle.w	r2, r3, r2
 800d8e4:	f04f 0a00 	mov.w	sl, #0
 800d8e8:	bfcc      	ite	gt
 800d8ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d8ee:	ea02 0b01 	andle.w	fp, r2, r1
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	4650      	mov	r0, sl
 800d8f8:	4659      	mov	r1, fp
 800d8fa:	f7f3 f905 	bl	8000b08 <__aeabi_dcmpeq>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d1a2      	bne.n	800d848 <_strtod_l+0x578>
 800d902:	9b07      	ldr	r3, [sp, #28]
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	9908      	ldr	r1, [sp, #32]
 800d908:	462b      	mov	r3, r5
 800d90a:	463a      	mov	r2, r7
 800d90c:	4620      	mov	r0, r4
 800d90e:	f001 ff8b 	bl	800f828 <__s2b>
 800d912:	9007      	str	r0, [sp, #28]
 800d914:	2800      	cmp	r0, #0
 800d916:	f43f af1f 	beq.w	800d758 <_strtod_l+0x488>
 800d91a:	9b05      	ldr	r3, [sp, #20]
 800d91c:	1b9e      	subs	r6, r3, r6
 800d91e:	9b06      	ldr	r3, [sp, #24]
 800d920:	2b00      	cmp	r3, #0
 800d922:	bfb4      	ite	lt
 800d924:	4633      	movlt	r3, r6
 800d926:	2300      	movge	r3, #0
 800d928:	930c      	str	r3, [sp, #48]	; 0x30
 800d92a:	9b06      	ldr	r3, [sp, #24]
 800d92c:	2500      	movs	r5, #0
 800d92e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d932:	9312      	str	r3, [sp, #72]	; 0x48
 800d934:	462e      	mov	r6, r5
 800d936:	9b07      	ldr	r3, [sp, #28]
 800d938:	4620      	mov	r0, r4
 800d93a:	6859      	ldr	r1, [r3, #4]
 800d93c:	f001 fecc 	bl	800f6d8 <_Balloc>
 800d940:	9005      	str	r0, [sp, #20]
 800d942:	2800      	cmp	r0, #0
 800d944:	f43f af0c 	beq.w	800d760 <_strtod_l+0x490>
 800d948:	9b07      	ldr	r3, [sp, #28]
 800d94a:	691a      	ldr	r2, [r3, #16]
 800d94c:	3202      	adds	r2, #2
 800d94e:	f103 010c 	add.w	r1, r3, #12
 800d952:	0092      	lsls	r2, r2, #2
 800d954:	300c      	adds	r0, #12
 800d956:	f7fe fcf7 	bl	800c348 <memcpy>
 800d95a:	ec4b ab10 	vmov	d0, sl, fp
 800d95e:	aa1a      	add	r2, sp, #104	; 0x68
 800d960:	a919      	add	r1, sp, #100	; 0x64
 800d962:	4620      	mov	r0, r4
 800d964:	f002 faa6 	bl	800feb4 <__d2b>
 800d968:	ec4b ab18 	vmov	d8, sl, fp
 800d96c:	9018      	str	r0, [sp, #96]	; 0x60
 800d96e:	2800      	cmp	r0, #0
 800d970:	f43f aef6 	beq.w	800d760 <_strtod_l+0x490>
 800d974:	2101      	movs	r1, #1
 800d976:	4620      	mov	r0, r4
 800d978:	f001 fff0 	bl	800f95c <__i2b>
 800d97c:	4606      	mov	r6, r0
 800d97e:	2800      	cmp	r0, #0
 800d980:	f43f aeee 	beq.w	800d760 <_strtod_l+0x490>
 800d984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d986:	9904      	ldr	r1, [sp, #16]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	bfab      	itete	ge
 800d98c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d98e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d990:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d992:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d996:	bfac      	ite	ge
 800d998:	eb03 0902 	addge.w	r9, r3, r2
 800d99c:	1ad7      	sublt	r7, r2, r3
 800d99e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d9a0:	eba3 0801 	sub.w	r8, r3, r1
 800d9a4:	4490      	add	r8, r2
 800d9a6:	4ba1      	ldr	r3, [pc, #644]	; (800dc2c <_strtod_l+0x95c>)
 800d9a8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d9ac:	4598      	cmp	r8, r3
 800d9ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d9b2:	f280 80c7 	bge.w	800db44 <_strtod_l+0x874>
 800d9b6:	eba3 0308 	sub.w	r3, r3, r8
 800d9ba:	2b1f      	cmp	r3, #31
 800d9bc:	eba2 0203 	sub.w	r2, r2, r3
 800d9c0:	f04f 0101 	mov.w	r1, #1
 800d9c4:	f300 80b1 	bgt.w	800db2a <_strtod_l+0x85a>
 800d9c8:	fa01 f303 	lsl.w	r3, r1, r3
 800d9cc:	930d      	str	r3, [sp, #52]	; 0x34
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	9308      	str	r3, [sp, #32]
 800d9d2:	eb09 0802 	add.w	r8, r9, r2
 800d9d6:	9b04      	ldr	r3, [sp, #16]
 800d9d8:	45c1      	cmp	r9, r8
 800d9da:	4417      	add	r7, r2
 800d9dc:	441f      	add	r7, r3
 800d9de:	464b      	mov	r3, r9
 800d9e0:	bfa8      	it	ge
 800d9e2:	4643      	movge	r3, r8
 800d9e4:	42bb      	cmp	r3, r7
 800d9e6:	bfa8      	it	ge
 800d9e8:	463b      	movge	r3, r7
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	bfc2      	ittt	gt
 800d9ee:	eba8 0803 	subgt.w	r8, r8, r3
 800d9f2:	1aff      	subgt	r7, r7, r3
 800d9f4:	eba9 0903 	subgt.w	r9, r9, r3
 800d9f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	dd17      	ble.n	800da2e <_strtod_l+0x75e>
 800d9fe:	4631      	mov	r1, r6
 800da00:	461a      	mov	r2, r3
 800da02:	4620      	mov	r0, r4
 800da04:	f002 f86a 	bl	800fadc <__pow5mult>
 800da08:	4606      	mov	r6, r0
 800da0a:	2800      	cmp	r0, #0
 800da0c:	f43f aea8 	beq.w	800d760 <_strtod_l+0x490>
 800da10:	4601      	mov	r1, r0
 800da12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da14:	4620      	mov	r0, r4
 800da16:	f001 ffb7 	bl	800f988 <__multiply>
 800da1a:	900b      	str	r0, [sp, #44]	; 0x2c
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f43f ae9f 	beq.w	800d760 <_strtod_l+0x490>
 800da22:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da24:	4620      	mov	r0, r4
 800da26:	f001 fe97 	bl	800f758 <_Bfree>
 800da2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da2c:	9318      	str	r3, [sp, #96]	; 0x60
 800da2e:	f1b8 0f00 	cmp.w	r8, #0
 800da32:	f300 808c 	bgt.w	800db4e <_strtod_l+0x87e>
 800da36:	9b06      	ldr	r3, [sp, #24]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	dd08      	ble.n	800da4e <_strtod_l+0x77e>
 800da3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800da3e:	9905      	ldr	r1, [sp, #20]
 800da40:	4620      	mov	r0, r4
 800da42:	f002 f84b 	bl	800fadc <__pow5mult>
 800da46:	9005      	str	r0, [sp, #20]
 800da48:	2800      	cmp	r0, #0
 800da4a:	f43f ae89 	beq.w	800d760 <_strtod_l+0x490>
 800da4e:	2f00      	cmp	r7, #0
 800da50:	dd08      	ble.n	800da64 <_strtod_l+0x794>
 800da52:	9905      	ldr	r1, [sp, #20]
 800da54:	463a      	mov	r2, r7
 800da56:	4620      	mov	r0, r4
 800da58:	f002 f89a 	bl	800fb90 <__lshift>
 800da5c:	9005      	str	r0, [sp, #20]
 800da5e:	2800      	cmp	r0, #0
 800da60:	f43f ae7e 	beq.w	800d760 <_strtod_l+0x490>
 800da64:	f1b9 0f00 	cmp.w	r9, #0
 800da68:	dd08      	ble.n	800da7c <_strtod_l+0x7ac>
 800da6a:	4631      	mov	r1, r6
 800da6c:	464a      	mov	r2, r9
 800da6e:	4620      	mov	r0, r4
 800da70:	f002 f88e 	bl	800fb90 <__lshift>
 800da74:	4606      	mov	r6, r0
 800da76:	2800      	cmp	r0, #0
 800da78:	f43f ae72 	beq.w	800d760 <_strtod_l+0x490>
 800da7c:	9a05      	ldr	r2, [sp, #20]
 800da7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800da80:	4620      	mov	r0, r4
 800da82:	f002 f911 	bl	800fca8 <__mdiff>
 800da86:	4605      	mov	r5, r0
 800da88:	2800      	cmp	r0, #0
 800da8a:	f43f ae69 	beq.w	800d760 <_strtod_l+0x490>
 800da8e:	68c3      	ldr	r3, [r0, #12]
 800da90:	930b      	str	r3, [sp, #44]	; 0x2c
 800da92:	2300      	movs	r3, #0
 800da94:	60c3      	str	r3, [r0, #12]
 800da96:	4631      	mov	r1, r6
 800da98:	f002 f8ea 	bl	800fc70 <__mcmp>
 800da9c:	2800      	cmp	r0, #0
 800da9e:	da60      	bge.n	800db62 <_strtod_l+0x892>
 800daa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa2:	ea53 030a 	orrs.w	r3, r3, sl
 800daa6:	f040 8082 	bne.w	800dbae <_strtod_l+0x8de>
 800daaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d17d      	bne.n	800dbae <_strtod_l+0x8de>
 800dab2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dab6:	0d1b      	lsrs	r3, r3, #20
 800dab8:	051b      	lsls	r3, r3, #20
 800daba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800dabe:	d976      	bls.n	800dbae <_strtod_l+0x8de>
 800dac0:	696b      	ldr	r3, [r5, #20]
 800dac2:	b913      	cbnz	r3, 800daca <_strtod_l+0x7fa>
 800dac4:	692b      	ldr	r3, [r5, #16]
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	dd71      	ble.n	800dbae <_strtod_l+0x8de>
 800daca:	4629      	mov	r1, r5
 800dacc:	2201      	movs	r2, #1
 800dace:	4620      	mov	r0, r4
 800dad0:	f002 f85e 	bl	800fb90 <__lshift>
 800dad4:	4631      	mov	r1, r6
 800dad6:	4605      	mov	r5, r0
 800dad8:	f002 f8ca 	bl	800fc70 <__mcmp>
 800dadc:	2800      	cmp	r0, #0
 800dade:	dd66      	ble.n	800dbae <_strtod_l+0x8de>
 800dae0:	9904      	ldr	r1, [sp, #16]
 800dae2:	4a53      	ldr	r2, [pc, #332]	; (800dc30 <_strtod_l+0x960>)
 800dae4:	465b      	mov	r3, fp
 800dae6:	2900      	cmp	r1, #0
 800dae8:	f000 8081 	beq.w	800dbee <_strtod_l+0x91e>
 800daec:	ea02 010b 	and.w	r1, r2, fp
 800daf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800daf4:	dc7b      	bgt.n	800dbee <_strtod_l+0x91e>
 800daf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dafa:	f77f aea9 	ble.w	800d850 <_strtod_l+0x580>
 800dafe:	4b4d      	ldr	r3, [pc, #308]	; (800dc34 <_strtod_l+0x964>)
 800db00:	4650      	mov	r0, sl
 800db02:	4659      	mov	r1, fp
 800db04:	2200      	movs	r2, #0
 800db06:	f7f2 fd97 	bl	8000638 <__aeabi_dmul>
 800db0a:	460b      	mov	r3, r1
 800db0c:	4303      	orrs	r3, r0
 800db0e:	bf08      	it	eq
 800db10:	2322      	moveq	r3, #34	; 0x22
 800db12:	4682      	mov	sl, r0
 800db14:	468b      	mov	fp, r1
 800db16:	bf08      	it	eq
 800db18:	6023      	streq	r3, [r4, #0]
 800db1a:	e62b      	b.n	800d774 <_strtod_l+0x4a4>
 800db1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db20:	fa02 f303 	lsl.w	r3, r2, r3
 800db24:	ea03 0a0a 	and.w	sl, r3, sl
 800db28:	e6e3      	b.n	800d8f2 <_strtod_l+0x622>
 800db2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800db2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800db32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800db36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800db3a:	fa01 f308 	lsl.w	r3, r1, r8
 800db3e:	9308      	str	r3, [sp, #32]
 800db40:	910d      	str	r1, [sp, #52]	; 0x34
 800db42:	e746      	b.n	800d9d2 <_strtod_l+0x702>
 800db44:	2300      	movs	r3, #0
 800db46:	9308      	str	r3, [sp, #32]
 800db48:	2301      	movs	r3, #1
 800db4a:	930d      	str	r3, [sp, #52]	; 0x34
 800db4c:	e741      	b.n	800d9d2 <_strtod_l+0x702>
 800db4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db50:	4642      	mov	r2, r8
 800db52:	4620      	mov	r0, r4
 800db54:	f002 f81c 	bl	800fb90 <__lshift>
 800db58:	9018      	str	r0, [sp, #96]	; 0x60
 800db5a:	2800      	cmp	r0, #0
 800db5c:	f47f af6b 	bne.w	800da36 <_strtod_l+0x766>
 800db60:	e5fe      	b.n	800d760 <_strtod_l+0x490>
 800db62:	465f      	mov	r7, fp
 800db64:	d16e      	bne.n	800dc44 <_strtod_l+0x974>
 800db66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db6c:	b342      	cbz	r2, 800dbc0 <_strtod_l+0x8f0>
 800db6e:	4a32      	ldr	r2, [pc, #200]	; (800dc38 <_strtod_l+0x968>)
 800db70:	4293      	cmp	r3, r2
 800db72:	d128      	bne.n	800dbc6 <_strtod_l+0x8f6>
 800db74:	9b04      	ldr	r3, [sp, #16]
 800db76:	4651      	mov	r1, sl
 800db78:	b1eb      	cbz	r3, 800dbb6 <_strtod_l+0x8e6>
 800db7a:	4b2d      	ldr	r3, [pc, #180]	; (800dc30 <_strtod_l+0x960>)
 800db7c:	403b      	ands	r3, r7
 800db7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800db82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800db86:	d819      	bhi.n	800dbbc <_strtod_l+0x8ec>
 800db88:	0d1b      	lsrs	r3, r3, #20
 800db8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800db8e:	fa02 f303 	lsl.w	r3, r2, r3
 800db92:	4299      	cmp	r1, r3
 800db94:	d117      	bne.n	800dbc6 <_strtod_l+0x8f6>
 800db96:	4b29      	ldr	r3, [pc, #164]	; (800dc3c <_strtod_l+0x96c>)
 800db98:	429f      	cmp	r7, r3
 800db9a:	d102      	bne.n	800dba2 <_strtod_l+0x8d2>
 800db9c:	3101      	adds	r1, #1
 800db9e:	f43f addf 	beq.w	800d760 <_strtod_l+0x490>
 800dba2:	4b23      	ldr	r3, [pc, #140]	; (800dc30 <_strtod_l+0x960>)
 800dba4:	403b      	ands	r3, r7
 800dba6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dbaa:	f04f 0a00 	mov.w	sl, #0
 800dbae:	9b04      	ldr	r3, [sp, #16]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d1a4      	bne.n	800dafe <_strtod_l+0x82e>
 800dbb4:	e5de      	b.n	800d774 <_strtod_l+0x4a4>
 800dbb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dbba:	e7ea      	b.n	800db92 <_strtod_l+0x8c2>
 800dbbc:	4613      	mov	r3, r2
 800dbbe:	e7e8      	b.n	800db92 <_strtod_l+0x8c2>
 800dbc0:	ea53 030a 	orrs.w	r3, r3, sl
 800dbc4:	d08c      	beq.n	800dae0 <_strtod_l+0x810>
 800dbc6:	9b08      	ldr	r3, [sp, #32]
 800dbc8:	b1db      	cbz	r3, 800dc02 <_strtod_l+0x932>
 800dbca:	423b      	tst	r3, r7
 800dbcc:	d0ef      	beq.n	800dbae <_strtod_l+0x8de>
 800dbce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbd0:	9a04      	ldr	r2, [sp, #16]
 800dbd2:	4650      	mov	r0, sl
 800dbd4:	4659      	mov	r1, fp
 800dbd6:	b1c3      	cbz	r3, 800dc0a <_strtod_l+0x93a>
 800dbd8:	f7ff fb5e 	bl	800d298 <sulp>
 800dbdc:	4602      	mov	r2, r0
 800dbde:	460b      	mov	r3, r1
 800dbe0:	ec51 0b18 	vmov	r0, r1, d8
 800dbe4:	f7f2 fb72 	bl	80002cc <__adddf3>
 800dbe8:	4682      	mov	sl, r0
 800dbea:	468b      	mov	fp, r1
 800dbec:	e7df      	b.n	800dbae <_strtod_l+0x8de>
 800dbee:	4013      	ands	r3, r2
 800dbf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dbf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dbf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dbfc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dc00:	e7d5      	b.n	800dbae <_strtod_l+0x8de>
 800dc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc04:	ea13 0f0a 	tst.w	r3, sl
 800dc08:	e7e0      	b.n	800dbcc <_strtod_l+0x8fc>
 800dc0a:	f7ff fb45 	bl	800d298 <sulp>
 800dc0e:	4602      	mov	r2, r0
 800dc10:	460b      	mov	r3, r1
 800dc12:	ec51 0b18 	vmov	r0, r1, d8
 800dc16:	f7f2 fb57 	bl	80002c8 <__aeabi_dsub>
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4682      	mov	sl, r0
 800dc20:	468b      	mov	fp, r1
 800dc22:	f7f2 ff71 	bl	8000b08 <__aeabi_dcmpeq>
 800dc26:	2800      	cmp	r0, #0
 800dc28:	d0c1      	beq.n	800dbae <_strtod_l+0x8de>
 800dc2a:	e611      	b.n	800d850 <_strtod_l+0x580>
 800dc2c:	fffffc02 	.word	0xfffffc02
 800dc30:	7ff00000 	.word	0x7ff00000
 800dc34:	39500000 	.word	0x39500000
 800dc38:	000fffff 	.word	0x000fffff
 800dc3c:	7fefffff 	.word	0x7fefffff
 800dc40:	08012590 	.word	0x08012590
 800dc44:	4631      	mov	r1, r6
 800dc46:	4628      	mov	r0, r5
 800dc48:	f002 f990 	bl	800ff6c <__ratio>
 800dc4c:	ec59 8b10 	vmov	r8, r9, d0
 800dc50:	ee10 0a10 	vmov	r0, s0
 800dc54:	2200      	movs	r2, #0
 800dc56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc5a:	4649      	mov	r1, r9
 800dc5c:	f7f2 ff68 	bl	8000b30 <__aeabi_dcmple>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d07a      	beq.n	800dd5a <_strtod_l+0xa8a>
 800dc64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d04a      	beq.n	800dd00 <_strtod_l+0xa30>
 800dc6a:	4b95      	ldr	r3, [pc, #596]	; (800dec0 <_strtod_l+0xbf0>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dc72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800dec0 <_strtod_l+0xbf0>
 800dc76:	f04f 0800 	mov.w	r8, #0
 800dc7a:	4b92      	ldr	r3, [pc, #584]	; (800dec4 <_strtod_l+0xbf4>)
 800dc7c:	403b      	ands	r3, r7
 800dc7e:	930d      	str	r3, [sp, #52]	; 0x34
 800dc80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dc82:	4b91      	ldr	r3, [pc, #580]	; (800dec8 <_strtod_l+0xbf8>)
 800dc84:	429a      	cmp	r2, r3
 800dc86:	f040 80b0 	bne.w	800ddea <_strtod_l+0xb1a>
 800dc8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dc8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dc92:	ec4b ab10 	vmov	d0, sl, fp
 800dc96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dc9a:	f002 f88f 	bl	800fdbc <__ulp>
 800dc9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dca2:	ec53 2b10 	vmov	r2, r3, d0
 800dca6:	f7f2 fcc7 	bl	8000638 <__aeabi_dmul>
 800dcaa:	4652      	mov	r2, sl
 800dcac:	465b      	mov	r3, fp
 800dcae:	f7f2 fb0d 	bl	80002cc <__adddf3>
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4983      	ldr	r1, [pc, #524]	; (800dec4 <_strtod_l+0xbf4>)
 800dcb6:	4a85      	ldr	r2, [pc, #532]	; (800decc <_strtod_l+0xbfc>)
 800dcb8:	4019      	ands	r1, r3
 800dcba:	4291      	cmp	r1, r2
 800dcbc:	4682      	mov	sl, r0
 800dcbe:	d960      	bls.n	800dd82 <_strtod_l+0xab2>
 800dcc0:	ee18 3a90 	vmov	r3, s17
 800dcc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d104      	bne.n	800dcd6 <_strtod_l+0xa06>
 800dccc:	ee18 3a10 	vmov	r3, s16
 800dcd0:	3301      	adds	r3, #1
 800dcd2:	f43f ad45 	beq.w	800d760 <_strtod_l+0x490>
 800dcd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ded8 <_strtod_l+0xc08>
 800dcda:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800dcde:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dce0:	4620      	mov	r0, r4
 800dce2:	f001 fd39 	bl	800f758 <_Bfree>
 800dce6:	9905      	ldr	r1, [sp, #20]
 800dce8:	4620      	mov	r0, r4
 800dcea:	f001 fd35 	bl	800f758 <_Bfree>
 800dcee:	4631      	mov	r1, r6
 800dcf0:	4620      	mov	r0, r4
 800dcf2:	f001 fd31 	bl	800f758 <_Bfree>
 800dcf6:	4629      	mov	r1, r5
 800dcf8:	4620      	mov	r0, r4
 800dcfa:	f001 fd2d 	bl	800f758 <_Bfree>
 800dcfe:	e61a      	b.n	800d936 <_strtod_l+0x666>
 800dd00:	f1ba 0f00 	cmp.w	sl, #0
 800dd04:	d11b      	bne.n	800dd3e <_strtod_l+0xa6e>
 800dd06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd0a:	b9f3      	cbnz	r3, 800dd4a <_strtod_l+0xa7a>
 800dd0c:	4b6c      	ldr	r3, [pc, #432]	; (800dec0 <_strtod_l+0xbf0>)
 800dd0e:	2200      	movs	r2, #0
 800dd10:	4640      	mov	r0, r8
 800dd12:	4649      	mov	r1, r9
 800dd14:	f7f2 ff02 	bl	8000b1c <__aeabi_dcmplt>
 800dd18:	b9d0      	cbnz	r0, 800dd50 <_strtod_l+0xa80>
 800dd1a:	4640      	mov	r0, r8
 800dd1c:	4649      	mov	r1, r9
 800dd1e:	4b6c      	ldr	r3, [pc, #432]	; (800ded0 <_strtod_l+0xc00>)
 800dd20:	2200      	movs	r2, #0
 800dd22:	f7f2 fc89 	bl	8000638 <__aeabi_dmul>
 800dd26:	4680      	mov	r8, r0
 800dd28:	4689      	mov	r9, r1
 800dd2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800dd2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800dd32:	9315      	str	r3, [sp, #84]	; 0x54
 800dd34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800dd38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd3c:	e79d      	b.n	800dc7a <_strtod_l+0x9aa>
 800dd3e:	f1ba 0f01 	cmp.w	sl, #1
 800dd42:	d102      	bne.n	800dd4a <_strtod_l+0xa7a>
 800dd44:	2f00      	cmp	r7, #0
 800dd46:	f43f ad83 	beq.w	800d850 <_strtod_l+0x580>
 800dd4a:	4b62      	ldr	r3, [pc, #392]	; (800ded4 <_strtod_l+0xc04>)
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	e78e      	b.n	800dc6e <_strtod_l+0x99e>
 800dd50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ded0 <_strtod_l+0xc00>
 800dd54:	f04f 0800 	mov.w	r8, #0
 800dd58:	e7e7      	b.n	800dd2a <_strtod_l+0xa5a>
 800dd5a:	4b5d      	ldr	r3, [pc, #372]	; (800ded0 <_strtod_l+0xc00>)
 800dd5c:	4640      	mov	r0, r8
 800dd5e:	4649      	mov	r1, r9
 800dd60:	2200      	movs	r2, #0
 800dd62:	f7f2 fc69 	bl	8000638 <__aeabi_dmul>
 800dd66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd68:	4680      	mov	r8, r0
 800dd6a:	4689      	mov	r9, r1
 800dd6c:	b933      	cbnz	r3, 800dd7c <_strtod_l+0xaac>
 800dd6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd72:	900e      	str	r0, [sp, #56]	; 0x38
 800dd74:	930f      	str	r3, [sp, #60]	; 0x3c
 800dd76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dd7a:	e7dd      	b.n	800dd38 <_strtod_l+0xa68>
 800dd7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800dd80:	e7f9      	b.n	800dd76 <_strtod_l+0xaa6>
 800dd82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800dd86:	9b04      	ldr	r3, [sp, #16]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1a8      	bne.n	800dcde <_strtod_l+0xa0e>
 800dd8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dd90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd92:	0d1b      	lsrs	r3, r3, #20
 800dd94:	051b      	lsls	r3, r3, #20
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d1a1      	bne.n	800dcde <_strtod_l+0xa0e>
 800dd9a:	4640      	mov	r0, r8
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	f7f2 ffab 	bl	8000cf8 <__aeabi_d2lz>
 800dda2:	f7f2 fc1b 	bl	80005dc <__aeabi_l2d>
 800dda6:	4602      	mov	r2, r0
 800dda8:	460b      	mov	r3, r1
 800ddaa:	4640      	mov	r0, r8
 800ddac:	4649      	mov	r1, r9
 800ddae:	f7f2 fa8b 	bl	80002c8 <__aeabi_dsub>
 800ddb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ddb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddb8:	ea43 030a 	orr.w	r3, r3, sl
 800ddbc:	4313      	orrs	r3, r2
 800ddbe:	4680      	mov	r8, r0
 800ddc0:	4689      	mov	r9, r1
 800ddc2:	d055      	beq.n	800de70 <_strtod_l+0xba0>
 800ddc4:	a336      	add	r3, pc, #216	; (adr r3, 800dea0 <_strtod_l+0xbd0>)
 800ddc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddca:	f7f2 fea7 	bl	8000b1c <__aeabi_dcmplt>
 800ddce:	2800      	cmp	r0, #0
 800ddd0:	f47f acd0 	bne.w	800d774 <_strtod_l+0x4a4>
 800ddd4:	a334      	add	r3, pc, #208	; (adr r3, 800dea8 <_strtod_l+0xbd8>)
 800ddd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddda:	4640      	mov	r0, r8
 800dddc:	4649      	mov	r1, r9
 800ddde:	f7f2 febb 	bl	8000b58 <__aeabi_dcmpgt>
 800dde2:	2800      	cmp	r0, #0
 800dde4:	f43f af7b 	beq.w	800dcde <_strtod_l+0xa0e>
 800dde8:	e4c4      	b.n	800d774 <_strtod_l+0x4a4>
 800ddea:	9b04      	ldr	r3, [sp, #16]
 800ddec:	b333      	cbz	r3, 800de3c <_strtod_l+0xb6c>
 800ddee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddf0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ddf4:	d822      	bhi.n	800de3c <_strtod_l+0xb6c>
 800ddf6:	a32e      	add	r3, pc, #184	; (adr r3, 800deb0 <_strtod_l+0xbe0>)
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4649      	mov	r1, r9
 800de00:	f7f2 fe96 	bl	8000b30 <__aeabi_dcmple>
 800de04:	b1a0      	cbz	r0, 800de30 <_strtod_l+0xb60>
 800de06:	4649      	mov	r1, r9
 800de08:	4640      	mov	r0, r8
 800de0a:	f7f2 feed 	bl	8000be8 <__aeabi_d2uiz>
 800de0e:	2801      	cmp	r0, #1
 800de10:	bf38      	it	cc
 800de12:	2001      	movcc	r0, #1
 800de14:	f7f2 fb96 	bl	8000544 <__aeabi_ui2d>
 800de18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de1a:	4680      	mov	r8, r0
 800de1c:	4689      	mov	r9, r1
 800de1e:	bb23      	cbnz	r3, 800de6a <_strtod_l+0xb9a>
 800de20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de24:	9010      	str	r0, [sp, #64]	; 0x40
 800de26:	9311      	str	r3, [sp, #68]	; 0x44
 800de28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800de2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800de38:	1a9b      	subs	r3, r3, r2
 800de3a:	9309      	str	r3, [sp, #36]	; 0x24
 800de3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de40:	eeb0 0a48 	vmov.f32	s0, s16
 800de44:	eef0 0a68 	vmov.f32	s1, s17
 800de48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de4c:	f001 ffb6 	bl	800fdbc <__ulp>
 800de50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de54:	ec53 2b10 	vmov	r2, r3, d0
 800de58:	f7f2 fbee 	bl	8000638 <__aeabi_dmul>
 800de5c:	ec53 2b18 	vmov	r2, r3, d8
 800de60:	f7f2 fa34 	bl	80002cc <__adddf3>
 800de64:	4682      	mov	sl, r0
 800de66:	468b      	mov	fp, r1
 800de68:	e78d      	b.n	800dd86 <_strtod_l+0xab6>
 800de6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800de6e:	e7db      	b.n	800de28 <_strtod_l+0xb58>
 800de70:	a311      	add	r3, pc, #68	; (adr r3, 800deb8 <_strtod_l+0xbe8>)
 800de72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de76:	f7f2 fe51 	bl	8000b1c <__aeabi_dcmplt>
 800de7a:	e7b2      	b.n	800dde2 <_strtod_l+0xb12>
 800de7c:	2300      	movs	r3, #0
 800de7e:	930a      	str	r3, [sp, #40]	; 0x28
 800de80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	f7ff ba6b 	b.w	800d360 <_strtod_l+0x90>
 800de8a:	2a65      	cmp	r2, #101	; 0x65
 800de8c:	f43f ab5f 	beq.w	800d54e <_strtod_l+0x27e>
 800de90:	2a45      	cmp	r2, #69	; 0x45
 800de92:	f43f ab5c 	beq.w	800d54e <_strtod_l+0x27e>
 800de96:	2301      	movs	r3, #1
 800de98:	f7ff bb94 	b.w	800d5c4 <_strtod_l+0x2f4>
 800de9c:	f3af 8000 	nop.w
 800dea0:	94a03595 	.word	0x94a03595
 800dea4:	3fdfffff 	.word	0x3fdfffff
 800dea8:	35afe535 	.word	0x35afe535
 800deac:	3fe00000 	.word	0x3fe00000
 800deb0:	ffc00000 	.word	0xffc00000
 800deb4:	41dfffff 	.word	0x41dfffff
 800deb8:	94a03595 	.word	0x94a03595
 800debc:	3fcfffff 	.word	0x3fcfffff
 800dec0:	3ff00000 	.word	0x3ff00000
 800dec4:	7ff00000 	.word	0x7ff00000
 800dec8:	7fe00000 	.word	0x7fe00000
 800decc:	7c9fffff 	.word	0x7c9fffff
 800ded0:	3fe00000 	.word	0x3fe00000
 800ded4:	bff00000 	.word	0xbff00000
 800ded8:	7fefffff 	.word	0x7fefffff

0800dedc <strtod>:
 800dedc:	460a      	mov	r2, r1
 800dede:	4601      	mov	r1, r0
 800dee0:	4802      	ldr	r0, [pc, #8]	; (800deec <strtod+0x10>)
 800dee2:	4b03      	ldr	r3, [pc, #12]	; (800def0 <strtod+0x14>)
 800dee4:	6800      	ldr	r0, [r0, #0]
 800dee6:	f7ff b9f3 	b.w	800d2d0 <_strtod_l>
 800deea:	bf00      	nop
 800deec:	200001a8 	.word	0x200001a8
 800def0:	20000210 	.word	0x20000210

0800def4 <_strtol_l.constprop.0>:
 800def4:	2b01      	cmp	r3, #1
 800def6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800defa:	d001      	beq.n	800df00 <_strtol_l.constprop.0+0xc>
 800defc:	2b24      	cmp	r3, #36	; 0x24
 800defe:	d906      	bls.n	800df0e <_strtol_l.constprop.0+0x1a>
 800df00:	f000 ff48 	bl	800ed94 <__errno>
 800df04:	2316      	movs	r3, #22
 800df06:	6003      	str	r3, [r0, #0]
 800df08:	2000      	movs	r0, #0
 800df0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df0e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dff4 <_strtol_l.constprop.0+0x100>
 800df12:	460d      	mov	r5, r1
 800df14:	462e      	mov	r6, r5
 800df16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df1a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800df1e:	f017 0708 	ands.w	r7, r7, #8
 800df22:	d1f7      	bne.n	800df14 <_strtol_l.constprop.0+0x20>
 800df24:	2c2d      	cmp	r4, #45	; 0x2d
 800df26:	d132      	bne.n	800df8e <_strtol_l.constprop.0+0x9a>
 800df28:	782c      	ldrb	r4, [r5, #0]
 800df2a:	2701      	movs	r7, #1
 800df2c:	1cb5      	adds	r5, r6, #2
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d05b      	beq.n	800dfea <_strtol_l.constprop.0+0xf6>
 800df32:	2b10      	cmp	r3, #16
 800df34:	d109      	bne.n	800df4a <_strtol_l.constprop.0+0x56>
 800df36:	2c30      	cmp	r4, #48	; 0x30
 800df38:	d107      	bne.n	800df4a <_strtol_l.constprop.0+0x56>
 800df3a:	782c      	ldrb	r4, [r5, #0]
 800df3c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800df40:	2c58      	cmp	r4, #88	; 0x58
 800df42:	d14d      	bne.n	800dfe0 <_strtol_l.constprop.0+0xec>
 800df44:	786c      	ldrb	r4, [r5, #1]
 800df46:	2310      	movs	r3, #16
 800df48:	3502      	adds	r5, #2
 800df4a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800df4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800df52:	f04f 0c00 	mov.w	ip, #0
 800df56:	fbb8 f9f3 	udiv	r9, r8, r3
 800df5a:	4666      	mov	r6, ip
 800df5c:	fb03 8a19 	mls	sl, r3, r9, r8
 800df60:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800df64:	f1be 0f09 	cmp.w	lr, #9
 800df68:	d816      	bhi.n	800df98 <_strtol_l.constprop.0+0xa4>
 800df6a:	4674      	mov	r4, lr
 800df6c:	42a3      	cmp	r3, r4
 800df6e:	dd24      	ble.n	800dfba <_strtol_l.constprop.0+0xc6>
 800df70:	f1bc 0f00 	cmp.w	ip, #0
 800df74:	db1e      	blt.n	800dfb4 <_strtol_l.constprop.0+0xc0>
 800df76:	45b1      	cmp	r9, r6
 800df78:	d31c      	bcc.n	800dfb4 <_strtol_l.constprop.0+0xc0>
 800df7a:	d101      	bne.n	800df80 <_strtol_l.constprop.0+0x8c>
 800df7c:	45a2      	cmp	sl, r4
 800df7e:	db19      	blt.n	800dfb4 <_strtol_l.constprop.0+0xc0>
 800df80:	fb06 4603 	mla	r6, r6, r3, r4
 800df84:	f04f 0c01 	mov.w	ip, #1
 800df88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df8c:	e7e8      	b.n	800df60 <_strtol_l.constprop.0+0x6c>
 800df8e:	2c2b      	cmp	r4, #43	; 0x2b
 800df90:	bf04      	itt	eq
 800df92:	782c      	ldrbeq	r4, [r5, #0]
 800df94:	1cb5      	addeq	r5, r6, #2
 800df96:	e7ca      	b.n	800df2e <_strtol_l.constprop.0+0x3a>
 800df98:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800df9c:	f1be 0f19 	cmp.w	lr, #25
 800dfa0:	d801      	bhi.n	800dfa6 <_strtol_l.constprop.0+0xb2>
 800dfa2:	3c37      	subs	r4, #55	; 0x37
 800dfa4:	e7e2      	b.n	800df6c <_strtol_l.constprop.0+0x78>
 800dfa6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dfaa:	f1be 0f19 	cmp.w	lr, #25
 800dfae:	d804      	bhi.n	800dfba <_strtol_l.constprop.0+0xc6>
 800dfb0:	3c57      	subs	r4, #87	; 0x57
 800dfb2:	e7db      	b.n	800df6c <_strtol_l.constprop.0+0x78>
 800dfb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800dfb8:	e7e6      	b.n	800df88 <_strtol_l.constprop.0+0x94>
 800dfba:	f1bc 0f00 	cmp.w	ip, #0
 800dfbe:	da05      	bge.n	800dfcc <_strtol_l.constprop.0+0xd8>
 800dfc0:	2322      	movs	r3, #34	; 0x22
 800dfc2:	6003      	str	r3, [r0, #0]
 800dfc4:	4646      	mov	r6, r8
 800dfc6:	b942      	cbnz	r2, 800dfda <_strtol_l.constprop.0+0xe6>
 800dfc8:	4630      	mov	r0, r6
 800dfca:	e79e      	b.n	800df0a <_strtol_l.constprop.0+0x16>
 800dfcc:	b107      	cbz	r7, 800dfd0 <_strtol_l.constprop.0+0xdc>
 800dfce:	4276      	negs	r6, r6
 800dfd0:	2a00      	cmp	r2, #0
 800dfd2:	d0f9      	beq.n	800dfc8 <_strtol_l.constprop.0+0xd4>
 800dfd4:	f1bc 0f00 	cmp.w	ip, #0
 800dfd8:	d000      	beq.n	800dfdc <_strtol_l.constprop.0+0xe8>
 800dfda:	1e69      	subs	r1, r5, #1
 800dfdc:	6011      	str	r1, [r2, #0]
 800dfde:	e7f3      	b.n	800dfc8 <_strtol_l.constprop.0+0xd4>
 800dfe0:	2430      	movs	r4, #48	; 0x30
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1b1      	bne.n	800df4a <_strtol_l.constprop.0+0x56>
 800dfe6:	2308      	movs	r3, #8
 800dfe8:	e7af      	b.n	800df4a <_strtol_l.constprop.0+0x56>
 800dfea:	2c30      	cmp	r4, #48	; 0x30
 800dfec:	d0a5      	beq.n	800df3a <_strtol_l.constprop.0+0x46>
 800dfee:	230a      	movs	r3, #10
 800dff0:	e7ab      	b.n	800df4a <_strtol_l.constprop.0+0x56>
 800dff2:	bf00      	nop
 800dff4:	08012419 	.word	0x08012419

0800dff8 <strtol>:
 800dff8:	4613      	mov	r3, r2
 800dffa:	460a      	mov	r2, r1
 800dffc:	4601      	mov	r1, r0
 800dffe:	4802      	ldr	r0, [pc, #8]	; (800e008 <strtol+0x10>)
 800e000:	6800      	ldr	r0, [r0, #0]
 800e002:	f7ff bf77 	b.w	800def4 <_strtol_l.constprop.0>
 800e006:	bf00      	nop
 800e008:	200001a8 	.word	0x200001a8

0800e00c <sbrk>:
 800e00c:	4b02      	ldr	r3, [pc, #8]	; (800e018 <sbrk+0xc>)
 800e00e:	4601      	mov	r1, r0
 800e010:	6818      	ldr	r0, [r3, #0]
 800e012:	f7ff b8c3 	b.w	800d19c <_sbrk_r>
 800e016:	bf00      	nop
 800e018:	200001a8 	.word	0x200001a8

0800e01c <_vasiprintf_r>:
 800e01c:	b530      	push	{r4, r5, lr}
 800e01e:	460d      	mov	r5, r1
 800e020:	4909      	ldr	r1, [pc, #36]	; (800e048 <_vasiprintf_r+0x2c>)
 800e022:	b09b      	sub	sp, #108	; 0x6c
 800e024:	2400      	movs	r4, #0
 800e026:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800e02a:	4669      	mov	r1, sp
 800e02c:	9400      	str	r4, [sp, #0]
 800e02e:	9402      	str	r4, [sp, #8]
 800e030:	9405      	str	r4, [sp, #20]
 800e032:	f7fe fb49 	bl	800c6c8 <_svfiprintf_r>
 800e036:	2800      	cmp	r0, #0
 800e038:	bfa1      	itttt	ge
 800e03a:	9b00      	ldrge	r3, [sp, #0]
 800e03c:	701c      	strbge	r4, [r3, #0]
 800e03e:	9b04      	ldrge	r3, [sp, #16]
 800e040:	602b      	strge	r3, [r5, #0]
 800e042:	b01b      	add	sp, #108	; 0x6c
 800e044:	bd30      	pop	{r4, r5, pc}
 800e046:	bf00      	nop
 800e048:	ffff0288 	.word	0xffff0288

0800e04c <vasiprintf>:
 800e04c:	4613      	mov	r3, r2
 800e04e:	460a      	mov	r2, r1
 800e050:	4601      	mov	r1, r0
 800e052:	4802      	ldr	r0, [pc, #8]	; (800e05c <vasiprintf+0x10>)
 800e054:	6800      	ldr	r0, [r0, #0]
 800e056:	f7ff bfe1 	b.w	800e01c <_vasiprintf_r>
 800e05a:	bf00      	nop
 800e05c:	200001a8 	.word	0x200001a8

0800e060 <__assert_func>:
 800e060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e062:	4614      	mov	r4, r2
 800e064:	461a      	mov	r2, r3
 800e066:	4b09      	ldr	r3, [pc, #36]	; (800e08c <__assert_func+0x2c>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4605      	mov	r5, r0
 800e06c:	68d8      	ldr	r0, [r3, #12]
 800e06e:	b14c      	cbz	r4, 800e084 <__assert_func+0x24>
 800e070:	4b07      	ldr	r3, [pc, #28]	; (800e090 <__assert_func+0x30>)
 800e072:	9100      	str	r1, [sp, #0]
 800e074:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e078:	4906      	ldr	r1, [pc, #24]	; (800e094 <__assert_func+0x34>)
 800e07a:	462b      	mov	r3, r5
 800e07c:	f000 ff66 	bl	800ef4c <fiprintf>
 800e080:	f7fe f8f6 	bl	800c270 <abort>
 800e084:	4b04      	ldr	r3, [pc, #16]	; (800e098 <__assert_func+0x38>)
 800e086:	461c      	mov	r4, r3
 800e088:	e7f3      	b.n	800e072 <__assert_func+0x12>
 800e08a:	bf00      	nop
 800e08c:	200001a8 	.word	0x200001a8
 800e090:	080125b8 	.word	0x080125b8
 800e094:	080125c5 	.word	0x080125c5
 800e098:	080125f3 	.word	0x080125f3

0800e09c <quorem>:
 800e09c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a0:	6903      	ldr	r3, [r0, #16]
 800e0a2:	690c      	ldr	r4, [r1, #16]
 800e0a4:	42a3      	cmp	r3, r4
 800e0a6:	4607      	mov	r7, r0
 800e0a8:	f2c0 8081 	blt.w	800e1ae <quorem+0x112>
 800e0ac:	3c01      	subs	r4, #1
 800e0ae:	f101 0814 	add.w	r8, r1, #20
 800e0b2:	f100 0514 	add.w	r5, r0, #20
 800e0b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0c4:	3301      	adds	r3, #1
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0d4:	d331      	bcc.n	800e13a <quorem+0x9e>
 800e0d6:	f04f 0e00 	mov.w	lr, #0
 800e0da:	4640      	mov	r0, r8
 800e0dc:	46ac      	mov	ip, r5
 800e0de:	46f2      	mov	sl, lr
 800e0e0:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0e4:	b293      	uxth	r3, r2
 800e0e6:	fb06 e303 	mla	r3, r6, r3, lr
 800e0ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	ebaa 0303 	sub.w	r3, sl, r3
 800e0f4:	f8dc a000 	ldr.w	sl, [ip]
 800e0f8:	0c12      	lsrs	r2, r2, #16
 800e0fa:	fa13 f38a 	uxtah	r3, r3, sl
 800e0fe:	fb06 e202 	mla	r2, r6, r2, lr
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	9b00      	ldr	r3, [sp, #0]
 800e106:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e10a:	b292      	uxth	r2, r2
 800e10c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e110:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e114:	f8bd 3000 	ldrh.w	r3, [sp]
 800e118:	4581      	cmp	r9, r0
 800e11a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e11e:	f84c 3b04 	str.w	r3, [ip], #4
 800e122:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e126:	d2db      	bcs.n	800e0e0 <quorem+0x44>
 800e128:	f855 300b 	ldr.w	r3, [r5, fp]
 800e12c:	b92b      	cbnz	r3, 800e13a <quorem+0x9e>
 800e12e:	9b01      	ldr	r3, [sp, #4]
 800e130:	3b04      	subs	r3, #4
 800e132:	429d      	cmp	r5, r3
 800e134:	461a      	mov	r2, r3
 800e136:	d32e      	bcc.n	800e196 <quorem+0xfa>
 800e138:	613c      	str	r4, [r7, #16]
 800e13a:	4638      	mov	r0, r7
 800e13c:	f001 fd98 	bl	800fc70 <__mcmp>
 800e140:	2800      	cmp	r0, #0
 800e142:	db24      	blt.n	800e18e <quorem+0xf2>
 800e144:	3601      	adds	r6, #1
 800e146:	4628      	mov	r0, r5
 800e148:	f04f 0c00 	mov.w	ip, #0
 800e14c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e150:	f8d0 e000 	ldr.w	lr, [r0]
 800e154:	b293      	uxth	r3, r2
 800e156:	ebac 0303 	sub.w	r3, ip, r3
 800e15a:	0c12      	lsrs	r2, r2, #16
 800e15c:	fa13 f38e 	uxtah	r3, r3, lr
 800e160:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e164:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e168:	b29b      	uxth	r3, r3
 800e16a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e16e:	45c1      	cmp	r9, r8
 800e170:	f840 3b04 	str.w	r3, [r0], #4
 800e174:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e178:	d2e8      	bcs.n	800e14c <quorem+0xb0>
 800e17a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e17e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e182:	b922      	cbnz	r2, 800e18e <quorem+0xf2>
 800e184:	3b04      	subs	r3, #4
 800e186:	429d      	cmp	r5, r3
 800e188:	461a      	mov	r2, r3
 800e18a:	d30a      	bcc.n	800e1a2 <quorem+0x106>
 800e18c:	613c      	str	r4, [r7, #16]
 800e18e:	4630      	mov	r0, r6
 800e190:	b003      	add	sp, #12
 800e192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e196:	6812      	ldr	r2, [r2, #0]
 800e198:	3b04      	subs	r3, #4
 800e19a:	2a00      	cmp	r2, #0
 800e19c:	d1cc      	bne.n	800e138 <quorem+0x9c>
 800e19e:	3c01      	subs	r4, #1
 800e1a0:	e7c7      	b.n	800e132 <quorem+0x96>
 800e1a2:	6812      	ldr	r2, [r2, #0]
 800e1a4:	3b04      	subs	r3, #4
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	d1f0      	bne.n	800e18c <quorem+0xf0>
 800e1aa:	3c01      	subs	r4, #1
 800e1ac:	e7eb      	b.n	800e186 <quorem+0xea>
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	e7ee      	b.n	800e190 <quorem+0xf4>
 800e1b2:	0000      	movs	r0, r0
 800e1b4:	0000      	movs	r0, r0
	...

0800e1b8 <_dtoa_r>:
 800e1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1bc:	ed2d 8b04 	vpush	{d8-d9}
 800e1c0:	ec57 6b10 	vmov	r6, r7, d0
 800e1c4:	b093      	sub	sp, #76	; 0x4c
 800e1c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1cc:	9106      	str	r1, [sp, #24]
 800e1ce:	ee10 aa10 	vmov	sl, s0
 800e1d2:	4604      	mov	r4, r0
 800e1d4:	9209      	str	r2, [sp, #36]	; 0x24
 800e1d6:	930c      	str	r3, [sp, #48]	; 0x30
 800e1d8:	46bb      	mov	fp, r7
 800e1da:	b975      	cbnz	r5, 800e1fa <_dtoa_r+0x42>
 800e1dc:	2010      	movs	r0, #16
 800e1de:	f7fe f8a3 	bl	800c328 <malloc>
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	6260      	str	r0, [r4, #36]	; 0x24
 800e1e6:	b920      	cbnz	r0, 800e1f2 <_dtoa_r+0x3a>
 800e1e8:	4ba7      	ldr	r3, [pc, #668]	; (800e488 <_dtoa_r+0x2d0>)
 800e1ea:	21ea      	movs	r1, #234	; 0xea
 800e1ec:	48a7      	ldr	r0, [pc, #668]	; (800e48c <_dtoa_r+0x2d4>)
 800e1ee:	f7ff ff37 	bl	800e060 <__assert_func>
 800e1f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1f6:	6005      	str	r5, [r0, #0]
 800e1f8:	60c5      	str	r5, [r0, #12]
 800e1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1fc:	6819      	ldr	r1, [r3, #0]
 800e1fe:	b151      	cbz	r1, 800e216 <_dtoa_r+0x5e>
 800e200:	685a      	ldr	r2, [r3, #4]
 800e202:	604a      	str	r2, [r1, #4]
 800e204:	2301      	movs	r3, #1
 800e206:	4093      	lsls	r3, r2
 800e208:	608b      	str	r3, [r1, #8]
 800e20a:	4620      	mov	r0, r4
 800e20c:	f001 faa4 	bl	800f758 <_Bfree>
 800e210:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e212:	2200      	movs	r2, #0
 800e214:	601a      	str	r2, [r3, #0]
 800e216:	1e3b      	subs	r3, r7, #0
 800e218:	bfaa      	itet	ge
 800e21a:	2300      	movge	r3, #0
 800e21c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e220:	f8c8 3000 	strge.w	r3, [r8]
 800e224:	4b9a      	ldr	r3, [pc, #616]	; (800e490 <_dtoa_r+0x2d8>)
 800e226:	bfbc      	itt	lt
 800e228:	2201      	movlt	r2, #1
 800e22a:	f8c8 2000 	strlt.w	r2, [r8]
 800e22e:	ea33 030b 	bics.w	r3, r3, fp
 800e232:	d11b      	bne.n	800e26c <_dtoa_r+0xb4>
 800e234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e236:	f242 730f 	movw	r3, #9999	; 0x270f
 800e23a:	6013      	str	r3, [r2, #0]
 800e23c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e240:	4333      	orrs	r3, r6
 800e242:	f000 8592 	beq.w	800ed6a <_dtoa_r+0xbb2>
 800e246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e248:	b963      	cbnz	r3, 800e264 <_dtoa_r+0xac>
 800e24a:	4b92      	ldr	r3, [pc, #584]	; (800e494 <_dtoa_r+0x2dc>)
 800e24c:	e022      	b.n	800e294 <_dtoa_r+0xdc>
 800e24e:	4b92      	ldr	r3, [pc, #584]	; (800e498 <_dtoa_r+0x2e0>)
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	3308      	adds	r3, #8
 800e254:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	9801      	ldr	r0, [sp, #4]
 800e25a:	b013      	add	sp, #76	; 0x4c
 800e25c:	ecbd 8b04 	vpop	{d8-d9}
 800e260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e264:	4b8b      	ldr	r3, [pc, #556]	; (800e494 <_dtoa_r+0x2dc>)
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	3303      	adds	r3, #3
 800e26a:	e7f3      	b.n	800e254 <_dtoa_r+0x9c>
 800e26c:	2200      	movs	r2, #0
 800e26e:	2300      	movs	r3, #0
 800e270:	4650      	mov	r0, sl
 800e272:	4659      	mov	r1, fp
 800e274:	f7f2 fc48 	bl	8000b08 <__aeabi_dcmpeq>
 800e278:	ec4b ab19 	vmov	d9, sl, fp
 800e27c:	4680      	mov	r8, r0
 800e27e:	b158      	cbz	r0, 800e298 <_dtoa_r+0xe0>
 800e280:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e282:	2301      	movs	r3, #1
 800e284:	6013      	str	r3, [r2, #0]
 800e286:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e288:	2b00      	cmp	r3, #0
 800e28a:	f000 856b 	beq.w	800ed64 <_dtoa_r+0xbac>
 800e28e:	4883      	ldr	r0, [pc, #524]	; (800e49c <_dtoa_r+0x2e4>)
 800e290:	6018      	str	r0, [r3, #0]
 800e292:	1e43      	subs	r3, r0, #1
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	e7df      	b.n	800e258 <_dtoa_r+0xa0>
 800e298:	ec4b ab10 	vmov	d0, sl, fp
 800e29c:	aa10      	add	r2, sp, #64	; 0x40
 800e29e:	a911      	add	r1, sp, #68	; 0x44
 800e2a0:	4620      	mov	r0, r4
 800e2a2:	f001 fe07 	bl	800feb4 <__d2b>
 800e2a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e2aa:	ee08 0a10 	vmov	s16, r0
 800e2ae:	2d00      	cmp	r5, #0
 800e2b0:	f000 8084 	beq.w	800e3bc <_dtoa_r+0x204>
 800e2b4:	ee19 3a90 	vmov	r3, s19
 800e2b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e2c0:	4656      	mov	r6, sl
 800e2c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e2c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e2ce:	4b74      	ldr	r3, [pc, #464]	; (800e4a0 <_dtoa_r+0x2e8>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	4630      	mov	r0, r6
 800e2d4:	4639      	mov	r1, r7
 800e2d6:	f7f1 fff7 	bl	80002c8 <__aeabi_dsub>
 800e2da:	a365      	add	r3, pc, #404	; (adr r3, 800e470 <_dtoa_r+0x2b8>)
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	f7f2 f9aa 	bl	8000638 <__aeabi_dmul>
 800e2e4:	a364      	add	r3, pc, #400	; (adr r3, 800e478 <_dtoa_r+0x2c0>)
 800e2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ea:	f7f1 ffef 	bl	80002cc <__adddf3>
 800e2ee:	4606      	mov	r6, r0
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	460f      	mov	r7, r1
 800e2f4:	f7f2 f936 	bl	8000564 <__aeabi_i2d>
 800e2f8:	a361      	add	r3, pc, #388	; (adr r3, 800e480 <_dtoa_r+0x2c8>)
 800e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fe:	f7f2 f99b 	bl	8000638 <__aeabi_dmul>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4630      	mov	r0, r6
 800e308:	4639      	mov	r1, r7
 800e30a:	f7f1 ffdf 	bl	80002cc <__adddf3>
 800e30e:	4606      	mov	r6, r0
 800e310:	460f      	mov	r7, r1
 800e312:	f7f2 fc41 	bl	8000b98 <__aeabi_d2iz>
 800e316:	2200      	movs	r2, #0
 800e318:	9000      	str	r0, [sp, #0]
 800e31a:	2300      	movs	r3, #0
 800e31c:	4630      	mov	r0, r6
 800e31e:	4639      	mov	r1, r7
 800e320:	f7f2 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 800e324:	b150      	cbz	r0, 800e33c <_dtoa_r+0x184>
 800e326:	9800      	ldr	r0, [sp, #0]
 800e328:	f7f2 f91c 	bl	8000564 <__aeabi_i2d>
 800e32c:	4632      	mov	r2, r6
 800e32e:	463b      	mov	r3, r7
 800e330:	f7f2 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 800e334:	b910      	cbnz	r0, 800e33c <_dtoa_r+0x184>
 800e336:	9b00      	ldr	r3, [sp, #0]
 800e338:	3b01      	subs	r3, #1
 800e33a:	9300      	str	r3, [sp, #0]
 800e33c:	9b00      	ldr	r3, [sp, #0]
 800e33e:	2b16      	cmp	r3, #22
 800e340:	d85a      	bhi.n	800e3f8 <_dtoa_r+0x240>
 800e342:	9a00      	ldr	r2, [sp, #0]
 800e344:	4b57      	ldr	r3, [pc, #348]	; (800e4a4 <_dtoa_r+0x2ec>)
 800e346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34e:	ec51 0b19 	vmov	r0, r1, d9
 800e352:	f7f2 fbe3 	bl	8000b1c <__aeabi_dcmplt>
 800e356:	2800      	cmp	r0, #0
 800e358:	d050      	beq.n	800e3fc <_dtoa_r+0x244>
 800e35a:	9b00      	ldr	r3, [sp, #0]
 800e35c:	3b01      	subs	r3, #1
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	2300      	movs	r3, #0
 800e362:	930b      	str	r3, [sp, #44]	; 0x2c
 800e364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e366:	1b5d      	subs	r5, r3, r5
 800e368:	1e6b      	subs	r3, r5, #1
 800e36a:	9305      	str	r3, [sp, #20]
 800e36c:	bf45      	ittet	mi
 800e36e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e372:	9304      	strmi	r3, [sp, #16]
 800e374:	2300      	movpl	r3, #0
 800e376:	2300      	movmi	r3, #0
 800e378:	bf4c      	ite	mi
 800e37a:	9305      	strmi	r3, [sp, #20]
 800e37c:	9304      	strpl	r3, [sp, #16]
 800e37e:	9b00      	ldr	r3, [sp, #0]
 800e380:	2b00      	cmp	r3, #0
 800e382:	db3d      	blt.n	800e400 <_dtoa_r+0x248>
 800e384:	9b05      	ldr	r3, [sp, #20]
 800e386:	9a00      	ldr	r2, [sp, #0]
 800e388:	920a      	str	r2, [sp, #40]	; 0x28
 800e38a:	4413      	add	r3, r2
 800e38c:	9305      	str	r3, [sp, #20]
 800e38e:	2300      	movs	r3, #0
 800e390:	9307      	str	r3, [sp, #28]
 800e392:	9b06      	ldr	r3, [sp, #24]
 800e394:	2b09      	cmp	r3, #9
 800e396:	f200 8089 	bhi.w	800e4ac <_dtoa_r+0x2f4>
 800e39a:	2b05      	cmp	r3, #5
 800e39c:	bfc4      	itt	gt
 800e39e:	3b04      	subgt	r3, #4
 800e3a0:	9306      	strgt	r3, [sp, #24]
 800e3a2:	9b06      	ldr	r3, [sp, #24]
 800e3a4:	f1a3 0302 	sub.w	r3, r3, #2
 800e3a8:	bfcc      	ite	gt
 800e3aa:	2500      	movgt	r5, #0
 800e3ac:	2501      	movle	r5, #1
 800e3ae:	2b03      	cmp	r3, #3
 800e3b0:	f200 8087 	bhi.w	800e4c2 <_dtoa_r+0x30a>
 800e3b4:	e8df f003 	tbb	[pc, r3]
 800e3b8:	59383a2d 	.word	0x59383a2d
 800e3bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3c0:	441d      	add	r5, r3
 800e3c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3c6:	2b20      	cmp	r3, #32
 800e3c8:	bfc1      	itttt	gt
 800e3ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3d2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3da:	bfda      	itte	le
 800e3dc:	f1c3 0320 	rsble	r3, r3, #32
 800e3e0:	fa06 f003 	lslle.w	r0, r6, r3
 800e3e4:	4318      	orrgt	r0, r3
 800e3e6:	f7f2 f8ad 	bl	8000544 <__aeabi_ui2d>
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	4606      	mov	r6, r0
 800e3ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e3f2:	3d01      	subs	r5, #1
 800e3f4:	930e      	str	r3, [sp, #56]	; 0x38
 800e3f6:	e76a      	b.n	800e2ce <_dtoa_r+0x116>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e7b2      	b.n	800e362 <_dtoa_r+0x1aa>
 800e3fc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3fe:	e7b1      	b.n	800e364 <_dtoa_r+0x1ac>
 800e400:	9b04      	ldr	r3, [sp, #16]
 800e402:	9a00      	ldr	r2, [sp, #0]
 800e404:	1a9b      	subs	r3, r3, r2
 800e406:	9304      	str	r3, [sp, #16]
 800e408:	4253      	negs	r3, r2
 800e40a:	9307      	str	r3, [sp, #28]
 800e40c:	2300      	movs	r3, #0
 800e40e:	930a      	str	r3, [sp, #40]	; 0x28
 800e410:	e7bf      	b.n	800e392 <_dtoa_r+0x1da>
 800e412:	2300      	movs	r3, #0
 800e414:	9308      	str	r3, [sp, #32]
 800e416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e418:	2b00      	cmp	r3, #0
 800e41a:	dc55      	bgt.n	800e4c8 <_dtoa_r+0x310>
 800e41c:	2301      	movs	r3, #1
 800e41e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e422:	461a      	mov	r2, r3
 800e424:	9209      	str	r2, [sp, #36]	; 0x24
 800e426:	e00c      	b.n	800e442 <_dtoa_r+0x28a>
 800e428:	2301      	movs	r3, #1
 800e42a:	e7f3      	b.n	800e414 <_dtoa_r+0x25c>
 800e42c:	2300      	movs	r3, #0
 800e42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e430:	9308      	str	r3, [sp, #32]
 800e432:	9b00      	ldr	r3, [sp, #0]
 800e434:	4413      	add	r3, r2
 800e436:	9302      	str	r3, [sp, #8]
 800e438:	3301      	adds	r3, #1
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	9303      	str	r3, [sp, #12]
 800e43e:	bfb8      	it	lt
 800e440:	2301      	movlt	r3, #1
 800e442:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e444:	2200      	movs	r2, #0
 800e446:	6042      	str	r2, [r0, #4]
 800e448:	2204      	movs	r2, #4
 800e44a:	f102 0614 	add.w	r6, r2, #20
 800e44e:	429e      	cmp	r6, r3
 800e450:	6841      	ldr	r1, [r0, #4]
 800e452:	d93d      	bls.n	800e4d0 <_dtoa_r+0x318>
 800e454:	4620      	mov	r0, r4
 800e456:	f001 f93f 	bl	800f6d8 <_Balloc>
 800e45a:	9001      	str	r0, [sp, #4]
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d13b      	bne.n	800e4d8 <_dtoa_r+0x320>
 800e460:	4b11      	ldr	r3, [pc, #68]	; (800e4a8 <_dtoa_r+0x2f0>)
 800e462:	4602      	mov	r2, r0
 800e464:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e468:	e6c0      	b.n	800e1ec <_dtoa_r+0x34>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e7df      	b.n	800e42e <_dtoa_r+0x276>
 800e46e:	bf00      	nop
 800e470:	636f4361 	.word	0x636f4361
 800e474:	3fd287a7 	.word	0x3fd287a7
 800e478:	8b60c8b3 	.word	0x8b60c8b3
 800e47c:	3fc68a28 	.word	0x3fc68a28
 800e480:	509f79fb 	.word	0x509f79fb
 800e484:	3fd34413 	.word	0x3fd34413
 800e488:	08012601 	.word	0x08012601
 800e48c:	08012618 	.word	0x08012618
 800e490:	7ff00000 	.word	0x7ff00000
 800e494:	080125fd 	.word	0x080125fd
 800e498:	080125f4 	.word	0x080125f4
 800e49c:	08012542 	.word	0x08012542
 800e4a0:	3ff80000 	.word	0x3ff80000
 800e4a4:	080127e8 	.word	0x080127e8
 800e4a8:	08012673 	.word	0x08012673
 800e4ac:	2501      	movs	r5, #1
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9306      	str	r3, [sp, #24]
 800e4b2:	9508      	str	r5, [sp, #32]
 800e4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	2312      	movs	r3, #18
 800e4c0:	e7b0      	b.n	800e424 <_dtoa_r+0x26c>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	9308      	str	r3, [sp, #32]
 800e4c6:	e7f5      	b.n	800e4b4 <_dtoa_r+0x2fc>
 800e4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4ce:	e7b8      	b.n	800e442 <_dtoa_r+0x28a>
 800e4d0:	3101      	adds	r1, #1
 800e4d2:	6041      	str	r1, [r0, #4]
 800e4d4:	0052      	lsls	r2, r2, #1
 800e4d6:	e7b8      	b.n	800e44a <_dtoa_r+0x292>
 800e4d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4da:	9a01      	ldr	r2, [sp, #4]
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	9b03      	ldr	r3, [sp, #12]
 800e4e0:	2b0e      	cmp	r3, #14
 800e4e2:	f200 809d 	bhi.w	800e620 <_dtoa_r+0x468>
 800e4e6:	2d00      	cmp	r5, #0
 800e4e8:	f000 809a 	beq.w	800e620 <_dtoa_r+0x468>
 800e4ec:	9b00      	ldr	r3, [sp, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	dd32      	ble.n	800e558 <_dtoa_r+0x3a0>
 800e4f2:	4ab7      	ldr	r2, [pc, #732]	; (800e7d0 <_dtoa_r+0x618>)
 800e4f4:	f003 030f 	and.w	r3, r3, #15
 800e4f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e500:	9b00      	ldr	r3, [sp, #0]
 800e502:	05d8      	lsls	r0, r3, #23
 800e504:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e508:	d516      	bpl.n	800e538 <_dtoa_r+0x380>
 800e50a:	4bb2      	ldr	r3, [pc, #712]	; (800e7d4 <_dtoa_r+0x61c>)
 800e50c:	ec51 0b19 	vmov	r0, r1, d9
 800e510:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e514:	f7f2 f9ba 	bl	800088c <__aeabi_ddiv>
 800e518:	f007 070f 	and.w	r7, r7, #15
 800e51c:	4682      	mov	sl, r0
 800e51e:	468b      	mov	fp, r1
 800e520:	2503      	movs	r5, #3
 800e522:	4eac      	ldr	r6, [pc, #688]	; (800e7d4 <_dtoa_r+0x61c>)
 800e524:	b957      	cbnz	r7, 800e53c <_dtoa_r+0x384>
 800e526:	4642      	mov	r2, r8
 800e528:	464b      	mov	r3, r9
 800e52a:	4650      	mov	r0, sl
 800e52c:	4659      	mov	r1, fp
 800e52e:	f7f2 f9ad 	bl	800088c <__aeabi_ddiv>
 800e532:	4682      	mov	sl, r0
 800e534:	468b      	mov	fp, r1
 800e536:	e028      	b.n	800e58a <_dtoa_r+0x3d2>
 800e538:	2502      	movs	r5, #2
 800e53a:	e7f2      	b.n	800e522 <_dtoa_r+0x36a>
 800e53c:	07f9      	lsls	r1, r7, #31
 800e53e:	d508      	bpl.n	800e552 <_dtoa_r+0x39a>
 800e540:	4640      	mov	r0, r8
 800e542:	4649      	mov	r1, r9
 800e544:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e548:	f7f2 f876 	bl	8000638 <__aeabi_dmul>
 800e54c:	3501      	adds	r5, #1
 800e54e:	4680      	mov	r8, r0
 800e550:	4689      	mov	r9, r1
 800e552:	107f      	asrs	r7, r7, #1
 800e554:	3608      	adds	r6, #8
 800e556:	e7e5      	b.n	800e524 <_dtoa_r+0x36c>
 800e558:	f000 809b 	beq.w	800e692 <_dtoa_r+0x4da>
 800e55c:	9b00      	ldr	r3, [sp, #0]
 800e55e:	4f9d      	ldr	r7, [pc, #628]	; (800e7d4 <_dtoa_r+0x61c>)
 800e560:	425e      	negs	r6, r3
 800e562:	4b9b      	ldr	r3, [pc, #620]	; (800e7d0 <_dtoa_r+0x618>)
 800e564:	f006 020f 	and.w	r2, r6, #15
 800e568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e570:	ec51 0b19 	vmov	r0, r1, d9
 800e574:	f7f2 f860 	bl	8000638 <__aeabi_dmul>
 800e578:	1136      	asrs	r6, r6, #4
 800e57a:	4682      	mov	sl, r0
 800e57c:	468b      	mov	fp, r1
 800e57e:	2300      	movs	r3, #0
 800e580:	2502      	movs	r5, #2
 800e582:	2e00      	cmp	r6, #0
 800e584:	d17a      	bne.n	800e67c <_dtoa_r+0x4c4>
 800e586:	2b00      	cmp	r3, #0
 800e588:	d1d3      	bne.n	800e532 <_dtoa_r+0x37a>
 800e58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	f000 8082 	beq.w	800e696 <_dtoa_r+0x4de>
 800e592:	4b91      	ldr	r3, [pc, #580]	; (800e7d8 <_dtoa_r+0x620>)
 800e594:	2200      	movs	r2, #0
 800e596:	4650      	mov	r0, sl
 800e598:	4659      	mov	r1, fp
 800e59a:	f7f2 fabf 	bl	8000b1c <__aeabi_dcmplt>
 800e59e:	2800      	cmp	r0, #0
 800e5a0:	d079      	beq.n	800e696 <_dtoa_r+0x4de>
 800e5a2:	9b03      	ldr	r3, [sp, #12]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d076      	beq.n	800e696 <_dtoa_r+0x4de>
 800e5a8:	9b02      	ldr	r3, [sp, #8]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	dd36      	ble.n	800e61c <_dtoa_r+0x464>
 800e5ae:	9b00      	ldr	r3, [sp, #0]
 800e5b0:	4650      	mov	r0, sl
 800e5b2:	4659      	mov	r1, fp
 800e5b4:	1e5f      	subs	r7, r3, #1
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	4b88      	ldr	r3, [pc, #544]	; (800e7dc <_dtoa_r+0x624>)
 800e5ba:	f7f2 f83d 	bl	8000638 <__aeabi_dmul>
 800e5be:	9e02      	ldr	r6, [sp, #8]
 800e5c0:	4682      	mov	sl, r0
 800e5c2:	468b      	mov	fp, r1
 800e5c4:	3501      	adds	r5, #1
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f7f1 ffcc 	bl	8000564 <__aeabi_i2d>
 800e5cc:	4652      	mov	r2, sl
 800e5ce:	465b      	mov	r3, fp
 800e5d0:	f7f2 f832 	bl	8000638 <__aeabi_dmul>
 800e5d4:	4b82      	ldr	r3, [pc, #520]	; (800e7e0 <_dtoa_r+0x628>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	f7f1 fe78 	bl	80002cc <__adddf3>
 800e5dc:	46d0      	mov	r8, sl
 800e5de:	46d9      	mov	r9, fp
 800e5e0:	4682      	mov	sl, r0
 800e5e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e5e6:	2e00      	cmp	r6, #0
 800e5e8:	d158      	bne.n	800e69c <_dtoa_r+0x4e4>
 800e5ea:	4b7e      	ldr	r3, [pc, #504]	; (800e7e4 <_dtoa_r+0x62c>)
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	4640      	mov	r0, r8
 800e5f0:	4649      	mov	r1, r9
 800e5f2:	f7f1 fe69 	bl	80002c8 <__aeabi_dsub>
 800e5f6:	4652      	mov	r2, sl
 800e5f8:	465b      	mov	r3, fp
 800e5fa:	4680      	mov	r8, r0
 800e5fc:	4689      	mov	r9, r1
 800e5fe:	f7f2 faab 	bl	8000b58 <__aeabi_dcmpgt>
 800e602:	2800      	cmp	r0, #0
 800e604:	f040 8295 	bne.w	800eb32 <_dtoa_r+0x97a>
 800e608:	4652      	mov	r2, sl
 800e60a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e60e:	4640      	mov	r0, r8
 800e610:	4649      	mov	r1, r9
 800e612:	f7f2 fa83 	bl	8000b1c <__aeabi_dcmplt>
 800e616:	2800      	cmp	r0, #0
 800e618:	f040 8289 	bne.w	800eb2e <_dtoa_r+0x976>
 800e61c:	ec5b ab19 	vmov	sl, fp, d9
 800e620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e622:	2b00      	cmp	r3, #0
 800e624:	f2c0 8148 	blt.w	800e8b8 <_dtoa_r+0x700>
 800e628:	9a00      	ldr	r2, [sp, #0]
 800e62a:	2a0e      	cmp	r2, #14
 800e62c:	f300 8144 	bgt.w	800e8b8 <_dtoa_r+0x700>
 800e630:	4b67      	ldr	r3, [pc, #412]	; (800e7d0 <_dtoa_r+0x618>)
 800e632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e636:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e63a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f280 80d5 	bge.w	800e7ec <_dtoa_r+0x634>
 800e642:	9b03      	ldr	r3, [sp, #12]
 800e644:	2b00      	cmp	r3, #0
 800e646:	f300 80d1 	bgt.w	800e7ec <_dtoa_r+0x634>
 800e64a:	f040 826f 	bne.w	800eb2c <_dtoa_r+0x974>
 800e64e:	4b65      	ldr	r3, [pc, #404]	; (800e7e4 <_dtoa_r+0x62c>)
 800e650:	2200      	movs	r2, #0
 800e652:	4640      	mov	r0, r8
 800e654:	4649      	mov	r1, r9
 800e656:	f7f1 ffef 	bl	8000638 <__aeabi_dmul>
 800e65a:	4652      	mov	r2, sl
 800e65c:	465b      	mov	r3, fp
 800e65e:	f7f2 fa71 	bl	8000b44 <__aeabi_dcmpge>
 800e662:	9e03      	ldr	r6, [sp, #12]
 800e664:	4637      	mov	r7, r6
 800e666:	2800      	cmp	r0, #0
 800e668:	f040 8245 	bne.w	800eaf6 <_dtoa_r+0x93e>
 800e66c:	9d01      	ldr	r5, [sp, #4]
 800e66e:	2331      	movs	r3, #49	; 0x31
 800e670:	f805 3b01 	strb.w	r3, [r5], #1
 800e674:	9b00      	ldr	r3, [sp, #0]
 800e676:	3301      	adds	r3, #1
 800e678:	9300      	str	r3, [sp, #0]
 800e67a:	e240      	b.n	800eafe <_dtoa_r+0x946>
 800e67c:	07f2      	lsls	r2, r6, #31
 800e67e:	d505      	bpl.n	800e68c <_dtoa_r+0x4d4>
 800e680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e684:	f7f1 ffd8 	bl	8000638 <__aeabi_dmul>
 800e688:	3501      	adds	r5, #1
 800e68a:	2301      	movs	r3, #1
 800e68c:	1076      	asrs	r6, r6, #1
 800e68e:	3708      	adds	r7, #8
 800e690:	e777      	b.n	800e582 <_dtoa_r+0x3ca>
 800e692:	2502      	movs	r5, #2
 800e694:	e779      	b.n	800e58a <_dtoa_r+0x3d2>
 800e696:	9f00      	ldr	r7, [sp, #0]
 800e698:	9e03      	ldr	r6, [sp, #12]
 800e69a:	e794      	b.n	800e5c6 <_dtoa_r+0x40e>
 800e69c:	9901      	ldr	r1, [sp, #4]
 800e69e:	4b4c      	ldr	r3, [pc, #304]	; (800e7d0 <_dtoa_r+0x618>)
 800e6a0:	4431      	add	r1, r6
 800e6a2:	910d      	str	r1, [sp, #52]	; 0x34
 800e6a4:	9908      	ldr	r1, [sp, #32]
 800e6a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e6aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6ae:	2900      	cmp	r1, #0
 800e6b0:	d043      	beq.n	800e73a <_dtoa_r+0x582>
 800e6b2:	494d      	ldr	r1, [pc, #308]	; (800e7e8 <_dtoa_r+0x630>)
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	f7f2 f8e9 	bl	800088c <__aeabi_ddiv>
 800e6ba:	4652      	mov	r2, sl
 800e6bc:	465b      	mov	r3, fp
 800e6be:	f7f1 fe03 	bl	80002c8 <__aeabi_dsub>
 800e6c2:	9d01      	ldr	r5, [sp, #4]
 800e6c4:	4682      	mov	sl, r0
 800e6c6:	468b      	mov	fp, r1
 800e6c8:	4649      	mov	r1, r9
 800e6ca:	4640      	mov	r0, r8
 800e6cc:	f7f2 fa64 	bl	8000b98 <__aeabi_d2iz>
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	f7f1 ff47 	bl	8000564 <__aeabi_i2d>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	460b      	mov	r3, r1
 800e6da:	4640      	mov	r0, r8
 800e6dc:	4649      	mov	r1, r9
 800e6de:	f7f1 fdf3 	bl	80002c8 <__aeabi_dsub>
 800e6e2:	3630      	adds	r6, #48	; 0x30
 800e6e4:	f805 6b01 	strb.w	r6, [r5], #1
 800e6e8:	4652      	mov	r2, sl
 800e6ea:	465b      	mov	r3, fp
 800e6ec:	4680      	mov	r8, r0
 800e6ee:	4689      	mov	r9, r1
 800e6f0:	f7f2 fa14 	bl	8000b1c <__aeabi_dcmplt>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d163      	bne.n	800e7c0 <_dtoa_r+0x608>
 800e6f8:	4642      	mov	r2, r8
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	4936      	ldr	r1, [pc, #216]	; (800e7d8 <_dtoa_r+0x620>)
 800e6fe:	2000      	movs	r0, #0
 800e700:	f7f1 fde2 	bl	80002c8 <__aeabi_dsub>
 800e704:	4652      	mov	r2, sl
 800e706:	465b      	mov	r3, fp
 800e708:	f7f2 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	f040 80b5 	bne.w	800e87c <_dtoa_r+0x6c4>
 800e712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e714:	429d      	cmp	r5, r3
 800e716:	d081      	beq.n	800e61c <_dtoa_r+0x464>
 800e718:	4b30      	ldr	r3, [pc, #192]	; (800e7dc <_dtoa_r+0x624>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	4650      	mov	r0, sl
 800e71e:	4659      	mov	r1, fp
 800e720:	f7f1 ff8a 	bl	8000638 <__aeabi_dmul>
 800e724:	4b2d      	ldr	r3, [pc, #180]	; (800e7dc <_dtoa_r+0x624>)
 800e726:	4682      	mov	sl, r0
 800e728:	468b      	mov	fp, r1
 800e72a:	4640      	mov	r0, r8
 800e72c:	4649      	mov	r1, r9
 800e72e:	2200      	movs	r2, #0
 800e730:	f7f1 ff82 	bl	8000638 <__aeabi_dmul>
 800e734:	4680      	mov	r8, r0
 800e736:	4689      	mov	r9, r1
 800e738:	e7c6      	b.n	800e6c8 <_dtoa_r+0x510>
 800e73a:	4650      	mov	r0, sl
 800e73c:	4659      	mov	r1, fp
 800e73e:	f7f1 ff7b 	bl	8000638 <__aeabi_dmul>
 800e742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e744:	9d01      	ldr	r5, [sp, #4]
 800e746:	930f      	str	r3, [sp, #60]	; 0x3c
 800e748:	4682      	mov	sl, r0
 800e74a:	468b      	mov	fp, r1
 800e74c:	4649      	mov	r1, r9
 800e74e:	4640      	mov	r0, r8
 800e750:	f7f2 fa22 	bl	8000b98 <__aeabi_d2iz>
 800e754:	4606      	mov	r6, r0
 800e756:	f7f1 ff05 	bl	8000564 <__aeabi_i2d>
 800e75a:	3630      	adds	r6, #48	; 0x30
 800e75c:	4602      	mov	r2, r0
 800e75e:	460b      	mov	r3, r1
 800e760:	4640      	mov	r0, r8
 800e762:	4649      	mov	r1, r9
 800e764:	f7f1 fdb0 	bl	80002c8 <__aeabi_dsub>
 800e768:	f805 6b01 	strb.w	r6, [r5], #1
 800e76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e76e:	429d      	cmp	r5, r3
 800e770:	4680      	mov	r8, r0
 800e772:	4689      	mov	r9, r1
 800e774:	f04f 0200 	mov.w	r2, #0
 800e778:	d124      	bne.n	800e7c4 <_dtoa_r+0x60c>
 800e77a:	4b1b      	ldr	r3, [pc, #108]	; (800e7e8 <_dtoa_r+0x630>)
 800e77c:	4650      	mov	r0, sl
 800e77e:	4659      	mov	r1, fp
 800e780:	f7f1 fda4 	bl	80002cc <__adddf3>
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	f7f2 f9e4 	bl	8000b58 <__aeabi_dcmpgt>
 800e790:	2800      	cmp	r0, #0
 800e792:	d173      	bne.n	800e87c <_dtoa_r+0x6c4>
 800e794:	4652      	mov	r2, sl
 800e796:	465b      	mov	r3, fp
 800e798:	4913      	ldr	r1, [pc, #76]	; (800e7e8 <_dtoa_r+0x630>)
 800e79a:	2000      	movs	r0, #0
 800e79c:	f7f1 fd94 	bl	80002c8 <__aeabi_dsub>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	4649      	mov	r1, r9
 800e7a8:	f7f2 f9b8 	bl	8000b1c <__aeabi_dcmplt>
 800e7ac:	2800      	cmp	r0, #0
 800e7ae:	f43f af35 	beq.w	800e61c <_dtoa_r+0x464>
 800e7b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e7b4:	1e6b      	subs	r3, r5, #1
 800e7b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7bc:	2b30      	cmp	r3, #48	; 0x30
 800e7be:	d0f8      	beq.n	800e7b2 <_dtoa_r+0x5fa>
 800e7c0:	9700      	str	r7, [sp, #0]
 800e7c2:	e049      	b.n	800e858 <_dtoa_r+0x6a0>
 800e7c4:	4b05      	ldr	r3, [pc, #20]	; (800e7dc <_dtoa_r+0x624>)
 800e7c6:	f7f1 ff37 	bl	8000638 <__aeabi_dmul>
 800e7ca:	4680      	mov	r8, r0
 800e7cc:	4689      	mov	r9, r1
 800e7ce:	e7bd      	b.n	800e74c <_dtoa_r+0x594>
 800e7d0:	080127e8 	.word	0x080127e8
 800e7d4:	080127c0 	.word	0x080127c0
 800e7d8:	3ff00000 	.word	0x3ff00000
 800e7dc:	40240000 	.word	0x40240000
 800e7e0:	401c0000 	.word	0x401c0000
 800e7e4:	40140000 	.word	0x40140000
 800e7e8:	3fe00000 	.word	0x3fe00000
 800e7ec:	9d01      	ldr	r5, [sp, #4]
 800e7ee:	4656      	mov	r6, sl
 800e7f0:	465f      	mov	r7, fp
 800e7f2:	4642      	mov	r2, r8
 800e7f4:	464b      	mov	r3, r9
 800e7f6:	4630      	mov	r0, r6
 800e7f8:	4639      	mov	r1, r7
 800e7fa:	f7f2 f847 	bl	800088c <__aeabi_ddiv>
 800e7fe:	f7f2 f9cb 	bl	8000b98 <__aeabi_d2iz>
 800e802:	4682      	mov	sl, r0
 800e804:	f7f1 feae 	bl	8000564 <__aeabi_i2d>
 800e808:	4642      	mov	r2, r8
 800e80a:	464b      	mov	r3, r9
 800e80c:	f7f1 ff14 	bl	8000638 <__aeabi_dmul>
 800e810:	4602      	mov	r2, r0
 800e812:	460b      	mov	r3, r1
 800e814:	4630      	mov	r0, r6
 800e816:	4639      	mov	r1, r7
 800e818:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e81c:	f7f1 fd54 	bl	80002c8 <__aeabi_dsub>
 800e820:	f805 6b01 	strb.w	r6, [r5], #1
 800e824:	9e01      	ldr	r6, [sp, #4]
 800e826:	9f03      	ldr	r7, [sp, #12]
 800e828:	1bae      	subs	r6, r5, r6
 800e82a:	42b7      	cmp	r7, r6
 800e82c:	4602      	mov	r2, r0
 800e82e:	460b      	mov	r3, r1
 800e830:	d135      	bne.n	800e89e <_dtoa_r+0x6e6>
 800e832:	f7f1 fd4b 	bl	80002cc <__adddf3>
 800e836:	4642      	mov	r2, r8
 800e838:	464b      	mov	r3, r9
 800e83a:	4606      	mov	r6, r0
 800e83c:	460f      	mov	r7, r1
 800e83e:	f7f2 f98b 	bl	8000b58 <__aeabi_dcmpgt>
 800e842:	b9d0      	cbnz	r0, 800e87a <_dtoa_r+0x6c2>
 800e844:	4642      	mov	r2, r8
 800e846:	464b      	mov	r3, r9
 800e848:	4630      	mov	r0, r6
 800e84a:	4639      	mov	r1, r7
 800e84c:	f7f2 f95c 	bl	8000b08 <__aeabi_dcmpeq>
 800e850:	b110      	cbz	r0, 800e858 <_dtoa_r+0x6a0>
 800e852:	f01a 0f01 	tst.w	sl, #1
 800e856:	d110      	bne.n	800e87a <_dtoa_r+0x6c2>
 800e858:	4620      	mov	r0, r4
 800e85a:	ee18 1a10 	vmov	r1, s16
 800e85e:	f000 ff7b 	bl	800f758 <_Bfree>
 800e862:	2300      	movs	r3, #0
 800e864:	9800      	ldr	r0, [sp, #0]
 800e866:	702b      	strb	r3, [r5, #0]
 800e868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e86a:	3001      	adds	r0, #1
 800e86c:	6018      	str	r0, [r3, #0]
 800e86e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e870:	2b00      	cmp	r3, #0
 800e872:	f43f acf1 	beq.w	800e258 <_dtoa_r+0xa0>
 800e876:	601d      	str	r5, [r3, #0]
 800e878:	e4ee      	b.n	800e258 <_dtoa_r+0xa0>
 800e87a:	9f00      	ldr	r7, [sp, #0]
 800e87c:	462b      	mov	r3, r5
 800e87e:	461d      	mov	r5, r3
 800e880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e884:	2a39      	cmp	r2, #57	; 0x39
 800e886:	d106      	bne.n	800e896 <_dtoa_r+0x6de>
 800e888:	9a01      	ldr	r2, [sp, #4]
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d1f7      	bne.n	800e87e <_dtoa_r+0x6c6>
 800e88e:	9901      	ldr	r1, [sp, #4]
 800e890:	2230      	movs	r2, #48	; 0x30
 800e892:	3701      	adds	r7, #1
 800e894:	700a      	strb	r2, [r1, #0]
 800e896:	781a      	ldrb	r2, [r3, #0]
 800e898:	3201      	adds	r2, #1
 800e89a:	701a      	strb	r2, [r3, #0]
 800e89c:	e790      	b.n	800e7c0 <_dtoa_r+0x608>
 800e89e:	4ba6      	ldr	r3, [pc, #664]	; (800eb38 <_dtoa_r+0x980>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f7f1 fec9 	bl	8000638 <__aeabi_dmul>
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	4606      	mov	r6, r0
 800e8ac:	460f      	mov	r7, r1
 800e8ae:	f7f2 f92b 	bl	8000b08 <__aeabi_dcmpeq>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d09d      	beq.n	800e7f2 <_dtoa_r+0x63a>
 800e8b6:	e7cf      	b.n	800e858 <_dtoa_r+0x6a0>
 800e8b8:	9a08      	ldr	r2, [sp, #32]
 800e8ba:	2a00      	cmp	r2, #0
 800e8bc:	f000 80d7 	beq.w	800ea6e <_dtoa_r+0x8b6>
 800e8c0:	9a06      	ldr	r2, [sp, #24]
 800e8c2:	2a01      	cmp	r2, #1
 800e8c4:	f300 80ba 	bgt.w	800ea3c <_dtoa_r+0x884>
 800e8c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ca:	2a00      	cmp	r2, #0
 800e8cc:	f000 80b2 	beq.w	800ea34 <_dtoa_r+0x87c>
 800e8d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8d4:	9e07      	ldr	r6, [sp, #28]
 800e8d6:	9d04      	ldr	r5, [sp, #16]
 800e8d8:	9a04      	ldr	r2, [sp, #16]
 800e8da:	441a      	add	r2, r3
 800e8dc:	9204      	str	r2, [sp, #16]
 800e8de:	9a05      	ldr	r2, [sp, #20]
 800e8e0:	2101      	movs	r1, #1
 800e8e2:	441a      	add	r2, r3
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	9205      	str	r2, [sp, #20]
 800e8e8:	f001 f838 	bl	800f95c <__i2b>
 800e8ec:	4607      	mov	r7, r0
 800e8ee:	2d00      	cmp	r5, #0
 800e8f0:	dd0c      	ble.n	800e90c <_dtoa_r+0x754>
 800e8f2:	9b05      	ldr	r3, [sp, #20]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	dd09      	ble.n	800e90c <_dtoa_r+0x754>
 800e8f8:	42ab      	cmp	r3, r5
 800e8fa:	9a04      	ldr	r2, [sp, #16]
 800e8fc:	bfa8      	it	ge
 800e8fe:	462b      	movge	r3, r5
 800e900:	1ad2      	subs	r2, r2, r3
 800e902:	9204      	str	r2, [sp, #16]
 800e904:	9a05      	ldr	r2, [sp, #20]
 800e906:	1aed      	subs	r5, r5, r3
 800e908:	1ad3      	subs	r3, r2, r3
 800e90a:	9305      	str	r3, [sp, #20]
 800e90c:	9b07      	ldr	r3, [sp, #28]
 800e90e:	b31b      	cbz	r3, 800e958 <_dtoa_r+0x7a0>
 800e910:	9b08      	ldr	r3, [sp, #32]
 800e912:	2b00      	cmp	r3, #0
 800e914:	f000 80af 	beq.w	800ea76 <_dtoa_r+0x8be>
 800e918:	2e00      	cmp	r6, #0
 800e91a:	dd13      	ble.n	800e944 <_dtoa_r+0x78c>
 800e91c:	4639      	mov	r1, r7
 800e91e:	4632      	mov	r2, r6
 800e920:	4620      	mov	r0, r4
 800e922:	f001 f8db 	bl	800fadc <__pow5mult>
 800e926:	ee18 2a10 	vmov	r2, s16
 800e92a:	4601      	mov	r1, r0
 800e92c:	4607      	mov	r7, r0
 800e92e:	4620      	mov	r0, r4
 800e930:	f001 f82a 	bl	800f988 <__multiply>
 800e934:	ee18 1a10 	vmov	r1, s16
 800e938:	4680      	mov	r8, r0
 800e93a:	4620      	mov	r0, r4
 800e93c:	f000 ff0c 	bl	800f758 <_Bfree>
 800e940:	ee08 8a10 	vmov	s16, r8
 800e944:	9b07      	ldr	r3, [sp, #28]
 800e946:	1b9a      	subs	r2, r3, r6
 800e948:	d006      	beq.n	800e958 <_dtoa_r+0x7a0>
 800e94a:	ee18 1a10 	vmov	r1, s16
 800e94e:	4620      	mov	r0, r4
 800e950:	f001 f8c4 	bl	800fadc <__pow5mult>
 800e954:	ee08 0a10 	vmov	s16, r0
 800e958:	2101      	movs	r1, #1
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 fffe 	bl	800f95c <__i2b>
 800e960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e962:	2b00      	cmp	r3, #0
 800e964:	4606      	mov	r6, r0
 800e966:	f340 8088 	ble.w	800ea7a <_dtoa_r+0x8c2>
 800e96a:	461a      	mov	r2, r3
 800e96c:	4601      	mov	r1, r0
 800e96e:	4620      	mov	r0, r4
 800e970:	f001 f8b4 	bl	800fadc <__pow5mult>
 800e974:	9b06      	ldr	r3, [sp, #24]
 800e976:	2b01      	cmp	r3, #1
 800e978:	4606      	mov	r6, r0
 800e97a:	f340 8081 	ble.w	800ea80 <_dtoa_r+0x8c8>
 800e97e:	f04f 0800 	mov.w	r8, #0
 800e982:	6933      	ldr	r3, [r6, #16]
 800e984:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e988:	6918      	ldr	r0, [r3, #16]
 800e98a:	f000 ff97 	bl	800f8bc <__hi0bits>
 800e98e:	f1c0 0020 	rsb	r0, r0, #32
 800e992:	9b05      	ldr	r3, [sp, #20]
 800e994:	4418      	add	r0, r3
 800e996:	f010 001f 	ands.w	r0, r0, #31
 800e99a:	f000 8092 	beq.w	800eac2 <_dtoa_r+0x90a>
 800e99e:	f1c0 0320 	rsb	r3, r0, #32
 800e9a2:	2b04      	cmp	r3, #4
 800e9a4:	f340 808a 	ble.w	800eabc <_dtoa_r+0x904>
 800e9a8:	f1c0 001c 	rsb	r0, r0, #28
 800e9ac:	9b04      	ldr	r3, [sp, #16]
 800e9ae:	4403      	add	r3, r0
 800e9b0:	9304      	str	r3, [sp, #16]
 800e9b2:	9b05      	ldr	r3, [sp, #20]
 800e9b4:	4403      	add	r3, r0
 800e9b6:	4405      	add	r5, r0
 800e9b8:	9305      	str	r3, [sp, #20]
 800e9ba:	9b04      	ldr	r3, [sp, #16]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	dd07      	ble.n	800e9d0 <_dtoa_r+0x818>
 800e9c0:	ee18 1a10 	vmov	r1, s16
 800e9c4:	461a      	mov	r2, r3
 800e9c6:	4620      	mov	r0, r4
 800e9c8:	f001 f8e2 	bl	800fb90 <__lshift>
 800e9cc:	ee08 0a10 	vmov	s16, r0
 800e9d0:	9b05      	ldr	r3, [sp, #20]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	dd05      	ble.n	800e9e2 <_dtoa_r+0x82a>
 800e9d6:	4631      	mov	r1, r6
 800e9d8:	461a      	mov	r2, r3
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f001 f8d8 	bl	800fb90 <__lshift>
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d06e      	beq.n	800eac6 <_dtoa_r+0x90e>
 800e9e8:	ee18 0a10 	vmov	r0, s16
 800e9ec:	4631      	mov	r1, r6
 800e9ee:	f001 f93f 	bl	800fc70 <__mcmp>
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	da67      	bge.n	800eac6 <_dtoa_r+0x90e>
 800e9f6:	9b00      	ldr	r3, [sp, #0]
 800e9f8:	3b01      	subs	r3, #1
 800e9fa:	ee18 1a10 	vmov	r1, s16
 800e9fe:	9300      	str	r3, [sp, #0]
 800ea00:	220a      	movs	r2, #10
 800ea02:	2300      	movs	r3, #0
 800ea04:	4620      	mov	r0, r4
 800ea06:	f000 fec9 	bl	800f79c <__multadd>
 800ea0a:	9b08      	ldr	r3, [sp, #32]
 800ea0c:	ee08 0a10 	vmov	s16, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	f000 81b1 	beq.w	800ed78 <_dtoa_r+0xbc0>
 800ea16:	2300      	movs	r3, #0
 800ea18:	4639      	mov	r1, r7
 800ea1a:	220a      	movs	r2, #10
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f000 febd 	bl	800f79c <__multadd>
 800ea22:	9b02      	ldr	r3, [sp, #8]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	4607      	mov	r7, r0
 800ea28:	f300 808e 	bgt.w	800eb48 <_dtoa_r+0x990>
 800ea2c:	9b06      	ldr	r3, [sp, #24]
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	dc51      	bgt.n	800ead6 <_dtoa_r+0x91e>
 800ea32:	e089      	b.n	800eb48 <_dtoa_r+0x990>
 800ea34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea3a:	e74b      	b.n	800e8d4 <_dtoa_r+0x71c>
 800ea3c:	9b03      	ldr	r3, [sp, #12]
 800ea3e:	1e5e      	subs	r6, r3, #1
 800ea40:	9b07      	ldr	r3, [sp, #28]
 800ea42:	42b3      	cmp	r3, r6
 800ea44:	bfbf      	itttt	lt
 800ea46:	9b07      	ldrlt	r3, [sp, #28]
 800ea48:	9607      	strlt	r6, [sp, #28]
 800ea4a:	1af2      	sublt	r2, r6, r3
 800ea4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea4e:	bfb6      	itet	lt
 800ea50:	189b      	addlt	r3, r3, r2
 800ea52:	1b9e      	subge	r6, r3, r6
 800ea54:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea56:	9b03      	ldr	r3, [sp, #12]
 800ea58:	bfb8      	it	lt
 800ea5a:	2600      	movlt	r6, #0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	bfb7      	itett	lt
 800ea60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea68:	1a9d      	sublt	r5, r3, r2
 800ea6a:	2300      	movlt	r3, #0
 800ea6c:	e734      	b.n	800e8d8 <_dtoa_r+0x720>
 800ea6e:	9e07      	ldr	r6, [sp, #28]
 800ea70:	9d04      	ldr	r5, [sp, #16]
 800ea72:	9f08      	ldr	r7, [sp, #32]
 800ea74:	e73b      	b.n	800e8ee <_dtoa_r+0x736>
 800ea76:	9a07      	ldr	r2, [sp, #28]
 800ea78:	e767      	b.n	800e94a <_dtoa_r+0x792>
 800ea7a:	9b06      	ldr	r3, [sp, #24]
 800ea7c:	2b01      	cmp	r3, #1
 800ea7e:	dc18      	bgt.n	800eab2 <_dtoa_r+0x8fa>
 800ea80:	f1ba 0f00 	cmp.w	sl, #0
 800ea84:	d115      	bne.n	800eab2 <_dtoa_r+0x8fa>
 800ea86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea8a:	b993      	cbnz	r3, 800eab2 <_dtoa_r+0x8fa>
 800ea8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea90:	0d1b      	lsrs	r3, r3, #20
 800ea92:	051b      	lsls	r3, r3, #20
 800ea94:	b183      	cbz	r3, 800eab8 <_dtoa_r+0x900>
 800ea96:	9b04      	ldr	r3, [sp, #16]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	9304      	str	r3, [sp, #16]
 800ea9c:	9b05      	ldr	r3, [sp, #20]
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	9305      	str	r3, [sp, #20]
 800eaa2:	f04f 0801 	mov.w	r8, #1
 800eaa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f47f af6a 	bne.w	800e982 <_dtoa_r+0x7ca>
 800eaae:	2001      	movs	r0, #1
 800eab0:	e76f      	b.n	800e992 <_dtoa_r+0x7da>
 800eab2:	f04f 0800 	mov.w	r8, #0
 800eab6:	e7f6      	b.n	800eaa6 <_dtoa_r+0x8ee>
 800eab8:	4698      	mov	r8, r3
 800eaba:	e7f4      	b.n	800eaa6 <_dtoa_r+0x8ee>
 800eabc:	f43f af7d 	beq.w	800e9ba <_dtoa_r+0x802>
 800eac0:	4618      	mov	r0, r3
 800eac2:	301c      	adds	r0, #28
 800eac4:	e772      	b.n	800e9ac <_dtoa_r+0x7f4>
 800eac6:	9b03      	ldr	r3, [sp, #12]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	dc37      	bgt.n	800eb3c <_dtoa_r+0x984>
 800eacc:	9b06      	ldr	r3, [sp, #24]
 800eace:	2b02      	cmp	r3, #2
 800ead0:	dd34      	ble.n	800eb3c <_dtoa_r+0x984>
 800ead2:	9b03      	ldr	r3, [sp, #12]
 800ead4:	9302      	str	r3, [sp, #8]
 800ead6:	9b02      	ldr	r3, [sp, #8]
 800ead8:	b96b      	cbnz	r3, 800eaf6 <_dtoa_r+0x93e>
 800eada:	4631      	mov	r1, r6
 800eadc:	2205      	movs	r2, #5
 800eade:	4620      	mov	r0, r4
 800eae0:	f000 fe5c 	bl	800f79c <__multadd>
 800eae4:	4601      	mov	r1, r0
 800eae6:	4606      	mov	r6, r0
 800eae8:	ee18 0a10 	vmov	r0, s16
 800eaec:	f001 f8c0 	bl	800fc70 <__mcmp>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	f73f adbb 	bgt.w	800e66c <_dtoa_r+0x4b4>
 800eaf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eaf8:	9d01      	ldr	r5, [sp, #4]
 800eafa:	43db      	mvns	r3, r3
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	f04f 0800 	mov.w	r8, #0
 800eb02:	4631      	mov	r1, r6
 800eb04:	4620      	mov	r0, r4
 800eb06:	f000 fe27 	bl	800f758 <_Bfree>
 800eb0a:	2f00      	cmp	r7, #0
 800eb0c:	f43f aea4 	beq.w	800e858 <_dtoa_r+0x6a0>
 800eb10:	f1b8 0f00 	cmp.w	r8, #0
 800eb14:	d005      	beq.n	800eb22 <_dtoa_r+0x96a>
 800eb16:	45b8      	cmp	r8, r7
 800eb18:	d003      	beq.n	800eb22 <_dtoa_r+0x96a>
 800eb1a:	4641      	mov	r1, r8
 800eb1c:	4620      	mov	r0, r4
 800eb1e:	f000 fe1b 	bl	800f758 <_Bfree>
 800eb22:	4639      	mov	r1, r7
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fe17 	bl	800f758 <_Bfree>
 800eb2a:	e695      	b.n	800e858 <_dtoa_r+0x6a0>
 800eb2c:	2600      	movs	r6, #0
 800eb2e:	4637      	mov	r7, r6
 800eb30:	e7e1      	b.n	800eaf6 <_dtoa_r+0x93e>
 800eb32:	9700      	str	r7, [sp, #0]
 800eb34:	4637      	mov	r7, r6
 800eb36:	e599      	b.n	800e66c <_dtoa_r+0x4b4>
 800eb38:	40240000 	.word	0x40240000
 800eb3c:	9b08      	ldr	r3, [sp, #32]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	f000 80ca 	beq.w	800ecd8 <_dtoa_r+0xb20>
 800eb44:	9b03      	ldr	r3, [sp, #12]
 800eb46:	9302      	str	r3, [sp, #8]
 800eb48:	2d00      	cmp	r5, #0
 800eb4a:	dd05      	ble.n	800eb58 <_dtoa_r+0x9a0>
 800eb4c:	4639      	mov	r1, r7
 800eb4e:	462a      	mov	r2, r5
 800eb50:	4620      	mov	r0, r4
 800eb52:	f001 f81d 	bl	800fb90 <__lshift>
 800eb56:	4607      	mov	r7, r0
 800eb58:	f1b8 0f00 	cmp.w	r8, #0
 800eb5c:	d05b      	beq.n	800ec16 <_dtoa_r+0xa5e>
 800eb5e:	6879      	ldr	r1, [r7, #4]
 800eb60:	4620      	mov	r0, r4
 800eb62:	f000 fdb9 	bl	800f6d8 <_Balloc>
 800eb66:	4605      	mov	r5, r0
 800eb68:	b928      	cbnz	r0, 800eb76 <_dtoa_r+0x9be>
 800eb6a:	4b87      	ldr	r3, [pc, #540]	; (800ed88 <_dtoa_r+0xbd0>)
 800eb6c:	4602      	mov	r2, r0
 800eb6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb72:	f7ff bb3b 	b.w	800e1ec <_dtoa_r+0x34>
 800eb76:	693a      	ldr	r2, [r7, #16]
 800eb78:	3202      	adds	r2, #2
 800eb7a:	0092      	lsls	r2, r2, #2
 800eb7c:	f107 010c 	add.w	r1, r7, #12
 800eb80:	300c      	adds	r0, #12
 800eb82:	f7fd fbe1 	bl	800c348 <memcpy>
 800eb86:	2201      	movs	r2, #1
 800eb88:	4629      	mov	r1, r5
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f001 f800 	bl	800fb90 <__lshift>
 800eb90:	9b01      	ldr	r3, [sp, #4]
 800eb92:	f103 0901 	add.w	r9, r3, #1
 800eb96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	9305      	str	r3, [sp, #20]
 800eb9e:	f00a 0301 	and.w	r3, sl, #1
 800eba2:	46b8      	mov	r8, r7
 800eba4:	9304      	str	r3, [sp, #16]
 800eba6:	4607      	mov	r7, r0
 800eba8:	4631      	mov	r1, r6
 800ebaa:	ee18 0a10 	vmov	r0, s16
 800ebae:	f7ff fa75 	bl	800e09c <quorem>
 800ebb2:	4641      	mov	r1, r8
 800ebb4:	9002      	str	r0, [sp, #8]
 800ebb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ebba:	ee18 0a10 	vmov	r0, s16
 800ebbe:	f001 f857 	bl	800fc70 <__mcmp>
 800ebc2:	463a      	mov	r2, r7
 800ebc4:	9003      	str	r0, [sp, #12]
 800ebc6:	4631      	mov	r1, r6
 800ebc8:	4620      	mov	r0, r4
 800ebca:	f001 f86d 	bl	800fca8 <__mdiff>
 800ebce:	68c2      	ldr	r2, [r0, #12]
 800ebd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ebd4:	4605      	mov	r5, r0
 800ebd6:	bb02      	cbnz	r2, 800ec1a <_dtoa_r+0xa62>
 800ebd8:	4601      	mov	r1, r0
 800ebda:	ee18 0a10 	vmov	r0, s16
 800ebde:	f001 f847 	bl	800fc70 <__mcmp>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	9207      	str	r2, [sp, #28]
 800ebea:	f000 fdb5 	bl	800f758 <_Bfree>
 800ebee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ebf2:	ea43 0102 	orr.w	r1, r3, r2
 800ebf6:	9b04      	ldr	r3, [sp, #16]
 800ebf8:	430b      	orrs	r3, r1
 800ebfa:	464d      	mov	r5, r9
 800ebfc:	d10f      	bne.n	800ec1e <_dtoa_r+0xa66>
 800ebfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec02:	d02a      	beq.n	800ec5a <_dtoa_r+0xaa2>
 800ec04:	9b03      	ldr	r3, [sp, #12]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	dd02      	ble.n	800ec10 <_dtoa_r+0xa58>
 800ec0a:	9b02      	ldr	r3, [sp, #8]
 800ec0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec10:	f88b a000 	strb.w	sl, [fp]
 800ec14:	e775      	b.n	800eb02 <_dtoa_r+0x94a>
 800ec16:	4638      	mov	r0, r7
 800ec18:	e7ba      	b.n	800eb90 <_dtoa_r+0x9d8>
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	e7e2      	b.n	800ebe4 <_dtoa_r+0xa2c>
 800ec1e:	9b03      	ldr	r3, [sp, #12]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	db04      	blt.n	800ec2e <_dtoa_r+0xa76>
 800ec24:	9906      	ldr	r1, [sp, #24]
 800ec26:	430b      	orrs	r3, r1
 800ec28:	9904      	ldr	r1, [sp, #16]
 800ec2a:	430b      	orrs	r3, r1
 800ec2c:	d122      	bne.n	800ec74 <_dtoa_r+0xabc>
 800ec2e:	2a00      	cmp	r2, #0
 800ec30:	ddee      	ble.n	800ec10 <_dtoa_r+0xa58>
 800ec32:	ee18 1a10 	vmov	r1, s16
 800ec36:	2201      	movs	r2, #1
 800ec38:	4620      	mov	r0, r4
 800ec3a:	f000 ffa9 	bl	800fb90 <__lshift>
 800ec3e:	4631      	mov	r1, r6
 800ec40:	ee08 0a10 	vmov	s16, r0
 800ec44:	f001 f814 	bl	800fc70 <__mcmp>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	dc03      	bgt.n	800ec54 <_dtoa_r+0xa9c>
 800ec4c:	d1e0      	bne.n	800ec10 <_dtoa_r+0xa58>
 800ec4e:	f01a 0f01 	tst.w	sl, #1
 800ec52:	d0dd      	beq.n	800ec10 <_dtoa_r+0xa58>
 800ec54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec58:	d1d7      	bne.n	800ec0a <_dtoa_r+0xa52>
 800ec5a:	2339      	movs	r3, #57	; 0x39
 800ec5c:	f88b 3000 	strb.w	r3, [fp]
 800ec60:	462b      	mov	r3, r5
 800ec62:	461d      	mov	r5, r3
 800ec64:	3b01      	subs	r3, #1
 800ec66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec6a:	2a39      	cmp	r2, #57	; 0x39
 800ec6c:	d071      	beq.n	800ed52 <_dtoa_r+0xb9a>
 800ec6e:	3201      	adds	r2, #1
 800ec70:	701a      	strb	r2, [r3, #0]
 800ec72:	e746      	b.n	800eb02 <_dtoa_r+0x94a>
 800ec74:	2a00      	cmp	r2, #0
 800ec76:	dd07      	ble.n	800ec88 <_dtoa_r+0xad0>
 800ec78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec7c:	d0ed      	beq.n	800ec5a <_dtoa_r+0xaa2>
 800ec7e:	f10a 0301 	add.w	r3, sl, #1
 800ec82:	f88b 3000 	strb.w	r3, [fp]
 800ec86:	e73c      	b.n	800eb02 <_dtoa_r+0x94a>
 800ec88:	9b05      	ldr	r3, [sp, #20]
 800ec8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ec8e:	4599      	cmp	r9, r3
 800ec90:	d047      	beq.n	800ed22 <_dtoa_r+0xb6a>
 800ec92:	ee18 1a10 	vmov	r1, s16
 800ec96:	2300      	movs	r3, #0
 800ec98:	220a      	movs	r2, #10
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	f000 fd7e 	bl	800f79c <__multadd>
 800eca0:	45b8      	cmp	r8, r7
 800eca2:	ee08 0a10 	vmov	s16, r0
 800eca6:	f04f 0300 	mov.w	r3, #0
 800ecaa:	f04f 020a 	mov.w	r2, #10
 800ecae:	4641      	mov	r1, r8
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	d106      	bne.n	800ecc2 <_dtoa_r+0xb0a>
 800ecb4:	f000 fd72 	bl	800f79c <__multadd>
 800ecb8:	4680      	mov	r8, r0
 800ecba:	4607      	mov	r7, r0
 800ecbc:	f109 0901 	add.w	r9, r9, #1
 800ecc0:	e772      	b.n	800eba8 <_dtoa_r+0x9f0>
 800ecc2:	f000 fd6b 	bl	800f79c <__multadd>
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	4680      	mov	r8, r0
 800ecca:	2300      	movs	r3, #0
 800eccc:	220a      	movs	r2, #10
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 fd64 	bl	800f79c <__multadd>
 800ecd4:	4607      	mov	r7, r0
 800ecd6:	e7f1      	b.n	800ecbc <_dtoa_r+0xb04>
 800ecd8:	9b03      	ldr	r3, [sp, #12]
 800ecda:	9302      	str	r3, [sp, #8]
 800ecdc:	9d01      	ldr	r5, [sp, #4]
 800ecde:	ee18 0a10 	vmov	r0, s16
 800ece2:	4631      	mov	r1, r6
 800ece4:	f7ff f9da 	bl	800e09c <quorem>
 800ece8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecec:	9b01      	ldr	r3, [sp, #4]
 800ecee:	f805 ab01 	strb.w	sl, [r5], #1
 800ecf2:	1aea      	subs	r2, r5, r3
 800ecf4:	9b02      	ldr	r3, [sp, #8]
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	dd09      	ble.n	800ed0e <_dtoa_r+0xb56>
 800ecfa:	ee18 1a10 	vmov	r1, s16
 800ecfe:	2300      	movs	r3, #0
 800ed00:	220a      	movs	r2, #10
 800ed02:	4620      	mov	r0, r4
 800ed04:	f000 fd4a 	bl	800f79c <__multadd>
 800ed08:	ee08 0a10 	vmov	s16, r0
 800ed0c:	e7e7      	b.n	800ecde <_dtoa_r+0xb26>
 800ed0e:	9b02      	ldr	r3, [sp, #8]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	bfc8      	it	gt
 800ed14:	461d      	movgt	r5, r3
 800ed16:	9b01      	ldr	r3, [sp, #4]
 800ed18:	bfd8      	it	le
 800ed1a:	2501      	movle	r5, #1
 800ed1c:	441d      	add	r5, r3
 800ed1e:	f04f 0800 	mov.w	r8, #0
 800ed22:	ee18 1a10 	vmov	r1, s16
 800ed26:	2201      	movs	r2, #1
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 ff31 	bl	800fb90 <__lshift>
 800ed2e:	4631      	mov	r1, r6
 800ed30:	ee08 0a10 	vmov	s16, r0
 800ed34:	f000 ff9c 	bl	800fc70 <__mcmp>
 800ed38:	2800      	cmp	r0, #0
 800ed3a:	dc91      	bgt.n	800ec60 <_dtoa_r+0xaa8>
 800ed3c:	d102      	bne.n	800ed44 <_dtoa_r+0xb8c>
 800ed3e:	f01a 0f01 	tst.w	sl, #1
 800ed42:	d18d      	bne.n	800ec60 <_dtoa_r+0xaa8>
 800ed44:	462b      	mov	r3, r5
 800ed46:	461d      	mov	r5, r3
 800ed48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed4c:	2a30      	cmp	r2, #48	; 0x30
 800ed4e:	d0fa      	beq.n	800ed46 <_dtoa_r+0xb8e>
 800ed50:	e6d7      	b.n	800eb02 <_dtoa_r+0x94a>
 800ed52:	9a01      	ldr	r2, [sp, #4]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d184      	bne.n	800ec62 <_dtoa_r+0xaaa>
 800ed58:	9b00      	ldr	r3, [sp, #0]
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	2331      	movs	r3, #49	; 0x31
 800ed60:	7013      	strb	r3, [r2, #0]
 800ed62:	e6ce      	b.n	800eb02 <_dtoa_r+0x94a>
 800ed64:	4b09      	ldr	r3, [pc, #36]	; (800ed8c <_dtoa_r+0xbd4>)
 800ed66:	f7ff ba95 	b.w	800e294 <_dtoa_r+0xdc>
 800ed6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f47f aa6e 	bne.w	800e24e <_dtoa_r+0x96>
 800ed72:	4b07      	ldr	r3, [pc, #28]	; (800ed90 <_dtoa_r+0xbd8>)
 800ed74:	f7ff ba8e 	b.w	800e294 <_dtoa_r+0xdc>
 800ed78:	9b02      	ldr	r3, [sp, #8]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	dcae      	bgt.n	800ecdc <_dtoa_r+0xb24>
 800ed7e:	9b06      	ldr	r3, [sp, #24]
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	f73f aea8 	bgt.w	800ead6 <_dtoa_r+0x91e>
 800ed86:	e7a9      	b.n	800ecdc <_dtoa_r+0xb24>
 800ed88:	08012673 	.word	0x08012673
 800ed8c:	08012541 	.word	0x08012541
 800ed90:	080125f4 	.word	0x080125f4

0800ed94 <__errno>:
 800ed94:	4b01      	ldr	r3, [pc, #4]	; (800ed9c <__errno+0x8>)
 800ed96:	6818      	ldr	r0, [r3, #0]
 800ed98:	4770      	bx	lr
 800ed9a:	bf00      	nop
 800ed9c:	200001a8 	.word	0x200001a8

0800eda0 <std>:
 800eda0:	2300      	movs	r3, #0
 800eda2:	b510      	push	{r4, lr}
 800eda4:	4604      	mov	r4, r0
 800eda6:	e9c0 3300 	strd	r3, r3, [r0]
 800edaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800edae:	6083      	str	r3, [r0, #8]
 800edb0:	8181      	strh	r1, [r0, #12]
 800edb2:	6643      	str	r3, [r0, #100]	; 0x64
 800edb4:	81c2      	strh	r2, [r0, #14]
 800edb6:	6183      	str	r3, [r0, #24]
 800edb8:	4619      	mov	r1, r3
 800edba:	2208      	movs	r2, #8
 800edbc:	305c      	adds	r0, #92	; 0x5c
 800edbe:	f7fd faeb 	bl	800c398 <memset>
 800edc2:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <std+0x38>)
 800edc4:	6263      	str	r3, [r4, #36]	; 0x24
 800edc6:	4b05      	ldr	r3, [pc, #20]	; (800eddc <std+0x3c>)
 800edc8:	62a3      	str	r3, [r4, #40]	; 0x28
 800edca:	4b05      	ldr	r3, [pc, #20]	; (800ede0 <std+0x40>)
 800edcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800edce:	4b05      	ldr	r3, [pc, #20]	; (800ede4 <std+0x44>)
 800edd0:	6224      	str	r4, [r4, #32]
 800edd2:	6323      	str	r3, [r4, #48]	; 0x30
 800edd4:	bd10      	pop	{r4, pc}
 800edd6:	bf00      	nop
 800edd8:	08010381 	.word	0x08010381
 800eddc:	080103a3 	.word	0x080103a3
 800ede0:	080103db 	.word	0x080103db
 800ede4:	080103ff 	.word	0x080103ff

0800ede8 <_cleanup_r>:
 800ede8:	4901      	ldr	r1, [pc, #4]	; (800edf0 <_cleanup_r+0x8>)
 800edea:	f000 b8c1 	b.w	800ef70 <_fwalk_reent>
 800edee:	bf00      	nop
 800edf0:	080106f5 	.word	0x080106f5

0800edf4 <__sfmoreglue>:
 800edf4:	b570      	push	{r4, r5, r6, lr}
 800edf6:	2268      	movs	r2, #104	; 0x68
 800edf8:	1e4d      	subs	r5, r1, #1
 800edfa:	4355      	muls	r5, r2
 800edfc:	460e      	mov	r6, r1
 800edfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee02:	f7fd fb91 	bl	800c528 <_malloc_r>
 800ee06:	4604      	mov	r4, r0
 800ee08:	b140      	cbz	r0, 800ee1c <__sfmoreglue+0x28>
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	e9c0 1600 	strd	r1, r6, [r0]
 800ee10:	300c      	adds	r0, #12
 800ee12:	60a0      	str	r0, [r4, #8]
 800ee14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee18:	f7fd fabe 	bl	800c398 <memset>
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	bd70      	pop	{r4, r5, r6, pc}

0800ee20 <__sfp_lock_acquire>:
 800ee20:	4801      	ldr	r0, [pc, #4]	; (800ee28 <__sfp_lock_acquire+0x8>)
 800ee22:	f000 bc38 	b.w	800f696 <__retarget_lock_acquire_recursive>
 800ee26:	bf00      	nop
 800ee28:	2000baa5 	.word	0x2000baa5

0800ee2c <__sfp_lock_release>:
 800ee2c:	4801      	ldr	r0, [pc, #4]	; (800ee34 <__sfp_lock_release+0x8>)
 800ee2e:	f000 bc33 	b.w	800f698 <__retarget_lock_release_recursive>
 800ee32:	bf00      	nop
 800ee34:	2000baa5 	.word	0x2000baa5

0800ee38 <__sinit_lock_acquire>:
 800ee38:	4801      	ldr	r0, [pc, #4]	; (800ee40 <__sinit_lock_acquire+0x8>)
 800ee3a:	f000 bc2c 	b.w	800f696 <__retarget_lock_acquire_recursive>
 800ee3e:	bf00      	nop
 800ee40:	2000baa6 	.word	0x2000baa6

0800ee44 <__sinit_lock_release>:
 800ee44:	4801      	ldr	r0, [pc, #4]	; (800ee4c <__sinit_lock_release+0x8>)
 800ee46:	f000 bc27 	b.w	800f698 <__retarget_lock_release_recursive>
 800ee4a:	bf00      	nop
 800ee4c:	2000baa6 	.word	0x2000baa6

0800ee50 <__sinit>:
 800ee50:	b510      	push	{r4, lr}
 800ee52:	4604      	mov	r4, r0
 800ee54:	f7ff fff0 	bl	800ee38 <__sinit_lock_acquire>
 800ee58:	69a3      	ldr	r3, [r4, #24]
 800ee5a:	b11b      	cbz	r3, 800ee64 <__sinit+0x14>
 800ee5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee60:	f7ff bff0 	b.w	800ee44 <__sinit_lock_release>
 800ee64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee68:	6523      	str	r3, [r4, #80]	; 0x50
 800ee6a:	4b13      	ldr	r3, [pc, #76]	; (800eeb8 <__sinit+0x68>)
 800ee6c:	4a13      	ldr	r2, [pc, #76]	; (800eebc <__sinit+0x6c>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee72:	42a3      	cmp	r3, r4
 800ee74:	bf04      	itt	eq
 800ee76:	2301      	moveq	r3, #1
 800ee78:	61a3      	streq	r3, [r4, #24]
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	f000 f820 	bl	800eec0 <__sfp>
 800ee80:	6060      	str	r0, [r4, #4]
 800ee82:	4620      	mov	r0, r4
 800ee84:	f000 f81c 	bl	800eec0 <__sfp>
 800ee88:	60a0      	str	r0, [r4, #8]
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f000 f818 	bl	800eec0 <__sfp>
 800ee90:	2200      	movs	r2, #0
 800ee92:	60e0      	str	r0, [r4, #12]
 800ee94:	2104      	movs	r1, #4
 800ee96:	6860      	ldr	r0, [r4, #4]
 800ee98:	f7ff ff82 	bl	800eda0 <std>
 800ee9c:	68a0      	ldr	r0, [r4, #8]
 800ee9e:	2201      	movs	r2, #1
 800eea0:	2109      	movs	r1, #9
 800eea2:	f7ff ff7d 	bl	800eda0 <std>
 800eea6:	68e0      	ldr	r0, [r4, #12]
 800eea8:	2202      	movs	r2, #2
 800eeaa:	2112      	movs	r1, #18
 800eeac:	f7ff ff78 	bl	800eda0 <std>
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	61a3      	str	r3, [r4, #24]
 800eeb4:	e7d2      	b.n	800ee5c <__sinit+0xc>
 800eeb6:	bf00      	nop
 800eeb8:	0801251c 	.word	0x0801251c
 800eebc:	0800ede9 	.word	0x0800ede9

0800eec0 <__sfp>:
 800eec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eec2:	4607      	mov	r7, r0
 800eec4:	f7ff ffac 	bl	800ee20 <__sfp_lock_acquire>
 800eec8:	4b1e      	ldr	r3, [pc, #120]	; (800ef44 <__sfp+0x84>)
 800eeca:	681e      	ldr	r6, [r3, #0]
 800eecc:	69b3      	ldr	r3, [r6, #24]
 800eece:	b913      	cbnz	r3, 800eed6 <__sfp+0x16>
 800eed0:	4630      	mov	r0, r6
 800eed2:	f7ff ffbd 	bl	800ee50 <__sinit>
 800eed6:	3648      	adds	r6, #72	; 0x48
 800eed8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eedc:	3b01      	subs	r3, #1
 800eede:	d503      	bpl.n	800eee8 <__sfp+0x28>
 800eee0:	6833      	ldr	r3, [r6, #0]
 800eee2:	b30b      	cbz	r3, 800ef28 <__sfp+0x68>
 800eee4:	6836      	ldr	r6, [r6, #0]
 800eee6:	e7f7      	b.n	800eed8 <__sfp+0x18>
 800eee8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eeec:	b9d5      	cbnz	r5, 800ef24 <__sfp+0x64>
 800eeee:	4b16      	ldr	r3, [pc, #88]	; (800ef48 <__sfp+0x88>)
 800eef0:	60e3      	str	r3, [r4, #12]
 800eef2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eef6:	6665      	str	r5, [r4, #100]	; 0x64
 800eef8:	f000 fbcc 	bl	800f694 <__retarget_lock_init_recursive>
 800eefc:	f7ff ff96 	bl	800ee2c <__sfp_lock_release>
 800ef00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef08:	6025      	str	r5, [r4, #0]
 800ef0a:	61a5      	str	r5, [r4, #24]
 800ef0c:	2208      	movs	r2, #8
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef14:	f7fd fa40 	bl	800c398 <memset>
 800ef18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef20:	4620      	mov	r0, r4
 800ef22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef24:	3468      	adds	r4, #104	; 0x68
 800ef26:	e7d9      	b.n	800eedc <__sfp+0x1c>
 800ef28:	2104      	movs	r1, #4
 800ef2a:	4638      	mov	r0, r7
 800ef2c:	f7ff ff62 	bl	800edf4 <__sfmoreglue>
 800ef30:	4604      	mov	r4, r0
 800ef32:	6030      	str	r0, [r6, #0]
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d1d5      	bne.n	800eee4 <__sfp+0x24>
 800ef38:	f7ff ff78 	bl	800ee2c <__sfp_lock_release>
 800ef3c:	230c      	movs	r3, #12
 800ef3e:	603b      	str	r3, [r7, #0]
 800ef40:	e7ee      	b.n	800ef20 <__sfp+0x60>
 800ef42:	bf00      	nop
 800ef44:	0801251c 	.word	0x0801251c
 800ef48:	ffff0001 	.word	0xffff0001

0800ef4c <fiprintf>:
 800ef4c:	b40e      	push	{r1, r2, r3}
 800ef4e:	b503      	push	{r0, r1, lr}
 800ef50:	4601      	mov	r1, r0
 800ef52:	ab03      	add	r3, sp, #12
 800ef54:	4805      	ldr	r0, [pc, #20]	; (800ef6c <fiprintf+0x20>)
 800ef56:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef5a:	6800      	ldr	r0, [r0, #0]
 800ef5c:	9301      	str	r3, [sp, #4]
 800ef5e:	f001 f8d5 	bl	801010c <_vfiprintf_r>
 800ef62:	b002      	add	sp, #8
 800ef64:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef68:	b003      	add	sp, #12
 800ef6a:	4770      	bx	lr
 800ef6c:	200001a8 	.word	0x200001a8

0800ef70 <_fwalk_reent>:
 800ef70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef74:	4606      	mov	r6, r0
 800ef76:	4688      	mov	r8, r1
 800ef78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef7c:	2700      	movs	r7, #0
 800ef7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef82:	f1b9 0901 	subs.w	r9, r9, #1
 800ef86:	d505      	bpl.n	800ef94 <_fwalk_reent+0x24>
 800ef88:	6824      	ldr	r4, [r4, #0]
 800ef8a:	2c00      	cmp	r4, #0
 800ef8c:	d1f7      	bne.n	800ef7e <_fwalk_reent+0xe>
 800ef8e:	4638      	mov	r0, r7
 800ef90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef94:	89ab      	ldrh	r3, [r5, #12]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d907      	bls.n	800efaa <_fwalk_reent+0x3a>
 800ef9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef9e:	3301      	adds	r3, #1
 800efa0:	d003      	beq.n	800efaa <_fwalk_reent+0x3a>
 800efa2:	4629      	mov	r1, r5
 800efa4:	4630      	mov	r0, r6
 800efa6:	47c0      	blx	r8
 800efa8:	4307      	orrs	r7, r0
 800efaa:	3568      	adds	r5, #104	; 0x68
 800efac:	e7e9      	b.n	800ef82 <_fwalk_reent+0x12>

0800efae <rshift>:
 800efae:	6903      	ldr	r3, [r0, #16]
 800efb0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800efb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800efb8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800efbc:	f100 0414 	add.w	r4, r0, #20
 800efc0:	dd45      	ble.n	800f04e <rshift+0xa0>
 800efc2:	f011 011f 	ands.w	r1, r1, #31
 800efc6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800efca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800efce:	d10c      	bne.n	800efea <rshift+0x3c>
 800efd0:	f100 0710 	add.w	r7, r0, #16
 800efd4:	4629      	mov	r1, r5
 800efd6:	42b1      	cmp	r1, r6
 800efd8:	d334      	bcc.n	800f044 <rshift+0x96>
 800efda:	1a9b      	subs	r3, r3, r2
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	1eea      	subs	r2, r5, #3
 800efe0:	4296      	cmp	r6, r2
 800efe2:	bf38      	it	cc
 800efe4:	2300      	movcc	r3, #0
 800efe6:	4423      	add	r3, r4
 800efe8:	e015      	b.n	800f016 <rshift+0x68>
 800efea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800efee:	f1c1 0820 	rsb	r8, r1, #32
 800eff2:	40cf      	lsrs	r7, r1
 800eff4:	f105 0e04 	add.w	lr, r5, #4
 800eff8:	46a1      	mov	r9, r4
 800effa:	4576      	cmp	r6, lr
 800effc:	46f4      	mov	ip, lr
 800effe:	d815      	bhi.n	800f02c <rshift+0x7e>
 800f000:	1a9a      	subs	r2, r3, r2
 800f002:	0092      	lsls	r2, r2, #2
 800f004:	3a04      	subs	r2, #4
 800f006:	3501      	adds	r5, #1
 800f008:	42ae      	cmp	r6, r5
 800f00a:	bf38      	it	cc
 800f00c:	2200      	movcc	r2, #0
 800f00e:	18a3      	adds	r3, r4, r2
 800f010:	50a7      	str	r7, [r4, r2]
 800f012:	b107      	cbz	r7, 800f016 <rshift+0x68>
 800f014:	3304      	adds	r3, #4
 800f016:	1b1a      	subs	r2, r3, r4
 800f018:	42a3      	cmp	r3, r4
 800f01a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f01e:	bf08      	it	eq
 800f020:	2300      	moveq	r3, #0
 800f022:	6102      	str	r2, [r0, #16]
 800f024:	bf08      	it	eq
 800f026:	6143      	streq	r3, [r0, #20]
 800f028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f02c:	f8dc c000 	ldr.w	ip, [ip]
 800f030:	fa0c fc08 	lsl.w	ip, ip, r8
 800f034:	ea4c 0707 	orr.w	r7, ip, r7
 800f038:	f849 7b04 	str.w	r7, [r9], #4
 800f03c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f040:	40cf      	lsrs	r7, r1
 800f042:	e7da      	b.n	800effa <rshift+0x4c>
 800f044:	f851 cb04 	ldr.w	ip, [r1], #4
 800f048:	f847 cf04 	str.w	ip, [r7, #4]!
 800f04c:	e7c3      	b.n	800efd6 <rshift+0x28>
 800f04e:	4623      	mov	r3, r4
 800f050:	e7e1      	b.n	800f016 <rshift+0x68>

0800f052 <__hexdig_fun>:
 800f052:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f056:	2b09      	cmp	r3, #9
 800f058:	d802      	bhi.n	800f060 <__hexdig_fun+0xe>
 800f05a:	3820      	subs	r0, #32
 800f05c:	b2c0      	uxtb	r0, r0
 800f05e:	4770      	bx	lr
 800f060:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f064:	2b05      	cmp	r3, #5
 800f066:	d801      	bhi.n	800f06c <__hexdig_fun+0x1a>
 800f068:	3847      	subs	r0, #71	; 0x47
 800f06a:	e7f7      	b.n	800f05c <__hexdig_fun+0xa>
 800f06c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f070:	2b05      	cmp	r3, #5
 800f072:	d801      	bhi.n	800f078 <__hexdig_fun+0x26>
 800f074:	3827      	subs	r0, #39	; 0x27
 800f076:	e7f1      	b.n	800f05c <__hexdig_fun+0xa>
 800f078:	2000      	movs	r0, #0
 800f07a:	4770      	bx	lr

0800f07c <__gethex>:
 800f07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f080:	ed2d 8b02 	vpush	{d8}
 800f084:	b089      	sub	sp, #36	; 0x24
 800f086:	ee08 0a10 	vmov	s16, r0
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	4bb4      	ldr	r3, [pc, #720]	; (800f360 <__gethex+0x2e4>)
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	9301      	str	r3, [sp, #4]
 800f092:	4618      	mov	r0, r3
 800f094:	468b      	mov	fp, r1
 800f096:	4690      	mov	r8, r2
 800f098:	f7f1 f8b4 	bl	8000204 <strlen>
 800f09c:	9b01      	ldr	r3, [sp, #4]
 800f09e:	f8db 2000 	ldr.w	r2, [fp]
 800f0a2:	4403      	add	r3, r0
 800f0a4:	4682      	mov	sl, r0
 800f0a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f0aa:	9305      	str	r3, [sp, #20]
 800f0ac:	1c93      	adds	r3, r2, #2
 800f0ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f0b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f0b6:	32fe      	adds	r2, #254	; 0xfe
 800f0b8:	18d1      	adds	r1, r2, r3
 800f0ba:	461f      	mov	r7, r3
 800f0bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f0c0:	9100      	str	r1, [sp, #0]
 800f0c2:	2830      	cmp	r0, #48	; 0x30
 800f0c4:	d0f8      	beq.n	800f0b8 <__gethex+0x3c>
 800f0c6:	f7ff ffc4 	bl	800f052 <__hexdig_fun>
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d13a      	bne.n	800f146 <__gethex+0xca>
 800f0d0:	9901      	ldr	r1, [sp, #4]
 800f0d2:	4652      	mov	r2, sl
 800f0d4:	4638      	mov	r0, r7
 800f0d6:	f7fe f8b5 	bl	800d244 <strncmp>
 800f0da:	4605      	mov	r5, r0
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d168      	bne.n	800f1b2 <__gethex+0x136>
 800f0e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f0e4:	eb07 060a 	add.w	r6, r7, sl
 800f0e8:	f7ff ffb3 	bl	800f052 <__hexdig_fun>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d062      	beq.n	800f1b6 <__gethex+0x13a>
 800f0f0:	4633      	mov	r3, r6
 800f0f2:	7818      	ldrb	r0, [r3, #0]
 800f0f4:	2830      	cmp	r0, #48	; 0x30
 800f0f6:	461f      	mov	r7, r3
 800f0f8:	f103 0301 	add.w	r3, r3, #1
 800f0fc:	d0f9      	beq.n	800f0f2 <__gethex+0x76>
 800f0fe:	f7ff ffa8 	bl	800f052 <__hexdig_fun>
 800f102:	2301      	movs	r3, #1
 800f104:	fab0 f480 	clz	r4, r0
 800f108:	0964      	lsrs	r4, r4, #5
 800f10a:	4635      	mov	r5, r6
 800f10c:	9300      	str	r3, [sp, #0]
 800f10e:	463a      	mov	r2, r7
 800f110:	4616      	mov	r6, r2
 800f112:	3201      	adds	r2, #1
 800f114:	7830      	ldrb	r0, [r6, #0]
 800f116:	f7ff ff9c 	bl	800f052 <__hexdig_fun>
 800f11a:	2800      	cmp	r0, #0
 800f11c:	d1f8      	bne.n	800f110 <__gethex+0x94>
 800f11e:	9901      	ldr	r1, [sp, #4]
 800f120:	4652      	mov	r2, sl
 800f122:	4630      	mov	r0, r6
 800f124:	f7fe f88e 	bl	800d244 <strncmp>
 800f128:	b980      	cbnz	r0, 800f14c <__gethex+0xd0>
 800f12a:	b94d      	cbnz	r5, 800f140 <__gethex+0xc4>
 800f12c:	eb06 050a 	add.w	r5, r6, sl
 800f130:	462a      	mov	r2, r5
 800f132:	4616      	mov	r6, r2
 800f134:	3201      	adds	r2, #1
 800f136:	7830      	ldrb	r0, [r6, #0]
 800f138:	f7ff ff8b 	bl	800f052 <__hexdig_fun>
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d1f8      	bne.n	800f132 <__gethex+0xb6>
 800f140:	1bad      	subs	r5, r5, r6
 800f142:	00ad      	lsls	r5, r5, #2
 800f144:	e004      	b.n	800f150 <__gethex+0xd4>
 800f146:	2400      	movs	r4, #0
 800f148:	4625      	mov	r5, r4
 800f14a:	e7e0      	b.n	800f10e <__gethex+0x92>
 800f14c:	2d00      	cmp	r5, #0
 800f14e:	d1f7      	bne.n	800f140 <__gethex+0xc4>
 800f150:	7833      	ldrb	r3, [r6, #0]
 800f152:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f156:	2b50      	cmp	r3, #80	; 0x50
 800f158:	d13b      	bne.n	800f1d2 <__gethex+0x156>
 800f15a:	7873      	ldrb	r3, [r6, #1]
 800f15c:	2b2b      	cmp	r3, #43	; 0x2b
 800f15e:	d02c      	beq.n	800f1ba <__gethex+0x13e>
 800f160:	2b2d      	cmp	r3, #45	; 0x2d
 800f162:	d02e      	beq.n	800f1c2 <__gethex+0x146>
 800f164:	1c71      	adds	r1, r6, #1
 800f166:	f04f 0900 	mov.w	r9, #0
 800f16a:	7808      	ldrb	r0, [r1, #0]
 800f16c:	f7ff ff71 	bl	800f052 <__hexdig_fun>
 800f170:	1e43      	subs	r3, r0, #1
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b18      	cmp	r3, #24
 800f176:	d82c      	bhi.n	800f1d2 <__gethex+0x156>
 800f178:	f1a0 0210 	sub.w	r2, r0, #16
 800f17c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f180:	f7ff ff67 	bl	800f052 <__hexdig_fun>
 800f184:	1e43      	subs	r3, r0, #1
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b18      	cmp	r3, #24
 800f18a:	d91d      	bls.n	800f1c8 <__gethex+0x14c>
 800f18c:	f1b9 0f00 	cmp.w	r9, #0
 800f190:	d000      	beq.n	800f194 <__gethex+0x118>
 800f192:	4252      	negs	r2, r2
 800f194:	4415      	add	r5, r2
 800f196:	f8cb 1000 	str.w	r1, [fp]
 800f19a:	b1e4      	cbz	r4, 800f1d6 <__gethex+0x15a>
 800f19c:	9b00      	ldr	r3, [sp, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	bf14      	ite	ne
 800f1a2:	2700      	movne	r7, #0
 800f1a4:	2706      	moveq	r7, #6
 800f1a6:	4638      	mov	r0, r7
 800f1a8:	b009      	add	sp, #36	; 0x24
 800f1aa:	ecbd 8b02 	vpop	{d8}
 800f1ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b2:	463e      	mov	r6, r7
 800f1b4:	4625      	mov	r5, r4
 800f1b6:	2401      	movs	r4, #1
 800f1b8:	e7ca      	b.n	800f150 <__gethex+0xd4>
 800f1ba:	f04f 0900 	mov.w	r9, #0
 800f1be:	1cb1      	adds	r1, r6, #2
 800f1c0:	e7d3      	b.n	800f16a <__gethex+0xee>
 800f1c2:	f04f 0901 	mov.w	r9, #1
 800f1c6:	e7fa      	b.n	800f1be <__gethex+0x142>
 800f1c8:	230a      	movs	r3, #10
 800f1ca:	fb03 0202 	mla	r2, r3, r2, r0
 800f1ce:	3a10      	subs	r2, #16
 800f1d0:	e7d4      	b.n	800f17c <__gethex+0x100>
 800f1d2:	4631      	mov	r1, r6
 800f1d4:	e7df      	b.n	800f196 <__gethex+0x11a>
 800f1d6:	1bf3      	subs	r3, r6, r7
 800f1d8:	3b01      	subs	r3, #1
 800f1da:	4621      	mov	r1, r4
 800f1dc:	2b07      	cmp	r3, #7
 800f1de:	dc0b      	bgt.n	800f1f8 <__gethex+0x17c>
 800f1e0:	ee18 0a10 	vmov	r0, s16
 800f1e4:	f000 fa78 	bl	800f6d8 <_Balloc>
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	b940      	cbnz	r0, 800f1fe <__gethex+0x182>
 800f1ec:	4b5d      	ldr	r3, [pc, #372]	; (800f364 <__gethex+0x2e8>)
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	21de      	movs	r1, #222	; 0xde
 800f1f2:	485d      	ldr	r0, [pc, #372]	; (800f368 <__gethex+0x2ec>)
 800f1f4:	f7fe ff34 	bl	800e060 <__assert_func>
 800f1f8:	3101      	adds	r1, #1
 800f1fa:	105b      	asrs	r3, r3, #1
 800f1fc:	e7ee      	b.n	800f1dc <__gethex+0x160>
 800f1fe:	f100 0914 	add.w	r9, r0, #20
 800f202:	f04f 0b00 	mov.w	fp, #0
 800f206:	f1ca 0301 	rsb	r3, sl, #1
 800f20a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f20e:	f8cd b000 	str.w	fp, [sp]
 800f212:	9306      	str	r3, [sp, #24]
 800f214:	42b7      	cmp	r7, r6
 800f216:	d340      	bcc.n	800f29a <__gethex+0x21e>
 800f218:	9802      	ldr	r0, [sp, #8]
 800f21a:	9b00      	ldr	r3, [sp, #0]
 800f21c:	f840 3b04 	str.w	r3, [r0], #4
 800f220:	eba0 0009 	sub.w	r0, r0, r9
 800f224:	1080      	asrs	r0, r0, #2
 800f226:	0146      	lsls	r6, r0, #5
 800f228:	6120      	str	r0, [r4, #16]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 fb46 	bl	800f8bc <__hi0bits>
 800f230:	1a30      	subs	r0, r6, r0
 800f232:	f8d8 6000 	ldr.w	r6, [r8]
 800f236:	42b0      	cmp	r0, r6
 800f238:	dd63      	ble.n	800f302 <__gethex+0x286>
 800f23a:	1b87      	subs	r7, r0, r6
 800f23c:	4639      	mov	r1, r7
 800f23e:	4620      	mov	r0, r4
 800f240:	f000 feea 	bl	8010018 <__any_on>
 800f244:	4682      	mov	sl, r0
 800f246:	b1a8      	cbz	r0, 800f274 <__gethex+0x1f8>
 800f248:	1e7b      	subs	r3, r7, #1
 800f24a:	1159      	asrs	r1, r3, #5
 800f24c:	f003 021f 	and.w	r2, r3, #31
 800f250:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f254:	f04f 0a01 	mov.w	sl, #1
 800f258:	fa0a f202 	lsl.w	r2, sl, r2
 800f25c:	420a      	tst	r2, r1
 800f25e:	d009      	beq.n	800f274 <__gethex+0x1f8>
 800f260:	4553      	cmp	r3, sl
 800f262:	dd05      	ble.n	800f270 <__gethex+0x1f4>
 800f264:	1eb9      	subs	r1, r7, #2
 800f266:	4620      	mov	r0, r4
 800f268:	f000 fed6 	bl	8010018 <__any_on>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d145      	bne.n	800f2fc <__gethex+0x280>
 800f270:	f04f 0a02 	mov.w	sl, #2
 800f274:	4639      	mov	r1, r7
 800f276:	4620      	mov	r0, r4
 800f278:	f7ff fe99 	bl	800efae <rshift>
 800f27c:	443d      	add	r5, r7
 800f27e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f282:	42ab      	cmp	r3, r5
 800f284:	da4c      	bge.n	800f320 <__gethex+0x2a4>
 800f286:	ee18 0a10 	vmov	r0, s16
 800f28a:	4621      	mov	r1, r4
 800f28c:	f000 fa64 	bl	800f758 <_Bfree>
 800f290:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f292:	2300      	movs	r3, #0
 800f294:	6013      	str	r3, [r2, #0]
 800f296:	27a3      	movs	r7, #163	; 0xa3
 800f298:	e785      	b.n	800f1a6 <__gethex+0x12a>
 800f29a:	1e73      	subs	r3, r6, #1
 800f29c:	9a05      	ldr	r2, [sp, #20]
 800f29e:	9303      	str	r3, [sp, #12]
 800f2a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d019      	beq.n	800f2dc <__gethex+0x260>
 800f2a8:	f1bb 0f20 	cmp.w	fp, #32
 800f2ac:	d107      	bne.n	800f2be <__gethex+0x242>
 800f2ae:	9b02      	ldr	r3, [sp, #8]
 800f2b0:	9a00      	ldr	r2, [sp, #0]
 800f2b2:	f843 2b04 	str.w	r2, [r3], #4
 800f2b6:	9302      	str	r3, [sp, #8]
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	9300      	str	r3, [sp, #0]
 800f2bc:	469b      	mov	fp, r3
 800f2be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f2c2:	f7ff fec6 	bl	800f052 <__hexdig_fun>
 800f2c6:	9b00      	ldr	r3, [sp, #0]
 800f2c8:	f000 000f 	and.w	r0, r0, #15
 800f2cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f2d0:	4303      	orrs	r3, r0
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	f10b 0b04 	add.w	fp, fp, #4
 800f2d8:	9b03      	ldr	r3, [sp, #12]
 800f2da:	e00d      	b.n	800f2f8 <__gethex+0x27c>
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	9a06      	ldr	r2, [sp, #24]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	42bb      	cmp	r3, r7
 800f2e4:	d3e0      	bcc.n	800f2a8 <__gethex+0x22c>
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	9901      	ldr	r1, [sp, #4]
 800f2ea:	9307      	str	r3, [sp, #28]
 800f2ec:	4652      	mov	r2, sl
 800f2ee:	f7fd ffa9 	bl	800d244 <strncmp>
 800f2f2:	9b07      	ldr	r3, [sp, #28]
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d1d7      	bne.n	800f2a8 <__gethex+0x22c>
 800f2f8:	461e      	mov	r6, r3
 800f2fa:	e78b      	b.n	800f214 <__gethex+0x198>
 800f2fc:	f04f 0a03 	mov.w	sl, #3
 800f300:	e7b8      	b.n	800f274 <__gethex+0x1f8>
 800f302:	da0a      	bge.n	800f31a <__gethex+0x29e>
 800f304:	1a37      	subs	r7, r6, r0
 800f306:	4621      	mov	r1, r4
 800f308:	ee18 0a10 	vmov	r0, s16
 800f30c:	463a      	mov	r2, r7
 800f30e:	f000 fc3f 	bl	800fb90 <__lshift>
 800f312:	1bed      	subs	r5, r5, r7
 800f314:	4604      	mov	r4, r0
 800f316:	f100 0914 	add.w	r9, r0, #20
 800f31a:	f04f 0a00 	mov.w	sl, #0
 800f31e:	e7ae      	b.n	800f27e <__gethex+0x202>
 800f320:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f324:	42a8      	cmp	r0, r5
 800f326:	dd72      	ble.n	800f40e <__gethex+0x392>
 800f328:	1b45      	subs	r5, r0, r5
 800f32a:	42ae      	cmp	r6, r5
 800f32c:	dc36      	bgt.n	800f39c <__gethex+0x320>
 800f32e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f332:	2b02      	cmp	r3, #2
 800f334:	d02a      	beq.n	800f38c <__gethex+0x310>
 800f336:	2b03      	cmp	r3, #3
 800f338:	d02c      	beq.n	800f394 <__gethex+0x318>
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d11c      	bne.n	800f378 <__gethex+0x2fc>
 800f33e:	42ae      	cmp	r6, r5
 800f340:	d11a      	bne.n	800f378 <__gethex+0x2fc>
 800f342:	2e01      	cmp	r6, #1
 800f344:	d112      	bne.n	800f36c <__gethex+0x2f0>
 800f346:	9a04      	ldr	r2, [sp, #16]
 800f348:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f34c:	6013      	str	r3, [r2, #0]
 800f34e:	2301      	movs	r3, #1
 800f350:	6123      	str	r3, [r4, #16]
 800f352:	f8c9 3000 	str.w	r3, [r9]
 800f356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f358:	2762      	movs	r7, #98	; 0x62
 800f35a:	601c      	str	r4, [r3, #0]
 800f35c:	e723      	b.n	800f1a6 <__gethex+0x12a>
 800f35e:	bf00      	nop
 800f360:	0801274c 	.word	0x0801274c
 800f364:	08012673 	.word	0x08012673
 800f368:	080126e4 	.word	0x080126e4
 800f36c:	1e71      	subs	r1, r6, #1
 800f36e:	4620      	mov	r0, r4
 800f370:	f000 fe52 	bl	8010018 <__any_on>
 800f374:	2800      	cmp	r0, #0
 800f376:	d1e6      	bne.n	800f346 <__gethex+0x2ca>
 800f378:	ee18 0a10 	vmov	r0, s16
 800f37c:	4621      	mov	r1, r4
 800f37e:	f000 f9eb 	bl	800f758 <_Bfree>
 800f382:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f384:	2300      	movs	r3, #0
 800f386:	6013      	str	r3, [r2, #0]
 800f388:	2750      	movs	r7, #80	; 0x50
 800f38a:	e70c      	b.n	800f1a6 <__gethex+0x12a>
 800f38c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1f2      	bne.n	800f378 <__gethex+0x2fc>
 800f392:	e7d8      	b.n	800f346 <__gethex+0x2ca>
 800f394:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f396:	2b00      	cmp	r3, #0
 800f398:	d1d5      	bne.n	800f346 <__gethex+0x2ca>
 800f39a:	e7ed      	b.n	800f378 <__gethex+0x2fc>
 800f39c:	1e6f      	subs	r7, r5, #1
 800f39e:	f1ba 0f00 	cmp.w	sl, #0
 800f3a2:	d131      	bne.n	800f408 <__gethex+0x38c>
 800f3a4:	b127      	cbz	r7, 800f3b0 <__gethex+0x334>
 800f3a6:	4639      	mov	r1, r7
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 fe35 	bl	8010018 <__any_on>
 800f3ae:	4682      	mov	sl, r0
 800f3b0:	117b      	asrs	r3, r7, #5
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f3b8:	f007 071f 	and.w	r7, r7, #31
 800f3bc:	fa01 f707 	lsl.w	r7, r1, r7
 800f3c0:	421f      	tst	r7, r3
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	4620      	mov	r0, r4
 800f3c6:	bf18      	it	ne
 800f3c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f3cc:	1b76      	subs	r6, r6, r5
 800f3ce:	f7ff fdee 	bl	800efae <rshift>
 800f3d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f3d6:	2702      	movs	r7, #2
 800f3d8:	f1ba 0f00 	cmp.w	sl, #0
 800f3dc:	d048      	beq.n	800f470 <__gethex+0x3f4>
 800f3de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	d015      	beq.n	800f412 <__gethex+0x396>
 800f3e6:	2b03      	cmp	r3, #3
 800f3e8:	d017      	beq.n	800f41a <__gethex+0x39e>
 800f3ea:	2b01      	cmp	r3, #1
 800f3ec:	d109      	bne.n	800f402 <__gethex+0x386>
 800f3ee:	f01a 0f02 	tst.w	sl, #2
 800f3f2:	d006      	beq.n	800f402 <__gethex+0x386>
 800f3f4:	f8d9 0000 	ldr.w	r0, [r9]
 800f3f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800f3fc:	f01a 0f01 	tst.w	sl, #1
 800f400:	d10e      	bne.n	800f420 <__gethex+0x3a4>
 800f402:	f047 0710 	orr.w	r7, r7, #16
 800f406:	e033      	b.n	800f470 <__gethex+0x3f4>
 800f408:	f04f 0a01 	mov.w	sl, #1
 800f40c:	e7d0      	b.n	800f3b0 <__gethex+0x334>
 800f40e:	2701      	movs	r7, #1
 800f410:	e7e2      	b.n	800f3d8 <__gethex+0x35c>
 800f412:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f414:	f1c3 0301 	rsb	r3, r3, #1
 800f418:	9315      	str	r3, [sp, #84]	; 0x54
 800f41a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d0f0      	beq.n	800f402 <__gethex+0x386>
 800f420:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f424:	f104 0314 	add.w	r3, r4, #20
 800f428:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f42c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f430:	f04f 0c00 	mov.w	ip, #0
 800f434:	4618      	mov	r0, r3
 800f436:	f853 2b04 	ldr.w	r2, [r3], #4
 800f43a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f43e:	d01c      	beq.n	800f47a <__gethex+0x3fe>
 800f440:	3201      	adds	r2, #1
 800f442:	6002      	str	r2, [r0, #0]
 800f444:	2f02      	cmp	r7, #2
 800f446:	f104 0314 	add.w	r3, r4, #20
 800f44a:	d13f      	bne.n	800f4cc <__gethex+0x450>
 800f44c:	f8d8 2000 	ldr.w	r2, [r8]
 800f450:	3a01      	subs	r2, #1
 800f452:	42b2      	cmp	r2, r6
 800f454:	d10a      	bne.n	800f46c <__gethex+0x3f0>
 800f456:	1171      	asrs	r1, r6, #5
 800f458:	2201      	movs	r2, #1
 800f45a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f45e:	f006 061f 	and.w	r6, r6, #31
 800f462:	fa02 f606 	lsl.w	r6, r2, r6
 800f466:	421e      	tst	r6, r3
 800f468:	bf18      	it	ne
 800f46a:	4617      	movne	r7, r2
 800f46c:	f047 0720 	orr.w	r7, r7, #32
 800f470:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f472:	601c      	str	r4, [r3, #0]
 800f474:	9b04      	ldr	r3, [sp, #16]
 800f476:	601d      	str	r5, [r3, #0]
 800f478:	e695      	b.n	800f1a6 <__gethex+0x12a>
 800f47a:	4299      	cmp	r1, r3
 800f47c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f480:	d8d8      	bhi.n	800f434 <__gethex+0x3b8>
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	459b      	cmp	fp, r3
 800f486:	db19      	blt.n	800f4bc <__gethex+0x440>
 800f488:	6861      	ldr	r1, [r4, #4]
 800f48a:	ee18 0a10 	vmov	r0, s16
 800f48e:	3101      	adds	r1, #1
 800f490:	f000 f922 	bl	800f6d8 <_Balloc>
 800f494:	4681      	mov	r9, r0
 800f496:	b918      	cbnz	r0, 800f4a0 <__gethex+0x424>
 800f498:	4b1a      	ldr	r3, [pc, #104]	; (800f504 <__gethex+0x488>)
 800f49a:	4602      	mov	r2, r0
 800f49c:	2184      	movs	r1, #132	; 0x84
 800f49e:	e6a8      	b.n	800f1f2 <__gethex+0x176>
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	3202      	adds	r2, #2
 800f4a4:	f104 010c 	add.w	r1, r4, #12
 800f4a8:	0092      	lsls	r2, r2, #2
 800f4aa:	300c      	adds	r0, #12
 800f4ac:	f7fc ff4c 	bl	800c348 <memcpy>
 800f4b0:	4621      	mov	r1, r4
 800f4b2:	ee18 0a10 	vmov	r0, s16
 800f4b6:	f000 f94f 	bl	800f758 <_Bfree>
 800f4ba:	464c      	mov	r4, r9
 800f4bc:	6923      	ldr	r3, [r4, #16]
 800f4be:	1c5a      	adds	r2, r3, #1
 800f4c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f4c4:	6122      	str	r2, [r4, #16]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	615a      	str	r2, [r3, #20]
 800f4ca:	e7bb      	b.n	800f444 <__gethex+0x3c8>
 800f4cc:	6922      	ldr	r2, [r4, #16]
 800f4ce:	455a      	cmp	r2, fp
 800f4d0:	dd0b      	ble.n	800f4ea <__gethex+0x46e>
 800f4d2:	2101      	movs	r1, #1
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f7ff fd6a 	bl	800efae <rshift>
 800f4da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f4de:	3501      	adds	r5, #1
 800f4e0:	42ab      	cmp	r3, r5
 800f4e2:	f6ff aed0 	blt.w	800f286 <__gethex+0x20a>
 800f4e6:	2701      	movs	r7, #1
 800f4e8:	e7c0      	b.n	800f46c <__gethex+0x3f0>
 800f4ea:	f016 061f 	ands.w	r6, r6, #31
 800f4ee:	d0fa      	beq.n	800f4e6 <__gethex+0x46a>
 800f4f0:	4453      	add	r3, sl
 800f4f2:	f1c6 0620 	rsb	r6, r6, #32
 800f4f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f4fa:	f000 f9df 	bl	800f8bc <__hi0bits>
 800f4fe:	42b0      	cmp	r0, r6
 800f500:	dbe7      	blt.n	800f4d2 <__gethex+0x456>
 800f502:	e7f0      	b.n	800f4e6 <__gethex+0x46a>
 800f504:	08012673 	.word	0x08012673

0800f508 <L_shift>:
 800f508:	f1c2 0208 	rsb	r2, r2, #8
 800f50c:	0092      	lsls	r2, r2, #2
 800f50e:	b570      	push	{r4, r5, r6, lr}
 800f510:	f1c2 0620 	rsb	r6, r2, #32
 800f514:	6843      	ldr	r3, [r0, #4]
 800f516:	6804      	ldr	r4, [r0, #0]
 800f518:	fa03 f506 	lsl.w	r5, r3, r6
 800f51c:	432c      	orrs	r4, r5
 800f51e:	40d3      	lsrs	r3, r2
 800f520:	6004      	str	r4, [r0, #0]
 800f522:	f840 3f04 	str.w	r3, [r0, #4]!
 800f526:	4288      	cmp	r0, r1
 800f528:	d3f4      	bcc.n	800f514 <L_shift+0xc>
 800f52a:	bd70      	pop	{r4, r5, r6, pc}

0800f52c <__match>:
 800f52c:	b530      	push	{r4, r5, lr}
 800f52e:	6803      	ldr	r3, [r0, #0]
 800f530:	3301      	adds	r3, #1
 800f532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f536:	b914      	cbnz	r4, 800f53e <__match+0x12>
 800f538:	6003      	str	r3, [r0, #0]
 800f53a:	2001      	movs	r0, #1
 800f53c:	bd30      	pop	{r4, r5, pc}
 800f53e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f542:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f546:	2d19      	cmp	r5, #25
 800f548:	bf98      	it	ls
 800f54a:	3220      	addls	r2, #32
 800f54c:	42a2      	cmp	r2, r4
 800f54e:	d0f0      	beq.n	800f532 <__match+0x6>
 800f550:	2000      	movs	r0, #0
 800f552:	e7f3      	b.n	800f53c <__match+0x10>

0800f554 <__hexnan>:
 800f554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f558:	680b      	ldr	r3, [r1, #0]
 800f55a:	115e      	asrs	r6, r3, #5
 800f55c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f560:	f013 031f 	ands.w	r3, r3, #31
 800f564:	b087      	sub	sp, #28
 800f566:	bf18      	it	ne
 800f568:	3604      	addne	r6, #4
 800f56a:	2500      	movs	r5, #0
 800f56c:	1f37      	subs	r7, r6, #4
 800f56e:	4690      	mov	r8, r2
 800f570:	6802      	ldr	r2, [r0, #0]
 800f572:	9301      	str	r3, [sp, #4]
 800f574:	4682      	mov	sl, r0
 800f576:	f846 5c04 	str.w	r5, [r6, #-4]
 800f57a:	46b9      	mov	r9, r7
 800f57c:	463c      	mov	r4, r7
 800f57e:	9502      	str	r5, [sp, #8]
 800f580:	46ab      	mov	fp, r5
 800f582:	7851      	ldrb	r1, [r2, #1]
 800f584:	1c53      	adds	r3, r2, #1
 800f586:	9303      	str	r3, [sp, #12]
 800f588:	b341      	cbz	r1, 800f5dc <__hexnan+0x88>
 800f58a:	4608      	mov	r0, r1
 800f58c:	9205      	str	r2, [sp, #20]
 800f58e:	9104      	str	r1, [sp, #16]
 800f590:	f7ff fd5f 	bl	800f052 <__hexdig_fun>
 800f594:	2800      	cmp	r0, #0
 800f596:	d14f      	bne.n	800f638 <__hexnan+0xe4>
 800f598:	9904      	ldr	r1, [sp, #16]
 800f59a:	9a05      	ldr	r2, [sp, #20]
 800f59c:	2920      	cmp	r1, #32
 800f59e:	d818      	bhi.n	800f5d2 <__hexnan+0x7e>
 800f5a0:	9b02      	ldr	r3, [sp, #8]
 800f5a2:	459b      	cmp	fp, r3
 800f5a4:	dd13      	ble.n	800f5ce <__hexnan+0x7a>
 800f5a6:	454c      	cmp	r4, r9
 800f5a8:	d206      	bcs.n	800f5b8 <__hexnan+0x64>
 800f5aa:	2d07      	cmp	r5, #7
 800f5ac:	dc04      	bgt.n	800f5b8 <__hexnan+0x64>
 800f5ae:	462a      	mov	r2, r5
 800f5b0:	4649      	mov	r1, r9
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f7ff ffa8 	bl	800f508 <L_shift>
 800f5b8:	4544      	cmp	r4, r8
 800f5ba:	d950      	bls.n	800f65e <__hexnan+0x10a>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	f1a4 0904 	sub.w	r9, r4, #4
 800f5c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5c6:	f8cd b008 	str.w	fp, [sp, #8]
 800f5ca:	464c      	mov	r4, r9
 800f5cc:	461d      	mov	r5, r3
 800f5ce:	9a03      	ldr	r2, [sp, #12]
 800f5d0:	e7d7      	b.n	800f582 <__hexnan+0x2e>
 800f5d2:	2929      	cmp	r1, #41	; 0x29
 800f5d4:	d156      	bne.n	800f684 <__hexnan+0x130>
 800f5d6:	3202      	adds	r2, #2
 800f5d8:	f8ca 2000 	str.w	r2, [sl]
 800f5dc:	f1bb 0f00 	cmp.w	fp, #0
 800f5e0:	d050      	beq.n	800f684 <__hexnan+0x130>
 800f5e2:	454c      	cmp	r4, r9
 800f5e4:	d206      	bcs.n	800f5f4 <__hexnan+0xa0>
 800f5e6:	2d07      	cmp	r5, #7
 800f5e8:	dc04      	bgt.n	800f5f4 <__hexnan+0xa0>
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4649      	mov	r1, r9
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f7ff ff8a 	bl	800f508 <L_shift>
 800f5f4:	4544      	cmp	r4, r8
 800f5f6:	d934      	bls.n	800f662 <__hexnan+0x10e>
 800f5f8:	f1a8 0204 	sub.w	r2, r8, #4
 800f5fc:	4623      	mov	r3, r4
 800f5fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800f602:	f842 1f04 	str.w	r1, [r2, #4]!
 800f606:	429f      	cmp	r7, r3
 800f608:	d2f9      	bcs.n	800f5fe <__hexnan+0xaa>
 800f60a:	1b3b      	subs	r3, r7, r4
 800f60c:	f023 0303 	bic.w	r3, r3, #3
 800f610:	3304      	adds	r3, #4
 800f612:	3401      	adds	r4, #1
 800f614:	3e03      	subs	r6, #3
 800f616:	42b4      	cmp	r4, r6
 800f618:	bf88      	it	hi
 800f61a:	2304      	movhi	r3, #4
 800f61c:	4443      	add	r3, r8
 800f61e:	2200      	movs	r2, #0
 800f620:	f843 2b04 	str.w	r2, [r3], #4
 800f624:	429f      	cmp	r7, r3
 800f626:	d2fb      	bcs.n	800f620 <__hexnan+0xcc>
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	b91b      	cbnz	r3, 800f634 <__hexnan+0xe0>
 800f62c:	4547      	cmp	r7, r8
 800f62e:	d127      	bne.n	800f680 <__hexnan+0x12c>
 800f630:	2301      	movs	r3, #1
 800f632:	603b      	str	r3, [r7, #0]
 800f634:	2005      	movs	r0, #5
 800f636:	e026      	b.n	800f686 <__hexnan+0x132>
 800f638:	3501      	adds	r5, #1
 800f63a:	2d08      	cmp	r5, #8
 800f63c:	f10b 0b01 	add.w	fp, fp, #1
 800f640:	dd06      	ble.n	800f650 <__hexnan+0xfc>
 800f642:	4544      	cmp	r4, r8
 800f644:	d9c3      	bls.n	800f5ce <__hexnan+0x7a>
 800f646:	2300      	movs	r3, #0
 800f648:	f844 3c04 	str.w	r3, [r4, #-4]
 800f64c:	2501      	movs	r5, #1
 800f64e:	3c04      	subs	r4, #4
 800f650:	6822      	ldr	r2, [r4, #0]
 800f652:	f000 000f 	and.w	r0, r0, #15
 800f656:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f65a:	6022      	str	r2, [r4, #0]
 800f65c:	e7b7      	b.n	800f5ce <__hexnan+0x7a>
 800f65e:	2508      	movs	r5, #8
 800f660:	e7b5      	b.n	800f5ce <__hexnan+0x7a>
 800f662:	9b01      	ldr	r3, [sp, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d0df      	beq.n	800f628 <__hexnan+0xd4>
 800f668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f66c:	f1c3 0320 	rsb	r3, r3, #32
 800f670:	fa22 f303 	lsr.w	r3, r2, r3
 800f674:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f678:	401a      	ands	r2, r3
 800f67a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f67e:	e7d3      	b.n	800f628 <__hexnan+0xd4>
 800f680:	3f04      	subs	r7, #4
 800f682:	e7d1      	b.n	800f628 <__hexnan+0xd4>
 800f684:	2004      	movs	r0, #4
 800f686:	b007      	add	sp, #28
 800f688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f68c <_localeconv_r>:
 800f68c:	4800      	ldr	r0, [pc, #0]	; (800f690 <_localeconv_r+0x4>)
 800f68e:	4770      	bx	lr
 800f690:	20000300 	.word	0x20000300

0800f694 <__retarget_lock_init_recursive>:
 800f694:	4770      	bx	lr

0800f696 <__retarget_lock_acquire_recursive>:
 800f696:	4770      	bx	lr

0800f698 <__retarget_lock_release_recursive>:
 800f698:	4770      	bx	lr

0800f69a <__ascii_mbtowc>:
 800f69a:	b082      	sub	sp, #8
 800f69c:	b901      	cbnz	r1, 800f6a0 <__ascii_mbtowc+0x6>
 800f69e:	a901      	add	r1, sp, #4
 800f6a0:	b142      	cbz	r2, 800f6b4 <__ascii_mbtowc+0x1a>
 800f6a2:	b14b      	cbz	r3, 800f6b8 <__ascii_mbtowc+0x1e>
 800f6a4:	7813      	ldrb	r3, [r2, #0]
 800f6a6:	600b      	str	r3, [r1, #0]
 800f6a8:	7812      	ldrb	r2, [r2, #0]
 800f6aa:	1e10      	subs	r0, r2, #0
 800f6ac:	bf18      	it	ne
 800f6ae:	2001      	movne	r0, #1
 800f6b0:	b002      	add	sp, #8
 800f6b2:	4770      	bx	lr
 800f6b4:	4610      	mov	r0, r2
 800f6b6:	e7fb      	b.n	800f6b0 <__ascii_mbtowc+0x16>
 800f6b8:	f06f 0001 	mvn.w	r0, #1
 800f6bc:	e7f8      	b.n	800f6b0 <__ascii_mbtowc+0x16>
	...

0800f6c0 <__malloc_lock>:
 800f6c0:	4801      	ldr	r0, [pc, #4]	; (800f6c8 <__malloc_lock+0x8>)
 800f6c2:	f7ff bfe8 	b.w	800f696 <__retarget_lock_acquire_recursive>
 800f6c6:	bf00      	nop
 800f6c8:	2000baa4 	.word	0x2000baa4

0800f6cc <__malloc_unlock>:
 800f6cc:	4801      	ldr	r0, [pc, #4]	; (800f6d4 <__malloc_unlock+0x8>)
 800f6ce:	f7ff bfe3 	b.w	800f698 <__retarget_lock_release_recursive>
 800f6d2:	bf00      	nop
 800f6d4:	2000baa4 	.word	0x2000baa4

0800f6d8 <_Balloc>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f6dc:	4604      	mov	r4, r0
 800f6de:	460d      	mov	r5, r1
 800f6e0:	b976      	cbnz	r6, 800f700 <_Balloc+0x28>
 800f6e2:	2010      	movs	r0, #16
 800f6e4:	f7fc fe20 	bl	800c328 <malloc>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	6260      	str	r0, [r4, #36]	; 0x24
 800f6ec:	b920      	cbnz	r0, 800f6f8 <_Balloc+0x20>
 800f6ee:	4b18      	ldr	r3, [pc, #96]	; (800f750 <_Balloc+0x78>)
 800f6f0:	4818      	ldr	r0, [pc, #96]	; (800f754 <_Balloc+0x7c>)
 800f6f2:	2166      	movs	r1, #102	; 0x66
 800f6f4:	f7fe fcb4 	bl	800e060 <__assert_func>
 800f6f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f6fc:	6006      	str	r6, [r0, #0]
 800f6fe:	60c6      	str	r6, [r0, #12]
 800f700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f702:	68f3      	ldr	r3, [r6, #12]
 800f704:	b183      	cbz	r3, 800f728 <_Balloc+0x50>
 800f706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f708:	68db      	ldr	r3, [r3, #12]
 800f70a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f70e:	b9b8      	cbnz	r0, 800f740 <_Balloc+0x68>
 800f710:	2101      	movs	r1, #1
 800f712:	fa01 f605 	lsl.w	r6, r1, r5
 800f716:	1d72      	adds	r2, r6, #5
 800f718:	0092      	lsls	r2, r2, #2
 800f71a:	4620      	mov	r0, r4
 800f71c:	f7fc fe4e 	bl	800c3bc <_calloc_r>
 800f720:	b160      	cbz	r0, 800f73c <_Balloc+0x64>
 800f722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f726:	e00e      	b.n	800f746 <_Balloc+0x6e>
 800f728:	2221      	movs	r2, #33	; 0x21
 800f72a:	2104      	movs	r1, #4
 800f72c:	4620      	mov	r0, r4
 800f72e:	f7fc fe45 	bl	800c3bc <_calloc_r>
 800f732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f734:	60f0      	str	r0, [r6, #12]
 800f736:	68db      	ldr	r3, [r3, #12]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1e4      	bne.n	800f706 <_Balloc+0x2e>
 800f73c:	2000      	movs	r0, #0
 800f73e:	bd70      	pop	{r4, r5, r6, pc}
 800f740:	6802      	ldr	r2, [r0, #0]
 800f742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f746:	2300      	movs	r3, #0
 800f748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f74c:	e7f7      	b.n	800f73e <_Balloc+0x66>
 800f74e:	bf00      	nop
 800f750:	08012601 	.word	0x08012601
 800f754:	08012760 	.word	0x08012760

0800f758 <_Bfree>:
 800f758:	b570      	push	{r4, r5, r6, lr}
 800f75a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f75c:	4605      	mov	r5, r0
 800f75e:	460c      	mov	r4, r1
 800f760:	b976      	cbnz	r6, 800f780 <_Bfree+0x28>
 800f762:	2010      	movs	r0, #16
 800f764:	f7fc fde0 	bl	800c328 <malloc>
 800f768:	4602      	mov	r2, r0
 800f76a:	6268      	str	r0, [r5, #36]	; 0x24
 800f76c:	b920      	cbnz	r0, 800f778 <_Bfree+0x20>
 800f76e:	4b09      	ldr	r3, [pc, #36]	; (800f794 <_Bfree+0x3c>)
 800f770:	4809      	ldr	r0, [pc, #36]	; (800f798 <_Bfree+0x40>)
 800f772:	218a      	movs	r1, #138	; 0x8a
 800f774:	f7fe fc74 	bl	800e060 <__assert_func>
 800f778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f77c:	6006      	str	r6, [r0, #0]
 800f77e:	60c6      	str	r6, [r0, #12]
 800f780:	b13c      	cbz	r4, 800f792 <_Bfree+0x3a>
 800f782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f784:	6862      	ldr	r2, [r4, #4]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f78c:	6021      	str	r1, [r4, #0]
 800f78e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f792:	bd70      	pop	{r4, r5, r6, pc}
 800f794:	08012601 	.word	0x08012601
 800f798:	08012760 	.word	0x08012760

0800f79c <__multadd>:
 800f79c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7a0:	690d      	ldr	r5, [r1, #16]
 800f7a2:	4607      	mov	r7, r0
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	461e      	mov	r6, r3
 800f7a8:	f101 0c14 	add.w	ip, r1, #20
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f7b2:	b299      	uxth	r1, r3
 800f7b4:	fb02 6101 	mla	r1, r2, r1, r6
 800f7b8:	0c1e      	lsrs	r6, r3, #16
 800f7ba:	0c0b      	lsrs	r3, r1, #16
 800f7bc:	fb02 3306 	mla	r3, r2, r6, r3
 800f7c0:	b289      	uxth	r1, r1
 800f7c2:	3001      	adds	r0, #1
 800f7c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f7c8:	4285      	cmp	r5, r0
 800f7ca:	f84c 1b04 	str.w	r1, [ip], #4
 800f7ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f7d2:	dcec      	bgt.n	800f7ae <__multadd+0x12>
 800f7d4:	b30e      	cbz	r6, 800f81a <__multadd+0x7e>
 800f7d6:	68a3      	ldr	r3, [r4, #8]
 800f7d8:	42ab      	cmp	r3, r5
 800f7da:	dc19      	bgt.n	800f810 <__multadd+0x74>
 800f7dc:	6861      	ldr	r1, [r4, #4]
 800f7de:	4638      	mov	r0, r7
 800f7e0:	3101      	adds	r1, #1
 800f7e2:	f7ff ff79 	bl	800f6d8 <_Balloc>
 800f7e6:	4680      	mov	r8, r0
 800f7e8:	b928      	cbnz	r0, 800f7f6 <__multadd+0x5a>
 800f7ea:	4602      	mov	r2, r0
 800f7ec:	4b0c      	ldr	r3, [pc, #48]	; (800f820 <__multadd+0x84>)
 800f7ee:	480d      	ldr	r0, [pc, #52]	; (800f824 <__multadd+0x88>)
 800f7f0:	21b5      	movs	r1, #181	; 0xb5
 800f7f2:	f7fe fc35 	bl	800e060 <__assert_func>
 800f7f6:	6922      	ldr	r2, [r4, #16]
 800f7f8:	3202      	adds	r2, #2
 800f7fa:	f104 010c 	add.w	r1, r4, #12
 800f7fe:	0092      	lsls	r2, r2, #2
 800f800:	300c      	adds	r0, #12
 800f802:	f7fc fda1 	bl	800c348 <memcpy>
 800f806:	4621      	mov	r1, r4
 800f808:	4638      	mov	r0, r7
 800f80a:	f7ff ffa5 	bl	800f758 <_Bfree>
 800f80e:	4644      	mov	r4, r8
 800f810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f814:	3501      	adds	r5, #1
 800f816:	615e      	str	r6, [r3, #20]
 800f818:	6125      	str	r5, [r4, #16]
 800f81a:	4620      	mov	r0, r4
 800f81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f820:	08012673 	.word	0x08012673
 800f824:	08012760 	.word	0x08012760

0800f828 <__s2b>:
 800f828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f82c:	460c      	mov	r4, r1
 800f82e:	4615      	mov	r5, r2
 800f830:	461f      	mov	r7, r3
 800f832:	2209      	movs	r2, #9
 800f834:	3308      	adds	r3, #8
 800f836:	4606      	mov	r6, r0
 800f838:	fb93 f3f2 	sdiv	r3, r3, r2
 800f83c:	2100      	movs	r1, #0
 800f83e:	2201      	movs	r2, #1
 800f840:	429a      	cmp	r2, r3
 800f842:	db09      	blt.n	800f858 <__s2b+0x30>
 800f844:	4630      	mov	r0, r6
 800f846:	f7ff ff47 	bl	800f6d8 <_Balloc>
 800f84a:	b940      	cbnz	r0, 800f85e <__s2b+0x36>
 800f84c:	4602      	mov	r2, r0
 800f84e:	4b19      	ldr	r3, [pc, #100]	; (800f8b4 <__s2b+0x8c>)
 800f850:	4819      	ldr	r0, [pc, #100]	; (800f8b8 <__s2b+0x90>)
 800f852:	21ce      	movs	r1, #206	; 0xce
 800f854:	f7fe fc04 	bl	800e060 <__assert_func>
 800f858:	0052      	lsls	r2, r2, #1
 800f85a:	3101      	adds	r1, #1
 800f85c:	e7f0      	b.n	800f840 <__s2b+0x18>
 800f85e:	9b08      	ldr	r3, [sp, #32]
 800f860:	6143      	str	r3, [r0, #20]
 800f862:	2d09      	cmp	r5, #9
 800f864:	f04f 0301 	mov.w	r3, #1
 800f868:	6103      	str	r3, [r0, #16]
 800f86a:	dd16      	ble.n	800f89a <__s2b+0x72>
 800f86c:	f104 0909 	add.w	r9, r4, #9
 800f870:	46c8      	mov	r8, r9
 800f872:	442c      	add	r4, r5
 800f874:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f878:	4601      	mov	r1, r0
 800f87a:	3b30      	subs	r3, #48	; 0x30
 800f87c:	220a      	movs	r2, #10
 800f87e:	4630      	mov	r0, r6
 800f880:	f7ff ff8c 	bl	800f79c <__multadd>
 800f884:	45a0      	cmp	r8, r4
 800f886:	d1f5      	bne.n	800f874 <__s2b+0x4c>
 800f888:	f1a5 0408 	sub.w	r4, r5, #8
 800f88c:	444c      	add	r4, r9
 800f88e:	1b2d      	subs	r5, r5, r4
 800f890:	1963      	adds	r3, r4, r5
 800f892:	42bb      	cmp	r3, r7
 800f894:	db04      	blt.n	800f8a0 <__s2b+0x78>
 800f896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f89a:	340a      	adds	r4, #10
 800f89c:	2509      	movs	r5, #9
 800f89e:	e7f6      	b.n	800f88e <__s2b+0x66>
 800f8a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f8a4:	4601      	mov	r1, r0
 800f8a6:	3b30      	subs	r3, #48	; 0x30
 800f8a8:	220a      	movs	r2, #10
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	f7ff ff76 	bl	800f79c <__multadd>
 800f8b0:	e7ee      	b.n	800f890 <__s2b+0x68>
 800f8b2:	bf00      	nop
 800f8b4:	08012673 	.word	0x08012673
 800f8b8:	08012760 	.word	0x08012760

0800f8bc <__hi0bits>:
 800f8bc:	0c03      	lsrs	r3, r0, #16
 800f8be:	041b      	lsls	r3, r3, #16
 800f8c0:	b9d3      	cbnz	r3, 800f8f8 <__hi0bits+0x3c>
 800f8c2:	0400      	lsls	r0, r0, #16
 800f8c4:	2310      	movs	r3, #16
 800f8c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f8ca:	bf04      	itt	eq
 800f8cc:	0200      	lsleq	r0, r0, #8
 800f8ce:	3308      	addeq	r3, #8
 800f8d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f8d4:	bf04      	itt	eq
 800f8d6:	0100      	lsleq	r0, r0, #4
 800f8d8:	3304      	addeq	r3, #4
 800f8da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f8de:	bf04      	itt	eq
 800f8e0:	0080      	lsleq	r0, r0, #2
 800f8e2:	3302      	addeq	r3, #2
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	db05      	blt.n	800f8f4 <__hi0bits+0x38>
 800f8e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f8ec:	f103 0301 	add.w	r3, r3, #1
 800f8f0:	bf08      	it	eq
 800f8f2:	2320      	moveq	r3, #32
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	4770      	bx	lr
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	e7e4      	b.n	800f8c6 <__hi0bits+0xa>

0800f8fc <__lo0bits>:
 800f8fc:	6803      	ldr	r3, [r0, #0]
 800f8fe:	f013 0207 	ands.w	r2, r3, #7
 800f902:	4601      	mov	r1, r0
 800f904:	d00b      	beq.n	800f91e <__lo0bits+0x22>
 800f906:	07da      	lsls	r2, r3, #31
 800f908:	d423      	bmi.n	800f952 <__lo0bits+0x56>
 800f90a:	0798      	lsls	r0, r3, #30
 800f90c:	bf49      	itett	mi
 800f90e:	085b      	lsrmi	r3, r3, #1
 800f910:	089b      	lsrpl	r3, r3, #2
 800f912:	2001      	movmi	r0, #1
 800f914:	600b      	strmi	r3, [r1, #0]
 800f916:	bf5c      	itt	pl
 800f918:	600b      	strpl	r3, [r1, #0]
 800f91a:	2002      	movpl	r0, #2
 800f91c:	4770      	bx	lr
 800f91e:	b298      	uxth	r0, r3
 800f920:	b9a8      	cbnz	r0, 800f94e <__lo0bits+0x52>
 800f922:	0c1b      	lsrs	r3, r3, #16
 800f924:	2010      	movs	r0, #16
 800f926:	b2da      	uxtb	r2, r3
 800f928:	b90a      	cbnz	r2, 800f92e <__lo0bits+0x32>
 800f92a:	3008      	adds	r0, #8
 800f92c:	0a1b      	lsrs	r3, r3, #8
 800f92e:	071a      	lsls	r2, r3, #28
 800f930:	bf04      	itt	eq
 800f932:	091b      	lsreq	r3, r3, #4
 800f934:	3004      	addeq	r0, #4
 800f936:	079a      	lsls	r2, r3, #30
 800f938:	bf04      	itt	eq
 800f93a:	089b      	lsreq	r3, r3, #2
 800f93c:	3002      	addeq	r0, #2
 800f93e:	07da      	lsls	r2, r3, #31
 800f940:	d403      	bmi.n	800f94a <__lo0bits+0x4e>
 800f942:	085b      	lsrs	r3, r3, #1
 800f944:	f100 0001 	add.w	r0, r0, #1
 800f948:	d005      	beq.n	800f956 <__lo0bits+0x5a>
 800f94a:	600b      	str	r3, [r1, #0]
 800f94c:	4770      	bx	lr
 800f94e:	4610      	mov	r0, r2
 800f950:	e7e9      	b.n	800f926 <__lo0bits+0x2a>
 800f952:	2000      	movs	r0, #0
 800f954:	4770      	bx	lr
 800f956:	2020      	movs	r0, #32
 800f958:	4770      	bx	lr
	...

0800f95c <__i2b>:
 800f95c:	b510      	push	{r4, lr}
 800f95e:	460c      	mov	r4, r1
 800f960:	2101      	movs	r1, #1
 800f962:	f7ff feb9 	bl	800f6d8 <_Balloc>
 800f966:	4602      	mov	r2, r0
 800f968:	b928      	cbnz	r0, 800f976 <__i2b+0x1a>
 800f96a:	4b05      	ldr	r3, [pc, #20]	; (800f980 <__i2b+0x24>)
 800f96c:	4805      	ldr	r0, [pc, #20]	; (800f984 <__i2b+0x28>)
 800f96e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f972:	f7fe fb75 	bl	800e060 <__assert_func>
 800f976:	2301      	movs	r3, #1
 800f978:	6144      	str	r4, [r0, #20]
 800f97a:	6103      	str	r3, [r0, #16]
 800f97c:	bd10      	pop	{r4, pc}
 800f97e:	bf00      	nop
 800f980:	08012673 	.word	0x08012673
 800f984:	08012760 	.word	0x08012760

0800f988 <__multiply>:
 800f988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f98c:	4691      	mov	r9, r2
 800f98e:	690a      	ldr	r2, [r1, #16]
 800f990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f994:	429a      	cmp	r2, r3
 800f996:	bfb8      	it	lt
 800f998:	460b      	movlt	r3, r1
 800f99a:	460c      	mov	r4, r1
 800f99c:	bfbc      	itt	lt
 800f99e:	464c      	movlt	r4, r9
 800f9a0:	4699      	movlt	r9, r3
 800f9a2:	6927      	ldr	r7, [r4, #16]
 800f9a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f9a8:	68a3      	ldr	r3, [r4, #8]
 800f9aa:	6861      	ldr	r1, [r4, #4]
 800f9ac:	eb07 060a 	add.w	r6, r7, sl
 800f9b0:	42b3      	cmp	r3, r6
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	bfb8      	it	lt
 800f9b6:	3101      	addlt	r1, #1
 800f9b8:	f7ff fe8e 	bl	800f6d8 <_Balloc>
 800f9bc:	b930      	cbnz	r0, 800f9cc <__multiply+0x44>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	4b44      	ldr	r3, [pc, #272]	; (800fad4 <__multiply+0x14c>)
 800f9c2:	4845      	ldr	r0, [pc, #276]	; (800fad8 <__multiply+0x150>)
 800f9c4:	f240 115d 	movw	r1, #349	; 0x15d
 800f9c8:	f7fe fb4a 	bl	800e060 <__assert_func>
 800f9cc:	f100 0514 	add.w	r5, r0, #20
 800f9d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f9d4:	462b      	mov	r3, r5
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	4543      	cmp	r3, r8
 800f9da:	d321      	bcc.n	800fa20 <__multiply+0x98>
 800f9dc:	f104 0314 	add.w	r3, r4, #20
 800f9e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f9e4:	f109 0314 	add.w	r3, r9, #20
 800f9e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f9ec:	9202      	str	r2, [sp, #8]
 800f9ee:	1b3a      	subs	r2, r7, r4
 800f9f0:	3a15      	subs	r2, #21
 800f9f2:	f022 0203 	bic.w	r2, r2, #3
 800f9f6:	3204      	adds	r2, #4
 800f9f8:	f104 0115 	add.w	r1, r4, #21
 800f9fc:	428f      	cmp	r7, r1
 800f9fe:	bf38      	it	cc
 800fa00:	2204      	movcc	r2, #4
 800fa02:	9201      	str	r2, [sp, #4]
 800fa04:	9a02      	ldr	r2, [sp, #8]
 800fa06:	9303      	str	r3, [sp, #12]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d80c      	bhi.n	800fa26 <__multiply+0x9e>
 800fa0c:	2e00      	cmp	r6, #0
 800fa0e:	dd03      	ble.n	800fa18 <__multiply+0x90>
 800fa10:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d05a      	beq.n	800face <__multiply+0x146>
 800fa18:	6106      	str	r6, [r0, #16]
 800fa1a:	b005      	add	sp, #20
 800fa1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa20:	f843 2b04 	str.w	r2, [r3], #4
 800fa24:	e7d8      	b.n	800f9d8 <__multiply+0x50>
 800fa26:	f8b3 a000 	ldrh.w	sl, [r3]
 800fa2a:	f1ba 0f00 	cmp.w	sl, #0
 800fa2e:	d024      	beq.n	800fa7a <__multiply+0xf2>
 800fa30:	f104 0e14 	add.w	lr, r4, #20
 800fa34:	46a9      	mov	r9, r5
 800fa36:	f04f 0c00 	mov.w	ip, #0
 800fa3a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fa3e:	f8d9 1000 	ldr.w	r1, [r9]
 800fa42:	fa1f fb82 	uxth.w	fp, r2
 800fa46:	b289      	uxth	r1, r1
 800fa48:	fb0a 110b 	mla	r1, sl, fp, r1
 800fa4c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fa50:	f8d9 2000 	ldr.w	r2, [r9]
 800fa54:	4461      	add	r1, ip
 800fa56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa5a:	fb0a c20b 	mla	r2, sl, fp, ip
 800fa5e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fa62:	b289      	uxth	r1, r1
 800fa64:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fa68:	4577      	cmp	r7, lr
 800fa6a:	f849 1b04 	str.w	r1, [r9], #4
 800fa6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fa72:	d8e2      	bhi.n	800fa3a <__multiply+0xb2>
 800fa74:	9a01      	ldr	r2, [sp, #4]
 800fa76:	f845 c002 	str.w	ip, [r5, r2]
 800fa7a:	9a03      	ldr	r2, [sp, #12]
 800fa7c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fa80:	3304      	adds	r3, #4
 800fa82:	f1b9 0f00 	cmp.w	r9, #0
 800fa86:	d020      	beq.n	800faca <__multiply+0x142>
 800fa88:	6829      	ldr	r1, [r5, #0]
 800fa8a:	f104 0c14 	add.w	ip, r4, #20
 800fa8e:	46ae      	mov	lr, r5
 800fa90:	f04f 0a00 	mov.w	sl, #0
 800fa94:	f8bc b000 	ldrh.w	fp, [ip]
 800fa98:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fa9c:	fb09 220b 	mla	r2, r9, fp, r2
 800faa0:	4492      	add	sl, r2
 800faa2:	b289      	uxth	r1, r1
 800faa4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800faa8:	f84e 1b04 	str.w	r1, [lr], #4
 800faac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fab0:	f8be 1000 	ldrh.w	r1, [lr]
 800fab4:	0c12      	lsrs	r2, r2, #16
 800fab6:	fb09 1102 	mla	r1, r9, r2, r1
 800faba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fabe:	4567      	cmp	r7, ip
 800fac0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fac4:	d8e6      	bhi.n	800fa94 <__multiply+0x10c>
 800fac6:	9a01      	ldr	r2, [sp, #4]
 800fac8:	50a9      	str	r1, [r5, r2]
 800faca:	3504      	adds	r5, #4
 800facc:	e79a      	b.n	800fa04 <__multiply+0x7c>
 800face:	3e01      	subs	r6, #1
 800fad0:	e79c      	b.n	800fa0c <__multiply+0x84>
 800fad2:	bf00      	nop
 800fad4:	08012673 	.word	0x08012673
 800fad8:	08012760 	.word	0x08012760

0800fadc <__pow5mult>:
 800fadc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fae0:	4615      	mov	r5, r2
 800fae2:	f012 0203 	ands.w	r2, r2, #3
 800fae6:	4606      	mov	r6, r0
 800fae8:	460f      	mov	r7, r1
 800faea:	d007      	beq.n	800fafc <__pow5mult+0x20>
 800faec:	4c25      	ldr	r4, [pc, #148]	; (800fb84 <__pow5mult+0xa8>)
 800faee:	3a01      	subs	r2, #1
 800faf0:	2300      	movs	r3, #0
 800faf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800faf6:	f7ff fe51 	bl	800f79c <__multadd>
 800fafa:	4607      	mov	r7, r0
 800fafc:	10ad      	asrs	r5, r5, #2
 800fafe:	d03d      	beq.n	800fb7c <__pow5mult+0xa0>
 800fb00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fb02:	b97c      	cbnz	r4, 800fb24 <__pow5mult+0x48>
 800fb04:	2010      	movs	r0, #16
 800fb06:	f7fc fc0f 	bl	800c328 <malloc>
 800fb0a:	4602      	mov	r2, r0
 800fb0c:	6270      	str	r0, [r6, #36]	; 0x24
 800fb0e:	b928      	cbnz	r0, 800fb1c <__pow5mult+0x40>
 800fb10:	4b1d      	ldr	r3, [pc, #116]	; (800fb88 <__pow5mult+0xac>)
 800fb12:	481e      	ldr	r0, [pc, #120]	; (800fb8c <__pow5mult+0xb0>)
 800fb14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fb18:	f7fe faa2 	bl	800e060 <__assert_func>
 800fb1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fb20:	6004      	str	r4, [r0, #0]
 800fb22:	60c4      	str	r4, [r0, #12]
 800fb24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fb28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fb2c:	b94c      	cbnz	r4, 800fb42 <__pow5mult+0x66>
 800fb2e:	f240 2171 	movw	r1, #625	; 0x271
 800fb32:	4630      	mov	r0, r6
 800fb34:	f7ff ff12 	bl	800f95c <__i2b>
 800fb38:	2300      	movs	r3, #0
 800fb3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fb3e:	4604      	mov	r4, r0
 800fb40:	6003      	str	r3, [r0, #0]
 800fb42:	f04f 0900 	mov.w	r9, #0
 800fb46:	07eb      	lsls	r3, r5, #31
 800fb48:	d50a      	bpl.n	800fb60 <__pow5mult+0x84>
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	4622      	mov	r2, r4
 800fb4e:	4630      	mov	r0, r6
 800fb50:	f7ff ff1a 	bl	800f988 <__multiply>
 800fb54:	4639      	mov	r1, r7
 800fb56:	4680      	mov	r8, r0
 800fb58:	4630      	mov	r0, r6
 800fb5a:	f7ff fdfd 	bl	800f758 <_Bfree>
 800fb5e:	4647      	mov	r7, r8
 800fb60:	106d      	asrs	r5, r5, #1
 800fb62:	d00b      	beq.n	800fb7c <__pow5mult+0xa0>
 800fb64:	6820      	ldr	r0, [r4, #0]
 800fb66:	b938      	cbnz	r0, 800fb78 <__pow5mult+0x9c>
 800fb68:	4622      	mov	r2, r4
 800fb6a:	4621      	mov	r1, r4
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	f7ff ff0b 	bl	800f988 <__multiply>
 800fb72:	6020      	str	r0, [r4, #0]
 800fb74:	f8c0 9000 	str.w	r9, [r0]
 800fb78:	4604      	mov	r4, r0
 800fb7a:	e7e4      	b.n	800fb46 <__pow5mult+0x6a>
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb82:	bf00      	nop
 800fb84:	080128b0 	.word	0x080128b0
 800fb88:	08012601 	.word	0x08012601
 800fb8c:	08012760 	.word	0x08012760

0800fb90 <__lshift>:
 800fb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb94:	460c      	mov	r4, r1
 800fb96:	6849      	ldr	r1, [r1, #4]
 800fb98:	6923      	ldr	r3, [r4, #16]
 800fb9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fb9e:	68a3      	ldr	r3, [r4, #8]
 800fba0:	4607      	mov	r7, r0
 800fba2:	4691      	mov	r9, r2
 800fba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fba8:	f108 0601 	add.w	r6, r8, #1
 800fbac:	42b3      	cmp	r3, r6
 800fbae:	db0b      	blt.n	800fbc8 <__lshift+0x38>
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	f7ff fd91 	bl	800f6d8 <_Balloc>
 800fbb6:	4605      	mov	r5, r0
 800fbb8:	b948      	cbnz	r0, 800fbce <__lshift+0x3e>
 800fbba:	4602      	mov	r2, r0
 800fbbc:	4b2a      	ldr	r3, [pc, #168]	; (800fc68 <__lshift+0xd8>)
 800fbbe:	482b      	ldr	r0, [pc, #172]	; (800fc6c <__lshift+0xdc>)
 800fbc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fbc4:	f7fe fa4c 	bl	800e060 <__assert_func>
 800fbc8:	3101      	adds	r1, #1
 800fbca:	005b      	lsls	r3, r3, #1
 800fbcc:	e7ee      	b.n	800fbac <__lshift+0x1c>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	f100 0114 	add.w	r1, r0, #20
 800fbd4:	f100 0210 	add.w	r2, r0, #16
 800fbd8:	4618      	mov	r0, r3
 800fbda:	4553      	cmp	r3, sl
 800fbdc:	db37      	blt.n	800fc4e <__lshift+0xbe>
 800fbde:	6920      	ldr	r0, [r4, #16]
 800fbe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fbe4:	f104 0314 	add.w	r3, r4, #20
 800fbe8:	f019 091f 	ands.w	r9, r9, #31
 800fbec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fbf0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fbf4:	d02f      	beq.n	800fc56 <__lshift+0xc6>
 800fbf6:	f1c9 0e20 	rsb	lr, r9, #32
 800fbfa:	468a      	mov	sl, r1
 800fbfc:	f04f 0c00 	mov.w	ip, #0
 800fc00:	681a      	ldr	r2, [r3, #0]
 800fc02:	fa02 f209 	lsl.w	r2, r2, r9
 800fc06:	ea42 020c 	orr.w	r2, r2, ip
 800fc0a:	f84a 2b04 	str.w	r2, [sl], #4
 800fc0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc12:	4298      	cmp	r0, r3
 800fc14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fc18:	d8f2      	bhi.n	800fc00 <__lshift+0x70>
 800fc1a:	1b03      	subs	r3, r0, r4
 800fc1c:	3b15      	subs	r3, #21
 800fc1e:	f023 0303 	bic.w	r3, r3, #3
 800fc22:	3304      	adds	r3, #4
 800fc24:	f104 0215 	add.w	r2, r4, #21
 800fc28:	4290      	cmp	r0, r2
 800fc2a:	bf38      	it	cc
 800fc2c:	2304      	movcc	r3, #4
 800fc2e:	f841 c003 	str.w	ip, [r1, r3]
 800fc32:	f1bc 0f00 	cmp.w	ip, #0
 800fc36:	d001      	beq.n	800fc3c <__lshift+0xac>
 800fc38:	f108 0602 	add.w	r6, r8, #2
 800fc3c:	3e01      	subs	r6, #1
 800fc3e:	4638      	mov	r0, r7
 800fc40:	612e      	str	r6, [r5, #16]
 800fc42:	4621      	mov	r1, r4
 800fc44:	f7ff fd88 	bl	800f758 <_Bfree>
 800fc48:	4628      	mov	r0, r5
 800fc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fc52:	3301      	adds	r3, #1
 800fc54:	e7c1      	b.n	800fbda <__lshift+0x4a>
 800fc56:	3904      	subs	r1, #4
 800fc58:	f853 2b04 	ldr.w	r2, [r3], #4
 800fc5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fc60:	4298      	cmp	r0, r3
 800fc62:	d8f9      	bhi.n	800fc58 <__lshift+0xc8>
 800fc64:	e7ea      	b.n	800fc3c <__lshift+0xac>
 800fc66:	bf00      	nop
 800fc68:	08012673 	.word	0x08012673
 800fc6c:	08012760 	.word	0x08012760

0800fc70 <__mcmp>:
 800fc70:	b530      	push	{r4, r5, lr}
 800fc72:	6902      	ldr	r2, [r0, #16]
 800fc74:	690c      	ldr	r4, [r1, #16]
 800fc76:	1b12      	subs	r2, r2, r4
 800fc78:	d10e      	bne.n	800fc98 <__mcmp+0x28>
 800fc7a:	f100 0314 	add.w	r3, r0, #20
 800fc7e:	3114      	adds	r1, #20
 800fc80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fc84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fc88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fc8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fc90:	42a5      	cmp	r5, r4
 800fc92:	d003      	beq.n	800fc9c <__mcmp+0x2c>
 800fc94:	d305      	bcc.n	800fca2 <__mcmp+0x32>
 800fc96:	2201      	movs	r2, #1
 800fc98:	4610      	mov	r0, r2
 800fc9a:	bd30      	pop	{r4, r5, pc}
 800fc9c:	4283      	cmp	r3, r0
 800fc9e:	d3f3      	bcc.n	800fc88 <__mcmp+0x18>
 800fca0:	e7fa      	b.n	800fc98 <__mcmp+0x28>
 800fca2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fca6:	e7f7      	b.n	800fc98 <__mcmp+0x28>

0800fca8 <__mdiff>:
 800fca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	460c      	mov	r4, r1
 800fcae:	4606      	mov	r6, r0
 800fcb0:	4611      	mov	r1, r2
 800fcb2:	4620      	mov	r0, r4
 800fcb4:	4690      	mov	r8, r2
 800fcb6:	f7ff ffdb 	bl	800fc70 <__mcmp>
 800fcba:	1e05      	subs	r5, r0, #0
 800fcbc:	d110      	bne.n	800fce0 <__mdiff+0x38>
 800fcbe:	4629      	mov	r1, r5
 800fcc0:	4630      	mov	r0, r6
 800fcc2:	f7ff fd09 	bl	800f6d8 <_Balloc>
 800fcc6:	b930      	cbnz	r0, 800fcd6 <__mdiff+0x2e>
 800fcc8:	4b3a      	ldr	r3, [pc, #232]	; (800fdb4 <__mdiff+0x10c>)
 800fcca:	4602      	mov	r2, r0
 800fccc:	f240 2132 	movw	r1, #562	; 0x232
 800fcd0:	4839      	ldr	r0, [pc, #228]	; (800fdb8 <__mdiff+0x110>)
 800fcd2:	f7fe f9c5 	bl	800e060 <__assert_func>
 800fcd6:	2301      	movs	r3, #1
 800fcd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fcdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fce0:	bfa4      	itt	ge
 800fce2:	4643      	movge	r3, r8
 800fce4:	46a0      	movge	r8, r4
 800fce6:	4630      	mov	r0, r6
 800fce8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fcec:	bfa6      	itte	ge
 800fcee:	461c      	movge	r4, r3
 800fcf0:	2500      	movge	r5, #0
 800fcf2:	2501      	movlt	r5, #1
 800fcf4:	f7ff fcf0 	bl	800f6d8 <_Balloc>
 800fcf8:	b920      	cbnz	r0, 800fd04 <__mdiff+0x5c>
 800fcfa:	4b2e      	ldr	r3, [pc, #184]	; (800fdb4 <__mdiff+0x10c>)
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd02:	e7e5      	b.n	800fcd0 <__mdiff+0x28>
 800fd04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fd08:	6926      	ldr	r6, [r4, #16]
 800fd0a:	60c5      	str	r5, [r0, #12]
 800fd0c:	f104 0914 	add.w	r9, r4, #20
 800fd10:	f108 0514 	add.w	r5, r8, #20
 800fd14:	f100 0e14 	add.w	lr, r0, #20
 800fd18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fd1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fd20:	f108 0210 	add.w	r2, r8, #16
 800fd24:	46f2      	mov	sl, lr
 800fd26:	2100      	movs	r1, #0
 800fd28:	f859 3b04 	ldr.w	r3, [r9], #4
 800fd2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fd30:	fa1f f883 	uxth.w	r8, r3
 800fd34:	fa11 f18b 	uxtah	r1, r1, fp
 800fd38:	0c1b      	lsrs	r3, r3, #16
 800fd3a:	eba1 0808 	sub.w	r8, r1, r8
 800fd3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fd42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fd46:	fa1f f888 	uxth.w	r8, r8
 800fd4a:	1419      	asrs	r1, r3, #16
 800fd4c:	454e      	cmp	r6, r9
 800fd4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fd52:	f84a 3b04 	str.w	r3, [sl], #4
 800fd56:	d8e7      	bhi.n	800fd28 <__mdiff+0x80>
 800fd58:	1b33      	subs	r3, r6, r4
 800fd5a:	3b15      	subs	r3, #21
 800fd5c:	f023 0303 	bic.w	r3, r3, #3
 800fd60:	3304      	adds	r3, #4
 800fd62:	3415      	adds	r4, #21
 800fd64:	42a6      	cmp	r6, r4
 800fd66:	bf38      	it	cc
 800fd68:	2304      	movcc	r3, #4
 800fd6a:	441d      	add	r5, r3
 800fd6c:	4473      	add	r3, lr
 800fd6e:	469e      	mov	lr, r3
 800fd70:	462e      	mov	r6, r5
 800fd72:	4566      	cmp	r6, ip
 800fd74:	d30e      	bcc.n	800fd94 <__mdiff+0xec>
 800fd76:	f10c 0203 	add.w	r2, ip, #3
 800fd7a:	1b52      	subs	r2, r2, r5
 800fd7c:	f022 0203 	bic.w	r2, r2, #3
 800fd80:	3d03      	subs	r5, #3
 800fd82:	45ac      	cmp	ip, r5
 800fd84:	bf38      	it	cc
 800fd86:	2200      	movcc	r2, #0
 800fd88:	441a      	add	r2, r3
 800fd8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fd8e:	b17b      	cbz	r3, 800fdb0 <__mdiff+0x108>
 800fd90:	6107      	str	r7, [r0, #16]
 800fd92:	e7a3      	b.n	800fcdc <__mdiff+0x34>
 800fd94:	f856 8b04 	ldr.w	r8, [r6], #4
 800fd98:	fa11 f288 	uxtah	r2, r1, r8
 800fd9c:	1414      	asrs	r4, r2, #16
 800fd9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fda2:	b292      	uxth	r2, r2
 800fda4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fda8:	f84e 2b04 	str.w	r2, [lr], #4
 800fdac:	1421      	asrs	r1, r4, #16
 800fdae:	e7e0      	b.n	800fd72 <__mdiff+0xca>
 800fdb0:	3f01      	subs	r7, #1
 800fdb2:	e7ea      	b.n	800fd8a <__mdiff+0xe2>
 800fdb4:	08012673 	.word	0x08012673
 800fdb8:	08012760 	.word	0x08012760

0800fdbc <__ulp>:
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	ed8d 0b00 	vstr	d0, [sp]
 800fdc2:	9b01      	ldr	r3, [sp, #4]
 800fdc4:	4912      	ldr	r1, [pc, #72]	; (800fe10 <__ulp+0x54>)
 800fdc6:	4019      	ands	r1, r3
 800fdc8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fdcc:	2900      	cmp	r1, #0
 800fdce:	dd05      	ble.n	800fddc <__ulp+0x20>
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	460b      	mov	r3, r1
 800fdd4:	ec43 2b10 	vmov	d0, r2, r3
 800fdd8:	b002      	add	sp, #8
 800fdda:	4770      	bx	lr
 800fddc:	4249      	negs	r1, r1
 800fdde:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fde2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fde6:	f04f 0200 	mov.w	r2, #0
 800fdea:	f04f 0300 	mov.w	r3, #0
 800fdee:	da04      	bge.n	800fdfa <__ulp+0x3e>
 800fdf0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fdf4:	fa41 f300 	asr.w	r3, r1, r0
 800fdf8:	e7ec      	b.n	800fdd4 <__ulp+0x18>
 800fdfa:	f1a0 0114 	sub.w	r1, r0, #20
 800fdfe:	291e      	cmp	r1, #30
 800fe00:	bfda      	itte	le
 800fe02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fe06:	fa20 f101 	lsrle.w	r1, r0, r1
 800fe0a:	2101      	movgt	r1, #1
 800fe0c:	460a      	mov	r2, r1
 800fe0e:	e7e1      	b.n	800fdd4 <__ulp+0x18>
 800fe10:	7ff00000 	.word	0x7ff00000

0800fe14 <__b2d>:
 800fe14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe16:	6905      	ldr	r5, [r0, #16]
 800fe18:	f100 0714 	add.w	r7, r0, #20
 800fe1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fe20:	1f2e      	subs	r6, r5, #4
 800fe22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fe26:	4620      	mov	r0, r4
 800fe28:	f7ff fd48 	bl	800f8bc <__hi0bits>
 800fe2c:	f1c0 0320 	rsb	r3, r0, #32
 800fe30:	280a      	cmp	r0, #10
 800fe32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800feb0 <__b2d+0x9c>
 800fe36:	600b      	str	r3, [r1, #0]
 800fe38:	dc14      	bgt.n	800fe64 <__b2d+0x50>
 800fe3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fe3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fe42:	42b7      	cmp	r7, r6
 800fe44:	ea41 030c 	orr.w	r3, r1, ip
 800fe48:	bf34      	ite	cc
 800fe4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe4e:	2100      	movcs	r1, #0
 800fe50:	3015      	adds	r0, #21
 800fe52:	fa04 f000 	lsl.w	r0, r4, r0
 800fe56:	fa21 f10e 	lsr.w	r1, r1, lr
 800fe5a:	ea40 0201 	orr.w	r2, r0, r1
 800fe5e:	ec43 2b10 	vmov	d0, r2, r3
 800fe62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe64:	42b7      	cmp	r7, r6
 800fe66:	bf3a      	itte	cc
 800fe68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fe6c:	f1a5 0608 	subcc.w	r6, r5, #8
 800fe70:	2100      	movcs	r1, #0
 800fe72:	380b      	subs	r0, #11
 800fe74:	d017      	beq.n	800fea6 <__b2d+0x92>
 800fe76:	f1c0 0c20 	rsb	ip, r0, #32
 800fe7a:	fa04 f500 	lsl.w	r5, r4, r0
 800fe7e:	42be      	cmp	r6, r7
 800fe80:	fa21 f40c 	lsr.w	r4, r1, ip
 800fe84:	ea45 0504 	orr.w	r5, r5, r4
 800fe88:	bf8c      	ite	hi
 800fe8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fe8e:	2400      	movls	r4, #0
 800fe90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fe94:	fa01 f000 	lsl.w	r0, r1, r0
 800fe98:	fa24 f40c 	lsr.w	r4, r4, ip
 800fe9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fea0:	ea40 0204 	orr.w	r2, r0, r4
 800fea4:	e7db      	b.n	800fe5e <__b2d+0x4a>
 800fea6:	ea44 030c 	orr.w	r3, r4, ip
 800feaa:	460a      	mov	r2, r1
 800feac:	e7d7      	b.n	800fe5e <__b2d+0x4a>
 800feae:	bf00      	nop
 800feb0:	3ff00000 	.word	0x3ff00000

0800feb4 <__d2b>:
 800feb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800feb8:	4689      	mov	r9, r1
 800feba:	2101      	movs	r1, #1
 800febc:	ec57 6b10 	vmov	r6, r7, d0
 800fec0:	4690      	mov	r8, r2
 800fec2:	f7ff fc09 	bl	800f6d8 <_Balloc>
 800fec6:	4604      	mov	r4, r0
 800fec8:	b930      	cbnz	r0, 800fed8 <__d2b+0x24>
 800feca:	4602      	mov	r2, r0
 800fecc:	4b25      	ldr	r3, [pc, #148]	; (800ff64 <__d2b+0xb0>)
 800fece:	4826      	ldr	r0, [pc, #152]	; (800ff68 <__d2b+0xb4>)
 800fed0:	f240 310a 	movw	r1, #778	; 0x30a
 800fed4:	f7fe f8c4 	bl	800e060 <__assert_func>
 800fed8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fedc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fee0:	bb35      	cbnz	r5, 800ff30 <__d2b+0x7c>
 800fee2:	2e00      	cmp	r6, #0
 800fee4:	9301      	str	r3, [sp, #4]
 800fee6:	d028      	beq.n	800ff3a <__d2b+0x86>
 800fee8:	4668      	mov	r0, sp
 800feea:	9600      	str	r6, [sp, #0]
 800feec:	f7ff fd06 	bl	800f8fc <__lo0bits>
 800fef0:	9900      	ldr	r1, [sp, #0]
 800fef2:	b300      	cbz	r0, 800ff36 <__d2b+0x82>
 800fef4:	9a01      	ldr	r2, [sp, #4]
 800fef6:	f1c0 0320 	rsb	r3, r0, #32
 800fefa:	fa02 f303 	lsl.w	r3, r2, r3
 800fefe:	430b      	orrs	r3, r1
 800ff00:	40c2      	lsrs	r2, r0
 800ff02:	6163      	str	r3, [r4, #20]
 800ff04:	9201      	str	r2, [sp, #4]
 800ff06:	9b01      	ldr	r3, [sp, #4]
 800ff08:	61a3      	str	r3, [r4, #24]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	bf14      	ite	ne
 800ff0e:	2202      	movne	r2, #2
 800ff10:	2201      	moveq	r2, #1
 800ff12:	6122      	str	r2, [r4, #16]
 800ff14:	b1d5      	cbz	r5, 800ff4c <__d2b+0x98>
 800ff16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff1a:	4405      	add	r5, r0
 800ff1c:	f8c9 5000 	str.w	r5, [r9]
 800ff20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff24:	f8c8 0000 	str.w	r0, [r8]
 800ff28:	4620      	mov	r0, r4
 800ff2a:	b003      	add	sp, #12
 800ff2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff34:	e7d5      	b.n	800fee2 <__d2b+0x2e>
 800ff36:	6161      	str	r1, [r4, #20]
 800ff38:	e7e5      	b.n	800ff06 <__d2b+0x52>
 800ff3a:	a801      	add	r0, sp, #4
 800ff3c:	f7ff fcde 	bl	800f8fc <__lo0bits>
 800ff40:	9b01      	ldr	r3, [sp, #4]
 800ff42:	6163      	str	r3, [r4, #20]
 800ff44:	2201      	movs	r2, #1
 800ff46:	6122      	str	r2, [r4, #16]
 800ff48:	3020      	adds	r0, #32
 800ff4a:	e7e3      	b.n	800ff14 <__d2b+0x60>
 800ff4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff54:	f8c9 0000 	str.w	r0, [r9]
 800ff58:	6918      	ldr	r0, [r3, #16]
 800ff5a:	f7ff fcaf 	bl	800f8bc <__hi0bits>
 800ff5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff62:	e7df      	b.n	800ff24 <__d2b+0x70>
 800ff64:	08012673 	.word	0x08012673
 800ff68:	08012760 	.word	0x08012760

0800ff6c <__ratio>:
 800ff6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff70:	4688      	mov	r8, r1
 800ff72:	4669      	mov	r1, sp
 800ff74:	4681      	mov	r9, r0
 800ff76:	f7ff ff4d 	bl	800fe14 <__b2d>
 800ff7a:	a901      	add	r1, sp, #4
 800ff7c:	4640      	mov	r0, r8
 800ff7e:	ec55 4b10 	vmov	r4, r5, d0
 800ff82:	f7ff ff47 	bl	800fe14 <__b2d>
 800ff86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ff8e:	eba3 0c02 	sub.w	ip, r3, r2
 800ff92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ff96:	1a9b      	subs	r3, r3, r2
 800ff98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ff9c:	ec51 0b10 	vmov	r0, r1, d0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	bfd6      	itet	le
 800ffa4:	460a      	movle	r2, r1
 800ffa6:	462a      	movgt	r2, r5
 800ffa8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ffac:	468b      	mov	fp, r1
 800ffae:	462f      	mov	r7, r5
 800ffb0:	bfd4      	ite	le
 800ffb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ffb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ffba:	4620      	mov	r0, r4
 800ffbc:	ee10 2a10 	vmov	r2, s0
 800ffc0:	465b      	mov	r3, fp
 800ffc2:	4639      	mov	r1, r7
 800ffc4:	f7f0 fc62 	bl	800088c <__aeabi_ddiv>
 800ffc8:	ec41 0b10 	vmov	d0, r0, r1
 800ffcc:	b003      	add	sp, #12
 800ffce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ffd2 <__copybits>:
 800ffd2:	3901      	subs	r1, #1
 800ffd4:	b570      	push	{r4, r5, r6, lr}
 800ffd6:	1149      	asrs	r1, r1, #5
 800ffd8:	6914      	ldr	r4, [r2, #16]
 800ffda:	3101      	adds	r1, #1
 800ffdc:	f102 0314 	add.w	r3, r2, #20
 800ffe0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ffe4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ffe8:	1f05      	subs	r5, r0, #4
 800ffea:	42a3      	cmp	r3, r4
 800ffec:	d30c      	bcc.n	8010008 <__copybits+0x36>
 800ffee:	1aa3      	subs	r3, r4, r2
 800fff0:	3b11      	subs	r3, #17
 800fff2:	f023 0303 	bic.w	r3, r3, #3
 800fff6:	3211      	adds	r2, #17
 800fff8:	42a2      	cmp	r2, r4
 800fffa:	bf88      	it	hi
 800fffc:	2300      	movhi	r3, #0
 800fffe:	4418      	add	r0, r3
 8010000:	2300      	movs	r3, #0
 8010002:	4288      	cmp	r0, r1
 8010004:	d305      	bcc.n	8010012 <__copybits+0x40>
 8010006:	bd70      	pop	{r4, r5, r6, pc}
 8010008:	f853 6b04 	ldr.w	r6, [r3], #4
 801000c:	f845 6f04 	str.w	r6, [r5, #4]!
 8010010:	e7eb      	b.n	800ffea <__copybits+0x18>
 8010012:	f840 3b04 	str.w	r3, [r0], #4
 8010016:	e7f4      	b.n	8010002 <__copybits+0x30>

08010018 <__any_on>:
 8010018:	f100 0214 	add.w	r2, r0, #20
 801001c:	6900      	ldr	r0, [r0, #16]
 801001e:	114b      	asrs	r3, r1, #5
 8010020:	4298      	cmp	r0, r3
 8010022:	b510      	push	{r4, lr}
 8010024:	db11      	blt.n	801004a <__any_on+0x32>
 8010026:	dd0a      	ble.n	801003e <__any_on+0x26>
 8010028:	f011 011f 	ands.w	r1, r1, #31
 801002c:	d007      	beq.n	801003e <__any_on+0x26>
 801002e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010032:	fa24 f001 	lsr.w	r0, r4, r1
 8010036:	fa00 f101 	lsl.w	r1, r0, r1
 801003a:	428c      	cmp	r4, r1
 801003c:	d10b      	bne.n	8010056 <__any_on+0x3e>
 801003e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010042:	4293      	cmp	r3, r2
 8010044:	d803      	bhi.n	801004e <__any_on+0x36>
 8010046:	2000      	movs	r0, #0
 8010048:	bd10      	pop	{r4, pc}
 801004a:	4603      	mov	r3, r0
 801004c:	e7f7      	b.n	801003e <__any_on+0x26>
 801004e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010052:	2900      	cmp	r1, #0
 8010054:	d0f5      	beq.n	8010042 <__any_on+0x2a>
 8010056:	2001      	movs	r0, #1
 8010058:	e7f6      	b.n	8010048 <__any_on+0x30>

0801005a <_realloc_r>:
 801005a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801005e:	4680      	mov	r8, r0
 8010060:	4614      	mov	r4, r2
 8010062:	460e      	mov	r6, r1
 8010064:	b921      	cbnz	r1, 8010070 <_realloc_r+0x16>
 8010066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801006a:	4611      	mov	r1, r2
 801006c:	f7fc ba5c 	b.w	800c528 <_malloc_r>
 8010070:	b92a      	cbnz	r2, 801007e <_realloc_r+0x24>
 8010072:	f7fc f9b9 	bl	800c3e8 <_free_r>
 8010076:	4625      	mov	r5, r4
 8010078:	4628      	mov	r0, r5
 801007a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801007e:	f000 fbed 	bl	801085c <_malloc_usable_size_r>
 8010082:	4284      	cmp	r4, r0
 8010084:	4607      	mov	r7, r0
 8010086:	d802      	bhi.n	801008e <_realloc_r+0x34>
 8010088:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801008c:	d812      	bhi.n	80100b4 <_realloc_r+0x5a>
 801008e:	4621      	mov	r1, r4
 8010090:	4640      	mov	r0, r8
 8010092:	f7fc fa49 	bl	800c528 <_malloc_r>
 8010096:	4605      	mov	r5, r0
 8010098:	2800      	cmp	r0, #0
 801009a:	d0ed      	beq.n	8010078 <_realloc_r+0x1e>
 801009c:	42bc      	cmp	r4, r7
 801009e:	4622      	mov	r2, r4
 80100a0:	4631      	mov	r1, r6
 80100a2:	bf28      	it	cs
 80100a4:	463a      	movcs	r2, r7
 80100a6:	f7fc f94f 	bl	800c348 <memcpy>
 80100aa:	4631      	mov	r1, r6
 80100ac:	4640      	mov	r0, r8
 80100ae:	f7fc f99b 	bl	800c3e8 <_free_r>
 80100b2:	e7e1      	b.n	8010078 <_realloc_r+0x1e>
 80100b4:	4635      	mov	r5, r6
 80100b6:	e7df      	b.n	8010078 <_realloc_r+0x1e>

080100b8 <__sfputc_r>:
 80100b8:	6893      	ldr	r3, [r2, #8]
 80100ba:	3b01      	subs	r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	b410      	push	{r4}
 80100c0:	6093      	str	r3, [r2, #8]
 80100c2:	da08      	bge.n	80100d6 <__sfputc_r+0x1e>
 80100c4:	6994      	ldr	r4, [r2, #24]
 80100c6:	42a3      	cmp	r3, r4
 80100c8:	db01      	blt.n	80100ce <__sfputc_r+0x16>
 80100ca:	290a      	cmp	r1, #10
 80100cc:	d103      	bne.n	80100d6 <__sfputc_r+0x1e>
 80100ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100d2:	f000 b999 	b.w	8010408 <__swbuf_r>
 80100d6:	6813      	ldr	r3, [r2, #0]
 80100d8:	1c58      	adds	r0, r3, #1
 80100da:	6010      	str	r0, [r2, #0]
 80100dc:	7019      	strb	r1, [r3, #0]
 80100de:	4608      	mov	r0, r1
 80100e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <__sfputs_r>:
 80100e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e8:	4606      	mov	r6, r0
 80100ea:	460f      	mov	r7, r1
 80100ec:	4614      	mov	r4, r2
 80100ee:	18d5      	adds	r5, r2, r3
 80100f0:	42ac      	cmp	r4, r5
 80100f2:	d101      	bne.n	80100f8 <__sfputs_r+0x12>
 80100f4:	2000      	movs	r0, #0
 80100f6:	e007      	b.n	8010108 <__sfputs_r+0x22>
 80100f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100fc:	463a      	mov	r2, r7
 80100fe:	4630      	mov	r0, r6
 8010100:	f7ff ffda 	bl	80100b8 <__sfputc_r>
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	d1f3      	bne.n	80100f0 <__sfputs_r+0xa>
 8010108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801010c <_vfiprintf_r>:
 801010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	460d      	mov	r5, r1
 8010112:	b09d      	sub	sp, #116	; 0x74
 8010114:	4614      	mov	r4, r2
 8010116:	4698      	mov	r8, r3
 8010118:	4606      	mov	r6, r0
 801011a:	b118      	cbz	r0, 8010124 <_vfiprintf_r+0x18>
 801011c:	6983      	ldr	r3, [r0, #24]
 801011e:	b90b      	cbnz	r3, 8010124 <_vfiprintf_r+0x18>
 8010120:	f7fe fe96 	bl	800ee50 <__sinit>
 8010124:	4b89      	ldr	r3, [pc, #548]	; (801034c <_vfiprintf_r+0x240>)
 8010126:	429d      	cmp	r5, r3
 8010128:	d11b      	bne.n	8010162 <_vfiprintf_r+0x56>
 801012a:	6875      	ldr	r5, [r6, #4]
 801012c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801012e:	07d9      	lsls	r1, r3, #31
 8010130:	d405      	bmi.n	801013e <_vfiprintf_r+0x32>
 8010132:	89ab      	ldrh	r3, [r5, #12]
 8010134:	059a      	lsls	r2, r3, #22
 8010136:	d402      	bmi.n	801013e <_vfiprintf_r+0x32>
 8010138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801013a:	f7ff faac 	bl	800f696 <__retarget_lock_acquire_recursive>
 801013e:	89ab      	ldrh	r3, [r5, #12]
 8010140:	071b      	lsls	r3, r3, #28
 8010142:	d501      	bpl.n	8010148 <_vfiprintf_r+0x3c>
 8010144:	692b      	ldr	r3, [r5, #16]
 8010146:	b9eb      	cbnz	r3, 8010184 <_vfiprintf_r+0x78>
 8010148:	4629      	mov	r1, r5
 801014a:	4630      	mov	r0, r6
 801014c:	f000 f9ce 	bl	80104ec <__swsetup_r>
 8010150:	b1c0      	cbz	r0, 8010184 <_vfiprintf_r+0x78>
 8010152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010154:	07dc      	lsls	r4, r3, #31
 8010156:	d50e      	bpl.n	8010176 <_vfiprintf_r+0x6a>
 8010158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801015c:	b01d      	add	sp, #116	; 0x74
 801015e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010162:	4b7b      	ldr	r3, [pc, #492]	; (8010350 <_vfiprintf_r+0x244>)
 8010164:	429d      	cmp	r5, r3
 8010166:	d101      	bne.n	801016c <_vfiprintf_r+0x60>
 8010168:	68b5      	ldr	r5, [r6, #8]
 801016a:	e7df      	b.n	801012c <_vfiprintf_r+0x20>
 801016c:	4b79      	ldr	r3, [pc, #484]	; (8010354 <_vfiprintf_r+0x248>)
 801016e:	429d      	cmp	r5, r3
 8010170:	bf08      	it	eq
 8010172:	68f5      	ldreq	r5, [r6, #12]
 8010174:	e7da      	b.n	801012c <_vfiprintf_r+0x20>
 8010176:	89ab      	ldrh	r3, [r5, #12]
 8010178:	0598      	lsls	r0, r3, #22
 801017a:	d4ed      	bmi.n	8010158 <_vfiprintf_r+0x4c>
 801017c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801017e:	f7ff fa8b 	bl	800f698 <__retarget_lock_release_recursive>
 8010182:	e7e9      	b.n	8010158 <_vfiprintf_r+0x4c>
 8010184:	2300      	movs	r3, #0
 8010186:	9309      	str	r3, [sp, #36]	; 0x24
 8010188:	2320      	movs	r3, #32
 801018a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801018e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010192:	2330      	movs	r3, #48	; 0x30
 8010194:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010358 <_vfiprintf_r+0x24c>
 8010198:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801019c:	f04f 0901 	mov.w	r9, #1
 80101a0:	4623      	mov	r3, r4
 80101a2:	469a      	mov	sl, r3
 80101a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a8:	b10a      	cbz	r2, 80101ae <_vfiprintf_r+0xa2>
 80101aa:	2a25      	cmp	r2, #37	; 0x25
 80101ac:	d1f9      	bne.n	80101a2 <_vfiprintf_r+0x96>
 80101ae:	ebba 0b04 	subs.w	fp, sl, r4
 80101b2:	d00b      	beq.n	80101cc <_vfiprintf_r+0xc0>
 80101b4:	465b      	mov	r3, fp
 80101b6:	4622      	mov	r2, r4
 80101b8:	4629      	mov	r1, r5
 80101ba:	4630      	mov	r0, r6
 80101bc:	f7ff ff93 	bl	80100e6 <__sfputs_r>
 80101c0:	3001      	adds	r0, #1
 80101c2:	f000 80aa 	beq.w	801031a <_vfiprintf_r+0x20e>
 80101c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80101c8:	445a      	add	r2, fp
 80101ca:	9209      	str	r2, [sp, #36]	; 0x24
 80101cc:	f89a 3000 	ldrb.w	r3, [sl]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	f000 80a2 	beq.w	801031a <_vfiprintf_r+0x20e>
 80101d6:	2300      	movs	r3, #0
 80101d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101e0:	f10a 0a01 	add.w	sl, sl, #1
 80101e4:	9304      	str	r3, [sp, #16]
 80101e6:	9307      	str	r3, [sp, #28]
 80101e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101ec:	931a      	str	r3, [sp, #104]	; 0x68
 80101ee:	4654      	mov	r4, sl
 80101f0:	2205      	movs	r2, #5
 80101f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101f6:	4858      	ldr	r0, [pc, #352]	; (8010358 <_vfiprintf_r+0x24c>)
 80101f8:	f7f0 f812 	bl	8000220 <memchr>
 80101fc:	9a04      	ldr	r2, [sp, #16]
 80101fe:	b9d8      	cbnz	r0, 8010238 <_vfiprintf_r+0x12c>
 8010200:	06d1      	lsls	r1, r2, #27
 8010202:	bf44      	itt	mi
 8010204:	2320      	movmi	r3, #32
 8010206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801020a:	0713      	lsls	r3, r2, #28
 801020c:	bf44      	itt	mi
 801020e:	232b      	movmi	r3, #43	; 0x2b
 8010210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010214:	f89a 3000 	ldrb.w	r3, [sl]
 8010218:	2b2a      	cmp	r3, #42	; 0x2a
 801021a:	d015      	beq.n	8010248 <_vfiprintf_r+0x13c>
 801021c:	9a07      	ldr	r2, [sp, #28]
 801021e:	4654      	mov	r4, sl
 8010220:	2000      	movs	r0, #0
 8010222:	f04f 0c0a 	mov.w	ip, #10
 8010226:	4621      	mov	r1, r4
 8010228:	f811 3b01 	ldrb.w	r3, [r1], #1
 801022c:	3b30      	subs	r3, #48	; 0x30
 801022e:	2b09      	cmp	r3, #9
 8010230:	d94e      	bls.n	80102d0 <_vfiprintf_r+0x1c4>
 8010232:	b1b0      	cbz	r0, 8010262 <_vfiprintf_r+0x156>
 8010234:	9207      	str	r2, [sp, #28]
 8010236:	e014      	b.n	8010262 <_vfiprintf_r+0x156>
 8010238:	eba0 0308 	sub.w	r3, r0, r8
 801023c:	fa09 f303 	lsl.w	r3, r9, r3
 8010240:	4313      	orrs	r3, r2
 8010242:	9304      	str	r3, [sp, #16]
 8010244:	46a2      	mov	sl, r4
 8010246:	e7d2      	b.n	80101ee <_vfiprintf_r+0xe2>
 8010248:	9b03      	ldr	r3, [sp, #12]
 801024a:	1d19      	adds	r1, r3, #4
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	9103      	str	r1, [sp, #12]
 8010250:	2b00      	cmp	r3, #0
 8010252:	bfbb      	ittet	lt
 8010254:	425b      	neglt	r3, r3
 8010256:	f042 0202 	orrlt.w	r2, r2, #2
 801025a:	9307      	strge	r3, [sp, #28]
 801025c:	9307      	strlt	r3, [sp, #28]
 801025e:	bfb8      	it	lt
 8010260:	9204      	strlt	r2, [sp, #16]
 8010262:	7823      	ldrb	r3, [r4, #0]
 8010264:	2b2e      	cmp	r3, #46	; 0x2e
 8010266:	d10c      	bne.n	8010282 <_vfiprintf_r+0x176>
 8010268:	7863      	ldrb	r3, [r4, #1]
 801026a:	2b2a      	cmp	r3, #42	; 0x2a
 801026c:	d135      	bne.n	80102da <_vfiprintf_r+0x1ce>
 801026e:	9b03      	ldr	r3, [sp, #12]
 8010270:	1d1a      	adds	r2, r3, #4
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	9203      	str	r2, [sp, #12]
 8010276:	2b00      	cmp	r3, #0
 8010278:	bfb8      	it	lt
 801027a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801027e:	3402      	adds	r4, #2
 8010280:	9305      	str	r3, [sp, #20]
 8010282:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010368 <_vfiprintf_r+0x25c>
 8010286:	7821      	ldrb	r1, [r4, #0]
 8010288:	2203      	movs	r2, #3
 801028a:	4650      	mov	r0, sl
 801028c:	f7ef ffc8 	bl	8000220 <memchr>
 8010290:	b140      	cbz	r0, 80102a4 <_vfiprintf_r+0x198>
 8010292:	2340      	movs	r3, #64	; 0x40
 8010294:	eba0 000a 	sub.w	r0, r0, sl
 8010298:	fa03 f000 	lsl.w	r0, r3, r0
 801029c:	9b04      	ldr	r3, [sp, #16]
 801029e:	4303      	orrs	r3, r0
 80102a0:	3401      	adds	r4, #1
 80102a2:	9304      	str	r3, [sp, #16]
 80102a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a8:	482c      	ldr	r0, [pc, #176]	; (801035c <_vfiprintf_r+0x250>)
 80102aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102ae:	2206      	movs	r2, #6
 80102b0:	f7ef ffb6 	bl	8000220 <memchr>
 80102b4:	2800      	cmp	r0, #0
 80102b6:	d03f      	beq.n	8010338 <_vfiprintf_r+0x22c>
 80102b8:	4b29      	ldr	r3, [pc, #164]	; (8010360 <_vfiprintf_r+0x254>)
 80102ba:	bb1b      	cbnz	r3, 8010304 <_vfiprintf_r+0x1f8>
 80102bc:	9b03      	ldr	r3, [sp, #12]
 80102be:	3307      	adds	r3, #7
 80102c0:	f023 0307 	bic.w	r3, r3, #7
 80102c4:	3308      	adds	r3, #8
 80102c6:	9303      	str	r3, [sp, #12]
 80102c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102ca:	443b      	add	r3, r7
 80102cc:	9309      	str	r3, [sp, #36]	; 0x24
 80102ce:	e767      	b.n	80101a0 <_vfiprintf_r+0x94>
 80102d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80102d4:	460c      	mov	r4, r1
 80102d6:	2001      	movs	r0, #1
 80102d8:	e7a5      	b.n	8010226 <_vfiprintf_r+0x11a>
 80102da:	2300      	movs	r3, #0
 80102dc:	3401      	adds	r4, #1
 80102de:	9305      	str	r3, [sp, #20]
 80102e0:	4619      	mov	r1, r3
 80102e2:	f04f 0c0a 	mov.w	ip, #10
 80102e6:	4620      	mov	r0, r4
 80102e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ec:	3a30      	subs	r2, #48	; 0x30
 80102ee:	2a09      	cmp	r2, #9
 80102f0:	d903      	bls.n	80102fa <_vfiprintf_r+0x1ee>
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d0c5      	beq.n	8010282 <_vfiprintf_r+0x176>
 80102f6:	9105      	str	r1, [sp, #20]
 80102f8:	e7c3      	b.n	8010282 <_vfiprintf_r+0x176>
 80102fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80102fe:	4604      	mov	r4, r0
 8010300:	2301      	movs	r3, #1
 8010302:	e7f0      	b.n	80102e6 <_vfiprintf_r+0x1da>
 8010304:	ab03      	add	r3, sp, #12
 8010306:	9300      	str	r3, [sp, #0]
 8010308:	462a      	mov	r2, r5
 801030a:	4b16      	ldr	r3, [pc, #88]	; (8010364 <_vfiprintf_r+0x258>)
 801030c:	a904      	add	r1, sp, #16
 801030e:	4630      	mov	r0, r6
 8010310:	f7fc fb7a 	bl	800ca08 <_printf_float>
 8010314:	4607      	mov	r7, r0
 8010316:	1c78      	adds	r0, r7, #1
 8010318:	d1d6      	bne.n	80102c8 <_vfiprintf_r+0x1bc>
 801031a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801031c:	07d9      	lsls	r1, r3, #31
 801031e:	d405      	bmi.n	801032c <_vfiprintf_r+0x220>
 8010320:	89ab      	ldrh	r3, [r5, #12]
 8010322:	059a      	lsls	r2, r3, #22
 8010324:	d402      	bmi.n	801032c <_vfiprintf_r+0x220>
 8010326:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010328:	f7ff f9b6 	bl	800f698 <__retarget_lock_release_recursive>
 801032c:	89ab      	ldrh	r3, [r5, #12]
 801032e:	065b      	lsls	r3, r3, #25
 8010330:	f53f af12 	bmi.w	8010158 <_vfiprintf_r+0x4c>
 8010334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010336:	e711      	b.n	801015c <_vfiprintf_r+0x50>
 8010338:	ab03      	add	r3, sp, #12
 801033a:	9300      	str	r3, [sp, #0]
 801033c:	462a      	mov	r2, r5
 801033e:	4b09      	ldr	r3, [pc, #36]	; (8010364 <_vfiprintf_r+0x258>)
 8010340:	a904      	add	r1, sp, #16
 8010342:	4630      	mov	r0, r6
 8010344:	f7fc fe04 	bl	800cf50 <_printf_i>
 8010348:	e7e4      	b.n	8010314 <_vfiprintf_r+0x208>
 801034a:	bf00      	nop
 801034c:	080126a4 	.word	0x080126a4
 8010350:	080126c4 	.word	0x080126c4
 8010354:	08012684 	.word	0x08012684
 8010358:	08012520 	.word	0x08012520
 801035c:	0801252a 	.word	0x0801252a
 8010360:	0800ca09 	.word	0x0800ca09
 8010364:	080100e7 	.word	0x080100e7
 8010368:	08012526 	.word	0x08012526
 801036c:	00000000 	.word	0x00000000

08010370 <nan>:
 8010370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010378 <nan+0x8>
 8010374:	4770      	bx	lr
 8010376:	bf00      	nop
 8010378:	00000000 	.word	0x00000000
 801037c:	7ff80000 	.word	0x7ff80000

08010380 <__sread>:
 8010380:	b510      	push	{r4, lr}
 8010382:	460c      	mov	r4, r1
 8010384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010388:	f000 fa70 	bl	801086c <_read_r>
 801038c:	2800      	cmp	r0, #0
 801038e:	bfab      	itete	ge
 8010390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010392:	89a3      	ldrhlt	r3, [r4, #12]
 8010394:	181b      	addge	r3, r3, r0
 8010396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801039a:	bfac      	ite	ge
 801039c:	6563      	strge	r3, [r4, #84]	; 0x54
 801039e:	81a3      	strhlt	r3, [r4, #12]
 80103a0:	bd10      	pop	{r4, pc}

080103a2 <__swrite>:
 80103a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a6:	461f      	mov	r7, r3
 80103a8:	898b      	ldrh	r3, [r1, #12]
 80103aa:	05db      	lsls	r3, r3, #23
 80103ac:	4605      	mov	r5, r0
 80103ae:	460c      	mov	r4, r1
 80103b0:	4616      	mov	r6, r2
 80103b2:	d505      	bpl.n	80103c0 <__swrite+0x1e>
 80103b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103b8:	2302      	movs	r3, #2
 80103ba:	2200      	movs	r2, #0
 80103bc:	f000 f9d6 	bl	801076c <_lseek_r>
 80103c0:	89a3      	ldrh	r3, [r4, #12]
 80103c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103ca:	81a3      	strh	r3, [r4, #12]
 80103cc:	4632      	mov	r2, r6
 80103ce:	463b      	mov	r3, r7
 80103d0:	4628      	mov	r0, r5
 80103d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103d6:	f000 b877 	b.w	80104c8 <_write_r>

080103da <__sseek>:
 80103da:	b510      	push	{r4, lr}
 80103dc:	460c      	mov	r4, r1
 80103de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103e2:	f000 f9c3 	bl	801076c <_lseek_r>
 80103e6:	1c43      	adds	r3, r0, #1
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	bf15      	itete	ne
 80103ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80103ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80103f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80103f6:	81a3      	strheq	r3, [r4, #12]
 80103f8:	bf18      	it	ne
 80103fa:	81a3      	strhne	r3, [r4, #12]
 80103fc:	bd10      	pop	{r4, pc}

080103fe <__sclose>:
 80103fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010402:	f000 b8e1 	b.w	80105c8 <_close_r>
	...

08010408 <__swbuf_r>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	460e      	mov	r6, r1
 801040c:	4614      	mov	r4, r2
 801040e:	4605      	mov	r5, r0
 8010410:	b118      	cbz	r0, 801041a <__swbuf_r+0x12>
 8010412:	6983      	ldr	r3, [r0, #24]
 8010414:	b90b      	cbnz	r3, 801041a <__swbuf_r+0x12>
 8010416:	f7fe fd1b 	bl	800ee50 <__sinit>
 801041a:	4b21      	ldr	r3, [pc, #132]	; (80104a0 <__swbuf_r+0x98>)
 801041c:	429c      	cmp	r4, r3
 801041e:	d12b      	bne.n	8010478 <__swbuf_r+0x70>
 8010420:	686c      	ldr	r4, [r5, #4]
 8010422:	69a3      	ldr	r3, [r4, #24]
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	071a      	lsls	r2, r3, #28
 801042a:	d52f      	bpl.n	801048c <__swbuf_r+0x84>
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b36b      	cbz	r3, 801048c <__swbuf_r+0x84>
 8010430:	6923      	ldr	r3, [r4, #16]
 8010432:	6820      	ldr	r0, [r4, #0]
 8010434:	1ac0      	subs	r0, r0, r3
 8010436:	6963      	ldr	r3, [r4, #20]
 8010438:	b2f6      	uxtb	r6, r6
 801043a:	4283      	cmp	r3, r0
 801043c:	4637      	mov	r7, r6
 801043e:	dc04      	bgt.n	801044a <__swbuf_r+0x42>
 8010440:	4621      	mov	r1, r4
 8010442:	4628      	mov	r0, r5
 8010444:	f000 f956 	bl	80106f4 <_fflush_r>
 8010448:	bb30      	cbnz	r0, 8010498 <__swbuf_r+0x90>
 801044a:	68a3      	ldr	r3, [r4, #8]
 801044c:	3b01      	subs	r3, #1
 801044e:	60a3      	str	r3, [r4, #8]
 8010450:	6823      	ldr	r3, [r4, #0]
 8010452:	1c5a      	adds	r2, r3, #1
 8010454:	6022      	str	r2, [r4, #0]
 8010456:	701e      	strb	r6, [r3, #0]
 8010458:	6963      	ldr	r3, [r4, #20]
 801045a:	3001      	adds	r0, #1
 801045c:	4283      	cmp	r3, r0
 801045e:	d004      	beq.n	801046a <__swbuf_r+0x62>
 8010460:	89a3      	ldrh	r3, [r4, #12]
 8010462:	07db      	lsls	r3, r3, #31
 8010464:	d506      	bpl.n	8010474 <__swbuf_r+0x6c>
 8010466:	2e0a      	cmp	r6, #10
 8010468:	d104      	bne.n	8010474 <__swbuf_r+0x6c>
 801046a:	4621      	mov	r1, r4
 801046c:	4628      	mov	r0, r5
 801046e:	f000 f941 	bl	80106f4 <_fflush_r>
 8010472:	b988      	cbnz	r0, 8010498 <__swbuf_r+0x90>
 8010474:	4638      	mov	r0, r7
 8010476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010478:	4b0a      	ldr	r3, [pc, #40]	; (80104a4 <__swbuf_r+0x9c>)
 801047a:	429c      	cmp	r4, r3
 801047c:	d101      	bne.n	8010482 <__swbuf_r+0x7a>
 801047e:	68ac      	ldr	r4, [r5, #8]
 8010480:	e7cf      	b.n	8010422 <__swbuf_r+0x1a>
 8010482:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <__swbuf_r+0xa0>)
 8010484:	429c      	cmp	r4, r3
 8010486:	bf08      	it	eq
 8010488:	68ec      	ldreq	r4, [r5, #12]
 801048a:	e7ca      	b.n	8010422 <__swbuf_r+0x1a>
 801048c:	4621      	mov	r1, r4
 801048e:	4628      	mov	r0, r5
 8010490:	f000 f82c 	bl	80104ec <__swsetup_r>
 8010494:	2800      	cmp	r0, #0
 8010496:	d0cb      	beq.n	8010430 <__swbuf_r+0x28>
 8010498:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801049c:	e7ea      	b.n	8010474 <__swbuf_r+0x6c>
 801049e:	bf00      	nop
 80104a0:	080126a4 	.word	0x080126a4
 80104a4:	080126c4 	.word	0x080126c4
 80104a8:	08012684 	.word	0x08012684

080104ac <__ascii_wctomb>:
 80104ac:	b149      	cbz	r1, 80104c2 <__ascii_wctomb+0x16>
 80104ae:	2aff      	cmp	r2, #255	; 0xff
 80104b0:	bf85      	ittet	hi
 80104b2:	238a      	movhi	r3, #138	; 0x8a
 80104b4:	6003      	strhi	r3, [r0, #0]
 80104b6:	700a      	strbls	r2, [r1, #0]
 80104b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80104bc:	bf98      	it	ls
 80104be:	2001      	movls	r0, #1
 80104c0:	4770      	bx	lr
 80104c2:	4608      	mov	r0, r1
 80104c4:	4770      	bx	lr
	...

080104c8 <_write_r>:
 80104c8:	b538      	push	{r3, r4, r5, lr}
 80104ca:	4d07      	ldr	r5, [pc, #28]	; (80104e8 <_write_r+0x20>)
 80104cc:	4604      	mov	r4, r0
 80104ce:	4608      	mov	r0, r1
 80104d0:	4611      	mov	r1, r2
 80104d2:	2200      	movs	r2, #0
 80104d4:	602a      	str	r2, [r5, #0]
 80104d6:	461a      	mov	r2, r3
 80104d8:	f7f0 fe62 	bl	80011a0 <_write>
 80104dc:	1c43      	adds	r3, r0, #1
 80104de:	d102      	bne.n	80104e6 <_write_r+0x1e>
 80104e0:	682b      	ldr	r3, [r5, #0]
 80104e2:	b103      	cbz	r3, 80104e6 <_write_r+0x1e>
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	bd38      	pop	{r3, r4, r5, pc}
 80104e8:	2000b288 	.word	0x2000b288

080104ec <__swsetup_r>:
 80104ec:	4b32      	ldr	r3, [pc, #200]	; (80105b8 <__swsetup_r+0xcc>)
 80104ee:	b570      	push	{r4, r5, r6, lr}
 80104f0:	681d      	ldr	r5, [r3, #0]
 80104f2:	4606      	mov	r6, r0
 80104f4:	460c      	mov	r4, r1
 80104f6:	b125      	cbz	r5, 8010502 <__swsetup_r+0x16>
 80104f8:	69ab      	ldr	r3, [r5, #24]
 80104fa:	b913      	cbnz	r3, 8010502 <__swsetup_r+0x16>
 80104fc:	4628      	mov	r0, r5
 80104fe:	f7fe fca7 	bl	800ee50 <__sinit>
 8010502:	4b2e      	ldr	r3, [pc, #184]	; (80105bc <__swsetup_r+0xd0>)
 8010504:	429c      	cmp	r4, r3
 8010506:	d10f      	bne.n	8010528 <__swsetup_r+0x3c>
 8010508:	686c      	ldr	r4, [r5, #4]
 801050a:	89a3      	ldrh	r3, [r4, #12]
 801050c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010510:	0719      	lsls	r1, r3, #28
 8010512:	d42c      	bmi.n	801056e <__swsetup_r+0x82>
 8010514:	06dd      	lsls	r5, r3, #27
 8010516:	d411      	bmi.n	801053c <__swsetup_r+0x50>
 8010518:	2309      	movs	r3, #9
 801051a:	6033      	str	r3, [r6, #0]
 801051c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010520:	81a3      	strh	r3, [r4, #12]
 8010522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010526:	e03e      	b.n	80105a6 <__swsetup_r+0xba>
 8010528:	4b25      	ldr	r3, [pc, #148]	; (80105c0 <__swsetup_r+0xd4>)
 801052a:	429c      	cmp	r4, r3
 801052c:	d101      	bne.n	8010532 <__swsetup_r+0x46>
 801052e:	68ac      	ldr	r4, [r5, #8]
 8010530:	e7eb      	b.n	801050a <__swsetup_r+0x1e>
 8010532:	4b24      	ldr	r3, [pc, #144]	; (80105c4 <__swsetup_r+0xd8>)
 8010534:	429c      	cmp	r4, r3
 8010536:	bf08      	it	eq
 8010538:	68ec      	ldreq	r4, [r5, #12]
 801053a:	e7e6      	b.n	801050a <__swsetup_r+0x1e>
 801053c:	0758      	lsls	r0, r3, #29
 801053e:	d512      	bpl.n	8010566 <__swsetup_r+0x7a>
 8010540:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010542:	b141      	cbz	r1, 8010556 <__swsetup_r+0x6a>
 8010544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010548:	4299      	cmp	r1, r3
 801054a:	d002      	beq.n	8010552 <__swsetup_r+0x66>
 801054c:	4630      	mov	r0, r6
 801054e:	f7fb ff4b 	bl	800c3e8 <_free_r>
 8010552:	2300      	movs	r3, #0
 8010554:	6363      	str	r3, [r4, #52]	; 0x34
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801055c:	81a3      	strh	r3, [r4, #12]
 801055e:	2300      	movs	r3, #0
 8010560:	6063      	str	r3, [r4, #4]
 8010562:	6923      	ldr	r3, [r4, #16]
 8010564:	6023      	str	r3, [r4, #0]
 8010566:	89a3      	ldrh	r3, [r4, #12]
 8010568:	f043 0308 	orr.w	r3, r3, #8
 801056c:	81a3      	strh	r3, [r4, #12]
 801056e:	6923      	ldr	r3, [r4, #16]
 8010570:	b94b      	cbnz	r3, 8010586 <__swsetup_r+0x9a>
 8010572:	89a3      	ldrh	r3, [r4, #12]
 8010574:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010578:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801057c:	d003      	beq.n	8010586 <__swsetup_r+0x9a>
 801057e:	4621      	mov	r1, r4
 8010580:	4630      	mov	r0, r6
 8010582:	f000 f92b 	bl	80107dc <__smakebuf_r>
 8010586:	89a0      	ldrh	r0, [r4, #12]
 8010588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801058c:	f010 0301 	ands.w	r3, r0, #1
 8010590:	d00a      	beq.n	80105a8 <__swsetup_r+0xbc>
 8010592:	2300      	movs	r3, #0
 8010594:	60a3      	str	r3, [r4, #8]
 8010596:	6963      	ldr	r3, [r4, #20]
 8010598:	425b      	negs	r3, r3
 801059a:	61a3      	str	r3, [r4, #24]
 801059c:	6923      	ldr	r3, [r4, #16]
 801059e:	b943      	cbnz	r3, 80105b2 <__swsetup_r+0xc6>
 80105a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105a4:	d1ba      	bne.n	801051c <__swsetup_r+0x30>
 80105a6:	bd70      	pop	{r4, r5, r6, pc}
 80105a8:	0781      	lsls	r1, r0, #30
 80105aa:	bf58      	it	pl
 80105ac:	6963      	ldrpl	r3, [r4, #20]
 80105ae:	60a3      	str	r3, [r4, #8]
 80105b0:	e7f4      	b.n	801059c <__swsetup_r+0xb0>
 80105b2:	2000      	movs	r0, #0
 80105b4:	e7f7      	b.n	80105a6 <__swsetup_r+0xba>
 80105b6:	bf00      	nop
 80105b8:	200001a8 	.word	0x200001a8
 80105bc:	080126a4 	.word	0x080126a4
 80105c0:	080126c4 	.word	0x080126c4
 80105c4:	08012684 	.word	0x08012684

080105c8 <_close_r>:
 80105c8:	b538      	push	{r3, r4, r5, lr}
 80105ca:	4d06      	ldr	r5, [pc, #24]	; (80105e4 <_close_r+0x1c>)
 80105cc:	2300      	movs	r3, #0
 80105ce:	4604      	mov	r4, r0
 80105d0:	4608      	mov	r0, r1
 80105d2:	602b      	str	r3, [r5, #0]
 80105d4:	f7f0 fdf2 	bl	80011bc <_close>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d102      	bne.n	80105e2 <_close_r+0x1a>
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	b103      	cbz	r3, 80105e2 <_close_r+0x1a>
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	2000b288 	.word	0x2000b288

080105e8 <__sflush_r>:
 80105e8:	898a      	ldrh	r2, [r1, #12]
 80105ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ee:	4605      	mov	r5, r0
 80105f0:	0710      	lsls	r0, r2, #28
 80105f2:	460c      	mov	r4, r1
 80105f4:	d458      	bmi.n	80106a8 <__sflush_r+0xc0>
 80105f6:	684b      	ldr	r3, [r1, #4]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	dc05      	bgt.n	8010608 <__sflush_r+0x20>
 80105fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105fe:	2b00      	cmp	r3, #0
 8010600:	dc02      	bgt.n	8010608 <__sflush_r+0x20>
 8010602:	2000      	movs	r0, #0
 8010604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010608:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801060a:	2e00      	cmp	r6, #0
 801060c:	d0f9      	beq.n	8010602 <__sflush_r+0x1a>
 801060e:	2300      	movs	r3, #0
 8010610:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010614:	682f      	ldr	r7, [r5, #0]
 8010616:	602b      	str	r3, [r5, #0]
 8010618:	d032      	beq.n	8010680 <__sflush_r+0x98>
 801061a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801061c:	89a3      	ldrh	r3, [r4, #12]
 801061e:	075a      	lsls	r2, r3, #29
 8010620:	d505      	bpl.n	801062e <__sflush_r+0x46>
 8010622:	6863      	ldr	r3, [r4, #4]
 8010624:	1ac0      	subs	r0, r0, r3
 8010626:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010628:	b10b      	cbz	r3, 801062e <__sflush_r+0x46>
 801062a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801062c:	1ac0      	subs	r0, r0, r3
 801062e:	2300      	movs	r3, #0
 8010630:	4602      	mov	r2, r0
 8010632:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010634:	6a21      	ldr	r1, [r4, #32]
 8010636:	4628      	mov	r0, r5
 8010638:	47b0      	blx	r6
 801063a:	1c43      	adds	r3, r0, #1
 801063c:	89a3      	ldrh	r3, [r4, #12]
 801063e:	d106      	bne.n	801064e <__sflush_r+0x66>
 8010640:	6829      	ldr	r1, [r5, #0]
 8010642:	291d      	cmp	r1, #29
 8010644:	d82c      	bhi.n	80106a0 <__sflush_r+0xb8>
 8010646:	4a2a      	ldr	r2, [pc, #168]	; (80106f0 <__sflush_r+0x108>)
 8010648:	40ca      	lsrs	r2, r1
 801064a:	07d6      	lsls	r6, r2, #31
 801064c:	d528      	bpl.n	80106a0 <__sflush_r+0xb8>
 801064e:	2200      	movs	r2, #0
 8010650:	6062      	str	r2, [r4, #4]
 8010652:	04d9      	lsls	r1, r3, #19
 8010654:	6922      	ldr	r2, [r4, #16]
 8010656:	6022      	str	r2, [r4, #0]
 8010658:	d504      	bpl.n	8010664 <__sflush_r+0x7c>
 801065a:	1c42      	adds	r2, r0, #1
 801065c:	d101      	bne.n	8010662 <__sflush_r+0x7a>
 801065e:	682b      	ldr	r3, [r5, #0]
 8010660:	b903      	cbnz	r3, 8010664 <__sflush_r+0x7c>
 8010662:	6560      	str	r0, [r4, #84]	; 0x54
 8010664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010666:	602f      	str	r7, [r5, #0]
 8010668:	2900      	cmp	r1, #0
 801066a:	d0ca      	beq.n	8010602 <__sflush_r+0x1a>
 801066c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010670:	4299      	cmp	r1, r3
 8010672:	d002      	beq.n	801067a <__sflush_r+0x92>
 8010674:	4628      	mov	r0, r5
 8010676:	f7fb feb7 	bl	800c3e8 <_free_r>
 801067a:	2000      	movs	r0, #0
 801067c:	6360      	str	r0, [r4, #52]	; 0x34
 801067e:	e7c1      	b.n	8010604 <__sflush_r+0x1c>
 8010680:	6a21      	ldr	r1, [r4, #32]
 8010682:	2301      	movs	r3, #1
 8010684:	4628      	mov	r0, r5
 8010686:	47b0      	blx	r6
 8010688:	1c41      	adds	r1, r0, #1
 801068a:	d1c7      	bne.n	801061c <__sflush_r+0x34>
 801068c:	682b      	ldr	r3, [r5, #0]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d0c4      	beq.n	801061c <__sflush_r+0x34>
 8010692:	2b1d      	cmp	r3, #29
 8010694:	d001      	beq.n	801069a <__sflush_r+0xb2>
 8010696:	2b16      	cmp	r3, #22
 8010698:	d101      	bne.n	801069e <__sflush_r+0xb6>
 801069a:	602f      	str	r7, [r5, #0]
 801069c:	e7b1      	b.n	8010602 <__sflush_r+0x1a>
 801069e:	89a3      	ldrh	r3, [r4, #12]
 80106a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106a4:	81a3      	strh	r3, [r4, #12]
 80106a6:	e7ad      	b.n	8010604 <__sflush_r+0x1c>
 80106a8:	690f      	ldr	r7, [r1, #16]
 80106aa:	2f00      	cmp	r7, #0
 80106ac:	d0a9      	beq.n	8010602 <__sflush_r+0x1a>
 80106ae:	0793      	lsls	r3, r2, #30
 80106b0:	680e      	ldr	r6, [r1, #0]
 80106b2:	bf08      	it	eq
 80106b4:	694b      	ldreq	r3, [r1, #20]
 80106b6:	600f      	str	r7, [r1, #0]
 80106b8:	bf18      	it	ne
 80106ba:	2300      	movne	r3, #0
 80106bc:	eba6 0807 	sub.w	r8, r6, r7
 80106c0:	608b      	str	r3, [r1, #8]
 80106c2:	f1b8 0f00 	cmp.w	r8, #0
 80106c6:	dd9c      	ble.n	8010602 <__sflush_r+0x1a>
 80106c8:	6a21      	ldr	r1, [r4, #32]
 80106ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106cc:	4643      	mov	r3, r8
 80106ce:	463a      	mov	r2, r7
 80106d0:	4628      	mov	r0, r5
 80106d2:	47b0      	blx	r6
 80106d4:	2800      	cmp	r0, #0
 80106d6:	dc06      	bgt.n	80106e6 <__sflush_r+0xfe>
 80106d8:	89a3      	ldrh	r3, [r4, #12]
 80106da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106de:	81a3      	strh	r3, [r4, #12]
 80106e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106e4:	e78e      	b.n	8010604 <__sflush_r+0x1c>
 80106e6:	4407      	add	r7, r0
 80106e8:	eba8 0800 	sub.w	r8, r8, r0
 80106ec:	e7e9      	b.n	80106c2 <__sflush_r+0xda>
 80106ee:	bf00      	nop
 80106f0:	20400001 	.word	0x20400001

080106f4 <_fflush_r>:
 80106f4:	b538      	push	{r3, r4, r5, lr}
 80106f6:	690b      	ldr	r3, [r1, #16]
 80106f8:	4605      	mov	r5, r0
 80106fa:	460c      	mov	r4, r1
 80106fc:	b913      	cbnz	r3, 8010704 <_fflush_r+0x10>
 80106fe:	2500      	movs	r5, #0
 8010700:	4628      	mov	r0, r5
 8010702:	bd38      	pop	{r3, r4, r5, pc}
 8010704:	b118      	cbz	r0, 801070e <_fflush_r+0x1a>
 8010706:	6983      	ldr	r3, [r0, #24]
 8010708:	b90b      	cbnz	r3, 801070e <_fflush_r+0x1a>
 801070a:	f7fe fba1 	bl	800ee50 <__sinit>
 801070e:	4b14      	ldr	r3, [pc, #80]	; (8010760 <_fflush_r+0x6c>)
 8010710:	429c      	cmp	r4, r3
 8010712:	d11b      	bne.n	801074c <_fflush_r+0x58>
 8010714:	686c      	ldr	r4, [r5, #4]
 8010716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d0ef      	beq.n	80106fe <_fflush_r+0xa>
 801071e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010720:	07d0      	lsls	r0, r2, #31
 8010722:	d404      	bmi.n	801072e <_fflush_r+0x3a>
 8010724:	0599      	lsls	r1, r3, #22
 8010726:	d402      	bmi.n	801072e <_fflush_r+0x3a>
 8010728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801072a:	f7fe ffb4 	bl	800f696 <__retarget_lock_acquire_recursive>
 801072e:	4628      	mov	r0, r5
 8010730:	4621      	mov	r1, r4
 8010732:	f7ff ff59 	bl	80105e8 <__sflush_r>
 8010736:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010738:	07da      	lsls	r2, r3, #31
 801073a:	4605      	mov	r5, r0
 801073c:	d4e0      	bmi.n	8010700 <_fflush_r+0xc>
 801073e:	89a3      	ldrh	r3, [r4, #12]
 8010740:	059b      	lsls	r3, r3, #22
 8010742:	d4dd      	bmi.n	8010700 <_fflush_r+0xc>
 8010744:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010746:	f7fe ffa7 	bl	800f698 <__retarget_lock_release_recursive>
 801074a:	e7d9      	b.n	8010700 <_fflush_r+0xc>
 801074c:	4b05      	ldr	r3, [pc, #20]	; (8010764 <_fflush_r+0x70>)
 801074e:	429c      	cmp	r4, r3
 8010750:	d101      	bne.n	8010756 <_fflush_r+0x62>
 8010752:	68ac      	ldr	r4, [r5, #8]
 8010754:	e7df      	b.n	8010716 <_fflush_r+0x22>
 8010756:	4b04      	ldr	r3, [pc, #16]	; (8010768 <_fflush_r+0x74>)
 8010758:	429c      	cmp	r4, r3
 801075a:	bf08      	it	eq
 801075c:	68ec      	ldreq	r4, [r5, #12]
 801075e:	e7da      	b.n	8010716 <_fflush_r+0x22>
 8010760:	080126a4 	.word	0x080126a4
 8010764:	080126c4 	.word	0x080126c4
 8010768:	08012684 	.word	0x08012684

0801076c <_lseek_r>:
 801076c:	b538      	push	{r3, r4, r5, lr}
 801076e:	4d07      	ldr	r5, [pc, #28]	; (801078c <_lseek_r+0x20>)
 8010770:	4604      	mov	r4, r0
 8010772:	4608      	mov	r0, r1
 8010774:	4611      	mov	r1, r2
 8010776:	2200      	movs	r2, #0
 8010778:	602a      	str	r2, [r5, #0]
 801077a:	461a      	mov	r2, r3
 801077c:	f7f0 fd2a 	bl	80011d4 <_lseek>
 8010780:	1c43      	adds	r3, r0, #1
 8010782:	d102      	bne.n	801078a <_lseek_r+0x1e>
 8010784:	682b      	ldr	r3, [r5, #0]
 8010786:	b103      	cbz	r3, 801078a <_lseek_r+0x1e>
 8010788:	6023      	str	r3, [r4, #0]
 801078a:	bd38      	pop	{r3, r4, r5, pc}
 801078c:	2000b288 	.word	0x2000b288

08010790 <__swhatbuf_r>:
 8010790:	b570      	push	{r4, r5, r6, lr}
 8010792:	460e      	mov	r6, r1
 8010794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010798:	2900      	cmp	r1, #0
 801079a:	b096      	sub	sp, #88	; 0x58
 801079c:	4614      	mov	r4, r2
 801079e:	461d      	mov	r5, r3
 80107a0:	da08      	bge.n	80107b4 <__swhatbuf_r+0x24>
 80107a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80107a6:	2200      	movs	r2, #0
 80107a8:	602a      	str	r2, [r5, #0]
 80107aa:	061a      	lsls	r2, r3, #24
 80107ac:	d410      	bmi.n	80107d0 <__swhatbuf_r+0x40>
 80107ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107b2:	e00e      	b.n	80107d2 <__swhatbuf_r+0x42>
 80107b4:	466a      	mov	r2, sp
 80107b6:	f000 f86b 	bl	8010890 <_fstat_r>
 80107ba:	2800      	cmp	r0, #0
 80107bc:	dbf1      	blt.n	80107a2 <__swhatbuf_r+0x12>
 80107be:	9a01      	ldr	r2, [sp, #4]
 80107c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80107c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80107c8:	425a      	negs	r2, r3
 80107ca:	415a      	adcs	r2, r3
 80107cc:	602a      	str	r2, [r5, #0]
 80107ce:	e7ee      	b.n	80107ae <__swhatbuf_r+0x1e>
 80107d0:	2340      	movs	r3, #64	; 0x40
 80107d2:	2000      	movs	r0, #0
 80107d4:	6023      	str	r3, [r4, #0]
 80107d6:	b016      	add	sp, #88	; 0x58
 80107d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080107dc <__smakebuf_r>:
 80107dc:	898b      	ldrh	r3, [r1, #12]
 80107de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80107e0:	079d      	lsls	r5, r3, #30
 80107e2:	4606      	mov	r6, r0
 80107e4:	460c      	mov	r4, r1
 80107e6:	d507      	bpl.n	80107f8 <__smakebuf_r+0x1c>
 80107e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80107ec:	6023      	str	r3, [r4, #0]
 80107ee:	6123      	str	r3, [r4, #16]
 80107f0:	2301      	movs	r3, #1
 80107f2:	6163      	str	r3, [r4, #20]
 80107f4:	b002      	add	sp, #8
 80107f6:	bd70      	pop	{r4, r5, r6, pc}
 80107f8:	ab01      	add	r3, sp, #4
 80107fa:	466a      	mov	r2, sp
 80107fc:	f7ff ffc8 	bl	8010790 <__swhatbuf_r>
 8010800:	9900      	ldr	r1, [sp, #0]
 8010802:	4605      	mov	r5, r0
 8010804:	4630      	mov	r0, r6
 8010806:	f7fb fe8f 	bl	800c528 <_malloc_r>
 801080a:	b948      	cbnz	r0, 8010820 <__smakebuf_r+0x44>
 801080c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010810:	059a      	lsls	r2, r3, #22
 8010812:	d4ef      	bmi.n	80107f4 <__smakebuf_r+0x18>
 8010814:	f023 0303 	bic.w	r3, r3, #3
 8010818:	f043 0302 	orr.w	r3, r3, #2
 801081c:	81a3      	strh	r3, [r4, #12]
 801081e:	e7e3      	b.n	80107e8 <__smakebuf_r+0xc>
 8010820:	4b0d      	ldr	r3, [pc, #52]	; (8010858 <__smakebuf_r+0x7c>)
 8010822:	62b3      	str	r3, [r6, #40]	; 0x28
 8010824:	89a3      	ldrh	r3, [r4, #12]
 8010826:	6020      	str	r0, [r4, #0]
 8010828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801082c:	81a3      	strh	r3, [r4, #12]
 801082e:	9b00      	ldr	r3, [sp, #0]
 8010830:	6163      	str	r3, [r4, #20]
 8010832:	9b01      	ldr	r3, [sp, #4]
 8010834:	6120      	str	r0, [r4, #16]
 8010836:	b15b      	cbz	r3, 8010850 <__smakebuf_r+0x74>
 8010838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801083c:	4630      	mov	r0, r6
 801083e:	f000 f839 	bl	80108b4 <_isatty_r>
 8010842:	b128      	cbz	r0, 8010850 <__smakebuf_r+0x74>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	f023 0303 	bic.w	r3, r3, #3
 801084a:	f043 0301 	orr.w	r3, r3, #1
 801084e:	81a3      	strh	r3, [r4, #12]
 8010850:	89a0      	ldrh	r0, [r4, #12]
 8010852:	4305      	orrs	r5, r0
 8010854:	81a5      	strh	r5, [r4, #12]
 8010856:	e7cd      	b.n	80107f4 <__smakebuf_r+0x18>
 8010858:	0800ede9 	.word	0x0800ede9

0801085c <_malloc_usable_size_r>:
 801085c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010860:	1f18      	subs	r0, r3, #4
 8010862:	2b00      	cmp	r3, #0
 8010864:	bfbc      	itt	lt
 8010866:	580b      	ldrlt	r3, [r1, r0]
 8010868:	18c0      	addlt	r0, r0, r3
 801086a:	4770      	bx	lr

0801086c <_read_r>:
 801086c:	b538      	push	{r3, r4, r5, lr}
 801086e:	4d07      	ldr	r5, [pc, #28]	; (801088c <_read_r+0x20>)
 8010870:	4604      	mov	r4, r0
 8010872:	4608      	mov	r0, r1
 8010874:	4611      	mov	r1, r2
 8010876:	2200      	movs	r2, #0
 8010878:	602a      	str	r2, [r5, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	f7f0 fc82 	bl	8001184 <_read>
 8010880:	1c43      	adds	r3, r0, #1
 8010882:	d102      	bne.n	801088a <_read_r+0x1e>
 8010884:	682b      	ldr	r3, [r5, #0]
 8010886:	b103      	cbz	r3, 801088a <_read_r+0x1e>
 8010888:	6023      	str	r3, [r4, #0]
 801088a:	bd38      	pop	{r3, r4, r5, pc}
 801088c:	2000b288 	.word	0x2000b288

08010890 <_fstat_r>:
 8010890:	b538      	push	{r3, r4, r5, lr}
 8010892:	4d07      	ldr	r5, [pc, #28]	; (80108b0 <_fstat_r+0x20>)
 8010894:	2300      	movs	r3, #0
 8010896:	4604      	mov	r4, r0
 8010898:	4608      	mov	r0, r1
 801089a:	4611      	mov	r1, r2
 801089c:	602b      	str	r3, [r5, #0]
 801089e:	f7f0 fc91 	bl	80011c4 <_fstat>
 80108a2:	1c43      	adds	r3, r0, #1
 80108a4:	d102      	bne.n	80108ac <_fstat_r+0x1c>
 80108a6:	682b      	ldr	r3, [r5, #0]
 80108a8:	b103      	cbz	r3, 80108ac <_fstat_r+0x1c>
 80108aa:	6023      	str	r3, [r4, #0]
 80108ac:	bd38      	pop	{r3, r4, r5, pc}
 80108ae:	bf00      	nop
 80108b0:	2000b288 	.word	0x2000b288

080108b4 <_isatty_r>:
 80108b4:	b538      	push	{r3, r4, r5, lr}
 80108b6:	4d06      	ldr	r5, [pc, #24]	; (80108d0 <_isatty_r+0x1c>)
 80108b8:	2300      	movs	r3, #0
 80108ba:	4604      	mov	r4, r0
 80108bc:	4608      	mov	r0, r1
 80108be:	602b      	str	r3, [r5, #0]
 80108c0:	f7f0 fc86 	bl	80011d0 <_isatty>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	d102      	bne.n	80108ce <_isatty_r+0x1a>
 80108c8:	682b      	ldr	r3, [r5, #0]
 80108ca:	b103      	cbz	r3, 80108ce <_isatty_r+0x1a>
 80108cc:	6023      	str	r3, [r4, #0]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	2000b288 	.word	0x2000b288

080108d4 <_init>:
 80108d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108d6:	bf00      	nop
 80108d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108da:	bc08      	pop	{r3}
 80108dc:	469e      	mov	lr, r3
 80108de:	4770      	bx	lr

080108e0 <_fini>:
 80108e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e2:	bf00      	nop
 80108e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e6:	bc08      	pop	{r3}
 80108e8:	469e      	mov	lr, r3
 80108ea:	4770      	bx	lr
