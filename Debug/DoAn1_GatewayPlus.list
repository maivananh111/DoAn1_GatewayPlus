
DoAn1_GatewayPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d980  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a58  0800db30  0800db30  0001db30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f588  0800f588  00020328  2**0
                  CONTENTS
  4 .ARM          00000008  0800f588  0800f588  0001f588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f590  0800f590  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  0800f590  0800f590  0001f590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  0800f5bc  0800f5bc  0001f5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000328  20000000  0800f5c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020328  2**0
                  CONTENTS
 10 .bss          0000b724  20000328  20000328  00020328  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000ba4c  2000ba4c  00020328  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 13 .debug_info   00065598  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000b0a3  00000000  00000000  000858f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0002bbd9  00000000  00000000  00090993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d28  00000000  00000000  000bc570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00008060  00000000  00000000  000be298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000124b2  00000000  00000000  000c62f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00042974  00000000  00000000  000d87aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00108e15  00000000  00000000  0011b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00223f33  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076f4  00000000  00000000  00223f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000328 	.word	0x20000328
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800db18 	.word	0x0800db18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000032c 	.word	0x2000032c
 80001ec:	0800db18 	.word	0x0800db18

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <HAL_Driver_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8000fcc:	b086      	sub	sp, #24
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_Driver_Init+0x70>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9201      	str	r2, [sp, #4]
 8000fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000fda:	6319      	str	r1, [r3, #48]	; 0x30
 8000fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fde:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000fe2:	9101      	str	r1, [sp, #4]
 8000fe4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	9202      	str	r2, [sp, #8]
 8000fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fea:	f041 0104 	orr.w	r1, r1, #4
 8000fee:	6319      	str	r1, [r3, #48]	; 0x30
 8000ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff2:	f001 0104 	and.w	r1, r1, #4
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	9203      	str	r2, [sp, #12]
 8000ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffe:	f041 0101 	orr.w	r1, r1, #1
 8001002:	6319      	str	r1, [r3, #48]	; 0x30
 8001004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001006:	f001 0101 	and.w	r1, r1, #1
 800100a:	9103      	str	r1, [sp, #12]
 800100c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	9204      	str	r2, [sp, #16]
 8001010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001012:	f041 0102 	orr.w	r1, r1, #2
 8001016:	6319      	str	r1, [r3, #48]	; 0x30
 8001018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800101a:	f001 0102 	and.w	r1, r1, #2
 800101e:	9104      	str	r1, [sp, #16]
 8001020:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	9205      	str	r2, [sp, #20]
 8001024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	9305      	str	r3, [sp, #20]
 8001034:	9b05      	ldr	r3, [sp, #20]
}
 8001036:	b006      	add	sp, #24
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <main>:
	return main_application();
 8001040:	f008 bb7a 	b.w	8009738 <main_application>

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was handle(call NMI_Handler)...");
 8001046:	4902      	ldr	r1, [pc, #8]	; (8001050 <NMI_Handler+0xc>)
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <NMI_Handler+0x10>)
 800104a:	f008 ffd7 	bl	8009ffc <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104e:	e7fe      	b.n	800104e <NMI_Handler+0xa>
 8001050:	0800db30 	.word	0x0800db30
 8001054:	0800db68 	.word	0x0800db68

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was handle(call HardFault_Handler)...");
 800105a:	4902      	ldr	r1, [pc, #8]	; (8001064 <HardFault_Handler+0xc>)
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <HardFault_Handler+0x10>)
 800105e:	f008 ffcd 	bl	8009ffc <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0xa>
 8001064:	0800db74 	.word	0x0800db74
 8001068:	0800dbb0 	.word	0x0800dbb0

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was handle(call MemManage_Handler)...");
 800106e:	4902      	ldr	r1, [pc, #8]	; (8001078 <MemManage_Handler+0xc>)
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <MemManage_Handler+0x10>)
 8001072:	f008 ffc3 	bl	8009ffc <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <MemManage_Handler+0xa>
 8001078:	0800dbbc 	.word	0x0800dbbc
 800107c:	0800db68 	.word	0x0800db68

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was handle(call BusFault_Handler)...");
 8001082:	4902      	ldr	r1, [pc, #8]	; (800108c <BusFault_Handler+0xc>)
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <BusFault_Handler+0x10>)
 8001086:	f008 ffb9 	bl	8009ffc <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0xa>
 800108c:	0800dc00 	.word	0x0800dc00
 8001090:	0800dbb0 	.word	0x0800dbb0

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was handle(call UsageFault_Handler)...");
 8001096:	4902      	ldr	r1, [pc, #8]	; (80010a0 <UsageFault_Handler+0xc>)
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <UsageFault_Handler+0x10>)
 800109a:	f008 ffaf 	bl	8009ffc <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <UsageFault_Handler+0xa>
 80010a0:	0800dc3c 	.word	0x0800dc3c
 80010a4:	0800dbb0 	.word	0x0800dbb0

080010a8 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was handle(call DebugMon_Handler)...");
 80010a8:	4901      	ldr	r1, [pc, #4]	; (80010b0 <DebugMon_Handler+0x8>)
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DebugMon_Handler+0xc>)
 80010ac:	f008 bfa6 	b.w	8009ffc <exception_interrupt_handler>
 80010b0:	0800dc7c 	.word	0x0800dc7c
 80010b4:	0800db68 	.word	0x0800db68

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 80010ba:	f007 fa15 	bl	80084e8 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8e7 	bl	8001290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010c2:	f002 faed 	bl	80036a0 <xTaskGetSchedulerState>
 80010c6:	2801      	cmp	r0, #1
 80010c8:	d100      	bne.n	80010cc <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80010d0:	f002 bec0 	b.w	8003e54 <xPortSysTickHandler>

080010d4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <DMA2_Stream3_IRQHandler+0x8>)
 80010d6:	f000 b8e7 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010da:	bf00      	nop
 80010dc:	20000344 	.word	0x20000344

080010e0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010e0:	4801      	ldr	r0, [pc, #4]	; (80010e8 <ETH_IRQHandler+0x8>)
 80010e2:	f000 b9d5 	b.w	8001490 <HAL_ETH_IRQHandler>
 80010e6:	bf00      	nop
 80010e8:	20000414 	.word	0x20000414

080010ec <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <DMA2_Stream6_IRQHandler+0x8>)
 80010ee:	f000 b8db 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010f2:	bf00      	nop
 80010f4:	200003a4 	.word	0x200003a4

080010f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80010f8:	2001      	movs	r0, #1
 80010fa:	4770      	bx	lr

080010fc <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <_kill+0xc>)
 80010fe:	2216      	movs	r2, #22
 8001100:	601a      	str	r2, [r3, #0]
  return -1;
}
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	2000b230 	.word	0x2000b230

0800110c <_exit>:
  errno = EINVAL;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <_exit+0x8>)
 800110e:	2216      	movs	r2, #22
 8001110:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x6>
 8001114:	2000b230 	.word	0x2000b230

08001118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	1e16      	subs	r6, r2, #0
 800111c:	dd07      	ble.n	800112e <_read+0x16>
 800111e:	460c      	mov	r4, r1
 8001120:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001122:	f3af 8000 	nop.w
 8001126:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	42a5      	cmp	r5, r4
 800112c:	d1f9      	bne.n	8001122 <_read+0xa>
  }

  return len;
}
 800112e:	4630      	mov	r0, r6
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	bf00      	nop

08001134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	1e16      	subs	r6, r2, #0
 8001138:	dd07      	ble.n	800114a <_write+0x16>
 800113a:	460c      	mov	r4, r1
 800113c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800113e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001142:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	42ac      	cmp	r4, r5
 8001148:	d1f9      	bne.n	800113e <_write+0xa>
  }
  return len;
}
 800114a:	4630      	mov	r0, r6
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	bf00      	nop

08001150 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800115e:	2000      	movs	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001168:	2000      	movs	r0, #0
 800116a:	4770      	bx	lr

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <_sbrk+0x3c>)
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001174:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001176:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001178:	b182      	cbz	r2, 800119c <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4410      	add	r0, r2
 800117c:	4288      	cmp	r0, r1
 800117e:	d804      	bhi.n	800118a <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001180:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001182:	4610      	mov	r0, r2
 8001184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001188:	4770      	bx	lr
    errno = ENOMEM;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <_sbrk+0x44>)
}
 800118c:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001190:	220c      	movs	r2, #12
 8001192:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001198:	4610      	mov	r0, r2
 800119a:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x48>)
 800119e:	6022      	str	r2, [r4, #0]
 80011a0:	e7eb      	b.n	800117a <_sbrk+0xe>
 80011a2:	bf00      	nop
 80011a4:	20000404 	.word	0x20000404
 80011a8:	20030000 	.word	0x20030000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000b230 	.word	0x2000b230
 80011b4:	2000ba50 	.word	0x2000ba50

080011b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <SystemInit+0x10>)
 80011ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011cc:	4a16      	ldr	r2, [pc, #88]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d00c      	beq.n	80011f2 <SystemCoreClockUpdate+0x26>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d00c      	beq.n	80011f6 <SystemCoreClockUpdate+0x2a>
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <SystemCoreClockUpdate+0x64>)
 80011e2:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80011ea:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 80011ec:	40d3      	lsrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
}
 80011f0:	4770      	bx	lr
  switch (tmp)
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemCoreClockUpdate+0x6c>)
 80011f4:	e7f3      	b.n	80011de <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011f6:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 80011fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001202:	6853      	ldr	r3, [r2, #4]
 8001204:	bf14      	ite	ne
 8001206:	4a0c      	ldrne	r2, [pc, #48]	; (8001238 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001208:	4a08      	ldreq	r2, [pc, #32]	; (800122c <SystemCoreClockUpdate+0x60>)
 800120a:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 8001210:	6852      	ldr	r2, [r2, #4]
 8001212:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001216:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800121a:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800121c:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001220:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001222:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001226:	e7da      	b.n	80011de <SystemCoreClockUpdate+0x12>
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400
 8001230:	0800dcbc 	.word	0x0800dcbc
 8001234:	20000000 	.word	0x20000000
 8001238:	017d7840 	.word	0x017d7840

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001266:	f7ff ffa7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f009 fc55 	bl	800ab18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fee7 	bl	8001040 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001274:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000328 	.word	0x20000328
  ldr r2, =_sidata
 8001280:	0800f5c8 	.word	0x0800f5c8
  ldr r2, =_sbss
 8001284:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8001288:	2000ba4c 	.word	0x2000ba4c

0800128c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <CAN1_RX0_IRQHandler>
	...

08001290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x10>)
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_IncTick+0x14>)
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	440b      	add	r3, r1
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000408 	.word	0x20000408
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ac:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ae:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b2:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80012ba:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	2208      	movs	r2, #8
 80012be:	409a      	lsls	r2, r3
 80012c0:	4222      	tst	r2, r4
{
 80012c2:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	d004      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012c6:	6801      	ldr	r1, [r0, #0]
 80012c8:	680f      	ldr	r7, [r1, #0]
 80012ca:	0778      	lsls	r0, r7, #29
 80012cc:	f100 808a 	bmi.w	80013e4 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4222      	tst	r2, r4
 80012d6:	d004      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012d8:	f8d8 1000 	ldr.w	r1, [r8]
 80012dc:	6949      	ldr	r1, [r1, #20]
 80012de:	0609      	lsls	r1, r1, #24
 80012e0:	d478      	bmi.n	80013d4 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	2204      	movs	r2, #4
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4222      	tst	r2, r4
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	f8d8 1000 	ldr.w	r1, [r8]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	078f      	lsls	r7, r1, #30
 80012f2:	d467      	bmi.n	80013c4 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	2210      	movs	r2, #16
 80012f6:	409a      	lsls	r2, r3
 80012f8:	4222      	tst	r2, r4
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012fc:	f8d8 1000 	ldr.w	r1, [r8]
 8001300:	680f      	ldr	r7, [r1, #0]
 8001302:	0738      	lsls	r0, r7, #28
 8001304:	d449      	bmi.n	800139a <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001306:	2220      	movs	r2, #32
 8001308:	409a      	lsls	r2, r3
 800130a:	4222      	tst	r2, r4
 800130c:	d017      	beq.n	800133e <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130e:	f8d8 1000 	ldr.w	r1, [r8]
 8001312:	680c      	ldr	r4, [r1, #0]
 8001314:	06e0      	lsls	r0, r4, #27
 8001316:	d512      	bpl.n	800133e <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001318:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800131e:	2a05      	cmp	r2, #5
 8001320:	d073      	beq.n	800140a <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001322:	680b      	ldr	r3, [r1, #0]
 8001324:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001328:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	f000 8090 	beq.w	800144e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800132e:	0319      	lsls	r1, r3, #12
 8001330:	f140 809b 	bpl.w	800146a <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 8001334:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001338:	b10b      	cbz	r3, 800133e <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800133a:	4640      	mov	r0, r8
 800133c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800133e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001342:	b33b      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001344:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001348:	07da      	lsls	r2, r3, #31
 800134a:	d51b      	bpl.n	8001384 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800134c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001350:	494c      	ldr	r1, [pc, #304]	; (8001484 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001352:	2305      	movs	r3, #5
 8001354:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001358:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800135a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800135e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001362:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e002      	b.n	800136e <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d504      	bpl.n	8001378 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	42ab      	cmp	r3, r5
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	d9f7      	bls.n	8001368 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001378:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800137c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001380:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001384:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001388:	b123      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	4640      	mov	r0, r8
    }
  }
}
 800138c:	b002      	add	sp, #8
 800138e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8001392:	4718      	bx	r3
}
 8001394:	b002      	add	sp, #8
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800139a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	680a      	ldr	r2, [r1, #0]
 800139e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a4:	d12a      	bne.n	80013fc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a6:	05d7      	lsls	r7, r2, #23
 80013a8:	d403      	bmi.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013aa:	680a      	ldr	r2, [r1, #0]
 80013ac:	f022 0208 	bic.w	r2, r2, #8
 80013b0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80013b2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d0a5      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80013ba:	4640      	mov	r0, r8
 80013bc:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013be:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80013c2:	e7a0      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013d2:	e78f      	b.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013e2:	e77e      	b.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013e4:	680f      	ldr	r7, [r1, #0]
 80013e6:	f027 0704 	bic.w	r7, r7, #4
 80013ea:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013ec:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013ee:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013fa:	e769      	b.n	80012d0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fc:	0312      	lsls	r2, r2, #12
 80013fe:	d5d8      	bpl.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001400:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001404:	2a00      	cmp	r2, #0
 8001406:	d1d8      	bne.n	80013ba <HAL_DMA_IRQHandler+0x112>
 8001408:	e77d      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	680a      	ldr	r2, [r1, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	694a      	ldr	r2, [r1, #20]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800141e:	b352      	cbz	r2, 8001476 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001420:	680a      	ldr	r2, [r1, #0]
 8001422:	f022 0208 	bic.w	r2, r2, #8
 8001426:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800142e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001432:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001434:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001436:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001438:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800143c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001440:	2900      	cmp	r1, #0
 8001442:	d0a7      	beq.n	8001394 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8001444:	4640      	mov	r0, r8
}
 8001446:	b002      	add	sp, #8
 8001448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800144c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800144e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001452:	f47f af6f 	bne.w	8001334 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001456:	680a      	ldr	r2, [r1, #0]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800145e:	2201      	movs	r2, #1
 8001460:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001464:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8001468:	e764      	b.n	8001334 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800146a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af63 	bne.w	800133a <HAL_DMA_IRQHandler+0x92>
 8001474:	e763      	b.n	800133e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800147a:	2a00      	cmp	r2, #0
 800147c:	d1d0      	bne.n	8001420 <HAL_DMA_IRQHandler+0x178>
 800147e:	e7d3      	b.n	8001428 <HAL_DMA_IRQHandler+0x180>
 8001480:	20000000 	.word	0x20000000
 8001484:	1b4e81b5 	.word	0x1b4e81b5

08001488 <HAL_ETH_PMTCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_ETH_WakeUpCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001490:	6802      	ldr	r2, [r0, #0]
 8001492:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001496:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	0649      	lsls	r1, r1, #25
{
 800149c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800149e:	d502      	bpl.n	80014a6 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80014a0:	69d9      	ldr	r1, [r3, #28]
 80014a2:	0649      	lsls	r1, r1, #25
 80014a4:	d448      	bmi.n	8001538 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	07c9      	lsls	r1, r1, #31
 80014aa:	d502      	bpl.n	80014b2 <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80014ac:	69d9      	ldr	r1, [r3, #28]
 80014ae:	07c8      	lsls	r0, r1, #31
 80014b0:	d438      	bmi.n	8001524 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80014b2:	6959      	ldr	r1, [r3, #20]
 80014b4:	0409      	lsls	r1, r1, #16
 80014b6:	d502      	bpl.n	80014be <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80014b8:	69d9      	ldr	r1, [r3, #28]
 80014ba:	0408      	lsls	r0, r1, #16
 80014bc:	d40e      	bmi.n	80014dc <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80014be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80014c0:	0719      	lsls	r1, r3, #28
 80014c2:	d423      	bmi.n	800150c <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_ETH_IRQHandler+0xd0>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	0312      	lsls	r2, r2, #12
 80014ca:	d400      	bmi.n	80014ce <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80014cc:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80014ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d2:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ffd9 	bl	800148c <HAL_ETH_WakeUpCallback>
}
 80014da:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014dc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80014e0:	f042 0208 	orr.w	r2, r2, #8
 80014e4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80014ee:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014f0:	d12a      	bne.n	8001548 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014f2:	f248 6180 	movw	r1, #34432	; 0x8680
 80014f6:	400a      	ands	r2, r1
 80014f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014fc:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 f844 	bl	800158c <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001508:	0719      	lsls	r1, r3, #28
 800150a:	d5db      	bpl.n	80014c4 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800150c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800150e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001512:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff ffb6 	bl	8001488 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800151c:	2300      	movs	r3, #0
 800151e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001522:	e7cf      	b.n	80014c4 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001524:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001528:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 800152a:	4620      	mov	r0, r4
 800152c:	f000 f828 	bl	8001580 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001536:	e7bc      	b.n	80014b2 <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_ETH_IRQHandler+0xd4>)
 800153a:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 800153c:	f000 f81a 	bl	8001574 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001546:	e7ae      	b.n	80014a6 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_ETH_IRQHandler+0xd8>)
 800154a:	4002      	ands	r2, r0
 800154c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001550:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001552:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001554:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001558:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 800155a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800155e:	e7ce      	b.n	80014fe <HAL_ETH_IRQHandler+0x6e>
 8001560:	40013c00 	.word	0x40013c00
 8001564:	00010040 	.word	0x00010040
 8001568:	007e2000 	.word	0x007e2000

0800156c <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 800156c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_ETH_RxCpltCallback+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f000 b816 	b.w	80015a8 <osSemaphoreRelease>
 800157c:	2000040c 	.word	0x2000040c

08001580 <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_ETH_TxCpltCallback+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f000 b810 	b.w	80015a8 <osSemaphoreRelease>
 8001588:	20000410 	.word	0x20000410

0800158c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800158c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800158e:	f7ff ffed 	bl	800156c <HAL_ETH_GetDMAError>
 8001592:	0603      	lsls	r3, r0, #24
 8001594:	d400      	bmi.n	8001598 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001596:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_ETH_ErrorCallback+0x18>)
 800159a:	6818      	ldr	r0, [r3, #0]
}
 800159c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80015a0:	f000 b802 	b.w	80015a8 <osSemaphoreRelease>
 80015a4:	2000040c 	.word	0x2000040c

080015a8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80015a8:	b330      	cbz	r0, 80015f8 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80015aa:	b510      	push	{r4, lr}
 80015ac:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015ae:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80015b2:	b1ab      	cbz	r3, 80015e0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 80015b4:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015b6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80015b8:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015ba:	f000 fc83 	bl	8001ec4 <xQueueGiveFromISR>
 80015be:	2801      	cmp	r0, #1
 80015c0:	d117      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	b193      	cbz	r3, 80015ec <osSemaphoreRelease+0x44>
 80015c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80015da:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80015dc:	b002      	add	sp, #8
 80015de:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80015e0:	461a      	mov	r2, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	f000 fa52 	bl	8001a8c <xQueueGenericSend>
 80015e8:	2801      	cmp	r0, #1
 80015ea:	d102      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
  stat = osOK;
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	b002      	add	sp, #8
 80015f0:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 80015f2:	f06f 0002 	mvn.w	r0, #2
 80015f6:	e7fa      	b.n	80015ee <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80015f8:	f06f 0003 	mvn.w	r0, #3
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <vApplicationGetIdleTaskMemory+0x14>)
 8001602:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001604:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001606:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001608:	4c03      	ldr	r4, [pc, #12]	; (8001618 <vApplicationGetIdleTaskMemory+0x18>)
 800160a:	600c      	str	r4, [r1, #0]
}
 800160c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	4770      	bx	lr
 8001614:	200006c4 	.word	0x200006c4
 8001618:	200004c4 	.word	0x200004c4

0800161c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <vApplicationGetTimerTaskMemory+0x18>)
 800161e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001620:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001626:	4c04      	ldr	r4, [pc, #16]	; (8001638 <vApplicationGetTimerTaskMemory+0x1c>)
 8001628:	600c      	str	r4, [r1, #0]
}
 800162a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000b30 	.word	0x20000b30
 8001638:	20000730 	.word	0x20000730

0800163c <vEventGroupSetBitsCallback>:
EventGroup_t *pxEventBits = xEventGroup;
BaseType_t xMatchFound = pdFALSE;

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800163c:	2800      	cmp	r0, #0
 800163e:	d03d      	beq.n	80016bc <vEventGroupSetBitsCallback+0x80>
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8001640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001644:	f011 467f 	ands.w	r6, r1, #4278190080	; 0xff000000
 8001648:	4688      	mov	r8, r1
 800164a:	d008      	beq.n	800165e <vEventGroupSetBitsCallback+0x22>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800164c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001650:	f383 8811 	msr	BASEPRI, r3
 8001654:	f3bf 8f6f 	isb	sy
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	e7fe      	b.n	800165c <vEventGroupSetBitsCallback+0x20>
 800165e:	4605      	mov	r5, r0
	vTaskSuspendAll();
 8001660:	f001 fdfc 	bl	800325c <vTaskSuspendAll>
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001664:	682b      	ldr	r3, [r5, #0]
		pxListItem = listGET_HEAD_ENTRY( pxList );
 8001666:	692c      	ldr	r4, [r5, #16]
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001668:	f105 070c 	add.w	r7, r5, #12
		pxEventBits->uxEventBits |= uxBitsToSet;
 800166c:	ea48 0303 	orr.w	r3, r8, r3
		while( pxListItem != pxListEnd )
 8001670:	42a7      	cmp	r7, r4
		pxEventBits->uxEventBits |= uxBitsToSet;
 8001672:	602b      	str	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 8001674:	d10c      	bne.n	8001690 <vEventGroupSetBitsCallback+0x54>
 8001676:	e01c      	b.n	80016b2 <vEventGroupSetBitsCallback+0x76>
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8001678:	ea13 0f0c 	tst.w	r3, ip
 800167c:	d006      	beq.n	800168c <vEventGroupSetBitsCallback+0x50>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800167e:	01d3      	lsls	r3, r2, #7
					uxBitsToClear |= uxBitsWaitedFor;
 8001680:	bf48      	it	mi
 8001682:	ea46 060c 	orrmi.w	r6, r6, ip
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001686:	f001 ff61 	bl	800354c <vTaskRemoveFromUnorderedEventList>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800168a:	682b      	ldr	r3, [r5, #0]
		while( pxListItem != pxListEnd )
 800168c:	42a7      	cmp	r7, r4
 800168e:	d00e      	beq.n	80016ae <vEventGroupSetBitsCallback+0x72>
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8001690:	4620      	mov	r0, r4
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8001692:	f043 7100 	orr.w	r1, r3, #33554432	; 0x2000000
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8001696:	6802      	ldr	r2, [r0, #0]
			pxNext = listGET_NEXT( pxListItem );
 8001698:	6864      	ldr	r4, [r4, #4]
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800169a:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800169e:	f022 4c7f 	bic.w	ip, r2, #4278190080	; 0xff000000
			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80016a2:	d0e9      	beq.n	8001678 <vEventGroupSetBitsCallback+0x3c>
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80016a4:	ea3c 0e03 	bics.w	lr, ip, r3
 80016a8:	d0e9      	beq.n	800167e <vEventGroupSetBitsCallback+0x42>
		while( pxListItem != pxListEnd )
 80016aa:	42a7      	cmp	r7, r4
 80016ac:	d1f0      	bne.n	8001690 <vEventGroupSetBitsCallback+0x54>
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80016ae:	ea23 0306 	bic.w	r3, r3, r6
 80016b2:	602b      	str	r3, [r5, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
 80016b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	( void ) xTaskResumeAll();
 80016b8:	f001 bdd8 	b.w	800326c <xTaskResumeAll>
 80016bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80016c0:	f383 8811 	msr	BASEPRI, r3
 80016c4:	f3bf 8f6f 	isb	sy
 80016c8:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 80016cc:	e7fe      	b.n	80016cc <vEventGroupSetBitsCallback+0x90>
 80016ce:	bf00      	nop

080016d0 <xEventGroupCreate>:
	{
 80016d0:	b538      	push	{r3, r4, r5, lr}
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80016d2:	2020      	movs	r0, #32
 80016d4:	f002 fcb6 	bl	8004044 <pvPortMalloc>
		if( pxEventBits != NULL )
 80016d8:	4604      	mov	r4, r0
 80016da:	b128      	cbz	r0, 80016e8 <xEventGroupCreate+0x18>
			pxEventBits->uxEventBits = 0;
 80016dc:	2500      	movs	r5, #0
 80016de:	f840 5b04 	str.w	r5, [r0], #4
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80016e2:	f000 f895 	bl	8001810 <vListInitialise>
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80016e6:	7725      	strb	r5, [r4, #28]
	}
 80016e8:	4620      	mov	r0, r4
 80016ea:	bd38      	pop	{r3, r4, r5, pc}

080016ec <xEventGroupWaitBits>:
{
 80016ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( xEventGroup );
 80016f0:	b1b0      	cbz	r0, 8001720 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80016f2:	f011 487f 	ands.w	r8, r1, #4278190080	; 0xff000000
 80016f6:	460c      	mov	r4, r1
 80016f8:	d109      	bne.n	800170e <xEventGroupWaitBits+0x22>
	configASSERT( uxBitsToWaitFor != 0 );
 80016fa:	b9d1      	cbnz	r1, 8001732 <xEventGroupWaitBits+0x46>
 80016fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001700:	f383 8811 	msr	BASEPRI, r3
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	f3bf 8f4f 	dsb	sy
 800170c:	e7fe      	b.n	800170c <xEventGroupWaitBits+0x20>
 800170e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800171e:	e7fe      	b.n	800171e <xEventGroupWaitBits+0x32>
 8001720:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001724:	f383 8811 	msr	BASEPRI, r3
 8001728:	f3bf 8f6f 	isb	sy
 800172c:	f3bf 8f4f 	dsb	sy
	configASSERT( xEventGroup );
 8001730:	e7fe      	b.n	8001730 <xEventGroupWaitBits+0x44>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001732:	4617      	mov	r7, r2
 8001734:	461e      	mov	r6, r3
 8001736:	4605      	mov	r5, r0
 8001738:	f001 ffb2 	bl	80036a0 <xTaskGetSchedulerState>
 800173c:	b910      	cbnz	r0, 8001744 <xEventGroupWaitBits+0x58>
 800173e:	9b08      	ldr	r3, [sp, #32]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d13c      	bne.n	80017be <xEventGroupWaitBits+0xd2>
	vTaskSuspendAll();
 8001744:	f001 fd8a 	bl	800325c <vTaskSuspendAll>
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8001748:	f8d5 9000 	ldr.w	r9, [r5]

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
BaseType_t xWaitConditionMet = pdFALSE;

	if( xWaitForAllBits == pdFALSE )
 800174c:	b36e      	cbz	r6, 80017aa <xEventGroupWaitBits+0xbe>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800174e:	ea34 0309 	bics.w	r3, r4, r9
 8001752:	d02d      	beq.n	80017b0 <xEventGroupWaitBits+0xc4>
		else if( xTicksToWait == ( TickType_t ) 0 )
 8001754:	9b08      	ldr	r3, [sp, #32]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d03a      	beq.n	80017d0 <xEventGroupWaitBits+0xe4>
			if( xClearOnExit != pdFALSE )
 800175a:	2f00      	cmp	r7, #0
 800175c:	bf16      	itet	ne
 800175e:	f04f 7880 	movne.w	r8, #16777216	; 0x1000000
 8001762:	f04f 6180 	moveq.w	r1, #67108864	; 0x4000000
 8001766:	f04f 61a0 	movne.w	r1, #83886080	; 0x5000000
			if( xWaitForAllBits != pdFALSE )
 800176a:	2e00      	cmp	r6, #0
 800176c:	bf08      	it	eq
 800176e:	4641      	moveq	r1, r8
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8001770:	4321      	orrs	r1, r4
 8001772:	461a      	mov	r2, r3
 8001774:	1d28      	adds	r0, r5, #4
 8001776:	f001 fdf5 	bl	8003364 <vTaskPlaceOnUnorderedEventList>
	xAlreadyYielded = xTaskResumeAll();
 800177a:	f001 fd77 	bl	800326c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800177e:	b948      	cbnz	r0, 8001794 <xEventGroupWaitBits+0xa8>
			portYIELD_WITHIN_API();
 8001780:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001788:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800178c:	f3bf 8f4f 	dsb	sy
 8001790:	f3bf 8f6f 	isb	sy
		uxReturn = uxTaskResetEventItemValue();
 8001794:	f002 f874 	bl	8003880 <uxTaskResetEventItemValue>
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8001798:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
		uxReturn = uxTaskResetEventItemValue();
 800179c:	4681      	mov	r9, r0
		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800179e:	d01a      	beq.n	80017d6 <xEventGroupWaitBits+0xea>
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80017a0:	f029 497f 	bic.w	r9, r9, #4278190080	; 0xff000000
}
 80017a4:	4648      	mov	r0, r9
 80017a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80017aa:	ea14 0f09 	tst.w	r4, r9
 80017ae:	d0d1      	beq.n	8001754 <xEventGroupWaitBits+0x68>
			if( xClearOnExit != pdFALSE )
 80017b0:	b177      	cbz	r7, 80017d0 <xEventGroupWaitBits+0xe4>
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80017b2:	ea29 0404 	bic.w	r4, r9, r4
 80017b6:	602c      	str	r4, [r5, #0]
	xAlreadyYielded = xTaskResumeAll();
 80017b8:	f001 fd58 	bl	800326c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80017bc:	e7f2      	b.n	80017a4 <xEventGroupWaitBits+0xb8>
 80017be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80017c2:	f383 8811 	msr	BASEPRI, r3
 80017c6:	f3bf 8f6f 	isb	sy
 80017ca:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017ce:	e7fe      	b.n	80017ce <xEventGroupWaitBits+0xe2>
	xAlreadyYielded = xTaskResumeAll();
 80017d0:	f001 fd4c 	bl	800326c <xTaskResumeAll>
	if( xTicksToWait != ( TickType_t ) 0 )
 80017d4:	e7e6      	b.n	80017a4 <xEventGroupWaitBits+0xb8>
			taskENTER_CRITICAL();
 80017d6:	f002 fad5 	bl	8003d84 <vPortEnterCritical>
				uxReturn = pxEventBits->uxEventBits;
 80017da:	f8d5 9000 	ldr.w	r9, [r5]
	if( xWaitForAllBits == pdFALSE )
 80017de:	b94e      	cbnz	r6, 80017f4 <xEventGroupWaitBits+0x108>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80017e0:	ea14 0f09 	tst.w	r4, r9
 80017e4:	d003      	beq.n	80017ee <xEventGroupWaitBits+0x102>
					if( xClearOnExit != pdFALSE )
 80017e6:	b117      	cbz	r7, 80017ee <xEventGroupWaitBits+0x102>
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80017e8:	ea29 0404 	bic.w	r4, r9, r4
 80017ec:	602c      	str	r4, [r5, #0]
			taskEXIT_CRITICAL();
 80017ee:	f002 faeb 	bl	8003dc8 <vPortExitCritical>
 80017f2:	e7d5      	b.n	80017a0 <xEventGroupWaitBits+0xb4>
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80017f4:	ea34 0309 	bics.w	r3, r4, r9
 80017f8:	d1f9      	bne.n	80017ee <xEventGroupWaitBits+0x102>
 80017fa:	e7f4      	b.n	80017e6 <xEventGroupWaitBits+0xfa>

080017fc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80017fc:	4684      	mov	ip, r0
 80017fe:	4613      	mov	r3, r2
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <xEventGroupSetBitsFromISR+0x10>)
 8001802:	460a      	mov	r2, r1
 8001804:	4661      	mov	r1, ip
 8001806:	f002 ba41 	b.w	8003c8c <xTimerPendFunctionCallFromISR>
 800180a:	bf00      	nop
 800180c:	0800163d 	.word	0x0800163d

08001810 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001810:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001818:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800181a:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800181e:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001822:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop

08001828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001828:	2300      	movs	r3, #0
 800182a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001830:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001836:	6802      	ldr	r2, [r0, #0]
{
 8001838:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800183a:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800183c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800183e:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001840:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001842:	6099      	str	r1, [r3, #8]
}
 8001844:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8001848:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800184a:	6002      	str	r2, [r0, #0]
}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001850:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001852:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001854:	1c6b      	adds	r3, r5, #1
 8001856:	d010      	beq.n	800187a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001858:	f100 0308 	add.w	r3, r0, #8
 800185c:	461c      	mov	r4, r3
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	42aa      	cmp	r2, r5
 8001864:	d9fa      	bls.n	800185c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001866:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8001868:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800186a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800186c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800186e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001870:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8001872:	6108      	str	r0, [r1, #16]
}
 8001874:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8001876:	6002      	str	r2, [r0, #0]
}
 8001878:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800187a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	e7f2      	b.n	8001866 <vListInsert+0x16>

08001880 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001880:	6903      	ldr	r3, [r0, #16]
{
 8001882:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001884:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001888:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800188a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800188c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800188e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001890:	bf08      	it	eq
 8001892:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8001894:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001896:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800189a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800189c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800189e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80018a0:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80018a2:	6818      	ldr	r0, [r3, #0]
}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop

080018a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80018ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80018b0:	b920      	cbnz	r0, 80018bc <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80018b2:	6825      	ldr	r5, [r4, #0]
 80018b4:	b34d      	cbz	r5, 800190a <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018b6:	3601      	adds	r6, #1
 80018b8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80018bc:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018be:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80018c0:	b97d      	cbnz	r5, 80018e2 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80018c2:	6860      	ldr	r0, [r4, #4]
 80018c4:	f009 f95c 	bl	800ab80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018c8:	6863      	ldr	r3, [r4, #4]
 80018ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018cc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018ce:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80018d0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018d2:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80018d4:	bf24      	itt	cs
 80018d6:	6823      	ldrcs	r3, [r4, #0]
 80018d8:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018da:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80018dc:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80018de:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80018e0:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80018e2:	68e0      	ldr	r0, [r4, #12]
 80018e4:	f009 f94c 	bl	800ab80 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80018e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80018ea:	68e3      	ldr	r3, [r4, #12]
 80018ec:	4251      	negs	r1, r2
 80018ee:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018f0:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80018f2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d202      	bcs.n	80018fe <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80018f8:	68a3      	ldr	r3, [r4, #8]
 80018fa:	440b      	add	r3, r1
 80018fc:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80018fe:	2d02      	cmp	r5, #2
 8001900:	d008      	beq.n	8001914 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001902:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001904:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001906:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001908:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800190a:	68a0      	ldr	r0, [r4, #8]
 800190c:	f001 ff1e 	bl	800374c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001910:	60a5      	str	r5, [r4, #8]
 8001912:	e7d0      	b.n	80018b6 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001914:	2e01      	cmp	r6, #1
 8001916:	bf38      	it	cc
 8001918:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 800191a:	2000      	movs	r0, #0
 800191c:	e7cc      	b.n	80018b8 <prvCopyDataToQueue+0x10>
 800191e:	bf00      	nop

08001920 <xQueueGenericCreateStatic>:
	{
 8001920:	b530      	push	{r4, r5, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001928:	b940      	cbnz	r0, 800193c <xQueueGenericCreateStatic+0x1c>
 800192a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800192e:	f383 8811 	msr	BASEPRI, r3
 8001932:	f3bf 8f6f 	isb	sy
 8001936:	f3bf 8f4f 	dsb	sy
 800193a:	e7fe      	b.n	800193a <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800193c:	461d      	mov	r5, r3
 800193e:	b17b      	cbz	r3, 8001960 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001940:	b302      	cbz	r2, 8001984 <xQueueGenericCreateStatic+0x64>
 8001942:	b1b1      	cbz	r1, 8001972 <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001944:	2350      	movs	r3, #80	; 0x50
 8001946:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001948:	9b01      	ldr	r3, [sp, #4]
 800194a:	2b50      	cmp	r3, #80	; 0x50
 800194c:	d027      	beq.n	800199e <xQueueGenericCreateStatic+0x7e>
 800194e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001952:	f383 8811 	msr	BASEPRI, r3
 8001956:	f3bf 8f6f 	isb	sy
 800195a:	f3bf 8f4f 	dsb	sy
 800195e:	e7fe      	b.n	800195e <xQueueGenericCreateStatic+0x3e>
 8001960:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001964:	f383 8811 	msr	BASEPRI, r3
 8001968:	f3bf 8f6f 	isb	sy
 800196c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8001970:	e7fe      	b.n	8001970 <xQueueGenericCreateStatic+0x50>
 8001972:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001976:	f383 8811 	msr	BASEPRI, r3
 800197a:	f3bf 8f6f 	isb	sy
 800197e:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001982:	e7fe      	b.n	8001982 <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001984:	2900      	cmp	r1, #0
 8001986:	d135      	bne.n	80019f4 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001988:	2250      	movs	r2, #80	; 0x50
 800198a:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800198c:	9a01      	ldr	r2, [sp, #4]
 800198e:	2a50      	cmp	r2, #80	; 0x50
 8001990:	d1dd      	bne.n	800194e <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001992:	2201      	movs	r2, #1
 8001994:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001998:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800199a:	462a      	mov	r2, r5
 800199c:	e004      	b.n	80019a8 <xQueueGenericCreateStatic+0x88>
 800199e:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80019a2:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80019a4:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80019a8:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 80019ac:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 80019ae:	f002 f9e9 	bl	8003d84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019b2:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 80019b6:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019b8:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019ba:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019be:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019c0:	4401      	add	r1, r0
 80019c2:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019c4:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019c6:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80019c8:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80019ca:	21ff      	movs	r1, #255	; 0xff
 80019cc:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80019d0:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80019d2:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80019d6:	f105 0010 	add.w	r0, r5, #16
 80019da:	f7ff ff19 	bl	8001810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80019de:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80019e2:	f7ff ff15 	bl	8001810 <vListInitialise>
	taskEXIT_CRITICAL();
 80019e6:	f002 f9ef 	bl	8003dc8 <vPortExitCritical>
	}
 80019ea:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 80019ec:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 80019f0:	b003      	add	sp, #12
 80019f2:	bd30      	pop	{r4, r5, pc}
 80019f4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80019f8:	f383 8811 	msr	BASEPRI, r3
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a04:	e7fe      	b.n	8001a04 <xQueueGenericCreateStatic+0xe4>
 8001a06:	bf00      	nop

08001a08 <xQueueGenericCreate>:
	{
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a0a:	b940      	cbnz	r0, 8001a1e <xQueueGenericCreate+0x16>
 8001a0c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a10:	f383 8811 	msr	BASEPRI, r3
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	f3bf 8f4f 	dsb	sy
 8001a1c:	e7fe      	b.n	8001a1c <xQueueGenericCreate+0x14>
 8001a1e:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a20:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001a24:	3050      	adds	r0, #80	; 0x50
 8001a26:	460e      	mov	r6, r1
 8001a28:	4617      	mov	r7, r2
 8001a2a:	f002 fb0b 	bl	8004044 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001a2e:	4604      	mov	r4, r0
 8001a30:	b340      	cbz	r0, 8001a84 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001a38:	b336      	cbz	r6, 8001a88 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a3a:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001a3e:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001a40:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001a44:	f002 f99e 	bl	8003d84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a48:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001a4c:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001a4e:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a50:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a54:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a56:	440a      	add	r2, r1
 8001a58:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a5a:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a5c:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a5e:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001a60:	22ff      	movs	r2, #255	; 0xff
 8001a62:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a66:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001a68:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a6c:	f104 0010 	add.w	r0, r4, #16
 8001a70:	f7ff fece 	bl	8001810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a74:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001a78:	f7ff feca 	bl	8001810 <vListInitialise>
	taskEXIT_CRITICAL();
 8001a7c:	f002 f9a4 	bl	8003dc8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001a80:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8001a84:	4620      	mov	r0, r4
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a88:	4603      	mov	r3, r0
 8001a8a:	e7d8      	b.n	8001a3e <xQueueGenericCreate+0x36>

08001a8c <xQueueGenericSend>:
{
 8001a8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a90:	b085      	sub	sp, #20
 8001a92:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8001a94:	2800      	cmp	r0, #0
 8001a96:	f000 80a4 	beq.w	8001be2 <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001a9a:	4688      	mov	r8, r1
 8001a9c:	461f      	mov	r7, r3
 8001a9e:	4604      	mov	r4, r0
 8001aa0:	2900      	cmp	r1, #0
 8001aa2:	f000 8091 	beq.w	8001bc8 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001aa6:	2f02      	cmp	r7, #2
 8001aa8:	d10b      	bne.n	8001ac2 <xQueueGenericSend+0x36>
 8001aaa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d008      	beq.n	8001ac2 <xQueueGenericSend+0x36>
 8001ab0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	e7fe      	b.n	8001ac0 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001ac2:	f001 fded 	bl	80036a0 <xTaskGetSchedulerState>
 8001ac6:	4605      	mov	r5, r0
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	f000 8093 	beq.w	8001bf4 <xQueueGenericSend+0x168>
 8001ace:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ad0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8001ad4:	f002 f956 	bl	8003d84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001ad8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001ada:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f0c0 80ef 	bcc.w	8001cc0 <xQueueGenericSend+0x234>
 8001ae2:	2f02      	cmp	r7, #2
 8001ae4:	f000 80ec 	beq.w	8001cc0 <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ae8:	9801      	ldr	r0, [sp, #4]
 8001aea:	2800      	cmp	r0, #0
 8001aec:	f000 8101 	beq.w	8001cf2 <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 8001af0:	2d00      	cmp	r5, #0
 8001af2:	f000 80e1 	beq.w	8001cb8 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8001af6:	f002 f967 	bl	8003dc8 <vPortExitCritical>
		vTaskSuspendAll();
 8001afa:	f001 fbaf 	bl	800325c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001afe:	f002 f941 	bl	8003d84 <vPortEnterCritical>
 8001b02:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b06:	2bff      	cmp	r3, #255	; 0xff
 8001b08:	bf04      	itt	eq
 8001b0a:	2300      	moveq	r3, #0
 8001b0c:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8001b10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b14:	2bff      	cmp	r3, #255	; 0xff
 8001b16:	bf04      	itt	eq
 8001b18:	2300      	moveq	r3, #0
 8001b1a:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8001b1e:	f002 f953 	bl	8003dc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001b22:	a901      	add	r1, sp, #4
 8001b24:	a802      	add	r0, sp, #8
 8001b26:	f001 fd61 	bl	80035ec <xTaskCheckForTimeOut>
 8001b2a:	2800      	cmp	r0, #0
 8001b2c:	f040 80e6 	bne.w	8001cfc <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001b30:	f002 f928 	bl	8003d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001b34:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001b36:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d068      	beq.n	8001c0e <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001b3c:	f002 f944 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001b40:	f002 f920 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001b44:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001b48:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b4a:	2d00      	cmp	r5, #0
 8001b4c:	dc04      	bgt.n	8001b58 <xQueueGenericSend+0xcc>
 8001b4e:	e011      	b.n	8001b74 <xQueueGenericSend+0xe8>
			--cTxLock;
 8001b50:	1e6a      	subs	r2, r5, #1
 8001b52:	b2d3      	uxtb	r3, r2
 8001b54:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b56:	b16b      	cbz	r3, 8001b74 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b5c:	b153      	cbz	r3, 8001b74 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b5e:	f001 fcad 	bl	80034bc <xTaskRemoveFromEventList>
 8001b62:	2800      	cmp	r0, #0
 8001b64:	d0f4      	beq.n	8001b50 <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8001b66:	f001 fd95 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 8001b6a:	1e6a      	subs	r2, r5, #1
 8001b6c:	b2d3      	uxtb	r3, r2
 8001b6e:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f1      	bne.n	8001b58 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 8001b74:	23ff      	movs	r3, #255	; 0xff
 8001b76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001b7a:	f002 f925 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001b7e:	f002 f901 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001b82:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8001b86:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	dd14      	ble.n	8001bb6 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b8c:	f104 0910 	add.w	r9, r4, #16
 8001b90:	e003      	b.n	8001b9a <xQueueGenericSend+0x10e>
				--cRxLock;
 8001b92:	1e6a      	subs	r2, r5, #1
 8001b94:	b2d3      	uxtb	r3, r2
 8001b96:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b98:	b16b      	cbz	r3, 8001bb6 <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b9a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b9c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b9e:	b153      	cbz	r3, 8001bb6 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ba0:	f001 fc8c 	bl	80034bc <xTaskRemoveFromEventList>
 8001ba4:	2800      	cmp	r0, #0
 8001ba6:	d0f4      	beq.n	8001b92 <xQueueGenericSend+0x106>
					vTaskMissedYield();
 8001ba8:	f001 fd74 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 8001bac:	1e6a      	subs	r2, r5, #1
 8001bae:	b2d3      	uxtb	r3, r2
 8001bb0:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f1      	bne.n	8001b9a <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 8001bb6:	23ff      	movs	r3, #255	; 0xff
 8001bb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001bbc:	f002 f904 	bl	8003dc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001bc0:	f001 fb54 	bl	800326c <xTaskResumeAll>
 8001bc4:	2501      	movs	r5, #1
 8001bc6:	e785      	b.n	8001ad4 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bc8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f43f af6b 	beq.w	8001aa6 <xQueueGenericSend+0x1a>
 8001bd0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001bd4:	f383 8811 	msr	BASEPRI, r3
 8001bd8:	f3bf 8f6f 	isb	sy
 8001bdc:	f3bf 8f4f 	dsb	sy
 8001be0:	e7fe      	b.n	8001be0 <xQueueGenericSend+0x154>
 8001be2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001be6:	f383 8811 	msr	BASEPRI, r3
 8001bea:	f3bf 8f6f 	isb	sy
 8001bee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001bf2:	e7fe      	b.n	8001bf2 <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001bf4:	9b01      	ldr	r3, [sp, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f43f af6a 	beq.w	8001ad0 <xQueueGenericSend+0x44>
 8001bfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c00:	f383 8811 	msr	BASEPRI, r3
 8001c04:	f3bf 8f6f 	isb	sy
 8001c08:	f3bf 8f4f 	dsb	sy
 8001c0c:	e7fe      	b.n	8001c0c <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c0e:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8001c12:	f002 f8d9 	bl	8003dc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001c16:	9901      	ldr	r1, [sp, #4]
 8001c18:	4648      	mov	r0, r9
 8001c1a:	f001 fb5b 	bl	80032d4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001c1e:	f002 f8b1 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001c22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001c26:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c28:	2d00      	cmp	r5, #0
 8001c2a:	dc04      	bgt.n	8001c36 <xQueueGenericSend+0x1aa>
 8001c2c:	e011      	b.n	8001c52 <xQueueGenericSend+0x1c6>
			--cTxLock;
 8001c2e:	1e6b      	subs	r3, r5, #1
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c34:	b16a      	cbz	r2, 8001c52 <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c38:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001c3a:	b153      	cbz	r3, 8001c52 <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001c3c:	f001 fc3e 	bl	80034bc <xTaskRemoveFromEventList>
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d0f4      	beq.n	8001c2e <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8001c44:	f001 fd26 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 8001c48:	1e6b      	subs	r3, r5, #1
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001c4e:	2a00      	cmp	r2, #0
 8001c50:	d1f1      	bne.n	8001c36 <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8001c52:	23ff      	movs	r3, #255	; 0xff
 8001c54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001c58:	f002 f8b6 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001c5c:	f002 f892 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001c60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001c64:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	dc04      	bgt.n	8001c74 <xQueueGenericSend+0x1e8>
 8001c6a:	e011      	b.n	8001c90 <xQueueGenericSend+0x204>
				--cRxLock;
 8001c6c:	1e6b      	subs	r3, r5, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c72:	b16a      	cbz	r2, 8001c90 <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c74:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c76:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001c78:	b153      	cbz	r3, 8001c90 <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001c7a:	f001 fc1f 	bl	80034bc <xTaskRemoveFromEventList>
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d0f4      	beq.n	8001c6c <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8001c82:	f001 fd07 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 8001c86:	1e6b      	subs	r3, r5, #1
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d1f1      	bne.n	8001c74 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8001c90:	23ff      	movs	r3, #255	; 0xff
 8001c92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001c96:	f002 f897 	bl	8003dc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8001c9a:	f001 fae7 	bl	800326c <xTaskResumeAll>
 8001c9e:	2800      	cmp	r0, #0
 8001ca0:	d190      	bne.n	8001bc4 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8001ca2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001caa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001cae:	f3bf 8f4f 	dsb	sy
 8001cb2:	f3bf 8f6f 	isb	sy
 8001cb6:	e785      	b.n	8001bc4 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001cb8:	a802      	add	r0, sp, #8
 8001cba:	f001 fc8b 	bl	80035d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001cbe:	e71a      	b.n	8001af6 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001cc0:	463a      	mov	r2, r7
 8001cc2:	4641      	mov	r1, r8
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fdef 	bl	80018a8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d153      	bne.n	8001d78 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8001cd0:	b148      	cbz	r0, 8001ce6 <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8001cd2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cda:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001ce6:	f002 f86f 	bl	8003dc8 <vPortExitCritical>
				return pdPASS;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	b005      	add	sp, #20
 8001cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cf2:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8001cf4:	f002 f868 	bl	8003dc8 <vPortExitCritical>
					return errQUEUE_FULL;
 8001cf8:	9800      	ldr	r0, [sp, #0]
 8001cfa:	e7f7      	b.n	8001cec <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8001cfc:	f002 f842 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001d00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001d04:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d06:	2d00      	cmp	r5, #0
 8001d08:	dd10      	ble.n	8001d2c <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d0a:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001d0e:	e003      	b.n	8001d18 <xQueueGenericSend+0x28c>
			--cTxLock;
 8001d10:	1e6b      	subs	r3, r5, #1
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001d16:	b14a      	cbz	r2, 8001d2c <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d1a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d1c:	b133      	cbz	r3, 8001d2c <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d1e:	f001 fbcd 	bl	80034bc <xTaskRemoveFromEventList>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d0f4      	beq.n	8001d10 <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8001d26:	f001 fcb5 	bl	8003694 <vTaskMissedYield>
 8001d2a:	e7f1      	b.n	8001d10 <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8001d2c:	23ff      	movs	r3, #255	; 0xff
 8001d2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001d32:	f002 f849 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001d36:	f002 f825 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001d3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001d3e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d40:	2d00      	cmp	r5, #0
 8001d42:	dd10      	ble.n	8001d66 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d44:	f104 0610 	add.w	r6, r4, #16
 8001d48:	e003      	b.n	8001d52 <xQueueGenericSend+0x2c6>
				--cRxLock;
 8001d4a:	1e6b      	subs	r3, r5, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001d50:	b14a      	cbz	r2, 8001d66 <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d52:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d54:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d56:	b133      	cbz	r3, 8001d66 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d58:	f001 fbb0 	bl	80034bc <xTaskRemoveFromEventList>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d0f4      	beq.n	8001d4a <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8001d60:	f001 fc98 	bl	8003694 <vTaskMissedYield>
 8001d64:	e7f1      	b.n	8001d4a <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8001d66:	23ff      	movs	r3, #255	; 0xff
 8001d68:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001d6c:	f002 f82c 	bl	8003dc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001d70:	f001 fa7c 	bl	800326c <xTaskResumeAll>
			return errQUEUE_FULL;
 8001d74:	2000      	movs	r0, #0
 8001d76:	e7b9      	b.n	8001cec <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d7c:	f001 fb9e 	bl	80034bc <xTaskRemoveFromEventList>
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d0b0      	beq.n	8001ce6 <xQueueGenericSend+0x25a>
 8001d84:	e7a5      	b.n	8001cd2 <xQueueGenericSend+0x246>
 8001d86:	bf00      	nop

08001d88 <xQueueCreateMutex>:
	{
 8001d88:	b570      	push	{r4, r5, r6, lr}
 8001d8a:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001d8c:	2050      	movs	r0, #80	; 0x50
 8001d8e:	f002 f959 	bl	8004044 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001d92:	4604      	mov	r4, r0
 8001d94:	b370      	cbz	r0, 8001df4 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d96:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8001d98:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001d9a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001d9e:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001da0:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001da4:	f001 ffee 	bl	8003d84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001da8:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001dac:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dae:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db0:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001db8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dba:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001dbc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dbe:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dc0:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dc2:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8001dc6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001dca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001dce:	f7ff fd1f 	bl	8001810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001dd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001dd6:	f7ff fd1b 	bl	8001810 <vListInitialise>
	taskEXIT_CRITICAL();
 8001dda:	f001 fff5 	bl	8003dc8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001dde:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001de2:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001de4:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001de6:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001de8:	462b      	mov	r3, r5
 8001dea:	462a      	mov	r2, r5
 8001dec:	4629      	mov	r1, r5
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff fe4c 	bl	8001a8c <xQueueGenericSend>
	}
 8001df4:	4620      	mov	r0, r4
 8001df6:	bd70      	pop	{r4, r5, r6, pc}

08001df8 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	d04b      	beq.n	8001e94 <xQueueGenericSendFromISR+0x9c>
{
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	460e      	mov	r6, r1
 8001e02:	4617      	mov	r7, r2
 8001e04:	461d      	mov	r5, r3
 8001e06:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e08:	b321      	cbz	r1, 8001e54 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001e0a:	2d02      	cmp	r5, #2
 8001e0c:	d10b      	bne.n	8001e26 <xQueueGenericSendFromISR+0x2e>
 8001e0e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d008      	beq.n	8001e26 <xQueueGenericSendFromISR+0x2e>
 8001e14:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e18:	f383 8811 	msr	BASEPRI, r3
 8001e1c:	f3bf 8f6f 	isb	sy
 8001e20:	f3bf 8f4f 	dsb	sy
 8001e24:	e7fe      	b.n	8001e24 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001e26:	f002 f8df 	bl	8003fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001e2a:	f3ef 8811 	mrs	r8, BASEPRI
 8001e2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e32:	f383 8811 	msr	BASEPRI, r3
 8001e36:	f3bf 8f6f 	isb	sy
 8001e3a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001e3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001e40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d312      	bcc.n	8001e6c <xQueueGenericSendFromISR+0x74>
 8001e46:	2d02      	cmp	r5, #2
 8001e48:	d010      	beq.n	8001e6c <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8001e4a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001e4c:	f388 8811 	msr	BASEPRI, r8
}
 8001e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001e54:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0d7      	beq.n	8001e0a <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8001e5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e5e:	f383 8811 	msr	BASEPRI, r3
 8001e62:	f3bf 8f6f 	isb	sy
 8001e66:	f3bf 8f4f 	dsb	sy
 8001e6a:	e7fe      	b.n	8001e6a <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e6c:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e74:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8001e76:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7ff fd15 	bl	80018a8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001e7e:	1c6b      	adds	r3, r5, #1
 8001e80:	d011      	beq.n	8001ea6 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001e82:	1c6b      	adds	r3, r5, #1
 8001e84:	b25b      	sxtb	r3, r3
 8001e86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8001e8a:	2001      	movs	r0, #1
	__asm volatile
 8001e8c:	f388 8811 	msr	BASEPRI, r8
}
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8001e94:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	f3bf 8f6f 	isb	sy
 8001ea0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001ea4:	e7fe      	b.n	8001ea4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001eb0:	f001 fb04 	bl	80034bc <xTaskRemoveFromEventList>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d0e8      	beq.n	8001e8a <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8001eb8:	2f00      	cmp	r7, #0
 8001eba:	d0e6      	beq.n	8001e8a <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	6038      	str	r0, [r7, #0]
 8001ec0:	e7c4      	b.n	8001e4c <xQueueGenericSendFromISR+0x54>
 8001ec2:	bf00      	nop

08001ec4 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8001ec4:	b370      	cbz	r0, 8001f24 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001ec6:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8001ec8:	b570      	push	{r4, r5, r6, lr}
 8001eca:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001ecc:	b143      	cbz	r3, 8001ee0 <xQueueGiveFromISR+0x1c>
 8001ece:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001ed2:	f383 8811 	msr	BASEPRI, r3
 8001ed6:	f3bf 8f6f 	isb	sy
 8001eda:	f3bf 8f4f 	dsb	sy
 8001ede:	e7fe      	b.n	8001ede <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001ee0:	6803      	ldr	r3, [r0, #0]
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	b33b      	cbz	r3, 8001f36 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001ee6:	f002 f87f 	bl	8003fe8 <vPortValidateInterruptPriority>
	__asm volatile
 8001eea:	f3ef 8511 	mrs	r5, BASEPRI
 8001eee:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001efe:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001f00:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d923      	bls.n	8001f4e <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f06:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f0a:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8001f0c:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001f0e:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f10:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8001f12:	d020      	beq.n	8001f56 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001f14:	3301      	adds	r3, #1
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8001f1c:	2001      	movs	r0, #1
	__asm volatile
 8001f1e:	f385 8811 	msr	BASEPRI, r5
}
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8001f24:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001f34:	e7fe      	b.n	8001f34 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001f36:	6883      	ldr	r3, [r0, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0d4      	beq.n	8001ee6 <xQueueGiveFromISR+0x22>
 8001f3c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f40:	f383 8811 	msr	BASEPRI, r3
 8001f44:	f3bf 8f6f 	isb	sy
 8001f48:	f3bf 8f4f 	dsb	sy
 8001f4c:	e7fe      	b.n	8001f4c <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8001f4e:	2000      	movs	r0, #0
	__asm volatile
 8001f50:	f385 8811 	msr	BASEPRI, r5
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f56:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0df      	beq.n	8001f1c <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f5c:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001f60:	f001 faac 	bl	80034bc <xTaskRemoveFromEventList>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d0d9      	beq.n	8001f1c <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d0d7      	beq.n	8001f1c <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	6020      	str	r0, [r4, #0]
 8001f70:	e7ee      	b.n	8001f50 <xQueueGiveFromISR+0x8c>
 8001f72:	bf00      	nop

08001f74 <xQueueReceive>:
{
 8001f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f78:	b085      	sub	sp, #20
 8001f7a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	f000 815f 	beq.w	8002240 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f82:	460f      	mov	r7, r1
 8001f84:	4604      	mov	r4, r0
 8001f86:	2900      	cmp	r1, #0
 8001f88:	f000 8094 	beq.w	80020b4 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f8c:	f001 fb88 	bl	80036a0 <xTaskGetSchedulerState>
 8001f90:	2800      	cmp	r0, #0
 8001f92:	f000 809c 	beq.w	80020ce <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001f96:	f001 fef5 	bl	8003d84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f9a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001f9c:	2d00      	cmp	r5, #0
 8001f9e:	d172      	bne.n	8002086 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fa0:	9b01      	ldr	r3, [sp, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 80f1 	beq.w	800218a <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001fa8:	a802      	add	r0, sp, #8
 8001faa:	f001 fb13 	bl	80035d4 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8001fae:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fb0:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8001fb4:	f001 ff08 	bl	8003dc8 <vPortExitCritical>
		vTaskSuspendAll();
 8001fb8:	f001 f950 	bl	800325c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001fbc:	f001 fee2 	bl	8003d84 <vPortEnterCritical>
 8001fc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001fc4:	2bff      	cmp	r3, #255	; 0xff
 8001fc6:	bf08      	it	eq
 8001fc8:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001fcc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001fd0:	2bff      	cmp	r3, #255	; 0xff
 8001fd2:	bf08      	it	eq
 8001fd4:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001fd8:	f001 fef6 	bl	8003dc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001fdc:	a901      	add	r1, sp, #4
 8001fde:	a802      	add	r0, sp, #8
 8001fe0:	f001 fb04 	bl	80035ec <xTaskCheckForTimeOut>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	d17f      	bne.n	80020e8 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8001fe8:	f001 fecc 	bl	8003d84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001fec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80d1 	beq.w	8002196 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8001ff4:	f001 fee8 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001ff8:	f001 fec4 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001ffc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002000:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002002:	2d00      	cmp	r5, #0
 8002004:	dc04      	bgt.n	8002010 <xQueueReceive+0x9c>
 8002006:	e011      	b.n	800202c <xQueueReceive+0xb8>
			--cTxLock;
 8002008:	1e6b      	subs	r3, r5, #1
 800200a:	b2da      	uxtb	r2, r3
 800200c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800200e:	b16a      	cbz	r2, 800202c <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002010:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002012:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002014:	b153      	cbz	r3, 800202c <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002016:	f001 fa51 	bl	80034bc <xTaskRemoveFromEventList>
 800201a:	2800      	cmp	r0, #0
 800201c:	d0f4      	beq.n	8002008 <xQueueReceive+0x94>
						vTaskMissedYield();
 800201e:	f001 fb39 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 8002022:	1e6b      	subs	r3, r5, #1
 8002024:	b2da      	uxtb	r2, r3
 8002026:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002028:	2a00      	cmp	r2, #0
 800202a:	d1f1      	bne.n	8002010 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 800202c:	23ff      	movs	r3, #255	; 0xff
 800202e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002032:	f001 fec9 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002036:	f001 fea5 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800203a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800203e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002040:	2d00      	cmp	r5, #0
 8002042:	dd14      	ble.n	800206e <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002044:	f104 0910 	add.w	r9, r4, #16
 8002048:	e003      	b.n	8002052 <xQueueReceive+0xde>
				--cRxLock;
 800204a:	1e6b      	subs	r3, r5, #1
 800204c:	b2da      	uxtb	r2, r3
 800204e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002050:	b16a      	cbz	r2, 800206e <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002052:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002054:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002056:	b153      	cbz	r3, 800206e <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002058:	f001 fa30 	bl	80034bc <xTaskRemoveFromEventList>
 800205c:	2800      	cmp	r0, #0
 800205e:	d0f4      	beq.n	800204a <xQueueReceive+0xd6>
					vTaskMissedYield();
 8002060:	f001 fb18 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 8002064:	1e6b      	subs	r3, r5, #1
 8002066:	b2da      	uxtb	r2, r3
 8002068:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800206a:	2a00      	cmp	r2, #0
 800206c:	d1f1      	bne.n	8002052 <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 800206e:	23ff      	movs	r3, #255	; 0xff
 8002070:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002074:	f001 fea8 	bl	8003dc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002078:	f001 f8f8 	bl	800326c <xTaskResumeAll>
		taskENTER_CRITICAL();
 800207c:	f001 fe82 	bl	8003d84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002080:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002082:	2d00      	cmp	r5, #0
 8002084:	d07d      	beq.n	8002182 <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002086:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002088:	b152      	cbz	r2, 80020a0 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800208a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800208c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800208e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002090:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002092:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002094:	bf24      	itt	cs
 8002096:	6821      	ldrcs	r1, [r4, #0]
 8002098:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800209a:	4638      	mov	r0, r7
 800209c:	f008 fd70 	bl	800ab80 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80020a0:	3d01      	subs	r5, #1
 80020a2:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020a4:	6923      	ldr	r3, [r4, #16]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 80d3 	bne.w	8002252 <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 80020ac:	f001 fe8c 	bl	8003dc8 <vPortExitCritical>
				return pdPASS;
 80020b0:	2001      	movs	r0, #1
 80020b2:	e06d      	b.n	8002190 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f43f af68 	beq.w	8001f8c <xQueueReceive+0x18>
	__asm volatile
 80020bc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020c0:	f383 8811 	msr	BASEPRI, r3
 80020c4:	f3bf 8f6f 	isb	sy
 80020c8:	f3bf 8f4f 	dsb	sy
 80020cc:	e7fe      	b.n	80020cc <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f43f af60 	beq.w	8001f96 <xQueueReceive+0x22>
 80020d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020da:	f383 8811 	msr	BASEPRI, r3
 80020de:	f3bf 8f6f 	isb	sy
 80020e2:	f3bf 8f4f 	dsb	sy
 80020e6:	e7fe      	b.n	80020e6 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 80020e8:	f001 fe4c 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80020ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80020f0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020f2:	2d00      	cmp	r5, #0
 80020f4:	dc04      	bgt.n	8002100 <xQueueReceive+0x18c>
 80020f6:	e011      	b.n	800211c <xQueueReceive+0x1a8>
			--cTxLock;
 80020f8:	1e6b      	subs	r3, r5, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80020fe:	b16a      	cbz	r2, 800211c <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002100:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002102:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002104:	b153      	cbz	r3, 800211c <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002106:	f001 f9d9 	bl	80034bc <xTaskRemoveFromEventList>
 800210a:	2800      	cmp	r0, #0
 800210c:	d0f4      	beq.n	80020f8 <xQueueReceive+0x184>
						vTaskMissedYield();
 800210e:	f001 fac1 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 8002112:	1e6b      	subs	r3, r5, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002118:	2a00      	cmp	r2, #0
 800211a:	d1f1      	bne.n	8002100 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 800211c:	23ff      	movs	r3, #255	; 0xff
 800211e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002122:	f001 fe51 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002126:	f001 fe2d 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800212a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800212e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002130:	2d00      	cmp	r5, #0
 8002132:	dd14      	ble.n	800215e <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002134:	f104 0910 	add.w	r9, r4, #16
 8002138:	e003      	b.n	8002142 <xQueueReceive+0x1ce>
				--cRxLock;
 800213a:	1e6b      	subs	r3, r5, #1
 800213c:	b2da      	uxtb	r2, r3
 800213e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002140:	b16a      	cbz	r2, 800215e <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002142:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002144:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002146:	b153      	cbz	r3, 800215e <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002148:	f001 f9b8 	bl	80034bc <xTaskRemoveFromEventList>
 800214c:	2800      	cmp	r0, #0
 800214e:	d0f4      	beq.n	800213a <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8002150:	f001 faa0 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 8002154:	1e6b      	subs	r3, r5, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800215a:	2a00      	cmp	r2, #0
 800215c:	d1f1      	bne.n	8002142 <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002164:	f001 fe30 	bl	8003dc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002168:	f001 f880 	bl	800326c <xTaskResumeAll>
	taskENTER_CRITICAL();
 800216c:	f001 fe0a 	bl	8003d84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002172:	b153      	cbz	r3, 800218a <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8002174:	f001 fe28 	bl	8003dc8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8002178:	f001 fe04 	bl	8003d84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800217c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800217e:	2d00      	cmp	r5, #0
 8002180:	d181      	bne.n	8002086 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002182:	9b01      	ldr	r3, [sp, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af15 	bne.w	8001fb4 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 800218a:	f001 fe1d 	bl	8003dc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800218e:	2000      	movs	r0, #0
}
 8002190:	b005      	add	sp, #20
 8002192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8002196:	f001 fe17 	bl	8003dc8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800219a:	9901      	ldr	r1, [sp, #4]
 800219c:	4630      	mov	r0, r6
 800219e:	f001 f899 	bl	80032d4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 80021a2:	f001 fdef 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80021a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80021aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	dc04      	bgt.n	80021ba <xQueueReceive+0x246>
 80021b0:	e011      	b.n	80021d6 <xQueueReceive+0x262>
			--cTxLock;
 80021b2:	1e6b      	subs	r3, r5, #1
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021b8:	b16a      	cbz	r2, 80021d6 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021bc:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021be:	b153      	cbz	r3, 80021d6 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021c0:	f001 f97c 	bl	80034bc <xTaskRemoveFromEventList>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d0f4      	beq.n	80021b2 <xQueueReceive+0x23e>
						vTaskMissedYield();
 80021c8:	f001 fa64 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 80021cc:	1e6b      	subs	r3, r5, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d1f1      	bne.n	80021ba <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 80021d6:	23ff      	movs	r3, #255	; 0xff
 80021d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80021dc:	f001 fdf4 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80021e0:	f001 fdd0 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80021e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80021e8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	dd14      	ble.n	8002218 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021ee:	f104 0910 	add.w	r9, r4, #16
 80021f2:	e003      	b.n	80021fc <xQueueReceive+0x288>
				--cRxLock;
 80021f4:	1e6b      	subs	r3, r5, #1
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021fa:	b16a      	cbz	r2, 8002218 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021fc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021fe:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002200:	b153      	cbz	r3, 8002218 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002202:	f001 f95b 	bl	80034bc <xTaskRemoveFromEventList>
 8002206:	2800      	cmp	r0, #0
 8002208:	d0f4      	beq.n	80021f4 <xQueueReceive+0x280>
					vTaskMissedYield();
 800220a:	f001 fa43 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 800220e:	1e6b      	subs	r3, r5, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002214:	2a00      	cmp	r2, #0
 8002216:	d1f1      	bne.n	80021fc <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002218:	23ff      	movs	r3, #255	; 0xff
 800221a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800221e:	f001 fdd3 	bl	8003dc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002222:	f001 f823 	bl	800326c <xTaskResumeAll>
 8002226:	2800      	cmp	r0, #0
 8002228:	d1a6      	bne.n	8002178 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 800222a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002236:	f3bf 8f4f 	dsb	sy
 800223a:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800223e:	e79b      	b.n	8002178 <xQueueReceive+0x204>
 8002240:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002244:	f383 8811 	msr	BASEPRI, r3
 8002248:	f3bf 8f6f 	isb	sy
 800224c:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8002250:	e7fe      	b.n	8002250 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002252:	f104 0010 	add.w	r0, r4, #16
 8002256:	f001 f931 	bl	80034bc <xTaskRemoveFromEventList>
 800225a:	2800      	cmp	r0, #0
 800225c:	f43f af26 	beq.w	80020ac <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 8002260:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002268:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	e71a      	b.n	80020ac <xQueueReceive+0x138>
 8002276:	bf00      	nop

08002278 <xQueueSemaphoreTake>:
{
 8002278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800227c:	b084      	sub	sp, #16
 800227e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002280:	2800      	cmp	r0, #0
 8002282:	d05c      	beq.n	800233e <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002284:	6c07      	ldr	r7, [r0, #64]	; 0x40
 8002286:	4604      	mov	r4, r0
 8002288:	b147      	cbz	r7, 800229c <xQueueSemaphoreTake+0x24>
 800228a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	e7fe      	b.n	800229a <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800229c:	f001 fa00 	bl	80036a0 <xTaskGetSchedulerState>
 80022a0:	4605      	mov	r5, r0
 80022a2:	2800      	cmp	r0, #0
 80022a4:	d054      	beq.n	8002350 <xQueueSemaphoreTake+0xd8>
 80022a6:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022a8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80022ac:	f001 fd6a 	bl	8003d84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80022b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f040 8148 	bne.w	8002548 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022b8:	9b01      	ldr	r3, [sp, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 813a 	beq.w	8002534 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 80022c0:	2d00      	cmp	r5, #0
 80022c2:	f000 809d 	beq.w	8002400 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 80022c6:	f001 fd7f 	bl	8003dc8 <vPortExitCritical>
		vTaskSuspendAll();
 80022ca:	f000 ffc7 	bl	800325c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022ce:	f001 fd59 	bl	8003d84 <vPortEnterCritical>
 80022d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022d6:	2bff      	cmp	r3, #255	; 0xff
 80022d8:	bf04      	itt	eq
 80022da:	2300      	moveq	r3, #0
 80022dc:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80022e0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80022e4:	2bff      	cmp	r3, #255	; 0xff
 80022e6:	bf04      	itt	eq
 80022e8:	2300      	moveq	r3, #0
 80022ea:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80022ee:	f001 fd6b 	bl	8003dc8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022f2:	a901      	add	r1, sp, #4
 80022f4:	a802      	add	r0, sp, #8
 80022f6:	f001 f979 	bl	80035ec <xTaskCheckForTimeOut>
 80022fa:	2800      	cmp	r0, #0
 80022fc:	d135      	bne.n	800236a <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 80022fe:	f001 fd41 	bl	8003d84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a4 	beq.w	8002452 <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 800230a:	f001 fd5d 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800230e:	f001 fd39 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002312:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002316:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002318:	2d00      	cmp	r5, #0
 800231a:	dc05      	bgt.n	8002328 <xQueueSemaphoreTake+0xb0>
 800231c:	e074      	b.n	8002408 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800231e:	1e6b      	subs	r3, r5, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002324:	2a00      	cmp	r2, #0
 8002326:	d06f      	beq.n	8002408 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002328:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800232a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800232c:	2b00      	cmp	r3, #0
 800232e:	d06b      	beq.n	8002408 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002330:	f001 f8c4 	bl	80034bc <xTaskRemoveFromEventList>
 8002334:	2800      	cmp	r0, #0
 8002336:	d0f2      	beq.n	800231e <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8002338:	f001 f9ac 	bl	8003694 <vTaskMissedYield>
 800233c:	e7ef      	b.n	800231e <xQueueSemaphoreTake+0xa6>
 800233e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002342:	f383 8811 	msr	BASEPRI, r3
 8002346:	f3bf 8f6f 	isb	sy
 800234a:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800234e:	e7fe      	b.n	800234e <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002350:	9b01      	ldr	r3, [sp, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80d4 	beq.w	8002500 <xQueueSemaphoreTake+0x288>
 8002358:	f04f 0340 	mov.w	r3, #64	; 0x40
 800235c:	f383 8811 	msr	BASEPRI, r3
 8002360:	f3bf 8f6f 	isb	sy
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	e7fe      	b.n	8002368 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 800236a:	f001 fd0b 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800236e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002372:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002374:	2d00      	cmp	r5, #0
 8002376:	dc04      	bgt.n	8002382 <xQueueSemaphoreTake+0x10a>
 8002378:	e011      	b.n	800239e <xQueueSemaphoreTake+0x126>
			--cTxLock;
 800237a:	1e6b      	subs	r3, r5, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002380:	b16a      	cbz	r2, 800239e <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002382:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002384:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002386:	b153      	cbz	r3, 800239e <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002388:	f001 f898 	bl	80034bc <xTaskRemoveFromEventList>
 800238c:	2800      	cmp	r0, #0
 800238e:	d0f4      	beq.n	800237a <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 8002390:	f001 f980 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 8002394:	1e6b      	subs	r3, r5, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800239a:	2a00      	cmp	r2, #0
 800239c:	d1f1      	bne.n	8002382 <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 800239e:	23ff      	movs	r3, #255	; 0xff
 80023a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80023a4:	f001 fd10 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80023a8:	f001 fcec 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80023ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80023b0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	dd14      	ble.n	80023e0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023b6:	f104 0810 	add.w	r8, r4, #16
 80023ba:	e003      	b.n	80023c4 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 80023bc:	1e6b      	subs	r3, r5, #1
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023c2:	b16a      	cbz	r2, 80023e0 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023c6:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023c8:	b153      	cbz	r3, 80023e0 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023ca:	f001 f877 	bl	80034bc <xTaskRemoveFromEventList>
 80023ce:	2800      	cmp	r0, #0
 80023d0:	d0f4      	beq.n	80023bc <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 80023d2:	f001 f95f 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 80023d6:	1e6b      	subs	r3, r5, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d1f1      	bne.n	80023c4 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 80023e0:	23ff      	movs	r3, #255	; 0xff
 80023e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80023e6:	f001 fcef 	bl	8003dc8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 80023ea:	f000 ff3f 	bl	800326c <xTaskResumeAll>
	taskENTER_CRITICAL();
 80023ee:	f001 fcc9 	bl	8003d84 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80023f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d07c      	beq.n	80024f2 <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 80023f8:	f001 fce6 	bl	8003dc8 <vPortExitCritical>
	return xReturn;
 80023fc:	2501      	movs	r5, #1
 80023fe:	e755      	b.n	80022ac <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002400:	a802      	add	r0, sp, #8
 8002402:	f001 f8e7 	bl	80035d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002406:	e75e      	b.n	80022c6 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002408:	23ff      	movs	r3, #255	; 0xff
 800240a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800240e:	f001 fcdb 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002412:	f001 fcb7 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002416:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800241a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800241c:	2d00      	cmp	r5, #0
 800241e:	dd10      	ble.n	8002442 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002420:	f104 0810 	add.w	r8, r4, #16
 8002424:	e003      	b.n	800242e <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002426:	1e6b      	subs	r3, r5, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800242c:	b14a      	cbz	r2, 8002442 <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800242e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002430:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002432:	b133      	cbz	r3, 8002442 <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002434:	f001 f842 	bl	80034bc <xTaskRemoveFromEventList>
 8002438:	2800      	cmp	r0, #0
 800243a:	d0f4      	beq.n	8002426 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 800243c:	f001 f92a 	bl	8003694 <vTaskMissedYield>
 8002440:	e7f1      	b.n	8002426 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 8002442:	23ff      	movs	r3, #255	; 0xff
 8002444:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002448:	f001 fcbe 	bl	8003dc8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800244c:	f000 ff0e 	bl	800326c <xTaskResumeAll>
 8002450:	e7d4      	b.n	80023fc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 8002452:	f001 fcb9 	bl	8003dc8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d062      	beq.n	8002522 <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800245c:	9901      	ldr	r1, [sp, #4]
 800245e:	4630      	mov	r0, r6
 8002460:	f000 ff38 	bl	80032d4 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002464:	f001 fc8e 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002468:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800246c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800246e:	2d00      	cmp	r5, #0
 8002470:	dc04      	bgt.n	800247c <xQueueSemaphoreTake+0x204>
 8002472:	e00d      	b.n	8002490 <xQueueSemaphoreTake+0x218>
			--cTxLock;
 8002474:	1e6b      	subs	r3, r5, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800247a:	b14a      	cbz	r2, 8002490 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800247c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800247e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002480:	b133      	cbz	r3, 8002490 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002482:	f001 f81b 	bl	80034bc <xTaskRemoveFromEventList>
 8002486:	2800      	cmp	r0, #0
 8002488:	d0f4      	beq.n	8002474 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 800248a:	f001 f903 	bl	8003694 <vTaskMissedYield>
 800248e:	e7f1      	b.n	8002474 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 8002490:	23ff      	movs	r3, #255	; 0xff
 8002492:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002496:	f001 fc97 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800249a:	f001 fc73 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800249e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80024a2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024a4:	2d00      	cmp	r5, #0
 80024a6:	dd10      	ble.n	80024ca <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a8:	f104 0810 	add.w	r8, r4, #16
 80024ac:	e003      	b.n	80024b6 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 80024ae:	1e6b      	subs	r3, r5, #1
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80024b4:	b14a      	cbz	r2, 80024ca <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b8:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024ba:	b133      	cbz	r3, 80024ca <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024bc:	f000 fffe 	bl	80034bc <xTaskRemoveFromEventList>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d0f4      	beq.n	80024ae <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 80024c4:	f001 f8e6 	bl	8003694 <vTaskMissedYield>
 80024c8:	e7f1      	b.n	80024ae <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 80024ca:	23ff      	movs	r3, #255	; 0xff
 80024cc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80024d0:	f001 fc7a 	bl	8003dc8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 80024d4:	f000 feca 	bl	800326c <xTaskResumeAll>
 80024d8:	2800      	cmp	r0, #0
 80024da:	d18f      	bne.n	80023fc <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 80024dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80024e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	e784      	b.n	80023fc <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 80024f2:	f001 fc69 	bl	8003dc8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 80024f6:	b92f      	cbnz	r7, 8002504 <xQueueSemaphoreTake+0x28c>
}
 80024f8:	4638      	mov	r0, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002500:	4607      	mov	r7, r0
 8002502:	e6d1      	b.n	80022a8 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002504:	f001 fc3e 	bl	8003d84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002508:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800250a:	b119      	cbz	r1, 8002514 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800250c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002514:	68a0      	ldr	r0, [r4, #8]
 8002516:	f001 f95f 	bl	80037d8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800251a:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 800251c:	f001 fc54 	bl	8003dc8 <vPortExitCritical>
 8002520:	e7ea      	b.n	80024f8 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 8002522:	f001 fc2f 	bl	8003d84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002526:	68a0      	ldr	r0, [r4, #8]
 8002528:	f001 f8ca 	bl	80036c0 <xTaskPriorityInherit>
 800252c:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800252e:	f001 fc4b 	bl	8003dc8 <vPortExitCritical>
 8002532:	e793      	b.n	800245c <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002534:	b197      	cbz	r7, 800255c <xQueueSemaphoreTake+0x2e4>
 8002536:	f04f 0340 	mov.w	r3, #64	; 0x40
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	e7fe      	b.n	8002546 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002548:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800254a:	3b01      	subs	r3, #1
 800254c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800254e:	b1ca      	cbz	r2, 8002584 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002550:	6923      	ldr	r3, [r4, #16]
 8002552:	b933      	cbnz	r3, 8002562 <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 8002554:	f001 fc38 	bl	8003dc8 <vPortExitCritical>
				return pdPASS;
 8002558:	2701      	movs	r7, #1
 800255a:	e7cd      	b.n	80024f8 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 800255c:	f001 fc34 	bl	8003dc8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002560:	e7ca      	b.n	80024f8 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002562:	f104 0010 	add.w	r0, r4, #16
 8002566:	f000 ffa9 	bl	80034bc <xTaskRemoveFromEventList>
 800256a:	2800      	cmp	r0, #0
 800256c:	d0f2      	beq.n	8002554 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 800256e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002576:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800257a:	f3bf 8f4f 	dsb	sy
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	e7e7      	b.n	8002554 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002584:	f001 f988 	bl	8003898 <pvTaskIncrementMutexHeldCount>
 8002588:	60a0      	str	r0, [r4, #8]
 800258a:	e7e1      	b.n	8002550 <xQueueSemaphoreTake+0x2d8>

0800258c <xQueueReceiveFromISR>:
{
 800258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8002590:	b310      	cbz	r0, 80025d8 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002592:	460e      	mov	r6, r1
 8002594:	4617      	mov	r7, r2
 8002596:	4604      	mov	r4, r0
 8002598:	b191      	cbz	r1, 80025c0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800259a:	f001 fd25 	bl	8003fe8 <vPortValidateInterruptPriority>
	__asm volatile
 800259e:	f3ef 8911 	mrs	r9, BASEPRI
 80025a2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025a6:	f383 8811 	msr	BASEPRI, r3
 80025aa:	f3bf 8f6f 	isb	sy
 80025ae:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025b4:	b9cd      	cbnz	r5, 80025ea <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80025b6:	4628      	mov	r0, r5
	__asm volatile
 80025b8:	f389 8811 	msr	BASEPRI, r9
}
 80025bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0e9      	beq.n	800259a <xQueueReceiveFromISR+0xe>
	__asm volatile
 80025c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025ca:	f383 8811 	msr	BASEPRI, r3
 80025ce:	f3bf 8f6f 	isb	sy
 80025d2:	f3bf 8f4f 	dsb	sy
 80025d6:	e7fe      	b.n	80025d6 <xQueueReceiveFromISR+0x4a>
 80025d8:	f04f 0340 	mov.w	r3, #64	; 0x40
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80025e8:	e7fe      	b.n	80025e8 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80025ea:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 80025f0:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025f4:	b152      	cbz	r2, 800260c <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025f6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025f8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025fa:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025fc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025fe:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002600:	bf24      	itt	cs
 8002602:	6821      	ldrcs	r1, [r4, #0]
 8002604:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002606:	4630      	mov	r0, r6
 8002608:	f008 faba 	bl	800ab80 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800260c:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800260e:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002612:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002614:	d009      	beq.n	800262a <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002616:	f108 0301 	add.w	r3, r8, #1
 800261a:	b25b      	sxtb	r3, r3
 800261c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8002620:	2001      	movs	r0, #1
	__asm volatile
 8002622:	f389 8811 	msr	BASEPRI, r9
}
 8002626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800262a:	6923      	ldr	r3, [r4, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f7      	beq.n	8002620 <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002630:	f104 0010 	add.w	r0, r4, #16
 8002634:	f000 ff42 	bl	80034bc <xTaskRemoveFromEventList>
 8002638:	2800      	cmp	r0, #0
 800263a:	d0f1      	beq.n	8002620 <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 800263c:	2f00      	cmp	r7, #0
 800263e:	d0ef      	beq.n	8002620 <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002640:	2001      	movs	r0, #1
 8002642:	6038      	str	r0, [r7, #0]
 8002644:	e7b8      	b.n	80025b8 <xQueueReceiveFromISR+0x2c>
 8002646:	bf00      	nop

08002648 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 8002648:	b158      	cbz	r0, 8002662 <uxQueueMessagesWaiting+0x1a>
{
 800264a:	b510      	push	{r4, lr}
 800264c:	4604      	mov	r4, r0
 800264e:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
 8002650:	f001 fb98 	bl	8003d84 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002654:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002656:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002658:	f001 fbb6 	bl	8003dc8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800265c:	9801      	ldr	r0, [sp, #4]
 800265e:	b002      	add	sp, #8
 8002660:	bd10      	pop	{r4, pc}
	__asm volatile
 8002662:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 8002672:	e7fe      	b.n	8002672 <uxQueueMessagesWaiting+0x2a>

08002674 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002674:	4b12      	ldr	r3, [pc, #72]	; (80026c0 <vQueueAddToRegistry+0x4c>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	b17a      	cbz	r2, 800269a <vQueueAddToRegistry+0x26>
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	b162      	cbz	r2, 8002698 <vQueueAddToRegistry+0x24>
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	b192      	cbz	r2, 80026a8 <vQueueAddToRegistry+0x34>
 8002682:	699a      	ldr	r2, [r3, #24]
 8002684:	b192      	cbz	r2, 80026ac <vQueueAddToRegistry+0x38>
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	b192      	cbz	r2, 80026b0 <vQueueAddToRegistry+0x3c>
 800268a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800268c:	b192      	cbz	r2, 80026b4 <vQueueAddToRegistry+0x40>
 800268e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002690:	b192      	cbz	r2, 80026b8 <vQueueAddToRegistry+0x44>
 8002692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002694:	b192      	cbz	r2, 80026bc <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002696:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002698:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 800269a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800269e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80026a2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 80026a6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80026a8:	2202      	movs	r2, #2
 80026aa:	e7f6      	b.n	800269a <vQueueAddToRegistry+0x26>
 80026ac:	2203      	movs	r2, #3
 80026ae:	e7f4      	b.n	800269a <vQueueAddToRegistry+0x26>
 80026b0:	2204      	movs	r2, #4
 80026b2:	e7f2      	b.n	800269a <vQueueAddToRegistry+0x26>
 80026b4:	2205      	movs	r2, #5
 80026b6:	e7f0      	b.n	800269a <vQueueAddToRegistry+0x26>
 80026b8:	2206      	movs	r2, #6
 80026ba:	e7ee      	b.n	800269a <vQueueAddToRegistry+0x26>
 80026bc:	2207      	movs	r2, #7
 80026be:	e7ec      	b.n	800269a <vQueueAddToRegistry+0x26>
 80026c0:	20000ba0 	.word	0x20000ba0

080026c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80026c4:	b570      	push	{r4, r5, r6, lr}
 80026c6:	4605      	mov	r5, r0
 80026c8:	460e      	mov	r6, r1
 80026ca:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80026cc:	f001 fb5a 	bl	8003d84 <vPortEnterCritical>
 80026d0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80026d4:	2bff      	cmp	r3, #255	; 0xff
 80026d6:	bf04      	itt	eq
 80026d8:	2300      	moveq	r3, #0
 80026da:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 80026de:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	bf04      	itt	eq
 80026e6:	2300      	moveq	r3, #0
 80026e8:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 80026ec:	f001 fb6c 	bl	8003dc8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d043      	beq.n	800277e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 80026f6:	f001 fb45 	bl	8003d84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80026fa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80026fe:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002700:	2c00      	cmp	r4, #0
 8002702:	dd14      	ble.n	800272e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002704:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002708:	e003      	b.n	8002712 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 800270a:	1e63      	subs	r3, r4, #1
 800270c:	b2da      	uxtb	r2, r3
 800270e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002710:	b16a      	cbz	r2, 800272e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002714:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002716:	b153      	cbz	r3, 800272e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002718:	f000 fed0 	bl	80034bc <xTaskRemoveFromEventList>
 800271c:	2800      	cmp	r0, #0
 800271e:	d0f4      	beq.n	800270a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8002720:	f000 ffb8 	bl	8003694 <vTaskMissedYield>
			--cTxLock;
 8002724:	1e63      	subs	r3, r4, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800272a:	2a00      	cmp	r2, #0
 800272c:	d1f1      	bne.n	8002712 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800272e:	23ff      	movs	r3, #255	; 0xff
 8002730:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002734:	f001 fb48 	bl	8003dc8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002738:	f001 fb24 	bl	8003d84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800273c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002740:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002742:	2c00      	cmp	r4, #0
 8002744:	dd14      	ble.n	8002770 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002746:	f105 0610 	add.w	r6, r5, #16
 800274a:	e003      	b.n	8002754 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 800274c:	1e63      	subs	r3, r4, #1
 800274e:	b2da      	uxtb	r2, r3
 8002750:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002752:	b16a      	cbz	r2, 8002770 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002754:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002756:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002758:	b153      	cbz	r3, 8002770 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800275a:	f000 feaf 	bl	80034bc <xTaskRemoveFromEventList>
 800275e:	2800      	cmp	r0, #0
 8002760:	d0f4      	beq.n	800274c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8002762:	f000 ff97 	bl	8003694 <vTaskMissedYield>
				--cRxLock;
 8002766:	1e63      	subs	r3, r4, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800276c:	2a00      	cmp	r2, #0
 800276e:	d1f1      	bne.n	8002754 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8002770:	23ff      	movs	r3, #255	; 0xff
 8002772:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8002776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800277a:	f001 bb25 	b.w	8003dc8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800277e:	4622      	mov	r2, r4
 8002780:	4631      	mov	r1, r6
 8002782:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002786:	f000 fe49 	bl	800341c <vTaskPlaceOnEventListRestricted>
 800278a:	e7b4      	b.n	80026f6 <vQueueWaitForMessageRestricted+0x32>

0800278c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800278c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002790:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002792:	f001 faf7 	bl	8003d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002796:	4a34      	ldr	r2, [pc, #208]	; (8002868 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002798:	4e34      	ldr	r6, [pc, #208]	; (800286c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800279a:	6813      	ldr	r3, [r2, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80027a0:	6833      	ldr	r3, [r6, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d032      	beq.n	800280c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80027a6:	4c32      	ldr	r4, [pc, #200]	; (8002870 <prvAddNewTaskToReadyList+0xe4>)
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	b33b      	cbz	r3, 80027fc <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80027ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80027ae:	4f31      	ldr	r7, [pc, #196]	; (8002874 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80027b2:	4932      	ldr	r1, [pc, #200]	; (800287c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80027b4:	6813      	ldr	r3, [r2, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80027ba:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 80027bc:	680b      	ldr	r3, [r1, #0]
 80027be:	4283      	cmp	r3, r0
 80027c0:	bf38      	it	cc
 80027c2:	6008      	strcc	r0, [r1, #0]
 80027c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80027c8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80027cc:	1d29      	adds	r1, r5, #4
 80027ce:	f7ff f82f 	bl	8001830 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80027d2:	f001 faf9 	bl	8003dc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	b173      	cbz	r3, 80027f8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80027da:	6832      	ldr	r2, [r6, #0]
 80027dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80027de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d209      	bcs.n	80027f8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80027e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80027e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80027fc:	6833      	ldr	r3, [r6, #0]
 80027fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	4f1c      	ldr	r7, [pc, #112]	; (8002874 <prvAddNewTaskToReadyList+0xe8>)
 8002804:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002806:	bf98      	it	ls
 8002808:	6035      	strls	r5, [r6, #0]
 800280a:	e7d1      	b.n	80027b0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800280c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800280e:	6813      	ldr	r3, [r2, #0]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d003      	beq.n	800281c <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002814:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002816:	4f17      	ldr	r7, [pc, #92]	; (8002874 <prvAddNewTaskToReadyList+0xe8>)
 8002818:	4c15      	ldr	r4, [pc, #84]	; (8002870 <prvAddNewTaskToReadyList+0xe4>)
 800281a:	e7c9      	b.n	80027b0 <prvAddNewTaskToReadyList+0x24>
 800281c:	4f15      	ldr	r7, [pc, #84]	; (8002874 <prvAddNewTaskToReadyList+0xe8>)
 800281e:	463c      	mov	r4, r7
 8002820:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002824:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002826:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002828:	f7fe fff2 	bl	8001810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800282c:	45a0      	cmp	r8, r4
 800282e:	d1f9      	bne.n	8002824 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002830:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002894 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8002834:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002898 <prvAddNewTaskToReadyList+0x10c>
 8002838:	4c0d      	ldr	r4, [pc, #52]	; (8002870 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800283a:	4648      	mov	r0, r9
 800283c:	f7fe ffe8 	bl	8001810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002840:	4640      	mov	r0, r8
 8002842:	f7fe ffe5 	bl	8001810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002846:	480e      	ldr	r0, [pc, #56]	; (8002880 <prvAddNewTaskToReadyList+0xf4>)
 8002848:	f7fe ffe2 	bl	8001810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800284c:	480d      	ldr	r0, [pc, #52]	; (8002884 <prvAddNewTaskToReadyList+0xf8>)
 800284e:	f7fe ffdf 	bl	8001810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <prvAddNewTaskToReadyList+0xfc>)
 8002854:	f7fe ffdc 	bl	8001810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800285a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800285c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <prvAddNewTaskToReadyList+0x104>)
 8002862:	f8c3 8000 	str.w	r8, [r3]
}
 8002866:	e7a3      	b.n	80027b0 <prvAddNewTaskToReadyList+0x24>
 8002868:	2000104c 	.word	0x2000104c
 800286c:	20000be0 	.word	0x20000be0
 8002870:	200010a8 	.word	0x200010a8
 8002874:	20000bec 	.word	0x20000bec
 8002878:	20001058 	.word	0x20001058
 800287c:	2000105c 	.word	0x2000105c
 8002880:	20001094 	.word	0x20001094
 8002884:	200010c0 	.word	0x200010c0
 8002888:	200010ac 	.word	0x200010ac
 800288c:	20000be4 	.word	0x20000be4
 8002890:	20000be8 	.word	0x20000be8
 8002894:	20001060 	.word	0x20001060
 8002898:	20001074 	.word	0x20001074

0800289c <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 800289c:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 800289e:	4b23      	ldr	r3, [pc, #140]	; (800292c <vTaskSwitchContext.part.0+0x90>)
		taskCHECK_FOR_STACK_OVERFLOW();
 80028a0:	4c23      	ldr	r4, [pc, #140]	; (8002930 <vTaskSwitchContext.part.0+0x94>)
		xYieldPending = pdFALSE;
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80028a6:	6823      	ldr	r3, [r4, #0]
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80028b0:	d103      	bne.n	80028ba <vTaskSwitchContext.part.0+0x1e>
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80028b8:	d02f      	beq.n	800291a <vTaskSwitchContext.part.0+0x7e>
 80028ba:	6820      	ldr	r0, [r4, #0]
 80028bc:	6821      	ldr	r1, [r4, #0]
 80028be:	3134      	adds	r1, #52	; 0x34
 80028c0:	f007 f876 	bl	80099b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c4:	4d1b      	ldr	r5, [pc, #108]	; (8002934 <vTaskSwitchContext.part.0+0x98>)
 80028c6:	491c      	ldr	r1, [pc, #112]	; (8002938 <vTaskSwitchContext.part.0+0x9c>)
 80028c8:	682b      	ldr	r3, [r5, #0]
 80028ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	0098      	lsls	r0, r3, #2
 80028d2:	588a      	ldr	r2, [r1, r2]
 80028d4:	b942      	cbnz	r2, 80028e8 <vTaskSwitchContext.part.0+0x4c>
 80028d6:	b1bb      	cbz	r3, 8002908 <vTaskSwitchContext.part.0+0x6c>
 80028d8:	3b01      	subs	r3, #1
 80028da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80028de:	0098      	lsls	r0, r3, #2
 80028e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d0f6      	beq.n	80028d6 <vTaskSwitchContext.part.0+0x3a>
 80028e8:	18c2      	adds	r2, r0, r3
 80028ea:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80028ee:	4602      	mov	r2, r0
 80028f0:	6841      	ldr	r1, [r0, #4]
 80028f2:	6849      	ldr	r1, [r1, #4]
 80028f4:	6041      	str	r1, [r0, #4]
 80028f6:	3208      	adds	r2, #8
 80028f8:	4291      	cmp	r1, r2
 80028fa:	bf04      	itt	eq
 80028fc:	6849      	ldreq	r1, [r1, #4]
 80028fe:	6041      	streq	r1, [r0, #4]
 8002900:	68ca      	ldr	r2, [r1, #12]
 8002902:	6022      	str	r2, [r4, #0]
 8002904:	602b      	str	r3, [r5, #0]
}
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	f04f 0340 	mov.w	r3, #64	; 0x40
 800290c:	f383 8811 	msr	BASEPRI, r3
 8002910:	f3bf 8f6f 	isb	sy
 8002914:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002918:	e7fe      	b.n	8002918 <vTaskSwitchContext.part.0+0x7c>
		taskCHECK_FOR_STACK_OVERFLOW();
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002920:	d1cb      	bne.n	80028ba <vTaskSwitchContext.part.0+0x1e>
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002928:	d1c7      	bne.n	80028ba <vTaskSwitchContext.part.0+0x1e>
 800292a:	e7cb      	b.n	80028c4 <vTaskSwitchContext.part.0+0x28>
 800292c:	200010d8 	.word	0x200010d8
 8002930:	20000be0 	.word	0x20000be0
 8002934:	2000105c 	.word	0x2000105c
 8002938:	20000bec 	.word	0x20000bec

0800293c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800293c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002940:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002942:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002946:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800294a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800294c:	4606      	mov	r6, r0
 800294e:	460c      	mov	r4, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002950:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002952:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002954:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002956:	f008 f93b 	bl	800abd0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800295a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800295c:	f1a9 0904 	sub.w	r9, r9, #4
 8002960:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002962:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8002966:	2c00      	cmp	r4, #0
 8002968:	d03a      	beq.n	80029e0 <prvInitialiseNewTask.constprop.0+0xa4>
 800296a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800296e:	f104 011f 	add.w	r1, r4, #31
 8002972:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 8002976:	e001      	b.n	800297c <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002978:	458c      	cmp	ip, r1
 800297a:	d005      	beq.n	8002988 <prvInitialiseNewTask.constprop.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800297c:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8002980:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002984:	2c00      	cmp	r4, #0
 8002986:	d1f7      	bne.n	8002978 <prvInitialiseNewTask.constprop.0+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002988:	2300      	movs	r3, #0
 800298a:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800298e:	9c08      	ldr	r4, [sp, #32]
 8002990:	2c37      	cmp	r4, #55	; 0x37
 8002992:	bf28      	it	cs
 8002994:	2437      	movcs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8002996:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800299a:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800299c:	65ec      	str	r4, [r5, #92]	; 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800299e:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 80029a0:	f8c5 a060 	str.w	sl, [r5, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80029a4:	f7fe ff40 	bl	8001828 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a8:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80029ac:	f105 0018 	add.w	r0, r5, #24
 80029b0:	f7fe ff3a 	bl	8001828 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80029b4:	f8c5 a064 	str.w	sl, [r5, #100]	; 0x64
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b8:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80029ba:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029bc:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80029be:	f885 a068 	strb.w	sl, [r5, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 80029c2:	f885 a06a 	strb.w	sl, [r5, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029c6:	463a      	mov	r2, r7
 80029c8:	4631      	mov	r1, r6
 80029ca:	4648      	mov	r0, r9
 80029cc:	f001 f9b0 	bl	8003d30 <pxPortInitialiseStack>
 80029d0:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 80029d2:	f1b8 0f00 	cmp.w	r8, #0
 80029d6:	d001      	beq.n	80029dc <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029d8:	f8c8 5000 	str.w	r5, [r8]
}
 80029dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80029e0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80029e4:	e7d3      	b.n	800298e <prvInitialiseNewTask.constprop.0+0x52>
 80029e6:	bf00      	nop

080029e8 <prvIdleTask>:
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	4c22      	ldr	r4, [pc, #136]	; (8002a74 <prvIdleTask+0x8c>)
 80029ec:	4e22      	ldr	r6, [pc, #136]	; (8002a78 <prvIdleTask+0x90>)
 80029ee:	4d23      	ldr	r5, [pc, #140]	; (8002a7c <prvIdleTask+0x94>)
 80029f0:	4f23      	ldr	r7, [pc, #140]	; (8002a80 <prvIdleTask+0x98>)
				taskYIELD();
 80029f2:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80029f6:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	b353      	cbz	r3, 8002a54 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 80029fe:	f001 f9c1 	bl	8003d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a02:	68f3      	ldr	r3, [r6, #12]
 8002a04:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a08:	f10a 0004 	add.w	r0, sl, #4
 8002a0c:	f7fe ff38 	bl	8001880 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 8002a1c:	f001 f9d4 	bl	8003dc8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002a20:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
 8002a24:	b163      	cbz	r3, 8002a40 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d020      	beq.n	8002a6c <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d0e5      	beq.n	80029fa <prvIdleTask+0x12>
 8002a2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002a32:	f383 8811 	msr	BASEPRI, r3
 8002a36:	f3bf 8f6f 	isb	sy
 8002a3a:	f3bf 8f4f 	dsb	sy
 8002a3e:	e7fe      	b.n	8002a3e <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8002a40:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8002a44:	f001 fbb8 	bl	80041b8 <vPortFree>
				vPortFree( pxTCB );
 8002a48:	4650      	mov	r0, sl
 8002a4a:	f001 fbb5 	bl	80041b8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1d4      	bne.n	80029fe <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d905      	bls.n	8002a66 <prvIdleTask+0x7e>
				taskYIELD();
 8002a5a:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8002a5e:	f3bf 8f4f 	dsb	sy
 8002a62:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8002a66:	f006 ff9b 	bl	80099a0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002a6a:	e7c6      	b.n	80029fa <prvIdleTask+0x12>
				vPortFree( pxTCB );
 8002a6c:	4650      	mov	r0, sl
 8002a6e:	f001 fba3 	bl	80041b8 <vPortFree>
 8002a72:	e7c2      	b.n	80029fa <prvIdleTask+0x12>
 8002a74:	20001050 	.word	0x20001050
 8002a78:	200010c0 	.word	0x200010c0
 8002a7c:	2000104c 	.word	0x2000104c
 8002a80:	20000bec 	.word	0x20000bec

08002a84 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a88:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <xTaskIncrementTick.part.0+0x124>)
 8002a8a:	681e      	ldr	r6, [r3, #0]
 8002a8c:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8002a8e:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8002a90:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	d040      	beq.n	8002b18 <xTaskIncrementTick.part.0+0x94>
 8002a96:	f8df b124 	ldr.w	fp, [pc, #292]	; 8002bbc <xTaskIncrementTick.part.0+0x138>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a9a:	f8db 3000 	ldr.w	r3, [fp]
 8002a9e:	429e      	cmp	r6, r3
 8002aa0:	d347      	bcc.n	8002b32 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002aa2:	4f42      	ldr	r7, [pc, #264]	; (8002bac <xTaskIncrementTick.part.0+0x128>)
 8002aa4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8002bc0 <xTaskIncrementTick.part.0+0x13c>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f8df a118 	ldr.w	sl, [pc, #280]	; 8002bc4 <xTaskIncrementTick.part.0+0x140>
 8002aae:	681d      	ldr	r5, [r3, #0]
 8002ab0:	2d00      	cmp	r5, #0
 8002ab2:	d073      	beq.n	8002b9c <xTaskIncrementTick.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 8002ab4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8002bc8 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 8002ab8:	2500      	movs	r5, #0
 8002aba:	e022      	b.n	8002b02 <xTaskIncrementTick.part.0+0x7e>
 8002abc:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002abe:	f7fe fedf 	bl	8001880 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002ac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ac4:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ac6:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aca:	b113      	cbz	r3, 8002ad2 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002acc:	f7fe fed8 	bl	8001880 <uxListRemove>
 8002ad0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8002ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ad4:	f8d8 2000 	ldr.w	r2, [r8]
 8002ad8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002adc:	4293      	cmp	r3, r2
 8002ade:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002ae2:	bf88      	it	hi
 8002ae4:	f8c8 3000 	strhi.w	r3, [r8]
 8002ae8:	f7fe fea2 	bl	8001830 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002aec:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002af0:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002af2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002af4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002af6:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 8002af8:	4291      	cmp	r1, r2
 8002afa:	bf28      	it	cs
 8002afc:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d04c      	beq.n	8002b9c <xTaskIncrementTick.part.0+0x118>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b08:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b0a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 8002b0c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b0e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8002b10:	d2d4      	bcs.n	8002abc <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8002b12:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b16:	e011      	b.n	8002b3c <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8002b18:	4b24      	ldr	r3, [pc, #144]	; (8002bac <xTaskIncrementTick.part.0+0x128>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	b30a      	cbz	r2, 8002b64 <xTaskIncrementTick.part.0+0xe0>
 8002b20:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	e7fe      	b.n	8002b30 <xTaskIncrementTick.part.0+0xac>
 8002b32:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8002bc0 <xTaskIncrementTick.part.0+0x13c>
 8002b36:	f8df a08c 	ldr.w	sl, [pc, #140]	; 8002bc4 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 8002b3a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b3c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8002b40:	491b      	ldr	r1, [pc, #108]	; (8002bb0 <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8002b4e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8002b50:	2a02      	cmp	r2, #2
 8002b52:	bf28      	it	cs
 8002b54:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8002b56:	2b00      	cmp	r3, #0
}
 8002b58:	bf0c      	ite	eq
 8002b5a:	4628      	moveq	r0, r5
 8002b5c:	2001      	movne	r0, #1
 8002b5e:	b003      	add	sp, #12
 8002b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002b64:	4a13      	ldr	r2, [pc, #76]	; (8002bb4 <xTaskIncrementTick.part.0+0x130>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	6811      	ldr	r1, [r2, #0]
 8002b6a:	6019      	str	r1, [r3, #0]
 8002b6c:	4912      	ldr	r1, [pc, #72]	; (8002bb8 <xTaskIncrementTick.part.0+0x134>)
 8002b6e:	6010      	str	r0, [r2, #0]
 8002b70:	680a      	ldr	r2, [r1, #0]
 8002b72:	3201      	adds	r2, #1
 8002b74:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	b932      	cbnz	r2, 8002b8a <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b7c:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8002bbc <xTaskIncrementTick.part.0+0x138>
 8002b80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b84:	f8cb 3000 	str.w	r3, [fp]
 8002b88:	e787      	b.n	8002a9a <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b8a:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b8c:	f8df b02c 	ldr.w	fp, [pc, #44]	; 8002bbc <xTaskIncrementTick.part.0+0x138>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b90:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f8cb 3000 	str.w	r3, [fp]
	}
}
 8002b9a:	e77e      	b.n	8002a9a <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba0:	f8cb 3000 	str.w	r3, [fp]
					break;
 8002ba4:	e7ca      	b.n	8002b3c <xTaskIncrementTick.part.0+0xb8>
 8002ba6:	bf00      	nop
 8002ba8:	200010d4 	.word	0x200010d4
 8002bac:	20000be4 	.word	0x20000be4
 8002bb0:	200010d8 	.word	0x200010d8
 8002bb4:	20000be8 	.word	0x20000be8
 8002bb8:	2000108c 	.word	0x2000108c
 8002bbc:	20001088 	.word	0x20001088
 8002bc0:	20000bec 	.word	0x20000bec
 8002bc4:	20000be0 	.word	0x20000be0
 8002bc8:	2000105c 	.word	0x2000105c

08002bcc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 8002bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 8002bd0:	4d41      	ldr	r5, [pc, #260]	; (8002cd8 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 8002bd2:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8002bd4:	f001 f8d6 	bl	8003d84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d161      	bne.n	8002ca8 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002be4:	4b3d      	ldr	r3, [pc, #244]	; (8002cdc <xTaskResumeAll.part.0+0x110>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05d      	beq.n	8002ca8 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bec:	4e3c      	ldr	r6, [pc, #240]	; (8002ce0 <xTaskResumeAll.part.0+0x114>)
 8002bee:	6833      	ldr	r3, [r6, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d06e      	beq.n	8002cd2 <xTaskResumeAll.part.0+0x106>
 8002bf4:	4f3b      	ldr	r7, [pc, #236]	; (8002ce4 <xTaskResumeAll.part.0+0x118>)
 8002bf6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002cf4 <xTaskResumeAll.part.0+0x128>
 8002bfa:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002cf8 <xTaskResumeAll.part.0+0x12c>
 8002bfe:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002cfc <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c02:	68f3      	ldr	r3, [r6, #12]
 8002c04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c06:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c0a:	f104 0018 	add.w	r0, r4, #24
 8002c0e:	f7fe fe37 	bl	8001880 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c12:	4658      	mov	r0, fp
 8002c14:	f7fe fe34 	bl	8001880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002c20:	4293      	cmp	r3, r2
 8002c22:	4659      	mov	r1, fp
 8002c24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002c28:	bf88      	it	hi
 8002c2a:	603b      	strhi	r3, [r7, #0]
 8002c2c:	f7fe fe00 	bl	8001830 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c30:	f8d8 3000 	ldr.w	r3, [r8]
 8002c34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d33d      	bcc.n	8002cb8 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c42:	6833      	ldr	r3, [r6, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1dc      	bne.n	8002c02 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <xTaskResumeAll.part.0+0x11c>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	d03a      	beq.n	8002cc8 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c52:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c56:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c58:	68d2      	ldr	r2, [r2, #12]
 8002c5a:	6852      	ldr	r2, [r2, #4]
 8002c5c:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c5e:	4e24      	ldr	r6, [pc, #144]	; (8002cf0 <xTaskResumeAll.part.0+0x124>)
 8002c60:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002c62:	b194      	cbz	r4, 8002c8a <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8002c64:	2701      	movs	r7, #1
 8002c66:	e006      	b.n	8002c76 <xTaskResumeAll.part.0+0xaa>
 8002c68:	f7ff ff0c 	bl	8002a84 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8002c6c:	b108      	cbz	r0, 8002c72 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8002c6e:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c72:	3c01      	subs	r4, #1
 8002c74:	d008      	beq.n	8002c88 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c76:	682b      	ldr	r3, [r5, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f5      	beq.n	8002c68 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8002c7c:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c7e:	3c01      	subs	r4, #1
		++xPendedTicks;
 8002c80:	f103 0301 	add.w	r3, r3, #1
 8002c84:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c86:	d1f6      	bne.n	8002c76 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8002c88:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8002c8a:	f8da 3000 	ldr.w	r3, [sl]
 8002c8e:	b15b      	cbz	r3, 8002ca8 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8002c90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ca8:	2000      	movs	r0, #0
 8002caa:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002cac:	f001 f88c 	bl	8003dc8 <vPortExitCritical>
}
 8002cb0:	9801      	ldr	r0, [sp, #4]
 8002cb2:	b003      	add	sp, #12
 8002cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002cb8:	6833      	ldr	r3, [r6, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1a1      	bne.n	8002c02 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	; (8002ce8 <xTaskResumeAll.part.0+0x11c>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	d1c4      	bne.n	8002c52 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <xTaskResumeAll.part.0+0x120>)
 8002cca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e7c5      	b.n	8002c5e <xTaskResumeAll.part.0+0x92>
 8002cd2:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002cfc <xTaskResumeAll.part.0+0x130>
 8002cd6:	e7c2      	b.n	8002c5e <xTaskResumeAll.part.0+0x92>
 8002cd8:	20001054 	.word	0x20001054
 8002cdc:	2000104c 	.word	0x2000104c
 8002ce0:	20001094 	.word	0x20001094
 8002ce4:	2000105c 	.word	0x2000105c
 8002ce8:	20000be4 	.word	0x20000be4
 8002cec:	20001088 	.word	0x20001088
 8002cf0:	20001090 	.word	0x20001090
 8002cf4:	20000bec 	.word	0x20000bec
 8002cf8:	20000be0 	.word	0x20000be0
 8002cfc:	200010d8 	.word	0x200010d8

08002d00 <xTaskCreateStatic>:
	{
 8002d00:	b530      	push	{r4, r5, lr}
 8002d02:	b087      	sub	sp, #28
 8002d04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002d06:	b1c4      	cbz	r4, 8002d3a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8002d08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d0a:	b16d      	cbz	r5, 8002d28 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d0c:	256c      	movs	r5, #108	; 0x6c
 8002d0e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d10:	9d05      	ldr	r5, [sp, #20]
 8002d12:	2d6c      	cmp	r5, #108	; 0x6c
 8002d14:	d01a      	beq.n	8002d4c <xTaskCreateStatic+0x4c>
 8002d16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	e7fe      	b.n	8002d26 <xTaskCreateStatic+0x26>
 8002d28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d2c:	f383 8811 	msr	BASEPRI, r3
 8002d30:	f3bf 8f6f 	isb	sy
 8002d34:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002d38:	e7fe      	b.n	8002d38 <xTaskCreateStatic+0x38>
 8002d3a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002d4a:	e7fe      	b.n	8002d4a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002d4e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d50:	2402      	movs	r4, #2
 8002d52:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d56:	ac04      	add	r4, sp, #16
 8002d58:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002d5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002d5e:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d60:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d62:	f7ff fdeb 	bl	800293c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002d68:	f7ff fd10 	bl	800278c <prvAddNewTaskToReadyList>
	}
 8002d6c:	9804      	ldr	r0, [sp, #16]
 8002d6e:	b007      	add	sp, #28
 8002d70:	bd30      	pop	{r4, r5, pc}
 8002d72:	bf00      	nop

08002d74 <xTaskCreate>:
	{
 8002d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d78:	4607      	mov	r7, r0
 8002d7a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d7c:	0090      	lsls	r0, r2, #2
	{
 8002d7e:	4615      	mov	r5, r2
 8002d80:	4688      	mov	r8, r1
 8002d82:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d84:	f001 f95e 	bl	8004044 <pvPortMalloc>
			if( pxStack != NULL )
 8002d88:	b1d8      	cbz	r0, 8002dc2 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	206c      	movs	r0, #108	; 0x6c
 8002d8e:	f001 f959 	bl	8004044 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002d92:	4606      	mov	r6, r0
 8002d94:	b1d0      	cbz	r0, 8002dcc <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8002d96:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d98:	2400      	movs	r4, #0
 8002d9a:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002da0:	9401      	str	r4, [sp, #4]
 8002da2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002da4:	9602      	str	r6, [sp, #8]
 8002da6:	464b      	mov	r3, r9
 8002da8:	462a      	mov	r2, r5
 8002daa:	4641      	mov	r1, r8
 8002dac:	4638      	mov	r0, r7
 8002dae:	9400      	str	r4, [sp, #0]
 8002db0:	f7ff fdc4 	bl	800293c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002db4:	4630      	mov	r0, r6
 8002db6:	f7ff fce9 	bl	800278c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dba:	2001      	movs	r0, #1
	}
 8002dbc:	b005      	add	sp, #20
 8002dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8002dc6:	b005      	add	sp, #20
 8002dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f001 f9f3 	bl	80041b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dd6:	e7f1      	b.n	8002dbc <xTaskCreate+0x48>

08002dd8 <vTaskDelete>:
	{
 8002dd8:	b570      	push	{r4, r5, r6, lr}
 8002dda:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002ddc:	4d36      	ldr	r5, [pc, #216]	; (8002eb8 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 8002dde:	f000 ffd1 	bl	8003d84 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002de2:	2c00      	cmp	r4, #0
 8002de4:	d044      	beq.n	8002e70 <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002de6:	1d26      	adds	r6, r4, #4
 8002de8:	4630      	mov	r0, r6
 8002dea:	f7fe fd49 	bl	8001880 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002df0:	b11b      	cbz	r3, 8002dfa <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002df2:	f104 0018 	add.w	r0, r4, #24
 8002df6:	f7fe fd43 	bl	8001880 <uxListRemove>
			uxTaskNumber++;
 8002dfa:	4a30      	ldr	r2, [pc, #192]	; (8002ebc <vTaskDelete+0xe4>)
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8002e02:	682b      	ldr	r3, [r5, #0]
 8002e04:	42a3      	cmp	r3, r4
 8002e06:	d02a      	beq.n	8002e5e <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8002e08:	492d      	ldr	r1, [pc, #180]	; (8002ec0 <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e0a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				--uxCurrentNumberOfTasks;
 8002e0e:	680b      	ldr	r3, [r1, #0]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e14:	b162      	cbz	r2, 8002e30 <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e16:	2a01      	cmp	r2, #1
 8002e18:	d03f      	beq.n	8002e9a <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002e1a:	2a02      	cmp	r2, #2
 8002e1c:	d00e      	beq.n	8002e3c <vTaskDelete+0x64>
 8002e1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e22:	f383 8811 	msr	BASEPRI, r3
 8002e26:	f3bf 8f6f 	isb	sy
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	e7fe      	b.n	8002e2e <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8002e30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e32:	f001 f9c1 	bl	80041b8 <vPortFree>
				vPortFree( pxTCB );
 8002e36:	4620      	mov	r0, r4
 8002e38:	f001 f9be 	bl	80041b8 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e3c:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <vTaskDelete+0xec>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	b9ba      	cbnz	r2, 8002e74 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <vTaskDelete+0xf0>)
 8002e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e4a:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002e4c:	f000 ffbc 	bl	8003dc8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002e50:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <vTaskDelete+0xf4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	b113      	cbz	r3, 8002e5c <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8002e56:	682b      	ldr	r3, [r5, #0]
 8002e58:	42a3      	cmp	r3, r4
 8002e5a:	d012      	beq.n	8002e82 <vTaskDelete+0xaa>
	}
 8002e5c:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002e5e:	481c      	ldr	r0, [pc, #112]	; (8002ed0 <vTaskDelete+0xf8>)
 8002e60:	4631      	mov	r1, r6
 8002e62:	f7fe fce5 	bl	8001830 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <vTaskDelete+0xfc>)
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8002e6e:	e7ed      	b.n	8002e4c <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e70:	682c      	ldr	r4, [r5, #0]
 8002e72:	e7b8      	b.n	8002de6 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e74:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e78:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002e7a:	68d2      	ldr	r2, [r2, #12]
 8002e7c:	6852      	ldr	r2, [r2, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	e7e4      	b.n	8002e4c <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <vTaskDelete+0x100>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	b163      	cbz	r3, 8002ea2 <vTaskDelete+0xca>
 8002e88:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	e7fe      	b.n	8002e98 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 8002e9a:	4620      	mov	r0, r4
 8002e9c:	f001 f98c 	bl	80041b8 <vPortFree>
 8002ea0:	e7cc      	b.n	8002e3c <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8002ea2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eaa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	f3bf 8f6f 	isb	sy
	}
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	20000be0 	.word	0x20000be0
 8002ebc:	20001058 	.word	0x20001058
 8002ec0:	2000104c 	.word	0x2000104c
 8002ec4:	20000be4 	.word	0x20000be4
 8002ec8:	20001088 	.word	0x20001088
 8002ecc:	200010a8 	.word	0x200010a8
 8002ed0:	200010c0 	.word	0x200010c0
 8002ed4:	20001050 	.word	0x20001050
 8002ed8:	20001054 	.word	0x20001054

08002edc <vTaskDelay>:
	{
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ede:	b950      	cbnz	r0, 8002ef6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002ee0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
	}
 8002ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002ef6:	4d20      	ldr	r5, [pc, #128]	; (8002f78 <vTaskDelay+0x9c>)
 8002ef8:	682b      	ldr	r3, [r5, #0]
 8002efa:	b143      	cbz	r3, 8002f0e <vTaskDelay+0x32>
 8002efc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f00:	f383 8811 	msr	BASEPRI, r3
 8002f04:	f3bf 8f6f 	isb	sy
 8002f08:	f3bf 8f4f 	dsb	sy
 8002f0c:	e7fe      	b.n	8002f0c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8002f0e:	682a      	ldr	r2, [r5, #0]
 8002f10:	3201      	adds	r2, #1
 8002f12:	4604      	mov	r4, r0
 8002f14:	602a      	str	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f16:	4e19      	ldr	r6, [pc, #100]	; (8002f7c <vTaskDelay+0xa0>)
const TickType_t xConstTickCount = xTickCount;
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <vTaskDelay+0xa4>)
 8002f1a:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f1c:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f1e:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f20:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f24:	3004      	adds	r0, #4
 8002f26:	f7fe fcab 	bl	8001880 <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f2a:	6833      	ldr	r3, [r6, #0]
 8002f2c:	19e4      	adds	r4, r4, r7
 8002f2e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002f30:	d310      	bcc.n	8002f54 <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f32:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <vTaskDelay+0xa8>)
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	6831      	ldr	r1, [r6, #0]
 8002f38:	3104      	adds	r1, #4
 8002f3a:	f7fe fc89 	bl	8001850 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8002f3e:	682b      	ldr	r3, [r5, #0]
 8002f40:	b9a3      	cbnz	r3, 8002f6c <vTaskDelay+0x90>
 8002f42:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	e7fe      	b.n	8002f52 <vTaskDelay+0x76>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <vTaskDelay+0xac>)
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	6831      	ldr	r1, [r6, #0]
 8002f5a:	3104      	adds	r1, #4
 8002f5c:	f7fe fc78 	bl	8001850 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <vTaskDelay+0xb0>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002f66:	bf38      	it	cc
 8002f68:	601c      	strcc	r4, [r3, #0]
 8002f6a:	e7e8      	b.n	8002f3e <vTaskDelay+0x62>
 8002f6c:	f7ff fe2e 	bl	8002bcc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d0b5      	beq.n	8002ee0 <vTaskDelay+0x4>
	}
 8002f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20001054 	.word	0x20001054
 8002f7c:	20000be0 	.word	0x20000be0
 8002f80:	200010d4 	.word	0x200010d4
 8002f84:	20000be8 	.word	0x20000be8
 8002f88:	20000be4 	.word	0x20000be4
 8002f8c:	20001088 	.word	0x20001088

08002f90 <vTaskSuspend>:
	{
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002f94:	4e32      	ldr	r6, [pc, #200]	; (8003060 <vTaskSuspend+0xd0>)
		taskENTER_CRITICAL();
 8002f96:	f000 fef5 	bl	8003d84 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002f9a:	2c00      	cmp	r4, #0
 8002f9c:	d03b      	beq.n	8003016 <vTaskSuspend+0x86>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f9e:	1d25      	adds	r5, r4, #4
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f7fe fc6d 	bl	8001880 <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fa8:	b11b      	cbz	r3, 8002fb2 <vTaskSuspend+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002faa:	f104 0018 	add.w	r0, r4, #24
 8002fae:	f7fe fc67 	bl	8001880 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002fb2:	4629      	mov	r1, r5
 8002fb4:	482b      	ldr	r0, [pc, #172]	; (8003064 <vTaskSuspend+0xd4>)
		if( xSchedulerRunning != pdFALSE )
 8002fb6:	4d2c      	ldr	r5, [pc, #176]	; (8003068 <vTaskSuspend+0xd8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002fb8:	f7fe fc3a 	bl	8001830 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002fbc:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8002fc0:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002fc2:	bf04      	itt	eq
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	f884 3068 	strbeq.w	r3, [r4, #104]	; 0x68
		taskEXIT_CRITICAL();
 8002fca:	f000 fefd 	bl	8003dc8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002fce:	682b      	ldr	r3, [r5, #0]
 8002fd0:	b993      	cbnz	r3, 8002ff8 <vTaskSuspend+0x68>
		if( pxTCB == pxCurrentTCB )
 8002fd2:	6833      	ldr	r3, [r6, #0]
 8002fd4:	42a3      	cmp	r3, r4
 8002fd6:	d000      	beq.n	8002fda <vTaskSuspend+0x4a>
	}
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
			if( xSchedulerRunning != pdFALSE )
 8002fda:	682b      	ldr	r3, [r5, #0]
 8002fdc:	b313      	cbz	r3, 8003024 <vTaskSuspend+0x94>
				configASSERT( uxSchedulerSuspended == 0 );
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <vTaskSuspend+0xdc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d02b      	beq.n	800303e <vTaskSuspend+0xae>
 8002fe6:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	e7fe      	b.n	8002ff6 <vTaskSuspend+0x66>
			taskENTER_CRITICAL();
 8002ff8:	f000 fec4 	bl	8003d84 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <vTaskSuspend+0xe0>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	b152      	cbz	r2, 800301a <vTaskSuspend+0x8a>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003004:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003006:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <vTaskSuspend+0xe4>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003008:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800300a:	68d2      	ldr	r2, [r2, #12]
 800300c:	6852      	ldr	r2, [r2, #4]
 800300e:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8003010:	f000 feda 	bl	8003dc8 <vPortExitCritical>
 8003014:	e7dd      	b.n	8002fd2 <vTaskSuspend+0x42>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003016:	6834      	ldr	r4, [r6, #0]
 8003018:	e7c1      	b.n	8002f9e <vTaskSuspend+0xe>
		xNextTaskUnblockTime = portMAX_DELAY;
 800301a:	4b16      	ldr	r3, [pc, #88]	; (8003074 <vTaskSuspend+0xe4>)
 800301c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e7f5      	b.n	8003010 <vTaskSuspend+0x80>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003024:	490f      	ldr	r1, [pc, #60]	; (8003064 <vTaskSuspend+0xd4>)
 8003026:	4a14      	ldr	r2, [pc, #80]	; (8003078 <vTaskSuspend+0xe8>)
 8003028:	6809      	ldr	r1, [r1, #0]
 800302a:	6812      	ldr	r2, [r2, #0]
 800302c:	4291      	cmp	r1, r2
 800302e:	d011      	beq.n	8003054 <vTaskSuspend+0xc4>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003030:	4b0e      	ldr	r3, [pc, #56]	; (800306c <vTaskSuspend+0xdc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b183      	cbz	r3, 8003058 <vTaskSuspend+0xc8>
		xYieldPending = pdTRUE;
 8003036:	4b11      	ldr	r3, [pc, #68]	; (800307c <vTaskSuspend+0xec>)
 8003038:	2201      	movs	r2, #1
 800303a:	601a      	str	r2, [r3, #0]
	}
 800303c:	bd70      	pop	{r4, r5, r6, pc}
				portYIELD_WITHIN_API();
 800303e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003046:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	f3bf 8f6f 	isb	sy
	}
 8003052:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB = NULL;
 8003054:	6033      	str	r3, [r6, #0]
	}
 8003056:	bd70      	pop	{r4, r5, r6, pc}
 8003058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800305c:	f7ff bc1e 	b.w	800289c <vTaskSwitchContext.part.0>
 8003060:	20000be0 	.word	0x20000be0
 8003064:	200010ac 	.word	0x200010ac
 8003068:	200010a8 	.word	0x200010a8
 800306c:	20001054 	.word	0x20001054
 8003070:	20000be4 	.word	0x20000be4
 8003074:	20001088 	.word	0x20001088
 8003078:	2000104c 	.word	0x2000104c
 800307c:	200010d8 	.word	0x200010d8

08003080 <vTaskResume>:
		configASSERT( xTaskToResume );
 8003080:	b198      	cbz	r0, 80030aa <vTaskResume+0x2a>
	{
 8003082:	b530      	push	{r4, r5, lr}
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003084:	4d22      	ldr	r5, [pc, #136]	; (8003110 <vTaskResume+0x90>)
 8003086:	682b      	ldr	r3, [r5, #0]
 8003088:	4283      	cmp	r3, r0
	{
 800308a:	b083      	sub	sp, #12
 800308c:	4604      	mov	r4, r0
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800308e:	d00a      	beq.n	80030a6 <vTaskResume+0x26>
			taskENTER_CRITICAL();
 8003090:	f000 fe78 	bl	8003d84 <vPortEnterCritical>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003094:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <vTaskResume+0x94>)
 8003096:	6962      	ldr	r2, [r4, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	d00f      	beq.n	80030bc <vTaskResume+0x3c>
	}
 800309c:	b003      	add	sp, #12
 800309e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			taskEXIT_CRITICAL();
 80030a2:	f000 be91 	b.w	8003dc8 <vPortExitCritical>
	}
 80030a6:	b003      	add	sp, #12
 80030a8:	bd30      	pop	{r4, r5, pc}
 80030aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToResume );
 80030ba:	e7fe      	b.n	80030ba <vTaskResume+0x3a>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80030bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80030be:	4a16      	ldr	r2, [pc, #88]	; (8003118 <vTaskResume+0x98>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d0eb      	beq.n	800309c <vTaskResume+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e9      	bne.n	800309c <vTaskResume+0x1c>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80030c8:	1d21      	adds	r1, r4, #4
 80030ca:	4608      	mov	r0, r1
 80030cc:	9101      	str	r1, [sp, #4]
 80030ce:	f7fe fbd7 	bl	8001880 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030d2:	4a12      	ldr	r2, [pc, #72]	; (800311c <vTaskResume+0x9c>)
 80030d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030d6:	6810      	ldr	r0, [r2, #0]
 80030d8:	9901      	ldr	r1, [sp, #4]
 80030da:	4283      	cmp	r3, r0
 80030dc:	4810      	ldr	r0, [pc, #64]	; (8003120 <vTaskResume+0xa0>)
 80030de:	bf88      	it	hi
 80030e0:	6013      	strhi	r3, [r2, #0]
 80030e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030e6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80030ea:	f7fe fba1 	bl	8001830 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030ee:	682b      	ldr	r3, [r5, #0]
 80030f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d3d1      	bcc.n	800309c <vTaskResume+0x1c>
						taskYIELD_IF_USING_PREEMPTION();
 80030f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80030fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003100:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003104:	f3bf 8f4f 	dsb	sy
 8003108:	f3bf 8f6f 	isb	sy
 800310c:	e7c6      	b.n	800309c <vTaskResume+0x1c>
 800310e:	bf00      	nop
 8003110:	20000be0 	.word	0x20000be0
 8003114:	200010ac 	.word	0x200010ac
 8003118:	20001094 	.word	0x20001094
 800311c:	2000105c 	.word	0x2000105c
 8003120:	20000bec 	.word	0x20000bec

08003124 <vTaskStartScheduler>:
{
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003128:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800312a:	4668      	mov	r0, sp
 800312c:	aa02      	add	r2, sp, #8
 800312e:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003130:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003134:	f7fe fa64 	bl	8001600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003138:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 800313a:	b1c8      	cbz	r0, 8003170 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800313c:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 800313e:	b174      	cbz	r4, 800315e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003140:	236c      	movs	r3, #108	; 0x6c
 8003142:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003144:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003146:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003148:	429a      	cmp	r2, r3
 800314a:	d01a      	beq.n	8003182 <vTaskStartScheduler+0x5e>
 800314c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	e7fe      	b.n	800315c <vTaskStartScheduler+0x38>
 800315e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003162:	f383 8811 	msr	BASEPRI, r3
 8003166:	f3bf 8f6f 	isb	sy
 800316a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800316e:	e7fe      	b.n	800316e <vTaskStartScheduler+0x4a>
 8003170:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003174:	f383 8811 	msr	BASEPRI, r3
 8003178:	f3bf 8f6f 	isb	sy
 800317c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8003180:	e7fe      	b.n	8003180 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003182:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003184:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003186:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003188:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800318c:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800318e:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003190:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003192:	f007 fd1d 	bl	800abd0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003196:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <vTaskStartScheduler+0x124>)
 800319a:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800319c:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800319e:	4415      	add	r5, r2
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031a0:	2249      	movs	r2, #73	; 0x49
 80031a2:	f801 2f34 	strb.w	r2, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031a6:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 80031aa:	f103 001f 	add.w	r0, r3, #31
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031ae:	4298      	cmp	r0, r3
 80031b0:	d005      	beq.n	80031be <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031b2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80031b6:	f801 2f01 	strb.w	r2, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80031ba:	2a00      	cmp	r2, #0
 80031bc:	d1f7      	bne.n	80031ae <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031be:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031c0:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80031c2:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031c6:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 80031ca:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031cc:	f7fe fb2c 	bl	8001828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031d0:	f104 0018 	add.w	r0, r4, #24
 80031d4:	f7fe fb28 	bl	8001828 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d8:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031da:	491c      	ldr	r1, [pc, #112]	; (800324c <vTaskStartScheduler+0x128>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031dc:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031de:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 80031e0:	6665      	str	r5, [r4, #100]	; 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031e2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031e4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031e6:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 80031ea:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031ee:	4630      	mov	r0, r6
 80031f0:	f000 fd9e 	bl	8003d30 <pxPortInitialiseStack>
 80031f4:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 80031f6:	4620      	mov	r0, r4
 80031f8:	f7ff fac8 	bl	800278c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 80031fc:	f000 fce8 	bl	8003bd0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003200:	2801      	cmp	r0, #1
 8003202:	d00c      	beq.n	800321e <vTaskStartScheduler+0xfa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003204:	3001      	adds	r0, #1
 8003206:	d001      	beq.n	800320c <vTaskStartScheduler+0xe8>
}
 8003208:	b004      	add	sp, #16
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800321c:	e7fe      	b.n	800321c <vTaskStartScheduler+0xf8>
 800321e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003222:	f383 8811 	msr	BASEPRI, r3
 8003226:	f3bf 8f6f 	isb	sy
 800322a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800322e:	4908      	ldr	r1, [pc, #32]	; (8003250 <vTaskStartScheduler+0x12c>)
		xSchedulerRunning = pdTRUE;
 8003230:	4a08      	ldr	r2, [pc, #32]	; (8003254 <vTaskStartScheduler+0x130>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003232:	4b09      	ldr	r3, [pc, #36]	; (8003258 <vTaskStartScheduler+0x134>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8003234:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003238:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 800323a:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800323c:	601d      	str	r5, [r3, #0]
}
 800323e:	b004      	add	sp, #16
 8003240:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003244:	f000 be30 	b.w	8003ea8 <xPortStartScheduler>
 8003248:	0800dcd4 	.word	0x0800dcd4
 800324c:	080029e9 	.word	0x080029e9
 8003250:	20001088 	.word	0x20001088
 8003254:	200010a8 	.word	0x200010a8
 8003258:	200010d4 	.word	0x200010d4

0800325c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800325c:	4a02      	ldr	r2, [pc, #8]	; (8003268 <vTaskSuspendAll+0xc>)
 800325e:	6813      	ldr	r3, [r2, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20001054 	.word	0x20001054

0800326c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <xTaskResumeAll+0x1c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b943      	cbnz	r3, 8003284 <xTaskResumeAll+0x18>
 8003272:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003276:	f383 8811 	msr	BASEPRI, r3
 800327a:	f3bf 8f6f 	isb	sy
 800327e:	f3bf 8f4f 	dsb	sy
 8003282:	e7fe      	b.n	8003282 <xTaskResumeAll+0x16>
 8003284:	f7ff bca2 	b.w	8002bcc <xTaskResumeAll.part.0>
 8003288:	20001054 	.word	0x20001054

0800328c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800328c:	4b01      	ldr	r3, [pc, #4]	; (8003294 <xTaskGetTickCount+0x8>)
 800328e:	6818      	ldr	r0, [r3, #0]
}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	200010d4 	.word	0x200010d4

08003298 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <xTaskIncrementTick+0x18>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	b90b      	cbnz	r3, 80032a2 <xTaskIncrementTick+0xa>
 800329e:	f7ff bbf1 	b.w	8002a84 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80032a2:	4a04      	ldr	r2, [pc, #16]	; (80032b4 <xTaskIncrementTick+0x1c>)
 80032a4:	6813      	ldr	r3, [r2, #0]
 80032a6:	3301      	adds	r3, #1
}
 80032a8:	2000      	movs	r0, #0
		++xPendedTicks;
 80032aa:	6013      	str	r3, [r2, #0]
}
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	20001054 	.word	0x20001054
 80032b4:	20001090 	.word	0x20001090

080032b8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032b8:	4b04      	ldr	r3, [pc, #16]	; (80032cc <vTaskSwitchContext+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	b11b      	cbz	r3, 80032c6 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <vTaskSwitchContext+0x18>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	4770      	bx	lr
 80032c6:	f7ff bae9 	b.w	800289c <vTaskSwitchContext.part.0>
 80032ca:	bf00      	nop
 80032cc:	20001054 	.word	0x20001054
 80032d0:	200010d8 	.word	0x200010d8

080032d4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80032d4:	b1f0      	cbz	r0, 8003314 <vTaskPlaceOnEventList+0x40>
{
 80032d6:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032d8:	4d1c      	ldr	r5, [pc, #112]	; (800334c <vTaskPlaceOnEventList+0x78>)
 80032da:	460c      	mov	r4, r1
 80032dc:	6829      	ldr	r1, [r5, #0]
 80032de:	3118      	adds	r1, #24
 80032e0:	f7fe fab6 	bl	8001850 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <vTaskPlaceOnEventList+0x7c>)
 80032e6:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80032e8:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032ea:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032f2:	3004      	adds	r0, #4
 80032f4:	f7fe fac4 	bl	8001880 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032f8:	1c63      	adds	r3, r4, #1
 80032fa:	d014      	beq.n	8003326 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	19a4      	adds	r4, r4, r6
 8003300:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003302:	d317      	bcc.n	8003334 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <vTaskPlaceOnEventList+0x80>)
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	6829      	ldr	r1, [r5, #0]
}
 800330a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800330e:	3104      	adds	r1, #4
 8003310:	f7fe ba9e 	b.w	8001850 <vListInsert>
 8003314:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8003324:	e7fe      	b.n	8003324 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003326:	6829      	ldr	r1, [r5, #0]
 8003328:	480b      	ldr	r0, [pc, #44]	; (8003358 <vTaskPlaceOnEventList+0x84>)
}
 800332a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800332e:	3104      	adds	r1, #4
 8003330:	f7fe ba7e 	b.w	8001830 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <vTaskPlaceOnEventList+0x88>)
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	6829      	ldr	r1, [r5, #0]
 800333a:	3104      	adds	r1, #4
 800333c:	f7fe fa88 	bl	8001850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003340:	4b07      	ldr	r3, [pc, #28]	; (8003360 <vTaskPlaceOnEventList+0x8c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003346:	bf38      	it	cc
 8003348:	601c      	strcc	r4, [r3, #0]
}
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	20000be0 	.word	0x20000be0
 8003350:	200010d4 	.word	0x200010d4
 8003354:	20000be8 	.word	0x20000be8
 8003358:	200010ac 	.word	0x200010ac
 800335c:	20000be4 	.word	0x20000be4
 8003360:	20001088 	.word	0x20001088

08003364 <vTaskPlaceOnUnorderedEventList>:
	configASSERT( pxEventList );
 8003364:	2800      	cmp	r0, #0
 8003366:	d02e      	beq.n	80033c6 <vTaskPlaceOnUnorderedEventList+0x62>
	configASSERT( uxSchedulerSuspended != 0 );
 8003368:	4b25      	ldr	r3, [pc, #148]	; (8003400 <vTaskPlaceOnUnorderedEventList+0x9c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	b943      	cbnz	r3, 8003380 <vTaskPlaceOnUnorderedEventList+0x1c>
 800336e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	e7fe      	b.n	800337e <vTaskPlaceOnUnorderedEventList+0x1a>
{
 8003380:	b570      	push	{r4, r5, r6, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003382:	4d20      	ldr	r5, [pc, #128]	; (8003404 <vTaskPlaceOnUnorderedEventList+0xa0>)
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800338a:	6199      	str	r1, [r3, #24]
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800338c:	6829      	ldr	r1, [r5, #0]
 800338e:	3118      	adds	r1, #24
 8003390:	4614      	mov	r4, r2
 8003392:	f7fe fa4d 	bl	8001830 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8003396:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <vTaskPlaceOnUnorderedEventList+0xa4>)
 8003398:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800339a:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800339c:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a4:	3004      	adds	r0, #4
 80033a6:	f7fe fa6b 	bl	8001880 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033aa:	1c63      	adds	r3, r4, #1
 80033ac:	d014      	beq.n	80033d8 <vTaskPlaceOnUnorderedEventList+0x74>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	19a4      	adds	r4, r4, r6
 80033b2:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80033b4:	d317      	bcc.n	80033e6 <vTaskPlaceOnUnorderedEventList+0x82>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <vTaskPlaceOnUnorderedEventList+0xa8>)
 80033b8:	6818      	ldr	r0, [r3, #0]
 80033ba:	6829      	ldr	r1, [r5, #0]
}
 80033bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c0:	3104      	adds	r1, #4
 80033c2:	f7fe ba45 	b.w	8001850 <vListInsert>
 80033c6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80033ca:	f383 8811 	msr	BASEPRI, r3
 80033ce:	f3bf 8f6f 	isb	sy
 80033d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80033d6:	e7fe      	b.n	80033d6 <vTaskPlaceOnUnorderedEventList+0x72>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d8:	6829      	ldr	r1, [r5, #0]
 80033da:	480d      	ldr	r0, [pc, #52]	; (8003410 <vTaskPlaceOnUnorderedEventList+0xac>)
}
 80033dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e0:	3104      	adds	r1, #4
 80033e2:	f7fe ba25 	b.w	8001830 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <vTaskPlaceOnUnorderedEventList+0xb0>)
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	6829      	ldr	r1, [r5, #0]
 80033ec:	3104      	adds	r1, #4
 80033ee:	f7fe fa2f 	bl	8001850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <vTaskPlaceOnUnorderedEventList+0xb4>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80033f8:	bf38      	it	cc
 80033fa:	601c      	strcc	r4, [r3, #0]
}
 80033fc:	bd70      	pop	{r4, r5, r6, pc}
 80033fe:	bf00      	nop
 8003400:	20001054 	.word	0x20001054
 8003404:	20000be0 	.word	0x20000be0
 8003408:	200010d4 	.word	0x200010d4
 800340c:	20000be8 	.word	0x20000be8
 8003410:	200010ac 	.word	0x200010ac
 8003414:	20000be4 	.word	0x20000be4
 8003418:	20001088 	.word	0x20001088

0800341c <vTaskPlaceOnEventListRestricted>:
	{
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 800341e:	b360      	cbz	r0, 800347a <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003420:	4e20      	ldr	r6, [pc, #128]	; (80034a4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003422:	460c      	mov	r4, r1
 8003424:	6831      	ldr	r1, [r6, #0]
 8003426:	4615      	mov	r5, r2
 8003428:	3118      	adds	r1, #24
 800342a:	f7fe fa01 	bl	8001830 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 8003430:	b99d      	cbnz	r5, 800345a <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 8003432:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003434:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003436:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003438:	f883 506a 	strb.w	r5, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800343c:	3004      	adds	r0, #4
 800343e:	f7fe fa1f 	bl	8001880 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003442:	6833      	ldr	r3, [r6, #0]
 8003444:	19e4      	adds	r4, r4, r7
 8003446:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003448:	d320      	bcc.n	800348c <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <vTaskPlaceOnEventListRestricted+0x90>)
 800344c:	6818      	ldr	r0, [r3, #0]
 800344e:	6831      	ldr	r1, [r6, #0]
	}
 8003450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003454:	3104      	adds	r1, #4
 8003456:	f7fe b9fb 	b.w	8001850 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800345a:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800345c:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800345e:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003460:	2200      	movs	r2, #0
 8003462:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003466:	3004      	adds	r0, #4
 8003468:	f7fe fa0a 	bl	8001880 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800346c:	6831      	ldr	r1, [r6, #0]
 800346e:	4810      	ldr	r0, [pc, #64]	; (80034b0 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 8003470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003474:	3104      	adds	r1, #4
 8003476:	f7fe b9db 	b.w	8001830 <vListInsertEnd>
 800347a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800348a:	e7fe      	b.n	800348a <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <vTaskPlaceOnEventListRestricted+0x98>)
 800348e:	6818      	ldr	r0, [r3, #0]
 8003490:	6831      	ldr	r1, [r6, #0]
 8003492:	3104      	adds	r1, #4
 8003494:	f7fe f9dc 	bl	8001850 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003498:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <vTaskPlaceOnEventListRestricted+0x9c>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800349e:	bf38      	it	cc
 80034a0:	601c      	strcc	r4, [r3, #0]
	}
 80034a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a4:	20000be0 	.word	0x20000be0
 80034a8:	200010d4 	.word	0x200010d4
 80034ac:	20000be8 	.word	0x20000be8
 80034b0:	200010ac 	.word	0x200010ac
 80034b4:	20000be4 	.word	0x20000be4
 80034b8:	20001088 	.word	0x20001088

080034bc <xTaskRemoveFromEventList>:
{
 80034bc:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034be:	68c3      	ldr	r3, [r0, #12]
 80034c0:	68dc      	ldr	r4, [r3, #12]
{
 80034c2:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80034c4:	2c00      	cmp	r4, #0
 80034c6:	d02b      	beq.n	8003520 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80034c8:	f104 0518 	add.w	r5, r4, #24
 80034cc:	4628      	mov	r0, r5
 80034ce:	f7fe f9d7 	bl	8001880 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <xTaskRemoveFromEventList+0x78>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b17b      	cbz	r3, 80034f8 <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034d8:	4817      	ldr	r0, [pc, #92]	; (8003538 <xTaskRemoveFromEventList+0x7c>)
 80034da:	4629      	mov	r1, r5
 80034dc:	f7fe f9a8 	bl	8001830 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034e0:	4b16      	ldr	r3, [pc, #88]	; (800353c <xTaskRemoveFromEventList+0x80>)
 80034e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80034ea:	bf85      	ittet	hi
 80034ec:	4b14      	ldrhi	r3, [pc, #80]	; (8003540 <xTaskRemoveFromEventList+0x84>)
 80034ee:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 80034f0:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80034f2:	6018      	strhi	r0, [r3, #0]
}
 80034f4:	b003      	add	sp, #12
 80034f6:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034f8:	1d21      	adds	r1, r4, #4
 80034fa:	4608      	mov	r0, r1
 80034fc:	9101      	str	r1, [sp, #4]
 80034fe:	f7fe f9bf 	bl	8001880 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003502:	4a10      	ldr	r2, [pc, #64]	; (8003544 <xTaskRemoveFromEventList+0x88>)
 8003504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003506:	6810      	ldr	r0, [r2, #0]
 8003508:	9901      	ldr	r1, [sp, #4]
 800350a:	4283      	cmp	r3, r0
 800350c:	480e      	ldr	r0, [pc, #56]	; (8003548 <xTaskRemoveFromEventList+0x8c>)
 800350e:	bf88      	it	hi
 8003510:	6013      	strhi	r3, [r2, #0]
 8003512:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003516:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800351a:	f7fe f989 	bl	8001830 <vListInsertEnd>
 800351e:	e7df      	b.n	80034e0 <xTaskRemoveFromEventList+0x24>
 8003520:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003524:	f383 8811 	msr	BASEPRI, r3
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8003530:	e7fe      	b.n	8003530 <xTaskRemoveFromEventList+0x74>
 8003532:	bf00      	nop
 8003534:	20001054 	.word	0x20001054
 8003538:	20001094 	.word	0x20001094
 800353c:	20000be0 	.word	0x20000be0
 8003540:	200010d8 	.word	0x200010d8
 8003544:	2000105c 	.word	0x2000105c
 8003548:	20000bec 	.word	0x20000bec

0800354c <vTaskRemoveFromUnorderedEventList>:
{
 800354c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800354e:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <vTaskRemoveFromUnorderedEventList+0x74>)
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	b942      	cbnz	r2, 8003566 <vTaskRemoveFromUnorderedEventList+0x1a>
 8003554:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	e7fe      	b.n	8003564 <vTaskRemoveFromUnorderedEventList+0x18>
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003566:	68c4      	ldr	r4, [r0, #12]
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003568:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800356c:	6001      	str	r1, [r0, #0]
	configASSERT( pxUnblockedTCB );
 800356e:	b1ec      	cbz	r4, 80035ac <vTaskRemoveFromUnorderedEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003570:	1d25      	adds	r5, r4, #4
	( void ) uxListRemove( pxEventListItem );
 8003572:	f7fe f985 	bl	8001880 <uxListRemove>
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003576:	4628      	mov	r0, r5
 8003578:	f7fe f982 	bl	8001880 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800357c:	4a11      	ldr	r2, [pc, #68]	; (80035c4 <vTaskRemoveFromUnorderedEventList+0x78>)
 800357e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003580:	6811      	ldr	r1, [r2, #0]
 8003582:	4811      	ldr	r0, [pc, #68]	; (80035c8 <vTaskRemoveFromUnorderedEventList+0x7c>)
 8003584:	428b      	cmp	r3, r1
 8003586:	bf88      	it	hi
 8003588:	6013      	strhi	r3, [r2, #0]
 800358a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800358e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003592:	4629      	mov	r1, r5
 8003594:	f7fe f94c 	bl	8001830 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003598:	4b0c      	ldr	r3, [pc, #48]	; (80035cc <vTaskRemoveFromUnorderedEventList+0x80>)
 800359a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d902      	bls.n	80035aa <vTaskRemoveFromUnorderedEventList+0x5e>
		xYieldPending = pdTRUE;
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <vTaskRemoveFromUnorderedEventList+0x84>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	f04f 0340 	mov.w	r3, #64	; 0x40
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80035bc:	e7fe      	b.n	80035bc <vTaskRemoveFromUnorderedEventList+0x70>
 80035be:	bf00      	nop
 80035c0:	20001054 	.word	0x20001054
 80035c4:	2000105c 	.word	0x2000105c
 80035c8:	20000bec 	.word	0x20000bec
 80035cc:	20000be0 	.word	0x20000be0
 80035d0:	200010d8 	.word	0x200010d8

080035d4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035d4:	4a03      	ldr	r2, [pc, #12]	; (80035e4 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035d6:	4b04      	ldr	r3, [pc, #16]	; (80035e8 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035d8:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	e9c0 2300 	strd	r2, r3, [r0]
}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	2000108c 	.word	0x2000108c
 80035e8:	200010d4 	.word	0x200010d4

080035ec <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80035ec:	b328      	cbz	r0, 800363a <xTaskCheckForTimeOut+0x4e>
{
 80035ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035f0:	460d      	mov	r5, r1
 80035f2:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 80035f4:	b1c1      	cbz	r1, 8003628 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 80035f6:	4604      	mov	r4, r0
 80035f8:	f000 fbc4 	bl	8003d84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <xTaskCheckForTimeOut+0x9c>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80035fe:	4b23      	ldr	r3, [pc, #140]	; (800368c <xTaskCheckForTimeOut+0xa0>)
		const TickType_t xConstTickCount = xTickCount;
 8003600:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
 8003608:	bb00      	cbnz	r0, 800364c <xTaskCheckForTimeOut+0x60>
			if( *pxTicksToWait == portMAX_DELAY )
 800360a:	682b      	ldr	r3, [r5, #0]
 800360c:	1c59      	adds	r1, r3, #1
 800360e:	d022      	beq.n	8003656 <xTaskCheckForTimeOut+0x6a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003610:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003690 <xTaskCheckForTimeOut+0xa4>
 8003614:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003618:	f8de 7000 	ldr.w	r7, [lr]
 800361c:	42b8      	cmp	r0, r7
 800361e:	d020      	beq.n	8003662 <xTaskCheckForTimeOut+0x76>
 8003620:	42b1      	cmp	r1, r6
 8003622:	d81e      	bhi.n	8003662 <xTaskCheckForTimeOut+0x76>
			xReturn = pdTRUE;
 8003624:	2001      	movs	r0, #1
 8003626:	e016      	b.n	8003656 <xTaskCheckForTimeOut+0x6a>
 8003628:	f04f 0340 	mov.w	r3, #64	; 0x40
 800362c:	f383 8811 	msr	BASEPRI, r3
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003638:	e7fe      	b.n	8003638 <xTaskCheckForTimeOut+0x4c>
 800363a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800364a:	e7fe      	b.n	800364a <xTaskCheckForTimeOut+0x5e>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 8003654:	2001      	movs	r0, #1
 8003656:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8003658:	f000 fbb6 	bl	8003dc8 <vPortExitCritical>
}
 800365c:	9801      	ldr	r0, [sp, #4]
 800365e:	b003      	add	sp, #12
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003662:	eba6 0c01 	sub.w	ip, r6, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003666:	4563      	cmp	r3, ip
 8003668:	d909      	bls.n	800367e <xTaskCheckForTimeOut+0x92>
			*pxTicksToWait -= xElapsedTime;
 800366a:	1b9b      	subs	r3, r3, r6
 800366c:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800366e:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003672:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8003674:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 8003676:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003678:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 800367c:	e7eb      	b.n	8003656 <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8003682:	2001      	movs	r0, #1
 8003684:	e7e7      	b.n	8003656 <xTaskCheckForTimeOut+0x6a>
 8003686:	bf00      	nop
 8003688:	200010d4 	.word	0x200010d4
 800368c:	20000be0 	.word	0x20000be0
 8003690:	2000108c 	.word	0x2000108c

08003694 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003694:	4b01      	ldr	r3, [pc, #4]	; (800369c <vTaskMissedYield+0x8>)
 8003696:	2201      	movs	r2, #1
 8003698:	601a      	str	r2, [r3, #0]
}
 800369a:	4770      	bx	lr
 800369c:	200010d8 	.word	0x200010d8

080036a0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <xTaskGetSchedulerState+0x18>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b133      	cbz	r3, 80036b4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036a6:	4b05      	ldr	r3, [pc, #20]	; (80036bc <xTaskGetSchedulerState+0x1c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	2002      	moveq	r0, #2
 80036b0:	2000      	movne	r0, #0
 80036b2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80036b4:	2001      	movs	r0, #1
	}
 80036b6:	4770      	bx	lr
 80036b8:	200010a8 	.word	0x200010a8
 80036bc:	20001054 	.word	0x20001054

080036c0 <xTaskPriorityInherit>:
	{
 80036c0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80036c2:	4604      	mov	r4, r0
	{
 80036c4:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 80036c6:	b1c8      	cbz	r0, 80036fc <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80036c8:	4d1d      	ldr	r5, [pc, #116]	; (8003740 <xTaskPriorityInherit+0x80>)
 80036ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036cc:	682a      	ldr	r2, [r5, #0]
 80036ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d215      	bcs.n	8003700 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036d4:	6982      	ldr	r2, [r0, #24]
 80036d6:	2a00      	cmp	r2, #0
 80036d8:	db04      	blt.n	80036e4 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036da:	682a      	ldr	r2, [r5, #0]
 80036dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036de:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80036e2:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80036e4:	4e17      	ldr	r6, [pc, #92]	; (8003744 <xTaskPriorityInherit+0x84>)
 80036e6:	6962      	ldr	r2, [r4, #20]
 80036e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80036ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d00e      	beq.n	8003712 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80036f4:	682b      	ldr	r3, [r5, #0]
 80036f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f8:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80036fa:	2001      	movs	r0, #1
	}
 80036fc:	b002      	add	sp, #8
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	4298      	cmp	r0, r3
 8003708:	bf2c      	ite	cs
 800370a:	2000      	movcs	r0, #0
 800370c:	2001      	movcc	r0, #1
	}
 800370e:	b002      	add	sp, #8
 8003710:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003712:	1d21      	adds	r1, r4, #4
 8003714:	4608      	mov	r0, r1
 8003716:	9101      	str	r1, [sp, #4]
 8003718:	f7fe f8b2 	bl	8001880 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800371c:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003720:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003722:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003724:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003726:	4290      	cmp	r0, r2
 8003728:	bf88      	it	hi
 800372a:	6018      	strhi	r0, [r3, #0]
 800372c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003730:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003734:	9901      	ldr	r1, [sp, #4]
 8003736:	f7fe f87b 	bl	8001830 <vListInsertEnd>
				xReturn = pdTRUE;
 800373a:	2001      	movs	r0, #1
 800373c:	e7de      	b.n	80036fc <xTaskPriorityInherit+0x3c>
 800373e:	bf00      	nop
 8003740:	20000be0 	.word	0x20000be0
 8003744:	20000bec 	.word	0x20000bec
 8003748:	2000105c 	.word	0x2000105c

0800374c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800374c:	b318      	cbz	r0, 8003796 <xTaskPriorityDisinherit+0x4a>
	{
 800374e:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8003750:	4b1e      	ldr	r3, [pc, #120]	; (80037cc <xTaskPriorityDisinherit+0x80>)
 8003752:	681c      	ldr	r4, [r3, #0]
 8003754:	4284      	cmp	r4, r0
	{
 8003756:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8003758:	d008      	beq.n	800376c <xTaskPriorityDisinherit+0x20>
 800375a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	e7fe      	b.n	800376a <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 800376c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800376e:	b14b      	cbz	r3, 8003784 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003770:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003772:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 8003774:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003776:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003778:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800377a:	d000      	beq.n	800377e <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800377c:	b16b      	cbz	r3, 800379a <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 800377e:	2000      	movs	r0, #0
	}
 8003780:	b002      	add	sp, #8
 8003782:	bd10      	pop	{r4, pc}
 8003784:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003794:	e7fe      	b.n	8003794 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 8003796:	2000      	movs	r0, #0
	}
 8003798:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800379a:	1d21      	adds	r1, r4, #4
 800379c:	4608      	mov	r0, r1
 800379e:	9101      	str	r1, [sp, #4]
 80037a0:	f7fe f86e 	bl	8001880 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 80037a6:	4a0a      	ldr	r2, [pc, #40]	; (80037d0 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80037a8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037aa:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 80037ae:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80037b0:	6810      	ldr	r0, [r2, #0]
 80037b2:	9901      	ldr	r1, [sp, #4]
 80037b4:	4283      	cmp	r3, r0
 80037b6:	4807      	ldr	r0, [pc, #28]	; (80037d4 <xTaskPriorityDisinherit+0x88>)
 80037b8:	bf88      	it	hi
 80037ba:	6013      	strhi	r3, [r2, #0]
 80037bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80037c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80037c4:	f7fe f834 	bl	8001830 <vListInsertEnd>
					xReturn = pdTRUE;
 80037c8:	2001      	movs	r0, #1
		return xReturn;
 80037ca:	e7d9      	b.n	8003780 <xTaskPriorityDisinherit+0x34>
 80037cc:	20000be0 	.word	0x20000be0
 80037d0:	2000105c 	.word	0x2000105c
 80037d4:	20000bec 	.word	0x20000bec

080037d8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80037d8:	2800      	cmp	r0, #0
 80037da:	d041      	beq.n	8003860 <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 80037dc:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 80037de:	6e03      	ldr	r3, [r0, #96]	; 0x60
	{
 80037e0:	b083      	sub	sp, #12
 80037e2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80037e4:	b153      	cbz	r3, 80037fc <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80037e6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
 80037e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80037ea:	4281      	cmp	r1, r0
 80037ec:	bf38      	it	cc
 80037ee:	4601      	movcc	r1, r0
 80037f0:	428a      	cmp	r2, r1
 80037f2:	d001      	beq.n	80037f8 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d00a      	beq.n	800380e <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 80037f8:	b003      	add	sp, #12
 80037fa:	bd30      	pop	{r4, r5, pc}
 80037fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800380c:	e7fe      	b.n	800380c <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	42a3      	cmp	r3, r4
 8003814:	d025      	beq.n	8003862 <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003816:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003818:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800381a:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800381c:	bfa8      	it	ge
 800381e:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003822:	4d15      	ldr	r5, [pc, #84]	; (8003878 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	bfa8      	it	ge
 8003826:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003828:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800382c:	6961      	ldr	r1, [r4, #20]
 800382e:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8003832:	4299      	cmp	r1, r3
 8003834:	d1e0      	bne.n	80037f8 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003836:	1d21      	adds	r1, r4, #4
 8003838:	4608      	mov	r0, r1
 800383a:	9101      	str	r1, [sp, #4]
 800383c:	f7fe f820 	bl	8001880 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8003842:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	9901      	ldr	r1, [sp, #4]
 8003848:	4290      	cmp	r0, r2
 800384a:	bf88      	it	hi
 800384c:	6018      	strhi	r0, [r3, #0]
 800384e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003852:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8003856:	b003      	add	sp, #12
 8003858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 800385c:	f7fd bfe8 	b.w	8001830 <vListInsertEnd>
 8003860:	4770      	bx	lr
 8003862:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003866:	f383 8811 	msr	BASEPRI, r3
 800386a:	f3bf 8f6f 	isb	sy
 800386e:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8003872:	e7fe      	b.n	8003872 <vTaskPriorityDisinheritAfterTimeout+0x9a>
 8003874:	20000be0 	.word	0x20000be0
 8003878:	20000bec 	.word	0x20000bec
 800387c:	2000105c 	.word	0x2000105c

08003880 <uxTaskResetEventItemValue>:
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8003880:	4a04      	ldr	r2, [pc, #16]	; (8003894 <uxTaskResetEventItemValue+0x14>)
 8003882:	6811      	ldr	r1, [r2, #0]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003884:	6813      	ldr	r3, [r2, #0]
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800388a:	6988      	ldr	r0, [r1, #24]
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800388c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003890:	6193      	str	r3, [r2, #24]
}
 8003892:	4770      	bx	lr
 8003894:	20000be0 	.word	0x20000be0

08003898 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003898:	4b04      	ldr	r3, [pc, #16]	; (80038ac <pvTaskIncrementMutexHeldCount+0x14>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	b11a      	cbz	r2, 80038a6 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80038a2:	3201      	adds	r2, #1
 80038a4:	660a      	str	r2, [r1, #96]	; 0x60
		return pxCurrentTCB;
 80038a6:	6818      	ldr	r0, [r3, #0]
	}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000be0 	.word	0x20000be0

080038b0 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80038b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038b4:	4e22      	ldr	r6, [pc, #136]	; (8003940 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 80038b6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8003948 <prvSwitchTimerLists+0x98>
{
 80038ba:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80038bc:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038c0:	e00d      	b.n	80038de <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038c2:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038c4:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80038c6:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80038c8:	1d25      	adds	r5, r4, #4
 80038ca:	4628      	mov	r0, r5
 80038cc:	f7fd ffd8 	bl	8001880 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038d0:	6a23      	ldr	r3, [r4, #32]
 80038d2:	4620      	mov	r0, r4
 80038d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80038d6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80038da:	075b      	lsls	r3, r3, #29
 80038dc:	d40a      	bmi.n	80038f4 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80038de:	6833      	ldr	r3, [r6, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	2a00      	cmp	r2, #0
 80038e4:	d1ed      	bne.n	80038c2 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80038e6:	4a17      	ldr	r2, [pc, #92]	; (8003944 <prvSwitchTimerLists+0x94>)
 80038e8:	6811      	ldr	r1, [r2, #0]
 80038ea:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 80038ec:	6013      	str	r3, [r2, #0]
}
 80038ee:	b005      	add	sp, #20
 80038f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80038f4:	69a3      	ldr	r3, [r4, #24]
 80038f6:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 80038f8:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038fa:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 80038fc:	d205      	bcs.n	800390a <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038fe:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003900:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003902:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003904:	f7fd ffa4 	bl	8001850 <vListInsert>
 8003908:	e7e9      	b.n	80038de <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 800390a:	f8d9 3000 	ldr.w	r3, [r9]
 800390e:	b16b      	cbz	r3, 800392c <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003910:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003914:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003916:	f7ff fec3 	bl	80036a0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800391a:	2300      	movs	r3, #0
 800391c:	f8d9 0000 	ldr.w	r0, [r9]
 8003920:	461a      	mov	r2, r3
 8003922:	4669      	mov	r1, sp
 8003924:	f7fe f8b2 	bl	8001a8c <xQueueGenericSend>
				configASSERT( xResult );
 8003928:	2800      	cmp	r0, #0
 800392a:	d1d8      	bne.n	80038de <prvSwitchTimerLists+0x2e>
 800392c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	e7fe      	b.n	800393c <prvSwitchTimerLists+0x8c>
 800393e:	bf00      	nop
 8003940:	200010dc 	.word	0x200010dc
 8003944:	200010e0 	.word	0x200010e0
 8003948:	20001200 	.word	0x20001200

0800394c <prvTimerTask>:
{
 800394c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003950:	4e9b      	ldr	r6, [pc, #620]	; (8003bc0 <prvTimerTask+0x274>)
 8003952:	4d9c      	ldr	r5, [pc, #624]	; (8003bc4 <prvTimerTask+0x278>)
 8003954:	4c9c      	ldr	r4, [pc, #624]	; (8003bc8 <prvTimerTask+0x27c>)
 8003956:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 8003958:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 800395c:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003960:	6833      	ldr	r3, [r6, #0]
 8003962:	681f      	ldr	r7, [r3, #0]
 8003964:	2f00      	cmp	r7, #0
 8003966:	f000 80a8 	beq.w	8003aba <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 800396e:	f7ff fc75 	bl	800325c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003972:	f7ff fc8b 	bl	800328c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003976:	682a      	ldr	r2, [r5, #0]
 8003978:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 800397a:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 800397c:	f0c0 80ae 	bcc.w	8003adc <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003980:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 8003982:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003984:	f080 80b4 	bcs.w	8003af0 <prvTimerTask+0x1a4>
 8003988:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800398a:	6820      	ldr	r0, [r4, #0]
 800398c:	eba7 010a 	sub.w	r1, r7, sl
 8003990:	f7fe fe98 	bl	80026c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003994:	f7ff fc6a 	bl	800326c <xTaskResumeAll>
 8003998:	b928      	cbnz	r0, 80039a6 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 800399a:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80039a6:	6820      	ldr	r0, [r4, #0]
 80039a8:	2200      	movs	r2, #0
 80039aa:	a902      	add	r1, sp, #8
 80039ac:	f7fe fae2 	bl	8001f74 <xQueueReceive>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d0d5      	beq.n	8003960 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80039b4:	9b02      	ldr	r3, [sp, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	db76      	blt.n	8003aa8 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80039ba:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	b113      	cbz	r3, 80039c6 <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80039c0:	1d38      	adds	r0, r7, #4
 80039c2:	f7fd ff5d 	bl	8001880 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80039c6:	f7ff fc61 	bl	800328c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80039ca:	682b      	ldr	r3, [r5, #0]
 80039cc:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80039ce:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80039d0:	f0c0 808b 	bcc.w	8003aea <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 80039d4:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80039d6:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 80039da:	2b09      	cmp	r3, #9
 80039dc:	d8e3      	bhi.n	80039a6 <prvTimerTask+0x5a>
 80039de:	e8df f003 	tbb	[pc, r3]
 80039e2:	0505      	.short	0x0505
 80039e4:	5a3d5305 	.word	0x5a3d5305
 80039e8:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039f0:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039f2:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039fc:	9b03      	ldr	r3, [sp, #12]
 80039fe:	1899      	adds	r1, r3, r2
 8003a00:	bf2c      	ite	cs
 8003a02:	2001      	movcs	r0, #1
 8003a04:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8003a06:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a08:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003a0a:	f200 808c 	bhi.w	8003b26 <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a0e:	ebaa 0303 	sub.w	r3, sl, r3
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d832      	bhi.n	8003a7c <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	4638      	mov	r0, r7
 8003a1a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a20:	075b      	lsls	r3, r3, #29
 8003a22:	d5c0      	bpl.n	80039a6 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	b183      	cbz	r3, 8003a4a <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 8003a28:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a2a:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8003a2c:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a2e:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a30:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003a32:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a34:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a36:	f7ff fe33 	bl	80036a0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	a906      	add	r1, sp, #24
 8003a42:	f7fe f823 	bl	8001a8c <xQueueGenericSend>
							configASSERT( xResult );
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d1ad      	bne.n	80039a6 <prvTimerTask+0x5a>
 8003a4a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	e7fe      	b.n	8003a5a <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a68:	9b03      	ldr	r3, [sp, #12]
 8003a6a:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 809d 	beq.w	8003bac <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a72:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8003a74:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a76:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a78:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003a7a:	d85e      	bhi.n	8003b3a <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <prvTimerTask+0x280>)
 8003a7e:	1d39      	adds	r1, r7, #4
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	f7fd fee5 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003a86:	e78e      	b.n	80039a6 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a8c:	f023 0301 	bic.w	r3, r3, #1
 8003a90:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 8003a94:	e787      	b.n	80039a6 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003a9a:	079a      	lsls	r2, r3, #30
 8003a9c:	d552      	bpl.n	8003b44 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8003aa6:	e77e      	b.n	80039a6 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003aae:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003ab0:	9b02      	ldr	r3, [sp, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f6ff af77 	blt.w	80039a6 <prvTimerTask+0x5a>
 8003ab8:	e77f      	b.n	80039ba <prvTimerTask+0x6e>
	vTaskSuspendAll();
 8003aba:	f7ff fbcf 	bl	800325c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003abe:	f7ff fbe5 	bl	800328c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003ac2:	682a      	ldr	r2, [r5, #0]
 8003ac4:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8003ac6:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003ac8:	d808      	bhi.n	8003adc <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003aca:	4b40      	ldr	r3, [pc, #256]	; (8003bcc <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 8003acc:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	fab2 f282 	clz	r2, r2
 8003ad8:	0952      	lsrs	r2, r2, #5
 8003ada:	e756      	b.n	800398a <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8003adc:	f7ff fee8 	bl	80038b0 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8003ae0:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8003ae4:	f7ff fbc2 	bl	800326c <xTaskResumeAll>
 8003ae8:	e75d      	b.n	80039a6 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8003aea:	f7ff fee1 	bl	80038b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003aee:	e771      	b.n	80039d4 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003af0:	f7ff fbbc 	bl	800326c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af4:	6832      	ldr	r2, [r6, #0]
 8003af6:	68d2      	ldr	r2, [r2, #12]
 8003af8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003afc:	f10b 0104 	add.w	r1, fp, #4
 8003b00:	4608      	mov	r0, r1
 8003b02:	9101      	str	r1, [sp, #4]
 8003b04:	f7fd febc 	bl	8001880 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b08:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8003b0c:	9901      	ldr	r1, [sp, #4]
 8003b0e:	f010 0f04 	tst.w	r0, #4
 8003b12:	d11b      	bne.n	8003b4c <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b14:	f020 0001 	bic.w	r0, r0, #1
 8003b18:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b1c:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003b20:	4658      	mov	r0, fp
 8003b22:	4798      	blx	r3
}
 8003b24:	e73f      	b.n	80039a6 <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b26:	4553      	cmp	r3, sl
 8003b28:	d902      	bls.n	8003b30 <prvTimerTask+0x1e4>
 8003b2a:	2800      	cmp	r0, #0
 8003b2c:	f43f af73 	beq.w	8003a16 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b30:	6830      	ldr	r0, [r6, #0]
 8003b32:	1d39      	adds	r1, r7, #4
 8003b34:	f7fd fe8c 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003b38:	e735      	b.n	80039a6 <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b3a:	6830      	ldr	r0, [r6, #0]
 8003b3c:	1d39      	adds	r1, r7, #4
 8003b3e:	f7fd fe87 	bl	8001850 <vListInsert>
 8003b42:	e730      	b.n	80039a6 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8003b44:	4638      	mov	r0, r7
 8003b46:	f000 fb37 	bl	80041b8 <vPortFree>
 8003b4a:	e72c      	b.n	80039a6 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b4c:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b50:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b54:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 8003b56:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b58:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003b5c:	d203      	bcs.n	8003b66 <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b5e:	6830      	ldr	r0, [r6, #0]
 8003b60:	f7fd fe76 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003b64:	e7da      	b.n	8003b1c <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b66:	ebaa 0307 	sub.w	r3, sl, r7
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d819      	bhi.n	8003ba2 <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	b173      	cbz	r3, 8003b90 <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 8003b72:	2300      	movs	r3, #0
 8003b74:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b76:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003b78:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003b7c:	f7ff fd90 	bl	80036a0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b80:	2300      	movs	r3, #0
 8003b82:	6820      	ldr	r0, [r4, #0]
 8003b84:	461a      	mov	r2, r3
 8003b86:	a906      	add	r1, sp, #24
 8003b88:	f7fd ff80 	bl	8001a8c <xQueueGenericSend>
			configASSERT( xResult );
 8003b8c:	2800      	cmp	r0, #0
 8003b8e:	d1c5      	bne.n	8003b1c <prvTimerTask+0x1d0>
 8003b90:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	e7fe      	b.n	8003ba0 <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <prvTimerTask+0x280>)
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	f7fd fe53 	bl	8001850 <vListInsert>
	return xProcessTimerNow;
 8003baa:	e7b7      	b.n	8003b1c <prvTimerTask+0x1d0>
 8003bac:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bbc:	e7fe      	b.n	8003bbc <prvTimerTask+0x270>
 8003bbe:	bf00      	nop
 8003bc0:	200010dc 	.word	0x200010dc
 8003bc4:	200011ac 	.word	0x200011ac
 8003bc8:	20001200 	.word	0x20001200
 8003bcc:	200010e0 	.word	0x200010e0

08003bd0 <xTimerCreateTimerTask>:
{
 8003bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8003bd2:	4c23      	ldr	r4, [pc, #140]	; (8003c60 <xTimerCreateTimerTask+0x90>)
{
 8003bd4:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 8003bd6:	f000 f8d5 	bl	8003d84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8003bda:	6825      	ldr	r5, [r4, #0]
 8003bdc:	b335      	cbz	r5, 8003c2c <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bde:	f000 f8f3 	bl	8003dc8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	b1cb      	cbz	r3, 8003c1a <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003be6:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003be8:	aa07      	add	r2, sp, #28
 8003bea:	a906      	add	r1, sp, #24
 8003bec:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003bee:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003bf2:	f7fd fd13 	bl	800161c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003bf6:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	9a07      	ldr	r2, [sp, #28]
 8003c04:	4917      	ldr	r1, [pc, #92]	; (8003c64 <xTimerCreateTimerTask+0x94>)
 8003c06:	4818      	ldr	r0, [pc, #96]	; (8003c68 <xTimerCreateTimerTask+0x98>)
 8003c08:	4623      	mov	r3, r4
 8003c0a:	f7ff f879 	bl	8002d00 <xTaskCreateStatic>
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <xTimerCreateTimerTask+0x9c>)
 8003c10:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003c12:	b110      	cbz	r0, 8003c1a <xTimerCreateTimerTask+0x4a>
}
 8003c14:	2001      	movs	r0, #1
 8003c16:	b009      	add	sp, #36	; 0x24
 8003c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c1e:	f383 8811 	msr	BASEPRI, r3
 8003c22:	f3bf 8f6f 	isb	sy
 8003c26:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003c2a:	e7fe      	b.n	8003c2a <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8003c2c:	4f10      	ldr	r7, [pc, #64]	; (8003c70 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8003c2e:	4e11      	ldr	r6, [pc, #68]	; (8003c74 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7fd fded 	bl	8001810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003c36:	4630      	mov	r0, r6
 8003c38:	f7fd fdea 	bl	8001810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003c3c:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c3e:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8003c40:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003c42:	4a0e      	ldr	r2, [pc, #56]	; (8003c7c <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8003c46:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003c48:	2110      	movs	r1, #16
 8003c4a:	4a0e      	ldr	r2, [pc, #56]	; (8003c84 <xTimerCreateTimerTask+0xb4>)
 8003c4c:	200a      	movs	r0, #10
 8003c4e:	f7fd fe67 	bl	8001920 <xQueueGenericCreateStatic>
 8003c52:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8003c54:	2800      	cmp	r0, #0
 8003c56:	d0c2      	beq.n	8003bde <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c58:	490b      	ldr	r1, [pc, #44]	; (8003c88 <xTimerCreateTimerTask+0xb8>)
 8003c5a:	f7fe fd0b 	bl	8002674 <vQueueAddToRegistry>
 8003c5e:	e7be      	b.n	8003bde <xTimerCreateTimerTask+0xe>
 8003c60:	20001200 	.word	0x20001200
 8003c64:	0800dce4 	.word	0x0800dce4
 8003c68:	0800394d 	.word	0x0800394d
 8003c6c:	20001204 	.word	0x20001204
 8003c70:	20001184 	.word	0x20001184
 8003c74:	20001198 	.word	0x20001198
 8003c78:	200010dc 	.word	0x200010dc
 8003c7c:	200010e0 	.word	0x200010e0
 8003c80:	200011b0 	.word	0x200011b0
 8003c84:	200010e4 	.word	0x200010e4
 8003c88:	0800dcdc 	.word	0x0800dcdc

08003c8c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8003c8c:	b530      	push	{r4, r5, lr}
 8003c8e:	4614      	mov	r4, r2
 8003c90:	b085      	sub	sp, #20
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b06      	ldr	r3, [pc, #24]	; (8003cb0 <xTimerPendFunctionCallFromISR+0x24>)
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8003c96:	9001      	str	r0, [sp, #4]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8003c98:	9102      	str	r1, [sp, #8]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c9a:	6818      	ldr	r0, [r3, #0]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8003c9c:	9403      	str	r4, [sp, #12]
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003c9e:	f06f 0501 	mvn.w	r5, #1
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	4669      	mov	r1, sp
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003ca6:	9500      	str	r5, [sp, #0]
		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ca8:	f7fe f8a6 	bl	8001df8 <xQueueGenericSendFromISR>

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
	}
 8003cac:	b005      	add	sp, #20
 8003cae:	bd30      	pop	{r4, r5, pc}
 8003cb0:	20001200 	.word	0x20001200

08003cb4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003cb4:	4808      	ldr	r0, [pc, #32]	; (8003cd8 <prvPortStartFirstTask+0x24>)
 8003cb6:	6800      	ldr	r0, [r0, #0]
 8003cb8:	6800      	ldr	r0, [r0, #0]
 8003cba:	f380 8808 	msr	MSP, r0
 8003cbe:	f04f 0000 	mov.w	r0, #0
 8003cc2:	f380 8814 	msr	CONTROL, r0
 8003cc6:	b662      	cpsie	i
 8003cc8:	b661      	cpsie	f
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	df00      	svc	0
 8003cd4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003cd6:	0000      	.short	0x0000
 8003cd8:	e000ed08 	.word	0xe000ed08

08003cdc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003cdc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003cec <vPortEnableVFP+0x10>
 8003ce0:	6801      	ldr	r1, [r0, #0]
 8003ce2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ce6:	6001      	str	r1, [r0, #0]
 8003ce8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003cea:	0000      	.short	0x0000
 8003cec:	e000ed88 	.word	0xe000ed88

08003cf0 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8003cf0:	4b0e      	ldr	r3, [pc, #56]	; (8003d2c <prvTaskExitError+0x3c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
{
 8003cf4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003cf6:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8003cf8:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 8003cfa:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8003cfc:	d008      	beq.n	8003d10 <prvTaskExitError+0x20>
 8003cfe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	e7fe      	b.n	8003d0e <prvTaskExitError+0x1e>
 8003d10:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003d20:	9b01      	ldr	r3, [sp, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d0fc      	beq.n	8003d20 <prvTaskExitError+0x30>
}
 8003d26:	b002      	add	sp, #8
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	20000008 	.word	0x20000008

08003d30 <pxPortInitialiseStack>:
{
 8003d30:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d36:	4c07      	ldr	r4, [pc, #28]	; (8003d54 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d38:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d3c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d40:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d44:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d48:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8003d4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d50:	3844      	subs	r0, #68	; 0x44
 8003d52:	4770      	bx	lr
 8003d54:	08003cf1 	.word	0x08003cf1
	...

08003d60 <SVC_Handler>:
	__asm volatile (
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <pxCurrentTCBConst2>)
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	6808      	ldr	r0, [r1, #0]
 8003d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6a:	f380 8809 	msr	PSP, r0
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f380 8811 	msr	BASEPRI, r0
 8003d7a:	4770      	bx	lr
 8003d7c:	f3af 8000 	nop.w

08003d80 <pxCurrentTCBConst2>:
 8003d80:	20000be0 	.word	0x20000be0

08003d84 <vPortEnterCritical>:
 8003d84:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003d94:	4a0b      	ldr	r2, [pc, #44]	; (8003dc4 <vPortEnterCritical+0x40>)
 8003d96:	6813      	ldr	r3, [r2, #0]
 8003d98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003d9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003d9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003d9e:	d000      	beq.n	8003da2 <vPortEnterCritical+0x1e>
}
 8003da0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003da2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003da6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f7      	beq.n	8003da0 <vPortEnterCritical+0x1c>
 8003db0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	e7fe      	b.n	8003dc0 <vPortEnterCritical+0x3c>
 8003dc2:	bf00      	nop
 8003dc4:	20000008 	.word	0x20000008

08003dc8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003dc8:	4a08      	ldr	r2, [pc, #32]	; (8003dec <vPortExitCritical+0x24>)
 8003dca:	6813      	ldr	r3, [r2, #0]
 8003dcc:	b943      	cbnz	r3, 8003de0 <vPortExitCritical+0x18>
 8003dce:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	e7fe      	b.n	8003dde <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003de0:	3b01      	subs	r3, #1
 8003de2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003de4:	b90b      	cbnz	r3, 8003dea <vPortExitCritical+0x22>
	__asm volatile
 8003de6:	f383 8811 	msr	BASEPRI, r3
}
 8003dea:	4770      	bx	lr
 8003dec:	20000008 	.word	0x20000008

08003df0 <PendSV_Handler>:
	__asm volatile
 8003df0:	f3ef 8009 	mrs	r0, PSP
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	4b15      	ldr	r3, [pc, #84]	; (8003e50 <pxCurrentTCBConst>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f01e 0f10 	tst.w	lr, #16
 8003e00:	bf08      	it	eq
 8003e02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	6010      	str	r0, [r2, #0]
 8003e0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e10:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003e14:	f380 8811 	msr	BASEPRI, r0
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f7ff fa4a 	bl	80032b8 <vTaskSwitchContext>
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	f380 8811 	msr	BASEPRI, r0
 8003e2c:	bc09      	pop	{r0, r3}
 8003e2e:	6819      	ldr	r1, [r3, #0]
 8003e30:	6808      	ldr	r0, [r1, #0]
 8003e32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e36:	f01e 0f10 	tst.w	lr, #16
 8003e3a:	bf08      	it	eq
 8003e3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e40:	f380 8809 	msr	PSP, r0
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w

08003e50 <pxCurrentTCBConst>:
 8003e50:	20000be0 	.word	0x20000be0

08003e54 <xPortSysTickHandler>:
{
 8003e54:	b508      	push	{r3, lr}
	__asm volatile
 8003e56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003e66:	f7ff fa17 	bl	8003298 <xTaskIncrementTick>
 8003e6a:	b128      	cbz	r0, 8003e78 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e6c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e74:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f383 8811 	msr	BASEPRI, r3
}
 8003e7e:	bd08      	pop	{r3, pc}

08003e80 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e80:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003e84:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e86:	4906      	ldr	r1, [pc, #24]	; (8003ea0 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e88:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e8a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e8c:	680b      	ldr	r3, [r1, #0]
 8003e8e:	4805      	ldr	r0, [pc, #20]	; (8003ea4 <vPortSetupTimerInterrupt+0x24>)
 8003e90:	fba0 0303 	umull	r0, r3, r0, r3
 8003e94:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e96:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e9c:	6111      	str	r1, [r2, #16]
}
 8003e9e:	4770      	bx	lr
 8003ea0:	20000000 	.word	0x20000000
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ea8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003eac:	4a48      	ldr	r2, [pc, #288]	; (8003fd0 <xPortStartScheduler+0x128>)
 8003eae:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8003eb2:	4291      	cmp	r1, r2
 8003eb4:	d041      	beq.n	8003f3a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003eb6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003eba:	4b46      	ldr	r3, [pc, #280]	; (8003fd4 <xPortStartScheduler+0x12c>)
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d033      	beq.n	8003f28 <xPortStartScheduler+0x80>
{
 8003ec0:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ec2:	4b45      	ldr	r3, [pc, #276]	; (8003fd8 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ec4:	4c45      	ldr	r4, [pc, #276]	; (8003fdc <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ec6:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ec8:	4845      	ldr	r0, [pc, #276]	; (8003fe0 <xPortStartScheduler+0x138>)
{
 8003eca:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ecc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ed2:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ee0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ee8:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eea:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eec:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eee:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ef0:	bf48      	it	mi
 8003ef2:	2206      	movmi	r2, #6
 8003ef4:	d50f      	bpl.n	8003f16 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ef6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f02:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003f06:	061b      	lsls	r3, r3, #24
 8003f08:	4611      	mov	r1, r2
 8003f0a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003f0e:	d4f2      	bmi.n	8003ef6 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f10:	2903      	cmp	r1, #3
 8003f12:	d01b      	beq.n	8003f4c <xPortStartScheduler+0xa4>
 8003f14:	6001      	str	r1, [r0, #0]
	__asm volatile
 8003f16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	e7fe      	b.n	8003f26 <xPortStartScheduler+0x7e>
 8003f28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f38:	e7fe      	b.n	8003f38 <xPortStartScheduler+0x90>
 8003f3a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f4a:	e7fe      	b.n	8003f4a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f4c:	9b02      	ldr	r3, [sp, #8]
 8003f4e:	4a22      	ldr	r2, [pc, #136]	; (8003fd8 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8003f50:	4d24      	ldr	r5, [pc, #144]	; (8003fe4 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f52:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f56:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f5a:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f5c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f5e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f60:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f68:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f6c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003f70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f74:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8003f78:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8003f7a:	f7ff ff81 	bl	8003e80 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003f7e:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8003f80:	f7ff feac 	bl	8003cdc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f84:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003f88:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f8c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8003f90:	f7ff fe90 	bl	8003cb4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003f94:	f7ff f990 	bl	80032b8 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8003f98:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8003f9a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	d008      	beq.n	8003fb2 <xPortStartScheduler+0x10a>
 8003fa0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	e7fe      	b.n	8003fb0 <xPortStartScheduler+0x108>
 8003fb2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0fc      	beq.n	8003fc2 <xPortStartScheduler+0x11a>
}
 8003fc8:	2000      	movs	r0, #0
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd70      	pop	{r4, r5, r6, pc}
 8003fce:	bf00      	nop
 8003fd0:	410fc271 	.word	0x410fc271
 8003fd4:	410fc270 	.word	0x410fc270
 8003fd8:	e000e400 	.word	0xe000e400
 8003fdc:	20001208 	.word	0x20001208
 8003fe0:	2000120c 	.word	0x2000120c
 8003fe4:	20000008 	.word	0x20000008

08003fe8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003fe8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d90e      	bls.n	800400e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ff0:	4911      	ldr	r1, [pc, #68]	; (8004038 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ff2:	4a12      	ldr	r2, [pc, #72]	; (800403c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ff4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ff6:	7812      	ldrb	r2, [r2, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d908      	bls.n	800400e <vPortValidateInterruptPriority+0x26>
 8003ffc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	e7fe      	b.n	800400c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800400e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004012:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <vPortValidateInterruptPriority+0x58>)
 8004014:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800401e:	4293      	cmp	r3, r2
 8004020:	d908      	bls.n	8004034 <vPortValidateInterruptPriority+0x4c>
 8004022:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	e7fe      	b.n	8004032 <vPortValidateInterruptPriority+0x4a>
	}
 8004034:	4770      	bx	lr
 8004036:	bf00      	nop
 8004038:	e000e3f0 	.word	0xe000e3f0
 800403c:	20001208 	.word	0x20001208
 8004040:	2000120c 	.word	0x2000120c

08004044 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004048:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800404a:	f7ff f907 	bl	800325c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800404e:	4b53      	ldr	r3, [pc, #332]	; (800419c <pvPortMalloc+0x158>)
 8004050:	681d      	ldr	r5, [r3, #0]
 8004052:	2d00      	cmp	r5, #0
 8004054:	d070      	beq.n	8004138 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004056:	4b52      	ldr	r3, [pc, #328]	; (80041a0 <pvPortMalloc+0x15c>)
 8004058:	681f      	ldr	r7, [r3, #0]
 800405a:	423e      	tst	r6, r7
 800405c:	d12e      	bne.n	80040bc <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800405e:	b36e      	cbz	r6, 80040bc <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8004060:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004064:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004066:	bf1c      	itt	ne
 8004068:	f024 0407 	bicne.w	r4, r4, #7
 800406c:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800406e:	b32c      	cbz	r4, 80040bc <pvPortMalloc+0x78>
 8004070:	f8df c140 	ldr.w	ip, [pc, #320]	; 80041b4 <pvPortMalloc+0x170>
 8004074:	f8dc 6000 	ldr.w	r6, [ip]
 8004078:	42a6      	cmp	r6, r4
 800407a:	d31f      	bcc.n	80040bc <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800407c:	4849      	ldr	r0, [pc, #292]	; (80041a4 <pvPortMalloc+0x160>)
 800407e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004080:	e003      	b.n	800408a <pvPortMalloc+0x46>
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	b122      	cbz	r2, 8004090 <pvPortMalloc+0x4c>
 8004086:	4618      	mov	r0, r3
 8004088:	4613      	mov	r3, r2
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	42a1      	cmp	r1, r4
 800408e:	d3f8      	bcc.n	8004082 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004090:	42ab      	cmp	r3, r5
 8004092:	d013      	beq.n	80040bc <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004094:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004096:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004098:	f858 eb08 	ldr.w	lr, [r8], #8
 800409c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040a0:	2a10      	cmp	r2, #16
 80040a2:	d92b      	bls.n	80040fc <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040a4:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040a6:	0748      	lsls	r0, r1, #29
 80040a8:	d011      	beq.n	80040ce <pvPortMalloc+0x8a>
 80040aa:	f04f 0340 	mov.w	r3, #64	; 0x40
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	e7fe      	b.n	80040ba <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80040bc:	f7ff f8d6 	bl	800326c <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80040c0:	f04f 0800 	mov.w	r8, #0
 80040c4:	f005 fc86 	bl	80099d4 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80040c8:	4640      	mov	r0, r8
 80040ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040ce:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 80040d2:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040d4:	4614      	mov	r4, r2
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	4291      	cmp	r1, r2
 80040da:	d8fb      	bhi.n	80040d4 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040dc:	6860      	ldr	r0, [r4, #4]
 80040de:	eb04 0e00 	add.w	lr, r4, r0
 80040e2:	4571      	cmp	r1, lr
 80040e4:	d04a      	beq.n	800417c <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80040e6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 80040ea:	eb01 000e 	add.w	r0, r1, lr
 80040ee:	4282      	cmp	r2, r0
 80040f0:	d04b      	beq.n	800418a <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80040f2:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80040f4:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80040f6:	bf18      	it	ne
 80040f8:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040fa:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040fc:	482a      	ldr	r0, [pc, #168]	; (80041a8 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 80040fe:	4a2b      	ldr	r2, [pc, #172]	; (80041ac <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004100:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004102:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004104:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004106:	bf38      	it	cc
 8004108:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800410a:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 800410c:	2000      	movs	r0, #0
 800410e:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8004112:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004114:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 8004118:	3301      	adds	r3, #1
 800411a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800411c:	f7ff f8a6 	bl	800326c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004120:	f018 0f07 	tst.w	r8, #7
 8004124:	d0d0      	beq.n	80040c8 <pvPortMalloc+0x84>
 8004126:	f04f 0340 	mov.w	r3, #64	; 0x40
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	e7fe      	b.n	8004136 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 8004138:	491d      	ldr	r1, [pc, #116]	; (80041b0 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800413a:	4c19      	ldr	r4, [pc, #100]	; (80041a0 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800413c:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800413e:	bf14      	ite	ne
 8004140:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004142:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004144:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 8004148:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800414c:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004150:	bf18      	it	ne
 8004152:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004156:	4914      	ldr	r1, [pc, #80]	; (80041a8 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 8004158:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800415a:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800415c:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004160:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004162:	4910      	ldr	r1, [pc, #64]	; (80041a4 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004164:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004166:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800416a:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800416c:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800416e:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004170:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004172:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004176:	e9c0 5300 	strd	r5, r3, [r0]
}
 800417a:	e76e      	b.n	800405a <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800417c:	6849      	ldr	r1, [r1, #4]
 800417e:	eb00 0e01 	add.w	lr, r0, r1
 8004182:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8004186:	4621      	mov	r1, r4
 8004188:	e7af      	b.n	80040ea <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800418a:	42aa      	cmp	r2, r5
 800418c:	d0b1      	beq.n	80040f2 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800418e:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004194:	4470      	add	r0, lr
 8004196:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004198:	e7ac      	b.n	80040f4 <pvPortMalloc+0xb0>
 800419a:	bf00      	nop
 800419c:	20001210 	.word	0x20001210
 80041a0:	2000b214 	.word	0x2000b214
 80041a4:	2000b228 	.word	0x2000b228
 80041a8:	2000b21c 	.word	0x2000b21c
 80041ac:	2000b220 	.word	0x2000b220
 80041b0:	20001214 	.word	0x20001214
 80041b4:	2000b218 	.word	0x2000b218

080041b8 <vPortFree>:
	if( pv != NULL )
 80041b8:	b1d0      	cbz	r0, 80041f0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041ba:	4a2b      	ldr	r2, [pc, #172]	; (8004268 <vPortFree+0xb0>)
 80041bc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80041c0:	6812      	ldr	r2, [r2, #0]
 80041c2:	4213      	tst	r3, r2
 80041c4:	d00b      	beq.n	80041de <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041c6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80041ca:	b191      	cbz	r1, 80041f2 <vPortFree+0x3a>
 80041cc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	e7fe      	b.n	80041dc <vPortFree+0x24>
 80041de:	f04f 0340 	mov.w	r3, #64	; 0x40
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80041ee:	e7fe      	b.n	80041ee <vPortFree+0x36>
 80041f0:	4770      	bx	lr
{
 80041f2:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041f4:	ea23 0302 	bic.w	r3, r3, r2
{
 80041f8:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80041fa:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041fe:	4c1b      	ldr	r4, [pc, #108]	; (800426c <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004200:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8004202:	f7ff f82b 	bl	800325c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004206:	9801      	ldr	r0, [sp, #4]
 8004208:	6822      	ldr	r2, [r4, #0]
 800420a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800420e:	4b18      	ldr	r3, [pc, #96]	; (8004270 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004210:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8004212:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004214:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004216:	461a      	mov	r2, r3
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4298      	cmp	r0, r3
 800421c:	d8fb      	bhi.n	8004216 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800421e:	6854      	ldr	r4, [r2, #4]
 8004220:	eb02 0e04 	add.w	lr, r2, r4
 8004224:	4570      	cmp	r0, lr
 8004226:	d01a      	beq.n	800425e <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004228:	eb00 0c01 	add.w	ip, r0, r1
 800422c:	4563      	cmp	r3, ip
 800422e:	d00c      	beq.n	800424a <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004230:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8004232:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004234:	bf18      	it	ne
 8004236:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8004238:	4a0e      	ldr	r2, [pc, #56]	; (8004274 <vPortFree+0xbc>)
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	6013      	str	r3, [r2, #0]
}
 8004240:	b002      	add	sp, #8
 8004242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004246:	f7ff b811 	b.w	800326c <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800424a:	4c0b      	ldr	r4, [pc, #44]	; (8004278 <vPortFree+0xc0>)
 800424c:	6824      	ldr	r4, [r4, #0]
 800424e:	42a3      	cmp	r3, r4
 8004250:	d0ee      	beq.n	8004230 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004252:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004256:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004258:	e9c0 3100 	strd	r3, r1, [r0]
 800425c:	e7e9      	b.n	8004232 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800425e:	4421      	add	r1, r4
 8004260:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8004262:	4610      	mov	r0, r2
 8004264:	e7e0      	b.n	8004228 <vPortFree+0x70>
 8004266:	bf00      	nop
 8004268:	2000b214 	.word	0x2000b214
 800426c:	2000b218 	.word	0x2000b218
 8004270:	2000b228 	.word	0x2000b228
 8004274:	2000b224 	.word	0x2000b224
 8004278:	20001210 	.word	0x20001210

0800427c <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 800427c:	b199      	cbz	r1, 80042a6 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 800427e:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 8004280:	22ff      	movs	r2, #255	; 0xff
 8004282:	4d0a      	ldr	r5, [pc, #40]	; (80042ac <cal_crc16+0x30>)
 8004284:	4c0a      	ldr	r4, [pc, #40]	; (80042b0 <cal_crc16+0x34>)
 8004286:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 800428a:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 800428c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004290:	4053      	eors	r3, r2
    while(length--) {
 8004292:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8004294:	5cea      	ldrb	r2, [r5, r3]
 8004296:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 800429a:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 800429c:	d1f6      	bne.n	800428c <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 800429e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 80042a2:	bc30      	pop	{r4, r5}
 80042a4:	4770      	bx	lr
    while(length--) {
 80042a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 80042aa:	4770      	bx	lr
 80042ac:	0800dcec 	.word	0x0800dcec
 80042b0:	0800ddec 	.word	0x0800ddec

080042b4 <_ZL15set_response_okm12lora_event_t>:

bool loraif_isvalid_address(uint32_t address){
	return (address != LORAIF_INVALID_ADDRESS);
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 80042b4:	b530      	push	{r4, r5, lr}
 80042b6:	460a      	mov	r2, r1
 80042b8:	b087      	sub	sp, #28
	uint16_t crc = 0;
	char *temp = NULL;
 80042ba:	2300      	movs	r3, #0
	char *response_to_device = NULL;
	char *cmd_str = cmd_to_str(cmd, command_string);
 80042bc:	491b      	ldr	r1, [pc, #108]	; (800432c <_ZL15set_response_okm12lora_event_t+0x78>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 80042be:	4604      	mov	r4, r0
	char *cmd_str = cmd_to_str(cmd, command_string);
 80042c0:	4610      	mov	r0, r2
	char *response_to_device = NULL;
 80042c2:	e9cd 3304 	strd	r3, r3, [sp, #16]
	char *cmd_str = cmd_to_str(cmd, command_string);
 80042c6:	f000 ff31 	bl	800512c <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 80042ca:	4623      	mov	r3, r4
	char *cmd_str = cmd_to_str(cmd, command_string);
 80042cc:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 80042ce:	4918      	ldr	r1, [pc, #96]	; (8004330 <_ZL15set_response_okm12lora_event_t+0x7c>)
 80042d0:	9003      	str	r0, [sp, #12]
 80042d2:	a804      	add	r0, sp, #16
 80042d4:	f006 fbf4 	bl	800aac0 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80042d8:	9d04      	ldr	r5, [sp, #16]
 80042da:	4628      	mov	r0, r5
 80042dc:	f7fb ff92 	bl	8000204 <strlen>
 80042e0:	b281      	uxth	r1, r0
 80042e2:	4628      	mov	r0, r5
 80042e4:	f7ff ffca 	bl	800427c <cal_crc16>
	if(temp != NULL) free(temp);
 80042e8:	9b04      	ldr	r3, [sp, #16]
 80042ea:	9a03      	ldr	r2, [sp, #12]
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80042ec:	4605      	mov	r5, r0
	if(temp != NULL) free(temp);
 80042ee:	b11b      	cbz	r3, 80042f8 <_ZL15set_response_okm12lora_event_t+0x44>
 80042f0:	4618      	mov	r0, r3
 80042f2:	f006 fc3d 	bl	800ab70 <free>
 80042f6:	9a03      	ldr	r2, [sp, #12]

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, (unsigned int)addr, crc);
 80042f8:	490e      	ldr	r1, [pc, #56]	; (8004334 <_ZL15set_response_okm12lora_event_t+0x80>)
 80042fa:	9500      	str	r5, [sp, #0]
 80042fc:	4623      	mov	r3, r4
 80042fe:	a805      	add	r0, sp, #20
 8004300:	f006 fbde 	bl	800aac0 <asiprintf>

	if(xQueueSend(response_queue, &response_to_device, 5) == pdFALSE){
 8004304:	4a0c      	ldr	r2, [pc, #48]	; (8004338 <_ZL15set_response_okm12lora_event_t+0x84>)
 8004306:	2300      	movs	r3, #0
 8004308:	6810      	ldr	r0, [r2, #0]
 800430a:	a905      	add	r1, sp, #20
 800430c:	2205      	movs	r2, #5
 800430e:	f7fd fbbd 	bl	8001a8c <xQueueGenericSend>
 8004312:	b108      	cbz	r0, 8004318 <_ZL15set_response_okm12lora_event_t+0x64>
		loraif_debug((char *)"Can't send to response_queue", __LINE__, __FUNCTION__);
	}
}
 8004314:	b007      	add	sp, #28
 8004316:	bd30      	pop	{r4, r5, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004318:	4b08      	ldr	r3, [pc, #32]	; (800433c <_ZL15set_response_okm12lora_event_t+0x88>)
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <_ZL15set_response_okm12lora_event_t+0x8c>)
 800431e:	4909      	ldr	r1, [pc, #36]	; (8004344 <_ZL15set_response_okm12lora_event_t+0x90>)
 8004320:	4809      	ldr	r0, [pc, #36]	; (8004348 <_ZL15set_response_okm12lora_event_t+0x94>)
 8004322:	23af      	movs	r3, #175	; 0xaf
 8004324:	f005 fc22 	bl	8009b6c <LOG_DEBUG>
}
 8004328:	b007      	add	sp, #28
 800432a:	bd30      	pop	{r4, r5, pc}
 800432c:	2000000c 	.word	0x2000000c
 8004330:	0800deec 	.word	0x0800deec
 8004334:	0800df0c 	.word	0x0800df0c
 8004338:	2000b25c 	.word	0x2000b25c
 800433c:	0800df7c 	.word	0x0800df7c
 8004340:	0800df38 	.word	0x0800df38
 8004344:	0800df58 	.word	0x0800df58
 8004348:	0800df74 	.word	0x0800df74

0800434c <_ZL15loraif_transmitPc.part.0>:
static void loraif_transmit(char *str){
 800434c:	b570      	push	{r4, r5, r6, lr}
		loraif->setSyncWord(_send_syncword);
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <_ZL15loraif_transmitPc.part.0+0x5c>)
 8004350:	4c16      	ldr	r4, [pc, #88]	; (80043ac <_ZL15loraif_transmitPc.part.0+0x60>)
 8004352:	7819      	ldrb	r1, [r3, #0]
static void loraif_transmit(char *str){
 8004354:	4605      	mov	r5, r0
		loraif->setSyncWord(_send_syncword);
 8004356:	6820      	ldr	r0, [r4, #0]
 8004358:	f001 fd7c 	bl	8005e54 <_ZN6sx127x11setSyncWordEh>
		loraif->beginPacket();
 800435c:	2100      	movs	r1, #0
 800435e:	6820      	ldr	r0, [r4, #0]
 8004360:	f001 f990 	bl	8005684 <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 8004364:	4628      	mov	r0, r5
 8004366:	f7fb ff4d 	bl	8000204 <strlen>
 800436a:	4629      	mov	r1, r5
 800436c:	4602      	mov	r2, r0
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	f001 fbb8 	bl	8005ae4 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 8004374:	6820      	ldr	r0, [r4, #0]
 8004376:	2100      	movs	r1, #0
 8004378:	f001 fac4 	bl	8005904 <_ZN6sx127x9endPacketEb>
		LOG_LEVEL(TAG, str);
 800437c:	4629      	mov	r1, r5
 800437e:	480c      	ldr	r0, [pc, #48]	; (80043b0 <_ZL15loraif_transmitPc.part.0+0x64>)
 8004380:	f005 fbf4 	bl	8009b6c <LOG_DEBUG>
		loraif->setSyncWord(_recv_syncword);
 8004384:	4b0b      	ldr	r3, [pc, #44]	; (80043b4 <_ZL15loraif_transmitPc.part.0+0x68>)
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	7819      	ldrb	r1, [r3, #0]
 800438a:	f001 fd63 	bl	8005e54 <_ZN6sx127x11setSyncWordEh>
		loraif->Receive(0);
 800438e:	6820      	ldr	r0, [r4, #0]
 8004390:	2100      	movs	r1, #0
 8004392:	f001 fc7b 	bl	8005c8c <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <_ZL15loraif_transmitPc.part.0+0x6c>)
 8004398:	2300      	movs	r3, #0
 800439a:	6810      	ldr	r0, [r2, #0]
}
 800439c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		xSemaphoreGive(tranfer_smp);
 80043a0:	461a      	mov	r2, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	f7fd bb72 	b.w	8001a8c <xQueueGenericSend>
 80043a8:	2000b245 	.word	0x2000b245
 80043ac:	2000b24c 	.word	0x2000b24c
 80043b0:	0800df74 	.word	0x0800df74
 80043b4:	2000b244 	.word	0x2000b244
 80043b8:	2000b260 	.word	0x2000b260

080043bc <loraif_request.part.0>:

void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 80043bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
       *  Returns true if the %list is empty.  (Thus begin() would equal
       *  end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80043c0:	4d73      	ldr	r5, [pc, #460]	; (8004590 <loraif_request.part.0+0x1d4>)
 80043c2:	461e      	mov	r6, r3
	if(xSemaphoreTake(req_data_smp, 5)){
		if (loraif_device_list.empty()) {
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	42ab      	cmp	r3, r5
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 80043c8:	b08b      	sub	sp, #44	; 0x2c
		if (loraif_device_list.empty()) {
 80043ca:	f000 80bd 	beq.w	8004548 <loraif_request.part.0+0x18c>
			loraif_debug((char *)"Device list empty", __LINE__, __FUNCTION__);
			return;
		}

		uint16_t crc = 0;
		char *req_data = NULL, *temp = NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	4604      	mov	r4, r0
 80043d2:	4608      	mov	r0, r1

		char *cmd_str = cmd_to_str(cmd, command_string);
 80043d4:	496f      	ldr	r1, [pc, #444]	; (8004594 <loraif_request.part.0+0x1d8>)
 80043d6:	4617      	mov	r7, r2
		char *req_data = NULL, *temp = NULL;
 80043d8:	e9cd 3306 	strd	r3, r3, [sp, #24]
		char *cmd_str = cmd_to_str(cmd, command_string);
 80043dc:	f000 fea6 	bl	800512c <cmd_to_str>
		asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 80043e0:	496d      	ldr	r1, [pc, #436]	; (8004598 <loraif_request.part.0+0x1dc>)
 80043e2:	9005      	str	r0, [sp, #20]
		char *cmd_str = cmd_to_str(cmd, command_string);
 80043e4:	4602      	mov	r2, r0
		asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,", cmd_str, (unsigned int)dev_address, data, require_resp);
 80043e6:	4623      	mov	r3, r4
 80043e8:	e9cd 7600 	strd	r7, r6, [sp]
 80043ec:	a807      	add	r0, sp, #28
 80043ee:	f006 fb67 	bl	800aac0 <asiprintf>
		crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80043f2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80043f6:	4640      	mov	r0, r8
 80043f8:	f7fb ff04 	bl	8000204 <strlen>
 80043fc:	b281      	uxth	r1, r0
 80043fe:	4640      	mov	r0, r8
 8004400:	f7ff ff3c 	bl	800427c <cal_crc16>
 8004404:	4680      	mov	r8, r0
		if(temp != NULL) free(temp);
 8004406:	9807      	ldr	r0, [sp, #28]
 8004408:	9a05      	ldr	r2, [sp, #20]
 800440a:	b110      	cbz	r0, 8004412 <loraif_request.part.0+0x56>
 800440c:	f006 fbb0 	bl	800ab70 <free>
 8004410:	9a05      	ldr	r2, [sp, #20]

		asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"require_response\":%d,\"crc\":0x%04x}", cmd_str, (unsigned int)dev_address, data, require_resp, crc);
 8004412:	4962      	ldr	r1, [pc, #392]	; (800459c <loraif_request.part.0+0x1e0>)
 8004414:	9700      	str	r7, [sp, #0]
 8004416:	e9cd 6801 	strd	r6, r8, [sp, #4]
 800441a:	4623      	mov	r3, r4
 800441c:	a806      	add	r0, sp, #24
 800441e:	f006 fb4f 	bl	800aac0 <asiprintf>
 8004422:	682a      	ldr	r2, [r5, #0]
	show_device_list();
}

loraif_dev_t *loraif_select_device(uint32_t device_address){

    if (loraif_device_list.empty()) {
 8004424:	42aa      	cmp	r2, r5
 8004426:	f000 809f 	beq.w	8004568 <loraif_request.part.0+0x1ac>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == device_address) {
 800442a:	6891      	ldr	r1, [r2, #8]
 800442c:	6809      	ldr	r1, [r1, #0]
 800442e:	428c      	cmp	r4, r1
 8004430:	d016      	beq.n	8004460 <loraif_request.part.0+0xa4>
	_M_node = _M_node->_M_next;
 8004432:	6812      	ldr	r2, [r2, #0]
    while (device != loraif_device_list.end()) {
 8004434:	42aa      	cmp	r2, r5
 8004436:	d1f8      	bne.n	800442a <loraif_request.part.0+0x6e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004438:	4b59      	ldr	r3, [pc, #356]	; (80045a0 <loraif_request.part.0+0x1e4>)
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4a59      	ldr	r2, [pc, #356]	; (80045a4 <loraif_request.part.0+0x1e8>)
 800443e:	495a      	ldr	r1, [pc, #360]	; (80045a8 <loraif_request.part.0+0x1ec>)
 8004440:	485a      	ldr	r0, [pc, #360]	; (80045ac <loraif_request.part.0+0x1f0>)
 8004442:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 8004446:	f005 fb91 	bl	8009b6c <LOG_DEBUG>
			if(req_data != NULL) free(req_data);
 800444a:	9806      	ldr	r0, [sp, #24]
 800444c:	b108      	cbz	r0, 8004452 <loraif_request.part.0+0x96>
 800444e:	f006 fb8f 	bl	800ab70 <free>
			LOG_ERROR(TAG, "No device to request");
 8004452:	4957      	ldr	r1, [pc, #348]	; (80045b0 <loraif_request.part.0+0x1f4>)
 8004454:	4855      	ldr	r0, [pc, #340]	; (80045ac <loraif_request.part.0+0x1f0>)
 8004456:	f005 fb4b 	bl	8009af0 <LOG_ERROR>
}
 800445a:	b00b      	add	sp, #44	; 0x2c
 800445c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if(require_resp != 0){
 8004460:	b9e6      	cbnz	r6, 800449c <loraif_request.part.0+0xe0>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004462:	4b54      	ldr	r3, [pc, #336]	; (80045b4 <loraif_request.part.0+0x1f8>)
			loraif_transmit(req_data);
 8004464:	9c06      	ldr	r4, [sp, #24]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800446c:	f7fd ff04 	bl	8002278 <xQueueSemaphoreTake>
 8004470:	b968      	cbnz	r0, 800448e <loraif_request.part.0+0xd2>
		if(req_data != NULL) free(req_data);
 8004472:	9806      	ldr	r0, [sp, #24]
 8004474:	b108      	cbz	r0, 800447a <loraif_request.part.0+0xbe>
 8004476:	f006 fb7b 	bl	800ab70 <free>
		xSemaphoreGive(req_data_smp);
 800447a:	4a4f      	ldr	r2, [pc, #316]	; (80045b8 <loraif_request.part.0+0x1fc>)
 800447c:	2300      	movs	r3, #0
 800447e:	6810      	ldr	r0, [r2, #0]
 8004480:	4619      	mov	r1, r3
 8004482:	461a      	mov	r2, r3
 8004484:	f7fd fb02 	bl	8001a8c <xQueueGenericSend>
}
 8004488:	b00b      	add	sp, #44	; 0x2c
 800448a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800448e:	4620      	mov	r0, r4
 8004490:	f7ff ff5c 	bl	800434c <_ZL15loraif_transmitPc.part.0>
		if(req_data != NULL) free(req_data);
 8004494:	9806      	ldr	r0, [sp, #24]
 8004496:	2800      	cmp	r0, #0
 8004498:	d1ed      	bne.n	8004476 <loraif_request.part.0+0xba>
 800449a:	e7ee      	b.n	800447a <loraif_request.part.0+0xbe>
				loraif_request_prop_t *wait_response = (loraif_request_prop_t *)malloc(sizeof(loraif_request_prop_t));
 800449c:	2008      	movs	r0, #8
 800449e:	f006 fb5f 	bl	800ab60 <malloc>
 80044a2:	4606      	mov	r6, r0
 80044a4:	9008      	str	r0, [sp, #32]
				if(wait_response == NULL){
 80044a6:	2800      	cmp	r0, #0
 80044a8:	d068      	beq.n	800457c <loraif_request.part.0+0x1c0>
				wait_response->address = dev_address;
 80044aa:	6034      	str	r4, [r6, #0]
				wait_response->tick_start = get_tick();
 80044ac:	f004 f810 	bl	80084d0 <get_tick>
				uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 80044b0:	4d42      	ldr	r5, [pc, #264]	; (80045bc <loraif_request.part.0+0x200>)
				wait_response->tick_start = get_tick();
 80044b2:	6070      	str	r0, [r6, #4]
				loraif_request_prop_t *in_queue = NULL;
 80044b4:	2400      	movs	r4, #0
				uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 80044b6:	6828      	ldr	r0, [r5, #0]
				loraif_request_prop_t *in_queue = NULL;
 80044b8:	9409      	str	r4, [sp, #36]	; 0x24
				uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 80044ba:	f7fe f8c5 	bl	8002648 <uxQueueMessagesWaiting>
				for(uint8_t i=0; i<queue_len; i++){
 80044be:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 80044c2:	d02d      	beq.n	8004520 <loraif_request.part.0+0x164>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80044c4:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80045c0 <loraif_request.part.0+0x204>
 80044c8:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80045c4 <loraif_request.part.0+0x208>
 80044cc:	4f36      	ldr	r7, [pc, #216]	; (80045a8 <loraif_request.part.0+0x1ec>)
 80044ce:	e002      	b.n	80044d6 <loraif_request.part.0+0x11a>
				for(uint8_t i=0; i<queue_len; i++){
 80044d0:	b2e3      	uxtb	r3, r4
 80044d2:	429e      	cmp	r6, r3
 80044d4:	d924      	bls.n	8004520 <loraif_request.part.0+0x164>
					if(xQueueReceive(wait_response_queue, &in_queue, 5) == pdTRUE && in_queue != NULL){
 80044d6:	6828      	ldr	r0, [r5, #0]
 80044d8:	2205      	movs	r2, #5
 80044da:	a909      	add	r1, sp, #36	; 0x24
 80044dc:	f7fd fd4a 	bl	8001f74 <xQueueReceive>
 80044e0:	2801      	cmp	r0, #1
				for(uint8_t i=0; i<queue_len; i++){
 80044e2:	f104 0401 	add.w	r4, r4, #1
					if(xQueueReceive(wait_response_queue, &in_queue, 5) == pdTRUE && in_queue != NULL){
 80044e6:	d1f3      	bne.n	80044d0 <loraif_request.part.0+0x114>
 80044e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <loraif_request.part.0+0x114>
						if(in_queue->address == wait_response->address){
 80044ee:	9808      	ldr	r0, [sp, #32]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	6803      	ldr	r3, [r0, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d032      	beq.n	800455e <loraif_request.part.0+0x1a2>
						if(xQueueSend(wait_response_queue, &in_queue, 5) != pdTRUE){
 80044f8:	2300      	movs	r3, #0
 80044fa:	6828      	ldr	r0, [r5, #0]
 80044fc:	2205      	movs	r2, #5
 80044fe:	a909      	add	r1, sp, #36	; 0x24
 8004500:	f7fd fac4 	bl	8001a8c <xQueueGenericSend>
 8004504:	2801      	cmp	r0, #1
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004506:	f04f 03dd 	mov.w	r3, #221	; 0xdd
						if(xQueueSend(wait_response_queue, &in_queue, 5) != pdTRUE){
 800450a:	d0e1      	beq.n	80044d0 <loraif_request.part.0+0x114>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800450c:	4827      	ldr	r0, [pc, #156]	; (80045ac <loraif_request.part.0+0x1f0>)
 800450e:	f8cd 9000 	str.w	r9, [sp]
 8004512:	4642      	mov	r2, r8
 8004514:	4639      	mov	r1, r7
 8004516:	f005 fb29 	bl	8009b6c <LOG_DEBUG>
				for(uint8_t i=0; i<queue_len; i++){
 800451a:	b2e3      	uxtb	r3, r4
 800451c:	429e      	cmp	r6, r3
 800451e:	d8da      	bhi.n	80044d6 <loraif_request.part.0+0x11a>
				if(wait_response != NULL){
 8004520:	9b08      	ldr	r3, [sp, #32]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d09d      	beq.n	8004462 <loraif_request.part.0+0xa6>
					if(xQueueSend(wait_response_queue, &wait_response, 5) != pdTRUE){
 8004526:	6828      	ldr	r0, [r5, #0]
 8004528:	2300      	movs	r3, #0
 800452a:	2205      	movs	r2, #5
 800452c:	a908      	add	r1, sp, #32
 800452e:	f7fd faad 	bl	8001a8c <xQueueGenericSend>
 8004532:	2801      	cmp	r0, #1
 8004534:	d095      	beq.n	8004462 <loraif_request.part.0+0xa6>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <loraif_request.part.0+0x204>)
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <loraif_request.part.0+0x208>)
 800453c:	491a      	ldr	r1, [pc, #104]	; (80045a8 <loraif_request.part.0+0x1ec>)
 800453e:	481b      	ldr	r0, [pc, #108]	; (80045ac <loraif_request.part.0+0x1f0>)
 8004540:	23e3      	movs	r3, #227	; 0xe3
 8004542:	f005 fb13 	bl	8009b6c <LOG_DEBUG>
}
 8004546:	e78c      	b.n	8004462 <loraif_request.part.0+0xa6>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <loraif_request.part.0+0x204>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <loraif_request.part.0+0x20c>)
 800454e:	4916      	ldr	r1, [pc, #88]	; (80045a8 <loraif_request.part.0+0x1ec>)
 8004550:	4816      	ldr	r0, [pc, #88]	; (80045ac <loraif_request.part.0+0x1f0>)
 8004552:	23b6      	movs	r3, #182	; 0xb6
 8004554:	f005 fb0a 	bl	8009b6c <LOG_DEBUG>
}
 8004558:	b00b      	add	sp, #44	; 0x2c
 800455a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
							if(wait_response != NULL) free(wait_response);
 800455e:	f006 fb07 	bl	800ab70 <free>
							wait_response = NULL;
 8004562:	2300      	movs	r3, #0
 8004564:	9308      	str	r3, [sp, #32]
 8004566:	e7c7      	b.n	80044f8 <loraif_request.part.0+0x13c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <loraif_request.part.0+0x1e4>)
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <loraif_request.part.0+0x20c>)
 800456e:	490e      	ldr	r1, [pc, #56]	; (80045a8 <loraif_request.part.0+0x1ec>)
 8004570:	480e      	ldr	r0, [pc, #56]	; (80045ac <loraif_request.part.0+0x1f0>)
 8004572:	f240 13ed 	movw	r3, #493	; 0x1ed
 8004576:	f005 faf9 	bl	8009b6c <LOG_DEBUG>
		if(dev == NULL){
 800457a:	e766      	b.n	800444a <loraif_request.part.0+0x8e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <loraif_request.part.0+0x204>)
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <loraif_request.part.0+0x210>)
 8004582:	4909      	ldr	r1, [pc, #36]	; (80045a8 <loraif_request.part.0+0x1ec>)
 8004584:	4809      	ldr	r0, [pc, #36]	; (80045ac <loraif_request.part.0+0x1f0>)
 8004586:	23cf      	movs	r3, #207	; 0xcf
 8004588:	f005 faf0 	bl	8009b6c <LOG_DEBUG>
				wait_response->address = dev_address;
 800458c:	9e08      	ldr	r6, [sp, #32]
}
 800458e:	e78c      	b.n	80044aa <loraif_request.part.0+0xee>
 8004590:	2000b234 	.word	0x2000b234
 8004594:	2000000c 	.word	0x2000000c
 8004598:	0800dfb0 	.word	0x0800dfb0
 800459c:	0800dfe4 	.word	0x0800dfe4
 80045a0:	0800e028 	.word	0x0800e028
 80045a4:	0800e094 	.word	0x0800e094
 80045a8:	0800df58 	.word	0x0800df58
 80045ac:	0800df74 	.word	0x0800df74
 80045b0:	0800e040 	.word	0x0800e040
 80045b4:	2000b260 	.word	0x2000b260
 80045b8:	2000b254 	.word	0x2000b254
 80045bc:	2000b264 	.word	0x2000b264
 80045c0:	0800dfa0 	.word	0x0800dfa0
 80045c4:	0800e070 	.word	0x0800e070
 80045c8:	0800df8c 	.word	0x0800df8c
 80045cc:	0800e058 	.word	0x0800e058

080045d0 <loraif_init>:
void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 80045d0:	b510      	push	{r4, lr}
 80045d2:	4614      	mov	r4, r2
	loraif = lora;
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <loraif_init+0x74>)
void loraif_init(sx127x *lora, uint8_t send_syncword, uint8_t recv_syncword, uint32_t timeout, uint8_t max_not_response){
 80045d6:	f89d c008 	ldrb.w	ip, [sp, #8]
	loraif = lora;
 80045da:	6010      	str	r0, [r2, #0]
	resp_timeout = timeout;
 80045dc:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <loraif_init+0x78>)
	_send_syncword = send_syncword;
 80045de:	481b      	ldr	r0, [pc, #108]	; (800464c <loraif_init+0x7c>)
	resp_timeout = timeout;
 80045e0:	6013      	str	r3, [r2, #0]
	max_not_resp = max_not_response;
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <loraif_init+0x80>)
	_send_syncword = send_syncword;
 80045e4:	7001      	strb	r1, [r0, #0]
	max_not_resp = max_not_response;
 80045e6:	f883 c000 	strb.w	ip, [r3]
	_recv_syncword = recv_syncword;
 80045ea:	4b1a      	ldr	r3, [pc, #104]	; (8004654 <loraif_init+0x84>)
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 80045ec:	2200      	movs	r2, #0
 80045ee:	2104      	movs	r1, #4
 80045f0:	201e      	movs	r0, #30
	_recv_syncword = recv_syncword;
 80045f2:	701c      	strb	r4, [r3, #0]
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 80045f4:	f7fd fa08 	bl	8001a08 <xQueueGenericCreate>
 80045f8:	4b17      	ldr	r3, [pc, #92]	; (8004658 <loraif_init+0x88>)
 80045fa:	4604      	mov	r4, r0
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 80045fc:	2200      	movs	r2, #0
 80045fe:	2104      	movs	r1, #4
 8004600:	201e      	movs	r0, #30
	wait_response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(loraif_request_prop_t *));
 8004602:	601c      	str	r4, [r3, #0]
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8004604:	f7fd fa00 	bl	8001a08 <xQueueGenericCreate>
 8004608:	4b14      	ldr	r3, [pc, #80]	; (800465c <loraif_init+0x8c>)
 800460a:	4604      	mov	r4, r0
	tranfer_smp = xSemaphoreCreateBinary();
 800460c:	2203      	movs	r2, #3
 800460e:	2100      	movs	r1, #0
 8004610:	2001      	movs	r0, #1
	response_queue = xQueueCreate(LORAIF_QUEUE_SIZE, sizeof(char *));
 8004612:	601c      	str	r4, [r3, #0]
	tranfer_smp = xSemaphoreCreateBinary();
 8004614:	f7fd f9f8 	bl	8001a08 <xQueueGenericCreate>
 8004618:	4911      	ldr	r1, [pc, #68]	; (8004660 <loraif_init+0x90>)
	xSemaphoreGive(tranfer_smp);
 800461a:	2300      	movs	r3, #0
 800461c:	461a      	mov	r2, r3
	tranfer_smp = xSemaphoreCreateBinary();
 800461e:	6008      	str	r0, [r1, #0]
	xSemaphoreGive(tranfer_smp);
 8004620:	4619      	mov	r1, r3
 8004622:	f7fd fa33 	bl	8001a8c <xQueueGenericSend>
	req_data_smp = xSemaphoreCreateBinary();
 8004626:	2203      	movs	r2, #3
 8004628:	2100      	movs	r1, #0
 800462a:	2001      	movs	r0, #1
 800462c:	f7fd f9ec 	bl	8001a08 <xQueueGenericCreate>
 8004630:	490c      	ldr	r1, [pc, #48]	; (8004664 <loraif_init+0x94>)
	xSemaphoreGive(req_data_smp);
 8004632:	2300      	movs	r3, #0
	req_data_smp = xSemaphoreCreateBinary();
 8004634:	6008      	str	r0, [r1, #0]
}
 8004636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	xSemaphoreGive(req_data_smp);
 800463a:	461a      	mov	r2, r3
 800463c:	4619      	mov	r1, r3
 800463e:	f7fd ba25 	b.w	8001a8c <xQueueGenericSend>
 8004642:	bf00      	nop
 8004644:	2000b24c 	.word	0x2000b24c
 8004648:	2000b258 	.word	0x2000b258
 800464c:	2000b245 	.word	0x2000b245
 8004650:	2000b250 	.word	0x2000b250
 8004654:	2000b244 	.word	0x2000b244
 8004658:	2000b264 	.word	0x2000b264
 800465c:	2000b25c 	.word	0x2000b25c
 8004660:	2000b260 	.word	0x2000b260
 8004664:	2000b254 	.word	0x2000b254

08004668 <loraif_register_event_handler>:
	fpeventhandler = peventhandler;
 8004668:	4b01      	ldr	r3, [pc, #4]	; (8004670 <loraif_register_event_handler+0x8>)
 800466a:	6018      	str	r0, [r3, #0]
}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	2000b240 	.word	0x2000b240

08004674 <loraif_check_crc>:
bool loraif_check_crc(char *data){
 8004674:	b570      	push	{r4, r5, r6, lr}
 8004676:	b086      	sub	sp, #24
	pkt_json_t json;
 8004678:	2300      	movs	r3, #0
	pkt_t pkt;
 800467a:	2500      	movs	r5, #0
 800467c:	2400      	movs	r4, #0
	crc_start = strstr(src_cpy, "\"crc\"");
 800467e:	4919      	ldr	r1, [pc, #100]	; (80046e4 <loraif_check_crc+0x70>)
	pkt_json_t json;
 8004680:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 8004682:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 8004686:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_crc(char *data){
 800468a:	4605      	mov	r5, r0
	pkt_json_t json;
 800468c:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 800468e:	f007 f9f5 	bl	800ba7c <strstr>
	if(crc_start == NULL) return false;
 8004692:	b128      	cbz	r0, 80046a0 <loraif_check_crc+0x2c>
	err = parse_packet(src_cpy, &pkt);
 8004694:	4604      	mov	r4, r0
 8004696:	4669      	mov	r1, sp
 8004698:	4628      	mov	r0, r5
 800469a:	f000 fcc7 	bl	800502c <parse_packet>
	if(err != PKT_ERR_OK) return false;
 800469e:	b110      	cbz	r0, 80046a6 <loraif_check_crc+0x32>
	if(crc_start == NULL) return false;
 80046a0:	2000      	movs	r0, #0
}
 80046a2:	b006      	add	sp, #24
 80046a4:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 80046a6:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <loraif_check_crc+0x74>)
 80046a8:	9801      	ldr	r0, [sp, #4]
 80046aa:	a903      	add	r1, sp, #12
 80046ac:	f000 fb94 	bl	8004dd8 <json_get_object>
	if(err != PKT_ERR_OK) return false;
 80046b0:	2800      	cmp	r0, #0
 80046b2:	d1f5      	bne.n	80046a0 <loraif_check_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 80046b4:	4601      	mov	r1, r0
 80046b6:	2210      	movs	r2, #16
 80046b8:	9805      	ldr	r0, [sp, #20]
 80046ba:	f007 fa77 	bl	800bbac <strtol>
 80046be:	4606      	mov	r6, r0
	json_release_object(&json);
 80046c0:	a803      	add	r0, sp, #12
 80046c2:	f000 fca1 	bl	8005008 <json_release_object>
	release_packet(&pkt);
 80046c6:	4668      	mov	r0, sp
 80046c8:	f000 fd0a 	bl	80050e0 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 80046cc:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 80046ce:	b289      	uxth	r1, r1
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7ff fdd3 	bl	800427c <cal_crc16>
	if(crc != icrc) return false;
 80046d6:	b2b6      	uxth	r6, r6
 80046d8:	1a30      	subs	r0, r6, r0
 80046da:	fab0 f080 	clz	r0, r0
 80046de:	0940      	lsrs	r0, r0, #5
}
 80046e0:	b006      	add	sp, #24
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	0800e0c0 	.word	0x0800e0c0
 80046e8:	0800e0c8 	.word	0x0800e0c8

080046ec <loraif_isvalid_address>:
}
 80046ec:	3800      	subs	r0, #0
 80046ee:	bf18      	it	ne
 80046f0:	2001      	movne	r0, #1
 80046f2:	4770      	bx	lr

080046f4 <loraif_request>:
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 80046f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(xSemaphoreTake(req_data_smp, 5)){
 80046f8:	4c0a      	ldr	r4, [pc, #40]	; (8004724 <loraif_request+0x30>)
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 80046fa:	4684      	mov	ip, r0
 80046fc:	460d      	mov	r5, r1
	if(xSemaphoreTake(req_data_smp, 5)){
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	2105      	movs	r1, #5
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data, int require_resp){
 8004702:	4664      	mov	r4, ip
 8004704:	4616      	mov	r6, r2
 8004706:	461f      	mov	r7, r3
	if(xSemaphoreTake(req_data_smp, 5)){
 8004708:	f7fd fdb6 	bl	8002278 <xQueueSemaphoreTake>
 800470c:	b138      	cbz	r0, 800471e <loraif_request+0x2a>
 800470e:	463b      	mov	r3, r7
 8004710:	4632      	mov	r2, r6
 8004712:	4629      	mov	r1, r5
 8004714:	4620      	mov	r0, r4
}
 8004716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800471a:	f7ff be4f 	b.w	80043bc <loraif_request.part.0>
 800471e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004722:	bf00      	nop
 8004724:	2000b254 	.word	0x2000b254

08004728 <loraif_rx_process>:
void loraif_rx_process(void *param){
 8004728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800472c:	b08d      	sub	sp, #52	; 0x34
	if(xQueueReceive(*queue, &rx_full, 5)){
 800472e:	6800      	ldr	r0, [r0, #0]
 8004730:	2205      	movs	r2, #5
 8004732:	a902      	add	r1, sp, #8
 8004734:	f7fd fc1e 	bl	8001f74 <xQueueReceive>
 8004738:	b910      	cbnz	r0, 8004740 <loraif_rx_process+0x18>
}
 800473a:	b00d      	add	sp, #52	; 0x34
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt_json_t json;
 8004740:	2300      	movs	r3, #0
		pkt_t pkt;
 8004742:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 8004744:	9802      	ldr	r0, [sp, #8]
		pkt_json_t json;
 8004746:	9309      	str	r3, [sp, #36]	; 0x24
		pkt_t pkt;
 8004748:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 800474a:	a906      	add	r1, sp, #24
		pkt_t pkt;
 800474c:	e9cd 4506 	strd	r4, r5, [sp, #24]
		char *response_to_device = NULL;
 8004750:	e9cd 3303 	strd	r3, r3, [sp, #12]
		pkt_json_t json;
 8004754:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8004758:	930b      	str	r3, [sp, #44]	; 0x2c
		err = parse_packet(rx_full, &pkt);
 800475a:	f000 fc67 	bl	800502c <parse_packet>
		if(err == PKT_ERR_OK){
 800475e:	4605      	mov	r5, r0
 8004760:	2800      	cmp	r0, #0
 8004762:	d153      	bne.n	800480c <loraif_rx_process+0xe4>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 8004764:	4999      	ldr	r1, [pc, #612]	; (80049cc <loraif_rx_process+0x2a4>)
 8004766:	9806      	ldr	r0, [sp, #24]
 8004768:	220b      	movs	r2, #11
 800476a:	f000 fcc9 	bl	8005100 <str_to_cmd>
 800476e:	b2c6      	uxtb	r6, r0
			if(cmd == LORA_REQ_ADDRESS){
 8004770:	2e01      	cmp	r6, #1
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 8004772:	af09      	add	r7, sp, #36	; 0x24
			if(cmd == LORA_REQ_ADDRESS){
 8004774:	d062      	beq.n	800483c <loraif_rx_process+0x114>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004776:	4a96      	ldr	r2, [pc, #600]	; (80049d0 <loraif_rx_process+0x2a8>)
 8004778:	9807      	ldr	r0, [sp, #28]
 800477a:	4639      	mov	r1, r7
 800477c:	f000 fb2c 	bl	8004dd8 <json_get_object>
				addr = strtol(json.value, NULL, 16);
 8004780:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 8004782:	4604      	mov	r4, r0
				addr = strtol(json.value, NULL, 16);
 8004784:	4629      	mov	r1, r5
 8004786:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004788:	f007 fa10 	bl	800bbac <strtol>
 800478c:	4680      	mov	r8, r0
				if(err == PKT_ERR_OK){
 800478e:	2c00      	cmp	r4, #0
 8004790:	f040 80c7 	bne.w	8004922 <loraif_rx_process+0x1fa>
					if(cmd == LORA_ERR){
 8004794:	2e00      	cmp	r6, #0
 8004796:	d076      	beq.n	8004886 <loraif_rx_process+0x15e>
					else if(cmd == LORA_UPDATE_ADDRESS){
 8004798:	2e02      	cmp	r6, #2
 800479a:	f000 80c9 	beq.w	8004930 <loraif_rx_process+0x208>
					else if(cmd == LORA_UPDATE_STATE){
 800479e:	2e03      	cmp	r6, #3
 80047a0:	f000 80fc 	beq.w	800499c <loraif_rx_process+0x274>
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 80047a4:	2e06      	cmp	r6, #6
 80047a6:	4d8b      	ldr	r5, [pc, #556]	; (80049d4 <loraif_rx_process+0x2ac>)
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047a8:	f8df b230 	ldr.w	fp, [pc, #560]	; 80049dc <loraif_rx_process+0x2b4>
 80047ac:	f8df a274 	ldr.w	sl, [pc, #628]	; 8004a24 <loraif_rx_process+0x2fc>
 80047b0:	f8df 9230 	ldr.w	r9, [pc, #560]	; 80049e4 <loraif_rx_process+0x2bc>
						loraif_request_prop_t *require_resp_prop = NULL;
 80047b4:	9405      	str	r4, [sp, #20]
						if(cmd == LORA_RES_DATA) cmd = LORA_REQ_DATA;
 80047b6:	bf08      	it	eq
 80047b8:	2605      	moveq	r6, #5
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 80047ba:	6828      	ldr	r0, [r5, #0]
 80047bc:	f7fd ff44 	bl	8002648 <uxQueueMessagesWaiting>
 80047c0:	b2e3      	uxtb	r3, r4
 80047c2:	4298      	cmp	r0, r3
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 5) == pdTRUE && require_resp_prop != NULL){
 80047c4:	f04f 0205 	mov.w	r2, #5
 80047c8:	a905      	add	r1, sp, #20
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 80047ca:	d947      	bls.n	800485c <loraif_rx_process+0x134>
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 5) == pdTRUE && require_resp_prop != NULL){
 80047cc:	6828      	ldr	r0, [r5, #0]
 80047ce:	f7fd fbd1 	bl	8001f74 <xQueueReceive>
 80047d2:	2801      	cmp	r0, #1
 80047d4:	f104 0401 	add.w	r4, r4, #1
 80047d8:	d1ef      	bne.n	80047ba <loraif_rx_process+0x92>
 80047da:	9805      	ldr	r0, [sp, #20]
									if(xQueueSend(wait_response_queue, &require_resp_prop, 5) != pdTRUE){
 80047dc:	2300      	movs	r3, #0
 80047de:	a905      	add	r1, sp, #20
							if(xQueueReceive(wait_response_queue, &require_resp_prop, 5) == pdTRUE && require_resp_prop != NULL){
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d0ea      	beq.n	80047ba <loraif_rx_process+0x92>
								if(require_resp_prop->address == addr){
 80047e4:	6802      	ldr	r2, [r0, #0]
 80047e6:	4542      	cmp	r2, r8
 80047e8:	f000 80b5 	beq.w	8004956 <loraif_rx_process+0x22e>
									if(xQueueSend(wait_response_queue, &require_resp_prop, 5) != pdTRUE){
 80047ec:	6828      	ldr	r0, [r5, #0]
 80047ee:	2205      	movs	r2, #5
 80047f0:	f7fd f94c 	bl	8001a8c <xQueueGenericSend>
 80047f4:	2801      	cmp	r0, #1
 80047f6:	d0e0      	beq.n	80047ba <loraif_rx_process+0x92>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047f8:	4877      	ldr	r0, [pc, #476]	; (80049d8 <loraif_rx_process+0x2b0>)
 80047fa:	f8cd b000 	str.w	fp, [sp]
 80047fe:	f240 1351 	movw	r3, #337	; 0x151
 8004802:	4652      	mov	r2, sl
 8004804:	4649      	mov	r1, r9
 8004806:	f005 f9b1 	bl	8009b6c <LOG_DEBUG>
						for(uint8_t i=0; i<uxQueueMessagesWaiting(wait_response_queue); i++){
 800480a:	e7d6      	b.n	80047ba <loraif_rx_process+0x92>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800480c:	4b73      	ldr	r3, [pc, #460]	; (80049dc <loraif_rx_process+0x2b4>)
 800480e:	9300      	str	r3, [sp, #0]
 8004810:	4a73      	ldr	r2, [pc, #460]	; (80049e0 <loraif_rx_process+0x2b8>)
 8004812:	4974      	ldr	r1, [pc, #464]	; (80049e4 <loraif_rx_process+0x2bc>)
 8004814:	4870      	ldr	r0, [pc, #448]	; (80049d8 <loraif_rx_process+0x2b0>)
 8004816:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800481a:	f005 f9a7 	bl	8009b6c <LOG_DEBUG>
 800481e:	af09      	add	r7, sp, #36	; 0x24
		json_release_object(&json);
 8004820:	4638      	mov	r0, r7
 8004822:	f000 fbf1 	bl	8005008 <json_release_object>
		release_packet(&pkt);
 8004826:	a806      	add	r0, sp, #24
 8004828:	f000 fc5a 	bl	80050e0 <release_packet>
		if(rx_full != NULL) free(rx_full);
 800482c:	9802      	ldr	r0, [sp, #8]
 800482e:	2800      	cmp	r0, #0
 8004830:	d083      	beq.n	800473a <loraif_rx_process+0x12>
 8004832:	f006 f99d 	bl	800ab70 <free>
}
 8004836:	b00d      	add	sp, #52	; 0x34
 8004838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"key");
 800483c:	4a6a      	ldr	r2, [pc, #424]	; (80049e8 <loraif_rx_process+0x2c0>)
 800483e:	9807      	ldr	r0, [sp, #28]
 8004840:	4639      	mov	r1, r7
 8004842:	f000 fac9 	bl	8004dd8 <json_get_object>
				if(err == PKT_ERR_OK){
 8004846:	b340      	cbz	r0, 800489a <loraif_rx_process+0x172>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004848:	4b64      	ldr	r3, [pc, #400]	; (80049dc <loraif_rx_process+0x2b4>)
 800484a:	4a68      	ldr	r2, [pc, #416]	; (80049ec <loraif_rx_process+0x2c4>)
 800484c:	9300      	str	r3, [sp, #0]
		uint32_t addr = LORAIF_INVALID_ADDRESS;
 800484e:	46a8      	mov	r8, r5
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004850:	f44f 7391 	mov.w	r3, #290	; 0x122
 8004854:	4963      	ldr	r1, [pc, #396]	; (80049e4 <loraif_rx_process+0x2bc>)
 8004856:	4860      	ldr	r0, [pc, #384]	; (80049d8 <loraif_rx_process+0x2b0>)
 8004858:	f005 f988 	bl	8009b6c <LOG_DEBUG>
				json_release_object(&json);
 800485c:	4638      	mov	r0, r7
 800485e:	f000 fbd3 	bl	8005008 <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 8004862:	9a07      	ldr	r2, [sp, #28]
 8004864:	4962      	ldr	r1, [pc, #392]	; (80049f0 <loraif_rx_process+0x2c8>)
 8004866:	a803      	add	r0, sp, #12
 8004868:	f006 f92a 	bl	800aac0 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, addr, evt_data);
 800486c:	4b61      	ldr	r3, [pc, #388]	; (80049f4 <loraif_rx_process+0x2cc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	b11b      	cbz	r3, 800487a <loraif_rx_process+0x152>
 8004872:	9a03      	ldr	r2, [sp, #12]
 8004874:	4641      	mov	r1, r8
 8004876:	4630      	mov	r0, r6
 8004878:	4798      	blx	r3
			if(evt_data != NULL) free(evt_data);
 800487a:	9803      	ldr	r0, [sp, #12]
 800487c:	2800      	cmp	r0, #0
 800487e:	d0cf      	beq.n	8004820 <loraif_rx_process+0xf8>
 8004880:	f006 f976 	bl	800ab70 <free>
 8004884:	e7cc      	b.n	8004820 <loraif_rx_process+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004886:	4b55      	ldr	r3, [pc, #340]	; (80049dc <loraif_rx_process+0x2b4>)
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	4a5b      	ldr	r2, [pc, #364]	; (80049f8 <loraif_rx_process+0x2d0>)
 800488c:	4955      	ldr	r1, [pc, #340]	; (80049e4 <loraif_rx_process+0x2bc>)
 800488e:	4852      	ldr	r0, [pc, #328]	; (80049d8 <loraif_rx_process+0x2b0>)
 8004890:	f240 132f 	movw	r3, #303	; 0x12f
 8004894:	f005 f96a 	bl	8009b6c <LOG_DEBUG>
						cmd = LORA_ERR;
 8004898:	e7e0      	b.n	800485c <loraif_rx_process+0x134>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 800489a:	4601      	mov	r1, r0
 800489c:	2210      	movs	r2, #16
 800489e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80048a0:	4c56      	ldr	r4, [pc, #344]	; (80049fc <loraif_rx_process+0x2d4>)
 80048a2:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8004a28 <loraif_rx_process+0x300>
 80048a6:	f007 f981 	bl	800bbac <strtol>
 80048aa:	4605      	mov	r5, r0
					rng_set_seed(rand_num);
 80048ac:	f002 ffb8 	bl	8007820 <rng_set_seed>
						addr_by_gw = rng_generate_random_number();
 80048b0:	f002 ffbc 	bl	800782c <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 80048b4:	f8d9 2000 	ldr.w	r2, [r9]
 80048b8:	6020      	str	r0, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80048ba:	454a      	cmp	r2, r9
 80048bc:	d006      	beq.n	80048cc <loraif_rx_process+0x1a4>
        if ((*device)->address == num) {
 80048be:	6891      	ldr	r1, [r2, #8]
 80048c0:	6809      	ldr	r1, [r1, #0]
 80048c2:	4288      	cmp	r0, r1
 80048c4:	d0f4      	beq.n	80048b0 <loraif_rx_process+0x188>
	_M_node = _M_node->_M_next;
 80048c6:	6812      	ldr	r2, [r2, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80048c8:	454a      	cmp	r2, r9
 80048ca:	d1f8      	bne.n	80048be <loraif_rx_process+0x196>
					addr_by_gw &= 0x7FFFFFFFU;
 80048cc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					char *temp = NULL;
 80048d0:	2000      	movs	r0, #0
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 80048d2:	494b      	ldr	r1, [pc, #300]	; (8004a00 <loraif_rx_process+0x2d8>)
					char *temp = NULL;
 80048d4:	9005      	str	r0, [sp, #20]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 80048d6:	462b      	mov	r3, r5
 80048d8:	a805      	add	r0, sp, #20
					addr_by_gw &= 0x7FFFFFFFU;
 80048da:	6022      	str	r2, [r4, #0]
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,", (unsigned int)addr_by_gw, (unsigned int)rand_num);
 80048dc:	f006 f8f0 	bl	800aac0 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80048e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80048e4:	4640      	mov	r0, r8
 80048e6:	f7fb fc8d 	bl	8000204 <strlen>
 80048ea:	b281      	uxth	r1, r0
 80048ec:	4640      	mov	r0, r8
 80048ee:	f7ff fcc5 	bl	800427c <cal_crc16>
 80048f2:	4680      	mov	r8, r0
					if(temp != NULL) free(temp);
 80048f4:	9805      	ldr	r0, [sp, #20]
 80048f6:	b108      	cbz	r0, 80048fc <loraif_rx_process+0x1d4>
 80048f8:	f006 f93a 	bl	800ab70 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"key\":0x%08x,\"crc\":0x%04x}", (unsigned int)addr_by_gw, (unsigned int)rand_num, crc);
 80048fc:	f8cd 8000 	str.w	r8, [sp]
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	4940      	ldr	r1, [pc, #256]	; (8004a04 <loraif_rx_process+0x2dc>)
 8004904:	462b      	mov	r3, r5
 8004906:	a804      	add	r0, sp, #16
 8004908:	f006 f8da 	bl	800aac0 <asiprintf>
					if(xQueueSend(response_queue, &response_to_device, 5) == pdFALSE){
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <loraif_rx_process+0x2e0>)
 800490e:	a904      	add	r1, sp, #16
 8004910:	6818      	ldr	r0, [r3, #0]
 8004912:	2205      	movs	r2, #5
 8004914:	2300      	movs	r3, #0
 8004916:	f7fd f8b9 	bl	8001a8c <xQueueGenericSend>
 800491a:	b190      	cbz	r0, 8004942 <loraif_rx_process+0x21a>
		uint32_t addr = LORAIF_INVALID_ADDRESS;
 800491c:	f04f 0800 	mov.w	r8, #0
 8004920:	e79f      	b.n	8004862 <loraif_rx_process+0x13a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004922:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <loraif_rx_process+0x2b4>)
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	4a39      	ldr	r2, [pc, #228]	; (8004a0c <loraif_rx_process+0x2e4>)
 8004928:	f240 1365 	movw	r3, #357	; 0x165
					cmd = LORA_ERR;
 800492c:	462e      	mov	r6, r5
 800492e:	e791      	b.n	8004854 <loraif_rx_process+0x12c>
						if(addr == addr_by_gw){
 8004930:	4b32      	ldr	r3, [pc, #200]	; (80049fc <loraif_rx_process+0x2d4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4283      	cmp	r3, r0
 8004936:	d191      	bne.n	800485c <loraif_rx_process+0x134>
							set_response_ok(addr, cmd);
 8004938:	4631      	mov	r1, r6
 800493a:	f7ff fcbb 	bl	80042b4 <_ZL15set_response_okm12lora_event_t>
							cmd = LORA_ADD_DEVICE;
 800493e:	2608      	movs	r6, #8
							goto event_handle;
 8004940:	e78f      	b.n	8004862 <loraif_rx_process+0x13a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004942:	4b26      	ldr	r3, [pc, #152]	; (80049dc <loraif_rx_process+0x2b4>)
 8004944:	9300      	str	r3, [sp, #0]
 8004946:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <loraif_rx_process+0x2e8>)
 8004948:	4926      	ldr	r1, [pc, #152]	; (80049e4 <loraif_rx_process+0x2bc>)
 800494a:	4823      	ldr	r0, [pc, #140]	; (80049d8 <loraif_rx_process+0x2b0>)
 800494c:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8004950:	f005 f90c 	bl	8009b6c <LOG_DEBUG>
}
 8004954:	e7e2      	b.n	800491c <loraif_rx_process+0x1f4>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004956:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004a28 <loraif_rx_process+0x300>
									free(require_resp_prop);
 800495a:	f006 f909 	bl	800ab70 <free>
 800495e:	f8d9 3000 	ldr.w	r3, [r9]
									require_resp_prop = NULL;
 8004962:	2200      	movs	r2, #0
    if (loraif_device_list.empty()) {
 8004964:	454b      	cmp	r3, r9
									require_resp_prop = NULL;
 8004966:	9205      	str	r2, [sp, #20]
    if (loraif_device_list.empty()) {
 8004968:	d025      	beq.n	80049b6 <loraif_rx_process+0x28e>
        if ((*device)->address == device_address) {
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	6811      	ldr	r1, [r2, #0]
 800496e:	4588      	cmp	r8, r1
 8004970:	d00d      	beq.n	800498e <loraif_rx_process+0x266>
	_M_node = _M_node->_M_next;
 8004972:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004974:	454b      	cmp	r3, r9
 8004976:	d1f8      	bne.n	800496a <loraif_rx_process+0x242>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004978:	4b26      	ldr	r3, [pc, #152]	; (8004a14 <loraif_rx_process+0x2ec>)
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	4a26      	ldr	r2, [pc, #152]	; (8004a18 <loraif_rx_process+0x2f0>)
 800497e:	4919      	ldr	r1, [pc, #100]	; (80049e4 <loraif_rx_process+0x2bc>)
 8004980:	4815      	ldr	r0, [pc, #84]	; (80049d8 <loraif_rx_process+0x2b0>)
 8004982:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 8004986:	f005 f8f1 	bl	8009b6c <LOG_DEBUG>
								cmd = LORA_ERR;
 800498a:	2600      	movs	r6, #0
 800498c:	e769      	b.n	8004862 <loraif_rx_process+0x13a>
							err_dev->err_count = 0;
 800498e:	2300      	movs	r3, #0
 8004990:	7213      	strb	r3, [r2, #8]
							set_response_ok(addr, cmd);
 8004992:	4631      	mov	r1, r6
 8004994:	4640      	mov	r0, r8
 8004996:	f7ff fc8d 	bl	80042b4 <_ZL15set_response_okm12lora_event_t>
							goto event_handle;
 800499a:	e762      	b.n	8004862 <loraif_rx_process+0x13a>
							set_response_ok(addr, cmd);
 800499c:	4631      	mov	r1, r6
 800499e:	f7ff fc89 	bl	80042b4 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049a2:	4b0e      	ldr	r3, [pc, #56]	; (80049dc <loraif_rx_process+0x2b4>)
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	; (8004a1c <loraif_rx_process+0x2f4>)
 80049a8:	490e      	ldr	r1, [pc, #56]	; (80049e4 <loraif_rx_process+0x2bc>)
 80049aa:	480b      	ldr	r0, [pc, #44]	; (80049d8 <loraif_rx_process+0x2b0>)
 80049ac:	f240 133d 	movw	r3, #317	; 0x13d
 80049b0:	f005 f8dc 	bl	8009b6c <LOG_DEBUG>
							goto event_handle;
 80049b4:	e755      	b.n	8004862 <loraif_rx_process+0x13a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <loraif_rx_process+0x2ec>)
 80049b8:	9300      	str	r3, [sp, #0]
								cmd = LORA_ERR;
 80049ba:	4616      	mov	r6, r2
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80049bc:	4909      	ldr	r1, [pc, #36]	; (80049e4 <loraif_rx_process+0x2bc>)
 80049be:	4a18      	ldr	r2, [pc, #96]	; (8004a20 <loraif_rx_process+0x2f8>)
 80049c0:	4805      	ldr	r0, [pc, #20]	; (80049d8 <loraif_rx_process+0x2b0>)
 80049c2:	f240 13ed 	movw	r3, #493	; 0x1ed
 80049c6:	f005 f8d1 	bl	8009b6c <LOG_DEBUG>
							if(err_dev == NULL){
 80049ca:	e74a      	b.n	8004862 <loraif_rx_process+0x13a>
 80049cc:	2000000c 	.word	0x2000000c
 80049d0:	0800e168 	.word	0x0800e168
 80049d4:	2000b264 	.word	0x2000b264
 80049d8:	0800df74 	.word	0x0800df74
 80049dc:	0800e130 	.word	0x0800e130
 80049e0:	0800e1a4 	.word	0x0800e1a4
 80049e4:	0800df58 	.word	0x0800df58
 80049e8:	0800e0cc 	.word	0x0800e0cc
 80049ec:	0800e144 	.word	0x0800e144
 80049f0:	0800eb18 	.word	0x0800eb18
 80049f4:	2000b240 	.word	0x2000b240
 80049f8:	0800e170 	.word	0x0800e170
 80049fc:	2000b248 	.word	0x2000b248
 8004a00:	0800e1c0 	.word	0x0800e1c0
 8004a04:	0800e0d0 	.word	0x0800e0d0
 8004a08:	2000b25c 	.word	0x2000b25c
 8004a0c:	0800e194 	.word	0x0800e194
 8004a10:	0800e10c 	.word	0x0800e10c
 8004a14:	0800e028 	.word	0x0800e028
 8004a18:	0800e094 	.word	0x0800e094
 8004a1c:	0800e180 	.word	0x0800e180
 8004a20:	0800df8c 	.word	0x0800df8c
 8004a24:	0800e070 	.word	0x0800e070
 8004a28:	2000b234 	.word	0x2000b234

08004a2c <loraif_check_timeout>:
void loraif_check_timeout(void){
 8004a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 8004a30:	4f55      	ldr	r7, [pc, #340]	; (8004b88 <loraif_check_timeout+0x15c>)
void loraif_check_timeout(void){
 8004a32:	b087      	sub	sp, #28
	uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 8004a34:	6838      	ldr	r0, [r7, #0]
	loraif_request_prop_t *wait_response = NULL;
 8004a36:	2400      	movs	r4, #0
 8004a38:	9404      	str	r4, [sp, #16]
	uint8_t queue_len = uxQueueMessagesWaiting(wait_response_queue);
 8004a3a:	f7fd fe05 	bl	8002648 <uxQueueMessagesWaiting>
	for(uint8_t i=0; i<queue_len; i++){
 8004a3e:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 8004a42:	d036      	beq.n	8004ab2 <loraif_check_timeout+0x86>
			if(dt >= resp_timeout){
 8004a44:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8004bb8 <loraif_check_timeout+0x18c>
 8004a48:	e003      	b.n	8004a52 <loraif_check_timeout+0x26>
	for(uint8_t i=0; i<queue_len; i++){
 8004a4a:	3401      	adds	r4, #1
 8004a4c:	b2e3      	uxtb	r3, r4
 8004a4e:	42b3      	cmp	r3, r6
 8004a50:	d22f      	bcs.n	8004ab2 <loraif_check_timeout+0x86>
		if(xQueueReceive(wait_response_queue, &wait_response, 5) == pdTRUE && wait_response != NULL){
 8004a52:	6838      	ldr	r0, [r7, #0]
 8004a54:	2205      	movs	r2, #5
 8004a56:	a904      	add	r1, sp, #16
 8004a58:	f7fd fa8c 	bl	8001f74 <xQueueReceive>
 8004a5c:	2801      	cmp	r0, #1
 8004a5e:	d1f4      	bne.n	8004a4a <loraif_check_timeout+0x1e>
 8004a60:	9b04      	ldr	r3, [sp, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f1      	beq.n	8004a4a <loraif_check_timeout+0x1e>
			uint32_t dt = 0, tick_now = get_tick();
 8004a66:	f003 fd33 	bl	80084d0 <get_tick>
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004a6a:	9a04      	ldr	r2, [sp, #16]
 8004a6c:	6853      	ldr	r3, [r2, #4]
 8004a6e:	4283      	cmp	r3, r0
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004a70:	bf8c      	ite	hi
 8004a72:	ea6f 0803 	mvnhi.w	r8, r3
			if(tick_now >= wait_response->tick_start) dt = tick_now - wait_response->tick_start;
 8004a76:	eba0 0803 	subls.w	r8, r0, r3
			if(dt >= resp_timeout){
 8004a7a:	f8d9 3000 	ldr.w	r3, [r9]
			else                                      dt = (4294967295 - wait_response->tick_start) + tick_now;
 8004a7e:	bf88      	it	hi
 8004a80:	4480      	addhi	r8, r0
			if(dt >= resp_timeout){
 8004a82:	4543      	cmp	r3, r8
 8004a84:	d818      	bhi.n	8004ab8 <loraif_check_timeout+0x8c>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004a86:	4841      	ldr	r0, [pc, #260]	; (8004b8c <loraif_check_timeout+0x160>)
				loraif_dev_t *err_dev = loraif_select_device(wait_response->address);
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	6803      	ldr	r3, [r0, #0]
    if (loraif_device_list.empty()) {
 8004a8c:	4283      	cmp	r3, r0
 8004a8e:	d071      	beq.n	8004b74 <loraif_check_timeout+0x148>
        if ((*device)->address == device_address) {
 8004a90:	689d      	ldr	r5, [r3, #8]
 8004a92:	6829      	ldr	r1, [r5, #0]
 8004a94:	428a      	cmp	r2, r1
 8004a96:	d021      	beq.n	8004adc <loraif_check_timeout+0xb0>
	_M_node = _M_node->_M_next;
 8004a98:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 8004a9a:	4283      	cmp	r3, r0
 8004a9c:	d1f8      	bne.n	8004a90 <loraif_check_timeout+0x64>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <loraif_check_timeout+0x164>)
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	4a3c      	ldr	r2, [pc, #240]	; (8004b94 <loraif_check_timeout+0x168>)
 8004aa4:	493c      	ldr	r1, [pc, #240]	; (8004b98 <loraif_check_timeout+0x16c>)
 8004aa6:	483d      	ldr	r0, [pc, #244]	; (8004b9c <loraif_check_timeout+0x170>)
 8004aa8:	f44f 73fd 	mov.w	r3, #506	; 0x1fa
 8004aac:	f005 f85e 	bl	8009b6c <LOG_DEBUG>
				if(err_dev != NULL){
 8004ab0:	e7cb      	b.n	8004a4a <loraif_check_timeout+0x1e>
}
 8004ab2:	b007      	add	sp, #28
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(xQueueSend(wait_response_queue, &wait_response, 5) != pdTRUE){
 8004ab8:	6838      	ldr	r0, [r7, #0]
 8004aba:	2300      	movs	r3, #0
 8004abc:	2205      	movs	r2, #5
 8004abe:	a904      	add	r1, sp, #16
 8004ac0:	f7fc ffe4 	bl	8001a8c <xQueueGenericSend>
 8004ac4:	2801      	cmp	r0, #1
 8004ac6:	d0c0      	beq.n	8004a4a <loraif_check_timeout+0x1e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ac8:	4b35      	ldr	r3, [pc, #212]	; (8004ba0 <loraif_check_timeout+0x174>)
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4932      	ldr	r1, [pc, #200]	; (8004b98 <loraif_check_timeout+0x16c>)
 8004ace:	4833      	ldr	r0, [pc, #204]	; (8004b9c <loraif_check_timeout+0x170>)
 8004ad0:	4a34      	ldr	r2, [pc, #208]	; (8004ba4 <loraif_check_timeout+0x178>)
 8004ad2:	f240 13a9 	movw	r3, #425	; 0x1a9
 8004ad6:	f005 f849 	bl	8009b6c <LOG_DEBUG>
}
 8004ada:	e7b6      	b.n	8004a4a <loraif_check_timeout+0x1e>
					char *evt_data = NULL;
 8004adc:	2000      	movs	r0, #0
					asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004ade:	686b      	ldr	r3, [r5, #4]
 8004ae0:	4931      	ldr	r1, [pc, #196]	; (8004ba8 <loraif_check_timeout+0x17c>)
					char *evt_data = NULL;
 8004ae2:	9005      	str	r0, [sp, #20]
					asprintf(&evt_data, "{\"addr\":0x%08x,\"name\":\"%s\"}", (unsigned int)wait_response->address, err_dev->name);
 8004ae4:	a805      	add	r0, sp, #20
 8004ae6:	f005 ffeb 	bl	800aac0 <asiprintf>
					err_dev->err_count++;
 8004aea:	7a2b      	ldrb	r3, [r5, #8]
					xSemaphoreTake(req_data_smp, 5);
 8004aec:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8004bbc <loraif_check_timeout+0x190>
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004af0:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8004bc0 <loraif_check_timeout+0x194>
					xSemaphoreTake(req_data_smp, 5);
 8004af4:	f8da 0000 	ldr.w	r0, [sl]
					err_dev->err_count++;
 8004af8:	3301      	adds	r3, #1
 8004afa:	722b      	strb	r3, [r5, #8]
					xSemaphoreTake(req_data_smp, 5);
 8004afc:	2105      	movs	r1, #5
 8004afe:	f7fd fbbb 	bl	8002278 <xQueueSemaphoreTake>
					if(fpeventhandler != NULL) fpeventhandler(LORA_DEVICE_NOT_RESPONSE, wait_response->address, evt_data);
 8004b02:	f8db 3000 	ldr.w	r3, [fp]
 8004b06:	b19b      	cbz	r3, 8004b30 <loraif_check_timeout+0x104>
 8004b08:	9a04      	ldr	r2, [sp, #16]
 8004b0a:	200a      	movs	r0, #10
 8004b0c:	6811      	ldr	r1, [r2, #0]
 8004b0e:	9a05      	ldr	r2, [sp, #20]
 8004b10:	4798      	blx	r3
					if(err_dev->err_count >= max_not_resp){
 8004b12:	4b26      	ldr	r3, [pc, #152]	; (8004bac <loraif_check_timeout+0x180>)
 8004b14:	781a      	ldrb	r2, [r3, #0]
 8004b16:	7a2b      	ldrb	r3, [r5, #8]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d80a      	bhi.n	8004b32 <loraif_check_timeout+0x106>
						if(fpeventhandler != NULL) fpeventhandler(LORA_REMOVE_DEVICE, wait_response->address, evt_data);
 8004b1c:	f8db b000 	ldr.w	fp, [fp]
 8004b20:	f1bb 0f00 	cmp.w	fp, #0
 8004b24:	d005      	beq.n	8004b32 <loraif_check_timeout+0x106>
 8004b26:	9b04      	ldr	r3, [sp, #16]
 8004b28:	9a05      	ldr	r2, [sp, #20]
 8004b2a:	6819      	ldr	r1, [r3, #0]
 8004b2c:	2009      	movs	r0, #9
 8004b2e:	47d8      	blx	fp
					LOG_RET(TAG, "Device 0x%08x time = %lu, %d time not response. Queue size %d", (unsigned int)wait_response->address, dt, err_dev->err_count, uxQueueMessagesWaiting(wait_response_queue));
 8004b30:	7a2b      	ldrb	r3, [r5, #8]
 8004b32:	9a04      	ldr	r2, [sp, #16]
 8004b34:	6838      	ldr	r0, [r7, #0]
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	9202      	str	r2, [sp, #8]
 8004b3c:	f7fd fd84 	bl	8002648 <uxQueueMessagesWaiting>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	9001      	str	r0, [sp, #4]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	4815      	ldr	r0, [pc, #84]	; (8004b9c <loraif_check_timeout+0x170>)
 8004b48:	9a02      	ldr	r2, [sp, #8]
 8004b4a:	4919      	ldr	r1, [pc, #100]	; (8004bb0 <loraif_check_timeout+0x184>)
 8004b4c:	4643      	mov	r3, r8
 8004b4e:	f005 f8c7 	bl	8009ce0 <LOG_RET>
					if(evt_data != NULL) free(evt_data);
 8004b52:	9805      	ldr	r0, [sp, #20]
 8004b54:	b108      	cbz	r0, 8004b5a <loraif_check_timeout+0x12e>
 8004b56:	f006 f80b 	bl	800ab70 <free>
					if(wait_response != NULL) free(wait_response);
 8004b5a:	9804      	ldr	r0, [sp, #16]
 8004b5c:	b108      	cbz	r0, 8004b62 <loraif_check_timeout+0x136>
 8004b5e:	f006 f807 	bl	800ab70 <free>
					wait_response = NULL;
 8004b62:	2300      	movs	r3, #0
					xSemaphoreGive(req_data_smp);
 8004b64:	f8da 0000 	ldr.w	r0, [sl]
					wait_response = NULL;
 8004b68:	9304      	str	r3, [sp, #16]
					xSemaphoreGive(req_data_smp);
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f7fc ff8d 	bl	8001a8c <xQueueGenericSend>
 8004b72:	e76a      	b.n	8004a4a <loraif_check_timeout+0x1e>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004b74:	4b06      	ldr	r3, [pc, #24]	; (8004b90 <loraif_check_timeout+0x164>)
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4a0e      	ldr	r2, [pc, #56]	; (8004bb4 <loraif_check_timeout+0x188>)
 8004b7a:	4907      	ldr	r1, [pc, #28]	; (8004b98 <loraif_check_timeout+0x16c>)
 8004b7c:	4807      	ldr	r0, [pc, #28]	; (8004b9c <loraif_check_timeout+0x170>)
 8004b7e:	f240 13ed 	movw	r3, #493	; 0x1ed
 8004b82:	f004 fff3 	bl	8009b6c <LOG_DEBUG>
				if(err_dev != NULL){
 8004b86:	e760      	b.n	8004a4a <loraif_check_timeout+0x1e>
 8004b88:	2000b264 	.word	0x2000b264
 8004b8c:	2000b234 	.word	0x2000b234
 8004b90:	0800e028 	.word	0x0800e028
 8004b94:	0800e094 	.word	0x0800e094
 8004b98:	0800df58 	.word	0x0800df58
 8004b9c:	0800df74 	.word	0x0800df74
 8004ba0:	0800e230 	.word	0x0800e230
 8004ba4:	0800e070 	.word	0x0800e070
 8004ba8:	0800e248 	.word	0x0800e248
 8004bac:	2000b250 	.word	0x2000b250
 8004bb0:	0800e1f0 	.word	0x0800e1f0
 8004bb4:	0800df8c 	.word	0x0800df8c
 8004bb8:	2000b258 	.word	0x2000b258
 8004bbc:	2000b254 	.word	0x2000b254
 8004bc0:	2000b240 	.word	0x2000b240

08004bc4 <loraif_response>:
void loraif_response(void){
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4d0f      	ldr	r5, [pc, #60]	; (8004c04 <loraif_response+0x40>)
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004bc8:	4e0f      	ldr	r6, [pc, #60]	; (8004c08 <loraif_response+0x44>)
void loraif_response(void){
 8004bca:	b082      	sub	sp, #8
 8004bcc:	e002      	b.n	8004bd4 <loraif_response+0x10>
		free(response);
 8004bce:	9801      	ldr	r0, [sp, #4]
 8004bd0:	f005 ffce 	bl	800ab70 <free>
	while(xQueueReceive(response_queue, &response, 5) && response != NULL){
 8004bd4:	a901      	add	r1, sp, #4
 8004bd6:	6828      	ldr	r0, [r5, #0]
 8004bd8:	2205      	movs	r2, #5
 8004bda:	f7fd f9cb 	bl	8001f74 <xQueueReceive>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004bde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	while(xQueueReceive(response_queue, &response, 5) && response != NULL){
 8004be2:	b150      	cbz	r0, 8004bfa <loraif_response+0x36>
 8004be4:	9c01      	ldr	r4, [sp, #4]
 8004be6:	b144      	cbz	r4, 8004bfa <loraif_response+0x36>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004be8:	6830      	ldr	r0, [r6, #0]
 8004bea:	f7fd fb45 	bl	8002278 <xQueueSemaphoreTake>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d0ed      	beq.n	8004bce <loraif_response+0xa>
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7ff fbaa 	bl	800434c <_ZL15loraif_transmitPc.part.0>
 8004bf8:	e7e9      	b.n	8004bce <loraif_response+0xa>
	loraif_check_timeout();
 8004bfa:	f7ff ff17 	bl	8004a2c <loraif_check_timeout>
}
 8004bfe:	b002      	add	sp, #8
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	bf00      	nop
 8004c04:	2000b25c 	.word	0x2000b25c
 8004c08:	2000b260 	.word	0x2000b260

08004c0c <loraif_add_device>:
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004c0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c10:	b087      	sub	sp, #28
	pkt_json_t json;
 8004c12:	2500      	movs	r5, #0
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004c14:	4607      	mov	r7, r0
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004c16:	2010      	movs	r0, #16
void loraif_add_device(uint32_t device_address, char *jdata, void *dev_data){
 8004c18:	4688      	mov	r8, r1
 8004c1a:	4616      	mov	r6, r2
	pkt_json_t json;
 8004c1c:	9503      	str	r5, [sp, #12]
 8004c1e:	f88d 5010 	strb.w	r5, [sp, #16]
 8004c22:	9505      	str	r5, [sp, #20]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 8004c24:	f005 ff9c 	bl	800ab60 <malloc>
 8004c28:	4604      	mov	r4, r0
	err = json_get_object(jdata, &json, (char *)"name");
 8004c2a:	4a29      	ldr	r2, [pc, #164]	; (8004cd0 <loraif_add_device+0xc4>)
    newdev->address = device_address;
 8004c2c:	6027      	str	r7, [r4, #0]
	err = json_get_object(jdata, &json, (char *)"name");
 8004c2e:	4640      	mov	r0, r8
    newdev->err_count = 0;
 8004c30:	7225      	strb	r5, [r4, #8]
    newdev->data = dev_data;
 8004c32:	60e6      	str	r6, [r4, #12]
	err = json_get_object(jdata, &json, (char *)"name");
 8004c34:	a903      	add	r1, sp, #12
 8004c36:	f000 f8cf 	bl	8004dd8 <json_get_object>
	if(err == PKT_ERR_OK)
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d041      	beq.n	8004cc2 <loraif_add_device+0xb6>
	json_release_object(&json);
 8004c3e:	a803      	add	r0, sp, #12
 8004c40:	f000 f9e2 	bl	8005008 <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004c44:	200c      	movs	r0, #12
 8004c46:	f005 fec9 	bl	800a9dc <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 8004c4a:	4f22      	ldr	r7, [pc, #136]	; (8004cd4 <loraif_add_device+0xc8>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004c4c:	6084      	str	r4, [r0, #8]
 8004c4e:	4639      	mov	r1, r7
 8004c50:	f005 fed5 	bl	800a9fe <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c54:	68bb      	ldr	r3, [r7, #8]
      { return iterator(this->_M_impl._M_node._M_next); }
 8004c56:	683d      	ldr	r5, [r7, #0]
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8004c58:	3301      	adds	r3, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c5a:	42bd      	cmp	r5, r7
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	d012      	beq.n	8004c86 <loraif_add_device+0x7a>
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c60:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004ce4 <loraif_add_device+0xd8>
 8004c64:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8004ce8 <loraif_add_device+0xdc>
	uint8_t i = 1;
 8004c68:	2401      	movs	r4, #1
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c6a:	68ae      	ldr	r6, [r5, #8]
 8004c6c:	e9d6 3100 	ldrd	r3, r1, [r6]
 8004c70:	4622      	mov	r2, r4
 8004c72:	9100      	str	r1, [sp, #0]
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f004 fefc 	bl	8009a74 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004c7c:	682d      	ldr	r5, [r5, #0]
 8004c7e:	3401      	adds	r4, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c80:	42bd      	cmp	r5, r7
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004c82:	b2e4      	uxtb	r4, r4
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004c84:	d1f1      	bne.n	8004c6a <loraif_add_device+0x5e>
 8004c86:	4d14      	ldr	r5, [pc, #80]	; (8004cd8 <loraif_add_device+0xcc>)
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004c88:	4e14      	ldr	r6, [pc, #80]	; (8004cdc <loraif_add_device+0xd0>)
 8004c8a:	e002      	b.n	8004c92 <loraif_add_device+0x86>
		free(response);
 8004c8c:	9802      	ldr	r0, [sp, #8]
 8004c8e:	f005 ff6f 	bl	800ab70 <free>
	while(xQueueReceive(response_queue, &response, 5) && response != NULL){
 8004c92:	a902      	add	r1, sp, #8
 8004c94:	6828      	ldr	r0, [r5, #0]
 8004c96:	2205      	movs	r2, #5
 8004c98:	f7fd f96c 	bl	8001f74 <xQueueReceive>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	while(xQueueReceive(response_queue, &response, 5) && response != NULL){
 8004ca0:	b150      	cbz	r0, 8004cb8 <loraif_add_device+0xac>
 8004ca2:	9c02      	ldr	r4, [sp, #8]
 8004ca4:	b144      	cbz	r4, 8004cb8 <loraif_add_device+0xac>
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004ca6:	6830      	ldr	r0, [r6, #0]
 8004ca8:	f7fd fae6 	bl	8002278 <xQueueSemaphoreTake>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0ed      	beq.n	8004c8c <loraif_add_device+0x80>
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f7ff fb4b 	bl	800434c <_ZL15loraif_transmitPc.part.0>
 8004cb6:	e7e9      	b.n	8004c8c <loraif_add_device+0x80>
	loraif_check_timeout();
 8004cb8:	f7ff feb8 	bl	8004a2c <loraif_check_timeout>
}
 8004cbc:	b007      	add	sp, #28
 8004cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		asprintf(&newdev->name, "%s", json.value);
 8004cc2:	9a05      	ldr	r2, [sp, #20]
 8004cc4:	4906      	ldr	r1, [pc, #24]	; (8004ce0 <loraif_add_device+0xd4>)
 8004cc6:	1d20      	adds	r0, r4, #4
 8004cc8:	f005 fefa 	bl	800aac0 <asiprintf>
 8004ccc:	e7b7      	b.n	8004c3e <loraif_add_device+0x32>
 8004cce:	bf00      	nop
 8004cd0:	0800e264 	.word	0x0800e264
 8004cd4:	2000b234 	.word	0x2000b234
 8004cd8:	2000b25c 	.word	0x2000b25c
 8004cdc:	2000b260 	.word	0x2000b260
 8004ce0:	0800eb18 	.word	0x0800eb18
 8004ce4:	0800e26c 	.word	0x0800e26c
 8004ce8:	0800df74 	.word	0x0800df74

08004cec <loraif_remove_device>:
void loraif_remove_device(uint32_t device_address){
 8004cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004cf0:	4e26      	ldr	r6, [pc, #152]	; (8004d8c <loraif_remove_device+0xa0>)
 8004cf2:	6834      	ldr	r4, [r6, #0]
    if (loraif_device_list.empty()) {
 8004cf4:	42b4      	cmp	r4, r6
void loraif_remove_device(uint32_t device_address){
 8004cf6:	b083      	sub	sp, #12
    if (loraif_device_list.empty()) {
 8004cf8:	d03d      	beq.n	8004d76 <loraif_remove_device+0x8a>
        if ((*device)->address == device_address) {
 8004cfa:	68a3      	ldr	r3, [r4, #8]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	4282      	cmp	r2, r0
 8004d00:	d00e      	beq.n	8004d20 <loraif_remove_device+0x34>
	_M_node = _M_node->_M_next;
 8004d02:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 8004d04:	42b4      	cmp	r4, r6
 8004d06:	d1f8      	bne.n	8004cfa <loraif_remove_device+0xe>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d08:	4b21      	ldr	r3, [pc, #132]	; (8004d90 <loraif_remove_device+0xa4>)
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	4a21      	ldr	r2, [pc, #132]	; (8004d94 <loraif_remove_device+0xa8>)
 8004d0e:	4922      	ldr	r1, [pc, #136]	; (8004d98 <loraif_remove_device+0xac>)
 8004d10:	4822      	ldr	r0, [pc, #136]	; (8004d9c <loraif_remove_device+0xb0>)
 8004d12:	f240 13df 	movw	r3, #479	; 0x1df
 8004d16:	f004 ff29 	bl	8009b6c <LOG_DEBUG>
}
 8004d1a:	b003      	add	sp, #12
 8004d1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((*device)->name != NULL) free((*device)->name);
 8004d20:	6858      	ldr	r0, [r3, #4]
 8004d22:	b108      	cbz	r0, 8004d28 <loraif_remove_device+0x3c>
 8004d24:	f005 ff24 	bl	800ab70 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004d28:	68b3      	ldr	r3, [r6, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 8004d2a:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	60b3      	str	r3, [r6, #8]
	__position._M_node->_M_unhook();
 8004d30:	f005 fe6c 	bl	800aa0c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 8004d34:	4620      	mov	r0, r4
 8004d36:	210c      	movs	r1, #12
 8004d38:	f005 fe4e 	bl	800a9d8 <_ZdlPvj>
    if((*device) != NULL) free((*device));
 8004d3c:	68a0      	ldr	r0, [r4, #8]
 8004d3e:	b108      	cbz	r0, 8004d44 <loraif_remove_device+0x58>
 8004d40:	f005 ff16 	bl	800ab70 <free>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004d44:	6835      	ldr	r5, [r6, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d46:	42b5      	cmp	r5, r6
 8004d48:	d0e7      	beq.n	8004d1a <loraif_remove_device+0x2e>
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004d4a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8004da4 <loraif_remove_device+0xb8>
 8004d4e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8004d9c <loraif_remove_device+0xb0>
	uint8_t i = 1;
 8004d52:	2401      	movs	r4, #1
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004d54:	68af      	ldr	r7, [r5, #8]
 8004d56:	e9d7 3100 	ldrd	r3, r1, [r7]
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	9100      	str	r1, [sp, #0]
 8004d5e:	4640      	mov	r0, r8
 8004d60:	4649      	mov	r1, r9
 8004d62:	f004 fe87 	bl	8009a74 <LOG_WARN>
	_M_node = _M_node->_M_next;
 8004d66:	682d      	ldr	r5, [r5, #0]
 8004d68:	3401      	adds	r4, #1
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d6a:	42b5      	cmp	r5, r6
    	LOG_WARN(TAG, "Device %02d address: 0x%08x name: \"%s\".", i++, (unsigned int)(*device)->address, (*device)->name);
 8004d6c:	b2e4      	uxtb	r4, r4
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 8004d6e:	d1f1      	bne.n	8004d54 <loraif_remove_device+0x68>
}
 8004d70:	b003      	add	sp, #12
 8004d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <loraif_remove_device+0xa4>)
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	4a09      	ldr	r2, [pc, #36]	; (8004da0 <loraif_remove_device+0xb4>)
 8004d7c:	4906      	ldr	r1, [pc, #24]	; (8004d98 <loraif_remove_device+0xac>)
 8004d7e:	4807      	ldr	r0, [pc, #28]	; (8004d9c <loraif_remove_device+0xb0>)
 8004d80:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
 8004d84:	f004 fef2 	bl	8009b6c <LOG_DEBUG>
        return;
 8004d88:	e7c7      	b.n	8004d1a <loraif_remove_device+0x2e>
 8004d8a:	bf00      	nop
 8004d8c:	2000b234 	.word	0x2000b234
 8004d90:	0800e294 	.word	0x0800e294
 8004d94:	0800e094 	.word	0x0800e094
 8004d98:	0800df58 	.word	0x0800df58
 8004d9c:	0800df74 	.word	0x0800df74
 8004da0:	0800df8c 	.word	0x0800df8c
 8004da4:	0800e26c 	.word	0x0800e26c

08004da8 <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 8004da8:	4b02      	ldr	r3, [pc, #8]	; (8004db4 <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 8004daa:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8004dac:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 8004db0:	609a      	str	r2, [r3, #8]
        return NULL;
    }

    return (*device);

}
 8004db2:	4770      	bx	lr
 8004db4:	2000b234 	.word	0x2000b234

08004db8 <_GLOBAL__sub_D_loraif>:
 8004db8:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004dba:	4d06      	ldr	r5, [pc, #24]	; (8004dd4 <_GLOBAL__sub_D_loraif+0x1c>)
 8004dbc:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 8004dbe:	42ac      	cmp	r4, r5
 8004dc0:	d006      	beq.n	8004dd0 <_GLOBAL__sub_D_loraif+0x18>
 8004dc2:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8004dc4:	6824      	ldr	r4, [r4, #0]
 8004dc6:	210c      	movs	r1, #12
 8004dc8:	f005 fe06 	bl	800a9d8 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8004dcc:	42ac      	cmp	r4, r5
 8004dce:	d1f8      	bne.n	8004dc2 <_GLOBAL__sub_D_loraif+0xa>
 8004dd0:	bd38      	pop	{r3, r4, r5, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000b234 	.word	0x2000b234

08004dd8 <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 8004dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004dde:	2900      	cmp	r1, #0
 8004de0:	d079      	beq.n	8004ed6 <json_get_object+0xfe>
 8004de2:	4614      	mov	r4, r2
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	d076      	beq.n	8004ed6 <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004de8:	7803      	ldrb	r3, [r0, #0]
 8004dea:	2b7b      	cmp	r3, #123	; 0x7b
 8004dec:	4605      	mov	r5, r0
 8004dee:	d166      	bne.n	8004ebe <json_get_object+0xe6>
 8004df0:	460e      	mov	r6, r1
	int src_len = strlen(src);
 8004df2:	f7fb fa07 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004df6:	182b      	adds	r3, r5, r0
	int src_len = strlen(src);
 8004df8:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004dfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004dfe:	2b7d      	cmp	r3, #125	; 0x7d
 8004e00:	d15d      	bne.n	8004ebe <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 8004e02:	4622      	mov	r2, r4
 8004e04:	4977      	ldr	r1, [pc, #476]	; (8004fe4 <json_get_object+0x20c>)
 8004e06:	a805      	add	r0, sp, #20
 8004e08:	f005 fe5a 	bl	800aac0 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8004e0c:	9905      	ldr	r1, [sp, #20]
 8004e0e:	9103      	str	r1, [sp, #12]
 8004e10:	4628      	mov	r0, r5
 8004e12:	f006 fe33 	bl	800ba7c <strstr>
	free(tmp);
 8004e16:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 8004e18:	4604      	mov	r4, r0
	free(tmp);
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	f005 fea8 	bl	800ab70 <free>
	if(pkstart == NULL){
 8004e20:	2c00      	cmp	r4, #0
 8004e22:	f000 80b3 	beq.w	8004f8c <json_get_object+0x1b4>
		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 8004e26:	f104 0801 	add.w	r8, r4, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004e2a:	4640      	mov	r0, r8
 8004e2c:	f7fb f9ea 	bl	8000204 <strlen>
 8004e30:	4623      	mov	r3, r4
 8004e32:	2400      	movs	r4, #0
 8004e34:	e004      	b.n	8004e40 <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 8004e36:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004e3a:	2a22      	cmp	r2, #34	; 0x22
 8004e3c:	d002      	beq.n	8004e44 <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004e3e:	3401      	adds	r4, #1
 8004e40:	42a0      	cmp	r0, r4
 8004e42:	dcf8      	bgt.n	8004e36 <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 8004e44:	1c60      	adds	r0, r4, #1
 8004e46:	f005 fe8b 	bl	800ab60 <malloc>
 8004e4a:	4681      	mov	r9, r0
 8004e4c:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 8004e4e:	2800      	cmp	r0, #0
 8004e50:	f000 80a9 	beq.w	8004fa6 <json_get_object+0x1ce>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 8004e54:	4622      	mov	r2, r4
 8004e56:	4641      	mov	r1, r8
 8004e58:	f005 fe92 	bl	800ab80 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004e5c:	1ca3      	adds	r3, r4, #2
	dest->key[key_len] = '\0';
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f809 2004 	strb.w	r2, [r9, r4]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 8004e64:	f818 2003 	ldrb.w	r2, [r8, r3]
 8004e68:	2a7b      	cmp	r2, #123	; 0x7b
 8004e6a:	eb08 0903 	add.w	r9, r8, r3
 8004e6e:	d03e      	beq.n	8004eee <json_get_object+0x116>
		dest->leaf = true;
 8004e70:	2201      	movs	r2, #1
 8004e72:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 8004e74:	f818 3003 	ldrb.w	r3, [r8, r3]
 8004e78:	2b22      	cmp	r3, #34	; 0x22
 8004e7a:	d06d      	beq.n	8004f58 <json_get_object+0x180>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004e7c:	4648      	mov	r0, r9
 8004e7e:	f7fb f9c1 	bl	8000204 <strlen>
 8004e82:	2400      	movs	r4, #0
 8004e84:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8004e88:	e006      	b.n	8004e98 <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 8004e8a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8004e8e:	2b7d      	cmp	r3, #125	; 0x7d
 8004e90:	d004      	beq.n	8004e9c <json_get_object+0xc4>
 8004e92:	2b2c      	cmp	r3, #44	; 0x2c
 8004e94:	d002      	beq.n	8004e9c <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004e96:	3401      	adds	r4, #1
 8004e98:	42a0      	cmp	r0, r4
 8004e9a:	dcf6      	bgt.n	8004e8a <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 8004e9c:	2c00      	cmp	r4, #0
 8004e9e:	d06b      	beq.n	8004f78 <json_get_object+0x1a0>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 8004ea0:	1c60      	adds	r0, r4, #1
 8004ea2:	f005 fe5d 	bl	800ab60 <malloc>
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	f000 808f 	beq.w	8004fce <json_get_object+0x1f6>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004eb0:	4622      	mov	r2, r4
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	f005 fe64 	bl	800ab80 <memcpy>
		dest->value[val_len] = '\0';
 8004eb8:	2000      	movs	r0, #0
 8004eba:	5528      	strb	r0, [r5, r4]
 8004ebc:	e008      	b.n	8004ed0 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ebe:	4b4a      	ldr	r3, [pc, #296]	; (8004fe8 <json_get_object+0x210>)
 8004ec0:	484a      	ldr	r0, [pc, #296]	; (8004fec <json_get_object+0x214>)
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	4a4a      	ldr	r2, [pc, #296]	; (8004ff0 <json_get_object+0x218>)
 8004ec6:	494b      	ldr	r1, [pc, #300]	; (8004ff4 <json_get_object+0x21c>)
 8004ec8:	232b      	movs	r3, #43	; 0x2b
 8004eca:	f004 fe4f 	bl	8009b6c <LOG_DEBUG>
		return ret;
 8004ece:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 8004ed0:	b007      	add	sp, #28
 8004ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004ed6:	4b44      	ldr	r3, [pc, #272]	; (8004fe8 <json_get_object+0x210>)
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	4a47      	ldr	r2, [pc, #284]	; (8004ff8 <json_get_object+0x220>)
 8004edc:	4945      	ldr	r1, [pc, #276]	; (8004ff4 <json_get_object+0x21c>)
 8004ede:	4843      	ldr	r0, [pc, #268]	; (8004fec <json_get_object+0x214>)
 8004ee0:	2326      	movs	r3, #38	; 0x26
 8004ee2:	f004 fe43 	bl	8009b6c <LOG_DEBUG>
		return ret;
 8004ee6:	2001      	movs	r0, #1
}
 8004ee8:	b007      	add	sp, #28
 8004eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 8004eee:	7931      	ldrb	r1, [r6, #4]
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d1bf      	bne.n	8004e74 <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 8004ef4:	eba8 0805 	sub.w	r8, r8, r5
 8004ef8:	4444      	add	r4, r8
 8004efa:	f104 0c02 	add.w	ip, r4, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004efe:	4567      	cmp	r7, ip
 8004f00:	dd4e      	ble.n	8004fa0 <json_get_object+0x1c8>
 8004f02:	3401      	adds	r4, #1
 8004f04:	4425      	add	r5, r4
 8004f06:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 8004f08:	4608      	mov	r0, r1
 8004f0a:	e007      	b.n	8004f1c <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8004f0c:	2a7d      	cmp	r2, #125	; 0x7d
 8004f0e:	bf08      	it	eq
 8004f10:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 8004f12:	4281      	cmp	r1, r0
 8004f14:	d008      	beq.n	8004f28 <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004f16:	3301      	adds	r3, #1
 8004f18:	429f      	cmp	r7, r3
 8004f1a:	d018      	beq.n	8004f4e <json_get_object+0x176>
			if(src_cpy[ivend] == '{') l_brace++;
 8004f1c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004f20:	2a7b      	cmp	r2, #123	; 0x7b
 8004f22:	d1f3      	bne.n	8004f0c <json_get_object+0x134>
 8004f24:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 8004f26:	e7f4      	b.n	8004f12 <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 8004f28:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8004f2c:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 8004f2e:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 8004f30:	f005 fe16 	bl	800ab60 <malloc>
 8004f34:	4604      	mov	r4, r0
 8004f36:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d03e      	beq.n	8004fba <json_get_object+0x1e2>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004f3c:	463a      	mov	r2, r7
 8004f3e:	4649      	mov	r1, r9
 8004f40:	f005 fe1e 	bl	800ab80 <memcpy>
		dest->value[val_len] = '\0';
 8004f44:	2000      	movs	r0, #0
 8004f46:	55e0      	strb	r0, [r4, r7]
}
 8004f48:	b007      	add	sp, #28
 8004f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 8004f4e:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 8004f52:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 8004f54:	3701      	adds	r7, #1
 8004f56:	e7eb      	b.n	8004f30 <json_get_object+0x158>
			pvstart++;
 8004f58:	f109 0501 	add.w	r5, r9, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004f5c:	4628      	mov	r0, r5
 8004f5e:	f7fb f951 	bl	8000204 <strlen>
 8004f62:	2400      	movs	r4, #0
 8004f64:	e004      	b.n	8004f70 <json_get_object+0x198>
				if(pvstart[val_len] == '"') break;
 8004f66:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 8004f6a:	2b22      	cmp	r3, #34	; 0x22
 8004f6c:	d002      	beq.n	8004f74 <json_get_object+0x19c>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 8004f6e:	3401      	adds	r4, #1
 8004f70:	42a0      	cmp	r0, r4
 8004f72:	dcf8      	bgt.n	8004f66 <json_get_object+0x18e>
 8004f74:	46a9      	mov	r9, r5
 8004f76:	e791      	b.n	8004e9c <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f78:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <json_get_object+0x210>)
 8004f7a:	481c      	ldr	r0, [pc, #112]	; (8004fec <json_get_object+0x214>)
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <json_get_object+0x224>)
 8004f80:	491c      	ldr	r1, [pc, #112]	; (8004ff4 <json_get_object+0x21c>)
 8004f82:	2366      	movs	r3, #102	; 0x66
 8004f84:	f004 fdf2 	bl	8009b6c <LOG_DEBUG>
			return ret;
 8004f88:	2008      	movs	r0, #8
 8004f8a:	e7a1      	b.n	8004ed0 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004f8c:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <json_get_object+0x210>)
 8004f8e:	4817      	ldr	r0, [pc, #92]	; (8004fec <json_get_object+0x214>)
 8004f90:	9300      	str	r3, [sp, #0]
 8004f92:	4a1b      	ldr	r2, [pc, #108]	; (8005000 <json_get_object+0x228>)
 8004f94:	4917      	ldr	r1, [pc, #92]	; (8004ff4 <json_get_object+0x21c>)
 8004f96:	2336      	movs	r3, #54	; 0x36
 8004f98:	f004 fde8 	bl	8009b6c <LOG_DEBUG>
		return ret;
 8004f9c:	2004      	movs	r0, #4
 8004f9e:	e797      	b.n	8004ed0 <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004fa0:	2701      	movs	r7, #1
 8004fa2:	2002      	movs	r0, #2
 8004fa4:	e7c4      	b.n	8004f30 <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <json_get_object+0x210>)
 8004fa8:	4810      	ldr	r0, [pc, #64]	; (8004fec <json_get_object+0x214>)
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	4a15      	ldr	r2, [pc, #84]	; (8005004 <json_get_object+0x22c>)
 8004fae:	4911      	ldr	r1, [pc, #68]	; (8004ff4 <json_get_object+0x21c>)
 8004fb0:	2344      	movs	r3, #68	; 0x44
 8004fb2:	f004 fddb 	bl	8009b6c <LOG_DEBUG>
		return ret;
 8004fb6:	2010      	movs	r0, #16
 8004fb8:	e78a      	b.n	8004ed0 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004fba:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <json_get_object+0x210>)
 8004fbc:	480b      	ldr	r0, [pc, #44]	; (8004fec <json_get_object+0x214>)
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	4a10      	ldr	r2, [pc, #64]	; (8005004 <json_get_object+0x22c>)
 8004fc2:	490c      	ldr	r1, [pc, #48]	; (8004ff4 <json_get_object+0x21c>)
 8004fc4:	237e      	movs	r3, #126	; 0x7e
 8004fc6:	f004 fdd1 	bl	8009b6c <LOG_DEBUG>
			return ret;
 8004fca:	2010      	movs	r0, #16
 8004fcc:	e780      	b.n	8004ed0 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004fce:	4b06      	ldr	r3, [pc, #24]	; (8004fe8 <json_get_object+0x210>)
 8004fd0:	4806      	ldr	r0, [pc, #24]	; (8004fec <json_get_object+0x214>)
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	4a0b      	ldr	r2, [pc, #44]	; (8005004 <json_get_object+0x22c>)
 8004fd6:	4907      	ldr	r1, [pc, #28]	; (8004ff4 <json_get_object+0x21c>)
 8004fd8:	236c      	movs	r3, #108	; 0x6c
 8004fda:	f004 fdc7 	bl	8009b6c <LOG_DEBUG>
			return ret;
 8004fde:	2010      	movs	r0, #16
 8004fe0:	e776      	b.n	8004ed0 <json_get_object+0xf8>
 8004fe2:	bf00      	nop
 8004fe4:	0800e3cc 	.word	0x0800e3cc
 8004fe8:	0800e3bc 	.word	0x0800e3bc
 8004fec:	0800e3ac 	.word	0x0800e3ac
 8004ff0:	0800e3d4 	.word	0x0800e3d4
 8004ff4:	0800df58 	.word	0x0800df58
 8004ff8:	0800e390 	.word	0x0800e390
 8004ffc:	0800e44c 	.word	0x0800e44c
 8005000:	0800e3f8 	.word	0x0800e3f8
 8005004:	0800e42c 	.word	0x0800e42c

08005008 <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 8005008:	b510      	push	{r4, lr}
 800500a:	4604      	mov	r4, r0
	if(json->key != NULL) {
 800500c:	6800      	ldr	r0, [r0, #0]
 800500e:	b118      	cbz	r0, 8005018 <json_release_object+0x10>
		free(json->key);
 8005010:	f005 fdae 	bl	800ab70 <free>
		json->key = NULL;
 8005014:	2300      	movs	r3, #0
 8005016:	6023      	str	r3, [r4, #0]
	}
	if(json->value != NULL) {
 8005018:	68a0      	ldr	r0, [r4, #8]
 800501a:	b118      	cbz	r0, 8005024 <json_release_object+0x1c>
		free(json->value);
 800501c:	f005 fda8 	bl	800ab70 <free>
		json->value = NULL;
 8005020:	2300      	movs	r3, #0
 8005022:	60a3      	str	r3, [r4, #8]
	}
	json->leaf = false;
 8005024:	2000      	movs	r0, #0
 8005026:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 8005028:	bd10      	pop	{r4, pc}
 800502a:	bf00      	nop

0800502c <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 800502c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005030:	4688      	mov	r8, r1
 8005032:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8005034:	4924      	ldr	r1, [pc, #144]	; (80050c8 <parse_packet+0x9c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 8005036:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 8005038:	f006 fd20 	bl	800ba7c <strstr>
	if(pvstart == NULL){
 800503c:	b318      	cbz	r0, 8005086 <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 800503e:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8005040:	4604      	mov	r4, r0
 8005042:	1c78      	adds	r0, r7, #1
 8005044:	f005 fd8c 	bl	800ab60 <malloc>
 8005048:	4606      	mov	r6, r0
 800504a:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 800504e:	b330      	cbz	r0, 800509e <parse_packet+0x72>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8005050:	4629      	mov	r1, r5
 8005052:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 8005054:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 8005056:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8005058:	f005 fd92 	bl	800ab80 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 800505c:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 800505e:	4620      	mov	r0, r4
 8005060:	f7fb f8d0 	bl	8000204 <strlen>
 8005064:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 8005066:	3001      	adds	r0, #1
 8005068:	f005 fd7a 	bl	800ab60 <malloc>
 800506c:	4607      	mov	r7, r0
 800506e:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 8005072:	b1f0      	cbz	r0, 80050b2 <parse_packet+0x86>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 8005074:	4621      	mov	r1, r4
 8005076:	4632      	mov	r2, r6
 8005078:	f005 fd82 	bl	800ab80 <memcpy>
	dest->data_str[data_len] = '\0';
 800507c:	55bd      	strb	r5, [r7, r6]

	return ret;
 800507e:	4628      	mov	r0, r5
}
 8005080:	b002      	add	sp, #8
 8005082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <parse_packet+0xa0>)
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	4a11      	ldr	r2, [pc, #68]	; (80050d0 <parse_packet+0xa4>)
 800508c:	4911      	ldr	r1, [pc, #68]	; (80050d4 <parse_packet+0xa8>)
 800508e:	4812      	ldr	r0, [pc, #72]	; (80050d8 <parse_packet+0xac>)
 8005090:	23a0      	movs	r3, #160	; 0xa0
 8005092:	f004 fd6b 	bl	8009b6c <LOG_DEBUG>
		return ret;
 8005096:	2002      	movs	r0, #2
}
 8005098:	b002      	add	sp, #8
 800509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800509e:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <parse_packet+0xa0>)
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <parse_packet+0xac>)
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	4a0d      	ldr	r2, [pc, #52]	; (80050dc <parse_packet+0xb0>)
 80050a6:	490b      	ldr	r1, [pc, #44]	; (80050d4 <parse_packet+0xa8>)
 80050a8:	23ab      	movs	r3, #171	; 0xab
 80050aa:	f004 fd5f 	bl	8009b6c <LOG_DEBUG>
		return ret;
 80050ae:	2010      	movs	r0, #16
 80050b0:	e7e6      	b.n	8005080 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <parse_packet+0xa0>)
 80050b4:	4808      	ldr	r0, [pc, #32]	; (80050d8 <parse_packet+0xac>)
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	4a08      	ldr	r2, [pc, #32]	; (80050dc <parse_packet+0xb0>)
 80050ba:	4906      	ldr	r1, [pc, #24]	; (80050d4 <parse_packet+0xa8>)
 80050bc:	23b8      	movs	r3, #184	; 0xb8
 80050be:	f004 fd55 	bl	8009b6c <LOG_DEBUG>
		return ret;
 80050c2:	2010      	movs	r0, #16
 80050c4:	e7dc      	b.n	8005080 <parse_packet+0x54>
 80050c6:	bf00      	nop
 80050c8:	0800e460 	.word	0x0800e460
 80050cc:	0800e478 	.word	0x0800e478
 80050d0:	0800e464 	.word	0x0800e464
 80050d4:	0800df58 	.word	0x0800df58
 80050d8:	0800e3ac 	.word	0x0800e3ac
 80050dc:	0800e42c 	.word	0x0800e42c

080050e0 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 80050e0:	b510      	push	{r4, lr}
 80050e2:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) {
 80050e4:	6800      	ldr	r0, [r0, #0]
 80050e6:	b118      	cbz	r0, 80050f0 <release_packet+0x10>
		free(packet->cmd_str);
 80050e8:	f005 fd42 	bl	800ab70 <free>
		packet->cmd_str = NULL;
 80050ec:	2300      	movs	r3, #0
 80050ee:	6023      	str	r3, [r4, #0]
	}
	if(packet->data_str != NULL) {
 80050f0:	6860      	ldr	r0, [r4, #4]
 80050f2:	b118      	cbz	r0, 80050fc <release_packet+0x1c>
		free(packet->data_str);
 80050f4:	f005 fd3c 	bl	800ab70 <free>
		packet->data_str = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	6063      	str	r3, [r4, #4]
	}

	return PKT_ERR_OK;
}
 80050fc:	2000      	movs	r0, #0
 80050fe:	bd10      	pop	{r4, pc}

08005100 <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 8005100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 8005102:	1e16      	subs	r6, r2, #0
 8005104:	dd0f      	ble.n	8005126 <str_to_cmd+0x26>
 8005106:	4607      	mov	r7, r0
 8005108:	1f0d      	subs	r5, r1, #4
 800510a:	2400      	movs	r4, #0
 800510c:	e002      	b.n	8005114 <str_to_cmd+0x14>
 800510e:	3401      	adds	r4, #1
 8005110:	42a6      	cmp	r6, r4
 8005112:	d008      	beq.n	8005126 <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 8005114:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005118:	4638      	mov	r0, r7
 800511a:	f7fb f869 	bl	80001f0 <strcmp>
 800511e:	2800      	cmp	r0, #0
 8005120:	d1f5      	bne.n	800510e <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 8005122:	4620      	mov	r0, r4
 8005124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 8005126:	2400      	movs	r4, #0
}
 8005128:	4620      	mov	r0, r4
 800512a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800512c <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 800512c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 8005134:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8005138:	2300      	movs	r3, #0
 800513a:	e9c0 3306 	strd	r3, r3, [r0, #24]
 800513e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 8005142:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 8005146:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 8005148:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 800514a:	9a01      	ldr	r2, [sp, #4]
 800514c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 8005150:	6142      	str	r2, [r0, #20]
	_it = itpin;
 8005152:	8103      	strh	r3, [r0, #8]
}
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop

08005158 <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8005158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800515c:	4604      	mov	r4, r0
 800515e:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 8005160:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 8005162:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8005164:	4698      	mov	r8, r3
 8005166:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 8005168:	f001 ff8a 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 800516c:	6920      	ldr	r0, [r4, #16]
 800516e:	f001 ff87 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 8005172:	6960      	ldr	r0, [r4, #20]
 8005174:	f001 ff84 	bl	8007080 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 8005178:	2207      	movs	r2, #7
 800517a:	88a1      	ldrh	r1, [r4, #4]
 800517c:	68e0      	ldr	r0, [r4, #12]
 800517e:	f001 ffe5 	bl	800714c <gpio_set_mode>
	gpio_set(_csport, _cs);
 8005182:	88a1      	ldrh	r1, [r4, #4]
 8005184:	68e0      	ldr	r0, [r4, #12]
 8005186:	f002 f8c3 	bl	8007310 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 800518a:	2207      	movs	r2, #7
 800518c:	88e1      	ldrh	r1, [r4, #6]
 800518e:	6920      	ldr	r0, [r4, #16]
 8005190:	f001 ffdc 	bl	800714c <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 8005194:	88e1      	ldrh	r1, [r4, #6]
 8005196:	6920      	ldr	r0, [r4, #16]
 8005198:	f002 f8c2 	bl	8007320 <gpio_reset>
    delay_ms(50);
 800519c:	2032      	movs	r0, #50	; 0x32
 800519e:	f003 f99d 	bl	80084dc <delay_ms>
    gpio_set(_rstport, _rst);
 80051a2:	88e1      	ldrh	r1, [r4, #6]
 80051a4:	6920      	ldr	r0, [r4, #16]
 80051a6:	f002 f8b3 	bl	8007310 <gpio_set>
    delay_ms(50);
 80051aa:	2032      	movs	r0, #50	; 0x32
 80051ac:	f003 f996 	bl	80084dc <delay_ms>

    if(_it >= 0 && _itport != NULL){
 80051b0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80051b4:	2a00      	cmp	r2, #0
 80051b6:	db0e      	blt.n	80051d6 <_ZN6sx127x4initEP3spilhm+0x7e>
 80051b8:	6961      	ldr	r1, [r4, #20]
 80051ba:	b161      	cbz	r1, 80051d6 <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 80051bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	ad04      	add	r5, sp, #16
 80051c2:	4628      	mov	r0, r5
 80051c4:	b292      	uxth	r2, r2
 80051c6:	2301      	movs	r3, #1
 80051c8:	f001 fa98 	bl	80066fc <exti_init>
		gpio_set_pulldown(_itport, _it);
 80051cc:	8921      	ldrh	r1, [r4, #8]
 80051ce:	6960      	ldr	r0, [r4, #20]
 80051d0:	f002 f890 	bl	80072f4 <gpio_set_pulldown>
 80051d4:	e000      	b.n	80051d8 <_ZN6sx127x4initEP3spilhm+0x80>
 80051d6:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 80051d8:	88a1      	ldrh	r1, [r4, #4]
 80051da:	68e0      	ldr	r0, [r4, #12]
 80051dc:	f002 f8a0 	bl	8007320 <gpio_reset>

  txdt = address;
 80051e0:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051e2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80051e4:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051e8:	f10d 020f 	add.w	r2, sp, #15
 80051ec:	2301      	movs	r3, #1
 80051ee:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051f0:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051f2:	f002 fcb5 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051f6:	9600      	str	r6, [sp, #0]
 80051f8:	f10d 030e 	add.w	r3, sp, #14
 80051fc:	6821      	ldr	r1, [r4, #0]
 80051fe:	f10d 020f 	add.w	r2, sp, #15
 8005202:	4628      	mov	r0, r5
  txdt = value;
 8005204:	2700      	movs	r7, #0
 8005206:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800520a:	f002 fd55 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 800520e:	88a1      	ldrh	r1, [r4, #4]
 8005210:	68e0      	ldr	r0, [r4, #12]
 8005212:	f002 f87d 	bl	8007310 <gpio_set>

  return response;
 8005216:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 800521a:	2b12      	cmp	r3, #18
 800521c:	d003      	beq.n	8005226 <_ZN6sx127x4initEP3spilhm+0xce>
 800521e:	4638      	mov	r0, r7
}
 8005220:	b006      	add	sp, #24
 8005222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 8005226:	88a1      	ldrh	r1, [r4, #4]
 8005228:	68e0      	ldr	r0, [r4, #12]
 800522a:	f002 f879 	bl	8007320 <gpio_reset>
  txdt = address;
 800522e:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005232:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005234:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005238:	4633      	mov	r3, r6
 800523a:	f10d 020f 	add.w	r2, sp, #15
 800523e:	4628      	mov	r0, r5
 8005240:	f002 fc8e 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005244:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005246:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800524a:	f10d 030e 	add.w	r3, sp, #14
 800524e:	f10d 020f 	add.w	r2, sp, #15
 8005252:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005254:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005258:	4628      	mov	r0, r5
 800525a:	f002 fd2d 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800525e:	88a1      	ldrh	r1, [r4, #4]
 8005260:	68e0      	ldr	r0, [r4, #12]
 8005262:	f002 f855 	bl	8007310 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8005266:	ea4f 71e9 	mov.w	r1, r9, asr #31
 800526a:	04c9      	lsls	r1, r1, #19
 800526c:	4a9e      	ldr	r2, [pc, #632]	; (80054e8 <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 800526e:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8005272:	2300      	movs	r3, #0
 8005274:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 8005278:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 800527c:	f7fb fd24 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 8005280:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8005282:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 8005284:	68e0      	ldr	r0, [r4, #12]
 8005286:	f002 f84b 	bl	8007320 <gpio_reset>
  txdt = address;
 800528a:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 800528e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005290:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005294:	4633      	mov	r3, r6
 8005296:	f10d 020f 	add.w	r2, sp, #15
 800529a:	4628      	mov	r0, r5
 800529c:	f002 fc60 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052a0:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80052a2:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052a6:	f10d 030e 	add.w	r3, sp, #14
 80052aa:	f10d 020f 	add.w	r2, sp, #15
 80052ae:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80052b0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052b4:	4628      	mov	r0, r5
 80052b6:	f002 fcff 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052ba:	88a1      	ldrh	r1, [r4, #4]
 80052bc:	68e0      	ldr	r0, [r4, #12]
 80052be:	f002 f827 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 80052c2:	88a1      	ldrh	r1, [r4, #4]
 80052c4:	68e0      	ldr	r0, [r4, #12]
 80052c6:	f002 f82b 	bl	8007320 <gpio_reset>
  txdt = address;
 80052ca:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052ce:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052d0:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052d4:	4633      	mov	r3, r6
 80052d6:	f10d 020f 	add.w	r2, sp, #15
 80052da:	4628      	mov	r0, r5
 80052dc:	f002 fc40 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052e0:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80052e2:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052e6:	f10d 030e 	add.w	r3, sp, #14
 80052ea:	f10d 020f 	add.w	r2, sp, #15
 80052ee:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 80052f0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052f4:	4628      	mov	r0, r5
 80052f6:	f002 fcdf 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052fa:	88a1      	ldrh	r1, [r4, #4]
 80052fc:	68e0      	ldr	r0, [r4, #12]
 80052fe:	f002 f807 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005302:	88a1      	ldrh	r1, [r4, #4]
 8005304:	68e0      	ldr	r0, [r4, #12]
 8005306:	f002 f80b 	bl	8007320 <gpio_reset>
  txdt = address;
 800530a:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 800530e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005310:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005314:	4633      	mov	r3, r6
 8005316:	f10d 020f 	add.w	r2, sp, #15
 800531a:	4628      	mov	r0, r5
 800531c:	f002 fc20 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005320:	9600      	str	r6, [sp, #0]
 8005322:	f10d 030e 	add.w	r3, sp, #14
 8005326:	f10d 020f 	add.w	r2, sp, #15
 800532a:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 800532c:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005330:	4628      	mov	r0, r5
 8005332:	f002 fcc1 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005336:	88a1      	ldrh	r1, [r4, #4]
 8005338:	68e0      	ldr	r0, [r4, #12]
 800533a:	f001 ffe9 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 800533e:	88a1      	ldrh	r1, [r4, #4]
 8005340:	68e0      	ldr	r0, [r4, #12]
 8005342:	f001 ffed 	bl	8007320 <gpio_reset>
  txdt = address;
 8005346:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 800534a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800534c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005350:	4633      	mov	r3, r6
 8005352:	f10d 020f 	add.w	r2, sp, #15
 8005356:	4628      	mov	r0, r5
 8005358:	f002 fc02 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800535c:	9600      	str	r6, [sp, #0]
 800535e:	f10d 030e 	add.w	r3, sp, #14
 8005362:	f10d 020f 	add.w	r2, sp, #15
 8005366:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005368:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800536c:	4628      	mov	r0, r5
 800536e:	f002 fca3 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005372:	88a1      	ldrh	r1, [r4, #4]
 8005374:	68e0      	ldr	r0, [r4, #12]
 8005376:	f001 ffcb 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 800537a:	88a1      	ldrh	r1, [r4, #4]
 800537c:	68e0      	ldr	r0, [r4, #12]
 800537e:	f001 ffcf 	bl	8007320 <gpio_reset>
  txdt = address;
 8005382:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005386:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005388:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800538c:	4633      	mov	r3, r6
 800538e:	f10d 020f 	add.w	r2, sp, #15
 8005392:	4628      	mov	r0, r5
 8005394:	f002 fbe4 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005398:	9600      	str	r6, [sp, #0]
 800539a:	f10d 030e 	add.w	r3, sp, #14
 800539e:	f10d 020f 	add.w	r2, sp, #15
 80053a2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80053a4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053a8:	4628      	mov	r0, r5
 80053aa:	f002 fc85 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053ae:	88a1      	ldrh	r1, [r4, #4]
 80053b0:	68e0      	ldr	r0, [r4, #12]
 80053b2:	f001 ffad 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 80053b6:	88a1      	ldrh	r1, [r4, #4]
 80053b8:	68e0      	ldr	r0, [r4, #12]
 80053ba:	f001 ffb1 	bl	8007320 <gpio_reset>
  txdt = address;
 80053be:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053c2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80053c4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053c8:	4633      	mov	r3, r6
 80053ca:	f10d 020f 	add.w	r2, sp, #15
 80053ce:	4628      	mov	r0, r5
 80053d0:	f002 fbc6 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053d4:	9600      	str	r6, [sp, #0]
 80053d6:	f10d 030e 	add.w	r3, sp, #14
 80053da:	f10d 020f 	add.w	r2, sp, #15
 80053de:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80053e0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053e4:	4628      	mov	r0, r5
 80053e6:	f002 fc67 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053ea:	88a1      	ldrh	r1, [r4, #4]
 80053ec:	68e0      	ldr	r0, [r4, #12]
 80053ee:	f001 ff8f 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 80053f2:	88a1      	ldrh	r1, [r4, #4]
 80053f4:	68e0      	ldr	r0, [r4, #12]
  return response;
 80053f6:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 80053fa:	f001 ff91 	bl	8007320 <gpio_reset>
  txdt = address;
 80053fe:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005402:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005404:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005408:	4633      	mov	r3, r6
 800540a:	f10d 020f 	add.w	r2, sp, #15
 800540e:	4628      	mov	r0, r5
 8005410:	f002 fba6 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005414:	9600      	str	r6, [sp, #0]
 8005416:	f10d 030e 	add.w	r3, sp, #14
 800541a:	f10d 020f 	add.w	r2, sp, #15
 800541e:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8005420:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005424:	4628      	mov	r0, r5
  txdt = value;
 8005426:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800542a:	f002 fc45 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800542e:	88a1      	ldrh	r1, [r4, #4]
 8005430:	68e0      	ldr	r0, [r4, #12]
 8005432:	f001 ff6d 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005436:	88a1      	ldrh	r1, [r4, #4]
 8005438:	68e0      	ldr	r0, [r4, #12]
 800543a:	f001 ff71 	bl	8007320 <gpio_reset>
  txdt = address;
 800543e:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005440:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005442:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005446:	4633      	mov	r3, r6
 8005448:	f10d 020f 	add.w	r2, sp, #15
 800544c:	4628      	mov	r0, r5
 800544e:	f002 fb87 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005452:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005454:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005456:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005458:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800545c:	4628      	mov	r0, r5
 800545e:	f10d 030e 	add.w	r3, sp, #14
 8005462:	f10d 020f 	add.w	r2, sp, #15
 8005466:	f002 fc27 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800546a:	88a1      	ldrh	r1, [r4, #4]
 800546c:	68e0      	ldr	r0, [r4, #12]
 800546e:	f001 ff4f 	bl	8007310 <gpio_set>
		if(level > 17){
 8005472:	f1b8 0f11 	cmp.w	r8, #17
 8005476:	f200 80c8 	bhi.w	800560a <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 800547a:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 800547e:	88a1      	ldrh	r1, [r4, #4]
 8005480:	68e0      	ldr	r0, [r4, #12]
 8005482:	bf38      	it	cc
 8005484:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 8005488:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 800548a:	f001 ff49 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800548e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005490:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005494:	4633      	mov	r3, r6
 8005496:	f10d 020f 	add.w	r2, sp, #15
 800549a:	4628      	mov	r0, r5
 800549c:	f002 fb60 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054a0:	9600      	str	r6, [sp, #0]
 80054a2:	f10d 030e 	add.w	r3, sp, #14
 80054a6:	f10d 020f 	add.w	r2, sp, #15
 80054aa:	6821      	ldr	r1, [r4, #0]
 80054ac:	4628      	mov	r0, r5
  txdt = value;
 80054ae:	2784      	movs	r7, #132	; 0x84
 80054b0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054b4:	f002 fc00 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054b8:	88a1      	ldrh	r1, [r4, #4]
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	f001 ff28 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 80054c0:	88a1      	ldrh	r1, [r4, #4]
 80054c2:	68e0      	ldr	r0, [r4, #12]
 80054c4:	f001 ff2c 	bl	8007320 <gpio_reset>
  txdt = address;
 80054c8:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054ca:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054cc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054d0:	4633      	mov	r3, r6
 80054d2:	4628      	mov	r0, r5
 80054d4:	f10d 020f 	add.w	r2, sp, #15
 80054d8:	f002 fb42 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054dc:	9600      	str	r6, [sp, #0]
 80054de:	6821      	ldr	r1, [r4, #0]
 80054e0:	4628      	mov	r0, r5
  txdt = value;
 80054e2:	232b      	movs	r3, #43	; 0x2b
 80054e4:	e002      	b.n	80054ec <_ZN6sx127x4initEP3spilhm+0x394>
 80054e6:	bf00      	nop
 80054e8:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054ec:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 80054f0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054f4:	f10d 030e 	add.w	r3, sp, #14
 80054f8:	f002 fbde 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054fc:	88a1      	ldrh	r1, [r4, #4]
 80054fe:	68e0      	ldr	r0, [r4, #12]
 8005500:	f001 ff06 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005504:	88a1      	ldrh	r1, [r4, #4]
 8005506:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005508:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 800550a:	f001 ff09 	bl	8007320 <gpio_reset>
  txdt = address;
 800550e:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005510:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005512:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005516:	f10d 020f 	add.w	r2, sp, #15
 800551a:	4628      	mov	r0, r5
 800551c:	2301      	movs	r3, #1
 800551e:	f002 fb1f 	bl	8007b60 <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005522:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005526:	9700      	str	r7, [sp, #0]
 8005528:	f10d 030e 	add.w	r3, sp, #14
 800552c:	f10d 020f 	add.w	r2, sp, #15
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8005534:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 8005538:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800553c:	f002 fbbc 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005540:	88a1      	ldrh	r1, [r4, #4]
 8005542:	68e0      	ldr	r0, [r4, #12]
 8005544:	f001 fee4 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005548:	88a1      	ldrh	r1, [r4, #4]
 800554a:	68e0      	ldr	r0, [r4, #12]
 800554c:	f001 fee8 	bl	8007320 <gpio_reset>
  txdt = address;
 8005550:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005552:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005554:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005558:	463b      	mov	r3, r7
 800555a:	f10d 020f 	add.w	r2, sp, #15
 800555e:	4628      	mov	r0, r5
 8005560:	f002 fafe 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005564:	9700      	str	r7, [sp, #0]
 8005566:	f10d 030e 	add.w	r3, sp, #14
 800556a:	f10d 020f 	add.w	r2, sp, #15
 800556e:	6821      	ldr	r1, [r4, #0]
 8005570:	4628      	mov	r0, r5
  txdt = value;
 8005572:	2600      	movs	r6, #0
 8005574:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005578:	f002 fb9e 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800557c:	88a1      	ldrh	r1, [r4, #4]
 800557e:	68e0      	ldr	r0, [r4, #12]
 8005580:	f001 fec6 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005584:	88a1      	ldrh	r1, [r4, #4]
 8005586:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005588:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 800558c:	f001 fec8 	bl	8007320 <gpio_reset>
  txdt = address;
 8005590:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005594:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005596:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800559a:	463b      	mov	r3, r7
 800559c:	f10d 020f 	add.w	r2, sp, #15
 80055a0:	4628      	mov	r0, r5
 80055a2:	f002 fadd 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055a6:	9700      	str	r7, [sp, #0]
 80055a8:	f10d 030e 	add.w	r3, sp, #14
 80055ac:	f10d 020f 	add.w	r2, sp, #15
 80055b0:	6821      	ldr	r1, [r4, #0]
 80055b2:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 80055b4:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 80055b8:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055bc:	f002 fb7c 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055c0:	88a1      	ldrh	r1, [r4, #4]
 80055c2:	68e0      	ldr	r0, [r4, #12]
 80055c4:	f001 fea4 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 80055c8:	88a1      	ldrh	r1, [r4, #4]
 80055ca:	68e0      	ldr	r0, [r4, #12]
 80055cc:	f001 fea8 	bl	8007320 <gpio_reset>
  txdt = address;
 80055d0:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055d2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055d4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055d8:	463b      	mov	r3, r7
 80055da:	f10d 020f 	add.w	r2, sp, #15
 80055de:	4628      	mov	r0, r5
 80055e0:	f002 fabe 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055e4:	9700      	str	r7, [sp, #0]
 80055e6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80055e8:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055ec:	f10d 030e 	add.w	r3, sp, #14
 80055f0:	f10d 020f 	add.w	r2, sp, #15
 80055f4:	4628      	mov	r0, r5
 80055f6:	f002 fb5f 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	88a1      	ldrh	r1, [r4, #4]
 80055fe:	f001 fe87 	bl	8007310 <gpio_set>
	return true;
 8005602:	4638      	mov	r0, r7
}
 8005604:	b006      	add	sp, #24
 8005606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 800560a:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 800560e:	88a1      	ldrh	r1, [r4, #4]
 8005610:	68e0      	ldr	r0, [r4, #12]
 8005612:	bf28      	it	cs
 8005614:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 8005618:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 800561a:	f001 fe81 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800561e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005620:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005624:	4633      	mov	r3, r6
 8005626:	f10d 020f 	add.w	r2, sp, #15
 800562a:	4628      	mov	r0, r5
 800562c:	f002 fa98 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005630:	9600      	str	r6, [sp, #0]
 8005632:	f10d 030e 	add.w	r3, sp, #14
 8005636:	f10d 020f 	add.w	r2, sp, #15
 800563a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800563c:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005640:	4628      	mov	r0, r5
 8005642:	f002 fb39 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005646:	88a1      	ldrh	r1, [r4, #4]
 8005648:	68e0      	ldr	r0, [r4, #12]
 800564a:	f001 fe61 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 800564e:	88a1      	ldrh	r1, [r4, #4]
 8005650:	68e0      	ldr	r0, [r4, #12]
 8005652:	f001 fe65 	bl	8007320 <gpio_reset>
  txdt = address;
 8005656:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005658:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800565a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800565e:	4633      	mov	r3, r6
 8005660:	4628      	mov	r0, r5
 8005662:	f10d 020f 	add.w	r2, sp, #15
 8005666:	f002 fa7b 	bl	8007b60 <_ZN3spi8transmitEmm>
			level -= 3;
 800566a:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800566e:	9600      	str	r6, [sp, #0]
 8005670:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 8005672:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005676:	4628      	mov	r0, r5
  txdt = value;
 8005678:	2331      	movs	r3, #49	; 0x31
 800567a:	e737      	b.n	80054ec <_ZN6sx127x4initEP3spilhm+0x394>

0800567c <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 800567c:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop

08005684 <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 8005684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005686:	4604      	mov	r4, r0
 8005688:	b087      	sub	sp, #28
  txdt = address;
 800568a:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 800568c:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 800568e:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 8005690:	88a1      	ldrh	r1, [r4, #4]
 8005692:	f001 fe45 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005696:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005698:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800569c:	4633      	mov	r3, r6
 800569e:	f10d 020f 	add.w	r2, sp, #15
 80056a2:	a804      	add	r0, sp, #16
 80056a4:	f002 fa5c 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056a8:	9600      	str	r6, [sp, #0]
 80056aa:	f10d 030e 	add.w	r3, sp, #14
 80056ae:	6821      	ldr	r1, [r4, #0]
 80056b0:	f10d 020f 	add.w	r2, sp, #15
 80056b4:	a804      	add	r0, sp, #16
  txdt = value;
 80056b6:	2500      	movs	r5, #0
 80056b8:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056bc:	f002 fafc 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056c0:	88a1      	ldrh	r1, [r4, #4]
 80056c2:	68e0      	ldr	r0, [r4, #12]
 80056c4:	f001 fe24 	bl	8007310 <gpio_set>
  return response;
 80056c8:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	f000 80e1 	beq.w	8005898 <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 80056d6:	88a1      	ldrh	r1, [r4, #4]
 80056d8:	68e0      	ldr	r0, [r4, #12]
 80056da:	f001 fe21 	bl	8007320 <gpio_reset>
  txdt = address;
 80056de:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056e2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056e4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056e8:	4633      	mov	r3, r6
 80056ea:	f10d 020f 	add.w	r2, sp, #15
 80056ee:	a804      	add	r0, sp, #16
 80056f0:	f002 fa36 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056f4:	9600      	str	r6, [sp, #0]
 80056f6:	f10d 030e 	add.w	r3, sp, #14
 80056fa:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80056fc:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005700:	f10d 020f 	add.w	r2, sp, #15
 8005704:	a804      	add	r0, sp, #16
 8005706:	f002 fad7 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800570a:	88a1      	ldrh	r1, [r4, #4]
 800570c:	68e0      	ldr	r0, [r4, #12]
 800570e:	f001 fdff 	bl	8007310 <gpio_set>
  return response;
 8005712:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8005716:	071b      	lsls	r3, r3, #28
 8005718:	f100 809f 	bmi.w	800585a <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 800571c:	88a1      	ldrh	r1, [r4, #4]
 800571e:	68e0      	ldr	r0, [r4, #12]
 8005720:	f001 fdfe 	bl	8007320 <gpio_reset>
  txdt = address;
 8005724:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005726:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005728:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800572c:	2301      	movs	r3, #1
 800572e:	f10d 020f 	add.w	r2, sp, #15
 8005732:	a804      	add	r0, sp, #16
 8005734:	f002 fa14 	bl	8007b60 <_ZN3spi8transmitEmm>
  txdt = value;
 8005738:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800573c:	2501      	movs	r5, #1
 800573e:	9500      	str	r5, [sp, #0]
 8005740:	6821      	ldr	r1, [r4, #0]
 8005742:	a804      	add	r0, sp, #16
 8005744:	f10d 030e 	add.w	r3, sp, #14
 8005748:	f10d 020f 	add.w	r2, sp, #15
 800574c:	f002 fab4 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005750:	88a1      	ldrh	r1, [r4, #4]
 8005752:	68e0      	ldr	r0, [r4, #12]
 8005754:	f001 fddc 	bl	8007310 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 8005758:	2f00      	cmp	r7, #0
 800575a:	f000 80a0 	beq.w	800589e <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 800575e:	88a1      	ldrh	r1, [r4, #4]
 8005760:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005762:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005764:	f001 fddc 	bl	8007320 <gpio_reset>
  txdt = address;
 8005768:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 800576a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800576c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005770:	462b      	mov	r3, r5
 8005772:	f10d 020f 	add.w	r2, sp, #15
 8005776:	a804      	add	r0, sp, #16
 8005778:	f002 f9f2 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800577c:	9500      	str	r5, [sp, #0]
 800577e:	f10d 030e 	add.w	r3, sp, #14
 8005782:	f10d 020f 	add.w	r2, sp, #15
 8005786:	6821      	ldr	r1, [r4, #0]
 8005788:	a804      	add	r0, sp, #16
  txdt = value;
 800578a:	2600      	movs	r6, #0
 800578c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005790:	f002 fa92 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005794:	88a1      	ldrh	r1, [r4, #4]
 8005796:	68e0      	ldr	r0, [r4, #12]
 8005798:	f001 fdba 	bl	8007310 <gpio_set>
  return response;
 800579c:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 80057a0:	88a1      	ldrh	r1, [r4, #4]
 80057a2:	68e0      	ldr	r0, [r4, #12]
 80057a4:	f001 fdbc 	bl	8007320 <gpio_reset>
  txdt = address;
 80057a8:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057aa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057ac:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057b0:	462b      	mov	r3, r5
 80057b2:	f10d 020f 	add.w	r2, sp, #15
 80057b6:	a804      	add	r0, sp, #16
 80057b8:	f002 f9d2 	bl	8007b60 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80057bc:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057be:	9500      	str	r5, [sp, #0]
 80057c0:	f10d 030e 	add.w	r3, sp, #14
 80057c4:	f10d 020f 	add.w	r2, sp, #15
 80057c8:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057ca:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057ce:	a804      	add	r0, sp, #16
 80057d0:	f002 fa72 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057d4:	88a1      	ldrh	r1, [r4, #4]
 80057d6:	68e0      	ldr	r0, [r4, #12]
 80057d8:	f001 fd9a 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 80057dc:	88a1      	ldrh	r1, [r4, #4]
 80057de:	68e0      	ldr	r0, [r4, #12]
 80057e0:	f001 fd9e 	bl	8007320 <gpio_reset>
  txdt = address;
 80057e4:	238d      	movs	r3, #141	; 0x8d
 80057e6:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057ea:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057ec:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057ee:	6821      	ldr	r1, [r4, #0]
 80057f0:	f10d 020f 	add.w	r2, sp, #15
 80057f4:	a804      	add	r0, sp, #16
 80057f6:	f002 f9b3 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057fa:	9500      	str	r5, [sp, #0]
 80057fc:	f10d 030e 	add.w	r3, sp, #14
 8005800:	f10d 020f 	add.w	r2, sp, #15
 8005804:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005806:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005808:	a804      	add	r0, sp, #16
  txdt = value;
 800580a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800580e:	f002 fa53 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005812:	88a1      	ldrh	r1, [r4, #4]
 8005814:	68e0      	ldr	r0, [r4, #12]
 8005816:	f001 fd7b 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 800581a:	88a1      	ldrh	r1, [r4, #4]
 800581c:	68e0      	ldr	r0, [r4, #12]
 800581e:	f001 fd7f 	bl	8007320 <gpio_reset>
  txdt = address;
 8005822:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005824:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005826:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800582a:	462b      	mov	r3, r5
 800582c:	f10d 020f 	add.w	r2, sp, #15
 8005830:	a804      	add	r0, sp, #16
 8005832:	f002 f995 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005836:	9500      	str	r5, [sp, #0]
 8005838:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800583a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800583e:	f10d 030e 	add.w	r3, sp, #14
 8005842:	f10d 020f 	add.w	r2, sp, #15
 8005846:	a804      	add	r0, sp, #16
 8005848:	f002 fa36 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800584c:	68e0      	ldr	r0, [r4, #12]
 800584e:	88a1      	ldrh	r1, [r4, #4]
 8005850:	f001 fd5e 	bl	8007310 <gpio_set>
	return true;
 8005854:	4628      	mov	r0, r5
}
 8005856:	b007      	add	sp, #28
 8005858:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 800585a:	88a1      	ldrh	r1, [r4, #4]
 800585c:	68e0      	ldr	r0, [r4, #12]
 800585e:	f001 fd5f 	bl	8007320 <gpio_reset>
  txdt = address;
 8005862:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005864:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005866:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800586a:	4633      	mov	r3, r6
 800586c:	f10d 020f 	add.w	r2, sp, #15
 8005870:	a804      	add	r0, sp, #16
 8005872:	f002 f975 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005876:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005878:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800587a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800587c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005880:	a804      	add	r0, sp, #16
 8005882:	f10d 030e 	add.w	r3, sp, #14
 8005886:	f10d 020f 	add.w	r2, sp, #15
 800588a:	f002 fa15 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800588e:	88a1      	ldrh	r1, [r4, #4]
 8005890:	68e0      	ldr	r0, [r4, #12]
 8005892:	f001 fd3d 	bl	8007310 <gpio_set>
  return response;
 8005896:	e741      	b.n	800571c <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 8005898:	4628      	mov	r0, r5
}
 800589a:	b007      	add	sp, #28
 800589c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 800589e:	88a1      	ldrh	r1, [r4, #4]
 80058a0:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 80058a2:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 80058a4:	f001 fd3c 	bl	8007320 <gpio_reset>
  txdt = address;
 80058a8:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058aa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058ac:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058b0:	462b      	mov	r3, r5
 80058b2:	f10d 020f 	add.w	r2, sp, #15
 80058b6:	a804      	add	r0, sp, #16
 80058b8:	f002 f952 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058bc:	9500      	str	r5, [sp, #0]
 80058be:	f10d 030e 	add.w	r3, sp, #14
 80058c2:	f10d 020f 	add.w	r2, sp, #15
 80058c6:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80058c8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058cc:	a804      	add	r0, sp, #16
 80058ce:	f002 f9f3 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80058d2:	88a1      	ldrh	r1, [r4, #4]
 80058d4:	68e0      	ldr	r0, [r4, #12]
 80058d6:	f001 fd1b 	bl	8007310 <gpio_set>
  return response;
 80058da:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 80058de:	88a1      	ldrh	r1, [r4, #4]
 80058e0:	68e0      	ldr	r0, [r4, #12]
 80058e2:	f001 fd1d 	bl	8007320 <gpio_reset>
  txdt = address;
 80058e6:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058e8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058ea:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058ee:	462b      	mov	r3, r5
 80058f0:	f10d 020f 	add.w	r2, sp, #15
 80058f4:	a804      	add	r0, sp, #16
 80058f6:	f002 f933 	bl	8007b60 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80058fa:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058fe:	9500      	str	r5, [sp, #0]
 8005900:	e75e      	b.n	80057c0 <_ZN6sx127x11beginPacketEb+0x13c>
 8005902:	bf00      	nop

08005904 <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 8005904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	4604      	mov	r4, r0
 800590a:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 800590c:	460f      	mov	r7, r1
 800590e:	b319      	cbz	r1, 8005958 <_ZN6sx127x9endPacketEb+0x54>
 8005910:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005912:	b30b      	cbz	r3, 8005958 <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 8005914:	8881      	ldrh	r1, [r0, #4]
 8005916:	68c0      	ldr	r0, [r0, #12]
 8005918:	f001 fd02 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800591c:	f10d 050f 	add.w	r5, sp, #15
 8005920:	ae04      	add	r6, sp, #16
  txdt = address;
 8005922:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005924:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005926:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800592a:	462a      	mov	r2, r5
 800592c:	4630      	mov	r0, r6
 800592e:	2301      	movs	r3, #1
 8005930:	f002 f916 	bl	8007b60 <_ZN3spi8transmitEmm>
  txdt = value;
 8005934:	2340      	movs	r3, #64	; 0x40
 8005936:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800593a:	2301      	movs	r3, #1
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	f10d 080e 	add.w	r8, sp, #14
 8005942:	6821      	ldr	r1, [r4, #0]
 8005944:	4630      	mov	r0, r6
 8005946:	4643      	mov	r3, r8
 8005948:	462a      	mov	r2, r5
 800594a:	f002 f9b5 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800594e:	88a1      	ldrh	r1, [r4, #4]
 8005950:	68e0      	ldr	r0, [r4, #12]
 8005952:	f001 fcdd 	bl	8007310 <gpio_set>
  return response;
 8005956:	e004      	b.n	8005962 <_ZN6sx127x9endPacketEb+0x5e>
 8005958:	f10d 050f 	add.w	r5, sp, #15
 800595c:	ae04      	add	r6, sp, #16
 800595e:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 8005962:	88a1      	ldrh	r1, [r4, #4]
 8005964:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005966:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 800596a:	f001 fcd9 	bl	8007320 <gpio_reset>
  txdt = address;
 800596e:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005972:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005974:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005978:	464b      	mov	r3, r9
 800597a:	462a      	mov	r2, r5
 800597c:	4630      	mov	r0, r6
 800597e:	f002 f8ef 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005982:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005986:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005988:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800598a:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800598e:	4630      	mov	r0, r6
 8005990:	4643      	mov	r3, r8
 8005992:	462a      	mov	r2, r5
 8005994:	f002 f990 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005998:	88a1      	ldrh	r1, [r4, #4]
 800599a:	68e0      	ldr	r0, [r4, #12]
 800599c:	f001 fcb8 	bl	8007310 <gpio_set>
	if(!async){
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	d13b      	bne.n	8005a1c <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 80059a4:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 80059a8:	88a1      	ldrh	r1, [r4, #4]
 80059aa:	68e0      	ldr	r0, [r4, #12]
 80059ac:	f001 fcb8 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059b0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059b2:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059b6:	2301      	movs	r3, #1
 80059b8:	462a      	mov	r2, r5
 80059ba:	4630      	mov	r0, r6
 80059bc:	f002 f8d0 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059c0:	6821      	ldr	r1, [r4, #0]
 80059c2:	f8cd 9000 	str.w	r9, [sp]
 80059c6:	4643      	mov	r3, r8
 80059c8:	462a      	mov	r2, r5
 80059ca:	4630      	mov	r0, r6
  txdt = value;
 80059cc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059d0:	f002 f972 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80059d4:	88a1      	ldrh	r1, [r4, #4]
 80059d6:	68e0      	ldr	r0, [r4, #12]
 80059d8:	f001 fc9a 	bl	8007310 <gpio_set>
  return response;
 80059dc:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 80059e0:	071b      	lsls	r3, r3, #28
 80059e2:	d5e1      	bpl.n	80059a8 <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 80059e4:	88a1      	ldrh	r1, [r4, #4]
 80059e6:	68e0      	ldr	r0, [r4, #12]
 80059e8:	f001 fc9a 	bl	8007320 <gpio_reset>
  txdt = address;
 80059ec:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059ee:	462a      	mov	r2, r5
 80059f0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80059f2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80059f6:	2301      	movs	r3, #1
 80059f8:	4630      	mov	r0, r6
 80059fa:	f002 f8b1 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80059fe:	f8cd 9000 	str.w	r9, [sp]
 8005a02:	6821      	ldr	r1, [r4, #0]
 8005a04:	4630      	mov	r0, r6
 8005a06:	462a      	mov	r2, r5
 8005a08:	4643      	mov	r3, r8
  txdt = value;
 8005a0a:	2508      	movs	r5, #8
 8005a0c:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a10:	f002 f952 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a14:	88a1      	ldrh	r1, [r4, #4]
 8005a16:	68e0      	ldr	r0, [r4, #12]
 8005a18:	f001 fc7a 	bl	8007310 <gpio_set>
}
 8005a1c:	2001      	movs	r0, #1
 8005a1e:	b006      	add	sp, #24
 8005a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005a24 <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 8005a24:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005a26:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 8005a28:	b087      	sub	sp, #28
 8005a2a:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005a2c:	68c0      	ldr	r0, [r0, #12]
 8005a2e:	f001 fc77 	bl	8007320 <gpio_reset>
  txdt = address;
 8005a32:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a34:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a36:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a3a:	f10d 020f 	add.w	r2, sp, #15
 8005a3e:	a804      	add	r0, sp, #16
 8005a40:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a42:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a44:	f002 f88c 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a48:	6821      	ldr	r1, [r4, #0]
 8005a4a:	9500      	str	r5, [sp, #0]
 8005a4c:	f10d 030e 	add.w	r3, sp, #14
 8005a50:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005a54:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a58:	a804      	add	r0, sp, #16
  txdt = value;
 8005a5a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005a5e:	f002 f92b 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005a62:	68e0      	ldr	r0, [r4, #12]
 8005a64:	88a1      	ldrh	r1, [r4, #4]
 8005a66:	f001 fc53 	bl	8007310 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005a6a:	4a05      	ldr	r2, [pc, #20]	; (8005a80 <_ZN6sx127x10packetRssiEv+0x5c>)
 8005a6c:	6a23      	ldr	r3, [r4, #32]
  return response;
 8005a6e:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005a72:	4293      	cmp	r3, r2
 8005a74:	bfd4      	ite	le
 8005a76:	23a4      	movle	r3, #164	; 0xa4
 8005a78:	239d      	movgt	r3, #157	; 0x9d
}
 8005a7a:	1ac0      	subs	r0, r0, r3
 8005a7c:	b007      	add	sp, #28
 8005a7e:	bd30      	pop	{r4, r5, pc}
 8005a80:	1f4add3f 	.word	0x1f4add3f

08005a84 <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 8005a84:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005a86:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 8005a88:	b087      	sub	sp, #28
 8005a8a:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005a8c:	68c0      	ldr	r0, [r0, #12]
 8005a8e:	f001 fc47 	bl	8007320 <gpio_reset>
  txdt = address;
 8005a92:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a94:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005a96:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005a9a:	f10d 020f 	add.w	r2, sp, #15
 8005a9e:	a804      	add	r0, sp, #16
 8005aa0:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005aa2:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005aa4:	f002 f85c 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005aa8:	6821      	ldr	r1, [r4, #0]
 8005aaa:	9500      	str	r5, [sp, #0]
 8005aac:	f10d 030e 	add.w	r3, sp, #14
 8005ab0:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005ab4:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ab8:	a804      	add	r0, sp, #16
  txdt = value;
 8005aba:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005abe:	f002 f8fb 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005ac2:	68e0      	ldr	r0, [r4, #12]
 8005ac4:	88a1      	ldrh	r1, [r4, #4]
 8005ac6:	f001 fc23 	bl	8007310 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005aca:	4a05      	ldr	r2, [pc, #20]	; (8005ae0 <_ZN6sx127x4rssiEv+0x5c>)
 8005acc:	6a23      	ldr	r3, [r4, #32]
 8005ace:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	bfd4      	ite	le
 8005ad6:	23a4      	movle	r3, #164	; 0xa4
 8005ad8:	239d      	movgt	r3, #157	; 0x9d
}
 8005ada:	1ac0      	subs	r0, r0, r3
 8005adc:	b007      	add	sp, #28
 8005ade:	bd30      	pop	{r4, r5, pc}
 8005ae0:	1f4add3f 	.word	0x1f4add3f

08005ae4 <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae8:	4604      	mov	r4, r0
 8005aea:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005aec:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005aee:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005af0:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005af2:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005af4:	f001 fc14 	bl	8007320 <gpio_reset>
  txdt = address;
 8005af8:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005afa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005afc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b00:	f10d 020f 	add.w	r2, sp, #15
 8005b04:	2301      	movs	r3, #1
 8005b06:	a804      	add	r0, sp, #16
 8005b08:	f002 f82a 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	6821      	ldr	r1, [r4, #0]
 8005b12:	f10d 030e 	add.w	r3, sp, #14
 8005b16:	f10d 020f 	add.w	r2, sp, #15
 8005b1a:	a804      	add	r0, sp, #16
  txdt = value;
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b22:	f002 f8c9 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b26:	88a1      	ldrh	r1, [r4, #4]
 8005b28:	68e0      	ldr	r0, [r4, #12]
 8005b2a:	f001 fbf1 	bl	8007310 <gpio_set>
  return response;
 8005b2e:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 8005b32:	eb03 0a09 	add.w	sl, r3, r9
 8005b36:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8005b3a:	bf84      	itt	hi
 8005b3c:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b40:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 8005b44:	f1b9 0f00 	cmp.w	r9, #0
 8005b48:	d025      	beq.n	8005b96 <_ZN6sx127x8transmitEPKhj+0xb2>
 8005b4a:	3d01      	subs	r5, #1
 8005b4c:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 8005b50:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b54:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8005b56:	88a1      	ldrh	r1, [r4, #4]
 8005b58:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b5a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 8005b5e:	f001 fbdf 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b62:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005b64:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005b68:	2301      	movs	r3, #1
 8005b6a:	f10d 020f 	add.w	r2, sp, #15
 8005b6e:	a804      	add	r0, sp, #16
 8005b70:	f001 fff6 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b74:	6821      	ldr	r1, [r4, #0]
 8005b76:	9700      	str	r7, [sp, #0]
 8005b78:	a804      	add	r0, sp, #16
 8005b7a:	f10d 030e 	add.w	r3, sp, #14
 8005b7e:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005b82:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005b86:	f002 f897 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005b8a:	88a1      	ldrh	r1, [r4, #4]
 8005b8c:	68e0      	ldr	r0, [r4, #12]
 8005b8e:	f001 fbbf 	bl	8007310 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 8005b92:	45ab      	cmp	fp, r5
 8005b94:	d1df      	bne.n	8005b56 <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 8005b96:	88a1      	ldrh	r1, [r4, #4]
 8005b98:	68e0      	ldr	r0, [r4, #12]
 8005b9a:	f001 fbc1 	bl	8007320 <gpio_reset>
  txdt = address;
 8005b9e:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ba0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ba2:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ba6:	f10d 020f 	add.w	r2, sp, #15
 8005baa:	a804      	add	r0, sp, #16
 8005bac:	2301      	movs	r3, #1
 8005bae:	f001 ffd7 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	9100      	str	r1, [sp, #0]
 8005bb6:	6821      	ldr	r1, [r4, #0]
 8005bb8:	a804      	add	r0, sp, #16
 8005bba:	f10d 030e 	add.w	r3, sp, #14
 8005bbe:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 8005bc2:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 8005bc6:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005bca:	f002 f875 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005bce:	68e0      	ldr	r0, [r4, #12]
 8005bd0:	88a1      	ldrh	r1, [r4, #4]
 8005bd2:	f001 fb9d 	bl	8007310 <gpio_set>
}
 8005bd6:	4648      	mov	r0, r9
 8005bd8:	b007      	add	sp, #28
 8005bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bde:	bf00      	nop

08005be0 <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005be4:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 8005be6:	b086      	sub	sp, #24
 8005be8:	4604      	mov	r4, r0
 8005bea:	4689      	mov	r9, r1
  txdt = address;
 8005bec:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005bf0:	2701      	movs	r7, #1
  txdt = value;
 8005bf2:	462e      	mov	r6, r5
 8005bf4:	e020      	b.n	8005c38 <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 8005bf6:	88a1      	ldrh	r1, [r4, #4]
 8005bf8:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 8005bfa:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005bfc:	f001 fb90 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c00:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c02:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c06:	2301      	movs	r3, #1
 8005c08:	f10d 020f 	add.w	r2, sp, #15
 8005c0c:	a804      	add	r0, sp, #16
 8005c0e:	f001 ffa7 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c12:	6821      	ldr	r1, [r4, #0]
 8005c14:	9700      	str	r7, [sp, #0]
 8005c16:	f10d 030e 	add.w	r3, sp, #14
 8005c1a:	f10d 020f 	add.w	r2, sp, #15
 8005c1e:	a804      	add	r0, sp, #16
  txdt = value;
 8005c20:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c24:	f002 f848 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c28:	88a1      	ldrh	r1, [r4, #4]
 8005c2a:	68e0      	ldr	r0, [r4, #12]
 8005c2c:	f001 fb70 	bl	8007310 <gpio_set>
  return response;
 8005c30:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 8005c34:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 8005c38:	88a1      	ldrh	r1, [r4, #4]
 8005c3a:	68e0      	ldr	r0, [r4, #12]
 8005c3c:	f001 fb70 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c40:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005c42:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005c46:	f10d 020f 	add.w	r2, sp, #15
 8005c4a:	a804      	add	r0, sp, #16
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f001 ff87 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c52:	6821      	ldr	r1, [r4, #0]
 8005c54:	9700      	str	r7, [sp, #0]
 8005c56:	f10d 030e 	add.w	r3, sp, #14
 8005c5a:	f10d 020f 	add.w	r2, sp, #15
 8005c5e:	a804      	add	r0, sp, #16
  txdt = value;
 8005c60:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005c64:	f002 f828 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005c68:	68e0      	ldr	r0, [r4, #12]
 8005c6a:	88a1      	ldrh	r1, [r4, #4]
 8005c6c:	f001 fb50 	bl	8007310 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005c70:	69a0      	ldr	r0, [r4, #24]
  return response;
 8005c72:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 8005c76:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005c78:	b2c0      	uxtb	r0, r0
	while(available()){
 8005c7a:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 8005c7c:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 8005c80:	f105 0501 	add.w	r5, r5, #1
 8005c84:	d1b7      	bne.n	8005bf6 <_ZN6sx127x7receiveEPc+0x16>
}
 8005c86:	b006      	add	sp, #24
 8005c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c8c <_ZN6sx127x7ReceiveEh>:
void sx127x::Receive(uint8_t size){
 8005c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005c90:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::Receive(uint8_t size){
 8005c92:	b086      	sub	sp, #24
 8005c94:	4604      	mov	r4, r0
 8005c96:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80d4 	beq.w	8005e46 <_ZN6sx127x7ReceiveEh+0x1ba>
  gpio_reset(_csport, _cs);
 8005c9e:	8881      	ldrh	r1, [r0, #4]
 8005ca0:	68c0      	ldr	r0, [r0, #12]
 8005ca2:	f001 fb3d 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ca6:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 8005caa:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cac:	ae04      	add	r6, sp, #16
 8005cae:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005cb0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cb4:	462a      	mov	r2, r5
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	4630      	mov	r0, r6
 8005cba:	f001 ff51 	bl	8007b60 <_ZN3spi8transmitEmm>
  txdt = value;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	f10d 080e 	add.w	r8, sp, #14
 8005ccc:	6821      	ldr	r1, [r4, #0]
 8005cce:	4630      	mov	r0, r6
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	462a      	mov	r2, r5
 8005cd4:	f001 fff0 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005cd8:	88a1      	ldrh	r1, [r4, #4]
 8005cda:	68e0      	ldr	r0, [r4, #12]
 8005cdc:	f001 fb18 	bl	8007310 <gpio_set>
	if (size > 0) {
 8005ce0:	2f00      	cmp	r7, #0
 8005ce2:	d07c      	beq.n	8005dde <_ZN6sx127x7ReceiveEh+0x152>
	_implicitHeaderMode = 1;
 8005ce4:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005ce8:	88a1      	ldrh	r1, [r4, #4]
 8005cea:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005cec:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 8005cf0:	f001 fb16 	bl	8007320 <gpio_reset>
  txdt = address;
 8005cf4:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cf8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005cfa:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005cfe:	464b      	mov	r3, r9
 8005d00:	462a      	mov	r2, r5
 8005d02:	4630      	mov	r0, r6
 8005d04:	f001 ff2c 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d08:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 8005d0c:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d10:	4643      	mov	r3, r8
 8005d12:	462a      	mov	r2, r5
 8005d14:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005d16:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f001 ffcc 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d20:	88a1      	ldrh	r1, [r4, #4]
 8005d22:	68e0      	ldr	r0, [r4, #12]
 8005d24:	f001 faf4 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d28:	88a1      	ldrh	r1, [r4, #4]
 8005d2a:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005d2c:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 8005d30:	f001 faf6 	bl	8007320 <gpio_reset>
  txdt = address;
 8005d34:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d38:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d3a:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d3e:	464b      	mov	r3, r9
 8005d40:	462a      	mov	r2, r5
 8005d42:	4630      	mov	r0, r6
 8005d44:	f001 ff0c 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d48:	f8cd 9000 	str.w	r9, [sp]
 8005d4c:	4643      	mov	r3, r8
 8005d4e:	462a      	mov	r2, r5
 8005d50:	6821      	ldr	r1, [r4, #0]
 8005d52:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8005d54:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 8005d58:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d5c:	f001 ffac 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d60:	88a1      	ldrh	r1, [r4, #4]
 8005d62:	68e0      	ldr	r0, [r4, #12]
 8005d64:	f001 fad4 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005d68:	88a1      	ldrh	r1, [r4, #4]
 8005d6a:	68e0      	ldr	r0, [r4, #12]
 8005d6c:	f001 fad8 	bl	8007320 <gpio_reset>
  txdt = address;
 8005d70:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d74:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005d76:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f001 feee 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d84:	f8cd 9000 	str.w	r9, [sp]
 8005d88:	4643      	mov	r3, r8
 8005d8a:	462a      	mov	r2, r5
 8005d8c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005d8e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005d92:	4630      	mov	r0, r6
 8005d94:	f001 ff90 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005d98:	88a1      	ldrh	r1, [r4, #4]
 8005d9a:	68e0      	ldr	r0, [r4, #12]
 8005d9c:	f001 fab8 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005da0:	88a1      	ldrh	r1, [r4, #4]
 8005da2:	68e0      	ldr	r0, [r4, #12]
 8005da4:	f001 fabc 	bl	8007320 <gpio_reset>
  txdt = address;
 8005da8:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005daa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005dac:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005db0:	462a      	mov	r2, r5
 8005db2:	4630      	mov	r0, r6
 8005db4:	2301      	movs	r3, #1
 8005db6:	f001 fed3 	bl	8007b60 <_ZN3spi8transmitEmm>
  txdt = value;
 8005dba:	2185      	movs	r1, #133	; 0x85
 8005dbc:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	9100      	str	r1, [sp, #0]
 8005dc4:	6821      	ldr	r1, [r4, #0]
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	4643      	mov	r3, r8
 8005dca:	462a      	mov	r2, r5
 8005dcc:	f001 ff74 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005dd0:	88a1      	ldrh	r1, [r4, #4]
 8005dd2:	68e0      	ldr	r0, [r4, #12]
 8005dd4:	f001 fa9c 	bl	8007310 <gpio_set>
}
 8005dd8:	b006      	add	sp, #24
 8005dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005dde:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005de2:	88a1      	ldrh	r1, [r4, #4]
 8005de4:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005de6:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005de8:	f001 fa9a 	bl	8007320 <gpio_reset>
  txdt = address;
 8005dec:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005df0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005df2:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005df6:	464b      	mov	r3, r9
 8005df8:	462a      	mov	r2, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f001 feb0 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e00:	f8cd 9000 	str.w	r9, [sp]
 8005e04:	4643      	mov	r3, r8
 8005e06:	462a      	mov	r2, r5
 8005e08:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005e0a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f001 ff52 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e14:	88a1      	ldrh	r1, [r4, #4]
 8005e16:	68e0      	ldr	r0, [r4, #12]
 8005e18:	f001 fa7a 	bl	8007310 <gpio_set>
  return response;
 8005e1c:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8005e20:	88a1      	ldrh	r1, [r4, #4]
 8005e22:	68e0      	ldr	r0, [r4, #12]
 8005e24:	f001 fa7c 	bl	8007320 <gpio_reset>
  txdt = address;
 8005e28:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e2c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e2e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e32:	464b      	mov	r3, r9
 8005e34:	462a      	mov	r2, r5
 8005e36:	4630      	mov	r0, r6
 8005e38:	f001 fe92 	bl	8007b60 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005e3c:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e40:	f8cd 9000 	str.w	r9, [sp]
 8005e44:	e7a0      	b.n	8005d88 <_ZN6sx127x7ReceiveEh+0xfc>
 8005e46:	f10d 050f 	add.w	r5, sp, #15
 8005e4a:	ae04      	add	r6, sp, #16
 8005e4c:	f10d 080e 	add.w	r8, sp, #14
 8005e50:	e746      	b.n	8005ce0 <_ZN6sx127x7ReceiveEh+0x54>
 8005e52:	bf00      	nop

08005e54 <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 8005e54:	b530      	push	{r4, r5, lr}
 8005e56:	4604      	mov	r4, r0
 8005e58:	b087      	sub	sp, #28
 8005e5a:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 8005e5c:	68c0      	ldr	r0, [r0, #12]
 8005e5e:	88a1      	ldrh	r1, [r4, #4]
 8005e60:	f001 fa5e 	bl	8007320 <gpio_reset>
  txdt = address;
 8005e64:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e66:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005e68:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005e6c:	f10d 020f 	add.w	r2, sp, #15
 8005e70:	a804      	add	r0, sp, #16
 8005e72:	2301      	movs	r3, #1
 8005e74:	f001 fe74 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e78:	2301      	movs	r3, #1
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005e7e:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005e82:	a804      	add	r0, sp, #16
 8005e84:	f10d 030e 	add.w	r3, sp, #14
 8005e88:	f10d 020f 	add.w	r2, sp, #15
 8005e8c:	f001 ff14 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005e90:	88a1      	ldrh	r1, [r4, #4]
 8005e92:	68e0      	ldr	r0, [r4, #12]
 8005e94:	f001 fa3c 	bl	8007310 <gpio_set>
}
 8005e98:	b007      	add	sp, #28
 8005e9a:	bd30      	pop	{r4, r5, pc}

08005e9c <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 8005e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 8005ea0:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005ea6:	68c0      	ldr	r0, [r0, #12]
 8005ea8:	f001 fa3a 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eac:	2301      	movs	r3, #1
  txdt = address;
 8005eae:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005eb0:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eb2:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 8005eb6:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005eba:	a804      	add	r0, sp, #16
 8005ebc:	6821      	ldr	r1, [r4, #0]
 8005ebe:	f001 fe4f 	bl	8007b60 <_ZN3spi8transmitEmm>
  txdt = value;
 8005ec2:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ec4:	9600      	str	r6, [sp, #0]
 8005ec6:	f10d 020f 	add.w	r2, sp, #15
 8005eca:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005ecc:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005ed0:	a804      	add	r0, sp, #16
 8005ed2:	f10d 030e 	add.w	r3, sp, #14
 8005ed6:	f001 feef 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005eda:	88a1      	ldrh	r1, [r4, #4]
 8005edc:	68e0      	ldr	r0, [r4, #12]
 8005ede:	f001 fa17 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005ee2:	88a1      	ldrh	r1, [r4, #4]
 8005ee4:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005ee6:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 8005eea:	f001 fa19 	bl	8007320 <gpio_reset>
  txdt = address;
 8005eee:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ef2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005ef4:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005ef8:	4633      	mov	r3, r6
 8005efa:	f10d 020f 	add.w	r2, sp, #15
 8005efe:	a804      	add	r0, sp, #16
 8005f00:	f001 fe2e 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f04:	9600      	str	r6, [sp, #0]
 8005f06:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005f08:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f0c:	a804      	add	r0, sp, #16
 8005f0e:	f10d 030e 	add.w	r3, sp, #14
 8005f12:	f10d 020f 	add.w	r2, sp, #15
 8005f16:	f001 fecf 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f1a:	88a1      	ldrh	r1, [r4, #4]
 8005f1c:	68e0      	ldr	r0, [r4, #12]
 8005f1e:	f001 f9f7 	bl	8007310 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8005f22:	f015 0720 	ands.w	r7, r5, #32
 8005f26:	d16d      	bne.n	8006004 <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 8005f28:	066a      	lsls	r2, r5, #25
 8005f2a:	d569      	bpl.n	8006000 <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005f2c:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8005f2e:	88a1      	ldrh	r1, [r4, #4]
 8005f30:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 8005f32:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 8005f34:	2d00      	cmp	r5, #0
 8005f36:	d168      	bne.n	800600a <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 8005f38:	f001 f9f2 	bl	8007320 <gpio_reset>
  txdt = address;
 8005f3c:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f3e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f40:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f44:	4633      	mov	r3, r6
 8005f46:	f10d 020f 	add.w	r2, sp, #15
 8005f4a:	a804      	add	r0, sp, #16
 8005f4c:	f001 fe08 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f50:	9600      	str	r6, [sp, #0]
  txdt = value;
 8005f52:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f56:	f10d 030e 	add.w	r3, sp, #14
 8005f5a:	f10d 020f 	add.w	r2, sp, #15
 8005f5e:	6821      	ldr	r1, [r4, #0]
 8005f60:	a804      	add	r0, sp, #16
 8005f62:	f001 fea9 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005f66:	88a1      	ldrh	r1, [r4, #4]
 8005f68:	68e0      	ldr	r0, [r4, #12]
 8005f6a:	f001 f9d1 	bl	8007310 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f6e:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 8005f70:	88a1      	ldrh	r1, [r4, #4]
 8005f72:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005f74:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 8005f78:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 8005f7a:	f001 f9d1 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f7e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005f80:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005f84:	462b      	mov	r3, r5
 8005f86:	f10d 020f 	add.w	r2, sp, #15
 8005f8a:	a804      	add	r0, sp, #16
 8005f8c:	f001 fde8 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005f90:	9500      	str	r5, [sp, #0]
 8005f92:	f10d 030e 	add.w	r3, sp, #14
 8005f96:	f10d 020f 	add.w	r2, sp, #15
 8005f9a:	eb0d 0006 	add.w	r0, sp, r6
 8005f9e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005fa0:	2600      	movs	r6, #0
 8005fa2:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fa6:	f001 fe87 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005faa:	88a1      	ldrh	r1, [r4, #4]
 8005fac:	68e0      	ldr	r0, [r4, #12]
 8005fae:	f001 f9af 	bl	8007310 <gpio_set>
  gpio_reset(_csport, _cs);
 8005fb2:	88a1      	ldrh	r1, [r4, #4]
 8005fb4:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005fb6:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 8005fba:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 8005fbc:	f001 f9b0 	bl	8007320 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fc0:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005fc2:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005fc6:	462b      	mov	r3, r5
 8005fc8:	f10d 020f 	add.w	r2, sp, #15
 8005fcc:	a804      	add	r0, sp, #16
 8005fce:	f001 fdc7 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fd2:	9500      	str	r5, [sp, #0]
 8005fd4:	f10d 030e 	add.w	r3, sp, #14
 8005fd8:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005fda:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005fde:	f10d 020f 	add.w	r2, sp, #15
 8005fe2:	a804      	add	r0, sp, #16
 8005fe4:	f001 fe68 	bl	8007cb8 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005fe8:	88a1      	ldrh	r1, [r4, #4]
 8005fea:	68e0      	ldr	r0, [r4, #12]
 8005fec:	f001 f990 	bl	8007310 <gpio_set>
			if (RxDoneHandler) {
 8005ff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005ff2:	b13b      	cbz	r3, 8006004 <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	4620      	mov	r0, r4
}
 8005ff8:	b006      	add	sp, #24
 8005ffa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 8005ffe:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 8006000:	072b      	lsls	r3, r5, #28
 8006002:	d412      	bmi.n	800602a <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 8006004:	b006      	add	sp, #24
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 800600a:	f001 f989 	bl	8007320 <gpio_reset>
  txdt = address;
 800600e:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006010:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8006012:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8006016:	4633      	mov	r3, r6
 8006018:	f10d 020f 	add.w	r2, sp, #15
 800601c:	a804      	add	r0, sp, #16
 800601e:	f001 fd9f 	bl	8007b60 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006022:	9600      	str	r6, [sp, #0]
  txdt = value;
 8006024:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8006028:	e795      	b.n	8005f56 <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 800602a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0e9      	beq.n	8006004 <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 8006030:	4620      	mov	r0, r4
}
 8006032:	b006      	add	sp, #24
 8006034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 8006038:	4718      	bx	r3
 800603a:	bf00      	nop

0800603c <_ZL14wifiif_request10wifi_cmd_tPc>:

static int wifiif_is_err(char *str){
	return strcmp(str, "ERR");
}

static void wifiif_request(wifi_cmd_t cmd, char *data){
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	b08d      	sub	sp, #52	; 0x34
 8006042:	4f90      	ldr	r7, [pc, #576]	; (8006284 <_ZL14wifiif_request10wifi_cmd_tPc+0x248>)
 8006044:	9103      	str	r1, [sp, #12]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8006046:	4990      	ldr	r1, [pc, #576]	; (8006288 <_ZL14wifiif_request10wifi_cmd_tPc+0x24c>)
 8006048:	f7ff f870 	bl	800512c <cmd_to_str>
	char *req_data;
	asprintf(&req_data, "%s: %s", cmd_str, data);
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	498f      	ldr	r1, [pc, #572]	; (800628c <_ZL14wifiif_request10wifi_cmd_tPc+0x250>)
	char *cmd_str = cmd_to_str(cmd, command_string);
 8006050:	4602      	mov	r2, r0
	asprintf(&req_data, "%s: %s", cmd_str, data);
 8006052:	a805      	add	r0, sp, #20
 8006054:	f004 fd34 	bl	800aac0 <asiprintf>
	wifiif_transmit(req_data);
 8006058:	9d05      	ldr	r5, [sp, #20]
	int16_t len = strlen(str);
 800605a:	4628      	mov	r0, r5
 800605c:	f7fa f8d2 	bl	8000204 <strlen>
 8006060:	b204      	sxth	r4, r0
	while(remaining > 0){
 8006062:	2c00      	cmp	r4, #0
 8006064:	dd0e      	ble.n	8006084 <_ZL14wifiif_request10wifi_cmd_tPc+0x48>
		int16_t sendSize = (remaining > MAX_UART_TX_BUFFER_SIZE)? MAX_UART_TX_BUFFER_SIZE : remaining;
 8006066:	2c64      	cmp	r4, #100	; 0x64
 8006068:	4623      	mov	r3, r4
		if(fprequest) fprequest(str, sendSize);
 800606a:	683a      	ldr	r2, [r7, #0]
		int16_t sendSize = (remaining > MAX_UART_TX_BUFFER_SIZE)? MAX_UART_TX_BUFFER_SIZE : remaining;
 800606c:	bfa8      	it	ge
 800606e:	2364      	movge	r3, #100	; 0x64
		if(fprequest) fprequest(str, sendSize);
 8006070:	b29e      	uxth	r6, r3
 8006072:	4628      	mov	r0, r5
 8006074:	4631      	mov	r1, r6
		str += sendSize;
 8006076:	441d      	add	r5, r3
		if(fprequest) fprequest(str, sendSize);
 8006078:	b122      	cbz	r2, 8006084 <_ZL14wifiif_request10wifi_cmd_tPc+0x48>
		remaining -= sendSize;
 800607a:	1ba4      	subs	r4, r4, r6
 800607c:	b224      	sxth	r4, r4
		if(fprequest) fprequest(str, sendSize);
 800607e:	4790      	blx	r2
	while(remaining > 0){
 8006080:	2c00      	cmp	r4, #0
 8006082:	dcf0      	bgt.n	8006066 <_ZL14wifiif_request10wifi_cmd_tPc+0x2a>
	delay_ms(1);
 8006084:	2001      	movs	r0, #1
 8006086:	f002 fa29 	bl	80084dc <delay_ms>
	if(fprequest) fprequest((char *)"\r\nend\r\n", 7);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	b113      	cbz	r3, 8006094 <_ZL14wifiif_request10wifi_cmd_tPc+0x58>
 800608e:	4880      	ldr	r0, [pc, #512]	; (8006290 <_ZL14wifiif_request10wifi_cmd_tPc+0x254>)
 8006090:	2107      	movs	r1, #7
 8006092:	4798      	blx	r3
#if ENABLE_COMPONENT_WIFIIF_DEBUG
//	wifiif_debug(req_data, __LINE__, __FUNCTION__);
#endif /* ENABLE_COMPONENT_WIFIIF_DEBUG */
	free(req_data);
 8006094:	9805      	ldr	r0, [sp, #20]
 8006096:	f004 fd6b 	bl	800ab70 <free>

	EventBits_t bits = xEventGroupWaitBits(data_eventgrp, DATA_EVENTBIT, pdTRUE, pdFALSE, WIFI_DEFAULT_TIMEOUT);
 800609a:	4a7e      	ldr	r2, [pc, #504]	; (8006294 <_ZL14wifiif_request10wifi_cmd_tPc+0x258>)
 800609c:	f242 7310 	movw	r3, #10000	; 0x2710
 80060a0:	6810      	ldr	r0, [r2, #0]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2201      	movs	r2, #1
 80060a6:	2300      	movs	r3, #0
 80060a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060ac:	f7fb fb1e 	bl	80016ec <xEventGroupWaitBits>
	if(bits == DATA_EVENTBIT){
 80060b0:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80060b4:	d012      	beq.n	80060dc <_ZL14wifiif_request10wifi_cmd_tPc+0xa0>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80060b6:	4b78      	ldr	r3, [pc, #480]	; (8006298 <_ZL14wifiif_request10wifi_cmd_tPc+0x25c>)
 80060b8:	4a78      	ldr	r2, [pc, #480]	; (800629c <_ZL14wifiif_request10wifi_cmd_tPc+0x260>)
 80060ba:	4979      	ldr	r1, [pc, #484]	; (80062a0 <_ZL14wifiif_request10wifi_cmd_tPc+0x264>)
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4879      	ldr	r0, [pc, #484]	; (80062a4 <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
 80060c0:	23b9      	movs	r3, #185	; 0xb9
 80060c2:	f003 fd53 	bl	8009b6c <LOG_DEBUG>
		if(response_data != NULL) free(response_data);
	}
	else{ // Parse packet fail.
		wifiif_debug((char *)"WiFi module not response the request.", __LINE__, __FUNCTION__);
		wifi_state = false;
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 80060c6:	4b78      	ldr	r3, [pc, #480]	; (80062a8 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
		wifi_state = false;
 80060c8:	4a78      	ldr	r2, [pc, #480]	; (80062ac <_ZL14wifiif_request10wifi_cmd_tPc+0x270>)
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 80060ca:	681b      	ldr	r3, [r3, #0]
		wifi_state = false;
 80060cc:	2100      	movs	r1, #0
 80060ce:	7011      	strb	r1, [r2, #0]
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 80060d0:	b10b      	cbz	r3, 80060d6 <_ZL14wifiif_request10wifi_cmd_tPc+0x9a>
 80060d2:	4608      	mov	r0, r1
 80060d4:	4798      	blx	r3
	}

}
 80060d6:	b00d      	add	sp, #52	; 0x34
 80060d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 	   uint8_t queue_len = uxQueueMessagesWaiting(data_queue);
 80060dc:	4e74      	ldr	r6, [pc, #464]	; (80062b0 <_ZL14wifiif_request10wifi_cmd_tPc+0x274>)
		pkt_t pkt;
 80060de:	2200      	movs	r2, #0
 80060e0:	2300      	movs	r3, #0
 	   uint8_t queue_len = uxQueueMessagesWaiting(data_queue);
 80060e2:	6830      	ldr	r0, [r6, #0]
		pkt_t pkt;
 80060e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 	   uint8_t queue_len = uxQueueMessagesWaiting(data_queue);
 80060e8:	f7fc faae 	bl	8002648 <uxQueueMessagesWaiting>
 	   for(uint8_t i=0; i<queue_len; i++){
 80060ec:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 80060f0:	f000 80a2 	beq.w	8006238 <_ZL14wifiif_request10wifi_cmd_tPc+0x1fc>
 80060f4:	2400      	movs	r4, #0
 	   uint16_t total_len = 0;
 80060f6:	46a0      	mov	r8, r4
 80060f8:	af09      	add	r7, sp, #36	; 0x24
 80060fa:	e002      	b.n	8006102 <_ZL14wifiif_request10wifi_cmd_tPc+0xc6>
 	   for(uint8_t i=0; i<queue_len; i++){
 80060fc:	b2e3      	uxtb	r3, r4
 80060fe:	42ab      	cmp	r3, r5
 8006100:	d217      	bcs.n	8006132 <_ZL14wifiif_request10wifi_cmd_tPc+0xf6>
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 8006102:	6830      	ldr	r0, [r6, #0]
 8006104:	2202      	movs	r2, #2
 8006106:	4639      	mov	r1, r7
 8006108:	f7fb ff34 	bl	8001f74 <xQueueReceive>
 800610c:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 800610e:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 8006112:	d1f3      	bne.n	80060fc <_ZL14wifiif_request10wifi_cmd_tPc+0xc0>
 			   total_len += strlen(break_data);
 8006114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006116:	f7fa f875 	bl	8000204 <strlen>
 800611a:	4440      	add	r0, r8
 			   xQueueSend(data_queue, &break_data, 2);
 800611c:	2300      	movs	r3, #0
 			   total_len += strlen(break_data);
 800611e:	fa1f f880 	uxth.w	r8, r0
 			   xQueueSend(data_queue, &break_data, 2);
 8006122:	2202      	movs	r2, #2
 8006124:	6830      	ldr	r0, [r6, #0]
 8006126:	4639      	mov	r1, r7
 8006128:	f7fb fcb0 	bl	8001a8c <xQueueGenericSend>
 	   for(uint8_t i=0; i<queue_len; i++){
 800612c:	b2e3      	uxtb	r3, r4
 800612e:	42ab      	cmp	r3, r5
 8006130:	d3e7      	bcc.n	8006102 <_ZL14wifiif_request10wifi_cmd_tPc+0xc6>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 8006132:	f108 0001 	add.w	r0, r8, #1
 8006136:	f004 fd13 	bl	800ab60 <malloc>
 800613a:	2400      	movs	r4, #0
 800613c:	4681      	mov	r9, r0
 800613e:	4682      	mov	sl, r0
 8006140:	e002      	b.n	8006148 <_ZL14wifiif_request10wifi_cmd_tPc+0x10c>
 	   for(uint8_t i=0; i<queue_len; i++){
 8006142:	b2e3      	uxtb	r3, r4
 8006144:	42ab      	cmp	r3, r5
 8006146:	d219      	bcs.n	800617c <_ZL14wifiif_request10wifi_cmd_tPc+0x140>
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 8006148:	6830      	ldr	r0, [r6, #0]
 800614a:	2202      	movs	r2, #2
 800614c:	4639      	mov	r1, r7
 800614e:	f7fb ff11 	bl	8001f74 <xQueueReceive>
 8006152:	2801      	cmp	r0, #1
 	   for(uint8_t i=0; i<queue_len; i++){
 8006154:	f104 0401 	add.w	r4, r4, #1
 		   if(xQueueReceive(data_queue, &break_data, 2) == pdTRUE){
 8006158:	d1f3      	bne.n	8006142 <_ZL14wifiif_request10wifi_cmd_tPc+0x106>
 			   uint16_t len = strlen(break_data);
 800615a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800615e:	4658      	mov	r0, fp
 8006160:	f7fa f850 	bl	8000204 <strlen>
 			   memcpy(tmp_data, break_data, len);
 8006164:	4659      	mov	r1, fp
 8006166:	b282      	uxth	r2, r0
 8006168:	4650      	mov	r0, sl
 			   tmp_data += len;
 800616a:	4492      	add	sl, r2
 			   memcpy(tmp_data, break_data, len);
 800616c:	f004 fd08 	bl	800ab80 <memcpy>
 			   free(break_data);
 8006170:	4658      	mov	r0, fp
 8006172:	f004 fcfd 	bl	800ab70 <free>
 	   for(uint8_t i=0; i<queue_len; i++){
 8006176:	b2e3      	uxtb	r3, r4
 8006178:	42ab      	cmp	r3, r5
 800617a:	d3e5      	bcc.n	8006148 <_ZL14wifiif_request10wifi_cmd_tPc+0x10c>
 	  (*dest_buffer)[total_len] = '\0';
 800617c:	44c8      	add	r8, r9
 800617e:	2300      	movs	r3, #0
 8006180:	f888 3000 	strb.w	r3, [r8]
		err = parse_packet(response_data, &pkt);
 8006184:	a906      	add	r1, sp, #24
 8006186:	4648      	mov	r0, r9
 8006188:	f7fe ff50 	bl	800502c <parse_packet>
		if(err != PKT_ERR_OK){
 800618c:	4604      	mov	r4, r0
 800618e:	2800      	cmp	r0, #0
 8006190:	d143      	bne.n	800621a <_ZL14wifiif_request10wifi_cmd_tPc+0x1de>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 8006192:	9e07      	ldr	r6, [sp, #28]
	return strcmp(str, "ERR");
 8006194:	4947      	ldr	r1, [pc, #284]	; (80062b4 <_ZL14wifiif_request10wifi_cmd_tPc+0x278>)
 8006196:	4630      	mov	r0, r6
 8006198:	f7fa f82a 	bl	80001f0 <strcmp>
		if(wifiif_is_err(pkt.data_str) != 0){ // Is not wifi command error.
 800619c:	4605      	mov	r5, r0
 800619e:	b308      	cbz	r0, 80061e4 <_ZL14wifiif_request10wifi_cmd_tPc+0x1a8>
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 80061a0:	4630      	mov	r0, r6
 80061a2:	f7fa f82f 	bl	8000204 <strlen>
 80061a6:	4607      	mov	r7, r0
 80061a8:	3001      	adds	r0, #1
 80061aa:	f004 fcd9 	bl	800ab60 <malloc>
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 80061ae:	4631      	mov	r1, r6
 80061b0:	463a      	mov	r2, r7
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 80061b2:	4605      	mov	r5, r0
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 80061b4:	f004 fce4 	bl	800ab80 <memcpy>
			data[strlen(pkt.data_str)] = '\0';
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7fa f823 	bl	8000204 <strlen>
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 80061be:	4932      	ldr	r1, [pc, #200]	; (8006288 <_ZL14wifiif_request10wifi_cmd_tPc+0x24c>)
			data[strlen(pkt.data_str)] = '\0';
 80061c0:	542c      	strb	r4, [r5, r0]
			wifi_cmd_t command = (wifi_cmd_t)str_to_cmd(pkt.cmd_str, command_string, WIFI_CMD_NUM);
 80061c2:	2211      	movs	r2, #17
 80061c4:	9806      	ldr	r0, [sp, #24]
 80061c6:	f7fe ff9b 	bl	8005100 <str_to_cmd>
 80061ca:	b2c6      	uxtb	r6, r0
			if(command == WIFI_ISCONNECTED){ // Check wifi connect state.
 80061cc:	2e03      	cmp	r6, #3
 80061ce:	d039      	beq.n	8006244 <_ZL14wifiif_request10wifi_cmd_tPc+0x208>
			if(fpcommand_handler) fpcommand_handler(command, data); // Handle wifiif event.
 80061d0:	4b35      	ldr	r3, [pc, #212]	; (80062a8 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	b113      	cbz	r3, 80061dc <_ZL14wifiif_request10wifi_cmd_tPc+0x1a0>
 80061d6:	4630      	mov	r0, r6
 80061d8:	4629      	mov	r1, r5
 80061da:	4798      	blx	r3
			if(data != NULL) free(data);
 80061dc:	4628      	mov	r0, r5
 80061de:	f004 fcc7 	bl	800ab70 <free>
 80061e2:	e00d      	b.n	8006200 <_ZL14wifiif_request10wifi_cmd_tPc+0x1c4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <_ZL14wifiif_request10wifi_cmd_tPc+0x25c>)
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4a33      	ldr	r2, [pc, #204]	; (80062b8 <_ZL14wifiif_request10wifi_cmd_tPc+0x27c>)
 80061ea:	492d      	ldr	r1, [pc, #180]	; (80062a0 <_ZL14wifiif_request10wifi_cmd_tPc+0x264>)
 80061ec:	482d      	ldr	r0, [pc, #180]	; (80062a4 <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
 80061ee:	23b2      	movs	r3, #178	; 0xb2
 80061f0:	f003 fcbc 	bl	8009b6c <LOG_DEBUG>
			if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 80061f4:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <_ZL14wifiif_request10wifi_cmd_tPc+0x26c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	b113      	cbz	r3, 8006200 <_ZL14wifiif_request10wifi_cmd_tPc+0x1c4>
 80061fa:	4629      	mov	r1, r5
 80061fc:	4628      	mov	r0, r5
 80061fe:	4798      	blx	r3
		release_packet(&pkt);
 8006200:	a806      	add	r0, sp, #24
 8006202:	f7fe ff6d 	bl	80050e0 <release_packet>
		if(response_data != NULL) free(response_data);
 8006206:	f1b9 0f00 	cmp.w	r9, #0
 800620a:	f43f af64 	beq.w	80060d6 <_ZL14wifiif_request10wifi_cmd_tPc+0x9a>
 800620e:	4648      	mov	r0, r9
}
 8006210:	b00d      	add	sp, #52	; 0x34
 8006212:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if(response_data != NULL) free(response_data);
 8006216:	f004 bcab 	b.w	800ab70 <free>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800621a:	4b1f      	ldr	r3, [pc, #124]	; (8006298 <_ZL14wifiif_request10wifi_cmd_tPc+0x25c>)
 800621c:	4821      	ldr	r0, [pc, #132]	; (80062a4 <_ZL14wifiif_request10wifi_cmd_tPc+0x268>)
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4a26      	ldr	r2, [pc, #152]	; (80062bc <_ZL14wifiif_request10wifi_cmd_tPc+0x280>)
 8006222:	491f      	ldr	r1, [pc, #124]	; (80062a0 <_ZL14wifiif_request10wifi_cmd_tPc+0x264>)
 8006224:	2396      	movs	r3, #150	; 0x96
 8006226:	f003 fca1 	bl	8009b6c <LOG_DEBUG>
			release_packet(&pkt);
 800622a:	a806      	add	r0, sp, #24
 800622c:	f7fe ff58 	bl	80050e0 <release_packet>
			if(response_data != NULL) free(response_data);
 8006230:	f1b9 0f00 	cmp.w	r9, #0
 8006234:	d1eb      	bne.n	800620e <_ZL14wifiif_request10wifi_cmd_tPc+0x1d2>
 8006236:	e74e      	b.n	80060d6 <_ZL14wifiif_request10wifi_cmd_tPc+0x9a>
 	  *dest_buffer = (char *)malloc(total_len + 1);
 8006238:	2001      	movs	r0, #1
 800623a:	f004 fc91 	bl	800ab60 <malloc>
 800623e:	4681      	mov	r9, r0
 8006240:	4680      	mov	r8, r0
 8006242:	e79c      	b.n	800617e <_ZL14wifiif_request10wifi_cmd_tPc+0x142>
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 8006244:	af09      	add	r7, sp, #36	; 0x24
 8006246:	4a1e      	ldr	r2, [pc, #120]	; (80062c0 <_ZL14wifiif_request10wifi_cmd_tPc+0x284>)
 8006248:	9807      	ldr	r0, [sp, #28]
				pkt_json_t json;
 800624a:	9409      	str	r4, [sp, #36]	; 0x24
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 800624c:	4639      	mov	r1, r7
				pkt_json_t json;
 800624e:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
 8006252:	940b      	str	r4, [sp, #44]	; 0x2c
				pkt_err_t err = json_get_object(pkt.data_str, &json, (char *)"isconnected");
 8006254:	f7fe fdc0 	bl	8004dd8 <json_get_object>
				if(err == PKT_ERR_OK){
 8006258:	b940      	cbnz	r0, 800626c <_ZL14wifiif_request10wifi_cmd_tPc+0x230>
					if(strcmp(json.value, "1") == 0) wifi_connected = true;
 800625a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800625c:	781a      	ldrb	r2, [r3, #0]
 800625e:	2a31      	cmp	r2, #49	; 0x31
 8006260:	d108      	bne.n	8006274 <_ZL14wifiif_request10wifi_cmd_tPc+0x238>
 8006262:	7859      	ldrb	r1, [r3, #1]
 8006264:	b931      	cbnz	r1, 8006274 <_ZL14wifiif_request10wifi_cmd_tPc+0x238>
 8006266:	4b17      	ldr	r3, [pc, #92]	; (80062c4 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
				json_release_object(&json);
 800626c:	4638      	mov	r0, r7
 800626e:	f7fe fecb 	bl	8005008 <json_release_object>
 8006272:	e7ad      	b.n	80061d0 <_ZL14wifiif_request10wifi_cmd_tPc+0x194>
					else if(strcmp(json.value, "0") == 0) wifi_connected = false;
 8006274:	2a30      	cmp	r2, #48	; 0x30
 8006276:	d1f9      	bne.n	800626c <_ZL14wifiif_request10wifi_cmd_tPc+0x230>
 8006278:	785b      	ldrb	r3, [r3, #1]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1f6      	bne.n	800626c <_ZL14wifiif_request10wifi_cmd_tPc+0x230>
 800627e:	4a11      	ldr	r2, [pc, #68]	; (80062c4 <_ZL14wifiif_request10wifi_cmd_tPc+0x288>)
 8006280:	7013      	strb	r3, [r2, #0]
 8006282:	e7f3      	b.n	800626c <_ZL14wifiif_request10wifi_cmd_tPc+0x230>
 8006284:	2000b27c 	.word	0x2000b27c
 8006288:	2000003c 	.word	0x2000003c
 800628c:	0800e488 	.word	0x0800e488
 8006290:	0800e490 	.word	0x0800e490
 8006294:	2000b270 	.word	0x2000b270
 8006298:	0800e4b8 	.word	0x0800e4b8
 800629c:	0800e4e8 	.word	0x0800e4e8
 80062a0:	0800df58 	.word	0x0800df58
 80062a4:	0800e4b0 	.word	0x0800e4b0
 80062a8:	2000b278 	.word	0x2000b278
 80062ac:	2000b26c 	.word	0x2000b26c
 80062b0:	2000b268 	.word	0x2000b268
 80062b4:	0800ee14 	.word	0x0800ee14
 80062b8:	0800e4d4 	.word	0x0800e4d4
 80062bc:	0800e498 	.word	0x0800e498
 80062c0:	0800e4c8 	.word	0x0800e4c8
 80062c4:	2000b274 	.word	0x2000b274

080062c8 <wifiif_get_break_data>:
void wifiif_get_break_data(char *brk_data){
 80062c8:	b530      	push	{r4, r5, lr}
 80062ca:	b085      	sub	sp, #20
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80062cc:	2500      	movs	r5, #0
    if(strcmp(brk_data, "\r\nend\r\n") != 0) {
 80062ce:	4912      	ldr	r1, [pc, #72]	; (8006318 <wifiif_get_break_data+0x50>)
void wifiif_get_break_data(char *brk_data){
 80062d0:	9001      	str	r0, [sp, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80062d2:	9503      	str	r5, [sp, #12]
    if(strcmp(brk_data, "\r\nend\r\n") != 0) {
 80062d4:	4604      	mov	r4, r0
 80062d6:	f7f9 ff8b 	bl	80001f0 <strcmp>
 80062da:	b150      	cbz	r0, 80062f2 <wifiif_get_break_data+0x2a>
		if(xQueueSendFromISR(data_queue, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 80062dc:	4a0f      	ldr	r2, [pc, #60]	; (800631c <wifiif_get_break_data+0x54>)
 80062de:	462b      	mov	r3, r5
 80062e0:	6810      	ldr	r0, [r2, #0]
 80062e2:	a901      	add	r1, sp, #4
 80062e4:	aa03      	add	r2, sp, #12
 80062e6:	f7fb fd87 	bl	8001df8 <xQueueGenericSendFromISR>
 80062ea:	2801      	cmp	r0, #1
 80062ec:	d10d      	bne.n	800630a <wifiif_get_break_data+0x42>
}
 80062ee:	b005      	add	sp, #20
 80062f0:	bd30      	pop	{r4, r5, pc}
    	free(brk_data);
 80062f2:	4620      	mov	r0, r4
 80062f4:	f004 fc3c 	bl	800ab70 <free>
    	xEventGroupSetBitsFromISR(data_eventgrp, DATA_EVENTBIT, &xHigherPriorityTaskWoken);
 80062f8:	4b09      	ldr	r3, [pc, #36]	; (8006320 <wifiif_get_break_data+0x58>)
 80062fa:	aa03      	add	r2, sp, #12
 80062fc:	6818      	ldr	r0, [r3, #0]
 80062fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006302:	f7fb fa7b 	bl	80017fc <xEventGroupSetBitsFromISR>
}
 8006306:	b005      	add	sp, #20
 8006308:	bd30      	pop	{r4, r5, pc}
		if(xQueueSendFromISR(data_queue, &brk_data, &xHigherPriorityTaskWoken) != pdTRUE) LOG_ERROR(TAG, "Send to queue fail.");
 800630a:	4906      	ldr	r1, [pc, #24]	; (8006324 <wifiif_get_break_data+0x5c>)
 800630c:	4806      	ldr	r0, [pc, #24]	; (8006328 <wifiif_get_break_data+0x60>)
 800630e:	f003 fbef 	bl	8009af0 <LOG_ERROR>
}
 8006312:	b005      	add	sp, #20
 8006314:	bd30      	pop	{r4, r5, pc}
 8006316:	bf00      	nop
 8006318:	0800e490 	.word	0x0800e490
 800631c:	2000b268 	.word	0x2000b268
 8006320:	2000b270 	.word	0x2000b270
 8006324:	0800e510 	.word	0x0800e510
 8006328:	0800e4b0 	.word	0x0800e4b0

0800632c <wifiif_init>:

/**
 * WiFi setup function.
 */
void wifiif_init(void (*prequest)(char *, uint16_t)){
	fprequest = prequest;
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <wifiif_init+0x20>)
void wifiif_init(void (*prequest)(char *, uint16_t)){
 800632e:	b510      	push	{r4, lr}

	data_queue = xQueueCreate(20, sizeof(char *));
 8006330:	2200      	movs	r2, #0
void wifiif_init(void (*prequest)(char *, uint16_t)){
 8006332:	4604      	mov	r4, r0
	data_queue = xQueueCreate(20, sizeof(char *));
 8006334:	2104      	movs	r1, #4
 8006336:	2014      	movs	r0, #20
	fprequest = prequest;
 8006338:	601c      	str	r4, [r3, #0]
	data_queue = xQueueCreate(20, sizeof(char *));
 800633a:	f7fb fb65 	bl	8001a08 <xQueueGenericCreate>
 800633e:	4b04      	ldr	r3, [pc, #16]	; (8006350 <wifiif_init+0x24>)
 8006340:	6018      	str	r0, [r3, #0]
	data_eventgrp = xEventGroupCreate();
 8006342:	f7fb f9c5 	bl	80016d0 <xEventGroupCreate>
 8006346:	4b03      	ldr	r3, [pc, #12]	; (8006354 <wifiif_init+0x28>)
 8006348:	6018      	str	r0, [r3, #0]
}
 800634a:	bd10      	pop	{r4, pc}
 800634c:	2000b27c 	.word	0x2000b27c
 8006350:	2000b268 	.word	0x2000b268
 8006354:	2000b270 	.word	0x2000b270

08006358 <wifiif_register_command_handler>:

void wifiif_register_command_handler(void (*pcommand_handler)(wifi_cmd_t cmd, void *param)){
	fpcommand_handler = pcommand_handler;
 8006358:	4b01      	ldr	r3, [pc, #4]	; (8006360 <wifiif_register_command_handler+0x8>)
 800635a:	6018      	str	r0, [r3, #0]
}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	2000b278 	.word	0x2000b278

08006364 <wifiif_restart>:

/**
 * WiFi control.
 */
void wifiif_restart(void){
 8006364:	b508      	push	{r3, lr}
	wifiif_request(WIFI_RESTART, (char *)"{}");
 8006366:	4905      	ldr	r1, [pc, #20]	; (800637c <wifiif_restart+0x18>)
 8006368:	2001      	movs	r0, #1
 800636a:	f7ff fe67 	bl	800603c <_ZL14wifiif_request10wifi_cmd_tPc>
	wifi_state = false;
 800636e:	4904      	ldr	r1, [pc, #16]	; (8006380 <wifiif_restart+0x1c>)
	wifi_connected = false;
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <wifiif_restart+0x20>)
	wifi_state = false;
 8006372:	2300      	movs	r3, #0
 8006374:	700b      	strb	r3, [r1, #0]
	wifi_connected = false;
 8006376:	7013      	strb	r3, [r2, #0]
}
 8006378:	bd08      	pop	{r3, pc}
 800637a:	bf00      	nop
 800637c:	0800e524 	.word	0x0800e524
 8006380:	2000b26c 	.word	0x2000b26c
 8006384:	2000b274 	.word	0x2000b274

08006388 <wifiif_checkconnect>:
void wifiif_scan(void){
	wifiif_request(WIFI_SCAN, (char *)"{}");
}
void wifiif_checkconnect(void){
	wifiif_request(WIFI_ISCONNECTED, (char *)"{}");
 8006388:	4901      	ldr	r1, [pc, #4]	; (8006390 <wifiif_checkconnect+0x8>)
 800638a:	2003      	movs	r0, #3
 800638c:	f7ff be56 	b.w	800603c <_ZL14wifiif_request10wifi_cmd_tPc>
 8006390:	0800e524 	.word	0x0800e524

08006394 <wifiif_wificonnected>:
}
bool wifiif_wificonnected(void){
	return wifi_connected;
 8006394:	4b01      	ldr	r3, [pc, #4]	; (800639c <wifiif_wificonnected+0x8>)
 8006396:	7818      	ldrb	r0, [r3, #0]
}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	2000b274 	.word	0x2000b274

080063a0 <wifiif_set_wificonnect_state>:
void wifiif_set_wificonnect_state(bool state){
	wifi_connected = state;
 80063a0:	4b01      	ldr	r3, [pc, #4]	; (80063a8 <wifiif_set_wificonnect_state+0x8>)
 80063a2:	7018      	strb	r0, [r3, #0]
}
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	2000b274 	.word	0x2000b274

080063ac <wifiif_connect>:
void wifiif_connect(char *ssid, char *pass, char *auth){
 80063ac:	b510      	push	{r4, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	4614      	mov	r4, r2
 80063b2:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"ssid\":\"%s\",\"pass\":\"%s\",\"auth\":\"%s\"}", ssid, pass, auth);
 80063b4:	4602      	mov	r2, r0
 80063b6:	4907      	ldr	r1, [pc, #28]	; (80063d4 <wifiif_connect+0x28>)
 80063b8:	9400      	str	r4, [sp, #0]
 80063ba:	a803      	add	r0, sp, #12
 80063bc:	f004 fb80 	bl	800aac0 <asiprintf>

	wifiif_request(WIFI_CONN, data);
 80063c0:	9903      	ldr	r1, [sp, #12]
 80063c2:	2004      	movs	r0, #4
 80063c4:	f7ff fe3a 	bl	800603c <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 80063c8:	9803      	ldr	r0, [sp, #12]
 80063ca:	f004 fbd1 	bl	800ab70 <free>
}
 80063ce:	b004      	add	sp, #16
 80063d0:	bd10      	pop	{r4, pc}
 80063d2:	bf00      	nop
 80063d4:	0800e528 	.word	0x0800e528

080063d8 <wifiif_http_client_new>:

/**
 * HTTP Client.
 */
void wifiif_http_client_new(void){
	wifiif_request(WIFI_HTTP_CLIENT_NEW, (char *)"{}");
 80063d8:	4901      	ldr	r1, [pc, #4]	; (80063e0 <wifiif_http_client_new+0x8>)
 80063da:	2007      	movs	r0, #7
 80063dc:	f7ff be2e 	b.w	800603c <_ZL14wifiif_request10wifi_cmd_tPc>
 80063e0:	0800e524 	.word	0x0800e524

080063e4 <wifiif_http_client_config>:
}

void wifiif_http_client_config(char *config){
 80063e4:	4601      	mov	r1, r0
	wifiif_request(WIFI_HTTP_CLIENT_CONFIG, config);
 80063e6:	2008      	movs	r0, #8
 80063e8:	f7ff be28 	b.w	800603c <_ZL14wifiif_request10wifi_cmd_tPc>

080063ec <wifiif_http_client_init>:
}

void wifiif_http_client_init(void){
	wifiif_request(WIFI_HTTP_CLIENT_INIT, (char *)"{}");
 80063ec:	4901      	ldr	r1, [pc, #4]	; (80063f4 <wifiif_http_client_init+0x8>)
 80063ee:	2009      	movs	r0, #9
 80063f0:	f7ff be24 	b.w	800603c <_ZL14wifiif_request10wifi_cmd_tPc>
 80063f4:	0800e524 	.word	0x0800e524

080063f8 <wifiif_http_client_set_header>:

void wifiif_http_client_clean(void){
	wifiif_request(WIFI_HTTP_CLIENT_CLEAN, (char *)"{}");
}

void wifiif_http_client_set_header(char *key, char *value){
 80063f8:	b500      	push	{lr}
 80063fa:	b083      	sub	sp, #12
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
	char *data;
	asprintf(&data, "{\"key\":\"%s\",\"value\":\"%s\"}", key, value);
 8006400:	a801      	add	r0, sp, #4
 8006402:	4906      	ldr	r1, [pc, #24]	; (800641c <wifiif_http_client_set_header+0x24>)
 8006404:	f004 fb5c 	bl	800aac0 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_HEADER, data);
 8006408:	9901      	ldr	r1, [sp, #4]
 800640a:	200b      	movs	r0, #11
 800640c:	f7ff fe16 	bl	800603c <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 8006410:	9801      	ldr	r0, [sp, #4]
 8006412:	f004 fbad 	bl	800ab70 <free>
}
 8006416:	b003      	add	sp, #12
 8006418:	f85d fb04 	ldr.w	pc, [sp], #4
 800641c:	0800e550 	.word	0x0800e550

08006420 <wifiif_state_running>:
	wifiif_request(WIFI_HTTP_CLIENT_REQUEST, (char *)"{}");
}


void wifiif_state_running(bool state){
	wifi_state = state;
 8006420:	4b01      	ldr	r3, [pc, #4]	; (8006428 <wifiif_state_running+0x8>)
 8006422:	7018      	strb	r0, [r3, #0]
}
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	2000b26c 	.word	0x2000b26c

0800642c <wifiif_state_is_running>:
bool wifiif_state_is_running(void){
	return wifi_state;
 800642c:	4b01      	ldr	r3, [pc, #4]	; (8006434 <wifiif_state_is_running+0x8>)
 800642e:	7818      	ldrb	r0, [r3, #0]
}
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	2000b26c 	.word	0x2000b26c

08006438 <ADC_IRQHandler>:



void ADC_IRQHandler(adc *adc){

}
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	0000      	movs	r0, r0
	...

08006440 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef>:
	_adc = adc;
 8006440:	a10f      	add	r1, pc, #60	; (adr r1, 8006480 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x40>)
 8006442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006446:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8006468 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x28>
 800644a:	4b09      	ldr	r3, [pc, #36]	; (8006470 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x30>)
 800644c:	4a09      	ldr	r2, [pc, #36]	; (8006474 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x34>)
 800644e:	ed83 7b00 	vstr	d7, [r3]
 8006452:	e9c2 0100 	strd	r0, r1, [r2]
 8006456:	4b08      	ldr	r3, [pc, #32]	; (8006478 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x38>)
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x3c>)
 800645a:	2100      	movs	r1, #0
 800645c:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(ADC3)
adc adc_3(ADC3);
adc_t adc3;
void ADC3_IRQHandler(void){
	ADC_IRQHandler(adc3);
}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	f3af 8000 	nop.w
 8006468:	40012000 	.word	0x40012000
 800646c:	00000000 	.word	0x00000000
 8006470:	2000b280 	.word	0x2000b280
 8006474:	2000b288 	.word	0x2000b288
 8006478:	2000b290 	.word	0x2000b290
 800647c:	40012200 	.word	0x40012200
 8006480:	40012100 	.word	0x40012100
 8006484:	00000000 	.word	0x00000000

08006488 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 8006488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648a:	460e      	mov	r6, r1
	stm_ret_t ret;
 800648c:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 800648e:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 8006490:	7002      	strb	r2, [r0, #0]
 8006492:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 8006494:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 8006496:	b085      	sub	sp, #20
 8006498:	4604      	mov	r4, r0
	stm_ret_t ret;
 800649a:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 800649c:	d006      	beq.n	80064ac <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 800649e:	f240 122b 	movw	r2, #299	; 0x12b
 80064a2:	f003 fc97 	bl	8009dd4 <set_return>
		return ret;
	}

	return ret;
}
 80064a6:	4620      	mov	r0, r4
 80064a8:	b005      	add	sp, #20
 80064aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80064ac:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80064ae:	68f1      	ldr	r1, [r6, #12]
 80064b0:	680d      	ldr	r5, [r1, #0]
 80064b2:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 80064b4:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80064b6:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 80064ba:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80064bc:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 80064be:	6969      	ldr	r1, [r5, #20]
 80064c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80064c4:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80064c6:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80064c8:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80064ca:	f021 0101 	bic.w	r1, r1, #1
 80064ce:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 80064d0:	9000      	str	r0, [sp, #0]
 80064d2:	4629      	mov	r1, r5
 80064d4:	4638      	mov	r0, r7
 80064d6:	f003 fc41 	bl	8009d5c <wait_flag_in_register_timeout>
 80064da:	e897 0003 	ldmia.w	r7, {r0, r1}
 80064de:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 80064e2:	4620      	mov	r0, r4
 80064e4:	f003 fc84 	bl	8009df0 <is_timeout>
 80064e8:	bb20      	cbnz	r0, 8006534 <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064ea:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 80064ec:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064ee:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 80064f0:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064f4:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 80064f6:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 80064fa:	bf94      	ite	ls
 80064fc:	6093      	strls	r3, [r2, #8]
 80064fe:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 8006500:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8006504:	2a00      	cmp	r2, #0
 8006506:	dbce      	blt.n	80064a6 <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006508:	0953      	lsrs	r3, r2, #5
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006510:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8006514:	2101      	movs	r1, #1
 8006516:	f002 021f 	and.w	r2, r2, #31
 800651a:	fa01 f202 	lsl.w	r2, r1, r2
 800651e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006526:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800652a:	f3bf 8f6f 	isb	sy
}
 800652e:	4620      	mov	r0, r4
 8006530:	b005      	add	sp, #20
 8006532:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 8006534:	4620      	mov	r0, r4
 8006536:	f240 1119 	movw	r1, #281	; 0x119
 800653a:	f003 fc4f 	bl	8009ddc <set_return_line>
}
 800653e:	4620      	mov	r0, r4
 8006540:	b005      	add	sp, #20
 8006542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006544 <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 8006544:	68c3      	ldr	r3, [r0, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 800654a:	b280      	uxth	r0, r0
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop

08006550 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 8006550:	68c0      	ldr	r0, [r0, #12]
 8006552:	4770      	bx	lr

08006554 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 8006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 8006558:	4857      	ldr	r0, [pc, #348]	; (80066b8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 800655a:	f8df e188 	ldr.w	lr, [pc, #392]	; 80066e4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 800655e:	4f57      	ldr	r7, [pc, #348]	; (80066bc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 8006560:	4e57      	ldr	r6, [pc, #348]	; (80066c0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 8006562:	f8df b184 	ldr.w	fp, [pc, #388]	; 80066e8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 8006566:	f8df a184 	ldr.w	sl, [pc, #388]	; 80066ec <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 800656a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80066f0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 800656e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80066f4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 8006572:	f8df c184 	ldr.w	ip, [pc, #388]	; 80066f8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 8006576:	4953      	ldr	r1, [pc, #332]	; (80066c4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 8006578:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 800657c:	2300      	movs	r3, #0
 800657e:	2205      	movs	r2, #5
 8006580:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 8006584:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 8006588:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 800658c:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 8006590:	f8c9 3014 	str.w	r3, [r9, #20]
 8006594:	e9cb 3308 	strd	r3, r3, [fp, #32]
 8006598:	f8c8 3014 	str.w	r3, [r8, #20]
 800659c:	e9ca 3308 	strd	r3, r3, [sl, #32]
 80065a0:	e9c9 3308 	strd	r3, r3, [r9, #32]
 80065a4:	e9c8 3308 	strd	r3, r3, [r8, #32]
 80065a8:	f8cb 2010 	str.w	r2, [fp, #16]
 80065ac:	f8cb 3018 	str.w	r3, [fp, #24]
 80065b0:	f88b 301c 	strb.w	r3, [fp, #28]
 80065b4:	f8ca 2010 	str.w	r2, [sl, #16]
 80065b8:	f8ca 3018 	str.w	r3, [sl, #24]
 80065bc:	f88a 301c 	strb.w	r3, [sl, #28]
 80065c0:	f8c9 2010 	str.w	r2, [r9, #16]
 80065c4:	f8c9 3018 	str.w	r3, [r9, #24]
 80065c8:	f889 301c 	strb.w	r3, [r9, #28]
 80065cc:	f8c8 2010 	str.w	r2, [r8, #16]
 80065d0:	f8c8 3018 	str.w	r3, [r8, #24]
 80065d4:	f888 301c 	strb.w	r3, [r8, #28]
 80065d8:	f8ce 2010 	str.w	r2, [lr, #16]
 80065dc:	f8ce 3014 	str.w	r3, [lr, #20]
 80065e0:	f8ce 3018 	str.w	r3, [lr, #24]
 80065e4:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 80065e8:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 80065ec:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 80065f0:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 80065f2:	617b      	str	r3, [r7, #20]
 80065f4:	6102      	str	r2, [r0, #16]
 80065f6:	6173      	str	r3, [r6, #20]
 80065f8:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80065fc:	6143      	str	r3, [r0, #20]
 80065fe:	6132      	str	r2, [r6, #16]
 8006600:	61b3      	str	r3, [r6, #24]
 8006602:	7733      	strb	r3, [r6, #28]
 8006604:	6183      	str	r3, [r0, #24]
 8006606:	4606      	mov	r6, r0
 8006608:	7703      	strb	r3, [r0, #28]
 800660a:	6203      	str	r3, [r0, #32]
 800660c:	6243      	str	r3, [r0, #36]	; 0x24
 800660e:	482e      	ldr	r0, [pc, #184]	; (80066c8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	f8ce 1008 	str.w	r1, [lr, #8]
 8006616:	f8cc 1008 	str.w	r1, [ip, #8]
 800661a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 800661e:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8006622:	613a      	str	r2, [r7, #16]
 8006624:	61bb      	str	r3, [r7, #24]
 8006626:	773b      	strb	r3, [r7, #28]
 8006628:	6102      	str	r2, [r0, #16]
 800662a:	6143      	str	r3, [r0, #20]
 800662c:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8006630:	f8ce 3020 	str.w	r3, [lr, #32]
 8006634:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 8006638:	f8cc 2010 	str.w	r2, [ip, #16]
 800663c:	f8cc 3018 	str.w	r3, [ip, #24]
 8006640:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 8006644:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006646:	4e21      	ldr	r6, [pc, #132]	; (80066cc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8006648:	4f21      	ldr	r7, [pc, #132]	; (80066d0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 800664a:	6173      	str	r3, [r6, #20]
 800664c:	4e21      	ldr	r6, [pc, #132]	; (80066d4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	6173      	str	r3, [r6, #20]
 8006652:	4e1e      	ldr	r6, [pc, #120]	; (80066cc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8006654:	4d20      	ldr	r5, [pc, #128]	; (80066d8 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 8006656:	6132      	str	r2, [r6, #16]
 8006658:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800665c:	61b3      	str	r3, [r6, #24]
 800665e:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8006660:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8006662:	6183      	str	r3, [r0, #24]
 8006664:	4e1b      	ldr	r6, [pc, #108]	; (80066d4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8006666:	7703      	strb	r3, [r0, #28]
 8006668:	6203      	str	r3, [r0, #32]
 800666a:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 800666c:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 800666e:	481b      	ldr	r0, [pc, #108]	; (80066dc <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 8006670:	4c1b      	ldr	r4, [pc, #108]	; (80066e0 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 8006672:	613a      	str	r2, [r7, #16]
 8006674:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8006678:	e9c6 3308 	strd	r3, r3, [r6, #32]
 800667c:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8006680:	61bb      	str	r3, [r7, #24]
 8006682:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 8006684:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 8006686:	6132      	str	r2, [r6, #16]
 8006688:	61b3      	str	r3, [r6, #24]
 800668a:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 800668c:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 800668e:	612a      	str	r2, [r5, #16]
 8006690:	616b      	str	r3, [r5, #20]
 8006692:	61ab      	str	r3, [r5, #24]
 8006694:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 8006696:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 8006698:	6102      	str	r2, [r0, #16]
 800669a:	7703      	strb	r3, [r0, #28]
 800669c:	6163      	str	r3, [r4, #20]
 800669e:	e9c4 3308 	strd	r3, r3, [r4, #32]
 80066a2:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80066a6:	6122      	str	r2, [r4, #16]
 80066a8:	61a3      	str	r3, [r4, #24]
 80066aa:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 80066ac:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 80066ae:	6143      	str	r3, [r0, #20]
 80066b0:	6183      	str	r3, [r0, #24]
	_dma = dma;
 80066b2:	6081      	str	r1, [r0, #8]
}
 80066b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b8:	2000b3d8 	.word	0x2000b3d8
 80066bc:	2000b388 	.word	0x2000b388
 80066c0:	2000b3b0 	.word	0x2000b3b0
 80066c4:	40026000 	.word	0x40026000
 80066c8:	2000b400 	.word	0x2000b400
 80066cc:	2000b428 	.word	0x2000b428
 80066d0:	2000b450 	.word	0x2000b450
 80066d4:	2000b478 	.word	0x2000b478
 80066d8:	2000b4a0 	.word	0x2000b4a0
 80066dc:	2000b4f0 	.word	0x2000b4f0
 80066e0:	2000b4c8 	.word	0x2000b4c8
 80066e4:	2000b338 	.word	0x2000b338
 80066e8:	2000b298 	.word	0x2000b298
 80066ec:	2000b2c0 	.word	0x2000b2c0
 80066f0:	2000b2e8 	.word	0x2000b2e8
 80066f4:	2000b310 	.word	0x2000b310
 80066f8:	2000b360 	.word	0x2000b360

080066fc <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 80066fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006700:	b083      	sub	sp, #12
	stm_ret_t ret;
 8006702:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8006706:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 800670a:	f880 c000 	strb.w	ip, [r0]
 800670e:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006710:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 8006714:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006716:	f240 8085 	bls.w	8006824 <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 800671a:	2a03      	cmp	r2, #3
 800671c:	4604      	mov	r4, r0
 800671e:	d84b      	bhi.n	80067b8 <exti_init+0xbc>
 8006720:	46ae      	mov	lr, r5
 8006722:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8006724:	1d97      	adds	r7, r2, #6
 8006726:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006728:	2501      	movs	r5, #1
 800672a:	40bd      	lsls	r5, r7
 800672c:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800672e:	484d      	ldr	r0, [pc, #308]	; (8006864 <exti_init+0x168>)
 8006730:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8006734:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8006738:	d105      	bne.n	8006746 <exti_init+0x4a>
 800673a:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 800673e:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 8006742:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8006746:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800674a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 800674e:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006752:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8006756:	f8dc 0008 	ldr.w	r0, [ip, #8]
 800675a:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800675c:	9801      	ldr	r0, [sp, #4]
 800675e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006762:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8006766:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 800676a:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 800676e:	fa09 fe0e 	lsl.w	lr, r9, lr
 8006772:	ea20 000e 	bic.w	r0, r0, lr
 8006776:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)((uint32_t)(Port) - GPIO_ADRRESS_OFFSET) & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8006778:	9801      	ldr	r0, [sp, #4]
 800677a:	4301      	orrs	r1, r0
 800677c:	9101      	str	r1, [sp, #4]

	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 800677e:	9901      	ldr	r1, [sp, #4]
 8006780:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8006784:	07db      	lsls	r3, r3, #31
 8006786:	d423      	bmi.n	80067d0 <exti_init+0xd4>
 8006788:	2101      	movs	r1, #1
 800678a:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 800678e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800686c <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 8006792:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006794:	4c34      	ldr	r4, [pc, #208]	; (8006868 <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 8006796:	f8dc 1000 	ldr.w	r1, [ip]
 800679a:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800679e:	19e2      	adds	r2, r4, r7
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	ea41 010e 	orr.w	r1, r1, lr
 80067a6:	f8cc 1000 	str.w	r1, [ip]
 80067aa:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ae:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80067b2:	b003      	add	sp, #12
 80067b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 80067b8:	1f10      	subs	r0, r2, #4
 80067ba:	2803      	cmp	r0, #3
 80067bc:	d915      	bls.n	80067ea <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 80067be:	f1a2 0008 	sub.w	r0, r2, #8
 80067c2:	2803      	cmp	r0, #3
 80067c4:	d825      	bhi.n	8006812 <exti_init+0x116>
 80067c6:	f04f 0e08 	mov.w	lr, #8
 80067ca:	f04f 0c02 	mov.w	ip, #2
 80067ce:	e012      	b.n	80067f6 <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 80067d0:	4b26      	ldr	r3, [pc, #152]	; (800686c <exti_init+0x170>)
 80067d2:	2101      	movs	r1, #1
 80067d4:	fa01 fe02 	lsl.w	lr, r1, r2
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	ea42 020e 	orr.w	r2, r2, lr
 80067de:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	ea4e 0202 	orr.w	r2, lr, r2
 80067e6:	60da      	str	r2, [r3, #12]
 80067e8:	e7d1      	b.n	800678e <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 80067ea:	2a04      	cmp	r2, #4
 80067ec:	bf08      	it	eq
 80067ee:	4696      	moveq	lr, r2
 80067f0:	d098      	beq.n	8006724 <exti_init+0x28>
 80067f2:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 80067f6:	1f50      	subs	r0, r2, #5
 80067f8:	b280      	uxth	r0, r0
 80067fa:	2804      	cmp	r0, #4
 80067fc:	bf35      	itete	cc
 80067fe:	2717      	movcc	r7, #23
 8006800:	2728      	movcs	r7, #40	; 0x28
 8006802:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 8006806:	f44f 7580 	movcs.w	r5, #256	; 0x100
 800680a:	bf34      	ite	cc
 800680c:	2600      	movcc	r6, #0
 800680e:	2601      	movcs	r6, #1
 8006810:	e78d      	b.n	800672e <exti_init+0x32>
 8006812:	4666      	mov	r6, ip
 8006814:	2728      	movs	r7, #40	; 0x28
 8006816:	f44f 7580 	mov.w	r5, #256	; 0x100
 800681a:	f04f 0e0c 	mov.w	lr, #12
 800681e:	f04f 0c03 	mov.w	ip, #3
 8006822:	e784      	b.n	800672e <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 8006824:	4629      	mov	r1, r5
 8006826:	223a      	movs	r2, #58	; 0x3a
 8006828:	f003 fad4 	bl	8009dd4 <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 800682c:	4b10      	ldr	r3, [pc, #64]	; (8006870 <exti_init+0x174>)
 800682e:	4a11      	ldr	r2, [pc, #68]	; (8006874 <exti_init+0x178>)
 8006830:	4911      	ldr	r1, [pc, #68]	; (8006878 <exti_init+0x17c>)
 8006832:	4812      	ldr	r0, [pc, #72]	; (800687c <exti_init+0x180>)
 8006834:	f003 f95c 	bl	8009af0 <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8006838:	4911      	ldr	r1, [pc, #68]	; (8006880 <exti_init+0x184>)
 800683a:	4810      	ldr	r0, [pc, #64]	; (800687c <exti_init+0x180>)
 800683c:	2205      	movs	r2, #5
 800683e:	f003 f8db 	bl	80099f8 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8006842:	f241 3088 	movw	r0, #5000	; 0x1388
 8006846:	f001 fe13 	bl	8008470 <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 800684a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800684e:	490d      	ldr	r1, [pc, #52]	; (8006884 <exti_init+0x188>)
 8006850:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <exti_init+0x18c>)
 8006852:	68ca      	ldr	r2, [r1, #12]
 8006854:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006858:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800685a:	60cb      	str	r3, [r1, #12]
 800685c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006860:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006862:	e7fd      	b.n	8006860 <exti_init+0x164>
 8006864:	40023800 	.word	0x40023800
 8006868:	e000e100 	.word	0xe000e100
 800686c:	40013c00 	.word	0x40013c00
 8006870:	0800e6e8 	.word	0x0800e6e8
 8006874:	0800e6f4 	.word	0x0800e6f4
 8006878:	0800e71c 	.word	0x0800e71c
 800687c:	0800e760 	.word	0x0800e760
 8006880:	0800e768 	.word	0x0800e768
 8006884:	e000ed00 	.word	0xe000ed00
 8006888:	05fa0004 	.word	0x05fa0004

0800688c <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 800688c:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 800688e:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 8006890:	4c04      	ldr	r4, [pc, #16]	; (80068a4 <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 8006892:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 8006896:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 800689a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	2000b558 	.word	0x2000b558
 80068a4:	2000b518 	.word	0x2000b518

080068a8 <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <EXTI0_IRQHandler+0x1c>)
 80068aa:	695a      	ldr	r2, [r3, #20]
 80068ac:	07d2      	lsls	r2, r2, #31
 80068ae:	d507      	bpl.n	80068c0 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 80068b2:	2101      	movs	r1, #1
 80068b4:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068b6:	6813      	ldr	r3, [r2, #0]
 80068b8:	b113      	cbz	r3, 80068c0 <EXTI0_IRQHandler+0x18>
 80068ba:	4a04      	ldr	r2, [pc, #16]	; (80068cc <EXTI0_IRQHandler+0x24>)
 80068bc:	6810      	ldr	r0, [r2, #0]
 80068be:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40013c00 	.word	0x40013c00
 80068c8:	2000b518 	.word	0x2000b518
 80068cc:	2000b558 	.word	0x2000b558

080068d0 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80068d0:	4b06      	ldr	r3, [pc, #24]	; (80068ec <EXTI1_IRQHandler+0x1c>)
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	0792      	lsls	r2, r2, #30
 80068d6:	d507      	bpl.n	80068e8 <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068d8:	4a05      	ldr	r2, [pc, #20]	; (80068f0 <EXTI1_IRQHandler+0x20>)
 80068da:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 80068dc:	2102      	movs	r1, #2
 80068de:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80068e0:	b112      	cbz	r2, 80068e8 <EXTI1_IRQHandler+0x18>
 80068e2:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <EXTI1_IRQHandler+0x24>)
 80068e4:	6858      	ldr	r0, [r3, #4]
 80068e6:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	40013c00 	.word	0x40013c00
 80068f0:	2000b518 	.word	0x2000b518
 80068f4:	2000b558 	.word	0x2000b558

080068f8 <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 80068f8:	4b06      	ldr	r3, [pc, #24]	; (8006914 <EXTI2_IRQHandler+0x1c>)
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	0752      	lsls	r2, r2, #29
 80068fe:	d507      	bpl.n	8006910 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006900:	4a05      	ldr	r2, [pc, #20]	; (8006918 <EXTI2_IRQHandler+0x20>)
 8006902:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 8006904:	2104      	movs	r1, #4
 8006906:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006908:	b112      	cbz	r2, 8006910 <EXTI2_IRQHandler+0x18>
 800690a:	4b04      	ldr	r3, [pc, #16]	; (800691c <EXTI2_IRQHandler+0x24>)
 800690c:	6898      	ldr	r0, [r3, #8]
 800690e:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40013c00 	.word	0x40013c00
 8006918:	2000b518 	.word	0x2000b518
 800691c:	2000b558 	.word	0x2000b558

08006920 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <EXTI3_IRQHandler+0x1c>)
 8006922:	695a      	ldr	r2, [r3, #20]
 8006924:	0712      	lsls	r2, r2, #28
 8006926:	d507      	bpl.n	8006938 <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006928:	4a05      	ldr	r2, [pc, #20]	; (8006940 <EXTI3_IRQHandler+0x20>)
 800692a:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 800692c:	2108      	movs	r1, #8
 800692e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006930:	b112      	cbz	r2, 8006938 <EXTI3_IRQHandler+0x18>
 8006932:	4b04      	ldr	r3, [pc, #16]	; (8006944 <EXTI3_IRQHandler+0x24>)
 8006934:	68d8      	ldr	r0, [r3, #12]
 8006936:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40013c00 	.word	0x40013c00
 8006940:	2000b518 	.word	0x2000b518
 8006944:	2000b558 	.word	0x2000b558

08006948 <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <EXTI4_IRQHandler+0x1c>)
 800694a:	695a      	ldr	r2, [r3, #20]
 800694c:	06d2      	lsls	r2, r2, #27
 800694e:	d507      	bpl.n	8006960 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006950:	4a05      	ldr	r2, [pc, #20]	; (8006968 <EXTI4_IRQHandler+0x20>)
 8006952:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 8006954:	2110      	movs	r1, #16
 8006956:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006958:	b112      	cbz	r2, 8006960 <EXTI4_IRQHandler+0x18>
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <EXTI4_IRQHandler+0x24>)
 800695c:	6918      	ldr	r0, [r3, #16]
 800695e:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40013c00 	.word	0x40013c00
 8006968:	2000b518 	.word	0x2000b518
 800696c:	2000b558 	.word	0x2000b558

08006970 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006970:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <EXTI9_5_IRQHandler+0x84>)
 8006972:	695a      	ldr	r2, [r3, #20]
 8006974:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 8006976:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006978:	d507      	bpl.n	800698a <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800697a:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <EXTI9_5_IRQHandler+0x88>)
 800697c:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 800697e:	2120      	movs	r1, #32
 8006980:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006982:	b112      	cbz	r2, 800698a <EXTI9_5_IRQHandler+0x1a>
 8006984:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <EXTI9_5_IRQHandler+0x8c>)
 8006986:	6958      	ldr	r0, [r3, #20]
 8006988:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 800698a:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <EXTI9_5_IRQHandler+0x84>)
 800698c:	695a      	ldr	r2, [r3, #20]
 800698e:	0654      	lsls	r4, r2, #25
 8006990:	d507      	bpl.n	80069a2 <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006992:	4a19      	ldr	r2, [pc, #100]	; (80069f8 <EXTI9_5_IRQHandler+0x88>)
 8006994:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 8006996:	2140      	movs	r1, #64	; 0x40
 8006998:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 800699a:	b112      	cbz	r2, 80069a2 <EXTI9_5_IRQHandler+0x32>
 800699c:	4b17      	ldr	r3, [pc, #92]	; (80069fc <EXTI9_5_IRQHandler+0x8c>)
 800699e:	6998      	ldr	r0, [r3, #24]
 80069a0:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <EXTI9_5_IRQHandler+0x84>)
 80069a4:	695a      	ldr	r2, [r3, #20]
 80069a6:	0610      	lsls	r0, r2, #24
 80069a8:	d507      	bpl.n	80069ba <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069aa:	4a13      	ldr	r2, [pc, #76]	; (80069f8 <EXTI9_5_IRQHandler+0x88>)
 80069ac:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 80069ae:	2180      	movs	r1, #128	; 0x80
 80069b0:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069b2:	b112      	cbz	r2, 80069ba <EXTI9_5_IRQHandler+0x4a>
 80069b4:	4b11      	ldr	r3, [pc, #68]	; (80069fc <EXTI9_5_IRQHandler+0x8c>)
 80069b6:	69d8      	ldr	r0, [r3, #28]
 80069b8:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80069ba:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <EXTI9_5_IRQHandler+0x84>)
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	05d1      	lsls	r1, r2, #23
 80069c0:	d508      	bpl.n	80069d4 <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069c2:	4a0d      	ldr	r2, [pc, #52]	; (80069f8 <EXTI9_5_IRQHandler+0x88>)
 80069c4:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 80069c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ca:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069cc:	b112      	cbz	r2, 80069d4 <EXTI9_5_IRQHandler+0x64>
 80069ce:	4b0b      	ldr	r3, [pc, #44]	; (80069fc <EXTI9_5_IRQHandler+0x8c>)
 80069d0:	6a18      	ldr	r0, [r3, #32]
 80069d2:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <EXTI9_5_IRQHandler+0x84>)
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	0592      	lsls	r2, r2, #22
 80069da:	d50a      	bpl.n	80069f2 <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069dc:	4a06      	ldr	r2, [pc, #24]	; (80069f8 <EXTI9_5_IRQHandler+0x88>)
 80069de:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 80069e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069e4:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069e6:	b122      	cbz	r2, 80069f2 <EXTI9_5_IRQHandler+0x82>
 80069e8:	4b04      	ldr	r3, [pc, #16]	; (80069fc <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 80069ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80069ee:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80069f0:	4710      	bx	r2
}
 80069f2:	bd10      	pop	{r4, pc}
 80069f4:	40013c00 	.word	0x40013c00
 80069f8:	2000b518 	.word	0x2000b518
 80069fc:	2000b558 	.word	0x2000b558

08006a00 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8006a00:	4b28      	ldr	r3, [pc, #160]	; (8006aa4 <EXTI15_10_IRQHandler+0xa4>)
 8006a02:	695a      	ldr	r2, [r3, #20]
 8006a04:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 8006a06:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8006a08:	d508      	bpl.n	8006a1c <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a0a:	4a27      	ldr	r2, [pc, #156]	; (8006aa8 <EXTI15_10_IRQHandler+0xa8>)
 8006a0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 8006a0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a12:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a14:	b112      	cbz	r2, 8006a1c <EXTI15_10_IRQHandler+0x1c>
 8006a16:	4b25      	ldr	r3, [pc, #148]	; (8006aac <EXTI15_10_IRQHandler+0xac>)
 8006a18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006a1a:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a1c:	4b21      	ldr	r3, [pc, #132]	; (8006aa4 <EXTI15_10_IRQHandler+0xa4>)
 8006a1e:	695a      	ldr	r2, [r3, #20]
 8006a20:	0512      	lsls	r2, r2, #20
 8006a22:	d508      	bpl.n	8006a36 <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a24:	4a20      	ldr	r2, [pc, #128]	; (8006aa8 <EXTI15_10_IRQHandler+0xa8>)
 8006a26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 8006a28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a2c:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a2e:	b112      	cbz	r2, 8006a36 <EXTI15_10_IRQHandler+0x36>
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <EXTI15_10_IRQHandler+0xac>)
 8006a32:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006a34:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a36:	4b1b      	ldr	r3, [pc, #108]	; (8006aa4 <EXTI15_10_IRQHandler+0xa4>)
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	04d4      	lsls	r4, r2, #19
 8006a3c:	d508      	bpl.n	8006a50 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a3e:	4a1a      	ldr	r2, [pc, #104]	; (8006aa8 <EXTI15_10_IRQHandler+0xa8>)
 8006a40:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 8006a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a46:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a48:	b112      	cbz	r2, 8006a50 <EXTI15_10_IRQHandler+0x50>
 8006a4a:	4b18      	ldr	r3, [pc, #96]	; (8006aac <EXTI15_10_IRQHandler+0xac>)
 8006a4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006a4e:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a50:	4b14      	ldr	r3, [pc, #80]	; (8006aa4 <EXTI15_10_IRQHandler+0xa4>)
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	0490      	lsls	r0, r2, #18
 8006a56:	d508      	bpl.n	8006a6a <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a58:	4a13      	ldr	r2, [pc, #76]	; (8006aa8 <EXTI15_10_IRQHandler+0xa8>)
 8006a5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8006a5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a60:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a62:	b112      	cbz	r2, 8006a6a <EXTI15_10_IRQHandler+0x6a>
 8006a64:	4b11      	ldr	r3, [pc, #68]	; (8006aac <EXTI15_10_IRQHandler+0xac>)
 8006a66:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006a68:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	; (8006aa4 <EXTI15_10_IRQHandler+0xa4>)
 8006a6c:	695a      	ldr	r2, [r3, #20]
 8006a6e:	0451      	lsls	r1, r2, #17
 8006a70:	d508      	bpl.n	8006a84 <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a72:	4a0d      	ldr	r2, [pc, #52]	; (8006aa8 <EXTI15_10_IRQHandler+0xa8>)
 8006a74:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 8006a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a7a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a7c:	b112      	cbz	r2, 8006a84 <EXTI15_10_IRQHandler+0x84>
 8006a7e:	4b0b      	ldr	r3, [pc, #44]	; (8006aac <EXTI15_10_IRQHandler+0xac>)
 8006a80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a82:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8006a84:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <EXTI15_10_IRQHandler+0xa4>)
 8006a86:	695a      	ldr	r2, [r3, #20]
 8006a88:	0412      	lsls	r2, r2, #16
 8006a8a:	d50a      	bpl.n	8006aa2 <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a8c:	4a06      	ldr	r2, [pc, #24]	; (8006aa8 <EXTI15_10_IRQHandler+0xa8>)
 8006a8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 8006a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a94:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a96:	b122      	cbz	r2, 8006aa2 <EXTI15_10_IRQHandler+0xa2>
 8006a98:	4b04      	ldr	r3, [pc, #16]	; (8006aac <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 8006a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8006a9e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006aa0:	4710      	bx	r2
}
 8006aa2:	bd10      	pop	{r4, pc}
 8006aa4:	40013c00 	.word	0x40013c00
 8006aa8:	2000b518 	.word	0x2000b518
 8006aac:	2000b558 	.word	0x2000b558

08006ab0 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ab4:	4c3a      	ldr	r4, [pc, #232]	; (8006ba0 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 8006ab6:	4d3b      	ldr	r5, [pc, #236]	; (8006ba4 <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006aba:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8006bac <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 8006abe:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006ac0:	4939      	ldr	r1, [pc, #228]	; (8006ba8 <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 8006ac2:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 8006ac4:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006ac6:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006ac8:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006aca:	9b05      	ldr	r3, [sp, #20]
 8006acc:	ea03 0308 	and.w	r3, r3, r8
 8006ad0:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006ad2:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8006ad4:	bf0c      	ite	eq
 8006ad6:	2710      	moveq	r7, #16
 8006ad8:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006ada:	433b      	orrs	r3, r7
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006ae2:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006ae6:	9b05      	ldr	r3, [sp, #20]
 8006ae8:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006aea:	2220      	movs	r2, #32
 8006aec:	2300      	movs	r3, #0
 8006aee:	a806      	add	r0, sp, #24
 8006af0:	9600      	str	r6, [sp, #0]
 8006af2:	f003 f933 	bl	8009d5c <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 8006af6:	2001      	movs	r0, #1
 8006af8:	f001 fcf0 	bl	80084dc <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006afc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006afe:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b00:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b02:	4929      	ldr	r1, [pc, #164]	; (8006ba8 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b04:	ea03 0308 	and.w	r3, r3, r8
 8006b08:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b0a:	9b04      	ldr	r3, [sp, #16]
 8006b0c:	433b      	orrs	r3, r7
 8006b0e:	f043 0302 	orr.w	r3, r3, #2
 8006b12:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b18:	a806      	add	r0, sp, #24
 8006b1a:	9600      	str	r6, [sp, #0]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2220      	movs	r2, #32
 8006b20:	f003 f91c 	bl	8009d5c <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b24:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b26:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b28:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b2a:	491f      	ldr	r1, [pc, #124]	; (8006ba8 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b2c:	ea03 0308 	and.w	r3, r3, r8
 8006b30:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b32:	9b03      	ldr	r3, [sp, #12]
 8006b34:	433b      	orrs	r3, r7
 8006b36:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8006b3a:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b40:	a806      	add	r0, sp, #24
 8006b42:	9600      	str	r6, [sp, #0]
 8006b44:	2300      	movs	r3, #0
 8006b46:	2220      	movs	r2, #32
 8006b48:	f003 f908 	bl	8009d5c <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8006b4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b4e:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b50:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b52:	4915      	ldr	r1, [pc, #84]	; (8006ba8 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006b54:	ea03 0308 	and.w	r3, r3, r8
 8006b58:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006b5a:	9b02      	ldr	r3, [sp, #8]
 8006b5c:	433b      	orrs	r3, r7
 8006b5e:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8006b62:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006b66:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006b68:	9b02      	ldr	r3, [sp, #8]
 8006b6a:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8006b6c:	a806      	add	r0, sp, #24
 8006b6e:	2300      	movs	r3, #0
 8006b70:	9600      	str	r6, [sp, #0]
 8006b72:	2220      	movs	r2, #32
 8006b74:	f003 f8f2 	bl	8009d5c <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 8006b78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006b7a:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006b7c:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006b7e:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006b80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006b84:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006b88:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006b8a:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006b8c:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 8006b8e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006b92:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006b94:	9b06      	ldr	r3, [sp, #24]
 8006b96:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006b98:	b008      	add	sp, #32
 8006b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b9e:	bf00      	nop
 8006ba0:	a0000100 	.word	0xa0000100
 8006ba4:	2000b598 	.word	0x2000b598
 8006ba8:	a0000158 	.word	0xa0000158
 8006bac:	ffc00000 	.word	0xffc00000

08006bb0 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 8006bb4:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8006eec <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 8006bb8:	4ec8      	ldr	r6, [pc, #800]	; (8006edc <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 8006bba:	4dc9      	ldr	r5, [pc, #804]	; (8006ee0 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 8006bbc:	4cc9      	ldr	r4, [pc, #804]	; (8006ee4 <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 8006bbe:	4fca      	ldr	r7, [pc, #808]	; (8006ee8 <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	f000 fa5d 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f000 fa5a 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 fa57 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 fa54 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006bd8:	4638      	mov	r0, r7
 8006bda:	f000 fa51 	bl	8007080 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 8006bde:	4620      	mov	r0, r4
 8006be0:	220c      	movs	r2, #12
 8006be2:	2100      	movs	r1, #0
 8006be4:	f000 fb34 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006be8:	4620      	mov	r0, r4
 8006bea:	2207      	movs	r2, #7
 8006bec:	2100      	movs	r1, #0
 8006bee:	f000 fb6d 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	220c      	movs	r2, #12
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	f000 fb2a 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	2207      	movs	r2, #7
 8006c00:	2101      	movs	r1, #1
 8006c02:	f000 fb63 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 8006c06:	4620      	mov	r0, r4
 8006c08:	220c      	movs	r2, #12
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	f000 fb20 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 8006c10:	4620      	mov	r0, r4
 8006c12:	2207      	movs	r2, #7
 8006c14:	2102      	movs	r1, #2
 8006c16:	f000 fb59 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 8006c1a:	4620      	mov	r0, r4
 8006c1c:	220c      	movs	r2, #12
 8006c1e:	2103      	movs	r1, #3
 8006c20:	f000 fb16 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 8006c24:	4620      	mov	r0, r4
 8006c26:	2207      	movs	r2, #7
 8006c28:	2103      	movs	r1, #3
 8006c2a:	f000 fb4f 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 8006c2e:	4620      	mov	r0, r4
 8006c30:	220c      	movs	r2, #12
 8006c32:	2104      	movs	r1, #4
 8006c34:	f000 fb0c 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 8006c38:	4620      	mov	r0, r4
 8006c3a:	2207      	movs	r2, #7
 8006c3c:	2104      	movs	r1, #4
 8006c3e:	f000 fb45 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 8006c42:	4620      	mov	r0, r4
 8006c44:	220c      	movs	r2, #12
 8006c46:	2105      	movs	r1, #5
 8006c48:	f000 fb02 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	2207      	movs	r2, #7
 8006c50:	2105      	movs	r1, #5
 8006c52:	f000 fb3b 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 8006c56:	220c      	movs	r2, #12
 8006c58:	4611      	mov	r1, r2
 8006c5a:	4620      	mov	r0, r4
 8006c5c:	f000 faf8 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006c60:	4620      	mov	r0, r4
 8006c62:	2207      	movs	r2, #7
 8006c64:	210c      	movs	r1, #12
 8006c66:	f000 fb31 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	220c      	movs	r2, #12
 8006c6e:	210d      	movs	r1, #13
 8006c70:	f000 faee 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006c74:	4620      	mov	r0, r4
 8006c76:	2207      	movs	r2, #7
 8006c78:	210d      	movs	r1, #13
 8006c7a:	f000 fb27 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 8006c7e:	4620      	mov	r0, r4
 8006c80:	220c      	movs	r2, #12
 8006c82:	210e      	movs	r1, #14
 8006c84:	f000 fae4 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006c88:	4620      	mov	r0, r4
 8006c8a:	2207      	movs	r2, #7
 8006c8c:	210e      	movs	r1, #14
 8006c8e:	f000 fb1d 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006c92:	4620      	mov	r0, r4
 8006c94:	220c      	movs	r2, #12
 8006c96:	210f      	movs	r1, #15
 8006c98:	f000 fada 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	2207      	movs	r2, #7
 8006ca0:	210f      	movs	r1, #15
 8006ca2:	f000 fb13 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006ca6:	4638      	mov	r0, r7
 8006ca8:	220c      	movs	r2, #12
 8006caa:	2100      	movs	r1, #0
 8006cac:	f000 fad0 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006cb0:	4638      	mov	r0, r7
 8006cb2:	2207      	movs	r2, #7
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	f000 fb09 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 8006cba:	4638      	mov	r0, r7
 8006cbc:	220c      	movs	r2, #12
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	f000 fac6 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	2207      	movs	r2, #7
 8006cc8:	2101      	movs	r1, #1
 8006cca:	f000 faff 	bl	80072cc <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 8006cce:	4630      	mov	r0, r6
 8006cd0:	220c      	movs	r2, #12
 8006cd2:	210e      	movs	r1, #14
 8006cd4:	f000 fabc 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006cd8:	4630      	mov	r0, r6
 8006cda:	2207      	movs	r2, #7
 8006cdc:	210e      	movs	r1, #14
 8006cde:	f000 faf5 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	220c      	movs	r2, #12
 8006ce6:	210f      	movs	r1, #15
 8006ce8:	f000 fab2 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 8006cec:	4630      	mov	r0, r6
 8006cee:	2207      	movs	r2, #7
 8006cf0:	210f      	movs	r1, #15
 8006cf2:	f000 faeb 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006cf6:	4630      	mov	r0, r6
 8006cf8:	220c      	movs	r2, #12
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	f000 faa8 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006d00:	4630      	mov	r0, r6
 8006d02:	2207      	movs	r2, #7
 8006d04:	2100      	movs	r1, #0
 8006d06:	f000 fae1 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 8006d0a:	4630      	mov	r0, r6
 8006d0c:	220c      	movs	r2, #12
 8006d0e:	2101      	movs	r1, #1
 8006d10:	f000 fa9e 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 8006d14:	4630      	mov	r0, r6
 8006d16:	2207      	movs	r2, #7
 8006d18:	2101      	movs	r1, #1
 8006d1a:	f000 fad7 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 8006d1e:	4628      	mov	r0, r5
 8006d20:	220c      	movs	r2, #12
 8006d22:	2107      	movs	r1, #7
 8006d24:	f000 fa94 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 8006d28:	2207      	movs	r2, #7
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	f000 facd 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 8006d32:	4628      	mov	r0, r5
 8006d34:	220c      	movs	r2, #12
 8006d36:	2108      	movs	r1, #8
 8006d38:	f000 fa8a 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	2207      	movs	r2, #7
 8006d40:	2108      	movs	r1, #8
 8006d42:	f000 fac3 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 8006d46:	4628      	mov	r0, r5
 8006d48:	220c      	movs	r2, #12
 8006d4a:	2109      	movs	r1, #9
 8006d4c:	f000 fa80 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 8006d50:	4628      	mov	r0, r5
 8006d52:	2207      	movs	r2, #7
 8006d54:	2109      	movs	r1, #9
 8006d56:	f000 fab9 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	220c      	movs	r2, #12
 8006d5e:	210a      	movs	r1, #10
 8006d60:	f000 fa76 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 8006d64:	4628      	mov	r0, r5
 8006d66:	2207      	movs	r2, #7
 8006d68:	210a      	movs	r1, #10
 8006d6a:	f000 faaf 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 8006d6e:	4628      	mov	r0, r5
 8006d70:	220c      	movs	r2, #12
 8006d72:	210b      	movs	r1, #11
 8006d74:	f000 fa6c 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006d78:	4628      	mov	r0, r5
 8006d7a:	2207      	movs	r2, #7
 8006d7c:	210b      	movs	r1, #11
 8006d7e:	f000 faa5 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006d82:	220c      	movs	r2, #12
 8006d84:	4611      	mov	r1, r2
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 fa62 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	2207      	movs	r2, #7
 8006d90:	210c      	movs	r1, #12
 8006d92:	f000 fa9b 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006d96:	4628      	mov	r0, r5
 8006d98:	220c      	movs	r2, #12
 8006d9a:	210d      	movs	r1, #13
 8006d9c:	f000 fa58 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006da0:	4628      	mov	r0, r5
 8006da2:	2207      	movs	r2, #7
 8006da4:	210d      	movs	r1, #13
 8006da6:	f000 fa91 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 8006daa:	4628      	mov	r0, r5
 8006dac:	220c      	movs	r2, #12
 8006dae:	210e      	movs	r1, #14
 8006db0:	f000 fa4e 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006db4:	4628      	mov	r0, r5
 8006db6:	2207      	movs	r2, #7
 8006db8:	210e      	movs	r1, #14
 8006dba:	f000 fa87 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	220c      	movs	r2, #12
 8006dc2:	210f      	movs	r1, #15
 8006dc4:	f000 fa44 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006dc8:	4628      	mov	r0, r5
 8006dca:	2207      	movs	r2, #7
 8006dcc:	210f      	movs	r1, #15
 8006dce:	f000 fa7d 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	220c      	movs	r2, #12
 8006dd6:	2108      	movs	r1, #8
 8006dd8:	f000 fa3a 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006ddc:	4630      	mov	r0, r6
 8006dde:	2207      	movs	r2, #7
 8006de0:	2108      	movs	r1, #8
 8006de2:	f000 fa73 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006de6:	4630      	mov	r0, r6
 8006de8:	220c      	movs	r2, #12
 8006dea:	2109      	movs	r1, #9
 8006dec:	f000 fa30 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006df0:	4630      	mov	r0, r6
 8006df2:	2207      	movs	r2, #7
 8006df4:	2109      	movs	r1, #9
 8006df6:	f000 fa69 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	220c      	movs	r2, #12
 8006dfe:	210a      	movs	r1, #10
 8006e00:	f000 fa26 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 8006e04:	4630      	mov	r0, r6
 8006e06:	2207      	movs	r2, #7
 8006e08:	210a      	movs	r1, #10
 8006e0a:	f000 fa5f 	bl	80072cc <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006e0e:	4628      	mov	r0, r5
 8006e10:	220c      	movs	r2, #12
 8006e12:	2100      	movs	r1, #0
 8006e14:	f000 fa1c 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006e18:	4628      	mov	r0, r5
 8006e1a:	2207      	movs	r2, #7
 8006e1c:	2100      	movs	r1, #0
 8006e1e:	f000 fa55 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 8006e22:	4628      	mov	r0, r5
 8006e24:	220c      	movs	r2, #12
 8006e26:	2101      	movs	r1, #1
 8006e28:	f000 fa12 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006e2c:	4628      	mov	r0, r5
 8006e2e:	2207      	movs	r2, #7
 8006e30:	2101      	movs	r1, #1
 8006e32:	f000 fa4b 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 8006e36:	4638      	mov	r0, r7
 8006e38:	220c      	movs	r2, #12
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	f000 fa08 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006e40:	4638      	mov	r0, r7
 8006e42:	2207      	movs	r2, #7
 8006e44:	2104      	movs	r1, #4
 8006e46:	f000 fa41 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	220c      	movs	r2, #12
 8006e4e:	2105      	movs	r1, #5
 8006e50:	f000 f9fe 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 8006e54:	4638      	mov	r0, r7
 8006e56:	2207      	movs	r2, #7
 8006e58:	2105      	movs	r1, #5
 8006e5a:	f000 fa37 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006e5e:	4638      	mov	r0, r7
 8006e60:	220c      	movs	r2, #12
 8006e62:	210f      	movs	r1, #15
 8006e64:	f000 f9f4 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006e68:	4638      	mov	r0, r7
 8006e6a:	2207      	movs	r2, #7
 8006e6c:	210f      	movs	r1, #15
 8006e6e:	f000 fa2d 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006e72:	4620      	mov	r0, r4
 8006e74:	220c      	movs	r2, #12
 8006e76:	210b      	movs	r1, #11
 8006e78:	f000 f9ea 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	2207      	movs	r2, #7
 8006e80:	210b      	movs	r1, #11
 8006e82:	f000 fa23 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006e86:	4638      	mov	r0, r7
 8006e88:	220c      	movs	r2, #12
 8006e8a:	2108      	movs	r1, #8
 8006e8c:	f000 f9e0 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006e90:	4638      	mov	r0, r7
 8006e92:	2207      	movs	r2, #7
 8006e94:	2108      	movs	r1, #8
 8006e96:	f000 fa19 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	220c      	movs	r2, #12
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	f000 f9d6 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	f000 fa0f 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 8006eae:	4640      	mov	r0, r8
 8006eb0:	220c      	movs	r2, #12
 8006eb2:	2102      	movs	r1, #2
 8006eb4:	f000 f9cc 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006eb8:	4640      	mov	r0, r8
 8006eba:	2207      	movs	r2, #7
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	f000 fa05 	bl	80072cc <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	220c      	movs	r2, #12
 8006ec6:	2103      	movs	r1, #3
 8006ec8:	f000 f9c2 	bl	8007250 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006ecc:	4640      	mov	r0, r8
 8006ece:	2207      	movs	r2, #7

}
 8006ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006ed4:	2103      	movs	r1, #3
 8006ed6:	f000 b9f9 	b.w	80072cc <gpio_set_alternatefunction_type>
 8006eda:	bf00      	nop
 8006edc:	40020c00 	.word	0x40020c00
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	40021400 	.word	0x40021400
 8006ee8:	40021800 	.word	0x40021800
 8006eec:	40020800 	.word	0x40020800

08006ef0 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006ef0:	b530      	push	{r4, r5, lr}
	_conf = conf;
 8006ef2:	4c60      	ldr	r4, [pc, #384]	; (8007074 <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 8006ef4:	b083      	sub	sp, #12
	_conf = conf;
 8006ef6:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006ef8:	f7ff fe5a 	bl	8006bb0 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006efc:	4a5e      	ldr	r2, [pc, #376]	; (8007078 <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006efe:	495f      	ldr	r1, [pc, #380]	; (800707c <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 8006f00:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006f02:	f043 0301 	orr.w	r3, r3, #1
 8006f06:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	781a      	ldrb	r2, [r3, #0]
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	d148      	bne.n	8006fa2 <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006f10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f12:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f14:	7a9c      	ldrb	r4, [r3, #10]
 8006f16:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 8006f18:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 8006f1a:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f1c:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 8006f1e:	7b1c      	ldrb	r4, [r3, #12]
 8006f20:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 8006f22:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 8006f24:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006f26:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006f28:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 8006f2a:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 8006f2c:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006f2e:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 8006f30:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f32:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 8006f34:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 8006f36:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006f38:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006f3a:	4302      	orrs	r2, r0
 8006f3c:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006f3e:	b119      	cbz	r1, 8006f48 <fmc_sdram_init+0x58>
 8006f40:	9a00      	ldr	r2, [sp, #0]
 8006f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f46:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006f48:	7cda      	ldrb	r2, [r3, #19]
 8006f4a:	2a00      	cmp	r2, #0
 8006f4c:	f040 808c 	bne.w	8007068 <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006f50:	494a      	ldr	r1, [pc, #296]	; (800707c <fmc_sdram_init+0x18c>)
 8006f52:	9a00      	ldr	r2, [sp, #0]
 8006f54:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006f56:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8006f58:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	9a00      	ldr	r2, [sp, #0]
 8006f5e:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f60:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006f62:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f64:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006f66:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f68:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006f6a:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f6c:	432a      	orrs	r2, r5
 8006f6e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006f72:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006f78:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006f7c:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f7e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006f82:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f84:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006f88:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 8006f8c:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f8e:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006f92:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006f94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006f98:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8006f9a:	9b00      	ldr	r3, [sp, #0]
 8006f9c:	648b      	str	r3, [r1, #72]	; 0x48
}
 8006f9e:	b003      	add	sp, #12
 8006fa0:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006fa2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006fa4:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006fa6:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006fa8:	891a      	ldrh	r2, [r3, #8]
 8006faa:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006fac:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006fb0:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006fb2:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006fb4:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006fb6:	4322      	orrs	r2, r4
 8006fb8:	b292      	uxth	r2, r2
 8006fba:	4302      	orrs	r2, r0
 8006fbc:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006fbe:	b119      	cbz	r1, 8006fc8 <fmc_sdram_init+0xd8>
 8006fc0:	9a01      	ldr	r2, [sp, #4]
 8006fc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fc6:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006fc8:	4a2c      	ldr	r2, [pc, #176]	; (800707c <fmc_sdram_init+0x18c>)
 8006fca:	9901      	ldr	r1, [sp, #4]
 8006fcc:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 8006fce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006fd0:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 8006fd2:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006fd4:	7adc      	ldrb	r4, [r3, #11]
 8006fd6:	7a9a      	ldrb	r2, [r3, #10]
 8006fd8:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 8006fda:	0c09      	lsrs	r1, r1, #16
 8006fdc:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 8006fde:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 8006fe0:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006fe2:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006fe4:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 8006fe6:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 8006fe8:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 8006fea:	4322      	orrs	r2, r4
 8006fec:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006fee:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 8006ff0:	4302      	orrs	r2, r0
 8006ff2:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006ff4:	b119      	cbz	r1, 8006ffe <fmc_sdram_init+0x10e>
 8006ff6:	9a01      	ldr	r2, [sp, #4]
 8006ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ffc:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 8006ffe:	491f      	ldr	r1, [pc, #124]	; (800707c <fmc_sdram_init+0x18c>)
 8007000:	9a01      	ldr	r2, [sp, #4]
 8007002:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8007004:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8007006:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 8007008:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 800700a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800700c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 800700e:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 8007012:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 8007016:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8007018:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800701a:	9801      	ldr	r0, [sp, #4]
 800701c:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 800701e:	0512      	lsls	r2, r2, #20
 8007020:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8007024:	4302      	orrs	r2, r0
 8007026:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8007028:	9a01      	ldr	r2, [sp, #4]
 800702a:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 800702c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800702e:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 8007030:	2000      	movs	r0, #0
 8007032:	9a01      	ldr	r2, [sp, #4]
 8007034:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007036:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8007038:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800703a:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 800703c:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800703e:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007040:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007042:	432a      	orrs	r2, r5
 8007044:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8007048:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 800704a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800704c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007050:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8007052:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8007054:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8007058:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800705a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800705e:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 8007060:	9b01      	ldr	r3, [sp, #4]
 8007062:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8007064:	b003      	add	sp, #12
 8007066:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8007068:	9a00      	ldr	r2, [sp, #0]
 800706a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800706e:	9200      	str	r2, [sp, #0]
 8007070:	e76e      	b.n	8006f50 <fmc_sdram_init+0x60>
 8007072:	bf00      	nop
 8007074:	2000b598 	.word	0x2000b598
 8007078:	40023800 	.word	0x40023800
 800707c:	a0000100 	.word	0xa0000100

08007080 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8007080:	4b28      	ldr	r3, [pc, #160]	; (8007124 <gpio_port_clock_enable+0xa4>)
 8007082:	4298      	cmp	r0, r3
 8007084:	d01e      	beq.n	80070c4 <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8007086:	4b28      	ldr	r3, [pc, #160]	; (8007128 <gpio_port_clock_enable+0xa8>)
 8007088:	4298      	cmp	r0, r3
 800708a:	d021      	beq.n	80070d0 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 800708c:	4b27      	ldr	r3, [pc, #156]	; (800712c <gpio_port_clock_enable+0xac>)
 800708e:	4298      	cmp	r0, r3
 8007090:	d024      	beq.n	80070dc <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8007092:	4b27      	ldr	r3, [pc, #156]	; (8007130 <gpio_port_clock_enable+0xb0>)
 8007094:	4298      	cmp	r0, r3
 8007096:	d00f      	beq.n	80070b8 <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8007098:	4b26      	ldr	r3, [pc, #152]	; (8007134 <gpio_port_clock_enable+0xb4>)
 800709a:	4298      	cmp	r0, r3
 800709c:	d024      	beq.n	80070e8 <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 800709e:	4b26      	ldr	r3, [pc, #152]	; (8007138 <gpio_port_clock_enable+0xb8>)
 80070a0:	4298      	cmp	r0, r3
 80070a2:	d027      	beq.n	80070f4 <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <gpio_port_clock_enable+0xbc>)
 80070a6:	4298      	cmp	r0, r3
 80070a8:	d02a      	beq.n	8007100 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 80070aa:	4b25      	ldr	r3, [pc, #148]	; (8007140 <gpio_port_clock_enable+0xc0>)
 80070ac:	4298      	cmp	r0, r3
 80070ae:	d033      	beq.n	8007118 <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 80070b0:	4b24      	ldr	r3, [pc, #144]	; (8007144 <gpio_port_clock_enable+0xc4>)
 80070b2:	4298      	cmp	r0, r3
 80070b4:	d02a      	beq.n	800710c <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 80070b6:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 80070b8:	4a23      	ldr	r2, [pc, #140]	; (8007148 <gpio_port_clock_enable+0xc8>)
 80070ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070bc:	f043 0308 	orr.w	r3, r3, #8
 80070c0:	6313      	str	r3, [r2, #48]	; 0x30
 80070c2:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 80070c4:	4a20      	ldr	r2, [pc, #128]	; (8007148 <gpio_port_clock_enable+0xc8>)
 80070c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	6313      	str	r3, [r2, #48]	; 0x30
 80070ce:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 80070d0:	4a1d      	ldr	r2, [pc, #116]	; (8007148 <gpio_port_clock_enable+0xc8>)
 80070d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070d4:	f043 0302 	orr.w	r3, r3, #2
 80070d8:	6313      	str	r3, [r2, #48]	; 0x30
 80070da:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 80070dc:	4a1a      	ldr	r2, [pc, #104]	; (8007148 <gpio_port_clock_enable+0xc8>)
 80070de:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070e0:	f043 0304 	orr.w	r3, r3, #4
 80070e4:	6313      	str	r3, [r2, #48]	; 0x30
 80070e6:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <gpio_port_clock_enable+0xc8>)
 80070ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070ec:	f043 0310 	orr.w	r3, r3, #16
 80070f0:	6313      	str	r3, [r2, #48]	; 0x30
 80070f2:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 80070f4:	4a14      	ldr	r2, [pc, #80]	; (8007148 <gpio_port_clock_enable+0xc8>)
 80070f6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80070f8:	f043 0320 	orr.w	r3, r3, #32
 80070fc:	6313      	str	r3, [r2, #48]	; 0x30
 80070fe:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8007100:	4a11      	ldr	r2, [pc, #68]	; (8007148 <gpio_port_clock_enable+0xc8>)
 8007102:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007108:	6313      	str	r3, [r2, #48]	; 0x30
 800710a:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 800710c:	4a0e      	ldr	r2, [pc, #56]	; (8007148 <gpio_port_clock_enable+0xc8>)
 800710e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8007110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007114:	6313      	str	r3, [r2, #48]	; 0x30
 8007116:	e7ce      	b.n	80070b6 <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8007118:	4a0b      	ldr	r2, [pc, #44]	; (8007148 <gpio_port_clock_enable+0xc8>)
 800711a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800711c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007120:	6313      	str	r3, [r2, #48]	; 0x30
 8007122:	4770      	bx	lr
 8007124:	40020000 	.word	0x40020000
 8007128:	40020400 	.word	0x40020400
 800712c:	40020800 	.word	0x40020800
 8007130:	40020c00 	.word	0x40020c00
 8007134:	40021000 	.word	0x40021000
 8007138:	40021400 	.word	0x40021400
 800713c:	40021800 	.word	0x40021800
 8007140:	40021c00 	.word	0x40021c00
 8007144:	40022000 	.word	0x40022000
 8007148:	40023800 	.word	0x40023800

0800714c <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 800714c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714e:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 8007150:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8007152:	2a03      	cmp	r2, #3
	__IO uint32_t tmpreg = 0U;
 8007154:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8007156:	d81c      	bhi.n	8007192 <gpio_set_mode+0x46>
		port -> MODER &=~ (3U << (pin * 2));
 8007158:	6804      	ldr	r4, [r0, #0]
 800715a:	0049      	lsls	r1, r1, #1
 800715c:	2303      	movs	r3, #3
 800715e:	408b      	lsls	r3, r1
 8007160:	ea24 0403 	bic.w	r4, r4, r3
 8007164:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 8007166:	68c4      	ldr	r4, [r0, #12]
 8007168:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800716a:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 800716c:	2a02      	cmp	r2, #2
		tmpreg &=~ (3U << (pin * 2));
 800716e:	ea24 0303 	bic.w	r3, r4, r3
 8007172:	9301      	str	r3, [sp, #4]
		switch(mode){
 8007174:	d046      	beq.n	8007204 <gpio_set_mode+0xb8>
 8007176:	2a03      	cmp	r2, #3
 8007178:	d105      	bne.n	8007186 <gpio_set_mode+0x3a>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 800717a:	9a01      	ldr	r2, [sp, #4]
 800717c:	2302      	movs	r3, #2
 800717e:	fa03 f101 	lsl.w	r1, r3, r1
 8007182:	4311      	orrs	r1, r2
 8007184:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 8007186:	9a01      	ldr	r2, [sp, #4]
 8007188:	68c3      	ldr	r3, [r0, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 800718e:	b003      	add	sp, #12
 8007190:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 8007192:	1f13      	subs	r3, r2, #4
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b05      	cmp	r3, #5
 8007198:	d82b      	bhi.n	80071f2 <gpio_set_mode+0xa6>
		port -> MODER &=~ (3U << (pin * 2));
 800719a:	6804      	ldr	r4, [r0, #0]
 800719c:	004d      	lsls	r5, r1, #1
 800719e:	f04f 0c03 	mov.w	ip, #3
 80071a2:	fa0c fc05 	lsl.w	ip, ip, r5
 80071a6:	ea24 040c 	bic.w	r4, r4, ip
 80071aa:	6004      	str	r4, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 80071ac:	6807      	ldr	r7, [r0, #0]
 80071ae:	2401      	movs	r4, #1
 80071b0:	fa04 f605 	lsl.w	r6, r4, r5
 80071b4:	4337      	orrs	r7, r6
 80071b6:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	fa04 f101 	lsl.w	r1, r4, r1
		port -> MODER &=~ (3U << (pin * 2));
 80071be:	ea6f 0e0c 	mvn.w	lr, ip
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 80071c2:	6844      	ldr	r4, [r0, #4]
 80071c4:	d825      	bhi.n	8007212 <gpio_set_mode+0xc6>
 80071c6:	4321      	orrs	r1, r4
 80071c8:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 80071ca:	6883      	ldr	r3, [r0, #8]
 80071cc:	ea0e 0303 	and.w	r3, lr, r3
 80071d0:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80071d2:	6883      	ldr	r3, [r0, #8]
 80071d4:	ea4c 0303 	orr.w	r3, ip, r3
 80071d8:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 80071da:	68c3      	ldr	r3, [r0, #12]
 80071dc:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 80071de:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80071e0:	2a05      	cmp	r2, #5
		tmpreg &=~ (3U << (pin * 2));
 80071e2:	ea0e 0303 	and.w	r3, lr, r3
 80071e6:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80071e8:	d12f      	bne.n	800724a <gpio_set_mode+0xfe>
 80071ea:	9b01      	ldr	r3, [sp, #4]
 80071ec:	431e      	orrs	r6, r3
 80071ee:	9601      	str	r6, [sp, #4]
 80071f0:	e7c9      	b.n	8007186 <gpio_set_mode+0x3a>
		port -> MODER |= (3U << (pin * 2));
 80071f2:	6802      	ldr	r2, [r0, #0]
 80071f4:	2303      	movs	r3, #3
 80071f6:	0049      	lsls	r1, r1, #1
 80071f8:	fa03 f101 	lsl.w	r1, r3, r1
 80071fc:	4311      	orrs	r1, r2
 80071fe:	6001      	str	r1, [r0, #0]
}
 8007200:	b003      	add	sp, #12
 8007202:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmpreg |=  (1U << (pin * 2));
 8007204:	9a01      	ldr	r2, [sp, #4]
 8007206:	2301      	movs	r3, #1
 8007208:	fa03 f101 	lsl.w	r1, r3, r1
 800720c:	4311      	orrs	r1, r2
 800720e:	9101      	str	r1, [sp, #4]
			break;
 8007210:	e7b9      	b.n	8007186 <gpio_set_mode+0x3a>
		else port -> OTYPER &=~ (1U << pin);
 8007212:	ea24 0101 	bic.w	r1, r4, r1
 8007216:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8007218:	6883      	ldr	r3, [r0, #8]
 800721a:	ea0e 0303 	and.w	r3, lr, r3
 800721e:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007220:	6883      	ldr	r3, [r0, #8]
 8007222:	ea4c 0303 	orr.w	r3, ip, r3
 8007226:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 8007228:	68c3      	ldr	r3, [r0, #12]
 800722a:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800722c:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 800722e:	2a08      	cmp	r2, #8
		tmpreg &=~ (3U << (pin * 2));
 8007230:	ea0e 0303 	and.w	r3, lr, r3
 8007234:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8007236:	d0d8      	beq.n	80071ea <gpio_set_mode+0x9e>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 8007238:	2a09      	cmp	r2, #9
 800723a:	d1a4      	bne.n	8007186 <gpio_set_mode+0x3a>
 800723c:	9a01      	ldr	r2, [sp, #4]
 800723e:	2302      	movs	r3, #2
 8007240:	fa03 f505 	lsl.w	r5, r3, r5
 8007244:	4315      	orrs	r5, r2
 8007246:	9501      	str	r5, [sp, #4]
 8007248:	e79d      	b.n	8007186 <gpio_set_mode+0x3a>
 800724a:	2a06      	cmp	r2, #6
 800724c:	d0f6      	beq.n	800723c <gpio_set_mode+0xf0>
 800724e:	e79a      	b.n	8007186 <gpio_set_mode+0x3a>

08007250 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 8007250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 8007254:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 8007256:	2303      	movs	r3, #3
 8007258:	6805      	ldr	r5, [r0, #0]
 800725a:	fa03 f30c 	lsl.w	r3, r3, ip
 800725e:	ea25 0503 	bic.w	r5, r5, r3
 8007262:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 8007264:	6805      	ldr	r5, [r0, #0]
 8007266:	2402      	movs	r4, #2
 8007268:	fa04 f40c 	lsl.w	r4, r4, ip
 800726c:	432c      	orrs	r4, r5
 800726e:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 8007270:	6844      	ldr	r4, [r0, #4]
 8007272:	f04f 0c01 	mov.w	ip, #1
 8007276:	fa0c fc01 	lsl.w	ip, ip, r1
 800727a:	ea24 040c 	bic.w	r4, r4, ip
 800727e:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 8007280:	6884      	ldr	r4, [r0, #8]
 8007282:	ea24 0403 	bic.w	r4, r4, r3
 8007286:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8007288:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 800728a:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 800728c:	ea43 0304 	orr.w	r3, r3, r4
 8007290:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 8007292:	d80d      	bhi.n	80072b0 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 8007294:	6a03      	ldr	r3, [r0, #32]
 8007296:	0089      	lsls	r1, r1, #2
 8007298:	240f      	movs	r4, #15
 800729a:	408c      	lsls	r4, r1
 800729c:	ea23 0304 	bic.w	r3, r3, r4
 80072a0:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 80072a2:	6a03      	ldr	r3, [r0, #32]
 80072a4:	fa02 f101 	lsl.w	r1, r2, r1
 80072a8:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 80072aa:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 80072ac:	6201      	str	r1, [r0, #32]
}
 80072ae:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 80072b0:	3908      	subs	r1, #8
 80072b2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072b4:	0089      	lsls	r1, r1, #2
 80072b6:	240f      	movs	r4, #15
 80072b8:	408c      	lsls	r4, r1
 80072ba:	ea23 0304 	bic.w	r3, r3, r4
 80072be:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80072c0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072c2:	408a      	lsls	r2, r1
 80072c4:	431a      	orrs	r2, r3
}
 80072c6:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 80072c8:	6242      	str	r2, [r0, #36]	; 0x24
}
 80072ca:	4770      	bx	lr

080072cc <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80072cc:	2a04      	cmp	r2, #4
 80072ce:	d00a      	beq.n	80072e6 <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80072d0:	2a07      	cmp	r2, #7
 80072d2:	d000      	beq.n	80072d6 <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 80072d4:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 80072d6:	6843      	ldr	r3, [r0, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	fa02 f101 	lsl.w	r1, r2, r1
 80072de:	ea23 0101 	bic.w	r1, r3, r1
 80072e2:	6041      	str	r1, [r0, #4]
}
 80072e4:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 80072e6:	6842      	ldr	r2, [r0, #4]
 80072e8:	2301      	movs	r3, #1
 80072ea:	fa03 f101 	lsl.w	r1, r3, r1
 80072ee:	4311      	orrs	r1, r2
 80072f0:	6041      	str	r1, [r0, #4]
 80072f2:	4770      	bx	lr

080072f4 <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 80072f4:	68c3      	ldr	r3, [r0, #12]
 80072f6:	0049      	lsls	r1, r1, #1
 80072f8:	2203      	movs	r2, #3
 80072fa:	408a      	lsls	r2, r1
 80072fc:	ea23 0302 	bic.w	r3, r3, r2
 8007300:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 8007302:	68c2      	ldr	r2, [r0, #12]
 8007304:	2302      	movs	r3, #2
 8007306:	fa03 f101 	lsl.w	r1, r3, r1
 800730a:	4311      	orrs	r1, r2
 800730c:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 800730e:	4770      	bx	lr

08007310 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 8007310:	6982      	ldr	r2, [r0, #24]
 8007312:	2301      	movs	r3, #1
 8007314:	fa03 f101 	lsl.w	r1, r3, r1
 8007318:	4311      	orrs	r1, r2
 800731a:	6181      	str	r1, [r0, #24]
}
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop

08007320 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 8007320:	6982      	ldr	r2, [r0, #24]
 8007322:	3110      	adds	r1, #16
 8007324:	2301      	movs	r3, #1
 8007326:	fa03 f101 	lsl.w	r1, r3, r1
 800732a:	4311      	orrs	r1, r2
 800732c:	6181      	str	r1, [r0, #24]
}
 800732e:	4770      	bx	lr

08007330 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8007330:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 8007332:	2301      	movs	r3, #1
 8007334:	6944      	ldr	r4, [r0, #20]
 8007336:	fa03 f201 	lsl.w	r2, r3, r1
 800733a:	4214      	tst	r4, r2
 800733c:	d008      	beq.n	8007350 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 800733e:	6982      	ldr	r2, [r0, #24]
}
 8007340:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 8007344:	3110      	adds	r1, #16
 8007346:	fa03 f101 	lsl.w	r1, r3, r1
 800734a:	4311      	orrs	r1, r2
 800734c:	6181      	str	r1, [r0, #24]
}
 800734e:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 8007350:	6983      	ldr	r3, [r0, #24]
}
 8007352:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 8007356:	431a      	orrs	r2, r3
 8007358:	6182      	str	r2, [r0, #24]
}
 800735a:	4770      	bx	lr

0800735c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 800735c:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 800735e:	480a      	ldr	r0, [pc, #40]	; (8007388 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 8007360:	4c0a      	ldr	r4, [pc, #40]	; (800738c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 8007362:	490b      	ldr	r1, [pc, #44]	; (8007390 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 8007364:	2200      	movs	r2, #0
 8007366:	2300      	movs	r3, #0
 8007368:	e9c4 2300 	strd	r2, r3, [r4]
 800736c:	e9c0 2300 	strd	r2, r3, [r0]
 8007370:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 8007374:	4b07      	ldr	r3, [pc, #28]	; (8007394 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 8007376:	60a3      	str	r3, [r4, #8]
 8007378:	4a07      	ldr	r2, [pc, #28]	; (8007398 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 800737a:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 800737e:	6082      	str	r2, [r0, #8]
 8007380:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8007384:	608b      	str	r3, [r1, #8]
}
 8007386:	4770      	bx	lr
 8007388:	2000b5a0 	.word	0x2000b5a0
 800738c:	2000b5c0 	.word	0x2000b5c0
 8007390:	2000b5b0 	.word	0x2000b5b0
 8007394:	40005c00 	.word	0x40005c00
 8007398:	40005400 	.word	0x40005400

0800739c <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 800739c:	b530      	push	{r4, r5, lr}
	stm_ret_t ret;

	IWDG -> KR = IWDG_KEY_ENABLE;
 800739e:	4c0c      	ldr	r4, [pc, #48]	; (80073d0 <iwdg_init+0x34>)
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 80073a0:	b083      	sub	sp, #12
	IWDG -> KR = IWDG_KEY_ENABLE;
 80073a2:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 80073a6:	6023      	str	r3, [r4, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;

	IWDG -> PR = psc;
	IWDG -> RLR = arr-1;
 80073a8:	3a01      	subs	r2, #1
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 80073aa:	f245 5355 	movw	r3, #21845	; 0x5555

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80073ae:	2531      	movs	r5, #49	; 0x31
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 80073b0:	6023      	str	r3, [r4, #0]
	IWDG -> PR = psc;
 80073b2:	6061      	str	r1, [r4, #4]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80073b4:	2300      	movs	r3, #0
	IWDG -> RLR = arr-1;
 80073b6:	60a2      	str	r2, [r4, #8]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80073b8:	4906      	ldr	r1, [pc, #24]	; (80073d4 <iwdg_init+0x38>)
 80073ba:	9500      	str	r5, [sp, #0]
 80073bc:	2203      	movs	r2, #3
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 80073be:	4605      	mov	r5, r0
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 80073c0:	f002 fccc 	bl	8009d5c <wait_flag_in_register_timeout>

	IWDG -> KR = IWDG_KEY_RELOAD;
 80073c4:	f64a 23aa 	movw	r3, #43690	; 0xaaaa

	return ret;
}
 80073c8:	4628      	mov	r0, r5
	IWDG -> KR = IWDG_KEY_RELOAD;
 80073ca:	6023      	str	r3, [r4, #0]
}
 80073cc:	b003      	add	sp, #12
 80073ce:	bd30      	pop	{r4, r5, pc}
 80073d0:	40003000 	.word	0x40003000
 80073d4:	4000300c 	.word	0x4000300c

080073d8 <iwdg_disable_in_debugmode>:

void iwdg_disable_in_debugmode(void){
#if defined(STM32F1)
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP;
#elif defined(STM32F4)
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 80073d8:	4a02      	ldr	r2, [pc, #8]	; (80073e4 <iwdg_disable_in_debugmode+0xc>)
 80073da:	6893      	ldr	r3, [r2, #8]
 80073dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073e0:	6093      	str	r3, [r2, #8]
#endif /* STM32F4 */
}
 80073e2:	4770      	bx	lr
 80073e4:	e0042000 	.word	0xe0042000

080073e8 <iwdg_refresh>:

void iwdg_refresh(void){
	IWDG -> KR = IWDG_KEY_RELOAD;
 80073e8:	4b02      	ldr	r3, [pc, #8]	; (80073f4 <iwdg_refresh+0xc>)
 80073ea:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80073ee:	601a      	str	r2, [r3, #0]
}
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	40003000 	.word	0x40003000

080073f8 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80073f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073fc:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 80073fe:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007400:	4ab9      	ldr	r2, [pc, #740]	; (80076e8 <rcc_init+0x2f0>)
	stm_ret_t ret;
 8007402:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 8007404:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 8007406:	2301      	movs	r3, #1
 8007408:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 800740a:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 800740c:	4eb7      	ldr	r6, [pc, #732]	; (80076ec <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 800740e:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8007410:	4604      	mov	r4, r0
	_conf = rcc_conf;
 8007412:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007414:	d412      	bmi.n	800743c <rcc_init+0x44>
 8007416:	6893      	ldr	r3, [r2, #8]
 8007418:	071f      	lsls	r7, r3, #28
 800741a:	d40c      	bmi.n	8007436 <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 800741c:	7b0b      	ldrb	r3, [r1, #12]
 800741e:	b1db      	cbz	r3, 8007458 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 8007420:	2b01      	cmp	r3, #1
 8007422:	d03b      	beq.n	800749c <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 8007424:	2255      	movs	r2, #85	; 0x55
 8007426:	2100      	movs	r1, #0
 8007428:	4620      	mov	r0, r4
 800742a:	f002 fcd3 	bl	8009dd4 <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 800742e:	4620      	mov	r0, r4
 8007430:	b006      	add	sp, #24
 8007432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007436:	6853      	ldr	r3, [r2, #4]
 8007438:	025d      	lsls	r5, r3, #9
 800743a:	d5ef      	bpl.n	800741c <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 800743c:	4baa      	ldr	r3, [pc, #680]	; (80076e8 <rcc_init+0x2f0>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 8007444:	d1ea      	bne.n	800741c <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 8007446:	4620      	mov	r0, r4
 8007448:	2234      	movs	r2, #52	; 0x34
 800744a:	4619      	mov	r1, r3
 800744c:	f002 fcc2 	bl	8009dd4 <set_return>
}
 8007450:	4620      	mov	r0, r4
 8007452:	b006      	add	sp, #24
 8007454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 8007458:	4fa3      	ldr	r7, [pc, #652]	; (80076e8 <rcc_init+0x2f0>)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	f043 0301 	orr.w	r3, r3, #1
 8007460:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 8007462:	ad02      	add	r5, sp, #8
 8007464:	2364      	movs	r3, #100	; 0x64
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4639      	mov	r1, r7
 800746a:	4628      	mov	r0, r5
 800746c:	2301      	movs	r3, #1
 800746e:	2202      	movs	r2, #2
 8007470:	f002 fc74 	bl	8009d5c <wait_flag_in_register_timeout>
 8007474:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007478:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 800747c:	4620      	mov	r0, r4
 800747e:	f002 fcb7 	bl	8009df0 <is_timeout>
 8007482:	2800      	cmp	r0, #0
 8007484:	d155      	bne.n	8007532 <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8007486:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007488:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 800748a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800748e:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6891      	ldr	r1, [r2, #8]
 8007494:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	e016      	b.n	80074ca <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 800749c:	4992      	ldr	r1, [pc, #584]	; (80076e8 <rcc_init+0x2f0>)
 800749e:	680a      	ldr	r2, [r1, #0]
 80074a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80074a4:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 80074a6:	ad02      	add	r5, sp, #8
 80074a8:	22c8      	movs	r2, #200	; 0xc8
 80074aa:	9200      	str	r2, [sp, #0]
 80074ac:	4628      	mov	r0, r5
 80074ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80074b2:	f002 fc53 	bl	8009d5c <wait_flag_in_register_timeout>
 80074b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80074ba:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 80074be:	4620      	mov	r0, r4
 80074c0:	f002 fc96 	bl	8009df0 <is_timeout>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d17c      	bne.n	80075c2 <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 80074c8:	6832      	ldr	r2, [r6, #0]
 80074ca:	7b53      	ldrb	r3, [r2, #13]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d104      	bne.n	80074da <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 80074d0:	4f85      	ldr	r7, [pc, #532]	; (80076e8 <rcc_init+0x2f0>)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f013 0308 	ands.w	r3, r3, #8
 80074d8:	d078      	beq.n	80075cc <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 80074da:	6910      	ldr	r0, [r2, #16]
 80074dc:	f002 fce2 	bl	8009ea4 <embedded_flash_calculate_latency>
 80074e0:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80074e2:	f002 fd0b 	bl	8009efc <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80074e6:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 80074e8:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80074ea:	d866      	bhi.n	80075ba <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 80074ec:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80076fc <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80074f0:	497f      	ldr	r1, [pc, #508]	; (80076f0 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 80074f2:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80074f6:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 80074fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fe:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8007502:	4628      	mov	r0, r5
 8007504:	f8cd a000 	str.w	sl, [sp]
 8007508:	2301      	movs	r3, #1
 800750a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800750e:	f002 fc25 	bl	8009d5c <wait_flag_in_register_timeout>
 8007512:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007516:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 800751a:	4620      	mov	r0, r4
 800751c:	f002 fc68 	bl	8009df0 <is_timeout>
 8007520:	b160      	cbz	r0, 800753c <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 8007522:	4620      	mov	r0, r4
 8007524:	2188      	movs	r1, #136	; 0x88
 8007526:	f002 fc59 	bl	8009ddc <set_return_line>
}
 800752a:	4620      	mov	r0, r4
 800752c:	b006      	add	sp, #24
 800752e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 8007532:	2141      	movs	r1, #65	; 0x41
 8007534:	4620      	mov	r0, r4
 8007536:	f002 fc51 	bl	8009ddc <set_return_line>
			return ret;
 800753a:	e778      	b.n	800742e <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 800753c:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 8007540:	496b      	ldr	r1, [pc, #428]	; (80076f0 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 8007542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007546:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 800754a:	4628      	mov	r0, r5
 800754c:	f8cd a000 	str.w	sl, [sp]
 8007550:	2301      	movs	r3, #1
 8007552:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007556:	f002 fc01 	bl	8009d5c <wait_flag_in_register_timeout>
 800755a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800755e:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8007562:	4620      	mov	r0, r4
 8007564:	f002 fc44 	bl	8009df0 <is_timeout>
 8007568:	2800      	cmp	r0, #0
 800756a:	f040 8087 	bne.w	800767c <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 800756e:	6833      	ldr	r3, [r6, #0]
 8007570:	7b5a      	ldrb	r2, [r3, #13]
 8007572:	2a00      	cmp	r2, #0
 8007574:	d074      	beq.n	8007660 <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 8007576:	2a01      	cmp	r2, #1
 8007578:	f000 80a8 	beq.w	80076cc <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 800757c:	2a02      	cmp	r2, #2
 800757e:	f000 80bf 	beq.w	8007700 <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007582:	f8df 9164 	ldr.w	r9, [pc, #356]	; 80076e8 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007586:	495b      	ldr	r1, [pc, #364]	; (80076f4 <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007588:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800758c:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007590:	f241 3388 	movw	r3, #5000	; 0x1388
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	4628      	mov	r0, r5
 8007598:	2301      	movs	r3, #1
 800759a:	f002 fbdf 	bl	8009d5c <wait_flag_in_register_timeout>
 800759e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80075a2:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 80075a6:	4620      	mov	r0, r4
 80075a8:	f002 fc22 	bl	8009df0 <is_timeout>
 80075ac:	2800      	cmp	r0, #0
 80075ae:	d06a      	beq.n	8007686 <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 80075b0:	21ad      	movs	r1, #173	; 0xad
 80075b2:	4620      	mov	r0, r4
 80075b4:	f002 fc12 	bl	8009ddc <set_return_line>
		return ret;
 80075b8:	e739      	b.n	800742e <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 80075ba:	4638      	mov	r0, r7
 80075bc:	f002 fc68 	bl	8009e90 <embedded_flash_set_latency>
 80075c0:	e794      	b.n	80074ec <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 80075c2:	2150      	movs	r1, #80	; 0x50
 80075c4:	4620      	mov	r0, r4
 80075c6:	f002 fc09 	bl	8009ddc <set_return_line>
			return ret;
 80075ca:	e730      	b.n	800742e <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 80075cc:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80075ce:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 80075d2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80075d6:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 80075d8:	4639      	mov	r1, r7
 80075da:	4628      	mov	r0, r5
 80075dc:	f8cd 8000 	str.w	r8, [sp]
 80075e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80075e4:	f002 fbba 	bl	8009d5c <wait_flag_in_register_timeout>
 80075e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80075ec:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 80075f0:	4620      	mov	r0, r4
 80075f2:	f002 fbfd 	bl	8009df0 <is_timeout>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	d13b      	bne.n	8007672 <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80075fe:	9b05      	ldr	r3, [sp, #20]
 8007600:	4a3d      	ldr	r2, [pc, #244]	; (80076f8 <rcc_init+0x300>)
 8007602:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8007604:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 8007606:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8007608:	9b05      	ldr	r3, [sp, #20]
 800760a:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 800760c:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 800760e:	430b      	orrs	r3, r1
 8007610:	69d1      	ldr	r1, [r2, #28]
 8007612:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8007616:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8007618:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 800761a:	0849      	lsrs	r1, r1, #1
 800761c:	3901      	subs	r1, #1
 800761e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007622:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007626:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 800762a:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 800762c:	9b05      	ldr	r3, [sp, #20]
 800762e:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007636:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8007638:	4639      	mov	r1, r7
 800763a:	4628      	mov	r0, r5
 800763c:	f8cd 8000 	str.w	r8, [sp]
 8007640:	2301      	movs	r3, #1
 8007642:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007646:	f002 fb89 	bl	8009d5c <wait_flag_in_register_timeout>
 800764a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800764e:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8007652:	4620      	mov	r0, r4
 8007654:	f002 fbcc 	bl	8009df0 <is_timeout>
 8007658:	2800      	cmp	r0, #0
 800765a:	d15b      	bne.n	8007714 <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 800765c:	6832      	ldr	r2, [r6, #0]
 800765e:	e73c      	b.n	80074da <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 8007660:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <rcc_init+0x2f0>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	0798      	lsls	r0, r3, #30
 8007666:	d48c      	bmi.n	8007582 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8007668:	2199      	movs	r1, #153	; 0x99
 800766a:	4620      	mov	r0, r4
 800766c:	f002 fbb6 	bl	8009ddc <set_return_line>
			return ret;
 8007670:	e6dd      	b.n	800742e <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8007672:	2161      	movs	r1, #97	; 0x61
 8007674:	4620      	mov	r0, r4
 8007676:	f002 fbb1 	bl	8009ddc <set_return_line>
				return ret;
 800767a:	e6d8      	b.n	800742e <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 800767c:	218f      	movs	r1, #143	; 0x8f
 800767e:	4620      	mov	r0, r4
 8007680:	f002 fbac 	bl	8009ddc <set_return_line>
		return ret;
 8007684:	e6d3      	b.n	800742e <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 8007686:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800768a:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 800768c:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 800768e:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8007690:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8007694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007698:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 800769a:	7d53      	ldrb	r3, [r2, #21]
 800769c:	7d11      	ldrb	r1, [r2, #20]
 800769e:	7d92      	ldrb	r2, [r2, #22]
 80076a0:	3303      	adds	r3, #3
 80076a2:	3107      	adds	r1, #7
 80076a4:	029b      	lsls	r3, r3, #10
 80076a6:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80076aa:	9905      	ldr	r1, [sp, #20]
 80076ac:	3203      	adds	r2, #3
 80076ae:	430b      	orrs	r3, r1
 80076b0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80076b4:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 80076b6:	9b05      	ldr	r3, [sp, #20]
 80076b8:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 80076bc:	f7f9 fd86 	bl	80011cc <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80076c0:	4547      	cmp	r7, r8
 80076c2:	d30d      	bcc.n	80076e0 <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 80076c4:	200f      	movs	r0, #15
 80076c6:	f000 fee1 	bl	800848c <systick_init>
	return ret;
 80076ca:	e6b0      	b.n	800742e <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 80076cc:	4b06      	ldr	r3, [pc, #24]	; (80076e8 <rcc_init+0x2f0>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	0399      	lsls	r1, r3, #14
 80076d2:	f53f af56 	bmi.w	8007582 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 80076d6:	219f      	movs	r1, #159	; 0x9f
 80076d8:	4620      	mov	r0, r4
 80076da:	f002 fb7f 	bl	8009ddc <set_return_line>
			return ret;
 80076de:	e6a6      	b.n	800742e <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 80076e0:	4638      	mov	r0, r7
 80076e2:	f002 fbd5 	bl	8009e90 <embedded_flash_set_latency>
 80076e6:	e7ed      	b.n	80076c4 <rcc_init+0x2cc>
 80076e8:	40023800 	.word	0x40023800
 80076ec:	2000b5d0 	.word	0x2000b5d0
 80076f0:	40007004 	.word	0x40007004
 80076f4:	40023808 	.word	0x40023808
 80076f8:	f0bc8000 	.word	0xf0bc8000
 80076fc:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <rcc_init+0x328>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	019b      	lsls	r3, r3, #6
 8007706:	f53f af3c 	bmi.w	8007582 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 800770a:	21a5      	movs	r1, #165	; 0xa5
 800770c:	4620      	mov	r0, r4
 800770e:	f002 fb65 	bl	8009ddc <set_return_line>
			return ret;
 8007712:	e68c      	b.n	800742e <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8007714:	2172      	movs	r1, #114	; 0x72
 8007716:	4620      	mov	r0, r4
 8007718:	f002 fb60 	bl	8009ddc <set_return_line>
				return ret;
 800771c:	e687      	b.n	800742e <rcc_init+0x36>
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800

08007724 <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 8007724:	2805      	cmp	r0, #5
 8007726:	d819      	bhi.n	800775c <rcc_get_bus_frequency+0x38>
 8007728:	e8df f000 	tbb	[pc, r0]
 800772c:	2f251a0e 	.word	0x2f251a0e
 8007730:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 8007732:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <rcc_get_bus_frequency+0xb8>)
 8007734:	492a      	ldr	r1, [pc, #168]	; (80077e0 <rcc_get_bus_frequency+0xbc>)
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <rcc_get_bus_frequency+0xc0>)
 800773a:	6808      	ldr	r0, [r1, #0]
 800773c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007740:	5cd3      	ldrb	r3, [r2, r3]
 8007742:	40d8      	lsrs	r0, r3
 8007744:	0040      	lsls	r0, r0, #1
 8007746:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007748:	4b27      	ldr	r3, [pc, #156]	; (80077e8 <rcc_get_bus_frequency+0xc4>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	7b1a      	ldrb	r2, [r3, #12]
 800774e:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8007750:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007752:	d02f      	beq.n	80077b4 <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8007754:	2a00      	cmp	r2, #0
 8007756:	d03f      	beq.n	80077d8 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8007758:	2a02      	cmp	r2, #2
 800775a:	d032      	beq.n	80077c2 <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 800775c:	2000      	movs	r0, #0
}
 800775e:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8007760:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <rcc_get_bus_frequency+0xc4>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	7d18      	ldrb	r0, [r3, #20]
 8007766:	2807      	cmp	r0, #7
 8007768:	d928      	bls.n	80077bc <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 800776a:	4a1d      	ldr	r2, [pc, #116]	; (80077e0 <rcc_get_bus_frequency+0xbc>)
 800776c:	1f83      	subs	r3, r0, #6
 800776e:	6810      	ldr	r0, [r2, #0]
 8007770:	fbb0 f0f3 	udiv	r0, r0, r3
 8007774:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007776:	4b19      	ldr	r3, [pc, #100]	; (80077dc <rcc_get_bus_frequency+0xb8>)
 8007778:	4919      	ldr	r1, [pc, #100]	; (80077e0 <rcc_get_bus_frequency+0xbc>)
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <rcc_get_bus_frequency+0xc0>)
 800777e:	6808      	ldr	r0, [r1, #0]
 8007780:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007784:	5cd3      	ldrb	r3, [r2, r3]
 8007786:	40d8      	lsrs	r0, r3
 8007788:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800778a:	4b14      	ldr	r3, [pc, #80]	; (80077dc <rcc_get_bus_frequency+0xb8>)
 800778c:	4914      	ldr	r1, [pc, #80]	; (80077e0 <rcc_get_bus_frequency+0xbc>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	4a14      	ldr	r2, [pc, #80]	; (80077e4 <rcc_get_bus_frequency+0xc0>)
 8007792:	6808      	ldr	r0, [r1, #0]
 8007794:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007798:	5cd3      	ldrb	r3, [r2, r3]
 800779a:	40d8      	lsrs	r0, r3
 800779c:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <rcc_get_bus_frequency+0xb8>)
 80077a0:	490f      	ldr	r1, [pc, #60]	; (80077e0 <rcc_get_bus_frequency+0xbc>)
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	4a0f      	ldr	r2, [pc, #60]	; (80077e4 <rcc_get_bus_frequency+0xc0>)
 80077a6:	6808      	ldr	r0, [r1, #0]
 80077a8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80077ac:	5cd3      	ldrb	r3, [r2, r3]
 80077ae:	40d8      	lsrs	r0, r3
 80077b0:	0040      	lsls	r0, r0, #1
 80077b2:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 80077b4:	2a01      	cmp	r2, #1
 80077b6:	d1cf      	bne.n	8007758 <rcc_get_bus_frequency+0x34>
 80077b8:	480c      	ldr	r0, [pc, #48]	; (80077ec <rcc_get_bus_frequency+0xc8>)
 80077ba:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 80077bc:	4b08      	ldr	r3, [pc, #32]	; (80077e0 <rcc_get_bus_frequency+0xbc>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	6999      	ldr	r1, [r3, #24]
 80077c6:	4809      	ldr	r0, [pc, #36]	; (80077ec <rcc_get_bus_frequency+0xc8>)
 80077c8:	6a1b      	ldr	r3, [r3, #32]
 80077ca:	fbb0 f0f1 	udiv	r0, r0, r1
 80077ce:	fb02 f000 	mul.w	r0, r2, r0
 80077d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80077d6:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 80077d8:	4805      	ldr	r0, [pc, #20]	; (80077f0 <rcc_get_bus_frequency+0xcc>)
 80077da:	4770      	bx	lr
 80077dc:	40023800 	.word	0x40023800
 80077e0:	20000000 	.word	0x20000000
 80077e4:	0800dccc 	.word	0x0800dccc
 80077e8:	2000b5d0 	.word	0x2000b5d0
 80077ec:	017d7840 	.word	0x017d7840
 80077f0:	00f42400 	.word	0x00f42400

080077f4 <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80077f4:	4907      	ldr	r1, [pc, #28]	; (8007814 <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 80077f6:	4a08      	ldr	r2, [pc, #32]	; (8007818 <rng_init+0x24>)
void rng_init(void){
 80077f8:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 80077fa:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80077fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007800:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 8007802:	6813      	ldr	r3, [r2, #0]
 8007804:	f043 0304 	orr.w	r3, r3, #4
 8007808:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 800780a:	f002 fbc3 	bl	8009f94 <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 800780e:	4b03      	ldr	r3, [pc, #12]	; (800781c <rng_init+0x28>)
 8007810:	6018      	str	r0, [r3, #0]
}
 8007812:	bd08      	pop	{r3, pc}
 8007814:	40023800 	.word	0x40023800
 8007818:	50060800 	.word	0x50060800
 800781c:	2000b5d4 	.word	0x2000b5d4

08007820 <rng_set_seed>:
	_seed = seed;
 8007820:	4b01      	ldr	r3, [pc, #4]	; (8007828 <rng_set_seed+0x8>)
 8007822:	6018      	str	r0, [r3, #0]
}
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	2000b5d4 	.word	0x2000b5d4

0800782c <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 800782c:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 800782e:	4b1b      	ldr	r3, [pc, #108]	; (800789c <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007830:	4c1b      	ldr	r4, [pc, #108]	; (80078a0 <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 8007832:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 8007834:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 8007836:	2602      	movs	r6, #2
 8007838:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 800783a:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 800783c:	f000 fe48 	bl	80084d0 <get_tick>
 8007840:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 8007842:	9505      	str	r5, [sp, #20]
 8007844:	e005      	b.n	8007852 <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 8007846:	f000 fe43 	bl	80084d0 <get_tick>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	1ac0      	subs	r0, r0, r3
 800784e:	2802      	cmp	r0, #2
 8007850:	d802      	bhi.n	8007858 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	07da      	lsls	r2, r3, #31
 8007856:	d5f6      	bpl.n	8007846 <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	9305      	str	r3, [sp, #20]
	return random_number;
 800785c:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 800785e:	9b01      	ldr	r3, [sp, #4]
 8007860:	4053      	eors	r3, r2
 8007862:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 8007864:	f000 fe34 	bl	80084d0 <get_tick>
 8007868:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 800786a:	9503      	str	r5, [sp, #12]
 800786c:	e005      	b.n	800787a <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 800786e:	f000 fe2f 	bl	80084d0 <get_tick>
 8007872:	9b02      	ldr	r3, [sp, #8]
 8007874:	1ac0      	subs	r0, r0, r3
 8007876:	2802      	cmp	r0, #2
 8007878:	d802      	bhi.n	8007880 <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 800787a:	6863      	ldr	r3, [r4, #4]
 800787c:	07db      	lsls	r3, r3, #31
 800787e:	d5f6      	bpl.n	800786e <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 8007880:	68a3      	ldr	r3, [r4, #8]
 8007882:	9303      	str	r3, [sp, #12]
	return random_number;
 8007884:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 8007886:	9b01      	ldr	r3, [sp, #4]
 8007888:	4053      	eors	r3, r2
 800788a:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 800788c:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 800788e:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 8007890:	d102      	bne.n	8007898 <rng_generate_random_number+0x6c>
	}
	return rand;
 8007892:	9801      	ldr	r0, [sp, #4]
}
 8007894:	b006      	add	sp, #24
 8007896:	bd70      	pop	{r4, r5, r6, pc}
 8007898:	2601      	movs	r6, #1
 800789a:	e7cf      	b.n	800783c <rng_generate_random_number+0x10>
 800789c:	2000b5d4 	.word	0x2000b5d4
 80078a0:	50060800 	.word	0x50060800

080078a4 <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	460c      	mov	r4, r1
 80078a8:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 80078aa:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80078ac:	68cb      	ldr	r3, [r1, #12]
 80078ae:	499e      	ldr	r1, [pc, #632]	; (8007b28 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 80078b0:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 80078b2:	2001      	movs	r0, #1
 80078b4:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 80078b6:	6b50      	ldr	r0, [r2, #52]	; 0x34
 80078b8:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80078ba:	428b      	cmp	r3, r1
	stm_ret_t ret;
 80078bc:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 80078c0:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 80078c2:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 80078c4:	f000 80cd 	beq.w	8007a62 <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80078c8:	4998      	ldr	r1, [pc, #608]	; (8007b2c <_ZN3spi4initEP12spi_config_t+0x288>)
 80078ca:	428b      	cmp	r3, r1
 80078cc:	d015      	beq.n	80078fa <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 80078ce:	4998      	ldr	r1, [pc, #608]	; (8007b30 <_ZN3spi4initEP12spi_config_t+0x28c>)
 80078d0:	428b      	cmp	r3, r1
 80078d2:	f000 810b 	beq.w	8007aec <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 80078d6:	4997      	ldr	r1, [pc, #604]	; (8007b34 <_ZN3spi4initEP12spi_config_t+0x290>)
 80078d8:	428b      	cmp	r3, r1
 80078da:	f000 8112 	beq.w	8007b02 <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 80078de:	4996      	ldr	r1, [pc, #600]	; (8007b38 <_ZN3spi4initEP12spi_config_t+0x294>)
 80078e0:	428b      	cmp	r3, r1
 80078e2:	f000 80d5 	beq.w	8007a90 <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 80078e6:	4995      	ldr	r1, [pc, #596]	; (8007b3c <_ZN3spi4initEP12spi_config_t+0x298>)
 80078e8:	428b      	cmp	r3, r1
 80078ea:	d10c      	bne.n	8007906 <_ZN3spi4initEP12spi_config_t+0x62>
 80078ec:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 80078f0:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80078f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078f6:	644b      	str	r3, [r1, #68]	; 0x44
 80078f8:	e005      	b.n	8007906 <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 80078fa:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 80078fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007904:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 8007906:	6910      	ldr	r0, [r2, #16]
 8007908:	f7ff fbba 	bl	8007080 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	2205      	movs	r2, #5
 8007910:	8a99      	ldrh	r1, [r3, #20]
 8007912:	6918      	ldr	r0, [r3, #16]
 8007914:	f7ff fc9c 	bl	8007250 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	2207      	movs	r2, #7
 800791c:	8a99      	ldrh	r1, [r3, #20]
 800791e:	6918      	ldr	r0, [r3, #16]
 8007920:	f7ff fcd4 	bl	80072cc <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 8007924:	68a2      	ldr	r2, [r4, #8]
 8007926:	7813      	ldrb	r3, [r2, #0]
 8007928:	f013 0f0d 	tst.w	r3, #13
 800792c:	f040 8087 	bne.w	8007a3e <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007930:	075b      	lsls	r3, r3, #29
 8007932:	d15f      	bne.n	80079f4 <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007934:	7b10      	ldrb	r0, [r2, #12]
 8007936:	2801      	cmp	r0, #1
 8007938:	d06f      	beq.n	8007a1a <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 800793a:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 800793c:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 800793e:	2100      	movs	r1, #0
 8007940:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007942:	7991      	ldrb	r1, [r2, #6]
 8007944:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8007948:	681e      	ldr	r6, [r3, #0]
 800794a:	4331      	orrs	r1, r6
 800794c:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 800794e:	7911      	ldrb	r1, [r2, #4]
 8007950:	78d6      	ldrb	r6, [r2, #3]
 8007952:	01c9      	lsls	r1, r1, #7
 8007954:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8007958:	681e      	ldr	r6, [r3, #0]
 800795a:	4331      	orrs	r1, r6
 800795c:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 800795e:	7811      	ldrb	r1, [r2, #0]
 8007960:	f011 0703 	ands.w	r7, r1, #3
 8007964:	d003      	beq.n	800796e <_ZN3spi4initEP12spi_config_t+0xca>
 8007966:	681e      	ldr	r6, [r3, #0]
 8007968:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 800796c:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 800796e:	f011 0f0a 	tst.w	r1, #10
 8007972:	d003      	beq.n	800797c <_ZN3spi4initEP12spi_config_t+0xd8>
 8007974:	6819      	ldr	r1, [r3, #0]
 8007976:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800797a:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 800797c:	bb78      	cbnz	r0, 80079de <_ZN3spi4initEP12spi_config_t+0x13a>
 800797e:	6819      	ldr	r1, [r3, #0]
 8007980:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8007984:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 8007986:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 8007988:	7851      	ldrb	r1, [r2, #1]
 800798a:	f011 0f05 	tst.w	r1, #5
 800798e:	d024      	beq.n	80079da <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007990:	4965      	ldr	r1, [pc, #404]	; (8007b28 <_ZN3spi4initEP12spi_config_t+0x284>)
 8007992:	428b      	cmp	r3, r1
 8007994:	f000 8083 	beq.w	8007a9e <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007998:	4964      	ldr	r1, [pc, #400]	; (8007b2c <_ZN3spi4initEP12spi_config_t+0x288>)
 800799a:	428b      	cmp	r3, r1
 800799c:	f000 80ad 	beq.w	8007afa <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 80079a0:	4963      	ldr	r1, [pc, #396]	; (8007b30 <_ZN3spi4initEP12spi_config_t+0x28c>)
 80079a2:	428b      	cmp	r3, r1
 80079a4:	d064      	beq.n	8007a70 <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 80079a6:	4963      	ldr	r1, [pc, #396]	; (8007b34 <_ZN3spi4initEP12spi_config_t+0x290>)
 80079a8:	428b      	cmp	r3, r1
 80079aa:	f000 80b1 	beq.w	8007b10 <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 80079ae:	4962      	ldr	r1, [pc, #392]	; (8007b38 <_ZN3spi4initEP12spi_config_t+0x294>)
 80079b0:	428b      	cmp	r3, r1
 80079b2:	f000 80b1 	beq.w	8007b18 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 80079b6:	4961      	ldr	r1, [pc, #388]	; (8007b3c <_ZN3spi4initEP12spi_config_t+0x298>)
 80079b8:	428b      	cmp	r3, r1
 80079ba:	f000 80b1 	beq.w	8007b20 <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 80079be:	6892      	ldr	r2, [r2, #8]
 80079c0:	2a03      	cmp	r2, #3
 80079c2:	d972      	bls.n	8007aaa <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 80079c4:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da57      	bge.n	8007a7c <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80079cc:	495c      	ldr	r1, [pc, #368]	; (8007b40 <_ZN3spi4initEP12spi_config_t+0x29c>)
 80079ce:	f003 030f 	and.w	r3, r3, #15
 80079d2:	0112      	lsls	r2, r2, #4
 80079d4:	4419      	add	r1, r3
 80079d6:	b2d2      	uxtb	r2, r2
 80079d8:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 80079da:	4628      	mov	r0, r5
 80079dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 80079de:	2100      	movs	r1, #0
 80079e0:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 80079e2:	2f00      	cmp	r7, #0
 80079e4:	d0d0      	beq.n	8007988 <_ZN3spi4initEP12spi_config_t+0xe4>
 80079e6:	2801      	cmp	r0, #1
 80079e8:	d1ce      	bne.n	8007988 <_ZN3spi4initEP12spi_config_t+0xe4>
 80079ea:	6859      	ldr	r1, [r3, #4]
 80079ec:	f041 0104 	orr.w	r1, r1, #4
 80079f0:	6059      	str	r1, [r3, #4]
 80079f2:	e7c9      	b.n	8007988 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 80079f4:	6a10      	ldr	r0, [r2, #32]
 80079f6:	f7ff fb43 	bl	8007080 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 80079fa:	68a3      	ldr	r3, [r4, #8]
 80079fc:	2205      	movs	r2, #5
 80079fe:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007a00:	6a18      	ldr	r0, [r3, #32]
 8007a02:	f7ff fc25 	bl	8007250 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 8007a06:	68a3      	ldr	r3, [r4, #8]
 8007a08:	2207      	movs	r2, #7
 8007a0a:	6a18      	ldr	r0, [r3, #32]
 8007a0c:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8007a0e:	f7ff fc5d 	bl	80072cc <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8007a12:	68a2      	ldr	r2, [r4, #8]
 8007a14:	7b10      	ldrb	r0, [r2, #12]
 8007a16:	2801      	cmp	r0, #1
 8007a18:	d18f      	bne.n	800793a <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 8007a1a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8007a1c:	f7ff fb30 	bl	8007080 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8007a20:	68a3      	ldr	r3, [r4, #8]
 8007a22:	2205      	movs	r2, #5
 8007a24:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007a26:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a28:	f7ff fc12 	bl	8007250 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 8007a2c:	68a3      	ldr	r3, [r4, #8]
 8007a2e:	2207      	movs	r2, #7
 8007a30:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a32:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8007a34:	f7ff fc4a 	bl	80072cc <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8007a38:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8007a3a:	7b10      	ldrb	r0, [r2, #12]
 8007a3c:	e77d      	b.n	800793a <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 8007a3e:	6990      	ldr	r0, [r2, #24]
 8007a40:	f7ff fb1e 	bl	8007080 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	2205      	movs	r2, #5
 8007a48:	8b99      	ldrh	r1, [r3, #28]
 8007a4a:	6998      	ldr	r0, [r3, #24]
 8007a4c:	f7ff fc00 	bl	8007250 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 8007a50:	68a3      	ldr	r3, [r4, #8]
 8007a52:	2207      	movs	r2, #7
 8007a54:	8b99      	ldrh	r1, [r3, #28]
 8007a56:	6998      	ldr	r0, [r3, #24]
 8007a58:	f7ff fc38 	bl	80072cc <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8007a5c:	68a2      	ldr	r2, [r4, #8]
 8007a5e:	7813      	ldrb	r3, [r2, #0]
 8007a60:	e766      	b.n	8007930 <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8007a62:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8007a66:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007a68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a6c:	644b      	str	r3, [r1, #68]	; 0x44
 8007a6e:	e74a      	b.n	8007906 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8007a70:	2333      	movs	r3, #51	; 0x33
 8007a72:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a76:	6892      	ldr	r2, [r2, #8]
 8007a78:	2a03      	cmp	r2, #3
 8007a7a:	d916      	bls.n	8007aaa <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007a7c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8007a80:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8007a84:	0112      	lsls	r2, r2, #4
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8007a90:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8007a94:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a9a:	644b      	str	r3, [r1, #68]	; 0x44
 8007a9c:	e733      	b.n	8007906 <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007a9e:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007aa0:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007aa2:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8007aa4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8007aa8:	d8e8      	bhi.n	8007a7c <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 8007aaa:	4628      	mov	r0, r5
 8007aac:	22b0      	movs	r2, #176	; 0xb0
 8007aae:	2100      	movs	r1, #0
 8007ab0:	f002 f990 	bl	8009dd4 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8007ab4:	4b23      	ldr	r3, [pc, #140]	; (8007b44 <_ZN3spi4initEP12spi_config_t+0x2a0>)
 8007ab6:	4a24      	ldr	r2, [pc, #144]	; (8007b48 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 8007ab8:	4924      	ldr	r1, [pc, #144]	; (8007b4c <_ZN3spi4initEP12spi_config_t+0x2a8>)
 8007aba:	4825      	ldr	r0, [pc, #148]	; (8007b50 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007abc:	f002 f818 	bl	8009af0 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8007ac0:	4924      	ldr	r1, [pc, #144]	; (8007b54 <_ZN3spi4initEP12spi_config_t+0x2b0>)
 8007ac2:	4823      	ldr	r0, [pc, #140]	; (8007b50 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8007ac4:	2205      	movs	r2, #5
 8007ac6:	f001 ff97 	bl	80099f8 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8007aca:	f241 3088 	movw	r0, #5000	; 0x1388
 8007ace:	f000 fccf 	bl	8008470 <systick_delay_ms>
 8007ad2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007ad6:	4920      	ldr	r1, [pc, #128]	; (8007b58 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 8007ad8:	4b20      	ldr	r3, [pc, #128]	; (8007b5c <_ZN3spi4initEP12spi_config_t+0x2b8>)
 8007ada:	68ca      	ldr	r2, [r1, #12]
 8007adc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007ae0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007ae2:	60cb      	str	r3, [r1, #12]
 8007ae4:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007ae8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007aea:	e7fd      	b.n	8007ae8 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8007aec:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8007af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007af6:	640b      	str	r3, [r1, #64]	; 0x40
 8007af8:	e705      	b.n	8007906 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8007afa:	2324      	movs	r3, #36	; 0x24
 8007afc:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b00:	e7b9      	b.n	8007a76 <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8007b02:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 8007b06:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8007b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007b0c:	644b      	str	r3, [r1, #68]	; 0x44
 8007b0e:	e6fa      	b.n	8007906 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8007b10:	2354      	movs	r3, #84	; 0x54
 8007b12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b16:	e7ae      	b.n	8007a76 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8007b18:	2355      	movs	r3, #85	; 0x55
 8007b1a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b1e:	e7aa      	b.n	8007a76 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8007b20:	2356      	movs	r3, #86	; 0x56
 8007b22:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8007b26:	e7a6      	b.n	8007a76 <_ZN3spi4initEP12spi_config_t+0x1d2>
 8007b28:	40013000 	.word	0x40013000
 8007b2c:	40003800 	.word	0x40003800
 8007b30:	40003c00 	.word	0x40003c00
 8007b34:	40013400 	.word	0x40013400
 8007b38:	40015000 	.word	0x40015000
 8007b3c:	40015400 	.word	0x40015400
 8007b40:	e000ecfc 	.word	0xe000ecfc
 8007b44:	0800e784 	.word	0x0800e784
 8007b48:	0800e78c 	.word	0x0800e78c
 8007b4c:	0800e71c 	.word	0x0800e71c
 8007b50:	0800e7b4 	.word	0x0800e7b4
 8007b54:	0800e768 	.word	0x0800e768
 8007b58:	e000ed00 	.word	0xe000ed00
 8007b5c:	05fa0004 	.word	0x05fa0004

08007b60 <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b64:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007b66:	2101      	movs	r1, #1
 8007b68:	7001      	strb	r1, [r0, #0]
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 8007b6e:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b70:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 8007b72:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b74:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007b76:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007b78:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b7a:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007b7c:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007b7e:	d463      	bmi.n	8007c48 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007b80:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007b84:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007b86:	d007      	beq.n	8007b98 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007b88:	680a      	ldr	r2, [r1, #0]
 8007b8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b8e:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 8007b90:	680a      	ldr	r2, [r1, #0]
 8007b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b96:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007b98:	680a      	ldr	r2, [r1, #0]
 8007b9a:	0652      	lsls	r2, r2, #25
 8007b9c:	d54f      	bpl.n	8007c3e <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 8007b9e:	ae02      	add	r6, sp, #8
 8007ba0:	b36b      	cbz	r3, 8007bfe <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007ba2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007ba6:	e006      	b.n	8007bb6 <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007ba8:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 8007bac:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007bae:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007bb0:	61a0      	str	r0, [r4, #24]
		txcount++;
 8007bb2:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007bb4:	d923      	bls.n	8007bfe <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007bb6:	3108      	adds	r1, #8
 8007bb8:	4630      	mov	r0, r6
 8007bba:	2301      	movs	r3, #1
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	f8cd 8000 	str.w	r8, [sp]
 8007bc2:	f002 f8cb 	bl	8009d5c <wait_flag_in_register_timeout>
 8007bc6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007bca:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f002 f906 	bl	8009de0 <is_oke>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	d047      	beq.n	8007c68 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007bd8:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007bda:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007bdc:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 8007bde:	68e1      	ldr	r1, [r4, #12]
 8007be0:	681f      	ldr	r7, [r3, #0]
 8007be2:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007be4:	1c58      	adds	r0, r3, #1
 8007be6:	2a00      	cmp	r2, #0
 8007be8:	d0de      	beq.n	8007ba8 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 8007bea:	2a01      	cmp	r2, #1
 8007bec:	bf04      	itt	eq
 8007bee:	3302      	addeq	r3, #2
 8007bf0:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 8007bf2:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 8007bf6:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007bf8:	429a      	cmp	r2, r3
		txcount++;
 8007bfa:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007bfc:	d8db      	bhi.n	8007bb6 <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007bfe:	2364      	movs	r3, #100	; 0x64
 8007c00:	3108      	adds	r1, #8
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	4630      	mov	r0, r6
 8007c06:	2300      	movs	r3, #0
 8007c08:	2280      	movs	r2, #128	; 0x80
 8007c0a:	f002 f8a7 	bl	8009d5c <wait_flag_in_register_timeout>
 8007c0e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007c12:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007c16:	4628      	mov	r0, r5
 8007c18:	f002 f8e2 	bl	8009de0 <is_oke>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d032      	beq.n	8007c86 <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007c20:	68a3      	ldr	r3, [r4, #8]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f013 0f0a 	tst.w	r3, #10
 8007c28:	d105      	bne.n	8007c36 <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 8007c2a:	68e3      	ldr	r3, [r4, #12]
 8007c2c:	68da      	ldr	r2, [r3, #12]
 8007c2e:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007c34:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 8007c36:	4628      	mov	r0, r5
 8007c38:	b006      	add	sp, #24
 8007c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007c3e:	680a      	ldr	r2, [r1, #0]
 8007c40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c44:	600a      	str	r2, [r1, #0]
 8007c46:	e7aa      	b.n	8007b9e <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 8007c48:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <_ZN3spi8transmitEmm+0x144>)
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <_ZN3spi8transmitEmm+0x148>)
 8007c4c:	4917      	ldr	r1, [pc, #92]	; (8007cac <_ZN3spi8transmitEmm+0x14c>)
 8007c4e:	4818      	ldr	r0, [pc, #96]	; (8007cb0 <_ZN3spi8transmitEmm+0x150>)
 8007c50:	f001 ff4e 	bl	8009af0 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007c54:	4628      	mov	r0, r5
 8007c56:	f44f 7289 	mov.w	r2, #274	; 0x112
 8007c5a:	2103      	movs	r1, #3
 8007c5c:	f002 f8ba 	bl	8009dd4 <set_return>
}
 8007c60:	4628      	mov	r0, r5
 8007c62:	b006      	add	sp, #24
 8007c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007c68:	4b0e      	ldr	r3, [pc, #56]	; (8007ca4 <_ZN3spi8transmitEmm+0x144>)
 8007c6a:	4a0f      	ldr	r2, [pc, #60]	; (8007ca8 <_ZN3spi8transmitEmm+0x148>)
 8007c6c:	4911      	ldr	r1, [pc, #68]	; (8007cb4 <_ZN3spi8transmitEmm+0x154>)
 8007c6e:	4810      	ldr	r0, [pc, #64]	; (8007cb0 <_ZN3spi8transmitEmm+0x150>)
 8007c70:	f001 ff3e 	bl	8009af0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007c74:	4628      	mov	r0, r5
 8007c76:	f240 1123 	movw	r1, #291	; 0x123
 8007c7a:	f002 f8af 	bl	8009ddc <set_return_line>
}
 8007c7e:	4628      	mov	r0, r5
 8007c80:	b006      	add	sp, #24
 8007c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <_ZN3spi8transmitEmm+0x144>)
 8007c88:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <_ZN3spi8transmitEmm+0x148>)
 8007c8a:	490a      	ldr	r1, [pc, #40]	; (8007cb4 <_ZN3spi8transmitEmm+0x154>)
 8007c8c:	4808      	ldr	r0, [pc, #32]	; (8007cb0 <_ZN3spi8transmitEmm+0x150>)
 8007c8e:	f001 ff2f 	bl	8009af0 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007c92:	4628      	mov	r0, r5
 8007c94:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007c98:	f002 f8a0 	bl	8009ddc <set_return_line>
}
 8007c9c:	4628      	mov	r0, r5
 8007c9e:	b006      	add	sp, #24
 8007ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca4:	0800e7b8 	.word	0x0800e7b8
 8007ca8:	0800e78c 	.word	0x0800e78c
 8007cac:	0800e7c4 	.word	0x0800e7c4
 8007cb0:	0800e7b4 	.word	0x0800e7b4
 8007cb4:	0800e808 	.word	0x0800e808

08007cb8 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 8007cbc:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007cbe:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007cc0:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007cc2:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007cc4:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007cc6:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007cc8:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007cca:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 8007ccc:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 8007cce:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 8007cd0:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007cd2:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 8007cd6:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 8007cda:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 8007cdc:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 8007cde:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007ce0:	d158      	bne.n	8007d94 <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	68c9      	ldr	r1, [r1, #12]
 8007ce6:	680b      	ldr	r3, [r1, #0]
 8007ce8:	065b      	lsls	r3, r3, #25
 8007cea:	d54e      	bpl.n	8007d8a <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 8007cec:	ae02      	add	r6, sp, #8
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d060      	beq.n	8007db4 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007cf2:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007cf6:	e00e      	b.n	8007d16 <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 8007cf8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 8007cfc:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 8007cfe:	3301      	adds	r3, #1
 8007d00:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 8007d04:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 8007d08:	6a23      	ldr	r3, [r4, #32]
 8007d0a:	3301      	adds	r3, #1
		rxcount++;
 8007d0c:	3201      	adds	r2, #1
	while(txcount < txlen){
 8007d0e:	4298      	cmp	r0, r3
		txcount++;
 8007d10:	6223      	str	r3, [r4, #32]
		rxcount++;
 8007d12:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 8007d14:	d94e      	bls.n	8007db4 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007d16:	2301      	movs	r3, #1
 8007d18:	2202      	movs	r2, #2
 8007d1a:	3108      	adds	r1, #8
 8007d1c:	4630      	mov	r0, r6
 8007d1e:	f8cd 8000 	str.w	r8, [sp]
 8007d22:	f002 f81b 	bl	8009d5c <wait_flag_in_register_timeout>
 8007d26:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d2a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007d2e:	4628      	mov	r0, r5
 8007d30:	f002 f856 	bl	8009de0 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d34:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 8007d36:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 8007d3c:	2900      	cmp	r1, #0
 8007d3e:	d055      	beq.n	8007dec <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 8007d40:	69a7      	ldr	r7, [r4, #24]
 8007d42:	68e1      	ldr	r1, [r4, #12]
 8007d44:	f8d7 c000 	ldr.w	ip, [r7]
 8007d48:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 8007d4c:	3108      	adds	r1, #8
 8007d4e:	f8cd 8000 	str.w	r8, [sp]
 8007d52:	f002 f803 	bl	8009d5c <wait_flag_in_register_timeout>
 8007d56:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007d5a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 8007d5e:	4628      	mov	r0, r5
 8007d60:	f002 f83e 	bl	8009de0 <is_oke>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d050      	beq.n	8007e0a <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007d68:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 8007d6c:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007d6e:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 8007d70:	68c8      	ldr	r0, [r1, #12]
 8007d72:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0bf      	beq.n	8007cf8 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d1c3      	bne.n	8007d04 <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 8007d7c:	69a3      	ldr	r3, [r4, #24]
 8007d7e:	3302      	adds	r3, #2
 8007d80:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 8007d82:	69e3      	ldr	r3, [r4, #28]
 8007d84:	3302      	adds	r3, #2
 8007d86:	61e3      	str	r3, [r4, #28]
 8007d88:	e7bc      	b.n	8007d04 <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007d8a:	680b      	ldr	r3, [r1, #0]
 8007d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d90:	600b      	str	r3, [r1, #0]
 8007d92:	e7ab      	b.n	8007cec <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007d94:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007d96:	492b      	ldr	r1, [pc, #172]	; (8007e44 <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007d98:	482b      	ldr	r0, [pc, #172]	; (8007e48 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007d9a:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007d9c:	f001 fea8 	bl	8009af0 <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007da0:	f240 1293 	movw	r2, #403	; 0x193
 8007da4:	2103      	movs	r1, #3
 8007da6:	4628      	mov	r0, r5
 8007da8:	f002 f814 	bl	8009dd4 <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 8007dac:	4628      	mov	r0, r5
 8007dae:	b006      	add	sp, #24
 8007db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007db4:	2364      	movs	r3, #100	; 0x64
 8007db6:	3108      	adds	r1, #8
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4630      	mov	r0, r6
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2280      	movs	r2, #128	; 0x80
 8007dc0:	f001 ffcc 	bl	8009d5c <wait_flag_in_register_timeout>
 8007dc4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007dc8:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f002 f807 	bl	8009de0 <is_oke>
 8007dd2:	b348      	cbz	r0, 8007e28 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007dd4:	68a3      	ldr	r3, [r4, #8]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	f013 0f0a 	tst.w	r3, #10
 8007ddc:	d1e6      	bne.n	8007dac <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 8007dde:	68e3      	ldr	r3, [r4, #12]
 8007de0:	68da      	ldr	r2, [r3, #12]
 8007de2:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007de8:	9b05      	ldr	r3, [sp, #20]
 8007dea:	e7df      	b.n	8007dac <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007dec:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007dee:	4a14      	ldr	r2, [pc, #80]	; (8007e40 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007df0:	4917      	ldr	r1, [pc, #92]	; (8007e50 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007df2:	4815      	ldr	r0, [pc, #84]	; (8007e48 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007df4:	f001 fe7c 	bl	8009af0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007df8:	4628      	mov	r0, r5
 8007dfa:	f240 119f 	movw	r1, #415	; 0x19f
 8007dfe:	f001 ffed 	bl	8009ddc <set_return_line>
}
 8007e02:	4628      	mov	r0, r5
 8007e04:	b006      	add	sp, #24
 8007e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e0c:	4a0c      	ldr	r2, [pc, #48]	; (8007e40 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e0e:	4910      	ldr	r1, [pc, #64]	; (8007e50 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007e10:	480d      	ldr	r0, [pc, #52]	; (8007e48 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e12:	f001 fe6d 	bl	8009af0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007e16:	4628      	mov	r0, r5
 8007e18:	f240 11a9 	movw	r1, #425	; 0x1a9
 8007e1c:	f001 ffde 	bl	8009ddc <set_return_line>
}
 8007e20:	4628      	mov	r0, r5
 8007e22:	b006      	add	sp, #24
 8007e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007e28:	4b08      	ldr	r3, [pc, #32]	; (8007e4c <_ZN3spi16transmit_receiveEmmm+0x194>)
 8007e2a:	4a05      	ldr	r2, [pc, #20]	; (8007e40 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007e2c:	4908      	ldr	r1, [pc, #32]	; (8007e50 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007e2e:	4806      	ldr	r0, [pc, #24]	; (8007e48 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007e30:	f001 fe5e 	bl	8009af0 <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007e34:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f001 ffcf 	bl	8009ddc <set_return_line>
		return ret;
 8007e3e:	e7b5      	b.n	8007dac <_ZN3spi16transmit_receiveEmmm+0xf4>
 8007e40:	0800e78c 	.word	0x0800e78c
 8007e44:	0800e83c 	.word	0x0800e83c
 8007e48:	0800e7b4 	.word	0x0800e7b4
 8007e4c:	0800e828 	.word	0x0800e828
 8007e50:	0800e808 	.word	0x0800e808

08007e54 <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007e58:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e5a:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007e5c:	68c9      	ldr	r1, [r1, #12]
 8007e5e:	6813      	ldr	r3, [r2, #0]
 8007e60:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e62:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007e64:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007e66:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007e68:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 8007e6a:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007e6c:	b088      	sub	sp, #32
	spi -> txcount++;
 8007e6e:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007e70:	b960      	cbnz	r0, 8007e8c <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 8007e72:	3201      	adds	r2, #1
 8007e74:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007e76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d00e      	beq.n	8007e9a <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	2300      	movs	r3, #0
 8007e80:	702a      	strb	r2, [r5, #0]
 8007e82:	606b      	str	r3, [r5, #4]
}
 8007e84:	4628      	mov	r0, r5
 8007e86:	b008      	add	sp, #32
 8007e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007e8c:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 8007e8e:	bf04      	itt	eq
 8007e90:	3202      	addeq	r2, #2
 8007e92:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007e94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d1f0      	bne.n	8007e7c <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007e9a:	ae06      	add	r6, sp, #24
 8007e9c:	2764      	movs	r7, #100	; 0x64
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	3108      	adds	r1, #8
 8007ea2:	9700      	str	r7, [sp, #0]
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	2202      	movs	r2, #2
 8007ea8:	f001 ff58 	bl	8009d5c <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007eac:	4630      	mov	r0, r6
 8007eae:	f001 ff97 	bl	8009de0 <is_oke>
 8007eb2:	b1f8      	cbz	r0, 8007ef4 <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007eb4:	68e1      	ldr	r1, [r4, #12]
 8007eb6:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007eb8:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007ebc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ec0:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	3108      	adds	r1, #8
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	2280      	movs	r2, #128	; 0x80
 8007eca:	9700      	str	r7, [sp, #0]
 8007ecc:	f001 ff46 	bl	8009d5c <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007ed0:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007ed2:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007eda:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007ede:	d11c      	bne.n	8007f1a <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007ee0:	f013 0f0a 	tst.w	r3, #10
 8007ee4:	d1ca      	bne.n	8007e7c <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	9305      	str	r3, [sp, #20]
			(void)tmp;
 8007ef0:	9b05      	ldr	r3, [sp, #20]
 8007ef2:	e7c3      	b.n	8007e7c <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 8007ef4:	4630      	mov	r0, r6
 8007ef6:	f240 3129 	movw	r1, #809	; 0x329
 8007efa:	f001 ff6f 	bl	8009ddc <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007efe:	4919      	ldr	r1, [pc, #100]	; (8007f64 <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007f00:	4819      	ldr	r0, [pc, #100]	; (8007f68 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007f02:	4b1a      	ldr	r3, [pc, #104]	; (8007f6c <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007f04:	4a1a      	ldr	r2, [pc, #104]	; (8007f70 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007f06:	f001 fdf3 	bl	8009af0 <LOG_ERROR>
			return ret;
 8007f0a:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f0e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8007f12:	4628      	mov	r0, r5
 8007f14:	b008      	add	sp, #32
 8007f16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f001 ff60 	bl	8009de0 <is_oke>
 8007f20:	b110      	cbz	r0, 8007f28 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007f22:	68a3      	ldr	r3, [r4, #8]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	e7db      	b.n	8007ee0 <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007f28:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <_Z10SPI_Tx_ISRP3spi+0x118>)
 8007f2a:	4a11      	ldr	r2, [pc, #68]	; (8007f70 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 8007f2c:	490d      	ldr	r1, [pc, #52]	; (8007f64 <_Z10SPI_Tx_ISRP3spi+0x110>)
 8007f2e:	480e      	ldr	r0, [pc, #56]	; (8007f68 <_Z10SPI_Tx_ISRP3spi+0x114>)
 8007f30:	f001 fdde 	bl	8009af0 <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 8007f34:	f44f 714e 	mov.w	r1, #824	; 0x338
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f001 ff4f 	bl	8009ddc <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007f3e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007f42:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007f44:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007f46:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 8007f4a:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007f4c:	078b      	lsls	r3, r1, #30
 8007f4e:	d503      	bpl.n	8007f58 <_Z10SPI_Tx_ISRP3spi+0x104>
 8007f50:	6813      	ldr	r3, [r2, #0]
 8007f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f56:	6013      	str	r3, [r2, #0]
				return ret;
 8007f58:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007f5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f60:	e790      	b.n	8007e84 <_Z10SPI_Tx_ISRP3spi+0x30>
 8007f62:	bf00      	nop
 8007f64:	0800e808 	.word	0x0800e808
 8007f68:	0800e7b4 	.word	0x0800e7b4
 8007f6c:	0800e894 	.word	0x0800e894
 8007f70:	0800e78c 	.word	0x0800e78c

08007f74 <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007f74:	b570      	push	{r4, r5, r6, lr}
 8007f76:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007f78:	68c9      	ldr	r1, [r1, #12]
 8007f7a:	69e3      	ldr	r3, [r4, #28]
 8007f7c:	68ca      	ldr	r2, [r1, #12]
 8007f7e:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f80:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 8007f82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f84:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8007f86:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8007f88:	b086      	sub	sp, #24
 8007f8a:	4605      	mov	r5, r0
	spi -> rxcount++;
 8007f8c:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007f8e:	b962      	cbnz	r2, 8007faa <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 8007f90:	69e2      	ldr	r2, [r4, #28]
 8007f92:	3201      	adds	r2, #1
 8007f94:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8007f96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d00e      	beq.n	8007fba <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	702a      	strb	r2, [r5, #0]
 8007fa2:	606b      	str	r3, [r5, #4]
}
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	b006      	add	sp, #24
 8007fa8:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007faa:	2a01      	cmp	r2, #1
 8007fac:	d1f3      	bne.n	8007f96 <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 8007fae:	69e2      	ldr	r2, [r4, #28]
 8007fb0:	3202      	adds	r2, #2
 8007fb2:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 8007fb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d1f0      	bne.n	8007f9c <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8007fba:	684b      	ldr	r3, [r1, #4]
 8007fbc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007fc0:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 8007fc2:	ae04      	add	r6, sp, #16
 8007fc4:	2364      	movs	r3, #100	; 0x64
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	3108      	adds	r1, #8
 8007fcc:	2300      	movs	r3, #0
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f001 fec4 	bl	8009d5c <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f001 ff03 	bl	8009de0 <is_oke>
 8007fda:	b158      	cbz	r0, 8007ff4 <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007fdc:	68a3      	ldr	r3, [r4, #8]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	f013 0f0a 	tst.w	r3, #10
 8007fe4:	d1da      	bne.n	8007f9c <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007fe6:	68e3      	ldr	r3, [r4, #12]
 8007fe8:	68da      	ldr	r2, [r3, #12]
 8007fea:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	9303      	str	r3, [sp, #12]
			(void)tmp;
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	e7d3      	b.n	8007f9c <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007ff4:	4b07      	ldr	r3, [pc, #28]	; (8008014 <_Z10SPI_Rx_ISRP3spi+0xa0>)
 8007ff6:	4a08      	ldr	r2, [pc, #32]	; (8008018 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 8007ff8:	4908      	ldr	r1, [pc, #32]	; (800801c <_Z10SPI_Rx_ISRP3spi+0xa8>)
 8007ffa:	4809      	ldr	r0, [pc, #36]	; (8008020 <_Z10SPI_Rx_ISRP3spi+0xac>)
 8007ffc:	f001 fd78 	bl	8009af0 <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8008000:	f240 315d 	movw	r1, #861	; 0x35d
 8008004:	4630      	mov	r0, r6
 8008006:	f001 fee9 	bl	8009ddc <set_return_line>
			return ret;
 800800a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800800e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008012:	e7c7      	b.n	8007fa4 <_Z10SPI_Rx_ISRP3spi+0x30>
 8008014:	0800e8a0 	.word	0x0800e8a0
 8008018:	0800e78c 	.word	0x0800e78c
 800801c:	0800e808 	.word	0x0800e808
 8008020:	0800e7b4 	.word	0x0800e7b4

08008024 <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 8008024:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008026:	4c22      	ldr	r4, [pc, #136]	; (80080b0 <SPI1_IRQHandler+0x8c>)
 8008028:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 800802a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008030:	689a      	ldr	r2, [r3, #8]
 8008032:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008034:	9a00      	ldr	r2, [sp, #0]
 8008036:	0611      	lsls	r1, r2, #24
 8008038:	d502      	bpl.n	8008040 <SPI1_IRQHandler+0x1c>
 800803a:	9a01      	ldr	r2, [sp, #4]
 800803c:	0792      	lsls	r2, r2, #30
 800803e:	d41e      	bmi.n	800807e <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008040:	9a00      	ldr	r2, [sp, #0]
 8008042:	0650      	lsls	r0, r2, #25
 8008044:	d502      	bpl.n	800804c <SPI1_IRQHandler+0x28>
 8008046:	9a01      	ldr	r2, [sp, #4]
 8008048:	07d1      	lsls	r1, r2, #31
 800804a:	d424      	bmi.n	8008096 <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800804c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800804e:	0652      	lsls	r2, r2, #25
 8008050:	d40a      	bmi.n	8008068 <SPI1_IRQHandler+0x44>
 8008052:	9801      	ldr	r0, [sp, #4]
 8008054:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008058:	d106      	bne.n	8008068 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800805a:	6963      	ldr	r3, [r4, #20]
 800805c:	b16b      	cbz	r3, 800807a <SPI1_IRQHandler+0x56>
 800805e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 8008060:	b004      	add	sp, #16
 8008062:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008066:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008070:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008072:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008074:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f1      	bne.n	800805e <SPI1_IRQHandler+0x3a>
}
 800807a:	b004      	add	sp, #16
 800807c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800807e:	4621      	mov	r1, r4
 8008080:	a802      	add	r0, sp, #8
 8008082:	f7ff fee7 	bl	8007e54 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008086:	a802      	add	r0, sp, #8
 8008088:	f001 feaa 	bl	8009de0 <is_oke>
			event = SPI_EVENT_ERROR;
 800808c:	2800      	cmp	r0, #0
 800808e:	bf14      	ite	ne
 8008090:	2001      	movne	r0, #1
 8008092:	2003      	moveq	r0, #3
 8008094:	e7e1      	b.n	800805a <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008096:	4906      	ldr	r1, [pc, #24]	; (80080b0 <SPI1_IRQHandler+0x8c>)
 8008098:	a802      	add	r0, sp, #8
 800809a:	f7ff ff6b 	bl	8007f74 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800809e:	a802      	add	r0, sp, #8
 80080a0:	f001 fe9e 	bl	8009de0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80080a4:	2800      	cmp	r0, #0
 80080a6:	bf0c      	ite	eq
 80080a8:	2003      	moveq	r0, #3
 80080aa:	2002      	movne	r0, #2
 80080ac:	e7d5      	b.n	800805a <SPI1_IRQHandler+0x36>
 80080ae:	bf00      	nop
 80080b0:	2000b5d8 	.word	0x2000b5d8

080080b4 <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 80080b4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80080b6:	4c22      	ldr	r4, [pc, #136]	; (8008140 <SPI2_IRQHandler+0x8c>)
 80080b8:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 80080ba:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80080c0:	689a      	ldr	r2, [r3, #8]
 80080c2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80080c4:	9a00      	ldr	r2, [sp, #0]
 80080c6:	0611      	lsls	r1, r2, #24
 80080c8:	d502      	bpl.n	80080d0 <SPI2_IRQHandler+0x1c>
 80080ca:	9a01      	ldr	r2, [sp, #4]
 80080cc:	0792      	lsls	r2, r2, #30
 80080ce:	d41e      	bmi.n	800810e <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80080d0:	9a00      	ldr	r2, [sp, #0]
 80080d2:	0650      	lsls	r0, r2, #25
 80080d4:	d502      	bpl.n	80080dc <SPI2_IRQHandler+0x28>
 80080d6:	9a01      	ldr	r2, [sp, #4]
 80080d8:	07d1      	lsls	r1, r2, #31
 80080da:	d424      	bmi.n	8008126 <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80080dc:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80080de:	0652      	lsls	r2, r2, #25
 80080e0:	d40a      	bmi.n	80080f8 <SPI2_IRQHandler+0x44>
 80080e2:	9801      	ldr	r0, [sp, #4]
 80080e4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80080e8:	d106      	bne.n	80080f8 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080ea:	6963      	ldr	r3, [r4, #20]
 80080ec:	b16b      	cbz	r3, 800810a <SPI2_IRQHandler+0x56>
 80080ee:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 80080f0:	b004      	add	sp, #16
 80080f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80080f6:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008100:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008102:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008104:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1f1      	bne.n	80080ee <SPI2_IRQHandler+0x3a>
}
 800810a:	b004      	add	sp, #16
 800810c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800810e:	4621      	mov	r1, r4
 8008110:	a802      	add	r0, sp, #8
 8008112:	f7ff fe9f 	bl	8007e54 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008116:	a802      	add	r0, sp, #8
 8008118:	f001 fe62 	bl	8009de0 <is_oke>
			event = SPI_EVENT_ERROR;
 800811c:	2800      	cmp	r0, #0
 800811e:	bf14      	ite	ne
 8008120:	2001      	movne	r0, #1
 8008122:	2003      	moveq	r0, #3
 8008124:	e7e1      	b.n	80080ea <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008126:	4906      	ldr	r1, [pc, #24]	; (8008140 <SPI2_IRQHandler+0x8c>)
 8008128:	a802      	add	r0, sp, #8
 800812a:	f7ff ff23 	bl	8007f74 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800812e:	a802      	add	r0, sp, #8
 8008130:	f001 fe56 	bl	8009de0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008134:	2800      	cmp	r0, #0
 8008136:	bf0c      	ite	eq
 8008138:	2003      	moveq	r0, #3
 800813a:	2002      	movne	r0, #2
 800813c:	e7d5      	b.n	80080ea <SPI2_IRQHandler+0x36>
 800813e:	bf00      	nop
 8008140:	2000b60c 	.word	0x2000b60c

08008144 <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 8008144:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008146:	4c22      	ldr	r4, [pc, #136]	; (80081d0 <SPI3_IRQHandler+0x8c>)
 8008148:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 800814a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800814c:	685a      	ldr	r2, [r3, #4]
 800814e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008154:	9a00      	ldr	r2, [sp, #0]
 8008156:	0611      	lsls	r1, r2, #24
 8008158:	d502      	bpl.n	8008160 <SPI3_IRQHandler+0x1c>
 800815a:	9a01      	ldr	r2, [sp, #4]
 800815c:	0792      	lsls	r2, r2, #30
 800815e:	d41e      	bmi.n	800819e <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008160:	9a00      	ldr	r2, [sp, #0]
 8008162:	0650      	lsls	r0, r2, #25
 8008164:	d502      	bpl.n	800816c <SPI3_IRQHandler+0x28>
 8008166:	9a01      	ldr	r2, [sp, #4]
 8008168:	07d1      	lsls	r1, r2, #31
 800816a:	d424      	bmi.n	80081b6 <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800816c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800816e:	0652      	lsls	r2, r2, #25
 8008170:	d40a      	bmi.n	8008188 <SPI3_IRQHandler+0x44>
 8008172:	9801      	ldr	r0, [sp, #4]
 8008174:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008178:	d106      	bne.n	8008188 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800817a:	6963      	ldr	r3, [r4, #20]
 800817c:	b16b      	cbz	r3, 800819a <SPI3_IRQHandler+0x56>
 800817e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 8008180:	b004      	add	sp, #16
 8008182:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008186:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008190:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008192:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008194:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1f1      	bne.n	800817e <SPI3_IRQHandler+0x3a>
}
 800819a:	b004      	add	sp, #16
 800819c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800819e:	4621      	mov	r1, r4
 80081a0:	a802      	add	r0, sp, #8
 80081a2:	f7ff fe57 	bl	8007e54 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80081a6:	a802      	add	r0, sp, #8
 80081a8:	f001 fe1a 	bl	8009de0 <is_oke>
			event = SPI_EVENT_ERROR;
 80081ac:	2800      	cmp	r0, #0
 80081ae:	bf14      	ite	ne
 80081b0:	2001      	movne	r0, #1
 80081b2:	2003      	moveq	r0, #3
 80081b4:	e7e1      	b.n	800817a <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80081b6:	4906      	ldr	r1, [pc, #24]	; (80081d0 <SPI3_IRQHandler+0x8c>)
 80081b8:	a802      	add	r0, sp, #8
 80081ba:	f7ff fedb 	bl	8007f74 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80081be:	a802      	add	r0, sp, #8
 80081c0:	f001 fe0e 	bl	8009de0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80081c4:	2800      	cmp	r0, #0
 80081c6:	bf0c      	ite	eq
 80081c8:	2003      	moveq	r0, #3
 80081ca:	2002      	movne	r0, #2
 80081cc:	e7d5      	b.n	800817a <SPI3_IRQHandler+0x36>
 80081ce:	bf00      	nop
 80081d0:	2000b640 	.word	0x2000b640

080081d4 <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 80081d4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081d6:	4c22      	ldr	r4, [pc, #136]	; (8008260 <SPI4_IRQHandler+0x8c>)
 80081d8:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 80081da:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80081dc:	685a      	ldr	r2, [r3, #4]
 80081de:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80081e4:	9a00      	ldr	r2, [sp, #0]
 80081e6:	0611      	lsls	r1, r2, #24
 80081e8:	d502      	bpl.n	80081f0 <SPI4_IRQHandler+0x1c>
 80081ea:	9a01      	ldr	r2, [sp, #4]
 80081ec:	0792      	lsls	r2, r2, #30
 80081ee:	d41e      	bmi.n	800822e <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80081f0:	9a00      	ldr	r2, [sp, #0]
 80081f2:	0650      	lsls	r0, r2, #25
 80081f4:	d502      	bpl.n	80081fc <SPI4_IRQHandler+0x28>
 80081f6:	9a01      	ldr	r2, [sp, #4]
 80081f8:	07d1      	lsls	r1, r2, #31
 80081fa:	d424      	bmi.n	8008246 <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80081fc:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80081fe:	0652      	lsls	r2, r2, #25
 8008200:	d40a      	bmi.n	8008218 <SPI4_IRQHandler+0x44>
 8008202:	9801      	ldr	r0, [sp, #4]
 8008204:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008208:	d106      	bne.n	8008218 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800820a:	6963      	ldr	r3, [r4, #20]
 800820c:	b16b      	cbz	r3, 800822a <SPI4_IRQHandler+0x56>
 800820e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 8008210:	b004      	add	sp, #16
 8008212:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008216:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008220:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008222:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008224:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1f1      	bne.n	800820e <SPI4_IRQHandler+0x3a>
}
 800822a:	b004      	add	sp, #16
 800822c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800822e:	4621      	mov	r1, r4
 8008230:	a802      	add	r0, sp, #8
 8008232:	f7ff fe0f 	bl	8007e54 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008236:	a802      	add	r0, sp, #8
 8008238:	f001 fdd2 	bl	8009de0 <is_oke>
			event = SPI_EVENT_ERROR;
 800823c:	2800      	cmp	r0, #0
 800823e:	bf14      	ite	ne
 8008240:	2001      	movne	r0, #1
 8008242:	2003      	moveq	r0, #3
 8008244:	e7e1      	b.n	800820a <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008246:	4906      	ldr	r1, [pc, #24]	; (8008260 <SPI4_IRQHandler+0x8c>)
 8008248:	a802      	add	r0, sp, #8
 800824a:	f7ff fe93 	bl	8007f74 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800824e:	a802      	add	r0, sp, #8
 8008250:	f001 fdc6 	bl	8009de0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008254:	2800      	cmp	r0, #0
 8008256:	bf0c      	ite	eq
 8008258:	2003      	moveq	r0, #3
 800825a:	2002      	movne	r0, #2
 800825c:	e7d5      	b.n	800820a <SPI4_IRQHandler+0x36>
 800825e:	bf00      	nop
 8008260:	2000b674 	.word	0x2000b674

08008264 <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 8008264:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8008266:	4c22      	ldr	r4, [pc, #136]	; (80082f0 <SPI5_IRQHandler+0x8c>)
 8008268:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 800826a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008274:	9a00      	ldr	r2, [sp, #0]
 8008276:	0611      	lsls	r1, r2, #24
 8008278:	d502      	bpl.n	8008280 <SPI5_IRQHandler+0x1c>
 800827a:	9a01      	ldr	r2, [sp, #4]
 800827c:	0792      	lsls	r2, r2, #30
 800827e:	d41e      	bmi.n	80082be <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008280:	9a00      	ldr	r2, [sp, #0]
 8008282:	0650      	lsls	r0, r2, #25
 8008284:	d502      	bpl.n	800828c <SPI5_IRQHandler+0x28>
 8008286:	9a01      	ldr	r2, [sp, #4]
 8008288:	07d1      	lsls	r1, r2, #31
 800828a:	d424      	bmi.n	80082d6 <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800828c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800828e:	0652      	lsls	r2, r2, #25
 8008290:	d40a      	bmi.n	80082a8 <SPI5_IRQHandler+0x44>
 8008292:	9801      	ldr	r0, [sp, #4]
 8008294:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008298:	d106      	bne.n	80082a8 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800829a:	6963      	ldr	r3, [r4, #20]
 800829c:	b16b      	cbz	r3, 80082ba <SPI5_IRQHandler+0x56>
 800829e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 80082a0:	b004      	add	sp, #16
 80082a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80082a6:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80082a8:	68da      	ldr	r2, [r3, #12]
 80082aa:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80082b0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80082b2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80082b4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d1f1      	bne.n	800829e <SPI5_IRQHandler+0x3a>
}
 80082ba:	b004      	add	sp, #16
 80082bc:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80082be:	4621      	mov	r1, r4
 80082c0:	a802      	add	r0, sp, #8
 80082c2:	f7ff fdc7 	bl	8007e54 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80082c6:	a802      	add	r0, sp, #8
 80082c8:	f001 fd8a 	bl	8009de0 <is_oke>
			event = SPI_EVENT_ERROR;
 80082cc:	2800      	cmp	r0, #0
 80082ce:	bf14      	ite	ne
 80082d0:	2001      	movne	r0, #1
 80082d2:	2003      	moveq	r0, #3
 80082d4:	e7e1      	b.n	800829a <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80082d6:	4906      	ldr	r1, [pc, #24]	; (80082f0 <SPI5_IRQHandler+0x8c>)
 80082d8:	a802      	add	r0, sp, #8
 80082da:	f7ff fe4b 	bl	8007f74 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80082de:	a802      	add	r0, sp, #8
 80082e0:	f001 fd7e 	bl	8009de0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80082e4:	2800      	cmp	r0, #0
 80082e6:	bf0c      	ite	eq
 80082e8:	2003      	moveq	r0, #3
 80082ea:	2002      	movne	r0, #2
 80082ec:	e7d5      	b.n	800829a <SPI5_IRQHandler+0x36>
 80082ee:	bf00      	nop
 80082f0:	2000b6a8 	.word	0x2000b6a8

080082f4 <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 80082f4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082f6:	4c22      	ldr	r4, [pc, #136]	; (8008380 <SPI6_IRQHandler+0x8c>)
 80082f8:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 80082fa:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8008304:	9a00      	ldr	r2, [sp, #0]
 8008306:	0611      	lsls	r1, r2, #24
 8008308:	d502      	bpl.n	8008310 <SPI6_IRQHandler+0x1c>
 800830a:	9a01      	ldr	r2, [sp, #4]
 800830c:	0792      	lsls	r2, r2, #30
 800830e:	d41e      	bmi.n	800834e <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8008310:	9a00      	ldr	r2, [sp, #0]
 8008312:	0650      	lsls	r0, r2, #25
 8008314:	d502      	bpl.n	800831c <SPI6_IRQHandler+0x28>
 8008316:	9a01      	ldr	r2, [sp, #4]
 8008318:	07d1      	lsls	r1, r2, #31
 800831a:	d424      	bmi.n	8008366 <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800831c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800831e:	0652      	lsls	r2, r2, #25
 8008320:	d40a      	bmi.n	8008338 <SPI6_IRQHandler+0x44>
 8008322:	9801      	ldr	r0, [sp, #4]
 8008324:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008328:	d106      	bne.n	8008338 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800832a:	6963      	ldr	r3, [r4, #20]
 800832c:	b16b      	cbz	r3, 800834a <SPI6_IRQHandler+0x56>
 800832e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 8008330:	b004      	add	sp, #16
 8008332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008336:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8008338:	68da      	ldr	r2, [r3, #12]
 800833a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8008340:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008342:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8008344:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1f1      	bne.n	800832e <SPI6_IRQHandler+0x3a>
}
 800834a:	b004      	add	sp, #16
 800834c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800834e:	4621      	mov	r1, r4
 8008350:	a802      	add	r0, sp, #8
 8008352:	f7ff fd7f 	bl	8007e54 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8008356:	a802      	add	r0, sp, #8
 8008358:	f001 fd42 	bl	8009de0 <is_oke>
			event = SPI_EVENT_ERROR;
 800835c:	2800      	cmp	r0, #0
 800835e:	bf14      	ite	ne
 8008360:	2001      	movne	r0, #1
 8008362:	2003      	moveq	r0, #3
 8008364:	e7e1      	b.n	800832a <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8008366:	4906      	ldr	r1, [pc, #24]	; (8008380 <SPI6_IRQHandler+0x8c>)
 8008368:	a802      	add	r0, sp, #8
 800836a:	f7ff fe03 	bl	8007f74 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800836e:	a802      	add	r0, sp, #8
 8008370:	f001 fd36 	bl	8009de0 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8008374:	2800      	cmp	r0, #0
 8008376:	bf0c      	ite	eq
 8008378:	2003      	moveq	r0, #3
 800837a:	2002      	movne	r0, #2
 800837c:	e7d5      	b.n	800832a <SPI6_IRQHandler+0x36>
 800837e:	bf00      	nop
 8008380:	2000b6dc 	.word	0x2000b6dc

08008384 <_GLOBAL__sub_I_cc>:
}
 8008384:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8008386:	4e2c      	ldr	r6, [pc, #176]	; (8008438 <_GLOBAL__sub_I_cc+0xb4>)
 8008388:	4c2c      	ldr	r4, [pc, #176]	; (800843c <_GLOBAL__sub_I_cc+0xb8>)
 800838a:	4d2d      	ldr	r5, [pc, #180]	; (8008440 <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 800838c:	4f2d      	ldr	r7, [pc, #180]	; (8008444 <_GLOBAL__sub_I_cc+0xc0>)
 800838e:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 8008390:	2300      	movs	r3, #0
 8008392:	e9c6 3300 	strd	r3, r3, [r6]
 8008396:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800839a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800839e:	e9c6 3308 	strd	r3, r3, [r6, #32]
 80083a2:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 80083a6:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 80083a8:	4e27      	ldr	r6, [pc, #156]	; (8008448 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 80083aa:	60ab      	str	r3, [r5, #8]
 80083ac:	e9c5 3300 	strd	r3, r3, [r5]
 80083b0:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80083b4:	e9c5 3306 	strd	r3, r3, [r5, #24]
 80083b8:	e9c5 3308 	strd	r3, r3, [r5, #32]
 80083bc:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80083c0:	e9c4 3300 	strd	r3, r3, [r4]
 80083c4:	e9c4 3304 	strd	r3, r3, [r4, #16]
 80083c8:	e9c4 3306 	strd	r3, r3, [r4, #24]
 80083cc:	60a3      	str	r3, [r4, #8]
 80083ce:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 80083d0:	60ee      	str	r6, [r5, #12]
 80083d2:	4d1e      	ldr	r5, [pc, #120]	; (800844c <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 80083d4:	481e      	ldr	r0, [pc, #120]	; (8008450 <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 80083d6:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 80083d8:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 80083dc:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 80083de:	4c1d      	ldr	r4, [pc, #116]	; (8008454 <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 80083e0:	491d      	ldr	r1, [pc, #116]	; (8008458 <_GLOBAL__sub_I_cc+0xd4>)
 80083e2:	4a1e      	ldr	r2, [pc, #120]	; (800845c <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 80083e4:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 80083e6:	e9c0 3300 	strd	r3, r3, [r0]
 80083ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ee:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80083f2:	e9c0 3308 	strd	r3, r3, [r0, #32]
 80083f6:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80083fa:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 80083fc:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8008400:	4817      	ldr	r0, [pc, #92]	; (8008460 <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 8008402:	608b      	str	r3, [r1, #8]
 8008404:	e9c1 3300 	strd	r3, r3, [r1]
 8008408:	e9c1 3304 	strd	r3, r3, [r1, #16]
 800840c:	e9c1 3306 	strd	r3, r3, [r1, #24]
 8008410:	e9c1 3308 	strd	r3, r3, [r1, #32]
 8008414:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 8008418:	e9c2 3300 	strd	r3, r3, [r2]
 800841c:	e9c2 3304 	strd	r3, r3, [r2, #16]
 8008420:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 8008422:	60cc      	str	r4, [r1, #12]
}
 8008424:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8008426:	e9c2 3306 	strd	r3, r3, [r2, #24]
 800842a:	e9c2 3308 	strd	r3, r3, [r2, #32]
 800842e:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 8008432:	60d0      	str	r0, [r2, #12]
}
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	2000b5d8 	.word	0x2000b5d8
 800843c:	2000b640 	.word	0x2000b640
 8008440:	2000b60c 	.word	0x2000b60c
 8008444:	40013000 	.word	0x40013000
 8008448:	40003800 	.word	0x40003800
 800844c:	40003c00 	.word	0x40003c00
 8008450:	2000b674 	.word	0x2000b674
 8008454:	40013400 	.word	0x40013400
 8008458:	2000b6a8 	.word	0x2000b6a8
 800845c:	2000b6dc 	.word	0x2000b6dc
 8008460:	40015400 	.word	0x40015400

08008464 <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 8008464:	4b01      	ldr	r3, [pc, #4]	; (800846c <systick_get_tick+0x8>)
 8008466:	6818      	ldr	r0, [r3, #0]
}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	2000b710 	.word	0x2000b710

08008470 <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 8008470:	4a05      	ldr	r2, [pc, #20]	; (8008488 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 8008472:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8008476:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 8008478:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 800847a:	bf38      	it	cc
 800847c:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 800847e:	6813      	ldr	r3, [r2, #0]
 8008480:	1a5b      	subs	r3, r3, r1
 8008482:	4283      	cmp	r3, r0
 8008484:	d3fb      	bcc.n	800847e <systick_delay_ms+0xe>
}
 8008486:	4770      	bx	lr
 8008488:	2000b710 	.word	0x2000b710

0800848c <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <systick_init+0x38>)
 800848e:	4a0e      	ldr	r2, [pc, #56]	; (80084c8 <systick_init+0x3c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	fba2 2303 	umull	r2, r3, r2, r3
 8008496:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008498:	3b01      	subs	r3, #1
 800849a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 800849e:	4601      	mov	r1, r0
 80084a0:	d20b      	bcs.n	80084ba <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084a2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084a6:	4809      	ldr	r0, [pc, #36]	; (80084cc <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084a8:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084aa:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 80084ae:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084b2:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084b4:	2000      	movs	r0, #0
 80084b6:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084b8:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 80084ba:	2200      	movs	r2, #0
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084c0:	f001 bd24 	b.w	8009f0c <NVIC_Set_Priority>
 80084c4:	20000000 	.word	0x20000000
 80084c8:	10624dd3 	.word	0x10624dd3
 80084cc:	e000ed00 	.word	0xe000ed00

080084d0 <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 80084d0:	4b01      	ldr	r3, [pc, #4]	; (80084d8 <get_tick+0x8>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4718      	bx	r3
 80084d6:	bf00      	nop
 80084d8:	2000008c 	.word	0x2000008c

080084dc <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 80084dc:	4b01      	ldr	r3, [pc, #4]	; (80084e4 <delay_ms+0x8>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4718      	bx	r3
 80084e2:	bf00      	nop
 80084e4:	20000088 	.word	0x20000088

080084e8 <app_systick_process>:
	sdk_tick++;
 80084e8:	4a17      	ldr	r2, [pc, #92]	; (8008548 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 80084ea:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 80084ec:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 80084ee:	4c17      	ldr	r4, [pc, #92]	; (800854c <app_systick_process+0x64>)
	sdk_tick++;
 80084f0:	3301      	adds	r3, #1
 80084f2:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	3301      	adds	r3, #1
 80084f8:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 80084fa:	6823      	ldr	r3, [r4, #0]
 80084fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008500:	d000      	beq.n	8008504 <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 8008502:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 8008504:	4d12      	ldr	r5, [pc, #72]	; (8008550 <app_systick_process+0x68>)
 8008506:	ed95 7a00 	vldr	s14, [r5]
 800850a:	edd4 7a00 	vldr	s15, [r4]
 800850e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8008512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008516:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800851a:	ee17 0a90 	vmov	r0, s15
 800851e:	f7f8 f833 	bl	8000588 <__aeabi_f2d>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	2000      	movs	r0, #0
 8008528:	490a      	ldr	r1, [pc, #40]	; (8008554 <app_systick_process+0x6c>)
 800852a:	f7f7 fecd 	bl	80002c8 <__aeabi_dsub>
 800852e:	4b0a      	ldr	r3, [pc, #40]	; (8008558 <app_systick_process+0x70>)
 8008530:	2200      	movs	r2, #0
 8008532:	f7f8 f881 	bl	8000638 <__aeabi_dmul>
 8008536:	f7f8 fb77 	bl	8000c28 <__aeabi_d2f>
 800853a:	4a08      	ldr	r2, [pc, #32]	; (800855c <app_systick_process+0x74>)
			systick_total_ticks = 0;
 800853c:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 800853e:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 8008540:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 8008542:	602b      	str	r3, [r5, #0]
	}
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	bf00      	nop
 8008548:	2000b710 	.word	0x2000b710
 800854c:	2000b9c0 	.word	0x2000b9c0
 8008550:	2000b9bc 	.word	0x2000b9bc
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	40590000 	.word	0x40590000
 800855c:	2000b9b4 	.word	0x2000b9b4

08008560 <TIM1_CC_IRQHandler>:

void TIM_IRQHandler(tim *timptr){
	tim_event_t event = TIM_EVENT_NOEVENT;
	tim_channel_t channel = TIM_NOCHANNEL;

	timptr -> counter = timptr -> _tim -> CNT;
 8008560:	4a2f      	ldr	r2, [pc, #188]	; (8008620 <TIM1_CC_IRQHandler+0xc0>)
 8008562:	6853      	ldr	r3, [r2, #4]
 8008564:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008566:	60d1      	str	r1, [r2, #12]

	/* TIMER CAPTURE-COMPARE 1 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC1IF && timptr -> _tim -> DIER & TIM_DIER_CC1IE){
 8008568:	6919      	ldr	r1, [r3, #16]
 800856a:	0788      	lsls	r0, r1, #30
 800856c:	d502      	bpl.n	8008574 <TIM1_CC_IRQHandler+0x14>
 800856e:	68d9      	ldr	r1, [r3, #12]
 8008570:	0789      	lsls	r1, r1, #30
 8008572:	d433      	bmi.n	80085dc <TIM1_CC_IRQHandler+0x7c>
		channel = TIM_CHANNEL1;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 2 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC2IF && timptr -> _tim -> DIER & TIM_DIER_CC2IE){
 8008574:	6919      	ldr	r1, [r3, #16]
 8008576:	0748      	lsls	r0, r1, #29
 8008578:	d502      	bpl.n	8008580 <TIM1_CC_IRQHandler+0x20>
 800857a:	68d9      	ldr	r1, [r3, #12]
 800857c:	0749      	lsls	r1, r1, #29
 800857e:	d43c      	bmi.n	80085fa <TIM1_CC_IRQHandler+0x9a>
		channel = TIM_CHANNEL2;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 3 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC3IF && timptr -> _tim -> DIER & TIM_DIER_CC3IE){
 8008580:	6919      	ldr	r1, [r3, #16]
 8008582:	0708      	lsls	r0, r1, #28
 8008584:	d502      	bpl.n	800858c <TIM1_CC_IRQHandler+0x2c>
 8008586:	68d9      	ldr	r1, [r3, #12]
 8008588:	0709      	lsls	r1, r1, #28
 800858a:	d43c      	bmi.n	8008606 <TIM1_CC_IRQHandler+0xa6>
		channel = TIM_CHANNEL3;
		goto EventCB;
	}

	/* TIMER CAPTURE-COMPARE 4 INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 800858c:	6919      	ldr	r1, [r3, #16]
 800858e:	06c8      	lsls	r0, r1, #27
 8008590:	d411      	bmi.n	80085b6 <TIM1_CC_IRQHandler+0x56>
		channel = TIM_CHANNEL4;
		goto EventCB;
	}

	/* TIMER UPDATE INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_UIF && timptr -> _tim -> DIER & TIM_DIER_UIE){
 8008592:	6919      	ldr	r1, [r3, #16]
 8008594:	07c8      	lsls	r0, r1, #31
 8008596:	d502      	bpl.n	800859e <TIM1_CC_IRQHandler+0x3e>
 8008598:	68d9      	ldr	r1, [r3, #12]
 800859a:	07c9      	lsls	r1, r1, #31
 800859c:	d439      	bmi.n	8008612 <TIM1_CC_IRQHandler+0xb2>
		event = TIM_EVENT_UPDATE;
		goto EventCB;
	}

	/* TIMER BREAK INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_BIF && timptr -> _tim -> DIER & TIM_DIER_BIE){
 800859e:	6919      	ldr	r1, [r3, #16]
 80085a0:	0608      	lsls	r0, r1, #24
 80085a2:	d511      	bpl.n	80085c8 <TIM1_CC_IRQHandler+0x68>
 80085a4:	68d9      	ldr	r1, [r3, #12]
 80085a6:	0609      	lsls	r1, r1, #24
 80085a8:	d50e      	bpl.n	80085c8 <TIM1_CC_IRQHandler+0x68>
		timptr -> _tim -> SR =~ TIM_SR_BIF;
 80085aa:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80085ae:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80085b0:	2004      	movs	r0, #4
		event = TIM_EVENT_BREAK;
 80085b2:	2101      	movs	r1, #1
		goto EventCB;
 80085b4:	e00d      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_CC4IF && timptr -> _tim -> DIER & TIM_DIER_CC4IE){
 80085b6:	68d9      	ldr	r1, [r3, #12]
 80085b8:	06c9      	lsls	r1, r1, #27
 80085ba:	d5ea      	bpl.n	8008592 <TIM1_CC_IRQHandler+0x32>
		timptr -> _tim -> SR =~ TIM_SR_CC4IF;
 80085bc:	f06f 0110 	mvn.w	r1, #16
 80085c0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL4;
 80085c2:	2003      	movs	r0, #3
		event = TIM_EVENT_CAPTURECOMPARE4;
 80085c4:	2106      	movs	r1, #6
		goto EventCB;
 80085c6:	e004      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
	}

	/* TIMER TRIGER INTERRUPT */
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80085c8:	6919      	ldr	r1, [r3, #16]
 80085ca:	0648      	lsls	r0, r1, #25
 80085cc:	d40c      	bmi.n	80085e8 <TIM1_CC_IRQHandler+0x88>
	tim_channel_t channel = TIM_NOCHANNEL;
 80085ce:	2004      	movs	r0, #4
	tim_event_t event = TIM_EVENT_NOEVENT;
 80085d0:	2107      	movs	r1, #7
		event = TIM_EVENT_TRIGER;
		goto EventCB;
	}

	EventCB:
	if(timptr -> handler_callback != NULL) timptr -> handler_callback(channel, event, timptr -> parameter);
 80085d2:	6813      	ldr	r3, [r2, #0]
 80085d4:	b10b      	cbz	r3, 80085da <TIM1_CC_IRQHandler+0x7a>
 80085d6:	6892      	ldr	r2, [r2, #8]
 80085d8:	4718      	bx	r3
#if defined(TIM1)
tim tim_1(TIM1);
tim_t tim1 = &tim_1;
void TIM1_CC_IRQHandler(void){
	TIM_IRQHandler(&tim_1);
}
 80085da:	4770      	bx	lr
		timptr -> _tim -> SR =~ TIM_SR_CC1IF;
 80085dc:	f06f 0102 	mvn.w	r1, #2
 80085e0:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL1;
 80085e2:	2000      	movs	r0, #0
		event = TIM_EVENT_CAPTURECOMPARE1;
 80085e4:	2103      	movs	r1, #3
		goto EventCB;
 80085e6:	e7f4      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
	if(timptr -> _tim -> SR & TIM_SR_TIF && timptr -> _tim -> DIER & TIM_DIER_TIE){
 80085e8:	68d9      	ldr	r1, [r3, #12]
 80085ea:	0649      	lsls	r1, r1, #25
 80085ec:	d5ef      	bpl.n	80085ce <TIM1_CC_IRQHandler+0x6e>
		timptr -> _tim -> SR =~ TIM_SR_TIF;
 80085ee:	f06f 0140 	mvn.w	r1, #64	; 0x40
 80085f2:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 80085f4:	2004      	movs	r0, #4
		event = TIM_EVENT_TRIGER;
 80085f6:	2102      	movs	r1, #2
		goto EventCB;
 80085f8:	e7eb      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC2IF;
 80085fa:	f06f 0104 	mvn.w	r1, #4
 80085fe:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL2;
 8008600:	2001      	movs	r0, #1
		event = TIM_EVENT_CAPTURECOMPARE2;
 8008602:	2104      	movs	r1, #4
		goto EventCB;
 8008604:	e7e5      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_CC3IF;
 8008606:	f06f 0108 	mvn.w	r1, #8
 800860a:	6119      	str	r1, [r3, #16]
		channel = TIM_CHANNEL3;
 800860c:	2002      	movs	r0, #2
		event = TIM_EVENT_CAPTURECOMPARE3;
 800860e:	2105      	movs	r1, #5
		goto EventCB;
 8008610:	e7df      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
		timptr -> _tim -> SR =~ TIM_SR_UIF;
 8008612:	f06f 0101 	mvn.w	r1, #1
 8008616:	6119      	str	r1, [r3, #16]
	tim_channel_t channel = TIM_NOCHANNEL;
 8008618:	2004      	movs	r0, #4
		event = TIM_EVENT_UPDATE;
 800861a:	2100      	movs	r1, #0
		goto EventCB;
 800861c:	e7d9      	b.n	80085d2 <TIM1_CC_IRQHandler+0x72>
 800861e:	bf00      	nop
 8008620:	2000b714 	.word	0x2000b714

08008624 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 8008628:	f8df a154 	ldr.w	sl, [pc, #340]	; 8008780 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 800862c:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8008784 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 8008630:	4f4a      	ldr	r7, [pc, #296]	; (800875c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 8008632:	4a4b      	ldr	r2, [pc, #300]	; (8008760 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 8008634:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008788 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 8008638:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 800863c:	2300      	movs	r3, #0
 800863e:	f8ca 300c 	str.w	r3, [sl, #12]
 8008642:	f8ca 3000 	str.w	r3, [sl]
 8008646:	f8ca 3008 	str.w	r3, [sl, #8]
 800864a:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 800864e:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800878c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 8008652:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8008790 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 8008656:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8008658:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 800865c:	f8c9 300c 	str.w	r3, [r9, #12]
 8008660:	f8c9 3000 	str.w	r3, [r9]
 8008664:	f8c9 3008 	str.w	r3, [r9, #8]
 8008668:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 800866c:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8008794 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 8008670:	f8df c124 	ldr.w	ip, [pc, #292]	; 8008798 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 8008674:	4e3b      	ldr	r6, [pc, #236]	; (8008764 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 8008676:	4d3c      	ldr	r5, [pc, #240]	; (8008768 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 8008678:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 800867c:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 8008680:	f8c8 3000 	str.w	r3, [r8]
 8008684:	f8c8 3008 	str.w	r3, [r8, #8]
 8008688:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 800868c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800879c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 8008690:	4c36      	ldr	r4, [pc, #216]	; (800876c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 8008692:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 8008696:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 800869a:	f8ce 3000 	str.w	r3, [lr]
 800869e:	f8ce 3008 	str.w	r3, [lr, #8]
 80086a2:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 80086a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086aa:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80087a0 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 80086ae:	4830      	ldr	r0, [pc, #192]	; (8008770 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 80086b0:	f8cc e004 	str.w	lr, [ip, #4]
 80086b4:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 80086b8:	f8cc 3000 	str.w	r3, [ip]
 80086bc:	f8cc 3008 	str.w	r3, [ip, #8]
 80086c0:	f8cc 300c 	str.w	r3, [ip, #12]
 80086c4:	f8cc 3010 	str.w	r3, [ip, #16]
 80086c8:	6033      	str	r3, [r6, #0]
 80086ca:	60b3      	str	r3, [r6, #8]
 80086cc:	603b      	str	r3, [r7, #0]
 80086ce:	60bb      	str	r3, [r7, #8]
 80086d0:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 80086d2:	f8c7 9004 	str.w	r9, [r7, #4]
 80086d6:	606a      	str	r2, [r5, #4]
 80086d8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 80086dc:	4925      	ldr	r1, [pc, #148]	; (8008774 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 80086de:	6062      	str	r2, [r4, #4]
 80086e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80086e4:	6042      	str	r2, [r0, #4]
 80086e6:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 80086ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 80086ee:	60f3      	str	r3, [r6, #12]
 80086f0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80087a4 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 80086f4:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 80086f8:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 80086fa:	604a      	str	r2, [r1, #4]
 80086fc:	4e1e      	ldr	r6, [pc, #120]	; (8008778 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 80086fe:	4a1f      	ldr	r2, [pc, #124]	; (800877c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 8008700:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 80087a8 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 8008704:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 8008706:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 800870a:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 800870e:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 8008710:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 8008714:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 8008716:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 800871a:	60cb      	str	r3, [r1, #12]
 800871c:	602b      	str	r3, [r5, #0]
 800871e:	60d3      	str	r3, [r2, #12]
 8008720:	60ab      	str	r3, [r5, #8]
 8008722:	612b      	str	r3, [r5, #16]
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	60a3      	str	r3, [r4, #8]
 8008728:	6123      	str	r3, [r4, #16]
 800872a:	6003      	str	r3, [r0, #0]
 800872c:	6083      	str	r3, [r0, #8]
 800872e:	6103      	str	r3, [r0, #16]
 8008730:	600b      	str	r3, [r1, #0]
 8008732:	608b      	str	r3, [r1, #8]
 8008734:	610b      	str	r3, [r1, #16]
 8008736:	6013      	str	r3, [r2, #0]
 8008738:	6093      	str	r3, [r2, #8]
 800873a:	6113      	str	r3, [r2, #16]
 800873c:	6033      	str	r3, [r6, #0]
 800873e:	60b3      	str	r3, [r6, #8]
 8008740:	60f3      	str	r3, [r6, #12]
 8008742:	6133      	str	r3, [r6, #16]
 8008744:	f8cb 3000 	str.w	r3, [fp]
 8008748:	f8cb 3008 	str.w	r3, [fp, #8]
 800874c:	f8cb 300c 	str.w	r3, [fp, #12]
 8008750:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 8008754:	f8cb c004 	str.w	ip, [fp, #4]
}
 8008758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800875c:	2000b7a4 	.word	0x2000b7a4
 8008760:	40010000 	.word	0x40010000
 8008764:	2000b81c 	.word	0x2000b81c
 8008768:	2000b834 	.word	0x2000b834
 800876c:	2000b84c 	.word	0x2000b84c
 8008770:	2000b72c 	.word	0x2000b72c
 8008774:	2000b744 	.word	0x2000b744
 8008778:	2000b774 	.word	0x2000b774
 800877c:	2000b75c 	.word	0x2000b75c
 8008780:	2000b714 	.word	0x2000b714
 8008784:	2000b7bc 	.word	0x2000b7bc
 8008788:	2000b7d4 	.word	0x2000b7d4
 800878c:	40000400 	.word	0x40000400
 8008790:	2000b7ec 	.word	0x2000b7ec
 8008794:	40000800 	.word	0x40000800
 8008798:	2000b804 	.word	0x2000b804
 800879c:	40000c00 	.word	0x40000c00
 80087a0:	40001000 	.word	0x40001000
 80087a4:	2000b78c 	.word	0x2000b78c
 80087a8:	40002000 	.word	0x40002000
 80087ac:	00000000 	.word	0x00000000

080087b0 <_ZN5usart4initEP14usart_config_t>:

usart::usart(USART_TypeDef *usart){
	_usart = usart;
}

stm_ret_t usart::init(usart_config_t *conf){
 80087b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087b4:	460d      	mov	r5, r1
 80087b6:	e9d2 4107 	ldrd	r4, r1, [r2, #28]
 80087ba:	b08b      	sub	sp, #44	; 0x2c
 80087bc:	4606      	mov	r6, r0
	stm_ret_t ret;
 80087be:	2001      	movs	r0, #1
 80087c0:	2300      	movs	r3, #0
	_conf = conf;
 80087c2:	622a      	str	r2, [r5, #32]
	stm_ret_t ret;
 80087c4:	f88d 0018 	strb.w	r0, [sp, #24]
#if ENABLE_DMA
	_rxdma = _conf -> rxdma;
	_txdma = _conf -> txdma;
 80087c8:	606c      	str	r4, [r5, #4]
#endif /* ENABLE_DMA */
	__IO uint32_t usart_bus_frequency = 0UL;

	gpio_port_clock_enable(_conf -> txport);
 80087ca:	68d0      	ldr	r0, [r2, #12]
	_txdma = _conf -> txdma;
 80087cc:	60a9      	str	r1, [r5, #8]
	stm_ret_t ret;
 80087ce:	9307      	str	r3, [sp, #28]
	__IO uint32_t usart_bus_frequency = 0UL;
 80087d0:	9304      	str	r3, [sp, #16]
	gpio_port_clock_enable(_conf -> txport);
 80087d2:	f7fe fc55 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(_conf -> rxport);
 80087d6:	6a2b      	ldr	r3, [r5, #32]
 80087d8:	6958      	ldr	r0, [r3, #20]
 80087da:	f7fe fc51 	bl	8007080 <gpio_port_clock_enable>
	gpio_set_alternatefunction(conf->txport, conf->txpin, GPIO_ALTERNATE_PUSHPULL);
	gpio_set_mode(conf->rxport, conf->rxpin, GPIO_INPUT);
#elif defined(STM32F4)
	if(
#if defined(USART1)
			_usart == USART1
 80087de:	682b      	ldr	r3, [r5, #0]
	if(
 80087e0:	4ab1      	ldr	r2, [pc, #708]	; (8008aa8 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d014      	beq.n	8008810 <_ZN5usart4initEP14usart_config_t+0x60>
#endif /* defined(USART1) */
			||
 80087e6:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d010      	beq.n	8008810 <_ZN5usart4initEP14usart_config_t+0x60>
#if defined(USART2)
			_usart == USART2
#endif /* defined(USART2) */
			||
 80087ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d00c      	beq.n	8008810 <_ZN5usart4initEP14usart_config_t+0x60>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
	}
	else{
#if defined(UART7) & defined(UART8)
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_8);
 80087f6:	6a2b      	ldr	r3, [r5, #32]
 80087f8:	2208      	movs	r2, #8
 80087fa:	8a19      	ldrh	r1, [r3, #16]
 80087fc:	68d8      	ldr	r0, [r3, #12]
 80087fe:	f7fe fd27 	bl	8007250 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_8);
 8008802:	6a2b      	ldr	r3, [r5, #32]
 8008804:	2208      	movs	r2, #8
 8008806:	8b19      	ldrh	r1, [r3, #24]
 8008808:	6958      	ldr	r0, [r3, #20]
 800880a:	f7fe fd21 	bl	8007250 <gpio_set_alternatefunction>
 800880e:	e00b      	b.n	8008828 <_ZN5usart4initEP14usart_config_t+0x78>
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
 8008810:	6a2b      	ldr	r3, [r5, #32]
 8008812:	2207      	movs	r2, #7
 8008814:	8a19      	ldrh	r1, [r3, #16]
 8008816:	68d8      	ldr	r0, [r3, #12]
 8008818:	f7fe fd1a 	bl	8007250 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
 800881c:	6a2b      	ldr	r3, [r5, #32]
 800881e:	2207      	movs	r2, #7
 8008820:	8b19      	ldrh	r1, [r3, #24]
 8008822:	6958      	ldr	r0, [r3, #20]
 8008824:	f7fe fd14 	bl	8007250 <gpio_set_alternatefunction>
#else
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_6);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_6);
#endif /* defined(UART7) & defined(UART8) */
	}
	gpio_set_alternatefunction_type(_conf -> txport, _conf -> txpin, GPIO_OUTPUT_PUSHPULL);
 8008828:	6a2b      	ldr	r3, [r5, #32]
 800882a:	2207      	movs	r2, #7
 800882c:	8a19      	ldrh	r1, [r3, #16]
 800882e:	68d8      	ldr	r0, [r3, #12]
 8008830:	f7fe fd4c 	bl	80072cc <gpio_set_alternatefunction_type>
	gpio_set_alternatefunction_type(_conf -> rxport, _conf -> rxpin, GPIO_OUTPUT_PUSHPULL);
 8008834:	6a2b      	ldr	r3, [r5, #32]
 8008836:	2207      	movs	r2, #7
 8008838:	8b19      	ldrh	r1, [r3, #24]
 800883a:	6958      	ldr	r0, [r3, #20]
 800883c:	f7fe fd46 	bl	80072cc <gpio_set_alternatefunction_type>
#endif /* STM32F4 */

#if defined(USART1)
	if(_usart == USART1){
 8008840:	682c      	ldr	r4, [r5, #0]
 8008842:	4b99      	ldr	r3, [pc, #612]	; (8008aa8 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8008844:	429c      	cmp	r4, r3
 8008846:	f000 8147 	beq.w	8008ad8 <_ZN5usart4initEP14usart_config_t+0x328>
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART1) */
#if defined(USART2)
	if(_usart == USART2){
 800884a:	4b98      	ldr	r3, [pc, #608]	; (8008aac <_ZN5usart4initEP14usart_config_t+0x2fc>)
 800884c:	429c      	cmp	r4, r3
 800884e:	f000 8151 	beq.w	8008af4 <_ZN5usart4initEP14usart_config_t+0x344>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART2) */
#if defined(USART3)
	if(_usart == USART3){
 8008852:	4b97      	ldr	r3, [pc, #604]	; (8008ab0 <_ZN5usart4initEP14usart_config_t+0x300>)
 8008854:	429c      	cmp	r4, r3
 8008856:	f000 80d2 	beq.w	80089fe <_ZN5usart4initEP14usart_config_t+0x24e>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(USART3) */
#if defined(UART4)
	if(_usart == UART4){
 800885a:	4b96      	ldr	r3, [pc, #600]	; (8008ab4 <_ZN5usart4initEP14usart_config_t+0x304>)
 800885c:	429c      	cmp	r4, r3
 800885e:	f000 80dc 	beq.w	8008a1a <_ZN5usart4initEP14usart_config_t+0x26a>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART4) */
#if defined(UART5)
	if(_usart == UART5){
 8008862:	4b95      	ldr	r3, [pc, #596]	; (8008ab8 <_ZN5usart4initEP14usart_config_t+0x308>)
 8008864:	429c      	cmp	r4, r3
 8008866:	f000 80e6 	beq.w	8008a36 <_ZN5usart4initEP14usart_config_t+0x286>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART5) */
#if defined(USART6)
	if(_usart == USART6){
 800886a:	4b94      	ldr	r3, [pc, #592]	; (8008abc <_ZN5usart4initEP14usart_config_t+0x30c>)
 800886c:	429c      	cmp	r4, r3
 800886e:	f000 80f0 	beq.w	8008a52 <_ZN5usart4initEP14usart_config_t+0x2a2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
	}
#endif /* defined(USART6) */
#if defined(UART7)
	if(_usart == UART7){
 8008872:	4b93      	ldr	r3, [pc, #588]	; (8008ac0 <_ZN5usart4initEP14usart_config_t+0x310>)
 8008874:	429c      	cmp	r4, r3
 8008876:	f000 80fa 	beq.w	8008a6e <_ZN5usart4initEP14usart_config_t+0x2be>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART7) */
#if defined(UART8)
	if(_usart == UART8){
 800887a:	4b92      	ldr	r3, [pc, #584]	; (8008ac4 <_ZN5usart4initEP14usart_config_t+0x314>)
 800887c:	429c      	cmp	r4, r3
 800887e:	f000 8104 	beq.w	8008a8a <_ZN5usart4initEP14usart_config_t+0x2da>
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
	}
#endif /* defined(UART8) */


	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008882:	68e3      	ldr	r3, [r4, #12]

	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8008884:	6a2f      	ldr	r7, [r5, #32]
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008886:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800888a:	f043 030c 	orr.w	r3, r3, #12
 800888e:	60e3      	str	r3, [r4, #12]
	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8008890:	9804      	ldr	r0, [sp, #16]
 8008892:	f7f7 fe57 	bl	8000544 <__aeabi_ui2d>
 8008896:	4b8c      	ldr	r3, [pc, #560]	; (8008ac8 <_ZN5usart4initEP14usart_config_t+0x318>)
 8008898:	2200      	movs	r2, #0
 800889a:	f7f7 fecd 	bl	8000638 <__aeabi_dmul>
 800889e:	4680      	mov	r8, r0
 80088a0:	6838      	ldr	r0, [r7, #0]
 80088a2:	4689      	mov	r9, r1
 80088a4:	f7f7 fe4e 	bl	8000544 <__aeabi_ui2d>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4640      	mov	r0, r8
 80088ae:	4649      	mov	r1, r9
 80088b0:	f7f7 ffec 	bl	800088c <__aeabi_ddiv>
 80088b4:	f7f8 f9b8 	bl	8000c28 <__aeabi_d2f>
 80088b8:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Fraction = 0x00UL;
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 80088bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15

	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 80088c0:	ee17 3a90 	vmov	r3, s15
 80088c4:	fa1f f883 	uxth.w	r8, r3
 80088c8:	f7f7 fe5e 	bl	8000588 <__aeabi_f2d>
 80088cc:	4b7f      	ldr	r3, [pc, #508]	; (8008acc <_ZN5usart4initEP14usart_config_t+0x31c>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	f7f7 feb2 	bl	8000638 <__aeabi_dmul>
 80088d4:	f7f8 f988 	bl	8000be8 <__aeabi_d2uiz>
 80088d8:	fa1f f980 	uxth.w	r9, r0
 80088dc:	4640      	mov	r0, r8
 80088de:	f7f7 fe41 	bl	8000564 <__aeabi_i2d>
 80088e2:	4b7a      	ldr	r3, [pc, #488]	; (8008acc <_ZN5usart4initEP14usart_config_t+0x31c>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	f7f7 fea7 	bl	8000638 <__aeabi_dmul>
 80088ea:	f7f8 f97d 	bl	8000be8 <__aeabi_d2uiz>
 80088ee:	b280      	uxth	r0, r0
 80088f0:	eba9 0000 	sub.w	r0, r9, r0
 80088f4:	f7f7 fe36 	bl	8000564 <__aeabi_i2d>
 80088f8:	a369      	add	r3, pc, #420	; (adr r3, 8008aa0 <_ZN5usart4initEP14usart_config_t+0x2f0>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	f7f7 fe9b 	bl	8000638 <__aeabi_dmul>
 8008902:	f7f8 f991 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8008906:	ee07 0a90 	vmov	s15, r0
 800890a:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 800890e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008912:	f002 f88b 	bl	800aa2c <ceilf>
	DIV_Fraction = ceil(Fraction);
 8008916:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 800891a:	793a      	ldrb	r2, [r7, #4]
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 800891c:	ee10 3a10 	vmov	r3, s0
 8008920:	b29b      	uxth	r3, r3
 8008922:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 8008926:	60a3      	str	r3, [r4, #8]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 8008928:	b36a      	cbz	r2, 8008986 <_ZN5usart4initEP14usart_config_t+0x1d6>

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 800892a:	68ba      	ldr	r2, [r7, #8]
 800892c:	2a03      	cmp	r2, #3
 800892e:	f240 8104 	bls.w	8008b3a <_ZN5usart4initEP14usart_config_t+0x38a>
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}

#if defined(USART1)
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8008932:	4b5d      	ldr	r3, [pc, #372]	; (8008aa8 <_ZN5usart4initEP14usart_config_t+0x2f8>)
 8008934:	429c      	cmp	r4, r3
 8008936:	d04c      	beq.n	80089d2 <_ZN5usart4initEP14usart_config_t+0x222>
#endif /* defined(USART1) */
#if defined(USART2)
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8008938:	4b5c      	ldr	r3, [pc, #368]	; (8008aac <_ZN5usart4initEP14usart_config_t+0x2fc>)
 800893a:	429c      	cmp	r4, r3
 800893c:	f000 80e5 	beq.w	8008b0a <_ZN5usart4initEP14usart_config_t+0x35a>
#endif /* defined(USART2) */
#if defined(USART3)
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8008940:	4b5b      	ldr	r3, [pc, #364]	; (8008ab0 <_ZN5usart4initEP14usart_config_t+0x300>)
 8008942:	429c      	cmp	r4, r3
 8008944:	f000 80e5 	beq.w	8008b12 <_ZN5usart4initEP14usart_config_t+0x362>
#endif /* defined(USART3) */
#if defined(UART4)
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 8008948:	4b5a      	ldr	r3, [pc, #360]	; (8008ab4 <_ZN5usart4initEP14usart_config_t+0x304>)
 800894a:	429c      	cmp	r4, r3
 800894c:	d053      	beq.n	80089f6 <_ZN5usart4initEP14usart_config_t+0x246>
#endif /* defined(USART4) */
#if defined(UART5)
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 800894e:	4b5a      	ldr	r3, [pc, #360]	; (8008ab8 <_ZN5usart4initEP14usart_config_t+0x308>)
 8008950:	429c      	cmp	r4, r3
 8008952:	f000 80e6 	beq.w	8008b22 <_ZN5usart4initEP14usart_config_t+0x372>
#endif /* defined(USART5) */
#if defined(USART6)
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8008956:	4b59      	ldr	r3, [pc, #356]	; (8008abc <_ZN5usart4initEP14usart_config_t+0x30c>)
 8008958:	429c      	cmp	r4, r3
 800895a:	f000 80e6 	beq.w	8008b2a <_ZN5usart4initEP14usart_config_t+0x37a>
#endif /* defined(USART6) */
#if defined(UART7)
		else if(_usart == UART7) IRQn = UART7_IRQn;
 800895e:	4b58      	ldr	r3, [pc, #352]	; (8008ac0 <_ZN5usart4initEP14usart_config_t+0x310>)
 8008960:	429c      	cmp	r4, r3
 8008962:	f000 80e6 	beq.w	8008b32 <_ZN5usart4initEP14usart_config_t+0x382>
#endif /* defined(USART7) */
#if defined(UART8)
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8008966:	4b57      	ldr	r3, [pc, #348]	; (8008ac4 <_ZN5usart4initEP14usart_config_t+0x314>)
 8008968:	429c      	cmp	r4, r3
 800896a:	f000 80d6 	beq.w	8008b1a <_ZN5usart4initEP14usart_config_t+0x36a>
#endif /* defined(UART8) */
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 800896e:	f995 3024 	ldrsb.w	r3, [r5, #36]	; 0x24
  if ((int32_t)(IRQn) >= 0)
 8008972:	2b00      	cmp	r3, #0
 8008974:	da30      	bge.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008976:	4956      	ldr	r1, [pc, #344]	; (8008ad0 <_ZN5usart4initEP14usart_config_t+0x320>)
 8008978:	f003 030f 	and.w	r3, r3, #15
 800897c:	0112      	lsls	r2, r2, #4
 800897e:	4419      	add	r1, r3
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	760a      	strb	r2, [r1, #24]


stm_ret_t usart::transmit(uint8_t data){
	stm_ret_t ret;

	_usart -> DR = data;
 8008984:	682c      	ldr	r4, [r5, #0]
	stm_ret_t ret;
 8008986:	2200      	movs	r2, #0
 8008988:	9209      	str	r2, [sp, #36]	; 0x24
	_usart -> DR = data;
 800898a:	220a      	movs	r2, #10
 800898c:	6062      	str	r2, [r4, #4]

	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 800898e:	af02      	add	r7, sp, #8
 8008990:	2264      	movs	r2, #100	; 0x64
 8008992:	4621      	mov	r1, r4
	stm_ret_t ret;
 8008994:	2301      	movs	r3, #1
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008996:	9200      	str	r2, [sp, #0]
 8008998:	4638      	mov	r0, r7
 800899a:	2240      	movs	r2, #64	; 0x40
	stm_ret_t ret;
 800899c:	f88d 3020 	strb.w	r3, [sp, #32]
	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 80089a0:	f001 f9dc 	bl	8009d5c <wait_flag_in_register_timeout>
 80089a4:	e897 0003 	ldmia.w	r7, {r0, r1}
 80089a8:	ac08      	add	r4, sp, #32
 80089aa:	e884 0003 	stmia.w	r4, {r0, r1}
	if(!is_oke(&ret)){
 80089ae:	4620      	mov	r0, r4
 80089b0:	f001 fa16 	bl	8009de0 <is_oke>
 80089b4:	b1d0      	cbz	r0, 80089ec <_ZN5usart4initEP14usart_config_t+0x23c>
 80089b6:	682b      	ldr	r3, [r5, #0]
		set_return_line(&ret, __LINE__);
		return ret;
	}

	volatile uint32_t tmp = _usart -> SR;
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	9205      	str	r2, [sp, #20]
	tmp = _usart -> DR;
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	9305      	str	r3, [sp, #20]
	(void)tmp;
 80089c0:	9b05      	ldr	r3, [sp, #20]
	return {STM_OKE, 0};
 80089c2:	2201      	movs	r2, #1
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4630      	mov	r0, r6
	return {STM_OKE, 0};
 80089c8:	7032      	strb	r2, [r6, #0]
 80089ca:	6073      	str	r3, [r6, #4]
}
 80089cc:	b00b      	add	sp, #44	; 0x2c
 80089ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 80089d2:	2325      	movs	r3, #37	; 0x25
 80089d4:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089d8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80089dc:	0112      	lsls	r2, r2, #4
 80089de:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80089e2:	b2d2      	uxtb	r2, r2
 80089e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
	_usart -> DR = data;
 80089e8:	682c      	ldr	r4, [r5, #0]
 80089ea:	e7cc      	b.n	8008986 <_ZN5usart4initEP14usart_config_t+0x1d6>
		set_return_line(&ret, __LINE__);
 80089ec:	21fe      	movs	r1, #254	; 0xfe
 80089ee:	4620      	mov	r0, r4
 80089f0:	f001 f9f4 	bl	8009ddc <set_return_line>
		return ret;
 80089f4:	e7e5      	b.n	80089c2 <_ZN5usart4initEP14usart_config_t+0x212>
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 80089f6:	2334      	movs	r3, #52	; 0x34
 80089f8:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 80089fc:	e7ec      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 80089fe:	4a35      	ldr	r2, [pc, #212]	; (8008ad4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008a00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a06:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a08:	2002      	movs	r0, #2
 8008a0a:	f7fe fe8b 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == UART4){
 8008a0e:	682c      	ldr	r4, [r5, #0]
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <_ZN5usart4initEP14usart_config_t+0x304>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a12:	9004      	str	r0, [sp, #16]
	if(_usart == UART4){
 8008a14:	429c      	cmp	r4, r3
 8008a16:	f47f af24 	bne.w	8008862 <_ZN5usart4initEP14usart_config_t+0xb2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8008a1a:	4a2e      	ldr	r2, [pc, #184]	; (8008ad4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008a1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a22:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a24:	2002      	movs	r0, #2
 8008a26:	f7fe fe7d 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == UART5){
 8008a2a:	682c      	ldr	r4, [r5, #0]
 8008a2c:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <_ZN5usart4initEP14usart_config_t+0x308>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a2e:	9004      	str	r0, [sp, #16]
	if(_usart == UART5){
 8008a30:	429c      	cmp	r4, r3
 8008a32:	f47f af1a 	bne.w	800886a <_ZN5usart4initEP14usart_config_t+0xba>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8008a36:	4a27      	ldr	r2, [pc, #156]	; (8008ad4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008a38:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a3e:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a40:	2002      	movs	r0, #2
 8008a42:	f7fe fe6f 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == USART6){
 8008a46:	682c      	ldr	r4, [r5, #0]
 8008a48:	4b1c      	ldr	r3, [pc, #112]	; (8008abc <_ZN5usart4initEP14usart_config_t+0x30c>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a4a:	9004      	str	r0, [sp, #16]
	if(_usart == USART6){
 8008a4c:	429c      	cmp	r4, r3
 8008a4e:	f47f af10 	bne.w	8008872 <_ZN5usart4initEP14usart_config_t+0xc2>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8008a52:	4a20      	ldr	r2, [pc, #128]	; (8008ad4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008a54:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008a56:	f043 0320 	orr.w	r3, r3, #32
 8008a5a:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008a5c:	2003      	movs	r0, #3
 8008a5e:	f7fe fe61 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == UART7){
 8008a62:	682c      	ldr	r4, [r5, #0]
 8008a64:	4b16      	ldr	r3, [pc, #88]	; (8008ac0 <_ZN5usart4initEP14usart_config_t+0x310>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008a66:	9004      	str	r0, [sp, #16]
	if(_usart == UART7){
 8008a68:	429c      	cmp	r4, r3
 8008a6a:	f47f af06 	bne.w	800887a <_ZN5usart4initEP14usart_config_t+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
 8008a6e:	4a19      	ldr	r2, [pc, #100]	; (8008ad4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008a70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a76:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a78:	2002      	movs	r0, #2
 8008a7a:	f7fe fe53 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == UART8){
 8008a7e:	682c      	ldr	r4, [r5, #0]
 8008a80:	4b10      	ldr	r3, [pc, #64]	; (8008ac4 <_ZN5usart4initEP14usart_config_t+0x314>)
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a82:	9004      	str	r0, [sp, #16]
	if(_usart == UART8){
 8008a84:	429c      	cmp	r4, r3
 8008a86:	f47f aefc 	bne.w	8008882 <_ZN5usart4initEP14usart_config_t+0xd2>
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8008a8a:	4a12      	ldr	r2, [pc, #72]	; (8008ad4 <_ZN5usart4initEP14usart_config_t+0x324>)
 8008a8c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a92:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 8008a94:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a96:	f7fe fe45 	bl	8007724 <rcc_get_bus_frequency>
	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008a9a:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008a9c:	9004      	str	r0, [sp, #16]
 8008a9e:	e6f0      	b.n	8008882 <_ZN5usart4initEP14usart_config_t+0xd2>
 8008aa0:	47ae147b 	.word	0x47ae147b
 8008aa4:	3f847ae1 	.word	0x3f847ae1
 8008aa8:	40011000 	.word	0x40011000
 8008aac:	40004400 	.word	0x40004400
 8008ab0:	40004800 	.word	0x40004800
 8008ab4:	40004c00 	.word	0x40004c00
 8008ab8:	40005000 	.word	0x40005000
 8008abc:	40011400 	.word	0x40011400
 8008ac0:	40007800 	.word	0x40007800
 8008ac4:	40007c00 	.word	0x40007c00
 8008ac8:	3fb00000 	.word	0x3fb00000
 8008acc:	40590000 	.word	0x40590000
 8008ad0:	e000ecfc 	.word	0xe000ecfc
 8008ad4:	40023800 	.word	0x40023800
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8008ad8:	4a28      	ldr	r2, [pc, #160]	; (8008b7c <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8008ada:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008adc:	f043 0310 	orr.w	r3, r3, #16
 8008ae0:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008ae2:	2003      	movs	r0, #3
 8008ae4:	f7fe fe1e 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == USART2){
 8008ae8:	682c      	ldr	r4, [r5, #0]
 8008aea:	4b25      	ldr	r3, [pc, #148]	; (8008b80 <_ZN5usart4initEP14usart_config_t+0x3d0>)
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008aec:	9004      	str	r0, [sp, #16]
	if(_usart == USART2){
 8008aee:	429c      	cmp	r4, r3
 8008af0:	f47f aeaf 	bne.w	8008852 <_ZN5usart4initEP14usart_config_t+0xa2>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8008af4:	4a21      	ldr	r2, [pc, #132]	; (8008b7c <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8008af6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008afc:	2002      	movs	r0, #2
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8008afe:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b00:	f7fe fe10 	bl	8007724 <rcc_get_bus_frequency>
	if(_usart == USART3){
 8008b04:	682c      	ldr	r4, [r5, #0]
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008b06:	9004      	str	r0, [sp, #16]
 8008b08:	e6a3      	b.n	8008852 <_ZN5usart4initEP14usart_config_t+0xa2>
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8008b0a:	2326      	movs	r3, #38	; 0x26
 8008b0c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008b10:	e762      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART3) IRQn = USART3_IRQn;
 8008b12:	2327      	movs	r3, #39	; 0x27
 8008b14:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008b18:	e75e      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8008b1a:	2353      	movs	r3, #83	; 0x53
 8008b1c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008b20:	e75a      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8008b22:	2335      	movs	r3, #53	; 0x35
 8008b24:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008b28:	e756      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == USART6) IRQn = USART6_IRQn;
 8008b2a:	2347      	movs	r3, #71	; 0x47
 8008b2c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008b30:	e752      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
		else if(_usart == UART7) IRQn = UART7_IRQn;
 8008b32:	2352      	movs	r3, #82	; 0x52
 8008b34:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 8008b38:	e74e      	b.n	80089d8 <_ZN5usart4initEP14usart_config_t+0x228>
			set_return(&ret, STM_ERR, __LINE__);
 8008b3a:	a806      	add	r0, sp, #24
 8008b3c:	228c      	movs	r2, #140	; 0x8c
 8008b3e:	2100      	movs	r1, #0
 8008b40:	f001 f948 	bl	8009dd4 <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8008b44:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <_ZN5usart4initEP14usart_config_t+0x3d4>)
 8008b46:	4a10      	ldr	r2, [pc, #64]	; (8008b88 <_ZN5usart4initEP14usart_config_t+0x3d8>)
 8008b48:	4910      	ldr	r1, [pc, #64]	; (8008b8c <_ZN5usart4initEP14usart_config_t+0x3dc>)
 8008b4a:	4811      	ldr	r0, [pc, #68]	; (8008b90 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8008b4c:	f000 ffd0 	bl	8009af0 <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8008b50:	4910      	ldr	r1, [pc, #64]	; (8008b94 <_ZN5usart4initEP14usart_config_t+0x3e4>)
 8008b52:	480f      	ldr	r0, [pc, #60]	; (8008b90 <_ZN5usart4initEP14usart_config_t+0x3e0>)
 8008b54:	2205      	movs	r2, #5
 8008b56:	f000 ff4f 	bl	80099f8 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8008b5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8008b5e:	f7ff fc87 	bl	8008470 <systick_delay_ms>
 8008b62:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008b66:	490c      	ldr	r1, [pc, #48]	; (8008b98 <_ZN5usart4initEP14usart_config_t+0x3e8>)
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <_ZN5usart4initEP14usart_config_t+0x3ec>)
 8008b6a:	68ca      	ldr	r2, [r1, #12]
 8008b6c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008b70:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008b72:	60cb      	str	r3, [r1, #12]
 8008b74:	f3bf 8f4f 	dsb	sy
    __NOP();
 8008b78:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008b7a:	e7fd      	b.n	8008b78 <_ZN5usart4initEP14usart_config_t+0x3c8>
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	40004400 	.word	0x40004400
 8008b84:	0800e784 	.word	0x0800e784
 8008b88:	0800e8ac 	.word	0x0800e8ac
 8008b8c:	0800e71c 	.word	0x0800e71c
 8008b90:	0800e8d4 	.word	0x0800e8d4
 8008b94:	0800e768 	.word	0x0800e768
 8008b98:	e000ed00 	.word	0xe000ed00
 8008b9c:	05fa0004 	.word	0x05fa0004

08008ba0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>:
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8008ba0:	b570      	push	{r4, r5, r6, lr}
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008ba2:	6a0d      	ldr	r5, [r1, #32]
	stm_ret_t ret;
 8008ba4:	2601      	movs	r6, #1
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008ba6:	792d      	ldrb	r5, [r5, #4]
	stm_ret_t ret;
 8008ba8:	7006      	strb	r6, [r0, #0]
 8008baa:	2600      	movs	r6, #0
stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8008bac:	4604      	mov	r4, r0
	stm_ret_t ret;
 8008bae:	6046      	str	r6, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008bb0:	b11d      	cbz	r5, 8008bba <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x1a>
		parameter = param;
 8008bb2:	e9c1 3203 	strd	r3, r2, [r1, #12]
}
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	bd70      	pop	{r4, r5, r6, pc}
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8008bba:	22ed      	movs	r2, #237	; 0xed
 8008bbc:	2103      	movs	r1, #3
 8008bbe:	f001 f909 	bl	8009dd4 <set_return>
		LOG_WARN(TAG, "%s -> %s, USART peripheral control unsuported register event handler.", __FILE__, __FUNCTION__ );
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x34>)
 8008bc4:	4a04      	ldr	r2, [pc, #16]	; (8008bd8 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x38>)
 8008bc6:	4905      	ldr	r1, [pc, #20]	; (8008bdc <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x3c>)
 8008bc8:	4805      	ldr	r0, [pc, #20]	; (8008be0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x40>)
 8008bca:	f000 ff53 	bl	8009a74 <LOG_WARN>
}
 8008bce:	4620      	mov	r0, r4
 8008bd0:	bd70      	pop	{r4, r5, r6, pc}
 8008bd2:	bf00      	nop
 8008bd4:	0800e8dc 	.word	0x0800e8dc
 8008bd8:	0800e8ac 	.word	0x0800e8ac
 8008bdc:	0800e8f4 	.word	0x0800e8f4
 8008be0:	0800e8d4 	.word	0x0800e8d4

08008be4 <_ZN5usart8transmitEPht>:

	return ret;
}


stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8008be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008be8:	4615      	mov	r5, r2
	stm_ret_t ret;
 8008bea:	2201      	movs	r2, #1
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8008bec:	b085      	sub	sp, #20
	stm_ret_t ret;
 8008bee:	7002      	strb	r2, [r0, #0]
 8008bf0:	2200      	movs	r2, #0
stm_ret_t usart::transmit(uint8_t *data, uint16_t len){
 8008bf2:	4604      	mov	r4, r0
 8008bf4:	4688      	mov	r8, r1
	stm_ret_t ret;
 8008bf6:	6042      	str	r2, [r0, #4]
	uint16_t TxCount = len;
 8008bf8:	18ef      	adds	r7, r5, r3

	while(TxCount--) {
		_usart -> DR = *data++;

		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008bfa:	ae02      	add	r6, sp, #8
 8008bfc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8008c00:	e011      	b.n	8008c26 <_ZN5usart8transmitEPht+0x42>
		_usart -> DR = *data++;
 8008c02:	f8d8 1000 	ldr.w	r1, [r8]
 8008c06:	f815 cb01 	ldrb.w	ip, [r5], #1
 8008c0a:	f8c1 c004 	str.w	ip, [r1, #4]
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008c0e:	f8cd 9000 	str.w	r9, [sp]
 8008c12:	f001 f8a3 	bl	8009d5c <wait_flag_in_register_timeout>
 8008c16:	e896 0003 	ldmia.w	r6, {r0, r1}
 8008c1a:	e884 0003 	stmia.w	r4, {r0, r1}
		if(!is_oke(&ret)){
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f001 f8de 	bl	8009de0 <is_oke>
 8008c24:	b150      	cbz	r0, 8008c3c <_ZN5usart8transmitEPht+0x58>
	while(TxCount--) {
 8008c26:	42bd      	cmp	r5, r7
		ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 8008c28:	f04f 0301 	mov.w	r3, #1
 8008c2c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8008c30:	4630      	mov	r0, r6
	while(TxCount--) {
 8008c32:	d1e6      	bne.n	8008c02 <_ZN5usart8transmitEPht+0x1e>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	return ret;
}
 8008c34:	4620      	mov	r0, r4
 8008c36:	b005      	add	sp, #20
 8008c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			set_return_line(&ret, __LINE__);
 8008c3c:	4620      	mov	r0, r4
 8008c3e:	f240 1113 	movw	r1, #275	; 0x113
 8008c42:	f001 f8cb 	bl	8009ddc <set_return_line>
}
 8008c46:	4620      	mov	r0, r4
 8008c48:	b005      	add	sp, #20
 8008c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	bf00      	nop

08008c50 <_ZN5usart24receive_to_idle_start_itEt>:
}



stm_ret_t usart::receive_start_it(uint16_t buffer_size){
	stm_ret_t ret;
 8008c50:	2301      	movs	r3, #1
}
#endif /* ENABLE_DMA */



stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008c52:	b570      	push	{r4, r5, r6, lr}
	stm_ret_t ret;
 8008c54:	7003      	strb	r3, [r0, #0]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6043      	str	r3, [r0, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008c5a:	6a0b      	ldr	r3, [r1, #32]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008c5c:	4616      	mov	r6, r2
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008c5e:	791a      	ldrb	r2, [r3, #4]
stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008c60:	b082      	sub	sp, #8
 8008c62:	460c      	mov	r4, r1
 8008c64:	4605      	mov	r5, r0
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	d047      	beq.n	8008cfa <_ZN5usart24receive_to_idle_start_itEt+0xaa>
		if(_conf -> interruptoption && (USART_RECEIVE_INTERRUPT | USART_TRANSMIT_RECEIVE_INTERRUPT))
 8008c6a:	795b      	ldrb	r3, [r3, #5]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d03d      	beq.n	8008cec <_ZN5usart24receive_to_idle_start_itEt+0x9c>
			_usart -> CR1 |= USART_CR1_RXNEIE;
 8008c70:	680a      	ldr	r2, [r1, #0]
 8008c72:	68d3      	ldr	r3, [r2, #12]
 8008c74:	f043 0320 	orr.w	r3, r3, #32
 8008c78:	60d3      	str	r3, [r2, #12]
	if(rxbuffer != NULL) {
 8008c7a:	6960      	ldr	r0, [r4, #20]
	rxlen = buffer_size;
 8008c7c:	8326      	strh	r6, [r4, #24]
	rxcount = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	8363      	strh	r3, [r4, #26]
	reception = USART_RECEPTION_NORMAL;
 8008c82:	7763      	strb	r3, [r4, #29]
	if(rxbuffer != NULL) {
 8008c84:	b110      	cbz	r0, 8008c8c <_ZN5usart24receive_to_idle_start_itEt+0x3c>
		free(rxbuffer);
 8008c86:	f001 ff73 	bl	800ab70 <free>
	rxbuffer = (uint8_t *)malloc((rxlen +1) * sizeof(uint8_t));
 8008c8a:	8b26      	ldrh	r6, [r4, #24]
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	1870      	adds	r0, r6, r1
 8008c90:	f001 ff3a 	bl	800ab08 <calloc>
 8008c94:	4606      	mov	r6, r0
 8008c96:	6160      	str	r0, [r4, #20]
	if(rxbuffer == NULL){
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d03b      	beq.n	8008d14 <_ZN5usart24receive_to_idle_start_itEt+0xc4>
	_usart -> CR1 |= USART_CR1_PEIE;
 8008c9c:	6823      	ldr	r3, [r4, #0]
	__NVIC_ClearPendingIRQ(IRQn);
 8008c9e:	f994 2024 	ldrsb.w	r2, [r4, #36]	; 0x24
	_usart -> CR1 |= USART_CR1_PEIE;
 8008ca2:	68d9      	ldr	r1, [r3, #12]
 8008ca4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008ca8:	60d9      	str	r1, [r3, #12]
	_usart -> CR3 |= USART_CR3_EIE;
 8008caa:	6959      	ldr	r1, [r3, #20]
  if ((int32_t)(IRQn) >= 0)
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	f041 0101 	orr.w	r1, r1, #1
 8008cb2:	6159      	str	r1, [r3, #20]
 8008cb4:	db0c      	blt.n	8008cd0 <_ZN5usart24receive_to_idle_start_itEt+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cb6:	f002 001f 	and.w	r0, r2, #31
 8008cba:	0952      	lsrs	r2, r2, #5
 8008cbc:	0092      	lsls	r2, r2, #2
 8008cbe:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8008cc2:	f502 4261 	add.w	r2, r2, #57600	; 0xe100
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	4081      	lsls	r1, r0
 8008cca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cce:	6011      	str	r1, [r2, #0]
	volatile uint32_t tmp = _usart -> SR;
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	9201      	str	r2, [sp, #4]
	tmp = _usart -> DR;
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	9201      	str	r2, [sp, #4]
	(void)tmp;
 8008cd8:	9a01      	ldr	r2, [sp, #4]
	stm_ret_t ret = receive_start_it(buffer_size);

	reception = USART_RECEPTION_TOIDLE;

	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008cda:	68da      	ldr	r2, [r3, #12]
	reception = USART_RECEPTION_TOIDLE;
 8008cdc:	2102      	movs	r1, #2
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008cde:	f042 0210 	orr.w	r2, r2, #16

	return ret;
}
 8008ce2:	4628      	mov	r0, r5
	reception = USART_RECEPTION_TOIDLE;
 8008ce4:	7761      	strb	r1, [r4, #29]
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008ce6:	60da      	str	r2, [r3, #12]
}
 8008ce8:	b002      	add	sp, #8
 8008cea:	bd70      	pop	{r4, r5, r6, pc}
			LOG_ERROR(TAG, "%s -> %s, USART not selected receive interrupt.", __FILE__, __FUNCTION__ );
 8008cec:	4b10      	ldr	r3, [pc, #64]	; (8008d30 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8008cee:	4a11      	ldr	r2, [pc, #68]	; (8008d34 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8008cf0:	4911      	ldr	r1, [pc, #68]	; (8008d38 <_ZN5usart24receive_to_idle_start_itEt+0xe8>)
 8008cf2:	4812      	ldr	r0, [pc, #72]	; (8008d3c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8008cf4:	f000 fefc 	bl	8009af0 <LOG_ERROR>
 8008cf8:	e7bf      	b.n	8008c7a <_ZN5usart24receive_to_idle_start_itEt+0x2a>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8008cfa:	f240 12a5 	movw	r2, #421	; 0x1a5
 8008cfe:	2103      	movs	r1, #3
 8008d00:	f001 f868 	bl	8009dd4 <set_return>
		LOG_ERROR(TAG, "%s -> %s, USART not selected interrupt control.", __FILE__, __FUNCTION__ );
 8008d04:	4b0a      	ldr	r3, [pc, #40]	; (8008d30 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8008d06:	4a0b      	ldr	r2, [pc, #44]	; (8008d34 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8008d08:	490d      	ldr	r1, [pc, #52]	; (8008d40 <_ZN5usart24receive_to_idle_start_itEt+0xf0>)
 8008d0a:	480c      	ldr	r0, [pc, #48]	; (8008d3c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8008d0c:	f000 fef0 	bl	8009af0 <LOG_ERROR>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008d10:	6823      	ldr	r3, [r4, #0]
		return ret;
 8008d12:	e7e2      	b.n	8008cda <_ZN5usart24receive_to_idle_start_itEt+0x8a>
		LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
 8008d14:	4b06      	ldr	r3, [pc, #24]	; (8008d30 <_ZN5usart24receive_to_idle_start_itEt+0xe0>)
 8008d16:	4a07      	ldr	r2, [pc, #28]	; (8008d34 <_ZN5usart24receive_to_idle_start_itEt+0xe4>)
 8008d18:	490a      	ldr	r1, [pc, #40]	; (8008d44 <_ZN5usart24receive_to_idle_start_itEt+0xf4>)
 8008d1a:	4808      	ldr	r0, [pc, #32]	; (8008d3c <_ZN5usart24receive_to_idle_start_itEt+0xec>)
 8008d1c:	f000 fee8 	bl	8009af0 <LOG_ERROR>
		set_return(&ret, STM_ERR, __LINE__);
 8008d20:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8008d24:	4631      	mov	r1, r6
 8008d26:	4628      	mov	r0, r5
 8008d28:	f001 f854 	bl	8009dd4 <set_return>
	_usart -> CR1 |= USART_CR1_IDLEIE;
 8008d2c:	6823      	ldr	r3, [r4, #0]
		return ret;
 8008d2e:	e7d4      	b.n	8008cda <_ZN5usart24receive_to_idle_start_itEt+0x8a>
 8008d30:	0800e9e4 	.word	0x0800e9e4
 8008d34:	0800e8ac 	.word	0x0800e8ac
 8008d38:	0800e9f8 	.word	0x0800e9f8
 8008d3c:	0800e8d4 	.word	0x0800e8d4
 8008d40:	0800e9b4 	.word	0x0800e9b4
 8008d44:	0800e944 	.word	0x0800e944

08008d48 <_ZN5usart10get_bufferEPPh>:
	this->endchar = '\0';
	return receive_stop_dma();
}
#endif /* ENABLE_DMA */

stm_ret_t usart::get_buffer(uint8_t **data){
 8008d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d4a:	460c      	mov	r4, r1
	stm_ret_t ret;

	if(rxbuffer != NULL){
 8008d4c:	6949      	ldr	r1, [r1, #20]
	stm_ret_t ret;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	2700      	movs	r7, #0
stm_ret_t usart::get_buffer(uint8_t **data){
 8008d52:	b083      	sub	sp, #12
 8008d54:	4605      	mov	r5, r0
	stm_ret_t ret;
 8008d56:	7003      	strb	r3, [r0, #0]
 8008d58:	6047      	str	r7, [r0, #4]
	if(rxbuffer != NULL){
 8008d5a:	b1b1      	cbz	r1, 8008d8a <_ZN5usart10get_bufferEPPh+0x42>
		rxbuffer[rxcount+1] = '\0';
 8008d5c:	8b63      	ldrh	r3, [r4, #26]
 8008d5e:	4419      	add	r1, r3
 8008d60:	4616      	mov	r6, r2
 8008d62:	704f      	strb	r7, [r1, #1]
		*data = (uint8_t *)malloc(rxcount+1);
 8008d64:	8b62      	ldrh	r2, [r4, #26]
 8008d66:	3201      	adds	r2, #1
 8008d68:	4610      	mov	r0, r2
 8008d6a:	9201      	str	r2, [sp, #4]
 8008d6c:	f001 fef8 	bl	800ab60 <malloc>
 8008d70:	6030      	str	r0, [r6, #0]
			LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
	#endif
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
		memcpy(*data, rxbuffer, rxcount+1);
 8008d72:	6966      	ldr	r6, [r4, #20]
 8008d74:	9a01      	ldr	r2, [sp, #4]
 8008d76:	4631      	mov	r1, r6
 8008d78:	f001 ff02 	bl	800ab80 <memcpy>

		free(rxbuffer);
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f001 fef7 	bl	800ab70 <free>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */

	return ret;
}
 8008d82:	4628      	mov	r0, r5
		rxbuffer = NULL;
 8008d84:	6167      	str	r7, [r4, #20]
}
 8008d86:	b003      	add	sp, #12
 8008d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	set_return(&ret, STM_ERR, __LINE__);
 8008d8a:	f240 22f9 	movw	r2, #761	; 0x2f9
 8008d8e:	f001 f821 	bl	8009dd4 <set_return>
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
 8008d92:	4b04      	ldr	r3, [pc, #16]	; (8008da4 <_ZN5usart10get_bufferEPPh+0x5c>)
 8008d94:	4a04      	ldr	r2, [pc, #16]	; (8008da8 <_ZN5usart10get_bufferEPPh+0x60>)
 8008d96:	4905      	ldr	r1, [pc, #20]	; (8008dac <_ZN5usart10get_bufferEPPh+0x64>)
 8008d98:	4805      	ldr	r0, [pc, #20]	; (8008db0 <_ZN5usart10get_bufferEPPh+0x68>)
 8008d9a:	f000 fea9 	bl	8009af0 <LOG_ERROR>
}
 8008d9e:	4628      	mov	r0, r5
 8008da0:	b003      	add	sp, #12
 8008da2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008da4:	0800ea28 	.word	0x0800ea28
 8008da8:	0800e8ac 	.word	0x0800e8ac
 8008dac:	0800ea34 	.word	0x0800ea34
 8008db0:	0800e8d4 	.word	0x0800e8d4

08008db4 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 8008db4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008db6:	4c3c      	ldr	r4, [pc, #240]	; (8008ea8 <USART1_IRQHandler+0xf4>)
 8008db8:	6823      	ldr	r3, [r4, #0]
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008dbe:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 8008dc0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008dc2:	d51a      	bpl.n	8008dfa <USART1_IRQHandler+0x46>
 8008dc4:	068d      	lsls	r5, r1, #26
 8008dc6:	d518      	bpl.n	8008dfa <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008dcc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008dce:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008dd0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008dd2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008dd4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008dd8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008dda:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ddc:	d93a      	bls.n	8008e54 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008dde:	6962      	ldr	r2, [r4, #20]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008de4:	7f63      	ldrb	r3, [r4, #29]
 8008de6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008de8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008dea:	d04c      	beq.n	8008e86 <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008dec:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008dee:	3301      	adds	r3, #1
 8008df0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008df2:	6923      	ldr	r3, [r4, #16]
 8008df4:	b95b      	cbnz	r3, 8008e0e <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 8008df6:	b005      	add	sp, #20
 8008df8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008dfa:	0650      	lsls	r0, r2, #25
 8008dfc:	d501      	bpl.n	8008e02 <USART1_IRQHandler+0x4e>
 8008dfe:	064d      	lsls	r5, r1, #25
 8008e00:	d41d      	bmi.n	8008e3e <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008e02:	06d0      	lsls	r0, r2, #27
 8008e04:	d408      	bmi.n	8008e18 <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008e06:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f3      	beq.n	8008df6 <USART1_IRQHandler+0x42>
 8008e0e:	68e1      	ldr	r1, [r4, #12]
}
 8008e10:	b005      	add	sp, #20
 8008e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008e16:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008e18:	06ca      	lsls	r2, r1, #27
 8008e1a:	d5f4      	bpl.n	8008e06 <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008e20:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008e22:	6859      	ldr	r1, [r3, #4]
 8008e24:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008e26:	2a02      	cmp	r2, #2
		(void)tmp;
 8008e28:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008e2a:	d1ec      	bne.n	8008e06 <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008e32:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	065b      	lsls	r3, r3, #25
 8008e38:	d40e      	bmi.n	8008e58 <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008e3a:	2004      	movs	r0, #4
 8008e3c:	e7e4      	b.n	8008e08 <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008e46:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008e4e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008e50:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008e52:	e7d9      	b.n	8008e08 <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008e54:	2003      	movs	r0, #3
 8008e56:	e7d7      	b.n	8008e08 <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008e58:	68a0      	ldr	r0, [r4, #8]
 8008e5a:	8b25      	ldrh	r5, [r4, #24]
 8008e5c:	f7fd fb72 	bl	8006544 <_ZN3dma11get_counterEv>
 8008e60:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008e62:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008e64:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008e66:	f7fd fb73 	bl	8006550 <_ZN3dma10get_configEv>
 8008e6a:	7983      	ldrb	r3, [r0, #6]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d0e4      	beq.n	8008e3a <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008e70:	a802      	add	r0, sp, #8
 8008e72:	68a1      	ldr	r1, [r4, #8]
 8008e74:	f7fd fb08 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008e78:	6822      	ldr	r2, [r4, #0]
 8008e7a:	6953      	ldr	r3, [r2, #20]
 8008e7c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008e80:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008e82:	6153      	str	r3, [r2, #20]
 8008e84:	e7c0      	b.n	8008e08 <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008e86:	6961      	ldr	r1, [r4, #20]
 8008e88:	7f22      	ldrb	r2, [r4, #28]
 8008e8a:	5cc9      	ldrb	r1, [r1, r3]
 8008e8c:	4291      	cmp	r1, r2
 8008e8e:	d1ad      	bne.n	8008dec <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008e90:	6822      	ldr	r2, [r4, #0]
 8008e92:	68d1      	ldr	r1, [r2, #12]
 8008e94:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008e98:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008e9a:	6951      	ldr	r1, [r2, #20]
 8008e9c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008ea0:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008ea2:	6151      	str	r1, [r2, #20]
 8008ea4:	e7a3      	b.n	8008dee <USART1_IRQHandler+0x3a>
 8008ea6:	bf00      	nop
 8008ea8:	2000b904 	.word	0x2000b904

08008eac <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 8008eac:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008eae:	4c3c      	ldr	r4, [pc, #240]	; (8008fa0 <USART2_IRQHandler+0xf4>)
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008eb6:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 8008eb8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008eba:	d51a      	bpl.n	8008ef2 <USART2_IRQHandler+0x46>
 8008ebc:	068d      	lsls	r5, r1, #26
 8008ebe:	d518      	bpl.n	8008ef2 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008ec4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ec6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ec8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008eca:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ecc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008ed0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008ed2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008ed4:	d93a      	bls.n	8008f4c <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008ed6:	6962      	ldr	r2, [r4, #20]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008edc:	7f63      	ldrb	r3, [r4, #29]
 8008ede:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008ee0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008ee2:	d04c      	beq.n	8008f7e <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008ee4:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	b95b      	cbnz	r3, 8008f06 <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 8008eee:	b005      	add	sp, #20
 8008ef0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008ef2:	0650      	lsls	r0, r2, #25
 8008ef4:	d501      	bpl.n	8008efa <USART2_IRQHandler+0x4e>
 8008ef6:	064d      	lsls	r5, r1, #25
 8008ef8:	d41d      	bmi.n	8008f36 <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008efa:	06d0      	lsls	r0, r2, #27
 8008efc:	d408      	bmi.n	8008f10 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008efe:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008f00:	6923      	ldr	r3, [r4, #16]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d0f3      	beq.n	8008eee <USART2_IRQHandler+0x42>
 8008f06:	68e1      	ldr	r1, [r4, #12]
}
 8008f08:	b005      	add	sp, #20
 8008f0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008f0e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008f10:	06ca      	lsls	r2, r1, #27
 8008f12:	d5f4      	bpl.n	8008efe <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008f18:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8008f1a:	6859      	ldr	r1, [r3, #4]
 8008f1c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008f1e:	2a02      	cmp	r2, #2
		(void)tmp;
 8008f20:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008f22:	d1ec      	bne.n	8008efe <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8008f2a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	065b      	lsls	r3, r3, #25
 8008f30:	d40e      	bmi.n	8008f50 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8008f32:	2004      	movs	r0, #4
 8008f34:	e7e4      	b.n	8008f00 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8008f3e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008f46:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008f48:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8008f4a:	e7d9      	b.n	8008f00 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8008f4c:	2003      	movs	r0, #3
 8008f4e:	e7d7      	b.n	8008f00 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008f50:	68a0      	ldr	r0, [r4, #8]
 8008f52:	8b25      	ldrh	r5, [r4, #24]
 8008f54:	f7fd faf6 	bl	8006544 <_ZN3dma11get_counterEv>
 8008f58:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008f5a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008f5c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008f5e:	f7fd faf7 	bl	8006550 <_ZN3dma10get_configEv>
 8008f62:	7983      	ldrb	r3, [r0, #6]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d0e4      	beq.n	8008f32 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008f68:	a802      	add	r0, sp, #8
 8008f6a:	68a1      	ldr	r1, [r4, #8]
 8008f6c:	f7fd fa8c 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008f70:	6822      	ldr	r2, [r4, #0]
 8008f72:	6953      	ldr	r3, [r2, #20]
 8008f74:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008f78:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008f7a:	6153      	str	r3, [r2, #20]
 8008f7c:	e7c0      	b.n	8008f00 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008f7e:	6961      	ldr	r1, [r4, #20]
 8008f80:	7f22      	ldrb	r2, [r4, #28]
 8008f82:	5cc9      	ldrb	r1, [r1, r3]
 8008f84:	4291      	cmp	r1, r2
 8008f86:	d1ad      	bne.n	8008ee4 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	68d1      	ldr	r1, [r2, #12]
 8008f8c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008f90:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008f92:	6951      	ldr	r1, [r2, #20]
 8008f94:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008f98:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008f9a:	6151      	str	r1, [r2, #20]
 8008f9c:	e7a3      	b.n	8008ee6 <USART2_IRQHandler+0x3a>
 8008f9e:	bf00      	nop
 8008fa0:	2000b92c 	.word	0x2000b92c

08008fa4 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 8008fa4:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008fa6:	4c3c      	ldr	r4, [pc, #240]	; (8009098 <USART3_IRQHandler+0xf4>)
 8008fa8:	6823      	ldr	r3, [r4, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008fae:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 8008fb0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008fb2:	d51a      	bpl.n	8008fea <USART3_IRQHandler+0x46>
 8008fb4:	068d      	lsls	r5, r1, #26
 8008fb6:	d518      	bpl.n	8008fea <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008fbc:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008fbe:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008fc0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008fc2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008fc4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008fc8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008fca:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008fcc:	d93a      	bls.n	8009044 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008fce:	6962      	ldr	r2, [r4, #20]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008fd4:	7f63      	ldrb	r3, [r4, #29]
 8008fd6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008fd8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008fda:	d04c      	beq.n	8009076 <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008fdc:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008fde:	3301      	adds	r3, #1
 8008fe0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008fe2:	6923      	ldr	r3, [r4, #16]
 8008fe4:	b95b      	cbnz	r3, 8008ffe <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 8008fe6:	b005      	add	sp, #20
 8008fe8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008fea:	0650      	lsls	r0, r2, #25
 8008fec:	d501      	bpl.n	8008ff2 <USART3_IRQHandler+0x4e>
 8008fee:	064d      	lsls	r5, r1, #25
 8008ff0:	d41d      	bmi.n	800902e <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008ff2:	06d0      	lsls	r0, r2, #27
 8008ff4:	d408      	bmi.n	8009008 <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008ff6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008ff8:	6923      	ldr	r3, [r4, #16]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0f3      	beq.n	8008fe6 <USART3_IRQHandler+0x42>
 8008ffe:	68e1      	ldr	r1, [r4, #12]
}
 8009000:	b005      	add	sp, #20
 8009002:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8009006:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8009008:	06ca      	lsls	r2, r1, #27
 800900a:	d5f4      	bpl.n	8008ff6 <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009010:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8009012:	6859      	ldr	r1, [r3, #4]
 8009014:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009016:	2a02      	cmp	r2, #2
		(void)tmp;
 8009018:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800901a:	d1ec      	bne.n	8008ff6 <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009022:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8009024:	695b      	ldr	r3, [r3, #20]
 8009026:	065b      	lsls	r3, r3, #25
 8009028:	d40e      	bmi.n	8009048 <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800902a:	2004      	movs	r0, #4
 800902c:	e7e4      	b.n	8008ff8 <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8009036:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800903e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009040:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8009042:	e7d9      	b.n	8008ff8 <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8009044:	2003      	movs	r0, #3
 8009046:	e7d7      	b.n	8008ff8 <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009048:	68a0      	ldr	r0, [r4, #8]
 800904a:	8b25      	ldrh	r5, [r4, #24]
 800904c:	f7fd fa7a 	bl	8006544 <_ZN3dma11get_counterEv>
 8009050:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009052:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009054:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009056:	f7fd fa7b 	bl	8006550 <_ZN3dma10get_configEv>
 800905a:	7983      	ldrb	r3, [r0, #6]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d0e4      	beq.n	800902a <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009060:	a802      	add	r0, sp, #8
 8009062:	68a1      	ldr	r1, [r4, #8]
 8009064:	f7fd fa10 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009068:	6822      	ldr	r2, [r4, #0]
 800906a:	6953      	ldr	r3, [r2, #20]
 800906c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009070:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009072:	6153      	str	r3, [r2, #20]
 8009074:	e7c0      	b.n	8008ff8 <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8009076:	6961      	ldr	r1, [r4, #20]
 8009078:	7f22      	ldrb	r2, [r4, #28]
 800907a:	5cc9      	ldrb	r1, [r1, r3]
 800907c:	4291      	cmp	r1, r2
 800907e:	d1ad      	bne.n	8008fdc <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	68d1      	ldr	r1, [r2, #12]
 8009084:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009088:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800908a:	6951      	ldr	r1, [r2, #20]
 800908c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009090:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009092:	6151      	str	r1, [r2, #20]
 8009094:	e7a3      	b.n	8008fde <USART3_IRQHandler+0x3a>
 8009096:	bf00      	nop
 8009098:	2000b954 	.word	0x2000b954

0800909c <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 800909c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800909e:	4c3c      	ldr	r4, [pc, #240]	; (8009190 <UART4_IRQHandler+0xf4>)
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80090a6:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 80090a8:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80090aa:	d51a      	bpl.n	80090e2 <UART4_IRQHandler+0x46>
 80090ac:	068d      	lsls	r5, r1, #26
 80090ae:	d518      	bpl.n	80090e2 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80090b4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80090b6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80090b8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80090ba:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80090bc:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80090c0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80090c2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80090c4:	d93a      	bls.n	800913c <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80090c6:	6962      	ldr	r2, [r4, #20]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80090cc:	7f63      	ldrb	r3, [r4, #29]
 80090ce:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80090d0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80090d2:	d04c      	beq.n	800916e <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80090d4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80090d6:	3301      	adds	r3, #1
 80090d8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	b95b      	cbnz	r3, 80090f6 <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 80090de:	b005      	add	sp, #20
 80090e0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80090e2:	0650      	lsls	r0, r2, #25
 80090e4:	d501      	bpl.n	80090ea <UART4_IRQHandler+0x4e>
 80090e6:	064d      	lsls	r5, r1, #25
 80090e8:	d41d      	bmi.n	8009126 <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80090ea:	06d0      	lsls	r0, r2, #27
 80090ec:	d408      	bmi.n	8009100 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80090ee:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80090f0:	6923      	ldr	r3, [r4, #16]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f3      	beq.n	80090de <UART4_IRQHandler+0x42>
 80090f6:	68e1      	ldr	r1, [r4, #12]
}
 80090f8:	b005      	add	sp, #20
 80090fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80090fe:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8009100:	06ca      	lsls	r2, r1, #27
 8009102:	d5f4      	bpl.n	80090ee <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009108:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800910a:	6859      	ldr	r1, [r3, #4]
 800910c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800910e:	2a02      	cmp	r2, #2
		(void)tmp;
 8009110:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009112:	d1ec      	bne.n	80090ee <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800911a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	065b      	lsls	r3, r3, #25
 8009120:	d40e      	bmi.n	8009140 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8009122:	2004      	movs	r0, #4
 8009124:	e7e4      	b.n	80090f0 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800912e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009136:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009138:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800913a:	e7d9      	b.n	80090f0 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800913c:	2003      	movs	r0, #3
 800913e:	e7d7      	b.n	80090f0 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009140:	68a0      	ldr	r0, [r4, #8]
 8009142:	8b25      	ldrh	r5, [r4, #24]
 8009144:	f7fd f9fe 	bl	8006544 <_ZN3dma11get_counterEv>
 8009148:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800914a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800914c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800914e:	f7fd f9ff 	bl	8006550 <_ZN3dma10get_configEv>
 8009152:	7983      	ldrb	r3, [r0, #6]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d0e4      	beq.n	8009122 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009158:	a802      	add	r0, sp, #8
 800915a:	68a1      	ldr	r1, [r4, #8]
 800915c:	f7fd f994 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009160:	6822      	ldr	r2, [r4, #0]
 8009162:	6953      	ldr	r3, [r2, #20]
 8009164:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009168:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800916a:	6153      	str	r3, [r2, #20]
 800916c:	e7c0      	b.n	80090f0 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800916e:	6961      	ldr	r1, [r4, #20]
 8009170:	7f22      	ldrb	r2, [r4, #28]
 8009172:	5cc9      	ldrb	r1, [r1, r3]
 8009174:	4291      	cmp	r1, r2
 8009176:	d1ad      	bne.n	80090d4 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009178:	6822      	ldr	r2, [r4, #0]
 800917a:	68d1      	ldr	r1, [r2, #12]
 800917c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009180:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009182:	6951      	ldr	r1, [r2, #20]
 8009184:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009188:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800918a:	6151      	str	r1, [r2, #20]
 800918c:	e7a3      	b.n	80090d6 <UART4_IRQHandler+0x3a>
 800918e:	bf00      	nop
 8009190:	2000b864 	.word	0x2000b864

08009194 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 8009194:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8009196:	4c3c      	ldr	r4, [pc, #240]	; (8009288 <UART5_IRQHandler+0xf4>)
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800919e:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 80091a0:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 80091a2:	d51a      	bpl.n	80091da <UART5_IRQHandler+0x46>
 80091a4:	068d      	lsls	r5, r1, #26
 80091a6:	d518      	bpl.n	80091da <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80091ac:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80091ae:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80091b0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80091b2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80091b4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80091b8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80091ba:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80091bc:	d93a      	bls.n	8009234 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80091be:	6962      	ldr	r2, [r4, #20]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80091c4:	7f63      	ldrb	r3, [r4, #29]
 80091c6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80091c8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80091ca:	d04c      	beq.n	8009266 <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80091cc:	2002      	movs	r0, #2
		usart -> rxcount++;
 80091ce:	3301      	adds	r3, #1
 80091d0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	b95b      	cbnz	r3, 80091ee <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 80091d6:	b005      	add	sp, #20
 80091d8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80091da:	0650      	lsls	r0, r2, #25
 80091dc:	d501      	bpl.n	80091e2 <UART5_IRQHandler+0x4e>
 80091de:	064d      	lsls	r5, r1, #25
 80091e0:	d41d      	bmi.n	800921e <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80091e2:	06d0      	lsls	r0, r2, #27
 80091e4:	d408      	bmi.n	80091f8 <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80091e6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80091e8:	6923      	ldr	r3, [r4, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0f3      	beq.n	80091d6 <UART5_IRQHandler+0x42>
 80091ee:	68e1      	ldr	r1, [r4, #12]
}
 80091f0:	b005      	add	sp, #20
 80091f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80091f6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80091f8:	06ca      	lsls	r2, r1, #27
 80091fa:	d5f4      	bpl.n	80091e6 <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80091fc:	681a      	ldr	r2, [r3, #0]
 80091fe:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009200:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8009202:	6859      	ldr	r1, [r3, #4]
 8009204:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009206:	2a02      	cmp	r2, #2
		(void)tmp;
 8009208:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800920a:	d1ec      	bne.n	80091e6 <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009212:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8009214:	695b      	ldr	r3, [r3, #20]
 8009216:	065b      	lsls	r3, r3, #25
 8009218:	d40e      	bmi.n	8009238 <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800921a:	2004      	movs	r0, #4
 800921c:	e7e4      	b.n	80091e8 <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8009226:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800922e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009230:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8009232:	e7d9      	b.n	80091e8 <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8009234:	2003      	movs	r0, #3
 8009236:	e7d7      	b.n	80091e8 <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009238:	68a0      	ldr	r0, [r4, #8]
 800923a:	8b25      	ldrh	r5, [r4, #24]
 800923c:	f7fd f982 	bl	8006544 <_ZN3dma11get_counterEv>
 8009240:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009242:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009244:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009246:	f7fd f983 	bl	8006550 <_ZN3dma10get_configEv>
 800924a:	7983      	ldrb	r3, [r0, #6]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d0e4      	beq.n	800921a <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009250:	a802      	add	r0, sp, #8
 8009252:	68a1      	ldr	r1, [r4, #8]
 8009254:	f7fd f918 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009258:	6822      	ldr	r2, [r4, #0]
 800925a:	6953      	ldr	r3, [r2, #20]
 800925c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009260:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009262:	6153      	str	r3, [r2, #20]
 8009264:	e7c0      	b.n	80091e8 <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8009266:	6961      	ldr	r1, [r4, #20]
 8009268:	7f22      	ldrb	r2, [r4, #28]
 800926a:	5cc9      	ldrb	r1, [r1, r3]
 800926c:	4291      	cmp	r1, r2
 800926e:	d1ad      	bne.n	80091cc <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009270:	6822      	ldr	r2, [r4, #0]
 8009272:	68d1      	ldr	r1, [r2, #12]
 8009274:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009278:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800927a:	6951      	ldr	r1, [r2, #20]
 800927c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009280:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009282:	6151      	str	r1, [r2, #20]
 8009284:	e7a3      	b.n	80091ce <UART5_IRQHandler+0x3a>
 8009286:	bf00      	nop
 8009288:	2000b88c 	.word	0x2000b88c

0800928c <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 800928c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800928e:	4c3c      	ldr	r4, [pc, #240]	; (8009380 <USART6_IRQHandler+0xf4>)
 8009290:	6823      	ldr	r3, [r4, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009296:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 8009298:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800929a:	d51a      	bpl.n	80092d2 <USART6_IRQHandler+0x46>
 800929c:	068d      	lsls	r5, r1, #26
 800929e:	d518      	bpl.n	80092d2 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	9200      	str	r2, [sp, #0]
		(void)tmp;
 80092a4:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 80092a6:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80092a8:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80092aa:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80092ac:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80092b0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80092b2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80092b4:	d93a      	bls.n	800932c <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80092b6:	6962      	ldr	r2, [r4, #20]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80092bc:	7f63      	ldrb	r3, [r4, #29]
 80092be:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80092c0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80092c2:	d04c      	beq.n	800935e <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80092c4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80092c6:	3301      	adds	r3, #1
 80092c8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80092ca:	6923      	ldr	r3, [r4, #16]
 80092cc:	b95b      	cbnz	r3, 80092e6 <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 80092ce:	b005      	add	sp, #20
 80092d0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80092d2:	0650      	lsls	r0, r2, #25
 80092d4:	d501      	bpl.n	80092da <USART6_IRQHandler+0x4e>
 80092d6:	064d      	lsls	r5, r1, #25
 80092d8:	d41d      	bmi.n	8009316 <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80092da:	06d0      	lsls	r0, r2, #27
 80092dc:	d408      	bmi.n	80092f0 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80092de:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80092e0:	6923      	ldr	r3, [r4, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f3      	beq.n	80092ce <USART6_IRQHandler+0x42>
 80092e6:	68e1      	ldr	r1, [r4, #12]
}
 80092e8:	b005      	add	sp, #20
 80092ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80092ee:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80092f0:	06ca      	lsls	r2, r1, #27
 80092f2:	d5f4      	bpl.n	80092de <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80092f8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80092fa:	6859      	ldr	r1, [r3, #4]
 80092fc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80092fe:	2a02      	cmp	r2, #2
		(void)tmp;
 8009300:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8009302:	d1ec      	bne.n	80092de <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800930a:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 800930c:	695b      	ldr	r3, [r3, #20]
 800930e:	065b      	lsls	r3, r3, #25
 8009310:	d40e      	bmi.n	8009330 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8009312:	2004      	movs	r0, #4
 8009314:	e7e4      	b.n	80092e0 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800931e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009326:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009328:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800932a:	e7d9      	b.n	80092e0 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800932c:	2003      	movs	r0, #3
 800932e:	e7d7      	b.n	80092e0 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009330:	68a0      	ldr	r0, [r4, #8]
 8009332:	8b25      	ldrh	r5, [r4, #24]
 8009334:	f7fd f906 	bl	8006544 <_ZN3dma11get_counterEv>
 8009338:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800933a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800933c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800933e:	f7fd f907 	bl	8006550 <_ZN3dma10get_configEv>
 8009342:	7983      	ldrb	r3, [r0, #6]
 8009344:	2b01      	cmp	r3, #1
 8009346:	d0e4      	beq.n	8009312 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009348:	a802      	add	r0, sp, #8
 800934a:	68a1      	ldr	r1, [r4, #8]
 800934c:	f7fd f89c 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	6953      	ldr	r3, [r2, #20]
 8009354:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009358:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800935a:	6153      	str	r3, [r2, #20]
 800935c:	e7c0      	b.n	80092e0 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800935e:	6961      	ldr	r1, [r4, #20]
 8009360:	7f22      	ldrb	r2, [r4, #28]
 8009362:	5cc9      	ldrb	r1, [r1, r3]
 8009364:	4291      	cmp	r1, r2
 8009366:	d1ad      	bne.n	80092c4 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	68d1      	ldr	r1, [r2, #12]
 800936c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009370:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009372:	6951      	ldr	r1, [r2, #20]
 8009374:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009378:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800937a:	6151      	str	r1, [r2, #20]
 800937c:	e7a3      	b.n	80092c6 <USART6_IRQHandler+0x3a>
 800937e:	bf00      	nop
 8009380:	2000b97c 	.word	0x2000b97c

08009384 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 8009384:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8009386:	4c3c      	ldr	r4, [pc, #240]	; (8009478 <UART7_IRQHandler+0xf4>)
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800938e:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 8009390:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009392:	d51a      	bpl.n	80093ca <UART7_IRQHandler+0x46>
 8009394:	068d      	lsls	r5, r1, #26
 8009396:	d518      	bpl.n	80093ca <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800939c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800939e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80093a0:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80093a2:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80093a4:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80093a8:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80093aa:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80093ac:	d93a      	bls.n	8009424 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80093ae:	6962      	ldr	r2, [r4, #20]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80093b4:	7f63      	ldrb	r3, [r4, #29]
 80093b6:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80093b8:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80093ba:	d04c      	beq.n	8009456 <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80093bc:	2002      	movs	r0, #2
		usart -> rxcount++;
 80093be:	3301      	adds	r3, #1
 80093c0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	b95b      	cbnz	r3, 80093de <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 80093c6:	b005      	add	sp, #20
 80093c8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80093ca:	0650      	lsls	r0, r2, #25
 80093cc:	d501      	bpl.n	80093d2 <UART7_IRQHandler+0x4e>
 80093ce:	064d      	lsls	r5, r1, #25
 80093d0:	d41d      	bmi.n	800940e <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80093d2:	06d0      	lsls	r0, r2, #27
 80093d4:	d408      	bmi.n	80093e8 <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80093d6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80093d8:	6923      	ldr	r3, [r4, #16]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d0f3      	beq.n	80093c6 <UART7_IRQHandler+0x42>
 80093de:	68e1      	ldr	r1, [r4, #12]
}
 80093e0:	b005      	add	sp, #20
 80093e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80093e6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80093e8:	06ca      	lsls	r2, r1, #27
 80093ea:	d5f4      	bpl.n	80093d6 <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80093f0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80093f2:	6859      	ldr	r1, [r3, #4]
 80093f4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80093f6:	2a02      	cmp	r2, #2
		(void)tmp;
 80093f8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80093fa:	d1ec      	bne.n	80093d6 <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8009402:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	065b      	lsls	r3, r3, #25
 8009408:	d40e      	bmi.n	8009428 <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 800940a:	2004      	movs	r0, #4
 800940c:	e7e4      	b.n	80093d8 <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8009412:	685a      	ldr	r2, [r3, #4]
 8009414:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8009416:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 800941e:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009420:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8009422:	e7d9      	b.n	80093d8 <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8009424:	2003      	movs	r0, #3
 8009426:	e7d7      	b.n	80093d8 <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009428:	68a0      	ldr	r0, [r4, #8]
 800942a:	8b25      	ldrh	r5, [r4, #24]
 800942c:	f7fd f88a 	bl	8006544 <_ZN3dma11get_counterEv>
 8009430:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009432:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009434:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8009436:	f7fd f88b 	bl	8006550 <_ZN3dma10get_configEv>
 800943a:	7983      	ldrb	r3, [r0, #6]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d0e4      	beq.n	800940a <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009440:	a802      	add	r0, sp, #8
 8009442:	68a1      	ldr	r1, [r4, #8]
 8009444:	f7fd f820 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009448:	6822      	ldr	r2, [r4, #0]
 800944a:	6953      	ldr	r3, [r2, #20]
 800944c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009450:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009452:	6153      	str	r3, [r2, #20]
 8009454:	e7c0      	b.n	80093d8 <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8009456:	6961      	ldr	r1, [r4, #20]
 8009458:	7f22      	ldrb	r2, [r4, #28]
 800945a:	5cc9      	ldrb	r1, [r1, r3]
 800945c:	4291      	cmp	r1, r2
 800945e:	d1ad      	bne.n	80093bc <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009460:	6822      	ldr	r2, [r4, #0]
 8009462:	68d1      	ldr	r1, [r2, #12]
 8009464:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009468:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800946a:	6951      	ldr	r1, [r2, #20]
 800946c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009470:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009472:	6151      	str	r1, [r2, #20]
 8009474:	e7a3      	b.n	80093be <UART7_IRQHandler+0x3a>
 8009476:	bf00      	nop
 8009478:	2000b8b4 	.word	0x2000b8b4

0800947c <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 800947c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800947e:	4c3c      	ldr	r4, [pc, #240]	; (8009570 <UART8_IRQHandler+0xf4>)
 8009480:	6823      	ldr	r3, [r4, #0]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8009486:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 8009488:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800948a:	d51a      	bpl.n	80094c2 <UART8_IRQHandler+0x46>
 800948c:	068d      	lsls	r5, r1, #26
 800948e:	d518      	bpl.n	80094c2 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8009494:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8009496:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8009498:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800949a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800949c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 80094a0:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80094a2:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 80094a4:	d93a      	bls.n	800951c <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80094a6:	6962      	ldr	r2, [r4, #20]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80094ac:	7f63      	ldrb	r3, [r4, #29]
 80094ae:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80094b0:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80094b2:	d04c      	beq.n	800954e <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 80094b4:	2002      	movs	r0, #2
		usart -> rxcount++;
 80094b6:	3301      	adds	r3, #1
 80094b8:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	b95b      	cbnz	r3, 80094d6 <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 80094be:	b005      	add	sp, #20
 80094c0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 80094c2:	0650      	lsls	r0, r2, #25
 80094c4:	d501      	bpl.n	80094ca <UART8_IRQHandler+0x4e>
 80094c6:	064d      	lsls	r5, r1, #25
 80094c8:	d41d      	bmi.n	8009506 <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80094ca:	06d0      	lsls	r0, r2, #27
 80094cc:	d408      	bmi.n	80094e0 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80094ce:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80094d0:	6923      	ldr	r3, [r4, #16]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0f3      	beq.n	80094be <UART8_IRQHandler+0x42>
 80094d6:	68e1      	ldr	r1, [r4, #12]
}
 80094d8:	b005      	add	sp, #20
 80094da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80094de:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80094e0:	06ca      	lsls	r2, r1, #27
 80094e2:	d5f4      	bpl.n	80094ce <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80094e8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80094ea:	6859      	ldr	r1, [r3, #4]
 80094ec:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80094ee:	2a02      	cmp	r2, #2
		(void)tmp;
 80094f0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80094f2:	d1ec      	bne.n	80094ce <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80094fa:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	065b      	lsls	r3, r3, #25
 8009500:	d40e      	bmi.n	8009520 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8009502:	2004      	movs	r0, #4
 8009504:	e7e4      	b.n	80094d0 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	9202      	str	r2, [sp, #8]
		(void)tmp;
 800950e:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8009516:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8009518:	601a      	str	r2, [r3, #0]
		goto EventCB;
 800951a:	e7d9      	b.n	80094d0 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 800951c:	2003      	movs	r0, #3
 800951e:	e7d7      	b.n	80094d0 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8009520:	68a0      	ldr	r0, [r4, #8]
 8009522:	8b25      	ldrh	r5, [r4, #24]
 8009524:	f7fd f80e 	bl	8006544 <_ZN3dma11get_counterEv>
 8009528:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800952a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800952c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800952e:	f7fd f80f 	bl	8006550 <_ZN3dma10get_configEv>
 8009532:	7983      	ldrb	r3, [r0, #6]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d0e4      	beq.n	8009502 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8009538:	a802      	add	r0, sp, #8
 800953a:	68a1      	ldr	r1, [r4, #8]
 800953c:	f7fc ffa4 	bl	8006488 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	6953      	ldr	r3, [r2, #20]
 8009544:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8009548:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800954a:	6153      	str	r3, [r2, #20]
 800954c:	e7c0      	b.n	80094d0 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800954e:	6961      	ldr	r1, [r4, #20]
 8009550:	7f22      	ldrb	r2, [r4, #28]
 8009552:	5cc9      	ldrb	r1, [r1, r3]
 8009554:	4291      	cmp	r1, r2
 8009556:	d1ad      	bne.n	80094b4 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8009558:	6822      	ldr	r2, [r4, #0]
 800955a:	68d1      	ldr	r1, [r2, #12]
 800955c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009560:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8009562:	6951      	ldr	r1, [r2, #20]
 8009564:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8009568:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800956a:	6151      	str	r1, [r2, #20]
 800956c:	e7a3      	b.n	80094b6 <UART8_IRQHandler+0x3a>
 800956e:	bf00      	nop
 8009570:	2000b8dc 	.word	0x2000b8dc

08009574 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 8009574:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800965c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 8009578:	482d      	ldr	r0, [pc, #180]	; (8009630 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 800957a:	492e      	ldr	r1, [pc, #184]	; (8009634 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 800957c:	4a2e      	ldr	r2, [pc, #184]	; (8009638 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 800957e:	2300      	movs	r3, #0
}
 8009580:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 8009582:	4f2e      	ldr	r7, [pc, #184]	; (800963c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 8009584:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8009660 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 8009588:	4e2d      	ldr	r6, [pc, #180]	; (8009640 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 800958a:	f8cc 3014 	str.w	r3, [ip, #20]
 800958e:	e9cc 3301 	strd	r3, r3, [ip, #4]
 8009592:	e9cc 3303 	strd	r3, r3, [ip, #12]
 8009596:	f8ac 301c 	strh.w	r3, [ip, #28]
 800959a:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 800959e:	f8cc e000 	str.w	lr, [ip]
 80095a2:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8009664 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 80095a6:	4c27      	ldr	r4, [pc, #156]	; (8009644 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 80095a8:	4d27      	ldr	r5, [pc, #156]	; (8009648 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e9c7 3301 	strd	r3, r3, [r7, #4]
 80095b0:	e9c7 3303 	strd	r3, r3, [r7, #12]
 80095b4:	83bb      	strh	r3, [r7, #28]
 80095b6:	623b      	str	r3, [r7, #32]
	_usart = usart;
 80095b8:	f8c7 c000 	str.w	ip, [r7]
 80095bc:	4f23      	ldr	r7, [pc, #140]	; (800964c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 80095be:	6173      	str	r3, [r6, #20]
 80095c0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80095c4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80095c8:	83b3      	strh	r3, [r6, #28]
 80095ca:	6233      	str	r3, [r6, #32]
	_usart = usart;
 80095cc:	6037      	str	r7, [r6, #0]
 80095ce:	4e20      	ldr	r6, [pc, #128]	; (8009650 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 80095d0:	616b      	str	r3, [r5, #20]
 80095d2:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80095d6:	e9c5 3303 	strd	r3, r3, [r5, #12]
 80095da:	83ab      	strh	r3, [r5, #28]
 80095dc:	622b      	str	r3, [r5, #32]
	_usart = usart;
 80095de:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 80095e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80095e4:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80095e8:	6163      	str	r3, [r4, #20]
 80095ea:	83a3      	strh	r3, [r4, #28]
 80095ec:	6223      	str	r3, [r4, #32]
 80095ee:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80095f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095f6:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80095fa:	e9c1 3303 	strd	r3, r3, [r1, #12]
 80095fe:	e9c2 3301 	strd	r3, r3, [r2, #4]
 8009602:	e9c2 3303 	strd	r3, r3, [r2, #12]
 8009606:	6143      	str	r3, [r0, #20]
 8009608:	8383      	strh	r3, [r0, #28]
 800960a:	6203      	str	r3, [r0, #32]
 800960c:	614b      	str	r3, [r1, #20]
 800960e:	838b      	strh	r3, [r1, #28]
 8009610:	620b      	str	r3, [r1, #32]
 8009612:	6153      	str	r3, [r2, #20]
 8009614:	8393      	strh	r3, [r2, #28]
 8009616:	6213      	str	r3, [r2, #32]
	_usart = usart;
 8009618:	4b0e      	ldr	r3, [pc, #56]	; (8009654 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 8009620:	4c0d      	ldr	r4, [pc, #52]	; (8009658 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 8009622:	6003      	str	r3, [r0, #0]
 8009624:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8009628:	600c      	str	r4, [r1, #0]
 800962a:	6013      	str	r3, [r2, #0]
}
 800962c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800962e:	bf00      	nop
 8009630:	2000b88c 	.word	0x2000b88c
 8009634:	2000b97c 	.word	0x2000b97c
 8009638:	2000b8b4 	.word	0x2000b8b4
 800963c:	2000b92c 	.word	0x2000b92c
 8009640:	2000b954 	.word	0x2000b954
 8009644:	2000b8dc 	.word	0x2000b8dc
 8009648:	2000b864 	.word	0x2000b864
 800964c:	40004800 	.word	0x40004800
 8009650:	40004c00 	.word	0x40004c00
 8009654:	40007c00 	.word	0x40007c00
 8009658:	40011400 	.word	0x40011400
 800965c:	2000b904 	.word	0x2000b904
 8009660:	40011000 	.word	0x40011000
 8009664:	40004400 	.word	0x40004400

08009668 <__NVIC_SystemReset>:
 8009668:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800966c:	4905      	ldr	r1, [pc, #20]	; (8009684 <__NVIC_SystemReset+0x1c>)
 800966e:	4b06      	ldr	r3, [pc, #24]	; (8009688 <__NVIC_SystemReset+0x20>)
 8009670:	68ca      	ldr	r2, [r1, #12]
 8009672:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009676:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009678:	60cb      	str	r3, [r1, #12]
 800967a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800967e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8009680:	e7fd      	b.n	800967e <__NVIC_SystemReset+0x16>
 8009682:	bf00      	nop
 8009684:	e000ed00 	.word	0xe000ed00
 8009688:	05fa0004 	.word	0x05fa0004

0800968c <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 800968c:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 800968e:	4807      	ldr	r0, [pc, #28]	; (80096ac <app_main_task+0x20>)
 8009690:	4907      	ldr	r1, [pc, #28]	; (80096b0 <app_main_task+0x24>)
 8009692:	f000 f9b1 	bl	80099f8 <LOG_INFO>
	extern void app_main(void);
	app_main();
 8009696:	f001 f917 	bl	800a8c8 <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 800969a:	4804      	ldr	r0, [pc, #16]	; (80096ac <app_main_task+0x20>)
 800969c:	4905      	ldr	r1, [pc, #20]	; (80096b4 <app_main_task+0x28>)
 800969e:	f000 f9ab 	bl	80099f8 <LOG_INFO>
	vTaskDelete(NULL);
}
 80096a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 80096a6:	2000      	movs	r0, #0
 80096a8:	f7f9 bb96 	b.w	8002dd8 <vTaskDelete>
 80096ac:	0800ea70 	.word	0x0800ea70
 80096b0:	0800ea5c 	.word	0x0800ea5c
 80096b4:	0800ea78 	.word	0x0800ea78

080096b8 <uart_log>:

	uart_log((char *)"\r\n\r\n");
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 80096b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ba:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80096bc:	2100      	movs	r1, #0
static void uart_log(char *log){
 80096be:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80096c0:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096c2:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80096c6:	4d19      	ldr	r5, [pc, #100]	; (800972c <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 80096c8:	b93c      	cbnz	r4, 80096da <uart_log+0x22>
 80096ca:	6828      	ldr	r0, [r5, #0]
 80096cc:	210a      	movs	r1, #10
 80096ce:	f7f8 fdd3 	bl	8002278 <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 80096d2:	2801      	cmp	r0, #1
 80096d4:	d01f      	beq.n	8009716 <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 80096d6:	b003      	add	sp, #12
 80096d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80096da:	af01      	add	r7, sp, #4
 80096dc:	6828      	ldr	r0, [r5, #0]
 80096de:	463a      	mov	r2, r7
 80096e0:	f7f8 ff54 	bl	800258c <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 80096e4:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80096e6:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 80096e8:	d1f5      	bne.n	80096d6 <uart_log+0x1e>
		while(*log) {
 80096ea:	7833      	ldrb	r3, [r6, #0]
 80096ec:	b1c3      	cbz	r3, 8009720 <uart_log+0x68>
			log_uart -> DR = *log++;
 80096ee:	4a10      	ldr	r2, [pc, #64]	; (8009730 <uart_log+0x78>)
 80096f0:	4631      	mov	r1, r6
 80096f2:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 80096f4:	6813      	ldr	r3, [r2, #0]
 80096f6:	065b      	lsls	r3, r3, #25
 80096f8:	d5fc      	bpl.n	80096f4 <uart_log+0x3c>
		while(*log) {
 80096fa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1f7      	bne.n	80096f2 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009702:	2c01      	cmp	r4, #1
 8009704:	d00b      	beq.n	800971e <uart_log+0x66>
 8009706:	2300      	movs	r3, #0
 8009708:	6828      	ldr	r0, [r5, #0]
 800970a:	461a      	mov	r2, r3
 800970c:	4619      	mov	r1, r3
 800970e:	f7f8 f9bd 	bl	8001a8c <xQueueGenericSend>
}
 8009712:	b003      	add	sp, #12
 8009714:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 8009716:	7833      	ldrb	r3, [r6, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e8      	bne.n	80096ee <uart_log+0x36>
 800971c:	e7f3      	b.n	8009706 <uart_log+0x4e>
 800971e:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009720:	6828      	ldr	r0, [r5, #0]
 8009722:	4639      	mov	r1, r7
 8009724:	f7f8 fbce 	bl	8001ec4 <xQueueGiveFromISR>
}
 8009728:	b003      	add	sp, #12
 800972a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800972c:	2000b9a4 	.word	0x2000b9a4
 8009730:	40011400 	.word	0x40011400
 8009734:	00000000 	.word	0x00000000

08009738 <main_application>:
int main_application(void){
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	b085      	sub	sp, #20
	system_init();
 800973c:	f000 fb74 	bl	8009e28 <system_init>
	rcc_init(&rcc);
 8009740:	4979      	ldr	r1, [pc, #484]	; (8009928 <main_application+0x1f0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8009742:	4e7a      	ldr	r6, [pc, #488]	; (800992c <main_application+0x1f4>)
	rcc_init(&rcc);
 8009744:	a802      	add	r0, sp, #8
 8009746:	f7fd fe57 	bl	80073f8 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 800974a:	4879      	ldr	r0, [pc, #484]	; (8009930 <main_application+0x1f8>)
 800974c:	f7fd fc98 	bl	8007080 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 8009750:	4878      	ldr	r0, [pc, #480]	; (8009934 <main_application+0x1fc>)
 8009752:	f7fd fbcd 	bl	8006ef0 <fmc_sdram_init>
	sdram_init();
 8009756:	f7fd f9ab 	bl	8006ab0 <sdram_init>
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 800975a:	2104      	movs	r1, #4
 800975c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8009760:	a802      	add	r0, sp, #8
 8009762:	f7fd fe1b 	bl	800739c <iwdg_init>
	iwdg_disable_in_debugmode();
 8009766:	f7fd fe37 	bl	80073d8 <iwdg_disable_in_debugmode>
	rng_init();
 800976a:	f7fe f843 	bl	80077f4 <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800976e:	2001      	movs	r0, #1
 8009770:	f7f8 fb0a 	bl	8001d88 <xQueueCreateMutex>
 8009774:	4b70      	ldr	r3, [pc, #448]	; (8009938 <main_application+0x200>)
 8009776:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 8009778:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800977a:	4870      	ldr	r0, [pc, #448]	; (800993c <main_application+0x204>)
	log_semaph = xSemaphoreCreateMutex();
 800977c:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 800977e:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 8009780:	f7fd fc7e 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 8009784:	486d      	ldr	r0, [pc, #436]	; (800993c <main_application+0x204>)
 8009786:	f7fd fc7b 	bl	8007080 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 800978a:	486c      	ldr	r0, [pc, #432]	; (800993c <main_application+0x204>)
 800978c:	2208      	movs	r2, #8
 800978e:	210e      	movs	r1, #14
 8009790:	f7fd fd5e 	bl	8007250 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 8009794:	2109      	movs	r1, #9
 8009796:	4869      	ldr	r0, [pc, #420]	; (800993c <main_application+0x204>)
 8009798:	2208      	movs	r2, #8
 800979a:	f7fd fd59 	bl	8007250 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800979e:	4a68      	ldr	r2, [pc, #416]	; (8009940 <main_application+0x208>)
 80097a0:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80097a2:	f043 0320 	orr.w	r3, r3, #32
 80097a6:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 80097a8:	2003      	movs	r0, #3
 80097aa:	f7fd ffbb 	bl	8007724 <rcc_get_bus_frequency>
 80097ae:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80097b0:	68f3      	ldr	r3, [r6, #12]
 80097b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80097b6:	f043 030c 	orr.w	r3, r3, #12
 80097ba:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 80097bc:	9802      	ldr	r0, [sp, #8]
 80097be:	f7f6 fec1 	bl	8000544 <__aeabi_ui2d>
 80097c2:	a355      	add	r3, pc, #340	; (adr r3, 8009918 <main_application+0x1e0>)
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	f7f6 ff36 	bl	8000638 <__aeabi_dmul>
 80097cc:	f7f7 fa2c 	bl	8000c28 <__aeabi_d2f>
 80097d0:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 80097d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 80097d8:	ee17 3a90 	vmov	r3, s15
 80097dc:	b29c      	uxth	r4, r3
 80097de:	f7f6 fed3 	bl	8000588 <__aeabi_f2d>
 80097e2:	4b58      	ldr	r3, [pc, #352]	; (8009944 <main_application+0x20c>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	f7f6 ff27 	bl	8000638 <__aeabi_dmul>
 80097ea:	f7f7 f9fd 	bl	8000be8 <__aeabi_d2uiz>
 80097ee:	4607      	mov	r7, r0
 80097f0:	4620      	mov	r0, r4
 80097f2:	f7f6 feb7 	bl	8000564 <__aeabi_i2d>
 80097f6:	4b53      	ldr	r3, [pc, #332]	; (8009944 <main_application+0x20c>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	f7f6 ff1d 	bl	8000638 <__aeabi_dmul>
 80097fe:	f7f7 f9f3 	bl	8000be8 <__aeabi_d2uiz>
 8009802:	b2bf      	uxth	r7, r7
 8009804:	b280      	uxth	r0, r0
 8009806:	1a38      	subs	r0, r7, r0
 8009808:	f7f6 feac 	bl	8000564 <__aeabi_i2d>
 800980c:	a344      	add	r3, pc, #272	; (adr r3, 8009920 <main_application+0x1e8>)
 800980e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009812:	f7f6 ff11 	bl	8000638 <__aeabi_dmul>
 8009816:	f7f7 fa07 	bl	8000c28 <__aeabi_d2f>
 800981a:	ee07 0a90 	vmov	s15, r0
 800981e:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 8009822:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009826:	f001 f901 	bl	800aa2c <ceilf>
	DIV_Fraction = ceil(Fraction);
 800982a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n");
 800982e:	4846      	ldr	r0, [pc, #280]	; (8009948 <main_application+0x210>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 8009830:	ee10 3a10 	vmov	r3, s0
 8009834:	b29b      	uxth	r3, r3
 8009836:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800983a:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n");
 800983c:	f7ff ff3c 	bl	80096b8 <uart_log>
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 8009840:	4842      	ldr	r0, [pc, #264]	; (800994c <main_application+0x214>)
 8009842:	f7ff ff39 	bl	80096b8 <uart_log>
	log_init(uart_log);
 8009846:	4842      	ldr	r0, [pc, #264]	; (8009950 <main_application+0x218>)
 8009848:	f000 f8d0 	bl	80099ec <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 800984c:	4941      	ldr	r1, [pc, #260]	; (8009954 <main_application+0x21c>)
 800984e:	4a42      	ldr	r2, [pc, #264]	; (8009958 <main_application+0x220>)
 8009850:	4842      	ldr	r0, [pc, #264]	; (800995c <main_application+0x224>)
 8009852:	f000 f8d1 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 8009856:	f000 fad3 	bl	8009e00 <get_revid>
 800985a:	4941      	ldr	r1, [pc, #260]	; (8009960 <main_application+0x228>)
 800985c:	4602      	mov	r2, r0
 800985e:	483f      	ldr	r0, [pc, #252]	; (800995c <main_application+0x224>)
 8009860:	f000 f8ca 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 8009864:	f000 fad2 	bl	8009e0c <get_devid>
 8009868:	493e      	ldr	r1, [pc, #248]	; (8009964 <main_application+0x22c>)
 800986a:	4602      	mov	r2, r0
 800986c:	483b      	ldr	r0, [pc, #236]	; (800995c <main_application+0x224>)
 800986e:	f000 f8c3 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 8009872:	f000 fad3 	bl	8009e1c <get_flashsize>
 8009876:	493c      	ldr	r1, [pc, #240]	; (8009968 <main_application+0x230>)
 8009878:	4602      	mov	r2, r0
 800987a:	4838      	ldr	r0, [pc, #224]	; (800995c <main_application+0x224>)
 800987c:	f000 f8bc 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 8009880:	493a      	ldr	r1, [pc, #232]	; (800996c <main_application+0x234>)
 8009882:	4836      	ldr	r0, [pc, #216]	; (800995c <main_application+0x224>)
 8009884:	2280      	movs	r2, #128	; 0x80
 8009886:	f000 f8b7 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 800988a:	4939      	ldr	r1, [pc, #228]	; (8009970 <main_application+0x238>)
 800988c:	4a39      	ldr	r2, [pc, #228]	; (8009974 <main_application+0x23c>)
 800988e:	4833      	ldr	r0, [pc, #204]	; (800995c <main_application+0x224>)
 8009890:	f000 f8b2 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 8009894:	4628      	mov	r0, r5
 8009896:	f7fd ff45 	bl	8007724 <rcc_get_bus_frequency>
 800989a:	4937      	ldr	r1, [pc, #220]	; (8009978 <main_application+0x240>)
 800989c:	4602      	mov	r2, r0
 800989e:	482f      	ldr	r0, [pc, #188]	; (800995c <main_application+0x224>)
 80098a0:	f000 f8aa 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 80098a4:	2001      	movs	r0, #1
 80098a6:	f7fd ff3d 	bl	8007724 <rcc_get_bus_frequency>
 80098aa:	4934      	ldr	r1, [pc, #208]	; (800997c <main_application+0x244>)
 80098ac:	4602      	mov	r2, r0
 80098ae:	482b      	ldr	r0, [pc, #172]	; (800995c <main_application+0x224>)
 80098b0:	f000 f8a2 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 80098b4:	2002      	movs	r0, #2
 80098b6:	f7fd ff35 	bl	8007724 <rcc_get_bus_frequency>
 80098ba:	4931      	ldr	r1, [pc, #196]	; (8009980 <main_application+0x248>)
 80098bc:	4602      	mov	r2, r0
 80098be:	4827      	ldr	r0, [pc, #156]	; (800995c <main_application+0x224>)
 80098c0:	f000 f89a 	bl	80099f8 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 80098c4:	2003      	movs	r0, #3
 80098c6:	f7fd ff2d 	bl	8007724 <rcc_get_bus_frequency>
 80098ca:	492e      	ldr	r1, [pc, #184]	; (8009984 <main_application+0x24c>)
 80098cc:	4602      	mov	r2, r0
 80098ce:	4823      	ldr	r0, [pc, #140]	; (800995c <main_application+0x224>)
 80098d0:	f000 f892 	bl	80099f8 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 80098d4:	2301      	movs	r3, #1
 80098d6:	e9cd 3500 	strd	r3, r5, [sp]
 80098da:	492b      	ldr	r1, [pc, #172]	; (8009988 <main_application+0x250>)
 80098dc:	482b      	ldr	r0, [pc, #172]	; (800998c <main_application+0x254>)
 80098de:	462b      	mov	r3, r5
 80098e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80098e4:	f7f9 fa46 	bl	8002d74 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 80098e8:	2801      	cmp	r0, #1
 80098ea:	d00b      	beq.n	8009904 <main_application+0x1cc>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 80098ec:	206a      	movs	r0, #106	; 0x6a
 80098ee:	9000      	str	r0, [sp, #0]
 80098f0:	4b27      	ldr	r3, [pc, #156]	; (8009990 <main_application+0x258>)
 80098f2:	4a28      	ldr	r2, [pc, #160]	; (8009994 <main_application+0x25c>)
 80098f4:	4928      	ldr	r1, [pc, #160]	; (8009998 <main_application+0x260>)
 80098f6:	4819      	ldr	r0, [pc, #100]	; (800995c <main_application+0x224>)
 80098f8:	f000 f8fa 	bl	8009af0 <LOG_ERROR>
		return 0;
 80098fc:	462c      	mov	r4, r5
}
 80098fe:	4620      	mov	r0, r4
 8009900:	b005      	add	sp, #20
 8009902:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 8009904:	4925      	ldr	r1, [pc, #148]	; (800999c <main_application+0x264>)
 8009906:	4604      	mov	r4, r0
 8009908:	4814      	ldr	r0, [pc, #80]	; (800995c <main_application+0x224>)
 800990a:	f000 f875 	bl	80099f8 <LOG_INFO>
	vTaskStartScheduler();
 800990e:	f7f9 fc09 	bl	8003124 <vTaskStartScheduler>
}
 8009912:	4620      	mov	r0, r4
 8009914:	b005      	add	sp, #20
 8009916:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009918:	789abcdf 	.word	0x789abcdf
 800991c:	3ea23456 	.word	0x3ea23456
 8009920:	47ae147b 	.word	0x47ae147b
 8009924:	3f847ae1 	.word	0x3f847ae1
 8009928:	20000094 	.word	0x20000094
 800992c:	40011400 	.word	0x40011400
 8009930:	40021c00 	.word	0x40021c00
 8009934:	200000bc 	.word	0x200000bc
 8009938:	2000b9a4 	.word	0x2000b9a4
 800993c:	40021800 	.word	0x40021800
 8009940:	40023800 	.word	0x40023800
 8009944:	40590000 	.word	0x40590000
 8009948:	0800ea94 	.word	0x0800ea94
 800994c:	0800ea9c 	.word	0x0800ea9c
 8009950:	080096b9 	.word	0x080096b9
 8009954:	0800eb08 	.word	0x0800eb08
 8009958:	0800eafc 	.word	0x0800eafc
 800995c:	0800ea70 	.word	0x0800ea70
 8009960:	0800eb1c 	.word	0x0800eb1c
 8009964:	0800eb34 	.word	0x0800eb34
 8009968:	0800eb4c 	.word	0x0800eb4c
 800996c:	0800eb64 	.word	0x0800eb64
 8009970:	0800eb84 	.word	0x0800eb84
 8009974:	0800eb7c 	.word	0x0800eb7c
 8009978:	0800eb98 	.word	0x0800eb98
 800997c:	0800ebb0 	.word	0x0800ebb0
 8009980:	0800ebc8 	.word	0x0800ebc8
 8009984:	0800ebe0 	.word	0x0800ebe0
 8009988:	0800ebf8 	.word	0x0800ebf8
 800998c:	0800968d 	.word	0x0800968d
 8009990:	0800ec08 	.word	0x0800ec08
 8009994:	0800ec1c 	.word	0x0800ec1c
 8009998:	0800ec3c 	.word	0x0800ec3c
 800999c:	0800ec74 	.word	0x0800ec74

080099a0 <vApplicationIdleHook>:
	void vApplicationIdleHook(void){
 80099a0:	b508      	push	{r3, lr}
		iwdg_refresh();
 80099a2:	f7fd fd21 	bl	80073e8 <iwdg_refresh>
	}
 80099a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_calculate_cpu_load_percent();
 80099aa:	f000 bb0d 	b.w	8009fc8 <sys_calculate_cpu_load_percent>
 80099ae:	bf00      	nop

080099b0 <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 80099b0:	b508      	push	{r3, lr}
 80099b2:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 80099b4:	4804      	ldr	r0, [pc, #16]	; (80099c8 <vApplicationStackOverflowHook+0x18>)
 80099b6:	4905      	ldr	r1, [pc, #20]	; (80099cc <vApplicationStackOverflowHook+0x1c>)
 80099b8:	f000 f89a 	bl	8009af0 <LOG_ERROR>
 80099bc:	4b04      	ldr	r3, [pc, #16]	; (80099d0 <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 80099be:	bf00      	nop
 80099c0:	3b01      	subs	r3, #1
 80099c2:	d1fc      	bne.n	80099be <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 80099c4:	f7ff fe50 	bl	8009668 <__NVIC_SystemReset>
 80099c8:	0800ea70 	.word	0x0800ea70
 80099cc:	0800ec90 	.word	0x0800ec90
 80099d0:	003d0900 	.word	0x003d0900

080099d4 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 80099d4:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 80099d6:	4903      	ldr	r1, [pc, #12]	; (80099e4 <vApplicationMallocFailedHook+0x10>)
 80099d8:	4803      	ldr	r0, [pc, #12]	; (80099e8 <vApplicationMallocFailedHook+0x14>)
 80099da:	f000 f889 	bl	8009af0 <LOG_ERROR>
		__NVIC_SystemReset();
 80099de:	f7ff fe43 	bl	8009668 <__NVIC_SystemReset>
 80099e2:	bf00      	nop
 80099e4:	0800eca8 	.word	0x0800eca8
 80099e8:	0800ea70 	.word	0x0800ea70

080099ec <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 80099ec:	4b01      	ldr	r3, [pc, #4]	; (80099f4 <log_init+0x8>)
 80099ee:	6018      	str	r0, [r3, #0]
}
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	2000b9a8 	.word	0x2000b9a8

080099f8 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 80099f8:	b40e      	push	{r1, r2, r3}
 80099fa:	b570      	push	{r4, r5, r6, lr}
 80099fc:	b08b      	sub	sp, #44	; 0x2c
 80099fe:	ac0f      	add	r4, sp, #60	; 0x3c
 8009a00:	4606      	mov	r6, r0
 8009a02:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a06:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009a08:	f7fe fd62 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009a0c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009a0e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009a10:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009a12:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009a14:	4622      	mov	r2, r4
 8009a16:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009a18:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009a1a:	f002 f8f1 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8009a1e:	4b0f      	ldr	r3, [pc, #60]	; (8009a5c <LOG_INFO+0x64>)
 8009a20:	4a0f      	ldr	r2, [pc, #60]	; (8009a60 <LOG_INFO+0x68>)
 8009a22:	7819      	ldrb	r1, [r3, #0]
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <LOG_INFO+0x6c>)
 8009a26:	9303      	str	r3, [sp, #12]
 8009a28:	9b07      	ldr	r3, [sp, #28]
 8009a2a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009a2e:	9302      	str	r3, [sp, #8]
 8009a30:	490d      	ldr	r1, [pc, #52]	; (8009a68 <LOG_INFO+0x70>)
 8009a32:	4b0e      	ldr	r3, [pc, #56]	; (8009a6c <LOG_INFO+0x74>)
 8009a34:	e9cd 5600 	strd	r5, r6, [sp]
 8009a38:	a809      	add	r0, sp, #36	; 0x24
 8009a3a:	f001 f841 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009a3e:	4b0c      	ldr	r3, [pc, #48]	; (8009a70 <LOG_INFO+0x78>)
 8009a40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4798      	blx	r3
	free(Temp_buffer);
 8009a46:	9807      	ldr	r0, [sp, #28]
 8009a48:	f001 f892 	bl	800ab70 <free>
	free(Output_buffer);
 8009a4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a4e:	f001 f88f 	bl	800ab70 <free>
}
 8009a52:	b00b      	add	sp, #44	; 0x2c
 8009a54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009a58:	b003      	add	sp, #12
 8009a5a:	4770      	bx	lr
 8009a5c:	200000f2 	.word	0x200000f2
 8009a60:	0800ee54 	.word	0x0800ee54
 8009a64:	0800ecd8 	.word	0x0800ecd8
 8009a68:	0800ece4 	.word	0x0800ece4
 8009a6c:	0800ece0 	.word	0x0800ece0
 8009a70:	2000b9a8 	.word	0x2000b9a8

08009a74 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8009a74:	b40e      	push	{r1, r2, r3}
 8009a76:	b570      	push	{r4, r5, r6, lr}
 8009a78:	b08b      	sub	sp, #44	; 0x2c
 8009a7a:	ac0f      	add	r4, sp, #60	; 0x3c
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a82:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009a84:	f7fe fd24 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009a88:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009a8a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009a8c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009a8e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009a90:	4622      	mov	r2, r4
 8009a92:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009a94:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009a96:	f002 f8b3 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8009a9a:	4b0f      	ldr	r3, [pc, #60]	; (8009ad8 <LOG_WARN+0x64>)
 8009a9c:	4a0f      	ldr	r2, [pc, #60]	; (8009adc <LOG_WARN+0x68>)
 8009a9e:	7819      	ldrb	r1, [r3, #0]
 8009aa0:	4b0f      	ldr	r3, [pc, #60]	; (8009ae0 <LOG_WARN+0x6c>)
 8009aa2:	9303      	str	r3, [sp, #12]
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009aaa:	9302      	str	r3, [sp, #8]
 8009aac:	490d      	ldr	r1, [pc, #52]	; (8009ae4 <LOG_WARN+0x70>)
 8009aae:	4b0e      	ldr	r3, [pc, #56]	; (8009ae8 <LOG_WARN+0x74>)
 8009ab0:	e9cd 5600 	strd	r5, r6, [sp]
 8009ab4:	a809      	add	r0, sp, #36	; 0x24
 8009ab6:	f001 f803 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009aba:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <LOG_WARN+0x78>)
 8009abc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4798      	blx	r3
	free(Temp_buffer);
 8009ac2:	9807      	ldr	r0, [sp, #28]
 8009ac4:	f001 f854 	bl	800ab70 <free>
	free(Output_buffer);
 8009ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aca:	f001 f851 	bl	800ab70 <free>
}
 8009ace:	b00b      	add	sp, #44	; 0x2c
 8009ad0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ad4:	b003      	add	sp, #12
 8009ad6:	4770      	bx	lr
 8009ad8:	200000f6 	.word	0x200000f6
 8009adc:	0800ee54 	.word	0x0800ee54
 8009ae0:	0800ecd8 	.word	0x0800ecd8
 8009ae4:	0800ece4 	.word	0x0800ece4
 8009ae8:	0800ecfc 	.word	0x0800ecfc
 8009aec:	2000b9a8 	.word	0x2000b9a8

08009af0 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8009af0:	b40e      	push	{r1, r2, r3}
 8009af2:	b570      	push	{r4, r5, r6, lr}
 8009af4:	b08b      	sub	sp, #44	; 0x2c
 8009af6:	ac0f      	add	r4, sp, #60	; 0x3c
 8009af8:	4606      	mov	r6, r0
 8009afa:	f854 1b04 	ldr.w	r1, [r4], #4
 8009afe:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009b00:	f7fe fce6 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009b04:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009b06:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009b08:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009b0a:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009b0c:	4622      	mov	r2, r4
 8009b0e:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009b10:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009b12:	f002 f875 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8009b16:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <LOG_ERROR+0x64>)
 8009b18:	4a0f      	ldr	r2, [pc, #60]	; (8009b58 <LOG_ERROR+0x68>)
 8009b1a:	7819      	ldrb	r1, [r3, #0]
 8009b1c:	4b0f      	ldr	r3, [pc, #60]	; (8009b5c <LOG_ERROR+0x6c>)
 8009b1e:	9303      	str	r3, [sp, #12]
 8009b20:	9b07      	ldr	r3, [sp, #28]
 8009b22:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009b26:	9302      	str	r3, [sp, #8]
 8009b28:	490d      	ldr	r1, [pc, #52]	; (8009b60 <LOG_ERROR+0x70>)
 8009b2a:	4b0e      	ldr	r3, [pc, #56]	; (8009b64 <LOG_ERROR+0x74>)
 8009b2c:	e9cd 5600 	strd	r5, r6, [sp]
 8009b30:	a809      	add	r0, sp, #36	; 0x24
 8009b32:	f000 ffc5 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <LOG_ERROR+0x78>)
 8009b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4798      	blx	r3
	free(Temp_buffer);
 8009b3e:	9807      	ldr	r0, [sp, #28]
 8009b40:	f001 f816 	bl	800ab70 <free>
	free(Output_buffer);
 8009b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b46:	f001 f813 	bl	800ab70 <free>
}
 8009b4a:	b00b      	add	sp, #44	; 0x2c
 8009b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b50:	b003      	add	sp, #12
 8009b52:	4770      	bx	lr
 8009b54:	200000f1 	.word	0x200000f1
 8009b58:	0800ee54 	.word	0x0800ee54
 8009b5c:	0800ecd8 	.word	0x0800ecd8
 8009b60:	0800ece4 	.word	0x0800ece4
 8009b64:	0800e6d4 	.word	0x0800e6d4
 8009b68:	2000b9a8 	.word	0x2000b9a8

08009b6c <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 8009b6c:	b40e      	push	{r1, r2, r3}
 8009b6e:	b570      	push	{r4, r5, r6, lr}
 8009b70:	b08b      	sub	sp, #44	; 0x2c
 8009b72:	ac0f      	add	r4, sp, #60	; 0x3c
 8009b74:	4606      	mov	r6, r0
 8009b76:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b7a:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009b7c:	f7fe fca8 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009b80:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009b82:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009b84:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009b86:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009b88:	4622      	mov	r2, r4
 8009b8a:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009b8c:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009b8e:	f002 f837 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 8009b92:	4b0f      	ldr	r3, [pc, #60]	; (8009bd0 <LOG_DEBUG+0x64>)
 8009b94:	4a0f      	ldr	r2, [pc, #60]	; (8009bd4 <LOG_DEBUG+0x68>)
 8009b96:	7819      	ldrb	r1, [r3, #0]
 8009b98:	4b0f      	ldr	r3, [pc, #60]	; (8009bd8 <LOG_DEBUG+0x6c>)
 8009b9a:	9303      	str	r3, [sp, #12]
 8009b9c:	9b07      	ldr	r3, [sp, #28]
 8009b9e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009ba2:	9302      	str	r3, [sp, #8]
 8009ba4:	490d      	ldr	r1, [pc, #52]	; (8009bdc <LOG_DEBUG+0x70>)
 8009ba6:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <LOG_DEBUG+0x74>)
 8009ba8:	e9cd 5600 	strd	r5, r6, [sp]
 8009bac:	a809      	add	r0, sp, #36	; 0x24
 8009bae:	f000 ff87 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009bb2:	4b0c      	ldr	r3, [pc, #48]	; (8009be4 <LOG_DEBUG+0x78>)
 8009bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4798      	blx	r3
	free(Temp_buffer);
 8009bba:	9807      	ldr	r0, [sp, #28]
 8009bbc:	f000 ffd8 	bl	800ab70 <free>
	free(Output_buffer);
 8009bc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bc2:	f000 ffd5 	bl	800ab70 <free>
}
 8009bc6:	b00b      	add	sp, #44	; 0x2c
 8009bc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bcc:	b003      	add	sp, #12
 8009bce:	4770      	bx	lr
 8009bd0:	200000f0 	.word	0x200000f0
 8009bd4:	0800ee54 	.word	0x0800ee54
 8009bd8:	0800ecd8 	.word	0x0800ecd8
 8009bdc:	0800ece4 	.word	0x0800ece4
 8009be0:	0800ed00 	.word	0x0800ed00
 8009be4:	2000b9a8 	.word	0x2000b9a8

08009be8 <LOG_MEM>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_MEM(const char *tag,  const char *format, ...){
 8009be8:	b40e      	push	{r1, r2, r3}
 8009bea:	b570      	push	{r4, r5, r6, lr}
 8009bec:	b08b      	sub	sp, #44	; 0x2c
 8009bee:	ac0f      	add	r4, sp, #60	; 0x3c
 8009bf0:	4606      	mov	r6, r0
 8009bf2:	f854 1b04 	ldr.w	r1, [r4], #4
 8009bf6:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009bf8:	f7fe fc6a 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009bfc:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009bfe:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009c00:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009c02:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009c04:	4622      	mov	r2, r4
 8009c06:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009c08:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009c0a:	f001 fff9 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logm], log_level_str[4], time, tag, Temp_buffer, COLOR_END);
 8009c0e:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <LOG_MEM+0x64>)
 8009c10:	4a0f      	ldr	r2, [pc, #60]	; (8009c50 <LOG_MEM+0x68>)
 8009c12:	7819      	ldrb	r1, [r3, #0]
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <LOG_MEM+0x6c>)
 8009c16:	9303      	str	r3, [sp, #12]
 8009c18:	9b07      	ldr	r3, [sp, #28]
 8009c1a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c1e:	9302      	str	r3, [sp, #8]
 8009c20:	490d      	ldr	r1, [pc, #52]	; (8009c58 <LOG_MEM+0x70>)
 8009c22:	4b0e      	ldr	r3, [pc, #56]	; (8009c5c <LOG_MEM+0x74>)
 8009c24:	e9cd 5600 	strd	r5, r6, [sp]
 8009c28:	a809      	add	r0, sp, #36	; 0x24
 8009c2a:	f000 ff49 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logm], log_level_str[4], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <LOG_MEM+0x78>)
 8009c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4798      	blx	r3
	free(Temp_buffer);
 8009c36:	9807      	ldr	r0, [sp, #28]
 8009c38:	f000 ff9a 	bl	800ab70 <free>
	free(Output_buffer);
 8009c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c3e:	f000 ff97 	bl	800ab70 <free>
}
 8009c42:	b00b      	add	sp, #44	; 0x2c
 8009c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c48:	b003      	add	sp, #12
 8009c4a:	4770      	bx	lr
 8009c4c:	200000f3 	.word	0x200000f3
 8009c50:	0800ee54 	.word	0x0800ee54
 8009c54:	0800ecd8 	.word	0x0800ecd8
 8009c58:	0800ece4 	.word	0x0800ece4
 8009c5c:	0800ed04 	.word	0x0800ed04
 8009c60:	2000b9a8 	.word	0x2000b9a8

08009c64 <LOG_EVENT>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_EVENT(const char *tag,  const char *format, ...){
 8009c64:	b40e      	push	{r1, r2, r3}
 8009c66:	b570      	push	{r4, r5, r6, lr}
 8009c68:	b08b      	sub	sp, #44	; 0x2c
 8009c6a:	ac0f      	add	r4, sp, #60	; 0x3c
 8009c6c:	4606      	mov	r6, r0
 8009c6e:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c72:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009c74:	f7fe fc2c 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009c78:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009c7a:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009c7c:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009c7e:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009c80:	4622      	mov	r2, r4
 8009c82:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009c84:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009c86:	f001 ffbb 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logv], log_level_str[5], time, tag, Temp_buffer, COLOR_END);
 8009c8a:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <LOG_EVENT+0x64>)
 8009c8c:	4a0f      	ldr	r2, [pc, #60]	; (8009ccc <LOG_EVENT+0x68>)
 8009c8e:	7819      	ldrb	r1, [r3, #0]
 8009c90:	4b0f      	ldr	r3, [pc, #60]	; (8009cd0 <LOG_EVENT+0x6c>)
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	9b07      	ldr	r3, [sp, #28]
 8009c96:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009c9a:	9302      	str	r3, [sp, #8]
 8009c9c:	490d      	ldr	r1, [pc, #52]	; (8009cd4 <LOG_EVENT+0x70>)
 8009c9e:	4b0e      	ldr	r3, [pc, #56]	; (8009cd8 <LOG_EVENT+0x74>)
 8009ca0:	e9cd 5600 	strd	r5, r6, [sp]
 8009ca4:	a809      	add	r0, sp, #36	; 0x24
 8009ca6:	f000 ff0b 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logp], log_level_str[5], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009caa:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <LOG_EVENT+0x78>)
 8009cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4798      	blx	r3
	free(Temp_buffer);
 8009cb2:	9807      	ldr	r0, [sp, #28]
 8009cb4:	f000 ff5c 	bl	800ab70 <free>
	free(Output_buffer);
 8009cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009cba:	f000 ff59 	bl	800ab70 <free>
}
 8009cbe:	b00b      	add	sp, #44	; 0x2c
 8009cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009cc4:	b003      	add	sp, #12
 8009cc6:	4770      	bx	lr
 8009cc8:	200000f5 	.word	0x200000f5
 8009ccc:	0800ee54 	.word	0x0800ee54
 8009cd0:	0800ecd8 	.word	0x0800ecd8
 8009cd4:	0800ece4 	.word	0x0800ece4
 8009cd8:	0800ed08 	.word	0x0800ed08
 8009cdc:	2000b9a8 	.word	0x2000b9a8

08009ce0 <LOG_RET>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_RET(const char *tag,  const char *format, ...){
 8009ce0:	b40e      	push	{r1, r2, r3}
 8009ce2:	b570      	push	{r4, r5, r6, lr}
 8009ce4:	b08b      	sub	sp, #44	; 0x2c
 8009ce6:	ac0f      	add	r4, sp, #60	; 0x3c
 8009ce8:	4606      	mov	r6, r0
 8009cea:	f854 1b04 	ldr.w	r1, [r4], #4
 8009cee:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009cf0:	f7fe fbee 	bl	80084d0 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8009cf4:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8009cf6:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8009cf8:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8009cfa:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8009cfc:	4622      	mov	r2, r4
 8009cfe:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8009d00:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8009d02:	f001 ff7d 	bl	800bc00 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logr], log_level_str[6], time, tag, Temp_buffer, COLOR_END);
 8009d06:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <LOG_RET+0x64>)
 8009d08:	4a0f      	ldr	r2, [pc, #60]	; (8009d48 <LOG_RET+0x68>)
 8009d0a:	7819      	ldrb	r1, [r3, #0]
 8009d0c:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <LOG_RET+0x6c>)
 8009d0e:	9303      	str	r3, [sp, #12]
 8009d10:	9b07      	ldr	r3, [sp, #28]
 8009d12:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	490d      	ldr	r1, [pc, #52]	; (8009d50 <LOG_RET+0x70>)
 8009d1a:	4b0e      	ldr	r3, [pc, #56]	; (8009d54 <LOG_RET+0x74>)
 8009d1c:	e9cd 5600 	strd	r5, r6, [sp]
 8009d20:	a809      	add	r0, sp, #36	; 0x24
 8009d22:	f000 fecd 	bl	800aac0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logr], log_level_str[6], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009d26:	4b0c      	ldr	r3, [pc, #48]	; (8009d58 <LOG_RET+0x78>)
 8009d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4798      	blx	r3
	free(Temp_buffer);
 8009d2e:	9807      	ldr	r0, [sp, #28]
 8009d30:	f000 ff1e 	bl	800ab70 <free>
	free(Output_buffer);
 8009d34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d36:	f000 ff1b 	bl	800ab70 <free>
}
 8009d3a:	b00b      	add	sp, #44	; 0x2c
 8009d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d40:	b003      	add	sp, #12
 8009d42:	4770      	bx	lr
 8009d44:	200000f4 	.word	0x200000f4
 8009d48:	0800ee54 	.word	0x0800ee54
 8009d4c:	0800ecd8 	.word	0x0800ecd8
 8009d50:	0800ece4 	.word	0x0800ece4
 8009d54:	0800ed0c 	.word	0x0800ed0c
 8009d58:	2000b9a8 	.word	0x2000b9a8

08009d5c <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 8009d60:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8009dd0 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009d64:	b083      	sub	sp, #12
 8009d66:	461f      	mov	r7, r3
	stm_ret_t res;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009d6c:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 8009d6e:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009d72:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 8009d76:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009d78:	4606      	mov	r6, r0
 8009d7a:	460d      	mov	r5, r1
	stm_ret_t res;
 8009d7c:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 8009d7e:	4798      	blx	r3
 8009d80:	9001      	str	r0, [sp, #4]
 8009d82:	b14f      	cbz	r7, 8009d98 <wait_flag_in_register_timeout+0x3c>
 8009d84:	f1b8 0f00 	cmp.w	r8, #0
 8009d88:	d110      	bne.n	8009dac <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	421c      	tst	r4, r3
 8009d8e:	d0fc      	beq.n	8009d8a <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 8009d90:	4630      	mov	r0, r6
 8009d92:	b003      	add	sp, #12
 8009d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d98:	f1b8 0f00 	cmp.w	r8, #0
 8009d9c:	d113      	bne.n	8009dc6 <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	421c      	tst	r4, r3
 8009da2:	d1fc      	bne.n	8009d9e <wait_flag_in_register_timeout+0x42>
}
 8009da4:	4630      	mov	r0, r6
 8009da6:	b003      	add	sp, #12
 8009da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	4223      	tst	r3, r4
 8009db0:	d1ee      	bne.n	8009d90 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 8009db2:	f8d9 3000 	ldr.w	r3, [r9]
 8009db6:	4798      	blx	r3
 8009db8:	9b01      	ldr	r3, [sp, #4]
 8009dba:	1ac0      	subs	r0, r0, r3
 8009dbc:	4540      	cmp	r0, r8
 8009dbe:	d3e0      	bcc.n	8009d82 <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 8009dc0:	2302      	movs	r3, #2
 8009dc2:	7033      	strb	r3, [r6, #0]
				return res;
 8009dc4:	e7e4      	b.n	8009d90 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	4223      	tst	r3, r4
 8009dca:	d1f2      	bne.n	8009db2 <wait_flag_in_register_timeout+0x56>
 8009dcc:	e7e0      	b.n	8009d90 <wait_flag_in_register_timeout+0x34>
 8009dce:	bf00      	nop
 8009dd0:	200000f8 	.word	0x200000f8

08009dd4 <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 8009dd4:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 8009dd6:	6042      	str	r2, [r0, #4]
}
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop

08009ddc <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 8009ddc:	6041      	str	r1, [r0, #4]
}
 8009dde:	4770      	bx	lr

08009de0 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 8009de0:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8009de2:	f1a0 0001 	sub.w	r0, r0, #1
 8009de6:	fab0 f080 	clz	r0, r0
 8009dea:	0940      	lsrs	r0, r0, #5
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop

08009df0 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 8009df0:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8009df2:	f1a0 0002 	sub.w	r0, r0, #2
 8009df6:	fab0 f080 	clz	r0, r0
 8009dfa:	0940      	lsrs	r0, r0, #5
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop

08009e00 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 8009e00:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <get_revid+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
}
 8009e04:	0c00      	lsrs	r0, r0, #16
 8009e06:	4770      	bx	lr
 8009e08:	e0042000 	.word	0xe0042000

08009e0c <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <get_devid+0xc>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
}
 8009e10:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	e0042000 	.word	0xe0042000

08009e1c <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 8009e1c:	4b01      	ldr	r3, [pc, #4]	; (8009e24 <get_flashsize+0x8>)
 8009e1e:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 8009e20:	b280      	uxth	r0, r0
 8009e22:	4770      	bx	lr
 8009e24:	1fff7a00 	.word	0x1fff7a00

08009e28 <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8009e28:	4b14      	ldr	r3, [pc, #80]	; (8009e7c <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 8009e2a:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <system_init+0x58>)
 8009e2c:	6819      	ldr	r1, [r3, #0]
 8009e2e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 8009e32:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8009e34:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 8009e36:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e38:	4c12      	ldr	r4, [pc, #72]	; (8009e84 <system_init+0x5c>)
 8009e3a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8009e3e:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 8009e40:	6819      	ldr	r1, [r3, #0]
 8009e42:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8009e46:	6019      	str	r1, [r3, #0]
 8009e48:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e4a:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8009e4e:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 8009e52:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8009e54:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 8009e56:	200f      	movs	r0, #15
 8009e58:	f7fe fb18 	bl	800848c <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8009e5c:	4b0a      	ldr	r3, [pc, #40]	; (8009e88 <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 8009e5e:	490b      	ldr	r1, [pc, #44]	; (8009e8c <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8009e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e62:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009e66:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8009e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009e6e:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 8009e70:	680b      	ldr	r3, [r1, #0]
 8009e72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e76:	600b      	str	r3, [r1, #0]
}
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40023c00 	.word	0x40023c00
 8009e80:	05fa0300 	.word	0x05fa0300
 8009e84:	e000ed00 	.word	0xe000ed00
 8009e88:	40023800 	.word	0x40023800
 8009e8c:	40007000 	.word	0x40007000

08009e90 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 8009e90:	4a03      	ldr	r2, [pc, #12]	; (8009ea0 <embedded_flash_set_latency+0x10>)
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	f023 030f 	bic.w	r3, r3, #15
 8009e98:	4318      	orrs	r0, r3
 8009e9a:	6010      	str	r0, [r2, #0]
}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	40023c00 	.word	0x40023c00

08009ea4 <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8009ea4:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009ea6:	490e      	ldr	r1, [pc, #56]	; (8009ee0 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009ea8:	4c0e      	ldr	r4, [pc, #56]	; (8009ee4 <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8009eaa:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009eac:	09c3      	lsrs	r3, r0, #7
 8009eae:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009eb2:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009eb4:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8009eb8:	d00e      	beq.n	8009ed8 <embedded_flash_calculate_latency+0x34>
 8009eba:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <embedded_flash_calculate_latency+0x44>)
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d00b      	beq.n	8009ed8 <embedded_flash_calculate_latency+0x34>
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <embedded_flash_calculate_latency+0x48>)
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d008      	beq.n	8009ed8 <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 8009ec6:	4b0a      	ldr	r3, [pc, #40]	; (8009ef0 <embedded_flash_calculate_latency+0x4c>)
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d005      	beq.n	8009ed8 <embedded_flash_calculate_latency+0x34>
 8009ecc:	4b09      	ldr	r3, [pc, #36]	; (8009ef4 <embedded_flash_calculate_latency+0x50>)
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d002      	beq.n	8009ed8 <embedded_flash_calculate_latency+0x34>
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <embedded_flash_calculate_latency+0x54>)
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d100      	bne.n	8009eda <embedded_flash_calculate_latency+0x36>
 8009ed8:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 8009eda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ede:	4770      	bx	lr
 8009ee0:	01c9c380 	.word	0x01c9c380
 8009ee4:	011e54c7 	.word	0x011e54c7
 8009ee8:	03938700 	.word	0x03938700
 8009eec:	055d4a80 	.word	0x055d4a80
 8009ef0:	07270e00 	.word	0x07270e00
 8009ef4:	08f0d180 	.word	0x08f0d180
 8009ef8:	0aba9500 	.word	0x0aba9500

08009efc <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <embedded_flash_get_latency+0xc>)
 8009efe:	6818      	ldr	r0, [r3, #0]
}
 8009f00:	f000 000f 	and.w	r0, r0, #15
 8009f04:	4770      	bx	lr
 8009f06:	bf00      	nop
 8009f08:	40023c00 	.word	0x40023c00

08009f0c <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f0c:	4b1f      	ldr	r3, [pc, #124]	; (8009f8c <NVIC_Set_Priority+0x80>)
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009f14:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 8009f16:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f18:	f1c3 0e07 	rsb	lr, r3, #7
 8009f1c:	bf28      	it	cs
 8009f1e:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f20:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f24:	f1be 0f04 	cmp.w	lr, #4
 8009f28:	bf28      	it	cs
 8009f2a:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f2e:	f1bc 0f06 	cmp.w	ip, #6
 8009f32:	d91f      	bls.n	8009f74 <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f34:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f36:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f3a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009f3e:	bf28      	it	cs
 8009f40:	220f      	movcs	r2, #15
 8009f42:	fa0c fc03 	lsl.w	ip, ip, r3
 8009f46:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f4a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009f4e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009f52:	ea21 010c 	bic.w	r1, r1, ip
 8009f56:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8009f58:	2800      	cmp	r0, #0
         );
 8009f5a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8009f5e:	db0c      	blt.n	8009f7a <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f60:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8009f64:	0109      	lsls	r1, r1, #4
 8009f66:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8009f6a:	b2c9      	uxtb	r1, r1
 8009f6c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8009f70:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f74:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f76:	4613      	mov	r3, r2
 8009f78:	e7e7      	b.n	8009f4a <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f7a:	4b05      	ldr	r3, [pc, #20]	; (8009f90 <NVIC_Set_Priority+0x84>)
 8009f7c:	f000 000f 	and.w	r0, r0, #15
 8009f80:	0109      	lsls	r1, r1, #4
 8009f82:	4403      	add	r3, r0
 8009f84:	b2c9      	uxtb	r1, r1
 8009f86:	7619      	strb	r1, [r3, #24]
 8009f88:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f8c:	e000ed00 	.word	0xe000ed00
 8009f90:	e000ecfc 	.word	0xe000ecfc

08009f94 <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 8009f94:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 8009f96:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 8009f98:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 8009f9a:	f001 fe11 	bl	800bbc0 <sbrk>
 8009f9e:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8009fa0:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 8009fa4:	4668      	mov	r0, sp
 8009fa6:	f000 fe1b 	bl	800abe0 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 8009faa:	4b06      	ldr	r3, [pc, #24]	; (8009fc4 <sys_get_free_heap_size+0x30>)
 8009fac:	9808      	ldr	r0, [sp, #32]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	bf94      	ite	ls
 8009fb4:	ebc4 0403 	rsbls	r4, r4, r3
 8009fb8:	ebc4 0405 	rsbhi	r4, r4, r5
}
 8009fbc:	4420      	add	r0, r4
 8009fbe:	b00b      	add	sp, #44	; 0x2c
 8009fc0:	bd30      	pop	{r4, r5, pc}
 8009fc2:	bf00      	nop
 8009fc4:	2000b9b0 	.word	0x2000b9b0

08009fc8 <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 8009fc8:	4a06      	ldr	r2, [pc, #24]	; (8009fe4 <sys_calculate_cpu_load_percent+0x1c>)
 8009fca:	4b07      	ldr	r3, [pc, #28]	; (8009fe8 <sys_calculate_cpu_load_percent+0x20>)
 8009fcc:	6810      	ldr	r0, [r2, #0]
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	4288      	cmp	r0, r1
 8009fd2:	d005      	beq.n	8009fe0 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 8009fd4:	4805      	ldr	r0, [pc, #20]	; (8009fec <sys_calculate_cpu_load_percent+0x24>)
 8009fd6:	6801      	ldr	r1, [r0, #0]
 8009fd8:	3101      	adds	r1, #1
 8009fda:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 8009fdc:	6812      	ldr	r2, [r2, #0]
 8009fde:	601a      	str	r2, [r3, #0]
    }
}
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	2000b710 	.word	0x2000b710
 8009fe8:	2000b9b8 	.word	0x2000b9b8
 8009fec:	2000b9bc 	.word	0x2000b9bc

08009ff0 <register_exception_handler>:

	return (float)(((float)total_ram_use / (float)total_ram_size) * 100.0F);
}

void register_exception_handler(volatile void(*p_exception_hander)(void)){
	exception_hander = p_exception_hander;
 8009ff0:	4b01      	ldr	r3, [pc, #4]	; (8009ff8 <register_exception_handler+0x8>)
 8009ff2:	6018      	str	r0, [r3, #0]
}
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	2000b9ac 	.word	0x2000b9ac

08009ffc <exception_interrupt_handler>:

void exception_interrupt_handler(const char *tag, char *message){
 8009ffc:	b510      	push	{r4, lr}
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 8009ffe:	f7ff fd77 	bl	8009af0 <LOG_ERROR>
	if(exception_hander != NULL) exception_hander();
 800a002:	4b03      	ldr	r3, [pc, #12]	; (800a010 <exception_interrupt_handler+0x14>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	b113      	cbz	r3, 800a00e <exception_interrupt_handler+0x12>
#endif /* CONFIG_USE_LOG_MONITOR */
}
 800a008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(exception_hander != NULL) exception_hander();
 800a00c:	4718      	bx	r3
}
 800a00e:	bd10      	pop	{r4, pc}
 800a010:	2000b9ac 	.word	0x2000b9ac

0800a014 <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 800a014:	4b02      	ldr	r3, [pc, #8]	; (800a020 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 800a016:	4903      	ldr	r1, [pc, #12]	; (800a024 <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 800a018:	4a03      	ldr	r2, [pc, #12]	; (800a028 <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 800a01a:	1a5b      	subs	r3, r3, r1
 800a01c:	6013      	str	r3, [r2, #0]
}
 800a01e:	4770      	bx	lr
 800a020:	20030000 	.word	0x20030000
 800a024:	00000400 	.word	0x00000400
 800a028:	2000b9b0 	.word	0x2000b9b0

0800a02c <add_device_properties>:
			dev->prop.address, dev->prop.name,
			dev->sett.mode, dev->sett.type, dev->sett.max_temp, dev->sett.min_temp, dev->sett.time_start, dev->sett.time_stop
	);
}

dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800a02c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a02e:	b085      	sub	sp, #20
	pkt_err_t err;
	pkt_json_t json;
 800a030:	2500      	movs	r5, #0
dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800a032:	4607      	mov	r7, r0

	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800a034:	2030      	movs	r0, #48	; 0x30
dev_struct_t *add_device_properties(uint32_t device_address, char *jdata){
 800a036:	460e      	mov	r6, r1
	pkt_json_t json;
 800a038:	9501      	str	r5, [sp, #4]
 800a03a:	f88d 5008 	strb.w	r5, [sp, #8]
 800a03e:	9503      	str	r5, [sp, #12]
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800a040:	f000 fd8e 	bl	800ab60 <malloc>

	dev_prop->prop.address = device_address;

	dev_prop->env.temp = 0.0;
 800a044:	2300      	movs	r3, #0
	dev_struct_t *dev_prop = (dev_struct_t *)malloc(sizeof(dev_struct_t));
 800a046:	4604      	mov	r4, r0
	dev_prop->env.temp = 0.0;
 800a048:	6003      	str	r3, [r0, #0]
	dev_prop->env.humi = 0.0;
 800a04a:	6043      	str	r3, [r0, #4]
	dev_prop->env.curr = 0.0;
 800a04c:	6083      	str	r3, [r0, #8]
	dev_prop->prop.address = device_address;
 800a04e:	6287      	str	r7, [r0, #40]	; 0x28
	dev_prop->ctrl.relay1 = 0;
 800a050:	6105      	str	r5, [r0, #16]
	dev_prop->ctrl.relay2 = 0;
	dev_prop->ctrl.relay3 = 0;
	dev_prop->ctrl.relay4 = 0;
	dev_prop->sett.mode = 0;
 800a052:	8285      	strh	r5, [r0, #20]
	dev_prop->sett.type = 0;
	dev_prop->sett.max_temp = 0.0;
	dev_prop->sett.min_temp = 0.0;
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800a054:	4916      	ldr	r1, [pc, #88]	; (800a0b0 <add_device_properties+0x84>)
	dev_prop->sett.max_temp = 0.0;
 800a056:	61a3      	str	r3, [r4, #24]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800a058:	3020      	adds	r0, #32
	dev_prop->sett.min_temp = 0.0;
 800a05a:	61e3      	str	r3, [r4, #28]
	asprintf(&(dev_prop->sett.time_start), "00:00:00");
 800a05c:	f000 fd30 	bl	800aac0 <asiprintf>
	asprintf(&(dev_prop->sett.time_stop), "00:00:00");
 800a060:	4913      	ldr	r1, [pc, #76]	; (800a0b0 <add_device_properties+0x84>)
 800a062:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a066:	f000 fd2b 	bl	800aac0 <asiprintf>
	asprintf(&(dev_prop->env.time), "14:30:00 05/05/23");
 800a06a:	4912      	ldr	r1, [pc, #72]	; (800a0b4 <add_device_properties+0x88>)
 800a06c:	f104 000c 	add.w	r0, r4, #12
 800a070:	f000 fd26 	bl	800aac0 <asiprintf>

	err = json_get_object(jdata, &json, (char *)"name");
 800a074:	4a10      	ldr	r2, [pc, #64]	; (800a0b8 <add_device_properties+0x8c>)
 800a076:	a901      	add	r1, sp, #4
 800a078:	4630      	mov	r0, r6
 800a07a:	f7fa fead 	bl	8004dd8 <json_get_object>
	if(err == PKT_ERR_OK)
 800a07e:	b180      	cbz	r0, 800a0a2 <add_device_properties+0x76>
		asprintf(&(dev_prop->prop.name), "%s", json.value);
	json_release_object(&json);
 800a080:	a801      	add	r0, sp, #4
 800a082:	f7fa ffc1 	bl	8005008 <json_release_object>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a086:	200c      	movs	r0, #12
 800a088:	f000 fca8 	bl	800a9dc <_Znwj>
	 __tmp->_M_hook(__position._M_node);
 800a08c:	4d0b      	ldr	r5, [pc, #44]	; (800a0bc <add_device_properties+0x90>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800a08e:	6084      	str	r4, [r0, #8]
 800a090:	4629      	mov	r1, r5
 800a092:	f000 fcb4 	bl	800a9fe <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 800a096:	68ab      	ldr	r3, [r5, #8]

	device_properties_list.push_back(dev_prop);

	return dev_prop;
}
 800a098:	4620      	mov	r0, r4
 800a09a:	3301      	adds	r3, #1
 800a09c:	60ab      	str	r3, [r5, #8]
 800a09e:	b005      	add	sp, #20
 800a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		asprintf(&(dev_prop->prop.name), "%s", json.value);
 800a0a2:	9a03      	ldr	r2, [sp, #12]
 800a0a4:	4906      	ldr	r1, [pc, #24]	; (800a0c0 <add_device_properties+0x94>)
 800a0a6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 800a0aa:	f000 fd09 	bl	800aac0 <asiprintf>
 800a0ae:	e7e7      	b.n	800a080 <add_device_properties+0x54>
 800a0b0:	0800eed4 	.word	0x0800eed4
 800a0b4:	0800eee0 	.word	0x0800eee0
 800a0b8:	0800e264 	.word	0x0800e264
 800a0bc:	2000b9c4 	.word	0x2000b9c4
 800a0c0:	0800eb18 	.word	0x0800eb18

0800a0c4 <remove_device_properties>:

void remove_device_properties(uint32_t device_address){
 800a0c4:	b530      	push	{r4, r5, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800a0c6:	4d22      	ldr	r5, [pc, #136]	; (800a150 <remove_device_properties+0x8c>)
 800a0c8:	682c      	ldr	r4, [r5, #0]
    if (device_properties_list.empty()) {
 800a0ca:	42ac      	cmp	r4, r5
void remove_device_properties(uint32_t device_address){
 800a0cc:	b083      	sub	sp, #12
    if (device_properties_list.empty()) {
 800a0ce:	d035      	beq.n	800a13c <remove_device_properties+0x78>
        return;
    }

    auto device = device_properties_list.begin();
    while (device != device_properties_list.end()) {
        if ((*device)->prop.address == device_address) {
 800a0d0:	68a3      	ldr	r3, [r4, #8]
 800a0d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0d4:	4282      	cmp	r2, r0
 800a0d6:	d00c      	beq.n	800a0f2 <remove_device_properties+0x2e>
	_M_node = _M_node->_M_next;
 800a0d8:	6824      	ldr	r4, [r4, #0]
    while (device != device_properties_list.end()) {
 800a0da:	42ac      	cmp	r4, r5
 800a0dc:	d1f8      	bne.n	800a0d0 <remove_device_properties+0xc>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800a0de:	4b1d      	ldr	r3, [pc, #116]	; (800a154 <remove_device_properties+0x90>)
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	4a1d      	ldr	r2, [pc, #116]	; (800a158 <remove_device_properties+0x94>)
 800a0e4:	491d      	ldr	r1, [pc, #116]	; (800a15c <remove_device_properties+0x98>)
 800a0e6:	481e      	ldr	r0, [pc, #120]	; (800a160 <remove_device_properties+0x9c>)
 800a0e8:	2365      	movs	r3, #101	; 0x65
 800a0ea:	f7ff fd3f 	bl	8009b6c <LOG_DEBUG>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
	if((*device)->env.time != NULL) free((*device)->env.time);

	device_properties_list.erase(device);
	if((*device) != NULL) free((*device));
}
 800a0ee:	b003      	add	sp, #12
 800a0f0:	bd30      	pop	{r4, r5, pc}
	if((*device)->prop.name != NULL) free((*device)->prop.name);
 800a0f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a0f4:	b110      	cbz	r0, 800a0fc <remove_device_properties+0x38>
 800a0f6:	f000 fd3b 	bl	800ab70 <free>
	if((*device)->sett.time_start != NULL) free((*device)->sett.time_start);
 800a0fa:	68a3      	ldr	r3, [r4, #8]
 800a0fc:	6a18      	ldr	r0, [r3, #32]
 800a0fe:	b110      	cbz	r0, 800a106 <remove_device_properties+0x42>
 800a100:	f000 fd36 	bl	800ab70 <free>
	if((*device)->sett.time_stop != NULL) free((*device)->sett.time_stop);
 800a104:	68a3      	ldr	r3, [r4, #8]
 800a106:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a108:	b110      	cbz	r0, 800a110 <remove_device_properties+0x4c>
 800a10a:	f000 fd31 	bl	800ab70 <free>
	if((*device)->env.time != NULL) free((*device)->env.time);
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	68d8      	ldr	r0, [r3, #12]
 800a112:	b108      	cbz	r0, 800a118 <remove_device_properties+0x54>
 800a114:	f000 fd2c 	bl	800ab70 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800a118:	68ab      	ldr	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800a11a:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 800a11c:	3b01      	subs	r3, #1
 800a11e:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 800a120:	f000 fc74 	bl	800aa0c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 800a124:	4620      	mov	r0, r4
 800a126:	210c      	movs	r1, #12
 800a128:	f000 fc56 	bl	800a9d8 <_ZdlPvj>
	if((*device) != NULL) free((*device));
 800a12c:	68a0      	ldr	r0, [r4, #8]
 800a12e:	2800      	cmp	r0, #0
 800a130:	d0dd      	beq.n	800a0ee <remove_device_properties+0x2a>
}
 800a132:	b003      	add	sp, #12
 800a134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if((*device) != NULL) free((*device));
 800a138:	f000 bd1a 	b.w	800ab70 <free>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <remove_device_properties+0x90>)
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	4a08      	ldr	r2, [pc, #32]	; (800a164 <remove_device_properties+0xa0>)
 800a142:	4906      	ldr	r1, [pc, #24]	; (800a15c <remove_device_properties+0x98>)
 800a144:	4806      	ldr	r0, [pc, #24]	; (800a160 <remove_device_properties+0x9c>)
 800a146:	2358      	movs	r3, #88	; 0x58
 800a148:	f7ff fd10 	bl	8009b6c <LOG_DEBUG>
        return;
 800a14c:	e7cf      	b.n	800a0ee <remove_device_properties+0x2a>
 800a14e:	bf00      	nop
 800a150:	2000b9c4 	.word	0x2000b9c4
 800a154:	0800ef1c 	.word	0x0800ef1c
 800a158:	0800e094 	.word	0x0800e094
 800a15c:	0800df58 	.word	0x0800df58
 800a160:	0800ef14 	.word	0x0800ef14
 800a164:	0800eef4 	.word	0x0800eef4

0800a168 <firebase_init>:
    }

    return (*device);
}

void firebase_init(char *url, char *secret_key){
 800a168:	b510      	push	{r4, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	4602      	mov	r2, r0
 800a16e:	460c      	mov	r4, r1
	char *tmp;

	asprintf(&prj_url, "%s", url);
 800a170:	480f      	ldr	r0, [pc, #60]	; (800a1b0 <firebase_init+0x48>)
 800a172:	4910      	ldr	r1, [pc, #64]	; (800a1b4 <firebase_init+0x4c>)
 800a174:	9201      	str	r2, [sp, #4]
 800a176:	f000 fca3 	bl	800aac0 <asiprintf>
	asprintf(&tmp, "{\"url\":\"%s\", \"transport_ssl\":1, \"crt_bundle\":1}", url);
 800a17a:	9a01      	ldr	r2, [sp, #4]
 800a17c:	490e      	ldr	r1, [pc, #56]	; (800a1b8 <firebase_init+0x50>)
 800a17e:	a803      	add	r0, sp, #12
 800a180:	f000 fc9e 	bl	800aac0 <asiprintf>
	if(secret_key != NULL) asprintf(&secret, "%s", secret_key);
 800a184:	b124      	cbz	r4, 800a190 <firebase_init+0x28>
 800a186:	490b      	ldr	r1, [pc, #44]	; (800a1b4 <firebase_init+0x4c>)
 800a188:	480c      	ldr	r0, [pc, #48]	; (800a1bc <firebase_init+0x54>)
 800a18a:	4622      	mov	r2, r4
 800a18c:	f000 fc98 	bl	800aac0 <asiprintf>

	wifiif_http_client_new();
 800a190:	f7fc f922 	bl	80063d8 <wifiif_http_client_new>
	wifiif_http_client_config(tmp);
 800a194:	9803      	ldr	r0, [sp, #12]
 800a196:	f7fc f925 	bl	80063e4 <wifiif_http_client_config>
	wifiif_http_client_init();
 800a19a:	f7fc f927 	bl	80063ec <wifiif_http_client_init>
	wifiif_http_client_set_header((char *)"Content-Type", (char *)"application/json");
 800a19e:	4908      	ldr	r1, [pc, #32]	; (800a1c0 <firebase_init+0x58>)
 800a1a0:	4808      	ldr	r0, [pc, #32]	; (800a1c4 <firebase_init+0x5c>)
 800a1a2:	f7fc f929 	bl	80063f8 <wifiif_http_client_set_header>

	free(tmp);
 800a1a6:	9803      	ldr	r0, [sp, #12]
 800a1a8:	f000 fce2 	bl	800ab70 <free>
}
 800a1ac:	b004      	add	sp, #16
 800a1ae:	bd10      	pop	{r4, pc}
 800a1b0:	2000b9d0 	.word	0x2000b9d0
 800a1b4:	0800eb18 	.word	0x0800eb18
 800a1b8:	0800ef38 	.word	0x0800ef38
 800a1bc:	2000b9d4 	.word	0x2000b9d4
 800a1c0:	0800ef68 	.word	0x0800ef68
 800a1c4:	0800ef7c 	.word	0x0800ef7c

0800a1c8 <_GLOBAL__sub_I_secret>:
	this->_M_next = this->_M_prev = this;
 800a1c8:	4b02      	ldr	r3, [pc, #8]	; (800a1d4 <_GLOBAL__sub_I_secret+0xc>)
	this->_M_size = 0;
 800a1ca:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 800a1cc:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 800a1d0:	609a      	str	r2, [r3, #8]
	wifiif_http_client_set_url(path);
	wifiif_http_client_set_data((char *)"{}");
	wifiif_http_client_request();

	free(path);
}
 800a1d2:	4770      	bx	lr
 800a1d4:	2000b9c4 	.word	0x2000b9c4

0800a1d8 <_GLOBAL__sub_D_secret>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800a1da:	4d06      	ldr	r5, [pc, #24]	; (800a1f4 <_GLOBAL__sub_D_secret+0x1c>)
 800a1dc:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 800a1de:	42ac      	cmp	r4, r5
 800a1e0:	d006      	beq.n	800a1f0 <_GLOBAL__sub_D_secret+0x18>
 800a1e2:	4620      	mov	r0, r4
	  __cur = __tmp->_M_next;
 800a1e4:	6824      	ldr	r4, [r4, #0]
 800a1e6:	210c      	movs	r1, #12
 800a1e8:	f000 fbf6 	bl	800a9d8 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 800a1ec:	42ac      	cmp	r4, r5
 800a1ee:	d1f8      	bne.n	800a1e2 <_GLOBAL__sub_D_secret+0xa>
 800a1f0:	bd38      	pop	{r3, r4, r5, pc}
 800a1f2:	bf00      	nop
 800a1f4:	2000b9c4 	.word	0x2000b9c4

0800a1f8 <_ZL17exception_handlerv>:
		vTaskDelay(idle_time);
	}
}

static volatile  void exception_handler(void){
	gpio_set(GPIOB, 14);
 800a1f8:	4801      	ldr	r0, [pc, #4]	; (800a200 <_ZL17exception_handlerv+0x8>)
 800a1fa:	210e      	movs	r1, #14
 800a1fc:	f7fd b888 	b.w	8007310 <gpio_set>
 800a200:	40020400 	.word	0x40020400

0800a204 <_Z11task_loratxPv>:
void task_loratx(void *){
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
	__IO uint32_t tick = get_tick();
 800a208:	f7fe f962 	bl	80084d0 <get_tick>
 800a20c:	4d11      	ldr	r5, [pc, #68]	; (800a254 <_Z11task_loratxPv+0x50>)
					loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800a20e:	4f12      	ldr	r7, [pc, #72]	; (800a258 <_Z11task_loratxPv+0x54>)
	__IO uint32_t tick = get_tick();
 800a210:	9001      	str	r0, [sp, #4]
				if(get_tick() - tick > 5000){
 800a212:	f241 3688 	movw	r6, #5000	; 0x1388
 800a216:	e006      	b.n	800a226 <_Z11task_loratxPv+0x22>
	_M_node = _M_node->_M_next;
 800a218:	6824      	ldr	r4, [r4, #0]
			for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 800a21a:	42ac      	cmp	r4, r5
 800a21c:	d106      	bne.n	800a22c <_Z11task_loratxPv+0x28>
		vTaskDelay(60000);
 800a21e:	f64e 2060 	movw	r0, #60000	; 0xea60
 800a222:	f7f8 fe5b 	bl	8002edc <vTaskDelay>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800a226:	682c      	ldr	r4, [r5, #0]
	    if(!loraif_device_list.empty()){
 800a228:	42ac      	cmp	r4, r5
 800a22a:	d0f8      	beq.n	800a21e <_Z11task_loratxPv+0x1a>
				if(get_tick() - tick > 5000){
 800a22c:	f7fe f950 	bl	80084d0 <get_tick>
 800a230:	9b01      	ldr	r3, [sp, #4]
 800a232:	1ac0      	subs	r0, r0, r3
 800a234:	42b0      	cmp	r0, r6
 800a236:	d9ef      	bls.n	800a218 <_Z11task_loratxPv+0x14>
					loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?", 1);
 800a238:	68a2      	ldr	r2, [r4, #8]
 800a23a:	2301      	movs	r3, #1
 800a23c:	6810      	ldr	r0, [r2, #0]
 800a23e:	2105      	movs	r1, #5
 800a240:	463a      	mov	r2, r7
 800a242:	f7fa fa57 	bl	80046f4 <loraif_request>
					tick = get_tick();
 800a246:	f7fe f943 	bl	80084d0 <get_tick>
	_M_node = _M_node->_M_next;
 800a24a:	6824      	ldr	r4, [r4, #0]
 800a24c:	9001      	str	r0, [sp, #4]
			for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 800a24e:	42ac      	cmp	r4, r5
 800a250:	d0e5      	beq.n	800a21e <_Z11task_loratxPv+0x1a>
 800a252:	e7eb      	b.n	800a22c <_Z11task_loratxPv+0x28>
 800a254:	2000b234 	.word	0x2000b234
 800a258:	0800ef8c 	.word	0x0800ef8c

0800a25c <_Z11task_lorarxPv>:
void task_lorarx(void *){
 800a25c:	b500      	push	{lr}
	spi5->init(&spi5_conf);
 800a25e:	4c25      	ldr	r4, [pc, #148]	; (800a2f4 <_Z11task_lorarxPv+0x98>)
 800a260:	4a25      	ldr	r2, [pc, #148]	; (800a2f8 <_Z11task_lorarxPv+0x9c>)
 800a262:	6821      	ldr	r1, [r4, #0]
void task_lorarx(void *){
 800a264:	b085      	sub	sp, #20
	spi5->init(&spi5_conf);
 800a266:	a802      	add	r0, sp, #8
 800a268:	f7fd fb1c 	bl	80078a4 <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, gpioA0_event_handler, NULL);
 800a26c:	2200      	movs	r2, #0
 800a26e:	4610      	mov	r0, r2
 800a270:	4922      	ldr	r1, [pc, #136]	; (800a2fc <_Z11task_lorarxPv+0xa0>)
 800a272:	f7fc fb0b 	bl	800688c <exti_register_event_handler>
	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize OKE.");
 800a276:	2307      	movs	r3, #7
 800a278:	6821      	ldr	r1, [r4, #0]
 800a27a:	4a21      	ldr	r2, [pc, #132]	; (800a300 <_Z11task_lorarxPv+0xa4>)
 800a27c:	9300      	str	r3, [sp, #0]
 800a27e:	4821      	ldr	r0, [pc, #132]	; (800a304 <_Z11task_lorarxPv+0xa8>)
 800a280:	2314      	movs	r3, #20
 800a282:	f7fa ff69 	bl	8005158 <_ZN6sx127x4initEP3spilhm>
 800a286:	b380      	cbz	r0, 800a2ea <_Z11task_lorarxPv+0x8e>
 800a288:	491f      	ldr	r1, [pc, #124]	; (800a308 <_Z11task_lorarxPv+0xac>)
 800a28a:	4820      	ldr	r0, [pc, #128]	; (800a30c <_Z11task_lorarxPv+0xb0>)
 800a28c:	f7ff fbb4 	bl	80099f8 <LOG_INFO>
	lora_queue = xQueueCreate(20, sizeof(uint32_t));
 800a290:	2200      	movs	r2, #0
 800a292:	2104      	movs	r1, #4
 800a294:	2014      	movs	r0, #20
 800a296:	f7f7 fbb7 	bl	8001a08 <xQueueGenericCreate>
 800a29a:	4c1d      	ldr	r4, [pc, #116]	; (800a310 <_Z11task_lorarxPv+0xb4>)
	loraif_init(&lora, LORA_SEND_SYNCWORD, LORA_RECV_SYNCWORD, 5000, 3);
 800a29c:	2503      	movs	r5, #3
 800a29e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a2a2:	22ab      	movs	r2, #171	; 0xab
 800a2a4:	2112      	movs	r1, #18
 800a2a6:	9500      	str	r5, [sp, #0]
	lora_queue = xQueueCreate(20, sizeof(uint32_t));
 800a2a8:	6020      	str	r0, [r4, #0]
	loraif_init(&lora, LORA_SEND_SYNCWORD, LORA_RECV_SYNCWORD, 5000, 3);
 800a2aa:	4816      	ldr	r0, [pc, #88]	; (800a304 <_Z11task_lorarxPv+0xa8>)
 800a2ac:	f7fa f990 	bl	80045d0 <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 800a2b0:	4818      	ldr	r0, [pc, #96]	; (800a314 <_Z11task_lorarxPv+0xb8>)
 800a2b2:	f7fa f9d9 	bl	8004668 <loraif_register_event_handler>
	lora.setSyncWord(LORA_RECV_SYNCWORD);
 800a2b6:	4813      	ldr	r0, [pc, #76]	; (800a304 <_Z11task_lorarxPv+0xa8>)
 800a2b8:	21ab      	movs	r1, #171	; 0xab
 800a2ba:	f7fb fdcb 	bl	8005e54 <_ZN6sx127x11setSyncWordEh>
	lora.register_event_handler(NULL, lora_event_handler);
 800a2be:	4a16      	ldr	r2, [pc, #88]	; (800a318 <_Z11task_lorarxPv+0xbc>)
 800a2c0:	4810      	ldr	r0, [pc, #64]	; (800a304 <_Z11task_lorarxPv+0xa8>)
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	f7fb f9da 	bl	800567c <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	lora.Receive(0);
 800a2c8:	480e      	ldr	r0, [pc, #56]	; (800a304 <_Z11task_lorarxPv+0xa8>)
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	f7fb fcde 	bl	8005c8c <_ZN6sx127x7ReceiveEh>
	lora_rx_smp = xSemaphoreCreateBinary();
 800a2d0:	462a      	mov	r2, r5
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	2001      	movs	r0, #1
 800a2d6:	f7f7 fb97 	bl	8001a08 <xQueueGenericCreate>
 800a2da:	4b10      	ldr	r3, [pc, #64]	; (800a31c <_Z11task_lorarxPv+0xc0>)
 800a2dc:	6018      	str	r0, [r3, #0]
		loraif_rx_process(&lora_queue);
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7fa fa22 	bl	8004728 <loraif_rx_process>
		loraif_response();
 800a2e4:	f7fa fc6e 	bl	8004bc4 <loraif_response>
	while(1){
 800a2e8:	e7f9      	b.n	800a2de <_Z11task_lorarxPv+0x82>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 800a2ea:	490d      	ldr	r1, [pc, #52]	; (800a320 <_Z11task_lorarxPv+0xc4>)
 800a2ec:	4807      	ldr	r0, [pc, #28]	; (800a30c <_Z11task_lorarxPv+0xb0>)
 800a2ee:	f7ff fbff 	bl	8009af0 <LOG_ERROR>
 800a2f2:	e7cd      	b.n	800a290 <_Z11task_lorarxPv+0x34>
 800a2f4:	20000084 	.word	0x20000084
 800a2f8:	200000fc 	.word	0x200000fc
 800a2fc:	0800a325 	.word	0x0800a325
 800a300:	19cf0e40 	.word	0x19cf0e40
 800a304:	2000b9d8 	.word	0x2000b9d8
 800a308:	0800ef90 	.word	0x0800ef90
 800a30c:	0800efa8 	.word	0x0800efa8
 800a310:	2000ba04 	.word	0x2000ba04
 800a314:	0800a6ed 	.word	0x0800a6ed
 800a318:	0800a42d 	.word	0x0800a42d
 800a31c:	2000ba08 	.word	0x2000ba08
 800a320:	0800efb0 	.word	0x0800efb0

0800a324 <_Z20gpioA0_event_handlerPv>:
	lora.IRQHandler();
 800a324:	4801      	ldr	r0, [pc, #4]	; (800a32c <_Z20gpioA0_event_handlerPv+0x8>)
 800a326:	f7fb bdb9 	b.w	8005e9c <_ZN6sx127x10IRQHandlerEv>
 800a32a:	bf00      	nop
 800a32c:	2000b9d8 	.word	0x2000b9d8

0800a330 <_Z12wifi_requestPct>:
void wifi_request(char *str, uint16_t size){
 800a330:	b510      	push	{r4, lr}
	usart1->transmit((uint8_t *)str, size);
 800a332:	4c07      	ldr	r4, [pc, #28]	; (800a350 <_Z12wifi_requestPct+0x20>)
void wifi_request(char *str, uint16_t size){
 800a334:	b082      	sub	sp, #8
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
	usart1->transmit((uint8_t *)str, size);
 800a33a:	4668      	mov	r0, sp
 800a33c:	6821      	ldr	r1, [r4, #0]
 800a33e:	f7fe fc51 	bl	8008be4 <_ZN5usart8transmitEPht>
	delay_ms(1);
 800a342:	2001      	movs	r0, #1
}
 800a344:	b002      	add	sp, #8
 800a346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	delay_ms(1);
 800a34a:	f7fe b8c7 	b.w	80084dc <delay_ms>
 800a34e:	bf00      	nop
 800a350:	20000090 	.word	0x20000090

0800a354 <_Z20wifi_command_handler10wifi_cmd_tPv>:
void wifi_command_handler(wifi_cmd_t cmd, void *param){
 800a354:	b510      	push	{r4, lr}
 800a356:	b084      	sub	sp, #16
	pkt_json_t json;
 800a358:	2300      	movs	r3, #0
void wifi_command_handler(wifi_cmd_t cmd, void *param){
 800a35a:	460c      	mov	r4, r1
	pkt_json_t json;
 800a35c:	9301      	str	r3, [sp, #4]
 800a35e:	f88d 3008 	strb.w	r3, [sp, #8]
 800a362:	9303      	str	r3, [sp, #12]
	switch(cmd){
 800a364:	2810      	cmp	r0, #16
 800a366:	d80f      	bhi.n	800a388 <_Z20wifi_command_handler10wifi_cmd_tPv+0x34>
 800a368:	e8df f000 	tbb	[pc, r0]
 800a36c:	22180e10 	.word	0x22180e10
 800a370:	0e0e0e39 	.word	0x0e0e0e39
 800a374:	0e0e0e0e 	.word	0x0e0e0e0e
 800a378:	0e0e0e0e 	.word	0x0e0e0e0e
 800a37c:	09          	.byte	0x09
 800a37d:	00          	.byte	0x00
			LOG_EVENT("HTTP DATA", "%s.", resp_data);
 800a37e:	4924      	ldr	r1, [pc, #144]	; (800a410 <_Z20wifi_command_handler10wifi_cmd_tPv+0xbc>)
 800a380:	4824      	ldr	r0, [pc, #144]	; (800a414 <_Z20wifi_command_handler10wifi_cmd_tPv+0xc0>)
 800a382:	4622      	mov	r2, r4
 800a384:	f7ff fc6e 	bl	8009c64 <LOG_EVENT>
}
 800a388:	b004      	add	sp, #16
 800a38a:	bd10      	pop	{r4, pc}
			LOG_EVENT(TAG, "WIFI_ERR");
 800a38c:	4922      	ldr	r1, [pc, #136]	; (800a418 <_Z20wifi_command_handler10wifi_cmd_tPv+0xc4>)
 800a38e:	4823      	ldr	r0, [pc, #140]	; (800a41c <_Z20wifi_command_handler10wifi_cmd_tPv+0xc8>)
 800a390:	f7ff fc68 	bl	8009c64 <LOG_EVENT>
			wifiif_restart();
 800a394:	f7fb ffe6 	bl	8006364 <wifiif_restart>
}
 800a398:	b004      	add	sp, #16
 800a39a:	bd10      	pop	{r4, pc}
			wifiif_state_running(true);
 800a39c:	2001      	movs	r0, #1
 800a39e:	f7fc f83f 	bl	8006420 <wifiif_state_running>
			LOG_EVENT("WIFI_CMD_WIFI_SCAN", "%s.", resp_data);
 800a3a2:	491b      	ldr	r1, [pc, #108]	; (800a410 <_Z20wifi_command_handler10wifi_cmd_tPv+0xbc>)
 800a3a4:	481e      	ldr	r0, [pc, #120]	; (800a420 <_Z20wifi_command_handler10wifi_cmd_tPv+0xcc>)
 800a3a6:	4622      	mov	r2, r4
 800a3a8:	f7ff fc5c 	bl	8009c64 <LOG_EVENT>
}
 800a3ac:	b004      	add	sp, #16
 800a3ae:	bd10      	pop	{r4, pc}
			if(json_get_object(resp_data, &json, (char *)"isconnected") == PKT_ERR_OK){
 800a3b0:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <_Z20wifi_command_handler10wifi_cmd_tPv+0xd0>)
 800a3b2:	a901      	add	r1, sp, #4
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f7fa fd0f 	bl	8004dd8 <json_get_object>
 800a3ba:	b958      	cbnz	r0, 800a3d4 <_Z20wifi_command_handler10wifi_cmd_tPv+0x80>
				if(strcmp(json.value, "1") == 0){
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	781a      	ldrb	r2, [r3, #0]
 800a3c0:	2a31      	cmp	r2, #49	; 0x31
 800a3c2:	d119      	bne.n	800a3f8 <_Z20wifi_command_handler10wifi_cmd_tPv+0xa4>
 800a3c4:	7859      	ldrb	r1, [r3, #1]
 800a3c6:	b9b9      	cbnz	r1, 800a3f8 <_Z20wifi_command_handler10wifi_cmd_tPv+0xa4>
					wifiif_state_running(true);
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f7fc f829 	bl	8006420 <wifiif_state_running>
					wifiif_set_wificonnect_state(true);
 800a3ce:	2001      	movs	r0, #1
 800a3d0:	f7fb ffe6 	bl	80063a0 <wifiif_set_wificonnect_state>
			json_release_object(&json);
 800a3d4:	a801      	add	r0, sp, #4
 800a3d6:	f7fa fe17 	bl	8005008 <json_release_object>
}
 800a3da:	b004      	add	sp, #16
 800a3dc:	bd10      	pop	{r4, pc}
			wifiif_state_running(true);
 800a3de:	2001      	movs	r0, #1
 800a3e0:	f7fc f81e 	bl	8006420 <wifiif_state_running>
			wifiif_set_wificonnect_state(true);
 800a3e4:	2001      	movs	r0, #1
 800a3e6:	f7fb ffdb 	bl	80063a0 <wifiif_set_wificonnect_state>
			LOG_EVENT("WIFI_CONN", "%s.", resp_data);
 800a3ea:	4909      	ldr	r1, [pc, #36]	; (800a410 <_Z20wifi_command_handler10wifi_cmd_tPv+0xbc>)
 800a3ec:	480e      	ldr	r0, [pc, #56]	; (800a428 <_Z20wifi_command_handler10wifi_cmd_tPv+0xd4>)
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	f7ff fc38 	bl	8009c64 <LOG_EVENT>
}
 800a3f4:	b004      	add	sp, #16
 800a3f6:	bd10      	pop	{r4, pc}
				else if(strcmp(json.value, "0") == 0){
 800a3f8:	2a30      	cmp	r2, #48	; 0x30
 800a3fa:	d1eb      	bne.n	800a3d4 <_Z20wifi_command_handler10wifi_cmd_tPv+0x80>
 800a3fc:	785c      	ldrb	r4, [r3, #1]
 800a3fe:	2c00      	cmp	r4, #0
 800a400:	d1e8      	bne.n	800a3d4 <_Z20wifi_command_handler10wifi_cmd_tPv+0x80>
					wifiif_state_running(false);
 800a402:	4620      	mov	r0, r4
 800a404:	f7fc f80c 	bl	8006420 <wifiif_state_running>
					wifiif_set_wificonnect_state(false);
 800a408:	4620      	mov	r0, r4
 800a40a:	f7fb ffc9 	bl	80063a0 <wifiif_set_wificonnect_state>
 800a40e:	e7e1      	b.n	800a3d4 <_Z20wifi_command_handler10wifi_cmd_tPv+0x80>
 800a410:	0800efc8 	.word	0x0800efc8
 800a414:	0800efe0 	.word	0x0800efe0
 800a418:	0800e56c 	.word	0x0800e56c
 800a41c:	0800efa8 	.word	0x0800efa8
 800a420:	0800efcc 	.word	0x0800efcc
 800a424:	0800e4c8 	.word	0x0800e4c8
 800a428:	0800e5a8 	.word	0x0800e5a8

0800a42c <_Z18lora_event_handlerPvh>:
	if(packetSize){
 800a42c:	b901      	cbnz	r1, 800a430 <_Z18lora_event_handlerPvh+0x4>
 800a42e:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 800a430:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 800a432:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 800a434:	b087      	sub	sp, #28
 800a436:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 800a438:	f000 fb92 	bl	800ab60 <malloc>
 800a43c:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 800a43e:	4820      	ldr	r0, [pc, #128]	; (800a4c0 <_Z18lora_event_handlerPvh+0x94>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 800a440:	9104      	str	r1, [sp, #16]
		lora.receive(lora_RxBuf);
 800a442:	f7fb fbcd 	bl	8005be0 <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 800a446:	9b04      	ldr	r3, [sp, #16]
		LOG_WARN(TAG, "%s  [packet RSSI = %d, RSSI = %d]", lora_RxBuf, lora.packetRssi(), lora.rssi());
 800a448:	481d      	ldr	r0, [pc, #116]	; (800a4c0 <_Z18lora_event_handlerPvh+0x94>)
		lora_RxBuf[packetSize] = '\0';
 800a44a:	2500      	movs	r5, #0
 800a44c:	551d      	strb	r5, [r3, r4]
		LOG_WARN(TAG, "%s  [packet RSSI = %d, RSSI = %d]", lora_RxBuf, lora.packetRssi(), lora.rssi());
 800a44e:	9a04      	ldr	r2, [sp, #16]
 800a450:	9203      	str	r2, [sp, #12]
 800a452:	f7fb fae7 	bl	8005a24 <_ZN6sx127x10packetRssiEv>
 800a456:	4603      	mov	r3, r0
 800a458:	4819      	ldr	r0, [pc, #100]	; (800a4c0 <_Z18lora_event_handlerPvh+0x94>)
 800a45a:	9302      	str	r3, [sp, #8]
 800a45c:	f7fb fb12 	bl	8005a84 <_ZN6sx127x4rssiEv>
 800a460:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a464:	9000      	str	r0, [sp, #0]
 800a466:	4917      	ldr	r1, [pc, #92]	; (800a4c4 <_Z18lora_event_handlerPvh+0x98>)
 800a468:	4817      	ldr	r0, [pc, #92]	; (800a4c8 <_Z18lora_event_handlerPvh+0x9c>)
 800a46a:	f7ff fb03 	bl	8009a74 <LOG_WARN>
		if(loraif_check_crc(lora_RxBuf) == true){
 800a46e:	9804      	ldr	r0, [sp, #16]
 800a470:	f7fa f900 	bl	8004674 <loraif_check_crc>
 800a474:	b940      	cbnz	r0, 800a488 <_Z18lora_event_handlerPvh+0x5c>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 800a476:	4814      	ldr	r0, [pc, #80]	; (800a4c8 <_Z18lora_event_handlerPvh+0x9c>)
 800a478:	4914      	ldr	r1, [pc, #80]	; (800a4cc <_Z18lora_event_handlerPvh+0xa0>)
 800a47a:	f7ff fb39 	bl	8009af0 <LOG_ERROR>
			free(lora_RxBuf);
 800a47e:	9804      	ldr	r0, [sp, #16]
 800a480:	f000 fb76 	bl	800ab70 <free>
}
 800a484:	b007      	add	sp, #28
 800a486:	bd30      	pop	{r4, r5, pc}
			if(xSemaphoreTakeFromISR(lora_rx_smp, &pxHigherPriorityTaskWoken)){
 800a488:	4c11      	ldr	r4, [pc, #68]	; (800a4d0 <_Z18lora_event_handlerPvh+0xa4>)
			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800a48a:	9505      	str	r5, [sp, #20]
			if(xSemaphoreTakeFromISR(lora_rx_smp, &pxHigherPriorityTaskWoken)){
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	aa05      	add	r2, sp, #20
 800a490:	4629      	mov	r1, r5
 800a492:	f7f8 f87b 	bl	800258c <xQueueReceiveFromISR>
 800a496:	2800      	cmp	r0, #0
 800a498:	d0f1      	beq.n	800a47e <_Z18lora_event_handlerPvh+0x52>
				if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 800a49a:	4a0e      	ldr	r2, [pc, #56]	; (800a4d4 <_Z18lora_event_handlerPvh+0xa8>)
 800a49c:	462b      	mov	r3, r5
 800a49e:	6810      	ldr	r0, [r2, #0]
 800a4a0:	a904      	add	r1, sp, #16
 800a4a2:	aa05      	add	r2, sp, #20
 800a4a4:	f7f7 fca8 	bl	8001df8 <xQueueGenericSendFromISR>
 800a4a8:	2801      	cmp	r0, #1
 800a4aa:	d104      	bne.n	800a4b6 <_Z18lora_event_handlerPvh+0x8a>
				xSemaphoreGiveFromISR(lora_rx_smp, &pxHigherPriorityTaskWoken);
 800a4ac:	6820      	ldr	r0, [r4, #0]
 800a4ae:	a905      	add	r1, sp, #20
 800a4b0:	f7f7 fd08 	bl	8001ec4 <xQueueGiveFromISR>
 800a4b4:	e7e6      	b.n	800a484 <_Z18lora_event_handlerPvh+0x58>
					LOG_ERROR(TAG, "LoRa error queue receive.");
 800a4b6:	4908      	ldr	r1, [pc, #32]	; (800a4d8 <_Z18lora_event_handlerPvh+0xac>)
 800a4b8:	4803      	ldr	r0, [pc, #12]	; (800a4c8 <_Z18lora_event_handlerPvh+0x9c>)
 800a4ba:	f7ff fb19 	bl	8009af0 <LOG_ERROR>
 800a4be:	e7f5      	b.n	800a4ac <_Z18lora_event_handlerPvh+0x80>
 800a4c0:	2000b9d8 	.word	0x2000b9d8
 800a4c4:	0800efec 	.word	0x0800efec
 800a4c8:	0800efa8 	.word	0x0800efa8
 800a4cc:	0800f02c 	.word	0x0800f02c
 800a4d0:	2000ba08 	.word	0x2000ba08
 800a4d4:	2000ba04 	.word	0x2000ba04
 800a4d8:	0800f010 	.word	0x0800f010

0800a4dc <_Z17wifi_uart_handler13usart_event_tPv>:
	if(event == (USART_EVENT_IDLE_STATE)){
 800a4dc:	2804      	cmp	r0, #4
 800a4de:	d000      	beq.n	800a4e2 <_Z17wifi_uart_handler13usart_event_tPv+0x6>
 800a4e0:	4770      	bx	lr
void wifi_uart_handler(usart_event_t event, void *param){
 800a4e2:	b530      	push	{r4, r5, lr}
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800a4e4:	4c14      	ldr	r4, [pc, #80]	; (800a538 <_Z17wifi_uart_handler13usart_event_tPv+0x5c>)
void wifi_uart_handler(usart_event_t event, void *param){
 800a4e6:	b087      	sub	sp, #28
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 800a4e8:	a802      	add	r0, sp, #8
 800a4ea:	6821      	ldr	r1, [r4, #0]
 800a4ec:	aa01      	add	r2, sp, #4
 800a4ee:	f7fe fc2b 	bl	8008d48 <_ZN5usart10get_bufferEPPh>
		if(!is_oke(&ret)){
 800a4f2:	a802      	add	r0, sp, #8
 800a4f4:	f7ff fc74 	bl	8009de0 <is_oke>
 800a4f8:	b1c0      	cbz	r0, 800a52c <_Z17wifi_uart_handler13usart_event_tPv+0x50>
		if(strcmp(rxdata, "WIFI_RESTART: OK") == 0) {
 800a4fa:	9d01      	ldr	r5, [sp, #4]
 800a4fc:	490f      	ldr	r1, [pc, #60]	; (800a53c <_Z17wifi_uart_handler13usart_event_tPv+0x60>)
 800a4fe:	4628      	mov	r0, r5
 800a500:	f7f5 fe76 	bl	80001f0 <strcmp>
 800a504:	b150      	cbz	r0, 800a51c <_Z17wifi_uart_handler13usart_event_tPv+0x40>
		wifiif_get_break_data(rxdata);
 800a506:	4628      	mov	r0, r5
 800a508:	f7fb fede 	bl	80062c8 <wifiif_get_break_data>
		usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 800a50c:	6821      	ldr	r1, [r4, #0]
 800a50e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a512:	a804      	add	r0, sp, #16
 800a514:	f7fe fb9c 	bl	8008c50 <_ZN5usart24receive_to_idle_start_itEt>
}
 800a518:	b007      	add	sp, #28
 800a51a:	bd30      	pop	{r4, r5, pc}
			wifiif_state_running(false);
 800a51c:	f7fb ff80 	bl	8006420 <wifiif_state_running>
			LOG_ERROR("WIFI", "wifi module restart.");
 800a520:	4907      	ldr	r1, [pc, #28]	; (800a540 <_Z17wifi_uart_handler13usart_event_tPv+0x64>)
 800a522:	4808      	ldr	r0, [pc, #32]	; (800a544 <_Z17wifi_uart_handler13usart_event_tPv+0x68>)
 800a524:	f7ff fae4 	bl	8009af0 <LOG_ERROR>
		wifiif_get_break_data(rxdata);
 800a528:	9d01      	ldr	r5, [sp, #4]
 800a52a:	e7ec      	b.n	800a506 <_Z17wifi_uart_handler13usart_event_tPv+0x2a>
			LOG_ERROR(TAG, "Can't get UART data.");
 800a52c:	4906      	ldr	r1, [pc, #24]	; (800a548 <_Z17wifi_uart_handler13usart_event_tPv+0x6c>)
 800a52e:	4807      	ldr	r0, [pc, #28]	; (800a54c <_Z17wifi_uart_handler13usart_event_tPv+0x70>)
 800a530:	f7ff fade 	bl	8009af0 <LOG_ERROR>
			return;
 800a534:	e7f0      	b.n	800a518 <_Z17wifi_uart_handler13usart_event_tPv+0x3c>
 800a536:	bf00      	nop
 800a538:	20000090 	.word	0x20000090
 800a53c:	0800f064 	.word	0x0800f064
 800a540:	0800f078 	.word	0x0800f078
 800a544:	0800f090 	.word	0x0800f090
 800a548:	0800f04c 	.word	0x0800f04c
 800a54c:	0800efa8 	.word	0x0800efa8

0800a550 <_Z9task_wifiPv>:
void task_wifi(void *){
 800a550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	usart1->init(&wf_uart_conf);
 800a554:	4c53      	ldr	r4, [pc, #332]	; (800a6a4 <_Z9task_wifiPv+0x154>)
 800a556:	4a54      	ldr	r2, [pc, #336]	; (800a6a8 <_Z9task_wifiPv+0x158>)
 800a558:	6821      	ldr	r1, [r4, #0]
 800a55a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800a6e0 <_Z9task_wifiPv+0x190>
 800a55e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800a6e4 <_Z9task_wifiPv+0x194>
 800a562:	4f52      	ldr	r7, [pc, #328]	; (800a6ac <_Z9task_wifiPv+0x15c>)
	LOG_DEBUG(TAG, "Suspend LoRa task.");
 800a564:	f8df a180 	ldr.w	sl, [pc, #384]	; 800a6e8 <_Z9task_wifiPv+0x198>
		gpio_set(GPIOB, 14);
 800a568:	4e51      	ldr	r6, [pc, #324]	; (800a6b0 <_Z9task_wifiPv+0x160>)
void task_wifi(void *){
 800a56a:	b083      	sub	sp, #12
	usart1->init(&wf_uart_conf);
 800a56c:	4668      	mov	r0, sp
 800a56e:	f7fe f91f 	bl	80087b0 <_ZN5usart4initEP14usart_config_t>
	usart1->register_event_handler(wifi_uart_handler, NULL);
 800a572:	2300      	movs	r3, #0
 800a574:	6821      	ldr	r1, [r4, #0]
 800a576:	4a4f      	ldr	r2, [pc, #316]	; (800a6b4 <_Z9task_wifiPv+0x164>)
 800a578:	4668      	mov	r0, sp
 800a57a:	f7fe fb11 	bl	8008ba0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>
	usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 800a57e:	6821      	ldr	r1, [r4, #0]
	LOG_DEBUG(TAG, "Suspend LoRa task.");
 800a580:	4c4d      	ldr	r4, [pc, #308]	; (800a6b8 <_Z9task_wifiPv+0x168>)
	usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 800a582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a586:	4668      	mov	r0, sp
 800a588:	f7fe fb62 	bl	8008c50 <_ZN5usart24receive_to_idle_start_itEt>
	wifiif_init(wifi_request);
 800a58c:	484b      	ldr	r0, [pc, #300]	; (800a6bc <_Z9task_wifiPv+0x16c>)
 800a58e:	f7fb fecd 	bl	800632c <wifiif_init>
	wifiif_register_command_handler(wifi_command_handler);
 800a592:	484b      	ldr	r0, [pc, #300]	; (800a6c0 <_Z9task_wifiPv+0x170>)
 800a594:	f7fb fee0 	bl	8006358 <wifiif_register_command_handler>
	wifiif_restart();
 800a598:	f7fb fee4 	bl	8006364 <wifiif_restart>
	LOG_DEBUG(TAG, "Suspend LoRa task.");
 800a59c:	4651      	mov	r1, sl
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f7ff fae4 	bl	8009b6c <LOG_DEBUG>
	vTaskSuspend(task_lorarx_handle);
 800a5a4:	f8d9 0000 	ldr.w	r0, [r9]
 800a5a8:	f7f8 fcf2 	bl	8002f90 <vTaskSuspend>
	vTaskSuspend(task_loratx_handle);
 800a5ac:	f8d8 0000 	ldr.w	r0, [r8]
 800a5b0:	f7f8 fcee 	bl	8002f90 <vTaskSuspend>
	xSemaphoreTake(lora_rx_smp, 5);
 800a5b4:	2105      	movs	r1, #5
 800a5b6:	6838      	ldr	r0, [r7, #0]
 800a5b8:	f7f7 fe5e 	bl	8002278 <xQueueSemaphoreTake>
		gpio_set(GPIOB, 14);
 800a5bc:	210e      	movs	r1, #14
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7fc fea6 	bl	8007310 <gpio_set>
		vTaskDelay(active_time);
 800a5c4:	2014      	movs	r0, #20
 800a5c6:	f7f8 fc89 	bl	8002edc <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a5ca:	210e      	movs	r1, #14
 800a5cc:	4630      	mov	r0, r6
 800a5ce:	f7fc fea7 	bl	8007320 <gpio_reset>
		vTaskDelay(idle_time);
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	f7f8 fc82 	bl	8002edc <vTaskDelay>
	if(!wifiif_state_is_running()) wifiif_restart();
 800a5d8:	f7fb ff28 	bl	800642c <wifiif_state_is_running>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d05d      	beq.n	800a69c <_Z9task_wifiPv+0x14c>
	vTaskDelay(1000);
 800a5e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a5e4:	f7f8 fc7a 	bl	8002edc <vTaskDelay>
	wifiif_connect((char *)"FREE", (char *)"0986382835", (char *)"WIFI_AUTH_WPA2_PSK");
 800a5e8:	4a36      	ldr	r2, [pc, #216]	; (800a6c4 <_Z9task_wifiPv+0x174>)
 800a5ea:	4937      	ldr	r1, [pc, #220]	; (800a6c8 <_Z9task_wifiPv+0x178>)
 800a5ec:	4837      	ldr	r0, [pc, #220]	; (800a6cc <_Z9task_wifiPv+0x17c>)
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800a5ee:	4d38      	ldr	r5, [pc, #224]	; (800a6d0 <_Z9task_wifiPv+0x180>)
	wifiif_connect((char *)"FREE", (char *)"0986382835", (char *)"WIFI_AUTH_WPA2_PSK");
 800a5f0:	f7fb fedc 	bl	80063ac <wifiif_connect>
	vTaskDelay(1000);
 800a5f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a5f8:	f7f8 fc70 	bl	8002edc <vTaskDelay>
 800a5fc:	f04f 0b03 	mov.w	fp, #3
	while(wifiif_wificonnected() == false) {
 800a600:	f7fb fec8 	bl	8006394 <wifiif_wificonnected>
 800a604:	b9a8      	cbnz	r0, 800a632 <_Z9task_wifiPv+0xe2>
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800a606:	f7ff fcc5 	bl	8009f94 <sys_get_free_heap_size>
 800a60a:	4629      	mov	r1, r5
 800a60c:	4602      	mov	r2, r0
 800a60e:	4620      	mov	r0, r4
 800a610:	f7ff faea 	bl	8009be8 <LOG_MEM>
		wifiif_checkconnect();
 800a614:	f7fb feb8 	bl	8006388 <wifiif_checkconnect>
		vTaskDelay(2000);
 800a618:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a61c:	f7f8 fc5e 	bl	8002edc <vTaskDelay>
		if(reconn_num > 2) goto restart_wifi;
 800a620:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800a624:	f013 0bff 	ands.w	fp, r3, #255	; 0xff
 800a628:	d0b8      	beq.n	800a59c <_Z9task_wifiPv+0x4c>
	while(wifiif_wificonnected() == false) {
 800a62a:	f7fb feb3 	bl	8006394 <wifiif_wificonnected>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d0e9      	beq.n	800a606 <_Z9task_wifiPv+0xb6>
	wifiif_state_running(true);
 800a632:	2001      	movs	r0, #1
 800a634:	f7fb fef4 	bl	8006420 <wifiif_state_running>
	vTaskDelay(1000);
 800a638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a63c:	f7f8 fc4e 	bl	8002edc <vTaskDelay>
	firebase_init((char *)"https://iotnhakho-default-rtdb.asia-southeast1.firebasedatabase.app/", NULL);
 800a640:	2100      	movs	r1, #0
 800a642:	4824      	ldr	r0, [pc, #144]	; (800a6d4 <_Z9task_wifiPv+0x184>)
 800a644:	f7ff fd90 	bl	800a168 <firebase_init>
	vTaskDelay(1000);
 800a648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a64c:	f7f8 fc46 	bl	8002edc <vTaskDelay>
	vTaskResume(task_lorarx_handle);
 800a650:	f8d9 0000 	ldr.w	r0, [r9]
 800a654:	f7f8 fd14 	bl	8003080 <vTaskResume>
	vTaskResume(task_loratx_handle);
 800a658:	f8d8 0000 	ldr.w	r0, [r8]
 800a65c:	f7f8 fd10 	bl	8003080 <vTaskResume>
	LOG_DEBUG(TAG, "Resume LoRa task.");
 800a660:	4620      	mov	r0, r4
 800a662:	491d      	ldr	r1, [pc, #116]	; (800a6d8 <_Z9task_wifiPv+0x188>)
 800a664:	f7ff fa82 	bl	8009b6c <LOG_DEBUG>
	xSemaphoreGive(lora_rx_smp);
 800a668:	2300      	movs	r3, #0
 800a66a:	6838      	ldr	r0, [r7, #0]
 800a66c:	461a      	mov	r2, r3
 800a66e:	4619      	mov	r1, r3
 800a670:	f7f7 fa0c 	bl	8001a8c <xQueueGenericSend>
 800a674:	e007      	b.n	800a686 <_Z9task_wifiPv+0x136>
		if(wifiif_state_is_running() == false || wifiif_wificonnected() == false) {
 800a676:	f7fb fe8d 	bl	8006394 <wifiif_wificonnected>
 800a67a:	4603      	mov	r3, r0
		vTaskDelay(5000);
 800a67c:	f241 3088 	movw	r0, #5000	; 0x1388
		if(wifiif_state_is_running() == false || wifiif_wificonnected() == false) {
 800a680:	b13b      	cbz	r3, 800a692 <_Z9task_wifiPv+0x142>
		vTaskDelay(5000);
 800a682:	f7f8 fc2b 	bl	8002edc <vTaskDelay>
		wifiif_checkconnect();
 800a686:	f7fb fe7f 	bl	8006388 <wifiif_checkconnect>
		if(wifiif_state_is_running() == false || wifiif_wificonnected() == false) {
 800a68a:	f7fb fecf 	bl	800642c <wifiif_state_is_running>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d1f1      	bne.n	800a676 <_Z9task_wifiPv+0x126>
			LOG_ERROR(TAG, "WiFi module error.");
 800a692:	4912      	ldr	r1, [pc, #72]	; (800a6dc <_Z9task_wifiPv+0x18c>)
 800a694:	4620      	mov	r0, r4
 800a696:	f7ff fa2b 	bl	8009af0 <LOG_ERROR>
			goto restart_wifi;
 800a69a:	e77f      	b.n	800a59c <_Z9task_wifiPv+0x4c>
	if(!wifiif_state_is_running()) wifiif_restart();
 800a69c:	f7fb fe62 	bl	8006364 <wifiif_restart>
 800a6a0:	e79e      	b.n	800a5e0 <_Z9task_wifiPv+0x90>
 800a6a2:	bf00      	nop
 800a6a4:	20000090 	.word	0x20000090
 800a6a8:	20000134 	.word	0x20000134
 800a6ac:	2000ba08 	.word	0x2000ba08
 800a6b0:	40020400 	.word	0x40020400
 800a6b4:	0800a4dd 	.word	0x0800a4dd
 800a6b8:	0800efa8 	.word	0x0800efa8
 800a6bc:	0800a331 	.word	0x0800a331
 800a6c0:	0800a355 	.word	0x0800a355
 800a6c4:	0800f0ac 	.word	0x0800f0ac
 800a6c8:	0800f0c0 	.word	0x0800f0c0
 800a6cc:	0800f0cc 	.word	0x0800f0cc
 800a6d0:	0800f0d4 	.word	0x0800f0d4
 800a6d4:	0800f0e8 	.word	0x0800f0e8
 800a6d8:	0800f130 	.word	0x0800f130
 800a6dc:	0800e4d4 	.word	0x0800e4d4
 800a6e0:	2000ba0c 	.word	0x2000ba0c
 800a6e4:	2000ba10 	.word	0x2000ba10
 800a6e8:	0800f098 	.word	0x0800f098

0800a6ec <_Z20loraif_event_handler12lora_event_tmPc>:
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800a6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskSuspend(task_loratx_handle);
 800a6f0:	4f66      	ldr	r7, [pc, #408]	; (800a88c <_Z20loraif_event_handler12lora_event_tmPc+0x1a0>)
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	4615      	mov	r5, r2
	vTaskSuspend(task_loratx_handle);
 800a6f6:	6838      	ldr	r0, [r7, #0]
void loraif_event_handler(lora_event_t event, uint32_t device_address, char *data){
 800a6f8:	460e      	mov	r6, r1
	vTaskSuspend(task_loratx_handle);
 800a6fa:	f7f8 fc49 	bl	8002f90 <vTaskSuspend>
	if(data != NULL) LOG_INFO(TAG, "LoRa data: %s", data);
 800a6fe:	b125      	cbz	r5, 800a70a <_Z20loraif_event_handler12lora_event_tmPc+0x1e>
 800a700:	4963      	ldr	r1, [pc, #396]	; (800a890 <_Z20loraif_event_handler12lora_event_tmPc+0x1a4>)
 800a702:	4864      	ldr	r0, [pc, #400]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a704:	462a      	mov	r2, r5
 800a706:	f7ff f977 	bl	80099f8 <LOG_INFO>
	switch(event){
 800a70a:	2c0a      	cmp	r4, #10
 800a70c:	d810      	bhi.n	800a730 <_Z20loraif_event_handler12lora_event_tmPc+0x44>
 800a70e:	e8df f004 	tbb	[pc, r4]
 800a712:	2118      	.short	0x2118
 800a714:	584f460f 	.word	0x584f460f
 800a718:	9f786f0f 	.word	0x9f786f0f
 800a71c:	06          	.byte	0x06
 800a71d:	00          	.byte	0x00
			LOG_WARN(TAG, "LORA_DEVICE_NOT_RESPONSE");
 800a71e:	495e      	ldr	r1, [pc, #376]	; (800a898 <_Z20loraif_event_handler12lora_event_tmPc+0x1ac>)
 800a720:	485c      	ldr	r0, [pc, #368]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a722:	f7ff f9a7 	bl	8009a74 <LOG_WARN>
	vTaskResume(task_loratx_handle);
 800a726:	6838      	ldr	r0, [r7, #0]
}
 800a728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a72c:	f7f8 bca8 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LoRa other event.");
 800a730:	4858      	ldr	r0, [pc, #352]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a732:	495a      	ldr	r1, [pc, #360]	; (800a89c <_Z20loraif_event_handler12lora_event_tmPc+0x1b0>)
 800a734:	f7ff fa96 	bl	8009c64 <LOG_EVENT>
	vTaskResume(task_loratx_handle);
 800a738:	6838      	ldr	r0, [r7, #0]
}
 800a73a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a73e:	f7f8 bc9f 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_ERR");
 800a742:	4854      	ldr	r0, [pc, #336]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a744:	4956      	ldr	r1, [pc, #344]	; (800a8a0 <_Z20loraif_event_handler12lora_event_tmPc+0x1b4>)
 800a746:	f7ff fa8d 	bl	8009c64 <LOG_EVENT>
	vTaskResume(task_loratx_handle);
 800a74a:	6838      	ldr	r0, [r7, #0]
}
 800a74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a750:	f7f8 bc96 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_REQ_ADDRESS");
 800a754:	4953      	ldr	r1, [pc, #332]	; (800a8a4 <_Z20loraif_event_handler12lora_event_tmPc+0x1b8>)
 800a756:	484f      	ldr	r0, [pc, #316]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a758:	f7ff fa84 	bl	8009c64 <LOG_EVENT>
		gpio_set(GPIOB, 14);
 800a75c:	210e      	movs	r1, #14
 800a75e:	4852      	ldr	r0, [pc, #328]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a760:	f7fc fdd6 	bl	8007310 <gpio_set>
		vTaskDelay(active_time);
 800a764:	2032      	movs	r0, #50	; 0x32
 800a766:	f7f8 fbb9 	bl	8002edc <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a76a:	210e      	movs	r1, #14
 800a76c:	484e      	ldr	r0, [pc, #312]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a76e:	f7fc fdd7 	bl	8007320 <gpio_reset>
		vTaskDelay(idle_time);
 800a772:	2032      	movs	r0, #50	; 0x32
 800a774:	f7f8 fbb2 	bl	8002edc <vTaskDelay>
		gpio_set(GPIOB, 14);
 800a778:	210e      	movs	r1, #14
 800a77a:	484b      	ldr	r0, [pc, #300]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a77c:	f7fc fdc8 	bl	8007310 <gpio_set>
		vTaskDelay(active_time);
 800a780:	2032      	movs	r0, #50	; 0x32
 800a782:	f7f8 fbab 	bl	8002edc <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a786:	4848      	ldr	r0, [pc, #288]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a788:	210e      	movs	r1, #14
 800a78a:	f7fc fdc9 	bl	8007320 <gpio_reset>
		vTaskDelay(idle_time);
 800a78e:	2032      	movs	r0, #50	; 0x32
 800a790:	f7f8 fba4 	bl	8002edc <vTaskDelay>
	vTaskResume(task_loratx_handle);
 800a794:	6838      	ldr	r0, [r7, #0]
}
 800a796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a79a:	f7f8 bc71 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_UPDATE_STATE");
 800a79e:	483d      	ldr	r0, [pc, #244]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a7a0:	4942      	ldr	r1, [pc, #264]	; (800a8ac <_Z20loraif_event_handler12lora_event_tmPc+0x1c0>)
 800a7a2:	f7ff fa5f 	bl	8009c64 <LOG_EVENT>
	vTaskResume(task_loratx_handle);
 800a7a6:	6838      	ldr	r0, [r7, #0]
}
 800a7a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a7ac:	f7f8 bc68 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_UPDATE_SETTINGS");
 800a7b0:	4838      	ldr	r0, [pc, #224]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a7b2:	493f      	ldr	r1, [pc, #252]	; (800a8b0 <_Z20loraif_event_handler12lora_event_tmPc+0x1c4>)
 800a7b4:	f7ff fa56 	bl	8009c64 <LOG_EVENT>
	vTaskResume(task_loratx_handle);
 800a7b8:	6838      	ldr	r0, [r7, #0]
}
 800a7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a7be:	f7f8 bc5f 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_REQ_DATA");
 800a7c2:	493c      	ldr	r1, [pc, #240]	; (800a8b4 <_Z20loraif_event_handler12lora_event_tmPc+0x1c8>)
 800a7c4:	4833      	ldr	r0, [pc, #204]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a7c6:	f7ff fa4d 	bl	8009c64 <LOG_EVENT>
		gpio_set(GPIOB, 14);
 800a7ca:	4837      	ldr	r0, [pc, #220]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a7cc:	210e      	movs	r1, #14
 800a7ce:	f7fc fd9f 	bl	8007310 <gpio_set>
		vTaskDelay(active_time);
 800a7d2:	2032      	movs	r0, #50	; 0x32
 800a7d4:	f7f8 fb82 	bl	8002edc <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a7d8:	4833      	ldr	r0, [pc, #204]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a7da:	210e      	movs	r1, #14
 800a7dc:	f7fc fda0 	bl	8007320 <gpio_reset>
		vTaskDelay(idle_time);
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	f7f8 fb7b 	bl	8002edc <vTaskDelay>
	vTaskResume(task_loratx_handle);
 800a7e6:	6838      	ldr	r0, [r7, #0]
}
 800a7e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a7ec:	f7f8 bc48 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_UPDATE_DATA");
 800a7f0:	4828      	ldr	r0, [pc, #160]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a7f2:	4931      	ldr	r1, [pc, #196]	; (800a8b8 <_Z20loraif_event_handler12lora_event_tmPc+0x1cc>)
 800a7f4:	f7ff fa36 	bl	8009c64 <LOG_EVENT>
	vTaskResume(task_loratx_handle);
 800a7f8:	6838      	ldr	r0, [r7, #0]
}
 800a7fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a7fe:	f7f8 bc3f 	b.w	8003080 <vTaskResume>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800a802:	492e      	ldr	r1, [pc, #184]	; (800a8bc <_Z20loraif_event_handler12lora_event_tmPc+0x1d0>)
 800a804:	4823      	ldr	r0, [pc, #140]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
		gpio_set(GPIOB, 14);
 800a806:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>
			LOG_EVENT(TAG, "LORA_ADD_DEVICE");
 800a80a:	f7ff fa2b 	bl	8009c64 <LOG_EVENT>
 800a80e:	2403      	movs	r4, #3
		gpio_set(GPIOB, 14);
 800a810:	210e      	movs	r1, #14
 800a812:	4640      	mov	r0, r8
 800a814:	f7fc fd7c 	bl	8007310 <gpio_set>
		vTaskDelay(active_time);
 800a818:	2032      	movs	r0, #50	; 0x32
 800a81a:	f7f8 fb5f 	bl	8002edc <vTaskDelay>
		gpio_reset(GPIOB, 14);
 800a81e:	210e      	movs	r1, #14
 800a820:	4640      	mov	r0, r8
 800a822:	f7fc fd7d 	bl	8007320 <gpio_reset>
		vTaskDelay(idle_time);
 800a826:	2032      	movs	r0, #50	; 0x32
 800a828:	f7f8 fb58 	bl	8002edc <vTaskDelay>
	while(loop--){
 800a82c:	1e63      	subs	r3, r4, #1
 800a82e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 800a832:	d1ed      	bne.n	800a810 <_Z20loraif_event_handler12lora_event_tmPc+0x124>
			if(loraif_isvalid_address(device_address)){
 800a834:	4630      	mov	r0, r6
 800a836:	f7f9 ff59 	bl	80046ec <loraif_isvalid_address>
 800a83a:	b1f0      	cbz	r0, 800a87a <_Z20loraif_event_handler12lora_event_tmPc+0x18e>
				dev_struct_t *dev = add_device_properties(device_address, data);
 800a83c:	4629      	mov	r1, r5
 800a83e:	4630      	mov	r0, r6
 800a840:	f7ff fbf4 	bl	800a02c <add_device_properties>
				loraif_add_device(device_address, data, dev);
 800a844:	4629      	mov	r1, r5
				dev_struct_t *dev = add_device_properties(device_address, data);
 800a846:	4602      	mov	r2, r0
				loraif_add_device(device_address, data, dev);
 800a848:	4630      	mov	r0, r6
 800a84a:	f7fa f9df 	bl	8004c0c <loraif_add_device>
 800a84e:	e76a      	b.n	800a726 <_Z20loraif_event_handler12lora_event_tmPc+0x3a>
			LOG_WARN(TAG, "LORA_REMOVE_DEVICE");
 800a850:	4810      	ldr	r0, [pc, #64]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a852:	491b      	ldr	r1, [pc, #108]	; (800a8c0 <_Z20loraif_event_handler12lora_event_tmPc+0x1d4>)
 800a854:	f7ff f90e 	bl	8009a74 <LOG_WARN>
			if(loraif_isvalid_address(device_address)){
 800a858:	4630      	mov	r0, r6
 800a85a:	f7f9 ff47 	bl	80046ec <loraif_isvalid_address>
 800a85e:	b160      	cbz	r0, 800a87a <_Z20loraif_event_handler12lora_event_tmPc+0x18e>
				remove_device_properties(device_address);
 800a860:	4630      	mov	r0, r6
 800a862:	f7ff fc2f 	bl	800a0c4 <remove_device_properties>
				loraif_remove_device(device_address);
 800a866:	4630      	mov	r0, r6
 800a868:	f7fa fa40 	bl	8004cec <loraif_remove_device>
		gpio_set(GPIOB, 14);
 800a86c:	480e      	ldr	r0, [pc, #56]	; (800a8a8 <_Z20loraif_event_handler12lora_event_tmPc+0x1bc>)
 800a86e:	210e      	movs	r1, #14
 800a870:	f7fc fd4e 	bl	8007310 <gpio_set>
		vTaskDelay(active_time);
 800a874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a878:	e7ac      	b.n	800a7d4 <_Z20loraif_event_handler12lora_event_tmPc+0xe8>
				LOG_ERROR(TAG, "Event device address invalid.");
 800a87a:	4806      	ldr	r0, [pc, #24]	; (800a894 <_Z20loraif_event_handler12lora_event_tmPc+0x1a8>)
 800a87c:	4911      	ldr	r1, [pc, #68]	; (800a8c4 <_Z20loraif_event_handler12lora_event_tmPc+0x1d8>)
 800a87e:	f7ff f937 	bl	8009af0 <LOG_ERROR>
	vTaskResume(task_loratx_handle);
 800a882:	6838      	ldr	r0, [r7, #0]
}
 800a884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	vTaskResume(task_loratx_handle);
 800a888:	f7f8 bbfa 	b.w	8003080 <vTaskResume>
 800a88c:	2000ba10 	.word	0x2000ba10
 800a890:	0800f144 	.word	0x0800f144
 800a894:	0800efa8 	.word	0x0800efa8
 800a898:	0800e364 	.word	0x0800e364
 800a89c:	0800f174 	.word	0x0800f174
 800a8a0:	0800e2ac 	.word	0x0800e2ac
 800a8a4:	0800e2b8 	.word	0x0800e2b8
 800a8a8:	40020400 	.word	0x40020400
 800a8ac:	0800e2e0 	.word	0x0800e2e0
 800a8b0:	0800e2f4 	.word	0x0800e2f4
 800a8b4:	0800e30c 	.word	0x0800e30c
 800a8b8:	0800e32c 	.word	0x0800e32c
 800a8bc:	0800e340 	.word	0x0800e340
 800a8c0:	0800e350 	.word	0x0800e350
 800a8c4:	0800f154 	.word	0x0800f154

0800a8c8 <_Z8app_mainv>:
void app_main(void){
 800a8c8:	b500      	push	{lr}
 800a8ca:	b083      	sub	sp, #12
	HAL_Driver_Init();
 800a8cc:	f7f6 fb7e 	bl	8000fcc <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOB);
 800a8d0:	4828      	ldr	r0, [pc, #160]	; (800a974 <_Z8app_mainv+0xac>)
 800a8d2:	f7fc fbd5 	bl	8007080 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOC);
 800a8d6:	4828      	ldr	r0, [pc, #160]	; (800a978 <_Z8app_mainv+0xb0>)
 800a8d8:	f7fc fbd2 	bl	8007080 <gpio_port_clock_enable>
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 800a8dc:	4826      	ldr	r0, [pc, #152]	; (800a978 <_Z8app_mainv+0xb0>)
 800a8de:	2207      	movs	r2, #7
 800a8e0:	210d      	movs	r1, #13
 800a8e2:	f7fc fc33 	bl	800714c <gpio_set_mode>
	gpio_set_mode(GPIOB, 14, GPIO_OUTPUT_PUSHPULL);
 800a8e6:	2207      	movs	r2, #7
 800a8e8:	4822      	ldr	r0, [pc, #136]	; (800a974 <_Z8app_mainv+0xac>)
 800a8ea:	210e      	movs	r1, #14
 800a8ec:	f7fc fc2e 	bl	800714c <gpio_set_mode>
	register_exception_handler(exception_handler);
 800a8f0:	4822      	ldr	r0, [pc, #136]	; (800a97c <_Z8app_mainv+0xb4>)
 800a8f2:	f7ff fb7d 	bl	8009ff0 <register_exception_handler>
	if(task_lorarx_handle == NULL) xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 15, &task_lorarx_handle);
 800a8f6:	4a22      	ldr	r2, [pc, #136]	; (800a980 <_Z8app_mainv+0xb8>)
 800a8f8:	6813      	ldr	r3, [r2, #0]
 800a8fa:	b33b      	cbz	r3, 800a94c <_Z8app_mainv+0x84>
	if(task_loratx_handle == NULL) xTaskCreate(task_loratx, "task_loratx", byte_to_word(4096), NULL, 5, &task_loratx_handle);
 800a8fc:	4a21      	ldr	r2, [pc, #132]	; (800a984 <_Z8app_mainv+0xbc>)
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	b373      	cbz	r3, 800a960 <_Z8app_mainv+0x98>
	xTaskCreate(task_wifi, "task_wifi", byte_to_word(4096), NULL, 2, NULL);
 800a902:	2300      	movs	r3, #0
 800a904:	2202      	movs	r2, #2
 800a906:	e9cd 2300 	strd	r2, r3, [sp]
 800a90a:	491f      	ldr	r1, [pc, #124]	; (800a988 <_Z8app_mainv+0xc0>)
 800a90c:	481f      	ldr	r0, [pc, #124]	; (800a98c <_Z8app_mainv+0xc4>)
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800a90e:	4e20      	ldr	r6, [pc, #128]	; (800a990 <_Z8app_mainv+0xc8>)
 800a910:	4d20      	ldr	r5, [pc, #128]	; (800a994 <_Z8app_mainv+0xcc>)
		gpio_toggle(GPIOC, 13);
 800a912:	4c19      	ldr	r4, [pc, #100]	; (800a978 <_Z8app_mainv+0xb0>)
	xTaskCreate(task_wifi, "task_wifi", byte_to_word(4096), NULL, 2, NULL);
 800a914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a918:	f7f8 fa2c 	bl	8002d74 <xTaskCreate>
		LOG_MEM(TAG, "Free heap = %lu.", sys_get_free_heap_size());
 800a91c:	f7ff fb3a 	bl	8009f94 <sys_get_free_heap_size>
 800a920:	4631      	mov	r1, r6
 800a922:	4602      	mov	r2, r0
 800a924:	4628      	mov	r0, r5
 800a926:	f7ff f95f 	bl	8009be8 <LOG_MEM>
		gpio_toggle(GPIOC, 13);
 800a92a:	210d      	movs	r1, #13
 800a92c:	4620      	mov	r0, r4
 800a92e:	f7fc fcff 	bl	8007330 <gpio_toggle>
		vTaskDelay(500);
 800a932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a936:	f7f8 fad1 	bl	8002edc <vTaskDelay>
		gpio_toggle(GPIOC, 13);
 800a93a:	4620      	mov	r0, r4
 800a93c:	210d      	movs	r1, #13
 800a93e:	f7fc fcf7 	bl	8007330 <gpio_toggle>
		vTaskDelay(500);
 800a942:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a946:	f7f8 fac9 	bl	8002edc <vTaskDelay>
	while(1){
 800a94a:	e7e7      	b.n	800a91c <_Z8app_mainv+0x54>
	if(task_lorarx_handle == NULL) xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 15, &task_lorarx_handle);
 800a94c:	240f      	movs	r4, #15
 800a94e:	e9cd 4200 	strd	r4, r2, [sp]
 800a952:	4911      	ldr	r1, [pc, #68]	; (800a998 <_Z8app_mainv+0xd0>)
 800a954:	4811      	ldr	r0, [pc, #68]	; (800a99c <_Z8app_mainv+0xd4>)
 800a956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a95a:	f7f8 fa0b 	bl	8002d74 <xTaskCreate>
 800a95e:	e7cd      	b.n	800a8fc <_Z8app_mainv+0x34>
	if(task_loratx_handle == NULL) xTaskCreate(task_loratx, "task_loratx", byte_to_word(4096), NULL, 5, &task_loratx_handle);
 800a960:	2405      	movs	r4, #5
 800a962:	e9cd 4200 	strd	r4, r2, [sp]
 800a966:	490e      	ldr	r1, [pc, #56]	; (800a9a0 <_Z8app_mainv+0xd8>)
 800a968:	480e      	ldr	r0, [pc, #56]	; (800a9a4 <_Z8app_mainv+0xdc>)
 800a96a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a96e:	f7f8 fa01 	bl	8002d74 <xTaskCreate>
 800a972:	e7c6      	b.n	800a902 <_Z8app_mainv+0x3a>
 800a974:	40020400 	.word	0x40020400
 800a978:	40020800 	.word	0x40020800
 800a97c:	0800a1f9 	.word	0x0800a1f9
 800a980:	2000ba0c 	.word	0x2000ba0c
 800a984:	2000ba10 	.word	0x2000ba10
 800a988:	0800f1a0 	.word	0x0800f1a0
 800a98c:	0800a551 	.word	0x0800a551
 800a990:	0800f0d4 	.word	0x0800f0d4
 800a994:	0800efa8 	.word	0x0800efa8
 800a998:	0800f188 	.word	0x0800f188
 800a99c:	0800a25d 	.word	0x0800a25d
 800a9a0:	0800f194 	.word	0x0800f194
 800a9a4:	0800a205 	.word	0x0800a205

0800a9a8 <_GLOBAL__sub_I_spi5_conf>:
}
 800a9a8:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800a9aa:	4908      	ldr	r1, [pc, #32]	; (800a9cc <_GLOBAL__sub_I_spi5_conf+0x24>)
 800a9ac:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <_GLOBAL__sub_I_spi5_conf+0x28>)
}
 800a9ae:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a9b8:	9200      	str	r2, [sp, #0]
 800a9ba:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 800a9be:	2206      	movs	r2, #6
 800a9c0:	4804      	ldr	r0, [pc, #16]	; (800a9d4 <_GLOBAL__sub_I_spi5_conf+0x2c>)
 800a9c2:	f7fa fbb7 	bl	8005134 <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 800a9c6:	b005      	add	sp, #20
 800a9c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800a9cc:	40020000 	.word	0x40020000
 800a9d0:	40021000 	.word	0x40021000
 800a9d4:	2000b9d8 	.word	0x2000b9d8

0800a9d8 <_ZdlPvj>:
 800a9d8:	f000 b81d 	b.w	800aa16 <_ZdlPv>

0800a9dc <_Znwj>:
 800a9dc:	2801      	cmp	r0, #1
 800a9de:	bf38      	it	cc
 800a9e0:	2001      	movcc	r0, #1
 800a9e2:	b510      	push	{r4, lr}
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f8ba 	bl	800ab60 <malloc>
 800a9ec:	b930      	cbnz	r0, 800a9fc <_Znwj+0x20>
 800a9ee:	f000 f815 	bl	800aa1c <_ZSt15get_new_handlerv>
 800a9f2:	b908      	cbnz	r0, 800a9f8 <_Znwj+0x1c>
 800a9f4:	f000 f85c 	bl	800aab0 <abort>
 800a9f8:	4780      	blx	r0
 800a9fa:	e7f4      	b.n	800a9e6 <_Znwj+0xa>
 800a9fc:	bd10      	pop	{r4, pc}

0800a9fe <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800a9fe:	684b      	ldr	r3, [r1, #4]
 800aa00:	6043      	str	r3, [r0, #4]
 800aa02:	684b      	ldr	r3, [r1, #4]
 800aa04:	6001      	str	r1, [r0, #0]
 800aa06:	6018      	str	r0, [r3, #0]
 800aa08:	6048      	str	r0, [r1, #4]
 800aa0a:	4770      	bx	lr

0800aa0c <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800aa0c:	e9d0 3200 	ldrd	r3, r2, [r0]
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	605a      	str	r2, [r3, #4]
 800aa14:	4770      	bx	lr

0800aa16 <_ZdlPv>:
 800aa16:	f000 b8ab 	b.w	800ab70 <free>
	...

0800aa1c <_ZSt15get_new_handlerv>:
 800aa1c:	4b02      	ldr	r3, [pc, #8]	; (800aa28 <_ZSt15get_new_handlerv+0xc>)
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	f3bf 8f5b 	dmb	ish
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	2000ba14 	.word	0x2000ba14

0800aa2c <ceilf>:
 800aa2c:	ee10 3a10 	vmov	r3, s0
 800aa30:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aa34:	3a7f      	subs	r2, #127	; 0x7f
 800aa36:	2a16      	cmp	r2, #22
 800aa38:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800aa3c:	dc2a      	bgt.n	800aa94 <ceilf+0x68>
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	da11      	bge.n	800aa66 <ceilf+0x3a>
 800aa42:	eddf 7a19 	vldr	s15, [pc, #100]	; 800aaa8 <ceilf+0x7c>
 800aa46:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa4a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aa4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa52:	dd05      	ble.n	800aa60 <ceilf+0x34>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	db23      	blt.n	800aaa0 <ceilf+0x74>
 800aa58:	2900      	cmp	r1, #0
 800aa5a:	bf18      	it	ne
 800aa5c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800aa60:	ee00 3a10 	vmov	s0, r3
 800aa64:	4770      	bx	lr
 800aa66:	4911      	ldr	r1, [pc, #68]	; (800aaac <ceilf+0x80>)
 800aa68:	4111      	asrs	r1, r2
 800aa6a:	420b      	tst	r3, r1
 800aa6c:	d0fa      	beq.n	800aa64 <ceilf+0x38>
 800aa6e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800aaa8 <ceilf+0x7c>
 800aa72:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aa76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800aa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa7e:	ddef      	ble.n	800aa60 <ceilf+0x34>
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	bfc2      	ittt	gt
 800aa84:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800aa88:	fa40 f202 	asrgt.w	r2, r0, r2
 800aa8c:	189b      	addgt	r3, r3, r2
 800aa8e:	ea23 0301 	bic.w	r3, r3, r1
 800aa92:	e7e5      	b.n	800aa60 <ceilf+0x34>
 800aa94:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800aa98:	d3e4      	bcc.n	800aa64 <ceilf+0x38>
 800aa9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800aa9e:	4770      	bx	lr
 800aaa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aaa4:	e7dc      	b.n	800aa60 <ceilf+0x34>
 800aaa6:	bf00      	nop
 800aaa8:	7149f2ca 	.word	0x7149f2ca
 800aaac:	007fffff 	.word	0x007fffff

0800aab0 <abort>:
 800aab0:	b508      	push	{r3, lr}
 800aab2:	2006      	movs	r0, #6
 800aab4:	f000 ffc6 	bl	800ba44 <raise>
 800aab8:	2001      	movs	r0, #1
 800aaba:	f7f6 fb27 	bl	800110c <_exit>
	...

0800aac0 <asiprintf>:
 800aac0:	b40e      	push	{r1, r2, r3}
 800aac2:	b530      	push	{r4, r5, lr}
 800aac4:	b09c      	sub	sp, #112	; 0x70
 800aac6:	ab1f      	add	r3, sp, #124	; 0x7c
 800aac8:	4605      	mov	r5, r0
 800aaca:	490d      	ldr	r1, [pc, #52]	; (800ab00 <asiprintf+0x40>)
 800aacc:	480d      	ldr	r0, [pc, #52]	; (800ab04 <asiprintf+0x44>)
 800aace:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad2:	6800      	ldr	r0, [r0, #0]
 800aad4:	9301      	str	r3, [sp, #4]
 800aad6:	2400      	movs	r4, #0
 800aad8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 800aadc:	a902      	add	r1, sp, #8
 800aade:	9402      	str	r4, [sp, #8]
 800aae0:	9404      	str	r4, [sp, #16]
 800aae2:	9407      	str	r4, [sp, #28]
 800aae4:	f000 fa0c 	bl	800af00 <_svfiprintf_r>
 800aae8:	2800      	cmp	r0, #0
 800aaea:	bfa1      	itttt	ge
 800aaec:	9b02      	ldrge	r3, [sp, #8]
 800aaee:	701c      	strbge	r4, [r3, #0]
 800aaf0:	9b06      	ldrge	r3, [sp, #24]
 800aaf2:	602b      	strge	r3, [r5, #0]
 800aaf4:	b01c      	add	sp, #112	; 0x70
 800aaf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aafa:	b003      	add	sp, #12
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	ffff0288 	.word	0xffff0288
 800ab04:	20000158 	.word	0x20000158

0800ab08 <calloc>:
 800ab08:	4b02      	ldr	r3, [pc, #8]	; (800ab14 <calloc+0xc>)
 800ab0a:	460a      	mov	r2, r1
 800ab0c:	4601      	mov	r1, r0
 800ab0e:	6818      	ldr	r0, [r3, #0]
 800ab10:	f000 b870 	b.w	800abf4 <_calloc_r>
 800ab14:	20000158 	.word	0x20000158

0800ab18 <__libc_init_array>:
 800ab18:	b570      	push	{r4, r5, r6, lr}
 800ab1a:	4d0d      	ldr	r5, [pc, #52]	; (800ab50 <__libc_init_array+0x38>)
 800ab1c:	4c0d      	ldr	r4, [pc, #52]	; (800ab54 <__libc_init_array+0x3c>)
 800ab1e:	1b64      	subs	r4, r4, r5
 800ab20:	10a4      	asrs	r4, r4, #2
 800ab22:	2600      	movs	r6, #0
 800ab24:	42a6      	cmp	r6, r4
 800ab26:	d109      	bne.n	800ab3c <__libc_init_array+0x24>
 800ab28:	4d0b      	ldr	r5, [pc, #44]	; (800ab58 <__libc_init_array+0x40>)
 800ab2a:	4c0c      	ldr	r4, [pc, #48]	; (800ab5c <__libc_init_array+0x44>)
 800ab2c:	f002 fff4 	bl	800db18 <_init>
 800ab30:	1b64      	subs	r4, r4, r5
 800ab32:	10a4      	asrs	r4, r4, #2
 800ab34:	2600      	movs	r6, #0
 800ab36:	42a6      	cmp	r6, r4
 800ab38:	d105      	bne.n	800ab46 <__libc_init_array+0x2e>
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab40:	4798      	blx	r3
 800ab42:	3601      	adds	r6, #1
 800ab44:	e7ee      	b.n	800ab24 <__libc_init_array+0xc>
 800ab46:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab4a:	4798      	blx	r3
 800ab4c:	3601      	adds	r6, #1
 800ab4e:	e7f2      	b.n	800ab36 <__libc_init_array+0x1e>
 800ab50:	0800f590 	.word	0x0800f590
 800ab54:	0800f590 	.word	0x0800f590
 800ab58:	0800f590 	.word	0x0800f590
 800ab5c:	0800f5bc 	.word	0x0800f5bc

0800ab60 <malloc>:
 800ab60:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <malloc+0xc>)
 800ab62:	4601      	mov	r1, r0
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	f000 b8fb 	b.w	800ad60 <_malloc_r>
 800ab6a:	bf00      	nop
 800ab6c:	20000158 	.word	0x20000158

0800ab70 <free>:
 800ab70:	4b02      	ldr	r3, [pc, #8]	; (800ab7c <free+0xc>)
 800ab72:	4601      	mov	r1, r0
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	f000 b853 	b.w	800ac20 <_free_r>
 800ab7a:	bf00      	nop
 800ab7c:	20000158 	.word	0x20000158

0800ab80 <memcpy>:
 800ab80:	440a      	add	r2, r1
 800ab82:	4291      	cmp	r1, r2
 800ab84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab88:	d100      	bne.n	800ab8c <memcpy+0xc>
 800ab8a:	4770      	bx	lr
 800ab8c:	b510      	push	{r4, lr}
 800ab8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab96:	4291      	cmp	r1, r2
 800ab98:	d1f9      	bne.n	800ab8e <memcpy+0xe>
 800ab9a:	bd10      	pop	{r4, pc}

0800ab9c <memmove>:
 800ab9c:	4288      	cmp	r0, r1
 800ab9e:	b510      	push	{r4, lr}
 800aba0:	eb01 0402 	add.w	r4, r1, r2
 800aba4:	d902      	bls.n	800abac <memmove+0x10>
 800aba6:	4284      	cmp	r4, r0
 800aba8:	4623      	mov	r3, r4
 800abaa:	d807      	bhi.n	800abbc <memmove+0x20>
 800abac:	1e43      	subs	r3, r0, #1
 800abae:	42a1      	cmp	r1, r4
 800abb0:	d008      	beq.n	800abc4 <memmove+0x28>
 800abb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abba:	e7f8      	b.n	800abae <memmove+0x12>
 800abbc:	4402      	add	r2, r0
 800abbe:	4601      	mov	r1, r0
 800abc0:	428a      	cmp	r2, r1
 800abc2:	d100      	bne.n	800abc6 <memmove+0x2a>
 800abc4:	bd10      	pop	{r4, pc}
 800abc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abce:	e7f7      	b.n	800abc0 <memmove+0x24>

0800abd0 <memset>:
 800abd0:	4402      	add	r2, r0
 800abd2:	4603      	mov	r3, r0
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d100      	bne.n	800abda <memset+0xa>
 800abd8:	4770      	bx	lr
 800abda:	f803 1b01 	strb.w	r1, [r3], #1
 800abde:	e7f9      	b.n	800abd4 <memset+0x4>

0800abe0 <mallinfo>:
 800abe0:	b510      	push	{r4, lr}
 800abe2:	4b03      	ldr	r3, [pc, #12]	; (800abf0 <mallinfo+0x10>)
 800abe4:	4604      	mov	r4, r0
 800abe6:	6819      	ldr	r1, [r3, #0]
 800abe8:	f000 f866 	bl	800acb8 <_mallinfo_r>
 800abec:	4620      	mov	r0, r4
 800abee:	bd10      	pop	{r4, pc}
 800abf0:	20000158 	.word	0x20000158

0800abf4 <_calloc_r>:
 800abf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abf6:	fba1 2402 	umull	r2, r4, r1, r2
 800abfa:	b94c      	cbnz	r4, 800ac10 <_calloc_r+0x1c>
 800abfc:	4611      	mov	r1, r2
 800abfe:	9201      	str	r2, [sp, #4]
 800ac00:	f000 f8ae 	bl	800ad60 <_malloc_r>
 800ac04:	9a01      	ldr	r2, [sp, #4]
 800ac06:	4605      	mov	r5, r0
 800ac08:	b930      	cbnz	r0, 800ac18 <_calloc_r+0x24>
 800ac0a:	4628      	mov	r0, r5
 800ac0c:	b003      	add	sp, #12
 800ac0e:	bd30      	pop	{r4, r5, pc}
 800ac10:	220c      	movs	r2, #12
 800ac12:	6002      	str	r2, [r0, #0]
 800ac14:	2500      	movs	r5, #0
 800ac16:	e7f8      	b.n	800ac0a <_calloc_r+0x16>
 800ac18:	4621      	mov	r1, r4
 800ac1a:	f7ff ffd9 	bl	800abd0 <memset>
 800ac1e:	e7f4      	b.n	800ac0a <_calloc_r+0x16>

0800ac20 <_free_r>:
 800ac20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac22:	2900      	cmp	r1, #0
 800ac24:	d044      	beq.n	800acb0 <_free_r+0x90>
 800ac26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac2a:	9001      	str	r0, [sp, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac32:	bfb8      	it	lt
 800ac34:	18e4      	addlt	r4, r4, r3
 800ac36:	f001 ff9b 	bl	800cb70 <__malloc_lock>
 800ac3a:	4a1e      	ldr	r2, [pc, #120]	; (800acb4 <_free_r+0x94>)
 800ac3c:	9801      	ldr	r0, [sp, #4]
 800ac3e:	6813      	ldr	r3, [r2, #0]
 800ac40:	b933      	cbnz	r3, 800ac50 <_free_r+0x30>
 800ac42:	6063      	str	r3, [r4, #4]
 800ac44:	6014      	str	r4, [r2, #0]
 800ac46:	b003      	add	sp, #12
 800ac48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac4c:	f001 bf96 	b.w	800cb7c <__malloc_unlock>
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	d908      	bls.n	800ac66 <_free_r+0x46>
 800ac54:	6825      	ldr	r5, [r4, #0]
 800ac56:	1961      	adds	r1, r4, r5
 800ac58:	428b      	cmp	r3, r1
 800ac5a:	bf01      	itttt	eq
 800ac5c:	6819      	ldreq	r1, [r3, #0]
 800ac5e:	685b      	ldreq	r3, [r3, #4]
 800ac60:	1949      	addeq	r1, r1, r5
 800ac62:	6021      	streq	r1, [r4, #0]
 800ac64:	e7ed      	b.n	800ac42 <_free_r+0x22>
 800ac66:	461a      	mov	r2, r3
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	b10b      	cbz	r3, 800ac70 <_free_r+0x50>
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	d9fa      	bls.n	800ac66 <_free_r+0x46>
 800ac70:	6811      	ldr	r1, [r2, #0]
 800ac72:	1855      	adds	r5, r2, r1
 800ac74:	42a5      	cmp	r5, r4
 800ac76:	d10b      	bne.n	800ac90 <_free_r+0x70>
 800ac78:	6824      	ldr	r4, [r4, #0]
 800ac7a:	4421      	add	r1, r4
 800ac7c:	1854      	adds	r4, r2, r1
 800ac7e:	42a3      	cmp	r3, r4
 800ac80:	6011      	str	r1, [r2, #0]
 800ac82:	d1e0      	bne.n	800ac46 <_free_r+0x26>
 800ac84:	681c      	ldr	r4, [r3, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	6053      	str	r3, [r2, #4]
 800ac8a:	4421      	add	r1, r4
 800ac8c:	6011      	str	r1, [r2, #0]
 800ac8e:	e7da      	b.n	800ac46 <_free_r+0x26>
 800ac90:	d902      	bls.n	800ac98 <_free_r+0x78>
 800ac92:	230c      	movs	r3, #12
 800ac94:	6003      	str	r3, [r0, #0]
 800ac96:	e7d6      	b.n	800ac46 <_free_r+0x26>
 800ac98:	6825      	ldr	r5, [r4, #0]
 800ac9a:	1961      	adds	r1, r4, r5
 800ac9c:	428b      	cmp	r3, r1
 800ac9e:	bf04      	itt	eq
 800aca0:	6819      	ldreq	r1, [r3, #0]
 800aca2:	685b      	ldreq	r3, [r3, #4]
 800aca4:	6063      	str	r3, [r4, #4]
 800aca6:	bf04      	itt	eq
 800aca8:	1949      	addeq	r1, r1, r5
 800acaa:	6021      	streq	r1, [r4, #0]
 800acac:	6054      	str	r4, [r2, #4]
 800acae:	e7ca      	b.n	800ac46 <_free_r+0x26>
 800acb0:	b003      	add	sp, #12
 800acb2:	bd30      	pop	{r4, r5, pc}
 800acb4:	2000ba40 	.word	0x2000ba40

0800acb8 <_mallinfo_r>:
 800acb8:	b570      	push	{r4, r5, r6, lr}
 800acba:	4c16      	ldr	r4, [pc, #88]	; (800ad14 <_mallinfo_r+0x5c>)
 800acbc:	4605      	mov	r5, r0
 800acbe:	4608      	mov	r0, r1
 800acc0:	460e      	mov	r6, r1
 800acc2:	f001 ff55 	bl	800cb70 <__malloc_lock>
 800acc6:	6823      	ldr	r3, [r4, #0]
 800acc8:	b143      	cbz	r3, 800acdc <_mallinfo_r+0x24>
 800acca:	2100      	movs	r1, #0
 800accc:	4630      	mov	r0, r6
 800acce:	f000 fe81 	bl	800b9d4 <_sbrk_r>
 800acd2:	1c42      	adds	r2, r0, #1
 800acd4:	4603      	mov	r3, r0
 800acd6:	bf1c      	itt	ne
 800acd8:	6820      	ldrne	r0, [r4, #0]
 800acda:	1a1b      	subne	r3, r3, r0
 800acdc:	4a0e      	ldr	r2, [pc, #56]	; (800ad18 <_mallinfo_r+0x60>)
 800acde:	6812      	ldr	r2, [r2, #0]
 800ace0:	2000      	movs	r0, #0
 800ace2:	b992      	cbnz	r2, 800ad0a <_mallinfo_r+0x52>
 800ace4:	4c0d      	ldr	r4, [pc, #52]	; (800ad1c <_mallinfo_r+0x64>)
 800ace6:	6023      	str	r3, [r4, #0]
 800ace8:	6220      	str	r0, [r4, #32]
 800acea:	1a1b      	subs	r3, r3, r0
 800acec:	4630      	mov	r0, r6
 800acee:	61e3      	str	r3, [r4, #28]
 800acf0:	f001 ff44 	bl	800cb7c <__malloc_unlock>
 800acf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acf6:	462e      	mov	r6, r5
 800acf8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800acfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800acfc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800acfe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad02:	e886 0003 	stmia.w	r6, {r0, r1}
 800ad06:	4628      	mov	r0, r5
 800ad08:	bd70      	pop	{r4, r5, r6, pc}
 800ad0a:	6811      	ldr	r1, [r2, #0]
 800ad0c:	6852      	ldr	r2, [r2, #4]
 800ad0e:	4408      	add	r0, r1
 800ad10:	e7e7      	b.n	800ace2 <_mallinfo_r+0x2a>
 800ad12:	bf00      	nop
 800ad14:	2000ba44 	.word	0x2000ba44
 800ad18:	2000ba40 	.word	0x2000ba40
 800ad1c:	2000ba18 	.word	0x2000ba18

0800ad20 <sbrk_aligned>:
 800ad20:	b570      	push	{r4, r5, r6, lr}
 800ad22:	4e0e      	ldr	r6, [pc, #56]	; (800ad5c <sbrk_aligned+0x3c>)
 800ad24:	460c      	mov	r4, r1
 800ad26:	6831      	ldr	r1, [r6, #0]
 800ad28:	4605      	mov	r5, r0
 800ad2a:	b911      	cbnz	r1, 800ad32 <sbrk_aligned+0x12>
 800ad2c:	f000 fe52 	bl	800b9d4 <_sbrk_r>
 800ad30:	6030      	str	r0, [r6, #0]
 800ad32:	4621      	mov	r1, r4
 800ad34:	4628      	mov	r0, r5
 800ad36:	f000 fe4d 	bl	800b9d4 <_sbrk_r>
 800ad3a:	1c43      	adds	r3, r0, #1
 800ad3c:	d00a      	beq.n	800ad54 <sbrk_aligned+0x34>
 800ad3e:	1cc4      	adds	r4, r0, #3
 800ad40:	f024 0403 	bic.w	r4, r4, #3
 800ad44:	42a0      	cmp	r0, r4
 800ad46:	d007      	beq.n	800ad58 <sbrk_aligned+0x38>
 800ad48:	1a21      	subs	r1, r4, r0
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	f000 fe42 	bl	800b9d4 <_sbrk_r>
 800ad50:	3001      	adds	r0, #1
 800ad52:	d101      	bne.n	800ad58 <sbrk_aligned+0x38>
 800ad54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ad58:	4620      	mov	r0, r4
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	2000ba44 	.word	0x2000ba44

0800ad60 <_malloc_r>:
 800ad60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad64:	1ccd      	adds	r5, r1, #3
 800ad66:	f025 0503 	bic.w	r5, r5, #3
 800ad6a:	3508      	adds	r5, #8
 800ad6c:	2d0c      	cmp	r5, #12
 800ad6e:	bf38      	it	cc
 800ad70:	250c      	movcc	r5, #12
 800ad72:	2d00      	cmp	r5, #0
 800ad74:	4607      	mov	r7, r0
 800ad76:	db01      	blt.n	800ad7c <_malloc_r+0x1c>
 800ad78:	42a9      	cmp	r1, r5
 800ad7a:	d905      	bls.n	800ad88 <_malloc_r+0x28>
 800ad7c:	230c      	movs	r3, #12
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	2600      	movs	r6, #0
 800ad82:	4630      	mov	r0, r6
 800ad84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad88:	4e2e      	ldr	r6, [pc, #184]	; (800ae44 <_malloc_r+0xe4>)
 800ad8a:	f001 fef1 	bl	800cb70 <__malloc_lock>
 800ad8e:	6833      	ldr	r3, [r6, #0]
 800ad90:	461c      	mov	r4, r3
 800ad92:	bb34      	cbnz	r4, 800ade2 <_malloc_r+0x82>
 800ad94:	4629      	mov	r1, r5
 800ad96:	4638      	mov	r0, r7
 800ad98:	f7ff ffc2 	bl	800ad20 <sbrk_aligned>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	4604      	mov	r4, r0
 800ada0:	d14d      	bne.n	800ae3e <_malloc_r+0xde>
 800ada2:	6834      	ldr	r4, [r6, #0]
 800ada4:	4626      	mov	r6, r4
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	d140      	bne.n	800ae2c <_malloc_r+0xcc>
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	4631      	mov	r1, r6
 800adae:	4638      	mov	r0, r7
 800adb0:	eb04 0803 	add.w	r8, r4, r3
 800adb4:	f000 fe0e 	bl	800b9d4 <_sbrk_r>
 800adb8:	4580      	cmp	r8, r0
 800adba:	d13a      	bne.n	800ae32 <_malloc_r+0xd2>
 800adbc:	6821      	ldr	r1, [r4, #0]
 800adbe:	3503      	adds	r5, #3
 800adc0:	1a6d      	subs	r5, r5, r1
 800adc2:	f025 0503 	bic.w	r5, r5, #3
 800adc6:	3508      	adds	r5, #8
 800adc8:	2d0c      	cmp	r5, #12
 800adca:	bf38      	it	cc
 800adcc:	250c      	movcc	r5, #12
 800adce:	4629      	mov	r1, r5
 800add0:	4638      	mov	r0, r7
 800add2:	f7ff ffa5 	bl	800ad20 <sbrk_aligned>
 800add6:	3001      	adds	r0, #1
 800add8:	d02b      	beq.n	800ae32 <_malloc_r+0xd2>
 800adda:	6823      	ldr	r3, [r4, #0]
 800addc:	442b      	add	r3, r5
 800adde:	6023      	str	r3, [r4, #0]
 800ade0:	e00e      	b.n	800ae00 <_malloc_r+0xa0>
 800ade2:	6822      	ldr	r2, [r4, #0]
 800ade4:	1b52      	subs	r2, r2, r5
 800ade6:	d41e      	bmi.n	800ae26 <_malloc_r+0xc6>
 800ade8:	2a0b      	cmp	r2, #11
 800adea:	d916      	bls.n	800ae1a <_malloc_r+0xba>
 800adec:	1961      	adds	r1, r4, r5
 800adee:	42a3      	cmp	r3, r4
 800adf0:	6025      	str	r5, [r4, #0]
 800adf2:	bf18      	it	ne
 800adf4:	6059      	strne	r1, [r3, #4]
 800adf6:	6863      	ldr	r3, [r4, #4]
 800adf8:	bf08      	it	eq
 800adfa:	6031      	streq	r1, [r6, #0]
 800adfc:	5162      	str	r2, [r4, r5]
 800adfe:	604b      	str	r3, [r1, #4]
 800ae00:	4638      	mov	r0, r7
 800ae02:	f104 060b 	add.w	r6, r4, #11
 800ae06:	f001 feb9 	bl	800cb7c <__malloc_unlock>
 800ae0a:	f026 0607 	bic.w	r6, r6, #7
 800ae0e:	1d23      	adds	r3, r4, #4
 800ae10:	1af2      	subs	r2, r6, r3
 800ae12:	d0b6      	beq.n	800ad82 <_malloc_r+0x22>
 800ae14:	1b9b      	subs	r3, r3, r6
 800ae16:	50a3      	str	r3, [r4, r2]
 800ae18:	e7b3      	b.n	800ad82 <_malloc_r+0x22>
 800ae1a:	6862      	ldr	r2, [r4, #4]
 800ae1c:	42a3      	cmp	r3, r4
 800ae1e:	bf0c      	ite	eq
 800ae20:	6032      	streq	r2, [r6, #0]
 800ae22:	605a      	strne	r2, [r3, #4]
 800ae24:	e7ec      	b.n	800ae00 <_malloc_r+0xa0>
 800ae26:	4623      	mov	r3, r4
 800ae28:	6864      	ldr	r4, [r4, #4]
 800ae2a:	e7b2      	b.n	800ad92 <_malloc_r+0x32>
 800ae2c:	4634      	mov	r4, r6
 800ae2e:	6876      	ldr	r6, [r6, #4]
 800ae30:	e7b9      	b.n	800ada6 <_malloc_r+0x46>
 800ae32:	230c      	movs	r3, #12
 800ae34:	603b      	str	r3, [r7, #0]
 800ae36:	4638      	mov	r0, r7
 800ae38:	f001 fea0 	bl	800cb7c <__malloc_unlock>
 800ae3c:	e7a1      	b.n	800ad82 <_malloc_r+0x22>
 800ae3e:	6025      	str	r5, [r4, #0]
 800ae40:	e7de      	b.n	800ae00 <_malloc_r+0xa0>
 800ae42:	bf00      	nop
 800ae44:	2000ba40 	.word	0x2000ba40

0800ae48 <__ssputs_r>:
 800ae48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae4c:	688e      	ldr	r6, [r1, #8]
 800ae4e:	429e      	cmp	r6, r3
 800ae50:	4682      	mov	sl, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	4690      	mov	r8, r2
 800ae56:	461f      	mov	r7, r3
 800ae58:	d838      	bhi.n	800aecc <__ssputs_r+0x84>
 800ae5a:	898a      	ldrh	r2, [r1, #12]
 800ae5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae60:	d032      	beq.n	800aec8 <__ssputs_r+0x80>
 800ae62:	6825      	ldr	r5, [r4, #0]
 800ae64:	6909      	ldr	r1, [r1, #16]
 800ae66:	eba5 0901 	sub.w	r9, r5, r1
 800ae6a:	6965      	ldr	r5, [r4, #20]
 800ae6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae74:	3301      	adds	r3, #1
 800ae76:	444b      	add	r3, r9
 800ae78:	106d      	asrs	r5, r5, #1
 800ae7a:	429d      	cmp	r5, r3
 800ae7c:	bf38      	it	cc
 800ae7e:	461d      	movcc	r5, r3
 800ae80:	0553      	lsls	r3, r2, #21
 800ae82:	d531      	bpl.n	800aee8 <__ssputs_r+0xa0>
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7ff ff6b 	bl	800ad60 <_malloc_r>
 800ae8a:	4606      	mov	r6, r0
 800ae8c:	b950      	cbnz	r0, 800aea4 <__ssputs_r+0x5c>
 800ae8e:	230c      	movs	r3, #12
 800ae90:	f8ca 3000 	str.w	r3, [sl]
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae9a:	81a3      	strh	r3, [r4, #12]
 800ae9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aea4:	6921      	ldr	r1, [r4, #16]
 800aea6:	464a      	mov	r2, r9
 800aea8:	f7ff fe6a 	bl	800ab80 <memcpy>
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aeb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	6126      	str	r6, [r4, #16]
 800aeba:	6165      	str	r5, [r4, #20]
 800aebc:	444e      	add	r6, r9
 800aebe:	eba5 0509 	sub.w	r5, r5, r9
 800aec2:	6026      	str	r6, [r4, #0]
 800aec4:	60a5      	str	r5, [r4, #8]
 800aec6:	463e      	mov	r6, r7
 800aec8:	42be      	cmp	r6, r7
 800aeca:	d900      	bls.n	800aece <__ssputs_r+0x86>
 800aecc:	463e      	mov	r6, r7
 800aece:	6820      	ldr	r0, [r4, #0]
 800aed0:	4632      	mov	r2, r6
 800aed2:	4641      	mov	r1, r8
 800aed4:	f7ff fe62 	bl	800ab9c <memmove>
 800aed8:	68a3      	ldr	r3, [r4, #8]
 800aeda:	1b9b      	subs	r3, r3, r6
 800aedc:	60a3      	str	r3, [r4, #8]
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	4433      	add	r3, r6
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	2000      	movs	r0, #0
 800aee6:	e7db      	b.n	800aea0 <__ssputs_r+0x58>
 800aee8:	462a      	mov	r2, r5
 800aeea:	f002 f9d1 	bl	800d290 <_realloc_r>
 800aeee:	4606      	mov	r6, r0
 800aef0:	2800      	cmp	r0, #0
 800aef2:	d1e1      	bne.n	800aeb8 <__ssputs_r+0x70>
 800aef4:	6921      	ldr	r1, [r4, #16]
 800aef6:	4650      	mov	r0, sl
 800aef8:	f7ff fe92 	bl	800ac20 <_free_r>
 800aefc:	e7c7      	b.n	800ae8e <__ssputs_r+0x46>
	...

0800af00 <_svfiprintf_r>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	4698      	mov	r8, r3
 800af06:	898b      	ldrh	r3, [r1, #12]
 800af08:	061b      	lsls	r3, r3, #24
 800af0a:	b09d      	sub	sp, #116	; 0x74
 800af0c:	4607      	mov	r7, r0
 800af0e:	460d      	mov	r5, r1
 800af10:	4614      	mov	r4, r2
 800af12:	d50e      	bpl.n	800af32 <_svfiprintf_r+0x32>
 800af14:	690b      	ldr	r3, [r1, #16]
 800af16:	b963      	cbnz	r3, 800af32 <_svfiprintf_r+0x32>
 800af18:	2140      	movs	r1, #64	; 0x40
 800af1a:	f7ff ff21 	bl	800ad60 <_malloc_r>
 800af1e:	6028      	str	r0, [r5, #0]
 800af20:	6128      	str	r0, [r5, #16]
 800af22:	b920      	cbnz	r0, 800af2e <_svfiprintf_r+0x2e>
 800af24:	230c      	movs	r3, #12
 800af26:	603b      	str	r3, [r7, #0]
 800af28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af2c:	e0d1      	b.n	800b0d2 <_svfiprintf_r+0x1d2>
 800af2e:	2340      	movs	r3, #64	; 0x40
 800af30:	616b      	str	r3, [r5, #20]
 800af32:	2300      	movs	r3, #0
 800af34:	9309      	str	r3, [sp, #36]	; 0x24
 800af36:	2320      	movs	r3, #32
 800af38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800af3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800af40:	2330      	movs	r3, #48	; 0x30
 800af42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b0ec <_svfiprintf_r+0x1ec>
 800af46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af4a:	f04f 0901 	mov.w	r9, #1
 800af4e:	4623      	mov	r3, r4
 800af50:	469a      	mov	sl, r3
 800af52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af56:	b10a      	cbz	r2, 800af5c <_svfiprintf_r+0x5c>
 800af58:	2a25      	cmp	r2, #37	; 0x25
 800af5a:	d1f9      	bne.n	800af50 <_svfiprintf_r+0x50>
 800af5c:	ebba 0b04 	subs.w	fp, sl, r4
 800af60:	d00b      	beq.n	800af7a <_svfiprintf_r+0x7a>
 800af62:	465b      	mov	r3, fp
 800af64:	4622      	mov	r2, r4
 800af66:	4629      	mov	r1, r5
 800af68:	4638      	mov	r0, r7
 800af6a:	f7ff ff6d 	bl	800ae48 <__ssputs_r>
 800af6e:	3001      	adds	r0, #1
 800af70:	f000 80aa 	beq.w	800b0c8 <_svfiprintf_r+0x1c8>
 800af74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af76:	445a      	add	r2, fp
 800af78:	9209      	str	r2, [sp, #36]	; 0x24
 800af7a:	f89a 3000 	ldrb.w	r3, [sl]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 80a2 	beq.w	800b0c8 <_svfiprintf_r+0x1c8>
 800af84:	2300      	movs	r3, #0
 800af86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af8e:	f10a 0a01 	add.w	sl, sl, #1
 800af92:	9304      	str	r3, [sp, #16]
 800af94:	9307      	str	r3, [sp, #28]
 800af96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af9a:	931a      	str	r3, [sp, #104]	; 0x68
 800af9c:	4654      	mov	r4, sl
 800af9e:	2205      	movs	r2, #5
 800afa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa4:	4851      	ldr	r0, [pc, #324]	; (800b0ec <_svfiprintf_r+0x1ec>)
 800afa6:	f7f5 f93b 	bl	8000220 <memchr>
 800afaa:	9a04      	ldr	r2, [sp, #16]
 800afac:	b9d8      	cbnz	r0, 800afe6 <_svfiprintf_r+0xe6>
 800afae:	06d0      	lsls	r0, r2, #27
 800afb0:	bf44      	itt	mi
 800afb2:	2320      	movmi	r3, #32
 800afb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afb8:	0711      	lsls	r1, r2, #28
 800afba:	bf44      	itt	mi
 800afbc:	232b      	movmi	r3, #43	; 0x2b
 800afbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800afc2:	f89a 3000 	ldrb.w	r3, [sl]
 800afc6:	2b2a      	cmp	r3, #42	; 0x2a
 800afc8:	d015      	beq.n	800aff6 <_svfiprintf_r+0xf6>
 800afca:	9a07      	ldr	r2, [sp, #28]
 800afcc:	4654      	mov	r4, sl
 800afce:	2000      	movs	r0, #0
 800afd0:	f04f 0c0a 	mov.w	ip, #10
 800afd4:	4621      	mov	r1, r4
 800afd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afda:	3b30      	subs	r3, #48	; 0x30
 800afdc:	2b09      	cmp	r3, #9
 800afde:	d94e      	bls.n	800b07e <_svfiprintf_r+0x17e>
 800afe0:	b1b0      	cbz	r0, 800b010 <_svfiprintf_r+0x110>
 800afe2:	9207      	str	r2, [sp, #28]
 800afe4:	e014      	b.n	800b010 <_svfiprintf_r+0x110>
 800afe6:	eba0 0308 	sub.w	r3, r0, r8
 800afea:	fa09 f303 	lsl.w	r3, r9, r3
 800afee:	4313      	orrs	r3, r2
 800aff0:	9304      	str	r3, [sp, #16]
 800aff2:	46a2      	mov	sl, r4
 800aff4:	e7d2      	b.n	800af9c <_svfiprintf_r+0x9c>
 800aff6:	9b03      	ldr	r3, [sp, #12]
 800aff8:	1d19      	adds	r1, r3, #4
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	9103      	str	r1, [sp, #12]
 800affe:	2b00      	cmp	r3, #0
 800b000:	bfbb      	ittet	lt
 800b002:	425b      	neglt	r3, r3
 800b004:	f042 0202 	orrlt.w	r2, r2, #2
 800b008:	9307      	strge	r3, [sp, #28]
 800b00a:	9307      	strlt	r3, [sp, #28]
 800b00c:	bfb8      	it	lt
 800b00e:	9204      	strlt	r2, [sp, #16]
 800b010:	7823      	ldrb	r3, [r4, #0]
 800b012:	2b2e      	cmp	r3, #46	; 0x2e
 800b014:	d10c      	bne.n	800b030 <_svfiprintf_r+0x130>
 800b016:	7863      	ldrb	r3, [r4, #1]
 800b018:	2b2a      	cmp	r3, #42	; 0x2a
 800b01a:	d135      	bne.n	800b088 <_svfiprintf_r+0x188>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	1d1a      	adds	r2, r3, #4
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	9203      	str	r2, [sp, #12]
 800b024:	2b00      	cmp	r3, #0
 800b026:	bfb8      	it	lt
 800b028:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b02c:	3402      	adds	r4, #2
 800b02e:	9305      	str	r3, [sp, #20]
 800b030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b0fc <_svfiprintf_r+0x1fc>
 800b034:	7821      	ldrb	r1, [r4, #0]
 800b036:	2203      	movs	r2, #3
 800b038:	4650      	mov	r0, sl
 800b03a:	f7f5 f8f1 	bl	8000220 <memchr>
 800b03e:	b140      	cbz	r0, 800b052 <_svfiprintf_r+0x152>
 800b040:	2340      	movs	r3, #64	; 0x40
 800b042:	eba0 000a 	sub.w	r0, r0, sl
 800b046:	fa03 f000 	lsl.w	r0, r3, r0
 800b04a:	9b04      	ldr	r3, [sp, #16]
 800b04c:	4303      	orrs	r3, r0
 800b04e:	3401      	adds	r4, #1
 800b050:	9304      	str	r3, [sp, #16]
 800b052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b056:	4826      	ldr	r0, [pc, #152]	; (800b0f0 <_svfiprintf_r+0x1f0>)
 800b058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b05c:	2206      	movs	r2, #6
 800b05e:	f7f5 f8df 	bl	8000220 <memchr>
 800b062:	2800      	cmp	r0, #0
 800b064:	d038      	beq.n	800b0d8 <_svfiprintf_r+0x1d8>
 800b066:	4b23      	ldr	r3, [pc, #140]	; (800b0f4 <_svfiprintf_r+0x1f4>)
 800b068:	bb1b      	cbnz	r3, 800b0b2 <_svfiprintf_r+0x1b2>
 800b06a:	9b03      	ldr	r3, [sp, #12]
 800b06c:	3307      	adds	r3, #7
 800b06e:	f023 0307 	bic.w	r3, r3, #7
 800b072:	3308      	adds	r3, #8
 800b074:	9303      	str	r3, [sp, #12]
 800b076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b078:	4433      	add	r3, r6
 800b07a:	9309      	str	r3, [sp, #36]	; 0x24
 800b07c:	e767      	b.n	800af4e <_svfiprintf_r+0x4e>
 800b07e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b082:	460c      	mov	r4, r1
 800b084:	2001      	movs	r0, #1
 800b086:	e7a5      	b.n	800afd4 <_svfiprintf_r+0xd4>
 800b088:	2300      	movs	r3, #0
 800b08a:	3401      	adds	r4, #1
 800b08c:	9305      	str	r3, [sp, #20]
 800b08e:	4619      	mov	r1, r3
 800b090:	f04f 0c0a 	mov.w	ip, #10
 800b094:	4620      	mov	r0, r4
 800b096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b09a:	3a30      	subs	r2, #48	; 0x30
 800b09c:	2a09      	cmp	r2, #9
 800b09e:	d903      	bls.n	800b0a8 <_svfiprintf_r+0x1a8>
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0c5      	beq.n	800b030 <_svfiprintf_r+0x130>
 800b0a4:	9105      	str	r1, [sp, #20]
 800b0a6:	e7c3      	b.n	800b030 <_svfiprintf_r+0x130>
 800b0a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ac:	4604      	mov	r4, r0
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	e7f0      	b.n	800b094 <_svfiprintf_r+0x194>
 800b0b2:	ab03      	add	r3, sp, #12
 800b0b4:	9300      	str	r3, [sp, #0]
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <_svfiprintf_r+0x1f8>)
 800b0ba:	a904      	add	r1, sp, #16
 800b0bc:	4638      	mov	r0, r7
 800b0be:	f000 f8bf 	bl	800b240 <_printf_float>
 800b0c2:	1c42      	adds	r2, r0, #1
 800b0c4:	4606      	mov	r6, r0
 800b0c6:	d1d6      	bne.n	800b076 <_svfiprintf_r+0x176>
 800b0c8:	89ab      	ldrh	r3, [r5, #12]
 800b0ca:	065b      	lsls	r3, r3, #25
 800b0cc:	f53f af2c 	bmi.w	800af28 <_svfiprintf_r+0x28>
 800b0d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b0d2:	b01d      	add	sp, #116	; 0x74
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	ab03      	add	r3, sp, #12
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	462a      	mov	r2, r5
 800b0de:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <_svfiprintf_r+0x1f8>)
 800b0e0:	a904      	add	r1, sp, #16
 800b0e2:	4638      	mov	r0, r7
 800b0e4:	f000 fb50 	bl	800b788 <_printf_i>
 800b0e8:	e7eb      	b.n	800b0c2 <_svfiprintf_r+0x1c2>
 800b0ea:	bf00      	nop
 800b0ec:	0800f2b0 	.word	0x0800f2b0
 800b0f0:	0800f2ba 	.word	0x0800f2ba
 800b0f4:	0800b241 	.word	0x0800b241
 800b0f8:	0800ae49 	.word	0x0800ae49
 800b0fc:	0800f2b6 	.word	0x0800f2b6

0800b100 <__cvt>:
 800b100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b104:	ec55 4b10 	vmov	r4, r5, d0
 800b108:	2d00      	cmp	r5, #0
 800b10a:	460e      	mov	r6, r1
 800b10c:	4619      	mov	r1, r3
 800b10e:	462b      	mov	r3, r5
 800b110:	bfbb      	ittet	lt
 800b112:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b116:	461d      	movlt	r5, r3
 800b118:	2300      	movge	r3, #0
 800b11a:	232d      	movlt	r3, #45	; 0x2d
 800b11c:	700b      	strb	r3, [r1, #0]
 800b11e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b120:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b124:	4691      	mov	r9, r2
 800b126:	f023 0820 	bic.w	r8, r3, #32
 800b12a:	bfbc      	itt	lt
 800b12c:	4622      	movlt	r2, r4
 800b12e:	4614      	movlt	r4, r2
 800b130:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b134:	d005      	beq.n	800b142 <__cvt+0x42>
 800b136:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b13a:	d100      	bne.n	800b13e <__cvt+0x3e>
 800b13c:	3601      	adds	r6, #1
 800b13e:	2102      	movs	r1, #2
 800b140:	e000      	b.n	800b144 <__cvt+0x44>
 800b142:	2103      	movs	r1, #3
 800b144:	ab03      	add	r3, sp, #12
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	ab02      	add	r3, sp, #8
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	ec45 4b10 	vmov	d0, r4, r5
 800b150:	4653      	mov	r3, sl
 800b152:	4632      	mov	r2, r6
 800b154:	f000 fe08 	bl	800bd68 <_dtoa_r>
 800b158:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b15c:	4607      	mov	r7, r0
 800b15e:	d102      	bne.n	800b166 <__cvt+0x66>
 800b160:	f019 0f01 	tst.w	r9, #1
 800b164:	d022      	beq.n	800b1ac <__cvt+0xac>
 800b166:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b16a:	eb07 0906 	add.w	r9, r7, r6
 800b16e:	d110      	bne.n	800b192 <__cvt+0x92>
 800b170:	783b      	ldrb	r3, [r7, #0]
 800b172:	2b30      	cmp	r3, #48	; 0x30
 800b174:	d10a      	bne.n	800b18c <__cvt+0x8c>
 800b176:	2200      	movs	r2, #0
 800b178:	2300      	movs	r3, #0
 800b17a:	4620      	mov	r0, r4
 800b17c:	4629      	mov	r1, r5
 800b17e:	f7f5 fcc3 	bl	8000b08 <__aeabi_dcmpeq>
 800b182:	b918      	cbnz	r0, 800b18c <__cvt+0x8c>
 800b184:	f1c6 0601 	rsb	r6, r6, #1
 800b188:	f8ca 6000 	str.w	r6, [sl]
 800b18c:	f8da 3000 	ldr.w	r3, [sl]
 800b190:	4499      	add	r9, r3
 800b192:	2200      	movs	r2, #0
 800b194:	2300      	movs	r3, #0
 800b196:	4620      	mov	r0, r4
 800b198:	4629      	mov	r1, r5
 800b19a:	f7f5 fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 800b19e:	b108      	cbz	r0, 800b1a4 <__cvt+0xa4>
 800b1a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b1a4:	2230      	movs	r2, #48	; 0x30
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	454b      	cmp	r3, r9
 800b1aa:	d307      	bcc.n	800b1bc <__cvt+0xbc>
 800b1ac:	9b03      	ldr	r3, [sp, #12]
 800b1ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1b0:	1bdb      	subs	r3, r3, r7
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	6013      	str	r3, [r2, #0]
 800b1b6:	b004      	add	sp, #16
 800b1b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1bc:	1c59      	adds	r1, r3, #1
 800b1be:	9103      	str	r1, [sp, #12]
 800b1c0:	701a      	strb	r2, [r3, #0]
 800b1c2:	e7f0      	b.n	800b1a6 <__cvt+0xa6>

0800b1c4 <__exponent>:
 800b1c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	bfb8      	it	lt
 800b1cc:	4249      	neglt	r1, r1
 800b1ce:	f803 2b02 	strb.w	r2, [r3], #2
 800b1d2:	bfb4      	ite	lt
 800b1d4:	222d      	movlt	r2, #45	; 0x2d
 800b1d6:	222b      	movge	r2, #43	; 0x2b
 800b1d8:	2909      	cmp	r1, #9
 800b1da:	7042      	strb	r2, [r0, #1]
 800b1dc:	dd2a      	ble.n	800b234 <__exponent+0x70>
 800b1de:	f10d 0407 	add.w	r4, sp, #7
 800b1e2:	46a4      	mov	ip, r4
 800b1e4:	270a      	movs	r7, #10
 800b1e6:	46a6      	mov	lr, r4
 800b1e8:	460a      	mov	r2, r1
 800b1ea:	fb91 f6f7 	sdiv	r6, r1, r7
 800b1ee:	fb07 1516 	mls	r5, r7, r6, r1
 800b1f2:	3530      	adds	r5, #48	; 0x30
 800b1f4:	2a63      	cmp	r2, #99	; 0x63
 800b1f6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800b1fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b1fe:	4631      	mov	r1, r6
 800b200:	dcf1      	bgt.n	800b1e6 <__exponent+0x22>
 800b202:	3130      	adds	r1, #48	; 0x30
 800b204:	f1ae 0502 	sub.w	r5, lr, #2
 800b208:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b20c:	1c44      	adds	r4, r0, #1
 800b20e:	4629      	mov	r1, r5
 800b210:	4561      	cmp	r1, ip
 800b212:	d30a      	bcc.n	800b22a <__exponent+0x66>
 800b214:	f10d 0209 	add.w	r2, sp, #9
 800b218:	eba2 020e 	sub.w	r2, r2, lr
 800b21c:	4565      	cmp	r5, ip
 800b21e:	bf88      	it	hi
 800b220:	2200      	movhi	r2, #0
 800b222:	4413      	add	r3, r2
 800b224:	1a18      	subs	r0, r3, r0
 800b226:	b003      	add	sp, #12
 800b228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b22a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b22e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b232:	e7ed      	b.n	800b210 <__exponent+0x4c>
 800b234:	2330      	movs	r3, #48	; 0x30
 800b236:	3130      	adds	r1, #48	; 0x30
 800b238:	7083      	strb	r3, [r0, #2]
 800b23a:	70c1      	strb	r1, [r0, #3]
 800b23c:	1d03      	adds	r3, r0, #4
 800b23e:	e7f1      	b.n	800b224 <__exponent+0x60>

0800b240 <_printf_float>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	ed2d 8b02 	vpush	{d8}
 800b248:	b08d      	sub	sp, #52	; 0x34
 800b24a:	460c      	mov	r4, r1
 800b24c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b250:	4616      	mov	r6, r2
 800b252:	461f      	mov	r7, r3
 800b254:	4605      	mov	r5, r0
 800b256:	f001 fc83 	bl	800cb60 <_localeconv_r>
 800b25a:	f8d0 a000 	ldr.w	sl, [r0]
 800b25e:	4650      	mov	r0, sl
 800b260:	f7f4 ffd0 	bl	8000204 <strlen>
 800b264:	2300      	movs	r3, #0
 800b266:	930a      	str	r3, [sp, #40]	; 0x28
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	9305      	str	r3, [sp, #20]
 800b26c:	f8d8 3000 	ldr.w	r3, [r8]
 800b270:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b274:	3307      	adds	r3, #7
 800b276:	f023 0307 	bic.w	r3, r3, #7
 800b27a:	f103 0208 	add.w	r2, r3, #8
 800b27e:	f8c8 2000 	str.w	r2, [r8]
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b28a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b28e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b292:	9307      	str	r3, [sp, #28]
 800b294:	f8cd 8018 	str.w	r8, [sp, #24]
 800b298:	ee08 0a10 	vmov	s16, r0
 800b29c:	4b9f      	ldr	r3, [pc, #636]	; (800b51c <_printf_float+0x2dc>)
 800b29e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2a6:	f7f5 fc61 	bl	8000b6c <__aeabi_dcmpun>
 800b2aa:	bb88      	cbnz	r0, 800b310 <_printf_float+0xd0>
 800b2ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b2b0:	4b9a      	ldr	r3, [pc, #616]	; (800b51c <_printf_float+0x2dc>)
 800b2b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2b6:	f7f5 fc3b 	bl	8000b30 <__aeabi_dcmple>
 800b2ba:	bb48      	cbnz	r0, 800b310 <_printf_float+0xd0>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2300      	movs	r3, #0
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	f7f5 fc2a 	bl	8000b1c <__aeabi_dcmplt>
 800b2c8:	b110      	cbz	r0, 800b2d0 <_printf_float+0x90>
 800b2ca:	232d      	movs	r3, #45	; 0x2d
 800b2cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2d0:	4b93      	ldr	r3, [pc, #588]	; (800b520 <_printf_float+0x2e0>)
 800b2d2:	4894      	ldr	r0, [pc, #592]	; (800b524 <_printf_float+0x2e4>)
 800b2d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b2d8:	bf94      	ite	ls
 800b2da:	4698      	movls	r8, r3
 800b2dc:	4680      	movhi	r8, r0
 800b2de:	2303      	movs	r3, #3
 800b2e0:	6123      	str	r3, [r4, #16]
 800b2e2:	9b05      	ldr	r3, [sp, #20]
 800b2e4:	f023 0204 	bic.w	r2, r3, #4
 800b2e8:	6022      	str	r2, [r4, #0]
 800b2ea:	f04f 0900 	mov.w	r9, #0
 800b2ee:	9700      	str	r7, [sp, #0]
 800b2f0:	4633      	mov	r3, r6
 800b2f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f9d8 	bl	800b6ac <_printf_common>
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f040 8090 	bne.w	800b422 <_printf_float+0x1e2>
 800b302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b306:	b00d      	add	sp, #52	; 0x34
 800b308:	ecbd 8b02 	vpop	{d8}
 800b30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	4640      	mov	r0, r8
 800b316:	4649      	mov	r1, r9
 800b318:	f7f5 fc28 	bl	8000b6c <__aeabi_dcmpun>
 800b31c:	b140      	cbz	r0, 800b330 <_printf_float+0xf0>
 800b31e:	464b      	mov	r3, r9
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfbc      	itt	lt
 800b324:	232d      	movlt	r3, #45	; 0x2d
 800b326:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b32a:	487f      	ldr	r0, [pc, #508]	; (800b528 <_printf_float+0x2e8>)
 800b32c:	4b7f      	ldr	r3, [pc, #508]	; (800b52c <_printf_float+0x2ec>)
 800b32e:	e7d1      	b.n	800b2d4 <_printf_float+0x94>
 800b330:	6863      	ldr	r3, [r4, #4]
 800b332:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b336:	9206      	str	r2, [sp, #24]
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	d13f      	bne.n	800b3bc <_printf_float+0x17c>
 800b33c:	2306      	movs	r3, #6
 800b33e:	6063      	str	r3, [r4, #4]
 800b340:	9b05      	ldr	r3, [sp, #20]
 800b342:	6861      	ldr	r1, [r4, #4]
 800b344:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b348:	2300      	movs	r3, #0
 800b34a:	9303      	str	r3, [sp, #12]
 800b34c:	ab0a      	add	r3, sp, #40	; 0x28
 800b34e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b352:	ab09      	add	r3, sp, #36	; 0x24
 800b354:	ec49 8b10 	vmov	d0, r8, r9
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	6022      	str	r2, [r4, #0]
 800b35c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b360:	4628      	mov	r0, r5
 800b362:	f7ff fecd 	bl	800b100 <__cvt>
 800b366:	9b06      	ldr	r3, [sp, #24]
 800b368:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b36a:	2b47      	cmp	r3, #71	; 0x47
 800b36c:	4680      	mov	r8, r0
 800b36e:	d108      	bne.n	800b382 <_printf_float+0x142>
 800b370:	1cc8      	adds	r0, r1, #3
 800b372:	db02      	blt.n	800b37a <_printf_float+0x13a>
 800b374:	6863      	ldr	r3, [r4, #4]
 800b376:	4299      	cmp	r1, r3
 800b378:	dd41      	ble.n	800b3fe <_printf_float+0x1be>
 800b37a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b37e:	fa5f fb8b 	uxtb.w	fp, fp
 800b382:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b386:	d820      	bhi.n	800b3ca <_printf_float+0x18a>
 800b388:	3901      	subs	r1, #1
 800b38a:	465a      	mov	r2, fp
 800b38c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b390:	9109      	str	r1, [sp, #36]	; 0x24
 800b392:	f7ff ff17 	bl	800b1c4 <__exponent>
 800b396:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b398:	1813      	adds	r3, r2, r0
 800b39a:	2a01      	cmp	r2, #1
 800b39c:	4681      	mov	r9, r0
 800b39e:	6123      	str	r3, [r4, #16]
 800b3a0:	dc02      	bgt.n	800b3a8 <_printf_float+0x168>
 800b3a2:	6822      	ldr	r2, [r4, #0]
 800b3a4:	07d2      	lsls	r2, r2, #31
 800b3a6:	d501      	bpl.n	800b3ac <_printf_float+0x16c>
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	6123      	str	r3, [r4, #16]
 800b3ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d09c      	beq.n	800b2ee <_printf_float+0xae>
 800b3b4:	232d      	movs	r3, #45	; 0x2d
 800b3b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3ba:	e798      	b.n	800b2ee <_printf_float+0xae>
 800b3bc:	9a06      	ldr	r2, [sp, #24]
 800b3be:	2a47      	cmp	r2, #71	; 0x47
 800b3c0:	d1be      	bne.n	800b340 <_printf_float+0x100>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1bc      	bne.n	800b340 <_printf_float+0x100>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e7b9      	b.n	800b33e <_printf_float+0xfe>
 800b3ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b3ce:	d118      	bne.n	800b402 <_printf_float+0x1c2>
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	6863      	ldr	r3, [r4, #4]
 800b3d4:	dd0b      	ble.n	800b3ee <_printf_float+0x1ae>
 800b3d6:	6121      	str	r1, [r4, #16]
 800b3d8:	b913      	cbnz	r3, 800b3e0 <_printf_float+0x1a0>
 800b3da:	6822      	ldr	r2, [r4, #0]
 800b3dc:	07d0      	lsls	r0, r2, #31
 800b3de:	d502      	bpl.n	800b3e6 <_printf_float+0x1a6>
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	440b      	add	r3, r1
 800b3e4:	6123      	str	r3, [r4, #16]
 800b3e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b3e8:	f04f 0900 	mov.w	r9, #0
 800b3ec:	e7de      	b.n	800b3ac <_printf_float+0x16c>
 800b3ee:	b913      	cbnz	r3, 800b3f6 <_printf_float+0x1b6>
 800b3f0:	6822      	ldr	r2, [r4, #0]
 800b3f2:	07d2      	lsls	r2, r2, #31
 800b3f4:	d501      	bpl.n	800b3fa <_printf_float+0x1ba>
 800b3f6:	3302      	adds	r3, #2
 800b3f8:	e7f4      	b.n	800b3e4 <_printf_float+0x1a4>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e7f2      	b.n	800b3e4 <_printf_float+0x1a4>
 800b3fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b404:	4299      	cmp	r1, r3
 800b406:	db05      	blt.n	800b414 <_printf_float+0x1d4>
 800b408:	6823      	ldr	r3, [r4, #0]
 800b40a:	6121      	str	r1, [r4, #16]
 800b40c:	07d8      	lsls	r0, r3, #31
 800b40e:	d5ea      	bpl.n	800b3e6 <_printf_float+0x1a6>
 800b410:	1c4b      	adds	r3, r1, #1
 800b412:	e7e7      	b.n	800b3e4 <_printf_float+0x1a4>
 800b414:	2900      	cmp	r1, #0
 800b416:	bfd4      	ite	le
 800b418:	f1c1 0202 	rsble	r2, r1, #2
 800b41c:	2201      	movgt	r2, #1
 800b41e:	4413      	add	r3, r2
 800b420:	e7e0      	b.n	800b3e4 <_printf_float+0x1a4>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	055a      	lsls	r2, r3, #21
 800b426:	d407      	bmi.n	800b438 <_printf_float+0x1f8>
 800b428:	6923      	ldr	r3, [r4, #16]
 800b42a:	4642      	mov	r2, r8
 800b42c:	4631      	mov	r1, r6
 800b42e:	4628      	mov	r0, r5
 800b430:	47b8      	blx	r7
 800b432:	3001      	adds	r0, #1
 800b434:	d12c      	bne.n	800b490 <_printf_float+0x250>
 800b436:	e764      	b.n	800b302 <_printf_float+0xc2>
 800b438:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b43c:	f240 80e0 	bls.w	800b600 <_printf_float+0x3c0>
 800b440:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b444:	2200      	movs	r2, #0
 800b446:	2300      	movs	r3, #0
 800b448:	f7f5 fb5e 	bl	8000b08 <__aeabi_dcmpeq>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d034      	beq.n	800b4ba <_printf_float+0x27a>
 800b450:	4a37      	ldr	r2, [pc, #220]	; (800b530 <_printf_float+0x2f0>)
 800b452:	2301      	movs	r3, #1
 800b454:	4631      	mov	r1, r6
 800b456:	4628      	mov	r0, r5
 800b458:	47b8      	blx	r7
 800b45a:	3001      	adds	r0, #1
 800b45c:	f43f af51 	beq.w	800b302 <_printf_float+0xc2>
 800b460:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b464:	429a      	cmp	r2, r3
 800b466:	db02      	blt.n	800b46e <_printf_float+0x22e>
 800b468:	6823      	ldr	r3, [r4, #0]
 800b46a:	07d8      	lsls	r0, r3, #31
 800b46c:	d510      	bpl.n	800b490 <_printf_float+0x250>
 800b46e:	ee18 3a10 	vmov	r3, s16
 800b472:	4652      	mov	r2, sl
 800b474:	4631      	mov	r1, r6
 800b476:	4628      	mov	r0, r5
 800b478:	47b8      	blx	r7
 800b47a:	3001      	adds	r0, #1
 800b47c:	f43f af41 	beq.w	800b302 <_printf_float+0xc2>
 800b480:	f04f 0800 	mov.w	r8, #0
 800b484:	f104 091a 	add.w	r9, r4, #26
 800b488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48a:	3b01      	subs	r3, #1
 800b48c:	4543      	cmp	r3, r8
 800b48e:	dc09      	bgt.n	800b4a4 <_printf_float+0x264>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	079b      	lsls	r3, r3, #30
 800b494:	f100 8105 	bmi.w	800b6a2 <_printf_float+0x462>
 800b498:	68e0      	ldr	r0, [r4, #12]
 800b49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b49c:	4298      	cmp	r0, r3
 800b49e:	bfb8      	it	lt
 800b4a0:	4618      	movlt	r0, r3
 800b4a2:	e730      	b.n	800b306 <_printf_float+0xc6>
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	464a      	mov	r2, r9
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	47b8      	blx	r7
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	f43f af27 	beq.w	800b302 <_printf_float+0xc2>
 800b4b4:	f108 0801 	add.w	r8, r8, #1
 800b4b8:	e7e6      	b.n	800b488 <_printf_float+0x248>
 800b4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	dc39      	bgt.n	800b534 <_printf_float+0x2f4>
 800b4c0:	4a1b      	ldr	r2, [pc, #108]	; (800b530 <_printf_float+0x2f0>)
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	4631      	mov	r1, r6
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b8      	blx	r7
 800b4ca:	3001      	adds	r0, #1
 800b4cc:	f43f af19 	beq.w	800b302 <_printf_float+0xc2>
 800b4d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	d102      	bne.n	800b4de <_printf_float+0x29e>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	07d9      	lsls	r1, r3, #31
 800b4dc:	d5d8      	bpl.n	800b490 <_printf_float+0x250>
 800b4de:	ee18 3a10 	vmov	r3, s16
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	4631      	mov	r1, r6
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	47b8      	blx	r7
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	f43f af09 	beq.w	800b302 <_printf_float+0xc2>
 800b4f0:	f04f 0900 	mov.w	r9, #0
 800b4f4:	f104 0a1a 	add.w	sl, r4, #26
 800b4f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fa:	425b      	negs	r3, r3
 800b4fc:	454b      	cmp	r3, r9
 800b4fe:	dc01      	bgt.n	800b504 <_printf_float+0x2c4>
 800b500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b502:	e792      	b.n	800b42a <_printf_float+0x1ea>
 800b504:	2301      	movs	r3, #1
 800b506:	4652      	mov	r2, sl
 800b508:	4631      	mov	r1, r6
 800b50a:	4628      	mov	r0, r5
 800b50c:	47b8      	blx	r7
 800b50e:	3001      	adds	r0, #1
 800b510:	f43f aef7 	beq.w	800b302 <_printf_float+0xc2>
 800b514:	f109 0901 	add.w	r9, r9, #1
 800b518:	e7ee      	b.n	800b4f8 <_printf_float+0x2b8>
 800b51a:	bf00      	nop
 800b51c:	7fefffff 	.word	0x7fefffff
 800b520:	0800f2c1 	.word	0x0800f2c1
 800b524:	0800f2c5 	.word	0x0800f2c5
 800b528:	0800f2cd 	.word	0x0800f2cd
 800b52c:	0800f2c9 	.word	0x0800f2c9
 800b530:	0800f2d1 	.word	0x0800f2d1
 800b534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b538:	429a      	cmp	r2, r3
 800b53a:	bfa8      	it	ge
 800b53c:	461a      	movge	r2, r3
 800b53e:	2a00      	cmp	r2, #0
 800b540:	4691      	mov	r9, r2
 800b542:	dc37      	bgt.n	800b5b4 <_printf_float+0x374>
 800b544:	f04f 0b00 	mov.w	fp, #0
 800b548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b54c:	f104 021a 	add.w	r2, r4, #26
 800b550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b552:	9305      	str	r3, [sp, #20]
 800b554:	eba3 0309 	sub.w	r3, r3, r9
 800b558:	455b      	cmp	r3, fp
 800b55a:	dc33      	bgt.n	800b5c4 <_printf_float+0x384>
 800b55c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b560:	429a      	cmp	r2, r3
 800b562:	db3b      	blt.n	800b5dc <_printf_float+0x39c>
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	07da      	lsls	r2, r3, #31
 800b568:	d438      	bmi.n	800b5dc <_printf_float+0x39c>
 800b56a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b56c:	9a05      	ldr	r2, [sp, #20]
 800b56e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b570:	1a9a      	subs	r2, r3, r2
 800b572:	eba3 0901 	sub.w	r9, r3, r1
 800b576:	4591      	cmp	r9, r2
 800b578:	bfa8      	it	ge
 800b57a:	4691      	movge	r9, r2
 800b57c:	f1b9 0f00 	cmp.w	r9, #0
 800b580:	dc35      	bgt.n	800b5ee <_printf_float+0x3ae>
 800b582:	f04f 0800 	mov.w	r8, #0
 800b586:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b58a:	f104 0a1a 	add.w	sl, r4, #26
 800b58e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b592:	1a9b      	subs	r3, r3, r2
 800b594:	eba3 0309 	sub.w	r3, r3, r9
 800b598:	4543      	cmp	r3, r8
 800b59a:	f77f af79 	ble.w	800b490 <_printf_float+0x250>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4631      	mov	r1, r6
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	47b8      	blx	r7
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	f43f aeaa 	beq.w	800b302 <_printf_float+0xc2>
 800b5ae:	f108 0801 	add.w	r8, r8, #1
 800b5b2:	e7ec      	b.n	800b58e <_printf_float+0x34e>
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	4631      	mov	r1, r6
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	47b8      	blx	r7
 800b5be:	3001      	adds	r0, #1
 800b5c0:	d1c0      	bne.n	800b544 <_printf_float+0x304>
 800b5c2:	e69e      	b.n	800b302 <_printf_float+0xc2>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4631      	mov	r1, r6
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	9205      	str	r2, [sp, #20]
 800b5cc:	47b8      	blx	r7
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	f43f ae97 	beq.w	800b302 <_printf_float+0xc2>
 800b5d4:	9a05      	ldr	r2, [sp, #20]
 800b5d6:	f10b 0b01 	add.w	fp, fp, #1
 800b5da:	e7b9      	b.n	800b550 <_printf_float+0x310>
 800b5dc:	ee18 3a10 	vmov	r3, s16
 800b5e0:	4652      	mov	r2, sl
 800b5e2:	4631      	mov	r1, r6
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	47b8      	blx	r7
 800b5e8:	3001      	adds	r0, #1
 800b5ea:	d1be      	bne.n	800b56a <_printf_float+0x32a>
 800b5ec:	e689      	b.n	800b302 <_printf_float+0xc2>
 800b5ee:	9a05      	ldr	r2, [sp, #20]
 800b5f0:	464b      	mov	r3, r9
 800b5f2:	4442      	add	r2, r8
 800b5f4:	4631      	mov	r1, r6
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	47b8      	blx	r7
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d1c1      	bne.n	800b582 <_printf_float+0x342>
 800b5fe:	e680      	b.n	800b302 <_printf_float+0xc2>
 800b600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b602:	2a01      	cmp	r2, #1
 800b604:	dc01      	bgt.n	800b60a <_printf_float+0x3ca>
 800b606:	07db      	lsls	r3, r3, #31
 800b608:	d538      	bpl.n	800b67c <_printf_float+0x43c>
 800b60a:	2301      	movs	r3, #1
 800b60c:	4642      	mov	r2, r8
 800b60e:	4631      	mov	r1, r6
 800b610:	4628      	mov	r0, r5
 800b612:	47b8      	blx	r7
 800b614:	3001      	adds	r0, #1
 800b616:	f43f ae74 	beq.w	800b302 <_printf_float+0xc2>
 800b61a:	ee18 3a10 	vmov	r3, s16
 800b61e:	4652      	mov	r2, sl
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	f43f ae6b 	beq.w	800b302 <_printf_float+0xc2>
 800b62c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b630:	2200      	movs	r2, #0
 800b632:	2300      	movs	r3, #0
 800b634:	f7f5 fa68 	bl	8000b08 <__aeabi_dcmpeq>
 800b638:	b9d8      	cbnz	r0, 800b672 <_printf_float+0x432>
 800b63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b63c:	f108 0201 	add.w	r2, r8, #1
 800b640:	3b01      	subs	r3, #1
 800b642:	4631      	mov	r1, r6
 800b644:	4628      	mov	r0, r5
 800b646:	47b8      	blx	r7
 800b648:	3001      	adds	r0, #1
 800b64a:	d10e      	bne.n	800b66a <_printf_float+0x42a>
 800b64c:	e659      	b.n	800b302 <_printf_float+0xc2>
 800b64e:	2301      	movs	r3, #1
 800b650:	4652      	mov	r2, sl
 800b652:	4631      	mov	r1, r6
 800b654:	4628      	mov	r0, r5
 800b656:	47b8      	blx	r7
 800b658:	3001      	adds	r0, #1
 800b65a:	f43f ae52 	beq.w	800b302 <_printf_float+0xc2>
 800b65e:	f108 0801 	add.w	r8, r8, #1
 800b662:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b664:	3b01      	subs	r3, #1
 800b666:	4543      	cmp	r3, r8
 800b668:	dcf1      	bgt.n	800b64e <_printf_float+0x40e>
 800b66a:	464b      	mov	r3, r9
 800b66c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b670:	e6dc      	b.n	800b42c <_printf_float+0x1ec>
 800b672:	f04f 0800 	mov.w	r8, #0
 800b676:	f104 0a1a 	add.w	sl, r4, #26
 800b67a:	e7f2      	b.n	800b662 <_printf_float+0x422>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4642      	mov	r2, r8
 800b680:	e7df      	b.n	800b642 <_printf_float+0x402>
 800b682:	2301      	movs	r3, #1
 800b684:	464a      	mov	r2, r9
 800b686:	4631      	mov	r1, r6
 800b688:	4628      	mov	r0, r5
 800b68a:	47b8      	blx	r7
 800b68c:	3001      	adds	r0, #1
 800b68e:	f43f ae38 	beq.w	800b302 <_printf_float+0xc2>
 800b692:	f108 0801 	add.w	r8, r8, #1
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b69a:	1a5b      	subs	r3, r3, r1
 800b69c:	4543      	cmp	r3, r8
 800b69e:	dcf0      	bgt.n	800b682 <_printf_float+0x442>
 800b6a0:	e6fa      	b.n	800b498 <_printf_float+0x258>
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	f104 0919 	add.w	r9, r4, #25
 800b6aa:	e7f4      	b.n	800b696 <_printf_float+0x456>

0800b6ac <_printf_common>:
 800b6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	4699      	mov	r9, r3
 800b6b4:	688a      	ldr	r2, [r1, #8]
 800b6b6:	690b      	ldr	r3, [r1, #16]
 800b6b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	bfb8      	it	lt
 800b6c0:	4613      	movlt	r3, r2
 800b6c2:	6033      	str	r3, [r6, #0]
 800b6c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b10a      	cbz	r2, 800b6d2 <_printf_common+0x26>
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	0699      	lsls	r1, r3, #26
 800b6d6:	bf42      	ittt	mi
 800b6d8:	6833      	ldrmi	r3, [r6, #0]
 800b6da:	3302      	addmi	r3, #2
 800b6dc:	6033      	strmi	r3, [r6, #0]
 800b6de:	6825      	ldr	r5, [r4, #0]
 800b6e0:	f015 0506 	ands.w	r5, r5, #6
 800b6e4:	d106      	bne.n	800b6f4 <_printf_common+0x48>
 800b6e6:	f104 0a19 	add.w	sl, r4, #25
 800b6ea:	68e3      	ldr	r3, [r4, #12]
 800b6ec:	6832      	ldr	r2, [r6, #0]
 800b6ee:	1a9b      	subs	r3, r3, r2
 800b6f0:	42ab      	cmp	r3, r5
 800b6f2:	dc26      	bgt.n	800b742 <_printf_common+0x96>
 800b6f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6f8:	1e13      	subs	r3, r2, #0
 800b6fa:	6822      	ldr	r2, [r4, #0]
 800b6fc:	bf18      	it	ne
 800b6fe:	2301      	movne	r3, #1
 800b700:	0692      	lsls	r2, r2, #26
 800b702:	d42b      	bmi.n	800b75c <_printf_common+0xb0>
 800b704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b708:	4649      	mov	r1, r9
 800b70a:	4638      	mov	r0, r7
 800b70c:	47c0      	blx	r8
 800b70e:	3001      	adds	r0, #1
 800b710:	d01e      	beq.n	800b750 <_printf_common+0xa4>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	68e5      	ldr	r5, [r4, #12]
 800b716:	6832      	ldr	r2, [r6, #0]
 800b718:	f003 0306 	and.w	r3, r3, #6
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	bf08      	it	eq
 800b720:	1aad      	subeq	r5, r5, r2
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	6922      	ldr	r2, [r4, #16]
 800b726:	bf0c      	ite	eq
 800b728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b72c:	2500      	movne	r5, #0
 800b72e:	4293      	cmp	r3, r2
 800b730:	bfc4      	itt	gt
 800b732:	1a9b      	subgt	r3, r3, r2
 800b734:	18ed      	addgt	r5, r5, r3
 800b736:	2600      	movs	r6, #0
 800b738:	341a      	adds	r4, #26
 800b73a:	42b5      	cmp	r5, r6
 800b73c:	d11a      	bne.n	800b774 <_printf_common+0xc8>
 800b73e:	2000      	movs	r0, #0
 800b740:	e008      	b.n	800b754 <_printf_common+0xa8>
 800b742:	2301      	movs	r3, #1
 800b744:	4652      	mov	r2, sl
 800b746:	4649      	mov	r1, r9
 800b748:	4638      	mov	r0, r7
 800b74a:	47c0      	blx	r8
 800b74c:	3001      	adds	r0, #1
 800b74e:	d103      	bne.n	800b758 <_printf_common+0xac>
 800b750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	3501      	adds	r5, #1
 800b75a:	e7c6      	b.n	800b6ea <_printf_common+0x3e>
 800b75c:	18e1      	adds	r1, r4, r3
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	2030      	movs	r0, #48	; 0x30
 800b762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b766:	4422      	add	r2, r4
 800b768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b76c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b770:	3302      	adds	r3, #2
 800b772:	e7c7      	b.n	800b704 <_printf_common+0x58>
 800b774:	2301      	movs	r3, #1
 800b776:	4622      	mov	r2, r4
 800b778:	4649      	mov	r1, r9
 800b77a:	4638      	mov	r0, r7
 800b77c:	47c0      	blx	r8
 800b77e:	3001      	adds	r0, #1
 800b780:	d0e6      	beq.n	800b750 <_printf_common+0xa4>
 800b782:	3601      	adds	r6, #1
 800b784:	e7d9      	b.n	800b73a <_printf_common+0x8e>
	...

0800b788 <_printf_i>:
 800b788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	7e0f      	ldrb	r7, [r1, #24]
 800b78e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b790:	2f78      	cmp	r7, #120	; 0x78
 800b792:	4691      	mov	r9, r2
 800b794:	4680      	mov	r8, r0
 800b796:	460c      	mov	r4, r1
 800b798:	469a      	mov	sl, r3
 800b79a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b79e:	d807      	bhi.n	800b7b0 <_printf_i+0x28>
 800b7a0:	2f62      	cmp	r7, #98	; 0x62
 800b7a2:	d80a      	bhi.n	800b7ba <_printf_i+0x32>
 800b7a4:	2f00      	cmp	r7, #0
 800b7a6:	f000 80d8 	beq.w	800b95a <_printf_i+0x1d2>
 800b7aa:	2f58      	cmp	r7, #88	; 0x58
 800b7ac:	f000 80a3 	beq.w	800b8f6 <_printf_i+0x16e>
 800b7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7b8:	e03a      	b.n	800b830 <_printf_i+0xa8>
 800b7ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7be:	2b15      	cmp	r3, #21
 800b7c0:	d8f6      	bhi.n	800b7b0 <_printf_i+0x28>
 800b7c2:	a101      	add	r1, pc, #4	; (adr r1, 800b7c8 <_printf_i+0x40>)
 800b7c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7c8:	0800b821 	.word	0x0800b821
 800b7cc:	0800b835 	.word	0x0800b835
 800b7d0:	0800b7b1 	.word	0x0800b7b1
 800b7d4:	0800b7b1 	.word	0x0800b7b1
 800b7d8:	0800b7b1 	.word	0x0800b7b1
 800b7dc:	0800b7b1 	.word	0x0800b7b1
 800b7e0:	0800b835 	.word	0x0800b835
 800b7e4:	0800b7b1 	.word	0x0800b7b1
 800b7e8:	0800b7b1 	.word	0x0800b7b1
 800b7ec:	0800b7b1 	.word	0x0800b7b1
 800b7f0:	0800b7b1 	.word	0x0800b7b1
 800b7f4:	0800b941 	.word	0x0800b941
 800b7f8:	0800b865 	.word	0x0800b865
 800b7fc:	0800b923 	.word	0x0800b923
 800b800:	0800b7b1 	.word	0x0800b7b1
 800b804:	0800b7b1 	.word	0x0800b7b1
 800b808:	0800b963 	.word	0x0800b963
 800b80c:	0800b7b1 	.word	0x0800b7b1
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b7b1 	.word	0x0800b7b1
 800b818:	0800b7b1 	.word	0x0800b7b1
 800b81c:	0800b92b 	.word	0x0800b92b
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	602a      	str	r2, [r5, #0]
 800b828:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b82c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b830:	2301      	movs	r3, #1
 800b832:	e0a3      	b.n	800b97c <_printf_i+0x1f4>
 800b834:	6820      	ldr	r0, [r4, #0]
 800b836:	6829      	ldr	r1, [r5, #0]
 800b838:	0606      	lsls	r6, r0, #24
 800b83a:	f101 0304 	add.w	r3, r1, #4
 800b83e:	d50a      	bpl.n	800b856 <_printf_i+0xce>
 800b840:	680e      	ldr	r6, [r1, #0]
 800b842:	602b      	str	r3, [r5, #0]
 800b844:	2e00      	cmp	r6, #0
 800b846:	da03      	bge.n	800b850 <_printf_i+0xc8>
 800b848:	232d      	movs	r3, #45	; 0x2d
 800b84a:	4276      	negs	r6, r6
 800b84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b850:	485e      	ldr	r0, [pc, #376]	; (800b9cc <_printf_i+0x244>)
 800b852:	230a      	movs	r3, #10
 800b854:	e019      	b.n	800b88a <_printf_i+0x102>
 800b856:	680e      	ldr	r6, [r1, #0]
 800b858:	602b      	str	r3, [r5, #0]
 800b85a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b85e:	bf18      	it	ne
 800b860:	b236      	sxthne	r6, r6
 800b862:	e7ef      	b.n	800b844 <_printf_i+0xbc>
 800b864:	682b      	ldr	r3, [r5, #0]
 800b866:	6820      	ldr	r0, [r4, #0]
 800b868:	1d19      	adds	r1, r3, #4
 800b86a:	6029      	str	r1, [r5, #0]
 800b86c:	0601      	lsls	r1, r0, #24
 800b86e:	d501      	bpl.n	800b874 <_printf_i+0xec>
 800b870:	681e      	ldr	r6, [r3, #0]
 800b872:	e002      	b.n	800b87a <_printf_i+0xf2>
 800b874:	0646      	lsls	r6, r0, #25
 800b876:	d5fb      	bpl.n	800b870 <_printf_i+0xe8>
 800b878:	881e      	ldrh	r6, [r3, #0]
 800b87a:	4854      	ldr	r0, [pc, #336]	; (800b9cc <_printf_i+0x244>)
 800b87c:	2f6f      	cmp	r7, #111	; 0x6f
 800b87e:	bf0c      	ite	eq
 800b880:	2308      	moveq	r3, #8
 800b882:	230a      	movne	r3, #10
 800b884:	2100      	movs	r1, #0
 800b886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b88a:	6865      	ldr	r5, [r4, #4]
 800b88c:	60a5      	str	r5, [r4, #8]
 800b88e:	2d00      	cmp	r5, #0
 800b890:	bfa2      	ittt	ge
 800b892:	6821      	ldrge	r1, [r4, #0]
 800b894:	f021 0104 	bicge.w	r1, r1, #4
 800b898:	6021      	strge	r1, [r4, #0]
 800b89a:	b90e      	cbnz	r6, 800b8a0 <_printf_i+0x118>
 800b89c:	2d00      	cmp	r5, #0
 800b89e:	d04d      	beq.n	800b93c <_printf_i+0x1b4>
 800b8a0:	4615      	mov	r5, r2
 800b8a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8a6:	fb03 6711 	mls	r7, r3, r1, r6
 800b8aa:	5dc7      	ldrb	r7, [r0, r7]
 800b8ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8b0:	4637      	mov	r7, r6
 800b8b2:	42bb      	cmp	r3, r7
 800b8b4:	460e      	mov	r6, r1
 800b8b6:	d9f4      	bls.n	800b8a2 <_printf_i+0x11a>
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d10b      	bne.n	800b8d4 <_printf_i+0x14c>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	07de      	lsls	r6, r3, #31
 800b8c0:	d508      	bpl.n	800b8d4 <_printf_i+0x14c>
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	6861      	ldr	r1, [r4, #4]
 800b8c6:	4299      	cmp	r1, r3
 800b8c8:	bfde      	ittt	le
 800b8ca:	2330      	movle	r3, #48	; 0x30
 800b8cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b8d4:	1b52      	subs	r2, r2, r5
 800b8d6:	6122      	str	r2, [r4, #16]
 800b8d8:	f8cd a000 	str.w	sl, [sp]
 800b8dc:	464b      	mov	r3, r9
 800b8de:	aa03      	add	r2, sp, #12
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	f7ff fee2 	bl	800b6ac <_printf_common>
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	d14c      	bne.n	800b986 <_printf_i+0x1fe>
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8f0:	b004      	add	sp, #16
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	4835      	ldr	r0, [pc, #212]	; (800b9cc <_printf_i+0x244>)
 800b8f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b8fc:	6829      	ldr	r1, [r5, #0]
 800b8fe:	6823      	ldr	r3, [r4, #0]
 800b900:	f851 6b04 	ldr.w	r6, [r1], #4
 800b904:	6029      	str	r1, [r5, #0]
 800b906:	061d      	lsls	r5, r3, #24
 800b908:	d514      	bpl.n	800b934 <_printf_i+0x1ac>
 800b90a:	07df      	lsls	r7, r3, #31
 800b90c:	bf44      	itt	mi
 800b90e:	f043 0320 	orrmi.w	r3, r3, #32
 800b912:	6023      	strmi	r3, [r4, #0]
 800b914:	b91e      	cbnz	r6, 800b91e <_printf_i+0x196>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	f023 0320 	bic.w	r3, r3, #32
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	2310      	movs	r3, #16
 800b920:	e7b0      	b.n	800b884 <_printf_i+0xfc>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f043 0320 	orr.w	r3, r3, #32
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	2378      	movs	r3, #120	; 0x78
 800b92c:	4828      	ldr	r0, [pc, #160]	; (800b9d0 <_printf_i+0x248>)
 800b92e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b932:	e7e3      	b.n	800b8fc <_printf_i+0x174>
 800b934:	0659      	lsls	r1, r3, #25
 800b936:	bf48      	it	mi
 800b938:	b2b6      	uxthmi	r6, r6
 800b93a:	e7e6      	b.n	800b90a <_printf_i+0x182>
 800b93c:	4615      	mov	r5, r2
 800b93e:	e7bb      	b.n	800b8b8 <_printf_i+0x130>
 800b940:	682b      	ldr	r3, [r5, #0]
 800b942:	6826      	ldr	r6, [r4, #0]
 800b944:	6961      	ldr	r1, [r4, #20]
 800b946:	1d18      	adds	r0, r3, #4
 800b948:	6028      	str	r0, [r5, #0]
 800b94a:	0635      	lsls	r5, r6, #24
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	d501      	bpl.n	800b954 <_printf_i+0x1cc>
 800b950:	6019      	str	r1, [r3, #0]
 800b952:	e002      	b.n	800b95a <_printf_i+0x1d2>
 800b954:	0670      	lsls	r0, r6, #25
 800b956:	d5fb      	bpl.n	800b950 <_printf_i+0x1c8>
 800b958:	8019      	strh	r1, [r3, #0]
 800b95a:	2300      	movs	r3, #0
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	4615      	mov	r5, r2
 800b960:	e7ba      	b.n	800b8d8 <_printf_i+0x150>
 800b962:	682b      	ldr	r3, [r5, #0]
 800b964:	1d1a      	adds	r2, r3, #4
 800b966:	602a      	str	r2, [r5, #0]
 800b968:	681d      	ldr	r5, [r3, #0]
 800b96a:	6862      	ldr	r2, [r4, #4]
 800b96c:	2100      	movs	r1, #0
 800b96e:	4628      	mov	r0, r5
 800b970:	f7f4 fc56 	bl	8000220 <memchr>
 800b974:	b108      	cbz	r0, 800b97a <_printf_i+0x1f2>
 800b976:	1b40      	subs	r0, r0, r5
 800b978:	6060      	str	r0, [r4, #4]
 800b97a:	6863      	ldr	r3, [r4, #4]
 800b97c:	6123      	str	r3, [r4, #16]
 800b97e:	2300      	movs	r3, #0
 800b980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b984:	e7a8      	b.n	800b8d8 <_printf_i+0x150>
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	462a      	mov	r2, r5
 800b98a:	4649      	mov	r1, r9
 800b98c:	4640      	mov	r0, r8
 800b98e:	47d0      	blx	sl
 800b990:	3001      	adds	r0, #1
 800b992:	d0ab      	beq.n	800b8ec <_printf_i+0x164>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	079b      	lsls	r3, r3, #30
 800b998:	d413      	bmi.n	800b9c2 <_printf_i+0x23a>
 800b99a:	68e0      	ldr	r0, [r4, #12]
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	4298      	cmp	r0, r3
 800b9a0:	bfb8      	it	lt
 800b9a2:	4618      	movlt	r0, r3
 800b9a4:	e7a4      	b.n	800b8f0 <_printf_i+0x168>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	47d0      	blx	sl
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d09b      	beq.n	800b8ec <_printf_i+0x164>
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	68e3      	ldr	r3, [r4, #12]
 800b9b8:	9903      	ldr	r1, [sp, #12]
 800b9ba:	1a5b      	subs	r3, r3, r1
 800b9bc:	42ab      	cmp	r3, r5
 800b9be:	dcf2      	bgt.n	800b9a6 <_printf_i+0x21e>
 800b9c0:	e7eb      	b.n	800b99a <_printf_i+0x212>
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	f104 0619 	add.w	r6, r4, #25
 800b9c8:	e7f5      	b.n	800b9b6 <_printf_i+0x22e>
 800b9ca:	bf00      	nop
 800b9cc:	0800f2d3 	.word	0x0800f2d3
 800b9d0:	0800f2e4 	.word	0x0800f2e4

0800b9d4 <_sbrk_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d06      	ldr	r5, [pc, #24]	; (800b9f0 <_sbrk_r+0x1c>)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	602b      	str	r3, [r5, #0]
 800b9e0:	f7f5 fbc4 	bl	800116c <_sbrk>
 800b9e4:	1c43      	adds	r3, r0, #1
 800b9e6:	d102      	bne.n	800b9ee <_sbrk_r+0x1a>
 800b9e8:	682b      	ldr	r3, [r5, #0]
 800b9ea:	b103      	cbz	r3, 800b9ee <_sbrk_r+0x1a>
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	bd38      	pop	{r3, r4, r5, pc}
 800b9f0:	2000b230 	.word	0x2000b230

0800b9f4 <_raise_r>:
 800b9f4:	291f      	cmp	r1, #31
 800b9f6:	b538      	push	{r3, r4, r5, lr}
 800b9f8:	4604      	mov	r4, r0
 800b9fa:	460d      	mov	r5, r1
 800b9fc:	d904      	bls.n	800ba08 <_raise_r+0x14>
 800b9fe:	2316      	movs	r3, #22
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba06:	bd38      	pop	{r3, r4, r5, pc}
 800ba08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba0a:	b112      	cbz	r2, 800ba12 <_raise_r+0x1e>
 800ba0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba10:	b94b      	cbnz	r3, 800ba26 <_raise_r+0x32>
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 f830 	bl	800ba78 <_getpid_r>
 800ba18:	462a      	mov	r2, r5
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba22:	f000 b817 	b.w	800ba54 <_kill_r>
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	d00a      	beq.n	800ba40 <_raise_r+0x4c>
 800ba2a:	1c59      	adds	r1, r3, #1
 800ba2c:	d103      	bne.n	800ba36 <_raise_r+0x42>
 800ba2e:	2316      	movs	r3, #22
 800ba30:	6003      	str	r3, [r0, #0]
 800ba32:	2001      	movs	r0, #1
 800ba34:	e7e7      	b.n	800ba06 <_raise_r+0x12>
 800ba36:	2400      	movs	r4, #0
 800ba38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba3c:	4628      	mov	r0, r5
 800ba3e:	4798      	blx	r3
 800ba40:	2000      	movs	r0, #0
 800ba42:	e7e0      	b.n	800ba06 <_raise_r+0x12>

0800ba44 <raise>:
 800ba44:	4b02      	ldr	r3, [pc, #8]	; (800ba50 <raise+0xc>)
 800ba46:	4601      	mov	r1, r0
 800ba48:	6818      	ldr	r0, [r3, #0]
 800ba4a:	f7ff bfd3 	b.w	800b9f4 <_raise_r>
 800ba4e:	bf00      	nop
 800ba50:	20000158 	.word	0x20000158

0800ba54 <_kill_r>:
 800ba54:	b538      	push	{r3, r4, r5, lr}
 800ba56:	4d07      	ldr	r5, [pc, #28]	; (800ba74 <_kill_r+0x20>)
 800ba58:	2300      	movs	r3, #0
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	4611      	mov	r1, r2
 800ba60:	602b      	str	r3, [r5, #0]
 800ba62:	f7f5 fb4b 	bl	80010fc <_kill>
 800ba66:	1c43      	adds	r3, r0, #1
 800ba68:	d102      	bne.n	800ba70 <_kill_r+0x1c>
 800ba6a:	682b      	ldr	r3, [r5, #0]
 800ba6c:	b103      	cbz	r3, 800ba70 <_kill_r+0x1c>
 800ba6e:	6023      	str	r3, [r4, #0]
 800ba70:	bd38      	pop	{r3, r4, r5, pc}
 800ba72:	bf00      	nop
 800ba74:	2000b230 	.word	0x2000b230

0800ba78 <_getpid_r>:
 800ba78:	f7f5 bb3e 	b.w	80010f8 <_getpid>

0800ba7c <strstr>:
 800ba7c:	780a      	ldrb	r2, [r1, #0]
 800ba7e:	b570      	push	{r4, r5, r6, lr}
 800ba80:	b96a      	cbnz	r2, 800ba9e <strstr+0x22>
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d109      	bne.n	800ba9c <strstr+0x20>
 800ba88:	460c      	mov	r4, r1
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d0f6      	beq.n	800ba82 <strstr+0x6>
 800ba94:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ba98:	429e      	cmp	r6, r3
 800ba9a:	d0f7      	beq.n	800ba8c <strstr+0x10>
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	7803      	ldrb	r3, [r0, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1ef      	bne.n	800ba84 <strstr+0x8>
 800baa4:	4618      	mov	r0, r3
 800baa6:	e7ec      	b.n	800ba82 <strstr+0x6>

0800baa8 <_strtol_l.constprop.0>:
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baae:	d001      	beq.n	800bab4 <_strtol_l.constprop.0+0xc>
 800bab0:	2b24      	cmp	r3, #36	; 0x24
 800bab2:	d906      	bls.n	800bac2 <_strtol_l.constprop.0+0x1a>
 800bab4:	f000 ff46 	bl	800c944 <__errno>
 800bab8:	2316      	movs	r3, #22
 800baba:	6003      	str	r3, [r0, #0]
 800babc:	2000      	movs	r0, #0
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bba8 <_strtol_l.constprop.0+0x100>
 800bac6:	460d      	mov	r5, r1
 800bac8:	462e      	mov	r6, r5
 800baca:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bace:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bad2:	f017 0708 	ands.w	r7, r7, #8
 800bad6:	d1f7      	bne.n	800bac8 <_strtol_l.constprop.0+0x20>
 800bad8:	2c2d      	cmp	r4, #45	; 0x2d
 800bada:	d132      	bne.n	800bb42 <_strtol_l.constprop.0+0x9a>
 800badc:	782c      	ldrb	r4, [r5, #0]
 800bade:	2701      	movs	r7, #1
 800bae0:	1cb5      	adds	r5, r6, #2
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d05b      	beq.n	800bb9e <_strtol_l.constprop.0+0xf6>
 800bae6:	2b10      	cmp	r3, #16
 800bae8:	d109      	bne.n	800bafe <_strtol_l.constprop.0+0x56>
 800baea:	2c30      	cmp	r4, #48	; 0x30
 800baec:	d107      	bne.n	800bafe <_strtol_l.constprop.0+0x56>
 800baee:	782c      	ldrb	r4, [r5, #0]
 800baf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800baf4:	2c58      	cmp	r4, #88	; 0x58
 800baf6:	d14d      	bne.n	800bb94 <_strtol_l.constprop.0+0xec>
 800baf8:	786c      	ldrb	r4, [r5, #1]
 800bafa:	2310      	movs	r3, #16
 800bafc:	3502      	adds	r5, #2
 800bafe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bb02:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bb06:	f04f 0c00 	mov.w	ip, #0
 800bb0a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bb0e:	4666      	mov	r6, ip
 800bb10:	fb03 8a19 	mls	sl, r3, r9, r8
 800bb14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bb18:	f1be 0f09 	cmp.w	lr, #9
 800bb1c:	d816      	bhi.n	800bb4c <_strtol_l.constprop.0+0xa4>
 800bb1e:	4674      	mov	r4, lr
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	dd24      	ble.n	800bb6e <_strtol_l.constprop.0+0xc6>
 800bb24:	f1bc 0f00 	cmp.w	ip, #0
 800bb28:	db1e      	blt.n	800bb68 <_strtol_l.constprop.0+0xc0>
 800bb2a:	45b1      	cmp	r9, r6
 800bb2c:	d31c      	bcc.n	800bb68 <_strtol_l.constprop.0+0xc0>
 800bb2e:	d101      	bne.n	800bb34 <_strtol_l.constprop.0+0x8c>
 800bb30:	45a2      	cmp	sl, r4
 800bb32:	db19      	blt.n	800bb68 <_strtol_l.constprop.0+0xc0>
 800bb34:	fb06 4603 	mla	r6, r6, r3, r4
 800bb38:	f04f 0c01 	mov.w	ip, #1
 800bb3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb40:	e7e8      	b.n	800bb14 <_strtol_l.constprop.0+0x6c>
 800bb42:	2c2b      	cmp	r4, #43	; 0x2b
 800bb44:	bf04      	itt	eq
 800bb46:	782c      	ldrbeq	r4, [r5, #0]
 800bb48:	1cb5      	addeq	r5, r6, #2
 800bb4a:	e7ca      	b.n	800bae2 <_strtol_l.constprop.0+0x3a>
 800bb4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bb50:	f1be 0f19 	cmp.w	lr, #25
 800bb54:	d801      	bhi.n	800bb5a <_strtol_l.constprop.0+0xb2>
 800bb56:	3c37      	subs	r4, #55	; 0x37
 800bb58:	e7e2      	b.n	800bb20 <_strtol_l.constprop.0+0x78>
 800bb5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bb5e:	f1be 0f19 	cmp.w	lr, #25
 800bb62:	d804      	bhi.n	800bb6e <_strtol_l.constprop.0+0xc6>
 800bb64:	3c57      	subs	r4, #87	; 0x57
 800bb66:	e7db      	b.n	800bb20 <_strtol_l.constprop.0+0x78>
 800bb68:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800bb6c:	e7e6      	b.n	800bb3c <_strtol_l.constprop.0+0x94>
 800bb6e:	f1bc 0f00 	cmp.w	ip, #0
 800bb72:	da05      	bge.n	800bb80 <_strtol_l.constprop.0+0xd8>
 800bb74:	2322      	movs	r3, #34	; 0x22
 800bb76:	6003      	str	r3, [r0, #0]
 800bb78:	4646      	mov	r6, r8
 800bb7a:	b942      	cbnz	r2, 800bb8e <_strtol_l.constprop.0+0xe6>
 800bb7c:	4630      	mov	r0, r6
 800bb7e:	e79e      	b.n	800babe <_strtol_l.constprop.0+0x16>
 800bb80:	b107      	cbz	r7, 800bb84 <_strtol_l.constprop.0+0xdc>
 800bb82:	4276      	negs	r6, r6
 800bb84:	2a00      	cmp	r2, #0
 800bb86:	d0f9      	beq.n	800bb7c <_strtol_l.constprop.0+0xd4>
 800bb88:	f1bc 0f00 	cmp.w	ip, #0
 800bb8c:	d000      	beq.n	800bb90 <_strtol_l.constprop.0+0xe8>
 800bb8e:	1e69      	subs	r1, r5, #1
 800bb90:	6011      	str	r1, [r2, #0]
 800bb92:	e7f3      	b.n	800bb7c <_strtol_l.constprop.0+0xd4>
 800bb94:	2430      	movs	r4, #48	; 0x30
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d1b1      	bne.n	800bafe <_strtol_l.constprop.0+0x56>
 800bb9a:	2308      	movs	r3, #8
 800bb9c:	e7af      	b.n	800bafe <_strtol_l.constprop.0+0x56>
 800bb9e:	2c30      	cmp	r4, #48	; 0x30
 800bba0:	d0a5      	beq.n	800baee <_strtol_l.constprop.0+0x46>
 800bba2:	230a      	movs	r3, #10
 800bba4:	e7ab      	b.n	800bafe <_strtol_l.constprop.0+0x56>
 800bba6:	bf00      	nop
 800bba8:	0800f1ab 	.word	0x0800f1ab

0800bbac <strtol>:
 800bbac:	4613      	mov	r3, r2
 800bbae:	460a      	mov	r2, r1
 800bbb0:	4601      	mov	r1, r0
 800bbb2:	4802      	ldr	r0, [pc, #8]	; (800bbbc <strtol+0x10>)
 800bbb4:	6800      	ldr	r0, [r0, #0]
 800bbb6:	f7ff bf77 	b.w	800baa8 <_strtol_l.constprop.0>
 800bbba:	bf00      	nop
 800bbbc:	20000158 	.word	0x20000158

0800bbc0 <sbrk>:
 800bbc0:	4b02      	ldr	r3, [pc, #8]	; (800bbcc <sbrk+0xc>)
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	6818      	ldr	r0, [r3, #0]
 800bbc6:	f7ff bf05 	b.w	800b9d4 <_sbrk_r>
 800bbca:	bf00      	nop
 800bbcc:	20000158 	.word	0x20000158

0800bbd0 <_vasiprintf_r>:
 800bbd0:	b530      	push	{r4, r5, lr}
 800bbd2:	460d      	mov	r5, r1
 800bbd4:	4909      	ldr	r1, [pc, #36]	; (800bbfc <_vasiprintf_r+0x2c>)
 800bbd6:	b09b      	sub	sp, #108	; 0x6c
 800bbd8:	2400      	movs	r4, #0
 800bbda:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800bbde:	4669      	mov	r1, sp
 800bbe0:	9400      	str	r4, [sp, #0]
 800bbe2:	9402      	str	r4, [sp, #8]
 800bbe4:	9405      	str	r4, [sp, #20]
 800bbe6:	f7ff f98b 	bl	800af00 <_svfiprintf_r>
 800bbea:	2800      	cmp	r0, #0
 800bbec:	bfa1      	itttt	ge
 800bbee:	9b00      	ldrge	r3, [sp, #0]
 800bbf0:	701c      	strbge	r4, [r3, #0]
 800bbf2:	9b04      	ldrge	r3, [sp, #16]
 800bbf4:	602b      	strge	r3, [r5, #0]
 800bbf6:	b01b      	add	sp, #108	; 0x6c
 800bbf8:	bd30      	pop	{r4, r5, pc}
 800bbfa:	bf00      	nop
 800bbfc:	ffff0288 	.word	0xffff0288

0800bc00 <vasiprintf>:
 800bc00:	4613      	mov	r3, r2
 800bc02:	460a      	mov	r2, r1
 800bc04:	4601      	mov	r1, r0
 800bc06:	4802      	ldr	r0, [pc, #8]	; (800bc10 <vasiprintf+0x10>)
 800bc08:	6800      	ldr	r0, [r0, #0]
 800bc0a:	f7ff bfe1 	b.w	800bbd0 <_vasiprintf_r>
 800bc0e:	bf00      	nop
 800bc10:	20000158 	.word	0x20000158

0800bc14 <__assert_func>:
 800bc14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc16:	4614      	mov	r4, r2
 800bc18:	461a      	mov	r2, r3
 800bc1a:	4b09      	ldr	r3, [pc, #36]	; (800bc40 <__assert_func+0x2c>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	4605      	mov	r5, r0
 800bc20:	68d8      	ldr	r0, [r3, #12]
 800bc22:	b14c      	cbz	r4, 800bc38 <__assert_func+0x24>
 800bc24:	4b07      	ldr	r3, [pc, #28]	; (800bc44 <__assert_func+0x30>)
 800bc26:	9100      	str	r1, [sp, #0]
 800bc28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc2c:	4906      	ldr	r1, [pc, #24]	; (800bc48 <__assert_func+0x34>)
 800bc2e:	462b      	mov	r3, r5
 800bc30:	f000 ff64 	bl	800cafc <fiprintf>
 800bc34:	f7fe ff3c 	bl	800aab0 <abort>
 800bc38:	4b04      	ldr	r3, [pc, #16]	; (800bc4c <__assert_func+0x38>)
 800bc3a:	461c      	mov	r4, r3
 800bc3c:	e7f3      	b.n	800bc26 <__assert_func+0x12>
 800bc3e:	bf00      	nop
 800bc40:	20000158 	.word	0x20000158
 800bc44:	0800f2f5 	.word	0x0800f2f5
 800bc48:	0800f302 	.word	0x0800f302
 800bc4c:	0800f330 	.word	0x0800f330

0800bc50 <quorem>:
 800bc50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc54:	6903      	ldr	r3, [r0, #16]
 800bc56:	690c      	ldr	r4, [r1, #16]
 800bc58:	42a3      	cmp	r3, r4
 800bc5a:	4607      	mov	r7, r0
 800bc5c:	f2c0 8081 	blt.w	800bd62 <quorem+0x112>
 800bc60:	3c01      	subs	r4, #1
 800bc62:	f101 0814 	add.w	r8, r1, #20
 800bc66:	f100 0514 	add.w	r5, r0, #20
 800bc6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc6e:	9301      	str	r3, [sp, #4]
 800bc70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc78:	3301      	adds	r3, #1
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc84:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc88:	d331      	bcc.n	800bcee <quorem+0x9e>
 800bc8a:	f04f 0e00 	mov.w	lr, #0
 800bc8e:	4640      	mov	r0, r8
 800bc90:	46ac      	mov	ip, r5
 800bc92:	46f2      	mov	sl, lr
 800bc94:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc98:	b293      	uxth	r3, r2
 800bc9a:	fb06 e303 	mla	r3, r6, r3, lr
 800bc9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	ebaa 0303 	sub.w	r3, sl, r3
 800bca8:	f8dc a000 	ldr.w	sl, [ip]
 800bcac:	0c12      	lsrs	r2, r2, #16
 800bcae:	fa13 f38a 	uxtah	r3, r3, sl
 800bcb2:	fb06 e202 	mla	r2, r6, r2, lr
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	9b00      	ldr	r3, [sp, #0]
 800bcba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bcbe:	b292      	uxth	r2, r2
 800bcc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bcc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcc8:	f8bd 3000 	ldrh.w	r3, [sp]
 800bccc:	4581      	cmp	r9, r0
 800bcce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd2:	f84c 3b04 	str.w	r3, [ip], #4
 800bcd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bcda:	d2db      	bcs.n	800bc94 <quorem+0x44>
 800bcdc:	f855 300b 	ldr.w	r3, [r5, fp]
 800bce0:	b92b      	cbnz	r3, 800bcee <quorem+0x9e>
 800bce2:	9b01      	ldr	r3, [sp, #4]
 800bce4:	3b04      	subs	r3, #4
 800bce6:	429d      	cmp	r5, r3
 800bce8:	461a      	mov	r2, r3
 800bcea:	d32e      	bcc.n	800bd4a <quorem+0xfa>
 800bcec:	613c      	str	r4, [r7, #16]
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f001 f9cc 	bl	800d08c <__mcmp>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	db24      	blt.n	800bd42 <quorem+0xf2>
 800bcf8:	3601      	adds	r6, #1
 800bcfa:	4628      	mov	r0, r5
 800bcfc:	f04f 0c00 	mov.w	ip, #0
 800bd00:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd04:	f8d0 e000 	ldr.w	lr, [r0]
 800bd08:	b293      	uxth	r3, r2
 800bd0a:	ebac 0303 	sub.w	r3, ip, r3
 800bd0e:	0c12      	lsrs	r2, r2, #16
 800bd10:	fa13 f38e 	uxtah	r3, r3, lr
 800bd14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd22:	45c1      	cmp	r9, r8
 800bd24:	f840 3b04 	str.w	r3, [r0], #4
 800bd28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd2c:	d2e8      	bcs.n	800bd00 <quorem+0xb0>
 800bd2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd36:	b922      	cbnz	r2, 800bd42 <quorem+0xf2>
 800bd38:	3b04      	subs	r3, #4
 800bd3a:	429d      	cmp	r5, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	d30a      	bcc.n	800bd56 <quorem+0x106>
 800bd40:	613c      	str	r4, [r7, #16]
 800bd42:	4630      	mov	r0, r6
 800bd44:	b003      	add	sp, #12
 800bd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4a:	6812      	ldr	r2, [r2, #0]
 800bd4c:	3b04      	subs	r3, #4
 800bd4e:	2a00      	cmp	r2, #0
 800bd50:	d1cc      	bne.n	800bcec <quorem+0x9c>
 800bd52:	3c01      	subs	r4, #1
 800bd54:	e7c7      	b.n	800bce6 <quorem+0x96>
 800bd56:	6812      	ldr	r2, [r2, #0]
 800bd58:	3b04      	subs	r3, #4
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	d1f0      	bne.n	800bd40 <quorem+0xf0>
 800bd5e:	3c01      	subs	r4, #1
 800bd60:	e7eb      	b.n	800bd3a <quorem+0xea>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e7ee      	b.n	800bd44 <quorem+0xf4>
	...

0800bd68 <_dtoa_r>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	ed2d 8b04 	vpush	{d8-d9}
 800bd70:	ec57 6b10 	vmov	r6, r7, d0
 800bd74:	b093      	sub	sp, #76	; 0x4c
 800bd76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd7c:	9106      	str	r1, [sp, #24]
 800bd7e:	ee10 aa10 	vmov	sl, s0
 800bd82:	4604      	mov	r4, r0
 800bd84:	9209      	str	r2, [sp, #36]	; 0x24
 800bd86:	930c      	str	r3, [sp, #48]	; 0x30
 800bd88:	46bb      	mov	fp, r7
 800bd8a:	b975      	cbnz	r5, 800bdaa <_dtoa_r+0x42>
 800bd8c:	2010      	movs	r0, #16
 800bd8e:	f7fe fee7 	bl	800ab60 <malloc>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6260      	str	r0, [r4, #36]	; 0x24
 800bd96:	b920      	cbnz	r0, 800bda2 <_dtoa_r+0x3a>
 800bd98:	4ba7      	ldr	r3, [pc, #668]	; (800c038 <_dtoa_r+0x2d0>)
 800bd9a:	21ea      	movs	r1, #234	; 0xea
 800bd9c:	48a7      	ldr	r0, [pc, #668]	; (800c03c <_dtoa_r+0x2d4>)
 800bd9e:	f7ff ff39 	bl	800bc14 <__assert_func>
 800bda2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bda6:	6005      	str	r5, [r0, #0]
 800bda8:	60c5      	str	r5, [r0, #12]
 800bdaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdac:	6819      	ldr	r1, [r3, #0]
 800bdae:	b151      	cbz	r1, 800bdc6 <_dtoa_r+0x5e>
 800bdb0:	685a      	ldr	r2, [r3, #4]
 800bdb2:	604a      	str	r2, [r1, #4]
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	4093      	lsls	r3, r2
 800bdb8:	608b      	str	r3, [r1, #8]
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f000 ff24 	bl	800cc08 <_Bfree>
 800bdc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	1e3b      	subs	r3, r7, #0
 800bdc8:	bfaa      	itet	ge
 800bdca:	2300      	movge	r3, #0
 800bdcc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bdd0:	f8c8 3000 	strge.w	r3, [r8]
 800bdd4:	4b9a      	ldr	r3, [pc, #616]	; (800c040 <_dtoa_r+0x2d8>)
 800bdd6:	bfbc      	itt	lt
 800bdd8:	2201      	movlt	r2, #1
 800bdda:	f8c8 2000 	strlt.w	r2, [r8]
 800bdde:	ea33 030b 	bics.w	r3, r3, fp
 800bde2:	d11b      	bne.n	800be1c <_dtoa_r+0xb4>
 800bde4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bde6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdea:	6013      	str	r3, [r2, #0]
 800bdec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdf0:	4333      	orrs	r3, r6
 800bdf2:	f000 8592 	beq.w	800c91a <_dtoa_r+0xbb2>
 800bdf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdf8:	b963      	cbnz	r3, 800be14 <_dtoa_r+0xac>
 800bdfa:	4b92      	ldr	r3, [pc, #584]	; (800c044 <_dtoa_r+0x2dc>)
 800bdfc:	e022      	b.n	800be44 <_dtoa_r+0xdc>
 800bdfe:	4b92      	ldr	r3, [pc, #584]	; (800c048 <_dtoa_r+0x2e0>)
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	3308      	adds	r3, #8
 800be04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be06:	6013      	str	r3, [r2, #0]
 800be08:	9801      	ldr	r0, [sp, #4]
 800be0a:	b013      	add	sp, #76	; 0x4c
 800be0c:	ecbd 8b04 	vpop	{d8-d9}
 800be10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be14:	4b8b      	ldr	r3, [pc, #556]	; (800c044 <_dtoa_r+0x2dc>)
 800be16:	9301      	str	r3, [sp, #4]
 800be18:	3303      	adds	r3, #3
 800be1a:	e7f3      	b.n	800be04 <_dtoa_r+0x9c>
 800be1c:	2200      	movs	r2, #0
 800be1e:	2300      	movs	r3, #0
 800be20:	4650      	mov	r0, sl
 800be22:	4659      	mov	r1, fp
 800be24:	f7f4 fe70 	bl	8000b08 <__aeabi_dcmpeq>
 800be28:	ec4b ab19 	vmov	d9, sl, fp
 800be2c:	4680      	mov	r8, r0
 800be2e:	b158      	cbz	r0, 800be48 <_dtoa_r+0xe0>
 800be30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be32:	2301      	movs	r3, #1
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be38:	2b00      	cmp	r3, #0
 800be3a:	f000 856b 	beq.w	800c914 <_dtoa_r+0xbac>
 800be3e:	4883      	ldr	r0, [pc, #524]	; (800c04c <_dtoa_r+0x2e4>)
 800be40:	6018      	str	r0, [r3, #0]
 800be42:	1e43      	subs	r3, r0, #1
 800be44:	9301      	str	r3, [sp, #4]
 800be46:	e7df      	b.n	800be08 <_dtoa_r+0xa0>
 800be48:	ec4b ab10 	vmov	d0, sl, fp
 800be4c:	aa10      	add	r2, sp, #64	; 0x40
 800be4e:	a911      	add	r1, sp, #68	; 0x44
 800be50:	4620      	mov	r0, r4
 800be52:	f001 f9c1 	bl	800d1d8 <__d2b>
 800be56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800be5a:	ee08 0a10 	vmov	s16, r0
 800be5e:	2d00      	cmp	r5, #0
 800be60:	f000 8084 	beq.w	800bf6c <_dtoa_r+0x204>
 800be64:	ee19 3a90 	vmov	r3, s19
 800be68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800be70:	4656      	mov	r6, sl
 800be72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800be76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800be7e:	4b74      	ldr	r3, [pc, #464]	; (800c050 <_dtoa_r+0x2e8>)
 800be80:	2200      	movs	r2, #0
 800be82:	4630      	mov	r0, r6
 800be84:	4639      	mov	r1, r7
 800be86:	f7f4 fa1f 	bl	80002c8 <__aeabi_dsub>
 800be8a:	a365      	add	r3, pc, #404	; (adr r3, 800c020 <_dtoa_r+0x2b8>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	f7f4 fbd2 	bl	8000638 <__aeabi_dmul>
 800be94:	a364      	add	r3, pc, #400	; (adr r3, 800c028 <_dtoa_r+0x2c0>)
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 fa17 	bl	80002cc <__adddf3>
 800be9e:	4606      	mov	r6, r0
 800bea0:	4628      	mov	r0, r5
 800bea2:	460f      	mov	r7, r1
 800bea4:	f7f4 fb5e 	bl	8000564 <__aeabi_i2d>
 800bea8:	a361      	add	r3, pc, #388	; (adr r3, 800c030 <_dtoa_r+0x2c8>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	f7f4 fbc3 	bl	8000638 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	4630      	mov	r0, r6
 800beb8:	4639      	mov	r1, r7
 800beba:	f7f4 fa07 	bl	80002cc <__adddf3>
 800bebe:	4606      	mov	r6, r0
 800bec0:	460f      	mov	r7, r1
 800bec2:	f7f4 fe69 	bl	8000b98 <__aeabi_d2iz>
 800bec6:	2200      	movs	r2, #0
 800bec8:	9000      	str	r0, [sp, #0]
 800beca:	2300      	movs	r3, #0
 800becc:	4630      	mov	r0, r6
 800bece:	4639      	mov	r1, r7
 800bed0:	f7f4 fe24 	bl	8000b1c <__aeabi_dcmplt>
 800bed4:	b150      	cbz	r0, 800beec <_dtoa_r+0x184>
 800bed6:	9800      	ldr	r0, [sp, #0]
 800bed8:	f7f4 fb44 	bl	8000564 <__aeabi_i2d>
 800bedc:	4632      	mov	r2, r6
 800bede:	463b      	mov	r3, r7
 800bee0:	f7f4 fe12 	bl	8000b08 <__aeabi_dcmpeq>
 800bee4:	b910      	cbnz	r0, 800beec <_dtoa_r+0x184>
 800bee6:	9b00      	ldr	r3, [sp, #0]
 800bee8:	3b01      	subs	r3, #1
 800beea:	9300      	str	r3, [sp, #0]
 800beec:	9b00      	ldr	r3, [sp, #0]
 800beee:	2b16      	cmp	r3, #22
 800bef0:	d85a      	bhi.n	800bfa8 <_dtoa_r+0x240>
 800bef2:	9a00      	ldr	r2, [sp, #0]
 800bef4:	4b57      	ldr	r3, [pc, #348]	; (800c054 <_dtoa_r+0x2ec>)
 800bef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	ec51 0b19 	vmov	r0, r1, d9
 800bf02:	f7f4 fe0b 	bl	8000b1c <__aeabi_dcmplt>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d050      	beq.n	800bfac <_dtoa_r+0x244>
 800bf0a:	9b00      	ldr	r3, [sp, #0]
 800bf0c:	3b01      	subs	r3, #1
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	2300      	movs	r3, #0
 800bf12:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf16:	1b5d      	subs	r5, r3, r5
 800bf18:	1e6b      	subs	r3, r5, #1
 800bf1a:	9305      	str	r3, [sp, #20]
 800bf1c:	bf45      	ittet	mi
 800bf1e:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf22:	9304      	strmi	r3, [sp, #16]
 800bf24:	2300      	movpl	r3, #0
 800bf26:	2300      	movmi	r3, #0
 800bf28:	bf4c      	ite	mi
 800bf2a:	9305      	strmi	r3, [sp, #20]
 800bf2c:	9304      	strpl	r3, [sp, #16]
 800bf2e:	9b00      	ldr	r3, [sp, #0]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	db3d      	blt.n	800bfb0 <_dtoa_r+0x248>
 800bf34:	9b05      	ldr	r3, [sp, #20]
 800bf36:	9a00      	ldr	r2, [sp, #0]
 800bf38:	920a      	str	r2, [sp, #40]	; 0x28
 800bf3a:	4413      	add	r3, r2
 800bf3c:	9305      	str	r3, [sp, #20]
 800bf3e:	2300      	movs	r3, #0
 800bf40:	9307      	str	r3, [sp, #28]
 800bf42:	9b06      	ldr	r3, [sp, #24]
 800bf44:	2b09      	cmp	r3, #9
 800bf46:	f200 8089 	bhi.w	800c05c <_dtoa_r+0x2f4>
 800bf4a:	2b05      	cmp	r3, #5
 800bf4c:	bfc4      	itt	gt
 800bf4e:	3b04      	subgt	r3, #4
 800bf50:	9306      	strgt	r3, [sp, #24]
 800bf52:	9b06      	ldr	r3, [sp, #24]
 800bf54:	f1a3 0302 	sub.w	r3, r3, #2
 800bf58:	bfcc      	ite	gt
 800bf5a:	2500      	movgt	r5, #0
 800bf5c:	2501      	movle	r5, #1
 800bf5e:	2b03      	cmp	r3, #3
 800bf60:	f200 8087 	bhi.w	800c072 <_dtoa_r+0x30a>
 800bf64:	e8df f003 	tbb	[pc, r3]
 800bf68:	59383a2d 	.word	0x59383a2d
 800bf6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf70:	441d      	add	r5, r3
 800bf72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf76:	2b20      	cmp	r3, #32
 800bf78:	bfc1      	itttt	gt
 800bf7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bf82:	fa0b f303 	lslgt.w	r3, fp, r3
 800bf86:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bf8a:	bfda      	itte	le
 800bf8c:	f1c3 0320 	rsble	r3, r3, #32
 800bf90:	fa06 f003 	lslle.w	r0, r6, r3
 800bf94:	4318      	orrgt	r0, r3
 800bf96:	f7f4 fad5 	bl	8000544 <__aeabi_ui2d>
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bfa2:	3d01      	subs	r5, #1
 800bfa4:	930e      	str	r3, [sp, #56]	; 0x38
 800bfa6:	e76a      	b.n	800be7e <_dtoa_r+0x116>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	e7b2      	b.n	800bf12 <_dtoa_r+0x1aa>
 800bfac:	900b      	str	r0, [sp, #44]	; 0x2c
 800bfae:	e7b1      	b.n	800bf14 <_dtoa_r+0x1ac>
 800bfb0:	9b04      	ldr	r3, [sp, #16]
 800bfb2:	9a00      	ldr	r2, [sp, #0]
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	9304      	str	r3, [sp, #16]
 800bfb8:	4253      	negs	r3, r2
 800bfba:	9307      	str	r3, [sp, #28]
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	930a      	str	r3, [sp, #40]	; 0x28
 800bfc0:	e7bf      	b.n	800bf42 <_dtoa_r+0x1da>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	9308      	str	r3, [sp, #32]
 800bfc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc55      	bgt.n	800c078 <_dtoa_r+0x310>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	9209      	str	r2, [sp, #36]	; 0x24
 800bfd6:	e00c      	b.n	800bff2 <_dtoa_r+0x28a>
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e7f3      	b.n	800bfc4 <_dtoa_r+0x25c>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfe0:	9308      	str	r3, [sp, #32]
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	9302      	str	r3, [sp, #8]
 800bfe8:	3301      	adds	r3, #1
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	9303      	str	r3, [sp, #12]
 800bfee:	bfb8      	it	lt
 800bff0:	2301      	movlt	r3, #1
 800bff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bff4:	2200      	movs	r2, #0
 800bff6:	6042      	str	r2, [r0, #4]
 800bff8:	2204      	movs	r2, #4
 800bffa:	f102 0614 	add.w	r6, r2, #20
 800bffe:	429e      	cmp	r6, r3
 800c000:	6841      	ldr	r1, [r0, #4]
 800c002:	d93d      	bls.n	800c080 <_dtoa_r+0x318>
 800c004:	4620      	mov	r0, r4
 800c006:	f000 fdbf 	bl	800cb88 <_Balloc>
 800c00a:	9001      	str	r0, [sp, #4]
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d13b      	bne.n	800c088 <_dtoa_r+0x320>
 800c010:	4b11      	ldr	r3, [pc, #68]	; (800c058 <_dtoa_r+0x2f0>)
 800c012:	4602      	mov	r2, r0
 800c014:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c018:	e6c0      	b.n	800bd9c <_dtoa_r+0x34>
 800c01a:	2301      	movs	r3, #1
 800c01c:	e7df      	b.n	800bfde <_dtoa_r+0x276>
 800c01e:	bf00      	nop
 800c020:	636f4361 	.word	0x636f4361
 800c024:	3fd287a7 	.word	0x3fd287a7
 800c028:	8b60c8b3 	.word	0x8b60c8b3
 800c02c:	3fc68a28 	.word	0x3fc68a28
 800c030:	509f79fb 	.word	0x509f79fb
 800c034:	3fd34413 	.word	0x3fd34413
 800c038:	0800f33e 	.word	0x0800f33e
 800c03c:	0800f355 	.word	0x0800f355
 800c040:	7ff00000 	.word	0x7ff00000
 800c044:	0800f33a 	.word	0x0800f33a
 800c048:	0800f331 	.word	0x0800f331
 800c04c:	0800f2d2 	.word	0x0800f2d2
 800c050:	3ff80000 	.word	0x3ff80000
 800c054:	0800f4a8 	.word	0x0800f4a8
 800c058:	0800f3b0 	.word	0x0800f3b0
 800c05c:	2501      	movs	r5, #1
 800c05e:	2300      	movs	r3, #0
 800c060:	9306      	str	r3, [sp, #24]
 800c062:	9508      	str	r5, [sp, #32]
 800c064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c068:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c06c:	2200      	movs	r2, #0
 800c06e:	2312      	movs	r3, #18
 800c070:	e7b0      	b.n	800bfd4 <_dtoa_r+0x26c>
 800c072:	2301      	movs	r3, #1
 800c074:	9308      	str	r3, [sp, #32]
 800c076:	e7f5      	b.n	800c064 <_dtoa_r+0x2fc>
 800c078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c07e:	e7b8      	b.n	800bff2 <_dtoa_r+0x28a>
 800c080:	3101      	adds	r1, #1
 800c082:	6041      	str	r1, [r0, #4]
 800c084:	0052      	lsls	r2, r2, #1
 800c086:	e7b8      	b.n	800bffa <_dtoa_r+0x292>
 800c088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c08a:	9a01      	ldr	r2, [sp, #4]
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	9b03      	ldr	r3, [sp, #12]
 800c090:	2b0e      	cmp	r3, #14
 800c092:	f200 809d 	bhi.w	800c1d0 <_dtoa_r+0x468>
 800c096:	2d00      	cmp	r5, #0
 800c098:	f000 809a 	beq.w	800c1d0 <_dtoa_r+0x468>
 800c09c:	9b00      	ldr	r3, [sp, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	dd32      	ble.n	800c108 <_dtoa_r+0x3a0>
 800c0a2:	4ab7      	ldr	r2, [pc, #732]	; (800c380 <_dtoa_r+0x618>)
 800c0a4:	f003 030f 	and.w	r3, r3, #15
 800c0a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c0ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0b0:	9b00      	ldr	r3, [sp, #0]
 800c0b2:	05d8      	lsls	r0, r3, #23
 800c0b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c0b8:	d516      	bpl.n	800c0e8 <_dtoa_r+0x380>
 800c0ba:	4bb2      	ldr	r3, [pc, #712]	; (800c384 <_dtoa_r+0x61c>)
 800c0bc:	ec51 0b19 	vmov	r0, r1, d9
 800c0c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0c4:	f7f4 fbe2 	bl	800088c <__aeabi_ddiv>
 800c0c8:	f007 070f 	and.w	r7, r7, #15
 800c0cc:	4682      	mov	sl, r0
 800c0ce:	468b      	mov	fp, r1
 800c0d0:	2503      	movs	r5, #3
 800c0d2:	4eac      	ldr	r6, [pc, #688]	; (800c384 <_dtoa_r+0x61c>)
 800c0d4:	b957      	cbnz	r7, 800c0ec <_dtoa_r+0x384>
 800c0d6:	4642      	mov	r2, r8
 800c0d8:	464b      	mov	r3, r9
 800c0da:	4650      	mov	r0, sl
 800c0dc:	4659      	mov	r1, fp
 800c0de:	f7f4 fbd5 	bl	800088c <__aeabi_ddiv>
 800c0e2:	4682      	mov	sl, r0
 800c0e4:	468b      	mov	fp, r1
 800c0e6:	e028      	b.n	800c13a <_dtoa_r+0x3d2>
 800c0e8:	2502      	movs	r5, #2
 800c0ea:	e7f2      	b.n	800c0d2 <_dtoa_r+0x36a>
 800c0ec:	07f9      	lsls	r1, r7, #31
 800c0ee:	d508      	bpl.n	800c102 <_dtoa_r+0x39a>
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	4649      	mov	r1, r9
 800c0f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0f8:	f7f4 fa9e 	bl	8000638 <__aeabi_dmul>
 800c0fc:	3501      	adds	r5, #1
 800c0fe:	4680      	mov	r8, r0
 800c100:	4689      	mov	r9, r1
 800c102:	107f      	asrs	r7, r7, #1
 800c104:	3608      	adds	r6, #8
 800c106:	e7e5      	b.n	800c0d4 <_dtoa_r+0x36c>
 800c108:	f000 809b 	beq.w	800c242 <_dtoa_r+0x4da>
 800c10c:	9b00      	ldr	r3, [sp, #0]
 800c10e:	4f9d      	ldr	r7, [pc, #628]	; (800c384 <_dtoa_r+0x61c>)
 800c110:	425e      	negs	r6, r3
 800c112:	4b9b      	ldr	r3, [pc, #620]	; (800c380 <_dtoa_r+0x618>)
 800c114:	f006 020f 	and.w	r2, r6, #15
 800c118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c120:	ec51 0b19 	vmov	r0, r1, d9
 800c124:	f7f4 fa88 	bl	8000638 <__aeabi_dmul>
 800c128:	1136      	asrs	r6, r6, #4
 800c12a:	4682      	mov	sl, r0
 800c12c:	468b      	mov	fp, r1
 800c12e:	2300      	movs	r3, #0
 800c130:	2502      	movs	r5, #2
 800c132:	2e00      	cmp	r6, #0
 800c134:	d17a      	bne.n	800c22c <_dtoa_r+0x4c4>
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1d3      	bne.n	800c0e2 <_dtoa_r+0x37a>
 800c13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 8082 	beq.w	800c246 <_dtoa_r+0x4de>
 800c142:	4b91      	ldr	r3, [pc, #580]	; (800c388 <_dtoa_r+0x620>)
 800c144:	2200      	movs	r2, #0
 800c146:	4650      	mov	r0, sl
 800c148:	4659      	mov	r1, fp
 800c14a:	f7f4 fce7 	bl	8000b1c <__aeabi_dcmplt>
 800c14e:	2800      	cmp	r0, #0
 800c150:	d079      	beq.n	800c246 <_dtoa_r+0x4de>
 800c152:	9b03      	ldr	r3, [sp, #12]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d076      	beq.n	800c246 <_dtoa_r+0x4de>
 800c158:	9b02      	ldr	r3, [sp, #8]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	dd36      	ble.n	800c1cc <_dtoa_r+0x464>
 800c15e:	9b00      	ldr	r3, [sp, #0]
 800c160:	4650      	mov	r0, sl
 800c162:	4659      	mov	r1, fp
 800c164:	1e5f      	subs	r7, r3, #1
 800c166:	2200      	movs	r2, #0
 800c168:	4b88      	ldr	r3, [pc, #544]	; (800c38c <_dtoa_r+0x624>)
 800c16a:	f7f4 fa65 	bl	8000638 <__aeabi_dmul>
 800c16e:	9e02      	ldr	r6, [sp, #8]
 800c170:	4682      	mov	sl, r0
 800c172:	468b      	mov	fp, r1
 800c174:	3501      	adds	r5, #1
 800c176:	4628      	mov	r0, r5
 800c178:	f7f4 f9f4 	bl	8000564 <__aeabi_i2d>
 800c17c:	4652      	mov	r2, sl
 800c17e:	465b      	mov	r3, fp
 800c180:	f7f4 fa5a 	bl	8000638 <__aeabi_dmul>
 800c184:	4b82      	ldr	r3, [pc, #520]	; (800c390 <_dtoa_r+0x628>)
 800c186:	2200      	movs	r2, #0
 800c188:	f7f4 f8a0 	bl	80002cc <__adddf3>
 800c18c:	46d0      	mov	r8, sl
 800c18e:	46d9      	mov	r9, fp
 800c190:	4682      	mov	sl, r0
 800c192:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c196:	2e00      	cmp	r6, #0
 800c198:	d158      	bne.n	800c24c <_dtoa_r+0x4e4>
 800c19a:	4b7e      	ldr	r3, [pc, #504]	; (800c394 <_dtoa_r+0x62c>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	4640      	mov	r0, r8
 800c1a0:	4649      	mov	r1, r9
 800c1a2:	f7f4 f891 	bl	80002c8 <__aeabi_dsub>
 800c1a6:	4652      	mov	r2, sl
 800c1a8:	465b      	mov	r3, fp
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	4689      	mov	r9, r1
 800c1ae:	f7f4 fcd3 	bl	8000b58 <__aeabi_dcmpgt>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	f040 8295 	bne.w	800c6e2 <_dtoa_r+0x97a>
 800c1b8:	4652      	mov	r2, sl
 800c1ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c1be:	4640      	mov	r0, r8
 800c1c0:	4649      	mov	r1, r9
 800c1c2:	f7f4 fcab 	bl	8000b1c <__aeabi_dcmplt>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	f040 8289 	bne.w	800c6de <_dtoa_r+0x976>
 800c1cc:	ec5b ab19 	vmov	sl, fp, d9
 800c1d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f2c0 8148 	blt.w	800c468 <_dtoa_r+0x700>
 800c1d8:	9a00      	ldr	r2, [sp, #0]
 800c1da:	2a0e      	cmp	r2, #14
 800c1dc:	f300 8144 	bgt.w	800c468 <_dtoa_r+0x700>
 800c1e0:	4b67      	ldr	r3, [pc, #412]	; (800c380 <_dtoa_r+0x618>)
 800c1e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f280 80d5 	bge.w	800c39c <_dtoa_r+0x634>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	f300 80d1 	bgt.w	800c39c <_dtoa_r+0x634>
 800c1fa:	f040 826f 	bne.w	800c6dc <_dtoa_r+0x974>
 800c1fe:	4b65      	ldr	r3, [pc, #404]	; (800c394 <_dtoa_r+0x62c>)
 800c200:	2200      	movs	r2, #0
 800c202:	4640      	mov	r0, r8
 800c204:	4649      	mov	r1, r9
 800c206:	f7f4 fa17 	bl	8000638 <__aeabi_dmul>
 800c20a:	4652      	mov	r2, sl
 800c20c:	465b      	mov	r3, fp
 800c20e:	f7f4 fc99 	bl	8000b44 <__aeabi_dcmpge>
 800c212:	9e03      	ldr	r6, [sp, #12]
 800c214:	4637      	mov	r7, r6
 800c216:	2800      	cmp	r0, #0
 800c218:	f040 8245 	bne.w	800c6a6 <_dtoa_r+0x93e>
 800c21c:	9d01      	ldr	r5, [sp, #4]
 800c21e:	2331      	movs	r3, #49	; 0x31
 800c220:	f805 3b01 	strb.w	r3, [r5], #1
 800c224:	9b00      	ldr	r3, [sp, #0]
 800c226:	3301      	adds	r3, #1
 800c228:	9300      	str	r3, [sp, #0]
 800c22a:	e240      	b.n	800c6ae <_dtoa_r+0x946>
 800c22c:	07f2      	lsls	r2, r6, #31
 800c22e:	d505      	bpl.n	800c23c <_dtoa_r+0x4d4>
 800c230:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c234:	f7f4 fa00 	bl	8000638 <__aeabi_dmul>
 800c238:	3501      	adds	r5, #1
 800c23a:	2301      	movs	r3, #1
 800c23c:	1076      	asrs	r6, r6, #1
 800c23e:	3708      	adds	r7, #8
 800c240:	e777      	b.n	800c132 <_dtoa_r+0x3ca>
 800c242:	2502      	movs	r5, #2
 800c244:	e779      	b.n	800c13a <_dtoa_r+0x3d2>
 800c246:	9f00      	ldr	r7, [sp, #0]
 800c248:	9e03      	ldr	r6, [sp, #12]
 800c24a:	e794      	b.n	800c176 <_dtoa_r+0x40e>
 800c24c:	9901      	ldr	r1, [sp, #4]
 800c24e:	4b4c      	ldr	r3, [pc, #304]	; (800c380 <_dtoa_r+0x618>)
 800c250:	4431      	add	r1, r6
 800c252:	910d      	str	r1, [sp, #52]	; 0x34
 800c254:	9908      	ldr	r1, [sp, #32]
 800c256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c25a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c25e:	2900      	cmp	r1, #0
 800c260:	d043      	beq.n	800c2ea <_dtoa_r+0x582>
 800c262:	494d      	ldr	r1, [pc, #308]	; (800c398 <_dtoa_r+0x630>)
 800c264:	2000      	movs	r0, #0
 800c266:	f7f4 fb11 	bl	800088c <__aeabi_ddiv>
 800c26a:	4652      	mov	r2, sl
 800c26c:	465b      	mov	r3, fp
 800c26e:	f7f4 f82b 	bl	80002c8 <__aeabi_dsub>
 800c272:	9d01      	ldr	r5, [sp, #4]
 800c274:	4682      	mov	sl, r0
 800c276:	468b      	mov	fp, r1
 800c278:	4649      	mov	r1, r9
 800c27a:	4640      	mov	r0, r8
 800c27c:	f7f4 fc8c 	bl	8000b98 <__aeabi_d2iz>
 800c280:	4606      	mov	r6, r0
 800c282:	f7f4 f96f 	bl	8000564 <__aeabi_i2d>
 800c286:	4602      	mov	r2, r0
 800c288:	460b      	mov	r3, r1
 800c28a:	4640      	mov	r0, r8
 800c28c:	4649      	mov	r1, r9
 800c28e:	f7f4 f81b 	bl	80002c8 <__aeabi_dsub>
 800c292:	3630      	adds	r6, #48	; 0x30
 800c294:	f805 6b01 	strb.w	r6, [r5], #1
 800c298:	4652      	mov	r2, sl
 800c29a:	465b      	mov	r3, fp
 800c29c:	4680      	mov	r8, r0
 800c29e:	4689      	mov	r9, r1
 800c2a0:	f7f4 fc3c 	bl	8000b1c <__aeabi_dcmplt>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d163      	bne.n	800c370 <_dtoa_r+0x608>
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	4936      	ldr	r1, [pc, #216]	; (800c388 <_dtoa_r+0x620>)
 800c2ae:	2000      	movs	r0, #0
 800c2b0:	f7f4 f80a 	bl	80002c8 <__aeabi_dsub>
 800c2b4:	4652      	mov	r2, sl
 800c2b6:	465b      	mov	r3, fp
 800c2b8:	f7f4 fc30 	bl	8000b1c <__aeabi_dcmplt>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	f040 80b5 	bne.w	800c42c <_dtoa_r+0x6c4>
 800c2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2c4:	429d      	cmp	r5, r3
 800c2c6:	d081      	beq.n	800c1cc <_dtoa_r+0x464>
 800c2c8:	4b30      	ldr	r3, [pc, #192]	; (800c38c <_dtoa_r+0x624>)
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	4650      	mov	r0, sl
 800c2ce:	4659      	mov	r1, fp
 800c2d0:	f7f4 f9b2 	bl	8000638 <__aeabi_dmul>
 800c2d4:	4b2d      	ldr	r3, [pc, #180]	; (800c38c <_dtoa_r+0x624>)
 800c2d6:	4682      	mov	sl, r0
 800c2d8:	468b      	mov	fp, r1
 800c2da:	4640      	mov	r0, r8
 800c2dc:	4649      	mov	r1, r9
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f7f4 f9aa 	bl	8000638 <__aeabi_dmul>
 800c2e4:	4680      	mov	r8, r0
 800c2e6:	4689      	mov	r9, r1
 800c2e8:	e7c6      	b.n	800c278 <_dtoa_r+0x510>
 800c2ea:	4650      	mov	r0, sl
 800c2ec:	4659      	mov	r1, fp
 800c2ee:	f7f4 f9a3 	bl	8000638 <__aeabi_dmul>
 800c2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2f4:	9d01      	ldr	r5, [sp, #4]
 800c2f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2f8:	4682      	mov	sl, r0
 800c2fa:	468b      	mov	fp, r1
 800c2fc:	4649      	mov	r1, r9
 800c2fe:	4640      	mov	r0, r8
 800c300:	f7f4 fc4a 	bl	8000b98 <__aeabi_d2iz>
 800c304:	4606      	mov	r6, r0
 800c306:	f7f4 f92d 	bl	8000564 <__aeabi_i2d>
 800c30a:	3630      	adds	r6, #48	; 0x30
 800c30c:	4602      	mov	r2, r0
 800c30e:	460b      	mov	r3, r1
 800c310:	4640      	mov	r0, r8
 800c312:	4649      	mov	r1, r9
 800c314:	f7f3 ffd8 	bl	80002c8 <__aeabi_dsub>
 800c318:	f805 6b01 	strb.w	r6, [r5], #1
 800c31c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c31e:	429d      	cmp	r5, r3
 800c320:	4680      	mov	r8, r0
 800c322:	4689      	mov	r9, r1
 800c324:	f04f 0200 	mov.w	r2, #0
 800c328:	d124      	bne.n	800c374 <_dtoa_r+0x60c>
 800c32a:	4b1b      	ldr	r3, [pc, #108]	; (800c398 <_dtoa_r+0x630>)
 800c32c:	4650      	mov	r0, sl
 800c32e:	4659      	mov	r1, fp
 800c330:	f7f3 ffcc 	bl	80002cc <__adddf3>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	4640      	mov	r0, r8
 800c33a:	4649      	mov	r1, r9
 800c33c:	f7f4 fc0c 	bl	8000b58 <__aeabi_dcmpgt>
 800c340:	2800      	cmp	r0, #0
 800c342:	d173      	bne.n	800c42c <_dtoa_r+0x6c4>
 800c344:	4652      	mov	r2, sl
 800c346:	465b      	mov	r3, fp
 800c348:	4913      	ldr	r1, [pc, #76]	; (800c398 <_dtoa_r+0x630>)
 800c34a:	2000      	movs	r0, #0
 800c34c:	f7f3 ffbc 	bl	80002c8 <__aeabi_dsub>
 800c350:	4602      	mov	r2, r0
 800c352:	460b      	mov	r3, r1
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f4 fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800c35c:	2800      	cmp	r0, #0
 800c35e:	f43f af35 	beq.w	800c1cc <_dtoa_r+0x464>
 800c362:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c364:	1e6b      	subs	r3, r5, #1
 800c366:	930f      	str	r3, [sp, #60]	; 0x3c
 800c368:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c36c:	2b30      	cmp	r3, #48	; 0x30
 800c36e:	d0f8      	beq.n	800c362 <_dtoa_r+0x5fa>
 800c370:	9700      	str	r7, [sp, #0]
 800c372:	e049      	b.n	800c408 <_dtoa_r+0x6a0>
 800c374:	4b05      	ldr	r3, [pc, #20]	; (800c38c <_dtoa_r+0x624>)
 800c376:	f7f4 f95f 	bl	8000638 <__aeabi_dmul>
 800c37a:	4680      	mov	r8, r0
 800c37c:	4689      	mov	r9, r1
 800c37e:	e7bd      	b.n	800c2fc <_dtoa_r+0x594>
 800c380:	0800f4a8 	.word	0x0800f4a8
 800c384:	0800f480 	.word	0x0800f480
 800c388:	3ff00000 	.word	0x3ff00000
 800c38c:	40240000 	.word	0x40240000
 800c390:	401c0000 	.word	0x401c0000
 800c394:	40140000 	.word	0x40140000
 800c398:	3fe00000 	.word	0x3fe00000
 800c39c:	9d01      	ldr	r5, [sp, #4]
 800c39e:	4656      	mov	r6, sl
 800c3a0:	465f      	mov	r7, fp
 800c3a2:	4642      	mov	r2, r8
 800c3a4:	464b      	mov	r3, r9
 800c3a6:	4630      	mov	r0, r6
 800c3a8:	4639      	mov	r1, r7
 800c3aa:	f7f4 fa6f 	bl	800088c <__aeabi_ddiv>
 800c3ae:	f7f4 fbf3 	bl	8000b98 <__aeabi_d2iz>
 800c3b2:	4682      	mov	sl, r0
 800c3b4:	f7f4 f8d6 	bl	8000564 <__aeabi_i2d>
 800c3b8:	4642      	mov	r2, r8
 800c3ba:	464b      	mov	r3, r9
 800c3bc:	f7f4 f93c 	bl	8000638 <__aeabi_dmul>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	4639      	mov	r1, r7
 800c3c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c3cc:	f7f3 ff7c 	bl	80002c8 <__aeabi_dsub>
 800c3d0:	f805 6b01 	strb.w	r6, [r5], #1
 800c3d4:	9e01      	ldr	r6, [sp, #4]
 800c3d6:	9f03      	ldr	r7, [sp, #12]
 800c3d8:	1bae      	subs	r6, r5, r6
 800c3da:	42b7      	cmp	r7, r6
 800c3dc:	4602      	mov	r2, r0
 800c3de:	460b      	mov	r3, r1
 800c3e0:	d135      	bne.n	800c44e <_dtoa_r+0x6e6>
 800c3e2:	f7f3 ff73 	bl	80002cc <__adddf3>
 800c3e6:	4642      	mov	r2, r8
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	f7f4 fbb3 	bl	8000b58 <__aeabi_dcmpgt>
 800c3f2:	b9d0      	cbnz	r0, 800c42a <_dtoa_r+0x6c2>
 800c3f4:	4642      	mov	r2, r8
 800c3f6:	464b      	mov	r3, r9
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f4 fb84 	bl	8000b08 <__aeabi_dcmpeq>
 800c400:	b110      	cbz	r0, 800c408 <_dtoa_r+0x6a0>
 800c402:	f01a 0f01 	tst.w	sl, #1
 800c406:	d110      	bne.n	800c42a <_dtoa_r+0x6c2>
 800c408:	4620      	mov	r0, r4
 800c40a:	ee18 1a10 	vmov	r1, s16
 800c40e:	f000 fbfb 	bl	800cc08 <_Bfree>
 800c412:	2300      	movs	r3, #0
 800c414:	9800      	ldr	r0, [sp, #0]
 800c416:	702b      	strb	r3, [r5, #0]
 800c418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c41a:	3001      	adds	r0, #1
 800c41c:	6018      	str	r0, [r3, #0]
 800c41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c420:	2b00      	cmp	r3, #0
 800c422:	f43f acf1 	beq.w	800be08 <_dtoa_r+0xa0>
 800c426:	601d      	str	r5, [r3, #0]
 800c428:	e4ee      	b.n	800be08 <_dtoa_r+0xa0>
 800c42a:	9f00      	ldr	r7, [sp, #0]
 800c42c:	462b      	mov	r3, r5
 800c42e:	461d      	mov	r5, r3
 800c430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c434:	2a39      	cmp	r2, #57	; 0x39
 800c436:	d106      	bne.n	800c446 <_dtoa_r+0x6de>
 800c438:	9a01      	ldr	r2, [sp, #4]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d1f7      	bne.n	800c42e <_dtoa_r+0x6c6>
 800c43e:	9901      	ldr	r1, [sp, #4]
 800c440:	2230      	movs	r2, #48	; 0x30
 800c442:	3701      	adds	r7, #1
 800c444:	700a      	strb	r2, [r1, #0]
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	3201      	adds	r2, #1
 800c44a:	701a      	strb	r2, [r3, #0]
 800c44c:	e790      	b.n	800c370 <_dtoa_r+0x608>
 800c44e:	4ba6      	ldr	r3, [pc, #664]	; (800c6e8 <_dtoa_r+0x980>)
 800c450:	2200      	movs	r2, #0
 800c452:	f7f4 f8f1 	bl	8000638 <__aeabi_dmul>
 800c456:	2200      	movs	r2, #0
 800c458:	2300      	movs	r3, #0
 800c45a:	4606      	mov	r6, r0
 800c45c:	460f      	mov	r7, r1
 800c45e:	f7f4 fb53 	bl	8000b08 <__aeabi_dcmpeq>
 800c462:	2800      	cmp	r0, #0
 800c464:	d09d      	beq.n	800c3a2 <_dtoa_r+0x63a>
 800c466:	e7cf      	b.n	800c408 <_dtoa_r+0x6a0>
 800c468:	9a08      	ldr	r2, [sp, #32]
 800c46a:	2a00      	cmp	r2, #0
 800c46c:	f000 80d7 	beq.w	800c61e <_dtoa_r+0x8b6>
 800c470:	9a06      	ldr	r2, [sp, #24]
 800c472:	2a01      	cmp	r2, #1
 800c474:	f300 80ba 	bgt.w	800c5ec <_dtoa_r+0x884>
 800c478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c47a:	2a00      	cmp	r2, #0
 800c47c:	f000 80b2 	beq.w	800c5e4 <_dtoa_r+0x87c>
 800c480:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c484:	9e07      	ldr	r6, [sp, #28]
 800c486:	9d04      	ldr	r5, [sp, #16]
 800c488:	9a04      	ldr	r2, [sp, #16]
 800c48a:	441a      	add	r2, r3
 800c48c:	9204      	str	r2, [sp, #16]
 800c48e:	9a05      	ldr	r2, [sp, #20]
 800c490:	2101      	movs	r1, #1
 800c492:	441a      	add	r2, r3
 800c494:	4620      	mov	r0, r4
 800c496:	9205      	str	r2, [sp, #20]
 800c498:	f000 fc6e 	bl	800cd78 <__i2b>
 800c49c:	4607      	mov	r7, r0
 800c49e:	2d00      	cmp	r5, #0
 800c4a0:	dd0c      	ble.n	800c4bc <_dtoa_r+0x754>
 800c4a2:	9b05      	ldr	r3, [sp, #20]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	dd09      	ble.n	800c4bc <_dtoa_r+0x754>
 800c4a8:	42ab      	cmp	r3, r5
 800c4aa:	9a04      	ldr	r2, [sp, #16]
 800c4ac:	bfa8      	it	ge
 800c4ae:	462b      	movge	r3, r5
 800c4b0:	1ad2      	subs	r2, r2, r3
 800c4b2:	9204      	str	r2, [sp, #16]
 800c4b4:	9a05      	ldr	r2, [sp, #20]
 800c4b6:	1aed      	subs	r5, r5, r3
 800c4b8:	1ad3      	subs	r3, r2, r3
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	9b07      	ldr	r3, [sp, #28]
 800c4be:	b31b      	cbz	r3, 800c508 <_dtoa_r+0x7a0>
 800c4c0:	9b08      	ldr	r3, [sp, #32]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 80af 	beq.w	800c626 <_dtoa_r+0x8be>
 800c4c8:	2e00      	cmp	r6, #0
 800c4ca:	dd13      	ble.n	800c4f4 <_dtoa_r+0x78c>
 800c4cc:	4639      	mov	r1, r7
 800c4ce:	4632      	mov	r2, r6
 800c4d0:	4620      	mov	r0, r4
 800c4d2:	f000 fd11 	bl	800cef8 <__pow5mult>
 800c4d6:	ee18 2a10 	vmov	r2, s16
 800c4da:	4601      	mov	r1, r0
 800c4dc:	4607      	mov	r7, r0
 800c4de:	4620      	mov	r0, r4
 800c4e0:	f000 fc60 	bl	800cda4 <__multiply>
 800c4e4:	ee18 1a10 	vmov	r1, s16
 800c4e8:	4680      	mov	r8, r0
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 fb8c 	bl	800cc08 <_Bfree>
 800c4f0:	ee08 8a10 	vmov	s16, r8
 800c4f4:	9b07      	ldr	r3, [sp, #28]
 800c4f6:	1b9a      	subs	r2, r3, r6
 800c4f8:	d006      	beq.n	800c508 <_dtoa_r+0x7a0>
 800c4fa:	ee18 1a10 	vmov	r1, s16
 800c4fe:	4620      	mov	r0, r4
 800c500:	f000 fcfa 	bl	800cef8 <__pow5mult>
 800c504:	ee08 0a10 	vmov	s16, r0
 800c508:	2101      	movs	r1, #1
 800c50a:	4620      	mov	r0, r4
 800c50c:	f000 fc34 	bl	800cd78 <__i2b>
 800c510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c512:	2b00      	cmp	r3, #0
 800c514:	4606      	mov	r6, r0
 800c516:	f340 8088 	ble.w	800c62a <_dtoa_r+0x8c2>
 800c51a:	461a      	mov	r2, r3
 800c51c:	4601      	mov	r1, r0
 800c51e:	4620      	mov	r0, r4
 800c520:	f000 fcea 	bl	800cef8 <__pow5mult>
 800c524:	9b06      	ldr	r3, [sp, #24]
 800c526:	2b01      	cmp	r3, #1
 800c528:	4606      	mov	r6, r0
 800c52a:	f340 8081 	ble.w	800c630 <_dtoa_r+0x8c8>
 800c52e:	f04f 0800 	mov.w	r8, #0
 800c532:	6933      	ldr	r3, [r6, #16]
 800c534:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c538:	6918      	ldr	r0, [r3, #16]
 800c53a:	f000 fbcd 	bl	800ccd8 <__hi0bits>
 800c53e:	f1c0 0020 	rsb	r0, r0, #32
 800c542:	9b05      	ldr	r3, [sp, #20]
 800c544:	4418      	add	r0, r3
 800c546:	f010 001f 	ands.w	r0, r0, #31
 800c54a:	f000 8092 	beq.w	800c672 <_dtoa_r+0x90a>
 800c54e:	f1c0 0320 	rsb	r3, r0, #32
 800c552:	2b04      	cmp	r3, #4
 800c554:	f340 808a 	ble.w	800c66c <_dtoa_r+0x904>
 800c558:	f1c0 001c 	rsb	r0, r0, #28
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	4403      	add	r3, r0
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	9b05      	ldr	r3, [sp, #20]
 800c564:	4403      	add	r3, r0
 800c566:	4405      	add	r5, r0
 800c568:	9305      	str	r3, [sp, #20]
 800c56a:	9b04      	ldr	r3, [sp, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	dd07      	ble.n	800c580 <_dtoa_r+0x818>
 800c570:	ee18 1a10 	vmov	r1, s16
 800c574:	461a      	mov	r2, r3
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fd18 	bl	800cfac <__lshift>
 800c57c:	ee08 0a10 	vmov	s16, r0
 800c580:	9b05      	ldr	r3, [sp, #20]
 800c582:	2b00      	cmp	r3, #0
 800c584:	dd05      	ble.n	800c592 <_dtoa_r+0x82a>
 800c586:	4631      	mov	r1, r6
 800c588:	461a      	mov	r2, r3
 800c58a:	4620      	mov	r0, r4
 800c58c:	f000 fd0e 	bl	800cfac <__lshift>
 800c590:	4606      	mov	r6, r0
 800c592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c594:	2b00      	cmp	r3, #0
 800c596:	d06e      	beq.n	800c676 <_dtoa_r+0x90e>
 800c598:	ee18 0a10 	vmov	r0, s16
 800c59c:	4631      	mov	r1, r6
 800c59e:	f000 fd75 	bl	800d08c <__mcmp>
 800c5a2:	2800      	cmp	r0, #0
 800c5a4:	da67      	bge.n	800c676 <_dtoa_r+0x90e>
 800c5a6:	9b00      	ldr	r3, [sp, #0]
 800c5a8:	3b01      	subs	r3, #1
 800c5aa:	ee18 1a10 	vmov	r1, s16
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	220a      	movs	r2, #10
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f000 fb49 	bl	800cc4c <__multadd>
 800c5ba:	9b08      	ldr	r3, [sp, #32]
 800c5bc:	ee08 0a10 	vmov	s16, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	f000 81b1 	beq.w	800c928 <_dtoa_r+0xbc0>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	4639      	mov	r1, r7
 800c5ca:	220a      	movs	r2, #10
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 fb3d 	bl	800cc4c <__multadd>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	f300 808e 	bgt.w	800c6f8 <_dtoa_r+0x990>
 800c5dc:	9b06      	ldr	r3, [sp, #24]
 800c5de:	2b02      	cmp	r3, #2
 800c5e0:	dc51      	bgt.n	800c686 <_dtoa_r+0x91e>
 800c5e2:	e089      	b.n	800c6f8 <_dtoa_r+0x990>
 800c5e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5ea:	e74b      	b.n	800c484 <_dtoa_r+0x71c>
 800c5ec:	9b03      	ldr	r3, [sp, #12]
 800c5ee:	1e5e      	subs	r6, r3, #1
 800c5f0:	9b07      	ldr	r3, [sp, #28]
 800c5f2:	42b3      	cmp	r3, r6
 800c5f4:	bfbf      	itttt	lt
 800c5f6:	9b07      	ldrlt	r3, [sp, #28]
 800c5f8:	9607      	strlt	r6, [sp, #28]
 800c5fa:	1af2      	sublt	r2, r6, r3
 800c5fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c5fe:	bfb6      	itet	lt
 800c600:	189b      	addlt	r3, r3, r2
 800c602:	1b9e      	subge	r6, r3, r6
 800c604:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c606:	9b03      	ldr	r3, [sp, #12]
 800c608:	bfb8      	it	lt
 800c60a:	2600      	movlt	r6, #0
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfb7      	itett	lt
 800c610:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c614:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c618:	1a9d      	sublt	r5, r3, r2
 800c61a:	2300      	movlt	r3, #0
 800c61c:	e734      	b.n	800c488 <_dtoa_r+0x720>
 800c61e:	9e07      	ldr	r6, [sp, #28]
 800c620:	9d04      	ldr	r5, [sp, #16]
 800c622:	9f08      	ldr	r7, [sp, #32]
 800c624:	e73b      	b.n	800c49e <_dtoa_r+0x736>
 800c626:	9a07      	ldr	r2, [sp, #28]
 800c628:	e767      	b.n	800c4fa <_dtoa_r+0x792>
 800c62a:	9b06      	ldr	r3, [sp, #24]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	dc18      	bgt.n	800c662 <_dtoa_r+0x8fa>
 800c630:	f1ba 0f00 	cmp.w	sl, #0
 800c634:	d115      	bne.n	800c662 <_dtoa_r+0x8fa>
 800c636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c63a:	b993      	cbnz	r3, 800c662 <_dtoa_r+0x8fa>
 800c63c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c640:	0d1b      	lsrs	r3, r3, #20
 800c642:	051b      	lsls	r3, r3, #20
 800c644:	b183      	cbz	r3, 800c668 <_dtoa_r+0x900>
 800c646:	9b04      	ldr	r3, [sp, #16]
 800c648:	3301      	adds	r3, #1
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	9b05      	ldr	r3, [sp, #20]
 800c64e:	3301      	adds	r3, #1
 800c650:	9305      	str	r3, [sp, #20]
 800c652:	f04f 0801 	mov.w	r8, #1
 800c656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c658:	2b00      	cmp	r3, #0
 800c65a:	f47f af6a 	bne.w	800c532 <_dtoa_r+0x7ca>
 800c65e:	2001      	movs	r0, #1
 800c660:	e76f      	b.n	800c542 <_dtoa_r+0x7da>
 800c662:	f04f 0800 	mov.w	r8, #0
 800c666:	e7f6      	b.n	800c656 <_dtoa_r+0x8ee>
 800c668:	4698      	mov	r8, r3
 800c66a:	e7f4      	b.n	800c656 <_dtoa_r+0x8ee>
 800c66c:	f43f af7d 	beq.w	800c56a <_dtoa_r+0x802>
 800c670:	4618      	mov	r0, r3
 800c672:	301c      	adds	r0, #28
 800c674:	e772      	b.n	800c55c <_dtoa_r+0x7f4>
 800c676:	9b03      	ldr	r3, [sp, #12]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	dc37      	bgt.n	800c6ec <_dtoa_r+0x984>
 800c67c:	9b06      	ldr	r3, [sp, #24]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	dd34      	ble.n	800c6ec <_dtoa_r+0x984>
 800c682:	9b03      	ldr	r3, [sp, #12]
 800c684:	9302      	str	r3, [sp, #8]
 800c686:	9b02      	ldr	r3, [sp, #8]
 800c688:	b96b      	cbnz	r3, 800c6a6 <_dtoa_r+0x93e>
 800c68a:	4631      	mov	r1, r6
 800c68c:	2205      	movs	r2, #5
 800c68e:	4620      	mov	r0, r4
 800c690:	f000 fadc 	bl	800cc4c <__multadd>
 800c694:	4601      	mov	r1, r0
 800c696:	4606      	mov	r6, r0
 800c698:	ee18 0a10 	vmov	r0, s16
 800c69c:	f000 fcf6 	bl	800d08c <__mcmp>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	f73f adbb 	bgt.w	800c21c <_dtoa_r+0x4b4>
 800c6a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6a8:	9d01      	ldr	r5, [sp, #4]
 800c6aa:	43db      	mvns	r3, r3
 800c6ac:	9300      	str	r3, [sp, #0]
 800c6ae:	f04f 0800 	mov.w	r8, #0
 800c6b2:	4631      	mov	r1, r6
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f000 faa7 	bl	800cc08 <_Bfree>
 800c6ba:	2f00      	cmp	r7, #0
 800c6bc:	f43f aea4 	beq.w	800c408 <_dtoa_r+0x6a0>
 800c6c0:	f1b8 0f00 	cmp.w	r8, #0
 800c6c4:	d005      	beq.n	800c6d2 <_dtoa_r+0x96a>
 800c6c6:	45b8      	cmp	r8, r7
 800c6c8:	d003      	beq.n	800c6d2 <_dtoa_r+0x96a>
 800c6ca:	4641      	mov	r1, r8
 800c6cc:	4620      	mov	r0, r4
 800c6ce:	f000 fa9b 	bl	800cc08 <_Bfree>
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	f000 fa97 	bl	800cc08 <_Bfree>
 800c6da:	e695      	b.n	800c408 <_dtoa_r+0x6a0>
 800c6dc:	2600      	movs	r6, #0
 800c6de:	4637      	mov	r7, r6
 800c6e0:	e7e1      	b.n	800c6a6 <_dtoa_r+0x93e>
 800c6e2:	9700      	str	r7, [sp, #0]
 800c6e4:	4637      	mov	r7, r6
 800c6e6:	e599      	b.n	800c21c <_dtoa_r+0x4b4>
 800c6e8:	40240000 	.word	0x40240000
 800c6ec:	9b08      	ldr	r3, [sp, #32]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 80ca 	beq.w	800c888 <_dtoa_r+0xb20>
 800c6f4:	9b03      	ldr	r3, [sp, #12]
 800c6f6:	9302      	str	r3, [sp, #8]
 800c6f8:	2d00      	cmp	r5, #0
 800c6fa:	dd05      	ble.n	800c708 <_dtoa_r+0x9a0>
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	462a      	mov	r2, r5
 800c700:	4620      	mov	r0, r4
 800c702:	f000 fc53 	bl	800cfac <__lshift>
 800c706:	4607      	mov	r7, r0
 800c708:	f1b8 0f00 	cmp.w	r8, #0
 800c70c:	d05b      	beq.n	800c7c6 <_dtoa_r+0xa5e>
 800c70e:	6879      	ldr	r1, [r7, #4]
 800c710:	4620      	mov	r0, r4
 800c712:	f000 fa39 	bl	800cb88 <_Balloc>
 800c716:	4605      	mov	r5, r0
 800c718:	b928      	cbnz	r0, 800c726 <_dtoa_r+0x9be>
 800c71a:	4b87      	ldr	r3, [pc, #540]	; (800c938 <_dtoa_r+0xbd0>)
 800c71c:	4602      	mov	r2, r0
 800c71e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c722:	f7ff bb3b 	b.w	800bd9c <_dtoa_r+0x34>
 800c726:	693a      	ldr	r2, [r7, #16]
 800c728:	3202      	adds	r2, #2
 800c72a:	0092      	lsls	r2, r2, #2
 800c72c:	f107 010c 	add.w	r1, r7, #12
 800c730:	300c      	adds	r0, #12
 800c732:	f7fe fa25 	bl	800ab80 <memcpy>
 800c736:	2201      	movs	r2, #1
 800c738:	4629      	mov	r1, r5
 800c73a:	4620      	mov	r0, r4
 800c73c:	f000 fc36 	bl	800cfac <__lshift>
 800c740:	9b01      	ldr	r3, [sp, #4]
 800c742:	f103 0901 	add.w	r9, r3, #1
 800c746:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c74a:	4413      	add	r3, r2
 800c74c:	9305      	str	r3, [sp, #20]
 800c74e:	f00a 0301 	and.w	r3, sl, #1
 800c752:	46b8      	mov	r8, r7
 800c754:	9304      	str	r3, [sp, #16]
 800c756:	4607      	mov	r7, r0
 800c758:	4631      	mov	r1, r6
 800c75a:	ee18 0a10 	vmov	r0, s16
 800c75e:	f7ff fa77 	bl	800bc50 <quorem>
 800c762:	4641      	mov	r1, r8
 800c764:	9002      	str	r0, [sp, #8]
 800c766:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c76a:	ee18 0a10 	vmov	r0, s16
 800c76e:	f000 fc8d 	bl	800d08c <__mcmp>
 800c772:	463a      	mov	r2, r7
 800c774:	9003      	str	r0, [sp, #12]
 800c776:	4631      	mov	r1, r6
 800c778:	4620      	mov	r0, r4
 800c77a:	f000 fca3 	bl	800d0c4 <__mdiff>
 800c77e:	68c2      	ldr	r2, [r0, #12]
 800c780:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c784:	4605      	mov	r5, r0
 800c786:	bb02      	cbnz	r2, 800c7ca <_dtoa_r+0xa62>
 800c788:	4601      	mov	r1, r0
 800c78a:	ee18 0a10 	vmov	r0, s16
 800c78e:	f000 fc7d 	bl	800d08c <__mcmp>
 800c792:	4602      	mov	r2, r0
 800c794:	4629      	mov	r1, r5
 800c796:	4620      	mov	r0, r4
 800c798:	9207      	str	r2, [sp, #28]
 800c79a:	f000 fa35 	bl	800cc08 <_Bfree>
 800c79e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c7a2:	ea43 0102 	orr.w	r1, r3, r2
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	430b      	orrs	r3, r1
 800c7aa:	464d      	mov	r5, r9
 800c7ac:	d10f      	bne.n	800c7ce <_dtoa_r+0xa66>
 800c7ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c7b2:	d02a      	beq.n	800c80a <_dtoa_r+0xaa2>
 800c7b4:	9b03      	ldr	r3, [sp, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	dd02      	ble.n	800c7c0 <_dtoa_r+0xa58>
 800c7ba:	9b02      	ldr	r3, [sp, #8]
 800c7bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c7c0:	f88b a000 	strb.w	sl, [fp]
 800c7c4:	e775      	b.n	800c6b2 <_dtoa_r+0x94a>
 800c7c6:	4638      	mov	r0, r7
 800c7c8:	e7ba      	b.n	800c740 <_dtoa_r+0x9d8>
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	e7e2      	b.n	800c794 <_dtoa_r+0xa2c>
 800c7ce:	9b03      	ldr	r3, [sp, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	db04      	blt.n	800c7de <_dtoa_r+0xa76>
 800c7d4:	9906      	ldr	r1, [sp, #24]
 800c7d6:	430b      	orrs	r3, r1
 800c7d8:	9904      	ldr	r1, [sp, #16]
 800c7da:	430b      	orrs	r3, r1
 800c7dc:	d122      	bne.n	800c824 <_dtoa_r+0xabc>
 800c7de:	2a00      	cmp	r2, #0
 800c7e0:	ddee      	ble.n	800c7c0 <_dtoa_r+0xa58>
 800c7e2:	ee18 1a10 	vmov	r1, s16
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	4620      	mov	r0, r4
 800c7ea:	f000 fbdf 	bl	800cfac <__lshift>
 800c7ee:	4631      	mov	r1, r6
 800c7f0:	ee08 0a10 	vmov	s16, r0
 800c7f4:	f000 fc4a 	bl	800d08c <__mcmp>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	dc03      	bgt.n	800c804 <_dtoa_r+0xa9c>
 800c7fc:	d1e0      	bne.n	800c7c0 <_dtoa_r+0xa58>
 800c7fe:	f01a 0f01 	tst.w	sl, #1
 800c802:	d0dd      	beq.n	800c7c0 <_dtoa_r+0xa58>
 800c804:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c808:	d1d7      	bne.n	800c7ba <_dtoa_r+0xa52>
 800c80a:	2339      	movs	r3, #57	; 0x39
 800c80c:	f88b 3000 	strb.w	r3, [fp]
 800c810:	462b      	mov	r3, r5
 800c812:	461d      	mov	r5, r3
 800c814:	3b01      	subs	r3, #1
 800c816:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c81a:	2a39      	cmp	r2, #57	; 0x39
 800c81c:	d071      	beq.n	800c902 <_dtoa_r+0xb9a>
 800c81e:	3201      	adds	r2, #1
 800c820:	701a      	strb	r2, [r3, #0]
 800c822:	e746      	b.n	800c6b2 <_dtoa_r+0x94a>
 800c824:	2a00      	cmp	r2, #0
 800c826:	dd07      	ble.n	800c838 <_dtoa_r+0xad0>
 800c828:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c82c:	d0ed      	beq.n	800c80a <_dtoa_r+0xaa2>
 800c82e:	f10a 0301 	add.w	r3, sl, #1
 800c832:	f88b 3000 	strb.w	r3, [fp]
 800c836:	e73c      	b.n	800c6b2 <_dtoa_r+0x94a>
 800c838:	9b05      	ldr	r3, [sp, #20]
 800c83a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c83e:	4599      	cmp	r9, r3
 800c840:	d047      	beq.n	800c8d2 <_dtoa_r+0xb6a>
 800c842:	ee18 1a10 	vmov	r1, s16
 800c846:	2300      	movs	r3, #0
 800c848:	220a      	movs	r2, #10
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 f9fe 	bl	800cc4c <__multadd>
 800c850:	45b8      	cmp	r8, r7
 800c852:	ee08 0a10 	vmov	s16, r0
 800c856:	f04f 0300 	mov.w	r3, #0
 800c85a:	f04f 020a 	mov.w	r2, #10
 800c85e:	4641      	mov	r1, r8
 800c860:	4620      	mov	r0, r4
 800c862:	d106      	bne.n	800c872 <_dtoa_r+0xb0a>
 800c864:	f000 f9f2 	bl	800cc4c <__multadd>
 800c868:	4680      	mov	r8, r0
 800c86a:	4607      	mov	r7, r0
 800c86c:	f109 0901 	add.w	r9, r9, #1
 800c870:	e772      	b.n	800c758 <_dtoa_r+0x9f0>
 800c872:	f000 f9eb 	bl	800cc4c <__multadd>
 800c876:	4639      	mov	r1, r7
 800c878:	4680      	mov	r8, r0
 800c87a:	2300      	movs	r3, #0
 800c87c:	220a      	movs	r2, #10
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 f9e4 	bl	800cc4c <__multadd>
 800c884:	4607      	mov	r7, r0
 800c886:	e7f1      	b.n	800c86c <_dtoa_r+0xb04>
 800c888:	9b03      	ldr	r3, [sp, #12]
 800c88a:	9302      	str	r3, [sp, #8]
 800c88c:	9d01      	ldr	r5, [sp, #4]
 800c88e:	ee18 0a10 	vmov	r0, s16
 800c892:	4631      	mov	r1, r6
 800c894:	f7ff f9dc 	bl	800bc50 <quorem>
 800c898:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c89c:	9b01      	ldr	r3, [sp, #4]
 800c89e:	f805 ab01 	strb.w	sl, [r5], #1
 800c8a2:	1aea      	subs	r2, r5, r3
 800c8a4:	9b02      	ldr	r3, [sp, #8]
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	dd09      	ble.n	800c8be <_dtoa_r+0xb56>
 800c8aa:	ee18 1a10 	vmov	r1, s16
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	220a      	movs	r2, #10
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f000 f9ca 	bl	800cc4c <__multadd>
 800c8b8:	ee08 0a10 	vmov	s16, r0
 800c8bc:	e7e7      	b.n	800c88e <_dtoa_r+0xb26>
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	bfc8      	it	gt
 800c8c4:	461d      	movgt	r5, r3
 800c8c6:	9b01      	ldr	r3, [sp, #4]
 800c8c8:	bfd8      	it	le
 800c8ca:	2501      	movle	r5, #1
 800c8cc:	441d      	add	r5, r3
 800c8ce:	f04f 0800 	mov.w	r8, #0
 800c8d2:	ee18 1a10 	vmov	r1, s16
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	4620      	mov	r0, r4
 800c8da:	f000 fb67 	bl	800cfac <__lshift>
 800c8de:	4631      	mov	r1, r6
 800c8e0:	ee08 0a10 	vmov	s16, r0
 800c8e4:	f000 fbd2 	bl	800d08c <__mcmp>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	dc91      	bgt.n	800c810 <_dtoa_r+0xaa8>
 800c8ec:	d102      	bne.n	800c8f4 <_dtoa_r+0xb8c>
 800c8ee:	f01a 0f01 	tst.w	sl, #1
 800c8f2:	d18d      	bne.n	800c810 <_dtoa_r+0xaa8>
 800c8f4:	462b      	mov	r3, r5
 800c8f6:	461d      	mov	r5, r3
 800c8f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8fc:	2a30      	cmp	r2, #48	; 0x30
 800c8fe:	d0fa      	beq.n	800c8f6 <_dtoa_r+0xb8e>
 800c900:	e6d7      	b.n	800c6b2 <_dtoa_r+0x94a>
 800c902:	9a01      	ldr	r2, [sp, #4]
 800c904:	429a      	cmp	r2, r3
 800c906:	d184      	bne.n	800c812 <_dtoa_r+0xaaa>
 800c908:	9b00      	ldr	r3, [sp, #0]
 800c90a:	3301      	adds	r3, #1
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	2331      	movs	r3, #49	; 0x31
 800c910:	7013      	strb	r3, [r2, #0]
 800c912:	e6ce      	b.n	800c6b2 <_dtoa_r+0x94a>
 800c914:	4b09      	ldr	r3, [pc, #36]	; (800c93c <_dtoa_r+0xbd4>)
 800c916:	f7ff ba95 	b.w	800be44 <_dtoa_r+0xdc>
 800c91a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f47f aa6e 	bne.w	800bdfe <_dtoa_r+0x96>
 800c922:	4b07      	ldr	r3, [pc, #28]	; (800c940 <_dtoa_r+0xbd8>)
 800c924:	f7ff ba8e 	b.w	800be44 <_dtoa_r+0xdc>
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dcae      	bgt.n	800c88c <_dtoa_r+0xb24>
 800c92e:	9b06      	ldr	r3, [sp, #24]
 800c930:	2b02      	cmp	r3, #2
 800c932:	f73f aea8 	bgt.w	800c686 <_dtoa_r+0x91e>
 800c936:	e7a9      	b.n	800c88c <_dtoa_r+0xb24>
 800c938:	0800f3b0 	.word	0x0800f3b0
 800c93c:	0800f2d1 	.word	0x0800f2d1
 800c940:	0800f331 	.word	0x0800f331

0800c944 <__errno>:
 800c944:	4b01      	ldr	r3, [pc, #4]	; (800c94c <__errno+0x8>)
 800c946:	6818      	ldr	r0, [r3, #0]
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000158 	.word	0x20000158

0800c950 <std>:
 800c950:	2300      	movs	r3, #0
 800c952:	b510      	push	{r4, lr}
 800c954:	4604      	mov	r4, r0
 800c956:	e9c0 3300 	strd	r3, r3, [r0]
 800c95a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c95e:	6083      	str	r3, [r0, #8]
 800c960:	8181      	strh	r1, [r0, #12]
 800c962:	6643      	str	r3, [r0, #100]	; 0x64
 800c964:	81c2      	strh	r2, [r0, #14]
 800c966:	6183      	str	r3, [r0, #24]
 800c968:	4619      	mov	r1, r3
 800c96a:	2208      	movs	r2, #8
 800c96c:	305c      	adds	r0, #92	; 0x5c
 800c96e:	f7fe f92f 	bl	800abd0 <memset>
 800c972:	4b05      	ldr	r3, [pc, #20]	; (800c988 <std+0x38>)
 800c974:	6263      	str	r3, [r4, #36]	; 0x24
 800c976:	4b05      	ldr	r3, [pc, #20]	; (800c98c <std+0x3c>)
 800c978:	62a3      	str	r3, [r4, #40]	; 0x28
 800c97a:	4b05      	ldr	r3, [pc, #20]	; (800c990 <std+0x40>)
 800c97c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c97e:	4b05      	ldr	r3, [pc, #20]	; (800c994 <std+0x44>)
 800c980:	6224      	str	r4, [r4, #32]
 800c982:	6323      	str	r3, [r4, #48]	; 0x30
 800c984:	bd10      	pop	{r4, pc}
 800c986:	bf00      	nop
 800c988:	0800d5a1 	.word	0x0800d5a1
 800c98c:	0800d5c3 	.word	0x0800d5c3
 800c990:	0800d5fb 	.word	0x0800d5fb
 800c994:	0800d61f 	.word	0x0800d61f

0800c998 <_cleanup_r>:
 800c998:	4901      	ldr	r1, [pc, #4]	; (800c9a0 <_cleanup_r+0x8>)
 800c99a:	f000 b8c1 	b.w	800cb20 <_fwalk_reent>
 800c99e:	bf00      	nop
 800c9a0:	0800d8f9 	.word	0x0800d8f9

0800c9a4 <__sfmoreglue>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	2268      	movs	r2, #104	; 0x68
 800c9a8:	1e4d      	subs	r5, r1, #1
 800c9aa:	4355      	muls	r5, r2
 800c9ac:	460e      	mov	r6, r1
 800c9ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9b2:	f7fe f9d5 	bl	800ad60 <_malloc_r>
 800c9b6:	4604      	mov	r4, r0
 800c9b8:	b140      	cbz	r0, 800c9cc <__sfmoreglue+0x28>
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	e9c0 1600 	strd	r1, r6, [r0]
 800c9c0:	300c      	adds	r0, #12
 800c9c2:	60a0      	str	r0, [r4, #8]
 800c9c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9c8:	f7fe f902 	bl	800abd0 <memset>
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	bd70      	pop	{r4, r5, r6, pc}

0800c9d0 <__sfp_lock_acquire>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	; (800c9d8 <__sfp_lock_acquire+0x8>)
 800c9d2:	f000 b8ca 	b.w	800cb6a <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	2000ba49 	.word	0x2000ba49

0800c9dc <__sfp_lock_release>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	; (800c9e4 <__sfp_lock_release+0x8>)
 800c9de:	f000 b8c5 	b.w	800cb6c <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	2000ba49 	.word	0x2000ba49

0800c9e8 <__sinit_lock_acquire>:
 800c9e8:	4801      	ldr	r0, [pc, #4]	; (800c9f0 <__sinit_lock_acquire+0x8>)
 800c9ea:	f000 b8be 	b.w	800cb6a <__retarget_lock_acquire_recursive>
 800c9ee:	bf00      	nop
 800c9f0:	2000ba4a 	.word	0x2000ba4a

0800c9f4 <__sinit_lock_release>:
 800c9f4:	4801      	ldr	r0, [pc, #4]	; (800c9fc <__sinit_lock_release+0x8>)
 800c9f6:	f000 b8b9 	b.w	800cb6c <__retarget_lock_release_recursive>
 800c9fa:	bf00      	nop
 800c9fc:	2000ba4a 	.word	0x2000ba4a

0800ca00 <__sinit>:
 800ca00:	b510      	push	{r4, lr}
 800ca02:	4604      	mov	r4, r0
 800ca04:	f7ff fff0 	bl	800c9e8 <__sinit_lock_acquire>
 800ca08:	69a3      	ldr	r3, [r4, #24]
 800ca0a:	b11b      	cbz	r3, 800ca14 <__sinit+0x14>
 800ca0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca10:	f7ff bff0 	b.w	800c9f4 <__sinit_lock_release>
 800ca14:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca18:	6523      	str	r3, [r4, #80]	; 0x50
 800ca1a:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <__sinit+0x68>)
 800ca1c:	4a13      	ldr	r2, [pc, #76]	; (800ca6c <__sinit+0x6c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca22:	42a3      	cmp	r3, r4
 800ca24:	bf04      	itt	eq
 800ca26:	2301      	moveq	r3, #1
 800ca28:	61a3      	streq	r3, [r4, #24]
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 f820 	bl	800ca70 <__sfp>
 800ca30:	6060      	str	r0, [r4, #4]
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 f81c 	bl	800ca70 <__sfp>
 800ca38:	60a0      	str	r0, [r4, #8]
 800ca3a:	4620      	mov	r0, r4
 800ca3c:	f000 f818 	bl	800ca70 <__sfp>
 800ca40:	2200      	movs	r2, #0
 800ca42:	60e0      	str	r0, [r4, #12]
 800ca44:	2104      	movs	r1, #4
 800ca46:	6860      	ldr	r0, [r4, #4]
 800ca48:	f7ff ff82 	bl	800c950 <std>
 800ca4c:	68a0      	ldr	r0, [r4, #8]
 800ca4e:	2201      	movs	r2, #1
 800ca50:	2109      	movs	r1, #9
 800ca52:	f7ff ff7d 	bl	800c950 <std>
 800ca56:	68e0      	ldr	r0, [r4, #12]
 800ca58:	2202      	movs	r2, #2
 800ca5a:	2112      	movs	r1, #18
 800ca5c:	f7ff ff78 	bl	800c950 <std>
 800ca60:	2301      	movs	r3, #1
 800ca62:	61a3      	str	r3, [r4, #24]
 800ca64:	e7d2      	b.n	800ca0c <__sinit+0xc>
 800ca66:	bf00      	nop
 800ca68:	0800f2ac 	.word	0x0800f2ac
 800ca6c:	0800c999 	.word	0x0800c999

0800ca70 <__sfp>:
 800ca70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca72:	4607      	mov	r7, r0
 800ca74:	f7ff ffac 	bl	800c9d0 <__sfp_lock_acquire>
 800ca78:	4b1e      	ldr	r3, [pc, #120]	; (800caf4 <__sfp+0x84>)
 800ca7a:	681e      	ldr	r6, [r3, #0]
 800ca7c:	69b3      	ldr	r3, [r6, #24]
 800ca7e:	b913      	cbnz	r3, 800ca86 <__sfp+0x16>
 800ca80:	4630      	mov	r0, r6
 800ca82:	f7ff ffbd 	bl	800ca00 <__sinit>
 800ca86:	3648      	adds	r6, #72	; 0x48
 800ca88:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	d503      	bpl.n	800ca98 <__sfp+0x28>
 800ca90:	6833      	ldr	r3, [r6, #0]
 800ca92:	b30b      	cbz	r3, 800cad8 <__sfp+0x68>
 800ca94:	6836      	ldr	r6, [r6, #0]
 800ca96:	e7f7      	b.n	800ca88 <__sfp+0x18>
 800ca98:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca9c:	b9d5      	cbnz	r5, 800cad4 <__sfp+0x64>
 800ca9e:	4b16      	ldr	r3, [pc, #88]	; (800caf8 <__sfp+0x88>)
 800caa0:	60e3      	str	r3, [r4, #12]
 800caa2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caa6:	6665      	str	r5, [r4, #100]	; 0x64
 800caa8:	f000 f85e 	bl	800cb68 <__retarget_lock_init_recursive>
 800caac:	f7ff ff96 	bl	800c9dc <__sfp_lock_release>
 800cab0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cab4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cab8:	6025      	str	r5, [r4, #0]
 800caba:	61a5      	str	r5, [r4, #24]
 800cabc:	2208      	movs	r2, #8
 800cabe:	4629      	mov	r1, r5
 800cac0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cac4:	f7fe f884 	bl	800abd0 <memset>
 800cac8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cacc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cad0:	4620      	mov	r0, r4
 800cad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cad4:	3468      	adds	r4, #104	; 0x68
 800cad6:	e7d9      	b.n	800ca8c <__sfp+0x1c>
 800cad8:	2104      	movs	r1, #4
 800cada:	4638      	mov	r0, r7
 800cadc:	f7ff ff62 	bl	800c9a4 <__sfmoreglue>
 800cae0:	4604      	mov	r4, r0
 800cae2:	6030      	str	r0, [r6, #0]
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d1d5      	bne.n	800ca94 <__sfp+0x24>
 800cae8:	f7ff ff78 	bl	800c9dc <__sfp_lock_release>
 800caec:	230c      	movs	r3, #12
 800caee:	603b      	str	r3, [r7, #0]
 800caf0:	e7ee      	b.n	800cad0 <__sfp+0x60>
 800caf2:	bf00      	nop
 800caf4:	0800f2ac 	.word	0x0800f2ac
 800caf8:	ffff0001 	.word	0xffff0001

0800cafc <fiprintf>:
 800cafc:	b40e      	push	{r1, r2, r3}
 800cafe:	b503      	push	{r0, r1, lr}
 800cb00:	4601      	mov	r1, r0
 800cb02:	ab03      	add	r3, sp, #12
 800cb04:	4805      	ldr	r0, [pc, #20]	; (800cb1c <fiprintf+0x20>)
 800cb06:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb0a:	6800      	ldr	r0, [r0, #0]
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	f000 fc17 	bl	800d340 <_vfiprintf_r>
 800cb12:	b002      	add	sp, #8
 800cb14:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb18:	b003      	add	sp, #12
 800cb1a:	4770      	bx	lr
 800cb1c:	20000158 	.word	0x20000158

0800cb20 <_fwalk_reent>:
 800cb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb24:	4606      	mov	r6, r0
 800cb26:	4688      	mov	r8, r1
 800cb28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb2c:	2700      	movs	r7, #0
 800cb2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb32:	f1b9 0901 	subs.w	r9, r9, #1
 800cb36:	d505      	bpl.n	800cb44 <_fwalk_reent+0x24>
 800cb38:	6824      	ldr	r4, [r4, #0]
 800cb3a:	2c00      	cmp	r4, #0
 800cb3c:	d1f7      	bne.n	800cb2e <_fwalk_reent+0xe>
 800cb3e:	4638      	mov	r0, r7
 800cb40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb44:	89ab      	ldrh	r3, [r5, #12]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d907      	bls.n	800cb5a <_fwalk_reent+0x3a>
 800cb4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	d003      	beq.n	800cb5a <_fwalk_reent+0x3a>
 800cb52:	4629      	mov	r1, r5
 800cb54:	4630      	mov	r0, r6
 800cb56:	47c0      	blx	r8
 800cb58:	4307      	orrs	r7, r0
 800cb5a:	3568      	adds	r5, #104	; 0x68
 800cb5c:	e7e9      	b.n	800cb32 <_fwalk_reent+0x12>
	...

0800cb60 <_localeconv_r>:
 800cb60:	4800      	ldr	r0, [pc, #0]	; (800cb64 <_localeconv_r+0x4>)
 800cb62:	4770      	bx	lr
 800cb64:	200002ac 	.word	0x200002ac

0800cb68 <__retarget_lock_init_recursive>:
 800cb68:	4770      	bx	lr

0800cb6a <__retarget_lock_acquire_recursive>:
 800cb6a:	4770      	bx	lr

0800cb6c <__retarget_lock_release_recursive>:
 800cb6c:	4770      	bx	lr
	...

0800cb70 <__malloc_lock>:
 800cb70:	4801      	ldr	r0, [pc, #4]	; (800cb78 <__malloc_lock+0x8>)
 800cb72:	f7ff bffa 	b.w	800cb6a <__retarget_lock_acquire_recursive>
 800cb76:	bf00      	nop
 800cb78:	2000ba48 	.word	0x2000ba48

0800cb7c <__malloc_unlock>:
 800cb7c:	4801      	ldr	r0, [pc, #4]	; (800cb84 <__malloc_unlock+0x8>)
 800cb7e:	f7ff bff5 	b.w	800cb6c <__retarget_lock_release_recursive>
 800cb82:	bf00      	nop
 800cb84:	2000ba48 	.word	0x2000ba48

0800cb88 <_Balloc>:
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	460d      	mov	r5, r1
 800cb90:	b976      	cbnz	r6, 800cbb0 <_Balloc+0x28>
 800cb92:	2010      	movs	r0, #16
 800cb94:	f7fd ffe4 	bl	800ab60 <malloc>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	6260      	str	r0, [r4, #36]	; 0x24
 800cb9c:	b920      	cbnz	r0, 800cba8 <_Balloc+0x20>
 800cb9e:	4b18      	ldr	r3, [pc, #96]	; (800cc00 <_Balloc+0x78>)
 800cba0:	4818      	ldr	r0, [pc, #96]	; (800cc04 <_Balloc+0x7c>)
 800cba2:	2166      	movs	r1, #102	; 0x66
 800cba4:	f7ff f836 	bl	800bc14 <__assert_func>
 800cba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbac:	6006      	str	r6, [r0, #0]
 800cbae:	60c6      	str	r6, [r0, #12]
 800cbb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cbb2:	68f3      	ldr	r3, [r6, #12]
 800cbb4:	b183      	cbz	r3, 800cbd8 <_Balloc+0x50>
 800cbb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbb8:	68db      	ldr	r3, [r3, #12]
 800cbba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cbbe:	b9b8      	cbnz	r0, 800cbf0 <_Balloc+0x68>
 800cbc0:	2101      	movs	r1, #1
 800cbc2:	fa01 f605 	lsl.w	r6, r1, r5
 800cbc6:	1d72      	adds	r2, r6, #5
 800cbc8:	0092      	lsls	r2, r2, #2
 800cbca:	4620      	mov	r0, r4
 800cbcc:	f7fe f812 	bl	800abf4 <_calloc_r>
 800cbd0:	b160      	cbz	r0, 800cbec <_Balloc+0x64>
 800cbd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cbd6:	e00e      	b.n	800cbf6 <_Balloc+0x6e>
 800cbd8:	2221      	movs	r2, #33	; 0x21
 800cbda:	2104      	movs	r1, #4
 800cbdc:	4620      	mov	r0, r4
 800cbde:	f7fe f809 	bl	800abf4 <_calloc_r>
 800cbe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbe4:	60f0      	str	r0, [r6, #12]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e4      	bne.n	800cbb6 <_Balloc+0x2e>
 800cbec:	2000      	movs	r0, #0
 800cbee:	bd70      	pop	{r4, r5, r6, pc}
 800cbf0:	6802      	ldr	r2, [r0, #0]
 800cbf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbfc:	e7f7      	b.n	800cbee <_Balloc+0x66>
 800cbfe:	bf00      	nop
 800cc00:	0800f33e 	.word	0x0800f33e
 800cc04:	0800f424 	.word	0x0800f424

0800cc08 <_Bfree>:
 800cc08:	b570      	push	{r4, r5, r6, lr}
 800cc0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	460c      	mov	r4, r1
 800cc10:	b976      	cbnz	r6, 800cc30 <_Bfree+0x28>
 800cc12:	2010      	movs	r0, #16
 800cc14:	f7fd ffa4 	bl	800ab60 <malloc>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	6268      	str	r0, [r5, #36]	; 0x24
 800cc1c:	b920      	cbnz	r0, 800cc28 <_Bfree+0x20>
 800cc1e:	4b09      	ldr	r3, [pc, #36]	; (800cc44 <_Bfree+0x3c>)
 800cc20:	4809      	ldr	r0, [pc, #36]	; (800cc48 <_Bfree+0x40>)
 800cc22:	218a      	movs	r1, #138	; 0x8a
 800cc24:	f7fe fff6 	bl	800bc14 <__assert_func>
 800cc28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc2c:	6006      	str	r6, [r0, #0]
 800cc2e:	60c6      	str	r6, [r0, #12]
 800cc30:	b13c      	cbz	r4, 800cc42 <_Bfree+0x3a>
 800cc32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cc34:	6862      	ldr	r2, [r4, #4]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc3c:	6021      	str	r1, [r4, #0]
 800cc3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc42:	bd70      	pop	{r4, r5, r6, pc}
 800cc44:	0800f33e 	.word	0x0800f33e
 800cc48:	0800f424 	.word	0x0800f424

0800cc4c <__multadd>:
 800cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc50:	690d      	ldr	r5, [r1, #16]
 800cc52:	4607      	mov	r7, r0
 800cc54:	460c      	mov	r4, r1
 800cc56:	461e      	mov	r6, r3
 800cc58:	f101 0c14 	add.w	ip, r1, #20
 800cc5c:	2000      	movs	r0, #0
 800cc5e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc62:	b299      	uxth	r1, r3
 800cc64:	fb02 6101 	mla	r1, r2, r1, r6
 800cc68:	0c1e      	lsrs	r6, r3, #16
 800cc6a:	0c0b      	lsrs	r3, r1, #16
 800cc6c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc70:	b289      	uxth	r1, r1
 800cc72:	3001      	adds	r0, #1
 800cc74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc78:	4285      	cmp	r5, r0
 800cc7a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc82:	dcec      	bgt.n	800cc5e <__multadd+0x12>
 800cc84:	b30e      	cbz	r6, 800ccca <__multadd+0x7e>
 800cc86:	68a3      	ldr	r3, [r4, #8]
 800cc88:	42ab      	cmp	r3, r5
 800cc8a:	dc19      	bgt.n	800ccc0 <__multadd+0x74>
 800cc8c:	6861      	ldr	r1, [r4, #4]
 800cc8e:	4638      	mov	r0, r7
 800cc90:	3101      	adds	r1, #1
 800cc92:	f7ff ff79 	bl	800cb88 <_Balloc>
 800cc96:	4680      	mov	r8, r0
 800cc98:	b928      	cbnz	r0, 800cca6 <__multadd+0x5a>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	4b0c      	ldr	r3, [pc, #48]	; (800ccd0 <__multadd+0x84>)
 800cc9e:	480d      	ldr	r0, [pc, #52]	; (800ccd4 <__multadd+0x88>)
 800cca0:	21b5      	movs	r1, #181	; 0xb5
 800cca2:	f7fe ffb7 	bl	800bc14 <__assert_func>
 800cca6:	6922      	ldr	r2, [r4, #16]
 800cca8:	3202      	adds	r2, #2
 800ccaa:	f104 010c 	add.w	r1, r4, #12
 800ccae:	0092      	lsls	r2, r2, #2
 800ccb0:	300c      	adds	r0, #12
 800ccb2:	f7fd ff65 	bl	800ab80 <memcpy>
 800ccb6:	4621      	mov	r1, r4
 800ccb8:	4638      	mov	r0, r7
 800ccba:	f7ff ffa5 	bl	800cc08 <_Bfree>
 800ccbe:	4644      	mov	r4, r8
 800ccc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ccc4:	3501      	adds	r5, #1
 800ccc6:	615e      	str	r6, [r3, #20]
 800ccc8:	6125      	str	r5, [r4, #16]
 800ccca:	4620      	mov	r0, r4
 800cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd0:	0800f3b0 	.word	0x0800f3b0
 800ccd4:	0800f424 	.word	0x0800f424

0800ccd8 <__hi0bits>:
 800ccd8:	0c03      	lsrs	r3, r0, #16
 800ccda:	041b      	lsls	r3, r3, #16
 800ccdc:	b9d3      	cbnz	r3, 800cd14 <__hi0bits+0x3c>
 800ccde:	0400      	lsls	r0, r0, #16
 800cce0:	2310      	movs	r3, #16
 800cce2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cce6:	bf04      	itt	eq
 800cce8:	0200      	lsleq	r0, r0, #8
 800ccea:	3308      	addeq	r3, #8
 800ccec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ccf0:	bf04      	itt	eq
 800ccf2:	0100      	lsleq	r0, r0, #4
 800ccf4:	3304      	addeq	r3, #4
 800ccf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ccfa:	bf04      	itt	eq
 800ccfc:	0080      	lsleq	r0, r0, #2
 800ccfe:	3302      	addeq	r3, #2
 800cd00:	2800      	cmp	r0, #0
 800cd02:	db05      	blt.n	800cd10 <__hi0bits+0x38>
 800cd04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd08:	f103 0301 	add.w	r3, r3, #1
 800cd0c:	bf08      	it	eq
 800cd0e:	2320      	moveq	r3, #32
 800cd10:	4618      	mov	r0, r3
 800cd12:	4770      	bx	lr
 800cd14:	2300      	movs	r3, #0
 800cd16:	e7e4      	b.n	800cce2 <__hi0bits+0xa>

0800cd18 <__lo0bits>:
 800cd18:	6803      	ldr	r3, [r0, #0]
 800cd1a:	f013 0207 	ands.w	r2, r3, #7
 800cd1e:	4601      	mov	r1, r0
 800cd20:	d00b      	beq.n	800cd3a <__lo0bits+0x22>
 800cd22:	07da      	lsls	r2, r3, #31
 800cd24:	d423      	bmi.n	800cd6e <__lo0bits+0x56>
 800cd26:	0798      	lsls	r0, r3, #30
 800cd28:	bf49      	itett	mi
 800cd2a:	085b      	lsrmi	r3, r3, #1
 800cd2c:	089b      	lsrpl	r3, r3, #2
 800cd2e:	2001      	movmi	r0, #1
 800cd30:	600b      	strmi	r3, [r1, #0]
 800cd32:	bf5c      	itt	pl
 800cd34:	600b      	strpl	r3, [r1, #0]
 800cd36:	2002      	movpl	r0, #2
 800cd38:	4770      	bx	lr
 800cd3a:	b298      	uxth	r0, r3
 800cd3c:	b9a8      	cbnz	r0, 800cd6a <__lo0bits+0x52>
 800cd3e:	0c1b      	lsrs	r3, r3, #16
 800cd40:	2010      	movs	r0, #16
 800cd42:	b2da      	uxtb	r2, r3
 800cd44:	b90a      	cbnz	r2, 800cd4a <__lo0bits+0x32>
 800cd46:	3008      	adds	r0, #8
 800cd48:	0a1b      	lsrs	r3, r3, #8
 800cd4a:	071a      	lsls	r2, r3, #28
 800cd4c:	bf04      	itt	eq
 800cd4e:	091b      	lsreq	r3, r3, #4
 800cd50:	3004      	addeq	r0, #4
 800cd52:	079a      	lsls	r2, r3, #30
 800cd54:	bf04      	itt	eq
 800cd56:	089b      	lsreq	r3, r3, #2
 800cd58:	3002      	addeq	r0, #2
 800cd5a:	07da      	lsls	r2, r3, #31
 800cd5c:	d403      	bmi.n	800cd66 <__lo0bits+0x4e>
 800cd5e:	085b      	lsrs	r3, r3, #1
 800cd60:	f100 0001 	add.w	r0, r0, #1
 800cd64:	d005      	beq.n	800cd72 <__lo0bits+0x5a>
 800cd66:	600b      	str	r3, [r1, #0]
 800cd68:	4770      	bx	lr
 800cd6a:	4610      	mov	r0, r2
 800cd6c:	e7e9      	b.n	800cd42 <__lo0bits+0x2a>
 800cd6e:	2000      	movs	r0, #0
 800cd70:	4770      	bx	lr
 800cd72:	2020      	movs	r0, #32
 800cd74:	4770      	bx	lr
	...

0800cd78 <__i2b>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	460c      	mov	r4, r1
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	f7ff ff03 	bl	800cb88 <_Balloc>
 800cd82:	4602      	mov	r2, r0
 800cd84:	b928      	cbnz	r0, 800cd92 <__i2b+0x1a>
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <__i2b+0x24>)
 800cd88:	4805      	ldr	r0, [pc, #20]	; (800cda0 <__i2b+0x28>)
 800cd8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cd8e:	f7fe ff41 	bl	800bc14 <__assert_func>
 800cd92:	2301      	movs	r3, #1
 800cd94:	6144      	str	r4, [r0, #20]
 800cd96:	6103      	str	r3, [r0, #16]
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0800f3b0 	.word	0x0800f3b0
 800cda0:	0800f424 	.word	0x0800f424

0800cda4 <__multiply>:
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda8:	4691      	mov	r9, r2
 800cdaa:	690a      	ldr	r2, [r1, #16]
 800cdac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdb0:	429a      	cmp	r2, r3
 800cdb2:	bfb8      	it	lt
 800cdb4:	460b      	movlt	r3, r1
 800cdb6:	460c      	mov	r4, r1
 800cdb8:	bfbc      	itt	lt
 800cdba:	464c      	movlt	r4, r9
 800cdbc:	4699      	movlt	r9, r3
 800cdbe:	6927      	ldr	r7, [r4, #16]
 800cdc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdc4:	68a3      	ldr	r3, [r4, #8]
 800cdc6:	6861      	ldr	r1, [r4, #4]
 800cdc8:	eb07 060a 	add.w	r6, r7, sl
 800cdcc:	42b3      	cmp	r3, r6
 800cdce:	b085      	sub	sp, #20
 800cdd0:	bfb8      	it	lt
 800cdd2:	3101      	addlt	r1, #1
 800cdd4:	f7ff fed8 	bl	800cb88 <_Balloc>
 800cdd8:	b930      	cbnz	r0, 800cde8 <__multiply+0x44>
 800cdda:	4602      	mov	r2, r0
 800cddc:	4b44      	ldr	r3, [pc, #272]	; (800cef0 <__multiply+0x14c>)
 800cdde:	4845      	ldr	r0, [pc, #276]	; (800cef4 <__multiply+0x150>)
 800cde0:	f240 115d 	movw	r1, #349	; 0x15d
 800cde4:	f7fe ff16 	bl	800bc14 <__assert_func>
 800cde8:	f100 0514 	add.w	r5, r0, #20
 800cdec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdf0:	462b      	mov	r3, r5
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	4543      	cmp	r3, r8
 800cdf6:	d321      	bcc.n	800ce3c <__multiply+0x98>
 800cdf8:	f104 0314 	add.w	r3, r4, #20
 800cdfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce00:	f109 0314 	add.w	r3, r9, #20
 800ce04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce08:	9202      	str	r2, [sp, #8]
 800ce0a:	1b3a      	subs	r2, r7, r4
 800ce0c:	3a15      	subs	r2, #21
 800ce0e:	f022 0203 	bic.w	r2, r2, #3
 800ce12:	3204      	adds	r2, #4
 800ce14:	f104 0115 	add.w	r1, r4, #21
 800ce18:	428f      	cmp	r7, r1
 800ce1a:	bf38      	it	cc
 800ce1c:	2204      	movcc	r2, #4
 800ce1e:	9201      	str	r2, [sp, #4]
 800ce20:	9a02      	ldr	r2, [sp, #8]
 800ce22:	9303      	str	r3, [sp, #12]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d80c      	bhi.n	800ce42 <__multiply+0x9e>
 800ce28:	2e00      	cmp	r6, #0
 800ce2a:	dd03      	ble.n	800ce34 <__multiply+0x90>
 800ce2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d05a      	beq.n	800ceea <__multiply+0x146>
 800ce34:	6106      	str	r6, [r0, #16]
 800ce36:	b005      	add	sp, #20
 800ce38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3c:	f843 2b04 	str.w	r2, [r3], #4
 800ce40:	e7d8      	b.n	800cdf4 <__multiply+0x50>
 800ce42:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce46:	f1ba 0f00 	cmp.w	sl, #0
 800ce4a:	d024      	beq.n	800ce96 <__multiply+0xf2>
 800ce4c:	f104 0e14 	add.w	lr, r4, #20
 800ce50:	46a9      	mov	r9, r5
 800ce52:	f04f 0c00 	mov.w	ip, #0
 800ce56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce5a:	f8d9 1000 	ldr.w	r1, [r9]
 800ce5e:	fa1f fb82 	uxth.w	fp, r2
 800ce62:	b289      	uxth	r1, r1
 800ce64:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce6c:	f8d9 2000 	ldr.w	r2, [r9]
 800ce70:	4461      	add	r1, ip
 800ce72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce76:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce7e:	b289      	uxth	r1, r1
 800ce80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce84:	4577      	cmp	r7, lr
 800ce86:	f849 1b04 	str.w	r1, [r9], #4
 800ce8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce8e:	d8e2      	bhi.n	800ce56 <__multiply+0xb2>
 800ce90:	9a01      	ldr	r2, [sp, #4]
 800ce92:	f845 c002 	str.w	ip, [r5, r2]
 800ce96:	9a03      	ldr	r2, [sp, #12]
 800ce98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	f1b9 0f00 	cmp.w	r9, #0
 800cea2:	d020      	beq.n	800cee6 <__multiply+0x142>
 800cea4:	6829      	ldr	r1, [r5, #0]
 800cea6:	f104 0c14 	add.w	ip, r4, #20
 800ceaa:	46ae      	mov	lr, r5
 800ceac:	f04f 0a00 	mov.w	sl, #0
 800ceb0:	f8bc b000 	ldrh.w	fp, [ip]
 800ceb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ceb8:	fb09 220b 	mla	r2, r9, fp, r2
 800cebc:	4492      	add	sl, r2
 800cebe:	b289      	uxth	r1, r1
 800cec0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cec4:	f84e 1b04 	str.w	r1, [lr], #4
 800cec8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cecc:	f8be 1000 	ldrh.w	r1, [lr]
 800ced0:	0c12      	lsrs	r2, r2, #16
 800ced2:	fb09 1102 	mla	r1, r9, r2, r1
 800ced6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ceda:	4567      	cmp	r7, ip
 800cedc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cee0:	d8e6      	bhi.n	800ceb0 <__multiply+0x10c>
 800cee2:	9a01      	ldr	r2, [sp, #4]
 800cee4:	50a9      	str	r1, [r5, r2]
 800cee6:	3504      	adds	r5, #4
 800cee8:	e79a      	b.n	800ce20 <__multiply+0x7c>
 800ceea:	3e01      	subs	r6, #1
 800ceec:	e79c      	b.n	800ce28 <__multiply+0x84>
 800ceee:	bf00      	nop
 800cef0:	0800f3b0 	.word	0x0800f3b0
 800cef4:	0800f424 	.word	0x0800f424

0800cef8 <__pow5mult>:
 800cef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cefc:	4615      	mov	r5, r2
 800cefe:	f012 0203 	ands.w	r2, r2, #3
 800cf02:	4606      	mov	r6, r0
 800cf04:	460f      	mov	r7, r1
 800cf06:	d007      	beq.n	800cf18 <__pow5mult+0x20>
 800cf08:	4c25      	ldr	r4, [pc, #148]	; (800cfa0 <__pow5mult+0xa8>)
 800cf0a:	3a01      	subs	r2, #1
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf12:	f7ff fe9b 	bl	800cc4c <__multadd>
 800cf16:	4607      	mov	r7, r0
 800cf18:	10ad      	asrs	r5, r5, #2
 800cf1a:	d03d      	beq.n	800cf98 <__pow5mult+0xa0>
 800cf1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cf1e:	b97c      	cbnz	r4, 800cf40 <__pow5mult+0x48>
 800cf20:	2010      	movs	r0, #16
 800cf22:	f7fd fe1d 	bl	800ab60 <malloc>
 800cf26:	4602      	mov	r2, r0
 800cf28:	6270      	str	r0, [r6, #36]	; 0x24
 800cf2a:	b928      	cbnz	r0, 800cf38 <__pow5mult+0x40>
 800cf2c:	4b1d      	ldr	r3, [pc, #116]	; (800cfa4 <__pow5mult+0xac>)
 800cf2e:	481e      	ldr	r0, [pc, #120]	; (800cfa8 <__pow5mult+0xb0>)
 800cf30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cf34:	f7fe fe6e 	bl	800bc14 <__assert_func>
 800cf38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf3c:	6004      	str	r4, [r0, #0]
 800cf3e:	60c4      	str	r4, [r0, #12]
 800cf40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cf44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf48:	b94c      	cbnz	r4, 800cf5e <__pow5mult+0x66>
 800cf4a:	f240 2171 	movw	r1, #625	; 0x271
 800cf4e:	4630      	mov	r0, r6
 800cf50:	f7ff ff12 	bl	800cd78 <__i2b>
 800cf54:	2300      	movs	r3, #0
 800cf56:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf5a:	4604      	mov	r4, r0
 800cf5c:	6003      	str	r3, [r0, #0]
 800cf5e:	f04f 0900 	mov.w	r9, #0
 800cf62:	07eb      	lsls	r3, r5, #31
 800cf64:	d50a      	bpl.n	800cf7c <__pow5mult+0x84>
 800cf66:	4639      	mov	r1, r7
 800cf68:	4622      	mov	r2, r4
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f7ff ff1a 	bl	800cda4 <__multiply>
 800cf70:	4639      	mov	r1, r7
 800cf72:	4680      	mov	r8, r0
 800cf74:	4630      	mov	r0, r6
 800cf76:	f7ff fe47 	bl	800cc08 <_Bfree>
 800cf7a:	4647      	mov	r7, r8
 800cf7c:	106d      	asrs	r5, r5, #1
 800cf7e:	d00b      	beq.n	800cf98 <__pow5mult+0xa0>
 800cf80:	6820      	ldr	r0, [r4, #0]
 800cf82:	b938      	cbnz	r0, 800cf94 <__pow5mult+0x9c>
 800cf84:	4622      	mov	r2, r4
 800cf86:	4621      	mov	r1, r4
 800cf88:	4630      	mov	r0, r6
 800cf8a:	f7ff ff0b 	bl	800cda4 <__multiply>
 800cf8e:	6020      	str	r0, [r4, #0]
 800cf90:	f8c0 9000 	str.w	r9, [r0]
 800cf94:	4604      	mov	r4, r0
 800cf96:	e7e4      	b.n	800cf62 <__pow5mult+0x6a>
 800cf98:	4638      	mov	r0, r7
 800cf9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf9e:	bf00      	nop
 800cfa0:	0800f570 	.word	0x0800f570
 800cfa4:	0800f33e 	.word	0x0800f33e
 800cfa8:	0800f424 	.word	0x0800f424

0800cfac <__lshift>:
 800cfac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfb0:	460c      	mov	r4, r1
 800cfb2:	6849      	ldr	r1, [r1, #4]
 800cfb4:	6923      	ldr	r3, [r4, #16]
 800cfb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfba:	68a3      	ldr	r3, [r4, #8]
 800cfbc:	4607      	mov	r7, r0
 800cfbe:	4691      	mov	r9, r2
 800cfc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfc4:	f108 0601 	add.w	r6, r8, #1
 800cfc8:	42b3      	cmp	r3, r6
 800cfca:	db0b      	blt.n	800cfe4 <__lshift+0x38>
 800cfcc:	4638      	mov	r0, r7
 800cfce:	f7ff fddb 	bl	800cb88 <_Balloc>
 800cfd2:	4605      	mov	r5, r0
 800cfd4:	b948      	cbnz	r0, 800cfea <__lshift+0x3e>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	4b2a      	ldr	r3, [pc, #168]	; (800d084 <__lshift+0xd8>)
 800cfda:	482b      	ldr	r0, [pc, #172]	; (800d088 <__lshift+0xdc>)
 800cfdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cfe0:	f7fe fe18 	bl	800bc14 <__assert_func>
 800cfe4:	3101      	adds	r1, #1
 800cfe6:	005b      	lsls	r3, r3, #1
 800cfe8:	e7ee      	b.n	800cfc8 <__lshift+0x1c>
 800cfea:	2300      	movs	r3, #0
 800cfec:	f100 0114 	add.w	r1, r0, #20
 800cff0:	f100 0210 	add.w	r2, r0, #16
 800cff4:	4618      	mov	r0, r3
 800cff6:	4553      	cmp	r3, sl
 800cff8:	db37      	blt.n	800d06a <__lshift+0xbe>
 800cffa:	6920      	ldr	r0, [r4, #16]
 800cffc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d000:	f104 0314 	add.w	r3, r4, #20
 800d004:	f019 091f 	ands.w	r9, r9, #31
 800d008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d00c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d010:	d02f      	beq.n	800d072 <__lshift+0xc6>
 800d012:	f1c9 0e20 	rsb	lr, r9, #32
 800d016:	468a      	mov	sl, r1
 800d018:	f04f 0c00 	mov.w	ip, #0
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	fa02 f209 	lsl.w	r2, r2, r9
 800d022:	ea42 020c 	orr.w	r2, r2, ip
 800d026:	f84a 2b04 	str.w	r2, [sl], #4
 800d02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d02e:	4298      	cmp	r0, r3
 800d030:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d034:	d8f2      	bhi.n	800d01c <__lshift+0x70>
 800d036:	1b03      	subs	r3, r0, r4
 800d038:	3b15      	subs	r3, #21
 800d03a:	f023 0303 	bic.w	r3, r3, #3
 800d03e:	3304      	adds	r3, #4
 800d040:	f104 0215 	add.w	r2, r4, #21
 800d044:	4290      	cmp	r0, r2
 800d046:	bf38      	it	cc
 800d048:	2304      	movcc	r3, #4
 800d04a:	f841 c003 	str.w	ip, [r1, r3]
 800d04e:	f1bc 0f00 	cmp.w	ip, #0
 800d052:	d001      	beq.n	800d058 <__lshift+0xac>
 800d054:	f108 0602 	add.w	r6, r8, #2
 800d058:	3e01      	subs	r6, #1
 800d05a:	4638      	mov	r0, r7
 800d05c:	612e      	str	r6, [r5, #16]
 800d05e:	4621      	mov	r1, r4
 800d060:	f7ff fdd2 	bl	800cc08 <_Bfree>
 800d064:	4628      	mov	r0, r5
 800d066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d06e:	3301      	adds	r3, #1
 800d070:	e7c1      	b.n	800cff6 <__lshift+0x4a>
 800d072:	3904      	subs	r1, #4
 800d074:	f853 2b04 	ldr.w	r2, [r3], #4
 800d078:	f841 2f04 	str.w	r2, [r1, #4]!
 800d07c:	4298      	cmp	r0, r3
 800d07e:	d8f9      	bhi.n	800d074 <__lshift+0xc8>
 800d080:	e7ea      	b.n	800d058 <__lshift+0xac>
 800d082:	bf00      	nop
 800d084:	0800f3b0 	.word	0x0800f3b0
 800d088:	0800f424 	.word	0x0800f424

0800d08c <__mcmp>:
 800d08c:	b530      	push	{r4, r5, lr}
 800d08e:	6902      	ldr	r2, [r0, #16]
 800d090:	690c      	ldr	r4, [r1, #16]
 800d092:	1b12      	subs	r2, r2, r4
 800d094:	d10e      	bne.n	800d0b4 <__mcmp+0x28>
 800d096:	f100 0314 	add.w	r3, r0, #20
 800d09a:	3114      	adds	r1, #20
 800d09c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d0a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d0a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d0a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d0ac:	42a5      	cmp	r5, r4
 800d0ae:	d003      	beq.n	800d0b8 <__mcmp+0x2c>
 800d0b0:	d305      	bcc.n	800d0be <__mcmp+0x32>
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	4610      	mov	r0, r2
 800d0b6:	bd30      	pop	{r4, r5, pc}
 800d0b8:	4283      	cmp	r3, r0
 800d0ba:	d3f3      	bcc.n	800d0a4 <__mcmp+0x18>
 800d0bc:	e7fa      	b.n	800d0b4 <__mcmp+0x28>
 800d0be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d0c2:	e7f7      	b.n	800d0b4 <__mcmp+0x28>

0800d0c4 <__mdiff>:
 800d0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	4611      	mov	r1, r2
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	4690      	mov	r8, r2
 800d0d2:	f7ff ffdb 	bl	800d08c <__mcmp>
 800d0d6:	1e05      	subs	r5, r0, #0
 800d0d8:	d110      	bne.n	800d0fc <__mdiff+0x38>
 800d0da:	4629      	mov	r1, r5
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff fd53 	bl	800cb88 <_Balloc>
 800d0e2:	b930      	cbnz	r0, 800d0f2 <__mdiff+0x2e>
 800d0e4:	4b3a      	ldr	r3, [pc, #232]	; (800d1d0 <__mdiff+0x10c>)
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	f240 2132 	movw	r1, #562	; 0x232
 800d0ec:	4839      	ldr	r0, [pc, #228]	; (800d1d4 <__mdiff+0x110>)
 800d0ee:	f7fe fd91 	bl	800bc14 <__assert_func>
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0fc:	bfa4      	itt	ge
 800d0fe:	4643      	movge	r3, r8
 800d100:	46a0      	movge	r8, r4
 800d102:	4630      	mov	r0, r6
 800d104:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d108:	bfa6      	itte	ge
 800d10a:	461c      	movge	r4, r3
 800d10c:	2500      	movge	r5, #0
 800d10e:	2501      	movlt	r5, #1
 800d110:	f7ff fd3a 	bl	800cb88 <_Balloc>
 800d114:	b920      	cbnz	r0, 800d120 <__mdiff+0x5c>
 800d116:	4b2e      	ldr	r3, [pc, #184]	; (800d1d0 <__mdiff+0x10c>)
 800d118:	4602      	mov	r2, r0
 800d11a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d11e:	e7e5      	b.n	800d0ec <__mdiff+0x28>
 800d120:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d124:	6926      	ldr	r6, [r4, #16]
 800d126:	60c5      	str	r5, [r0, #12]
 800d128:	f104 0914 	add.w	r9, r4, #20
 800d12c:	f108 0514 	add.w	r5, r8, #20
 800d130:	f100 0e14 	add.w	lr, r0, #20
 800d134:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d138:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d13c:	f108 0210 	add.w	r2, r8, #16
 800d140:	46f2      	mov	sl, lr
 800d142:	2100      	movs	r1, #0
 800d144:	f859 3b04 	ldr.w	r3, [r9], #4
 800d148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d14c:	fa1f f883 	uxth.w	r8, r3
 800d150:	fa11 f18b 	uxtah	r1, r1, fp
 800d154:	0c1b      	lsrs	r3, r3, #16
 800d156:	eba1 0808 	sub.w	r8, r1, r8
 800d15a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d15e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d162:	fa1f f888 	uxth.w	r8, r8
 800d166:	1419      	asrs	r1, r3, #16
 800d168:	454e      	cmp	r6, r9
 800d16a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d16e:	f84a 3b04 	str.w	r3, [sl], #4
 800d172:	d8e7      	bhi.n	800d144 <__mdiff+0x80>
 800d174:	1b33      	subs	r3, r6, r4
 800d176:	3b15      	subs	r3, #21
 800d178:	f023 0303 	bic.w	r3, r3, #3
 800d17c:	3304      	adds	r3, #4
 800d17e:	3415      	adds	r4, #21
 800d180:	42a6      	cmp	r6, r4
 800d182:	bf38      	it	cc
 800d184:	2304      	movcc	r3, #4
 800d186:	441d      	add	r5, r3
 800d188:	4473      	add	r3, lr
 800d18a:	469e      	mov	lr, r3
 800d18c:	462e      	mov	r6, r5
 800d18e:	4566      	cmp	r6, ip
 800d190:	d30e      	bcc.n	800d1b0 <__mdiff+0xec>
 800d192:	f10c 0203 	add.w	r2, ip, #3
 800d196:	1b52      	subs	r2, r2, r5
 800d198:	f022 0203 	bic.w	r2, r2, #3
 800d19c:	3d03      	subs	r5, #3
 800d19e:	45ac      	cmp	ip, r5
 800d1a0:	bf38      	it	cc
 800d1a2:	2200      	movcc	r2, #0
 800d1a4:	441a      	add	r2, r3
 800d1a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d1aa:	b17b      	cbz	r3, 800d1cc <__mdiff+0x108>
 800d1ac:	6107      	str	r7, [r0, #16]
 800d1ae:	e7a3      	b.n	800d0f8 <__mdiff+0x34>
 800d1b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800d1b4:	fa11 f288 	uxtah	r2, r1, r8
 800d1b8:	1414      	asrs	r4, r2, #16
 800d1ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1be:	b292      	uxth	r2, r2
 800d1c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d1c4:	f84e 2b04 	str.w	r2, [lr], #4
 800d1c8:	1421      	asrs	r1, r4, #16
 800d1ca:	e7e0      	b.n	800d18e <__mdiff+0xca>
 800d1cc:	3f01      	subs	r7, #1
 800d1ce:	e7ea      	b.n	800d1a6 <__mdiff+0xe2>
 800d1d0:	0800f3b0 	.word	0x0800f3b0
 800d1d4:	0800f424 	.word	0x0800f424

0800d1d8 <__d2b>:
 800d1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1dc:	4689      	mov	r9, r1
 800d1de:	2101      	movs	r1, #1
 800d1e0:	ec57 6b10 	vmov	r6, r7, d0
 800d1e4:	4690      	mov	r8, r2
 800d1e6:	f7ff fccf 	bl	800cb88 <_Balloc>
 800d1ea:	4604      	mov	r4, r0
 800d1ec:	b930      	cbnz	r0, 800d1fc <__d2b+0x24>
 800d1ee:	4602      	mov	r2, r0
 800d1f0:	4b25      	ldr	r3, [pc, #148]	; (800d288 <__d2b+0xb0>)
 800d1f2:	4826      	ldr	r0, [pc, #152]	; (800d28c <__d2b+0xb4>)
 800d1f4:	f240 310a 	movw	r1, #778	; 0x30a
 800d1f8:	f7fe fd0c 	bl	800bc14 <__assert_func>
 800d1fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d204:	bb35      	cbnz	r5, 800d254 <__d2b+0x7c>
 800d206:	2e00      	cmp	r6, #0
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	d028      	beq.n	800d25e <__d2b+0x86>
 800d20c:	4668      	mov	r0, sp
 800d20e:	9600      	str	r6, [sp, #0]
 800d210:	f7ff fd82 	bl	800cd18 <__lo0bits>
 800d214:	9900      	ldr	r1, [sp, #0]
 800d216:	b300      	cbz	r0, 800d25a <__d2b+0x82>
 800d218:	9a01      	ldr	r2, [sp, #4]
 800d21a:	f1c0 0320 	rsb	r3, r0, #32
 800d21e:	fa02 f303 	lsl.w	r3, r2, r3
 800d222:	430b      	orrs	r3, r1
 800d224:	40c2      	lsrs	r2, r0
 800d226:	6163      	str	r3, [r4, #20]
 800d228:	9201      	str	r2, [sp, #4]
 800d22a:	9b01      	ldr	r3, [sp, #4]
 800d22c:	61a3      	str	r3, [r4, #24]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	bf14      	ite	ne
 800d232:	2202      	movne	r2, #2
 800d234:	2201      	moveq	r2, #1
 800d236:	6122      	str	r2, [r4, #16]
 800d238:	b1d5      	cbz	r5, 800d270 <__d2b+0x98>
 800d23a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d23e:	4405      	add	r5, r0
 800d240:	f8c9 5000 	str.w	r5, [r9]
 800d244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d248:	f8c8 0000 	str.w	r0, [r8]
 800d24c:	4620      	mov	r0, r4
 800d24e:	b003      	add	sp, #12
 800d250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d258:	e7d5      	b.n	800d206 <__d2b+0x2e>
 800d25a:	6161      	str	r1, [r4, #20]
 800d25c:	e7e5      	b.n	800d22a <__d2b+0x52>
 800d25e:	a801      	add	r0, sp, #4
 800d260:	f7ff fd5a 	bl	800cd18 <__lo0bits>
 800d264:	9b01      	ldr	r3, [sp, #4]
 800d266:	6163      	str	r3, [r4, #20]
 800d268:	2201      	movs	r2, #1
 800d26a:	6122      	str	r2, [r4, #16]
 800d26c:	3020      	adds	r0, #32
 800d26e:	e7e3      	b.n	800d238 <__d2b+0x60>
 800d270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d278:	f8c9 0000 	str.w	r0, [r9]
 800d27c:	6918      	ldr	r0, [r3, #16]
 800d27e:	f7ff fd2b 	bl	800ccd8 <__hi0bits>
 800d282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d286:	e7df      	b.n	800d248 <__d2b+0x70>
 800d288:	0800f3b0 	.word	0x0800f3b0
 800d28c:	0800f424 	.word	0x0800f424

0800d290 <_realloc_r>:
 800d290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d294:	4680      	mov	r8, r0
 800d296:	4614      	mov	r4, r2
 800d298:	460e      	mov	r6, r1
 800d29a:	b921      	cbnz	r1, 800d2a6 <_realloc_r+0x16>
 800d29c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a0:	4611      	mov	r1, r2
 800d2a2:	f7fd bd5d 	b.w	800ad60 <_malloc_r>
 800d2a6:	b92a      	cbnz	r2, 800d2b4 <_realloc_r+0x24>
 800d2a8:	f7fd fcba 	bl	800ac20 <_free_r>
 800d2ac:	4625      	mov	r5, r4
 800d2ae:	4628      	mov	r0, r5
 800d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2b4:	f000 fbe6 	bl	800da84 <_malloc_usable_size_r>
 800d2b8:	4284      	cmp	r4, r0
 800d2ba:	4607      	mov	r7, r0
 800d2bc:	d802      	bhi.n	800d2c4 <_realloc_r+0x34>
 800d2be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2c2:	d812      	bhi.n	800d2ea <_realloc_r+0x5a>
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	4640      	mov	r0, r8
 800d2c8:	f7fd fd4a 	bl	800ad60 <_malloc_r>
 800d2cc:	4605      	mov	r5, r0
 800d2ce:	2800      	cmp	r0, #0
 800d2d0:	d0ed      	beq.n	800d2ae <_realloc_r+0x1e>
 800d2d2:	42bc      	cmp	r4, r7
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4631      	mov	r1, r6
 800d2d8:	bf28      	it	cs
 800d2da:	463a      	movcs	r2, r7
 800d2dc:	f7fd fc50 	bl	800ab80 <memcpy>
 800d2e0:	4631      	mov	r1, r6
 800d2e2:	4640      	mov	r0, r8
 800d2e4:	f7fd fc9c 	bl	800ac20 <_free_r>
 800d2e8:	e7e1      	b.n	800d2ae <_realloc_r+0x1e>
 800d2ea:	4635      	mov	r5, r6
 800d2ec:	e7df      	b.n	800d2ae <_realloc_r+0x1e>

0800d2ee <__sfputc_r>:
 800d2ee:	6893      	ldr	r3, [r2, #8]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	b410      	push	{r4}
 800d2f6:	6093      	str	r3, [r2, #8]
 800d2f8:	da08      	bge.n	800d30c <__sfputc_r+0x1e>
 800d2fa:	6994      	ldr	r4, [r2, #24]
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	db01      	blt.n	800d304 <__sfputc_r+0x16>
 800d300:	290a      	cmp	r1, #10
 800d302:	d103      	bne.n	800d30c <__sfputc_r+0x1e>
 800d304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d308:	f000 b98e 	b.w	800d628 <__swbuf_r>
 800d30c:	6813      	ldr	r3, [r2, #0]
 800d30e:	1c58      	adds	r0, r3, #1
 800d310:	6010      	str	r0, [r2, #0]
 800d312:	7019      	strb	r1, [r3, #0]
 800d314:	4608      	mov	r0, r1
 800d316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <__sfputs_r>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	4606      	mov	r6, r0
 800d320:	460f      	mov	r7, r1
 800d322:	4614      	mov	r4, r2
 800d324:	18d5      	adds	r5, r2, r3
 800d326:	42ac      	cmp	r4, r5
 800d328:	d101      	bne.n	800d32e <__sfputs_r+0x12>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e007      	b.n	800d33e <__sfputs_r+0x22>
 800d32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d332:	463a      	mov	r2, r7
 800d334:	4630      	mov	r0, r6
 800d336:	f7ff ffda 	bl	800d2ee <__sfputc_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	d1f3      	bne.n	800d326 <__sfputs_r+0xa>
 800d33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d340 <_vfiprintf_r>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	460d      	mov	r5, r1
 800d346:	b09d      	sub	sp, #116	; 0x74
 800d348:	4614      	mov	r4, r2
 800d34a:	4698      	mov	r8, r3
 800d34c:	4606      	mov	r6, r0
 800d34e:	b118      	cbz	r0, 800d358 <_vfiprintf_r+0x18>
 800d350:	6983      	ldr	r3, [r0, #24]
 800d352:	b90b      	cbnz	r3, 800d358 <_vfiprintf_r+0x18>
 800d354:	f7ff fb54 	bl	800ca00 <__sinit>
 800d358:	4b89      	ldr	r3, [pc, #548]	; (800d580 <_vfiprintf_r+0x240>)
 800d35a:	429d      	cmp	r5, r3
 800d35c:	d11b      	bne.n	800d396 <_vfiprintf_r+0x56>
 800d35e:	6875      	ldr	r5, [r6, #4]
 800d360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d362:	07d9      	lsls	r1, r3, #31
 800d364:	d405      	bmi.n	800d372 <_vfiprintf_r+0x32>
 800d366:	89ab      	ldrh	r3, [r5, #12]
 800d368:	059a      	lsls	r2, r3, #22
 800d36a:	d402      	bmi.n	800d372 <_vfiprintf_r+0x32>
 800d36c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d36e:	f7ff fbfc 	bl	800cb6a <__retarget_lock_acquire_recursive>
 800d372:	89ab      	ldrh	r3, [r5, #12]
 800d374:	071b      	lsls	r3, r3, #28
 800d376:	d501      	bpl.n	800d37c <_vfiprintf_r+0x3c>
 800d378:	692b      	ldr	r3, [r5, #16]
 800d37a:	b9eb      	cbnz	r3, 800d3b8 <_vfiprintf_r+0x78>
 800d37c:	4629      	mov	r1, r5
 800d37e:	4630      	mov	r0, r6
 800d380:	f000 f9b6 	bl	800d6f0 <__swsetup_r>
 800d384:	b1c0      	cbz	r0, 800d3b8 <_vfiprintf_r+0x78>
 800d386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d388:	07dc      	lsls	r4, r3, #31
 800d38a:	d50e      	bpl.n	800d3aa <_vfiprintf_r+0x6a>
 800d38c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d390:	b01d      	add	sp, #116	; 0x74
 800d392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d396:	4b7b      	ldr	r3, [pc, #492]	; (800d584 <_vfiprintf_r+0x244>)
 800d398:	429d      	cmp	r5, r3
 800d39a:	d101      	bne.n	800d3a0 <_vfiprintf_r+0x60>
 800d39c:	68b5      	ldr	r5, [r6, #8]
 800d39e:	e7df      	b.n	800d360 <_vfiprintf_r+0x20>
 800d3a0:	4b79      	ldr	r3, [pc, #484]	; (800d588 <_vfiprintf_r+0x248>)
 800d3a2:	429d      	cmp	r5, r3
 800d3a4:	bf08      	it	eq
 800d3a6:	68f5      	ldreq	r5, [r6, #12]
 800d3a8:	e7da      	b.n	800d360 <_vfiprintf_r+0x20>
 800d3aa:	89ab      	ldrh	r3, [r5, #12]
 800d3ac:	0598      	lsls	r0, r3, #22
 800d3ae:	d4ed      	bmi.n	800d38c <_vfiprintf_r+0x4c>
 800d3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3b2:	f7ff fbdb 	bl	800cb6c <__retarget_lock_release_recursive>
 800d3b6:	e7e9      	b.n	800d38c <_vfiprintf_r+0x4c>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d3bc:	2320      	movs	r3, #32
 800d3be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3c6:	2330      	movs	r3, #48	; 0x30
 800d3c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d58c <_vfiprintf_r+0x24c>
 800d3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3d0:	f04f 0901 	mov.w	r9, #1
 800d3d4:	4623      	mov	r3, r4
 800d3d6:	469a      	mov	sl, r3
 800d3d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3dc:	b10a      	cbz	r2, 800d3e2 <_vfiprintf_r+0xa2>
 800d3de:	2a25      	cmp	r2, #37	; 0x25
 800d3e0:	d1f9      	bne.n	800d3d6 <_vfiprintf_r+0x96>
 800d3e2:	ebba 0b04 	subs.w	fp, sl, r4
 800d3e6:	d00b      	beq.n	800d400 <_vfiprintf_r+0xc0>
 800d3e8:	465b      	mov	r3, fp
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	4629      	mov	r1, r5
 800d3ee:	4630      	mov	r0, r6
 800d3f0:	f7ff ff94 	bl	800d31c <__sfputs_r>
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	f000 80aa 	beq.w	800d54e <_vfiprintf_r+0x20e>
 800d3fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3fc:	445a      	add	r2, fp
 800d3fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d400:	f89a 3000 	ldrb.w	r3, [sl]
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 80a2 	beq.w	800d54e <_vfiprintf_r+0x20e>
 800d40a:	2300      	movs	r3, #0
 800d40c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d414:	f10a 0a01 	add.w	sl, sl, #1
 800d418:	9304      	str	r3, [sp, #16]
 800d41a:	9307      	str	r3, [sp, #28]
 800d41c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d420:	931a      	str	r3, [sp, #104]	; 0x68
 800d422:	4654      	mov	r4, sl
 800d424:	2205      	movs	r2, #5
 800d426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d42a:	4858      	ldr	r0, [pc, #352]	; (800d58c <_vfiprintf_r+0x24c>)
 800d42c:	f7f2 fef8 	bl	8000220 <memchr>
 800d430:	9a04      	ldr	r2, [sp, #16]
 800d432:	b9d8      	cbnz	r0, 800d46c <_vfiprintf_r+0x12c>
 800d434:	06d1      	lsls	r1, r2, #27
 800d436:	bf44      	itt	mi
 800d438:	2320      	movmi	r3, #32
 800d43a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d43e:	0713      	lsls	r3, r2, #28
 800d440:	bf44      	itt	mi
 800d442:	232b      	movmi	r3, #43	; 0x2b
 800d444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d448:	f89a 3000 	ldrb.w	r3, [sl]
 800d44c:	2b2a      	cmp	r3, #42	; 0x2a
 800d44e:	d015      	beq.n	800d47c <_vfiprintf_r+0x13c>
 800d450:	9a07      	ldr	r2, [sp, #28]
 800d452:	4654      	mov	r4, sl
 800d454:	2000      	movs	r0, #0
 800d456:	f04f 0c0a 	mov.w	ip, #10
 800d45a:	4621      	mov	r1, r4
 800d45c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d460:	3b30      	subs	r3, #48	; 0x30
 800d462:	2b09      	cmp	r3, #9
 800d464:	d94e      	bls.n	800d504 <_vfiprintf_r+0x1c4>
 800d466:	b1b0      	cbz	r0, 800d496 <_vfiprintf_r+0x156>
 800d468:	9207      	str	r2, [sp, #28]
 800d46a:	e014      	b.n	800d496 <_vfiprintf_r+0x156>
 800d46c:	eba0 0308 	sub.w	r3, r0, r8
 800d470:	fa09 f303 	lsl.w	r3, r9, r3
 800d474:	4313      	orrs	r3, r2
 800d476:	9304      	str	r3, [sp, #16]
 800d478:	46a2      	mov	sl, r4
 800d47a:	e7d2      	b.n	800d422 <_vfiprintf_r+0xe2>
 800d47c:	9b03      	ldr	r3, [sp, #12]
 800d47e:	1d19      	adds	r1, r3, #4
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	9103      	str	r1, [sp, #12]
 800d484:	2b00      	cmp	r3, #0
 800d486:	bfbb      	ittet	lt
 800d488:	425b      	neglt	r3, r3
 800d48a:	f042 0202 	orrlt.w	r2, r2, #2
 800d48e:	9307      	strge	r3, [sp, #28]
 800d490:	9307      	strlt	r3, [sp, #28]
 800d492:	bfb8      	it	lt
 800d494:	9204      	strlt	r2, [sp, #16]
 800d496:	7823      	ldrb	r3, [r4, #0]
 800d498:	2b2e      	cmp	r3, #46	; 0x2e
 800d49a:	d10c      	bne.n	800d4b6 <_vfiprintf_r+0x176>
 800d49c:	7863      	ldrb	r3, [r4, #1]
 800d49e:	2b2a      	cmp	r3, #42	; 0x2a
 800d4a0:	d135      	bne.n	800d50e <_vfiprintf_r+0x1ce>
 800d4a2:	9b03      	ldr	r3, [sp, #12]
 800d4a4:	1d1a      	adds	r2, r3, #4
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	9203      	str	r2, [sp, #12]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	bfb8      	it	lt
 800d4ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d4b2:	3402      	adds	r4, #2
 800d4b4:	9305      	str	r3, [sp, #20]
 800d4b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d59c <_vfiprintf_r+0x25c>
 800d4ba:	7821      	ldrb	r1, [r4, #0]
 800d4bc:	2203      	movs	r2, #3
 800d4be:	4650      	mov	r0, sl
 800d4c0:	f7f2 feae 	bl	8000220 <memchr>
 800d4c4:	b140      	cbz	r0, 800d4d8 <_vfiprintf_r+0x198>
 800d4c6:	2340      	movs	r3, #64	; 0x40
 800d4c8:	eba0 000a 	sub.w	r0, r0, sl
 800d4cc:	fa03 f000 	lsl.w	r0, r3, r0
 800d4d0:	9b04      	ldr	r3, [sp, #16]
 800d4d2:	4303      	orrs	r3, r0
 800d4d4:	3401      	adds	r4, #1
 800d4d6:	9304      	str	r3, [sp, #16]
 800d4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4dc:	482c      	ldr	r0, [pc, #176]	; (800d590 <_vfiprintf_r+0x250>)
 800d4de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4e2:	2206      	movs	r2, #6
 800d4e4:	f7f2 fe9c 	bl	8000220 <memchr>
 800d4e8:	2800      	cmp	r0, #0
 800d4ea:	d03f      	beq.n	800d56c <_vfiprintf_r+0x22c>
 800d4ec:	4b29      	ldr	r3, [pc, #164]	; (800d594 <_vfiprintf_r+0x254>)
 800d4ee:	bb1b      	cbnz	r3, 800d538 <_vfiprintf_r+0x1f8>
 800d4f0:	9b03      	ldr	r3, [sp, #12]
 800d4f2:	3307      	adds	r3, #7
 800d4f4:	f023 0307 	bic.w	r3, r3, #7
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	9303      	str	r3, [sp, #12]
 800d4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4fe:	443b      	add	r3, r7
 800d500:	9309      	str	r3, [sp, #36]	; 0x24
 800d502:	e767      	b.n	800d3d4 <_vfiprintf_r+0x94>
 800d504:	fb0c 3202 	mla	r2, ip, r2, r3
 800d508:	460c      	mov	r4, r1
 800d50a:	2001      	movs	r0, #1
 800d50c:	e7a5      	b.n	800d45a <_vfiprintf_r+0x11a>
 800d50e:	2300      	movs	r3, #0
 800d510:	3401      	adds	r4, #1
 800d512:	9305      	str	r3, [sp, #20]
 800d514:	4619      	mov	r1, r3
 800d516:	f04f 0c0a 	mov.w	ip, #10
 800d51a:	4620      	mov	r0, r4
 800d51c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d520:	3a30      	subs	r2, #48	; 0x30
 800d522:	2a09      	cmp	r2, #9
 800d524:	d903      	bls.n	800d52e <_vfiprintf_r+0x1ee>
 800d526:	2b00      	cmp	r3, #0
 800d528:	d0c5      	beq.n	800d4b6 <_vfiprintf_r+0x176>
 800d52a:	9105      	str	r1, [sp, #20]
 800d52c:	e7c3      	b.n	800d4b6 <_vfiprintf_r+0x176>
 800d52e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d532:	4604      	mov	r4, r0
 800d534:	2301      	movs	r3, #1
 800d536:	e7f0      	b.n	800d51a <_vfiprintf_r+0x1da>
 800d538:	ab03      	add	r3, sp, #12
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	462a      	mov	r2, r5
 800d53e:	4b16      	ldr	r3, [pc, #88]	; (800d598 <_vfiprintf_r+0x258>)
 800d540:	a904      	add	r1, sp, #16
 800d542:	4630      	mov	r0, r6
 800d544:	f7fd fe7c 	bl	800b240 <_printf_float>
 800d548:	4607      	mov	r7, r0
 800d54a:	1c78      	adds	r0, r7, #1
 800d54c:	d1d6      	bne.n	800d4fc <_vfiprintf_r+0x1bc>
 800d54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d550:	07d9      	lsls	r1, r3, #31
 800d552:	d405      	bmi.n	800d560 <_vfiprintf_r+0x220>
 800d554:	89ab      	ldrh	r3, [r5, #12]
 800d556:	059a      	lsls	r2, r3, #22
 800d558:	d402      	bmi.n	800d560 <_vfiprintf_r+0x220>
 800d55a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d55c:	f7ff fb06 	bl	800cb6c <__retarget_lock_release_recursive>
 800d560:	89ab      	ldrh	r3, [r5, #12]
 800d562:	065b      	lsls	r3, r3, #25
 800d564:	f53f af12 	bmi.w	800d38c <_vfiprintf_r+0x4c>
 800d568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d56a:	e711      	b.n	800d390 <_vfiprintf_r+0x50>
 800d56c:	ab03      	add	r3, sp, #12
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	462a      	mov	r2, r5
 800d572:	4b09      	ldr	r3, [pc, #36]	; (800d598 <_vfiprintf_r+0x258>)
 800d574:	a904      	add	r1, sp, #16
 800d576:	4630      	mov	r0, r6
 800d578:	f7fe f906 	bl	800b788 <_printf_i>
 800d57c:	e7e4      	b.n	800d548 <_vfiprintf_r+0x208>
 800d57e:	bf00      	nop
 800d580:	0800f3e4 	.word	0x0800f3e4
 800d584:	0800f404 	.word	0x0800f404
 800d588:	0800f3c4 	.word	0x0800f3c4
 800d58c:	0800f2b0 	.word	0x0800f2b0
 800d590:	0800f2ba 	.word	0x0800f2ba
 800d594:	0800b241 	.word	0x0800b241
 800d598:	0800d31d 	.word	0x0800d31d
 800d59c:	0800f2b6 	.word	0x0800f2b6

0800d5a0 <__sread>:
 800d5a0:	b510      	push	{r4, lr}
 800d5a2:	460c      	mov	r4, r1
 800d5a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5a8:	f000 fa74 	bl	800da94 <_read_r>
 800d5ac:	2800      	cmp	r0, #0
 800d5ae:	bfab      	itete	ge
 800d5b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d5b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d5b4:	181b      	addge	r3, r3, r0
 800d5b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d5ba:	bfac      	ite	ge
 800d5bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d5be:	81a3      	strhlt	r3, [r4, #12]
 800d5c0:	bd10      	pop	{r4, pc}

0800d5c2 <__swrite>:
 800d5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c6:	461f      	mov	r7, r3
 800d5c8:	898b      	ldrh	r3, [r1, #12]
 800d5ca:	05db      	lsls	r3, r3, #23
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	460c      	mov	r4, r1
 800d5d0:	4616      	mov	r6, r2
 800d5d2:	d505      	bpl.n	800d5e0 <__swrite+0x1e>
 800d5d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5d8:	2302      	movs	r3, #2
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f000 f9c8 	bl	800d970 <_lseek_r>
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d5ea:	81a3      	strh	r3, [r4, #12]
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	463b      	mov	r3, r7
 800d5f0:	4628      	mov	r0, r5
 800d5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f6:	f000 b869 	b.w	800d6cc <_write_r>

0800d5fa <__sseek>:
 800d5fa:	b510      	push	{r4, lr}
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d602:	f000 f9b5 	bl	800d970 <_lseek_r>
 800d606:	1c43      	adds	r3, r0, #1
 800d608:	89a3      	ldrh	r3, [r4, #12]
 800d60a:	bf15      	itete	ne
 800d60c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d60e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d616:	81a3      	strheq	r3, [r4, #12]
 800d618:	bf18      	it	ne
 800d61a:	81a3      	strhne	r3, [r4, #12]
 800d61c:	bd10      	pop	{r4, pc}

0800d61e <__sclose>:
 800d61e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d622:	f000 b8d3 	b.w	800d7cc <_close_r>
	...

0800d628 <__swbuf_r>:
 800d628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d62a:	460e      	mov	r6, r1
 800d62c:	4614      	mov	r4, r2
 800d62e:	4605      	mov	r5, r0
 800d630:	b118      	cbz	r0, 800d63a <__swbuf_r+0x12>
 800d632:	6983      	ldr	r3, [r0, #24]
 800d634:	b90b      	cbnz	r3, 800d63a <__swbuf_r+0x12>
 800d636:	f7ff f9e3 	bl	800ca00 <__sinit>
 800d63a:	4b21      	ldr	r3, [pc, #132]	; (800d6c0 <__swbuf_r+0x98>)
 800d63c:	429c      	cmp	r4, r3
 800d63e:	d12b      	bne.n	800d698 <__swbuf_r+0x70>
 800d640:	686c      	ldr	r4, [r5, #4]
 800d642:	69a3      	ldr	r3, [r4, #24]
 800d644:	60a3      	str	r3, [r4, #8]
 800d646:	89a3      	ldrh	r3, [r4, #12]
 800d648:	071a      	lsls	r2, r3, #28
 800d64a:	d52f      	bpl.n	800d6ac <__swbuf_r+0x84>
 800d64c:	6923      	ldr	r3, [r4, #16]
 800d64e:	b36b      	cbz	r3, 800d6ac <__swbuf_r+0x84>
 800d650:	6923      	ldr	r3, [r4, #16]
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	1ac0      	subs	r0, r0, r3
 800d656:	6963      	ldr	r3, [r4, #20]
 800d658:	b2f6      	uxtb	r6, r6
 800d65a:	4283      	cmp	r3, r0
 800d65c:	4637      	mov	r7, r6
 800d65e:	dc04      	bgt.n	800d66a <__swbuf_r+0x42>
 800d660:	4621      	mov	r1, r4
 800d662:	4628      	mov	r0, r5
 800d664:	f000 f948 	bl	800d8f8 <_fflush_r>
 800d668:	bb30      	cbnz	r0, 800d6b8 <__swbuf_r+0x90>
 800d66a:	68a3      	ldr	r3, [r4, #8]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	60a3      	str	r3, [r4, #8]
 800d670:	6823      	ldr	r3, [r4, #0]
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	6022      	str	r2, [r4, #0]
 800d676:	701e      	strb	r6, [r3, #0]
 800d678:	6963      	ldr	r3, [r4, #20]
 800d67a:	3001      	adds	r0, #1
 800d67c:	4283      	cmp	r3, r0
 800d67e:	d004      	beq.n	800d68a <__swbuf_r+0x62>
 800d680:	89a3      	ldrh	r3, [r4, #12]
 800d682:	07db      	lsls	r3, r3, #31
 800d684:	d506      	bpl.n	800d694 <__swbuf_r+0x6c>
 800d686:	2e0a      	cmp	r6, #10
 800d688:	d104      	bne.n	800d694 <__swbuf_r+0x6c>
 800d68a:	4621      	mov	r1, r4
 800d68c:	4628      	mov	r0, r5
 800d68e:	f000 f933 	bl	800d8f8 <_fflush_r>
 800d692:	b988      	cbnz	r0, 800d6b8 <__swbuf_r+0x90>
 800d694:	4638      	mov	r0, r7
 800d696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d698:	4b0a      	ldr	r3, [pc, #40]	; (800d6c4 <__swbuf_r+0x9c>)
 800d69a:	429c      	cmp	r4, r3
 800d69c:	d101      	bne.n	800d6a2 <__swbuf_r+0x7a>
 800d69e:	68ac      	ldr	r4, [r5, #8]
 800d6a0:	e7cf      	b.n	800d642 <__swbuf_r+0x1a>
 800d6a2:	4b09      	ldr	r3, [pc, #36]	; (800d6c8 <__swbuf_r+0xa0>)
 800d6a4:	429c      	cmp	r4, r3
 800d6a6:	bf08      	it	eq
 800d6a8:	68ec      	ldreq	r4, [r5, #12]
 800d6aa:	e7ca      	b.n	800d642 <__swbuf_r+0x1a>
 800d6ac:	4621      	mov	r1, r4
 800d6ae:	4628      	mov	r0, r5
 800d6b0:	f000 f81e 	bl	800d6f0 <__swsetup_r>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d0cb      	beq.n	800d650 <__swbuf_r+0x28>
 800d6b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d6bc:	e7ea      	b.n	800d694 <__swbuf_r+0x6c>
 800d6be:	bf00      	nop
 800d6c0:	0800f3e4 	.word	0x0800f3e4
 800d6c4:	0800f404 	.word	0x0800f404
 800d6c8:	0800f3c4 	.word	0x0800f3c4

0800d6cc <_write_r>:
 800d6cc:	b538      	push	{r3, r4, r5, lr}
 800d6ce:	4d07      	ldr	r5, [pc, #28]	; (800d6ec <_write_r+0x20>)
 800d6d0:	4604      	mov	r4, r0
 800d6d2:	4608      	mov	r0, r1
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	602a      	str	r2, [r5, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	f7f3 fd2a 	bl	8001134 <_write>
 800d6e0:	1c43      	adds	r3, r0, #1
 800d6e2:	d102      	bne.n	800d6ea <_write_r+0x1e>
 800d6e4:	682b      	ldr	r3, [r5, #0]
 800d6e6:	b103      	cbz	r3, 800d6ea <_write_r+0x1e>
 800d6e8:	6023      	str	r3, [r4, #0]
 800d6ea:	bd38      	pop	{r3, r4, r5, pc}
 800d6ec:	2000b230 	.word	0x2000b230

0800d6f0 <__swsetup_r>:
 800d6f0:	4b32      	ldr	r3, [pc, #200]	; (800d7bc <__swsetup_r+0xcc>)
 800d6f2:	b570      	push	{r4, r5, r6, lr}
 800d6f4:	681d      	ldr	r5, [r3, #0]
 800d6f6:	4606      	mov	r6, r0
 800d6f8:	460c      	mov	r4, r1
 800d6fa:	b125      	cbz	r5, 800d706 <__swsetup_r+0x16>
 800d6fc:	69ab      	ldr	r3, [r5, #24]
 800d6fe:	b913      	cbnz	r3, 800d706 <__swsetup_r+0x16>
 800d700:	4628      	mov	r0, r5
 800d702:	f7ff f97d 	bl	800ca00 <__sinit>
 800d706:	4b2e      	ldr	r3, [pc, #184]	; (800d7c0 <__swsetup_r+0xd0>)
 800d708:	429c      	cmp	r4, r3
 800d70a:	d10f      	bne.n	800d72c <__swsetup_r+0x3c>
 800d70c:	686c      	ldr	r4, [r5, #4]
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d714:	0719      	lsls	r1, r3, #28
 800d716:	d42c      	bmi.n	800d772 <__swsetup_r+0x82>
 800d718:	06dd      	lsls	r5, r3, #27
 800d71a:	d411      	bmi.n	800d740 <__swsetup_r+0x50>
 800d71c:	2309      	movs	r3, #9
 800d71e:	6033      	str	r3, [r6, #0]
 800d720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d724:	81a3      	strh	r3, [r4, #12]
 800d726:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d72a:	e03e      	b.n	800d7aa <__swsetup_r+0xba>
 800d72c:	4b25      	ldr	r3, [pc, #148]	; (800d7c4 <__swsetup_r+0xd4>)
 800d72e:	429c      	cmp	r4, r3
 800d730:	d101      	bne.n	800d736 <__swsetup_r+0x46>
 800d732:	68ac      	ldr	r4, [r5, #8]
 800d734:	e7eb      	b.n	800d70e <__swsetup_r+0x1e>
 800d736:	4b24      	ldr	r3, [pc, #144]	; (800d7c8 <__swsetup_r+0xd8>)
 800d738:	429c      	cmp	r4, r3
 800d73a:	bf08      	it	eq
 800d73c:	68ec      	ldreq	r4, [r5, #12]
 800d73e:	e7e6      	b.n	800d70e <__swsetup_r+0x1e>
 800d740:	0758      	lsls	r0, r3, #29
 800d742:	d512      	bpl.n	800d76a <__swsetup_r+0x7a>
 800d744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d746:	b141      	cbz	r1, 800d75a <__swsetup_r+0x6a>
 800d748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d74c:	4299      	cmp	r1, r3
 800d74e:	d002      	beq.n	800d756 <__swsetup_r+0x66>
 800d750:	4630      	mov	r0, r6
 800d752:	f7fd fa65 	bl	800ac20 <_free_r>
 800d756:	2300      	movs	r3, #0
 800d758:	6363      	str	r3, [r4, #52]	; 0x34
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	2300      	movs	r3, #0
 800d764:	6063      	str	r3, [r4, #4]
 800d766:	6923      	ldr	r3, [r4, #16]
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	f043 0308 	orr.w	r3, r3, #8
 800d770:	81a3      	strh	r3, [r4, #12]
 800d772:	6923      	ldr	r3, [r4, #16]
 800d774:	b94b      	cbnz	r3, 800d78a <__swsetup_r+0x9a>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d77c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d780:	d003      	beq.n	800d78a <__swsetup_r+0x9a>
 800d782:	4621      	mov	r1, r4
 800d784:	4630      	mov	r0, r6
 800d786:	f000 f92b 	bl	800d9e0 <__smakebuf_r>
 800d78a:	89a0      	ldrh	r0, [r4, #12]
 800d78c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d790:	f010 0301 	ands.w	r3, r0, #1
 800d794:	d00a      	beq.n	800d7ac <__swsetup_r+0xbc>
 800d796:	2300      	movs	r3, #0
 800d798:	60a3      	str	r3, [r4, #8]
 800d79a:	6963      	ldr	r3, [r4, #20]
 800d79c:	425b      	negs	r3, r3
 800d79e:	61a3      	str	r3, [r4, #24]
 800d7a0:	6923      	ldr	r3, [r4, #16]
 800d7a2:	b943      	cbnz	r3, 800d7b6 <__swsetup_r+0xc6>
 800d7a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7a8:	d1ba      	bne.n	800d720 <__swsetup_r+0x30>
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	0781      	lsls	r1, r0, #30
 800d7ae:	bf58      	it	pl
 800d7b0:	6963      	ldrpl	r3, [r4, #20]
 800d7b2:	60a3      	str	r3, [r4, #8]
 800d7b4:	e7f4      	b.n	800d7a0 <__swsetup_r+0xb0>
 800d7b6:	2000      	movs	r0, #0
 800d7b8:	e7f7      	b.n	800d7aa <__swsetup_r+0xba>
 800d7ba:	bf00      	nop
 800d7bc:	20000158 	.word	0x20000158
 800d7c0:	0800f3e4 	.word	0x0800f3e4
 800d7c4:	0800f404 	.word	0x0800f404
 800d7c8:	0800f3c4 	.word	0x0800f3c4

0800d7cc <_close_r>:
 800d7cc:	b538      	push	{r3, r4, r5, lr}
 800d7ce:	4d06      	ldr	r5, [pc, #24]	; (800d7e8 <_close_r+0x1c>)
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	4608      	mov	r0, r1
 800d7d6:	602b      	str	r3, [r5, #0]
 800d7d8:	f7f3 fcba 	bl	8001150 <_close>
 800d7dc:	1c43      	adds	r3, r0, #1
 800d7de:	d102      	bne.n	800d7e6 <_close_r+0x1a>
 800d7e0:	682b      	ldr	r3, [r5, #0]
 800d7e2:	b103      	cbz	r3, 800d7e6 <_close_r+0x1a>
 800d7e4:	6023      	str	r3, [r4, #0]
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	2000b230 	.word	0x2000b230

0800d7ec <__sflush_r>:
 800d7ec:	898a      	ldrh	r2, [r1, #12]
 800d7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7f2:	4605      	mov	r5, r0
 800d7f4:	0710      	lsls	r0, r2, #28
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	d458      	bmi.n	800d8ac <__sflush_r+0xc0>
 800d7fa:	684b      	ldr	r3, [r1, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	dc05      	bgt.n	800d80c <__sflush_r+0x20>
 800d800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d802:	2b00      	cmp	r3, #0
 800d804:	dc02      	bgt.n	800d80c <__sflush_r+0x20>
 800d806:	2000      	movs	r0, #0
 800d808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d80c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d80e:	2e00      	cmp	r6, #0
 800d810:	d0f9      	beq.n	800d806 <__sflush_r+0x1a>
 800d812:	2300      	movs	r3, #0
 800d814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d818:	682f      	ldr	r7, [r5, #0]
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	d032      	beq.n	800d884 <__sflush_r+0x98>
 800d81e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d820:	89a3      	ldrh	r3, [r4, #12]
 800d822:	075a      	lsls	r2, r3, #29
 800d824:	d505      	bpl.n	800d832 <__sflush_r+0x46>
 800d826:	6863      	ldr	r3, [r4, #4]
 800d828:	1ac0      	subs	r0, r0, r3
 800d82a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d82c:	b10b      	cbz	r3, 800d832 <__sflush_r+0x46>
 800d82e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d830:	1ac0      	subs	r0, r0, r3
 800d832:	2300      	movs	r3, #0
 800d834:	4602      	mov	r2, r0
 800d836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d838:	6a21      	ldr	r1, [r4, #32]
 800d83a:	4628      	mov	r0, r5
 800d83c:	47b0      	blx	r6
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	89a3      	ldrh	r3, [r4, #12]
 800d842:	d106      	bne.n	800d852 <__sflush_r+0x66>
 800d844:	6829      	ldr	r1, [r5, #0]
 800d846:	291d      	cmp	r1, #29
 800d848:	d82c      	bhi.n	800d8a4 <__sflush_r+0xb8>
 800d84a:	4a2a      	ldr	r2, [pc, #168]	; (800d8f4 <__sflush_r+0x108>)
 800d84c:	40ca      	lsrs	r2, r1
 800d84e:	07d6      	lsls	r6, r2, #31
 800d850:	d528      	bpl.n	800d8a4 <__sflush_r+0xb8>
 800d852:	2200      	movs	r2, #0
 800d854:	6062      	str	r2, [r4, #4]
 800d856:	04d9      	lsls	r1, r3, #19
 800d858:	6922      	ldr	r2, [r4, #16]
 800d85a:	6022      	str	r2, [r4, #0]
 800d85c:	d504      	bpl.n	800d868 <__sflush_r+0x7c>
 800d85e:	1c42      	adds	r2, r0, #1
 800d860:	d101      	bne.n	800d866 <__sflush_r+0x7a>
 800d862:	682b      	ldr	r3, [r5, #0]
 800d864:	b903      	cbnz	r3, 800d868 <__sflush_r+0x7c>
 800d866:	6560      	str	r0, [r4, #84]	; 0x54
 800d868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d86a:	602f      	str	r7, [r5, #0]
 800d86c:	2900      	cmp	r1, #0
 800d86e:	d0ca      	beq.n	800d806 <__sflush_r+0x1a>
 800d870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d874:	4299      	cmp	r1, r3
 800d876:	d002      	beq.n	800d87e <__sflush_r+0x92>
 800d878:	4628      	mov	r0, r5
 800d87a:	f7fd f9d1 	bl	800ac20 <_free_r>
 800d87e:	2000      	movs	r0, #0
 800d880:	6360      	str	r0, [r4, #52]	; 0x34
 800d882:	e7c1      	b.n	800d808 <__sflush_r+0x1c>
 800d884:	6a21      	ldr	r1, [r4, #32]
 800d886:	2301      	movs	r3, #1
 800d888:	4628      	mov	r0, r5
 800d88a:	47b0      	blx	r6
 800d88c:	1c41      	adds	r1, r0, #1
 800d88e:	d1c7      	bne.n	800d820 <__sflush_r+0x34>
 800d890:	682b      	ldr	r3, [r5, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d0c4      	beq.n	800d820 <__sflush_r+0x34>
 800d896:	2b1d      	cmp	r3, #29
 800d898:	d001      	beq.n	800d89e <__sflush_r+0xb2>
 800d89a:	2b16      	cmp	r3, #22
 800d89c:	d101      	bne.n	800d8a2 <__sflush_r+0xb6>
 800d89e:	602f      	str	r7, [r5, #0]
 800d8a0:	e7b1      	b.n	800d806 <__sflush_r+0x1a>
 800d8a2:	89a3      	ldrh	r3, [r4, #12]
 800d8a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a8:	81a3      	strh	r3, [r4, #12]
 800d8aa:	e7ad      	b.n	800d808 <__sflush_r+0x1c>
 800d8ac:	690f      	ldr	r7, [r1, #16]
 800d8ae:	2f00      	cmp	r7, #0
 800d8b0:	d0a9      	beq.n	800d806 <__sflush_r+0x1a>
 800d8b2:	0793      	lsls	r3, r2, #30
 800d8b4:	680e      	ldr	r6, [r1, #0]
 800d8b6:	bf08      	it	eq
 800d8b8:	694b      	ldreq	r3, [r1, #20]
 800d8ba:	600f      	str	r7, [r1, #0]
 800d8bc:	bf18      	it	ne
 800d8be:	2300      	movne	r3, #0
 800d8c0:	eba6 0807 	sub.w	r8, r6, r7
 800d8c4:	608b      	str	r3, [r1, #8]
 800d8c6:	f1b8 0f00 	cmp.w	r8, #0
 800d8ca:	dd9c      	ble.n	800d806 <__sflush_r+0x1a>
 800d8cc:	6a21      	ldr	r1, [r4, #32]
 800d8ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8d0:	4643      	mov	r3, r8
 800d8d2:	463a      	mov	r2, r7
 800d8d4:	4628      	mov	r0, r5
 800d8d6:	47b0      	blx	r6
 800d8d8:	2800      	cmp	r0, #0
 800d8da:	dc06      	bgt.n	800d8ea <__sflush_r+0xfe>
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8e2:	81a3      	strh	r3, [r4, #12]
 800d8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8e8:	e78e      	b.n	800d808 <__sflush_r+0x1c>
 800d8ea:	4407      	add	r7, r0
 800d8ec:	eba8 0800 	sub.w	r8, r8, r0
 800d8f0:	e7e9      	b.n	800d8c6 <__sflush_r+0xda>
 800d8f2:	bf00      	nop
 800d8f4:	20400001 	.word	0x20400001

0800d8f8 <_fflush_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	690b      	ldr	r3, [r1, #16]
 800d8fc:	4605      	mov	r5, r0
 800d8fe:	460c      	mov	r4, r1
 800d900:	b913      	cbnz	r3, 800d908 <_fflush_r+0x10>
 800d902:	2500      	movs	r5, #0
 800d904:	4628      	mov	r0, r5
 800d906:	bd38      	pop	{r3, r4, r5, pc}
 800d908:	b118      	cbz	r0, 800d912 <_fflush_r+0x1a>
 800d90a:	6983      	ldr	r3, [r0, #24]
 800d90c:	b90b      	cbnz	r3, 800d912 <_fflush_r+0x1a>
 800d90e:	f7ff f877 	bl	800ca00 <__sinit>
 800d912:	4b14      	ldr	r3, [pc, #80]	; (800d964 <_fflush_r+0x6c>)
 800d914:	429c      	cmp	r4, r3
 800d916:	d11b      	bne.n	800d950 <_fflush_r+0x58>
 800d918:	686c      	ldr	r4, [r5, #4]
 800d91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d0ef      	beq.n	800d902 <_fflush_r+0xa>
 800d922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d924:	07d0      	lsls	r0, r2, #31
 800d926:	d404      	bmi.n	800d932 <_fflush_r+0x3a>
 800d928:	0599      	lsls	r1, r3, #22
 800d92a:	d402      	bmi.n	800d932 <_fflush_r+0x3a>
 800d92c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d92e:	f7ff f91c 	bl	800cb6a <__retarget_lock_acquire_recursive>
 800d932:	4628      	mov	r0, r5
 800d934:	4621      	mov	r1, r4
 800d936:	f7ff ff59 	bl	800d7ec <__sflush_r>
 800d93a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d93c:	07da      	lsls	r2, r3, #31
 800d93e:	4605      	mov	r5, r0
 800d940:	d4e0      	bmi.n	800d904 <_fflush_r+0xc>
 800d942:	89a3      	ldrh	r3, [r4, #12]
 800d944:	059b      	lsls	r3, r3, #22
 800d946:	d4dd      	bmi.n	800d904 <_fflush_r+0xc>
 800d948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d94a:	f7ff f90f 	bl	800cb6c <__retarget_lock_release_recursive>
 800d94e:	e7d9      	b.n	800d904 <_fflush_r+0xc>
 800d950:	4b05      	ldr	r3, [pc, #20]	; (800d968 <_fflush_r+0x70>)
 800d952:	429c      	cmp	r4, r3
 800d954:	d101      	bne.n	800d95a <_fflush_r+0x62>
 800d956:	68ac      	ldr	r4, [r5, #8]
 800d958:	e7df      	b.n	800d91a <_fflush_r+0x22>
 800d95a:	4b04      	ldr	r3, [pc, #16]	; (800d96c <_fflush_r+0x74>)
 800d95c:	429c      	cmp	r4, r3
 800d95e:	bf08      	it	eq
 800d960:	68ec      	ldreq	r4, [r5, #12]
 800d962:	e7da      	b.n	800d91a <_fflush_r+0x22>
 800d964:	0800f3e4 	.word	0x0800f3e4
 800d968:	0800f404 	.word	0x0800f404
 800d96c:	0800f3c4 	.word	0x0800f3c4

0800d970 <_lseek_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d07      	ldr	r5, [pc, #28]	; (800d990 <_lseek_r+0x20>)
 800d974:	4604      	mov	r4, r0
 800d976:	4608      	mov	r0, r1
 800d978:	4611      	mov	r1, r2
 800d97a:	2200      	movs	r2, #0
 800d97c:	602a      	str	r2, [r5, #0]
 800d97e:	461a      	mov	r2, r3
 800d980:	f7f3 fbf2 	bl	8001168 <_lseek>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_lseek_r+0x1e>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_lseek_r+0x1e>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	2000b230 	.word	0x2000b230

0800d994 <__swhatbuf_r>:
 800d994:	b570      	push	{r4, r5, r6, lr}
 800d996:	460e      	mov	r6, r1
 800d998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d99c:	2900      	cmp	r1, #0
 800d99e:	b096      	sub	sp, #88	; 0x58
 800d9a0:	4614      	mov	r4, r2
 800d9a2:	461d      	mov	r5, r3
 800d9a4:	da08      	bge.n	800d9b8 <__swhatbuf_r+0x24>
 800d9a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	602a      	str	r2, [r5, #0]
 800d9ae:	061a      	lsls	r2, r3, #24
 800d9b0:	d410      	bmi.n	800d9d4 <__swhatbuf_r+0x40>
 800d9b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9b6:	e00e      	b.n	800d9d6 <__swhatbuf_r+0x42>
 800d9b8:	466a      	mov	r2, sp
 800d9ba:	f000 f88b 	bl	800dad4 <_fstat_r>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	dbf1      	blt.n	800d9a6 <__swhatbuf_r+0x12>
 800d9c2:	9a01      	ldr	r2, [sp, #4]
 800d9c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9cc:	425a      	negs	r2, r3
 800d9ce:	415a      	adcs	r2, r3
 800d9d0:	602a      	str	r2, [r5, #0]
 800d9d2:	e7ee      	b.n	800d9b2 <__swhatbuf_r+0x1e>
 800d9d4:	2340      	movs	r3, #64	; 0x40
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	6023      	str	r3, [r4, #0]
 800d9da:	b016      	add	sp, #88	; 0x58
 800d9dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9e0 <__smakebuf_r>:
 800d9e0:	898b      	ldrh	r3, [r1, #12]
 800d9e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9e4:	079d      	lsls	r5, r3, #30
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	460c      	mov	r4, r1
 800d9ea:	d507      	bpl.n	800d9fc <__smakebuf_r+0x1c>
 800d9ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	6123      	str	r3, [r4, #16]
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	6163      	str	r3, [r4, #20]
 800d9f8:	b002      	add	sp, #8
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}
 800d9fc:	ab01      	add	r3, sp, #4
 800d9fe:	466a      	mov	r2, sp
 800da00:	f7ff ffc8 	bl	800d994 <__swhatbuf_r>
 800da04:	9900      	ldr	r1, [sp, #0]
 800da06:	4605      	mov	r5, r0
 800da08:	4630      	mov	r0, r6
 800da0a:	f7fd f9a9 	bl	800ad60 <_malloc_r>
 800da0e:	b948      	cbnz	r0, 800da24 <__smakebuf_r+0x44>
 800da10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da14:	059a      	lsls	r2, r3, #22
 800da16:	d4ef      	bmi.n	800d9f8 <__smakebuf_r+0x18>
 800da18:	f023 0303 	bic.w	r3, r3, #3
 800da1c:	f043 0302 	orr.w	r3, r3, #2
 800da20:	81a3      	strh	r3, [r4, #12]
 800da22:	e7e3      	b.n	800d9ec <__smakebuf_r+0xc>
 800da24:	4b0d      	ldr	r3, [pc, #52]	; (800da5c <__smakebuf_r+0x7c>)
 800da26:	62b3      	str	r3, [r6, #40]	; 0x28
 800da28:	89a3      	ldrh	r3, [r4, #12]
 800da2a:	6020      	str	r0, [r4, #0]
 800da2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da30:	81a3      	strh	r3, [r4, #12]
 800da32:	9b00      	ldr	r3, [sp, #0]
 800da34:	6163      	str	r3, [r4, #20]
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	6120      	str	r0, [r4, #16]
 800da3a:	b15b      	cbz	r3, 800da54 <__smakebuf_r+0x74>
 800da3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da40:	4630      	mov	r0, r6
 800da42:	f000 f859 	bl	800daf8 <_isatty_r>
 800da46:	b128      	cbz	r0, 800da54 <__smakebuf_r+0x74>
 800da48:	89a3      	ldrh	r3, [r4, #12]
 800da4a:	f023 0303 	bic.w	r3, r3, #3
 800da4e:	f043 0301 	orr.w	r3, r3, #1
 800da52:	81a3      	strh	r3, [r4, #12]
 800da54:	89a0      	ldrh	r0, [r4, #12]
 800da56:	4305      	orrs	r5, r0
 800da58:	81a5      	strh	r5, [r4, #12]
 800da5a:	e7cd      	b.n	800d9f8 <__smakebuf_r+0x18>
 800da5c:	0800c999 	.word	0x0800c999

0800da60 <__ascii_mbtowc>:
 800da60:	b082      	sub	sp, #8
 800da62:	b901      	cbnz	r1, 800da66 <__ascii_mbtowc+0x6>
 800da64:	a901      	add	r1, sp, #4
 800da66:	b142      	cbz	r2, 800da7a <__ascii_mbtowc+0x1a>
 800da68:	b14b      	cbz	r3, 800da7e <__ascii_mbtowc+0x1e>
 800da6a:	7813      	ldrb	r3, [r2, #0]
 800da6c:	600b      	str	r3, [r1, #0]
 800da6e:	7812      	ldrb	r2, [r2, #0]
 800da70:	1e10      	subs	r0, r2, #0
 800da72:	bf18      	it	ne
 800da74:	2001      	movne	r0, #1
 800da76:	b002      	add	sp, #8
 800da78:	4770      	bx	lr
 800da7a:	4610      	mov	r0, r2
 800da7c:	e7fb      	b.n	800da76 <__ascii_mbtowc+0x16>
 800da7e:	f06f 0001 	mvn.w	r0, #1
 800da82:	e7f8      	b.n	800da76 <__ascii_mbtowc+0x16>

0800da84 <_malloc_usable_size_r>:
 800da84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da88:	1f18      	subs	r0, r3, #4
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bfbc      	itt	lt
 800da8e:	580b      	ldrlt	r3, [r1, r0]
 800da90:	18c0      	addlt	r0, r0, r3
 800da92:	4770      	bx	lr

0800da94 <_read_r>:
 800da94:	b538      	push	{r3, r4, r5, lr}
 800da96:	4d07      	ldr	r5, [pc, #28]	; (800dab4 <_read_r+0x20>)
 800da98:	4604      	mov	r4, r0
 800da9a:	4608      	mov	r0, r1
 800da9c:	4611      	mov	r1, r2
 800da9e:	2200      	movs	r2, #0
 800daa0:	602a      	str	r2, [r5, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	f7f3 fb38 	bl	8001118 <_read>
 800daa8:	1c43      	adds	r3, r0, #1
 800daaa:	d102      	bne.n	800dab2 <_read_r+0x1e>
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	b103      	cbz	r3, 800dab2 <_read_r+0x1e>
 800dab0:	6023      	str	r3, [r4, #0]
 800dab2:	bd38      	pop	{r3, r4, r5, pc}
 800dab4:	2000b230 	.word	0x2000b230

0800dab8 <__ascii_wctomb>:
 800dab8:	b149      	cbz	r1, 800dace <__ascii_wctomb+0x16>
 800daba:	2aff      	cmp	r2, #255	; 0xff
 800dabc:	bf85      	ittet	hi
 800dabe:	238a      	movhi	r3, #138	; 0x8a
 800dac0:	6003      	strhi	r3, [r0, #0]
 800dac2:	700a      	strbls	r2, [r1, #0]
 800dac4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800dac8:	bf98      	it	ls
 800daca:	2001      	movls	r0, #1
 800dacc:	4770      	bx	lr
 800dace:	4608      	mov	r0, r1
 800dad0:	4770      	bx	lr
	...

0800dad4 <_fstat_r>:
 800dad4:	b538      	push	{r3, r4, r5, lr}
 800dad6:	4d07      	ldr	r5, [pc, #28]	; (800daf4 <_fstat_r+0x20>)
 800dad8:	2300      	movs	r3, #0
 800dada:	4604      	mov	r4, r0
 800dadc:	4608      	mov	r0, r1
 800dade:	4611      	mov	r1, r2
 800dae0:	602b      	str	r3, [r5, #0]
 800dae2:	f7f3 fb39 	bl	8001158 <_fstat>
 800dae6:	1c43      	adds	r3, r0, #1
 800dae8:	d102      	bne.n	800daf0 <_fstat_r+0x1c>
 800daea:	682b      	ldr	r3, [r5, #0]
 800daec:	b103      	cbz	r3, 800daf0 <_fstat_r+0x1c>
 800daee:	6023      	str	r3, [r4, #0]
 800daf0:	bd38      	pop	{r3, r4, r5, pc}
 800daf2:	bf00      	nop
 800daf4:	2000b230 	.word	0x2000b230

0800daf8 <_isatty_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4d06      	ldr	r5, [pc, #24]	; (800db14 <_isatty_r+0x1c>)
 800dafc:	2300      	movs	r3, #0
 800dafe:	4604      	mov	r4, r0
 800db00:	4608      	mov	r0, r1
 800db02:	602b      	str	r3, [r5, #0]
 800db04:	f7f3 fb2e 	bl	8001164 <_isatty>
 800db08:	1c43      	adds	r3, r0, #1
 800db0a:	d102      	bne.n	800db12 <_isatty_r+0x1a>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	b103      	cbz	r3, 800db12 <_isatty_r+0x1a>
 800db10:	6023      	str	r3, [r4, #0]
 800db12:	bd38      	pop	{r3, r4, r5, pc}
 800db14:	2000b230 	.word	0x2000b230

0800db18 <_init>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	bf00      	nop
 800db1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db1e:	bc08      	pop	{r3}
 800db20:	469e      	mov	lr, r3
 800db22:	4770      	bx	lr

0800db24 <_fini>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	bf00      	nop
 800db28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2a:	bc08      	pop	{r3}
 800db2c:	469e      	mov	lr, r3
 800db2e:	4770      	bx	lr
