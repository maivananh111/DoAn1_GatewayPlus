
DoAn1_GatewayPlus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1a0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001460  0800c350  0800c350  0001c350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7b0  0800d7b0  000202ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d7b0  0800d7b0  0001d7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7b8  0800d7b8  000202ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800d7e0  0800d7e0  0001d7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ac  20000000  0800d7e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000202ac  2**0
                  CONTENTS
 10 .bss          0000b6e8  200002b0  200002b0  000202b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000b998  2000b998  000202b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000202ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005bca7  00000000  00000000  000202dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009988  00000000  00000000  0007bf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00028776  00000000  00000000  0008590b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b30  00000000  00000000  000ae088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00007638  00000000  00000000  000afbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000116b7  00000000  00000000  000b71f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003e0e4  00000000  00000000  000c88a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104c8b  00000000  00000000  0010698b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0020b616  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000703c  00000000  00000000  0020b668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200002b0 	.word	0x200002b0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c338 	.word	0x0800c338

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200002b4 	.word	0x200002b4
 80001ec:	0800c338 	.word	0x0800c338

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <HAL_Driver_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8000fcc:	b086      	sub	sp, #24
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <HAL_Driver_Init+0x70>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9201      	str	r2, [sp, #4]
 8000fd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fd6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000fda:	6319      	str	r1, [r3, #48]	; 0x30
 8000fdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fde:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000fe2:	9101      	str	r1, [sp, #4]
 8000fe4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe6:	9202      	str	r2, [sp, #8]
 8000fe8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fea:	f041 0104 	orr.w	r1, r1, #4
 8000fee:	6319      	str	r1, [r3, #48]	; 0x30
 8000ff0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ff2:	f001 0104 	and.w	r1, r1, #4
 8000ff6:	9102      	str	r1, [sp, #8]
 8000ff8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	9203      	str	r2, [sp, #12]
 8000ffc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ffe:	f041 0101 	orr.w	r1, r1, #1
 8001002:	6319      	str	r1, [r3, #48]	; 0x30
 8001004:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001006:	f001 0101 	and.w	r1, r1, #1
 800100a:	9103      	str	r1, [sp, #12]
 800100c:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	9204      	str	r2, [sp, #16]
 8001010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001012:	f041 0102 	orr.w	r1, r1, #2
 8001016:	6319      	str	r1, [r3, #48]	; 0x30
 8001018:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800101a:	f001 0102 	and.w	r1, r1, #2
 800101e:	9104      	str	r1, [sp, #16]
 8001020:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001022:	9205      	str	r2, [sp, #20]
 8001024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001026:	f042 0208 	orr.w	r2, r2, #8
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	9305      	str	r3, [sp, #20]
 8001034:	9b05      	ldr	r3, [sp, #20]
}
 8001036:	b006      	add	sp, #24
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <main>:
	return main_application();
 8001040:	f007 bbd2 	b.w	80087e8 <main_application>

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was handle(call NMI_Handler)...");
 8001046:	4902      	ldr	r1, [pc, #8]	; (8001050 <NMI_Handler+0xc>)
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <NMI_Handler+0x10>)
 800104a:	f007 ff6d 	bl	8008f28 <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800104e:	e7fe      	b.n	800104e <NMI_Handler+0xa>
 8001050:	0800c350 	.word	0x0800c350
 8001054:	0800c388 	.word	0x0800c388

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was handle(call HardFault_Handler)...");
 800105a:	4902      	ldr	r1, [pc, #8]	; (8001064 <HardFault_Handler+0xc>)
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <HardFault_Handler+0x10>)
 800105e:	f007 ff63 	bl	8008f28 <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0xa>
 8001064:	0800c394 	.word	0x0800c394
 8001068:	0800c3d0 	.word	0x0800c3d0

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was handle(call MemManage_Handler)...");
 800106e:	4902      	ldr	r1, [pc, #8]	; (8001078 <MemManage_Handler+0xc>)
 8001070:	4802      	ldr	r0, [pc, #8]	; (800107c <MemManage_Handler+0x10>)
 8001072:	f007 ff59 	bl	8008f28 <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <MemManage_Handler+0xa>
 8001078:	0800c3dc 	.word	0x0800c3dc
 800107c:	0800c388 	.word	0x0800c388

08001080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001080:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was handle(call BusFault_Handler)...");
 8001082:	4902      	ldr	r1, [pc, #8]	; (800108c <BusFault_Handler+0xc>)
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <BusFault_Handler+0x10>)
 8001086:	f007 ff4f 	bl	8008f28 <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0xa>
 800108c:	0800c420 	.word	0x0800c420
 8001090:	0800c3d0 	.word	0x0800c3d0

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was handle(call UsageFault_Handler)...");
 8001096:	4902      	ldr	r1, [pc, #8]	; (80010a0 <UsageFault_Handler+0xc>)
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <UsageFault_Handler+0x10>)
 800109a:	f007 ff45 	bl	8008f28 <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800109e:	e7fe      	b.n	800109e <UsageFault_Handler+0xa>
 80010a0:	0800c45c 	.word	0x0800c45c
 80010a4:	0800c3d0 	.word	0x0800c3d0

080010a8 <DebugMon_Handler>:
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was handle(call DebugMon_Handler)...");
 80010a8:	4901      	ldr	r1, [pc, #4]	; (80010b0 <DebugMon_Handler+0x8>)
 80010aa:	4802      	ldr	r0, [pc, #8]	; (80010b4 <DebugMon_Handler+0xc>)
 80010ac:	f007 bf3c 	b.w	8008f28 <exception_interrupt_handler>
 80010b0:	0800c49c 	.word	0x0800c49c
 80010b4:	0800c388 	.word	0x0800c388

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 80010ba:	f006 fc65 	bl	8007988 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010be:	f000 f8e7 	bl	8001290 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010c2:	f002 f883 	bl	80031cc <xTaskGetSchedulerState>
 80010c6:	2801      	cmp	r0, #1
 80010c8:	d100      	bne.n	80010cc <SysTick_Handler+0x14>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ca:	bd08      	pop	{r3, pc}
 80010cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80010d0:	f002 bc38 	b.w	8003944 <xPortSysTickHandler>

080010d4 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80010d4:	4801      	ldr	r0, [pc, #4]	; (80010dc <DMA2_Stream3_IRQHandler+0x8>)
 80010d6:	f000 b8e7 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010da:	bf00      	nop
 80010dc:	200002cc 	.word	0x200002cc

080010e0 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80010e0:	4801      	ldr	r0, [pc, #4]	; (80010e8 <ETH_IRQHandler+0x8>)
 80010e2:	f000 b9d5 	b.w	8001490 <HAL_ETH_IRQHandler>
 80010e6:	bf00      	nop
 80010e8:	2000039c 	.word	0x2000039c

080010ec <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80010ec:	4801      	ldr	r0, [pc, #4]	; (80010f4 <DMA2_Stream6_IRQHandler+0x8>)
 80010ee:	f000 b8db 	b.w	80012a8 <HAL_DMA_IRQHandler>
 80010f2:	bf00      	nop
 80010f4:	2000032c 	.word	0x2000032c

080010f8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80010f8:	2001      	movs	r0, #1
 80010fa:	4770      	bx	lr

080010fc <_kill>:

int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <_kill+0xc>)
 80010fe:	2216      	movs	r2, #22
 8001100:	601a      	str	r2, [r3, #0]
  return -1;
}
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	2000b1b8 	.word	0x2000b1b8

0800110c <_exit>:
  errno = EINVAL;
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <_exit+0x8>)
 800110e:	2216      	movs	r2, #22
 8001110:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001112:	e7fe      	b.n	8001112 <_exit+0x6>
 8001114:	2000b1b8 	.word	0x2000b1b8

08001118 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	1e16      	subs	r6, r2, #0
 800111c:	dd07      	ble.n	800112e <_read+0x16>
 800111e:	460c      	mov	r4, r1
 8001120:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001122:	f3af 8000 	nop.w
 8001126:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112a:	42a5      	cmp	r5, r4
 800112c:	d1f9      	bne.n	8001122 <_read+0xa>
  }

  return len;
}
 800112e:	4630      	mov	r0, r6
 8001130:	bd70      	pop	{r4, r5, r6, pc}
 8001132:	bf00      	nop

08001134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	1e16      	subs	r6, r2, #0
 8001138:	dd07      	ble.n	800114a <_write+0x16>
 800113a:	460c      	mov	r4, r1
 800113c:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 800113e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001142:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001146:	42ac      	cmp	r4, r5
 8001148:	d1f9      	bne.n	800113e <_write+0xa>
  }
  return len;
}
 800114a:	4630      	mov	r0, r6
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	bf00      	nop

08001150 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop

08001158 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800115e:	2000      	movs	r0, #0
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001164:	2001      	movs	r0, #1
 8001166:	4770      	bx	lr

08001168 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001168:	2000      	movs	r0, #0
 800116a:	4770      	bx	lr

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b410      	push	{r4}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800116e:	4c0d      	ldr	r4, [pc, #52]	; (80011a4 <_sbrk+0x38>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001170:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <_sbrk+0x3c>)
 8001172:	490e      	ldr	r1, [pc, #56]	; (80011ac <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 8001174:	6822      	ldr	r2, [r4, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001176:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 8001178:	b182      	cbz	r2, 800119c <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117a:	4410      	add	r0, r2
 800117c:	4288      	cmp	r0, r1
 800117e:	d804      	bhi.n	800118a <_sbrk+0x1e>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001180:	6020      	str	r0, [r4, #0]

  return (void *)prev_heap_end;
}
 8001182:	4610      	mov	r0, r2
 8001184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001188:	4770      	bx	lr
    errno = ENOMEM;
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <_sbrk+0x44>)
}
 800118c:	f85d 4b04 	ldr.w	r4, [sp], #4
    errno = ENOMEM;
 8001190:	220c      	movs	r2, #12
 8001192:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
}
 8001198:	4610      	mov	r0, r2
 800119a:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 800119c:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <_sbrk+0x48>)
 800119e:	6022      	str	r2, [r4, #0]
 80011a0:	e7eb      	b.n	800117a <_sbrk+0xe>
 80011a2:	bf00      	nop
 80011a4:	2000038c 	.word	0x2000038c
 80011a8:	20030000 	.word	0x20030000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000b1b8 	.word	0x2000b1b8
 80011b4:	2000b998 	.word	0x2000b998

080011b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4a03      	ldr	r2, [pc, #12]	; (80011c8 <SystemInit+0x10>)
 80011ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80011be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011cc:	4a16      	ldr	r2, [pc, #88]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011ce:	6893      	ldr	r3, [r2, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12

  switch (tmp)
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	d00c      	beq.n	80011f2 <SystemCoreClockUpdate+0x26>
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d00c      	beq.n	80011f6 <SystemCoreClockUpdate+0x2a>
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <SystemCoreClockUpdate+0x60>)
      SystemCoreClock = HSI_VALUE;
      break;
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 80011e0:	4813      	ldr	r0, [pc, #76]	; (8001230 <SystemCoreClockUpdate+0x64>)
 80011e2:	6892      	ldr	r2, [r2, #8]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80011e4:	4913      	ldr	r1, [pc, #76]	; (8001234 <SystemCoreClockUpdate+0x68>)
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011e6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80011ea:	5c82      	ldrb	r2, [r0, r2]
  SystemCoreClock >>= tmp;
 80011ec:	40d3      	lsrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
}
 80011f0:	4770      	bx	lr
  switch (tmp)
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemCoreClockUpdate+0x6c>)
 80011f4:	e7f3      	b.n	80011de <SystemCoreClockUpdate+0x12>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011f6:	6853      	ldr	r3, [r2, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	6851      	ldr	r1, [r2, #4]
      if (pllsource != 0)
 80011fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001202:	6853      	ldr	r3, [r2, #4]
 8001204:	bf14      	ite	ne
 8001206:	4a0c      	ldrne	r2, [pc, #48]	; (8001238 <SystemCoreClockUpdate+0x6c>)
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001208:	4a08      	ldreq	r2, [pc, #32]	; (800122c <SystemCoreClockUpdate+0x60>)
 800120a:	fbb2 f1f1 	udiv	r1, r2, r1
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800120e:	4a06      	ldr	r2, [pc, #24]	; (8001228 <SystemCoreClockUpdate+0x5c>)
 8001210:	6852      	ldr	r2, [r2, #4]
 8001212:	f3c2 4201 	ubfx	r2, r2, #16, #2
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001216:	f3c3 1388 	ubfx	r3, r3, #6, #9
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800121a:	3201      	adds	r2, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800121c:	fb01 f303 	mul.w	r3, r1, r3
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001220:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllp;
 8001222:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8001226:	e7da      	b.n	80011de <SystemCoreClockUpdate+0x12>
 8001228:	40023800 	.word	0x40023800
 800122c:	00f42400 	.word	0x00f42400
 8001230:	0800c4dc 	.word	0x0800c4dc
 8001234:	20000000 	.word	0x20000000
 8001238:	017d7840 	.word	0x017d7840

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001266:	f7ff ffa7 	bl	80011b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f008 f865 	bl	8009338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff fee7 	bl	8001040 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001274:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	200002ac 	.word	0x200002ac
  ldr r2, =_sidata
 8001280:	0800d7e8 	.word	0x0800d7e8
  ldr r2, =_sbss
 8001284:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 8001288:	2000b998 	.word	0x2000b998

0800128c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <CAN1_RX0_IRQHandler>
	...

08001290 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001290:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <HAL_IncTick+0x10>)
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <HAL_IncTick+0x14>)
 8001294:	6811      	ldr	r1, [r2, #0]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	440b      	add	r3, r1
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	20000390 	.word	0x20000390
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ac:	b082      	sub	sp, #8
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
  uint32_t timeout = SystemCoreClock / 9600U;
 80012ae:	4a74      	ldr	r2, [pc, #464]	; (8001480 <HAL_DMA_IRQHandler+0x1d8>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012b0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80012b2:	6815      	ldr	r5, [r2, #0]
  __IO uint32_t count = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	9301      	str	r3, [sp, #4]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80012ba:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	2208      	movs	r2, #8
 80012be:	409a      	lsls	r2, r3
 80012c0:	4222      	tst	r2, r4
{
 80012c2:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	d004      	beq.n	80012d0 <HAL_DMA_IRQHandler+0x28>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012c6:	6801      	ldr	r1, [r0, #0]
 80012c8:	680f      	ldr	r7, [r1, #0]
 80012ca:	0778      	lsls	r0, r7, #29
 80012cc:	f100 808a 	bmi.w	80013e4 <HAL_DMA_IRQHandler+0x13c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4222      	tst	r2, r4
 80012d6:	d004      	beq.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012d8:	f8d8 1000 	ldr.w	r1, [r8]
 80012dc:	6949      	ldr	r1, [r1, #20]
 80012de:	0609      	lsls	r1, r1, #24
 80012e0:	d478      	bmi.n	80013d4 <HAL_DMA_IRQHandler+0x12c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012e2:	2204      	movs	r2, #4
 80012e4:	409a      	lsls	r2, r3
 80012e6:	4222      	tst	r2, r4
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ea:	f8d8 1000 	ldr.w	r1, [r8]
 80012ee:	6809      	ldr	r1, [r1, #0]
 80012f0:	078f      	lsls	r7, r1, #30
 80012f2:	d467      	bmi.n	80013c4 <HAL_DMA_IRQHandler+0x11c>
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012f4:	2210      	movs	r2, #16
 80012f6:	409a      	lsls	r2, r3
 80012f8:	4222      	tst	r2, r4
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012fc:	f8d8 1000 	ldr.w	r1, [r8]
 8001300:	680f      	ldr	r7, [r1, #0]
 8001302:	0738      	lsls	r0, r7, #28
 8001304:	d449      	bmi.n	800139a <HAL_DMA_IRQHandler+0xf2>
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001306:	2220      	movs	r2, #32
 8001308:	409a      	lsls	r2, r3
 800130a:	4222      	tst	r2, r4
 800130c:	d017      	beq.n	800133e <HAL_DMA_IRQHandler+0x96>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800130e:	f8d8 1000 	ldr.w	r1, [r8]
 8001312:	680c      	ldr	r4, [r1, #0]
 8001314:	06e0      	lsls	r0, r4, #27
 8001316:	d512      	bpl.n	800133e <HAL_DMA_IRQHandler+0x96>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001318:	60b2      	str	r2, [r6, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800131a:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 800131e:	2a05      	cmp	r2, #5
 8001320:	d073      	beq.n	800140a <HAL_DMA_IRQHandler+0x162>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001322:	680b      	ldr	r3, [r1, #0]
 8001324:	f413 2f80 	tst.w	r3, #262144	; 0x40000
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001328:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800132a:	f000 8090 	beq.w	800144e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800132e:	0319      	lsls	r1, r3, #12
 8001330:	f140 809b 	bpl.w	800146a <HAL_DMA_IRQHandler+0x1c2>

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
        }

        if(hdma->XferCpltCallback != NULL)
 8001334:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001338:	b10b      	cbz	r3, 800133e <HAL_DMA_IRQHandler+0x96>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800133a:	4640      	mov	r0, r8
 800133c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800133e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001342:	b33b      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001344:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001348:	07da      	lsls	r2, r3, #31
 800134a:	d51b      	bpl.n	8001384 <HAL_DMA_IRQHandler+0xdc>
    {
      hdma->State = HAL_DMA_STATE_ABORT;

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800134c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001350:	494c      	ldr	r1, [pc, #304]	; (8001484 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8001352:	2305      	movs	r3, #5
 8001354:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001358:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800135a:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 800135e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001362:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e002      	b.n	800136e <HAL_DMA_IRQHandler+0xc6>
        if (++count > timeout)
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	07db      	lsls	r3, r3, #31
 800136c:	d504      	bpl.n	8001378 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800136e:	9b01      	ldr	r3, [sp, #4]
 8001370:	3301      	adds	r3, #1
 8001372:	42ab      	cmp	r3, r5
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	d9f7      	bls.n	8001368 <HAL_DMA_IRQHandler+0xc0>

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001378:	2201      	movs	r2, #1

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800137a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800137c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001380:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001384:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8001388:	b123      	cbz	r3, 8001394 <HAL_DMA_IRQHandler+0xec>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138a:	4640      	mov	r0, r8
    }
  }
}
 800138c:	b002      	add	sp, #8
 800138e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8001392:	4718      	bx	r3
}
 8001394:	b002      	add	sp, #8
 8001396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800139a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800139c:	680a      	ldr	r2, [r1, #0]
 800139e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013a2:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013a4:	d12a      	bne.n	80013fc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013a6:	05d7      	lsls	r7, r2, #23
 80013a8:	d403      	bmi.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013aa:	680a      	ldr	r2, [r1, #0]
 80013ac:	f022 0208 	bic.w	r2, r2, #8
 80013b0:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80013b2:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d0a5      	beq.n	8001306 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 80013ba:	4640      	mov	r0, r8
 80013bc:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013be:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80013c2:	e7a0      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013c4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013c6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013ca:	f042 0204 	orr.w	r2, r2, #4
 80013ce:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013d2:	e78f      	b.n	80012f4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013d4:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013d6:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013da:	f042 0202 	orr.w	r2, r2, #2
 80013de:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013e2:	e77e      	b.n	80012e2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013e4:	680f      	ldr	r7, [r1, #0]
 80013e6:	f027 0704 	bic.w	r7, r7, #4
 80013ea:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013ec:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013ee:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80013f2:	f042 0201 	orr.w	r2, r2, #1
 80013f6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80013fa:	e769      	b.n	80012d0 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fc:	0312      	lsls	r2, r2, #12
 80013fe:	d5d8      	bpl.n	80013b2 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001400:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 8001404:	2a00      	cmp	r2, #0
 8001406:	d1d8      	bne.n	80013ba <HAL_DMA_IRQHandler+0x112>
 8001408:	e77d      	b.n	8001306 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800140a:	680a      	ldr	r2, [r1, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	694a      	ldr	r2, [r1, #20]
 8001414:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001418:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800141a:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 800141e:	b352      	cbz	r2, 8001476 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001420:	680a      	ldr	r2, [r1, #0]
 8001422:	f022 0208 	bic.w	r2, r2, #8
 8001426:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001428:	223f      	movs	r2, #63	; 0x3f
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 800142e:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001432:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001434:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 8001436:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001438:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800143c:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001440:	2900      	cmp	r1, #0
 8001442:	d0a7      	beq.n	8001394 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8001444:	4640      	mov	r0, r8
}
 8001446:	b002      	add	sp, #8
 8001448:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800144c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800144e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001452:	f47f af6f 	bne.w	8001334 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001456:	680a      	ldr	r2, [r1, #0]
 8001458:	f022 0210 	bic.w	r2, r2, #16
 800145c:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800145e:	2201      	movs	r2, #1
 8001460:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001464:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 8001468:	e764      	b.n	8001334 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800146a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af63 	bne.w	800133a <HAL_DMA_IRQHandler+0x92>
 8001474:	e763      	b.n	800133e <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001476:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800147a:	2a00      	cmp	r2, #0
 800147c:	d1d0      	bne.n	8001420 <HAL_DMA_IRQHandler+0x178>
 800147e:	e7d3      	b.n	8001428 <HAL_DMA_IRQHandler+0x180>
 8001480:	20000000 	.word	0x20000000
 8001484:	1b4e81b5 	.word	0x1b4e81b5

08001488 <HAL_ETH_PMTCallback>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_ETH_WakeUpCallback>:
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop

08001490 <HAL_ETH_IRQHandler>:
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001490:	6802      	ldr	r2, [r0, #0]
 8001492:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
{
 8001496:	b510      	push	{r4, lr}
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001498:	6959      	ldr	r1, [r3, #20]
 800149a:	0649      	lsls	r1, r1, #25
{
 800149c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800149e:	d502      	bpl.n	80014a6 <HAL_ETH_IRQHandler+0x16>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80014a0:	69d9      	ldr	r1, [r3, #28]
 80014a2:	0649      	lsls	r1, r1, #25
 80014a4:	d448      	bmi.n	8001538 <HAL_ETH_IRQHandler+0xa8>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80014a6:	6959      	ldr	r1, [r3, #20]
 80014a8:	07c9      	lsls	r1, r1, #31
 80014aa:	d502      	bpl.n	80014b2 <HAL_ETH_IRQHandler+0x22>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80014ac:	69d9      	ldr	r1, [r3, #28]
 80014ae:	07c8      	lsls	r0, r1, #31
 80014b0:	d438      	bmi.n	8001524 <HAL_ETH_IRQHandler+0x94>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80014b2:	6959      	ldr	r1, [r3, #20]
 80014b4:	0409      	lsls	r1, r1, #16
 80014b6:	d502      	bpl.n	80014be <HAL_ETH_IRQHandler+0x2e>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80014b8:	69d9      	ldr	r1, [r3, #28]
 80014ba:	0408      	lsls	r0, r1, #16
 80014bc:	d40e      	bmi.n	80014dc <HAL_ETH_IRQHandler+0x4c>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80014be:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80014c0:	0719      	lsls	r1, r3, #28
 80014c2:	d423      	bmi.n	800150c <HAL_ETH_IRQHandler+0x7c>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <HAL_ETH_IRQHandler+0xd0>)
 80014c6:	695a      	ldr	r2, [r3, #20]
 80014c8:	0312      	lsls	r2, r2, #12
 80014ca:	d400      	bmi.n	80014ce <HAL_ETH_IRQHandler+0x3e>
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80014cc:	bd10      	pop	{r4, pc}
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80014ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80014d2:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff ffd9 	bl	800148c <HAL_ETH_WakeUpCallback>
}
 80014da:	bd10      	pop	{r4, pc}
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80014dc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80014e0:	f042 0208 	orr.w	r2, r2, #8
 80014e4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014e8:	695a      	ldr	r2, [r3, #20]
 80014ea:	f412 5f00 	tst.w	r2, #8192	; 0x2000
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80014ee:	695a      	ldr	r2, [r3, #20]
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80014f0:	d12a      	bne.n	8001548 <HAL_ETH_IRQHandler+0xb8>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014f2:	f248 6180 	movw	r1, #34432	; 0x8680
 80014f6:	400a      	ands	r2, r1
 80014f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80014fc:	6159      	str	r1, [r3, #20]
      HAL_ETH_ErrorCallback(heth);
 80014fe:	4620      	mov	r0, r4
 8001500:	f000 f844 	bl	800158c <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001508:	0719      	lsls	r1, r3, #28
 800150a:	d5db      	bpl.n	80014c4 <HAL_ETH_IRQHandler+0x34>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800150c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800150e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001512:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001516:	4620      	mov	r0, r4
 8001518:	f7ff ffb6 	bl	8001488 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800151c:	2300      	movs	r3, #0
 800151e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001522:	e7cf      	b.n	80014c4 <HAL_ETH_IRQHandler+0x34>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001524:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001528:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 800152a:	4620      	mov	r0, r4
 800152c:	f000 f828 	bl	8001580 <HAL_ETH_TxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001530:	6822      	ldr	r2, [r4, #0]
 8001532:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001536:	e7bc      	b.n	80014b2 <HAL_ETH_IRQHandler+0x22>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001538:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <HAL_ETH_IRQHandler+0xd4>)
 800153a:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 800153c:	f000 f81a 	bl	8001574 <HAL_ETH_RxCpltCallback>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001546:	e7ae      	b.n	80014a6 <HAL_ETH_IRQHandler+0x16>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <HAL_ETH_IRQHandler+0xd8>)
 800154a:	4002      	ands	r2, r0
 800154c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001550:	69da      	ldr	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001552:	21e0      	movs	r1, #224	; 0xe0
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001554:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001558:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 800155a:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
 800155e:	e7ce      	b.n	80014fe <HAL_ETH_IRQHandler+0x6e>
 8001560:	40013c00 	.word	0x40013c00
 8001564:	00010040 	.word	0x00010040
 8001568:	007e2000 	.word	0x007e2000

0800156c <HAL_ETH_GetDMAError>:
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
  return heth->DMAErrorCode;
 800156c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop

08001574 <HAL_ETH_RxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(RxPktSemaphore);
 8001574:	4b01      	ldr	r3, [pc, #4]	; (800157c <HAL_ETH_RxCpltCallback+0x8>)
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f000 b816 	b.w	80015a8 <osSemaphoreRelease>
 800157c:	20000394 	.word	0x20000394

08001580 <HAL_ETH_TxCpltCallback>:
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
  osSemaphoreRelease(TxPktSemaphore);
 8001580:	4b01      	ldr	r3, [pc, #4]	; (8001588 <HAL_ETH_TxCpltCallback+0x8>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	f000 b810 	b.w	80015a8 <osSemaphoreRelease>
 8001588:	20000398 	.word	0x20000398

0800158c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800158c:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800158e:	f7ff ffed 	bl	800156c <HAL_ETH_GetDMAError>
 8001592:	0603      	lsls	r3, r0, #24
 8001594:	d400      	bmi.n	8001598 <HAL_ETH_ErrorCallback+0xc>
  {
     osSemaphoreRelease(RxPktSemaphore);
  }
}
 8001596:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 8001598:	4b02      	ldr	r3, [pc, #8]	; (80015a4 <HAL_ETH_ErrorCallback+0x18>)
 800159a:	6818      	ldr	r0, [r3, #0]
}
 800159c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     osSemaphoreRelease(RxPktSemaphore);
 80015a0:	f000 b802 	b.w	80015a8 <osSemaphoreRelease>
 80015a4:	20000394 	.word	0x20000394

080015a8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80015a8:	b330      	cbz	r0, 80015f8 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80015aa:	b510      	push	{r4, lr}
 80015ac:	b082      	sub	sp, #8
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80015ae:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80015b2:	b1ab      	cbz	r3, 80015e0 <osSemaphoreRelease+0x38>
    yield = pdFALSE;
 80015b4:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015b6:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 80015b8:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80015ba:	f000 fb99 	bl	8001cf0 <xQueueGiveFromISR>
 80015be:	2801      	cmp	r0, #1
 80015c0:	d117      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80015c2:	9b01      	ldr	r3, [sp, #4]
 80015c4:	b193      	cbz	r3, 80015ec <osSemaphoreRelease+0x44>
 80015c6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80015ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80015d2:	f3bf 8f4f 	dsb	sy
 80015d6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80015da:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80015dc:	b002      	add	sp, #8
 80015de:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80015e0:	461a      	mov	r2, r3
 80015e2:	4619      	mov	r1, r3
 80015e4:	f000 f968 	bl	80018b8 <xQueueGenericSend>
 80015e8:	2801      	cmp	r0, #1
 80015ea:	d102      	bne.n	80015f2 <osSemaphoreRelease+0x4a>
  stat = osOK;
 80015ec:	2000      	movs	r0, #0
}
 80015ee:	b002      	add	sp, #8
 80015f0:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
 80015f2:	f06f 0002 	mvn.w	r0, #2
 80015f6:	e7fa      	b.n	80015ee <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80015f8:	f06f 0003 	mvn.w	r0, #3
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <vApplicationGetIdleTaskMemory+0x14>)
 8001602:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001604:	b410      	push	{r4}
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001606:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001608:	4c03      	ldr	r4, [pc, #12]	; (8001618 <vApplicationGetIdleTaskMemory+0x18>)
 800160a:	600c      	str	r4, [r1, #0]
}
 800160c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001610:	6013      	str	r3, [r2, #0]
}
 8001612:	4770      	bx	lr
 8001614:	2000064c 	.word	0x2000064c
 8001618:	2000044c 	.word	0x2000044c

0800161c <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <vApplicationGetTimerTaskMemory+0x18>)
 800161e:	6003      	str	r3, [r0, #0]
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001620:	b410      	push	{r4}
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001622:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001626:	4c04      	ldr	r4, [pc, #16]	; (8001638 <vApplicationGetTimerTaskMemory+0x1c>)
 8001628:	600c      	str	r4, [r1, #0]
}
 800162a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000ab8 	.word	0x20000ab8
 8001638:	200006b8 	.word	0x200006b8

0800163c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800163c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001640:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001644:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001646:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800164a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800164e:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop

08001654 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001654:	2300      	movs	r3, #0
 8001656:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800165c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	608a      	str	r2, [r1, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001662:	6802      	ldr	r2, [r0, #0]
{
 8001664:	b410      	push	{r4}
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001666:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001668:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800166a:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800166c:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800166e:	6099      	str	r1, [r3, #8]
}
 8001670:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8001674:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001676:	6002      	str	r2, [r0, #0]
}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop

0800167c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800167c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800167e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001680:	1c6b      	adds	r3, r5, #1
 8001682:	d010      	beq.n	80016a6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001684:	f100 0308 	add.w	r3, r0, #8
 8001688:	461c      	mov	r4, r3
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	42aa      	cmp	r2, r5
 8001690:	d9fa      	bls.n	8001688 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001692:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8001694:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8001696:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001698:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800169a:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800169c:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 800169e:	6108      	str	r0, [r1, #16]
}
 80016a0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 80016a2:	6002      	str	r2, [r0, #0]
}
 80016a4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 80016a6:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 80016a8:	6863      	ldr	r3, [r4, #4]
 80016aa:	e7f2      	b.n	8001692 <vListInsert+0x16>

080016ac <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80016ac:	6903      	ldr	r3, [r0, #16]
{
 80016ae:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016b0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80016b4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80016b6:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 80016b8:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80016ba:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80016bc:	bf08      	it	eq
 80016be:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 80016c0:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80016c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 80016c6:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 80016c8:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 80016ca:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80016cc:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80016ce:	6818      	ldr	r0, [r3, #0]
}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop

080016d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80016d4:	b570      	push	{r4, r5, r6, lr}
 80016d6:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016d8:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80016da:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80016dc:	b920      	cbnz	r0, 80016e8 <prvCopyDataToQueue+0x14>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80016de:	6825      	ldr	r5, [r4, #0]
 80016e0:	b34d      	cbz	r5, 8001736 <prvCopyDataToQueue+0x62>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80016e2:	3601      	adds	r6, #1
 80016e4:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80016e6:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80016e8:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016ea:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 80016ec:	b97d      	cbnz	r5, 800170e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80016ee:	6860      	ldr	r0, [r4, #4]
 80016f0:	f007 fe56 	bl	80093a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016fa:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016fc:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80016fe:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001700:	bf24      	itt	cs
 8001702:	6823      	ldrcs	r3, [r4, #0]
 8001704:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001706:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001708:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800170a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800170c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800170e:	68e0      	ldr	r0, [r4, #12]
 8001710:	f007 fe46 	bl	80093a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001714:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001716:	68e3      	ldr	r3, [r4, #12]
 8001718:	4251      	negs	r1, r2
 800171a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800171c:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800171e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001720:	4293      	cmp	r3, r2
 8001722:	d202      	bcs.n	800172a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001724:	68a3      	ldr	r3, [r4, #8]
 8001726:	440b      	add	r3, r1
 8001728:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800172a:	2d02      	cmp	r5, #2
 800172c:	d008      	beq.n	8001740 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800172e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8001730:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001732:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001734:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001736:	68a0      	ldr	r0, [r4, #8]
 8001738:	f001 fd9e 	bl	8003278 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800173c:	60a5      	str	r5, [r4, #8]
 800173e:	e7d0      	b.n	80016e2 <prvCopyDataToQueue+0xe>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001740:	2e01      	cmp	r6, #1
 8001742:	bf38      	it	cc
 8001744:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 8001746:	2000      	movs	r0, #0
 8001748:	e7cc      	b.n	80016e4 <prvCopyDataToQueue+0x10>
 800174a:	bf00      	nop

0800174c <xQueueGenericCreateStatic>:
	{
 800174c:	b530      	push	{r4, r5, lr}
 800174e:	b083      	sub	sp, #12
 8001750:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001754:	b940      	cbnz	r0, 8001768 <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001756:	f04f 0340 	mov.w	r3, #64	; 0x40
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	e7fe      	b.n	8001766 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8001768:	461d      	mov	r5, r3
 800176a:	b17b      	cbz	r3, 800178c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800176c:	b302      	cbz	r2, 80017b0 <xQueueGenericCreateStatic+0x64>
 800176e:	b1b1      	cbz	r1, 800179e <xQueueGenericCreateStatic+0x52>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001770:	2350      	movs	r3, #80	; 0x50
 8001772:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001774:	9b01      	ldr	r3, [sp, #4]
 8001776:	2b50      	cmp	r3, #80	; 0x50
 8001778:	d027      	beq.n	80017ca <xQueueGenericCreateStatic+0x7e>
 800177a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800177e:	f383 8811 	msr	BASEPRI, r3
 8001782:	f3bf 8f6f 	isb	sy
 8001786:	f3bf 8f4f 	dsb	sy
 800178a:	e7fe      	b.n	800178a <xQueueGenericCreateStatic+0x3e>
 800178c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001790:	f383 8811 	msr	BASEPRI, r3
 8001794:	f3bf 8f6f 	isb	sy
 8001798:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800179c:	e7fe      	b.n	800179c <xQueueGenericCreateStatic+0x50>
 800179e:	f04f 0340 	mov.w	r3, #64	; 0x40
 80017a2:	f383 8811 	msr	BASEPRI, r3
 80017a6:	f3bf 8f6f 	isb	sy
 80017aa:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80017ae:	e7fe      	b.n	80017ae <xQueueGenericCreateStatic+0x62>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80017b0:	2900      	cmp	r1, #0
 80017b2:	d135      	bne.n	8001820 <xQueueGenericCreateStatic+0xd4>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80017b4:	2250      	movs	r2, #80	; 0x50
 80017b6:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80017b8:	9a01      	ldr	r2, [sp, #4]
 80017ba:	2a50      	cmp	r2, #80	; 0x50
 80017bc:	d1dd      	bne.n	800177a <xQueueGenericCreateStatic+0x2e>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017be:	2201      	movs	r2, #1
 80017c0:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80017c4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017c6:	462a      	mov	r2, r5
 80017c8:	e004      	b.n	80017d4 <xQueueGenericCreateStatic+0x88>
 80017ca:	f04f 0c01 	mov.w	ip, #1
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80017ce:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80017d0:	f885 c046 	strb.w	ip, [r5, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 80017d4:	e9c5 010f 	strd	r0, r1, [r5, #60]	; 0x3c
 80017d8:	602a      	str	r2, [r5, #0]
	taskENTER_CRITICAL();
 80017da:	f002 f84b 	bl	8003874 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017de:	e9d5 120f 	ldrd	r1, r2, [r5, #60]	; 0x3c
 80017e2:	6828      	ldr	r0, [r5, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80017e4:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017e6:	fb02 f101 	mul.w	r1, r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ea:	1a8a      	subs	r2, r1, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017ec:	4401      	add	r1, r0
 80017ee:	60a9      	str	r1, [r5, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017f0:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017f2:	4402      	add	r2, r0
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80017f4:	63a9      	str	r1, [r5, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80017f6:	21ff      	movs	r1, #255	; 0xff
 80017f8:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80017fc:	60ea      	str	r2, [r5, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 80017fe:	f885 1045 	strb.w	r1, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001802:	f105 0010 	add.w	r0, r5, #16
 8001806:	f7ff ff19 	bl	800163c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800180a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800180e:	f7ff ff15 	bl	800163c <vListInitialise>
	taskEXIT_CRITICAL();
 8001812:	f002 f851 	bl	80038b8 <vPortExitCritical>
	}
 8001816:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
 8001818:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
 800181c:	b003      	add	sp, #12
 800181e:	bd30      	pop	{r4, r5, pc}
 8001820:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001824:	f383 8811 	msr	BASEPRI, r3
 8001828:	f3bf 8f6f 	isb	sy
 800182c:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001830:	e7fe      	b.n	8001830 <xQueueGenericCreateStatic+0xe4>
 8001832:	bf00      	nop

08001834 <xQueueGenericCreate>:
	{
 8001834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001836:	b940      	cbnz	r0, 800184a <xQueueGenericCreate+0x16>
 8001838:	f04f 0340 	mov.w	r3, #64	; 0x40
 800183c:	f383 8811 	msr	BASEPRI, r3
 8001840:	f3bf 8f6f 	isb	sy
 8001844:	f3bf 8f4f 	dsb	sy
 8001848:	e7fe      	b.n	8001848 <xQueueGenericCreate+0x14>
 800184a:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800184c:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001850:	3050      	adds	r0, #80	; 0x50
 8001852:	460e      	mov	r6, r1
 8001854:	4617      	mov	r7, r2
 8001856:	f002 f96d 	bl	8003b34 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800185a:	4604      	mov	r4, r0
 800185c:	b340      	cbz	r0, 80018b0 <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800185e:	2300      	movs	r3, #0
 8001860:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001864:	b336      	cbz	r6, 80018b4 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001866:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800186a:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800186c:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001870:	f002 f800 	bl	8003874 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001874:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001878:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800187a:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800187c:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001880:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001882:	440a      	add	r2, r1
 8001884:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001886:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001888:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800188a:	63a2      	str	r2, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800188c:	22ff      	movs	r2, #255	; 0xff
 800188e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001892:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8001894:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001898:	f104 0010 	add.w	r0, r4, #16
 800189c:	f7ff fece 	bl	800163c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80018a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018a4:	f7ff feca 	bl	800163c <vListInitialise>
	taskEXIT_CRITICAL();
 80018a8:	f002 f806 	bl	80038b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 80018ac:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 80018b0:	4620      	mov	r0, r4
 80018b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018b4:	4603      	mov	r3, r0
 80018b6:	e7d8      	b.n	800186a <xQueueGenericCreate+0x36>

080018b8 <xQueueGenericSend>:
{
 80018b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80018bc:	b085      	sub	sp, #20
 80018be:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80018c0:	2800      	cmp	r0, #0
 80018c2:	f000 80a4 	beq.w	8001a0e <xQueueGenericSend+0x156>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80018c6:	4688      	mov	r8, r1
 80018c8:	461f      	mov	r7, r3
 80018ca:	4604      	mov	r4, r0
 80018cc:	2900      	cmp	r1, #0
 80018ce:	f000 8091 	beq.w	80019f4 <xQueueGenericSend+0x13c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80018d2:	2f02      	cmp	r7, #2
 80018d4:	d10b      	bne.n	80018ee <xQueueGenericSend+0x36>
 80018d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d008      	beq.n	80018ee <xQueueGenericSend+0x36>
 80018dc:	f04f 0340 	mov.w	r3, #64	; 0x40
 80018e0:	f383 8811 	msr	BASEPRI, r3
 80018e4:	f3bf 8f6f 	isb	sy
 80018e8:	f3bf 8f4f 	dsb	sy
 80018ec:	e7fe      	b.n	80018ec <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80018ee:	f001 fc6d 	bl	80031cc <xTaskGetSchedulerState>
 80018f2:	4605      	mov	r5, r0
 80018f4:	2800      	cmp	r0, #0
 80018f6:	f000 8093 	beq.w	8001a20 <xQueueGenericSend+0x168>
 80018fa:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018fc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 8001900:	f001 ffb8 	bl	8003874 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001904:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001906:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001908:	429a      	cmp	r2, r3
 800190a:	f0c0 80ef 	bcc.w	8001aec <xQueueGenericSend+0x234>
 800190e:	2f02      	cmp	r7, #2
 8001910:	f000 80ec 	beq.w	8001aec <xQueueGenericSend+0x234>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001914:	9801      	ldr	r0, [sp, #4]
 8001916:	2800      	cmp	r0, #0
 8001918:	f000 8101 	beq.w	8001b1e <xQueueGenericSend+0x266>
				else if( xEntryTimeSet == pdFALSE )
 800191c:	2d00      	cmp	r5, #0
 800191e:	f000 80e1 	beq.w	8001ae4 <xQueueGenericSend+0x22c>
		taskEXIT_CRITICAL();
 8001922:	f001 ffc9 	bl	80038b8 <vPortExitCritical>
		vTaskSuspendAll();
 8001926:	f001 facf 	bl	8002ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800192a:	f001 ffa3 	bl	8003874 <vPortEnterCritical>
 800192e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001932:	2bff      	cmp	r3, #255	; 0xff
 8001934:	bf04      	itt	eq
 8001936:	2300      	moveq	r3, #0
 8001938:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800193c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001940:	2bff      	cmp	r3, #255	; 0xff
 8001942:	bf04      	itt	eq
 8001944:	2300      	moveq	r3, #0
 8001946:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800194a:	f001 ffb5 	bl	80038b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800194e:	a901      	add	r1, sp, #4
 8001950:	a802      	add	r0, sp, #8
 8001952:	f001 fbe1 	bl	8003118 <xTaskCheckForTimeOut>
 8001956:	2800      	cmp	r0, #0
 8001958:	f040 80e6 	bne.w	8001b28 <xQueueGenericSend+0x270>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800195c:	f001 ff8a 	bl	8003874 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001960:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001962:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001964:	429a      	cmp	r2, r3
 8001966:	d068      	beq.n	8001a3a <xQueueGenericSend+0x182>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001968:	f001 ffa6 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800196c:	f001 ff82 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001970:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8001974:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001976:	2d00      	cmp	r5, #0
 8001978:	dc04      	bgt.n	8001984 <xQueueGenericSend+0xcc>
 800197a:	e011      	b.n	80019a0 <xQueueGenericSend+0xe8>
			--cTxLock;
 800197c:	1e6a      	subs	r2, r5, #1
 800197e:	b2d3      	uxtb	r3, r2
 8001980:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001982:	b16b      	cbz	r3, 80019a0 <xQueueGenericSend+0xe8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001984:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001986:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001988:	b153      	cbz	r3, 80019a0 <xQueueGenericSend+0xe8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800198a:	f001 fb71 	bl	8003070 <xTaskRemoveFromEventList>
 800198e:	2800      	cmp	r0, #0
 8001990:	d0f4      	beq.n	800197c <xQueueGenericSend+0xc4>
						vTaskMissedYield();
 8001992:	f001 fc15 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 8001996:	1e6a      	subs	r2, r5, #1
 8001998:	b2d3      	uxtb	r3, r2
 800199a:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f1      	bne.n	8001984 <xQueueGenericSend+0xcc>
		pxQueue->cTxLock = queueUNLOCKED;
 80019a0:	23ff      	movs	r3, #255	; 0xff
 80019a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80019a6:	f001 ff87 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80019aa:	f001 ff63 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80019ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80019b2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019b4:	2d00      	cmp	r5, #0
 80019b6:	dd14      	ble.n	80019e2 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019b8:	f104 0910 	add.w	r9, r4, #16
 80019bc:	e003      	b.n	80019c6 <xQueueGenericSend+0x10e>
				--cRxLock;
 80019be:	1e6a      	subs	r2, r5, #1
 80019c0:	b2d3      	uxtb	r3, r2
 80019c2:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019c4:	b16b      	cbz	r3, 80019e2 <xQueueGenericSend+0x12a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019c6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019c8:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019ca:	b153      	cbz	r3, 80019e2 <xQueueGenericSend+0x12a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019cc:	f001 fb50 	bl	8003070 <xTaskRemoveFromEventList>
 80019d0:	2800      	cmp	r0, #0
 80019d2:	d0f4      	beq.n	80019be <xQueueGenericSend+0x106>
					vTaskMissedYield();
 80019d4:	f001 fbf4 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 80019d8:	1e6a      	subs	r2, r5, #1
 80019da:	b2d3      	uxtb	r3, r2
 80019dc:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f1      	bne.n	80019c6 <xQueueGenericSend+0x10e>
		pxQueue->cRxLock = queueUNLOCKED;
 80019e2:	23ff      	movs	r3, #255	; 0xff
 80019e4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80019e8:	f001 ff66 	bl	80038b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80019ec:	f001 fa74 	bl	8002ed8 <xTaskResumeAll>
 80019f0:	2501      	movs	r5, #1
 80019f2:	e785      	b.n	8001900 <xQueueGenericSend+0x48>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80019f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f43f af6b 	beq.w	80018d2 <xQueueGenericSend+0x1a>
 80019fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a00:	f383 8811 	msr	BASEPRI, r3
 8001a04:	f3bf 8f6f 	isb	sy
 8001a08:	f3bf 8f4f 	dsb	sy
 8001a0c:	e7fe      	b.n	8001a0c <xQueueGenericSend+0x154>
 8001a0e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a12:	f383 8811 	msr	BASEPRI, r3
 8001a16:	f3bf 8f6f 	isb	sy
 8001a1a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001a1e:	e7fe      	b.n	8001a1e <xQueueGenericSend+0x166>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a20:	9b01      	ldr	r3, [sp, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f43f af6a 	beq.w	80018fc <xQueueGenericSend+0x44>
 8001a28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a2c:	f383 8811 	msr	BASEPRI, r3
 8001a30:	f3bf 8f6f 	isb	sy
 8001a34:	f3bf 8f4f 	dsb	sy
 8001a38:	e7fe      	b.n	8001a38 <xQueueGenericSend+0x180>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a3a:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8001a3e:	f001 ff3b 	bl	80038b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001a42:	9901      	ldr	r1, [sp, #4]
 8001a44:	4648      	mov	r0, r9
 8001a46:	f001 fa7b 	bl	8002f40 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001a4a:	f001 ff13 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001a4e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001a52:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a54:	2d00      	cmp	r5, #0
 8001a56:	dc04      	bgt.n	8001a62 <xQueueGenericSend+0x1aa>
 8001a58:	e011      	b.n	8001a7e <xQueueGenericSend+0x1c6>
			--cTxLock;
 8001a5a:	1e6b      	subs	r3, r5, #1
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a60:	b16a      	cbz	r2, 8001a7e <xQueueGenericSend+0x1c6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a64:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001a66:	b153      	cbz	r3, 8001a7e <xQueueGenericSend+0x1c6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001a68:	f001 fb02 	bl	8003070 <xTaskRemoveFromEventList>
 8001a6c:	2800      	cmp	r0, #0
 8001a6e:	d0f4      	beq.n	8001a5a <xQueueGenericSend+0x1a2>
						vTaskMissedYield();
 8001a70:	f001 fba6 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 8001a74:	1e6b      	subs	r3, r5, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001a7a:	2a00      	cmp	r2, #0
 8001a7c:	d1f1      	bne.n	8001a62 <xQueueGenericSend+0x1aa>
		pxQueue->cTxLock = queueUNLOCKED;
 8001a7e:	23ff      	movs	r3, #255	; 0xff
 8001a80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001a84:	f001 ff18 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001a88:	f001 fef4 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001a8c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001a90:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	dc04      	bgt.n	8001aa0 <xQueueGenericSend+0x1e8>
 8001a96:	e011      	b.n	8001abc <xQueueGenericSend+0x204>
				--cRxLock;
 8001a98:	1e6b      	subs	r3, r5, #1
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001a9e:	b16a      	cbz	r2, 8001abc <xQueueGenericSend+0x204>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aa2:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001aa4:	b153      	cbz	r3, 8001abc <xQueueGenericSend+0x204>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001aa6:	f001 fae3 	bl	8003070 <xTaskRemoveFromEventList>
 8001aaa:	2800      	cmp	r0, #0
 8001aac:	d0f4      	beq.n	8001a98 <xQueueGenericSend+0x1e0>
					vTaskMissedYield();
 8001aae:	f001 fb87 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 8001ab2:	1e6b      	subs	r3, r5, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ab8:	2a00      	cmp	r2, #0
 8001aba:	d1f1      	bne.n	8001aa0 <xQueueGenericSend+0x1e8>
		pxQueue->cRxLock = queueUNLOCKED;
 8001abc:	23ff      	movs	r3, #255	; 0xff
 8001abe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001ac2:	f001 fef9 	bl	80038b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8001ac6:	f001 fa07 	bl	8002ed8 <xTaskResumeAll>
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d190      	bne.n	80019f0 <xQueueGenericSend+0x138>
					portYIELD_WITHIN_API();
 8001ace:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ad6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001ada:	f3bf 8f4f 	dsb	sy
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	e785      	b.n	80019f0 <xQueueGenericSend+0x138>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001ae4:	a802      	add	r0, sp, #8
 8001ae6:	f001 fb0b 	bl	8003100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001aea:	e71a      	b.n	8001922 <xQueueGenericSend+0x6a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001aec:	463a      	mov	r2, r7
 8001aee:	4641      	mov	r1, r8
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff fdef 	bl	80016d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d153      	bne.n	8001ba4 <xQueueGenericSend+0x2ec>
					else if( xYieldRequired != pdFALSE )
 8001afc:	b148      	cbz	r0, 8001b12 <xQueueGenericSend+0x25a>
						queueYIELD_IF_USING_PREEMPTION();
 8001afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8001b0a:	f3bf 8f4f 	dsb	sy
 8001b0e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001b12:	f001 fed1 	bl	80038b8 <vPortExitCritical>
				return pdPASS;
 8001b16:	2001      	movs	r0, #1
}
 8001b18:	b005      	add	sp, #20
 8001b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b1e:	9000      	str	r0, [sp, #0]
					taskEXIT_CRITICAL();
 8001b20:	f001 feca 	bl	80038b8 <vPortExitCritical>
					return errQUEUE_FULL;
 8001b24:	9800      	ldr	r0, [sp, #0]
 8001b26:	e7f7      	b.n	8001b18 <xQueueGenericSend+0x260>
	taskENTER_CRITICAL();
 8001b28:	f001 fea4 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001b2c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b30:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b32:	2d00      	cmp	r5, #0
 8001b34:	dd10      	ble.n	8001b58 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b36:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8001b3a:	e003      	b.n	8001b44 <xQueueGenericSend+0x28c>
			--cTxLock;
 8001b3c:	1e6b      	subs	r3, r5, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001b42:	b14a      	cbz	r2, 8001b58 <xQueueGenericSend+0x2a0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b46:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001b48:	b133      	cbz	r3, 8001b58 <xQueueGenericSend+0x2a0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001b4a:	f001 fa91 	bl	8003070 <xTaskRemoveFromEventList>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d0f4      	beq.n	8001b3c <xQueueGenericSend+0x284>
						vTaskMissedYield();
 8001b52:	f001 fb35 	bl	80031c0 <vTaskMissedYield>
 8001b56:	e7f1      	b.n	8001b3c <xQueueGenericSend+0x284>
		pxQueue->cTxLock = queueUNLOCKED;
 8001b58:	23ff      	movs	r3, #255	; 0xff
 8001b5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001b5e:	f001 feab 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001b62:	f001 fe87 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001b66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b6c:	2d00      	cmp	r5, #0
 8001b6e:	dd10      	ble.n	8001b92 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b70:	f104 0610 	add.w	r6, r4, #16
 8001b74:	e003      	b.n	8001b7e <xQueueGenericSend+0x2c6>
				--cRxLock;
 8001b76:	1e6b      	subs	r3, r5, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001b7c:	b14a      	cbz	r2, 8001b92 <xQueueGenericSend+0x2da>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b80:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b82:	b133      	cbz	r3, 8001b92 <xQueueGenericSend+0x2da>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b84:	f001 fa74 	bl	8003070 <xTaskRemoveFromEventList>
 8001b88:	2800      	cmp	r0, #0
 8001b8a:	d0f4      	beq.n	8001b76 <xQueueGenericSend+0x2be>
					vTaskMissedYield();
 8001b8c:	f001 fb18 	bl	80031c0 <vTaskMissedYield>
 8001b90:	e7f1      	b.n	8001b76 <xQueueGenericSend+0x2be>
		pxQueue->cRxLock = queueUNLOCKED;
 8001b92:	23ff      	movs	r3, #255	; 0xff
 8001b94:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001b98:	f001 fe8e 	bl	80038b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001b9c:	f001 f99c 	bl	8002ed8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	e7b9      	b.n	8001b18 <xQueueGenericSend+0x260>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ba4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ba8:	f001 fa62 	bl	8003070 <xTaskRemoveFromEventList>
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d0b0      	beq.n	8001b12 <xQueueGenericSend+0x25a>
 8001bb0:	e7a5      	b.n	8001afe <xQueueGenericSend+0x246>
 8001bb2:	bf00      	nop

08001bb4 <xQueueCreateMutex>:
	{
 8001bb4:	b570      	push	{r4, r5, r6, lr}
 8001bb6:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001bb8:	2050      	movs	r0, #80	; 0x50
 8001bba:	f001 ffbb 	bl	8003b34 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	b370      	cbz	r0, 8001c20 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001bc2:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8001bc4:	2301      	movs	r3, #1
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001bc6:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bca:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8001bcc:	e9c0 350f 	strd	r3, r5, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
 8001bd0:	f001 fe50 	bl	8003874 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bd4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
 8001bd8:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001bda:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bdc:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	440b      	add	r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001be6:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001be8:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001bea:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001bec:	63a5      	str	r5, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bee:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 8001bf2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001bfa:	f7ff fd1f 	bl	800163c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001bfe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c02:	f7ff fd1b 	bl	800163c <vListInitialise>
	taskEXIT_CRITICAL();
 8001c06:	f001 fe57 	bl	80038b8 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
 8001c0a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8001c0e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001c10:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8001c12:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001c14:	462b      	mov	r3, r5
 8001c16:	462a      	mov	r2, r5
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff fe4c 	bl	80018b8 <xQueueGenericSend>
	}
 8001c20:	4620      	mov	r0, r4
 8001c22:	bd70      	pop	{r4, r5, r6, pc}

08001c24 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d04b      	beq.n	8001cc0 <xQueueGenericSendFromISR+0x9c>
{
 8001c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c2c:	460e      	mov	r6, r1
 8001c2e:	4617      	mov	r7, r2
 8001c30:	461d      	mov	r5, r3
 8001c32:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c34:	b321      	cbz	r1, 8001c80 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001c36:	2d02      	cmp	r5, #2
 8001c38:	d10b      	bne.n	8001c52 <xQueueGenericSendFromISR+0x2e>
 8001c3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d008      	beq.n	8001c52 <xQueueGenericSendFromISR+0x2e>
 8001c40:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c44:	f383 8811 	msr	BASEPRI, r3
 8001c48:	f3bf 8f6f 	isb	sy
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	e7fe      	b.n	8001c50 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c52:	f001 ff41 	bl	8003ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c56:	f3ef 8811 	mrs	r8, BASEPRI
 8001c5a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c5e:	f383 8811 	msr	BASEPRI, r3
 8001c62:	f3bf 8f6f 	isb	sy
 8001c66:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001c6a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d312      	bcc.n	8001c98 <xQueueGenericSendFromISR+0x74>
 8001c72:	2d02      	cmp	r5, #2
 8001c74:	d010      	beq.n	8001c98 <xQueueGenericSendFromISR+0x74>
			xReturn = errQUEUE_FULL;
 8001c76:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c78:	f388 8811 	msr	BASEPRI, r8
}
 8001c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0d7      	beq.n	8001c36 <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8001c86:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	e7fe      	b.n	8001c96 <xQueueGenericSendFromISR+0x72>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001c98:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8001c9a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ca0:	4631      	mov	r1, r6
			const int8_t cTxLock = pxQueue->cTxLock;
 8001ca2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f7ff fd15 	bl	80016d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8001caa:	1c6b      	adds	r3, r5, #1
 8001cac:	d011      	beq.n	8001cd2 <xQueueGenericSendFromISR+0xae>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001cae:	1c6b      	adds	r3, r5, #1
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8001cb6:	2001      	movs	r0, #1
	__asm volatile
 8001cb8:	f388 8811 	msr	BASEPRI, r8
}
 8001cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8001cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001cc4:	f383 8811 	msr	BASEPRI, r3
 8001cc8:	f3bf 8f6f 	isb	sy
 8001ccc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001cd0:	e7fe      	b.n	8001cd0 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001cd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0ee      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x92>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001cd8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cdc:	f001 f9c8 	bl	8003070 <xTaskRemoveFromEventList>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d0e8      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 8001ce4:	2f00      	cmp	r7, #0
 8001ce6:	d0e6      	beq.n	8001cb6 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001ce8:	2001      	movs	r0, #1
 8001cea:	6038      	str	r0, [r7, #0]
 8001cec:	e7c4      	b.n	8001c78 <xQueueGenericSendFromISR+0x54>
 8001cee:	bf00      	nop

08001cf0 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8001cf0:	b370      	cbz	r0, 8001d50 <xQueueGiveFromISR+0x60>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001cf2:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8001cf4:	b570      	push	{r4, r5, r6, lr}
 8001cf6:	4606      	mov	r6, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8001cf8:	b143      	cbz	r3, 8001d0c <xQueueGiveFromISR+0x1c>
 8001cfa:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	e7fe      	b.n	8001d0a <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	460c      	mov	r4, r1
 8001d10:	b33b      	cbz	r3, 8001d62 <xQueueGiveFromISR+0x72>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001d12:	f001 fee1 	bl	8003ad8 <vPortValidateInterruptPriority>
	__asm volatile
 8001d16:	f3ef 8511 	mrs	r5, BASEPRI
 8001d1a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001d2a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8001d2c:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d923      	bls.n	8001d7a <xQueueGiveFromISR+0x8a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d32:	f896 2045 	ldrb.w	r2, [r6, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001d36:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8001d38:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001d3a:	63b3      	str	r3, [r6, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8001d3c:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8001d3e:	d020      	beq.n	8001d82 <xQueueGiveFromISR+0x92>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001d40:	3301      	adds	r3, #1
 8001d42:	b25b      	sxtb	r3, r3
 8001d44:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
			xReturn = pdPASS;
 8001d48:	2001      	movs	r0, #1
	__asm volatile
 8001d4a:	f385 8811 	msr	BASEPRI, r5
}
 8001d4e:	bd70      	pop	{r4, r5, r6, pc}
	__asm volatile
 8001d50:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d54:	f383 8811 	msr	BASEPRI, r3
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8001d60:	e7fe      	b.n	8001d60 <xQueueGiveFromISR+0x70>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8001d62:	6883      	ldr	r3, [r0, #8]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0d4      	beq.n	8001d12 <xQueueGiveFromISR+0x22>
 8001d68:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001d6c:	f383 8811 	msr	BASEPRI, r3
 8001d70:	f3bf 8f6f 	isb	sy
 8001d74:	f3bf 8f4f 	dsb	sy
 8001d78:	e7fe      	b.n	8001d78 <xQueueGiveFromISR+0x88>
			xReturn = errQUEUE_FULL;
 8001d7a:	2000      	movs	r0, #0
	__asm volatile
 8001d7c:	f385 8811 	msr	BASEPRI, r5
}
 8001d80:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0df      	beq.n	8001d48 <xQueueGiveFromISR+0x58>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d88:	f106 0024 	add.w	r0, r6, #36	; 0x24
 8001d8c:	f001 f970 	bl	8003070 <xTaskRemoveFromEventList>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d0d9      	beq.n	8001d48 <xQueueGiveFromISR+0x58>
							if( pxHigherPriorityTaskWoken != NULL )
 8001d94:	2c00      	cmp	r4, #0
 8001d96:	d0d7      	beq.n	8001d48 <xQueueGiveFromISR+0x58>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	6020      	str	r0, [r4, #0]
 8001d9c:	e7ee      	b.n	8001d7c <xQueueGiveFromISR+0x8c>
 8001d9e:	bf00      	nop

08001da0 <xQueueReceive>:
{
 8001da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001da4:	b085      	sub	sp, #20
 8001da6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 815f 	beq.w	800206c <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001dae:	460f      	mov	r7, r1
 8001db0:	4604      	mov	r4, r0
 8001db2:	2900      	cmp	r1, #0
 8001db4:	f000 8094 	beq.w	8001ee0 <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001db8:	f001 fa08 	bl	80031cc <xTaskGetSchedulerState>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	f000 809c 	beq.w	8001efa <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
 8001dc2:	f001 fd57 	bl	8003874 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dc6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d172      	bne.n	8001eb2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dcc:	9b01      	ldr	r3, [sp, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80f1 	beq.w	8001fb6 <xQueueReceive+0x216>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001dd4:	a802      	add	r0, sp, #8
 8001dd6:	f001 f993 	bl	8003100 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8001dda:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ddc:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 8001de0:	f001 fd6a 	bl	80038b8 <vPortExitCritical>
		vTaskSuspendAll();
 8001de4:	f001 f870 	bl	8002ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001de8:	f001 fd44 	bl	8003874 <vPortEnterCritical>
 8001dec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001df0:	2bff      	cmp	r3, #255	; 0xff
 8001df2:	bf08      	it	eq
 8001df4:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001df8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001dfc:	2bff      	cmp	r3, #255	; 0xff
 8001dfe:	bf08      	it	eq
 8001e00:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8001e04:	f001 fd58 	bl	80038b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e08:	a901      	add	r1, sp, #4
 8001e0a:	a802      	add	r0, sp, #8
 8001e0c:	f001 f984 	bl	8003118 <xTaskCheckForTimeOut>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d17f      	bne.n	8001f14 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
 8001e14:	f001 fd2e 	bl	8003874 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80d1 	beq.w	8001fc2 <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
 8001e20:	f001 fd4a 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001e24:	f001 fd26 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001e2c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	dc04      	bgt.n	8001e3c <xQueueReceive+0x9c>
 8001e32:	e011      	b.n	8001e58 <xQueueReceive+0xb8>
			--cTxLock;
 8001e34:	1e6b      	subs	r3, r5, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e3a:	b16a      	cbz	r2, 8001e58 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e3e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001e40:	b153      	cbz	r3, 8001e58 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e42:	f001 f915 	bl	8003070 <xTaskRemoveFromEventList>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d0f4      	beq.n	8001e34 <xQueueReceive+0x94>
						vTaskMissedYield();
 8001e4a:	f001 f9b9 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 8001e4e:	1e6b      	subs	r3, r5, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e54:	2a00      	cmp	r2, #0
 8001e56:	d1f1      	bne.n	8001e3c <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
 8001e58:	23ff      	movs	r3, #255	; 0xff
 8001e5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001e5e:	f001 fd2b 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001e62:	f001 fd07 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001e66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001e6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e6c:	2d00      	cmp	r5, #0
 8001e6e:	dd14      	ble.n	8001e9a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e70:	f104 0910 	add.w	r9, r4, #16
 8001e74:	e003      	b.n	8001e7e <xQueueReceive+0xde>
				--cRxLock;
 8001e76:	1e6b      	subs	r3, r5, #1
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e7c:	b16a      	cbz	r2, 8001e9a <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e7e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e80:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001e82:	b153      	cbz	r3, 8001e9a <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e84:	f001 f8f4 	bl	8003070 <xTaskRemoveFromEventList>
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	d0f4      	beq.n	8001e76 <xQueueReceive+0xd6>
					vTaskMissedYield();
 8001e8c:	f001 f998 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 8001e90:	1e6b      	subs	r3, r5, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d1f1      	bne.n	8001e7e <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
 8001e9a:	23ff      	movs	r3, #255	; 0xff
 8001e9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001ea0:	f001 fd0a 	bl	80038b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8001ea4:	f001 f818 	bl	8002ed8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8001ea8:	f001 fce4 	bl	8003874 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001eac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001eae:	2d00      	cmp	r5, #0
 8001eb0:	d07d      	beq.n	8001fae <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001eb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001eb4:	b152      	cbz	r2, 8001ecc <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eb6:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001eb8:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eba:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ebc:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ebe:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001ec0:	bf24      	itt	cs
 8001ec2:	6821      	ldrcs	r1, [r4, #0]
 8001ec4:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ec6:	4638      	mov	r0, r7
 8001ec8:	f007 fa6a 	bl	80093a0 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001ecc:	3d01      	subs	r5, #1
 8001ece:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ed0:	6923      	ldr	r3, [r4, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f040 80d3 	bne.w	800207e <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
 8001ed8:	f001 fcee 	bl	80038b8 <vPortExitCritical>
				return pdPASS;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e06d      	b.n	8001fbc <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ee0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f43f af68 	beq.w	8001db8 <xQueueReceive+0x18>
	__asm volatile
 8001ee8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	e7fe      	b.n	8001ef8 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001efa:	9b01      	ldr	r3, [sp, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f43f af60 	beq.w	8001dc2 <xQueueReceive+0x22>
 8001f02:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001f06:	f383 8811 	msr	BASEPRI, r3
 8001f0a:	f3bf 8f6f 	isb	sy
 8001f0e:	f3bf 8f4f 	dsb	sy
 8001f12:	e7fe      	b.n	8001f12 <xQueueReceive+0x172>
	taskENTER_CRITICAL();
 8001f14:	f001 fcae 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001f18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001f1c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	dc04      	bgt.n	8001f2c <xQueueReceive+0x18c>
 8001f22:	e011      	b.n	8001f48 <xQueueReceive+0x1a8>
			--cTxLock;
 8001f24:	1e6b      	subs	r3, r5, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f2a:	b16a      	cbz	r2, 8001f48 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f2e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f30:	b153      	cbz	r3, 8001f48 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f32:	f001 f89d 	bl	8003070 <xTaskRemoveFromEventList>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d0f4      	beq.n	8001f24 <xQueueReceive+0x184>
						vTaskMissedYield();
 8001f3a:	f001 f941 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 8001f3e:	1e6b      	subs	r3, r5, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d1f1      	bne.n	8001f2c <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
 8001f48:	23ff      	movs	r3, #255	; 0xff
 8001f4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001f4e:	f001 fcb3 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001f52:	f001 fc8f 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001f56:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001f5a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f5c:	2d00      	cmp	r5, #0
 8001f5e:	dd14      	ble.n	8001f8a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f60:	f104 0910 	add.w	r9, r4, #16
 8001f64:	e003      	b.n	8001f6e <xQueueReceive+0x1ce>
				--cRxLock;
 8001f66:	1e6b      	subs	r3, r5, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f6c:	b16a      	cbz	r2, 8001f8a <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f6e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f70:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f72:	b153      	cbz	r3, 8001f8a <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f74:	f001 f87c 	bl	8003070 <xTaskRemoveFromEventList>
 8001f78:	2800      	cmp	r0, #0
 8001f7a:	d0f4      	beq.n	8001f66 <xQueueReceive+0x1c6>
					vTaskMissedYield();
 8001f7c:	f001 f920 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 8001f80:	1e6b      	subs	r3, r5, #1
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d1f1      	bne.n	8001f6e <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
 8001f8a:	23ff      	movs	r3, #255	; 0xff
 8001f8c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8001f90:	f001 fc92 	bl	80038b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8001f94:	f000 ffa0 	bl	8002ed8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8001f98:	f001 fc6c 	bl	8003874 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001f9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f9e:	b153      	cbz	r3, 8001fb6 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
 8001fa0:	f001 fc8a 	bl	80038b8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8001fa4:	f001 fc66 	bl	8003874 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001fa8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001faa:	2d00      	cmp	r5, #0
 8001fac:	d181      	bne.n	8001eb2 <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001fae:	9b01      	ldr	r3, [sp, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f47f af15 	bne.w	8001de0 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8001fb6:	f001 fc7f 	bl	80038b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001fba:	2000      	movs	r0, #0
}
 8001fbc:	b005      	add	sp, #20
 8001fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
 8001fc2:	f001 fc79 	bl	80038b8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001fc6:	9901      	ldr	r1, [sp, #4]
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 ffb9 	bl	8002f40 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8001fce:	f001 fc51 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001fd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001fd6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	dc04      	bgt.n	8001fe6 <xQueueReceive+0x246>
 8001fdc:	e011      	b.n	8002002 <xQueueReceive+0x262>
			--cTxLock;
 8001fde:	1e6b      	subs	r3, r5, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001fe4:	b16a      	cbz	r2, 8002002 <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fe8:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fea:	b153      	cbz	r3, 8002002 <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fec:	f001 f840 	bl	8003070 <xTaskRemoveFromEventList>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d0f4      	beq.n	8001fde <xQueueReceive+0x23e>
						vTaskMissedYield();
 8001ff4:	f001 f8e4 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 8001ff8:	1e6b      	subs	r3, r5, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ffe:	2a00      	cmp	r2, #0
 8002000:	d1f1      	bne.n	8001fe6 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
 8002002:	23ff      	movs	r3, #255	; 0xff
 8002004:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002008:	f001 fc56 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800200c:	f001 fc32 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002010:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002014:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002016:	2d00      	cmp	r5, #0
 8002018:	dd14      	ble.n	8002044 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800201a:	f104 0910 	add.w	r9, r4, #16
 800201e:	e003      	b.n	8002028 <xQueueReceive+0x288>
				--cRxLock;
 8002020:	1e6b      	subs	r3, r5, #1
 8002022:	b2da      	uxtb	r2, r3
 8002024:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002026:	b16a      	cbz	r2, 8002044 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002028:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800202a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800202c:	b153      	cbz	r3, 8002044 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800202e:	f001 f81f 	bl	8003070 <xTaskRemoveFromEventList>
 8002032:	2800      	cmp	r0, #0
 8002034:	d0f4      	beq.n	8002020 <xQueueReceive+0x280>
					vTaskMissedYield();
 8002036:	f001 f8c3 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 800203a:	1e6b      	subs	r3, r5, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002040:	2a00      	cmp	r2, #0
 8002042:	d1f1      	bne.n	8002028 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
 8002044:	23ff      	movs	r3, #255	; 0xff
 8002046:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800204a:	f001 fc35 	bl	80038b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800204e:	f000 ff43 	bl	8002ed8 <xTaskResumeAll>
 8002052:	2800      	cmp	r0, #0
 8002054:	d1a6      	bne.n	8001fa4 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
 8002056:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800205a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800205e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002062:	f3bf 8f4f 	dsb	sy
 8002066:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800206a:	e79b      	b.n	8001fa4 <xQueueReceive+0x204>
 800206c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002070:	f383 8811 	msr	BASEPRI, r3
 8002074:	f3bf 8f6f 	isb	sy
 8002078:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800207c:	e7fe      	b.n	800207c <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800207e:	f104 0010 	add.w	r0, r4, #16
 8002082:	f000 fff5 	bl	8003070 <xTaskRemoveFromEventList>
 8002086:	2800      	cmp	r0, #0
 8002088:	f43f af26 	beq.w	8001ed8 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
 800208c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002094:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002098:	f3bf 8f4f 	dsb	sy
 800209c:	f3bf 8f6f 	isb	sy
 80020a0:	e71a      	b.n	8001ed8 <xQueueReceive+0x138>
 80020a2:	bf00      	nop

080020a4 <xQueueSemaphoreTake>:
{
 80020a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d05c      	beq.n	800216a <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
 80020b0:	6c07      	ldr	r7, [r0, #64]	; 0x40
 80020b2:	4604      	mov	r4, r0
 80020b4:	b147      	cbz	r7, 80020c8 <xQueueSemaphoreTake+0x24>
 80020b6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80020ba:	f383 8811 	msr	BASEPRI, r3
 80020be:	f3bf 8f6f 	isb	sy
 80020c2:	f3bf 8f4f 	dsb	sy
 80020c6:	e7fe      	b.n	80020c6 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020c8:	f001 f880 	bl	80031cc <xTaskGetSchedulerState>
 80020cc:	4605      	mov	r5, r0
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d054      	beq.n	800217c <xQueueSemaphoreTake+0xd8>
 80020d2:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020d4:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 80020d8:	f001 fbcc 	bl	8003874 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80020dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 8148 	bne.w	8002374 <xQueueSemaphoreTake+0x2d0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80020e4:	9b01      	ldr	r3, [sp, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 813a 	beq.w	8002360 <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	f000 809d 	beq.w	800222c <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
 80020f2:	f001 fbe1 	bl	80038b8 <vPortExitCritical>
		vTaskSuspendAll();
 80020f6:	f000 fee7 	bl	8002ec8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020fa:	f001 fbbb 	bl	8003874 <vPortEnterCritical>
 80020fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002102:	2bff      	cmp	r3, #255	; 0xff
 8002104:	bf04      	itt	eq
 8002106:	2300      	moveq	r3, #0
 8002108:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800210c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002110:	2bff      	cmp	r3, #255	; 0xff
 8002112:	bf04      	itt	eq
 8002114:	2300      	moveq	r3, #0
 8002116:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800211a:	f001 fbcd 	bl	80038b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800211e:	a901      	add	r1, sp, #4
 8002120:	a802      	add	r0, sp, #8
 8002122:	f000 fff9 	bl	8003118 <xTaskCheckForTimeOut>
 8002126:	2800      	cmp	r0, #0
 8002128:	d135      	bne.n	8002196 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
 800212a:	f001 fba3 	bl	8003874 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800212e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a4 	beq.w	800227e <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
 8002136:	f001 fbbf 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800213a:	f001 fb9b 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800213e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002142:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002144:	2d00      	cmp	r5, #0
 8002146:	dc05      	bgt.n	8002154 <xQueueSemaphoreTake+0xb0>
 8002148:	e074      	b.n	8002234 <xQueueSemaphoreTake+0x190>
			--cTxLock;
 800214a:	1e6b      	subs	r3, r5, #1
 800214c:	b2da      	uxtb	r2, r3
 800214e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002150:	2a00      	cmp	r2, #0
 8002152:	d06f      	beq.n	8002234 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002154:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002156:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002158:	2b00      	cmp	r3, #0
 800215a:	d06b      	beq.n	8002234 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800215c:	f000 ff88 	bl	8003070 <xTaskRemoveFromEventList>
 8002160:	2800      	cmp	r0, #0
 8002162:	d0f2      	beq.n	800214a <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
 8002164:	f001 f82c 	bl	80031c0 <vTaskMissedYield>
 8002168:	e7ef      	b.n	800214a <xQueueSemaphoreTake+0xa6>
 800216a:	f04f 0340 	mov.w	r3, #64	; 0x40
 800216e:	f383 8811 	msr	BASEPRI, r3
 8002172:	f3bf 8f6f 	isb	sy
 8002176:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800217a:	e7fe      	b.n	800217a <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800217c:	9b01      	ldr	r3, [sp, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80d4 	beq.w	800232c <xQueueSemaphoreTake+0x288>
 8002184:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	e7fe      	b.n	8002194 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
 8002196:	f001 fb6d 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800219a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800219e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	dc04      	bgt.n	80021ae <xQueueSemaphoreTake+0x10a>
 80021a4:	e011      	b.n	80021ca <xQueueSemaphoreTake+0x126>
			--cTxLock;
 80021a6:	1e6b      	subs	r3, r5, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021ac:	b16a      	cbz	r2, 80021ca <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021b0:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021b2:	b153      	cbz	r3, 80021ca <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021b4:	f000 ff5c 	bl	8003070 <xTaskRemoveFromEventList>
 80021b8:	2800      	cmp	r0, #0
 80021ba:	d0f4      	beq.n	80021a6 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
 80021bc:	f001 f800 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 80021c0:	1e6b      	subs	r3, r5, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80021c6:	2a00      	cmp	r2, #0
 80021c8:	d1f1      	bne.n	80021ae <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
 80021ca:	23ff      	movs	r3, #255	; 0xff
 80021cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80021d0:	f001 fb72 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80021d4:	f001 fb4e 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80021d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80021dc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021de:	2d00      	cmp	r5, #0
 80021e0:	dd14      	ble.n	800220c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021e2:	f104 0810 	add.w	r8, r4, #16
 80021e6:	e003      	b.n	80021f0 <xQueueSemaphoreTake+0x14c>
				--cRxLock;
 80021e8:	1e6b      	subs	r3, r5, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80021ee:	b16a      	cbz	r2, 800220c <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021f0:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021f2:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021f4:	b153      	cbz	r3, 800220c <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021f6:	f000 ff3b 	bl	8003070 <xTaskRemoveFromEventList>
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d0f4      	beq.n	80021e8 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
 80021fe:	f000 ffdf 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 8002202:	1e6b      	subs	r3, r5, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002208:	2a00      	cmp	r2, #0
 800220a:	d1f1      	bne.n	80021f0 <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
 800220c:	23ff      	movs	r3, #255	; 0xff
 800220e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002212:	f001 fb51 	bl	80038b8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002216:	f000 fe5f 	bl	8002ed8 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800221a:	f001 fb2b 	bl	8003874 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800221e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002220:	2b00      	cmp	r3, #0
 8002222:	d07c      	beq.n	800231e <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
 8002224:	f001 fb48 	bl	80038b8 <vPortExitCritical>
	return xReturn;
 8002228:	2501      	movs	r5, #1
 800222a:	e755      	b.n	80020d8 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800222c:	a802      	add	r0, sp, #8
 800222e:	f000 ff67 	bl	8003100 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002232:	e75e      	b.n	80020f2 <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8002234:	23ff      	movs	r3, #255	; 0xff
 8002236:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800223a:	f001 fb3d 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800223e:	f001 fb19 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002242:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002246:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002248:	2d00      	cmp	r5, #0
 800224a:	dd10      	ble.n	800226e <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800224c:	f104 0810 	add.w	r8, r4, #16
 8002250:	e003      	b.n	800225a <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
 8002252:	1e6b      	subs	r3, r5, #1
 8002254:	b2da      	uxtb	r2, r3
 8002256:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002258:	b14a      	cbz	r2, 800226e <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800225a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800225c:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800225e:	b133      	cbz	r3, 800226e <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002260:	f000 ff06 	bl	8003070 <xTaskRemoveFromEventList>
 8002264:	2800      	cmp	r0, #0
 8002266:	d0f4      	beq.n	8002252 <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
 8002268:	f000 ffaa 	bl	80031c0 <vTaskMissedYield>
 800226c:	e7f1      	b.n	8002252 <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
 800226e:	23ff      	movs	r3, #255	; 0xff
 8002270:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002274:	f001 fb20 	bl	80038b8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002278:	f000 fe2e 	bl	8002ed8 <xTaskResumeAll>
 800227c:	e7d4      	b.n	8002228 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 800227e:	f001 fb1b 	bl	80038b8 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d062      	beq.n	800234e <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002288:	9901      	ldr	r1, [sp, #4]
 800228a:	4630      	mov	r0, r6
 800228c:	f000 fe58 	bl	8002f40 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002290:	f001 faf0 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002294:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002298:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800229a:	2d00      	cmp	r5, #0
 800229c:	dc04      	bgt.n	80022a8 <xQueueSemaphoreTake+0x204>
 800229e:	e00d      	b.n	80022bc <xQueueSemaphoreTake+0x218>
			--cTxLock;
 80022a0:	1e6b      	subs	r3, r5, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022a6:	b14a      	cbz	r2, 80022bc <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022aa:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ac:	b133      	cbz	r3, 80022bc <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022ae:	f000 fedf 	bl	8003070 <xTaskRemoveFromEventList>
 80022b2:	2800      	cmp	r0, #0
 80022b4:	d0f4      	beq.n	80022a0 <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
 80022b6:	f000 ff83 	bl	80031c0 <vTaskMissedYield>
 80022ba:	e7f1      	b.n	80022a0 <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
 80022bc:	23ff      	movs	r3, #255	; 0xff
 80022be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80022c2:	f001 faf9 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80022c6:	f001 fad5 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80022ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80022ce:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022d0:	2d00      	cmp	r5, #0
 80022d2:	dd10      	ble.n	80022f6 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022d4:	f104 0810 	add.w	r8, r4, #16
 80022d8:	e003      	b.n	80022e2 <xQueueSemaphoreTake+0x23e>
				--cRxLock;
 80022da:	1e6b      	subs	r3, r5, #1
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80022e0:	b14a      	cbz	r2, 80022f6 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e2:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e4:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022e6:	b133      	cbz	r3, 80022f6 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e8:	f000 fec2 	bl	8003070 <xTaskRemoveFromEventList>
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d0f4      	beq.n	80022da <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
 80022f0:	f000 ff66 	bl	80031c0 <vTaskMissedYield>
 80022f4:	e7f1      	b.n	80022da <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
 80022f6:	23ff      	movs	r3, #255	; 0xff
 80022f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80022fc:	f001 fadc 	bl	80038b8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002300:	f000 fdea 	bl	8002ed8 <xTaskResumeAll>
 8002304:	2800      	cmp	r0, #0
 8002306:	d18f      	bne.n	8002228 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
 8002308:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800230c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002310:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	e784      	b.n	8002228 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
 800231e:	f001 facb 	bl	80038b8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8002322:	b92f      	cbnz	r7, 8002330 <xQueueSemaphoreTake+0x28c>
}
 8002324:	4638      	mov	r0, r7
 8002326:	b004      	add	sp, #16
 8002328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800232c:	4607      	mov	r7, r0
 800232e:	e6d1      	b.n	80020d4 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
 8002330:	f001 faa0 	bl	8003874 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002334:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002336:	b119      	cbz	r1, 8002340 <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002338:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002340:	68a0      	ldr	r0, [r4, #8]
 8002342:	f000 ffdf 	bl	8003304 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002346:	2700      	movs	r7, #0
						taskEXIT_CRITICAL();
 8002348:	f001 fab6 	bl	80038b8 <vPortExitCritical>
 800234c:	e7ea      	b.n	8002324 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
 800234e:	f001 fa91 	bl	8003874 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002352:	68a0      	ldr	r0, [r4, #8]
 8002354:	f000 ff4a 	bl	80031ec <xTaskPriorityInherit>
 8002358:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
 800235a:	f001 faad 	bl	80038b8 <vPortExitCritical>
 800235e:	e793      	b.n	8002288 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002360:	b197      	cbz	r7, 8002388 <xQueueSemaphoreTake+0x2e4>
 8002362:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002366:	f383 8811 	msr	BASEPRI, r3
 800236a:	f3bf 8f6f 	isb	sy
 800236e:	f3bf 8f4f 	dsb	sy
 8002372:	e7fe      	b.n	8002372 <xQueueSemaphoreTake+0x2ce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002374:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002376:	3b01      	subs	r3, #1
 8002378:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800237a:	b1ca      	cbz	r2, 80023b0 <xQueueSemaphoreTake+0x30c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237c:	6923      	ldr	r3, [r4, #16]
 800237e:	b933      	cbnz	r3, 800238e <xQueueSemaphoreTake+0x2ea>
				taskEXIT_CRITICAL();
 8002380:	f001 fa9a 	bl	80038b8 <vPortExitCritical>
				return pdPASS;
 8002384:	2701      	movs	r7, #1
 8002386:	e7cd      	b.n	8002324 <xQueueSemaphoreTake+0x280>
					taskEXIT_CRITICAL();
 8002388:	f001 fa96 	bl	80038b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800238c:	e7ca      	b.n	8002324 <xQueueSemaphoreTake+0x280>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800238e:	f104 0010 	add.w	r0, r4, #16
 8002392:	f000 fe6d 	bl	8003070 <xTaskRemoveFromEventList>
 8002396:	2800      	cmp	r0, #0
 8002398:	d0f2      	beq.n	8002380 <xQueueSemaphoreTake+0x2dc>
						queueYIELD_IF_USING_PREEMPTION();
 800239a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	f3bf 8f6f 	isb	sy
 80023ae:	e7e7      	b.n	8002380 <xQueueSemaphoreTake+0x2dc>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80023b0:	f000 fffc 	bl	80033ac <pvTaskIncrementMutexHeldCount>
 80023b4:	60a0      	str	r0, [r4, #8]
 80023b6:	e7e1      	b.n	800237c <xQueueSemaphoreTake+0x2d8>

080023b8 <xQueueReceiveFromISR>:
{
 80023b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80023bc:	b310      	cbz	r0, 8002404 <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023be:	460e      	mov	r6, r1
 80023c0:	4617      	mov	r7, r2
 80023c2:	4604      	mov	r4, r0
 80023c4:	b191      	cbz	r1, 80023ec <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023c6:	f001 fb87 	bl	8003ad8 <vPortValidateInterruptPriority>
	__asm volatile
 80023ca:	f3ef 8911 	mrs	r9, BASEPRI
 80023ce:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023de:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e0:	b9cd      	cbnz	r5, 8002416 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80023e2:	4628      	mov	r0, r5
	__asm volatile
 80023e4:	f389 8811 	msr	BASEPRI, r9
}
 80023e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0e9      	beq.n	80023c6 <xQueueReceiveFromISR+0xe>
	__asm volatile
 80023f2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	e7fe      	b.n	8002402 <xQueueReceiveFromISR+0x4a>
 8002404:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8002414:	e7fe      	b.n	8002414 <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002416:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800241a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 800241c:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002420:	b152      	cbz	r2, 8002438 <xQueueReceiveFromISR+0x80>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002422:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002424:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002426:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002428:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800242a:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800242c:	bf24      	itt	cs
 800242e:	6821      	ldrcs	r1, [r4, #0]
 8002430:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002432:	4630      	mov	r0, r6
 8002434:	f006 ffb4 	bl	80093a0 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002438:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800243a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800243e:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002440:	d009      	beq.n	8002456 <xQueueReceiveFromISR+0x9e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002442:	f108 0301 	add.w	r3, r8, #1
 8002446:	b25b      	sxtb	r3, r3
 8002448:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800244c:	2001      	movs	r0, #1
	__asm volatile
 800244e:	f389 8811 	msr	BASEPRI, r9
}
 8002452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002456:	6923      	ldr	r3, [r4, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0f7      	beq.n	800244c <xQueueReceiveFromISR+0x94>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245c:	f104 0010 	add.w	r0, r4, #16
 8002460:	f000 fe06 	bl	8003070 <xTaskRemoveFromEventList>
 8002464:	2800      	cmp	r0, #0
 8002466:	d0f1      	beq.n	800244c <xQueueReceiveFromISR+0x94>
						if( pxHigherPriorityTaskWoken != NULL )
 8002468:	2f00      	cmp	r7, #0
 800246a:	d0ef      	beq.n	800244c <xQueueReceiveFromISR+0x94>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800246c:	2001      	movs	r0, #1
 800246e:	6038      	str	r0, [r7, #0]
 8002470:	e7b8      	b.n	80023e4 <xQueueReceiveFromISR+0x2c>
 8002472:	bf00      	nop

08002474 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <vQueueAddToRegistry+0x4c>)
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	b17a      	cbz	r2, 800249a <vQueueAddToRegistry+0x26>
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	b162      	cbz	r2, 8002498 <vQueueAddToRegistry+0x24>
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	b192      	cbz	r2, 80024a8 <vQueueAddToRegistry+0x34>
 8002482:	699a      	ldr	r2, [r3, #24]
 8002484:	b192      	cbz	r2, 80024ac <vQueueAddToRegistry+0x38>
 8002486:	6a1a      	ldr	r2, [r3, #32]
 8002488:	b192      	cbz	r2, 80024b0 <vQueueAddToRegistry+0x3c>
 800248a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248c:	b192      	cbz	r2, 80024b4 <vQueueAddToRegistry+0x40>
 800248e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002490:	b192      	cbz	r2, 80024b8 <vQueueAddToRegistry+0x44>
 8002492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002494:	b192      	cbz	r2, 80024bc <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002496:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002498:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 800249a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800249e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024a2:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 80024a6:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024a8:	2202      	movs	r2, #2
 80024aa:	e7f6      	b.n	800249a <vQueueAddToRegistry+0x26>
 80024ac:	2203      	movs	r2, #3
 80024ae:	e7f4      	b.n	800249a <vQueueAddToRegistry+0x26>
 80024b0:	2204      	movs	r2, #4
 80024b2:	e7f2      	b.n	800249a <vQueueAddToRegistry+0x26>
 80024b4:	2205      	movs	r2, #5
 80024b6:	e7f0      	b.n	800249a <vQueueAddToRegistry+0x26>
 80024b8:	2206      	movs	r2, #6
 80024ba:	e7ee      	b.n	800249a <vQueueAddToRegistry+0x26>
 80024bc:	2207      	movs	r2, #7
 80024be:	e7ec      	b.n	800249a <vQueueAddToRegistry+0x26>
 80024c0:	20000b28 	.word	0x20000b28

080024c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024c4:	b570      	push	{r4, r5, r6, lr}
 80024c6:	4605      	mov	r5, r0
 80024c8:	460e      	mov	r6, r1
 80024ca:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024cc:	f001 f9d2 	bl	8003874 <vPortEnterCritical>
 80024d0:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80024d4:	2bff      	cmp	r3, #255	; 0xff
 80024d6:	bf04      	itt	eq
 80024d8:	2300      	moveq	r3, #0
 80024da:	f885 3044 	strbeq.w	r3, [r5, #68]	; 0x44
 80024de:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80024e2:	2bff      	cmp	r3, #255	; 0xff
 80024e4:	bf04      	itt	eq
 80024e6:	2300      	moveq	r3, #0
 80024e8:	f885 3045 	strbeq.w	r3, [r5, #69]	; 0x45
 80024ec:	f001 f9e4 	bl	80038b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80024f0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d043      	beq.n	800257e <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 80024f6:	f001 f9bd 	bl	8003874 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80024fa:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80024fe:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002500:	2c00      	cmp	r4, #0
 8002502:	dd14      	ble.n	800252e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002504:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002508:	e003      	b.n	8002512 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 800250a:	1e63      	subs	r3, r4, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002510:	b16a      	cbz	r2, 800252e <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002514:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002516:	b153      	cbz	r3, 800252e <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002518:	f000 fdaa 	bl	8003070 <xTaskRemoveFromEventList>
 800251c:	2800      	cmp	r0, #0
 800251e:	d0f4      	beq.n	800250a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8002520:	f000 fe4e 	bl	80031c0 <vTaskMissedYield>
			--cTxLock;
 8002524:	1e63      	subs	r3, r4, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800252a:	2a00      	cmp	r2, #0
 800252c:	d1f1      	bne.n	8002512 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 800252e:	23ff      	movs	r3, #255	; 0xff
 8002530:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002534:	f001 f9c0 	bl	80038b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002538:	f001 f99c 	bl	8003874 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800253c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002540:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002542:	2c00      	cmp	r4, #0
 8002544:	dd14      	ble.n	8002570 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002546:	f105 0610 	add.w	r6, r5, #16
 800254a:	e003      	b.n	8002554 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 800254c:	1e63      	subs	r3, r4, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002552:	b16a      	cbz	r2, 8002570 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002554:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002556:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002558:	b153      	cbz	r3, 8002570 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800255a:	f000 fd89 	bl	8003070 <xTaskRemoveFromEventList>
 800255e:	2800      	cmp	r0, #0
 8002560:	d0f4      	beq.n	800254c <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8002562:	f000 fe2d 	bl	80031c0 <vTaskMissedYield>
				--cRxLock;
 8002566:	1e63      	subs	r3, r4, #1
 8002568:	b2da      	uxtb	r2, r3
 800256a:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800256c:	2a00      	cmp	r2, #0
 800256e:	d1f1      	bne.n	8002554 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8002570:	23ff      	movs	r3, #255	; 0xff
 8002572:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8002576:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800257a:	f001 b99d 	b.w	80038b8 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800257e:	4622      	mov	r2, r4
 8002580:	4631      	mov	r1, r6
 8002582:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8002586:	f000 fd23 	bl	8002fd0 <vTaskPlaceOnEventListRestricted>
 800258a:	e7b4      	b.n	80024f6 <vQueueWaitForMessageRestricted+0x32>

0800258c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002590:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002592:	f001 f96f 	bl	8003874 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002596:	4a34      	ldr	r2, [pc, #208]	; (8002668 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
 8002598:	4e34      	ldr	r6, [pc, #208]	; (800266c <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025a0:	6833      	ldr	r3, [r6, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d032      	beq.n	800260c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025a6:	4c32      	ldr	r4, [pc, #200]	; (8002670 <prvAddNewTaskToReadyList+0xe4>)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	b33b      	cbz	r3, 80025fc <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025ac:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80025ae:	4f31      	ldr	r7, [pc, #196]	; (8002674 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80025b0:	4a31      	ldr	r2, [pc, #196]	; (8002678 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 80025b2:	4932      	ldr	r1, [pc, #200]	; (800267c <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
 80025b4:	6813      	ldr	r3, [r2, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025ba:	656b      	str	r3, [r5, #84]	; 0x54
		prvAddTaskToReadyList( pxNewTCB );
 80025bc:	680b      	ldr	r3, [r1, #0]
 80025be:	4283      	cmp	r3, r0
 80025c0:	bf38      	it	cc
 80025c2:	6008      	strcc	r0, [r1, #0]
 80025c4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80025c8:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80025cc:	1d29      	adds	r1, r5, #4
 80025ce:	f7ff f845 	bl	800165c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80025d2:	f001 f971 	bl	80038b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	b173      	cbz	r3, 80025f8 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025da:	6832      	ldr	r2, [r6, #0]
 80025dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80025de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d209      	bcs.n	80025f8 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80025e4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80025e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80025f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025fc:	6833      	ldr	r3, [r6, #0]
 80025fe:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	4f1c      	ldr	r7, [pc, #112]	; (8002674 <prvAddNewTaskToReadyList+0xe8>)
 8002604:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 8002606:	bf98      	it	ls
 8002608:	6035      	strls	r5, [r6, #0]
 800260a:	e7d1      	b.n	80025b0 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800260c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800260e:	6813      	ldr	r3, [r2, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d003      	beq.n	800261c <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
 8002614:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8002616:	4f17      	ldr	r7, [pc, #92]	; (8002674 <prvAddNewTaskToReadyList+0xe8>)
 8002618:	4c15      	ldr	r4, [pc, #84]	; (8002670 <prvAddNewTaskToReadyList+0xe4>)
 800261a:	e7c9      	b.n	80025b0 <prvAddNewTaskToReadyList+0x24>
 800261c:	4f15      	ldr	r7, [pc, #84]	; (8002674 <prvAddNewTaskToReadyList+0xe8>)
 800261e:	463c      	mov	r4, r7
 8002620:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002624:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002626:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002628:	f7ff f808 	bl	800163c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800262c:	45a0      	cmp	r8, r4
 800262e:	d1f9      	bne.n	8002624 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002630:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8002694 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 8002634:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8002698 <prvAddNewTaskToReadyList+0x10c>
 8002638:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <prvAddNewTaskToReadyList+0xe4>)
	vListInitialise( &xDelayedTaskList1 );
 800263a:	4648      	mov	r0, r9
 800263c:	f7fe fffe 	bl	800163c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002640:	4640      	mov	r0, r8
 8002642:	f7fe fffb 	bl	800163c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002646:	480e      	ldr	r0, [pc, #56]	; (8002680 <prvAddNewTaskToReadyList+0xf4>)
 8002648:	f7fe fff8 	bl	800163c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800264c:	480d      	ldr	r0, [pc, #52]	; (8002684 <prvAddNewTaskToReadyList+0xf8>)
 800264e:	f7fe fff5 	bl	800163c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002652:	480d      	ldr	r0, [pc, #52]	; (8002688 <prvAddNewTaskToReadyList+0xfc>)
 8002654:	f7fe fff2 	bl	800163c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800265a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800265c:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <prvAddNewTaskToReadyList+0x104>)
 8002662:	f8c3 8000 	str.w	r8, [r3]
}
 8002666:	e7a3      	b.n	80025b0 <prvAddNewTaskToReadyList+0x24>
 8002668:	20000fd4 	.word	0x20000fd4
 800266c:	20000b68 	.word	0x20000b68
 8002670:	20001030 	.word	0x20001030
 8002674:	20000b74 	.word	0x20000b74
 8002678:	20000fe0 	.word	0x20000fe0
 800267c:	20000fe4 	.word	0x20000fe4
 8002680:	2000101c 	.word	0x2000101c
 8002684:	20001048 	.word	0x20001048
 8002688:	20001034 	.word	0x20001034
 800268c:	20000b6c 	.word	0x20000b6c
 8002690:	20000b70 	.word	0x20000b70
 8002694:	20000fe8 	.word	0x20000fe8
 8002698:	20000ffc 	.word	0x20000ffc

0800269c <vTaskSwitchContext.part.0>:
void vTaskSwitchContext( void )
 800269c:	b538      	push	{r3, r4, r5, lr}
		xYieldPending = pdFALSE;
 800269e:	4b23      	ldr	r3, [pc, #140]	; (800272c <vTaskSwitchContext.part.0+0x90>)
		taskCHECK_FOR_STACK_OVERFLOW();
 80026a0:	4c23      	ldr	r4, [pc, #140]	; (8002730 <vTaskSwitchContext.part.0+0x94>)
		xYieldPending = pdFALSE;
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80026b0:	d103      	bne.n	80026ba <vTaskSwitchContext.part.0+0x1e>
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80026b8:	d02f      	beq.n	800271a <vTaskSwitchContext.part.0+0x7e>
 80026ba:	6820      	ldr	r0, [r4, #0]
 80026bc:	6821      	ldr	r1, [r4, #0]
 80026be:	3134      	adds	r1, #52	; 0x34
 80026c0:	f006 f9cc 	bl	8008a5c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026c4:	4d1b      	ldr	r5, [pc, #108]	; (8002734 <vTaskSwitchContext.part.0+0x98>)
 80026c6:	491c      	ldr	r1, [pc, #112]	; (8002738 <vTaskSwitchContext.part.0+0x9c>)
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80026ce:	0092      	lsls	r2, r2, #2
 80026d0:	0098      	lsls	r0, r3, #2
 80026d2:	588a      	ldr	r2, [r1, r2]
 80026d4:	b942      	cbnz	r2, 80026e8 <vTaskSwitchContext.part.0+0x4c>
 80026d6:	b1bb      	cbz	r3, 8002708 <vTaskSwitchContext.part.0+0x6c>
 80026d8:	3b01      	subs	r3, #1
 80026da:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80026de:	0098      	lsls	r0, r3, #2
 80026e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d0f6      	beq.n	80026d6 <vTaskSwitchContext.part.0+0x3a>
 80026e8:	18c2      	adds	r2, r0, r3
 80026ea:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80026ee:	4602      	mov	r2, r0
 80026f0:	6841      	ldr	r1, [r0, #4]
 80026f2:	6849      	ldr	r1, [r1, #4]
 80026f4:	6041      	str	r1, [r0, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	4291      	cmp	r1, r2
 80026fa:	bf04      	itt	eq
 80026fc:	6849      	ldreq	r1, [r1, #4]
 80026fe:	6041      	streq	r1, [r0, #4]
 8002700:	68ca      	ldr	r2, [r1, #12]
 8002702:	6022      	str	r2, [r4, #0]
 8002704:	602b      	str	r3, [r5, #0]
}
 8002706:	bd38      	pop	{r3, r4, r5, pc}
	__asm volatile
 8002708:	f04f 0340 	mov.w	r3, #64	; 0x40
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002718:	e7fe      	b.n	8002718 <vTaskSwitchContext.part.0+0x7c>
		taskCHECK_FOR_STACK_OVERFLOW();
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8002720:	d1cb      	bne.n	80026ba <vTaskSwitchContext.part.0+0x1e>
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8002728:	d1c7      	bne.n	80026ba <vTaskSwitchContext.part.0+0x1e>
 800272a:	e7cb      	b.n	80026c4 <vTaskSwitchContext.part.0+0x28>
 800272c:	20001060 	.word	0x20001060
 8002730:	20000b68 	.word	0x20000b68
 8002734:	20000fe4 	.word	0x20000fe4
 8002738:	20000b74 	.word	0x20000b74

0800273c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800273c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002740:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002742:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002746:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800274a:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800274c:	4606      	mov	r6, r0
 800274e:	460c      	mov	r4, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002750:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002752:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002754:	461f      	mov	r7, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002756:	f006 fe4b 	bl	80093f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800275a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800275c:	f1a9 0904 	sub.w	r9, r9, #4
 8002760:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002762:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8002766:	2c00      	cmp	r4, #0
 8002768:	d03a      	beq.n	80027e0 <prvInitialiseNewTask.constprop.0+0xa4>
 800276a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800276e:	f104 011f 	add.w	r1, r4, #31
 8002772:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 8002776:	e001      	b.n	800277c <prvInitialiseNewTask.constprop.0+0x40>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002778:	458c      	cmp	ip, r1
 800277a:	d005      	beq.n	8002788 <prvInitialiseNewTask.constprop.0+0x4c>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800277c:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8002780:	f80e 4f01 	strb.w	r4, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002784:	2c00      	cmp	r4, #0
 8002786:	d1f7      	bne.n	8002778 <prvInitialiseNewTask.constprop.0+0x3c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002788:	2300      	movs	r3, #0
 800278a:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800278e:	9c08      	ldr	r4, [sp, #32]
 8002790:	2c37      	cmp	r4, #55	; 0x37
 8002792:	bf28      	it	cs
 8002794:	2437      	movcs	r4, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8002796:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 800279a:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800279c:	65ec      	str	r4, [r5, #92]	; 0x5c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800279e:	1d28      	adds	r0, r5, #4
		pxNewTCB->uxMutexesHeld = 0;
 80027a0:	f8c5 a060 	str.w	sl, [r5, #96]	; 0x60
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027a4:	f7fe ff56 	bl	8001654 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027a8:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027ac:	f105 0018 	add.w	r0, r5, #24
 80027b0:	f7fe ff50 	bl	8001654 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80027b4:	f8c5 a064 	str.w	sl, [r5, #100]	; 0x64
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b8:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027ba:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027bc:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027be:	f885 a068 	strb.w	sl, [r5, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 80027c2:	f885 a06a 	strb.w	sl, [r5, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027c6:	463a      	mov	r2, r7
 80027c8:	4631      	mov	r1, r6
 80027ca:	4648      	mov	r0, r9
 80027cc:	f001 f826 	bl	800381c <pxPortInitialiseStack>
 80027d0:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 80027d2:	f1b8 0f00 	cmp.w	r8, #0
 80027d6:	d001      	beq.n	80027dc <prvInitialiseNewTask.constprop.0+0xa0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027d8:	f8c8 5000 	str.w	r5, [r8]
}
 80027dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80027e0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 80027e4:	e7d3      	b.n	800278e <prvInitialiseNewTask.constprop.0+0x52>
 80027e6:	bf00      	nop

080027e8 <prvIdleTask>:
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	4c22      	ldr	r4, [pc, #136]	; (8002874 <prvIdleTask+0x8c>)
 80027ec:	4e22      	ldr	r6, [pc, #136]	; (8002878 <prvIdleTask+0x90>)
 80027ee:	4d23      	ldr	r5, [pc, #140]	; (800287c <prvIdleTask+0x94>)
 80027f0:	4f23      	ldr	r7, [pc, #140]	; (8002880 <prvIdleTask+0x98>)
				taskYIELD();
 80027f2:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 80027f6:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	b353      	cbz	r3, 8002854 <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
 80027fe:	f001 f839 	bl	8003874 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002802:	68f3      	ldr	r3, [r6, #12]
 8002804:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002808:	f10a 0004 	add.w	r0, sl, #4
 800280c:	f7fe ff4e 	bl	80016ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002810:	682b      	ldr	r3, [r5, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	3b01      	subs	r3, #1
 800281a:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 800281c:	f001 f84c 	bl	80038b8 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002820:	f89a 3069 	ldrb.w	r3, [sl, #105]	; 0x69
 8002824:	b163      	cbz	r3, 8002840 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002826:	2b01      	cmp	r3, #1
 8002828:	d020      	beq.n	800286c <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800282a:	2b02      	cmp	r3, #2
 800282c:	d0e5      	beq.n	80027fa <prvIdleTask+0x12>
 800282e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	e7fe      	b.n	800283e <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 8002840:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 8002844:	f001 fa30 	bl	8003ca8 <vPortFree>
				vPortFree( pxTCB );
 8002848:	4650      	mov	r0, sl
 800284a:	f001 fa2d 	bl	8003ca8 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1d4      	bne.n	80027fe <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d905      	bls.n	8002866 <prvIdleTask+0x7e>
				taskYIELD();
 800285a:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8002866:	f006 f8f1 	bl	8008a4c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800286a:	e7c6      	b.n	80027fa <prvIdleTask+0x12>
				vPortFree( pxTCB );
 800286c:	4650      	mov	r0, sl
 800286e:	f001 fa1b 	bl	8003ca8 <vPortFree>
 8002872:	e7c2      	b.n	80027fa <prvIdleTask+0x12>
 8002874:	20000fd8 	.word	0x20000fd8
 8002878:	20001048 	.word	0x20001048
 800287c:	20000fd4 	.word	0x20000fd4
 8002880:	20000b74 	.word	0x20000b74

08002884 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 8002884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002888:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <xTaskIncrementTick.part.0+0x124>)
 800288a:	681e      	ldr	r6, [r3, #0]
 800288c:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 800288e:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8002890:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002892:	2e00      	cmp	r6, #0
 8002894:	d040      	beq.n	8002918 <xTaskIncrementTick.part.0+0x94>
 8002896:	f8df b124 	ldr.w	fp, [pc, #292]	; 80029bc <xTaskIncrementTick.part.0+0x138>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800289a:	f8db 3000 	ldr.w	r3, [fp]
 800289e:	429e      	cmp	r6, r3
 80028a0:	d347      	bcc.n	8002932 <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028a2:	4f42      	ldr	r7, [pc, #264]	; (80029ac <xTaskIncrementTick.part.0+0x128>)
 80028a4:	f8df 9118 	ldr.w	r9, [pc, #280]	; 80029c0 <xTaskIncrementTick.part.0+0x13c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f8df a118 	ldr.w	sl, [pc, #280]	; 80029c4 <xTaskIncrementTick.part.0+0x140>
 80028ae:	681d      	ldr	r5, [r3, #0]
 80028b0:	2d00      	cmp	r5, #0
 80028b2:	d073      	beq.n	800299c <xTaskIncrementTick.part.0+0x118>
					prvAddTaskToReadyList( pxTCB );
 80028b4:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80029c8 <xTaskIncrementTick.part.0+0x144>
BaseType_t xSwitchRequired = pdFALSE;
 80028b8:	2500      	movs	r5, #0
 80028ba:	e022      	b.n	8002902 <xTaskIncrementTick.part.0+0x7e>
 80028bc:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80028be:	f7fe fef5 	bl	80016ac <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028c4:	9901      	ldr	r1, [sp, #4]
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028c6:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028ca:	b113      	cbz	r3, 80028d2 <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028cc:	f7fe feee 	bl	80016ac <uxListRemove>
 80028d0:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 80028d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028d4:	f8d8 2000 	ldr.w	r2, [r8]
 80028d8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80028dc:	4293      	cmp	r3, r2
 80028de:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80028e2:	bf88      	it	hi
 80028e4:	f8c8 3000 	strhi.w	r3, [r8]
 80028e8:	f7fe feb8 	bl	800165c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ec:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f0:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80028f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028f6:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 80028f8:	4291      	cmp	r1, r2
 80028fa:	bf28      	it	cs
 80028fc:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d04c      	beq.n	800299c <xTaskIncrementTick.part.0+0x118>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002908:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290a:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
 800290c:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800290e:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 8002910:	d2d4      	bcs.n	80028bc <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
 8002912:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002916:	e011      	b.n	800293c <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <xTaskIncrementTick.part.0+0x128>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	b30a      	cbz	r2, 8002964 <xTaskIncrementTick.part.0+0xe0>
 8002920:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	e7fe      	b.n	8002930 <xTaskIncrementTick.part.0+0xac>
 8002932:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80029c0 <xTaskIncrementTick.part.0+0x13c>
 8002936:	f8df a08c 	ldr.w	sl, [pc, #140]	; 80029c4 <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 800293a:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800293c:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8002940:	491b      	ldr	r1, [pc, #108]	; (80029b0 <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 800294e:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8002950:	2a02      	cmp	r2, #2
 8002952:	bf28      	it	cs
 8002954:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8002956:	2b00      	cmp	r3, #0
}
 8002958:	bf0c      	ite	eq
 800295a:	4628      	moveq	r0, r5
 800295c:	2001      	movne	r0, #1
 800295e:	b003      	add	sp, #12
 8002960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8002964:	4a13      	ldr	r2, [pc, #76]	; (80029b4 <xTaskIncrementTick.part.0+0x130>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	6811      	ldr	r1, [r2, #0]
 800296a:	6019      	str	r1, [r3, #0]
 800296c:	4912      	ldr	r1, [pc, #72]	; (80029b8 <xTaskIncrementTick.part.0+0x134>)
 800296e:	6010      	str	r0, [r2, #0]
 8002970:	680a      	ldr	r2, [r1, #0]
 8002972:	3201      	adds	r2, #1
 8002974:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	6812      	ldr	r2, [r2, #0]
 800297a:	b932      	cbnz	r2, 800298a <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800297c:	f8df b03c 	ldr.w	fp, [pc, #60]	; 80029bc <xTaskIncrementTick.part.0+0x138>
 8002980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002984:	f8cb 3000 	str.w	r3, [fp]
 8002988:	e787      	b.n	800289a <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800298a:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800298c:	f8df b02c 	ldr.w	fp, [pc, #44]	; 80029bc <xTaskIncrementTick.part.0+0x138>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002990:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f8cb 3000 	str.w	r3, [fp]
	}
}
 800299a:	e77e      	b.n	800289a <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800299c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a0:	f8cb 3000 	str.w	r3, [fp]
					break;
 80029a4:	e7ca      	b.n	800293c <xTaskIncrementTick.part.0+0xb8>
 80029a6:	bf00      	nop
 80029a8:	2000105c 	.word	0x2000105c
 80029ac:	20000b6c 	.word	0x20000b6c
 80029b0:	20001060 	.word	0x20001060
 80029b4:	20000b70 	.word	0x20000b70
 80029b8:	20001014 	.word	0x20001014
 80029bc:	20001010 	.word	0x20001010
 80029c0:	20000b74 	.word	0x20000b74
 80029c4:	20000b68 	.word	0x20000b68
 80029c8:	20000fe4 	.word	0x20000fe4

080029cc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 80029d0:	4d41      	ldr	r5, [pc, #260]	; (8002ad8 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
 80029d2:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 80029d4:	f000 ff4e 	bl	8003874 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	3b01      	subs	r3, #1
 80029dc:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d161      	bne.n	8002aa8 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029e4:	4b3d      	ldr	r3, [pc, #244]	; (8002adc <xTaskResumeAll.part.0+0x110>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d05d      	beq.n	8002aa8 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ec:	4e3c      	ldr	r6, [pc, #240]	; (8002ae0 <xTaskResumeAll.part.0+0x114>)
 80029ee:	6833      	ldr	r3, [r6, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d06e      	beq.n	8002ad2 <xTaskResumeAll.part.0+0x106>
 80029f4:	4f3b      	ldr	r7, [pc, #236]	; (8002ae4 <xTaskResumeAll.part.0+0x118>)
 80029f6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8002af4 <xTaskResumeAll.part.0+0x128>
 80029fa:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8002af8 <xTaskResumeAll.part.0+0x12c>
 80029fe:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8002afc <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a02:	68f3      	ldr	r3, [r6, #12]
 8002a04:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a06:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a0a:	f104 0018 	add.w	r0, r4, #24
 8002a0e:	f7fe fe4d 	bl	80016ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a12:	4658      	mov	r0, fp
 8002a14:	f7fe fe4a 	bl	80016ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8002a20:	4293      	cmp	r3, r2
 8002a22:	4659      	mov	r1, fp
 8002a24:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8002a28:	bf88      	it	hi
 8002a2a:	603b      	strhi	r3, [r7, #0]
 8002a2c:	f7fe fe16 	bl	800165c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a30:	f8d8 3000 	ldr.w	r3, [r8]
 8002a34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d33d      	bcc.n	8002ab8 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a42:	6833      	ldr	r3, [r6, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1dc      	bne.n	8002a02 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a48:	4b27      	ldr	r3, [pc, #156]	; (8002ae8 <xTaskResumeAll.part.0+0x11c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	2a00      	cmp	r2, #0
 8002a50:	d03a      	beq.n	8002ac8 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a52:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a56:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002a58:	68d2      	ldr	r2, [r2, #12]
 8002a5a:	6852      	ldr	r2, [r2, #4]
 8002a5c:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002a5e:	4e24      	ldr	r6, [pc, #144]	; (8002af0 <xTaskResumeAll.part.0+0x124>)
 8002a60:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8002a62:	b194      	cbz	r4, 8002a8a <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
 8002a64:	2701      	movs	r7, #1
 8002a66:	e006      	b.n	8002a76 <xTaskResumeAll.part.0+0xaa>
 8002a68:	f7ff ff0c 	bl	8002884 <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 8002a6c:	b108      	cbz	r0, 8002a72 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 8002a6e:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a72:	3c01      	subs	r4, #1
 8002a74:	d008      	beq.n	8002a88 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a76:	682b      	ldr	r3, [r5, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f5      	beq.n	8002a68 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
 8002a7c:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a7e:	3c01      	subs	r4, #1
		++xPendedTicks;
 8002a80:	f103 0301 	add.w	r3, r3, #1
 8002a84:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002a86:	d1f6      	bne.n	8002a76 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
 8002a88:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8002a8a:	f8da 3000 	ldr.w	r3, [sl]
 8002a8e:	b15b      	cbz	r3, 8002aa8 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
 8002a90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	e000      	b.n	8002aaa <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8002aac:	f000 ff04 	bl	80038b8 <vPortExitCritical>
}
 8002ab0:	9801      	ldr	r0, [sp, #4]
 8002ab2:	b003      	add	sp, #12
 8002ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ab8:	6833      	ldr	r3, [r6, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1a1      	bne.n	8002a02 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <xTaskResumeAll.part.0+0x11c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	2a00      	cmp	r2, #0
 8002ac6:	d1c4      	bne.n	8002a52 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ac8:	4b08      	ldr	r3, [pc, #32]	; (8002aec <xTaskResumeAll.part.0+0x120>)
 8002aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e7c5      	b.n	8002a5e <xTaskResumeAll.part.0+0x92>
 8002ad2:	f8df a028 	ldr.w	sl, [pc, #40]	; 8002afc <xTaskResumeAll.part.0+0x130>
 8002ad6:	e7c2      	b.n	8002a5e <xTaskResumeAll.part.0+0x92>
 8002ad8:	20000fdc 	.word	0x20000fdc
 8002adc:	20000fd4 	.word	0x20000fd4
 8002ae0:	2000101c 	.word	0x2000101c
 8002ae4:	20000fe4 	.word	0x20000fe4
 8002ae8:	20000b6c 	.word	0x20000b6c
 8002aec:	20001010 	.word	0x20001010
 8002af0:	20001018 	.word	0x20001018
 8002af4:	20000b74 	.word	0x20000b74
 8002af8:	20000b68 	.word	0x20000b68
 8002afc:	20001060 	.word	0x20001060

08002b00 <xTaskCreateStatic>:
	{
 8002b00:	b530      	push	{r4, r5, lr}
 8002b02:	b087      	sub	sp, #28
 8002b04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002b06:	b1c4      	cbz	r4, 8002b3a <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8002b08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b0a:	b16d      	cbz	r5, 8002b28 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b0c:	256c      	movs	r5, #108	; 0x6c
 8002b0e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b10:	9d05      	ldr	r5, [sp, #20]
 8002b12:	2d6c      	cmp	r5, #108	; 0x6c
 8002b14:	d01a      	beq.n	8002b4c <xTaskCreateStatic+0x4c>
 8002b16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b1a:	f383 8811 	msr	BASEPRI, r3
 8002b1e:	f3bf 8f6f 	isb	sy
 8002b22:	f3bf 8f4f 	dsb	sy
 8002b26:	e7fe      	b.n	8002b26 <xTaskCreateStatic+0x26>
 8002b28:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002b38:	e7fe      	b.n	8002b38 <xTaskCreateStatic+0x38>
 8002b3a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002b3e:	f383 8811 	msr	BASEPRI, r3
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002b4a:	e7fe      	b.n	8002b4a <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002b4e:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b50:	2402      	movs	r4, #2
 8002b52:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b56:	ac04      	add	r4, sp, #16
 8002b58:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8002b5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002b5e:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b60:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b62:	f7ff fdeb 	bl	800273c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b66:	980c      	ldr	r0, [sp, #48]	; 0x30
 8002b68:	f7ff fd10 	bl	800258c <prvAddNewTaskToReadyList>
	}
 8002b6c:	9804      	ldr	r0, [sp, #16]
 8002b6e:	b007      	add	sp, #28
 8002b70:	bd30      	pop	{r4, r5, pc}
 8002b72:	bf00      	nop

08002b74 <xTaskCreate>:
	{
 8002b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b78:	4607      	mov	r7, r0
 8002b7a:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b7c:	0090      	lsls	r0, r2, #2
	{
 8002b7e:	4615      	mov	r5, r2
 8002b80:	4688      	mov	r8, r1
 8002b82:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b84:	f000 ffd6 	bl	8003b34 <pvPortMalloc>
			if( pxStack != NULL )
 8002b88:	b1d8      	cbz	r0, 8002bc2 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	206c      	movs	r0, #108	; 0x6c
 8002b8e:	f000 ffd1 	bl	8003b34 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002b92:	4606      	mov	r6, r0
 8002b94:	b1d0      	cbz	r0, 8002bcc <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 8002b96:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002b98:	2400      	movs	r4, #0
 8002b9a:	f886 4069 	strb.w	r4, [r6, #105]	; 0x69
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b9e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002ba0:	9401      	str	r4, [sp, #4]
 8002ba2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002ba4:	9602      	str	r6, [sp, #8]
 8002ba6:	464b      	mov	r3, r9
 8002ba8:	462a      	mov	r2, r5
 8002baa:	4641      	mov	r1, r8
 8002bac:	4638      	mov	r0, r7
 8002bae:	9400      	str	r4, [sp, #0]
 8002bb0:	f7ff fdc4 	bl	800273c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f7ff fce9 	bl	800258c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002bba:	2001      	movs	r0, #1
	}
 8002bbc:	b005      	add	sp, #20
 8002bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
 8002bc6:	b005      	add	sp, #20
 8002bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f001 f86b 	bl	8003ca8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bd6:	e7f1      	b.n	8002bbc <xTaskCreate+0x48>

08002bd8 <vTaskDelete>:
	{
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002bdc:	4d36      	ldr	r5, [pc, #216]	; (8002cb8 <vTaskDelete+0xe0>)
		taskENTER_CRITICAL();
 8002bde:	f000 fe49 	bl	8003874 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002be2:	2c00      	cmp	r4, #0
 8002be4:	d044      	beq.n	8002c70 <vTaskDelete+0x98>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002be6:	1d26      	adds	r6, r4, #4
 8002be8:	4630      	mov	r0, r6
 8002bea:	f7fe fd5f 	bl	80016ac <uxListRemove>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002bf0:	b11b      	cbz	r3, 8002bfa <vTaskDelete+0x22>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bf2:	f104 0018 	add.w	r0, r4, #24
 8002bf6:	f7fe fd59 	bl	80016ac <uxListRemove>
			uxTaskNumber++;
 8002bfa:	4a30      	ldr	r2, [pc, #192]	; (8002cbc <vTaskDelete+0xe4>)
 8002bfc:	6813      	ldr	r3, [r2, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 8002c02:	682b      	ldr	r3, [r5, #0]
 8002c04:	42a3      	cmp	r3, r4
 8002c06:	d02a      	beq.n	8002c5e <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 8002c08:	492d      	ldr	r1, [pc, #180]	; (8002cc0 <vTaskDelete+0xe8>)
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c0a:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
				--uxCurrentNumberOfTasks;
 8002c0e:	680b      	ldr	r3, [r1, #0]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	600b      	str	r3, [r1, #0]
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c14:	b162      	cbz	r2, 8002c30 <vTaskDelete+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c16:	2a01      	cmp	r2, #1
 8002c18:	d03f      	beq.n	8002c9a <vTaskDelete+0xc2>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c1a:	2a02      	cmp	r2, #2
 8002c1c:	d00e      	beq.n	8002c3c <vTaskDelete+0x64>
 8002c1e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002c22:	f383 8811 	msr	BASEPRI, r3
 8002c26:	f3bf 8f6f 	isb	sy
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	e7fe      	b.n	8002c2e <vTaskDelete+0x56>
				vPortFree( pxTCB->pxStack );
 8002c30:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002c32:	f001 f839 	bl	8003ca8 <vPortFree>
				vPortFree( pxTCB );
 8002c36:	4620      	mov	r0, r4
 8002c38:	f001 f836 	bl	8003ca8 <vPortFree>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <vTaskDelete+0xec>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	b9ba      	cbnz	r2, 8002c74 <vTaskDelete+0x9c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <vTaskDelete+0xf0>)
 8002c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c4a:	601a      	str	r2, [r3, #0]
		taskEXIT_CRITICAL();
 8002c4c:	f000 fe34 	bl	80038b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <vTaskDelete+0xf4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b113      	cbz	r3, 8002c5c <vTaskDelete+0x84>
			if( pxTCB == pxCurrentTCB )
 8002c56:	682b      	ldr	r3, [r5, #0]
 8002c58:	42a3      	cmp	r3, r4
 8002c5a:	d012      	beq.n	8002c82 <vTaskDelete+0xaa>
	}
 8002c5c:	bd70      	pop	{r4, r5, r6, pc}
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002c5e:	481c      	ldr	r0, [pc, #112]	; (8002cd0 <vTaskDelete+0xf8>)
 8002c60:	4631      	mov	r1, r6
 8002c62:	f7fe fcfb 	bl	800165c <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002c66:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <vTaskDelete+0xfc>)
 8002c68:	6813      	ldr	r3, [r2, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
 8002c6e:	e7ed      	b.n	8002c4c <vTaskDelete+0x74>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c70:	682c      	ldr	r4, [r5, #0]
 8002c72:	e7b8      	b.n	8002be6 <vTaskDelete+0xe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c74:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c76:	4b14      	ldr	r3, [pc, #80]	; (8002cc8 <vTaskDelete+0xf0>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c78:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002c7a:	68d2      	ldr	r2, [r2, #12]
 8002c7c:	6852      	ldr	r2, [r2, #4]
 8002c7e:	601a      	str	r2, [r3, #0]
}
 8002c80:	e7e4      	b.n	8002c4c <vTaskDelete+0x74>
				configASSERT( uxSchedulerSuspended == 0 );
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <vTaskDelete+0x100>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b163      	cbz	r3, 8002ca2 <vTaskDelete+0xca>
 8002c88:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	e7fe      	b.n	8002c98 <vTaskDelete+0xc0>
				vPortFree( pxTCB );
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f001 f804 	bl	8003ca8 <vPortFree>
 8002ca0:	e7cc      	b.n	8002c3c <vTaskDelete+0x64>
				portYIELD_WITHIN_API();
 8002ca2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002caa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	f3bf 8f6f 	isb	sy
	}
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	20000b68 	.word	0x20000b68
 8002cbc:	20000fe0 	.word	0x20000fe0
 8002cc0:	20000fd4 	.word	0x20000fd4
 8002cc4:	20000b6c 	.word	0x20000b6c
 8002cc8:	20001010 	.word	0x20001010
 8002ccc:	20001030 	.word	0x20001030
 8002cd0:	20001048 	.word	0x20001048
 8002cd4:	20000fd8 	.word	0x20000fd8
 8002cd8:	20000fdc 	.word	0x20000fdc

08002cdc <vTaskDelay>:
	{
 8002cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002cde:	b950      	cbnz	r0, 8002cf6 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002ce0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ce8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
	}
 8002cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002cf6:	4d20      	ldr	r5, [pc, #128]	; (8002d78 <vTaskDelay+0x9c>)
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	b143      	cbz	r3, 8002d0e <vTaskDelay+0x32>
 8002cfc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	e7fe      	b.n	8002d0c <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8002d0e:	682a      	ldr	r2, [r5, #0]
 8002d10:	3201      	adds	r2, #1
 8002d12:	4604      	mov	r4, r0
 8002d14:	602a      	str	r2, [r5, #0]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002d16:	4e19      	ldr	r6, [pc, #100]	; (8002d7c <vTaskDelay+0xa0>)
const TickType_t xConstTickCount = xTickCount;
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <vTaskDelay+0xa4>)
 8002d1a:	6817      	ldr	r7, [r2, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002d1c:	6832      	ldr	r2, [r6, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d1e:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002d20:	f882 306a 	strb.w	r3, [r2, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d24:	3004      	adds	r0, #4
 8002d26:	f7fe fcc1 	bl	80016ac <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d2a:	6833      	ldr	r3, [r6, #0]
 8002d2c:	19e4      	adds	r4, r4, r7
 8002d2e:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8002d30:	d310      	bcc.n	8002d54 <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <vTaskDelay+0xa8>)
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	6831      	ldr	r1, [r6, #0]
 8002d38:	3104      	adds	r1, #4
 8002d3a:	f7fe fc9f 	bl	800167c <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8002d3e:	682b      	ldr	r3, [r5, #0]
 8002d40:	b9a3      	cbnz	r3, 8002d6c <vTaskDelay+0x90>
 8002d42:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002d46:	f383 8811 	msr	BASEPRI, r3
 8002d4a:	f3bf 8f6f 	isb	sy
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	e7fe      	b.n	8002d52 <vTaskDelay+0x76>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <vTaskDelay+0xac>)
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	6831      	ldr	r1, [r6, #0]
 8002d5a:	3104      	adds	r1, #4
 8002d5c:	f7fe fc8e 	bl	800167c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <vTaskDelay+0xb0>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 8002d66:	bf38      	it	cc
 8002d68:	601c      	strcc	r4, [r3, #0]
 8002d6a:	e7e8      	b.n	8002d3e <vTaskDelay+0x62>
 8002d6c:	f7ff fe2e 	bl	80029cc <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8002d70:	2800      	cmp	r0, #0
 8002d72:	d0b5      	beq.n	8002ce0 <vTaskDelay+0x4>
	}
 8002d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000fdc 	.word	0x20000fdc
 8002d7c:	20000b68 	.word	0x20000b68
 8002d80:	2000105c 	.word	0x2000105c
 8002d84:	20000b70 	.word	0x20000b70
 8002d88:	20000b6c 	.word	0x20000b6c
 8002d8c:	20001010 	.word	0x20001010

08002d90 <vTaskStartScheduler>:
{
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d94:	2300      	movs	r3, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d96:	4668      	mov	r0, sp
 8002d98:	aa02      	add	r2, sp, #8
 8002d9a:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d9c:	e9cd 3300 	strd	r3, r3, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002da0:	f7fe fc2e 	bl	8001600 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002da4:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 8002da6:	b1c8      	cbz	r0, 8002ddc <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002da8:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 8002daa:	b174      	cbz	r4, 8002dca <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002dac:	236c      	movs	r3, #108	; 0x6c
 8002dae:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002db0:	9a03      	ldr	r2, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002db2:	9d02      	ldr	r5, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d01a      	beq.n	8002dee <vTaskStartScheduler+0x5e>
 8002db8:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	e7fe      	b.n	8002dc8 <vTaskStartScheduler+0x38>
 8002dca:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002dce:	f383 8811 	msr	BASEPRI, r3
 8002dd2:	f3bf 8f6f 	isb	sy
 8002dd6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8002dda:	e7fe      	b.n	8002dda <vTaskStartScheduler+0x4a>
 8002ddc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8002dec:	e7fe      	b.n	8002dec <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dee:	00ad      	lsls	r5, r5, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002df0:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002df2:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002df4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002df8:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dfa:	6320      	str	r0, [r4, #48]	; 0x30
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dfc:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dfe:	f006 faf7 	bl	80093f0 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <vTaskStartScheduler+0x124>)
 8002e06:	3d04      	subs	r5, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e08:	4621      	mov	r1, r4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e0a:	4415      	add	r5, r2
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e0c:	2249      	movs	r2, #73	; 0x49
 8002e0e:	f801 2f34 	strb.w	r2, [r1, #52]!
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e12:	f025 0607 	bic.w	r6, r5, #7
			if( pcName[ x ] == ( char ) 0x00 )
 8002e16:	f103 001f 	add.w	r0, r3, #31
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e1a:	4298      	cmp	r0, r3
 8002e1c:	d005      	beq.n	8002e2a <vTaskStartScheduler+0x9a>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002e22:	f801 2f01 	strb.w	r2, [r1, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8002e26:	2a00      	cmp	r2, #0
 8002e28:	d1f7      	bne.n	8002e1a <vTaskStartScheduler+0x8a>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e2a:	2500      	movs	r5, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e2c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002e2e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e32:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
	pxNewTCB->uxPriority = uxPriority;
 8002e36:	62e5      	str	r5, [r4, #44]	; 0x2c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e38:	f7fe fc0c 	bl	8001654 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e3c:	f104 0018 	add.w	r0, r4, #24
 8002e40:	f7fe fc08 	bl	8001654 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e44:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e46:	491c      	ldr	r1, [pc, #112]	; (8002eb8 <vTaskStartScheduler+0x128>)
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e48:	61a3      	str	r3, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e4a:	462a      	mov	r2, r5
		pxNewTCB->ulNotifiedValue = 0;
 8002e4c:	6665      	str	r5, [r4, #100]	; 0x64
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e4e:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e50:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e52:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
		pxNewTCB->ucDelayAborted = pdFALSE;
 8002e56:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	f000 fcde 	bl	800381c <pxPortInitialiseStack>
 8002e60:	6020      	str	r0, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7ff fb92 	bl	800258c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 8002e68:	f000 fc3c 	bl	80036e4 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002e6c:	2801      	cmp	r0, #1
 8002e6e:	d00c      	beq.n	8002e8a <vTaskStartScheduler+0xfa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e70:	3001      	adds	r0, #1
 8002e72:	d001      	beq.n	8002e78 <vTaskStartScheduler+0xe8>
}
 8002e74:	b004      	add	sp, #16
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e88:	e7fe      	b.n	8002e88 <vTaskStartScheduler+0xf8>
 8002e8a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002e8e:	f383 8811 	msr	BASEPRI, r3
 8002e92:	f3bf 8f6f 	isb	sy
 8002e96:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002e9a:	4908      	ldr	r1, [pc, #32]	; (8002ebc <vTaskStartScheduler+0x12c>)
		xSchedulerRunning = pdTRUE;
 8002e9c:	4a08      	ldr	r2, [pc, #32]	; (8002ec0 <vTaskStartScheduler+0x130>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e9e:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <vTaskStartScheduler+0x134>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8002ea0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002ea4:	600c      	str	r4, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8002ea6:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ea8:	601d      	str	r5, [r3, #0]
}
 8002eaa:	b004      	add	sp, #16
 8002eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002eb0:	f000 bd72 	b.w	8003998 <xPortStartScheduler>
 8002eb4:	0800c4f4 	.word	0x0800c4f4
 8002eb8:	080027e9 	.word	0x080027e9
 8002ebc:	20001010 	.word	0x20001010
 8002ec0:	20001030 	.word	0x20001030
 8002ec4:	2000105c 	.word	0x2000105c

08002ec8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002ec8:	4a02      	ldr	r2, [pc, #8]	; (8002ed4 <vTaskSuspendAll+0xc>)
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	20000fdc 	.word	0x20000fdc

08002ed8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <xTaskResumeAll+0x1c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b943      	cbnz	r3, 8002ef0 <xTaskResumeAll+0x18>
 8002ede:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002ee2:	f383 8811 	msr	BASEPRI, r3
 8002ee6:	f3bf 8f6f 	isb	sy
 8002eea:	f3bf 8f4f 	dsb	sy
 8002eee:	e7fe      	b.n	8002eee <xTaskResumeAll+0x16>
 8002ef0:	f7ff bd6c 	b.w	80029cc <xTaskResumeAll.part.0>
 8002ef4:	20000fdc 	.word	0x20000fdc

08002ef8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002ef8:	4b01      	ldr	r3, [pc, #4]	; (8002f00 <xTaskGetTickCount+0x8>)
 8002efa:	6818      	ldr	r0, [r3, #0]
}
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	2000105c 	.word	0x2000105c

08002f04 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f04:	4b05      	ldr	r3, [pc, #20]	; (8002f1c <xTaskIncrementTick+0x18>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b90b      	cbnz	r3, 8002f0e <xTaskIncrementTick+0xa>
 8002f0a:	f7ff bcbb 	b.w	8002884 <xTaskIncrementTick.part.0>
		++xPendedTicks;
 8002f0e:	4a04      	ldr	r2, [pc, #16]	; (8002f20 <xTaskIncrementTick+0x1c>)
 8002f10:	6813      	ldr	r3, [r2, #0]
 8002f12:	3301      	adds	r3, #1
}
 8002f14:	2000      	movs	r0, #0
		++xPendedTicks;
 8002f16:	6013      	str	r3, [r2, #0]
}
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000fdc 	.word	0x20000fdc
 8002f20:	20001018 	.word	0x20001018

08002f24 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <vTaskSwitchContext+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b11b      	cbz	r3, 8002f32 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <vTaskSwitchContext+0x18>)
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
}
 8002f30:	4770      	bx	lr
 8002f32:	f7ff bbb3 	b.w	800269c <vTaskSwitchContext.part.0>
 8002f36:	bf00      	nop
 8002f38:	20000fdc 	.word	0x20000fdc
 8002f3c:	20001060 	.word	0x20001060

08002f40 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8002f40:	b1f0      	cbz	r0, 8002f80 <vTaskPlaceOnEventList+0x40>
{
 8002f42:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f44:	4d1c      	ldr	r5, [pc, #112]	; (8002fb8 <vTaskPlaceOnEventList+0x78>)
 8002f46:	460c      	mov	r4, r1
 8002f48:	6829      	ldr	r1, [r5, #0]
 8002f4a:	3118      	adds	r1, #24
 8002f4c:	f7fe fb96 	bl	800167c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <vTaskPlaceOnEventList+0x7c>)
 8002f52:	681e      	ldr	r6, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f54:	682b      	ldr	r3, [r5, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f56:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f5e:	3004      	adds	r0, #4
 8002f60:	f7fe fba4 	bl	80016ac <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f64:	1c63      	adds	r3, r4, #1
 8002f66:	d014      	beq.n	8002f92 <vTaskPlaceOnEventList+0x52>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	19a4      	adds	r4, r4, r6
 8002f6c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002f6e:	d317      	bcc.n	8002fa0 <vTaskPlaceOnEventList+0x60>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <vTaskPlaceOnEventList+0x80>)
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	6829      	ldr	r1, [r5, #0]
}
 8002f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f7a:	3104      	adds	r1, #4
 8002f7c:	f7fe bb7e 	b.w	800167c <vListInsert>
 8002f80:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8002f90:	e7fe      	b.n	8002f90 <vTaskPlaceOnEventList+0x50>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f92:	6829      	ldr	r1, [r5, #0]
 8002f94:	480b      	ldr	r0, [pc, #44]	; (8002fc4 <vTaskPlaceOnEventList+0x84>)
}
 8002f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f9a:	3104      	adds	r1, #4
 8002f9c:	f7fe bb5e 	b.w	800165c <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fa0:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <vTaskPlaceOnEventList+0x88>)
 8002fa2:	6818      	ldr	r0, [r3, #0]
 8002fa4:	6829      	ldr	r1, [r5, #0]
 8002fa6:	3104      	adds	r1, #4
 8002fa8:	f7fe fb68 	bl	800167c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002fac:	4b07      	ldr	r3, [pc, #28]	; (8002fcc <vTaskPlaceOnEventList+0x8c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002fb2:	bf38      	it	cc
 8002fb4:	601c      	strcc	r4, [r3, #0]
}
 8002fb6:	bd70      	pop	{r4, r5, r6, pc}
 8002fb8:	20000b68 	.word	0x20000b68
 8002fbc:	2000105c 	.word	0x2000105c
 8002fc0:	20000b70 	.word	0x20000b70
 8002fc4:	20001034 	.word	0x20001034
 8002fc8:	20000b6c 	.word	0x20000b6c
 8002fcc:	20001010 	.word	0x20001010

08002fd0 <vTaskPlaceOnEventListRestricted>:
	{
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxEventList );
 8002fd2:	b360      	cbz	r0, 800302e <vTaskPlaceOnEventListRestricted+0x5e>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fd4:	4e20      	ldr	r6, [pc, #128]	; (8003058 <vTaskPlaceOnEventListRestricted+0x88>)
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	6831      	ldr	r1, [r6, #0]
 8002fda:	4615      	mov	r5, r2
 8002fdc:	3118      	adds	r1, #24
 8002fde:	f7fe fb3d 	bl	800165c <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8002fe2:	4b1e      	ldr	r3, [pc, #120]	; (800305c <vTaskPlaceOnEventListRestricted+0x8c>)
		if( xWaitIndefinitely != pdFALSE )
 8002fe4:	b99d      	cbnz	r5, 800300e <vTaskPlaceOnEventListRestricted+0x3e>
const TickType_t xConstTickCount = xTickCount;
 8002fe6:	681f      	ldr	r7, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002fe8:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fea:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8002fec:	f883 506a 	strb.w	r5, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ff0:	3004      	adds	r0, #4
 8002ff2:	f7fe fb5b 	bl	80016ac <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002ff6:	6833      	ldr	r3, [r6, #0]
 8002ff8:	19e4      	adds	r4, r4, r7
 8002ffa:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002ffc:	d320      	bcc.n	8003040 <vTaskPlaceOnEventListRestricted+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ffe:	4b18      	ldr	r3, [pc, #96]	; (8003060 <vTaskPlaceOnEventListRestricted+0x90>)
 8003000:	6818      	ldr	r0, [r3, #0]
 8003002:	6831      	ldr	r1, [r6, #0]
	}
 8003004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003008:	3104      	adds	r1, #4
 800300a:	f7fe bb37 	b.w	800167c <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800300e:	681b      	ldr	r3, [r3, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003010:	6833      	ldr	r3, [r6, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003012:	6830      	ldr	r0, [r6, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003014:	2200      	movs	r2, #0
 8003016:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800301a:	3004      	adds	r0, #4
 800301c:	f7fe fb46 	bl	80016ac <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003020:	6831      	ldr	r1, [r6, #0]
 8003022:	4810      	ldr	r0, [pc, #64]	; (8003064 <vTaskPlaceOnEventListRestricted+0x94>)
	}
 8003024:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003028:	3104      	adds	r1, #4
 800302a:	f7fe bb17 	b.w	800165c <vListInsertEnd>
 800302e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800303e:	e7fe      	b.n	800303e <vTaskPlaceOnEventListRestricted+0x6e>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <vTaskPlaceOnEventListRestricted+0x98>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	6831      	ldr	r1, [r6, #0]
 8003046:	3104      	adds	r1, #4
 8003048:	f7fe fb18 	bl	800167c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800304c:	4b07      	ldr	r3, [pc, #28]	; (800306c <vTaskPlaceOnEventListRestricted+0x9c>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003052:	bf38      	it	cc
 8003054:	601c      	strcc	r4, [r3, #0]
	}
 8003056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003058:	20000b68 	.word	0x20000b68
 800305c:	2000105c 	.word	0x2000105c
 8003060:	20000b70 	.word	0x20000b70
 8003064:	20001034 	.word	0x20001034
 8003068:	20000b6c 	.word	0x20000b6c
 800306c:	20001010 	.word	0x20001010

08003070 <xTaskRemoveFromEventList>:
{
 8003070:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003072:	68c3      	ldr	r3, [r0, #12]
 8003074:	68dc      	ldr	r4, [r3, #12]
{
 8003076:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 8003078:	2c00      	cmp	r4, #0
 800307a:	d02b      	beq.n	80030d4 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800307c:	f104 0518 	add.w	r5, r4, #24
 8003080:	4628      	mov	r0, r5
 8003082:	f7fe fb13 	bl	80016ac <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003086:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <xTaskRemoveFromEventList+0x78>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b17b      	cbz	r3, 80030ac <xTaskRemoveFromEventList+0x3c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800308c:	4817      	ldr	r0, [pc, #92]	; (80030ec <xTaskRemoveFromEventList+0x7c>)
 800308e:	4629      	mov	r1, r5
 8003090:	f7fe fae4 	bl	800165c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003094:	4b16      	ldr	r3, [pc, #88]	; (80030f0 <xTaskRemoveFromEventList+0x80>)
 8003096:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800309e:	bf85      	ittet	hi
 80030a0:	4b14      	ldrhi	r3, [pc, #80]	; (80030f4 <xTaskRemoveFromEventList+0x84>)
 80030a2:	2001      	movhi	r0, #1
		xReturn = pdFALSE;
 80030a4:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80030a6:	6018      	strhi	r0, [r3, #0]
}
 80030a8:	b003      	add	sp, #12
 80030aa:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80030ac:	1d21      	adds	r1, r4, #4
 80030ae:	4608      	mov	r0, r1
 80030b0:	9101      	str	r1, [sp, #4]
 80030b2:	f7fe fafb 	bl	80016ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80030b6:	4a10      	ldr	r2, [pc, #64]	; (80030f8 <xTaskRemoveFromEventList+0x88>)
 80030b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030ba:	6810      	ldr	r0, [r2, #0]
 80030bc:	9901      	ldr	r1, [sp, #4]
 80030be:	4283      	cmp	r3, r0
 80030c0:	480e      	ldr	r0, [pc, #56]	; (80030fc <xTaskRemoveFromEventList+0x8c>)
 80030c2:	bf88      	it	hi
 80030c4:	6013      	strhi	r3, [r2, #0]
 80030c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80030ca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80030ce:	f7fe fac5 	bl	800165c <vListInsertEnd>
 80030d2:	e7df      	b.n	8003094 <xTaskRemoveFromEventList+0x24>
 80030d4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80030e4:	e7fe      	b.n	80030e4 <xTaskRemoveFromEventList+0x74>
 80030e6:	bf00      	nop
 80030e8:	20000fdc 	.word	0x20000fdc
 80030ec:	2000101c 	.word	0x2000101c
 80030f0:	20000b68 	.word	0x20000b68
 80030f4:	20001060 	.word	0x20001060
 80030f8:	20000fe4 	.word	0x20000fe4
 80030fc:	20000b74 	.word	0x20000b74

08003100 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003100:	4a03      	ldr	r2, [pc, #12]	; (8003110 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003104:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	e9c0 2300 	strd	r2, r3, [r0]
}
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	20001014 	.word	0x20001014
 8003114:	2000105c 	.word	0x2000105c

08003118 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8003118:	b328      	cbz	r0, 8003166 <xTaskCheckForTimeOut+0x4e>
{
 800311a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800311c:	460d      	mov	r5, r1
 800311e:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8003120:	b1c1      	cbz	r1, 8003154 <xTaskCheckForTimeOut+0x3c>
	taskENTER_CRITICAL();
 8003122:	4604      	mov	r4, r0
 8003124:	f000 fba6 	bl	8003874 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003128:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <xTaskCheckForTimeOut+0x9c>)
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <xTaskCheckForTimeOut+0xa0>)
		const TickType_t xConstTickCount = xTickCount;
 800312c:	6816      	ldr	r6, [r2, #0]
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 800312e:	6819      	ldr	r1, [r3, #0]
 8003130:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
 8003134:	bb00      	cbnz	r0, 8003178 <xTaskCheckForTimeOut+0x60>
			if( *pxTicksToWait == portMAX_DELAY )
 8003136:	682b      	ldr	r3, [r5, #0]
 8003138:	1c59      	adds	r1, r3, #1
 800313a:	d022      	beq.n	8003182 <xTaskCheckForTimeOut+0x6a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800313c:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80031bc <xTaskCheckForTimeOut+0xa4>
 8003140:	e9d4 0100 	ldrd	r0, r1, [r4]
 8003144:	f8de 7000 	ldr.w	r7, [lr]
 8003148:	42b8      	cmp	r0, r7
 800314a:	d020      	beq.n	800318e <xTaskCheckForTimeOut+0x76>
 800314c:	42b1      	cmp	r1, r6
 800314e:	d81e      	bhi.n	800318e <xTaskCheckForTimeOut+0x76>
			xReturn = pdTRUE;
 8003150:	2001      	movs	r0, #1
 8003152:	e016      	b.n	8003182 <xTaskCheckForTimeOut+0x6a>
 8003154:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8003164:	e7fe      	b.n	8003164 <xTaskCheckForTimeOut+0x4c>
 8003166:	f04f 0340 	mov.w	r3, #64	; 0x40
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8003176:	e7fe      	b.n	8003176 <xTaskCheckForTimeOut+0x5e>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
				xReturn = pdTRUE;
 8003180:	2001      	movs	r0, #1
 8003182:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8003184:	f000 fb98 	bl	80038b8 <vPortExitCritical>
}
 8003188:	9801      	ldr	r0, [sp, #4]
 800318a:	b003      	add	sp, #12
 800318c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800318e:	eba6 0c01 	sub.w	ip, r6, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003192:	4563      	cmp	r3, ip
 8003194:	d909      	bls.n	80031aa <xTaskCheckForTimeOut+0x92>
			*pxTicksToWait -= xElapsedTime;
 8003196:	1b9b      	subs	r3, r3, r6
 8003198:	440b      	add	r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800319a:	f8de 1000 	ldr.w	r1, [lr]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800319e:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80031a0:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 80031a2:	2000      	movs	r0, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 80031a4:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80031a8:	e7eb      	b.n	8003182 <xTaskCheckForTimeOut+0x6a>
			*pxTicksToWait = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80031ae:	2001      	movs	r0, #1
 80031b0:	e7e7      	b.n	8003182 <xTaskCheckForTimeOut+0x6a>
 80031b2:	bf00      	nop
 80031b4:	2000105c 	.word	0x2000105c
 80031b8:	20000b68 	.word	0x20000b68
 80031bc:	20001014 	.word	0x20001014

080031c0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80031c0:	4b01      	ldr	r3, [pc, #4]	; (80031c8 <vTaskMissedYield+0x8>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
}
 80031c6:	4770      	bx	lr
 80031c8:	20001060 	.word	0x20001060

080031cc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <xTaskGetSchedulerState+0x18>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	b133      	cbz	r3, 80031e0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031d2:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <xTaskGetSchedulerState+0x1c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf0c      	ite	eq
 80031da:	2002      	moveq	r0, #2
 80031dc:	2000      	movne	r0, #0
 80031de:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80031e0:	2001      	movs	r0, #1
	}
 80031e2:	4770      	bx	lr
 80031e4:	20001030 	.word	0x20001030
 80031e8:	20000fdc 	.word	0x20000fdc

080031ec <xTaskPriorityInherit>:
	{
 80031ec:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80031ee:	4604      	mov	r4, r0
	{
 80031f0:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 80031f2:	b1c8      	cbz	r0, 8003228 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80031f4:	4d1d      	ldr	r5, [pc, #116]	; (800326c <xTaskPriorityInherit+0x80>)
 80031f6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80031f8:	682a      	ldr	r2, [r5, #0]
 80031fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d215      	bcs.n	800322c <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003200:	6982      	ldr	r2, [r0, #24]
 8003202:	2a00      	cmp	r2, #0
 8003204:	db04      	blt.n	8003210 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003206:	682a      	ldr	r2, [r5, #0]
 8003208:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800320a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800320e:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003210:	4e17      	ldr	r6, [pc, #92]	; (8003270 <xTaskPriorityInherit+0x84>)
 8003212:	6962      	ldr	r2, [r4, #20]
 8003214:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003218:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800321c:	429a      	cmp	r2, r3
 800321e:	d00e      	beq.n	800323e <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8003226:	2001      	movs	r0, #1
	}
 8003228:	b002      	add	sp, #8
 800322a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800322c:	682b      	ldr	r3, [r5, #0]
 800322e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	4298      	cmp	r0, r3
 8003234:	bf2c      	ite	cs
 8003236:	2000      	movcs	r0, #0
 8003238:	2001      	movcc	r0, #1
	}
 800323a:	b002      	add	sp, #8
 800323c:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800323e:	1d21      	adds	r1, r4, #4
 8003240:	4608      	mov	r0, r1
 8003242:	9101      	str	r1, [sp, #4]
 8003244:	f7fe fa32 	bl	80016ac <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003248:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800324c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800324e:	681a      	ldr	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003250:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003252:	4290      	cmp	r0, r2
 8003254:	bf88      	it	hi
 8003256:	6018      	strhi	r0, [r3, #0]
 8003258:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800325c:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8003260:	9901      	ldr	r1, [sp, #4]
 8003262:	f7fe f9fb 	bl	800165c <vListInsertEnd>
				xReturn = pdTRUE;
 8003266:	2001      	movs	r0, #1
 8003268:	e7de      	b.n	8003228 <xTaskPriorityInherit+0x3c>
 800326a:	bf00      	nop
 800326c:	20000b68 	.word	0x20000b68
 8003270:	20000b74 	.word	0x20000b74
 8003274:	20000fe4 	.word	0x20000fe4

08003278 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8003278:	b318      	cbz	r0, 80032c2 <xTaskPriorityDisinherit+0x4a>
	{
 800327a:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <xTaskPriorityDisinherit+0x80>)
 800327e:	681c      	ldr	r4, [r3, #0]
 8003280:	4284      	cmp	r4, r0
	{
 8003282:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
 8003284:	d008      	beq.n	8003298 <xTaskPriorityDisinherit+0x20>
 8003286:	f04f 0340 	mov.w	r3, #64	; 0x40
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	e7fe      	b.n	8003296 <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
 8003298:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800329a:	b14b      	cbz	r3, 80032b0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800329c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800329e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
			( pxTCB->uxMutexesHeld )--;
 80032a0:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032a2:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 80032a4:	6623      	str	r3, [r4, #96]	; 0x60
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80032a6:	d000      	beq.n	80032aa <xTaskPriorityDisinherit+0x32>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80032a8:	b16b      	cbz	r3, 80032c6 <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 80032aa:	2000      	movs	r0, #0
	}
 80032ac:	b002      	add	sp, #8
 80032ae:	bd10      	pop	{r4, pc}
 80032b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80032b4:	f383 8811 	msr	BASEPRI, r3
 80032b8:	f3bf 8f6f 	isb	sy
 80032bc:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 80032c0:	e7fe      	b.n	80032c0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80032c2:	2000      	movs	r0, #0
	}
 80032c4:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80032c6:	1d21      	adds	r1, r4, #4
 80032c8:	4608      	mov	r0, r1
 80032ca:	9101      	str	r1, [sp, #4]
 80032cc:	f7fe f9ee 	bl	80016ac <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
					prvAddTaskToReadyList( pxTCB );
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80032d4:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032d6:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
 80032da:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80032dc:	6810      	ldr	r0, [r2, #0]
 80032de:	9901      	ldr	r1, [sp, #4]
 80032e0:	4283      	cmp	r3, r0
 80032e2:	4807      	ldr	r0, [pc, #28]	; (8003300 <xTaskPriorityDisinherit+0x88>)
 80032e4:	bf88      	it	hi
 80032e6:	6013      	strhi	r3, [r2, #0]
 80032e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80032ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80032f0:	f7fe f9b4 	bl	800165c <vListInsertEnd>
					xReturn = pdTRUE;
 80032f4:	2001      	movs	r0, #1
		return xReturn;
 80032f6:	e7d9      	b.n	80032ac <xTaskPriorityDisinherit+0x34>
 80032f8:	20000b68 	.word	0x20000b68
 80032fc:	20000fe4 	.word	0x20000fe4
 8003300:	20000b74 	.word	0x20000b74

08003304 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8003304:	2800      	cmp	r0, #0
 8003306:	d041      	beq.n	800338c <vTaskPriorityDisinheritAfterTimeout+0x88>
	{
 8003308:	b530      	push	{r4, r5, lr}
			configASSERT( pxTCB->uxMutexesHeld );
 800330a:	6e03      	ldr	r3, [r0, #96]	; 0x60
	{
 800330c:	b083      	sub	sp, #12
 800330e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8003310:	b153      	cbz	r3, 8003328 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003312:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003316:	4281      	cmp	r1, r0
 8003318:	bf38      	it	cc
 800331a:	4601      	movcc	r1, r0
 800331c:	428a      	cmp	r2, r1
 800331e:	d001      	beq.n	8003324 <vTaskPriorityDisinheritAfterTimeout+0x20>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003320:	2b01      	cmp	r3, #1
 8003322:	d00a      	beq.n	800333a <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 8003324:	b003      	add	sp, #12
 8003326:	bd30      	pop	{r4, r5, pc}
 8003328:	f04f 0340 	mov.w	r3, #64	; 0x40
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8003338:	e7fe      	b.n	8003338 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	42a3      	cmp	r3, r4
 8003340:	d025      	beq.n	800338e <vTaskPriorityDisinheritAfterTimeout+0x8a>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003342:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 8003344:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003346:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003348:	bfa8      	it	ge
 800334a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800334e:	4d15      	ldr	r5, [pc, #84]	; (80033a4 <vTaskPriorityDisinheritAfterTimeout+0xa0>)
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003350:	bfa8      	it	ge
 8003352:	61a1      	strge	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003354:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003358:	6961      	ldr	r1, [r4, #20]
 800335a:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800335e:	4299      	cmp	r1, r3
 8003360:	d1e0      	bne.n	8003324 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003362:	1d21      	adds	r1, r4, #4
 8003364:	4608      	mov	r0, r1
 8003366:	9101      	str	r1, [sp, #4]
 8003368:	f7fe f9a0 	bl	80016ac <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800336c:	4b0e      	ldr	r3, [pc, #56]	; (80033a8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 800336e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	9901      	ldr	r1, [sp, #4]
 8003374:	4290      	cmp	r0, r2
 8003376:	bf88      	it	hi
 8003378:	6018      	strhi	r0, [r3, #0]
 800337a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800337e:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
 8003382:	b003      	add	sp, #12
 8003384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8003388:	f7fe b968 	b.w	800165c <vListInsertEnd>
 800338c:	4770      	bx	lr
 800338e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800339e:	e7fe      	b.n	800339e <vTaskPriorityDisinheritAfterTimeout+0x9a>
 80033a0:	20000b68 	.word	0x20000b68
 80033a4:	20000b74 	.word	0x20000b74
 80033a8:	20000fe4 	.word	0x20000fe4

080033ac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80033ac:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <pvTaskIncrementMutexHeldCount+0x14>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	b11a      	cbz	r2, 80033ba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80033b6:	3201      	adds	r2, #1
 80033b8:	660a      	str	r2, [r1, #96]	; 0x60
		return pxCurrentTCB;
 80033ba:	6818      	ldr	r0, [r3, #0]
	}
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000b68 	.word	0x20000b68

080033c4 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80033c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c8:	4e22      	ldr	r6, [pc, #136]	; (8003454 <prvSwitchTimerLists+0x90>)
	if( xTimerQueue != NULL )
 80033ca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800345c <prvSwitchTimerLists+0x98>
{
 80033ce:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80033d0:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033d4:	e00d      	b.n	80033f2 <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033d6:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d8:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80033da:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033dc:	1d25      	adds	r5, r4, #4
 80033de:	4628      	mov	r0, r5
 80033e0:	f7fe f964 	bl	80016ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033e4:	6a23      	ldr	r3, [r4, #32]
 80033e6:	4620      	mov	r0, r4
 80033e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033ea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80033ee:	075b      	lsls	r3, r3, #29
 80033f0:	d40a      	bmi.n	8003408 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80033f2:	6833      	ldr	r3, [r6, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2a00      	cmp	r2, #0
 80033f8:	d1ed      	bne.n	80033d6 <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <prvSwitchTimerLists+0x94>)
 80033fc:	6811      	ldr	r1, [r2, #0]
 80033fe:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8003400:	6013      	str	r3, [r2, #0]
}
 8003402:	b005      	add	sp, #20
 8003404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003408:	69a3      	ldr	r3, [r4, #24]
 800340a:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800340c:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800340e:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8003410:	d205      	bcs.n	800341e <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003412:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003414:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003416:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003418:	f7fe f930 	bl	800167c <vListInsert>
 800341c:	e7e9      	b.n	80033f2 <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
 800341e:	f8d9 3000 	ldr.w	r3, [r9]
 8003422:	b16b      	cbz	r3, 8003440 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003424:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003428:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800342a:	f7ff fecf 	bl	80031cc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800342e:	2300      	movs	r3, #0
 8003430:	f8d9 0000 	ldr.w	r0, [r9]
 8003434:	461a      	mov	r2, r3
 8003436:	4669      	mov	r1, sp
 8003438:	f7fe fa3e 	bl	80018b8 <xQueueGenericSend>
				configASSERT( xResult );
 800343c:	2800      	cmp	r0, #0
 800343e:	d1d8      	bne.n	80033f2 <prvSwitchTimerLists+0x2e>
 8003440:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	e7fe      	b.n	8003450 <prvSwitchTimerLists+0x8c>
 8003452:	bf00      	nop
 8003454:	20001064 	.word	0x20001064
 8003458:	20001068 	.word	0x20001068
 800345c:	20001188 	.word	0x20001188

08003460 <prvTimerTask>:
{
 8003460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003464:	4e9b      	ldr	r6, [pc, #620]	; (80036d4 <prvTimerTask+0x274>)
 8003466:	4d9c      	ldr	r5, [pc, #624]	; (80036d8 <prvTimerTask+0x278>)
 8003468:	4c9c      	ldr	r4, [pc, #624]	; (80036dc <prvTimerTask+0x27c>)
 800346a:	b08b      	sub	sp, #44	; 0x2c
					portYIELD_WITHIN_API();
 800346c:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8003470:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003474:	6833      	ldr	r3, [r6, #0]
 8003476:	681f      	ldr	r7, [r3, #0]
 8003478:	2f00      	cmp	r7, #0
 800347a:	f000 80a8 	beq.w	80035ce <prvTimerTask+0x16e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8003482:	f7ff fd21 	bl	8002ec8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8003486:	f7ff fd37 	bl	8002ef8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800348a:	682a      	ldr	r2, [r5, #0]
 800348c:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 800348e:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8003490:	f0c0 80ae 	bcc.w	80035f0 <prvTimerTask+0x190>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003494:	42b8      	cmp	r0, r7
	xLastTime = xTimeNow;
 8003496:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003498:	f080 80b4 	bcs.w	8003604 <prvTimerTask+0x1a4>
 800349c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800349e:	6820      	ldr	r0, [r4, #0]
 80034a0:	eba7 010a 	sub.w	r1, r7, sl
 80034a4:	f7ff f80e 	bl	80024c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80034a8:	f7ff fd16 	bl	8002ed8 <xTaskResumeAll>
 80034ac:	b928      	cbnz	r0, 80034ba <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 80034ae:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 80034b2:	f3bf 8f4f 	dsb	sy
 80034b6:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80034ba:	6820      	ldr	r0, [r4, #0]
 80034bc:	2200      	movs	r2, #0
 80034be:	a902      	add	r1, sp, #8
 80034c0:	f7fe fc6e 	bl	8001da0 <xQueueReceive>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d0d5      	beq.n	8003474 <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80034c8:	9b02      	ldr	r3, [sp, #8]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	db76      	blt.n	80035bc <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80034ce:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	b113      	cbz	r3, 80034da <prvTimerTask+0x7a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80034d4:	1d38      	adds	r0, r7, #4
 80034d6:	f7fe f8e9 	bl	80016ac <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 80034da:	f7ff fd0d 	bl	8002ef8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80034de:	682b      	ldr	r3, [r5, #0]
 80034e0:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 80034e2:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80034e4:	f0c0 808b 	bcc.w	80035fe <prvTimerTask+0x19e>
			switch( xMessage.xMessageID )
 80034e8:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 80034ea:	f8c5 a000 	str.w	sl, [r5]
			switch( xMessage.xMessageID )
 80034ee:	2b09      	cmp	r3, #9
 80034f0:	d8e3      	bhi.n	80034ba <prvTimerTask+0x5a>
 80034f2:	e8df f003 	tbb	[pc, r3]
 80034f6:	0505      	.short	0x0505
 80034f8:	5a3d5305 	.word	0x5a3d5305
 80034fc:	3d530505 	.word	0x3d530505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003500:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003504:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003506:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003510:	9b03      	ldr	r3, [sp, #12]
 8003512:	1899      	adds	r1, r3, r2
 8003514:	bf2c      	ite	cs
 8003516:	2001      	movcs	r0, #1
 8003518:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 800351a:	4551      	cmp	r1, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800351c:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800351e:	f200 808c 	bhi.w	800363a <prvTimerTask+0x1da>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003522:	ebaa 0303 	sub.w	r3, sl, r3
 8003526:	429a      	cmp	r2, r3
 8003528:	d832      	bhi.n	8003590 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	4638      	mov	r0, r7
 800352e:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003530:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003534:	075b      	lsls	r3, r3, #29
 8003536:	d5c0      	bpl.n	80034ba <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	b183      	cbz	r3, 800355e <prvTimerTask+0xfe>
		xMessage.xMessageID = xCommandID;
 800353c:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800353e:	69bb      	ldr	r3, [r7, #24]
		xMessage.xMessageID = xCommandID;
 8003540:	9206      	str	r2, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003542:	9a03      	ldr	r2, [sp, #12]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003544:	9708      	str	r7, [sp, #32]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003546:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003548:	9307      	str	r3, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800354a:	f7ff fe3f 	bl	80031cc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800354e:	2300      	movs	r3, #0
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	461a      	mov	r2, r3
 8003554:	a906      	add	r1, sp, #24
 8003556:	f7fe f9af 	bl	80018b8 <xQueueGenericSend>
							configASSERT( xResult );
 800355a:	2800      	cmp	r0, #0
 800355c:	d1ad      	bne.n	80034ba <prvTimerTask+0x5a>
 800355e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003562:	f383 8811 	msr	BASEPRI, r3
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	e7fe      	b.n	800356e <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003570:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003574:	f043 0301 	orr.w	r3, r3, #1
 8003578:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800357c:	9b03      	ldr	r3, [sp, #12]
 800357e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 809d 	beq.w	80036c0 <prvTimerTask+0x260>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003586:	4453      	add	r3, sl
	if( xNextExpiryTime <= xTimeNow )
 8003588:	4553      	cmp	r3, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800358a:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800358c:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 800358e:	d85e      	bhi.n	800364e <prvTimerTask+0x1ee>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <prvTimerTask+0x280>)
 8003592:	1d39      	adds	r1, r7, #4
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	f7fe f871 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 800359a:	e78e      	b.n	80034ba <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800359c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035a0:	f023 0301 	bic.w	r3, r3, #1
 80035a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
 80035a8:	e787      	b.n	80034ba <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80035aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80035ae:	079a      	lsls	r2, r3, #30
 80035b0:	d552      	bpl.n	8003658 <prvTimerTask+0x1f8>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80035b2:	f023 0301 	bic.w	r3, r3, #1
 80035b6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80035ba:	e77e      	b.n	80034ba <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80035bc:	9b03      	ldr	r3, [sp, #12]
 80035be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80035c2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80035c4:	9b02      	ldr	r3, [sp, #8]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f6ff af77 	blt.w	80034ba <prvTimerTask+0x5a>
 80035cc:	e77f      	b.n	80034ce <prvTimerTask+0x6e>
	vTaskSuspendAll();
 80035ce:	f7ff fc7b 	bl	8002ec8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 80035d2:	f7ff fc91 	bl	8002ef8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80035d6:	682a      	ldr	r2, [r5, #0]
 80035d8:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 80035da:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 80035dc:	d808      	bhi.n	80035f0 <prvTimerTask+0x190>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <prvTimerTask+0x280>)
	xLastTime = xTimeNow;
 80035e0:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	fab2 f282 	clz	r2, r2
 80035ec:	0952      	lsrs	r2, r2, #5
 80035ee:	e756      	b.n	800349e <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 80035f0:	f7ff fee8 	bl	80033c4 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 80035f4:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 80035f8:	f7ff fc6e 	bl	8002ed8 <xTaskResumeAll>
 80035fc:	e75d      	b.n	80034ba <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 80035fe:	f7ff fee1 	bl	80033c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003602:	e771      	b.n	80034e8 <prvTimerTask+0x88>
				( void ) xTaskResumeAll();
 8003604:	f7ff fc68 	bl	8002ed8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003608:	6832      	ldr	r2, [r6, #0]
 800360a:	68d2      	ldr	r2, [r2, #12]
 800360c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003610:	f10b 0104 	add.w	r1, fp, #4
 8003614:	4608      	mov	r0, r1
 8003616:	9101      	str	r1, [sp, #4]
 8003618:	f7fe f848 	bl	80016ac <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800361c:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
 8003620:	9901      	ldr	r1, [sp, #4]
 8003622:	f010 0f04 	tst.w	r0, #4
 8003626:	d11b      	bne.n	8003660 <prvTimerTask+0x200>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003628:	f020 0001 	bic.w	r0, r0, #1
 800362c:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003630:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003634:	4658      	mov	r0, fp
 8003636:	4798      	blx	r3
}
 8003638:	e73f      	b.n	80034ba <prvTimerTask+0x5a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800363a:	4553      	cmp	r3, sl
 800363c:	d902      	bls.n	8003644 <prvTimerTask+0x1e4>
 800363e:	2800      	cmp	r0, #0
 8003640:	f43f af73 	beq.w	800352a <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003644:	6830      	ldr	r0, [r6, #0]
 8003646:	1d39      	adds	r1, r7, #4
 8003648:	f7fe f818 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 800364c:	e735      	b.n	80034ba <prvTimerTask+0x5a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800364e:	6830      	ldr	r0, [r6, #0]
 8003650:	1d39      	adds	r1, r7, #4
 8003652:	f7fe f813 	bl	800167c <vListInsert>
 8003656:	e730      	b.n	80034ba <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8003658:	4638      	mov	r0, r7
 800365a:	f000 fb25 	bl	8003ca8 <vPortFree>
 800365e:	e72c      	b.n	80034ba <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003660:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003664:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003668:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 800366a:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800366c:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8003670:	d203      	bcs.n	800367a <prvTimerTask+0x21a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003672:	6830      	ldr	r0, [r6, #0]
 8003674:	f7fe f802 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 8003678:	e7da      	b.n	8003630 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800367a:	ebaa 0307 	sub.w	r3, sl, r7
 800367e:	429a      	cmp	r2, r3
 8003680:	d819      	bhi.n	80036b6 <prvTimerTask+0x256>
	if( xTimerQueue != NULL )
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	b173      	cbz	r3, 80036a4 <prvTimerTask+0x244>
		xMessage.xMessageID = xCommandID;
 8003686:	2300      	movs	r3, #0
 8003688:	9306      	str	r3, [sp, #24]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800368a:	9707      	str	r7, [sp, #28]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800368c:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003690:	f7ff fd9c 	bl	80031cc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003694:	2300      	movs	r3, #0
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	a906      	add	r1, sp, #24
 800369c:	f7fe f90c 	bl	80018b8 <xQueueGenericSend>
			configASSERT( xResult );
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1c5      	bne.n	8003630 <prvTimerTask+0x1d0>
 80036a4:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	e7fe      	b.n	80036b4 <prvTimerTask+0x254>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <prvTimerTask+0x280>)
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f7fd ffdf 	bl	800167c <vListInsert>
	return xProcessTimerNow;
 80036be:	e7b7      	b.n	8003630 <prvTimerTask+0x1d0>
 80036c0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80036c4:	f383 8811 	msr	BASEPRI, r3
 80036c8:	f3bf 8f6f 	isb	sy
 80036cc:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80036d0:	e7fe      	b.n	80036d0 <prvTimerTask+0x270>
 80036d2:	bf00      	nop
 80036d4:	20001064 	.word	0x20001064
 80036d8:	20001134 	.word	0x20001134
 80036dc:	20001188 	.word	0x20001188
 80036e0:	20001068 	.word	0x20001068

080036e4 <xTimerCreateTimerTask>:
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80036e6:	4c23      	ldr	r4, [pc, #140]	; (8003774 <xTimerCreateTimerTask+0x90>)
{
 80036e8:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 80036ea:	f000 f8c3 	bl	8003874 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80036ee:	6825      	ldr	r5, [r4, #0]
 80036f0:	b335      	cbz	r5, 8003740 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036f2:	f000 f8e1 	bl	80038b8 <vPortExitCritical>
	if( xTimerQueue != NULL )
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	b1cb      	cbz	r3, 800372e <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80036fa:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80036fc:	aa07      	add	r2, sp, #28
 80036fe:	a906      	add	r1, sp, #24
 8003700:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003702:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003706:	f7fd ff89 	bl	800161c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800370a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800370e:	2302      	movs	r3, #2
 8003710:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	9a07      	ldr	r2, [sp, #28]
 8003718:	4917      	ldr	r1, [pc, #92]	; (8003778 <xTimerCreateTimerTask+0x94>)
 800371a:	4818      	ldr	r0, [pc, #96]	; (800377c <xTimerCreateTimerTask+0x98>)
 800371c:	4623      	mov	r3, r4
 800371e:	f7ff f9ef 	bl	8002b00 <xTaskCreateStatic>
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <xTimerCreateTimerTask+0x9c>)
 8003724:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8003726:	b110      	cbz	r0, 800372e <xTimerCreateTimerTask+0x4a>
}
 8003728:	2001      	movs	r0, #1
 800372a:	b009      	add	sp, #36	; 0x24
 800372c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800372e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003732:	f383 8811 	msr	BASEPRI, r3
 8003736:	f3bf 8f6f 	isb	sy
 800373a:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800373e:	e7fe      	b.n	800373e <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8003740:	4f10      	ldr	r7, [pc, #64]	; (8003784 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8003742:	4e11      	ldr	r6, [pc, #68]	; (8003788 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8003744:	4638      	mov	r0, r7
 8003746:	f7fd ff79 	bl	800163c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800374a:	4630      	mov	r0, r6
 800374c:	f7fd ff76 	bl	800163c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003752:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8003754:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003756:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 800375a:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800375c:	2110      	movs	r1, #16
 800375e:	4a0e      	ldr	r2, [pc, #56]	; (8003798 <xTimerCreateTimerTask+0xb4>)
 8003760:	200a      	movs	r0, #10
 8003762:	f7fd fff3 	bl	800174c <xQueueGenericCreateStatic>
 8003766:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8003768:	2800      	cmp	r0, #0
 800376a:	d0c2      	beq.n	80036f2 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800376c:	490b      	ldr	r1, [pc, #44]	; (800379c <xTimerCreateTimerTask+0xb8>)
 800376e:	f7fe fe81 	bl	8002474 <vQueueAddToRegistry>
 8003772:	e7be      	b.n	80036f2 <xTimerCreateTimerTask+0xe>
 8003774:	20001188 	.word	0x20001188
 8003778:	0800c504 	.word	0x0800c504
 800377c:	08003461 	.word	0x08003461
 8003780:	2000118c 	.word	0x2000118c
 8003784:	2000110c 	.word	0x2000110c
 8003788:	20001120 	.word	0x20001120
 800378c:	20001064 	.word	0x20001064
 8003790:	20001068 	.word	0x20001068
 8003794:	20001138 	.word	0x20001138
 8003798:	2000106c 	.word	0x2000106c
 800379c:	0800c4fc 	.word	0x0800c4fc

080037a0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80037a0:	4808      	ldr	r0, [pc, #32]	; (80037c4 <prvPortStartFirstTask+0x24>)
 80037a2:	6800      	ldr	r0, [r0, #0]
 80037a4:	6800      	ldr	r0, [r0, #0]
 80037a6:	f380 8808 	msr	MSP, r0
 80037aa:	f04f 0000 	mov.w	r0, #0
 80037ae:	f380 8814 	msr	CONTROL, r0
 80037b2:	b662      	cpsie	i
 80037b4:	b661      	cpsie	f
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	f3bf 8f6f 	isb	sy
 80037be:	df00      	svc	0
 80037c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80037c2:	0000      	.short	0x0000
 80037c4:	e000ed08 	.word	0xe000ed08

080037c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80037c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80037d8 <vPortEnableVFP+0x10>
 80037cc:	6801      	ldr	r1, [r0, #0]
 80037ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80037d2:	6001      	str	r1, [r0, #0]
 80037d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80037d6:	0000      	.short	0x0000
 80037d8:	e000ed88 	.word	0xe000ed88

080037dc <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 80037dc:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <prvTaskExitError+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
{
 80037e0:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80037e2:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80037e4:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 80037e6:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80037e8:	d008      	beq.n	80037fc <prvTaskExitError+0x20>
 80037ea:	f04f 0340 	mov.w	r3, #64	; 0x40
 80037ee:	f383 8811 	msr	BASEPRI, r3
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	e7fe      	b.n	80037fa <prvTaskExitError+0x1e>
 80037fc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800380c:	9b01      	ldr	r3, [sp, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0fc      	beq.n	800380c <prvTaskExitError+0x30>
}
 8003812:	b002      	add	sp, #8
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000008 	.word	0x20000008

0800381c <pxPortInitialiseStack>:
{
 800381c:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800381e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003822:	4c07      	ldr	r4, [pc, #28]	; (8003840 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003824:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003828:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800382c:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003830:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003834:	e940 3209 	strd	r3, r2, [r0, #-36]	; 0x24
}
 8003838:	f85d 4b04 	ldr.w	r4, [sp], #4
 800383c:	3844      	subs	r0, #68	; 0x44
 800383e:	4770      	bx	lr
 8003840:	080037dd 	.word	0x080037dd
	...

08003850 <SVC_Handler>:
	__asm volatile (
 8003850:	4b07      	ldr	r3, [pc, #28]	; (8003870 <pxCurrentTCBConst2>)
 8003852:	6819      	ldr	r1, [r3, #0]
 8003854:	6808      	ldr	r0, [r1, #0]
 8003856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385a:	f380 8809 	msr	PSP, r0
 800385e:	f3bf 8f6f 	isb	sy
 8003862:	f04f 0000 	mov.w	r0, #0
 8003866:	f380 8811 	msr	BASEPRI, r0
 800386a:	4770      	bx	lr
 800386c:	f3af 8000 	nop.w

08003870 <pxCurrentTCBConst2>:
 8003870:	20000b68 	.word	0x20000b68

08003874 <vPortEnterCritical>:
 8003874:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <vPortEnterCritical+0x40>)
 8003886:	6813      	ldr	r3, [r2, #0]
 8003888:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800388a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800388c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800388e:	d000      	beq.n	8003892 <vPortEnterCritical+0x1e>
}
 8003890:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003892:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003896:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f7      	beq.n	8003890 <vPortEnterCritical+0x1c>
 80038a0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038a4:	f383 8811 	msr	BASEPRI, r3
 80038a8:	f3bf 8f6f 	isb	sy
 80038ac:	f3bf 8f4f 	dsb	sy
 80038b0:	e7fe      	b.n	80038b0 <vPortEnterCritical+0x3c>
 80038b2:	bf00      	nop
 80038b4:	20000008 	.word	0x20000008

080038b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80038b8:	4a08      	ldr	r2, [pc, #32]	; (80038dc <vPortExitCritical+0x24>)
 80038ba:	6813      	ldr	r3, [r2, #0]
 80038bc:	b943      	cbnz	r3, 80038d0 <vPortExitCritical+0x18>
 80038be:	f04f 0340 	mov.w	r3, #64	; 0x40
 80038c2:	f383 8811 	msr	BASEPRI, r3
 80038c6:	f3bf 8f6f 	isb	sy
 80038ca:	f3bf 8f4f 	dsb	sy
 80038ce:	e7fe      	b.n	80038ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80038d0:	3b01      	subs	r3, #1
 80038d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038d4:	b90b      	cbnz	r3, 80038da <vPortExitCritical+0x22>
	__asm volatile
 80038d6:	f383 8811 	msr	BASEPRI, r3
}
 80038da:	4770      	bx	lr
 80038dc:	20000008 	.word	0x20000008

080038e0 <PendSV_Handler>:
	__asm volatile
 80038e0:	f3ef 8009 	mrs	r0, PSP
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	4b15      	ldr	r3, [pc, #84]	; (8003940 <pxCurrentTCBConst>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	f01e 0f10 	tst.w	lr, #16
 80038f0:	bf08      	it	eq
 80038f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80038f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038fa:	6010      	str	r0, [r2, #0]
 80038fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003900:	f04f 0040 	mov.w	r0, #64	; 0x40
 8003904:	f380 8811 	msr	BASEPRI, r0
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f7ff fb08 	bl	8002f24 <vTaskSwitchContext>
 8003914:	f04f 0000 	mov.w	r0, #0
 8003918:	f380 8811 	msr	BASEPRI, r0
 800391c:	bc09      	pop	{r0, r3}
 800391e:	6819      	ldr	r1, [r3, #0]
 8003920:	6808      	ldr	r0, [r1, #0]
 8003922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003926:	f01e 0f10 	tst.w	lr, #16
 800392a:	bf08      	it	eq
 800392c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003930:	f380 8809 	msr	PSP, r0
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	f3af 8000 	nop.w

08003940 <pxCurrentTCBConst>:
 8003940:	20000b68 	.word	0x20000b68

08003944 <xPortSysTickHandler>:
{
 8003944:	b508      	push	{r3, lr}
	__asm volatile
 8003946:	f04f 0340 	mov.w	r3, #64	; 0x40
 800394a:	f383 8811 	msr	BASEPRI, r3
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003956:	f7ff fad5 	bl	8002f04 <xTaskIncrementTick>
 800395a:	b128      	cbz	r0, 8003968 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800395c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003964:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8003968:	2300      	movs	r3, #0
 800396a:	f383 8811 	msr	BASEPRI, r3
}
 800396e:	bd08      	pop	{r3, pc}

08003970 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003970:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003974:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003976:	4906      	ldr	r1, [pc, #24]	; (8003990 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003978:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800397a:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800397c:	680b      	ldr	r3, [r1, #0]
 800397e:	4805      	ldr	r0, [pc, #20]	; (8003994 <vPortSetupTimerInterrupt+0x24>)
 8003980:	fba0 0303 	umull	r0, r3, r0, r3
 8003984:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003986:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003988:	3b01      	subs	r3, #1
 800398a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800398c:	6111      	str	r1, [r2, #16]
}
 800398e:	4770      	bx	lr
 8003990:	20000000 	.word	0x20000000
 8003994:	10624dd3 	.word	0x10624dd3

08003998 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003998:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800399c:	4a48      	ldr	r2, [pc, #288]	; (8003ac0 <xPortStartScheduler+0x128>)
 800399e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 80039a2:	4291      	cmp	r1, r2
 80039a4:	d041      	beq.n	8003a2a <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039a6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80039aa:	4b46      	ldr	r3, [pc, #280]	; (8003ac4 <xPortStartScheduler+0x12c>)
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d033      	beq.n	8003a18 <xPortStartScheduler+0x80>
{
 80039b0:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039b2:	4b45      	ldr	r3, [pc, #276]	; (8003ac8 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039b4:	4c45      	ldr	r4, [pc, #276]	; (8003acc <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039b6:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039b8:	4845      	ldr	r0, [pc, #276]	; (8003ad0 <xPortStartScheduler+0x138>)
{
 80039ba:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039bc:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80039c2:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039d8:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039da:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039dc:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039de:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039e0:	bf48      	it	mi
 80039e2:	2206      	movmi	r2, #6
 80039e4:	d50f      	bpl.n	8003a06 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039f2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039f6:	061b      	lsls	r3, r3, #24
 80039f8:	4611      	mov	r1, r2
 80039fa:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80039fe:	d4f2      	bmi.n	80039e6 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003a00:	2903      	cmp	r1, #3
 8003a02:	d01b      	beq.n	8003a3c <xPortStartScheduler+0xa4>
 8003a04:	6001      	str	r1, [r0, #0]
	__asm volatile
 8003a06:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	e7fe      	b.n	8003a16 <xPortStartScheduler+0x7e>
 8003a18:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a28:	e7fe      	b.n	8003a28 <xPortStartScheduler+0x90>
 8003a2a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a2e:	f383 8811 	msr	BASEPRI, r3
 8003a32:	f3bf 8f6f 	isb	sy
 8003a36:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a3a:	e7fe      	b.n	8003a3a <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a3c:	9b02      	ldr	r3, [sp, #8]
 8003a3e:	4a22      	ldr	r2, [pc, #136]	; (8003ac8 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 8003a40:	4d24      	ldr	r5, [pc, #144]	; (8003ad4 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a42:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a46:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a4a:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a4c:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a4e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a50:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a58:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a5c:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8003a60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003a64:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	uxCriticalNesting = 0;
 8003a68:	2600      	movs	r6, #0
	vPortSetupTimerInterrupt();
 8003a6a:	f7ff ff81 	bl	8003970 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003a6e:	602e      	str	r6, [r5, #0]
	vPortEnableVFP();
 8003a70:	f7ff feaa 	bl	80037c8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003a74:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8003a78:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a7c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8003a80:	f7ff fe8e 	bl	80037a0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003a84:	f7ff fa4e 	bl	8002f24 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8003a88:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0;
 8003a8a:	9603      	str	r6, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	d008      	beq.n	8003aa2 <xPortStartScheduler+0x10a>
 8003a90:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	e7fe      	b.n	8003aa0 <xPortStartScheduler+0x108>
 8003aa2:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0fc      	beq.n	8003ab2 <xPortStartScheduler+0x11a>
}
 8003ab8:	2000      	movs	r0, #0
 8003aba:	b004      	add	sp, #16
 8003abc:	bd70      	pop	{r4, r5, r6, pc}
 8003abe:	bf00      	nop
 8003ac0:	410fc271 	.word	0x410fc271
 8003ac4:	410fc270 	.word	0x410fc270
 8003ac8:	e000e400 	.word	0xe000e400
 8003acc:	20001190 	.word	0x20001190
 8003ad0:	20001194 	.word	0x20001194
 8003ad4:	20000008 	.word	0x20000008

08003ad8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003ad8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003adc:	2b0f      	cmp	r3, #15
 8003ade:	d90e      	bls.n	8003afe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ae0:	4911      	ldr	r1, [pc, #68]	; (8003b28 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ae4:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ae6:	7812      	ldrb	r2, [r2, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d908      	bls.n	8003afe <vPortValidateInterruptPriority+0x26>
 8003aec:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	e7fe      	b.n	8003afc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003afe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b02:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <vPortValidateInterruptPriority+0x58>)
 8003b04:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d908      	bls.n	8003b24 <vPortValidateInterruptPriority+0x4c>
 8003b12:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	e7fe      	b.n	8003b22 <vPortValidateInterruptPriority+0x4a>
	}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000e3f0 	.word	0xe000e3f0
 8003b2c:	20001190 	.word	0x20001190
 8003b30:	20001194 	.word	0x20001194

08003b34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b38:	4606      	mov	r6, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8003b3a:	f7ff f9c5 	bl	8002ec8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003b3e:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <pvPortMalloc+0x158>)
 8003b40:	681d      	ldr	r5, [r3, #0]
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	d070      	beq.n	8003c28 <pvPortMalloc+0xf4>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b46:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <pvPortMalloc+0x15c>)
 8003b48:	681f      	ldr	r7, [r3, #0]
 8003b4a:	423e      	tst	r6, r7
 8003b4c:	d12e      	bne.n	8003bac <pvPortMalloc+0x78>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003b4e:	b36e      	cbz	r6, 8003bac <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
 8003b50:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003b54:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003b56:	bf1c      	itt	ne
 8003b58:	f024 0407 	bicne.w	r4, r4, #7
 8003b5c:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003b5e:	b32c      	cbz	r4, 8003bac <pvPortMalloc+0x78>
 8003b60:	f8df c140 	ldr.w	ip, [pc, #320]	; 8003ca4 <pvPortMalloc+0x170>
 8003b64:	f8dc 6000 	ldr.w	r6, [ip]
 8003b68:	42a6      	cmp	r6, r4
 8003b6a:	d31f      	bcc.n	8003bac <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8003b6c:	4849      	ldr	r0, [pc, #292]	; (8003c94 <pvPortMalloc+0x160>)
 8003b6e:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b70:	e003      	b.n	8003b7a <pvPortMalloc+0x46>
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	b122      	cbz	r2, 8003b80 <pvPortMalloc+0x4c>
 8003b76:	4618      	mov	r0, r3
 8003b78:	4613      	mov	r3, r2
 8003b7a:	6859      	ldr	r1, [r3, #4]
 8003b7c:	42a1      	cmp	r1, r4
 8003b7e:	d3f8      	bcc.n	8003b72 <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b80:	42ab      	cmp	r3, r5
 8003b82:	d013      	beq.n	8003bac <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b84:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b86:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b88:	f858 eb08 	ldr.w	lr, [r8], #8
 8003b8c:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b90:	2a10      	cmp	r2, #16
 8003b92:	d92b      	bls.n	8003bec <pvPortMalloc+0xb8>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b94:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b96:	0748      	lsls	r0, r1, #29
 8003b98:	d011      	beq.n	8003bbe <pvPortMalloc+0x8a>
 8003b9a:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	e7fe      	b.n	8003baa <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bac:	f7ff f994 	bl	8002ed8 <xTaskResumeAll>
	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8003bb0:	f04f 0800 	mov.w	r8, #0
 8003bb4:	f004 ff64 	bl	8008a80 <vApplicationMallocFailedHook>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 8003bb8:	4640      	mov	r0, r8
 8003bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003bbe:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bc0:	4a34      	ldr	r2, [pc, #208]	; (8003c94 <pvPortMalloc+0x160>)
						pxBlock->xBlockSize = xWantedSize;
 8003bc2:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003bc4:	4614      	mov	r4, r2
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	4291      	cmp	r1, r2
 8003bca:	d8fb      	bhi.n	8003bc4 <pvPortMalloc+0x90>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003bcc:	6860      	ldr	r0, [r4, #4]
 8003bce:	eb04 0e00 	add.w	lr, r4, r0
 8003bd2:	4571      	cmp	r1, lr
 8003bd4:	d04a      	beq.n	8003c6c <pvPortMalloc+0x138>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bd6:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8003bda:	eb01 000e 	add.w	r0, r1, lr
 8003bde:	4282      	cmp	r2, r0
 8003be0:	d04b      	beq.n	8003c7a <pvPortMalloc+0x146>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003be2:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003be4:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003be6:	bf18      	it	ne
 8003be8:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bea:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bec:	482a      	ldr	r0, [pc, #168]	; (8003c98 <pvPortMalloc+0x164>)
					xNumberOfSuccessfulAllocations++;
 8003bee:	4a2b      	ldr	r2, [pc, #172]	; (8003c9c <pvPortMalloc+0x168>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bf0:	6804      	ldr	r4, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003bf2:	1a76      	subs	r6, r6, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003bf4:	42a6      	cmp	r6, r4
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bf6:	bf38      	it	cc
 8003bf8:	6006      	strcc	r6, [r0, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003bfa:	4339      	orrs	r1, r7
					pxBlock->pxNextFreeBlock = NULL;
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
 8003c02:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c04:	f8cc 6000 	str.w	r6, [ip]
					xNumberOfSuccessfulAllocations++;
 8003c08:	3301      	adds	r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8003c0c:	f7ff f964 	bl	8002ed8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c10:	f018 0f07 	tst.w	r8, #7
 8003c14:	d0d0      	beq.n	8003bb8 <pvPortMalloc+0x84>
 8003c16:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	e7fe      	b.n	8003c26 <pvPortMalloc+0xf2>
	uxAddress = ( size_t ) ucHeap;
 8003c28:	491d      	ldr	r1, [pc, #116]	; (8003ca0 <pvPortMalloc+0x16c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c2a:	4c19      	ldr	r4, [pc, #100]	; (8003c90 <pvPortMalloc+0x15c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003c2c:	074f      	lsls	r7, r1, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003c2e:	bf14      	ite	ne
 8003c30:	1dca      	addne	r2, r1, #7
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003c32:	460a      	moveq	r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c34:	f501 4120 	add.w	r1, r1, #40960	; 0xa000
	uxAddress -= xHeapStructSize;
 8003c38:	f1a1 0508 	sub.w	r5, r1, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c3c:	f025 0507 	bic.w	r5, r5, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c40:	bf18      	it	ne
 8003c42:	f022 0207 	bicne.w	r2, r2, #7
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c46:	4914      	ldr	r1, [pc, #80]	; (8003c98 <pvPortMalloc+0x164>)
	pxEnd = ( void * ) uxAddress;
 8003c48:	601d      	str	r5, [r3, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003c4a:	4610      	mov	r0, r2
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c4c:	1aab      	subs	r3, r5, r2
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c4e:	4a15      	ldr	r2, [pc, #84]	; (8003ca4 <pvPortMalloc+0x170>)
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c50:	600b      	str	r3, [r1, #0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c52:	4910      	ldr	r1, [pc, #64]	; (8003c94 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c54:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c56:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8003c5a:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003c5c:	6008      	str	r0, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003c5e:	604a      	str	r2, [r1, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c60:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003c62:	e9c5 2200 	strd	r2, r2, [r5]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c66:	e9c0 5300 	strd	r5, r3, [r0]
}
 8003c6a:	e76e      	b.n	8003b4a <pvPortMalloc+0x16>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c6c:	6849      	ldr	r1, [r1, #4]
 8003c6e:	eb00 0e01 	add.w	lr, r0, r1
 8003c72:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
 8003c76:	4621      	mov	r1, r4
 8003c78:	e7af      	b.n	8003bda <pvPortMalloc+0xa6>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c7a:	42aa      	cmp	r2, r5
 8003c7c:	d0b1      	beq.n	8003be2 <pvPortMalloc+0xae>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c7e:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003c84:	4470      	add	r0, lr
 8003c86:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003c88:	e7ac      	b.n	8003be4 <pvPortMalloc+0xb0>
 8003c8a:	bf00      	nop
 8003c8c:	20001198 	.word	0x20001198
 8003c90:	2000b19c 	.word	0x2000b19c
 8003c94:	2000b1b0 	.word	0x2000b1b0
 8003c98:	2000b1a4 	.word	0x2000b1a4
 8003c9c:	2000b1a8 	.word	0x2000b1a8
 8003ca0:	2000119c 	.word	0x2000119c
 8003ca4:	2000b1a0 	.word	0x2000b1a0

08003ca8 <vPortFree>:
	if( pv != NULL )
 8003ca8:	b1d0      	cbz	r0, 8003ce0 <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <vPortFree+0xb0>)
 8003cac:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	4213      	tst	r3, r2
 8003cb4:	d00b      	beq.n	8003cce <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cb6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003cba:	b191      	cbz	r1, 8003ce2 <vPortFree+0x3a>
 8003cbc:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	e7fe      	b.n	8003ccc <vPortFree+0x24>
 8003cce:	f04f 0340 	mov.w	r3, #64	; 0x40
 8003cd2:	f383 8811 	msr	BASEPRI, r3
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003cde:	e7fe      	b.n	8003cde <vPortFree+0x36>
 8003ce0:	4770      	bx	lr
{
 8003ce2:	b510      	push	{r4, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ce4:	ea23 0302 	bic.w	r3, r3, r2
{
 8003ce8:	b082      	sub	sp, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cea:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cee:	4c1b      	ldr	r4, [pc, #108]	; (8003d5c <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cf0:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8003cf2:	f7ff f8e9 	bl	8002ec8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cf6:	9801      	ldr	r0, [sp, #4]
 8003cf8:	6822      	ldr	r2, [r4, #0]
 8003cfa:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003cfe:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d00:	440a      	add	r2, r1
		puc -= xHeapStructSize;
 8003d02:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003d04:	6022      	str	r2, [r4, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d06:	461a      	mov	r2, r3
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4298      	cmp	r0, r3
 8003d0c:	d8fb      	bhi.n	8003d06 <vPortFree+0x5e>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d0e:	6854      	ldr	r4, [r2, #4]
 8003d10:	eb02 0e04 	add.w	lr, r2, r4
 8003d14:	4570      	cmp	r0, lr
 8003d16:	d01a      	beq.n	8003d4e <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003d18:	eb00 0c01 	add.w	ip, r0, r1
 8003d1c:	4563      	cmp	r3, ip
 8003d1e:	d00c      	beq.n	8003d3a <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d20:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8003d22:	4282      	cmp	r2, r0
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d24:	bf18      	it	ne
 8003d26:	6010      	strne	r0, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8003d28:	4a0e      	ldr	r2, [pc, #56]	; (8003d64 <vPortFree+0xbc>)
 8003d2a:	6813      	ldr	r3, [r2, #0]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	b002      	add	sp, #8
 8003d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003d36:	f7ff b8cf 	b.w	8002ed8 <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003d3a:	4c0b      	ldr	r4, [pc, #44]	; (8003d68 <vPortFree+0xc0>)
 8003d3c:	6824      	ldr	r4, [r4, #0]
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	d0ee      	beq.n	8003d20 <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d42:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003d46:	4421      	add	r1, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003d48:	e9c0 3100 	strd	r3, r1, [r0]
 8003d4c:	e7e9      	b.n	8003d22 <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003d4e:	4421      	add	r1, r4
 8003d50:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8003d52:	4610      	mov	r0, r2
 8003d54:	e7e0      	b.n	8003d18 <vPortFree+0x70>
 8003d56:	bf00      	nop
 8003d58:	2000b19c 	.word	0x2000b19c
 8003d5c:	2000b1a0 	.word	0x2000b1a0
 8003d60:	2000b1b0 	.word	0x2000b1b0
 8003d64:	2000b1ac 	.word	0x2000b1ac
 8003d68:	20001198 	.word	0x20001198

08003d6c <cal_crc16>:
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
    uint8_t crc_hi = 0xFF;
    uint8_t crc_lo = 0xFF;
    unsigned int i;

    while(length--) {
 8003d6c:	b199      	cbz	r1, 8003d96 <cal_crc16+0x2a>
uint16_t cal_crc16(uint8_t *buffer, uint16_t length){
 8003d6e:	b430      	push	{r4, r5}
    uint8_t crc_lo = 0xFF;
 8003d70:	22ff      	movs	r2, #255	; 0xff
 8003d72:	4d0a      	ldr	r5, [pc, #40]	; (8003d9c <cal_crc16+0x30>)
 8003d74:	4c0a      	ldr	r4, [pc, #40]	; (8003da0 <cal_crc16+0x34>)
 8003d76:	eb00 0c01 	add.w	ip, r0, r1
    uint8_t crc_hi = 0xFF;
 8003d7a:	4611      	mov	r1, r2
        i = crc_lo ^ *buffer++;
 8003d7c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003d80:	4053      	eors	r3, r2
    while(length--) {
 8003d82:	4560      	cmp	r0, ip
        crc_lo = crc_hi ^ table_crc_hi[i];
 8003d84:	5cea      	ldrb	r2, [r5, r3]
 8003d86:	ea82 0201 	eor.w	r2, r2, r1
        crc_hi = table_crc_lo[i];
 8003d8a:	5ce1      	ldrb	r1, [r4, r3]
    while(length--) {
 8003d8c:	d1f6      	bne.n	8003d7c <cal_crc16+0x10>
    }

    return (crc_hi << 8 | crc_lo);
 8003d8e:	ea42 2001 	orr.w	r0, r2, r1, lsl #8
}
 8003d92:	bc30      	pop	{r4, r5}
 8003d94:	4770      	bx	lr
    while(length--) {
 8003d96:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8003d9a:	4770      	bx	lr
 8003d9c:	0800c50c 	.word	0x0800c50c
 8003da0:	0800c60c 	.word	0x0800c60c

08003da4 <_ZL15set_response_okm12lora_event_t>:
		loraif->Receive(0);
		xSemaphoreGive(tranfer_smp);
	}
}

static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8003da4:	b510      	push	{r4, lr}
 8003da6:	460a      	mov	r2, r1
 8003da8:	b086      	sub	sp, #24
 8003daa:	4603      	mov	r3, r0
	uint16_t crc = 0;
	char *temp;
	char *response_to_device;
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003dac:	4919      	ldr	r1, [pc, #100]	; (8003e14 <_ZL15set_response_okm12lora_event_t+0x70>)
static void set_response_ok(uint32_t addr, lora_event_t cmd){
 8003dae:	9302      	str	r3, [sp, #8]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003db0:	4610      	mov	r0, r2
 8003db2:	f000 fdd7 	bl	8004964 <cmd_to_str>

	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	4917      	ldr	r1, [pc, #92]	; (8003e18 <_ZL15set_response_okm12lora_event_t+0x74>)
 8003dba:	e9cd 0302 	strd	r0, r3, [sp, #8]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003dbe:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"state\":OK,", cmd_str, (unsigned int)addr);
 8003dc0:	a804      	add	r0, sp, #16
 8003dc2:	f005 fa95 	bl	80092f0 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8003dc6:	9c04      	ldr	r4, [sp, #16]
 8003dc8:	4620      	mov	r0, r4
 8003dca:	f7fc fa1b 	bl	8000204 <strlen>
 8003dce:	b281      	uxth	r1, r0
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7ff ffcb 	bl	8003d6c <cal_crc16>
 8003dd6:	4604      	mov	r4, r0
	free(temp);
 8003dd8:	9804      	ldr	r0, [sp, #16]
 8003dda:	f005 fad9 	bl	8009390 <free>

	asprintf(&response_to_device, "%s: {\"addr\":0x%08x,\"state\":OK,\"crc\":0x%04x}", cmd_str, (unsigned int)addr, crc);
 8003dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003de2:	490e      	ldr	r1, [pc, #56]	; (8003e1c <_ZL15set_response_okm12lora_event_t+0x78>)
 8003de4:	9400      	str	r4, [sp, #0]
 8003de6:	a805      	add	r0, sp, #20
 8003de8:	f005 fa82 	bl	80092f0 <asiprintf>

	if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 8003dec:	4a0c      	ldr	r2, [pc, #48]	; (8003e20 <_ZL15set_response_okm12lora_event_t+0x7c>)
 8003dee:	2300      	movs	r3, #0
 8003df0:	6810      	ldr	r0, [r2, #0]
 8003df2:	a905      	add	r1, sp, #20
 8003df4:	2202      	movs	r2, #2
 8003df6:	f7fd fd5f 	bl	80018b8 <xQueueGenericSend>
 8003dfa:	b108      	cbz	r0, 8003e00 <_ZL15set_response_okm12lora_event_t+0x5c>
		loraif_debug((char *)"Can't send to response queue", __LINE__, __FUNCTION__);
	}
}
 8003dfc:	b006      	add	sp, #24
 8003dfe:	bd10      	pop	{r4, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8003e00:	4b08      	ldr	r3, [pc, #32]	; (8003e24 <_ZL15set_response_okm12lora_event_t+0x80>)
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <_ZL15set_response_okm12lora_event_t+0x84>)
 8003e06:	4909      	ldr	r1, [pc, #36]	; (8003e2c <_ZL15set_response_okm12lora_event_t+0x88>)
 8003e08:	4809      	ldr	r0, [pc, #36]	; (8003e30 <_ZL15set_response_okm12lora_event_t+0x8c>)
 8003e0a:	23a4      	movs	r3, #164	; 0xa4
 8003e0c:	f004 ff04 	bl	8008c18 <LOG_DEBUG>
}
 8003e10:	b006      	add	sp, #24
 8003e12:	bd10      	pop	{r4, pc}
 8003e14:	2000000c 	.word	0x2000000c
 8003e18:	0800c70c 	.word	0x0800c70c
 8003e1c:	0800c72c 	.word	0x0800c72c
 8003e20:	2000b1e4 	.word	0x2000b1e4
 8003e24:	0800c79c 	.word	0x0800c79c
 8003e28:	0800c758 	.word	0x0800c758
 8003e2c:	0800c778 	.word	0x0800c778
 8003e30:	0800c794 	.word	0x0800c794
 8003e34:	00000000 	.word	0x00000000

08003e38 <loraif_init>:
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e38:	b570      	push	{r4, r5, r6, lr}
 8003e3a:	461d      	mov	r5, r3
	loraif = lora;
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <loraif_init+0x70>)
	tim_config_t conf = {
 8003e3e:	ed9f 7b18 	vldr	d7, [pc, #96]	; 8003ea0 <loraif_init+0x68>
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e42:	b08c      	sub	sp, #48	; 0x30
	loraif = lora;
 8003e44:	6018      	str	r0, [r3, #0]
	timer = tim;
 8003e46:	4b19      	ldr	r3, [pc, #100]	; (8003eac <loraif_init+0x74>)
	tim_config_t conf = {
 8003e48:	2400      	movs	r4, #0
void loraif_init(sx127x *lora, tim_t tim, uint32_t timeout, uint8_t max_not_response){
 8003e4a:	4616      	mov	r6, r2
	timer->init(&conf);
 8003e4c:	4668      	mov	r0, sp
 8003e4e:	aa02      	add	r2, sp, #8
	tim_config_t conf = {
 8003e50:	ed8d 7b02 	vstr	d7, [sp, #8]
	timer = tim;
 8003e54:	6019      	str	r1, [r3, #0]
	tim_config_t conf = {
 8003e56:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003e5a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003e5e:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003e62:	940a      	str	r4, [sp, #40]	; 0x28
	timer->init(&conf);
 8003e64:	f003 fdcc 	bl	8007a00 <_ZN3tim4initEP12tim_config_t>
	resp_timeout = timeout;
 8003e68:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <loraif_init+0x78>)
	max_not_resp = max_not_response;
 8003e6a:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <loraif_init+0x7c>)
	resp_timeout = timeout;
 8003e6c:	6016      	str	r6, [r2, #0]
	response_queue = xQueueCreate(5, sizeof(uint32_t));
 8003e6e:	2104      	movs	r1, #4
 8003e70:	4622      	mov	r2, r4
 8003e72:	2005      	movs	r0, #5
	max_not_resp = max_not_response;
 8003e74:	701d      	strb	r5, [r3, #0]
	response_queue = xQueueCreate(5, sizeof(uint32_t));
 8003e76:	f7fd fcdd 	bl	8001834 <xQueueGenericCreate>
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <loraif_init+0x80>)
	tranfer_smp = xSemaphoreCreateBinary();
 8003e7c:	4621      	mov	r1, r4
	response_queue = xQueueCreate(5, sizeof(uint32_t));
 8003e7e:	6018      	str	r0, [r3, #0]
	tranfer_smp = xSemaphoreCreateBinary();
 8003e80:	2203      	movs	r2, #3
 8003e82:	2001      	movs	r0, #1
 8003e84:	f7fd fcd6 	bl	8001834 <xQueueGenericCreate>
 8003e88:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <loraif_init+0x84>)
	xSemaphoreGive(tranfer_smp);
 8003e8a:	4623      	mov	r3, r4
	tranfer_smp = xSemaphoreCreateBinary();
 8003e8c:	6010      	str	r0, [r2, #0]
	xSemaphoreGive(tranfer_smp);
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4622      	mov	r2, r4
 8003e92:	f7fd fd11 	bl	80018b8 <xQueueGenericSend>
}
 8003e96:	b00c      	add	sp, #48	; 0x30
 8003e98:	bd70      	pop	{r4, r5, r6, pc}
 8003e9a:	bf00      	nop
 8003e9c:	f3af 8000 	nop.w
 8003ea0:	0000a8c0 	.word	0x0000a8c0
 8003ea4:	0000ffff 	.word	0x0000ffff
 8003ea8:	2000b1d8 	.word	0x2000b1d8
 8003eac:	2000b1e8 	.word	0x2000b1e8
 8003eb0:	2000b1e0 	.word	0x2000b1e0
 8003eb4:	2000b1dc 	.word	0x2000b1dc
 8003eb8:	2000b1e4 	.word	0x2000b1e4
 8003ebc:	2000b1ec 	.word	0x2000b1ec

08003ec0 <loraif_register_event_handler>:
	fpeventhandler = peventhandler;
 8003ec0:	4b01      	ldr	r3, [pc, #4]	; (8003ec8 <loraif_register_event_handler+0x8>)
 8003ec2:	6018      	str	r0, [r3, #0]
}
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	2000b1d0 	.word	0x2000b1d0

08003ecc <loraif_check_crc>:
bool loraif_check_crc(char *data){
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	b086      	sub	sp, #24
	pkt_json_t json;
 8003ed0:	2300      	movs	r3, #0
	pkt_t pkt;
 8003ed2:	2500      	movs	r5, #0
 8003ed4:	2400      	movs	r4, #0
	crc_start = strstr(src_cpy, "\"crc\"");
 8003ed6:	4919      	ldr	r1, [pc, #100]	; (8003f3c <loraif_check_crc+0x70>)
	pkt_json_t json;
 8003ed8:	9303      	str	r3, [sp, #12]
	pkt_t pkt;
 8003eda:	e9cd 4500 	strd	r4, r5, [sp]
	pkt_json_t json;
 8003ede:	f88d 3010 	strb.w	r3, [sp, #16]
bool loraif_check_crc(char *data){
 8003ee2:	4605      	mov	r5, r0
	pkt_json_t json;
 8003ee4:	9305      	str	r3, [sp, #20]
	crc_start = strstr(src_cpy, "\"crc\"");
 8003ee6:	f006 f9d9 	bl	800a29c <strstr>
	if(crc_start == NULL) return false;
 8003eea:	b128      	cbz	r0, 8003ef8 <loraif_check_crc+0x2c>
	err = parse_packet(src_cpy, &pkt);
 8003eec:	4604      	mov	r4, r0
 8003eee:	4669      	mov	r1, sp
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	f000 fcbb 	bl	800486c <parse_packet>
	if(err != PKT_ERR_OK) return false;
 8003ef6:	b110      	cbz	r0, 8003efe <loraif_check_crc+0x32>
	if(crc_start == NULL) return false;
 8003ef8:	2000      	movs	r0, #0
}
 8003efa:	b006      	add	sp, #24
 8003efc:	bd70      	pop	{r4, r5, r6, pc}
	err = json_get_object(pkt.data_str, &json, (char *)"crc");
 8003efe:	4a10      	ldr	r2, [pc, #64]	; (8003f40 <loraif_check_crc+0x74>)
 8003f00:	9801      	ldr	r0, [sp, #4]
 8003f02:	a903      	add	r1, sp, #12
 8003f04:	f000 fb8c 	bl	8004620 <json_get_object>
	if(err != PKT_ERR_OK) return false;
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d1f5      	bne.n	8003ef8 <loraif_check_crc+0x2c>
	icrc = strtol(json.value, NULL, 16);
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	2210      	movs	r2, #16
 8003f10:	9805      	ldr	r0, [sp, #20]
 8003f12:	f006 fa5b 	bl	800a3cc <strtol>
 8003f16:	4606      	mov	r6, r0
	json_release_object(&json);
 8003f18:	a803      	add	r0, sp, #12
 8003f1a:	f000 fc99 	bl	8004850 <json_release_object>
	release_packet(&pkt);
 8003f1e:	4668      	mov	r0, sp
 8003f20:	f000 fcfe 	bl	8004920 <release_packet>
	len = (uint32_t)crc_start - (uint32_t)src_cpy;
 8003f24:	1b61      	subs	r1, r4, r5
	crc = cal_crc16((uint8_t *)src_cpy, len);
 8003f26:	b289      	uxth	r1, r1
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f7ff ff1f 	bl	8003d6c <cal_crc16>
	if(crc != icrc) return false;
 8003f2e:	b2b6      	uxth	r6, r6
 8003f30:	1a30      	subs	r0, r6, r0
 8003f32:	fab0 f080 	clz	r0, r0
 8003f36:	0940      	lsrs	r0, r0, #5
}
 8003f38:	b006      	add	sp, #24
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	0800c7ac 	.word	0x0800c7ac
 8003f40:	0800c7b4 	.word	0x0800c7b4

08003f44 <loraif_response>:
		release_packet(&pkt);
	}
}


void loraif_response(void){
 8003f44:	b570      	push	{r4, r5, r6, lr}
	char *response;

	if(xQueueReceive(response_queue, &response, 10)){
 8003f46:	4b19      	ldr	r3, [pc, #100]	; (8003fac <loraif_response+0x68>)
void loraif_response(void){
 8003f48:	b082      	sub	sp, #8
	if(xQueueReceive(response_queue, &response, 10)){
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	220a      	movs	r2, #10
 8003f4e:	a901      	add	r1, sp, #4
 8003f50:	f7fd ff26 	bl	8001da0 <xQueueReceive>
 8003f54:	b908      	cbnz	r0, 8003f5a <loraif_response+0x16>
		loraif_transmit(response);
		free(response);
	}
}
 8003f56:	b002      	add	sp, #8
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8003f5a:	4c15      	ldr	r4, [pc, #84]	; (8003fb0 <loraif_response+0x6c>)
		loraif_transmit(response);
 8003f5c:	9d01      	ldr	r5, [sp, #4]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8003f5e:	6820      	ldr	r0, [r4, #0]
 8003f60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f64:	f7fe f89e 	bl	80020a4 <xQueueSemaphoreTake>
 8003f68:	b920      	cbnz	r0, 8003f74 <loraif_response+0x30>
		free(response);
 8003f6a:	9801      	ldr	r0, [sp, #4]
 8003f6c:	f005 fa10 	bl	8009390 <free>
}
 8003f70:	b002      	add	sp, #8
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
		loraif->beginPacket();
 8003f74:	4e0f      	ldr	r6, [pc, #60]	; (8003fb4 <loraif_response+0x70>)
 8003f76:	2100      	movs	r1, #0
 8003f78:	6830      	ldr	r0, [r6, #0]
 8003f7a:	f000 ff9f 	bl	8004ebc <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f7fc f940 	bl	8000204 <strlen>
 8003f84:	4629      	mov	r1, r5
 8003f86:	4602      	mov	r2, r0
 8003f88:	6830      	ldr	r0, [r6, #0]
 8003f8a:	f001 f9f9 	bl	8005380 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 8003f8e:	6830      	ldr	r0, [r6, #0]
 8003f90:	2100      	movs	r1, #0
 8003f92:	f001 f8d3 	bl	800513c <_ZN6sx127x9endPacketEb>
		loraif->Receive(0);
 8003f96:	6830      	ldr	r0, [r6, #0]
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f001 fac5 	bl	8005528 <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	6820      	ldr	r0, [r4, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fd fc87 	bl	80018b8 <xQueueGenericSend>
}
 8003faa:	e7de      	b.n	8003f6a <loraif_response+0x26>
 8003fac:	2000b1e4 	.word	0x2000b1e4
 8003fb0:	2000b1ec 	.word	0x2000b1ec
 8003fb4:	2000b1d8 	.word	0x2000b1d8

08003fb8 <loraif_request>:
		vTaskDelay(1);
	}
}


void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data){
 8003fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbc:	460d      	mov	r5, r1
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	4604      	mov	r4, r0
	uint16_t crc = 0;
	char *req_data, *temp;
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003fc2:	492d      	ldr	r1, [pc, #180]	; (8004078 <loraif_request+0xc0>)
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8003fc4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004098 <loraif_request+0xe0>
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003fc8:	4628      	mov	r0, r5
void loraif_request(uint32_t dev_address, lora_event_t cmd, char *data){
 8003fca:	4616      	mov	r6, r2
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003fcc:	f000 fcca 	bl	8004964 <cmd_to_str>
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,", cmd_str, (unsigned int)dev_address, data);
 8003fd0:	4623      	mov	r3, r4
	char *cmd_str = cmd_to_str(cmd, command_string);
 8003fd2:	4602      	mov	r2, r0
	asprintf(&temp, "%s: {\"addr\":0x%08x,\"data\":%s,", cmd_str, (unsigned int)dev_address, data);
 8003fd4:	4929      	ldr	r1, [pc, #164]	; (800407c <loraif_request+0xc4>)
 8003fd6:	9003      	str	r0, [sp, #12]
 8003fd8:	9600      	str	r6, [sp, #0]
 8003fda:	a805      	add	r0, sp, #20
 8003fdc:	f005 f988 	bl	80092f0 <asiprintf>
	crc = cal_crc16((uint8_t *)temp, strlen(temp));
 8003fe0:	9f05      	ldr	r7, [sp, #20]
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	f7fc f90e 	bl	8000204 <strlen>
 8003fe8:	b281      	uxth	r1, r0
 8003fea:	4638      	mov	r0, r7
 8003fec:	f7ff febe 	bl	8003d6c <cal_crc16>
 8003ff0:	4607      	mov	r7, r0
	free(temp);
 8003ff2:	9805      	ldr	r0, [sp, #20]
 8003ff4:	f005 f9cc 	bl	8009390 <free>

	asprintf(&req_data, "%s: {\"addr\":0x%08x,\"data\":%s,\"crc\":0x%04x}", cmd_str, (unsigned int)dev_address, data, crc);
 8003ff8:	4623      	mov	r3, r4
 8003ffa:	9a03      	ldr	r2, [sp, #12]
 8003ffc:	4920      	ldr	r1, [pc, #128]	; (8004080 <loraif_request+0xc8>)
 8003ffe:	9701      	str	r7, [sp, #4]
 8004000:	9600      	str	r6, [sp, #0]
 8004002:	a804      	add	r0, sp, #16
 8004004:	f005 f974 	bl	80092f0 <asiprintf>

	req_address = dev_address;
 8004008:	4b1e      	ldr	r3, [pc, #120]	; (8004084 <loraif_request+0xcc>)
	req_cmd = cmd;
 800400a:	4a1f      	ldr	r2, [pc, #124]	; (8004088 <loraif_request+0xd0>)
	req_address = dev_address;
 800400c:	601c      	str	r4, [r3, #0]
	req_had_resp = false;
 800400e:	4b1f      	ldr	r3, [pc, #124]	; (800408c <loraif_request+0xd4>)
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004010:	f8d8 0000 	ldr.w	r0, [r8]
	req_cmd = cmd;
 8004014:	7015      	strb	r5, [r2, #0]
	req_had_resp = false;
 8004016:	2400      	movs	r4, #0
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004018:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	loraif_transmit(req_data);
 800401c:	9d04      	ldr	r5, [sp, #16]
	req_had_resp = false;
 800401e:	701c      	strb	r4, [r3, #0]
	if(xSemaphoreTake(tranfer_smp, portMAX_DELAY)){
 8004020:	f7fe f840 	bl	80020a4 <xQueueSemaphoreTake>
 8004024:	b950      	cbnz	r0, 800403c <loraif_request+0x84>
	timer->start();
 8004026:	4b1a      	ldr	r3, [pc, #104]	; (8004090 <loraif_request+0xd8>)
 8004028:	a806      	add	r0, sp, #24
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	f003 fe0a 	bl	8007c44 <_ZN3tim5startEv>

	free(req_data);
 8004030:	9804      	ldr	r0, [sp, #16]
 8004032:	f005 f9ad 	bl	8009390 <free>
}
 8004036:	b008      	add	sp, #32
 8004038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loraif->beginPacket();
 800403c:	4e15      	ldr	r6, [pc, #84]	; (8004094 <loraif_request+0xdc>)
 800403e:	4621      	mov	r1, r4
 8004040:	6830      	ldr	r0, [r6, #0]
 8004042:	f000 ff3b 	bl	8004ebc <_ZN6sx127x11beginPacketEb>
		loraif->transmit((uint8_t *)str, (size_t)strlen(str));
 8004046:	4628      	mov	r0, r5
 8004048:	f7fc f8dc 	bl	8000204 <strlen>
 800404c:	4629      	mov	r1, r5
 800404e:	4602      	mov	r2, r0
 8004050:	6830      	ldr	r0, [r6, #0]
 8004052:	f001 f995 	bl	8005380 <_ZN6sx127x8transmitEPKhj>
		loraif->endPacket();
 8004056:	4621      	mov	r1, r4
 8004058:	6830      	ldr	r0, [r6, #0]
 800405a:	f001 f86f 	bl	800513c <_ZN6sx127x9endPacketEb>
		loraif->Receive(0);
 800405e:	6830      	ldr	r0, [r6, #0]
 8004060:	4621      	mov	r1, r4
 8004062:	f001 fa61 	bl	8005528 <_ZN6sx127x7ReceiveEh>
		xSemaphoreGive(tranfer_smp);
 8004066:	f8d8 0000 	ldr.w	r0, [r8]
 800406a:	4623      	mov	r3, r4
 800406c:	4622      	mov	r2, r4
 800406e:	4621      	mov	r1, r4
 8004070:	f7fd fc22 	bl	80018b8 <xQueueGenericSend>
}
 8004074:	e7d7      	b.n	8004026 <loraif_request+0x6e>
 8004076:	bf00      	nop
 8004078:	2000000c 	.word	0x2000000c
 800407c:	0800c7b8 	.word	0x0800c7b8
 8004080:	0800c7d8 	.word	0x0800c7d8
 8004084:	2000b1c8 	.word	0x2000b1c8
 8004088:	2000b1d4 	.word	0x2000b1d4
 800408c:	2000b1cc 	.word	0x2000b1cc
 8004090:	2000b1e8 	.word	0x2000b1e8
 8004094:	2000b1d8 	.word	0x2000b1d8
 8004098:	2000b1ec 	.word	0x2000b1ec

0800409c <loraif_new_device>:
        loraif_check_timeout();
    }
}


void loraif_new_device(char *jdata, void *dev_data){
 800409c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409e:	b087      	sub	sp, #28
	pkt_err_t err;
	pkt_json_t json;
 80040a0:	2600      	movs	r6, #0
void loraif_new_device(char *jdata, void *dev_data){
 80040a2:	4605      	mov	r5, r0
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 80040a4:	2010      	movs	r0, #16
void loraif_new_device(char *jdata, void *dev_data){
 80040a6:	460f      	mov	r7, r1
	pkt_json_t json;
 80040a8:	9603      	str	r6, [sp, #12]
 80040aa:	f88d 6010 	strb.w	r6, [sp, #16]
 80040ae:	9605      	str	r6, [sp, #20]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 80040b0:	f005 f966 	bl	8009380 <malloc>

    newdev->err_count = 0;
    newdev->data = dev_data;

	err = json_get_object(jdata, &json, (char *)"addr");
 80040b4:	4a20      	ldr	r2, [pc, #128]	; (8004138 <loraif_new_device+0x9c>)
    newdev->err_count = 0;
 80040b6:	7206      	strb	r6, [r0, #8]
    loraif_dev_t *newdev = (loraif_dev_t *)malloc(sizeof(loraif_dev_t));
 80040b8:	4604      	mov	r4, r0
    newdev->data = dev_data;
 80040ba:	60c7      	str	r7, [r0, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 80040bc:	a903      	add	r1, sp, #12
 80040be:	4628      	mov	r0, r5
 80040c0:	f000 faae 	bl	8004620 <json_get_object>
	if(err == PKT_ERR_OK)
 80040c4:	b350      	cbz	r0, 800411c <loraif_new_device+0x80>
		newdev->address = strtol(json.value, NULL, 16);
	json_release_object(&json);
 80040c6:	a803      	add	r0, sp, #12
 80040c8:	f000 fbc2 	bl	8004850 <json_release_object>

	err = json_get_object(jdata, &json, (char *)"name");
 80040cc:	4a1b      	ldr	r2, [pc, #108]	; (800413c <loraif_new_device+0xa0>)
 80040ce:	a903      	add	r1, sp, #12
 80040d0:	4628      	mov	r0, r5
 80040d2:	f000 faa5 	bl	8004620 <json_get_object>
	if(err == PKT_ERR_OK)
 80040d6:	b340      	cbz	r0, 800412a <loraif_new_device+0x8e>
		asprintf(&newdev->name, "%s", json.value);
	json_release_object(&json);
 80040d8:	a803      	add	r0, sp, #12
 80040da:	f000 fbb9 	bl	8004850 <json_release_object>
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80040de:	200c      	movs	r0, #12
 80040e0:	f005 f894 	bl	800920c <_Znwj>
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 80040e4:	4d16      	ldr	r5, [pc, #88]	; (8004140 <loraif_new_device+0xa4>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80040e6:	6084      	str	r4, [r0, #8]
 80040e8:	4629      	mov	r1, r5
 80040ea:	f005 f8a0 	bl	800922e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80040ee:	68a9      	ldr	r1, [r5, #8]
 80040f0:	3101      	adds	r1, #1

	loraif_device_list.push_back(newdev);

	char *tmp;
	asprintf(&tmp, "Add device 0x%08x(%s)", (unsigned int)newdev->address, newdev->name);
 80040f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80040f6:	60a9      	str	r1, [r5, #8]
 80040f8:	a802      	add	r0, sp, #8
 80040fa:	4912      	ldr	r1, [pc, #72]	; (8004144 <loraif_new_device+0xa8>)
 80040fc:	f005 f8f8 	bl	80092f0 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <loraif_new_device+0xac>)
 8004102:	9a02      	ldr	r2, [sp, #8]
 8004104:	4911      	ldr	r1, [pc, #68]	; (800414c <loraif_new_device+0xb0>)
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4811      	ldr	r0, [pc, #68]	; (8004150 <loraif_new_device+0xb4>)
 800410a:	f240 1381 	movw	r3, #385	; 0x181
 800410e:	f004 fd83 	bl	8008c18 <LOG_DEBUG>
	loraif_debug(tmp, __LINE__, __FUNCTION__);
	free(tmp);
 8004112:	9802      	ldr	r0, [sp, #8]
 8004114:	f005 f93c 	bl	8009390 <free>
}
 8004118:	b007      	add	sp, #28
 800411a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		newdev->address = strtol(json.value, NULL, 16);
 800411c:	4601      	mov	r1, r0
 800411e:	2210      	movs	r2, #16
 8004120:	9805      	ldr	r0, [sp, #20]
 8004122:	f006 f953 	bl	800a3cc <strtol>
 8004126:	6020      	str	r0, [r4, #0]
 8004128:	e7cd      	b.n	80040c6 <loraif_new_device+0x2a>
		asprintf(&newdev->name, "%s", json.value);
 800412a:	9a05      	ldr	r2, [sp, #20]
 800412c:	4909      	ldr	r1, [pc, #36]	; (8004154 <loraif_new_device+0xb8>)
 800412e:	1d20      	adds	r0, r4, #4
 8004130:	f005 f8de 	bl	80092f0 <asiprintf>
 8004134:	e7d0      	b.n	80040d8 <loraif_new_device+0x3c>
 8004136:	bf00      	nop
 8004138:	0800c804 	.word	0x0800c804
 800413c:	0800c80c 	.word	0x0800c80c
 8004140:	2000b1bc 	.word	0x2000b1bc
 8004144:	0800c814 	.word	0x0800c814
 8004148:	0800c82c 	.word	0x0800c82c
 800414c:	0800c778 	.word	0x0800c778
 8004150:	0800c794 	.word	0x0800c794
 8004154:	0800cf44 	.word	0x0800cf44

08004158 <loraif_remove_device>:

void loraif_remove_device(char *jdata){
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	b086      	sub	sp, #24
	pkt_err_t err;
	pkt_json_t json;
 800415c:	2300      	movs	r3, #0
	uint32_t del_addr = 0x80000000U;

	err = json_get_object(jdata, &json, (char *)"addr");
 800415e:	4a23      	ldr	r2, [pc, #140]	; (80041ec <loraif_remove_device+0x94>)
	pkt_json_t json;
 8004160:	9303      	str	r3, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004162:	a903      	add	r1, sp, #12
	pkt_json_t json;
 8004164:	f88d 3010 	strb.w	r3, [sp, #16]
 8004168:	9305      	str	r3, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 800416a:	f000 fa59 	bl	8004620 <json_get_object>
	if(err == PKT_ERR_OK)
 800416e:	b360      	cbz	r0, 80041ca <loraif_remove_device+0x72>
	uint32_t del_addr = 0x80000000U;
 8004170:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 8004174:	4d1e      	ldr	r5, [pc, #120]	; (80041f0 <loraif_remove_device+0x98>)
		del_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004176:	a803      	add	r0, sp, #12
 8004178:	f000 fb6a 	bl	8004850 <json_release_object>
 800417c:	682c      	ldr	r4, [r5, #0]

    if (loraif_device_list.empty()) {
 800417e:	42ac      	cmp	r4, r5
 8004180:	d02a      	beq.n	80041d8 <loraif_remove_device+0x80>
        return;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == del_addr) {
 8004182:	68a3      	ldr	r3, [r4, #8]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	42b2      	cmp	r2, r6
 8004188:	d00d      	beq.n	80041a6 <loraif_remove_device+0x4e>
	_M_node = _M_node->_M_next;
 800418a:	6824      	ldr	r4, [r4, #0]
    while (device != loraif_device_list.end()) {
 800418c:	42ac      	cmp	r4, r5
 800418e:	d1f8      	bne.n	8004182 <loraif_remove_device+0x2a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <loraif_remove_device+0x9c>)
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4a18      	ldr	r2, [pc, #96]	; (80041f8 <loraif_remove_device+0xa0>)
 8004196:	4919      	ldr	r1, [pc, #100]	; (80041fc <loraif_remove_device+0xa4>)
 8004198:	4819      	ldr	r0, [pc, #100]	; (8004200 <loraif_remove_device+0xa8>)
 800419a:	f240 139d 	movw	r3, #413	; 0x19d
 800419e:	f004 fd3b 	bl	8008c18 <LOG_DEBUG>

    free((*device)->name);
    free(*device);

    loraif_device_list.erase(device);
}
 80041a2:	b006      	add	sp, #24
 80041a4:	bd70      	pop	{r4, r5, r6, pc}
    free((*device)->name);
 80041a6:	6858      	ldr	r0, [r3, #4]
 80041a8:	f005 f8f2 	bl	8009390 <free>
    free(*device);
 80041ac:	68a0      	ldr	r0, [r4, #8]
 80041ae:	f005 f8ef 	bl	8009390 <free>
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80041b2:	68ab      	ldr	r3, [r5, #8]
      // Erases element at position given.
      void
      _M_erase(iterator __position) _GLIBCXX_NOEXCEPT
      {
	this->_M_dec_size(1);
	__position._M_node->_M_unhook();
 80041b4:	4620      	mov	r0, r4
      void _M_dec_size(size_t __n) { _M_impl._M_node._M_size -= __n; }
 80041b6:	3b01      	subs	r3, #1
 80041b8:	60ab      	str	r3, [r5, #8]
	__position._M_node->_M_unhook();
 80041ba:	f005 f83f 	bl	800923c <_ZNSt8__detail15_List_node_base9_M_unhookEv>
	::operator delete(__p
 80041be:	210c      	movs	r1, #12
 80041c0:	4620      	mov	r0, r4
 80041c2:	f005 f821 	bl	8009208 <_ZdlPvj>
}
 80041c6:	b006      	add	sp, #24
 80041c8:	bd70      	pop	{r4, r5, r6, pc}
		del_addr = strtol(json.value, NULL, 16);
 80041ca:	4601      	mov	r1, r0
 80041cc:	2210      	movs	r2, #16
 80041ce:	9805      	ldr	r0, [sp, #20]
 80041d0:	f006 f8fc 	bl	800a3cc <strtol>
 80041d4:	4606      	mov	r6, r0
 80041d6:	e7cd      	b.n	8004174 <loraif_remove_device+0x1c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <loraif_remove_device+0x9c>)
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	4a09      	ldr	r2, [pc, #36]	; (8004204 <loraif_remove_device+0xac>)
 80041de:	4907      	ldr	r1, [pc, #28]	; (80041fc <loraif_remove_device+0xa4>)
 80041e0:	4807      	ldr	r0, [pc, #28]	; (8004200 <loraif_remove_device+0xa8>)
 80041e2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80041e6:	f004 fd17 	bl	8008c18 <LOG_DEBUG>
        return;
 80041ea:	e7ec      	b.n	80041c6 <loraif_remove_device+0x6e>
 80041ec:	0800c804 	.word	0x0800c804
 80041f0:	2000b1bc 	.word	0x2000b1bc
 80041f4:	0800c854 	.word	0x0800c854
 80041f8:	0800c86c 	.word	0x0800c86c
 80041fc:	0800c778 	.word	0x0800c778
 8004200:	0800c794 	.word	0x0800c794
 8004204:	0800c840 	.word	0x0800c840

08004208 <loraif_select_device>:

loraif_dev_t *loraif_select_device(char *jdata){
 8004208:	b510      	push	{r4, lr}
 800420a:	b086      	sub	sp, #24
	pkt_err_t err;
	pkt_json_t json;
 800420c:	2300      	movs	r3, #0
	uint32_t sel_addr = 0x80000000U;

	err = json_get_object(jdata, &json, (char *)"addr");
 800420e:	4a1b      	ldr	r2, [pc, #108]	; (800427c <loraif_select_device+0x74>)
	pkt_json_t json;
 8004210:	9303      	str	r3, [sp, #12]
	err = json_get_object(jdata, &json, (char *)"addr");
 8004212:	a903      	add	r1, sp, #12
	pkt_json_t json;
 8004214:	f88d 3010 	strb.w	r3, [sp, #16]
 8004218:	9305      	str	r3, [sp, #20]
	err = json_get_object(jdata, &json, (char *)"addr");
 800421a:	f000 fa01 	bl	8004620 <json_get_object>
	if(err == PKT_ERR_OK)
 800421e:	b1d8      	cbz	r0, 8004258 <loraif_select_device+0x50>
	uint32_t sel_addr = 0x80000000U;
 8004220:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
		sel_addr = strtol(json.value, NULL, 16);
	json_release_object(&json);
 8004224:	a803      	add	r0, sp, #12
 8004226:	f000 fb13 	bl	8004850 <json_release_object>
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 800422a:	4915      	ldr	r1, [pc, #84]	; (8004280 <loraif_select_device+0x78>)
 800422c:	680b      	ldr	r3, [r1, #0]

    if (loraif_device_list.empty()) {
 800422e:	428b      	cmp	r3, r1
 8004230:	d019      	beq.n	8004266 <loraif_select_device+0x5e>
        return NULL;
    }

    auto device = loraif_device_list.begin();
    while (device != loraif_device_list.end()) {
        if ((*device)->address == sel_addr) {
 8004232:	6898      	ldr	r0, [r3, #8]
 8004234:	6802      	ldr	r2, [r0, #0]
 8004236:	42a2      	cmp	r2, r4
 8004238:	d00c      	beq.n	8004254 <loraif_select_device+0x4c>
	_M_node = _M_node->_M_next;
 800423a:	681b      	ldr	r3, [r3, #0]
    while (device != loraif_device_list.end()) {
 800423c:	428b      	cmp	r3, r1
 800423e:	d1f8      	bne.n	8004232 <loraif_select_device+0x2a>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004240:	4b10      	ldr	r3, [pc, #64]	; (8004284 <loraif_select_device+0x7c>)
 8004242:	4811      	ldr	r0, [pc, #68]	; (8004288 <loraif_select_device+0x80>)
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4a11      	ldr	r2, [pc, #68]	; (800428c <loraif_select_device+0x84>)
 8004248:	4911      	ldr	r1, [pc, #68]	; (8004290 <loraif_select_device+0x88>)
 800424a:	f240 13bf 	movw	r3, #447	; 0x1bf
 800424e:	f004 fce3 	bl	8008c18 <LOG_DEBUG>
        ++device;
    }

    if (device == loraif_device_list.end()) {
    	loraif_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
        return NULL;
 8004252:	2000      	movs	r0, #0
    }

    return (*device);
}
 8004254:	b006      	add	sp, #24
 8004256:	bd10      	pop	{r4, pc}
		sel_addr = strtol(json.value, NULL, 16);
 8004258:	4601      	mov	r1, r0
 800425a:	2210      	movs	r2, #16
 800425c:	9805      	ldr	r0, [sp, #20]
 800425e:	f006 f8b5 	bl	800a3cc <strtol>
 8004262:	4604      	mov	r4, r0
 8004264:	e7de      	b.n	8004224 <loraif_select_device+0x1c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004266:	4b07      	ldr	r3, [pc, #28]	; (8004284 <loraif_select_device+0x7c>)
 8004268:	4807      	ldr	r0, [pc, #28]	; (8004288 <loraif_select_device+0x80>)
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <loraif_select_device+0x8c>)
 800426e:	4908      	ldr	r1, [pc, #32]	; (8004290 <loraif_select_device+0x88>)
 8004270:	f44f 73d9 	mov.w	r3, #434	; 0x1b2
 8004274:	f004 fcd0 	bl	8008c18 <LOG_DEBUG>
        return NULL;
 8004278:	2000      	movs	r0, #0
 800427a:	e7eb      	b.n	8004254 <loraif_select_device+0x4c>
 800427c:	0800c804 	.word	0x0800c804
 8004280:	2000b1bc 	.word	0x2000b1bc
 8004284:	0800c898 	.word	0x0800c898
 8004288:	0800c794 	.word	0x0800c794
 800428c:	0800c86c 	.word	0x0800c86c
 8004290:	0800c778 	.word	0x0800c778
 8004294:	0800c840 	.word	0x0800c840

08004298 <loraif_process>:
void loraif_process(void *param){
 8004298:	b570      	push	{r4, r5, r6, lr}
 800429a:	b08e      	sub	sp, #56	; 0x38
	if(xQueueReceive(*queue, &rx_full, 10)){
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	220a      	movs	r2, #10
 80042a0:	a904      	add	r1, sp, #16
 80042a2:	f7fd fd7d 	bl	8001da0 <xQueueReceive>
 80042a6:	b908      	cbnz	r0, 80042ac <loraif_process+0x14>
}
 80042a8:	b00e      	add	sp, #56	; 0x38
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
		pkt_json_t json;
 80042ac:	2300      	movs	r3, #0
		pkt_t pkt;
 80042ae:	2400      	movs	r4, #0
		err = parse_packet(rx_full, &pkt);
 80042b0:	9804      	ldr	r0, [sp, #16]
		pkt_json_t json;
 80042b2:	930b      	str	r3, [sp, #44]	; 0x2c
		pkt_t pkt;
 80042b4:	2500      	movs	r5, #0
		err = parse_packet(rx_full, &pkt);
 80042b6:	a908      	add	r1, sp, #32
		pkt_t pkt;
 80042b8:	e9cd 4508 	strd	r4, r5, [sp, #32]
		pkt_json_t json;
 80042bc:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 80042c0:	930d      	str	r3, [sp, #52]	; 0x34
		char *evt_data = NULL;
 80042c2:	9305      	str	r3, [sp, #20]
		err = parse_packet(rx_full, &pkt);
 80042c4:	f000 fad2 	bl	800486c <parse_packet>
		if(err == PKT_ERR_OK){
 80042c8:	4604      	mov	r4, r0
 80042ca:	2800      	cmp	r0, #0
 80042cc:	d134      	bne.n	8004338 <loraif_process+0xa0>
			cmd = (lora_event_t)str_to_cmd(pkt.cmd_str, command_string, (int)LORA_CMD_NUM);
 80042ce:	496d      	ldr	r1, [pc, #436]	; (8004484 <loraif_process+0x1ec>)
 80042d0:	9808      	ldr	r0, [sp, #32]
 80042d2:	2208      	movs	r2, #8
 80042d4:	f000 fb30 	bl	8004938 <str_to_cmd>
 80042d8:	b2c5      	uxtb	r5, r0
			if(cmd == LORA_REQ_ADDRESS){
 80042da:	2d01      	cmp	r5, #1
 80042dc:	d03a      	beq.n	8004354 <loraif_process+0xbc>
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 80042de:	4a6a      	ldr	r2, [pc, #424]	; (8004488 <loraif_process+0x1f0>)
 80042e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80042e2:	a90b      	add	r1, sp, #44	; 0x2c
 80042e4:	f000 f99c 	bl	8004620 <json_get_object>
				uint32_t addr = strtol(json.value, NULL, 16);
 80042e8:	4621      	mov	r1, r4
 80042ea:	2210      	movs	r2, #16
				err = json_get_object(pkt.data_str, &json, (char *)"addr");
 80042ec:	4604      	mov	r4, r0
				uint32_t addr = strtol(json.value, NULL, 16);
 80042ee:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042f0:	f006 f86c 	bl	800a3cc <strtol>
				if(err == PKT_ERR_OK){
 80042f4:	2c00      	cmp	r4, #0
 80042f6:	f040 808b 	bne.w	8004410 <loraif_process+0x178>
					if(cmd == LORA_ERR){
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	d039      	beq.n	8004372 <loraif_process+0xda>
					else if(cmd == LORA_UPDATE_ADDRESS){
 80042fe:	2d02      	cmp	r5, #2
 8004300:	f000 80a7 	beq.w	8004452 <loraif_process+0x1ba>
					else if(cmd == LORA_UPDATE_STATE){
 8004304:	2d03      	cmp	r5, #3
 8004306:	f000 80b0 	beq.w	800446a <loraif_process+0x1d2>
						if(addr == req_address && cmd == req_cmd){
 800430a:	4a60      	ldr	r2, [pc, #384]	; (800448c <loraif_process+0x1f4>)
 800430c:	6816      	ldr	r6, [r2, #0]
 800430e:	4286      	cmp	r6, r0
 8004310:	f000 8084 	beq.w	800441c <loraif_process+0x184>
				json_release_object(&json);
 8004314:	a80b      	add	r0, sp, #44	; 0x2c
 8004316:	f000 fa9b 	bl	8004850 <json_release_object>
			asprintf(&evt_data, "%s", pkt.data_str);
 800431a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800431c:	495c      	ldr	r1, [pc, #368]	; (8004490 <loraif_process+0x1f8>)
 800431e:	a805      	add	r0, sp, #20
 8004320:	f004 ffe6 	bl	80092f0 <asiprintf>
			if(fpeventhandler != NULL) fpeventhandler(cmd, evt_data);
 8004324:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <loraif_process+0x1fc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	b113      	cbz	r3, 8004330 <loraif_process+0x98>
 800432a:	9905      	ldr	r1, [sp, #20]
 800432c:	4628      	mov	r0, r5
 800432e:	4798      	blx	r3
			free(evt_data);
 8004330:	9805      	ldr	r0, [sp, #20]
 8004332:	f005 f82d 	bl	8009390 <free>
 8004336:	e008      	b.n	800434a <loraif_process+0xb2>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004338:	4b57      	ldr	r3, [pc, #348]	; (8004498 <loraif_process+0x200>)
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	4a57      	ldr	r2, [pc, #348]	; (800449c <loraif_process+0x204>)
 800433e:	4958      	ldr	r1, [pc, #352]	; (80044a0 <loraif_process+0x208>)
 8004340:	4858      	ldr	r0, [pc, #352]	; (80044a4 <loraif_process+0x20c>)
 8004342:	f240 131d 	movw	r3, #285	; 0x11d
 8004346:	f004 fc67 	bl	8008c18 <LOG_DEBUG>
		release_packet(&pkt);
 800434a:	a808      	add	r0, sp, #32
 800434c:	f000 fae8 	bl	8004920 <release_packet>
}
 8004350:	b00e      	add	sp, #56	; 0x38
 8004352:	bd70      	pop	{r4, r5, r6, pc}
				err = json_get_object(pkt.data_str, &json, (char *)"random_number");
 8004354:	4a54      	ldr	r2, [pc, #336]	; (80044a8 <loraif_process+0x210>)
 8004356:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004358:	a90b      	add	r1, sp, #44	; 0x2c
 800435a:	f000 f961 	bl	8004620 <json_get_object>
				if(err == PKT_ERR_OK){
 800435e:	b188      	cbz	r0, 8004384 <loraif_process+0xec>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004360:	4b4d      	ldr	r3, [pc, #308]	; (8004498 <loraif_process+0x200>)
 8004362:	4a52      	ldr	r2, [pc, #328]	; (80044ac <loraif_process+0x214>)
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	23da      	movs	r3, #218	; 0xda
 8004368:	494d      	ldr	r1, [pc, #308]	; (80044a0 <loraif_process+0x208>)
 800436a:	484e      	ldr	r0, [pc, #312]	; (80044a4 <loraif_process+0x20c>)
 800436c:	f004 fc54 	bl	8008c18 <LOG_DEBUG>
}
 8004370:	e7d0      	b.n	8004314 <loraif_process+0x7c>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004372:	4b49      	ldr	r3, [pc, #292]	; (8004498 <loraif_process+0x200>)
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4a4e      	ldr	r2, [pc, #312]	; (80044b0 <loraif_process+0x218>)
 8004378:	4949      	ldr	r1, [pc, #292]	; (80044a0 <loraif_process+0x208>)
 800437a:	484a      	ldr	r0, [pc, #296]	; (80044a4 <loraif_process+0x20c>)
 800437c:	23e7      	movs	r3, #231	; 0xe7
 800437e:	f004 fc4b 	bl	8008c18 <LOG_DEBUG>
}
 8004382:	e7c7      	b.n	8004314 <loraif_process+0x7c>
					uint32_t rand_num = strtol(json.value, NULL, 16);
 8004384:	4601      	mov	r1, r0
 8004386:	2210      	movs	r2, #16
 8004388:	980d      	ldr	r0, [sp, #52]	; 0x34
 800438a:	4c4a      	ldr	r4, [pc, #296]	; (80044b4 <loraif_process+0x21c>)
 800438c:	f006 f81e 	bl	800a3cc <strtol>
					rng_set_seed(rand_num);
 8004390:	f002 fc96 	bl	8006cc0 <rng_set_seed>
						new_addr = rng_generate_random_number();
 8004394:	f002 fc9a 	bl	8006ccc <rng_generate_random_number>
      { return iterator(this->_M_impl._M_node._M_next); }
 8004398:	6823      	ldr	r3, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 800439a:	42a3      	cmp	r3, r4
 800439c:	d006      	beq.n	80043ac <loraif_process+0x114>
        if ((*device)->address == num) {
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	6809      	ldr	r1, [r1, #0]
 80043a2:	4288      	cmp	r0, r1
 80043a4:	d0f6      	beq.n	8004394 <loraif_process+0xfc>
	_M_node = _M_node->_M_next;
 80043a6:	681b      	ldr	r3, [r3, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80043a8:	42a3      	cmp	r3, r4
 80043aa:	d1f8      	bne.n	800439e <loraif_process+0x106>
					new_addr &= 0x7FFFFFFFU;
 80043ac:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
					asprintf(&temp, "LORA_RES_ADDRESS: {\"addr\":0x%08x,", (unsigned int)new_addr);
 80043b0:	4941      	ldr	r1, [pc, #260]	; (80044b8 <loraif_process+0x220>)
 80043b2:	9203      	str	r2, [sp, #12]
 80043b4:	a807      	add	r0, sp, #28
 80043b6:	f004 ff9b 	bl	80092f0 <asiprintf>
					crc = cal_crc16((uint8_t *)temp, strlen(temp));
 80043ba:	9c07      	ldr	r4, [sp, #28]
 80043bc:	4620      	mov	r0, r4
 80043be:	f7fb ff21 	bl	8000204 <strlen>
 80043c2:	b281      	uxth	r1, r0
 80043c4:	4620      	mov	r0, r4
 80043c6:	f7ff fcd1 	bl	8003d6c <cal_crc16>
 80043ca:	9002      	str	r0, [sp, #8]
					free(temp);
 80043cc:	9807      	ldr	r0, [sp, #28]
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80043ce:	4c32      	ldr	r4, [pc, #200]	; (8004498 <loraif_process+0x200>)
					free(temp);
 80043d0:	f004 ffde 	bl	8009390 <free>
					asprintf(&response_to_device, "LORA_RES_ADDRESS: {\"addr\":0x%08x,\"crc\":0x%04x}", (unsigned int)new_addr, crc);
 80043d4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80043d8:	4938      	ldr	r1, [pc, #224]	; (80044bc <loraif_process+0x224>)
 80043da:	a806      	add	r0, sp, #24
 80043dc:	f004 ff88 	bl	80092f0 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80043e0:	9a06      	ldr	r2, [sp, #24]
 80043e2:	492f      	ldr	r1, [pc, #188]	; (80044a0 <loraif_process+0x208>)
 80043e4:	482f      	ldr	r0, [pc, #188]	; (80044a4 <loraif_process+0x20c>)
 80043e6:	9400      	str	r4, [sp, #0]
 80043e8:	23d2      	movs	r3, #210	; 0xd2
 80043ea:	f004 fc15 	bl	8008c18 <LOG_DEBUG>
					if(xQueueSend(response_queue, &response_to_device, 2) == pdFALSE){
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <loraif_process+0x228>)
 80043f0:	a906      	add	r1, sp, #24
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	2202      	movs	r2, #2
 80043f6:	2300      	movs	r3, #0
 80043f8:	f7fd fa5e 	bl	80018b8 <xQueueGenericSend>
 80043fc:	2800      	cmp	r0, #0
 80043fe:	d18c      	bne.n	800431a <loraif_process+0x82>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004400:	4a30      	ldr	r2, [pc, #192]	; (80044c4 <loraif_process+0x22c>)
 8004402:	4927      	ldr	r1, [pc, #156]	; (80044a0 <loraif_process+0x208>)
 8004404:	4827      	ldr	r0, [pc, #156]	; (80044a4 <loraif_process+0x20c>)
 8004406:	9400      	str	r4, [sp, #0]
 8004408:	23d4      	movs	r3, #212	; 0xd4
 800440a:	f004 fc05 	bl	8008c18 <LOG_DEBUG>
}
 800440e:	e784      	b.n	800431a <loraif_process+0x82>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <loraif_process+0x200>)
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	4a2c      	ldr	r2, [pc, #176]	; (80044c8 <loraif_process+0x230>)
 8004416:	f240 130f 	movw	r3, #271	; 0x10f
 800441a:	e7a5      	b.n	8004368 <loraif_process+0xd0>
						if(addr == req_address && cmd == req_cmd){
 800441c:	4b2b      	ldr	r3, [pc, #172]	; (80044cc <loraif_process+0x234>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	42ab      	cmp	r3, r5
 8004422:	f47f af77 	bne.w	8004314 <loraif_process+0x7c>
							req_had_resp = true;
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <loraif_process+0x238>)
							loraif_dev_t *err_dev = loraif_select_device(pkt.data_str);
 8004428:	9809      	ldr	r0, [sp, #36]	; 0x24
							req_had_resp = true;
 800442a:	2201      	movs	r2, #1
 800442c:	701a      	strb	r2, [r3, #0]
							loraif_dev_t *err_dev = loraif_select_device(pkt.data_str);
 800442e:	f7ff feeb 	bl	8004208 <loraif_select_device>
 8004432:	4603      	mov	r3, r0
							set_response_ok(addr, cmd);
 8004434:	4629      	mov	r1, r5
 8004436:	4630      	mov	r0, r6
							err_dev->err_count = 0;
 8004438:	721c      	strb	r4, [r3, #8]
							set_response_ok(addr, cmd);
 800443a:	f7ff fcb3 	bl	8003da4 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800443e:	4b16      	ldr	r3, [pc, #88]	; (8004498 <loraif_process+0x200>)
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	4a24      	ldr	r2, [pc, #144]	; (80044d4 <loraif_process+0x23c>)
 8004444:	4916      	ldr	r1, [pc, #88]	; (80044a0 <loraif_process+0x208>)
 8004446:	4817      	ldr	r0, [pc, #92]	; (80044a4 <loraif_process+0x20c>)
 8004448:	f240 1309 	movw	r3, #265	; 0x109
 800444c:	f004 fbe4 	bl	8008c18 <LOG_DEBUG>
							goto event_handle;
 8004450:	e763      	b.n	800431a <loraif_process+0x82>
							set_response_ok(addr, cmd);
 8004452:	4629      	mov	r1, r5
 8004454:	f7ff fca6 	bl	8003da4 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <loraif_process+0x200>)
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4a1e      	ldr	r2, [pc, #120]	; (80044d8 <loraif_process+0x240>)
 800445e:	4910      	ldr	r1, [pc, #64]	; (80044a0 <loraif_process+0x208>)
 8004460:	4810      	ldr	r0, [pc, #64]	; (80044a4 <loraif_process+0x20c>)
 8004462:	23ef      	movs	r3, #239	; 0xef
 8004464:	f004 fbd8 	bl	8008c18 <LOG_DEBUG>
							goto event_handle;
 8004468:	e757      	b.n	800431a <loraif_process+0x82>
							set_response_ok(addr, cmd);
 800446a:	4629      	mov	r1, r5
 800446c:	f7ff fc9a 	bl	8003da4 <_ZL15set_response_okm12lora_event_t>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004470:	4b09      	ldr	r3, [pc, #36]	; (8004498 <loraif_process+0x200>)
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <loraif_process+0x244>)
 8004476:	490a      	ldr	r1, [pc, #40]	; (80044a0 <loraif_process+0x208>)
 8004478:	480a      	ldr	r0, [pc, #40]	; (80044a4 <loraif_process+0x20c>)
 800447a:	23f7      	movs	r3, #247	; 0xf7
 800447c:	f004 fbcc 	bl	8008c18 <LOG_DEBUG>
							goto event_handle;
 8004480:	e74b      	b.n	800431a <loraif_process+0x82>
 8004482:	bf00      	nop
 8004484:	2000000c 	.word	0x2000000c
 8004488:	0800c804 	.word	0x0800c804
 800448c:	2000b1c8 	.word	0x2000b1c8
 8004490:	0800cf44 	.word	0x0800cf44
 8004494:	2000b1d0 	.word	0x2000b1d0
 8004498:	0800c8e4 	.word	0x0800c8e4
 800449c:	0800c97c 	.word	0x0800c97c
 80044a0:	0800c778 	.word	0x0800c778
 80044a4:	0800c794 	.word	0x0800c794
 80044a8:	0800c8b0 	.word	0x0800c8b0
 80044ac:	0800c8f4 	.word	0x0800c8f4
 80044b0:	0800c918 	.word	0x0800c918
 80044b4:	2000b1bc 	.word	0x2000b1bc
 80044b8:	0800c998 	.word	0x0800c998
 80044bc:	0800c9bc 	.word	0x0800c9bc
 80044c0:	2000b1e4 	.word	0x2000b1e4
 80044c4:	0800c8c0 	.word	0x0800c8c0
 80044c8:	0800c96c 	.word	0x0800c96c
 80044cc:	2000b1d4 	.word	0x2000b1d4
 80044d0:	2000b1cc 	.word	0x2000b1cc
 80044d4:	0800c958 	.word	0x0800c958
 80044d8:	0800c928 	.word	0x0800c928
 80044dc:	0800c944 	.word	0x0800c944

080044e0 <loraif_check_timeout>:
void loraif_check_timeout(void){
 80044e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	while(req_had_resp == false){
 80044e4:	4d2a      	ldr	r5, [pc, #168]	; (8004590 <loraif_check_timeout+0xb0>)
 80044e6:	782b      	ldrb	r3, [r5, #0]
void loraif_check_timeout(void){
 80044e8:	b087      	sub	sp, #28
	while(req_had_resp == false){
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d133      	bne.n	8004556 <loraif_check_timeout+0x76>
 80044ee:	4c29      	ldr	r4, [pc, #164]	; (8004594 <loraif_check_timeout+0xb4>)
 80044f0:	4e29      	ldr	r6, [pc, #164]	; (8004598 <loraif_check_timeout+0xb8>)
			asprintf(&evt_data, "{\"addr\":0x%08x}", (unsigned int)req_address);
 80044f2:	4f2a      	ldr	r7, [pc, #168]	; (800459c <loraif_check_timeout+0xbc>)
 80044f4:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80045b4 <loraif_check_timeout+0xd4>
			if(err_dev->err_count >= max_not_resp){
 80044f8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80045b8 <loraif_check_timeout+0xd8>
 80044fc:	e004      	b.n	8004508 <loraif_check_timeout+0x28>
		vTaskDelay(1);
 80044fe:	2001      	movs	r0, #1
 8004500:	f7fe fbec 	bl	8002cdc <vTaskDelay>
	while(req_had_resp == false){
 8004504:	782b      	ldrb	r3, [r5, #0]
 8004506:	bb33      	cbnz	r3, 8004556 <loraif_check_timeout+0x76>
		if(timer->get_counter() >= resp_timeout){
 8004508:	6820      	ldr	r0, [r4, #0]
 800450a:	f003 fb97 	bl	8007c3c <_ZN3tim11get_counterEv>
 800450e:	6833      	ldr	r3, [r6, #0]
 8004510:	4298      	cmp	r0, r3
 8004512:	d3f4      	bcc.n	80044fe <loraif_check_timeout+0x1e>
			timer->stop();
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	a804      	add	r0, sp, #16
 8004518:	f003 fbba 	bl	8007c90 <_ZN3tim4stopEv>
			timer->reset_counter();
 800451c:	6820      	ldr	r0, [r4, #0]
 800451e:	f003 fb89 	bl	8007c34 <_ZN3tim13reset_counterEv>
			req_had_resp = false;
 8004522:	2300      	movs	r3, #0
			asprintf(&evt_data, "{\"addr\":0x%08x}", (unsigned int)req_address);
 8004524:	683a      	ldr	r2, [r7, #0]
			req_had_resp = false;
 8004526:	702b      	strb	r3, [r5, #0]
			asprintf(&evt_data, "{\"addr\":0x%08x}", (unsigned int)req_address);
 8004528:	4649      	mov	r1, r9
 800452a:	a803      	add	r0, sp, #12
 800452c:	f004 fee0 	bl	80092f0 <asiprintf>
			loraif_dev_t *err_dev = loraif_select_device(evt_data);
 8004530:	9803      	ldr	r0, [sp, #12]
 8004532:	f7ff fe69 	bl	8004208 <loraif_select_device>
			if(err_dev->err_count >= max_not_resp){
 8004536:	f898 3000 	ldrb.w	r3, [r8]
 800453a:	7a02      	ldrb	r2, [r0, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d20d      	bcs.n	800455c <loraif_check_timeout+0x7c>
				err_dev->err_count++;
 8004540:	3201      	adds	r2, #1
 8004542:	7202      	strb	r2, [r0, #8]
			free(evt_data);
 8004544:	9803      	ldr	r0, [sp, #12]
 8004546:	f004 ff23 	bl	8009390 <free>
		vTaskDelay(1);
 800454a:	2001      	movs	r0, #1
 800454c:	f7fe fbc6 	bl	8002cdc <vTaskDelay>
	while(req_had_resp == false){
 8004550:	782b      	ldrb	r3, [r5, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0d8      	beq.n	8004508 <loraif_check_timeout+0x28>
}
 8004556:	b007      	add	sp, #28
 8004558:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				asprintf(&tmp, "Device 0x%08x %d times not response", (unsigned int)req_address, max_not_resp);
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	4910      	ldr	r1, [pc, #64]	; (80045a0 <loraif_check_timeout+0xc0>)
 8004560:	a804      	add	r0, sp, #16
 8004562:	f004 fec5 	bl	80092f0 <asiprintf>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004566:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <loraif_check_timeout+0xc4>)
 8004568:	9a04      	ldr	r2, [sp, #16]
 800456a:	490f      	ldr	r1, [pc, #60]	; (80045a8 <loraif_check_timeout+0xc8>)
 800456c:	480f      	ldr	r0, [pc, #60]	; (80045ac <loraif_check_timeout+0xcc>)
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	f240 133b 	movw	r3, #315	; 0x13b
 8004574:	f004 fb50 	bl	8008c18 <LOG_DEBUG>
				free(tmp);
 8004578:	9804      	ldr	r0, [sp, #16]
 800457a:	f004 ff09 	bl	8009390 <free>
				if(fpeventhandler != NULL) fpeventhandler(LORA_DEL_DEVICE, evt_data);
 800457e:	4b0c      	ldr	r3, [pc, #48]	; (80045b0 <loraif_check_timeout+0xd0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d0de      	beq.n	8004544 <loraif_check_timeout+0x64>
 8004586:	9903      	ldr	r1, [sp, #12]
 8004588:	2007      	movs	r0, #7
 800458a:	4798      	blx	r3
 800458c:	e7da      	b.n	8004544 <loraif_check_timeout+0x64>
 800458e:	bf00      	nop
 8004590:	2000b1cc 	.word	0x2000b1cc
 8004594:	2000b1e8 	.word	0x2000b1e8
 8004598:	2000b1e0 	.word	0x2000b1e0
 800459c:	2000b1c8 	.word	0x2000b1c8
 80045a0:	0800c9fc 	.word	0x0800c9fc
 80045a4:	0800ca20 	.word	0x0800ca20
 80045a8:	0800c778 	.word	0x0800c778
 80045ac:	0800c794 	.word	0x0800c794
 80045b0:	2000b1d0 	.word	0x2000b1d0
 80045b4:	0800c9ec 	.word	0x0800c9ec
 80045b8:	2000b1dc 	.word	0x2000b1dc

080045bc <loraif_request_data>:
void loraif_request_data(void){
 80045bc:	b570      	push	{r4, r5, r6, lr}
      { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 80045be:	4d0a      	ldr	r5, [pc, #40]	; (80045e8 <loraif_request_data+0x2c>)
 80045c0:	682c      	ldr	r4, [r5, #0]
    if(loraif_device_list.empty()) {
 80045c2:	42ac      	cmp	r4, r5
 80045c4:	d00e      	beq.n	80045e4 <loraif_request_data+0x28>
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?");
 80045c6:	4e09      	ldr	r6, [pc, #36]	; (80045ec <loraif_request_data+0x30>)
    	vTaskDelay(10);
 80045c8:	200a      	movs	r0, #10
 80045ca:	f7fe fb87 	bl	8002cdc <vTaskDelay>
        loraif_request((*device)->address, LORA_REQ_DATA, (char *)"?");
 80045ce:	68a3      	ldr	r3, [r4, #8]
 80045d0:	4632      	mov	r2, r6
 80045d2:	6818      	ldr	r0, [r3, #0]
 80045d4:	2105      	movs	r1, #5
 80045d6:	f7ff fcef 	bl	8003fb8 <loraif_request>
        loraif_check_timeout();
 80045da:	f7ff ff81 	bl	80044e0 <loraif_check_timeout>
	_M_node = _M_node->_M_next;
 80045de:	6824      	ldr	r4, [r4, #0]
    for (auto device = loraif_device_list.begin(); device != loraif_device_list.end(); ++device) {
 80045e0:	42ac      	cmp	r4, r5
 80045e2:	d1f1      	bne.n	80045c8 <loraif_request_data+0xc>
}
 80045e4:	bd70      	pop	{r4, r5, r6, pc}
 80045e6:	bf00      	nop
 80045e8:	2000b1bc 	.word	0x2000b1bc
 80045ec:	0800ca38 	.word	0x0800ca38

080045f0 <_GLOBAL__sub_I_loraif>:
	this->_M_next = this->_M_prev = this;
 80045f0:	4b02      	ldr	r3, [pc, #8]	; (80045fc <_GLOBAL__sub_I_loraif+0xc>)
	this->_M_size = 0;
 80045f2:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 80045f4:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 80045f8:	609a      	str	r2, [r3, #8]
}
 80045fa:	4770      	bx	lr
 80045fc:	2000b1bc 	.word	0x2000b1bc

08004600 <_GLOBAL__sub_D_loraif>:
 8004600:	b538      	push	{r3, r4, r5, lr}
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8004602:	4d06      	ldr	r5, [pc, #24]	; (800461c <_GLOBAL__sub_D_loraif+0x1c>)
 8004604:	682c      	ldr	r4, [r5, #0]
      while (__cur != &_M_impl._M_node)
 8004606:	42ac      	cmp	r4, r5
 8004608:	d006      	beq.n	8004618 <_GLOBAL__sub_D_loraif+0x18>
 800460a:	4620      	mov	r0, r4
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 800460c:	6824      	ldr	r4, [r4, #0]
 800460e:	210c      	movs	r1, #12
 8004610:	f004 fdfa 	bl	8009208 <_ZdlPvj>
      while (__cur != &_M_impl._M_node)
 8004614:	42ac      	cmp	r4, r5
 8004616:	d1f8      	bne.n	800460a <_GLOBAL__sub_D_loraif+0xa>
 8004618:	bd38      	pop	{r3, r4, r5, pc}
 800461a:	bf00      	nop
 800461c:	2000b1bc 	.word	0x2000b1bc

08004620 <json_get_object>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}

pkt_err_t json_get_object(char *src, pkt_json_t *dest, char *key){
 8004620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004624:	b087      	sub	sp, #28
	int key_len = 0, val_len = 0;
	char *pkstart, *pvstart;
	int ivstart = 0, ivend = 0;

	/** check input */
	if(src == NULL || dest == NULL || key == NULL){
 8004626:	2900      	cmp	r1, #0
 8004628:	d079      	beq.n	800471e <json_get_object+0xfe>
 800462a:	4614      	mov	r4, r2
 800462c:	2a00      	cmp	r2, #0
 800462e:	d076      	beq.n	800471e <json_get_object+0xfe>
		parse_error_handler((char *)"Error bad input argument", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_ARG;
		return ret;
	}
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004630:	7803      	ldrb	r3, [r0, #0]
 8004632:	2b7b      	cmp	r3, #123	; 0x7b
 8004634:	4605      	mov	r5, r0
 8004636:	d166      	bne.n	8004706 <json_get_object+0xe6>
 8004638:	460e      	mov	r6, r1
	int src_len = strlen(src);
 800463a:	f7fb fde3 	bl	8000204 <strlen>
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 800463e:	182b      	adds	r3, r5, r0
	int src_len = strlen(src);
 8004640:	4607      	mov	r7, r0
	if(src[0] != '{' || src[src_len - 1] != '}' || src[src_len] != '\0'){
 8004642:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004646:	2b7d      	cmp	r3, #125	; 0x7d
 8004648:	d15d      	bne.n	8004706 <json_get_object+0xe6>
		return ret;
	}

	/** Find key */
	char *tmp;
	asprintf(&tmp, "\"%s\":", key);
 800464a:	4622      	mov	r2, r4
 800464c:	4977      	ldr	r1, [pc, #476]	; (800482c <json_get_object+0x20c>)
 800464e:	a805      	add	r0, sp, #20
 8004650:	f004 fe4e 	bl	80092f0 <asiprintf>
	pkstart = strstr(src_cpy, tmp);
 8004654:	9905      	ldr	r1, [sp, #20]
 8004656:	9103      	str	r1, [sp, #12]
 8004658:	4628      	mov	r0, r5
 800465a:	f005 fe1f 	bl	800a29c <strstr>
	free(tmp);
 800465e:	9903      	ldr	r1, [sp, #12]
	pkstart = strstr(src_cpy, tmp);
 8004660:	4604      	mov	r4, r0
	free(tmp);
 8004662:	4608      	mov	r0, r1
 8004664:	f004 fe94 	bl	8009390 <free>
	if(pkstart == NULL){
 8004668:	2c00      	cmp	r4, #0
 800466a:	f000 80b3 	beq.w	80047d4 <json_get_object+0x1b4>
		parse_error_handler((char *)"Error key not appear in the input request string", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_NOKEY;
		return ret;
	}
	pkstart++;
 800466e:	f104 0801 	add.w	r8, r4, #1
	/**
	 * Get key
	 * */
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004672:	4640      	mov	r0, r8
 8004674:	f7fb fdc6 	bl	8000204 <strlen>
 8004678:	4623      	mov	r3, r4
 800467a:	2400      	movs	r4, #0
 800467c:	e004      	b.n	8004688 <json_get_object+0x68>
		if(pkstart[key_len] == '"') break;
 800467e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004682:	2a22      	cmp	r2, #34	; 0x22
 8004684:	d002      	beq.n	800468c <json_get_object+0x6c>
	for(key_len=0; key_len<(int)strlen(pkstart); key_len++){
 8004686:	3401      	adds	r4, #1
 8004688:	42a0      	cmp	r0, r4
 800468a:	dcf8      	bgt.n	800467e <json_get_object+0x5e>
	}

	dest->key = (char *)malloc((key_len+1) * sizeof(char));
 800468c:	1c60      	adds	r0, r4, #1
 800468e:	f004 fe77 	bl	8009380 <malloc>
 8004692:	4681      	mov	r9, r0
 8004694:	6030      	str	r0, [r6, #0]
	if(dest->key == NULL){
 8004696:	2800      	cmp	r0, #0
 8004698:	f000 80a9 	beq.w	80047ee <json_get_object+0x1ce>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->key, pkstart, key_len); 	/** assign key to json struct */
 800469c:	4622      	mov	r2, r4
 800469e:	4641      	mov	r1, r8
 80046a0:	f004 fe7e 	bl	80093a0 <memcpy>
	 * Get value
	 * */
	/** Find Value start index */
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
	pvstart = pkstart;
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 80046a4:	1ca3      	adds	r3, r4, #2
	dest->key[key_len] = '\0';
 80046a6:	2200      	movs	r2, #0
 80046a8:	f809 2004 	strb.w	r2, [r9, r4]
	if((char)(*(uint32_t *)(pvstart + key_len + 2)) != '{') {
 80046ac:	f818 2003 	ldrb.w	r2, [r8, r3]
 80046b0:	2a7b      	cmp	r2, #123	; 0x7b
 80046b2:	eb08 0903 	add.w	r9, r8, r3
 80046b6:	d03e      	beq.n	8004736 <json_get_object+0x116>
		dest->leaf = true;
 80046b8:	2201      	movs	r2, #1
 80046ba:	7132      	strb	r2, [r6, #4]

	/** Get start point off value */
	pvstart = (char *)(pvstart + key_len + 2);
	/** Check leaf item */
	if(dest->leaf == true){
		if((char)(*pvstart) == '"') { /** Value is string */
 80046bc:	f818 3003 	ldrb.w	r3, [r8, r3]
 80046c0:	2b22      	cmp	r3, #34	; 0x22
 80046c2:	d06d      	beq.n	80047a0 <json_get_object+0x180>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
				if(pvstart[val_len] == '"') break;
			}
		}
		else{ /** Value is number or everythings */
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 80046c4:	4648      	mov	r0, r9
 80046c6:	f7fb fd9d 	bl	8000204 <strlen>
 80046ca:	2400      	movs	r4, #0
 80046cc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80046d0:	e006      	b.n	80046e0 <json_get_object+0xc0>
				if(pvstart[val_len] == '}' || pvstart[val_len] == ',') break;
 80046d2:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80046d6:	2b7d      	cmp	r3, #125	; 0x7d
 80046d8:	d004      	beq.n	80046e4 <json_get_object+0xc4>
 80046da:	2b2c      	cmp	r3, #44	; 0x2c
 80046dc:	d002      	beq.n	80046e4 <json_get_object+0xc4>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 80046de:	3401      	adds	r4, #1
 80046e0:	42a0      	cmp	r0, r4
 80046e2:	dcf6      	bgt.n	80046d2 <json_get_object+0xb2>
			}
		}
		if(val_len == 0){
 80046e4:	2c00      	cmp	r4, #0
 80046e6:	d06b      	beq.n	80047c0 <json_get_object+0x1a0>
			parse_error_handler((char *)"Error key no value", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_NOVAL;
			return ret;
		}
		dest->value = (char *)malloc((val_len+1) * sizeof(char));
 80046e8:	1c60      	adds	r0, r4, #1
 80046ea:	f004 fe49 	bl	8009380 <malloc>
 80046ee:	4605      	mov	r5, r0
 80046f0:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 80046f2:	2800      	cmp	r0, #0
 80046f4:	f000 808f 	beq.w	8004816 <json_get_object+0x1f6>
			parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
			ret = PKT_ERR_MEM;
			return ret;
		}
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 80046f8:	4622      	mov	r2, r4
 80046fa:	4649      	mov	r1, r9
 80046fc:	f004 fe50 	bl	80093a0 <memcpy>
		dest->value[val_len] = '\0';
 8004700:	2000      	movs	r0, #0
 8004702:	5528      	strb	r0, [r5, r4]
 8004704:	e008      	b.n	8004718 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004706:	4b4a      	ldr	r3, [pc, #296]	; (8004830 <json_get_object+0x210>)
 8004708:	484a      	ldr	r0, [pc, #296]	; (8004834 <json_get_object+0x214>)
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	4a4a      	ldr	r2, [pc, #296]	; (8004838 <json_get_object+0x218>)
 800470e:	494b      	ldr	r1, [pc, #300]	; (800483c <json_get_object+0x21c>)
 8004710:	232b      	movs	r3, #43	; 0x2b
 8004712:	f004 fa81 	bl	8008c18 <LOG_DEBUG>
		return ret;
 8004716:	2002      	movs	r0, #2
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
		dest->value[val_len] = '\0';
	}

	return ret;
}
 8004718:	b007      	add	sp, #28
 800471a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 800471e:	4b44      	ldr	r3, [pc, #272]	; (8004830 <json_get_object+0x210>)
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	4a47      	ldr	r2, [pc, #284]	; (8004840 <json_get_object+0x220>)
 8004724:	4945      	ldr	r1, [pc, #276]	; (800483c <json_get_object+0x21c>)
 8004726:	4843      	ldr	r0, [pc, #268]	; (8004834 <json_get_object+0x214>)
 8004728:	2326      	movs	r3, #38	; 0x26
 800472a:	f004 fa75 	bl	8008c18 <LOG_DEBUG>
		return ret;
 800472e:	2001      	movs	r0, #1
}
 8004730:	b007      	add	sp, #28
 8004732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if(dest->leaf == true){
 8004736:	7931      	ldrb	r1, [r6, #4]
 8004738:	2900      	cmp	r1, #0
 800473a:	d1bf      	bne.n	80046bc <json_get_object+0x9c>
	ivstart = (int)((pkstart - src_cpy) + key_len + 2);
 800473c:	eba8 0805 	sub.w	r8, r8, r5
 8004740:	4444      	add	r4, r8
 8004742:	f104 0c02 	add.w	ip, r4, #2
		for(ivend=ivstart; ivend<src_len; ivend++){
 8004746:	4567      	cmp	r7, ip
 8004748:	dd4e      	ble.n	80047e8 <json_get_object+0x1c8>
 800474a:	3401      	adds	r4, #1
 800474c:	4425      	add	r5, r4
 800474e:	4663      	mov	r3, ip
		int l_brace = 0, r_brace = 0;
 8004750:	4608      	mov	r0, r1
 8004752:	e007      	b.n	8004764 <json_get_object+0x144>
			if(src_cpy[ivend] == '}') r_brace++;
 8004754:	2a7d      	cmp	r2, #125	; 0x7d
 8004756:	bf08      	it	eq
 8004758:	3101      	addeq	r1, #1
			if(l_brace == r_brace) break;
 800475a:	4281      	cmp	r1, r0
 800475c:	d008      	beq.n	8004770 <json_get_object+0x150>
		for(ivend=ivstart; ivend<src_len; ivend++){
 800475e:	3301      	adds	r3, #1
 8004760:	429f      	cmp	r7, r3
 8004762:	d018      	beq.n	8004796 <json_get_object+0x176>
			if(src_cpy[ivend] == '{') l_brace++;
 8004764:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004768:	2a7b      	cmp	r2, #123	; 0x7b
 800476a:	d1f3      	bne.n	8004754 <json_get_object+0x134>
 800476c:	3001      	adds	r0, #1
			if(src_cpy[ivend] == '}') r_brace++;
 800476e:	e7f4      	b.n	800475a <json_get_object+0x13a>
		val_len = ivend - ivstart + 1;
 8004770:	eba3 030c 	sub.w	r3, r3, ip
		dest->value = (char *)malloc(val_len + 1);
 8004774:	1c98      	adds	r0, r3, #2
		val_len = ivend - ivstart + 1;
 8004776:	1c5f      	adds	r7, r3, #1
		dest->value = (char *)malloc(val_len + 1);
 8004778:	f004 fe02 	bl	8009380 <malloc>
 800477c:	4604      	mov	r4, r0
 800477e:	60b0      	str	r0, [r6, #8]
		if(dest->value == NULL){
 8004780:	2800      	cmp	r0, #0
 8004782:	d03e      	beq.n	8004802 <json_get_object+0x1e2>
		memcpy(dest->value, pvstart, val_len); 	/** assign key to jsn struct */
 8004784:	463a      	mov	r2, r7
 8004786:	4649      	mov	r1, r9
 8004788:	f004 fe0a 	bl	80093a0 <memcpy>
		dest->value[val_len] = '\0';
 800478c:	2000      	movs	r0, #0
 800478e:	55e0      	strb	r0, [r4, r7]
}
 8004790:	b007      	add	sp, #28
 8004792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		val_len = ivend - ivstart + 1;
 8004796:	eba7 070c 	sub.w	r7, r7, ip
		dest->value = (char *)malloc(val_len + 1);
 800479a:	1cb8      	adds	r0, r7, #2
		val_len = ivend - ivstart + 1;
 800479c:	3701      	adds	r7, #1
 800479e:	e7eb      	b.n	8004778 <json_get_object+0x158>
			pvstart++;
 80047a0:	f109 0501 	add.w	r5, r9, #1
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 80047a4:	4628      	mov	r0, r5
 80047a6:	f7fb fd2d 	bl	8000204 <strlen>
 80047aa:	2400      	movs	r4, #0
 80047ac:	e004      	b.n	80047b8 <json_get_object+0x198>
				if(pvstart[val_len] == '"') break;
 80047ae:	f819 3f01 	ldrb.w	r3, [r9, #1]!
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	d002      	beq.n	80047bc <json_get_object+0x19c>
			for(val_len=0; val_len<(int)strlen(pvstart); val_len++){
 80047b6:	3401      	adds	r4, #1
 80047b8:	42a0      	cmp	r0, r4
 80047ba:	dcf8      	bgt.n	80047ae <json_get_object+0x18e>
 80047bc:	46a9      	mov	r9, r5
 80047be:	e791      	b.n	80046e4 <json_get_object+0xc4>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <json_get_object+0x210>)
 80047c2:	481c      	ldr	r0, [pc, #112]	; (8004834 <json_get_object+0x214>)
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <json_get_object+0x224>)
 80047c8:	491c      	ldr	r1, [pc, #112]	; (800483c <json_get_object+0x21c>)
 80047ca:	2366      	movs	r3, #102	; 0x66
 80047cc:	f004 fa24 	bl	8008c18 <LOG_DEBUG>
			return ret;
 80047d0:	2008      	movs	r0, #8
 80047d2:	e7a1      	b.n	8004718 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <json_get_object+0x210>)
 80047d6:	4817      	ldr	r0, [pc, #92]	; (8004834 <json_get_object+0x214>)
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <json_get_object+0x228>)
 80047dc:	4917      	ldr	r1, [pc, #92]	; (800483c <json_get_object+0x21c>)
 80047de:	2336      	movs	r3, #54	; 0x36
 80047e0:	f004 fa1a 	bl	8008c18 <LOG_DEBUG>
		return ret;
 80047e4:	2004      	movs	r0, #4
 80047e6:	e797      	b.n	8004718 <json_get_object+0xf8>
		for(ivend=ivstart; ivend<src_len; ivend++){
 80047e8:	2701      	movs	r7, #1
 80047ea:	2002      	movs	r0, #2
 80047ec:	e7c4      	b.n	8004778 <json_get_object+0x158>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80047ee:	4b10      	ldr	r3, [pc, #64]	; (8004830 <json_get_object+0x210>)
 80047f0:	4810      	ldr	r0, [pc, #64]	; (8004834 <json_get_object+0x214>)
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4a15      	ldr	r2, [pc, #84]	; (800484c <json_get_object+0x22c>)
 80047f6:	4911      	ldr	r1, [pc, #68]	; (800483c <json_get_object+0x21c>)
 80047f8:	2344      	movs	r3, #68	; 0x44
 80047fa:	f004 fa0d 	bl	8008c18 <LOG_DEBUG>
		return ret;
 80047fe:	2010      	movs	r0, #16
 8004800:	e78a      	b.n	8004718 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004802:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <json_get_object+0x210>)
 8004804:	480b      	ldr	r0, [pc, #44]	; (8004834 <json_get_object+0x214>)
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	4a10      	ldr	r2, [pc, #64]	; (800484c <json_get_object+0x22c>)
 800480a:	490c      	ldr	r1, [pc, #48]	; (800483c <json_get_object+0x21c>)
 800480c:	237e      	movs	r3, #126	; 0x7e
 800480e:	f004 fa03 	bl	8008c18 <LOG_DEBUG>
			return ret;
 8004812:	2010      	movs	r0, #16
 8004814:	e780      	b.n	8004718 <json_get_object+0xf8>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8004816:	4b06      	ldr	r3, [pc, #24]	; (8004830 <json_get_object+0x210>)
 8004818:	4806      	ldr	r0, [pc, #24]	; (8004834 <json_get_object+0x214>)
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	4a0b      	ldr	r2, [pc, #44]	; (800484c <json_get_object+0x22c>)
 800481e:	4907      	ldr	r1, [pc, #28]	; (800483c <json_get_object+0x21c>)
 8004820:	236c      	movs	r3, #108	; 0x6c
 8004822:	f004 f9f9 	bl	8008c18 <LOG_DEBUG>
			return ret;
 8004826:	2010      	movs	r0, #16
 8004828:	e776      	b.n	8004718 <json_get_object+0xf8>
 800482a:	bf00      	nop
 800482c:	0800cb1c 	.word	0x0800cb1c
 8004830:	0800cb0c 	.word	0x0800cb0c
 8004834:	0800cafc 	.word	0x0800cafc
 8004838:	0800cb24 	.word	0x0800cb24
 800483c:	0800c778 	.word	0x0800c778
 8004840:	0800cae0 	.word	0x0800cae0
 8004844:	0800cb9c 	.word	0x0800cb9c
 8004848:	0800cb48 	.word	0x0800cb48
 800484c:	0800cb7c 	.word	0x0800cb7c

08004850 <json_release_object>:

pkt_err_t json_release_object(pkt_json_t *json){
 8004850:	b510      	push	{r4, lr}
 8004852:	4604      	mov	r4, r0
	if(json->key != NULL) free(json->key);
 8004854:	6800      	ldr	r0, [r0, #0]
 8004856:	b108      	cbz	r0, 800485c <json_release_object+0xc>
 8004858:	f004 fd9a 	bl	8009390 <free>
	if(json->value != NULL) free(json->value);
 800485c:	68a0      	ldr	r0, [r4, #8]
 800485e:	b108      	cbz	r0, 8004864 <json_release_object+0x14>
 8004860:	f004 fd96 	bl	8009390 <free>
	json->leaf = false;
 8004864:	2000      	movs	r0, #0
 8004866:	7120      	strb	r0, [r4, #4]

	return PKT_ERR_OK;
}
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop

0800486c <parse_packet>:

pkt_err_t parse_packet(char *src, pkt_t *dest){
 800486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004870:	4688      	mov	r8, r1
 8004872:	b082      	sub	sp, #8
	char *src_cpy = src;
	int cmd_len = 0, data_len = 0;
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8004874:	4924      	ldr	r1, [pc, #144]	; (8004908 <parse_packet+0x9c>)
pkt_err_t parse_packet(char *src, pkt_t *dest){
 8004876:	4605      	mov	r5, r0
	pvstart = strstr(src, ": ");
 8004878:	f005 fd10 	bl	800a29c <strstr>
	if(pvstart == NULL){
 800487c:	b318      	cbz	r0, 80048c6 <parse_packet+0x5a>
		ret = PKT_ERR_FORMAT;
		return ret;
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 800487e:	1b47      	subs	r7, r0, r5

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8004880:	4604      	mov	r4, r0
 8004882:	1c78      	adds	r0, r7, #1
 8004884:	f004 fd7c 	bl	8009380 <malloc>
 8004888:	4606      	mov	r6, r0
 800488a:	f8c8 0000 	str.w	r0, [r8]
	if(dest->cmd_str == NULL){
 800488e:	b330      	cbz	r0, 80048de <parse_packet+0x72>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8004890:	4629      	mov	r1, r5
 8004892:	463a      	mov	r2, r7
	dest->cmd_str[cmd_len] = '\0';


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 8004894:	3402      	adds	r4, #2
	dest->cmd_str[cmd_len] = '\0';
 8004896:	2500      	movs	r5, #0
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8004898:	f004 fd82 	bl	80093a0 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 800489c:	55f5      	strb	r5, [r6, r7]
	data_len = strlen(pvstart);
 800489e:	4620      	mov	r0, r4
 80048a0:	f7fb fcb0 	bl	8000204 <strlen>
 80048a4:	4606      	mov	r6, r0
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 80048a6:	3001      	adds	r0, #1
 80048a8:	f004 fd6a 	bl	8009380 <malloc>
 80048ac:	4607      	mov	r7, r0
 80048ae:	f8c8 0004 	str.w	r0, [r8, #4]
	if(dest->data_str == NULL){
 80048b2:	b1f0      	cbz	r0, 80048f2 <parse_packet+0x86>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
		ret = PKT_ERR_MEM;
		return ret;
	}
	memcpy(dest->data_str, pvstart, data_len);
 80048b4:	4621      	mov	r1, r4
 80048b6:	4632      	mov	r2, r6
 80048b8:	f004 fd72 	bl	80093a0 <memcpy>
	dest->data_str[data_len] = '\0';
 80048bc:	55bd      	strb	r5, [r7, r6]

	return ret;
 80048be:	4628      	mov	r0, r5
}
 80048c0:	b002      	add	sp, #8
 80048c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048c6:	4b11      	ldr	r3, [pc, #68]	; (800490c <parse_packet+0xa0>)
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	4a11      	ldr	r2, [pc, #68]	; (8004910 <parse_packet+0xa4>)
 80048cc:	4911      	ldr	r1, [pc, #68]	; (8004914 <parse_packet+0xa8>)
 80048ce:	4812      	ldr	r0, [pc, #72]	; (8004918 <parse_packet+0xac>)
 80048d0:	239a      	movs	r3, #154	; 0x9a
 80048d2:	f004 f9a1 	bl	8008c18 <LOG_DEBUG>
		return ret;
 80048d6:	2002      	movs	r0, #2
}
 80048d8:	b002      	add	sp, #8
 80048da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <parse_packet+0xa0>)
 80048e0:	480d      	ldr	r0, [pc, #52]	; (8004918 <parse_packet+0xac>)
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	4a0d      	ldr	r2, [pc, #52]	; (800491c <parse_packet+0xb0>)
 80048e6:	490b      	ldr	r1, [pc, #44]	; (8004914 <parse_packet+0xa8>)
 80048e8:	23a5      	movs	r3, #165	; 0xa5
 80048ea:	f004 f995 	bl	8008c18 <LOG_DEBUG>
		return ret;
 80048ee:	2010      	movs	r0, #16
 80048f0:	e7e6      	b.n	80048c0 <parse_packet+0x54>
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 80048f2:	4b06      	ldr	r3, [pc, #24]	; (800490c <parse_packet+0xa0>)
 80048f4:	4808      	ldr	r0, [pc, #32]	; (8004918 <parse_packet+0xac>)
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <parse_packet+0xb0>)
 80048fa:	4906      	ldr	r1, [pc, #24]	; (8004914 <parse_packet+0xa8>)
 80048fc:	23b2      	movs	r3, #178	; 0xb2
 80048fe:	f004 f98b 	bl	8008c18 <LOG_DEBUG>
		return ret;
 8004902:	2010      	movs	r0, #16
 8004904:	e7dc      	b.n	80048c0 <parse_packet+0x54>
 8004906:	bf00      	nop
 8004908:	0800cbb0 	.word	0x0800cbb0
 800490c:	0800cbc8 	.word	0x0800cbc8
 8004910:	0800cbb4 	.word	0x0800cbb4
 8004914:	0800c778 	.word	0x0800c778
 8004918:	0800cafc 	.word	0x0800cafc
 800491c:	0800cb7c 	.word	0x0800cb7c

08004920 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 8004920:	b510      	push	{r4, lr}
 8004922:	4604      	mov	r4, r0
	if(packet->cmd_str != NULL) free(packet->cmd_str);
 8004924:	6800      	ldr	r0, [r0, #0]
 8004926:	b108      	cbz	r0, 800492c <release_packet+0xc>
 8004928:	f004 fd32 	bl	8009390 <free>
	if(packet->data_str != NULL) free(packet->data_str);
 800492c:	6860      	ldr	r0, [r4, #4]
 800492e:	b108      	cbz	r0, 8004934 <release_packet+0x14>
 8004930:	f004 fd2e 	bl	8009390 <free>

	return PKT_ERR_OK;
}
 8004934:	2000      	movs	r0, #0
 8004936:	bd10      	pop	{r4, pc}

08004938 <str_to_cmd>:

int str_to_cmd(char *str, const char *cmd_list[], int max){
 8004938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int cmd = 0;

	for(int i=0; i<(int)max; i++){
 800493a:	1e16      	subs	r6, r2, #0
 800493c:	dd0f      	ble.n	800495e <str_to_cmd+0x26>
 800493e:	4607      	mov	r7, r0
 8004940:	1f0d      	subs	r5, r1, #4
 8004942:	2400      	movs	r4, #0
 8004944:	e002      	b.n	800494c <str_to_cmd+0x14>
 8004946:	3401      	adds	r4, #1
 8004948:	42a6      	cmp	r6, r4
 800494a:	d008      	beq.n	800495e <str_to_cmd+0x26>
		if(strcmp(str, cmd_list[i]) == 0){
 800494c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8004950:	4638      	mov	r0, r7
 8004952:	f7fb fc4d 	bl	80001f0 <strcmp>
 8004956:	2800      	cmp	r0, #0
 8004958:	d1f5      	bne.n	8004946 <str_to_cmd+0xe>
			return cmd;
		}
	}

	return cmd;
}
 800495a:	4620      	mov	r0, r4
 800495c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return cmd;
 800495e:	2400      	movs	r4, #0
}
 8004960:	4620      	mov	r0, r4
 8004962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004964 <cmd_to_str>:

char *cmd_to_str(int cmd, const char *cmd_list[]){
	return (char *)cmd_list[cmd];
}
 8004964:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop

0800496c <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
	_csport = csport;
	_rstport = rstport;
 800496c:	e9c0 1303 	strd	r1, r3, [r0, #12]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8004970:	2300      	movs	r3, #0
 8004972:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8004976:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
 800497a:	f8bd 3000 	ldrh.w	r3, [sp]
	_itport = itport;

	_cs = cspin;
 800497e:	8082      	strh	r2, [r0, #4]
	_rst = rstpin;
 8004980:	80c3      	strh	r3, [r0, #6]
sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8004982:	9a01      	ldr	r2, [sp, #4]
 8004984:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	_itport = itport;
 8004988:	6142      	str	r2, [r0, #20]
	_it = itpin;
 800498a:	8103      	strh	r3, [r0, #8]
}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop

08004990 <_ZN6sx127x4initEP3spilhm>:

bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 8004990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	4604      	mov	r4, r0
 8004996:	b086      	sub	sp, #24
	_spi = spi;

	gpio_port_clock_enable(_csport);
 8004998:	68c0      	ldr	r0, [r0, #12]
	_spi = spi;
 800499a:	6021      	str	r1, [r4, #0]
bool sx127x::init(spi_t spi, long frequency, uint8_t power, uint32_t interruptpriority){
 800499c:	4698      	mov	r8, r3
 800499e:	4691      	mov	r9, r2
	gpio_port_clock_enable(_csport);
 80049a0:	f001 fdbe 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(_rstport);
 80049a4:	6920      	ldr	r0, [r4, #16]
 80049a6:	f001 fdbb 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(_itport);
 80049aa:	6960      	ldr	r0, [r4, #20]
 80049ac:	f001 fdb8 	bl	8006520 <gpio_port_clock_enable>

	gpio_set_mode(_csport, _cs, GPIO_OUTPUT_PUSHPULL);
 80049b0:	2207      	movs	r2, #7
 80049b2:	88a1      	ldrh	r1, [r4, #4]
 80049b4:	68e0      	ldr	r0, [r4, #12]
 80049b6:	f001 fe19 	bl	80065ec <gpio_set_mode>
	gpio_set(_csport, _cs);
 80049ba:	88a1      	ldrh	r1, [r4, #4]
 80049bc:	68e0      	ldr	r0, [r4, #12]
 80049be:	f001 fef7 	bl	80067b0 <gpio_set>

	gpio_set_mode(_rstport, _rst, GPIO_OUTPUT_PUSHPULL);
 80049c2:	2207      	movs	r2, #7
 80049c4:	88e1      	ldrh	r1, [r4, #6]
 80049c6:	6920      	ldr	r0, [r4, #16]
 80049c8:	f001 fe10 	bl	80065ec <gpio_set_mode>
	gpio_reset(_rstport, _rst);
 80049cc:	88e1      	ldrh	r1, [r4, #6]
 80049ce:	6920      	ldr	r0, [r4, #16]
 80049d0:	f001 fef6 	bl	80067c0 <gpio_reset>
    delay_ms(50);
 80049d4:	2032      	movs	r0, #50	; 0x32
 80049d6:	f002 ffd1 	bl	800797c <delay_ms>
    gpio_set(_rstport, _rst);
 80049da:	88e1      	ldrh	r1, [r4, #6]
 80049dc:	6920      	ldr	r0, [r4, #16]
 80049de:	f001 fee7 	bl	80067b0 <gpio_set>
    delay_ms(50);
 80049e2:	2032      	movs	r0, #50	; 0x32
 80049e4:	f002 ffca 	bl	800797c <delay_ms>

    if(_it >= 0 && _itport != NULL){
 80049e8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	db0e      	blt.n	8004a0e <_ZN6sx127x4initEP3spilhm+0x7e>
 80049f0:	6961      	ldr	r1, [r4, #20]
 80049f2:	b161      	cbz	r1, 8004a0e <_ZN6sx127x4initEP3spilhm+0x7e>
		exti_init(_itport, _it, EXTI_RISING_EDGE, interruptpriority);
 80049f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	ad04      	add	r5, sp, #16
 80049fa:	4628      	mov	r0, r5
 80049fc:	b292      	uxth	r2, r2
 80049fe:	2301      	movs	r3, #1
 8004a00:	f001 f8cc 	bl	8005b9c <exti_init>
		gpio_set_pulldown(_itport, _it);
 8004a04:	8921      	ldrh	r1, [r4, #8]
 8004a06:	6960      	ldr	r0, [r4, #20]
 8004a08:	f001 fec4 	bl	8006794 <gpio_set_pulldown>
 8004a0c:	e000      	b.n	8004a10 <_ZN6sx127x4initEP3spilhm+0x80>
 8004a0e:	ad04      	add	r5, sp, #16
}

uint8_t sx127x::singleTransfer(uint8_t address, uint8_t value){
  uint8_t response, txdt;

  gpio_reset(_csport, _cs);
 8004a10:	88a1      	ldrh	r1, [r4, #4]
 8004a12:	68e0      	ldr	r0, [r4, #12]
 8004a14:	f001 fed4 	bl	80067c0 <gpio_reset>

  txdt = address;
 8004a18:	2342      	movs	r3, #66	; 0x42
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004a1a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004a1c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004a20:	f10d 020f 	add.w	r2, sp, #15
 8004a24:	2301      	movs	r3, #1
 8004a26:	4628      	mov	r0, r5
  txdt = value;
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004a28:	2601      	movs	r6, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004a2a:	f002 fae9 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004a2e:	9600      	str	r6, [sp, #0]
 8004a30:	f10d 030e 	add.w	r3, sp, #14
 8004a34:	6821      	ldr	r1, [r4, #0]
 8004a36:	f10d 020f 	add.w	r2, sp, #15
 8004a3a:	4628      	mov	r0, r5
  txdt = value;
 8004a3c:	2700      	movs	r7, #0
 8004a3e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004a42:	f002 fb89 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>

  gpio_set(_csport, _cs);
 8004a46:	88a1      	ldrh	r1, [r4, #4]
 8004a48:	68e0      	ldr	r0, [r4, #12]
 8004a4a:	f001 feb1 	bl	80067b0 <gpio_set>

  return response;
 8004a4e:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if(version != 0x12) return false;
 8004a52:	2b12      	cmp	r3, #18
 8004a54:	d003      	beq.n	8004a5e <_ZN6sx127x4initEP3spilhm+0xce>
 8004a56:	4638      	mov	r0, r7
}
 8004a58:	b006      	add	sp, #24
 8004a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  gpio_reset(_csport, _cs);
 8004a5e:	88a1      	ldrh	r1, [r4, #4]
 8004a60:	68e0      	ldr	r0, [r4, #12]
 8004a62:	f001 fead 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004a66:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004a6a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004a6c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004a70:	4633      	mov	r3, r6
 8004a72:	f10d 020f 	add.w	r2, sp, #15
 8004a76:	4628      	mov	r0, r5
 8004a78:	f002 fac2 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004a7c:	9600      	str	r6, [sp, #0]
  txdt = value;
 8004a7e:	f04f 0c80 	mov.w	ip, #128	; 0x80
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004a82:	f10d 030e 	add.w	r3, sp, #14
 8004a86:	f10d 020f 	add.w	r2, sp, #15
 8004a8a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004a8c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004a90:	4628      	mov	r0, r5
 8004a92:	f002 fb61 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004a96:	88a1      	ldrh	r1, [r4, #4]
 8004a98:	68e0      	ldr	r0, [r4, #12]
 8004a9a:	f001 fe89 	bl	80067b0 <gpio_set>
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004a9e:	ea4f 71e9 	mov.w	r1, r9, asr #31
 8004aa2:	04c9      	lsls	r1, r1, #19
 8004aa4:	4a9e      	ldr	r2, [pc, #632]	; (8004d20 <_ZN6sx127x4initEP3spilhm+0x390>)
	_frequency = frequency;
 8004aa6:	f8c4 9020 	str.w	r9, [r4, #32]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	ea41 3159 	orr.w	r1, r1, r9, lsr #13
 8004ab0:	ea4f 40c9 	mov.w	r0, r9, lsl #19
 8004ab4:	f7fc f908 	bl	8000cc8 <__aeabi_uldivmod>
  gpio_reset(_csport, _cs);
 8004ab8:	88a1      	ldrh	r1, [r4, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8004aba:	4682      	mov	sl, r0
  gpio_reset(_csport, _cs);
 8004abc:	68e0      	ldr	r0, [r4, #12]
 8004abe:	f001 fe7f 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004ac2:	f04f 0c86 	mov.w	ip, #134	; 0x86
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ac6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004ac8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004acc:	4633      	mov	r3, r6
 8004ace:	f10d 020f 	add.w	r2, sp, #15
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f002 fa94 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ad8:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004ada:	ea4f 4c1a 	mov.w	ip, sl, lsr #16
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ade:	f10d 030e 	add.w	r3, sp, #14
 8004ae2:	f10d 020f 	add.w	r2, sp, #15
 8004ae6:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8004ae8:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004aec:	4628      	mov	r0, r5
 8004aee:	f002 fb33 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004af2:	88a1      	ldrh	r1, [r4, #4]
 8004af4:	68e0      	ldr	r0, [r4, #12]
 8004af6:	f001 fe5b 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004afa:	88a1      	ldrh	r1, [r4, #4]
 8004afc:	68e0      	ldr	r0, [r4, #12]
 8004afe:	f001 fe5f 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004b02:	f04f 0987 	mov.w	r9, #135	; 0x87
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004b06:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004b08:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004b0c:	4633      	mov	r3, r6
 8004b0e:	f10d 020f 	add.w	r2, sp, #15
 8004b12:	4628      	mov	r0, r5
 8004b14:	f002 fa74 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004b18:	9600      	str	r6, [sp, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004b1a:	ea4f 2c1a 	mov.w	ip, sl, lsr #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004b1e:	f10d 030e 	add.w	r3, sp, #14
 8004b22:	f10d 020f 	add.w	r2, sp, #15
 8004b26:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_MID, (uint8_t)(frf >> 8));
 8004b28:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f002 fb13 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004b32:	88a1      	ldrh	r1, [r4, #4]
 8004b34:	68e0      	ldr	r0, [r4, #12]
 8004b36:	f001 fe3b 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004b3a:	88a1      	ldrh	r1, [r4, #4]
 8004b3c:	68e0      	ldr	r0, [r4, #12]
 8004b3e:	f001 fe3f 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004b42:	f04f 0c88 	mov.w	ip, #136	; 0x88
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004b46:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004b48:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004b4c:	4633      	mov	r3, r6
 8004b4e:	f10d 020f 	add.w	r2, sp, #15
 8004b52:	4628      	mov	r0, r5
 8004b54:	f002 fa54 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004b58:	9600      	str	r6, [sp, #0]
 8004b5a:	f10d 030e 	add.w	r3, sp, #14
 8004b5e:	f10d 020f 	add.w	r2, sp, #15
 8004b62:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8004b64:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004b68:	4628      	mov	r0, r5
 8004b6a:	f002 faf5 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004b6e:	88a1      	ldrh	r1, [r4, #4]
 8004b70:	68e0      	ldr	r0, [r4, #12]
 8004b72:	f001 fe1d 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004b76:	88a1      	ldrh	r1, [r4, #4]
 8004b78:	68e0      	ldr	r0, [r4, #12]
 8004b7a:	f001 fe21 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004b7e:	f04f 0c8e 	mov.w	ip, #142	; 0x8e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004b82:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004b84:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004b88:	4633      	mov	r3, r6
 8004b8a:	f10d 020f 	add.w	r2, sp, #15
 8004b8e:	4628      	mov	r0, r5
 8004b90:	f002 fa36 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004b94:	9600      	str	r6, [sp, #0]
 8004b96:	f10d 030e 	add.w	r3, sp, #14
 8004b9a:	f10d 020f 	add.w	r2, sp, #15
 8004b9e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004ba0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	f002 fad7 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004baa:	88a1      	ldrh	r1, [r4, #4]
 8004bac:	68e0      	ldr	r0, [r4, #12]
 8004bae:	f001 fdff 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004bb2:	88a1      	ldrh	r1, [r4, #4]
 8004bb4:	68e0      	ldr	r0, [r4, #12]
 8004bb6:	f001 fe03 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004bba:	f04f 0c8f 	mov.w	ip, #143	; 0x8f
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004bbe:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004bc0:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004bc4:	4633      	mov	r3, r6
 8004bc6:	f10d 020f 	add.w	r2, sp, #15
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f002 fa18 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004bd0:	9600      	str	r6, [sp, #0]
 8004bd2:	f10d 030e 	add.w	r3, sp, #14
 8004bd6:	f10d 020f 	add.w	r2, sp, #15
 8004bda:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004bdc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004be0:	4628      	mov	r0, r5
 8004be2:	f002 fab9 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004be6:	88a1      	ldrh	r1, [r4, #4]
 8004be8:	68e0      	ldr	r0, [r4, #12]
 8004bea:	f001 fde1 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004bee:	88a1      	ldrh	r1, [r4, #4]
 8004bf0:	68e0      	ldr	r0, [r4, #12]
 8004bf2:	f001 fde5 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004bf6:	f04f 0c0c 	mov.w	ip, #12
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004bfa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004bfc:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c00:	4633      	mov	r3, r6
 8004c02:	f10d 020f 	add.w	r2, sp, #15
 8004c06:	4628      	mov	r0, r5
 8004c08:	f002 f9fa 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c0c:	9600      	str	r6, [sp, #0]
 8004c0e:	f10d 030e 	add.w	r3, sp, #14
 8004c12:	f10d 020f 	add.w	r2, sp, #15
 8004c16:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004c18:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f002 fa9b 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004c22:	88a1      	ldrh	r1, [r4, #4]
 8004c24:	68e0      	ldr	r0, [r4, #12]
 8004c26:	f001 fdc3 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004c2a:	88a1      	ldrh	r1, [r4, #4]
 8004c2c:	68e0      	ldr	r0, [r4, #12]
  return response;
 8004c2e:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 8004c32:	f001 fdc5 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004c36:	f04f 0c8c 	mov.w	ip, #140	; 0x8c
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c3a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004c3c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c40:	4633      	mov	r3, r6
 8004c42:	f10d 020f 	add.w	r2, sp, #15
 8004c46:	4628      	mov	r0, r5
 8004c48:	f002 f9da 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c4c:	9600      	str	r6, [sp, #0]
 8004c4e:	f10d 030e 	add.w	r3, sp, #14
 8004c52:	f10d 020f 	add.w	r2, sp, #15
 8004c56:	6821      	ldr	r1, [r4, #0]
	writeRegister(REG_LNA, readRegister(REG_LNA) | 0x03);
 8004c58:	f047 0703 	orr.w	r7, r7, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c5c:	4628      	mov	r0, r5
  txdt = value;
 8004c5e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c62:	f002 fa79 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004c66:	88a1      	ldrh	r1, [r4, #4]
 8004c68:	68e0      	ldr	r0, [r4, #12]
 8004c6a:	f001 fda1 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004c6e:	88a1      	ldrh	r1, [r4, #4]
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	f001 fda5 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004c76:	27a6      	movs	r7, #166	; 0xa6
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c78:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004c7a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004c7e:	4633      	mov	r3, r6
 8004c80:	f10d 020f 	add.w	r2, sp, #15
 8004c84:	4628      	mov	r0, r5
 8004c86:	f002 f9bb 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c8a:	9600      	str	r6, [sp, #0]
  txdt = value;
 8004c8c:	2304      	movs	r3, #4
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c8e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004c90:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004c94:	4628      	mov	r0, r5
 8004c96:	f10d 030e 	add.w	r3, sp, #14
 8004c9a:	f10d 020f 	add.w	r2, sp, #15
 8004c9e:	f002 fa5b 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004ca2:	88a1      	ldrh	r1, [r4, #4]
 8004ca4:	68e0      	ldr	r0, [r4, #12]
 8004ca6:	f001 fd83 	bl	80067b0 <gpio_set>
		if(level > 17){
 8004caa:	f1b8 0f11 	cmp.w	r8, #17
 8004cae:	f200 80c8 	bhi.w	8004e42 <_ZN6sx127x4initEP3spilhm+0x4b2>
			if (level < 2) level = 2;
 8004cb2:	f1b8 0f02 	cmp.w	r8, #2
  gpio_reset(_csport, _cs);
 8004cb6:	88a1      	ldrh	r1, [r4, #4]
 8004cb8:	68e0      	ldr	r0, [r4, #12]
 8004cba:	bf38      	it	cc
 8004cbc:	f04f 0802 	movcc.w	r8, #2
  txdt = address;
 8004cc0:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 8004cc2:	f001 fd7d 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004cc6:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004cc8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ccc:	4633      	mov	r3, r6
 8004cce:	f10d 020f 	add.w	r2, sp, #15
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	f002 f994 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004cd8:	9600      	str	r6, [sp, #0]
 8004cda:	f10d 030e 	add.w	r3, sp, #14
 8004cde:	f10d 020f 	add.w	r2, sp, #15
 8004ce2:	6821      	ldr	r1, [r4, #0]
 8004ce4:	4628      	mov	r0, r5
  txdt = value;
 8004ce6:	2784      	movs	r7, #132	; 0x84
 8004ce8:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004cec:	f002 fa34 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004cf0:	88a1      	ldrh	r1, [r4, #4]
 8004cf2:	68e0      	ldr	r0, [r4, #12]
 8004cf4:	f001 fd5c 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004cf8:	88a1      	ldrh	r1, [r4, #4]
 8004cfa:	68e0      	ldr	r0, [r4, #12]
 8004cfc:	f001 fd60 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004d00:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d02:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004d04:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d08:	4633      	mov	r3, r6
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f10d 020f 	add.w	r2, sp, #15
 8004d10:	f002 f976 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d14:	9600      	str	r6, [sp, #0]
 8004d16:	6821      	ldr	r1, [r4, #0]
 8004d18:	4628      	mov	r0, r5
  txdt = value;
 8004d1a:	232b      	movs	r3, #43	; 0x2b
 8004d1c:	e002      	b.n	8004d24 <_ZN6sx127x4initEP3spilhm+0x394>
 8004d1e:	bf00      	nop
 8004d20:	01e84800 	.word	0x01e84800
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d24:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8004d28:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d2c:	f10d 030e 	add.w	r3, sp, #14
 8004d30:	f002 fa12 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004d34:	88a1      	ldrh	r1, [r4, #4]
 8004d36:	68e0      	ldr	r0, [r4, #12]
 8004d38:	f001 fd3a 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004d3c:	88a1      	ldrh	r1, [r4, #4]
 8004d3e:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d40:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 8004d42:	f001 fd3d 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004d46:	2689      	movs	r6, #137	; 0x89
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d48:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004d4a:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d4e:	f10d 020f 	add.w	r2, sp, #15
 8004d52:	4628      	mov	r0, r5
 8004d54:	2301      	movs	r3, #1
 8004d56:	f002 f953 	bl	8007000 <_ZN3spi8transmitEmm>
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8004d5a:	f1a8 0802 	sub.w	r8, r8, #2
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d5e:	9700      	str	r7, [sp, #0]
 8004d60:	f10d 030e 	add.w	r3, sp, #14
 8004d64:	f10d 020f 	add.w	r2, sp, #15
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	4628      	mov	r0, r5
		writeRegister(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8004d6c:	f068 087f 	orn	r8, r8, #127	; 0x7f
  txdt = value;
 8004d70:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d74:	f002 f9f0 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004d78:	88a1      	ldrh	r1, [r4, #4]
 8004d7a:	68e0      	ldr	r0, [r4, #12]
 8004d7c:	f001 fd18 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004d80:	88a1      	ldrh	r1, [r4, #4]
 8004d82:	68e0      	ldr	r0, [r4, #12]
 8004d84:	f001 fd1c 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004d88:	261e      	movs	r6, #30
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d8a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004d8c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004d90:	463b      	mov	r3, r7
 8004d92:	f10d 020f 	add.w	r2, sp, #15
 8004d96:	4628      	mov	r0, r5
 8004d98:	f002 f932 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004d9c:	9700      	str	r7, [sp, #0]
 8004d9e:	f10d 030e 	add.w	r3, sp, #14
 8004da2:	f10d 020f 	add.w	r2, sp, #15
 8004da6:	6821      	ldr	r1, [r4, #0]
 8004da8:	4628      	mov	r0, r5
  txdt = value;
 8004daa:	2600      	movs	r6, #0
 8004dac:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004db0:	f002 f9d2 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004db4:	88a1      	ldrh	r1, [r4, #4]
 8004db6:	68e0      	ldr	r0, [r4, #12]
 8004db8:	f001 fcfa 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004dbc:	88a1      	ldrh	r1, [r4, #4]
 8004dbe:	68e0      	ldr	r0, [r4, #12]
  return response;
 8004dc0:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8004dc4:	f001 fcfc 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004dc8:	f04f 0c9e 	mov.w	ip, #158	; 0x9e
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004dcc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004dce:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	f10d 020f 	add.w	r2, sp, #15
 8004dd8:	4628      	mov	r0, r5
 8004dda:	f002 f911 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004dde:	9700      	str	r7, [sp, #0]
 8004de0:	f10d 030e 	add.w	r3, sp, #14
 8004de4:	f10d 020f 	add.w	r2, sp, #15
 8004de8:	6821      	ldr	r1, [r4, #0]
 8004dea:	4628      	mov	r0, r5
	writeRegister(REG_MODEM_CONFIG_2, readRegister(REG_MODEM_CONFIG_2) | 0x04);
 8004dec:	f046 0604 	orr.w	r6, r6, #4
  txdt = value;
 8004df0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004df4:	f002 f9b0 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004df8:	88a1      	ldrh	r1, [r4, #4]
 8004dfa:	68e0      	ldr	r0, [r4, #12]
 8004dfc:	f001 fcd8 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004e00:	88a1      	ldrh	r1, [r4, #4]
 8004e02:	68e0      	ldr	r0, [r4, #12]
 8004e04:	f001 fcdc 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004e08:	2681      	movs	r6, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e0a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004e0c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e10:	463b      	mov	r3, r7
 8004e12:	f10d 020f 	add.w	r2, sp, #15
 8004e16:	4628      	mov	r0, r5
 8004e18:	f002 f8f2 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e1c:	9700      	str	r7, [sp, #0]
 8004e1e:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004e20:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e24:	f10d 030e 	add.w	r3, sp, #14
 8004e28:	f10d 020f 	add.w	r2, sp, #15
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	f002 f993 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004e32:	68e0      	ldr	r0, [r4, #12]
 8004e34:	88a1      	ldrh	r1, [r4, #4]
 8004e36:	f001 fcbb 	bl	80067b0 <gpio_set>
	return true;
 8004e3a:	4638      	mov	r0, r7
}
 8004e3c:	b006      	add	sp, #24
 8004e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (level > 20) level = 20;
 8004e42:	f1b8 0f14 	cmp.w	r8, #20
  gpio_reset(_csport, _cs);
 8004e46:	88a1      	ldrh	r1, [r4, #4]
 8004e48:	68e0      	ldr	r0, [r4, #12]
 8004e4a:	bf28      	it	cs
 8004e4c:	f04f 0814 	movcs.w	r8, #20
  txdt = address;
 8004e50:	27cd      	movs	r7, #205	; 0xcd
  gpio_reset(_csport, _cs);
 8004e52:	f001 fcb5 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e56:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004e58:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e5c:	4633      	mov	r3, r6
 8004e5e:	f10d 020f 	add.w	r2, sp, #15
 8004e62:	4628      	mov	r0, r5
 8004e64:	f002 f8cc 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e68:	9600      	str	r6, [sp, #0]
 8004e6a:	f10d 030e 	add.w	r3, sp, #14
 8004e6e:	f10d 020f 	add.w	r2, sp, #15
 8004e72:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004e74:	f88d 900f 	strb.w	r9, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004e78:	4628      	mov	r0, r5
 8004e7a:	f002 f96d 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004e7e:	88a1      	ldrh	r1, [r4, #4]
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	f001 fc95 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8004e86:	88a1      	ldrh	r1, [r4, #4]
 8004e88:	68e0      	ldr	r0, [r4, #12]
 8004e8a:	f001 fc99 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004e8e:	278b      	movs	r7, #139	; 0x8b
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e90:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004e92:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004e96:	4633      	mov	r3, r6
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f10d 020f 	add.w	r2, sp, #15
 8004e9e:	f002 f8af 	bl	8007000 <_ZN3spi8transmitEmm>
			level -= 3;
 8004ea2:	f1a8 0803 	sub.w	r8, r8, #3
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ea6:	9600      	str	r6, [sp, #0]
 8004ea8:	6821      	ldr	r1, [r4, #0]
			level -= 3;
 8004eaa:	fa5f f888 	uxtb.w	r8, r8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004eae:	4628      	mov	r0, r5
  txdt = value;
 8004eb0:	2331      	movs	r3, #49	; 0x31
 8004eb2:	e737      	b.n	8004d24 <_ZN6sx127x4initEP3spilhm+0x394>

08004eb4 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>:
	RxDoneHandler = RxHandler;
 8004eb4:	e9c0 1209 	strd	r1, r2, [r0, #36]	; 0x24
}
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop

08004ebc <_ZN6sx127x11beginPacketEb>:
bool sx127x::beginPacket(bool implicitHeader){
 8004ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	b087      	sub	sp, #28
  txdt = address;
 8004ec2:	2601      	movs	r6, #1
  gpio_reset(_csport, _cs);
 8004ec4:	68c0      	ldr	r0, [r0, #12]
bool sx127x::beginPacket(bool implicitHeader){
 8004ec6:	460f      	mov	r7, r1
  gpio_reset(_csport, _cs);
 8004ec8:	88a1      	ldrh	r1, [r4, #4]
 8004eca:	f001 fc79 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ece:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004ed0:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004ed4:	4633      	mov	r3, r6
 8004ed6:	f10d 020f 	add.w	r2, sp, #15
 8004eda:	a804      	add	r0, sp, #16
 8004edc:	f002 f890 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ee0:	9600      	str	r6, [sp, #0]
 8004ee2:	f10d 030e 	add.w	r3, sp, #14
 8004ee6:	6821      	ldr	r1, [r4, #0]
 8004ee8:	f10d 020f 	add.w	r2, sp, #15
 8004eec:	a804      	add	r0, sp, #16
  txdt = value;
 8004eee:	2500      	movs	r5, #0
 8004ef0:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ef4:	f002 f930 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004ef8:	88a1      	ldrh	r1, [r4, #4]
 8004efa:	68e0      	ldr	r0, [r4, #12]
 8004efc:	f001 fc58 	bl	80067b0 <gpio_set>
  return response;
 8004f00:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((readRegister(REG_OP_MODE) & MODE_TX) == MODE_TX) return true;
 8004f04:	f003 0303 	and.w	r3, r3, #3
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	f000 80e1 	beq.w	80050d0 <_ZN6sx127x11beginPacketEb+0x214>
  gpio_reset(_csport, _cs);
 8004f0e:	88a1      	ldrh	r1, [r4, #4]
 8004f10:	68e0      	ldr	r0, [r4, #12]
 8004f12:	f001 fc55 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004f16:	f04f 0c12 	mov.w	ip, #18
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f1a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004f1c:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f20:	4633      	mov	r3, r6
 8004f22:	f10d 020f 	add.w	r2, sp, #15
 8004f26:	a804      	add	r0, sp, #16
 8004f28:	f002 f86a 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f2c:	9600      	str	r6, [sp, #0]
 8004f2e:	f10d 030e 	add.w	r3, sp, #14
 8004f32:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8004f34:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f38:	f10d 020f 	add.w	r2, sp, #15
 8004f3c:	a804      	add	r0, sp, #16
 8004f3e:	f002 f90b 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004f42:	88a1      	ldrh	r1, [r4, #4]
 8004f44:	68e0      	ldr	r0, [r4, #12]
 8004f46:	f001 fc33 	bl	80067b0 <gpio_set>
  return response;
 8004f4a:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) writeRegister(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8004f4e:	071b      	lsls	r3, r3, #28
 8004f50:	f100 809f 	bmi.w	8005092 <_ZN6sx127x11beginPacketEb+0x1d6>
  gpio_reset(_csport, _cs);
 8004f54:	88a1      	ldrh	r1, [r4, #4]
 8004f56:	68e0      	ldr	r0, [r4, #12]
 8004f58:	f001 fc32 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004f5c:	2581      	movs	r5, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f5e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004f60:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004f64:	2301      	movs	r3, #1
 8004f66:	f10d 020f 	add.w	r2, sp, #15
 8004f6a:	a804      	add	r0, sp, #16
 8004f6c:	f002 f848 	bl	8007000 <_ZN3spi8transmitEmm>
  txdt = value;
 8004f70:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004f74:	2501      	movs	r5, #1
 8004f76:	9500      	str	r5, [sp, #0]
 8004f78:	6821      	ldr	r1, [r4, #0]
 8004f7a:	a804      	add	r0, sp, #16
 8004f7c:	f10d 030e 	add.w	r3, sp, #14
 8004f80:	f10d 020f 	add.w	r2, sp, #15
 8004f84:	f002 f8e8 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004f88:	88a1      	ldrh	r1, [r4, #4]
 8004f8a:	68e0      	ldr	r0, [r4, #12]
 8004f8c:	f001 fc10 	bl	80067b0 <gpio_set>
	if (implicitHeader) implicitHeaderMode();
 8004f90:	2f00      	cmp	r7, #0
 8004f92:	f000 80a0 	beq.w	80050d6 <_ZN6sx127x11beginPacketEb+0x21a>
  gpio_reset(_csport, _cs);
 8004f96:	88a1      	ldrh	r1, [r4, #4]
 8004f98:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8004f9a:	61e5      	str	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 8004f9c:	f001 fc10 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004fa0:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004fa2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004fa4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004fa8:	462b      	mov	r3, r5
 8004faa:	f10d 020f 	add.w	r2, sp, #15
 8004fae:	a804      	add	r0, sp, #16
 8004fb0:	f002 f826 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004fb4:	9500      	str	r5, [sp, #0]
 8004fb6:	f10d 030e 	add.w	r3, sp, #14
 8004fba:	f10d 020f 	add.w	r2, sp, #15
 8004fbe:	6821      	ldr	r1, [r4, #0]
 8004fc0:	a804      	add	r0, sp, #16
  txdt = value;
 8004fc2:	2600      	movs	r6, #0
 8004fc4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004fc8:	f002 f8c6 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8004fcc:	88a1      	ldrh	r1, [r4, #4]
 8004fce:	68e0      	ldr	r0, [r4, #12]
 8004fd0:	f001 fbee 	bl	80067b0 <gpio_set>
  return response;
 8004fd4:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8004fd8:	88a1      	ldrh	r1, [r4, #4]
 8004fda:	68e0      	ldr	r0, [r4, #12]
 8004fdc:	f001 fbf0 	bl	80067c0 <gpio_reset>
  txdt = address;
 8004fe0:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004fe2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8004fe4:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8004fe8:	462b      	mov	r3, r5
 8004fea:	f10d 020f 	add.w	r2, sp, #15
 8004fee:	a804      	add	r0, sp, #16
 8004ff0:	f002 f806 	bl	8007000 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 8004ff4:	432e      	orrs	r6, r5
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8004ff6:	9500      	str	r5, [sp, #0]
 8004ff8:	f10d 030e 	add.w	r3, sp, #14
 8004ffc:	f10d 020f 	add.w	r2, sp, #15
 8005000:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005002:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005006:	a804      	add	r0, sp, #16
 8005008:	f002 f8a6 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800500c:	88a1      	ldrh	r1, [r4, #4]
 800500e:	68e0      	ldr	r0, [r4, #12]
 8005010:	f001 fbce 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8005014:	88a1      	ldrh	r1, [r4, #4]
 8005016:	68e0      	ldr	r0, [r4, #12]
 8005018:	f001 fbd2 	bl	80067c0 <gpio_reset>
  txdt = address;
 800501c:	238d      	movs	r3, #141	; 0x8d
 800501e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005022:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005024:	461d      	mov	r5, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005026:	6821      	ldr	r1, [r4, #0]
 8005028:	f10d 020f 	add.w	r2, sp, #15
 800502c:	a804      	add	r0, sp, #16
 800502e:	f001 ffe7 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005032:	9500      	str	r5, [sp, #0]
 8005034:	f10d 030e 	add.w	r3, sp, #14
 8005038:	f10d 020f 	add.w	r2, sp, #15
 800503c:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800503e:	2600      	movs	r6, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005040:	a804      	add	r0, sp, #16
  txdt = value;
 8005042:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005046:	f002 f887 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800504a:	88a1      	ldrh	r1, [r4, #4]
 800504c:	68e0      	ldr	r0, [r4, #12]
 800504e:	f001 fbaf 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8005052:	88a1      	ldrh	r1, [r4, #4]
 8005054:	68e0      	ldr	r0, [r4, #12]
 8005056:	f001 fbb3 	bl	80067c0 <gpio_reset>
  txdt = address;
 800505a:	27a2      	movs	r7, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 800505c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800505e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005062:	462b      	mov	r3, r5
 8005064:	f10d 020f 	add.w	r2, sp, #15
 8005068:	a804      	add	r0, sp, #16
 800506a:	f001 ffc9 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800506e:	9500      	str	r5, [sp, #0]
 8005070:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005072:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005076:	f10d 030e 	add.w	r3, sp, #14
 800507a:	f10d 020f 	add.w	r2, sp, #15
 800507e:	a804      	add	r0, sp, #16
 8005080:	f002 f86a 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005084:	68e0      	ldr	r0, [r4, #12]
 8005086:	88a1      	ldrh	r1, [r4, #4]
 8005088:	f001 fb92 	bl	80067b0 <gpio_set>
	return true;
 800508c:	4628      	mov	r0, r5
}
 800508e:	b007      	add	sp, #28
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 8005092:	88a1      	ldrh	r1, [r4, #4]
 8005094:	68e0      	ldr	r0, [r4, #12]
 8005096:	f001 fb93 	bl	80067c0 <gpio_reset>
  txdt = address;
 800509a:	2592      	movs	r5, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 800509c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800509e:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80050a2:	4633      	mov	r3, r6
 80050a4:	f10d 020f 	add.w	r2, sp, #15
 80050a8:	a804      	add	r0, sp, #16
 80050aa:	f001 ffa9 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80050ae:	9600      	str	r6, [sp, #0]
  txdt = value;
 80050b0:	2308      	movs	r3, #8
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80050b2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80050b4:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80050b8:	a804      	add	r0, sp, #16
 80050ba:	f10d 030e 	add.w	r3, sp, #14
 80050be:	f10d 020f 	add.w	r2, sp, #15
 80050c2:	f002 f849 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80050c6:	88a1      	ldrh	r1, [r4, #4]
 80050c8:	68e0      	ldr	r0, [r4, #12]
 80050ca:	f001 fb71 	bl	80067b0 <gpio_set>
  return response;
 80050ce:	e741      	b.n	8004f54 <_ZN6sx127x11beginPacketEb+0x98>
	if (isTransmitting()) return false;
 80050d0:	4628      	mov	r0, r5
}
 80050d2:	b007      	add	sp, #28
 80050d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  gpio_reset(_csport, _cs);
 80050d6:	88a1      	ldrh	r1, [r4, #4]
 80050d8:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 80050da:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 80050dc:	f001 fb70 	bl	80067c0 <gpio_reset>
  txdt = address;
 80050e0:	261d      	movs	r6, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 80050e2:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80050e4:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80050e8:	462b      	mov	r3, r5
 80050ea:	f10d 020f 	add.w	r2, sp, #15
 80050ee:	a804      	add	r0, sp, #16
 80050f0:	f001 ff86 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80050f4:	9500      	str	r5, [sp, #0]
 80050f6:	f10d 030e 	add.w	r3, sp, #14
 80050fa:	f10d 020f 	add.w	r2, sp, #15
 80050fe:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005100:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005104:	a804      	add	r0, sp, #16
 8005106:	f002 f827 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800510a:	88a1      	ldrh	r1, [r4, #4]
 800510c:	68e0      	ldr	r0, [r4, #12]
 800510e:	f001 fb4f 	bl	80067b0 <gpio_set>
  return response;
 8005112:	f89d 600e 	ldrb.w	r6, [sp, #14]
  gpio_reset(_csport, _cs);
 8005116:	88a1      	ldrh	r1, [r4, #4]
 8005118:	68e0      	ldr	r0, [r4, #12]
 800511a:	f001 fb51 	bl	80067c0 <gpio_reset>
  txdt = address;
 800511e:	279d      	movs	r7, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005120:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005122:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005126:	462b      	mov	r3, r5
 8005128:	f10d 020f 	add.w	r2, sp, #15
 800512c:	a804      	add	r0, sp, #16
 800512e:	f001 ff67 	bl	8007000 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 8005132:	f026 0601 	bic.w	r6, r6, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005136:	9500      	str	r5, [sp, #0]
 8005138:	e75e      	b.n	8004ff8 <_ZN6sx127x11beginPacketEb+0x13c>
 800513a:	bf00      	nop

0800513c <_ZN6sx127x9endPacketEb>:
bool sx127x::endPacket(bool async){
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	4604      	mov	r4, r0
 8005142:	b086      	sub	sp, #24
	if(async && (TxDoneHandler)) writeRegister(REG_DIO_MAPPING_1, 0x40);
 8005144:	460f      	mov	r7, r1
 8005146:	b319      	cbz	r1, 8005190 <_ZN6sx127x9endPacketEb+0x54>
 8005148:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800514a:	b30b      	cbz	r3, 8005190 <_ZN6sx127x9endPacketEb+0x54>
  gpio_reset(_csport, _cs);
 800514c:	8881      	ldrh	r1, [r0, #4]
 800514e:	68c0      	ldr	r0, [r0, #12]
 8005150:	f001 fb36 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005154:	f10d 050f 	add.w	r5, sp, #15
 8005158:	ae04      	add	r6, sp, #16
  txdt = address;
 800515a:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 800515c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800515e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005162:	462a      	mov	r2, r5
 8005164:	4630      	mov	r0, r6
 8005166:	2301      	movs	r3, #1
 8005168:	f001 ff4a 	bl	8007000 <_ZN3spi8transmitEmm>
  txdt = value;
 800516c:	2340      	movs	r3, #64	; 0x40
 800516e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005172:	2301      	movs	r3, #1
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	f10d 080e 	add.w	r8, sp, #14
 800517a:	6821      	ldr	r1, [r4, #0]
 800517c:	4630      	mov	r0, r6
 800517e:	4643      	mov	r3, r8
 8005180:	462a      	mov	r2, r5
 8005182:	f001 ffe9 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005186:	88a1      	ldrh	r1, [r4, #4]
 8005188:	68e0      	ldr	r0, [r4, #12]
 800518a:	f001 fb11 	bl	80067b0 <gpio_set>
  return response;
 800518e:	e004      	b.n	800519a <_ZN6sx127x9endPacketEb+0x5e>
 8005190:	f10d 050f 	add.w	r5, sp, #15
 8005194:	ae04      	add	r6, sp, #16
 8005196:	f10d 080e 	add.w	r8, sp, #14
  gpio_reset(_csport, _cs);
 800519a:	88a1      	ldrh	r1, [r4, #4]
 800519c:	68e0      	ldr	r0, [r4, #12]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800519e:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 80051a2:	f001 fb0d 	bl	80067c0 <gpio_reset>
  txdt = address;
 80051a6:	f04f 0c81 	mov.w	ip, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051aa:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80051ac:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051b0:	464b      	mov	r3, r9
 80051b2:	462a      	mov	r2, r5
 80051b4:	4630      	mov	r0, r6
 80051b6:	f001 ff23 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051ba:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 80051be:	2383      	movs	r3, #131	; 0x83
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051c0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80051c2:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051c6:	4630      	mov	r0, r6
 80051c8:	4643      	mov	r3, r8
 80051ca:	462a      	mov	r2, r5
 80051cc:	f001 ffc4 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80051d0:	88a1      	ldrh	r1, [r4, #4]
 80051d2:	68e0      	ldr	r0, [r4, #12]
 80051d4:	f001 faec 	bl	80067b0 <gpio_set>
	if(!async){
 80051d8:	2f00      	cmp	r7, #0
 80051da:	d13b      	bne.n	8005254 <_ZN6sx127x9endPacketEb+0x118>
  txdt = address;
 80051dc:	f04f 0a12 	mov.w	sl, #18
  gpio_reset(_csport, _cs);
 80051e0:	88a1      	ldrh	r1, [r4, #4]
 80051e2:	68e0      	ldr	r0, [r4, #12]
 80051e4:	f001 faec 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051e8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80051ea:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80051ee:	2301      	movs	r3, #1
 80051f0:	462a      	mov	r2, r5
 80051f2:	4630      	mov	r0, r6
 80051f4:	f001 ff04 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80051f8:	6821      	ldr	r1, [r4, #0]
 80051fa:	f8cd 9000 	str.w	r9, [sp]
 80051fe:	4643      	mov	r3, r8
 8005200:	462a      	mov	r2, r5
 8005202:	4630      	mov	r0, r6
  txdt = value;
 8005204:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005208:	f001 ffa6 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800520c:	88a1      	ldrh	r1, [r4, #4]
 800520e:	68e0      	ldr	r0, [r4, #12]
 8005210:	f001 face 	bl	80067b0 <gpio_set>
  return response;
 8005214:	f89d 300e 	ldrb.w	r3, [sp, #14]
		while ((readRegister(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0);
 8005218:	071b      	lsls	r3, r3, #28
 800521a:	d5e1      	bpl.n	80051e0 <_ZN6sx127x9endPacketEb+0xa4>
  gpio_reset(_csport, _cs);
 800521c:	88a1      	ldrh	r1, [r4, #4]
 800521e:	68e0      	ldr	r0, [r4, #12]
 8005220:	f001 face 	bl	80067c0 <gpio_reset>
  txdt = address;
 8005224:	2792      	movs	r7, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005226:	462a      	mov	r2, r5
 8005228:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800522a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800522e:	2301      	movs	r3, #1
 8005230:	4630      	mov	r0, r6
 8005232:	f001 fee5 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005236:	f8cd 9000 	str.w	r9, [sp]
 800523a:	6821      	ldr	r1, [r4, #0]
 800523c:	4630      	mov	r0, r6
 800523e:	462a      	mov	r2, r5
 8005240:	4643      	mov	r3, r8
  txdt = value;
 8005242:	2508      	movs	r5, #8
 8005244:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005248:	f001 ff86 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800524c:	88a1      	ldrh	r1, [r4, #4]
 800524e:	68e0      	ldr	r0, [r4, #12]
 8005250:	f001 faae 	bl	80067b0 <gpio_set>
}
 8005254:	2001      	movs	r0, #1
 8005256:	b006      	add	sp, #24
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800525c <_ZN6sx127x10packetRssiEv>:
int sx127x::packetRssi(void){
 800525c:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 800525e:	8881      	ldrh	r1, [r0, #4]
int sx127x::packetRssi(void){
 8005260:	b087      	sub	sp, #28
 8005262:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005264:	68c0      	ldr	r0, [r0, #12]
 8005266:	f001 faab 	bl	80067c0 <gpio_reset>
  txdt = address;
 800526a:	231a      	movs	r3, #26
  _spi -> transmit((uint32_t)(&txdt), 1);
 800526c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800526e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005272:	f10d 020f 	add.w	r2, sp, #15
 8005276:	a804      	add	r0, sp, #16
 8005278:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800527a:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 800527c:	f001 fec0 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005280:	6821      	ldr	r1, [r4, #0]
 8005282:	9500      	str	r5, [sp, #0]
 8005284:	f10d 030e 	add.w	r3, sp, #14
 8005288:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 800528c:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005290:	a804      	add	r0, sp, #16
  txdt = value;
 8005292:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005296:	f001 ff5f 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800529a:	68e0      	ldr	r0, [r4, #12]
 800529c:	88a1      	ldrh	r1, [r4, #4]
 800529e:	f001 fa87 	bl	80067b0 <gpio_set>
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 80052a2:	4a05      	ldr	r2, [pc, #20]	; (80052b8 <_ZN6sx127x10packetRssiEv+0x5c>)
 80052a4:	6a23      	ldr	r3, [r4, #32]
  return response;
 80052a6:	f89d 000e 	ldrb.w	r0, [sp, #14]
	return (int)(readRegister(REG_PKT_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 80052aa:	4293      	cmp	r3, r2
 80052ac:	bfd4      	ite	le
 80052ae:	23a4      	movle	r3, #164	; 0xa4
 80052b0:	239d      	movgt	r3, #157	; 0x9d
}
 80052b2:	1ac0      	subs	r0, r0, r3
 80052b4:	b007      	add	sp, #28
 80052b6:	bd30      	pop	{r4, r5, pc}
 80052b8:	1f4add3f 	.word	0x1f4add3f

080052bc <_ZN6sx127x9packetSnrEv>:
float sx127x::packetSnr(void){
 80052bc:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 80052be:	8881      	ldrh	r1, [r0, #4]
float sx127x::packetSnr(void){
 80052c0:	b087      	sub	sp, #28
 80052c2:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 80052c4:	68c0      	ldr	r0, [r0, #12]
 80052c6:	f001 fa7b 	bl	80067c0 <gpio_reset>
  txdt = address;
 80052ca:	2319      	movs	r3, #25
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052cc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80052ce:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052d2:	f10d 020f 	add.w	r2, sp, #15
 80052d6:	a804      	add	r0, sp, #16
 80052d8:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052da:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 80052dc:	f001 fe90 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052e0:	9500      	str	r5, [sp, #0]
  txdt = value;
 80052e2:	2100      	movs	r1, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052e4:	f10d 030e 	add.w	r3, sp, #14
 80052e8:	f10d 020f 	add.w	r2, sp, #15
 80052ec:	a804      	add	r0, sp, #16
  txdt = value;
 80052ee:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80052f2:	6821      	ldr	r1, [r4, #0]
 80052f4:	f001 ff30 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80052f8:	88a1      	ldrh	r1, [r4, #4]
 80052fa:	68e0      	ldr	r0, [r4, #12]
 80052fc:	f001 fa58 	bl	80067b0 <gpio_set>
	return ((int8_t)readRegister(REG_PKT_SNR_VALUE)) * 0.25;
 8005300:	f99d 000e 	ldrsb.w	r0, [sp, #14]
 8005304:	f7fb f92e 	bl	8000564 <__aeabi_i2d>
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <_ZN6sx127x9packetSnrEv+0x60>)
 800530a:	2200      	movs	r2, #0
 800530c:	f7fb f994 	bl	8000638 <__aeabi_dmul>
 8005310:	f7fb fc8a 	bl	8000c28 <__aeabi_d2f>
}
 8005314:	ee00 0a10 	vmov	s0, r0
 8005318:	b007      	add	sp, #28
 800531a:	bd30      	pop	{r4, r5, pc}
 800531c:	3fd00000 	.word	0x3fd00000

08005320 <_ZN6sx127x4rssiEv>:
int16_t sx127x::rssi(void){
 8005320:	b530      	push	{r4, r5, lr}
  gpio_reset(_csport, _cs);
 8005322:	8881      	ldrh	r1, [r0, #4]
int16_t sx127x::rssi(void){
 8005324:	b087      	sub	sp, #28
 8005326:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005328:	68c0      	ldr	r0, [r0, #12]
 800532a:	f001 fa49 	bl	80067c0 <gpio_reset>
  txdt = address;
 800532e:	231b      	movs	r3, #27
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005330:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005332:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005336:	f10d 020f 	add.w	r2, sp, #15
 800533a:	a804      	add	r0, sp, #16
 800533c:	2301      	movs	r3, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800533e:	2501      	movs	r5, #1
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005340:	f001 fe5e 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005344:	6821      	ldr	r1, [r4, #0]
 8005346:	9500      	str	r5, [sp, #0]
 8005348:	f10d 030e 	add.w	r3, sp, #14
 800534c:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 8005350:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005354:	a804      	add	r0, sp, #16
  txdt = value;
 8005356:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800535a:	f001 fefd 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800535e:	68e0      	ldr	r0, [r4, #12]
 8005360:	88a1      	ldrh	r1, [r4, #4]
 8005362:	f001 fa25 	bl	80067b0 <gpio_set>
    return (readRegister(REG_RSSI_VALUE) - (_frequency < RF_MID_BAND_THRESHOLD ? RSSI_OFFSET_LF_PORT : RSSI_OFFSET_HF_PORT));
 8005366:	4a05      	ldr	r2, [pc, #20]	; (800537c <_ZN6sx127x4rssiEv+0x5c>)
 8005368:	6a23      	ldr	r3, [r4, #32]
 800536a:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800536e:	4293      	cmp	r3, r2
 8005370:	bfd4      	ite	le
 8005372:	23a4      	movle	r3, #164	; 0xa4
 8005374:	239d      	movgt	r3, #157	; 0x9d
}
 8005376:	1ac0      	subs	r0, r0, r3
 8005378:	b007      	add	sp, #28
 800537a:	bd30      	pop	{r4, r5, pc}
 800537c:	1f4add3f 	.word	0x1f4add3f

08005380 <_ZN6sx127x8transmitEPKhj>:
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 8005380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005384:	4604      	mov	r4, r0
 8005386:	b087      	sub	sp, #28
  gpio_reset(_csport, _cs);
 8005388:	68c0      	ldr	r0, [r0, #12]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 800538a:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 800538c:	88a1      	ldrh	r1, [r4, #4]
size_t sx127x::transmit(const uint8_t *buffer, size_t size){
 800538e:	4691      	mov	r9, r2
  gpio_reset(_csport, _cs);
 8005390:	f001 fa16 	bl	80067c0 <gpio_reset>
  txdt = address;
 8005394:	2322      	movs	r3, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005396:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005398:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800539c:	f10d 020f 	add.w	r2, sp, #15
 80053a0:	2301      	movs	r3, #1
 80053a2:	a804      	add	r0, sp, #16
 80053a4:	f001 fe2c 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053a8:	2301      	movs	r3, #1
 80053aa:	9300      	str	r3, [sp, #0]
 80053ac:	6821      	ldr	r1, [r4, #0]
 80053ae:	f10d 030e 	add.w	r3, sp, #14
 80053b2:	f10d 020f 	add.w	r2, sp, #15
 80053b6:	a804      	add	r0, sp, #16
  txdt = value;
 80053b8:	2600      	movs	r6, #0
 80053ba:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80053be:	f001 fecb 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80053c2:	88a1      	ldrh	r1, [r4, #4]
 80053c4:	68e0      	ldr	r0, [r4, #12]
 80053c6:	f001 f9f3 	bl	80067b0 <gpio_set>
  return response;
 80053ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if ((currentLength + size) > MAX_PKT_LENGTH) size = MAX_PKT_LENGTH - currentLength;
 80053ce:	eb03 0a09 	add.w	sl, r3, r9
 80053d2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 80053d6:	bf84      	itt	hi
 80053d8:	f1c3 09ff 	rsbhi	r9, r3, #255	; 0xff
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 80053dc:	f04f 0aff 	movhi.w	sl, #255	; 0xff
 80053e0:	f1b9 0f00 	cmp.w	r9, #0
 80053e4:	d025      	beq.n	8005432 <_ZN6sx127x8transmitEPKhj+0xb2>
 80053e6:	3d01      	subs	r5, #1
 80053e8:	eb05 0b09 	add.w	fp, r5, r9
  txdt = address;
 80053ec:	f04f 0880 	mov.w	r8, #128	; 0x80
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053f0:	2701      	movs	r7, #1
  gpio_reset(_csport, _cs);
 80053f2:	88a1      	ldrh	r1, [r4, #4]
 80053f4:	68e0      	ldr	r0, [r4, #12]
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 80053f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
  gpio_reset(_csport, _cs);
 80053fa:	f001 f9e1 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80053fe:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005400:	f88d 800f 	strb.w	r8, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005404:	2301      	movs	r3, #1
 8005406:	f10d 020f 	add.w	r2, sp, #15
 800540a:	a804      	add	r0, sp, #16
 800540c:	f001 fdf8 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005410:	6821      	ldr	r1, [r4, #0]
 8005412:	9700      	str	r7, [sp, #0]
 8005414:	a804      	add	r0, sp, #16
 8005416:	f10d 030e 	add.w	r3, sp, #14
 800541a:	f10d 020f 	add.w	r2, sp, #15
  txdt = value;
 800541e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005422:	f001 fe99 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005426:	88a1      	ldrh	r1, [r4, #4]
 8005428:	68e0      	ldr	r0, [r4, #12]
 800542a:	f001 f9c1 	bl	80067b0 <gpio_set>
	for (size_t i = 0; i < size; i++) writeRegister(REG_FIFO, buffer[i]);
 800542e:	45ab      	cmp	fp, r5
 8005430:	d1df      	bne.n	80053f2 <_ZN6sx127x8transmitEPKhj+0x72>
  gpio_reset(_csport, _cs);
 8005432:	88a1      	ldrh	r1, [r4, #4]
 8005434:	68e0      	ldr	r0, [r4, #12]
 8005436:	f001 f9c3 	bl	80067c0 <gpio_reset>
  txdt = address;
 800543a:	23a2      	movs	r3, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 800543c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800543e:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005442:	f10d 020f 	add.w	r2, sp, #15
 8005446:	a804      	add	r0, sp, #16
 8005448:	2301      	movs	r3, #1
 800544a:	f001 fdd9 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800544e:	2101      	movs	r1, #1
 8005450:	9100      	str	r1, [sp, #0]
 8005452:	6821      	ldr	r1, [r4, #0]
 8005454:	a804      	add	r0, sp, #16
 8005456:	f10d 030e 	add.w	r3, sp, #14
 800545a:	f10d 020f 	add.w	r2, sp, #15
	writeRegister(REG_PAYLOAD_LENGTH, currentLength + size);
 800545e:	fa5f fa8a 	uxtb.w	sl, sl
  txdt = value;
 8005462:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005466:	f001 fe77 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800546a:	68e0      	ldr	r0, [r4, #12]
 800546c:	88a1      	ldrh	r1, [r4, #4]
 800546e:	f001 f99f 	bl	80067b0 <gpio_set>
}
 8005472:	4648      	mov	r0, r9
 8005474:	b007      	add	sp, #28
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	bf00      	nop

0800547c <_ZN6sx127x7receiveEPc>:
uint8_t sx127x::receive(char *buffer){
 800547c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005480:	2500      	movs	r5, #0
uint8_t sx127x::receive(char *buffer){
 8005482:	b086      	sub	sp, #24
 8005484:	4604      	mov	r4, r0
 8005486:	4689      	mov	r9, r1
  txdt = address;
 8005488:	f04f 0a13 	mov.w	sl, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 800548c:	2701      	movs	r7, #1
  txdt = value;
 800548e:	462e      	mov	r6, r5
 8005490:	e020      	b.n	80054d4 <_ZN6sx127x7receiveEPc+0x58>
  gpio_reset(_csport, _cs);
 8005492:	88a1      	ldrh	r1, [r4, #4]
 8005494:	68e0      	ldr	r0, [r4, #12]
		_packetIndex++;
 8005496:	61a2      	str	r2, [r4, #24]
  gpio_reset(_csport, _cs);
 8005498:	f001 f992 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800549c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800549e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054a2:	2301      	movs	r3, #1
 80054a4:	f10d 020f 	add.w	r2, sp, #15
 80054a8:	a804      	add	r0, sp, #16
 80054aa:	f001 fda9 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	9700      	str	r7, [sp, #0]
 80054b2:	f10d 030e 	add.w	r3, sp, #14
 80054b6:	f10d 020f 	add.w	r2, sp, #15
 80054ba:	a804      	add	r0, sp, #16
  txdt = value;
 80054bc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054c0:	f001 fe4a 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80054c4:	88a1      	ldrh	r1, [r4, #4]
 80054c6:	68e0      	ldr	r0, [r4, #12]
 80054c8:	f001 f972 	bl	80067b0 <gpio_set>
  return response;
 80054cc:	f89d 300e 	ldrb.w	r3, [sp, #14]
		buffer[i++] = readRegister(REG_FIFO);
 80054d0:	f809 3008 	strb.w	r3, [r9, r8]
  gpio_reset(_csport, _cs);
 80054d4:	88a1      	ldrh	r1, [r4, #4]
 80054d6:	68e0      	ldr	r0, [r4, #12]
 80054d8:	f001 f972 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054dc:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80054de:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80054e2:	f10d 020f 	add.w	r2, sp, #15
 80054e6:	a804      	add	r0, sp, #16
 80054e8:	2301      	movs	r3, #1
 80054ea:	f001 fd89 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80054ee:	6821      	ldr	r1, [r4, #0]
 80054f0:	9700      	str	r7, [sp, #0]
 80054f2:	f10d 030e 	add.w	r3, sp, #14
 80054f6:	f10d 020f 	add.w	r2, sp, #15
 80054fa:	a804      	add	r0, sp, #16
  txdt = value;
 80054fc:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005500:	f001 fe2a 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005504:	68e0      	ldr	r0, [r4, #12]
 8005506:	88a1      	ldrh	r1, [r4, #4]
 8005508:	f001 f952 	bl	80067b0 <gpio_set>
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 800550c:	69a0      	ldr	r0, [r4, #24]
  return response;
 800550e:	f89d 300e 	ldrb.w	r3, [sp, #14]
		_packetIndex++;
 8005512:	1c42      	adds	r2, r0, #1
	return (readRegister(REG_RX_NB_BYTES) - _packetIndex);
 8005514:	b2c0      	uxtb	r0, r0
	while(available()){
 8005516:	4298      	cmp	r0, r3
		buffer[i++] = readRegister(REG_FIFO);
 8005518:	fa5f f885 	uxtb.w	r8, r5
	while(available()){
 800551c:	f105 0501 	add.w	r5, r5, #1
 8005520:	d1b7      	bne.n	8005492 <_ZN6sx127x7receiveEPc+0x16>
}
 8005522:	b006      	add	sp, #24
 8005524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005528 <_ZN6sx127x7ReceiveEh>:
void sx127x::Receive(uint8_t size){
 8005528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 800552c:	6a83      	ldr	r3, [r0, #40]	; 0x28
void sx127x::Receive(uint8_t size){
 800552e:	b086      	sub	sp, #24
 8005530:	4604      	mov	r4, r0
 8005532:	460f      	mov	r7, r1
	if(RxDoneHandler)writeRegister(REG_DIO_MAPPING_1, 0x00); // DIO0 => RXDONE
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 80d4 	beq.w	80056e2 <_ZN6sx127x7ReceiveEh+0x1ba>
  gpio_reset(_csport, _cs);
 800553a:	8881      	ldrh	r1, [r0, #4]
 800553c:	68c0      	ldr	r0, [r0, #12]
 800553e:	f001 f93f 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005542:	f10d 050f 	add.w	r5, sp, #15
  txdt = address;
 8005546:	23c0      	movs	r3, #192	; 0xc0
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005548:	ae04      	add	r6, sp, #16
 800554a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800554c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005550:	462a      	mov	r2, r5
 8005552:	2301      	movs	r3, #1
 8005554:	4630      	mov	r0, r6
 8005556:	f001 fd53 	bl	8007000 <_ZN3spi8transmitEmm>
  txdt = value;
 800555a:	2300      	movs	r3, #0
 800555c:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005560:	2301      	movs	r3, #1
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	f10d 080e 	add.w	r8, sp, #14
 8005568:	6821      	ldr	r1, [r4, #0]
 800556a:	4630      	mov	r0, r6
 800556c:	4643      	mov	r3, r8
 800556e:	462a      	mov	r2, r5
 8005570:	f001 fdf2 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005574:	88a1      	ldrh	r1, [r4, #4]
 8005576:	68e0      	ldr	r0, [r4, #12]
 8005578:	f001 f91a 	bl	80067b0 <gpio_set>
	if (size > 0) {
 800557c:	2f00      	cmp	r7, #0
 800557e:	d07c      	beq.n	800567a <_ZN6sx127x7ReceiveEh+0x152>
	_implicitHeaderMode = 1;
 8005580:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 8005584:	88a1      	ldrh	r1, [r4, #4]
 8005586:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 1;
 8005588:	f8c4 901c 	str.w	r9, [r4, #28]
  gpio_reset(_csport, _cs);
 800558c:	f001 f918 	bl	80067c0 <gpio_reset>
  txdt = address;
 8005590:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005594:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005596:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800559a:	464b      	mov	r3, r9
 800559c:	462a      	mov	r2, r5
 800559e:	4630      	mov	r0, r6
 80055a0:	f001 fd2e 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055a4:	f8cd 9000 	str.w	r9, [sp]
  txdt = value;
 80055a8:	f04f 0c00 	mov.w	ip, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055ac:	4643      	mov	r3, r8
 80055ae:	462a      	mov	r2, r5
 80055b0:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80055b2:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055b6:	4630      	mov	r0, r6
 80055b8:	f001 fdce 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055bc:	88a1      	ldrh	r1, [r4, #4]
 80055be:	68e0      	ldr	r0, [r4, #12]
 80055c0:	f001 f8f6 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 80055c4:	88a1      	ldrh	r1, [r4, #4]
 80055c6:	68e0      	ldr	r0, [r4, #12]
  return response;
 80055c8:	f89d a00e 	ldrb.w	sl, [sp, #14]
  gpio_reset(_csport, _cs);
 80055cc:	f001 f8f8 	bl	80067c0 <gpio_reset>
  txdt = address;
 80055d0:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055d4:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80055d6:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80055da:	464b      	mov	r3, r9
 80055dc:	462a      	mov	r2, r5
 80055de:	4630      	mov	r0, r6
 80055e0:	f001 fd0e 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055e4:	f8cd 9000 	str.w	r9, [sp]
 80055e8:	4643      	mov	r3, r8
 80055ea:	462a      	mov	r2, r5
 80055ec:	6821      	ldr	r1, [r4, #0]
 80055ee:	4630      	mov	r0, r6
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) | 0x01);
 80055f0:	ea4a 0a09 	orr.w	sl, sl, r9
  txdt = value;
 80055f4:	f88d a00f 	strb.w	sl, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80055f8:	f001 fdae 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80055fc:	88a1      	ldrh	r1, [r4, #4]
 80055fe:	68e0      	ldr	r0, [r4, #12]
 8005600:	f001 f8d6 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 8005604:	88a1      	ldrh	r1, [r4, #4]
 8005606:	68e0      	ldr	r0, [r4, #12]
 8005608:	f001 f8da 	bl	80067c0 <gpio_reset>
  txdt = address;
 800560c:	f04f 0ca2 	mov.w	ip, #162	; 0xa2
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005610:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005612:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005616:	464b      	mov	r3, r9
 8005618:	462a      	mov	r2, r5
 800561a:	4630      	mov	r0, r6
 800561c:	f001 fcf0 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005620:	f8cd 9000 	str.w	r9, [sp]
 8005624:	4643      	mov	r3, r8
 8005626:	462a      	mov	r2, r5
 8005628:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800562a:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800562e:	4630      	mov	r0, r6
 8005630:	f001 fd92 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005634:	88a1      	ldrh	r1, [r4, #4]
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	f001 f8ba 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 800563c:	88a1      	ldrh	r1, [r4, #4]
 800563e:	68e0      	ldr	r0, [r4, #12]
 8005640:	f001 f8be 	bl	80067c0 <gpio_reset>
  txdt = address;
 8005644:	2381      	movs	r3, #129	; 0x81
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005646:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005648:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 800564c:	462a      	mov	r2, r5
 800564e:	4630      	mov	r0, r6
 8005650:	2301      	movs	r3, #1
 8005652:	f001 fcd5 	bl	8007000 <_ZN3spi8transmitEmm>
  txdt = value;
 8005656:	2185      	movs	r1, #133	; 0x85
 8005658:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800565c:	2101      	movs	r1, #1
 800565e:	9100      	str	r1, [sp, #0]
 8005660:	6821      	ldr	r1, [r4, #0]
 8005662:	4630      	mov	r0, r6
 8005664:	4643      	mov	r3, r8
 8005666:	462a      	mov	r2, r5
 8005668:	f001 fd76 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800566c:	88a1      	ldrh	r1, [r4, #4]
 800566e:	68e0      	ldr	r0, [r4, #12]
 8005670:	f001 f89e 	bl	80067b0 <gpio_set>
}
 8005674:	b006      	add	sp, #24
 8005676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800567a:	f04f 0901 	mov.w	r9, #1
  gpio_reset(_csport, _cs);
 800567e:	88a1      	ldrh	r1, [r4, #4]
 8005680:	68e0      	ldr	r0, [r4, #12]
	_implicitHeaderMode = 0;
 8005682:	61e7      	str	r7, [r4, #28]
  gpio_reset(_csport, _cs);
 8005684:	f001 f89c 	bl	80067c0 <gpio_reset>
  txdt = address;
 8005688:	f04f 0c1d 	mov.w	ip, #29
  _spi -> transmit((uint32_t)(&txdt), 1);
 800568c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800568e:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005692:	464b      	mov	r3, r9
 8005694:	462a      	mov	r2, r5
 8005696:	4630      	mov	r0, r6
 8005698:	f001 fcb2 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800569c:	f8cd 9000 	str.w	r9, [sp]
 80056a0:	4643      	mov	r3, r8
 80056a2:	462a      	mov	r2, r5
 80056a4:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80056a6:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056aa:	4630      	mov	r0, r6
 80056ac:	f001 fd54 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80056b0:	88a1      	ldrh	r1, [r4, #4]
 80056b2:	68e0      	ldr	r0, [r4, #12]
 80056b4:	f001 f87c 	bl	80067b0 <gpio_set>
  return response;
 80056b8:	f89d 700e 	ldrb.w	r7, [sp, #14]
  gpio_reset(_csport, _cs);
 80056bc:	88a1      	ldrh	r1, [r4, #4]
 80056be:	68e0      	ldr	r0, [r4, #12]
 80056c0:	f001 f87e 	bl	80067c0 <gpio_reset>
  txdt = address;
 80056c4:	f04f 0c9d 	mov.w	ip, #157	; 0x9d
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056c8:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80056ca:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80056ce:	464b      	mov	r3, r9
 80056d0:	462a      	mov	r2, r5
 80056d2:	4630      	mov	r0, r6
 80056d4:	f001 fc94 	bl	8007000 <_ZN3spi8transmitEmm>
	writeRegister(REG_MODEM_CONFIG_1, readRegister(REG_MODEM_CONFIG_1) & 0xfe);
 80056d8:	f027 0701 	bic.w	r7, r7, #1
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80056dc:	f8cd 9000 	str.w	r9, [sp]
 80056e0:	e7a0      	b.n	8005624 <_ZN6sx127x7ReceiveEh+0xfc>
 80056e2:	f10d 050f 	add.w	r5, sp, #15
 80056e6:	ae04      	add	r6, sp, #16
 80056e8:	f10d 080e 	add.w	r8, sp, #14
 80056ec:	e746      	b.n	800557c <_ZN6sx127x7ReceiveEh+0x54>
 80056ee:	bf00      	nop

080056f0 <_ZN6sx127x11setSyncWordEh>:
void sx127x::setSyncWord(uint8_t sw){
 80056f0:	b530      	push	{r4, r5, lr}
 80056f2:	4604      	mov	r4, r0
 80056f4:	b087      	sub	sp, #28
 80056f6:	460d      	mov	r5, r1
  gpio_reset(_csport, _cs);
 80056f8:	68c0      	ldr	r0, [r0, #12]
 80056fa:	88a1      	ldrh	r1, [r4, #4]
 80056fc:	f001 f860 	bl	80067c0 <gpio_reset>
  txdt = address;
 8005700:	23b9      	movs	r3, #185	; 0xb9
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005702:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005704:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005708:	f10d 020f 	add.w	r2, sp, #15
 800570c:	a804      	add	r0, sp, #16
 800570e:	2301      	movs	r3, #1
 8005710:	f001 fc76 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005714:	2301      	movs	r3, #1
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800571a:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800571e:	a804      	add	r0, sp, #16
 8005720:	f10d 030e 	add.w	r3, sp, #14
 8005724:	f10d 020f 	add.w	r2, sp, #15
 8005728:	f001 fd16 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 800572c:	88a1      	ldrh	r1, [r4, #4]
 800572e:	68e0      	ldr	r0, [r4, #12]
 8005730:	f001 f83e 	bl	80067b0 <gpio_set>
}
 8005734:	b007      	add	sp, #28
 8005736:	bd30      	pop	{r4, r5, pc}

08005738 <_ZN6sx127x10IRQHandlerEv>:
void sx127x::IRQHandler(void){
 8005738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  gpio_reset(_csport, _cs);
 800573c:	8881      	ldrh	r1, [r0, #4]
void sx127x::IRQHandler(void){
 800573e:	b086      	sub	sp, #24
 8005740:	4604      	mov	r4, r0
  gpio_reset(_csport, _cs);
 8005742:	68c0      	ldr	r0, [r0, #12]
 8005744:	f001 f83c 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005748:	2301      	movs	r3, #1
  txdt = address;
 800574a:	2112      	movs	r1, #18
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800574c:	461e      	mov	r6, r3
  _spi -> transmit((uint32_t)(&txdt), 1);
 800574e:	f10d 020f 	add.w	r2, sp, #15
  txdt = address;
 8005752:	f88d 100f 	strb.w	r1, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005756:	a804      	add	r0, sp, #16
 8005758:	6821      	ldr	r1, [r4, #0]
 800575a:	f001 fc51 	bl	8007000 <_ZN3spi8transmitEmm>
  txdt = value;
 800575e:	2300      	movs	r3, #0
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005760:	9600      	str	r6, [sp, #0]
 8005762:	f10d 020f 	add.w	r2, sp, #15
 8005766:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005768:	f88d 300f 	strb.w	r3, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800576c:	a804      	add	r0, sp, #16
 800576e:	f10d 030e 	add.w	r3, sp, #14
 8005772:	f001 fcf1 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005776:	88a1      	ldrh	r1, [r4, #4]
 8005778:	68e0      	ldr	r0, [r4, #12]
 800577a:	f001 f819 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 800577e:	88a1      	ldrh	r1, [r4, #4]
 8005780:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005782:	f89d 500e 	ldrb.w	r5, [sp, #14]
  gpio_reset(_csport, _cs);
 8005786:	f001 f81b 	bl	80067c0 <gpio_reset>
  txdt = address;
 800578a:	f04f 0c92 	mov.w	ip, #146	; 0x92
  _spi -> transmit((uint32_t)(&txdt), 1);
 800578e:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 8005790:	f88d c00f 	strb.w	ip, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005794:	4633      	mov	r3, r6
 8005796:	f10d 020f 	add.w	r2, sp, #15
 800579a:	a804      	add	r0, sp, #16
 800579c:	f001 fc30 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a0:	9600      	str	r6, [sp, #0]
 80057a2:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 80057a4:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057a8:	a804      	add	r0, sp, #16
 80057aa:	f10d 030e 	add.w	r3, sp, #14
 80057ae:	f10d 020f 	add.w	r2, sp, #15
 80057b2:	f001 fcd1 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 80057b6:	88a1      	ldrh	r1, [r4, #4]
 80057b8:	68e0      	ldr	r0, [r4, #12]
 80057ba:	f000 fff9 	bl	80067b0 <gpio_set>
	if ((irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80057be:	f015 0720 	ands.w	r7, r5, #32
 80057c2:	d16d      	bne.n	80058a0 <_ZN6sx127x10IRQHandlerEv+0x168>
		if ((irqFlags & IRQ_RX_DONE_MASK) != 0) {
 80057c4:	066a      	lsls	r2, r5, #25
 80057c6:	d569      	bpl.n	800589c <_ZN6sx127x10IRQHandlerEv+0x164>
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 80057c8:	69e5      	ldr	r5, [r4, #28]
  gpio_reset(_csport, _cs);
 80057ca:	88a1      	ldrh	r1, [r4, #4]
 80057cc:	68e0      	ldr	r0, [r4, #12]
			_packetIndex = 0;
 80057ce:	61a7      	str	r7, [r4, #24]
			uint8_t packetLength = _implicitHeaderMode ? readRegister(REG_PAYLOAD_LENGTH) : readRegister(REG_RX_NB_BYTES);
 80057d0:	2d00      	cmp	r5, #0
 80057d2:	d168      	bne.n	80058a6 <_ZN6sx127x10IRQHandlerEv+0x16e>
  gpio_reset(_csport, _cs);
 80057d4:	f000 fff4 	bl	80067c0 <gpio_reset>
  txdt = address;
 80057d8:	2713      	movs	r7, #19
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057da:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80057dc:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80057e0:	4633      	mov	r3, r6
 80057e2:	f10d 020f 	add.w	r2, sp, #15
 80057e6:	a804      	add	r0, sp, #16
 80057e8:	f001 fc0a 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057ec:	9600      	str	r6, [sp, #0]
  txdt = value;
 80057ee:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80057f2:	f10d 030e 	add.w	r3, sp, #14
 80057f6:	f10d 020f 	add.w	r2, sp, #15
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	a804      	add	r0, sp, #16
 80057fe:	f001 fcab 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005802:	88a1      	ldrh	r1, [r4, #4]
 8005804:	68e0      	ldr	r0, [r4, #12]
 8005806:	f000 ffd3 	bl	80067b0 <gpio_set>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800580a:	2501      	movs	r5, #1
  gpio_reset(_csport, _cs);
 800580c:	88a1      	ldrh	r1, [r4, #4]
 800580e:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005810:	f89d 800e 	ldrb.w	r8, [sp, #14]
  txdt = address;
 8005814:	2610      	movs	r6, #16
  gpio_reset(_csport, _cs);
 8005816:	f000 ffd3 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800581a:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800581c:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005820:	462b      	mov	r3, r5
 8005822:	f10d 020f 	add.w	r2, sp, #15
 8005826:	a804      	add	r0, sp, #16
 8005828:	f001 fbea 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800582c:	9500      	str	r5, [sp, #0]
 800582e:	f10d 030e 	add.w	r3, sp, #14
 8005832:	f10d 020f 	add.w	r2, sp, #15
 8005836:	eb0d 0006 	add.w	r0, sp, r6
 800583a:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 800583c:	2600      	movs	r6, #0
 800583e:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 8005842:	f001 fc89 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005846:	88a1      	ldrh	r1, [r4, #4]
 8005848:	68e0      	ldr	r0, [r4, #12]
 800584a:	f000 ffb1 	bl	80067b0 <gpio_set>
  gpio_reset(_csport, _cs);
 800584e:	88a1      	ldrh	r1, [r4, #4]
 8005850:	68e0      	ldr	r0, [r4, #12]
  return response;
 8005852:	f89d 600e 	ldrb.w	r6, [sp, #14]
  txdt = address;
 8005856:	278d      	movs	r7, #141	; 0x8d
  gpio_reset(_csport, _cs);
 8005858:	f000 ffb2 	bl	80067c0 <gpio_reset>
  _spi -> transmit((uint32_t)(&txdt), 1);
 800585c:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 800585e:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 8005862:	462b      	mov	r3, r5
 8005864:	f10d 020f 	add.w	r2, sp, #15
 8005868:	a804      	add	r0, sp, #16
 800586a:	f001 fbc9 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800586e:	9500      	str	r5, [sp, #0]
 8005870:	f10d 030e 	add.w	r3, sp, #14
 8005874:	6821      	ldr	r1, [r4, #0]
  txdt = value;
 8005876:	f88d 600f 	strb.w	r6, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 800587a:	f10d 020f 	add.w	r2, sp, #15
 800587e:	a804      	add	r0, sp, #16
 8005880:	f001 fc6a 	bl	8007158 <_ZN3spi16transmit_receiveEmmm>
  gpio_set(_csport, _cs);
 8005884:	88a1      	ldrh	r1, [r4, #4]
 8005886:	68e0      	ldr	r0, [r4, #12]
 8005888:	f000 ff92 	bl	80067b0 <gpio_set>
			if (RxDoneHandler) {
 800588c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800588e:	b13b      	cbz	r3, 80058a0 <_ZN6sx127x10IRQHandlerEv+0x168>
				RxDoneHandler(this, packetLength);
 8005890:	4641      	mov	r1, r8
 8005892:	4620      	mov	r0, r4
}
 8005894:	b006      	add	sp, #24
 8005896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				RxDoneHandler(this, packetLength);
 800589a:	4718      	bx	r3
		else if ((irqFlags & IRQ_TX_DONE_MASK) != 0) {
 800589c:	072b      	lsls	r3, r5, #28
 800589e:	d412      	bmi.n	80058c6 <_ZN6sx127x10IRQHandlerEv+0x18e>
}
 80058a0:	b006      	add	sp, #24
 80058a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  gpio_reset(_csport, _cs);
 80058a6:	f000 ff8b 	bl	80067c0 <gpio_reset>
  txdt = address;
 80058aa:	2522      	movs	r5, #34	; 0x22
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058ac:	6821      	ldr	r1, [r4, #0]
  txdt = address;
 80058ae:	f88d 500f 	strb.w	r5, [sp, #15]
  _spi -> transmit((uint32_t)(&txdt), 1);
 80058b2:	4633      	mov	r3, r6
 80058b4:	f10d 020f 	add.w	r2, sp, #15
 80058b8:	a804      	add	r0, sp, #16
 80058ba:	f001 fba1 	bl	8007000 <_ZN3spi8transmitEmm>
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058be:	9600      	str	r6, [sp, #0]
  txdt = value;
 80058c0:	f88d 700f 	strb.w	r7, [sp, #15]
  _spi -> transmit_receive((uint32_t)(&txdt), (uint32_t)(&response), 1);
 80058c4:	e795      	b.n	80057f2 <_ZN6sx127x10IRQHandlerEv+0xba>
			if (TxDoneHandler) {
 80058c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0e9      	beq.n	80058a0 <_ZN6sx127x10IRQHandlerEv+0x168>
				TxDoneHandler(this);
 80058cc:	4620      	mov	r0, r4
}
 80058ce:	b006      	add	sp, #24
 80058d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TxDoneHandler(this);
 80058d4:	4718      	bx	r3
 80058d6:	bf00      	nop

080058d8 <ADC_IRQHandler>:



void ADC_IRQHandler(adc *adc){

}
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	0000      	movs	r0, r0
	...

080058e0 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef>:
	_adc = adc;
 80058e0:	a10f      	add	r1, pc, #60	; (adr r1, 8005920 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x40>)
 80058e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058e6:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8005908 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x28>
 80058ea:	4b09      	ldr	r3, [pc, #36]	; (8005910 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x30>)
 80058ec:	4a09      	ldr	r2, [pc, #36]	; (8005914 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x34>)
 80058ee:	ed83 7b00 	vstr	d7, [r3]
 80058f2:	e9c2 0100 	strd	r0, r1, [r2]
 80058f6:	4b08      	ldr	r3, [pc, #32]	; (8005918 <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x38>)
 80058f8:	4808      	ldr	r0, [pc, #32]	; (800591c <_GLOBAL__sub_I__ZN3adcC2EP11ADC_TypeDef+0x3c>)
 80058fa:	2100      	movs	r1, #0
 80058fc:	e9c3 0100 	strd	r0, r1, [r3]
#if defined(ADC3)
adc adc_3(ADC3);
adc_t adc3;
void ADC3_IRQHandler(void){
	ADC_IRQHandler(adc3);
}
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	f3af 8000 	nop.w
 8005908:	40012000 	.word	0x40012000
 800590c:	00000000 	.word	0x00000000
 8005910:	2000b1f0 	.word	0x2000b1f0
 8005914:	2000b1f8 	.word	0x2000b1f8
 8005918:	2000b200 	.word	0x2000b200
 800591c:	40012200 	.word	0x40012200
 8005920:	40012100 	.word	0x40012100
 8005924:	00000000 	.word	0x00000000

08005928 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	460e      	mov	r6, r1
	stm_ret_t ret;
 800592c:	2201      	movs	r2, #1

	if(_state == STM_BUSY){
 800592e:	7c35      	ldrb	r5, [r6, #16]
	stm_ret_t ret;
 8005930:	7002      	strb	r2, [r0, #0]
 8005932:	2100      	movs	r1, #0
	if(_state == STM_BUSY){
 8005934:	2d04      	cmp	r5, #4
stm_ret_t dma::stop(void){
 8005936:	b085      	sub	sp, #20
 8005938:	4604      	mov	r4, r0
	stm_ret_t ret;
 800593a:	6041      	str	r1, [r0, #4]
	if(_state == STM_BUSY){
 800593c:	d006      	beq.n	800594c <_ZN3dma4stopEv+0x24>
	}
	else{
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
		LOG_ERROR(TAG, "%s -> %s -> DMA state ready, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
 800593e:	f240 122b 	movw	r2, #299	; 0x12b
 8005942:	f003 f9e3 	bl	8008d0c <set_return>
		return ret;
	}

	return ret;
}
 8005946:	4620      	mov	r0, r4
 8005948:	b005      	add	sp, #20
 800594a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 800594c:	460b      	mov	r3, r1
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 800594e:	68f1      	ldr	r1, [r6, #12]
 8005950:	680d      	ldr	r5, [r1, #0]
 8005952:	6829      	ldr	r1, [r5, #0]
		_state = STM_READY;
 8005954:	2005      	movs	r0, #5
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 8005956:	f021 011e 	bic.w	r1, r1, #30
		_state = STM_READY;
 800595a:	7430      	strb	r0, [r6, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 800595c:	6029      	str	r1, [r5, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 800595e:	6969      	ldr	r1, [r5, #20]
 8005960:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005964:	6169      	str	r1, [r5, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 8005966:	6829      	ldr	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8005968:	af02      	add	r7, sp, #8
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 800596a:	f021 0101 	bic.w	r1, r1, #1
 800596e:	6029      	str	r1, [r5, #0]
		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8005970:	9000      	str	r0, [sp, #0]
 8005972:	4629      	mov	r1, r5
 8005974:	4638      	mov	r0, r7
 8005976:	f003 f98d 	bl	8008c94 <wait_flag_in_register_timeout>
 800597a:	e897 0003 	ldmia.w	r7, {r0, r1}
 800597e:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)){
 8005982:	4620      	mov	r0, r4
 8005984:	f003 f9d0 	bl	8008d28 <is_timeout>
 8005988:	bb20      	cbnz	r0, 80059d4 <_ZN3dma4stopEv+0xac>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 800598a:	69b2      	ldr	r2, [r6, #24]
	ClearIFCR((0x3FU << _Intr_Index));
 800598c:	6971      	ldr	r1, [r6, #20]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 800598e:	2a03      	cmp	r2, #3
	ClearIFCR((0x3FU << _Intr_Index));
 8005990:	f04f 033f 	mov.w	r3, #63	; 0x3f
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 8005994:	68b2      	ldr	r2, [r6, #8]
	ClearIFCR((0x3FU << _Intr_Index));
 8005996:	fa03 f301 	lsl.w	r3, r3, r1
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 800599a:	bf94      	ite	ls
 800599c:	6093      	strls	r3, [r2, #8]
 800599e:	60d3      	strhi	r3, [r2, #12]
		__NVIC_ClearPendingIRQ(_IRQn);
 80059a0:	f996 2011 	ldrsb.w	r2, [r6, #17]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	dbce      	blt.n	8005946 <_ZN3dma4stopEv+0x1e>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059a8:	0953      	lsrs	r3, r2, #5
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80059b0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80059b4:	2101      	movs	r1, #1
 80059b6:	f002 021f 	and.w	r2, r2, #31
 80059ba:	fa01 f202 	lsl.w	r2, r1, r2
 80059be:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80059c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80059c6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80059ca:	f3bf 8f6f 	isb	sy
}
 80059ce:	4620      	mov	r0, r4
 80059d0:	b005      	add	sp, #20
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			set_return_line(&ret, __LINE__);
 80059d4:	4620      	mov	r0, r4
 80059d6:	f240 1119 	movw	r1, #281	; 0x119
 80059da:	f003 f99b 	bl	8008d14 <set_return_line>
}
 80059de:	4620      	mov	r0, r4
 80059e0:	b005      	add	sp, #20
 80059e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080059e4 <_ZN3dma11get_counterEv>:

uint16_t dma::get_counter(void){
#if defined(STM32F1)
	return _dma_channel -> CNDTR;
#elif defined(STM32F4)
	return _conf -> stream -> NDTR;
 80059e4:	68c3      	ldr	r3, [r0, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6858      	ldr	r0, [r3, #4]
#endif /* STM32F4 */
}
 80059ea:	b280      	uxth	r0, r0
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop

080059f0 <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
	return _conf;
}
 80059f0:	68c0      	ldr	r0, [r0, #12]
 80059f2:	4770      	bx	lr

080059f4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
#if defined(DMA2_Stream7)
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
__WEAK void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 80059f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
dma::dma(DMA_TypeDef *dma){
 80059f8:	4857      	ldr	r0, [pc, #348]	; (8005b58 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x164>)
 80059fa:	f8df e188 	ldr.w	lr, [pc, #392]	; 8005b84 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x190>
 80059fe:	4f57      	ldr	r7, [pc, #348]	; (8005b5c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x168>)
 8005a00:	4e57      	ldr	r6, [pc, #348]	; (8005b60 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x16c>)
 8005a02:	f8df b184 	ldr.w	fp, [pc, #388]	; 8005b88 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x194>
 8005a06:	f8df a184 	ldr.w	sl, [pc, #388]	; 8005b8c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x198>
 8005a0a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8005b90 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x19c>
 8005a0e:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8005b94 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a0>
 8005a12:	f8df c184 	ldr.w	ip, [pc, #388]	; 8005b98 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x1a4>
	_dma = dma;
 8005a16:	4953      	ldr	r1, [pc, #332]	; (8005b64 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x170>)
 8005a18:	f8cb 1008 	str.w	r1, [fp, #8]
dma::dma(DMA_TypeDef *dma){
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2205      	movs	r2, #5
 8005a20:	f8cb 3014 	str.w	r3, [fp, #20]
	_dma = dma;
 8005a24:	f8ca 1008 	str.w	r1, [sl, #8]
dma::dma(DMA_TypeDef *dma){
 8005a28:	f8ca 3014 	str.w	r3, [sl, #20]
	_dma = dma;
 8005a2c:	f8c9 1008 	str.w	r1, [r9, #8]
dma::dma(DMA_TypeDef *dma){
 8005a30:	f8c9 3014 	str.w	r3, [r9, #20]
 8005a34:	e9cb 3308 	strd	r3, r3, [fp, #32]
 8005a38:	f8c8 3014 	str.w	r3, [r8, #20]
 8005a3c:	e9ca 3308 	strd	r3, r3, [sl, #32]
 8005a40:	e9c9 3308 	strd	r3, r3, [r9, #32]
 8005a44:	e9c8 3308 	strd	r3, r3, [r8, #32]
 8005a48:	f8cb 2010 	str.w	r2, [fp, #16]
 8005a4c:	f8cb 3018 	str.w	r3, [fp, #24]
 8005a50:	f88b 301c 	strb.w	r3, [fp, #28]
 8005a54:	f8ca 2010 	str.w	r2, [sl, #16]
 8005a58:	f8ca 3018 	str.w	r3, [sl, #24]
 8005a5c:	f88a 301c 	strb.w	r3, [sl, #28]
 8005a60:	f8c9 2010 	str.w	r2, [r9, #16]
 8005a64:	f8c9 3018 	str.w	r3, [r9, #24]
 8005a68:	f889 301c 	strb.w	r3, [r9, #28]
 8005a6c:	f8c8 2010 	str.w	r2, [r8, #16]
 8005a70:	f8c8 3018 	str.w	r3, [r8, #24]
 8005a74:	f888 301c 	strb.w	r3, [r8, #28]
 8005a78:	f8ce 2010 	str.w	r2, [lr, #16]
 8005a7c:	f8ce 3014 	str.w	r3, [lr, #20]
 8005a80:	f8ce 3018 	str.w	r3, [lr, #24]
 8005a84:	f88e 301c 	strb.w	r3, [lr, #28]
	_dma = dma;
 8005a88:	f8c8 1008 	str.w	r1, [r8, #8]
dma::dma(DMA_TypeDef *dma){
 8005a8c:	f8cc 3014 	str.w	r3, [ip, #20]
	_dma = dma;
 8005a90:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	6102      	str	r2, [r0, #16]
 8005a96:	6173      	str	r3, [r6, #20]
 8005a98:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8005a9c:	6143      	str	r3, [r0, #20]
 8005a9e:	6132      	str	r2, [r6, #16]
 8005aa0:	61b3      	str	r3, [r6, #24]
 8005aa2:	7733      	strb	r3, [r6, #28]
 8005aa4:	6183      	str	r3, [r0, #24]
 8005aa6:	4606      	mov	r6, r0
 8005aa8:	7703      	strb	r3, [r0, #28]
 8005aaa:	6203      	str	r3, [r0, #32]
 8005aac:	6243      	str	r3, [r0, #36]	; 0x24
 8005aae:	482e      	ldr	r0, [pc, #184]	; (8005b68 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x174>)
	_dma = dma;
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	f8ce 1008 	str.w	r1, [lr, #8]
 8005ab6:	f8cc 1008 	str.w	r1, [ip, #8]
 8005aba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
dma::dma(DMA_TypeDef *dma){
 8005abe:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8005ac2:	613a      	str	r2, [r7, #16]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	773b      	strb	r3, [r7, #28]
 8005ac8:	6102      	str	r2, [r0, #16]
 8005aca:	6143      	str	r3, [r0, #20]
 8005acc:	e9cc 3308 	strd	r3, r3, [ip, #32]
 8005ad0:	f8ce 3020 	str.w	r3, [lr, #32]
 8005ad4:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
 8005ad8:	f8cc 2010 	str.w	r2, [ip, #16]
 8005adc:	f8cc 3018 	str.w	r3, [ip, #24]
 8005ae0:	f88c 301c 	strb.w	r3, [ip, #28]
	_dma = dma;
 8005ae4:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005ae6:	4e21      	ldr	r6, [pc, #132]	; (8005b6c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8005ae8:	4f21      	ldr	r7, [pc, #132]	; (8005b70 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x17c>)
 8005aea:	6173      	str	r3, [r6, #20]
 8005aec:	4e21      	ldr	r6, [pc, #132]	; (8005b74 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	6173      	str	r3, [r6, #20]
 8005af2:	4e1e      	ldr	r6, [pc, #120]	; (8005b6c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x178>)
 8005af4:	4d20      	ldr	r5, [pc, #128]	; (8005b78 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x184>)
 8005af6:	6132      	str	r2, [r6, #16]
 8005af8:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8005afc:	61b3      	str	r3, [r6, #24]
 8005afe:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8005b00:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005b02:	6183      	str	r3, [r0, #24]
 8005b04:	4e1b      	ldr	r6, [pc, #108]	; (8005b74 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x180>)
 8005b06:	7703      	strb	r3, [r0, #28]
 8005b08:	6203      	str	r3, [r0, #32]
 8005b0a:	6243      	str	r3, [r0, #36]	; 0x24
	_dma = dma;
 8005b0c:	6081      	str	r1, [r0, #8]
dma::dma(DMA_TypeDef *dma){
 8005b0e:	481b      	ldr	r0, [pc, #108]	; (8005b7c <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x188>)
 8005b10:	4c1b      	ldr	r4, [pc, #108]	; (8005b80 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef+0x18c>)
 8005b12:	613a      	str	r2, [r7, #16]
 8005b14:	e9c7 3308 	strd	r3, r3, [r7, #32]
 8005b18:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8005b1c:	e9c5 3308 	strd	r3, r3, [r5, #32]
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	773b      	strb	r3, [r7, #28]
	_dma = dma;
 8005b24:	60b9      	str	r1, [r7, #8]
dma::dma(DMA_TypeDef *dma){
 8005b26:	6132      	str	r2, [r6, #16]
 8005b28:	61b3      	str	r3, [r6, #24]
 8005b2a:	7733      	strb	r3, [r6, #28]
	_dma = dma;
 8005b2c:	60b1      	str	r1, [r6, #8]
dma::dma(DMA_TypeDef *dma){
 8005b2e:	612a      	str	r2, [r5, #16]
 8005b30:	616b      	str	r3, [r5, #20]
 8005b32:	61ab      	str	r3, [r5, #24]
 8005b34:	772b      	strb	r3, [r5, #28]
	_dma = dma;
 8005b36:	60a9      	str	r1, [r5, #8]
dma::dma(DMA_TypeDef *dma){
 8005b38:	6102      	str	r2, [r0, #16]
 8005b3a:	7703      	strb	r3, [r0, #28]
 8005b3c:	6163      	str	r3, [r4, #20]
 8005b3e:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8005b42:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8005b46:	6122      	str	r2, [r4, #16]
 8005b48:	61a3      	str	r3, [r4, #24]
 8005b4a:	7723      	strb	r3, [r4, #28]
	_dma = dma;
 8005b4c:	60a1      	str	r1, [r4, #8]
dma::dma(DMA_TypeDef *dma){
 8005b4e:	6143      	str	r3, [r0, #20]
 8005b50:	6183      	str	r3, [r0, #24]
	_dma = dma;
 8005b52:	6081      	str	r1, [r0, #8]
}
 8005b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b58:	2000b348 	.word	0x2000b348
 8005b5c:	2000b2f8 	.word	0x2000b2f8
 8005b60:	2000b320 	.word	0x2000b320
 8005b64:	40026000 	.word	0x40026000
 8005b68:	2000b370 	.word	0x2000b370
 8005b6c:	2000b398 	.word	0x2000b398
 8005b70:	2000b3c0 	.word	0x2000b3c0
 8005b74:	2000b3e8 	.word	0x2000b3e8
 8005b78:	2000b410 	.word	0x2000b410
 8005b7c:	2000b460 	.word	0x2000b460
 8005b80:	2000b438 	.word	0x2000b438
 8005b84:	2000b2a8 	.word	0x2000b2a8
 8005b88:	2000b208 	.word	0x2000b208
 8005b8c:	2000b230 	.word	0x2000b230
 8005b90:	2000b258 	.word	0x2000b258
 8005b94:	2000b280 	.word	0x2000b280
 8005b98:	2000b2d0 	.word	0x2000b2d0

08005b9c <exti_init>:
void EXTI15_10_IRQHandler(void);       /* EXTI Line[15:10] interrupts */

void EXTI_IRQHandler(uint16_t Pin);
}

stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8005b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ba0:	b083      	sub	sp, #12
	stm_ret_t ret;
 8005ba2:	f04f 0c01 	mov.w	ip, #1
stm_ret_t exti_init(GPIO_TypeDef *Port, uint16_t Pin, exti_edgedetect_t Edge, uint32_t Priority){
 8005ba6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
	stm_ret_t ret;
 8005baa:	f880 c000 	strb.w	ip, [r0]
 8005bae:	2500      	movs	r5, #0
	uint8_t CRPos = 0;
	IRQn_Type IRQn;

	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8005bb0:	f1b8 0f03 	cmp.w	r8, #3
	stm_ret_t ret;
 8005bb4:	6045      	str	r5, [r0, #4]
	if(Priority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8005bb6:	f240 8085 	bls.w	8005cc4 <exti_init+0x128>
#endif /* CONFIG_FAIL_CHIP_RESET */
		return ret;
	}


	if(Pin < 4U) 					CRPos = 0;
 8005bba:	2a03      	cmp	r2, #3
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	d84b      	bhi.n	8005c58 <exti_init+0xbc>
 8005bc0:	46ae      	mov	lr, r5
 8005bc2:	46ac      	mov	ip, r5
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
	else 							CRPos = 3;

	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8005bc4:	1d97      	adds	r7, r2, #6
 8005bc6:	b2ff      	uxtb	r7, r7
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bc8:	2501      	movs	r5, #1
 8005bca:	40bd      	lsls	r5, r7
 8005bcc:	2600      	movs	r6, #0
	else 						   IRQn = EXTI15_10_IRQn;

#if defined(STM32F1)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_AFIOEN)) RCC -> APB2ENR |= RCC_APB2ENR_AFIOEN;
#elif defined(STM32F4)
	if(!(RCC -> APB2ENR & RCC_APB2ENR_SYSCFGEN)) RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8005bce:	484d      	ldr	r0, [pc, #308]	; (8005d04 <exti_init+0x168>)
 8005bd0:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8005bd4:	f419 4f80 	tst.w	r9, #16384	; 0x4000
 8005bd8:	d105      	bne.n	8005be6 <exti_init+0x4a>
 8005bda:	f8d0 9044 	ldr.w	r9, [r0, #68]	; 0x44
 8005bde:	f449 4980 	orr.w	r9, r9, #16384	; 0x4000
 8005be2:	f8c0 9044 	str.w	r9, [r0, #68]	; 0x44
#endif /* STM32F4 */
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8005be6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005bea:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 8005bee:	f50c 3c9c 	add.w	ip, ip, #79872	; 0x13800

	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005bf2:	eba2 0e0e 	sub.w	lr, r2, lr
	__IO uint32_t tmpreg = EXTI_REGISTER -> EXTICR[CRPos];
 8005bf6:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8005bfa:	9001      	str	r0, [sp, #4]
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005bfc:	9801      	ldr	r0, [sp, #4]
 8005bfe:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
	tmpreg |= (uint32_t)(((((uint32_t)Port & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8005c02:	f3c1 2185 	ubfx	r1, r1, #10, #6
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005c06:	f04f 090f 	mov.w	r9, #15
	tmpreg |= (uint32_t)(((((uint32_t)Port & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8005c0a:	fa01 f10e 	lsl.w	r1, r1, lr
	tmpreg &=~ (0x0F << ((Pin - CRPos*4U) * 4U));
 8005c0e:	fa09 fe0e 	lsl.w	lr, r9, lr
 8005c12:	ea20 000e 	bic.w	r0, r0, lr
 8005c16:	9001      	str	r0, [sp, #4]
	tmpreg |= (uint32_t)(((((uint32_t)Port & 0xFF00U) >> 8U) / 4U) << ((Pin - CRPos*4U) * 4U));
 8005c18:	9801      	ldr	r0, [sp, #4]
 8005c1a:	4301      	orrs	r1, r0
 8005c1c:	9101      	str	r1, [sp, #4]
	EXTI_REGISTER -> EXTICR[CRPos] = tmpreg;
 8005c1e:	9901      	ldr	r1, [sp, #4]
 8005c20:	f8cc 1008 	str.w	r1, [ip, #8]

	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8005c24:	07db      	lsls	r3, r3, #31
 8005c26:	d423      	bmi.n	8005c70 <exti_init+0xd4>
 8005c28:	2101      	movs	r1, #1
 8005c2a:	fa01 fe02 	lsl.w	lr, r1, r2
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);

	EXTI -> IMR |= (1U << Pin);
 8005c2e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8005d0c <exti_init+0x170>

	__NVIC_SetPriority(IRQn, Priority);
	__NVIC_EnableIRQ(IRQn);

	return ret;
}
 8005c32:	4620      	mov	r0, r4
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c34:	4c34      	ldr	r4, [pc, #208]	; (8005d08 <exti_init+0x16c>)
	EXTI -> IMR |= (1U << Pin);
 8005c36:	f8dc 1000 	ldr.w	r1, [ip]
 8005c3a:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8005c3e:	19e2      	adds	r2, r4, r7
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	ea41 010e 	orr.w	r1, r1, lr
 8005c46:	f8cc 1000 	str.w	r1, [ip]
 8005c4a:	f882 3300 	strb.w	r3, [r2, #768]	; 0x300
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c4e:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 8005c52:	b003      	add	sp, #12
 8005c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	else if(Pin >= 4U && Pin < 8U)  CRPos = 1;
 8005c58:	1f10      	subs	r0, r2, #4
 8005c5a:	2803      	cmp	r0, #3
 8005c5c:	d915      	bls.n	8005c8a <exti_init+0xee>
	else if(Pin >= 8U && Pin < 12U) CRPos = 2;
 8005c5e:	f1a2 0008 	sub.w	r0, r2, #8
 8005c62:	2803      	cmp	r0, #3
 8005c64:	d825      	bhi.n	8005cb2 <exti_init+0x116>
 8005c66:	f04f 0e08 	mov.w	lr, #8
 8005c6a:	f04f 0c02 	mov.w	ip, #2
 8005c6e:	e012      	b.n	8005c96 <exti_init+0xfa>
	if(Edge & EXTI_RTSR_TR0) EXTI -> RTSR |= (1U << Pin);
 8005c70:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <exti_init+0x170>)
 8005c72:	2101      	movs	r1, #1
 8005c74:	fa01 fe02 	lsl.w	lr, r1, r2
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	ea42 020e 	orr.w	r2, r2, lr
 8005c7e:	609a      	str	r2, [r3, #8]
	if(Edge & EXTI_FTSR_TR0) EXTI -> FTSR |= (1U << Pin);
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	ea4e 0202 	orr.w	r2, lr, r2
 8005c86:	60da      	str	r2, [r3, #12]
 8005c88:	e7d1      	b.n	8005c2e <exti_init+0x92>
	if(Pin < 5U) IRQn = (IRQn_Type)(Pin + EXTI_LINE_INDEX);
 8005c8a:	2a04      	cmp	r2, #4
 8005c8c:	bf08      	it	eq
 8005c8e:	4696      	moveq	lr, r2
 8005c90:	d098      	beq.n	8005bc4 <exti_init+0x28>
 8005c92:	f04f 0e04 	mov.w	lr, #4
	else if(Pin >= 5U && Pin < 9U) IRQn = EXTI9_5_IRQn;
 8005c96:	1f50      	subs	r0, r2, #5
 8005c98:	b280      	uxth	r0, r0
 8005c9a:	2804      	cmp	r0, #4
 8005c9c:	bf35      	itete	cc
 8005c9e:	2717      	movcc	r7, #23
 8005ca0:	2728      	movcs	r7, #40	; 0x28
 8005ca2:	f44f 0500 	movcc.w	r5, #8388608	; 0x800000
 8005ca6:	f44f 7580 	movcs.w	r5, #256	; 0x100
 8005caa:	bf34      	ite	cc
 8005cac:	2600      	movcc	r6, #0
 8005cae:	2601      	movcs	r6, #1
 8005cb0:	e78d      	b.n	8005bce <exti_init+0x32>
 8005cb2:	4666      	mov	r6, ip
 8005cb4:	2728      	movs	r7, #40	; 0x28
 8005cb6:	f44f 7580 	mov.w	r5, #256	; 0x100
 8005cba:	f04f 0e0c 	mov.w	lr, #12
 8005cbe:	f04f 0c03 	mov.w	ip, #3
 8005cc2:	e784      	b.n	8005bce <exti_init+0x32>
		set_return(&ret, STM_ERR, __LINE__);
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	2238      	movs	r2, #56	; 0x38
 8005cc8:	f003 f820 	bl	8008d0c <set_return>
		LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8005ccc:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <exti_init+0x174>)
 8005cce:	4a11      	ldr	r2, [pc, #68]	; (8005d14 <exti_init+0x178>)
 8005cd0:	4911      	ldr	r1, [pc, #68]	; (8005d18 <exti_init+0x17c>)
 8005cd2:	4812      	ldr	r0, [pc, #72]	; (8005d1c <exti_init+0x180>)
 8005cd4:	f002 ff62 	bl	8008b9c <LOG_ERROR>
		LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8005cd8:	4911      	ldr	r1, [pc, #68]	; (8005d20 <exti_init+0x184>)
 8005cda:	4810      	ldr	r0, [pc, #64]	; (8005d1c <exti_init+0x180>)
 8005cdc:	2205      	movs	r2, #5
 8005cde:	f002 fee1 	bl	8008aa4 <LOG_INFO>
		systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8005ce2:	f241 3088 	movw	r0, #5000	; 0x1388
 8005ce6:	f001 fe13 	bl	8007910 <systick_delay_ms>
  __ASM volatile ("dsb 0xF":::"memory");
 8005cea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005cee:	490d      	ldr	r1, [pc, #52]	; (8005d24 <exti_init+0x188>)
 8005cf0:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <exti_init+0x18c>)
 8005cf2:	68ca      	ldr	r2, [r1, #12]
 8005cf4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005cf8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005cfa:	60cb      	str	r3, [r1, #12]
 8005cfc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005d00:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8005d02:	e7fd      	b.n	8005d00 <exti_init+0x164>
 8005d04:	40023800 	.word	0x40023800
 8005d08:	e000e100 	.word	0xe000e100
 8005d0c:	40013c00 	.word	0x40013c00
 8005d10:	0800cbd8 	.word	0x0800cbd8
 8005d14:	0800cbe4 	.word	0x0800cbe4
 8005d18:	0800cc0c 	.word	0x0800cc0c
 8005d1c:	0800cc50 	.word	0x0800cc50
 8005d20:	0800cc58 	.word	0x0800cc58
 8005d24:	e000ed00 	.word	0xe000ed00
 8005d28:	05fa0004 	.word	0x05fa0004

08005d2c <exti_register_event_handler>:
	else 						   IRQn = EXTI15_10_IRQn;
	__NVIC_DisableIRQ(IRQn);
	__NVIC_ClearPendingIRQ(IRQn);
}

void exti_register_event_handler(uint16_t pin, void (*function_ptr)(void *param), void *param){
 8005d2c:	b410      	push	{r4}
		handler_callback[pin] = function_ptr;
		parameter[pin] = param;
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <exti_register_event_handler+0x14>)
		handler_callback[pin] = function_ptr;
 8005d30:	4c04      	ldr	r4, [pc, #16]	; (8005d44 <exti_register_event_handler+0x18>)
		parameter[pin] = param;
 8005d32:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
		handler_callback[pin] = function_ptr;
 8005d36:	f844 1020 	str.w	r1, [r4, r0, lsl #2]
}
 8005d3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	2000b4c8 	.word	0x2000b4c8
 8005d44:	2000b488 	.word	0x2000b488

08005d48 <EXTI0_IRQHandler>:
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
	if(EXTI -> PR & (1U << Pin)){
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <EXTI0_IRQHandler+0x1c>)
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	07d2      	lsls	r2, r2, #31
 8005d4e:	d507      	bpl.n	8005d60 <EXTI0_IRQHandler+0x18>
		EXTI -> PR = (1U << Pin);
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005d50:	4a05      	ldr	r2, [pc, #20]	; (8005d68 <EXTI0_IRQHandler+0x20>)
		EXTI -> PR = (1U << Pin);
 8005d52:	2101      	movs	r1, #1
 8005d54:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005d56:	6813      	ldr	r3, [r2, #0]
 8005d58:	b113      	cbz	r3, 8005d60 <EXTI0_IRQHandler+0x18>
 8005d5a:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <EXTI0_IRQHandler+0x24>)
 8005d5c:	6810      	ldr	r0, [r2, #0]
 8005d5e:	4718      	bx	r3
}


void EXTI0_IRQHandler(void){
	EXTI_IRQHandler(0);
}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40013c00 	.word	0x40013c00
 8005d68:	2000b488 	.word	0x2000b488
 8005d6c:	2000b4c8 	.word	0x2000b4c8

08005d70 <EXTI1_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <EXTI1_IRQHandler+0x1c>)
 8005d72:	695a      	ldr	r2, [r3, #20]
 8005d74:	0792      	lsls	r2, r2, #30
 8005d76:	d507      	bpl.n	8005d88 <EXTI1_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005d78:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <EXTI1_IRQHandler+0x20>)
 8005d7a:	6852      	ldr	r2, [r2, #4]
		EXTI -> PR = (1U << Pin);
 8005d7c:	2102      	movs	r1, #2
 8005d7e:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005d80:	b112      	cbz	r2, 8005d88 <EXTI1_IRQHandler+0x18>
 8005d82:	4b04      	ldr	r3, [pc, #16]	; (8005d94 <EXTI1_IRQHandler+0x24>)
 8005d84:	6858      	ldr	r0, [r3, #4]
 8005d86:	4710      	bx	r2

void EXTI1_IRQHandler(void){
	EXTI_IRQHandler(1);
}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40013c00 	.word	0x40013c00
 8005d90:	2000b488 	.word	0x2000b488
 8005d94:	2000b4c8 	.word	0x2000b4c8

08005d98 <EXTI2_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <EXTI2_IRQHandler+0x1c>)
 8005d9a:	695a      	ldr	r2, [r3, #20]
 8005d9c:	0752      	lsls	r2, r2, #29
 8005d9e:	d507      	bpl.n	8005db0 <EXTI2_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005da0:	4a05      	ldr	r2, [pc, #20]	; (8005db8 <EXTI2_IRQHandler+0x20>)
 8005da2:	6892      	ldr	r2, [r2, #8]
		EXTI -> PR = (1U << Pin);
 8005da4:	2104      	movs	r1, #4
 8005da6:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005da8:	b112      	cbz	r2, 8005db0 <EXTI2_IRQHandler+0x18>
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <EXTI2_IRQHandler+0x24>)
 8005dac:	6898      	ldr	r0, [r3, #8]
 8005dae:	4710      	bx	r2

void EXTI2_IRQHandler(void){
	EXTI_IRQHandler(2);
}
 8005db0:	4770      	bx	lr
 8005db2:	bf00      	nop
 8005db4:	40013c00 	.word	0x40013c00
 8005db8:	2000b488 	.word	0x2000b488
 8005dbc:	2000b4c8 	.word	0x2000b4c8

08005dc0 <EXTI3_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005dc0:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <EXTI3_IRQHandler+0x1c>)
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	0712      	lsls	r2, r2, #28
 8005dc6:	d507      	bpl.n	8005dd8 <EXTI3_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005dc8:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <EXTI3_IRQHandler+0x20>)
 8005dca:	68d2      	ldr	r2, [r2, #12]
		EXTI -> PR = (1U << Pin);
 8005dcc:	2108      	movs	r1, #8
 8005dce:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005dd0:	b112      	cbz	r2, 8005dd8 <EXTI3_IRQHandler+0x18>
 8005dd2:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <EXTI3_IRQHandler+0x24>)
 8005dd4:	68d8      	ldr	r0, [r3, #12]
 8005dd6:	4710      	bx	r2

void EXTI3_IRQHandler(void){
	EXTI_IRQHandler(3);
}
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40013c00 	.word	0x40013c00
 8005de0:	2000b488 	.word	0x2000b488
 8005de4:	2000b4c8 	.word	0x2000b4c8

08005de8 <EXTI4_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005de8:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <EXTI4_IRQHandler+0x1c>)
 8005dea:	695a      	ldr	r2, [r3, #20]
 8005dec:	06d2      	lsls	r2, r2, #27
 8005dee:	d507      	bpl.n	8005e00 <EXTI4_IRQHandler+0x18>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005df0:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <EXTI4_IRQHandler+0x20>)
 8005df2:	6912      	ldr	r2, [r2, #16]
		EXTI -> PR = (1U << Pin);
 8005df4:	2110      	movs	r1, #16
 8005df6:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005df8:	b112      	cbz	r2, 8005e00 <EXTI4_IRQHandler+0x18>
 8005dfa:	4b04      	ldr	r3, [pc, #16]	; (8005e0c <EXTI4_IRQHandler+0x24>)
 8005dfc:	6918      	ldr	r0, [r3, #16]
 8005dfe:	4710      	bx	r2

void EXTI4_IRQHandler(void){
	EXTI_IRQHandler(4);
}
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	40013c00 	.word	0x40013c00
 8005e08:	2000b488 	.word	0x2000b488
 8005e0c:	2000b4c8 	.word	0x2000b4c8

08005e10 <EXTI9_5_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <EXTI9_5_IRQHandler+0x84>)
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	0692      	lsls	r2, r2, #26

void EXTI9_5_IRQHandler(void){
 8005e16:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8005e18:	d507      	bpl.n	8005e2a <EXTI9_5_IRQHandler+0x1a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e1a:	4a1f      	ldr	r2, [pc, #124]	; (8005e98 <EXTI9_5_IRQHandler+0x88>)
 8005e1c:	6952      	ldr	r2, [r2, #20]
		EXTI -> PR = (1U << Pin);
 8005e1e:	2120      	movs	r1, #32
 8005e20:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e22:	b112      	cbz	r2, 8005e2a <EXTI9_5_IRQHandler+0x1a>
 8005e24:	4b1d      	ldr	r3, [pc, #116]	; (8005e9c <EXTI9_5_IRQHandler+0x8c>)
 8005e26:	6958      	ldr	r0, [r3, #20]
 8005e28:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <EXTI9_5_IRQHandler+0x84>)
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	0654      	lsls	r4, r2, #25
 8005e30:	d507      	bpl.n	8005e42 <EXTI9_5_IRQHandler+0x32>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e32:	4a19      	ldr	r2, [pc, #100]	; (8005e98 <EXTI9_5_IRQHandler+0x88>)
 8005e34:	6992      	ldr	r2, [r2, #24]
		EXTI -> PR = (1U << Pin);
 8005e36:	2140      	movs	r1, #64	; 0x40
 8005e38:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e3a:	b112      	cbz	r2, 8005e42 <EXTI9_5_IRQHandler+0x32>
 8005e3c:	4b17      	ldr	r3, [pc, #92]	; (8005e9c <EXTI9_5_IRQHandler+0x8c>)
 8005e3e:	6998      	ldr	r0, [r3, #24]
 8005e40:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005e42:	4b14      	ldr	r3, [pc, #80]	; (8005e94 <EXTI9_5_IRQHandler+0x84>)
 8005e44:	695a      	ldr	r2, [r3, #20]
 8005e46:	0610      	lsls	r0, r2, #24
 8005e48:	d507      	bpl.n	8005e5a <EXTI9_5_IRQHandler+0x4a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <EXTI9_5_IRQHandler+0x88>)
 8005e4c:	69d2      	ldr	r2, [r2, #28]
		EXTI -> PR = (1U << Pin);
 8005e4e:	2180      	movs	r1, #128	; 0x80
 8005e50:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e52:	b112      	cbz	r2, 8005e5a <EXTI9_5_IRQHandler+0x4a>
 8005e54:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <EXTI9_5_IRQHandler+0x8c>)
 8005e56:	69d8      	ldr	r0, [r3, #28]
 8005e58:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <EXTI9_5_IRQHandler+0x84>)
 8005e5c:	695a      	ldr	r2, [r3, #20]
 8005e5e:	05d1      	lsls	r1, r2, #23
 8005e60:	d508      	bpl.n	8005e74 <EXTI9_5_IRQHandler+0x64>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e62:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <EXTI9_5_IRQHandler+0x88>)
 8005e64:	6a12      	ldr	r2, [r2, #32]
		EXTI -> PR = (1U << Pin);
 8005e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e6a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e6c:	b112      	cbz	r2, 8005e74 <EXTI9_5_IRQHandler+0x64>
 8005e6e:	4b0b      	ldr	r3, [pc, #44]	; (8005e9c <EXTI9_5_IRQHandler+0x8c>)
 8005e70:	6a18      	ldr	r0, [r3, #32]
 8005e72:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005e74:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <EXTI9_5_IRQHandler+0x84>)
 8005e76:	695a      	ldr	r2, [r3, #20]
 8005e78:	0592      	lsls	r2, r2, #22
 8005e7a:	d50a      	bpl.n	8005e92 <EXTI9_5_IRQHandler+0x82>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e7c:	4a06      	ldr	r2, [pc, #24]	; (8005e98 <EXTI9_5_IRQHandler+0x88>)
 8005e7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
		EXTI -> PR = (1U << Pin);
 8005e80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e84:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e86:	b122      	cbz	r2, 8005e92 <EXTI9_5_IRQHandler+0x82>
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <EXTI9_5_IRQHandler+0x8c>)
	EXTI_IRQHandler(5);
	EXTI_IRQHandler(6);
	EXTI_IRQHandler(7);
	EXTI_IRQHandler(8);
	EXTI_IRQHandler(9);
}
 8005e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005e8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005e90:	4710      	bx	r2
}
 8005e92:	bd10      	pop	{r4, pc}
 8005e94:	40013c00 	.word	0x40013c00
 8005e98:	2000b488 	.word	0x2000b488
 8005e9c:	2000b4c8 	.word	0x2000b4c8

08005ea0 <EXTI15_10_IRQHandler>:
	if(EXTI -> PR & (1U << Pin)){
 8005ea0:	4b28      	ldr	r3, [pc, #160]	; (8005f44 <EXTI15_10_IRQHandler+0xa4>)
 8005ea2:	695a      	ldr	r2, [r3, #20]
 8005ea4:	0551      	lsls	r1, r2, #21

void EXTI15_10_IRQHandler(void){
 8005ea6:	b510      	push	{r4, lr}
	if(EXTI -> PR & (1U << Pin)){
 8005ea8:	d508      	bpl.n	8005ebc <EXTI15_10_IRQHandler+0x1c>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005eaa:	4a27      	ldr	r2, [pc, #156]	; (8005f48 <EXTI15_10_IRQHandler+0xa8>)
 8005eac:	6a92      	ldr	r2, [r2, #40]	; 0x28
		EXTI -> PR = (1U << Pin);
 8005eae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005eb2:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005eb4:	b112      	cbz	r2, 8005ebc <EXTI15_10_IRQHandler+0x1c>
 8005eb6:	4b25      	ldr	r3, [pc, #148]	; (8005f4c <EXTI15_10_IRQHandler+0xac>)
 8005eb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005eba:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005ebc:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <EXTI15_10_IRQHandler+0xa4>)
 8005ebe:	695a      	ldr	r2, [r3, #20]
 8005ec0:	0512      	lsls	r2, r2, #20
 8005ec2:	d508      	bpl.n	8005ed6 <EXTI15_10_IRQHandler+0x36>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ec4:	4a20      	ldr	r2, [pc, #128]	; (8005f48 <EXTI15_10_IRQHandler+0xa8>)
 8005ec6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
		EXTI -> PR = (1U << Pin);
 8005ec8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ecc:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ece:	b112      	cbz	r2, 8005ed6 <EXTI15_10_IRQHandler+0x36>
 8005ed0:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <EXTI15_10_IRQHandler+0xac>)
 8005ed2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005ed4:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005ed6:	4b1b      	ldr	r3, [pc, #108]	; (8005f44 <EXTI15_10_IRQHandler+0xa4>)
 8005ed8:	695a      	ldr	r2, [r3, #20]
 8005eda:	04d4      	lsls	r4, r2, #19
 8005edc:	d508      	bpl.n	8005ef0 <EXTI15_10_IRQHandler+0x50>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ede:	4a1a      	ldr	r2, [pc, #104]	; (8005f48 <EXTI15_10_IRQHandler+0xa8>)
 8005ee0:	6b12      	ldr	r2, [r2, #48]	; 0x30
		EXTI -> PR = (1U << Pin);
 8005ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ee6:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ee8:	b112      	cbz	r2, 8005ef0 <EXTI15_10_IRQHandler+0x50>
 8005eea:	4b18      	ldr	r3, [pc, #96]	; (8005f4c <EXTI15_10_IRQHandler+0xac>)
 8005eec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005eee:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <EXTI15_10_IRQHandler+0xa4>)
 8005ef2:	695a      	ldr	r2, [r3, #20]
 8005ef4:	0490      	lsls	r0, r2, #18
 8005ef6:	d508      	bpl.n	8005f0a <EXTI15_10_IRQHandler+0x6a>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005ef8:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <EXTI15_10_IRQHandler+0xa8>)
 8005efa:	6b52      	ldr	r2, [r2, #52]	; 0x34
		EXTI -> PR = (1U << Pin);
 8005efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f00:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f02:	b112      	cbz	r2, 8005f0a <EXTI15_10_IRQHandler+0x6a>
 8005f04:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <EXTI15_10_IRQHandler+0xac>)
 8005f06:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f08:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005f0a:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <EXTI15_10_IRQHandler+0xa4>)
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	0451      	lsls	r1, r2, #17
 8005f10:	d508      	bpl.n	8005f24 <EXTI15_10_IRQHandler+0x84>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f12:	4a0d      	ldr	r2, [pc, #52]	; (8005f48 <EXTI15_10_IRQHandler+0xa8>)
 8005f14:	6b92      	ldr	r2, [r2, #56]	; 0x38
		EXTI -> PR = (1U << Pin);
 8005f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f1a:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f1c:	b112      	cbz	r2, 8005f24 <EXTI15_10_IRQHandler+0x84>
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	; (8005f4c <EXTI15_10_IRQHandler+0xac>)
 8005f20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f22:	4790      	blx	r2
	if(EXTI -> PR & (1U << Pin)){
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <EXTI15_10_IRQHandler+0xa4>)
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	0412      	lsls	r2, r2, #16
 8005f2a:	d50a      	bpl.n	8005f42 <EXTI15_10_IRQHandler+0xa2>
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f2c:	4a06      	ldr	r2, [pc, #24]	; (8005f48 <EXTI15_10_IRQHandler+0xa8>)
 8005f2e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
		EXTI -> PR = (1U << Pin);
 8005f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f34:	6159      	str	r1, [r3, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f36:	b122      	cbz	r2, 8005f42 <EXTI15_10_IRQHandler+0xa2>
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <EXTI15_10_IRQHandler+0xac>)
	EXTI_IRQHandler(11);
	EXTI_IRQHandler(12);
	EXTI_IRQHandler(13);
	EXTI_IRQHandler(14);
	EXTI_IRQHandler(15);
}
 8005f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 8005f3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005f40:	4710      	bx	r2
}
 8005f42:	bd10      	pop	{r4, pc}
 8005f44:	40013c00 	.word	0x40013c00
 8005f48:	2000b488 	.word	0x2000b488
 8005f4c:	2000b4c8 	.word	0x2000b4c8

08005f50 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 8005f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8005f54:	4c3a      	ldr	r4, [pc, #232]	; (8006040 <sdram_init+0xf0>)
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
	if(_conf -> bank == SDRAM_BANK1)
 8005f56:	4d3b      	ldr	r5, [pc, #236]	; (8006044 <sdram_init+0xf4>)
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8005f58:	6d23      	ldr	r3, [r4, #80]	; 0x50
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005f5a:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800604c <sdram_init+0xfc>
	if(_conf -> bank == SDRAM_BANK1)
 8005f5e:	682a      	ldr	r2, [r5, #0]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005f60:	4939      	ldr	r1, [pc, #228]	; (8006048 <sdram_init+0xf8>)
	if(_conf -> bank == SDRAM_BANK1)
 8005f62:	7812      	ldrb	r2, [r2, #0]
void sdram_init(void){
 8005f64:	b088      	sub	sp, #32
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005f66:	2a00      	cmp	r2, #0
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8005f68:	9305      	str	r3, [sp, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005f6a:	9b05      	ldr	r3, [sp, #20]
 8005f6c:	ea03 0308 	and.w	r3, r3, r8
 8005f70:	9305      	str	r3, [sp, #20]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8005f72:	9b05      	ldr	r3, [sp, #20]
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005f74:	bf0c      	ite	eq
 8005f76:	2710      	moveq	r7, #16
 8005f78:	2708      	movne	r7, #8
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8005f7a:	433b      	orrs	r3, r7
 8005f7c:	f043 0301 	orr.w	r3, r3, #1
 8005f80:	9305      	str	r3, [sp, #20]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005f82:	f241 3688 	movw	r6, #5000	; 0x1388
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8005f86:	9b05      	ldr	r3, [sp, #20]
 8005f88:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	a806      	add	r0, sp, #24
 8005f90:	9600      	str	r6, [sp, #0]
 8005f92:	f002 fe7f 	bl	8008c94 <wait_flag_in_register_timeout>
	Command.autorefresh_num = 1;
	Command.registermode    = 0;
	fmc_sdram_sendcommand(Command);
	delay_ms(1);
 8005f96:	2001      	movs	r0, #1
 8005f98:	f001 fcf0 	bl	800797c <delay_ms>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8005f9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005f9e:	9304      	str	r3, [sp, #16]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005fa0:	9b04      	ldr	r3, [sp, #16]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005fa2:	4929      	ldr	r1, [pc, #164]	; (8006048 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005fa4:	ea03 0308 	and.w	r3, r3, r8
 8005fa8:	9304      	str	r3, [sp, #16]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8005faa:	9b04      	ldr	r3, [sp, #16]
 8005fac:	433b      	orrs	r3, r7
 8005fae:	f043 0302 	orr.w	r3, r3, #2
 8005fb2:	9304      	str	r3, [sp, #16]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8005fb4:	9b04      	ldr	r3, [sp, #16]
 8005fb6:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005fb8:	a806      	add	r0, sp, #24
 8005fba:	9600      	str	r6, [sp, #0]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	f002 fe68 	bl	8008c94 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8005fc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005fc6:	9303      	str	r3, [sp, #12]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005fc8:	9b03      	ldr	r3, [sp, #12]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005fca:	491f      	ldr	r1, [pc, #124]	; (8006048 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005fcc:	ea03 0308 	and.w	r3, r3, r8
 8005fd0:	9303      	str	r3, [sp, #12]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	433b      	orrs	r3, r7
 8005fd6:	f043 0323 	orr.w	r3, r3, #35	; 0x23
 8005fda:	9303      	str	r3, [sp, #12]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005fe0:	a806      	add	r0, sp, #24
 8005fe2:	9600      	str	r6, [sp, #0]
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f002 fe54 	bl	8008c94 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 8005fec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005fee:	9302      	str	r3, [sp, #8]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005ff0:	9b02      	ldr	r3, [sp, #8]
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 8005ff2:	4915      	ldr	r1, [pc, #84]	; (8006048 <sdram_init+0xf8>)
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8005ff4:	ea03 0308 	and.w	r3, r3, r8
 8005ff8:	9302      	str	r3, [sp, #8]
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8005ffa:	9b02      	ldr	r3, [sp, #8]
 8005ffc:	433b      	orrs	r3, r7
 8005ffe:	f443 2388 	orr.w	r3, r3, #278528	; 0x44000
 8006002:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8006006:	9302      	str	r3, [sp, #8]
	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006008:	9b02      	ldr	r3, [sp, #8]
 800600a:	6523      	str	r3, [r4, #80]	; 0x50
	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800600c:	a806      	add	r0, sp, #24
 800600e:	2300      	movs	r3, #0
 8006010:	9600      	str	r6, [sp, #0]
 8006012:	2220      	movs	r2, #32
 8006014:	f002 fe3e 	bl	8008c94 <wait_flag_in_register_timeout>
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 8006018:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800601a:	9306      	str	r3, [sp, #24]
	tmpreg &=~ FMC_SDRTR_COUNT;
 800601c:	9b06      	ldr	r3, [sp, #24]
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
	fmc_sdram_sendcommand(Command);
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 800601e:	682a      	ldr	r2, [r5, #0]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006020:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006024:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8006028:	9306      	str	r3, [sp, #24]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 800602a:	9b06      	ldr	r3, [sp, #24]
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 800602c:	6952      	ldr	r2, [r2, #20]
	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 800602e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8006032:	9306      	str	r3, [sp, #24]
	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006034:	9b06      	ldr	r3, [sp, #24]
 8006036:	6563      	str	r3, [r4, #84]	; 0x54
}
 8006038:	b008      	add	sp, #32
 800603a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800603e:	bf00      	nop
 8006040:	a0000100 	.word	0xa0000100
 8006044:	2000b508 	.word	0x2000b508
 8006048:	a0000158 	.word	0xa0000158
 800604c:	ffc00000 	.word	0xffc00000

08006050 <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 8006050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_port_clock_enable(GPIOC);
 8006054:	f8df 8334 	ldr.w	r8, [pc, #820]	; 800638c <_Z23fmc_sdram_hardware_initv+0x33c>
	gpio_port_clock_enable(GPIOD);
 8006058:	4ec8      	ldr	r6, [pc, #800]	; (800637c <_Z23fmc_sdram_hardware_initv+0x32c>)
	gpio_port_clock_enable(GPIOE);
 800605a:	4dc9      	ldr	r5, [pc, #804]	; (8006380 <_Z23fmc_sdram_hardware_initv+0x330>)
	gpio_port_clock_enable(GPIOF);
 800605c:	4cc9      	ldr	r4, [pc, #804]	; (8006384 <_Z23fmc_sdram_hardware_initv+0x334>)
	gpio_port_clock_enable(GPIOG);
 800605e:	4fca      	ldr	r7, [pc, #808]	; (8006388 <_Z23fmc_sdram_hardware_initv+0x338>)
	gpio_port_clock_enable(GPIOC);
 8006060:	4640      	mov	r0, r8
 8006062:	f000 fa5d 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 8006066:	4630      	mov	r0, r6
 8006068:	f000 fa5a 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 800606c:	4628      	mov	r0, r5
 800606e:	f000 fa57 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 8006072:	4620      	mov	r0, r4
 8006074:	f000 fa54 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006078:	4638      	mov	r0, r7
 800607a:	f000 fa51 	bl	8006520 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 800607e:	4620      	mov	r0, r4
 8006080:	220c      	movs	r2, #12
 8006082:	2100      	movs	r1, #0
 8006084:	f000 fb34 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006088:	4620      	mov	r0, r4
 800608a:	2207      	movs	r2, #7
 800608c:	2100      	movs	r1, #0
 800608e:	f000 fb6d 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 8006092:	4620      	mov	r0, r4
 8006094:	220c      	movs	r2, #12
 8006096:	2101      	movs	r1, #1
 8006098:	f000 fb2a 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 800609c:	4620      	mov	r0, r4
 800609e:	2207      	movs	r2, #7
 80060a0:	2101      	movs	r1, #1
 80060a2:	f000 fb63 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 80060a6:	4620      	mov	r0, r4
 80060a8:	220c      	movs	r2, #12
 80060aa:	2102      	movs	r1, #2
 80060ac:	f000 fb20 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 80060b0:	4620      	mov	r0, r4
 80060b2:	2207      	movs	r2, #7
 80060b4:	2102      	movs	r1, #2
 80060b6:	f000 fb59 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 80060ba:	4620      	mov	r0, r4
 80060bc:	220c      	movs	r2, #12
 80060be:	2103      	movs	r1, #3
 80060c0:	f000 fb16 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 80060c4:	4620      	mov	r0, r4
 80060c6:	2207      	movs	r2, #7
 80060c8:	2103      	movs	r1, #3
 80060ca:	f000 fb4f 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 80060ce:	4620      	mov	r0, r4
 80060d0:	220c      	movs	r2, #12
 80060d2:	2104      	movs	r1, #4
 80060d4:	f000 fb0c 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 80060d8:	4620      	mov	r0, r4
 80060da:	2207      	movs	r2, #7
 80060dc:	2104      	movs	r1, #4
 80060de:	f000 fb45 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 80060e2:	4620      	mov	r0, r4
 80060e4:	220c      	movs	r2, #12
 80060e6:	2105      	movs	r1, #5
 80060e8:	f000 fb02 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 80060ec:	4620      	mov	r0, r4
 80060ee:	2207      	movs	r2, #7
 80060f0:	2105      	movs	r1, #5
 80060f2:	f000 fb3b 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 80060f6:	220c      	movs	r2, #12
 80060f8:	4611      	mov	r1, r2
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 faf8 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 8006100:	4620      	mov	r0, r4
 8006102:	2207      	movs	r2, #7
 8006104:	210c      	movs	r1, #12
 8006106:	f000 fb31 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 800610a:	4620      	mov	r0, r4
 800610c:	220c      	movs	r2, #12
 800610e:	210d      	movs	r1, #13
 8006110:	f000 faee 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006114:	4620      	mov	r0, r4
 8006116:	2207      	movs	r2, #7
 8006118:	210d      	movs	r1, #13
 800611a:	f000 fb27 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 800611e:	4620      	mov	r0, r4
 8006120:	220c      	movs	r2, #12
 8006122:	210e      	movs	r1, #14
 8006124:	f000 fae4 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006128:	4620      	mov	r0, r4
 800612a:	2207      	movs	r2, #7
 800612c:	210e      	movs	r1, #14
 800612e:	f000 fb1d 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006132:	4620      	mov	r0, r4
 8006134:	220c      	movs	r2, #12
 8006136:	210f      	movs	r1, #15
 8006138:	f000 fada 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 800613c:	4620      	mov	r0, r4
 800613e:	2207      	movs	r2, #7
 8006140:	210f      	movs	r1, #15
 8006142:	f000 fb13 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006146:	4638      	mov	r0, r7
 8006148:	220c      	movs	r2, #12
 800614a:	2100      	movs	r1, #0
 800614c:	f000 fad0 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006150:	4638      	mov	r0, r7
 8006152:	2207      	movs	r2, #7
 8006154:	2100      	movs	r1, #0
 8006156:	f000 fb09 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 800615a:	4638      	mov	r0, r7
 800615c:	220c      	movs	r2, #12
 800615e:	2101      	movs	r1, #1
 8006160:	f000 fac6 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006164:	4638      	mov	r0, r7
 8006166:	2207      	movs	r2, #7
 8006168:	2101      	movs	r1, #1
 800616a:	f000 faff 	bl	800676c <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 800616e:	4630      	mov	r0, r6
 8006170:	220c      	movs	r2, #12
 8006172:	210e      	movs	r1, #14
 8006174:	f000 fabc 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006178:	4630      	mov	r0, r6
 800617a:	2207      	movs	r2, #7
 800617c:	210e      	movs	r1, #14
 800617e:	f000 faf5 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006182:	4630      	mov	r0, r6
 8006184:	220c      	movs	r2, #12
 8006186:	210f      	movs	r1, #15
 8006188:	f000 fab2 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 800618c:	4630      	mov	r0, r6
 800618e:	2207      	movs	r2, #7
 8006190:	210f      	movs	r1, #15
 8006192:	f000 faeb 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006196:	4630      	mov	r0, r6
 8006198:	220c      	movs	r2, #12
 800619a:	2100      	movs	r1, #0
 800619c:	f000 faa8 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 80061a0:	4630      	mov	r0, r6
 80061a2:	2207      	movs	r2, #7
 80061a4:	2100      	movs	r1, #0
 80061a6:	f000 fae1 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 80061aa:	4630      	mov	r0, r6
 80061ac:	220c      	movs	r2, #12
 80061ae:	2101      	movs	r1, #1
 80061b0:	f000 fa9e 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 80061b4:	4630      	mov	r0, r6
 80061b6:	2207      	movs	r2, #7
 80061b8:	2101      	movs	r1, #1
 80061ba:	f000 fad7 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 80061be:	4628      	mov	r0, r5
 80061c0:	220c      	movs	r2, #12
 80061c2:	2107      	movs	r1, #7
 80061c4:	f000 fa94 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 80061c8:	2207      	movs	r2, #7
 80061ca:	4611      	mov	r1, r2
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 facd 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 80061d2:	4628      	mov	r0, r5
 80061d4:	220c      	movs	r2, #12
 80061d6:	2108      	movs	r1, #8
 80061d8:	f000 fa8a 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 80061dc:	4628      	mov	r0, r5
 80061de:	2207      	movs	r2, #7
 80061e0:	2108      	movs	r1, #8
 80061e2:	f000 fac3 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 80061e6:	4628      	mov	r0, r5
 80061e8:	220c      	movs	r2, #12
 80061ea:	2109      	movs	r1, #9
 80061ec:	f000 fa80 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 80061f0:	4628      	mov	r0, r5
 80061f2:	2207      	movs	r2, #7
 80061f4:	2109      	movs	r1, #9
 80061f6:	f000 fab9 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 80061fa:	4628      	mov	r0, r5
 80061fc:	220c      	movs	r2, #12
 80061fe:	210a      	movs	r1, #10
 8006200:	f000 fa76 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 8006204:	4628      	mov	r0, r5
 8006206:	2207      	movs	r2, #7
 8006208:	210a      	movs	r1, #10
 800620a:	f000 faaf 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 800620e:	4628      	mov	r0, r5
 8006210:	220c      	movs	r2, #12
 8006212:	210b      	movs	r1, #11
 8006214:	f000 fa6c 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006218:	4628      	mov	r0, r5
 800621a:	2207      	movs	r2, #7
 800621c:	210b      	movs	r1, #11
 800621e:	f000 faa5 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006222:	220c      	movs	r2, #12
 8006224:	4611      	mov	r1, r2
 8006226:	4628      	mov	r0, r5
 8006228:	f000 fa62 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 800622c:	4628      	mov	r0, r5
 800622e:	2207      	movs	r2, #7
 8006230:	210c      	movs	r1, #12
 8006232:	f000 fa9b 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006236:	4628      	mov	r0, r5
 8006238:	220c      	movs	r2, #12
 800623a:	210d      	movs	r1, #13
 800623c:	f000 fa58 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006240:	4628      	mov	r0, r5
 8006242:	2207      	movs	r2, #7
 8006244:	210d      	movs	r1, #13
 8006246:	f000 fa91 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 800624a:	4628      	mov	r0, r5
 800624c:	220c      	movs	r2, #12
 800624e:	210e      	movs	r1, #14
 8006250:	f000 fa4e 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006254:	4628      	mov	r0, r5
 8006256:	2207      	movs	r2, #7
 8006258:	210e      	movs	r1, #14
 800625a:	f000 fa87 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 800625e:	4628      	mov	r0, r5
 8006260:	220c      	movs	r2, #12
 8006262:	210f      	movs	r1, #15
 8006264:	f000 fa44 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006268:	4628      	mov	r0, r5
 800626a:	2207      	movs	r2, #7
 800626c:	210f      	movs	r1, #15
 800626e:	f000 fa7d 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006272:	4630      	mov	r0, r6
 8006274:	220c      	movs	r2, #12
 8006276:	2108      	movs	r1, #8
 8006278:	f000 fa3a 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 800627c:	4630      	mov	r0, r6
 800627e:	2207      	movs	r2, #7
 8006280:	2108      	movs	r1, #8
 8006282:	f000 fa73 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006286:	4630      	mov	r0, r6
 8006288:	220c      	movs	r2, #12
 800628a:	2109      	movs	r1, #9
 800628c:	f000 fa30 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006290:	4630      	mov	r0, r6
 8006292:	2207      	movs	r2, #7
 8006294:	2109      	movs	r1, #9
 8006296:	f000 fa69 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 800629a:	4630      	mov	r0, r6
 800629c:	220c      	movs	r2, #12
 800629e:	210a      	movs	r1, #10
 80062a0:	f000 fa26 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 80062a4:	4630      	mov	r0, r6
 80062a6:	2207      	movs	r2, #7
 80062a8:	210a      	movs	r1, #10
 80062aa:	f000 fa5f 	bl	800676c <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 80062ae:	4628      	mov	r0, r5
 80062b0:	220c      	movs	r2, #12
 80062b2:	2100      	movs	r1, #0
 80062b4:	f000 fa1c 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 80062b8:	4628      	mov	r0, r5
 80062ba:	2207      	movs	r2, #7
 80062bc:	2100      	movs	r1, #0
 80062be:	f000 fa55 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 80062c2:	4628      	mov	r0, r5
 80062c4:	220c      	movs	r2, #12
 80062c6:	2101      	movs	r1, #1
 80062c8:	f000 fa12 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 80062cc:	4628      	mov	r0, r5
 80062ce:	2207      	movs	r2, #7
 80062d0:	2101      	movs	r1, #1
 80062d2:	f000 fa4b 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 80062d6:	4638      	mov	r0, r7
 80062d8:	220c      	movs	r2, #12
 80062da:	2104      	movs	r1, #4
 80062dc:	f000 fa08 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 80062e0:	4638      	mov	r0, r7
 80062e2:	2207      	movs	r2, #7
 80062e4:	2104      	movs	r1, #4
 80062e6:	f000 fa41 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 80062ea:	4638      	mov	r0, r7
 80062ec:	220c      	movs	r2, #12
 80062ee:	2105      	movs	r1, #5
 80062f0:	f000 f9fe 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 80062f4:	4638      	mov	r0, r7
 80062f6:	2207      	movs	r2, #7
 80062f8:	2105      	movs	r1, #5
 80062fa:	f000 fa37 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 80062fe:	4638      	mov	r0, r7
 8006300:	220c      	movs	r2, #12
 8006302:	210f      	movs	r1, #15
 8006304:	f000 f9f4 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006308:	4638      	mov	r0, r7
 800630a:	2207      	movs	r2, #7
 800630c:	210f      	movs	r1, #15
 800630e:	f000 fa2d 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006312:	4620      	mov	r0, r4
 8006314:	220c      	movs	r2, #12
 8006316:	210b      	movs	r1, #11
 8006318:	f000 f9ea 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 800631c:	4620      	mov	r0, r4
 800631e:	2207      	movs	r2, #7
 8006320:	210b      	movs	r1, #11
 8006322:	f000 fa23 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006326:	4638      	mov	r0, r7
 8006328:	220c      	movs	r2, #12
 800632a:	2108      	movs	r1, #8
 800632c:	f000 f9e0 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006330:	4638      	mov	r0, r7
 8006332:	2207      	movs	r2, #7
 8006334:	2108      	movs	r1, #8
 8006336:	f000 fa19 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 800633a:	4640      	mov	r0, r8
 800633c:	220c      	movs	r2, #12
 800633e:	2100      	movs	r1, #0
 8006340:	f000 f9d6 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006344:	4640      	mov	r0, r8
 8006346:	2207      	movs	r2, #7
 8006348:	2100      	movs	r1, #0
 800634a:	f000 fa0f 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 800634e:	4640      	mov	r0, r8
 8006350:	220c      	movs	r2, #12
 8006352:	2102      	movs	r1, #2
 8006354:	f000 f9cc 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006358:	4640      	mov	r0, r8
 800635a:	2207      	movs	r2, #7
 800635c:	2102      	movs	r1, #2
 800635e:	f000 fa05 	bl	800676c <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006362:	4640      	mov	r0, r8
 8006364:	220c      	movs	r2, #12
 8006366:	2103      	movs	r1, #3
 8006368:	f000 f9c2 	bl	80066f0 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 800636c:	4640      	mov	r0, r8
 800636e:	2207      	movs	r2, #7

}
 8006370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006374:	2103      	movs	r1, #3
 8006376:	f000 b9f9 	b.w	800676c <gpio_set_alternatefunction_type>
 800637a:	bf00      	nop
 800637c:	40020c00 	.word	0x40020c00
 8006380:	40021000 	.word	0x40021000
 8006384:	40021400 	.word	0x40021400
 8006388:	40021800 	.word	0x40021800
 800638c:	40020800 	.word	0x40020800

08006390 <fmc_sdram_init>:
void fmc_sdram_init(sdram_config_t *conf){
 8006390:	b530      	push	{r4, r5, lr}
	_conf = conf;
 8006392:	4c60      	ldr	r4, [pc, #384]	; (8006514 <fmc_sdram_init+0x184>)
void fmc_sdram_init(sdram_config_t *conf){
 8006394:	b083      	sub	sp, #12
	_conf = conf;
 8006396:	6020      	str	r0, [r4, #0]
	fmc_sdram_hardware_init();
 8006398:	f7ff fe5a 	bl	8006050 <_Z23fmc_sdram_hardware_initv>
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 800639c:	4a5e      	ldr	r2, [pc, #376]	; (8006518 <fmc_sdram_init+0x188>)
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 800639e:	495f      	ldr	r1, [pc, #380]	; (800651c <fmc_sdram_init+0x18c>)
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 80063a0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	6393      	str	r3, [r2, #56]	; 0x38
	if(_conf -> bank == SDRAM_BANK1){
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	2a00      	cmp	r2, #0
 80063ae:	d148      	bne.n	8006442 <fmc_sdram_init+0xb2>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 80063b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063b2:	9100      	str	r1, [sp, #0]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 80063b4:	7a9c      	ldrb	r4, [r3, #10]
 80063b6:	891a      	ldrh	r2, [r3, #8]
		tmpreg &=~ 0xFFFFU;
 80063b8:	9900      	ldr	r1, [sp, #0]
				| _conf -> rowaddr_size | _conf -> data_size
 80063ba:	7ad8      	ldrb	r0, [r3, #11]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 80063bc:	4322      	orrs	r2, r4
				| _conf -> rowaddr_size | _conf -> data_size
 80063be:	7b1c      	ldrb	r4, [r3, #12]
 80063c0:	4302      	orrs	r2, r0
		tmpreg &=~ 0xFFFFU;
 80063c2:	0c09      	lsrs	r1, r1, #16
				| _conf -> num_banks | _conf -> cas_latency
 80063c4:	7b58      	ldrb	r0, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 80063c6:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 80063c8:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency
 80063ca:	89dc      	ldrh	r4, [r3, #14]
		tmpreg &=~ 0xFFFFU;
 80063cc:	9100      	str	r1, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 80063ce:	4302      	orrs	r2, r0
			    | _conf ->read_delay;
 80063d0:	8a19      	ldrh	r1, [r3, #16]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 80063d2:	9800      	ldr	r0, [sp, #0]
				| _conf -> num_banks | _conf -> cas_latency
 80063d4:	4322      	orrs	r2, r4
			    | _conf ->read_delay;
 80063d6:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 80063d8:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 80063da:	4302      	orrs	r2, r0
 80063dc:	9200      	str	r2, [sp, #0]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 80063de:	b119      	cbz	r1, 80063e8 <fmc_sdram_init+0x58>
 80063e0:	9a00      	ldr	r2, [sp, #0]
 80063e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e6:	9200      	str	r2, [sp, #0]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80063e8:	7cda      	ldrb	r2, [r3, #19]
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	f040 808c 	bne.w	8006508 <fmc_sdram_init+0x178>
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 80063f0:	494a      	ldr	r1, [pc, #296]	; (800651c <fmc_sdram_init+0x18c>)
 80063f2:	9a00      	ldr	r2, [sp, #0]
 80063f4:	640a      	str	r2, [r1, #64]	; 0x40
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 80063f6:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80063f8:	9200      	str	r2, [sp, #0]
		tmpreg &=~ 0xFFFFFFFF;
 80063fa:	2000      	movs	r0, #0
 80063fc:	9a00      	ldr	r2, [sp, #0]
 80063fe:	9000      	str	r0, [sp, #0]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006400:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006402:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006404:	9d00      	ldr	r5, [sp, #0]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006406:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006408:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 800640a:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800640c:	432a      	orrs	r2, r5
 800640e:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006412:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006414:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006418:	e9d3 4009 	ldrd	r4, r0, [r3, #36]	; 0x24
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800641c:	3c01      	subs	r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800641e:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 8006422:	3801      	subs	r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006424:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006428:	e9d3 400b 	ldrd	r4, r0, [r3, #44]	; 0x2c
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 800642c:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 800642e:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 8006432:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006434:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006438:	9300      	str	r3, [sp, #0]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 800643a:	9b00      	ldr	r3, [sp, #0]
 800643c:	648b      	str	r3, [r1, #72]	; 0x48
}
 800643e:	b003      	add	sp, #12
 8006440:	bd30      	pop	{r4, r5, pc}
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 8006442:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006444:	9101      	str	r1, [sp, #4]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 8006446:	9901      	ldr	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006448:	891a      	ldrh	r2, [r3, #8]
 800644a:	8a1c      	ldrh	r4, [r3, #16]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 800644c:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8006450:	9101      	str	r1, [sp, #4]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006452:	9801      	ldr	r0, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006454:	7cd9      	ldrb	r1, [r3, #19]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 8006456:	4322      	orrs	r2, r4
 8006458:	b292      	uxth	r2, r2
 800645a:	4302      	orrs	r2, r0
 800645c:	9201      	str	r2, [sp, #4]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 800645e:	b119      	cbz	r1, 8006468 <fmc_sdram_init+0xd8>
 8006460:	9a01      	ldr	r2, [sp, #4]
 8006462:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006466:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 8006468:	4a2c      	ldr	r2, [pc, #176]	; (800651c <fmc_sdram_init+0x18c>)
 800646a:	9901      	ldr	r1, [sp, #4]
 800646c:	6411      	str	r1, [r2, #64]	; 0x40
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 800646e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006470:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFU;
 8006472:	9901      	ldr	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006474:	7adc      	ldrb	r4, [r3, #11]
 8006476:	7a9a      	ldrb	r2, [r3, #10]
 8006478:	7b18      	ldrb	r0, [r3, #12]
		tmpreg &=~ 0xFFFFU;
 800647a:	0c09      	lsrs	r1, r1, #16
 800647c:	0409      	lsls	r1, r1, #16
				| _conf -> rowaddr_size | _conf -> data_size
 800647e:	4322      	orrs	r2, r4
				| _conf -> num_banks | _conf -> cas_latency;
 8006480:	7b5c      	ldrb	r4, [r3, #13]
		tmpreg &=~ 0xFFFFU;
 8006482:	9101      	str	r1, [sp, #4]
				| _conf -> rowaddr_size | _conf -> data_size
 8006484:	4302      	orrs	r2, r0
				| _conf -> num_banks | _conf -> cas_latency;
 8006486:	89d9      	ldrh	r1, [r3, #14]
		tmpreg |= _conf -> coladdr_size
 8006488:	9801      	ldr	r0, [sp, #4]
				| _conf -> num_banks | _conf -> cas_latency;
 800648a:	4322      	orrs	r2, r4
 800648c:	430a      	orrs	r2, r1
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 800648e:	7c99      	ldrb	r1, [r3, #18]
		tmpreg |= _conf -> coladdr_size
 8006490:	4302      	orrs	r2, r0
 8006492:	9201      	str	r2, [sp, #4]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006494:	b119      	cbz	r1, 800649e <fmc_sdram_init+0x10e>
 8006496:	9a01      	ldr	r2, [sp, #4]
 8006498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800649c:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 800649e:	491f      	ldr	r1, [pc, #124]	; (800651c <fmc_sdram_init+0x18c>)
 80064a0:	9a01      	ldr	r2, [sp, #4]
 80064a2:	644a      	str	r2, [r1, #68]	; 0x44
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 80064a4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80064a6:	9201      	str	r2, [sp, #4]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 80064a8:	9801      	ldr	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 80064aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 80064ac:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 80064ae:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
 80064b2:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
 80064b6:	9001      	str	r0, [sp, #4]
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 80064b8:	3a01      	subs	r2, #1
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 80064ba:	9801      	ldr	r0, [sp, #4]
 80064bc:	3c01      	subs	r4, #1
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 80064be:	0512      	lsls	r2, r2, #20
 80064c0:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 80064c4:	4302      	orrs	r2, r0
 80064c6:	9201      	str	r2, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 80064c8:	9a01      	ldr	r2, [sp, #4]
 80064ca:	648a      	str	r2, [r1, #72]	; 0x48
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 80064cc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80064ce:	9201      	str	r2, [sp, #4]
		tmpreg &=~ 0xFFFFFFFF;
 80064d0:	2000      	movs	r0, #0
 80064d2:	9a01      	ldr	r2, [sp, #4]
 80064d4:	9001      	str	r0, [sp, #4]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064d6:	699a      	ldr	r2, [r3, #24]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 80064d8:	69d8      	ldr	r0, [r3, #28]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064da:	9d01      	ldr	r5, [sp, #4]
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 80064dc:	1e44      	subs	r4, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064de:	3a01      	subs	r2, #1
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 80064e0:	6a18      	ldr	r0, [r3, #32]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064e2:	432a      	orrs	r2, r5
 80064e4:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 80064e8:	3801      	subs	r0, #1
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80064ea:	6a9c      	ldr	r4, [r3, #40]	; 0x28
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064ec:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80064f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80064f2:	1e63      	subs	r3, r4, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064f4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80064f8:	1e42      	subs	r2, r0, #1
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80064fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80064fe:	9301      	str	r3, [sp, #4]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 8006500:	9b01      	ldr	r3, [sp, #4]
 8006502:	64cb      	str	r3, [r1, #76]	; 0x4c
}
 8006504:	b003      	add	sp, #12
 8006506:	bd30      	pop	{r4, r5, pc}
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 8006508:	9a00      	ldr	r2, [sp, #0]
 800650a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800650e:	9200      	str	r2, [sp, #0]
 8006510:	e76e      	b.n	80063f0 <fmc_sdram_init+0x60>
 8006512:	bf00      	nop
 8006514:	2000b508 	.word	0x2000b508
 8006518:	40023800 	.word	0x40023800
 800651c:	a0000100 	.word	0xa0000100

08006520 <gpio_port_clock_enable>:
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8006520:	4b28      	ldr	r3, [pc, #160]	; (80065c4 <gpio_port_clock_enable+0xa4>)
 8006522:	4298      	cmp	r0, r3
 8006524:	d01e      	beq.n	8006564 <gpio_port_clock_enable+0x44>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8006526:	4b28      	ldr	r3, [pc, #160]	; (80065c8 <gpio_port_clock_enable+0xa8>)
 8006528:	4298      	cmp	r0, r3
 800652a:	d021      	beq.n	8006570 <gpio_port_clock_enable+0x50>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 800652c:	4b27      	ldr	r3, [pc, #156]	; (80065cc <gpio_port_clock_enable+0xac>)
 800652e:	4298      	cmp	r0, r3
 8006530:	d024      	beq.n	800657c <gpio_port_clock_enable+0x5c>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8006532:	4b27      	ldr	r3, [pc, #156]	; (80065d0 <gpio_port_clock_enable+0xb0>)
 8006534:	4298      	cmp	r0, r3
 8006536:	d00f      	beq.n	8006558 <gpio_port_clock_enable+0x38>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8006538:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <gpio_port_clock_enable+0xb4>)
 800653a:	4298      	cmp	r0, r3
 800653c:	d024      	beq.n	8006588 <gpio_port_clock_enable+0x68>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 800653e:	4b26      	ldr	r3, [pc, #152]	; (80065d8 <gpio_port_clock_enable+0xb8>)
 8006540:	4298      	cmp	r0, r3
 8006542:	d027      	beq.n	8006594 <gpio_port_clock_enable+0x74>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <gpio_port_clock_enable+0xbc>)
 8006546:	4298      	cmp	r0, r3
 8006548:	d02a      	beq.n	80065a0 <gpio_port_clock_enable+0x80>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 800654a:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <gpio_port_clock_enable+0xc0>)
 800654c:	4298      	cmp	r0, r3
 800654e:	d033      	beq.n	80065b8 <gpio_port_clock_enable+0x98>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8006550:	4b24      	ldr	r3, [pc, #144]	; (80065e4 <gpio_port_clock_enable+0xc4>)
 8006552:	4298      	cmp	r0, r3
 8006554:	d02a      	beq.n	80065ac <gpio_port_clock_enable+0x8c>
#endif /* defined(GPIO */

}
 8006556:	4770      	bx	lr
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8006558:	4a23      	ldr	r2, [pc, #140]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 800655a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800655c:	f043 0308 	orr.w	r3, r3, #8
 8006560:	6313      	str	r3, [r2, #48]	; 0x30
 8006562:	4770      	bx	lr
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 8006566:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6313      	str	r3, [r2, #48]	; 0x30
 800656e:	4770      	bx	lr
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8006570:	4a1d      	ldr	r2, [pc, #116]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 8006572:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006574:	f043 0302 	orr.w	r3, r3, #2
 8006578:	6313      	str	r3, [r2, #48]	; 0x30
 800657a:	4770      	bx	lr
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 800657e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006580:	f043 0304 	orr.w	r3, r3, #4
 8006584:	6313      	str	r3, [r2, #48]	; 0x30
 8006586:	4770      	bx	lr
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8006588:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 800658a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800658c:	f043 0310 	orr.w	r3, r3, #16
 8006590:	6313      	str	r3, [r2, #48]	; 0x30
 8006592:	4770      	bx	lr
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 8006594:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 8006596:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8006598:	f043 0320 	orr.w	r3, r3, #32
 800659c:	6313      	str	r3, [r2, #48]	; 0x30
 800659e:	4770      	bx	lr
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 80065a0:	4a11      	ldr	r2, [pc, #68]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 80065a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80065a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a8:	6313      	str	r3, [r2, #48]	; 0x30
 80065aa:	4770      	bx	lr
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 80065ac:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 80065ae:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80065b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b4:	6313      	str	r3, [r2, #48]	; 0x30
 80065b6:	e7ce      	b.n	8006556 <gpio_port_clock_enable+0x36>
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 80065b8:	4a0b      	ldr	r2, [pc, #44]	; (80065e8 <gpio_port_clock_enable+0xc8>)
 80065ba:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	6313      	str	r3, [r2, #48]	; 0x30
 80065c2:	4770      	bx	lr
 80065c4:	40020000 	.word	0x40020000
 80065c8:	40020400 	.word	0x40020400
 80065cc:	40020800 	.word	0x40020800
 80065d0:	40020c00 	.word	0x40020c00
 80065d4:	40021000 	.word	0x40021000
 80065d8:	40021400 	.word	0x40021400
 80065dc:	40021800 	.word	0x40021800
 80065e0:	40021c00 	.word	0x40021c00
 80065e4:	40022000 	.word	0x40022000
 80065e8:	40023800 	.word	0x40023800

080065ec <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 80065ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ee:	b083      	sub	sp, #12
	else if(mode == GPIO_INPUT_PULLDOWN || mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN)
		gpio_set_pulldown(port, pin);


#elif defined(STM32F4)
	__IO uint32_t tmpreg = 0U;
 80065f0:	2300      	movs	r3, #0
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 80065f2:	2a03      	cmp	r2, #3
	__IO uint32_t tmpreg = 0U;
 80065f4:	9301      	str	r3, [sp, #4]
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 80065f6:	d81c      	bhi.n	8006632 <gpio_set_mode+0x46>
		port -> MODER &=~ (3U << (pin * 2));
 80065f8:	6804      	ldr	r4, [r0, #0]
 80065fa:	0049      	lsls	r1, r1, #1
 80065fc:	2303      	movs	r3, #3
 80065fe:	408b      	lsls	r3, r1
 8006600:	ea24 0403 	bic.w	r4, r4, r3
 8006604:	6004      	str	r4, [r0, #0]

		tmpreg = port -> PUPDR;
 8006606:	68c4      	ldr	r4, [r0, #12]
 8006608:	9401      	str	r4, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800660a:	9c01      	ldr	r4, [sp, #4]
		switch(mode){
 800660c:	2a02      	cmp	r2, #2
		tmpreg &=~ (3U << (pin * 2));
 800660e:	ea24 0303 	bic.w	r3, r4, r3
 8006612:	9301      	str	r3, [sp, #4]
		switch(mode){
 8006614:	d046      	beq.n	80066a4 <gpio_set_mode+0xb8>
 8006616:	2a03      	cmp	r2, #3
 8006618:	d105      	bne.n	8006626 <gpio_set_mode+0x3a>
			case GPIO_INPUT_PULLUP:
				tmpreg |=  (1U << (pin * 2));
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
 800661a:	9a01      	ldr	r2, [sp, #4]
 800661c:	2302      	movs	r3, #2
 800661e:	fa03 f101 	lsl.w	r1, r3, r1
 8006622:	4311      	orrs	r1, r2
 8006624:	9101      	str	r1, [sp, #4]

		tmpreg = port -> PUPDR;
		tmpreg &=~ (3U << (pin * 2));
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
		port -> PUPDR |=tmpreg;
 8006626:	9a01      	ldr	r2, [sp, #4]
 8006628:	68c3      	ldr	r3, [r0, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60c3      	str	r3, [r0, #12]
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
#endif /* STM32F4 */
}
 800662e:	b003      	add	sp, #12
 8006630:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 8006632:	1f13      	subs	r3, r2, #4
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b05      	cmp	r3, #5
 8006638:	d82b      	bhi.n	8006692 <gpio_set_mode+0xa6>
		port -> MODER &=~ (3U << (pin * 2));
 800663a:	6804      	ldr	r4, [r0, #0]
 800663c:	004d      	lsls	r5, r1, #1
 800663e:	f04f 0c03 	mov.w	ip, #3
 8006642:	fa0c fc05 	lsl.w	ip, ip, r5
 8006646:	ea24 040c 	bic.w	r4, r4, ip
 800664a:	6004      	str	r4, [r0, #0]
		port -> MODER |=  (1U << (pin * 2));
 800664c:	6807      	ldr	r7, [r0, #0]
 800664e:	2401      	movs	r4, #1
 8006650:	fa04 f605 	lsl.w	r6, r4, r5
 8006654:	4337      	orrs	r7, r6
 8006656:	6007      	str	r7, [r0, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 8006658:	2b02      	cmp	r3, #2
 800665a:	fa04 f101 	lsl.w	r1, r4, r1
		port -> MODER &=~ (3U << (pin * 2));
 800665e:	ea6f 0e0c 	mvn.w	lr, ip
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 8006662:	6844      	ldr	r4, [r0, #4]
 8006664:	d825      	bhi.n	80066b2 <gpio_set_mode+0xc6>
 8006666:	4321      	orrs	r1, r4
 8006668:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 800666a:	6883      	ldr	r3, [r0, #8]
 800666c:	ea0e 0303 	and.w	r3, lr, r3
 8006670:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8006672:	6883      	ldr	r3, [r0, #8]
 8006674:	ea4c 0303 	orr.w	r3, ip, r3
 8006678:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 800667a:	68c3      	ldr	r3, [r0, #12]
 800667c:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 800667e:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006680:	2a05      	cmp	r2, #5
		tmpreg &=~ (3U << (pin * 2));
 8006682:	ea0e 0303 	and.w	r3, lr, r3
 8006686:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006688:	d12f      	bne.n	80066ea <gpio_set_mode+0xfe>
 800668a:	9b01      	ldr	r3, [sp, #4]
 800668c:	431e      	orrs	r6, r3
 800668e:	9601      	str	r6, [sp, #4]
 8006690:	e7c9      	b.n	8006626 <gpio_set_mode+0x3a>
		port -> MODER |= (3U << (pin * 2));
 8006692:	6802      	ldr	r2, [r0, #0]
 8006694:	2303      	movs	r3, #3
 8006696:	0049      	lsls	r1, r1, #1
 8006698:	fa03 f101 	lsl.w	r1, r3, r1
 800669c:	4311      	orrs	r1, r2
 800669e:	6001      	str	r1, [r0, #0]
}
 80066a0:	b003      	add	sp, #12
 80066a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				tmpreg |=  (1U << (pin * 2));
 80066a4:	9a01      	ldr	r2, [sp, #4]
 80066a6:	2301      	movs	r3, #1
 80066a8:	fa03 f101 	lsl.w	r1, r3, r1
 80066ac:	4311      	orrs	r1, r2
 80066ae:	9101      	str	r1, [sp, #4]
			break;
 80066b0:	e7b9      	b.n	8006626 <gpio_set_mode+0x3a>
		else port -> OTYPER &=~ (1U << pin);
 80066b2:	ea24 0101 	bic.w	r1, r4, r1
 80066b6:	6041      	str	r1, [r0, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 80066b8:	6883      	ldr	r3, [r0, #8]
 80066ba:	ea0e 0303 	and.w	r3, lr, r3
 80066be:	6083      	str	r3, [r0, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 80066c0:	6883      	ldr	r3, [r0, #8]
 80066c2:	ea4c 0303 	orr.w	r3, ip, r3
 80066c6:	6083      	str	r3, [r0, #8]
		tmpreg = port -> PUPDR;
 80066c8:	68c3      	ldr	r3, [r0, #12]
 80066ca:	9301      	str	r3, [sp, #4]
		tmpreg &=~ (3U << (pin * 2));
 80066cc:	9b01      	ldr	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80066ce:	2a08      	cmp	r2, #8
		tmpreg &=~ (3U << (pin * 2));
 80066d0:	ea0e 0303 	and.w	r3, lr, r3
 80066d4:	9301      	str	r3, [sp, #4]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 80066d6:	d0d8      	beq.n	800668a <gpio_set_mode+0x9e>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 80066d8:	2a09      	cmp	r2, #9
 80066da:	d1a4      	bne.n	8006626 <gpio_set_mode+0x3a>
 80066dc:	9a01      	ldr	r2, [sp, #4]
 80066de:	2302      	movs	r3, #2
 80066e0:	fa03 f505 	lsl.w	r5, r3, r5
 80066e4:	4315      	orrs	r5, r2
 80066e6:	9501      	str	r5, [sp, #4]
 80066e8:	e79d      	b.n	8006626 <gpio_set_mode+0x3a>
 80066ea:	2a06      	cmp	r2, #6
 80066ec:	d0f6      	beq.n	80066dc <gpio_set_mode+0xf0>
 80066ee:	e79a      	b.n	8006626 <gpio_set_mode+0x3a>

080066f0 <gpio_set_alternatefunction>:
		if(function == GPIO_ALTERNATE_OPENDRAIN) port -> CRH |= (3UL << (2 + (pin-8)*4));
		else port -> CRH |= (2UL << (2 + (pin-8)*4));

	}
#elif defined(STM32F4)
	port -> MODER &=~ (3U << (pin*2));
 80066f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 80066f4:	b430      	push	{r4, r5}
	port -> MODER &=~ (3U << (pin*2));
 80066f6:	2303      	movs	r3, #3
 80066f8:	6805      	ldr	r5, [r0, #0]
 80066fa:	fa03 f30c 	lsl.w	r3, r3, ip
 80066fe:	ea25 0503 	bic.w	r5, r5, r3
 8006702:	6005      	str	r5, [r0, #0]
	port -> MODER |=  (2U << (pin*2));
 8006704:	6805      	ldr	r5, [r0, #0]
 8006706:	2402      	movs	r4, #2
 8006708:	fa04 f40c 	lsl.w	r4, r4, ip
 800670c:	432c      	orrs	r4, r5
 800670e:	6004      	str	r4, [r0, #0]

	port -> OTYPER &=~ (1U<<pin);
 8006710:	6844      	ldr	r4, [r0, #4]
 8006712:	f04f 0c01 	mov.w	ip, #1
 8006716:	fa0c fc01 	lsl.w	ip, ip, r1
 800671a:	ea24 040c 	bic.w	r4, r4, ip
 800671e:	6044      	str	r4, [r0, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 8006720:	6884      	ldr	r4, [r0, #8]
 8006722:	ea24 0403 	bic.w	r4, r4, r3
 8006726:	6084      	str	r4, [r0, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8006728:	6884      	ldr	r4, [r0, #8]

	if(pin < 8){
 800672a:	2907      	cmp	r1, #7
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 800672c:	ea43 0304 	orr.w	r3, r3, r4
 8006730:	6083      	str	r3, [r0, #8]
	if(pin < 8){
 8006732:	d80d      	bhi.n	8006750 <gpio_set_alternatefunction+0x60>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 8006734:	6a03      	ldr	r3, [r0, #32]
 8006736:	0089      	lsls	r1, r1, #2
 8006738:	240f      	movs	r4, #15
 800673a:	408c      	lsls	r4, r1
 800673c:	ea23 0304 	bic.w	r3, r3, r4
 8006740:	6203      	str	r3, [r0, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 8006742:	6a03      	ldr	r3, [r0, #32]
 8006744:	fa02 f101 	lsl.w	r1, r2, r1
 8006748:	4319      	orrs	r1, r3
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
#endif /* STM32F4 */
}
 800674a:	bc30      	pop	{r4, r5}
		port -> AFR[0] |=  (function  << (pin*4));
 800674c:	6201      	str	r1, [r0, #32]
}
 800674e:	4770      	bx	lr
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 8006750:	3908      	subs	r1, #8
 8006752:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006754:	0089      	lsls	r1, r1, #2
 8006756:	240f      	movs	r4, #15
 8006758:	408c      	lsls	r4, r1
 800675a:	ea23 0304 	bic.w	r3, r3, r4
 800675e:	6243      	str	r3, [r0, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 8006760:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006762:	408a      	lsls	r2, r1
 8006764:	431a      	orrs	r2, r3
}
 8006766:	bc30      	pop	{r4, r5}
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 8006768:	6242      	str	r2, [r0, #36]	; 0x24
}
 800676a:	4770      	bx	lr

0800676c <gpio_set_alternatefunction_type>:
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
#if defined(STM32F4)
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 800676c:	2a04      	cmp	r2, #4
 800676e:	d00a      	beq.n	8006786 <gpio_set_alternatefunction_type+0x1a>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 8006770:	2a07      	cmp	r2, #7
 8006772:	d000      	beq.n	8006776 <gpio_set_alternatefunction_type+0xa>
#endif /* STM32F4 */
}
 8006774:	4770      	bx	lr
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 8006776:	6843      	ldr	r3, [r0, #4]
 8006778:	2201      	movs	r2, #1
 800677a:	fa02 f101 	lsl.w	r1, r2, r1
 800677e:	ea23 0101 	bic.w	r1, r3, r1
 8006782:	6041      	str	r1, [r0, #4]
}
 8006784:	4770      	bx	lr
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 8006786:	6842      	ldr	r2, [r0, #4]
 8006788:	2301      	movs	r3, #1
 800678a:	fa03 f101 	lsl.w	r1, r3, r1
 800678e:	4311      	orrs	r1, r2
 8006790:	6041      	str	r1, [r0, #4]
 8006792:	4770      	bx	lr

08006794 <gpio_set_pulldown>:
 */
void gpio_set_pulldown(GPIO_TypeDef *port, uint16_t pin){
#if defined(STM32F1)
	port -> ODR &=~ (1 << pin);
#elif defined(STM32F4)
	port ->PUPDR &=~ (3U << (pin*2));
 8006794:	68c3      	ldr	r3, [r0, #12]
 8006796:	0049      	lsls	r1, r1, #1
 8006798:	2203      	movs	r2, #3
 800679a:	408a      	lsls	r2, r1
 800679c:	ea23 0302 	bic.w	r3, r3, r2
 80067a0:	60c3      	str	r3, [r0, #12]
	port ->PUPDR |= (2U << (pin*2));
 80067a2:	68c2      	ldr	r2, [r0, #12]
 80067a4:	2302      	movs	r3, #2
 80067a6:	fa03 f101 	lsl.w	r1, r3, r1
 80067aa:	4311      	orrs	r1, r2
 80067ac:	60c1      	str	r1, [r0, #12]
#endif /* STM32F4 */
}
 80067ae:	4770      	bx	lr

080067b0 <gpio_set>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << pin);
 80067b0:	6982      	ldr	r2, [r0, #24]
 80067b2:	2301      	movs	r3, #1
 80067b4:	fa03 f101 	lsl.w	r1, r3, r1
 80067b8:	4311      	orrs	r1, r2
 80067ba:	6181      	str	r1, [r0, #24]
}
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop

080067c0 <gpio_reset>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
	port -> BSRR |= (1 << (pin + 16));
 80067c0:	6982      	ldr	r2, [r0, #24]
 80067c2:	3110      	adds	r1, #16
 80067c4:	2301      	movs	r3, #1
 80067c6:	fa03 f101 	lsl.w	r1, r3, r1
 80067ca:	4311      	orrs	r1, r2
 80067cc:	6181      	str	r1, [r0, #24]
}
 80067ce:	4770      	bx	lr

080067d0 <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 80067d0:	b410      	push	{r4}
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 80067d2:	2301      	movs	r3, #1
 80067d4:	6944      	ldr	r4, [r0, #20]
 80067d6:	fa03 f201 	lsl.w	r2, r3, r1
 80067da:	4214      	tst	r4, r2
 80067dc:	d008      	beq.n	80067f0 <gpio_toggle+0x20>
	port -> BSRR |= (1 << (pin + 16));
 80067de:	6982      	ldr	r2, [r0, #24]
}
 80067e0:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << (pin + 16));
 80067e4:	3110      	adds	r1, #16
 80067e6:	fa03 f101 	lsl.w	r1, r3, r1
 80067ea:	4311      	orrs	r1, r2
 80067ec:	6181      	str	r1, [r0, #24]
}
 80067ee:	4770      	bx	lr
	port -> BSRR |= (1 << pin);
 80067f0:	6983      	ldr	r3, [r0, #24]
}
 80067f2:	f85d 4b04 	ldr.w	r4, [sp], #4
	port -> BSRR |= (1 << pin);
 80067f6:	431a      	orrs	r2, r3
 80067f8:	6182      	str	r2, [r0, #24]
}
 80067fa:	4770      	bx	lr

080067fc <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 80067fc:	b410      	push	{r4}
i2c::i2c(I2C_TypeDef *i2c){
 80067fe:	480a      	ldr	r0, [pc, #40]	; (8006828 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x2c>)
 8006800:	4c0a      	ldr	r4, [pc, #40]	; (800682c <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x30>)
 8006802:	490b      	ldr	r1, [pc, #44]	; (8006830 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x34>)
 8006804:	2200      	movs	r2, #0
 8006806:	2300      	movs	r3, #0
 8006808:	e9c4 2300 	strd	r2, r3, [r4]
 800680c:	e9c0 2300 	strd	r2, r3, [r0]
 8006810:	e9c1 2300 	strd	r2, r3, [r1]
	_i2c = i2c;
 8006814:	4b07      	ldr	r3, [pc, #28]	; (8006834 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x38>)
 8006816:	60a3      	str	r3, [r4, #8]
 8006818:	4a07      	ldr	r2, [pc, #28]	; (8006838 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef+0x3c>)
}
 800681a:	f85d 4b04 	ldr.w	r4, [sp], #4
	_i2c = i2c;
 800681e:	6082      	str	r2, [r0, #8]
 8006820:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006824:	608b      	str	r3, [r1, #8]
}
 8006826:	4770      	bx	lr
 8006828:	2000b510 	.word	0x2000b510
 800682c:	2000b530 	.word	0x2000b530
 8006830:	2000b520 	.word	0x2000b520
 8006834:	40005c00 	.word	0x40005c00
 8006838:	40005400 	.word	0x40005400

0800683c <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 800683c:	b530      	push	{r4, r5, lr}
	stm_ret_t ret;

	IWDG -> KR = IWDG_KEY_ENABLE;
 800683e:	4c0c      	ldr	r4, [pc, #48]	; (8006870 <iwdg_init+0x34>)
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8006840:	b083      	sub	sp, #12
	IWDG -> KR = IWDG_KEY_ENABLE;
 8006842:	f64c 43cc 	movw	r3, #52428	; 0xcccc
 8006846:	6023      	str	r3, [r4, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;

	IWDG -> PR = psc;
	IWDG -> RLR = arr-1;
 8006848:	3a01      	subs	r2, #1
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 800684a:	f245 5355 	movw	r3, #21845	; 0x5555

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 800684e:	2531      	movs	r5, #49	; 0x31
	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8006850:	6023      	str	r3, [r4, #0]
	IWDG -> PR = psc;
 8006852:	6061      	str	r1, [r4, #4]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8006854:	2300      	movs	r3, #0
	IWDG -> RLR = arr-1;
 8006856:	60a2      	str	r2, [r4, #8]
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8006858:	4906      	ldr	r1, [pc, #24]	; (8006874 <iwdg_init+0x38>)
 800685a:	9500      	str	r5, [sp, #0]
 800685c:	2203      	movs	r2, #3
stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 800685e:	4605      	mov	r5, r0
	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 8006860:	f002 fa18 	bl	8008c94 <wait_flag_in_register_timeout>

	IWDG -> KR = IWDG_KEY_RELOAD;
 8006864:	f64a 23aa 	movw	r3, #43690	; 0xaaaa

	return ret;
}
 8006868:	4628      	mov	r0, r5
	IWDG -> KR = IWDG_KEY_RELOAD;
 800686a:	6023      	str	r3, [r4, #0]
}
 800686c:	b003      	add	sp, #12
 800686e:	bd30      	pop	{r4, r5, pc}
 8006870:	40003000 	.word	0x40003000
 8006874:	4000300c 	.word	0x4000300c

08006878 <iwdg_disable_in_debugmode>:

void iwdg_disable_in_debugmode(void){
#if defined(STM32F1)
	DBGMCU->CR |= DBGMCU_CR_DBG_IWDG_STOP;
#elif defined(STM32F4)
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 8006878:	4a02      	ldr	r2, [pc, #8]	; (8006884 <iwdg_disable_in_debugmode+0xc>)
 800687a:	6893      	ldr	r3, [r2, #8]
 800687c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006880:	6093      	str	r3, [r2, #8]
#endif /* STM32F4 */
}
 8006882:	4770      	bx	lr
 8006884:	e0042000 	.word	0xe0042000

08006888 <iwdg_refresh>:

void iwdg_refresh(void){
	IWDG -> KR = IWDG_KEY_RELOAD;
 8006888:	4b02      	ldr	r3, [pc, #8]	; (8006894 <iwdg_refresh+0xc>)
 800688a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800688e:	601a      	str	r2, [r3, #0]
}
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40003000 	.word	0x40003000

08006898 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	b086      	sub	sp, #24
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 800689e:	2300      	movs	r3, #0
	 */

#if defined(STM32F1)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> CFGR & RCC_CFGR_PLLSRC))){
#elif defined(STM32F4)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80068a0:	4ab9      	ldr	r2, [pc, #740]	; (8006b88 <rcc_init+0x2f0>)
	stm_ret_t ret;
 80068a2:	6043      	str	r3, [r0, #4]
	__IO uint32_t tmpreg = 0;
 80068a4:	9305      	str	r3, [sp, #20]
	stm_ret_t ret;
 80068a6:	2301      	movs	r3, #1
 80068a8:	7003      	strb	r3, [r0, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80068aa:	6893      	ldr	r3, [r2, #8]
	_conf = rcc_conf;
 80068ac:	4eb7      	ldr	r6, [pc, #732]	; (8006b8c <rcc_init+0x2f4>)
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80068ae:	075b      	lsls	r3, r3, #29
stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 80068b0:	4604      	mov	r4, r0
	_conf = rcc_conf;
 80068b2:	6031      	str	r1, [r6, #0]
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80068b4:	d412      	bmi.n	80068dc <rcc_init+0x44>
 80068b6:	6893      	ldr	r3, [r2, #8]
 80068b8:	071f      	lsls	r7, r3, #28
 80068ba:	d40c      	bmi.n	80068d6 <rcc_init+0x3e>
			set_return(&ret, STM_ERR, __LINE__);
			return ret;
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 80068bc:	7b0b      	ldrb	r3, [r1, #12]
 80068be:	b1db      	cbz	r3, 80068f8 <rcc_init+0x60>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d03b      	beq.n	800693c <rcc_init+0xa4>
			set_return_line(&ret, __LINE__);
			return ret;
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 80068c4:	2255      	movs	r2, #85	; 0x55
 80068c6:	2100      	movs	r1, #0
 80068c8:	4620      	mov	r0, r4
 80068ca:	f002 fa1f 	bl	8008d0c <set_return>
	AFIO -> MAPR |= AFIO_MAPR_SWJ_CFG_JTAGDISABLE;

#endif /* STM32F1 */

	return ret;
}
 80068ce:	4620      	mov	r0, r4
 80068d0:	b006      	add	sp, #24
 80068d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 80068d6:	6853      	ldr	r3, [r2, #4]
 80068d8:	025d      	lsls	r5, r3, #9
 80068da:	d5ef      	bpl.n	80068bc <rcc_init+0x24>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 80068dc:	4baa      	ldr	r3, [pc, #680]	; (8006b88 <rcc_init+0x2f0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 80068e4:	d1ea      	bne.n	80068bc <rcc_init+0x24>
			set_return(&ret, STM_ERR, __LINE__);
 80068e6:	4620      	mov	r0, r4
 80068e8:	2234      	movs	r2, #52	; 0x34
 80068ea:	4619      	mov	r1, r3
 80068ec:	f002 fa0e 	bl	8008d0c <set_return>
}
 80068f0:	4620      	mov	r0, r4
 80068f2:	b006      	add	sp, #24
 80068f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		RCC -> CR |= RCC_CR_HSION;
 80068f8:	4fa3      	ldr	r7, [pc, #652]	; (8006b88 <rcc_init+0x2f0>)
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	f043 0301 	orr.w	r3, r3, #1
 8006900:	603b      	str	r3, [r7, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 8006902:	ad02      	add	r5, sp, #8
 8006904:	2364      	movs	r3, #100	; 0x64
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	4639      	mov	r1, r7
 800690a:	4628      	mov	r0, r5
 800690c:	2301      	movs	r3, #1
 800690e:	2202      	movs	r2, #2
 8006910:	f002 f9c0 	bl	8008c94 <wait_flag_in_register_timeout>
 8006914:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006918:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 800691c:	4620      	mov	r0, r4
 800691e:	f002 fa03 	bl	8008d28 <is_timeout>
 8006922:	2800      	cmp	r0, #0
 8006924:	d155      	bne.n	80069d2 <rcc_init+0x13a>
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 8006926:	683b      	ldr	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8006928:	6832      	ldr	r2, [r6, #0]
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 800692a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800692e:	603b      	str	r3, [r7, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6891      	ldr	r1, [r2, #8]
 8006934:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	e016      	b.n	800696a <rcc_init+0xd2>
		RCC -> CR |= RCC_CR_HSEON;
 800693c:	4992      	ldr	r1, [pc, #584]	; (8006b88 <rcc_init+0x2f0>)
 800693e:	680a      	ldr	r2, [r1, #0]
 8006940:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006944:	600a      	str	r2, [r1, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 8006946:	ad02      	add	r5, sp, #8
 8006948:	22c8      	movs	r2, #200	; 0xc8
 800694a:	9200      	str	r2, [sp, #0]
 800694c:	4628      	mov	r0, r5
 800694e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006952:	f002 f99f 	bl	8008c94 <wait_flag_in_register_timeout>
 8006956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800695a:	e884 0003 	stmia.w	r4, {r0, r1}
		if(is_timeout(&ret)) {
 800695e:	4620      	mov	r0, r4
 8006960:	f002 f9e2 	bl	8008d28 <is_timeout>
 8006964:	2800      	cmp	r0, #0
 8006966:	d17c      	bne.n	8006a62 <rcc_init+0x1ca>
	if(_conf -> sysclock_source == PLLCLK){
 8006968:	6832      	ldr	r2, [r6, #0]
 800696a:	7b53      	ldrb	r3, [r2, #13]
 800696c:	2b02      	cmp	r3, #2
 800696e:	d104      	bne.n	800697a <rcc_init+0xe2>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 8006970:	4f85      	ldr	r7, [pc, #532]	; (8006b88 <rcc_init+0x2f0>)
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f013 0308 	ands.w	r3, r3, #8
 8006978:	d078      	beq.n	8006a6c <rcc_init+0x1d4>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 800697a:	6910      	ldr	r0, [r2, #16]
 800697c:	f002 fa2e 	bl	8008ddc <embedded_flash_calculate_latency>
 8006980:	4607      	mov	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 8006982:	f002 fa57 	bl	8008e34 <embedded_flash_get_latency>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8006986:	4287      	cmp	r7, r0
	uint32_t current_latency = embedded_flash_get_latency();
 8006988:	4680      	mov	r8, r0
	if(latency > current_latency) embedded_flash_set_latency(latency);
 800698a:	d866      	bhi.n	8006a5a <rcc_init+0x1c2>
	PWR -> CR |= PWR_CR_ODEN;
 800698c:	f8df 920c 	ldr.w	r9, [pc, #524]	; 8006b9c <rcc_init+0x304>
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8006990:	497f      	ldr	r1, [pc, #508]	; (8006b90 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODEN;
 8006992:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 8006996:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
	PWR -> CR |= PWR_CR_ODEN;
 800699a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699e:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 80069a2:	4628      	mov	r0, r5
 80069a4:	f8cd a000 	str.w	sl, [sp]
 80069a8:	2301      	movs	r3, #1
 80069aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80069ae:	f002 f971 	bl	8008c94 <wait_flag_in_register_timeout>
 80069b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80069b6:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 80069ba:	4620      	mov	r0, r4
 80069bc:	f002 f9b4 	bl	8008d28 <is_timeout>
 80069c0:	b160      	cbz	r0, 80069dc <rcc_init+0x144>
		set_return_line(&ret, __LINE__);
 80069c2:	4620      	mov	r0, r4
 80069c4:	2188      	movs	r1, #136	; 0x88
 80069c6:	f002 f9a5 	bl	8008d14 <set_return_line>
}
 80069ca:	4620      	mov	r0, r4
 80069cc:	b006      	add	sp, #24
 80069ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			set_return_line(&ret, __LINE__);
 80069d2:	2141      	movs	r1, #65	; 0x41
 80069d4:	4620      	mov	r0, r4
 80069d6:	f002 f99d 	bl	8008d14 <set_return_line>
			return ret;
 80069da:	e778      	b.n	80068ce <rcc_init+0x36>
	PWR -> CR |= PWR_CR_ODSWEN;
 80069dc:	f8d9 3000 	ldr.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 80069e0:	496b      	ldr	r1, [pc, #428]	; (8006b90 <rcc_init+0x2f8>)
	PWR -> CR |= PWR_CR_ODSWEN;
 80069e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e6:	f8c9 3000 	str.w	r3, [r9]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 80069ea:	4628      	mov	r0, r5
 80069ec:	f8cd a000 	str.w	sl, [sp]
 80069f0:	2301      	movs	r3, #1
 80069f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069f6:	f002 f94d 	bl	8008c94 <wait_flag_in_register_timeout>
 80069fa:	e895 0003 	ldmia.w	r5, {r0, r1}
 80069fe:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8006a02:	4620      	mov	r0, r4
 8006a04:	f002 f990 	bl	8008d28 <is_timeout>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 8087 	bne.w	8006b1c <rcc_init+0x284>
	if(_conf -> sysclock_source == HSI){
 8006a0e:	6833      	ldr	r3, [r6, #0]
 8006a10:	7b5a      	ldrb	r2, [r3, #13]
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d074      	beq.n	8006b00 <rcc_init+0x268>
	else if(_conf -> sysclock_source == HSE){
 8006a16:	2a01      	cmp	r2, #1
 8006a18:	f000 80a8 	beq.w	8006b6c <rcc_init+0x2d4>
	else if(_conf -> sysclock_source == PLLCLK){
 8006a1c:	2a02      	cmp	r2, #2
 8006a1e:	f000 80bf 	beq.w	8006ba0 <rcc_init+0x308>
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8006a22:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8006b88 <rcc_init+0x2f0>
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8006a26:	495b      	ldr	r1, [pc, #364]	; (8006b94 <rcc_init+0x2fc>)
	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8006a28:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006a2c:	f8c9 2008 	str.w	r2, [r9, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8006a30:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	4628      	mov	r0, r5
 8006a38:	2301      	movs	r3, #1
 8006a3a:	f002 f92b 	bl	8008c94 <wait_flag_in_register_timeout>
 8006a3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a42:	e884 0003 	stmia.w	r4, {r0, r1}
	if(is_timeout(&ret)) {
 8006a46:	4620      	mov	r0, r4
 8006a48:	f002 f96e 	bl	8008d28 <is_timeout>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d06a      	beq.n	8006b26 <rcc_init+0x28e>
		set_return_line(&ret, __LINE__);
 8006a50:	21ad      	movs	r1, #173	; 0xad
 8006a52:	4620      	mov	r0, r4
 8006a54:	f002 f95e 	bl	8008d14 <set_return_line>
		return ret;
 8006a58:	e739      	b.n	80068ce <rcc_init+0x36>
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f002 f9b4 	bl	8008dc8 <embedded_flash_set_latency>
 8006a60:	e794      	b.n	800698c <rcc_init+0xf4>
			set_return_line(&ret, __LINE__);
 8006a62:	2150      	movs	r1, #80	; 0x50
 8006a64:	4620      	mov	r0, r4
 8006a66:	f002 f955 	bl	8008d14 <set_return_line>
			return ret;
 8006a6a:	e730      	b.n	80068ce <rcc_init+0x36>
			RCC -> CR &=~ RCC_CR_PLLON;
 8006a6c:	683a      	ldr	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8006a6e:	f04f 0864 	mov.w	r8, #100	; 0x64
			RCC -> CR &=~ RCC_CR_PLLON;
 8006a72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006a76:	603a      	str	r2, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8006a78:	4639      	mov	r1, r7
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	f8cd 8000 	str.w	r8, [sp]
 8006a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006a84:	f002 f906 	bl	8008c94 <wait_flag_in_register_timeout>
 8006a88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a8c:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8006a90:	4620      	mov	r0, r4
 8006a92:	f002 f949 	bl	8008d28 <is_timeout>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d13b      	bne.n	8006b12 <rcc_init+0x27a>
			tmpreg = RCC -> PLLCFGR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	9305      	str	r3, [sp, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 8006a9e:	9b05      	ldr	r3, [sp, #20]
 8006aa0:	4a3d      	ldr	r2, [pc, #244]	; (8006b98 <rcc_init+0x300>)
 8006aa2:	4013      	ands	r3, r2
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006aa4:	6832      	ldr	r2, [r6, #0]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 8006aa6:	9305      	str	r3, [sp, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006aa8:	9b05      	ldr	r3, [sp, #20]
 8006aaa:	6991      	ldr	r1, [r2, #24]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8006aac:	6a50      	ldr	r0, [r2, #36]	; 0x24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	69d1      	ldr	r1, [r2, #28]
 8006ab2:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8006ab6:	6a11      	ldr	r1, [r2, #32]
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 8006ab8:	7b92      	ldrb	r2, [r2, #14]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 8006aba:	0849      	lsrs	r1, r1, #1
 8006abc:	3901      	subs	r1, #1
 8006abe:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006ac2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006ac6:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
 8006aca:	9305      	str	r3, [sp, #20]
			RCC -> PLLCFGR = tmpreg;
 8006acc:	9b05      	ldr	r3, [sp, #20]
 8006ace:	607b      	str	r3, [r7, #4]
			RCC -> CR |= RCC_CR_PLLON;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad6:	603b      	str	r3, [r7, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8006ad8:	4639      	mov	r1, r7
 8006ada:	4628      	mov	r0, r5
 8006adc:	f8cd 8000 	str.w	r8, [sp]
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ae6:	f002 f8d5 	bl	8008c94 <wait_flag_in_register_timeout>
 8006aea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006aee:	e884 0003 	stmia.w	r4, {r0, r1}
			if(is_timeout(&ret)) {
 8006af2:	4620      	mov	r0, r4
 8006af4:	f002 f918 	bl	8008d28 <is_timeout>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d15b      	bne.n	8006bb4 <rcc_init+0x31c>
	uint32_t latency = embedded_flash_calculate_latency(_conf->sysclock_frequency);
 8006afc:	6832      	ldr	r2, [r6, #0]
 8006afe:	e73c      	b.n	800697a <rcc_init+0xe2>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 8006b00:	4b21      	ldr	r3, [pc, #132]	; (8006b88 <rcc_init+0x2f0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	0798      	lsls	r0, r3, #30
 8006b06:	d48c      	bmi.n	8006a22 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8006b08:	2199      	movs	r1, #153	; 0x99
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f002 f902 	bl	8008d14 <set_return_line>
			return ret;
 8006b10:	e6dd      	b.n	80068ce <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8006b12:	2161      	movs	r1, #97	; 0x61
 8006b14:	4620      	mov	r0, r4
 8006b16:	f002 f8fd 	bl	8008d14 <set_return_line>
				return ret;
 8006b1a:	e6d8      	b.n	80068ce <rcc_init+0x36>
		set_return_line(&ret, __LINE__);
 8006b1c:	218f      	movs	r1, #143	; 0x8f
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f002 f8f8 	bl	8008d14 <set_return_line>
		return ret;
 8006b24:	e6d3      	b.n	80068ce <rcc_init+0x36>
	tmpreg = RCC -> CFGR;
 8006b26:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006b2a:	9305      	str	r3, [sp, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8006b2c:	9b05      	ldr	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8006b2e:	6832      	ldr	r2, [r6, #0]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 8006b30:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8006b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b38:	9305      	str	r3, [sp, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 8006b3a:	7d53      	ldrb	r3, [r2, #21]
 8006b3c:	7d11      	ldrb	r1, [r2, #20]
 8006b3e:	7d92      	ldrb	r2, [r2, #22]
 8006b40:	3303      	adds	r3, #3
 8006b42:	3107      	adds	r1, #7
 8006b44:	029b      	lsls	r3, r3, #10
 8006b46:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8006b4a:	9905      	ldr	r1, [sp, #20]
 8006b4c:	3203      	adds	r2, #3
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8006b54:	9305      	str	r3, [sp, #20]
	RCC -> CFGR = tmpreg;
 8006b56:	9b05      	ldr	r3, [sp, #20]
 8006b58:	f8c9 3008 	str.w	r3, [r9, #8]
	SystemCoreClockUpdate();
 8006b5c:	f7fa fb36 	bl	80011cc <SystemCoreClockUpdate>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8006b60:	4547      	cmp	r7, r8
 8006b62:	d30d      	bcc.n	8006b80 <rcc_init+0x2e8>
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 8006b64:	200f      	movs	r0, #15
 8006b66:	f000 fee1 	bl	800792c <systick_init>
	return ret;
 8006b6a:	e6b0      	b.n	80068ce <rcc_init+0x36>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8006b6c:	4b06      	ldr	r3, [pc, #24]	; (8006b88 <rcc_init+0x2f0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	0399      	lsls	r1, r3, #14
 8006b72:	f53f af56 	bmi.w	8006a22 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8006b76:	219f      	movs	r1, #159	; 0x9f
 8006b78:	4620      	mov	r0, r4
 8006b7a:	f002 f8cb 	bl	8008d14 <set_return_line>
			return ret;
 8006b7e:	e6a6      	b.n	80068ce <rcc_init+0x36>
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8006b80:	4638      	mov	r0, r7
 8006b82:	f002 f921 	bl	8008dc8 <embedded_flash_set_latency>
 8006b86:	e7ed      	b.n	8006b64 <rcc_init+0x2cc>
 8006b88:	40023800 	.word	0x40023800
 8006b8c:	2000b540 	.word	0x2000b540
 8006b90:	40007004 	.word	0x40007004
 8006b94:	40023808 	.word	0x40023808
 8006b98:	f0bc8000 	.word	0xf0bc8000
 8006b9c:	40007000 	.word	0x40007000
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 8006ba0:	4b07      	ldr	r3, [pc, #28]	; (8006bc0 <rcc_init+0x328>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	019b      	lsls	r3, r3, #6
 8006ba6:	f53f af3c 	bmi.w	8006a22 <rcc_init+0x18a>
			set_return_line(&ret, __LINE__);
 8006baa:	21a5      	movs	r1, #165	; 0xa5
 8006bac:	4620      	mov	r0, r4
 8006bae:	f002 f8b1 	bl	8008d14 <set_return_line>
			return ret;
 8006bb2:	e68c      	b.n	80068ce <rcc_init+0x36>
				set_return_line(&ret, __LINE__);
 8006bb4:	2172      	movs	r1, #114	; 0x72
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f002 f8ac 	bl	8008d14 <set_return_line>
				return ret;
 8006bbc:	e687      	b.n	80068ce <rcc_init+0x36>
 8006bbe:	bf00      	nop
 8006bc0:	40023800 	.word	0x40023800

08006bc4 <rcc_get_bus_frequency>:

	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
	switch(bus){
 8006bc4:	2805      	cmp	r0, #5
 8006bc6:	d819      	bhi.n	8006bfc <rcc_get_bus_frequency+0x38>
 8006bc8:	e8df f000 	tbb	[pc, r0]
 8006bcc:	2f251a0e 	.word	0x2f251a0e
 8006bd0:	0339      	.short	0x0339
		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <rcc_get_bus_frequency+0xb8>)
 8006bd4:	492a      	ldr	r1, [pc, #168]	; (8006c80 <rcc_get_bus_frequency+0xbc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	4a2a      	ldr	r2, [pc, #168]	; (8006c84 <rcc_get_bus_frequency+0xc0>)
 8006bda:	6808      	ldr	r0, [r1, #0]
 8006bdc:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006be0:	5cd3      	ldrb	r3, [r2, r3]
 8006be2:	40d8      	lsrs	r0, r3
 8006be4:	0040      	lsls	r0, r0, #1
 8006be6:	4770      	bx	lr
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8006be8:	4b27      	ldr	r3, [pc, #156]	; (8006c88 <rcc_get_bus_frequency+0xc4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	7b1a      	ldrb	r2, [r3, #12]
 8006bee:	2a01      	cmp	r2, #1
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8006bf0:	7b5a      	ldrb	r2, [r3, #13]
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8006bf2:	d02f      	beq.n	8006c54 <rcc_get_bus_frequency+0x90>
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8006bf4:	2a00      	cmp	r2, #0
 8006bf6:	d03f      	beq.n	8006c78 <rcc_get_bus_frequency+0xb4>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8006bf8:	2a02      	cmp	r2, #2
 8006bfa:	d032      	beq.n	8006c62 <rcc_get_bus_frequency+0x9e>
		break;

	}
	return 0;
 8006bfc:	2000      	movs	r0, #0
}
 8006bfe:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8006c00:	4b21      	ldr	r3, [pc, #132]	; (8006c88 <rcc_get_bus_frequency+0xc4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	7d18      	ldrb	r0, [r3, #20]
 8006c06:	2807      	cmp	r0, #7
 8006c08:	d928      	bls.n	8006c5c <rcc_get_bus_frequency+0x98>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <rcc_get_bus_frequency+0xbc>)
 8006c0c:	1f83      	subs	r3, r0, #6
 8006c0e:	6810      	ldr	r0, [r2, #0]
 8006c10:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c14:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c16:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <rcc_get_bus_frequency+0xb8>)
 8006c18:	4919      	ldr	r1, [pc, #100]	; (8006c80 <rcc_get_bus_frequency+0xbc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4a19      	ldr	r2, [pc, #100]	; (8006c84 <rcc_get_bus_frequency+0xc0>)
 8006c1e:	6808      	ldr	r0, [r1, #0]
 8006c20:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006c24:	5cd3      	ldrb	r3, [r2, r3]
 8006c26:	40d8      	lsrs	r0, r3
 8006c28:	4770      	bx	lr
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c2a:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <rcc_get_bus_frequency+0xb8>)
 8006c2c:	4914      	ldr	r1, [pc, #80]	; (8006c80 <rcc_get_bus_frequency+0xbc>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	4a14      	ldr	r2, [pc, #80]	; (8006c84 <rcc_get_bus_frequency+0xc0>)
 8006c32:	6808      	ldr	r0, [r1, #0]
 8006c34:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006c38:	5cd3      	ldrb	r3, [r2, r3]
 8006c3a:	40d8      	lsrs	r0, r3
 8006c3c:	4770      	bx	lr
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 8006c3e:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <rcc_get_bus_frequency+0xb8>)
 8006c40:	490f      	ldr	r1, [pc, #60]	; (8006c80 <rcc_get_bus_frequency+0xbc>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	4a0f      	ldr	r2, [pc, #60]	; (8006c84 <rcc_get_bus_frequency+0xc0>)
 8006c46:	6808      	ldr	r0, [r1, #0]
 8006c48:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006c4c:	5cd3      	ldrb	r3, [r2, r3]
 8006c4e:	40d8      	lsrs	r0, r3
 8006c50:	0040      	lsls	r0, r0, #1
 8006c52:	4770      	bx	lr
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 8006c54:	2a01      	cmp	r2, #1
 8006c56:	d1cf      	bne.n	8006bf8 <rcc_get_bus_frequency+0x34>
 8006c58:	480c      	ldr	r0, [pc, #48]	; (8006c8c <rcc_get_bus_frequency+0xc8>)
 8006c5a:	4770      	bx	lr
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 8006c5c:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <rcc_get_bus_frequency+0xbc>)
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	4770      	bx	lr
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 8006c62:	69da      	ldr	r2, [r3, #28]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	4809      	ldr	r0, [pc, #36]	; (8006c8c <rcc_get_bus_frequency+0xc8>)
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	fbb0 f0f1 	udiv	r0, r0, r1
 8006c6e:	fb02 f000 	mul.w	r0, r2, r0
 8006c72:	fbb0 f0f3 	udiv	r0, r0, r3
 8006c76:	4770      	bx	lr
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 8006c78:	4805      	ldr	r0, [pc, #20]	; (8006c90 <rcc_get_bus_frequency+0xcc>)
 8006c7a:	4770      	bx	lr
 8006c7c:	40023800 	.word	0x40023800
 8006c80:	20000000 	.word	0x20000000
 8006c84:	0800c4ec 	.word	0x0800c4ec
 8006c88:	2000b540 	.word	0x2000b540
 8006c8c:	017d7840 	.word	0x017d7840
 8006c90:	00f42400 	.word	0x00f42400

08006c94 <rng_init>:
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8006c94:	4907      	ldr	r1, [pc, #28]	; (8006cb4 <rng_init+0x20>)

	RNG -> CR |=  RNG_CR_RNGEN;
 8006c96:	4a08      	ldr	r2, [pc, #32]	; (8006cb8 <rng_init+0x24>)
void rng_init(void){
 8006c98:	b508      	push	{r3, lr}
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8006c9a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca0:	634b      	str	r3, [r1, #52]	; 0x34
	RNG -> CR |=  RNG_CR_RNGEN;
 8006ca2:	6813      	ldr	r3, [r2, #0]
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 8006caa:	f002 f90f 	bl	8008ecc <sys_get_free_heap_size>
uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
	_seed = seed;
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <rng_init+0x28>)
 8006cb0:	6018      	str	r0, [r3, #0]
}
 8006cb2:	bd08      	pop	{r3, pc}
 8006cb4:	40023800 	.word	0x40023800
 8006cb8:	50060800 	.word	0x50060800
 8006cbc:	2000b544 	.word	0x2000b544

08006cc0 <rng_set_seed>:
	_seed = seed;
 8006cc0:	4b01      	ldr	r3, [pc, #4]	; (8006cc8 <rng_set_seed+0x8>)
 8006cc2:	6018      	str	r0, [r3, #0]
}
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	2000b544 	.word	0x2000b544

08006ccc <rng_generate_random_number>:

uint32_t rng_generate_random_number(void){
 8006ccc:	b570      	push	{r4, r5, r6, lr}
	__IO uint32_t rand = _seed;
 8006cce:	4b1b      	ldr	r3, [pc, #108]	; (8006d3c <rng_generate_random_number+0x70>)
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8006cd0:	4c1b      	ldr	r4, [pc, #108]	; (8006d40 <rng_generate_random_number+0x74>)
	__IO uint32_t rand = _seed;
 8006cd2:	681b      	ldr	r3, [r3, #0]
uint32_t rng_generate_random_number(void){
 8006cd4:	b086      	sub	sp, #24
	__IO uint32_t rand = _seed;
 8006cd6:	2602      	movs	r6, #2
 8006cd8:	9301      	str	r3, [sp, #4]
	__IO uint32_t random_number = 0U;
 8006cda:	2500      	movs	r5, #0
	__IO uint32_t tick = get_tick();
 8006cdc:	f000 fe48 	bl	8007970 <get_tick>
 8006ce0:	9004      	str	r0, [sp, #16]
	__IO uint32_t random_number = 0U;
 8006ce2:	9505      	str	r5, [sp, #20]
 8006ce4:	e005      	b.n	8006cf2 <rng_generate_random_number+0x26>
		if(get_tick() - tick > RNG_TIMEOUT){
 8006ce6:	f000 fe43 	bl	8007970 <get_tick>
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	1ac0      	subs	r0, r0, r3
 8006cee:	2802      	cmp	r0, #2
 8006cf0:	d802      	bhi.n	8006cf8 <rng_generate_random_number+0x2c>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8006cf2:	6863      	ldr	r3, [r4, #4]
 8006cf4:	07da      	lsls	r2, r3, #31
 8006cf6:	d5f6      	bpl.n	8006ce6 <rng_generate_random_number+0x1a>
	random_number = RNG -> DR;
 8006cf8:	68a3      	ldr	r3, [r4, #8]
 8006cfa:	9305      	str	r3, [sp, #20]
	return random_number;
 8006cfc:	9a05      	ldr	r2, [sp, #20]
	for(int i=0; i<2; i++){
		rand ^= rng_random();
 8006cfe:	9b01      	ldr	r3, [sp, #4]
 8006d00:	4053      	eors	r3, r2
 8006d02:	9301      	str	r3, [sp, #4]
	__IO uint32_t tick = get_tick();
 8006d04:	f000 fe34 	bl	8007970 <get_tick>
 8006d08:	9002      	str	r0, [sp, #8]
	__IO uint32_t random_number = 0U;
 8006d0a:	9503      	str	r5, [sp, #12]
 8006d0c:	e005      	b.n	8006d1a <rng_generate_random_number+0x4e>
		if(get_tick() - tick > RNG_TIMEOUT){
 8006d0e:	f000 fe2f 	bl	8007970 <get_tick>
 8006d12:	9b02      	ldr	r3, [sp, #8]
 8006d14:	1ac0      	subs	r0, r0, r3
 8006d16:	2802      	cmp	r0, #2
 8006d18:	d802      	bhi.n	8006d20 <rng_generate_random_number+0x54>
	while(!(RNG -> SR & RNG_SR_DRDY)){
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	07db      	lsls	r3, r3, #31
 8006d1e:	d5f6      	bpl.n	8006d0e <rng_generate_random_number+0x42>
	random_number = RNG -> DR;
 8006d20:	68a3      	ldr	r3, [r4, #8]
 8006d22:	9303      	str	r3, [sp, #12]
	return random_number;
 8006d24:	9a03      	ldr	r2, [sp, #12]
		rand ^= rng_random_invert();
 8006d26:	9b01      	ldr	r3, [sp, #4]
 8006d28:	4053      	eors	r3, r2
 8006d2a:	43db      	mvns	r3, r3
	for(int i=0; i<2; i++){
 8006d2c:	2e01      	cmp	r6, #1
		rand ^= rng_random_invert();
 8006d2e:	9301      	str	r3, [sp, #4]
	for(int i=0; i<2; i++){
 8006d30:	d102      	bne.n	8006d38 <rng_generate_random_number+0x6c>
	}
	return rand;
 8006d32:	9801      	ldr	r0, [sp, #4]
}
 8006d34:	b006      	add	sp, #24
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	2601      	movs	r6, #1
 8006d3a:	e7cf      	b.n	8006cdc <rng_generate_random_number+0x10>
 8006d3c:	2000b544 	.word	0x2000b544
 8006d40:	50060800 	.word	0x50060800

08006d44 <_ZN3spi4initEP12spi_config_t>:

spi::spi(SPI_TypeDef *Spi){
	_spi = Spi;
}

stm_ret_t spi::init(spi_config_t *conf){
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	4605      	mov	r5, r0
	stm_ret_t ret;
	_conf = conf;
#if ENABLE_DMA
	_txdma = _conf->txdma;
 8006d4a:	6b10      	ldr	r0, [r2, #48]	; 0x30
	_rxdma = _conf->rxdma;
#endif /* ENABLE_DMA */

#if defined(SPI1)
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006d4c:	68cb      	ldr	r3, [r1, #12]
 8006d4e:	499e      	ldr	r1, [pc, #632]	; (8006fc8 <_ZN3spi4initEP12spi_config_t+0x284>)
	_txdma = _conf->txdma;
 8006d50:	6020      	str	r0, [r4, #0]
	stm_ret_t ret;
 8006d52:	2001      	movs	r0, #1
 8006d54:	7028      	strb	r0, [r5, #0]
	_rxdma = _conf->rxdma;
 8006d56:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8006d58:	6060      	str	r0, [r4, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006d5a:	428b      	cmp	r3, r1
	stm_ret_t ret;
 8006d5c:	f04f 0000 	mov.w	r0, #0
	_conf = conf;
 8006d60:	60a2      	str	r2, [r4, #8]
	stm_ret_t ret;
 8006d62:	6068      	str	r0, [r5, #4]
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006d64:	f000 80cd 	beq.w	8006f02 <_ZN3spi4initEP12spi_config_t+0x1be>
#endif /* defined(SPI1) */
#if defined(SPI2)
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8006d68:	4998      	ldr	r1, [pc, #608]	; (8006fcc <_ZN3spi4initEP12spi_config_t+0x288>)
 8006d6a:	428b      	cmp	r3, r1
 8006d6c:	d015      	beq.n	8006d9a <_ZN3spi4initEP12spi_config_t+0x56>
#endif /* defined(SPI2) */
#if defined(SPI3)
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006d6e:	4998      	ldr	r1, [pc, #608]	; (8006fd0 <_ZN3spi4initEP12spi_config_t+0x28c>)
 8006d70:	428b      	cmp	r3, r1
 8006d72:	f000 810b 	beq.w	8006f8c <_ZN3spi4initEP12spi_config_t+0x248>
#endif /* defined(SPI3) */
#if defined(SPI4)
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006d76:	4997      	ldr	r1, [pc, #604]	; (8006fd4 <_ZN3spi4initEP12spi_config_t+0x290>)
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	f000 8112 	beq.w	8006fa2 <_ZN3spi4initEP12spi_config_t+0x25e>
#endif /* defined(SPI4) */
#if defined(SPI5)
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8006d7e:	4996      	ldr	r1, [pc, #600]	; (8006fd8 <_ZN3spi4initEP12spi_config_t+0x294>)
 8006d80:	428b      	cmp	r3, r1
 8006d82:	f000 80d5 	beq.w	8006f30 <_ZN3spi4initEP12spi_config_t+0x1ec>
#endif /* defined(SPI6) */
#if defined(SPI6)
	else if(_spi == SPI6) RCC -> APB2ENR |= RCC_APB2ENR_SPI6EN;
 8006d86:	4995      	ldr	r1, [pc, #596]	; (8006fdc <_ZN3spi4initEP12spi_config_t+0x298>)
 8006d88:	428b      	cmp	r3, r1
 8006d8a:	d10c      	bne.n	8006da6 <_ZN3spi4initEP12spi_config_t+0x62>
 8006d8c:	f501 4164 	add.w	r1, r1, #58368	; 0xe400
 8006d90:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d96:	644b      	str	r3, [r1, #68]	; 0x44
 8006d98:	e005      	b.n	8006da6 <_ZN3spi4initEP12spi_config_t+0x62>
	else if(_spi == SPI2) RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8006d9a:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
 8006d9e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006da4:	640b      	str	r3, [r1, #64]	; 0x40
		if(_conf->nss == SPI_HARDWARE_NSS) gpio_set_mode(_conf->nssport, _conf->nsspin, GPIO_INPUT);
	}

#elif defined(STM32F4)
/* Configuration CLK Pin */
	gpio_port_clock_enable(_conf -> clkport);
 8006da6:	6910      	ldr	r0, [r2, #16]
 8006da8:	f7ff fbba 	bl	8006520 <gpio_port_clock_enable>
#if defined(SPI4) && defined(SPI5) && defined(SPI6)
	gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF5_SPI1_6);
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	2205      	movs	r2, #5
 8006db0:	8a99      	ldrh	r1, [r3, #20]
 8006db2:	6918      	ldr	r0, [r3, #16]
 8006db4:	f7ff fc9c 	bl	80066f0 <gpio_set_alternatefunction>
	else{
		gpio_set_alternatefunction(_conf -> clkport, _conf -> clkpin, AF6_SPI3);
	}
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
	gpio_set_alternatefunction_type(_conf -> clkport, _conf -> clkpin, GPIO_OUTPUT_PUSHPULL);
 8006db8:	68a3      	ldr	r3, [r4, #8]
 8006dba:	2207      	movs	r2, #7
 8006dbc:	8a99      	ldrh	r1, [r3, #20]
 8006dbe:	6918      	ldr	r0, [r3, #16]
 8006dc0:	f7ff fcd4 	bl	800676c <gpio_set_alternatefunction_type>

/* Configuration MISO Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE | SPI_HALFDUPLEX_SLAVE)){
 8006dc4:	68a2      	ldr	r2, [r4, #8]
 8006dc6:	7813      	ldrb	r3, [r2, #0]
 8006dc8:	f013 0f0d 	tst.w	r3, #13
 8006dcc:	f040 8087 	bne.w	8006ede <_ZN3spi4initEP12spi_config_t+0x19a>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration MOSI Pin */
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8006dd0:	075b      	lsls	r3, r3, #29
 8006dd2:	d15f      	bne.n	8006e94 <_ZN3spi4initEP12spi_config_t+0x150>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
	}

/* Configuration NSS Pin */
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8006dd4:	7b10      	ldrb	r0, [r2, #12]
 8006dd6:	2801      	cmp	r0, #1
 8006dd8:	d06f      	beq.n	8006eba <_ZN3spi4initEP12spi_config_t+0x176>
#endif /* defined(SPI4) && defined(SPI5) defined(SPI6) */
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
	}
#endif /* STM32F4 */

	_spi -> CR1 = 0x00U;
 8006dda:	68e3      	ldr	r3, [r4, #12]

	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8006ddc:	7956      	ldrb	r6, [r2, #5]
	_spi -> CR1 = 0x00U;
 8006dde:	2100      	movs	r1, #0
 8006de0:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8006de2:	7991      	ldrb	r1, [r2, #6]
 8006de4:	ea41 01c6 	orr.w	r1, r1, r6, lsl #3
 8006de8:	681e      	ldr	r6, [r3, #0]
 8006dea:	4331      	orrs	r1, r6
 8006dec:	6019      	str	r1, [r3, #0]
	_spi -> CR1 |= (_conf->datasize << SPI_CR1_DFF_Pos) | (_conf->bitordering << SPI_CR1_LSBFIRST_Pos);
 8006dee:	7911      	ldrb	r1, [r2, #4]
 8006df0:	78d6      	ldrb	r6, [r2, #3]
 8006df2:	01c9      	lsls	r1, r1, #7
 8006df4:	ea41 21c6 	orr.w	r1, r1, r6, lsl #11
 8006df8:	681e      	ldr	r6, [r3, #0]
 8006dfa:	4331      	orrs	r1, r6
 8006dfc:	6019      	str	r1, [r3, #0]
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) _spi -> CR1 |= SPI_CR1_MSTR | SPI_CR1_SSI;
 8006dfe:	7811      	ldrb	r1, [r2, #0]
 8006e00:	f011 0703 	ands.w	r7, r1, #3
 8006e04:	d003      	beq.n	8006e0e <_ZN3spi4initEP12spi_config_t+0xca>
 8006e06:	681e      	ldr	r6, [r3, #0]
 8006e08:	f446 7682 	orr.w	r6, r6, #260	; 0x104
 8006e0c:	601e      	str	r6, [r3, #0]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) _spi -> CR1 |= SPI_CR1_BIDIMODE;
 8006e0e:	f011 0f0a 	tst.w	r1, #10
 8006e12:	d003      	beq.n	8006e1c <_ZN3spi4initEP12spi_config_t+0xd8>
 8006e14:	6819      	ldr	r1, [r3, #0]
 8006e16:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8006e1a:	6019      	str	r1, [r3, #0]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8006e1c:	bb78      	cbnz	r0, 8006e7e <_ZN3spi4initEP12spi_config_t+0x13a>
 8006e1e:	6819      	ldr	r1, [r3, #0]
 8006e20:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006e24:	6019      	str	r1, [r3, #0]

	_spi -> CR2 = 0x00U;
 8006e26:	6058      	str	r0, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;

	if(_conf->control & (SPI_INTERRUPT_CONTROL | SPI_INTERRUPT_DMA_CONTROL)){
 8006e28:	7851      	ldrb	r1, [r2, #1]
 8006e2a:	f011 0f05 	tst.w	r1, #5
 8006e2e:	d024      	beq.n	8006e7a <_ZN3spi4initEP12spi_config_t+0x136>
#if defined(SPI1)
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8006e30:	4965      	ldr	r1, [pc, #404]	; (8006fc8 <_ZN3spi4initEP12spi_config_t+0x284>)
 8006e32:	428b      	cmp	r3, r1
 8006e34:	f000 8083 	beq.w	8006f3e <_ZN3spi4initEP12spi_config_t+0x1fa>
#endif /* defined(SPI1) */
#if defined(SPI2)
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8006e38:	4964      	ldr	r1, [pc, #400]	; (8006fcc <_ZN3spi4initEP12spi_config_t+0x288>)
 8006e3a:	428b      	cmp	r3, r1
 8006e3c:	f000 80ad 	beq.w	8006f9a <_ZN3spi4initEP12spi_config_t+0x256>
#endif /* defined(SPI2) */
#if defined(SPI3)
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8006e40:	4963      	ldr	r1, [pc, #396]	; (8006fd0 <_ZN3spi4initEP12spi_config_t+0x28c>)
 8006e42:	428b      	cmp	r3, r1
 8006e44:	d064      	beq.n	8006f10 <_ZN3spi4initEP12spi_config_t+0x1cc>
#endif /* defined(SPI3) */
#if defined(SPI4)
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8006e46:	4963      	ldr	r1, [pc, #396]	; (8006fd4 <_ZN3spi4initEP12spi_config_t+0x290>)
 8006e48:	428b      	cmp	r3, r1
 8006e4a:	f000 80b1 	beq.w	8006fb0 <_ZN3spi4initEP12spi_config_t+0x26c>
#endif /* defined(SPI4) */
#if defined(SPI5)
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8006e4e:	4962      	ldr	r1, [pc, #392]	; (8006fd8 <_ZN3spi4initEP12spi_config_t+0x294>)
 8006e50:	428b      	cmp	r3, r1
 8006e52:	f000 80b1 	beq.w	8006fb8 <_ZN3spi4initEP12spi_config_t+0x274>
#endif /* defined(SPI6) */
#if defined(SPI6)
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8006e56:	4961      	ldr	r1, [pc, #388]	; (8006fdc <_ZN3spi4initEP12spi_config_t+0x298>)
 8006e58:	428b      	cmp	r3, r1
 8006e5a:	f000 80b1 	beq.w	8006fc0 <_ZN3spi4initEP12spi_config_t+0x27c>
#endif /* defined(SPI4) */

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006e5e:	6892      	ldr	r2, [r2, #8]
 8006e60:	2a03      	cmp	r2, #3
 8006e62:	d972      	bls.n	8006f4a <_ZN3spi4initEP12spi_config_t+0x206>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
			__NVIC_SystemReset();
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8006e64:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
  if ((int32_t)(IRQn) >= 0)
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	da57      	bge.n	8006f1c <_ZN3spi4initEP12spi_config_t+0x1d8>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e6c:	495c      	ldr	r1, [pc, #368]	; (8006fe0 <_ZN3spi4initEP12spi_config_t+0x29c>)
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	0112      	lsls	r2, r2, #4
 8006e74:	4419      	add	r1, r3
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	760a      	strb	r2, [r1, #24]
	}

	return ret;
}
 8006e7a:	4628      	mov	r0, r5
 8006e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_spi -> CR2 = 0x00U;
 8006e7e:	2100      	movs	r1, #0
 8006e80:	6059      	str	r1, [r3, #4]
	if((_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)) && (_conf -> nss == SPI_HARDWARE_NSS)) _spi -> CR2 |= SPI_CR2_SSOE;
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	d0d0      	beq.n	8006e28 <_ZN3spi4initEP12spi_config_t+0xe4>
 8006e86:	2801      	cmp	r0, #1
 8006e88:	d1ce      	bne.n	8006e28 <_ZN3spi4initEP12spi_config_t+0xe4>
 8006e8a:	6859      	ldr	r1, [r3, #4]
 8006e8c:	f041 0104 	orr.w	r1, r1, #4
 8006e90:	6059      	str	r1, [r3, #4]
 8006e92:	e7c9      	b.n	8006e28 <_ZN3spi4initEP12spi_config_t+0xe4>
		gpio_port_clock_enable(_conf -> mosiport);
 8006e94:	6a10      	ldr	r0, [r2, #32]
 8006e96:	f7ff fb43 	bl	8006520 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> mosiport, _conf -> mosipin, AF5_SPI1_6);
 8006e9a:	68a3      	ldr	r3, [r4, #8]
 8006e9c:	2205      	movs	r2, #5
 8006e9e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8006ea0:	6a18      	ldr	r0, [r3, #32]
 8006ea2:	f7ff fc25 	bl	80066f0 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> mosiport, _conf -> mosipin, GPIO_OUTPUT_PUSHPULL);
 8006ea6:	68a3      	ldr	r3, [r4, #8]
 8006ea8:	2207      	movs	r2, #7
 8006eaa:	6a18      	ldr	r0, [r3, #32]
 8006eac:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 8006eae:	f7ff fc5d 	bl	800676c <gpio_set_alternatefunction_type>
	if(_conf -> nss == SPI_HARDWARE_NSS){
 8006eb2:	68a2      	ldr	r2, [r4, #8]
 8006eb4:	7b10      	ldrb	r0, [r2, #12]
 8006eb6:	2801      	cmp	r0, #1
 8006eb8:	d18f      	bne.n	8006dda <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> nssport);
 8006eba:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8006ebc:	f7ff fb30 	bl	8006520 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> nssport, _conf -> nsspin, AF5_SPI1_6);
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	2205      	movs	r2, #5
 8006ec4:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8006ec6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ec8:	f7ff fc12 	bl	80066f0 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> nssport, _conf -> nsspin, GPIO_OUTPUT_PUSHPULL);
 8006ecc:	68a3      	ldr	r3, [r4, #8]
 8006ece:	2207      	movs	r2, #7
 8006ed0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ed2:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8006ed4:	f7ff fc4a 	bl	800676c <gpio_set_alternatefunction_type>
	_spi -> CR1 |= (_conf->clocksample << SPI_CR1_CPHA_Pos) | (_conf->clockdivision << SPI_CR1_BR_Pos);
 8006ed8:	68a2      	ldr	r2, [r4, #8]
	if(_conf -> nss == SPI_SOFTWARE_NSS) _spi -> CR1 |= SPI_CR1_SSM;
 8006eda:	7b10      	ldrb	r0, [r2, #12]
 8006edc:	e77d      	b.n	8006dda <_ZN3spi4initEP12spi_config_t+0x96>
		gpio_port_clock_enable(_conf -> misoport);
 8006ede:	6990      	ldr	r0, [r2, #24]
 8006ee0:	f7ff fb1e 	bl	8006520 <gpio_port_clock_enable>
		gpio_set_alternatefunction(_conf -> misoport, _conf -> misopin, AF5_SPI1_6);
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	2205      	movs	r2, #5
 8006ee8:	8b99      	ldrh	r1, [r3, #28]
 8006eea:	6998      	ldr	r0, [r3, #24]
 8006eec:	f7ff fc00 	bl	80066f0 <gpio_set_alternatefunction>
		gpio_set_alternatefunction_type(_conf -> misoport, _conf -> misopin, GPIO_OUTPUT_PUSHPULL);
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	2207      	movs	r2, #7
 8006ef4:	8b99      	ldrh	r1, [r3, #28]
 8006ef6:	6998      	ldr	r0, [r3, #24]
 8006ef8:	f7ff fc38 	bl	800676c <gpio_set_alternatefunction_type>
	if(_conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER | SPI_FULLDUPLEX_SLAVE)){
 8006efc:	68a2      	ldr	r2, [r4, #8]
 8006efe:	7813      	ldrb	r3, [r2, #0]
 8006f00:	e766      	b.n	8006dd0 <_ZN3spi4initEP12spi_config_t+0x8c>
	if     (_spi == SPI1) RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8006f02:	f501 3184 	add.w	r1, r1, #67584	; 0x10800
 8006f06:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006f08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f0c:	644b      	str	r3, [r1, #68]	; 0x44
 8006f0e:	e74a      	b.n	8006da6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI3) IRQn = SPI3_IRQn;
 8006f10:	2333      	movs	r3, #51	; 0x33
 8006f12:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006f16:	6892      	ldr	r2, [r2, #8]
 8006f18:	2a03      	cmp	r2, #3
 8006f1a:	d916      	bls.n	8006f4a <_ZN3spi4initEP12spi_config_t+0x206>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8006f20:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8006f24:	0112      	lsls	r2, r2, #4
 8006f26:	b2d2      	uxtb	r2, r2
 8006f28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(_spi == SPI5) RCC -> APB2ENR |= RCC_APB2ENR_SPI5EN;
 8006f30:	f501 4168 	add.w	r1, r1, #59392	; 0xe800
 8006f34:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f3a:	644b      	str	r3, [r1, #68]	; 0x44
 8006f3c:	e733      	b.n	8006da6 <_ZN3spi4initEP12spi_config_t+0x62>
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006f3e:	6892      	ldr	r2, [r2, #8]
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8006f40:	2323      	movs	r3, #35	; 0x23
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006f42:	2a03      	cmp	r2, #3
		if     (_spi == SPI1) IRQn = SPI1_IRQn;
 8006f44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 8006f48:	d8e8      	bhi.n	8006f1c <_ZN3spi4initEP12spi_config_t+0x1d8>
			set_return(&ret, STM_ERR, __LINE__);
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	22b0      	movs	r2, #176	; 0xb0
 8006f4e:	2100      	movs	r1, #0
 8006f50:	f001 fedc 	bl	8008d0c <set_return>
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 8006f54:	4b23      	ldr	r3, [pc, #140]	; (8006fe4 <_ZN3spi4initEP12spi_config_t+0x2a0>)
 8006f56:	4a24      	ldr	r2, [pc, #144]	; (8006fe8 <_ZN3spi4initEP12spi_config_t+0x2a4>)
 8006f58:	4924      	ldr	r1, [pc, #144]	; (8006fec <_ZN3spi4initEP12spi_config_t+0x2a8>)
 8006f5a:	4825      	ldr	r0, [pc, #148]	; (8006ff0 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8006f5c:	f001 fe1e 	bl	8008b9c <LOG_ERROR>
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8006f60:	4924      	ldr	r1, [pc, #144]	; (8006ff4 <_ZN3spi4initEP12spi_config_t+0x2b0>)
 8006f62:	4823      	ldr	r0, [pc, #140]	; (8006ff0 <_ZN3spi4initEP12spi_config_t+0x2ac>)
 8006f64:	2205      	movs	r2, #5
 8006f66:	f001 fd9d 	bl	8008aa4 <LOG_INFO>
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8006f6a:	f241 3088 	movw	r0, #5000	; 0x1388
 8006f6e:	f000 fccf 	bl	8007910 <systick_delay_ms>
 8006f72:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006f76:	4920      	ldr	r1, [pc, #128]	; (8006ff8 <_ZN3spi4initEP12spi_config_t+0x2b4>)
 8006f78:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <_ZN3spi4initEP12spi_config_t+0x2b8>)
 8006f7a:	68ca      	ldr	r2, [r1, #12]
 8006f7c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006f80:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006f82:	60cb      	str	r3, [r1, #12]
 8006f84:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006f88:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006f8a:	e7fd      	b.n	8006f88 <_ZN3spi4initEP12spi_config_t+0x244>
	else if(_spi == SPI3) RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8006f8c:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8006f90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f96:	640b      	str	r3, [r1, #64]	; 0x40
 8006f98:	e705      	b.n	8006da6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI2) IRQn = SPI2_IRQn;
 8006f9a:	2324      	movs	r3, #36	; 0x24
 8006f9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006fa0:	e7b9      	b.n	8006f16 <_ZN3spi4initEP12spi_config_t+0x1d2>
	else if(_spi == SPI4) RCC -> APB2ENR |= RCC_APB2ENR_SPI4EN;
 8006fa2:	f501 3182 	add.w	r1, r1, #66560	; 0x10400
 8006fa6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fac:	644b      	str	r3, [r1, #68]	; 0x44
 8006fae:	e6fa      	b.n	8006da6 <_ZN3spi4initEP12spi_config_t+0x62>
		else if(_spi == SPI4) IRQn = SPI4_IRQn;
 8006fb0:	2354      	movs	r3, #84	; 0x54
 8006fb2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006fb6:	e7ae      	b.n	8006f16 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI5) IRQn = SPI5_IRQn;
 8006fb8:	2355      	movs	r3, #85	; 0x55
 8006fba:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006fbe:	e7aa      	b.n	8006f16 <_ZN3spi4initEP12spi_config_t+0x1d2>
		else if(_spi == SPI6) IRQn = SPI6_IRQn;
 8006fc0:	2356      	movs	r3, #86	; 0x56
 8006fc2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 8006fc6:	e7a6      	b.n	8006f16 <_ZN3spi4initEP12spi_config_t+0x1d2>
 8006fc8:	40013000 	.word	0x40013000
 8006fcc:	40003800 	.word	0x40003800
 8006fd0:	40003c00 	.word	0x40003c00
 8006fd4:	40013400 	.word	0x40013400
 8006fd8:	40015000 	.word	0x40015000
 8006fdc:	40015400 	.word	0x40015400
 8006fe0:	e000ecfc 	.word	0xe000ecfc
 8006fe4:	0800cc74 	.word	0x0800cc74
 8006fe8:	0800cc7c 	.word	0x0800cc7c
 8006fec:	0800cc0c 	.word	0x0800cc0c
 8006ff0:	0800cca4 	.word	0x0800cca4
 8006ff4:	0800cc58 	.word	0x0800cc58
 8006ff8:	e000ed00 	.word	0xe000ed00
 8006ffc:	05fa0004 	.word	0x05fa0004

08007000 <_ZN3spi8transmitEmm>:

spi_config_t *spi::get_config(void){
	return _conf;
}

stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	460c      	mov	r4, r1
	stm_ret_t ret;
 8007006:	2101      	movs	r1, #1
 8007008:	7001      	strb	r1, [r0, #0]
 800700a:	2100      	movs	r1, #0
 800700c:	6041      	str	r1, [r0, #4]

	txcount = 0U;
 800700e:	6221      	str	r1, [r4, #32]
	txlen = size;
	txbuf = data;

	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007010:	68a1      	ldr	r1, [r4, #8]
	txlen = size;
 8007012:	6263      	str	r3, [r4, #36]	; 0x24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 8007014:	7809      	ldrb	r1, [r1, #0]
	txbuf = data;
 8007016:	61a2      	str	r2, [r4, #24]
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 8007018:	4605      	mov	r5, r0
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 800701a:	0708      	lsls	r0, r1, #28
stm_ret_t spi::transmit(uint32_t data, uint32_t size){
 800701c:	b086      	sub	sp, #24
	if(_conf -> mode & SPI_HALFDUPLEX_SLAVE){
 800701e:	d463      	bmi.n	80070e8 <_ZN3spi8transmitEmm+0xe8>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007020:	f011 0f0a 	tst.w	r1, #10
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007024:	68e1      	ldr	r1, [r4, #12]
	if(_conf -> mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)){
 8007026:	d007      	beq.n	8007038 <_ZN3spi8transmitEmm+0x38>
		_spi -> CR1 &=~ SPI_CR1_SPE;
 8007028:	680a      	ldr	r2, [r1, #0]
 800702a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800702e:	600a      	str	r2, [r1, #0]
		_spi -> CR1 |= SPI_CR1_BIDIOE;
 8007030:	680a      	ldr	r2, [r1, #0]
 8007032:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007036:	600a      	str	r2, [r1, #0]
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007038:	680a      	ldr	r2, [r1, #0]
 800703a:	0652      	lsls	r2, r2, #25
 800703c:	d54f      	bpl.n	80070de <_ZN3spi8transmitEmm+0xde>

	while(txcount < txlen){
 800703e:	ae02      	add	r6, sp, #8
 8007040:	b36b      	cbz	r3, 800709e <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007042:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007046:	e006      	b.n	8007056 <_ZN3spi8transmitEmm+0x56>
	while(txcount < txlen){
 8007048:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		_spi -> DR = *(uint32_t *)(txbuf);

		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);

		txcount++;
 800704c:	3301      	adds	r3, #1
	while(txcount < txlen){
 800704e:	429a      	cmp	r2, r3
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007050:	61a0      	str	r0, [r4, #24]
		txcount++;
 8007052:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 8007054:	d923      	bls.n	800709e <_ZN3spi8transmitEmm+0x9e>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007056:	3108      	adds	r1, #8
 8007058:	4630      	mov	r0, r6
 800705a:	2301      	movs	r3, #1
 800705c:	2202      	movs	r2, #2
 800705e:	f8cd 8000 	str.w	r8, [sp]
 8007062:	f001 fe17 	bl	8008c94 <wait_flag_in_register_timeout>
 8007066:	e896 0003 	ldmia.w	r6, {r0, r1}
 800706a:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 800706e:	4628      	mov	r0, r5
 8007070:	f001 fe52 	bl	8008d18 <is_oke>
 8007074:	2800      	cmp	r0, #0
 8007076:	d047      	beq.n	8007108 <_ZN3spi8transmitEmm+0x108>
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007078:	68a2      	ldr	r2, [r4, #8]
		_spi -> DR = *(uint32_t *)(txbuf);
 800707a:	69a3      	ldr	r3, [r4, #24]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 800707c:	78d2      	ldrb	r2, [r2, #3]
		_spi -> DR = *(uint32_t *)(txbuf);
 800707e:	68e1      	ldr	r1, [r4, #12]
 8007080:	681f      	ldr	r7, [r3, #0]
 8007082:	60cf      	str	r7, [r1, #12]
		if(_conf->datasize == SPI_DATASIZE_8BIT) 		txbuf += sizeof(uint8_t);
 8007084:	1c58      	adds	r0, r3, #1
 8007086:	2a00      	cmp	r2, #0
 8007088:	d0de      	beq.n	8007048 <_ZN3spi8transmitEmm+0x48>
		else if(_conf->datasize == SPI_DATASIZE_16BIT)  txbuf += sizeof(uint16_t);
 800708a:	2a01      	cmp	r2, #1
 800708c:	bf04      	itt	eq
 800708e:	3302      	addeq	r3, #2
 8007090:	61a3      	streq	r3, [r4, #24]
	while(txcount < txlen){
 8007092:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
		txcount++;
 8007096:	3301      	adds	r3, #1
	while(txcount < txlen){
 8007098:	429a      	cmp	r2, r3
		txcount++;
 800709a:	6223      	str	r3, [r4, #32]
	while(txcount < txlen){
 800709c:	d8db      	bhi.n	8007056 <_ZN3spi8transmitEmm+0x56>
	}

	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 800709e:	2364      	movs	r3, #100	; 0x64
 80070a0:	3108      	adds	r1, #8
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	4630      	mov	r0, r6
 80070a6:	2300      	movs	r3, #0
 80070a8:	2280      	movs	r2, #128	; 0x80
 80070aa:	f001 fdf3 	bl	8008c94 <wait_flag_in_register_timeout>
 80070ae:	e896 0003 	ldmia.w	r6, {r0, r1}
 80070b2:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 80070b6:	4628      	mov	r0, r5
 80070b8:	f001 fe2e 	bl	8008d18 <is_oke>
 80070bc:	2800      	cmp	r0, #0
 80070be:	d032      	beq.n	8007126 <_ZN3spi8transmitEmm+0x126>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return_line(&ret, __LINE__);
		return ret;
	}

	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80070c0:	68a3      	ldr	r3, [r4, #8]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f013 0f0a 	tst.w	r3, #10
 80070c8:	d105      	bne.n	80070d6 <_ZN3spi8transmitEmm+0xd6>
		__IO uint32_t tmp = _spi -> DR;
 80070ca:	68e3      	ldr	r3, [r4, #12]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	9305      	str	r3, [sp, #20]
		(void)tmp;
 80070d4:	9b05      	ldr	r3, [sp, #20]
	}

	return ret;
}
 80070d6:	4628      	mov	r0, r5
 80070d8:	b006      	add	sp, #24
 80070da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 80070de:	680a      	ldr	r2, [r1, #0]
 80070e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e4:	600a      	str	r2, [r1, #0]
 80070e6:	e7aa      	b.n	800703e <_ZN3spi8transmitEmm+0x3e>
		LOG_ERROR(TAG, "%s -> %s -> Mode half duplex slave unsupported transmit function.", __FILE__, __FUNCTION__);
 80070e8:	4b16      	ldr	r3, [pc, #88]	; (8007144 <_ZN3spi8transmitEmm+0x144>)
 80070ea:	4a17      	ldr	r2, [pc, #92]	; (8007148 <_ZN3spi8transmitEmm+0x148>)
 80070ec:	4917      	ldr	r1, [pc, #92]	; (800714c <_ZN3spi8transmitEmm+0x14c>)
 80070ee:	4818      	ldr	r0, [pc, #96]	; (8007150 <_ZN3spi8transmitEmm+0x150>)
 80070f0:	f001 fd54 	bl	8008b9c <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 80070f4:	4628      	mov	r0, r5
 80070f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80070fa:	2103      	movs	r1, #3
 80070fc:	f001 fe06 	bl	8008d0c <set_return>
}
 8007100:	4628      	mov	r0, r5
 8007102:	b006      	add	sp, #24
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007108:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <_ZN3spi8transmitEmm+0x144>)
 800710a:	4a0f      	ldr	r2, [pc, #60]	; (8007148 <_ZN3spi8transmitEmm+0x148>)
 800710c:	4911      	ldr	r1, [pc, #68]	; (8007154 <_ZN3spi8transmitEmm+0x154>)
 800710e:	4810      	ldr	r0, [pc, #64]	; (8007150 <_ZN3spi8transmitEmm+0x150>)
 8007110:	f001 fd44 	bl	8008b9c <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007114:	4628      	mov	r0, r5
 8007116:	f240 1123 	movw	r1, #291	; 0x123
 800711a:	f001 fdfb 	bl	8008d14 <set_return_line>
}
 800711e:	4628      	mov	r0, r5
 8007120:	b006      	add	sp, #24
 8007122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <_ZN3spi8transmitEmm+0x144>)
 8007128:	4a07      	ldr	r2, [pc, #28]	; (8007148 <_ZN3spi8transmitEmm+0x148>)
 800712a:	490a      	ldr	r1, [pc, #40]	; (8007154 <_ZN3spi8transmitEmm+0x154>)
 800712c:	4808      	ldr	r0, [pc, #32]	; (8007150 <_ZN3spi8transmitEmm+0x150>)
 800712e:	f001 fd35 	bl	8008b9c <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 8007132:	4628      	mov	r0, r5
 8007134:	f44f 719a 	mov.w	r1, #308	; 0x134
 8007138:	f001 fdec 	bl	8008d14 <set_return_line>
}
 800713c:	4628      	mov	r0, r5
 800713e:	b006      	add	sp, #24
 8007140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007144:	0800cca8 	.word	0x0800cca8
 8007148:	0800cc7c 	.word	0x0800cc7c
 800714c:	0800ccb4 	.word	0x0800ccb4
 8007150:	0800cca4 	.word	0x0800cca4
 8007154:	0800ccf8 	.word	0x0800ccf8

08007158 <_ZN3spi16transmit_receiveEmmm>:
	}

	return ret;
}

stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	txcount = 0U;
	rxcount = 0U;
	rxlen = size;
	txlen = size;
	txbuf = txdata;
 800715c:	618a      	str	r2, [r1, #24]
	rxbuf = rxdata;

	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 800715e:	688a      	ldr	r2, [r1, #8]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007160:	4605      	mov	r5, r0
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007162:	7812      	ldrb	r2, [r2, #0]
	rxbuf = rxdata;
 8007164:	61cb      	str	r3, [r1, #28]
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 8007166:	b086      	sub	sp, #24
	stm_ret_t ret;
 8007168:	2300      	movs	r3, #0
stm_ret_t spi::transmit_receive(uint32_t txdata, uint32_t rxdata, uint32_t size){
 800716a:	980c      	ldr	r0, [sp, #48]	; 0x30
	stm_ret_t ret;
 800716c:	606b      	str	r3, [r5, #4]
	txcount = 0U;
 800716e:	620b      	str	r3, [r1, #32]
	rxcount = 0U;
 8007170:	628b      	str	r3, [r1, #40]	; 0x28
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007172:	f012 0f0a 	tst.w	r2, #10
	stm_ret_t ret;
 8007176:	f04f 0301 	mov.w	r3, #1
	rxlen = size;
 800717a:	62c8      	str	r0, [r1, #44]	; 0x2c
	txlen = size;
 800717c:	6248      	str	r0, [r1, #36]	; 0x24
	stm_ret_t ret;
 800717e:	702b      	strb	r3, [r5, #0]
	if(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE)) {
 8007180:	d158      	bne.n	8007234 <_ZN3spi16transmit_receiveEmmm+0xdc>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
		return ret;
	}

	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 8007182:	460c      	mov	r4, r1
 8007184:	68c9      	ldr	r1, [r1, #12]
 8007186:	680b      	ldr	r3, [r1, #0]
 8007188:	065b      	lsls	r3, r3, #25
 800718a:	d54e      	bpl.n	800722a <_ZN3spi16transmit_receiveEmmm+0xd2>

	while(txcount < txlen){
 800718c:	ae02      	add	r6, sp, #8
 800718e:	2800      	cmp	r0, #0
 8007190:	d060      	beq.n	8007254 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 8007192:	f04f 0864 	mov.w	r8, #100	; 0x64
 8007196:	e00e      	b.n	80071b6 <_ZN3spi16transmit_receiveEmmm+0x5e>
		}
		*(uint32_t *)rxbuf = _spi -> DR;

		if(_conf->datasize == SPI_DATASIZE_8BIT) {
			txbuf += sizeof(uint8_t);
			rxbuf += sizeof(uint8_t);
 8007198:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
			txbuf += sizeof(uint8_t);
 800719c:	3201      	adds	r2, #1
			rxbuf += sizeof(uint8_t);
 800719e:	3301      	adds	r3, #1
 80071a0:	e9c4 2306 	strd	r2, r3, [r4, #24]
	while(txcount < txlen){
 80071a4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
			txbuf += sizeof(uint16_t);
			rxbuf += sizeof(uint16_t);
		}

		txcount++;
 80071a8:	6a23      	ldr	r3, [r4, #32]
 80071aa:	3301      	adds	r3, #1
		rxcount++;
 80071ac:	3201      	adds	r2, #1
	while(txcount < txlen){
 80071ae:	4298      	cmp	r0, r3
		txcount++;
 80071b0:	6223      	str	r3, [r4, #32]
		rxcount++;
 80071b2:	62a2      	str	r2, [r4, #40]	; 0x28
	while(txcount < txlen){
 80071b4:	d94e      	bls.n	8007254 <_ZN3spi16transmit_receiveEmmm+0xfc>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 80071b6:	2301      	movs	r3, #1
 80071b8:	2202      	movs	r2, #2
 80071ba:	3108      	adds	r1, #8
 80071bc:	4630      	mov	r0, r6
 80071be:	f8cd 8000 	str.w	r8, [sp]
 80071c2:	f001 fd67 	bl	8008c94 <wait_flag_in_register_timeout>
 80071c6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80071ca:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 80071ce:	4628      	mov	r0, r5
 80071d0:	f001 fda2 	bl	8008d18 <is_oke>
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 80071d4:	2301      	movs	r3, #1
		if(!is_oke(&ret)) {
 80071d6:	4601      	mov	r1, r0
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 80071d8:	461a      	mov	r2, r3
 80071da:	4630      	mov	r0, r6
		if(!is_oke(&ret)) {
 80071dc:	2900      	cmp	r1, #0
 80071de:	d055      	beq.n	800728c <_ZN3spi16transmit_receiveEmmm+0x134>
		_spi -> DR = *(uint32_t *)txbuf;
 80071e0:	69a7      	ldr	r7, [r4, #24]
 80071e2:	68e1      	ldr	r1, [r4, #12]
 80071e4:	f8d7 c000 	ldr.w	ip, [r7]
 80071e8:	f8c1 c00c 	str.w	ip, [r1, #12]
		ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_RXNE, FLAG_SET, SPI_TIMEOUT);
 80071ec:	3108      	adds	r1, #8
 80071ee:	f8cd 8000 	str.w	r8, [sp]
 80071f2:	f001 fd4f 	bl	8008c94 <wait_flag_in_register_timeout>
 80071f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80071fa:	e885 0003 	stmia.w	r5, {r0, r1}
		if(!is_oke(&ret)) {
 80071fe:	4628      	mov	r0, r5
 8007200:	f001 fd8a 	bl	8008d18 <is_oke>
 8007204:	2800      	cmp	r0, #0
 8007206:	d050      	beq.n	80072aa <_ZN3spi16transmit_receiveEmmm+0x152>
		*(uint32_t *)rxbuf = _spi -> DR;
 8007208:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
 800720c:	69e2      	ldr	r2, [r4, #28]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 800720e:	78db      	ldrb	r3, [r3, #3]
		*(uint32_t *)rxbuf = _spi -> DR;
 8007210:	68c8      	ldr	r0, [r1, #12]
 8007212:	6010      	str	r0, [r2, #0]
		if(_conf->datasize == SPI_DATASIZE_8BIT) {
 8007214:	2b00      	cmp	r3, #0
 8007216:	d0bf      	beq.n	8007198 <_ZN3spi16transmit_receiveEmmm+0x40>
		else if(_conf->datasize == SPI_DATASIZE_16BIT) {
 8007218:	2b01      	cmp	r3, #1
 800721a:	d1c3      	bne.n	80071a4 <_ZN3spi16transmit_receiveEmmm+0x4c>
			txbuf += sizeof(uint16_t);
 800721c:	69a3      	ldr	r3, [r4, #24]
 800721e:	3302      	adds	r3, #2
 8007220:	61a3      	str	r3, [r4, #24]
			rxbuf += sizeof(uint16_t);
 8007222:	69e3      	ldr	r3, [r4, #28]
 8007224:	3302      	adds	r3, #2
 8007226:	61e3      	str	r3, [r4, #28]
 8007228:	e7bc      	b.n	80071a4 <_ZN3spi16transmit_receiveEmmm+0x4c>
	if(!(_spi -> CR1 & SPI_CR1_SPE)) _spi -> CR1 |= SPI_CR1_SPE;
 800722a:	680b      	ldr	r3, [r1, #0]
 800722c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007230:	600b      	str	r3, [r1, #0]
 8007232:	e7ab      	b.n	800718c <_ZN3spi16transmit_receiveEmmm+0x34>
			LOG_ERROR(TAG, "%s -> %s -> Mode half duplex master/slave unsupported transmit and receive function.", __FILE__, __FUNCTION__);
 8007234:	4a2a      	ldr	r2, [pc, #168]	; (80072e0 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007236:	492b      	ldr	r1, [pc, #172]	; (80072e4 <_ZN3spi16transmit_receiveEmmm+0x18c>)
 8007238:	482b      	ldr	r0, [pc, #172]	; (80072e8 <_ZN3spi16transmit_receiveEmmm+0x190>)
 800723a:	4b2c      	ldr	r3, [pc, #176]	; (80072ec <_ZN3spi16transmit_receiveEmmm+0x194>)
 800723c:	f001 fcae 	bl	8008b9c <LOG_ERROR>
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8007240:	f240 1293 	movw	r2, #403	; 0x193
 8007244:	2103      	movs	r1, #3
 8007246:	4628      	mov	r0, r5
 8007248:	f001 fd60 	bl	8008d0c <set_return>
		tmp = _spi -> SR;
		(void)tmp;
	}

	return ret;
}
 800724c:	4628      	mov	r0, r5
 800724e:	b006      	add	sp, #24
 8007250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	ret = wait_flag_in_register_timeout(&(_spi -> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007254:	2364      	movs	r3, #100	; 0x64
 8007256:	3108      	adds	r1, #8
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	4630      	mov	r0, r6
 800725c:	2300      	movs	r3, #0
 800725e:	2280      	movs	r2, #128	; 0x80
 8007260:	f001 fd18 	bl	8008c94 <wait_flag_in_register_timeout>
 8007264:	e896 0003 	ldmia.w	r6, {r0, r1}
 8007268:	e885 0003 	stmia.w	r5, {r0, r1}
	if(!is_oke(&ret)) {
 800726c:	4628      	mov	r0, r5
 800726e:	f001 fd53 	bl	8008d18 <is_oke>
 8007272:	b348      	cbz	r0, 80072c8 <_ZN3spi16transmit_receiveEmmm+0x170>
	if(!(_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007274:	68a3      	ldr	r3, [r4, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	f013 0f0a 	tst.w	r3, #10
 800727c:	d1e6      	bne.n	800724c <_ZN3spi16transmit_receiveEmmm+0xf4>
		__IO uint32_t tmp = _spi -> DR;
 800727e:	68e3      	ldr	r3, [r4, #12]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	9205      	str	r2, [sp, #20]
		tmp = _spi -> SR;
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	9305      	str	r3, [sp, #20]
		(void)tmp;
 8007288:	9b05      	ldr	r3, [sp, #20]
 800728a:	e7df      	b.n	800724c <_ZN3spi16transmit_receiveEmmm+0xf4>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 800728c:	4b17      	ldr	r3, [pc, #92]	; (80072ec <_ZN3spi16transmit_receiveEmmm+0x194>)
 800728e:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <_ZN3spi16transmit_receiveEmmm+0x188>)
 8007290:	4917      	ldr	r1, [pc, #92]	; (80072f0 <_ZN3spi16transmit_receiveEmmm+0x198>)
 8007292:	4815      	ldr	r0, [pc, #84]	; (80072e8 <_ZN3spi16transmit_receiveEmmm+0x190>)
 8007294:	f001 fc82 	bl	8008b9c <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 8007298:	4628      	mov	r0, r5
 800729a:	f240 119f 	movw	r1, #415	; 0x19f
 800729e:	f001 fd39 	bl	8008d14 <set_return_line>
}
 80072a2:	4628      	mov	r0, r5
 80072a4:	b006      	add	sp, #24
 80072a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80072aa:	4b10      	ldr	r3, [pc, #64]	; (80072ec <_ZN3spi16transmit_receiveEmmm+0x194>)
 80072ac:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <_ZN3spi16transmit_receiveEmmm+0x188>)
 80072ae:	4910      	ldr	r1, [pc, #64]	; (80072f0 <_ZN3spi16transmit_receiveEmmm+0x198>)
 80072b0:	480d      	ldr	r0, [pc, #52]	; (80072e8 <_ZN3spi16transmit_receiveEmmm+0x190>)
 80072b2:	f001 fc73 	bl	8008b9c <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 80072b6:	4628      	mov	r0, r5
 80072b8:	f240 11a9 	movw	r1, #425	; 0x1a9
 80072bc:	f001 fd2a 	bl	8008d14 <set_return_line>
}
 80072c0:	4628      	mov	r0, r5
 80072c2:	b006      	add	sp, #24
 80072c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80072c8:	4b08      	ldr	r3, [pc, #32]	; (80072ec <_ZN3spi16transmit_receiveEmmm+0x194>)
 80072ca:	4a05      	ldr	r2, [pc, #20]	; (80072e0 <_ZN3spi16transmit_receiveEmmm+0x188>)
 80072cc:	4908      	ldr	r1, [pc, #32]	; (80072f0 <_ZN3spi16transmit_receiveEmmm+0x198>)
 80072ce:	4806      	ldr	r0, [pc, #24]	; (80072e8 <_ZN3spi16transmit_receiveEmmm+0x190>)
 80072d0:	f001 fc64 	bl	8008b9c <LOG_ERROR>
		set_return_line(&ret, __LINE__);
 80072d4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80072d8:	4628      	mov	r0, r5
 80072da:	f001 fd1b 	bl	8008d14 <set_return_line>
		return ret;
 80072de:	e7b5      	b.n	800724c <_ZN3spi16transmit_receiveEmmm+0xf4>
 80072e0:	0800cc7c 	.word	0x0800cc7c
 80072e4:	0800cd2c 	.word	0x0800cd2c
 80072e8:	0800cca4 	.word	0x0800cca4
 80072ec:	0800cd18 	.word	0x0800cd18
 80072f0:	0800ccf8 	.word	0x0800ccf8

080072f4 <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 80072f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	stm_ret_t ret;

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 80072f8:	698a      	ldr	r2, [r1, #24]
stm_ret_t SPI_Tx_ISR(spi *spi){
 80072fa:	460c      	mov	r4, r1
	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 80072fc:	68c9      	ldr	r1, [r1, #12]
 80072fe:	6813      	ldr	r3, [r2, #0]
 8007300:	60cb      	str	r3, [r1, #12]
stm_ret_t SPI_Tx_ISR(spi *spi){
 8007302:	4605      	mov	r5, r0
	spi -> txcount++;

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007304:	68a0      	ldr	r0, [r4, #8]
	spi -> txcount++;
 8007306:	6a23      	ldr	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007308:	78c0      	ldrb	r0, [r0, #3]
	spi -> txcount++;
 800730a:	3301      	adds	r3, #1
stm_ret_t SPI_Tx_ISR(spi *spi){
 800730c:	b088      	sub	sp, #32
	spi -> txcount++;
 800730e:	6223      	str	r3, [r4, #32]
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007310:	b960      	cbnz	r0, 800732c <_Z10SPI_Tx_ISRP3spi+0x38>
		spi -> txbuf += sizeof(uint8_t);
 8007312:	3201      	adds	r2, #1
 8007314:	61a2      	str	r2, [r4, #24]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> txbuf += sizeof(uint16_t);

	if(spi -> txcount == spi -> txlen){
 8007316:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <_Z10SPI_Tx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 800731c:	2201      	movs	r2, #1
 800731e:	2300      	movs	r3, #0
 8007320:	702a      	strb	r2, [r5, #0]
 8007322:	606b      	str	r3, [r5, #4]
}
 8007324:	4628      	mov	r0, r5
 8007326:	b008      	add	sp, #32
 8007328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 800732c:	2801      	cmp	r0, #1
		spi -> txbuf += sizeof(uint16_t);
 800732e:	bf04      	itt	eq
 8007330:	3202      	addeq	r2, #2
 8007332:	61a2      	streq	r2, [r4, #24]
	if(spi -> txcount == spi -> txlen){
 8007334:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007336:	4293      	cmp	r3, r2
 8007338:	d1f0      	bne.n	800731c <_Z10SPI_Tx_ISRP3spi+0x28>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 800733a:	ae06      	add	r6, sp, #24
 800733c:	2764      	movs	r7, #100	; 0x64
 800733e:	4630      	mov	r0, r6
 8007340:	3108      	adds	r1, #8
 8007342:	9700      	str	r7, [sp, #0]
 8007344:	2301      	movs	r3, #1
 8007346:	2202      	movs	r2, #2
 8007348:	f001 fca4 	bl	8008c94 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 800734c:	4630      	mov	r0, r6
 800734e:	f001 fce3 	bl	8008d18 <is_oke>
 8007352:	b1f8      	cbz	r0, 8007394 <_Z10SPI_Tx_ISRP3spi+0xa0>
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007354:	68e1      	ldr	r1, [r4, #12]
 8007356:	684b      	ldr	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007358:	f10d 0808 	add.w	r8, sp, #8
		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 800735c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007360:	604b      	str	r3, [r1, #4]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007362:	4640      	mov	r0, r8
 8007364:	3108      	adds	r1, #8
 8007366:	2300      	movs	r3, #0
 8007368:	2280      	movs	r2, #128	; 0x80
 800736a:	9700      	str	r7, [sp, #0]
 800736c:	f001 fc92 	bl	8008c94 <wait_flag_in_register_timeout>
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007370:	68a3      	ldr	r3, [r4, #8]
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007372:	e898 0003 	ldmia.w	r8, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	079a      	lsls	r2, r3, #30
		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 800737a:	e886 0003 	stmia.w	r6, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 800737e:	d11c      	bne.n	80073ba <_Z10SPI_Tx_ISRP3spi+0xc6>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 8007380:	f013 0f0a 	tst.w	r3, #10
 8007384:	d1ca      	bne.n	800731c <_Z10SPI_Tx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007386:	68e3      	ldr	r3, [r4, #12]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	9205      	str	r2, [sp, #20]
			tmp = spi -> _spi -> SR;
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	9305      	str	r3, [sp, #20]
			(void)tmp;
 8007390:	9b05      	ldr	r3, [sp, #20]
 8007392:	e7c3      	b.n	800731c <_Z10SPI_Tx_ISRP3spi+0x28>
			set_return_line(&ret, __LINE__);
 8007394:	4630      	mov	r0, r6
 8007396:	f240 3129 	movw	r1, #809	; 0x329
 800739a:	f001 fcbb 	bl	8008d14 <set_return_line>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 800739e:	4919      	ldr	r1, [pc, #100]	; (8007404 <_Z10SPI_Tx_ISRP3spi+0x110>)
 80073a0:	4819      	ldr	r0, [pc, #100]	; (8007408 <_Z10SPI_Tx_ISRP3spi+0x114>)
 80073a2:	4b1a      	ldr	r3, [pc, #104]	; (800740c <_Z10SPI_Tx_ISRP3spi+0x118>)
 80073a4:	4a1a      	ldr	r2, [pc, #104]	; (8007410 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 80073a6:	f001 fbf9 	bl	8008b9c <LOG_ERROR>
			return ret;
 80073aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80073ae:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80073b2:	4628      	mov	r0, r5
 80073b4:	b008      	add	sp, #32
 80073b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(!is_oke(&ret)) {
 80073ba:	4630      	mov	r0, r6
 80073bc:	f001 fcac 	bl	8008d18 <is_oke>
 80073c0:	b110      	cbz	r0, 80073c8 <_Z10SPI_Tx_ISRP3spi+0xd4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80073c2:	68a3      	ldr	r3, [r4, #8]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	e7db      	b.n	8007380 <_Z10SPI_Tx_ISRP3spi+0x8c>
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80073c8:	4b10      	ldr	r3, [pc, #64]	; (800740c <_Z10SPI_Tx_ISRP3spi+0x118>)
 80073ca:	4a11      	ldr	r2, [pc, #68]	; (8007410 <_Z10SPI_Tx_ISRP3spi+0x11c>)
 80073cc:	490d      	ldr	r1, [pc, #52]	; (8007404 <_Z10SPI_Tx_ISRP3spi+0x110>)
 80073ce:	480e      	ldr	r0, [pc, #56]	; (8007408 <_Z10SPI_Tx_ISRP3spi+0x114>)
 80073d0:	f001 fbe4 	bl	8008b9c <LOG_ERROR>
				set_return_line(&ret, __LINE__);
 80073d4:	f44f 714e 	mov.w	r1, #824	; 0x338
 80073d8:	4630      	mov	r0, r6
 80073da:	f001 fc9b 	bl	8008d14 <set_return_line>
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 80073de:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 80073e2:	6853      	ldr	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 80073e4:	7809      	ldrb	r1, [r1, #0]
				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 80073e6:	f023 03a1 	bic.w	r3, r3, #161	; 0xa1
 80073ea:	6053      	str	r3, [r2, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 80073ec:	078b      	lsls	r3, r1, #30
 80073ee:	d503      	bpl.n	80073f8 <_Z10SPI_Tx_ISRP3spi+0x104>
 80073f0:	6813      	ldr	r3, [r2, #0]
 80073f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073f6:	6013      	str	r3, [r2, #0]
				return ret;
 80073f8:	e896 0003 	ldmia.w	r6, {r0, r1}
 80073fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8007400:	e790      	b.n	8007324 <_Z10SPI_Tx_ISRP3spi+0x30>
 8007402:	bf00      	nop
 8007404:	0800ccf8 	.word	0x0800ccf8
 8007408:	0800cca4 	.word	0x0800cca4
 800740c:	0800cd84 	.word	0x0800cd84
 8007410:	0800cc7c 	.word	0x0800cc7c

08007414 <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007414:	b570      	push	{r4, r5, r6, lr}
 8007416:	460c      	mov	r4, r1
	stm_ret_t ret;

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007418:	68c9      	ldr	r1, [r1, #12]
 800741a:	69e3      	ldr	r3, [r4, #28]
 800741c:	68ca      	ldr	r2, [r1, #12]
 800741e:	601a      	str	r2, [r3, #0]
	spi -> rxcount++;
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007420:	68a2      	ldr	r2, [r4, #8]
	spi -> rxcount++;
 8007422:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007424:	78d2      	ldrb	r2, [r2, #3]
	spi -> rxcount++;
 8007426:	3301      	adds	r3, #1
stm_ret_t SPI_Rx_ISR(spi *spi){
 8007428:	b086      	sub	sp, #24
 800742a:	4605      	mov	r5, r0
	spi -> rxcount++;
 800742c:	62a3      	str	r3, [r4, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 800742e:	b962      	cbnz	r2, 800744a <_Z10SPI_Rx_ISRP3spi+0x36>
		spi -> rxbuf += sizeof(uint8_t);
 8007430:	69e2      	ldr	r2, [r4, #28]
 8007432:	3201      	adds	r2, #1
 8007434:	61e2      	str	r2, [r4, #28]
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
		spi -> rxbuf += sizeof(uint16_t);

	if(spi -> rxcount == spi -> rxlen){
 8007436:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007438:	4293      	cmp	r3, r2
 800743a:	d00e      	beq.n	800745a <_Z10SPI_Rx_ISRP3spi+0x46>
			tmp = spi -> _spi -> SR;
			(void)tmp;
		}
	}

	return ret;
 800743c:	2201      	movs	r2, #1
 800743e:	2300      	movs	r3, #0
 8007440:	702a      	strb	r2, [r5, #0]
 8007442:	606b      	str	r3, [r5, #4]
}
 8007444:	4628      	mov	r0, r5
 8007446:	b006      	add	sp, #24
 8007448:	bd70      	pop	{r4, r5, r6, pc}
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 800744a:	2a01      	cmp	r2, #1
 800744c:	d1f3      	bne.n	8007436 <_Z10SPI_Rx_ISRP3spi+0x22>
		spi -> rxbuf += sizeof(uint16_t);
 800744e:	69e2      	ldr	r2, [r4, #28]
 8007450:	3202      	adds	r2, #2
 8007452:	61e2      	str	r2, [r4, #28]
	if(spi -> rxcount == spi -> rxlen){
 8007454:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007456:	4293      	cmp	r3, r2
 8007458:	d1f0      	bne.n	800743c <_Z10SPI_Rx_ISRP3spi+0x28>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 800745a:	684b      	ldr	r3, [r1, #4]
 800745c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007460:	604b      	str	r3, [r1, #4]
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 8007462:	ae04      	add	r6, sp, #16
 8007464:	2364      	movs	r3, #100	; 0x64
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	4630      	mov	r0, r6
 800746a:	3108      	adds	r1, #8
 800746c:	2300      	movs	r3, #0
 800746e:	2201      	movs	r2, #1
 8007470:	f001 fc10 	bl	8008c94 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007474:	4630      	mov	r0, r6
 8007476:	f001 fc4f 	bl	8008d18 <is_oke>
 800747a:	b158      	cbz	r0, 8007494 <_Z10SPI_Rx_ISRP3spi+0x80>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 800747c:	68a3      	ldr	r3, [r4, #8]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f013 0f0a 	tst.w	r3, #10
 8007484:	d1da      	bne.n	800743c <_Z10SPI_Rx_ISRP3spi+0x28>
			__IO uint32_t tmp = spi -> _spi -> DR;
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	9203      	str	r2, [sp, #12]
			tmp = spi -> _spi -> SR;
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	9303      	str	r3, [sp, #12]
			(void)tmp;
 8007490:	9b03      	ldr	r3, [sp, #12]
 8007492:	e7d3      	b.n	800743c <_Z10SPI_Rx_ISRP3spi+0x28>
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 8007494:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <_Z10SPI_Rx_ISRP3spi+0xa0>)
 8007496:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <_Z10SPI_Rx_ISRP3spi+0xa4>)
 8007498:	4908      	ldr	r1, [pc, #32]	; (80074bc <_Z10SPI_Rx_ISRP3spi+0xa8>)
 800749a:	4809      	ldr	r0, [pc, #36]	; (80074c0 <_Z10SPI_Rx_ISRP3spi+0xac>)
 800749c:	f001 fb7e 	bl	8008b9c <LOG_ERROR>
			set_return_line(&ret, __LINE__);
 80074a0:	f240 315d 	movw	r1, #861	; 0x35d
 80074a4:	4630      	mov	r0, r6
 80074a6:	f001 fc35 	bl	8008d14 <set_return_line>
			return ret;
 80074aa:	e896 0003 	ldmia.w	r6, {r0, r1}
 80074ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80074b2:	e7c7      	b.n	8007444 <_Z10SPI_Rx_ISRP3spi+0x30>
 80074b4:	0800cd90 	.word	0x0800cd90
 80074b8:	0800cc7c 	.word	0x0800cc7c
 80074bc:	0800ccf8 	.word	0x0800ccf8
 80074c0:	0800cca4 	.word	0x0800cca4

080074c4 <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 80074c4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80074c6:	4c22      	ldr	r4, [pc, #136]	; (8007550 <SPI1_IRQHandler+0x8c>)
 80074c8:	68e3      	ldr	r3, [r4, #12]
void SPI1_IRQHandler(void){
 80074ca:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80074cc:	685a      	ldr	r2, [r3, #4]
 80074ce:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80074d4:	9a00      	ldr	r2, [sp, #0]
 80074d6:	0611      	lsls	r1, r2, #24
 80074d8:	d502      	bpl.n	80074e0 <SPI1_IRQHandler+0x1c>
 80074da:	9a01      	ldr	r2, [sp, #4]
 80074dc:	0792      	lsls	r2, r2, #30
 80074de:	d41e      	bmi.n	800751e <SPI1_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80074e0:	9a00      	ldr	r2, [sp, #0]
 80074e2:	0650      	lsls	r0, r2, #25
 80074e4:	d502      	bpl.n	80074ec <SPI1_IRQHandler+0x28>
 80074e6:	9a01      	ldr	r2, [sp, #4]
 80074e8:	07d1      	lsls	r1, r2, #31
 80074ea:	d424      	bmi.n	8007536 <SPI1_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80074ec:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80074ee:	0652      	lsls	r2, r2, #25
 80074f0:	d40a      	bmi.n	8007508 <SPI1_IRQHandler+0x44>
 80074f2:	9801      	ldr	r0, [sp, #4]
 80074f4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80074f8:	d106      	bne.n	8007508 <SPI1_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80074fa:	6963      	ldr	r3, [r4, #20]
 80074fc:	b16b      	cbz	r3, 800751a <SPI1_IRQHandler+0x56>
 80074fe:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_1);
}
 8007500:	b004      	add	sp, #16
 8007502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007506:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8007510:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007512:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007514:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1f1      	bne.n	80074fe <SPI1_IRQHandler+0x3a>
}
 800751a:	b004      	add	sp, #16
 800751c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800751e:	4621      	mov	r1, r4
 8007520:	a802      	add	r0, sp, #8
 8007522:	f7ff fee7 	bl	80072f4 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007526:	a802      	add	r0, sp, #8
 8007528:	f001 fbf6 	bl	8008d18 <is_oke>
			event = SPI_EVENT_ERROR;
 800752c:	2800      	cmp	r0, #0
 800752e:	bf14      	ite	ne
 8007530:	2001      	movne	r0, #1
 8007532:	2003      	moveq	r0, #3
 8007534:	e7e1      	b.n	80074fa <SPI1_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007536:	4906      	ldr	r1, [pc, #24]	; (8007550 <SPI1_IRQHandler+0x8c>)
 8007538:	a802      	add	r0, sp, #8
 800753a:	f7ff ff6b 	bl	8007414 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800753e:	a802      	add	r0, sp, #8
 8007540:	f001 fbea 	bl	8008d18 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007544:	2800      	cmp	r0, #0
 8007546:	bf0c      	ite	eq
 8007548:	2003      	moveq	r0, #3
 800754a:	2002      	movne	r0, #2
 800754c:	e7d5      	b.n	80074fa <SPI1_IRQHandler+0x36>
 800754e:	bf00      	nop
 8007550:	2000b548 	.word	0x2000b548

08007554 <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 8007554:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007556:	4c22      	ldr	r4, [pc, #136]	; (80075e0 <SPI2_IRQHandler+0x8c>)
 8007558:	68e3      	ldr	r3, [r4, #12]
void SPI2_IRQHandler(void){
 800755a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007564:	9a00      	ldr	r2, [sp, #0]
 8007566:	0611      	lsls	r1, r2, #24
 8007568:	d502      	bpl.n	8007570 <SPI2_IRQHandler+0x1c>
 800756a:	9a01      	ldr	r2, [sp, #4]
 800756c:	0792      	lsls	r2, r2, #30
 800756e:	d41e      	bmi.n	80075ae <SPI2_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007570:	9a00      	ldr	r2, [sp, #0]
 8007572:	0650      	lsls	r0, r2, #25
 8007574:	d502      	bpl.n	800757c <SPI2_IRQHandler+0x28>
 8007576:	9a01      	ldr	r2, [sp, #4]
 8007578:	07d1      	lsls	r1, r2, #31
 800757a:	d424      	bmi.n	80075c6 <SPI2_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800757c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800757e:	0652      	lsls	r2, r2, #25
 8007580:	d40a      	bmi.n	8007598 <SPI2_IRQHandler+0x44>
 8007582:	9801      	ldr	r0, [sp, #4]
 8007584:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007588:	d106      	bne.n	8007598 <SPI2_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	b16b      	cbz	r3, 80075aa <SPI2_IRQHandler+0x56>
 800758e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_2);
}
 8007590:	b004      	add	sp, #16
 8007592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007596:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007598:	68da      	ldr	r2, [r3, #12]
 800759a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80075a0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80075a2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80075a4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f1      	bne.n	800758e <SPI2_IRQHandler+0x3a>
}
 80075aa:	b004      	add	sp, #16
 80075ac:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80075ae:	4621      	mov	r1, r4
 80075b0:	a802      	add	r0, sp, #8
 80075b2:	f7ff fe9f 	bl	80072f4 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80075b6:	a802      	add	r0, sp, #8
 80075b8:	f001 fbae 	bl	8008d18 <is_oke>
			event = SPI_EVENT_ERROR;
 80075bc:	2800      	cmp	r0, #0
 80075be:	bf14      	ite	ne
 80075c0:	2001      	movne	r0, #1
 80075c2:	2003      	moveq	r0, #3
 80075c4:	e7e1      	b.n	800758a <SPI2_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80075c6:	4906      	ldr	r1, [pc, #24]	; (80075e0 <SPI2_IRQHandler+0x8c>)
 80075c8:	a802      	add	r0, sp, #8
 80075ca:	f7ff ff23 	bl	8007414 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80075ce:	a802      	add	r0, sp, #8
 80075d0:	f001 fba2 	bl	8008d18 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80075d4:	2800      	cmp	r0, #0
 80075d6:	bf0c      	ite	eq
 80075d8:	2003      	moveq	r0, #3
 80075da:	2002      	movne	r0, #2
 80075dc:	e7d5      	b.n	800758a <SPI2_IRQHandler+0x36>
 80075de:	bf00      	nop
 80075e0:	2000b57c 	.word	0x2000b57c

080075e4 <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 80075e4:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80075e6:	4c22      	ldr	r4, [pc, #136]	; (8007670 <SPI3_IRQHandler+0x8c>)
 80075e8:	68e3      	ldr	r3, [r4, #12]
void SPI3_IRQHandler(void){
 80075ea:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80075f4:	9a00      	ldr	r2, [sp, #0]
 80075f6:	0611      	lsls	r1, r2, #24
 80075f8:	d502      	bpl.n	8007600 <SPI3_IRQHandler+0x1c>
 80075fa:	9a01      	ldr	r2, [sp, #4]
 80075fc:	0792      	lsls	r2, r2, #30
 80075fe:	d41e      	bmi.n	800763e <SPI3_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007600:	9a00      	ldr	r2, [sp, #0]
 8007602:	0650      	lsls	r0, r2, #25
 8007604:	d502      	bpl.n	800760c <SPI3_IRQHandler+0x28>
 8007606:	9a01      	ldr	r2, [sp, #4]
 8007608:	07d1      	lsls	r1, r2, #31
 800760a:	d424      	bmi.n	8007656 <SPI3_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800760c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800760e:	0652      	lsls	r2, r2, #25
 8007610:	d40a      	bmi.n	8007628 <SPI3_IRQHandler+0x44>
 8007612:	9801      	ldr	r0, [sp, #4]
 8007614:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007618:	d106      	bne.n	8007628 <SPI3_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800761a:	6963      	ldr	r3, [r4, #20]
 800761c:	b16b      	cbz	r3, 800763a <SPI3_IRQHandler+0x56>
 800761e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_3);
}
 8007620:	b004      	add	sp, #16
 8007622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007626:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8007630:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007632:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007634:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1f1      	bne.n	800761e <SPI3_IRQHandler+0x3a>
}
 800763a:	b004      	add	sp, #16
 800763c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800763e:	4621      	mov	r1, r4
 8007640:	a802      	add	r0, sp, #8
 8007642:	f7ff fe57 	bl	80072f4 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007646:	a802      	add	r0, sp, #8
 8007648:	f001 fb66 	bl	8008d18 <is_oke>
			event = SPI_EVENT_ERROR;
 800764c:	2800      	cmp	r0, #0
 800764e:	bf14      	ite	ne
 8007650:	2001      	movne	r0, #1
 8007652:	2003      	moveq	r0, #3
 8007654:	e7e1      	b.n	800761a <SPI3_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007656:	4906      	ldr	r1, [pc, #24]	; (8007670 <SPI3_IRQHandler+0x8c>)
 8007658:	a802      	add	r0, sp, #8
 800765a:	f7ff fedb 	bl	8007414 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800765e:	a802      	add	r0, sp, #8
 8007660:	f001 fb5a 	bl	8008d18 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007664:	2800      	cmp	r0, #0
 8007666:	bf0c      	ite	eq
 8007668:	2003      	moveq	r0, #3
 800766a:	2002      	movne	r0, #2
 800766c:	e7d5      	b.n	800761a <SPI3_IRQHandler+0x36>
 800766e:	bf00      	nop
 8007670:	2000b5b0 	.word	0x2000b5b0

08007674 <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 8007674:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007676:	4c22      	ldr	r4, [pc, #136]	; (8007700 <SPI4_IRQHandler+0x8c>)
 8007678:	68e3      	ldr	r3, [r4, #12]
void SPI4_IRQHandler(void){
 800767a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007684:	9a00      	ldr	r2, [sp, #0]
 8007686:	0611      	lsls	r1, r2, #24
 8007688:	d502      	bpl.n	8007690 <SPI4_IRQHandler+0x1c>
 800768a:	9a01      	ldr	r2, [sp, #4]
 800768c:	0792      	lsls	r2, r2, #30
 800768e:	d41e      	bmi.n	80076ce <SPI4_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007690:	9a00      	ldr	r2, [sp, #0]
 8007692:	0650      	lsls	r0, r2, #25
 8007694:	d502      	bpl.n	800769c <SPI4_IRQHandler+0x28>
 8007696:	9a01      	ldr	r2, [sp, #4]
 8007698:	07d1      	lsls	r1, r2, #31
 800769a:	d424      	bmi.n	80076e6 <SPI4_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800769c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800769e:	0652      	lsls	r2, r2, #25
 80076a0:	d40a      	bmi.n	80076b8 <SPI4_IRQHandler+0x44>
 80076a2:	9801      	ldr	r0, [sp, #4]
 80076a4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80076a8:	d106      	bne.n	80076b8 <SPI4_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076aa:	6963      	ldr	r3, [r4, #20]
 80076ac:	b16b      	cbz	r3, 80076ca <SPI4_IRQHandler+0x56>
 80076ae:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_4);
}
 80076b0:	b004      	add	sp, #16
 80076b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076b6:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80076c0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076c2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80076c4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f1      	bne.n	80076ae <SPI4_IRQHandler+0x3a>
}
 80076ca:	b004      	add	sp, #16
 80076cc:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80076ce:	4621      	mov	r1, r4
 80076d0:	a802      	add	r0, sp, #8
 80076d2:	f7ff fe0f 	bl	80072f4 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80076d6:	a802      	add	r0, sp, #8
 80076d8:	f001 fb1e 	bl	8008d18 <is_oke>
			event = SPI_EVENT_ERROR;
 80076dc:	2800      	cmp	r0, #0
 80076de:	bf14      	ite	ne
 80076e0:	2001      	movne	r0, #1
 80076e2:	2003      	moveq	r0, #3
 80076e4:	e7e1      	b.n	80076aa <SPI4_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 80076e6:	4906      	ldr	r1, [pc, #24]	; (8007700 <SPI4_IRQHandler+0x8c>)
 80076e8:	a802      	add	r0, sp, #8
 80076ea:	f7ff fe93 	bl	8007414 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 80076ee:	a802      	add	r0, sp, #8
 80076f0:	f001 fb12 	bl	8008d18 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 80076f4:	2800      	cmp	r0, #0
 80076f6:	bf0c      	ite	eq
 80076f8:	2003      	moveq	r0, #3
 80076fa:	2002      	movne	r0, #2
 80076fc:	e7d5      	b.n	80076aa <SPI4_IRQHandler+0x36>
 80076fe:	bf00      	nop
 8007700:	2000b5e4 	.word	0x2000b5e4

08007704 <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 8007704:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007706:	4c22      	ldr	r4, [pc, #136]	; (8007790 <SPI5_IRQHandler+0x8c>)
 8007708:	68e3      	ldr	r3, [r4, #12]
void SPI5_IRQHandler(void){
 800770a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007710:	689a      	ldr	r2, [r3, #8]
 8007712:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007714:	9a00      	ldr	r2, [sp, #0]
 8007716:	0611      	lsls	r1, r2, #24
 8007718:	d502      	bpl.n	8007720 <SPI5_IRQHandler+0x1c>
 800771a:	9a01      	ldr	r2, [sp, #4]
 800771c:	0792      	lsls	r2, r2, #30
 800771e:	d41e      	bmi.n	800775e <SPI5_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007720:	9a00      	ldr	r2, [sp, #0]
 8007722:	0650      	lsls	r0, r2, #25
 8007724:	d502      	bpl.n	800772c <SPI5_IRQHandler+0x28>
 8007726:	9a01      	ldr	r2, [sp, #4]
 8007728:	07d1      	lsls	r1, r2, #31
 800772a:	d424      	bmi.n	8007776 <SPI5_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 800772c:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 800772e:	0652      	lsls	r2, r2, #25
 8007730:	d40a      	bmi.n	8007748 <SPI5_IRQHandler+0x44>
 8007732:	9801      	ldr	r0, [sp, #4]
 8007734:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8007738:	d106      	bne.n	8007748 <SPI5_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 800773a:	6963      	ldr	r3, [r4, #20]
 800773c:	b16b      	cbz	r3, 800775a <SPI5_IRQHandler+0x56>
 800773e:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_5);
}
 8007740:	b004      	add	sp, #16
 8007742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007746:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007748:	68da      	ldr	r2, [r3, #12]
 800774a:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	9302      	str	r3, [sp, #8]
		(void)tmp;
 8007750:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007752:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 8007754:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f1      	bne.n	800773e <SPI5_IRQHandler+0x3a>
}
 800775a:	b004      	add	sp, #16
 800775c:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 800775e:	4621      	mov	r1, r4
 8007760:	a802      	add	r0, sp, #8
 8007762:	f7ff fdc7 	bl	80072f4 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007766:	a802      	add	r0, sp, #8
 8007768:	f001 fad6 	bl	8008d18 <is_oke>
			event = SPI_EVENT_ERROR;
 800776c:	2800      	cmp	r0, #0
 800776e:	bf14      	ite	ne
 8007770:	2001      	movne	r0, #1
 8007772:	2003      	moveq	r0, #3
 8007774:	e7e1      	b.n	800773a <SPI5_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007776:	4906      	ldr	r1, [pc, #24]	; (8007790 <SPI5_IRQHandler+0x8c>)
 8007778:	a802      	add	r0, sp, #8
 800777a:	f7ff fe4b 	bl	8007414 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800777e:	a802      	add	r0, sp, #8
 8007780:	f001 faca 	bl	8008d18 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007784:	2800      	cmp	r0, #0
 8007786:	bf0c      	ite	eq
 8007788:	2003      	moveq	r0, #3
 800778a:	2002      	movne	r0, #2
 800778c:	e7d5      	b.n	800773a <SPI5_IRQHandler+0x36>
 800778e:	bf00      	nop
 8007790:	2000b618 	.word	0x2000b618

08007794 <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 8007794:	b510      	push	{r4, lr}
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007796:	4c22      	ldr	r4, [pc, #136]	; (8007820 <SPI6_IRQHandler+0x8c>)
 8007798:	68e3      	ldr	r3, [r4, #12]
void SPI6_IRQHandler(void){
 800779a:	b084      	sub	sp, #16
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	9200      	str	r2, [sp, #0]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	9201      	str	r2, [sp, #4]
	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 80077a4:	9a00      	ldr	r2, [sp, #0]
 80077a6:	0611      	lsls	r1, r2, #24
 80077a8:	d502      	bpl.n	80077b0 <SPI6_IRQHandler+0x1c>
 80077aa:	9a01      	ldr	r2, [sp, #4]
 80077ac:	0792      	lsls	r2, r2, #30
 80077ae:	d41e      	bmi.n	80077ee <SPI6_IRQHandler+0x5a>
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 80077b0:	9a00      	ldr	r2, [sp, #0]
 80077b2:	0650      	lsls	r0, r2, #25
 80077b4:	d502      	bpl.n	80077bc <SPI6_IRQHandler+0x28>
 80077b6:	9a01      	ldr	r2, [sp, #4]
 80077b8:	07d1      	lsls	r1, r2, #31
 80077ba:	d424      	bmi.n	8007806 <SPI6_IRQHandler+0x72>
	if((sr_reg & SPI_SR_OVR)
 80077bc:	9a01      	ldr	r2, [sp, #4]
			|| (sr_reg & SPI_SR_FRE)
 80077be:	0652      	lsls	r2, r2, #25
 80077c0:	d40a      	bmi.n	80077d8 <SPI6_IRQHandler+0x44>
 80077c2:	9801      	ldr	r0, [sp, #4]
 80077c4:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80077c8:	d106      	bne.n	80077d8 <SPI6_IRQHandler+0x44>
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077ca:	6963      	ldr	r3, [r4, #20]
 80077cc:	b16b      	cbz	r3, 80077ea <SPI6_IRQHandler+0x56>
 80077ce:	6921      	ldr	r1, [r4, #16]
	SPI_IRQHandler(&spi_6);
}
 80077d0:	b004      	add	sp, #16
 80077d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077d6:	4718      	bx	r3
		__IO uint32_t tmp = spi -> _spi -> DR;
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	9202      	str	r2, [sp, #8]
		tmp = spi -> _spi -> SR;
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	9302      	str	r3, [sp, #8]
		(void)tmp;
 80077e0:	9b02      	ldr	r3, [sp, #8]
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077e2:	6963      	ldr	r3, [r4, #20]
		event = SPI_EVENT_ERROR;
 80077e4:	2003      	movs	r0, #3
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1f1      	bne.n	80077ce <SPI6_IRQHandler+0x3a>
}
 80077ea:	b004      	add	sp, #16
 80077ec:	bd10      	pop	{r4, pc}
		stm_ret_t ret = SPI_Tx_ISR(spi);
 80077ee:	4621      	mov	r1, r4
 80077f0:	a802      	add	r0, sp, #8
 80077f2:	f7ff fd7f 	bl	80072f4 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 80077f6:	a802      	add	r0, sp, #8
 80077f8:	f001 fa8e 	bl	8008d18 <is_oke>
			event = SPI_EVENT_ERROR;
 80077fc:	2800      	cmp	r0, #0
 80077fe:	bf14      	ite	ne
 8007800:	2001      	movne	r0, #1
 8007802:	2003      	moveq	r0, #3
 8007804:	e7e1      	b.n	80077ca <SPI6_IRQHandler+0x36>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007806:	4906      	ldr	r1, [pc, #24]	; (8007820 <SPI6_IRQHandler+0x8c>)
 8007808:	a802      	add	r0, sp, #8
 800780a:	f7ff fe03 	bl	8007414 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 800780e:	a802      	add	r0, sp, #8
 8007810:	f001 fa82 	bl	8008d18 <is_oke>
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007814:	2800      	cmp	r0, #0
 8007816:	bf0c      	ite	eq
 8007818:	2003      	moveq	r0, #3
 800781a:	2002      	movne	r0, #2
 800781c:	e7d5      	b.n	80077ca <SPI6_IRQHandler+0x36>
 800781e:	bf00      	nop
 8007820:	2000b64c 	.word	0x2000b64c

08007824 <_GLOBAL__sub_I_cc>:
}
 8007824:	b4f0      	push	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 8007826:	4e2c      	ldr	r6, [pc, #176]	; (80078d8 <_GLOBAL__sub_I_cc+0xb4>)
 8007828:	4c2c      	ldr	r4, [pc, #176]	; (80078dc <_GLOBAL__sub_I_cc+0xb8>)
 800782a:	4d2d      	ldr	r5, [pc, #180]	; (80078e0 <_GLOBAL__sub_I_cc+0xbc>)
	_spi = Spi;
 800782c:	4f2d      	ldr	r7, [pc, #180]	; (80078e4 <_GLOBAL__sub_I_cc+0xc0>)
 800782e:	60f7      	str	r7, [r6, #12]
spi::spi(SPI_TypeDef *Spi){
 8007830:	2300      	movs	r3, #0
 8007832:	e9c6 3300 	strd	r3, r3, [r6]
 8007836:	e9c6 3304 	strd	r3, r3, [r6, #16]
 800783a:	e9c6 3306 	strd	r3, r3, [r6, #24]
 800783e:	e9c6 3308 	strd	r3, r3, [r6, #32]
 8007842:	e9c6 330a 	strd	r3, r3, [r6, #40]	; 0x28
 8007846:	60b3      	str	r3, [r6, #8]
	_spi = Spi;
 8007848:	4e27      	ldr	r6, [pc, #156]	; (80078e8 <_GLOBAL__sub_I_cc+0xc4>)
spi::spi(SPI_TypeDef *Spi){
 800784a:	60ab      	str	r3, [r5, #8]
 800784c:	e9c5 3300 	strd	r3, r3, [r5]
 8007850:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8007854:	e9c5 3306 	strd	r3, r3, [r5, #24]
 8007858:	e9c5 3308 	strd	r3, r3, [r5, #32]
 800785c:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8007860:	e9c4 3300 	strd	r3, r3, [r4]
 8007864:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8007868:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800786c:	60a3      	str	r3, [r4, #8]
 800786e:	6223      	str	r3, [r4, #32]
	_spi = Spi;
 8007870:	60ee      	str	r6, [r5, #12]
 8007872:	4d1e      	ldr	r5, [pc, #120]	; (80078ec <_GLOBAL__sub_I_cc+0xc8>)
spi::spi(SPI_TypeDef *Spi){
 8007874:	481e      	ldr	r0, [pc, #120]	; (80078f0 <_GLOBAL__sub_I_cc+0xcc>)
	_spi = Spi;
 8007876:	60e5      	str	r5, [r4, #12]
spi::spi(SPI_TypeDef *Spi){
 8007878:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
 800787c:	62e3      	str	r3, [r4, #44]	; 0x2c
	_spi = Spi;
 800787e:	4c1d      	ldr	r4, [pc, #116]	; (80078f4 <_GLOBAL__sub_I_cc+0xd0>)
spi::spi(SPI_TypeDef *Spi){
 8007880:	491d      	ldr	r1, [pc, #116]	; (80078f8 <_GLOBAL__sub_I_cc+0xd4>)
 8007882:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <_GLOBAL__sub_I_cc+0xd8>)
	_spi = Spi;
 8007884:	60c4      	str	r4, [r0, #12]
spi::spi(SPI_TypeDef *Spi){
 8007886:	e9c0 3300 	strd	r3, r3, [r0]
 800788a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800788e:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8007892:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8007896:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 800789a:	6083      	str	r3, [r0, #8]
	_spi = Spi;
 800789c:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 80078a0:	4817      	ldr	r0, [pc, #92]	; (8007900 <_GLOBAL__sub_I_cc+0xdc>)
spi::spi(SPI_TypeDef *Spi){
 80078a2:	608b      	str	r3, [r1, #8]
 80078a4:	e9c1 3300 	strd	r3, r3, [r1]
 80078a8:	e9c1 3304 	strd	r3, r3, [r1, #16]
 80078ac:	e9c1 3306 	strd	r3, r3, [r1, #24]
 80078b0:	e9c1 3308 	strd	r3, r3, [r1, #32]
 80078b4:	e9c1 330a 	strd	r3, r3, [r1, #40]	; 0x28
 80078b8:	e9c2 3300 	strd	r3, r3, [r2]
 80078bc:	e9c2 3304 	strd	r3, r3, [r2, #16]
 80078c0:	6093      	str	r3, [r2, #8]
	_spi = Spi;
 80078c2:	60cc      	str	r4, [r1, #12]
}
 80078c4:	bcf0      	pop	{r4, r5, r6, r7}
spi::spi(SPI_TypeDef *Spi){
 80078c6:	e9c2 3306 	strd	r3, r3, [r2, #24]
 80078ca:	e9c2 3308 	strd	r3, r3, [r2, #32]
 80078ce:	e9c2 330a 	strd	r3, r3, [r2, #40]	; 0x28
	_spi = Spi;
 80078d2:	60d0      	str	r0, [r2, #12]
}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	2000b548 	.word	0x2000b548
 80078dc:	2000b5b0 	.word	0x2000b5b0
 80078e0:	2000b57c 	.word	0x2000b57c
 80078e4:	40013000 	.word	0x40013000
 80078e8:	40003800 	.word	0x40003800
 80078ec:	40003c00 	.word	0x40003c00
 80078f0:	2000b5e4 	.word	0x2000b5e4
 80078f4:	40013400 	.word	0x40013400
 80078f8:	2000b618 	.word	0x2000b618
 80078fc:	2000b64c 	.word	0x2000b64c
 8007900:	40015400 	.word	0x40015400

08007904 <systick_get_tick>:
void increment_tick(void){
	sdk_tick++;
}

uint32_t systick_get_tick(void){
	return sdk_tick;
 8007904:	4b01      	ldr	r3, [pc, #4]	; (800790c <systick_get_tick+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
}
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	2000b680 	.word	0x2000b680

08007910 <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
	uint32_t tickstart = sdk_tick;
 8007910:	4a05      	ldr	r2, [pc, #20]	; (8007928 <systick_delay_ms+0x18>)
	uint32_t wait = ms;

	if (wait < 0xFFFFFFU) wait += 1UL;
 8007912:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8007916:	4298      	cmp	r0, r3
	uint32_t tickstart = sdk_tick;
 8007918:	6811      	ldr	r1, [r2, #0]
	if (wait < 0xFFFFFFU) wait += 1UL;
 800791a:	bf38      	it	cc
 800791c:	3001      	addcc	r0, #1

	while((sdk_tick - tickstart) < wait);
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	1a5b      	subs	r3, r3, r1
 8007922:	4283      	cmp	r3, r0
 8007924:	d3fb      	bcc.n	800791e <systick_delay_ms+0xe>
}
 8007926:	4770      	bx	lr
 8007928:	2000b680 	.word	0x2000b680

0800792c <systick_init>:
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 800792c:	4b0d      	ldr	r3, [pc, #52]	; (8007964 <systick_init+0x38>)
 800792e:	4a0e      	ldr	r2, [pc, #56]	; (8007968 <systick_init+0x3c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007938:	3b01      	subs	r3, #1
 800793a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
void systick_init(uint32_t systick_priority){
 800793e:	4601      	mov	r1, r0
 8007940:	d20b      	bcs.n	800795a <systick_init+0x2e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007942:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007946:	4809      	ldr	r0, [pc, #36]	; (800796c <systick_init+0x40>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007948:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800794a:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800794e:	f880 c023 	strb.w	ip, [r0, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007952:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007954:	2000      	movs	r0, #0
 8007956:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007958:	6113      	str	r3, [r2, #16]
	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 800795a:	2200      	movs	r2, #0
 800795c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007960:	f001 ba70 	b.w	8008e44 <NVIC_Set_Priority>
 8007964:	20000000 	.word	0x20000000
 8007968:	10624dd3 	.word	0x10624dd3
 800796c:	e000ed00 	.word	0xe000ed00

08007970 <get_tick>:

uint32_t get_tick(void){
	return get_tick_func();
 8007970:	4b01      	ldr	r3, [pc, #4]	; (8007978 <get_tick+0x8>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4718      	bx	r3
 8007976:	bf00      	nop
 8007978:	20000038 	.word	0x20000038

0800797c <delay_ms>:
}

void delay_ms(uint32_t ms){
	delay_ms_func(ms);
 800797c:	4b01      	ldr	r3, [pc, #4]	; (8007984 <delay_ms+0x8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4718      	bx	r3
 8007982:	bf00      	nop
 8007984:	20000034 	.word	0x20000034

08007988 <app_systick_process>:
	sdk_tick++;
 8007988:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <app_systick_process+0x60>)
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 800798a:	b538      	push	{r3, r4, r5, lr}
	sdk_tick++;
 800798c:	6813      	ldr	r3, [r2, #0]
		increment_tick();

		systick_total_ticks++;
 800798e:	4c17      	ldr	r4, [pc, #92]	; (80079ec <app_systick_process+0x64>)
	sdk_tick++;
 8007990:	3301      	adds	r3, #1
 8007992:	6013      	str	r3, [r2, #0]
		systick_total_ticks++;
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	3301      	adds	r3, #1
 8007998:	6023      	str	r3, [r4, #0]
		if(systick_total_ticks == 1000){
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079a0:	d000      	beq.n	80079a4 <app_systick_process+0x1c>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
			systick_total_ticks = 0;
			systick_idle_ticks = 0;
		}
	}
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 80079a4:	4d12      	ldr	r5, [pc, #72]	; (80079f0 <app_systick_process+0x68>)
 80079a6:	ed95 7a00 	vldr	s14, [r5]
 80079aa:	edd4 7a00 	vldr	s15, [r4]
 80079ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80079b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80079ba:	ee17 0a90 	vmov	r0, s15
 80079be:	f7f8 fde3 	bl	8000588 <__aeabi_f2d>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	2000      	movs	r0, #0
 80079c8:	490a      	ldr	r1, [pc, #40]	; (80079f4 <app_systick_process+0x6c>)
 80079ca:	f7f8 fc7d 	bl	80002c8 <__aeabi_dsub>
 80079ce:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <app_systick_process+0x70>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	f7f8 fe31 	bl	8000638 <__aeabi_dmul>
 80079d6:	f7f9 f927 	bl	8000c28 <__aeabi_d2f>
 80079da:	4a08      	ldr	r2, [pc, #32]	; (80079fc <app_systick_process+0x74>)
			systick_total_ticks = 0;
 80079dc:	2300      	movs	r3, #0
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 80079de:	6010      	str	r0, [r2, #0]
			systick_total_ticks = 0;
 80079e0:	6023      	str	r3, [r4, #0]
			systick_idle_ticks = 0;
 80079e2:	602b      	str	r3, [r5, #0]
	}
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	bf00      	nop
 80079e8:	2000b680 	.word	0x2000b680
 80079ec:	2000b92c 	.word	0x2000b92c
 80079f0:	2000b928 	.word	0x2000b928
 80079f4:	3ff00000 	.word	0x3ff00000
 80079f8:	40590000 	.word	0x40590000
 80079fc:	2000b920 	.word	0x2000b920

08007a00 <_ZN3tim4initEP12tim_config_t>:
tim::tim(TIM_TypeDef *Timer){
	_tim = Timer;
}

/* TIM Basic */
stm_ret_t tim::init(tim_config_t *conf){
 8007a00:	b470      	push	{r4, r5, r6}
	stm_ret_t ret;

	_conf = conf;

#if defined(TIM1)
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007a02:	684b      	ldr	r3, [r1, #4]
 8007a04:	4c7d      	ldr	r4, [pc, #500]	; (8007bfc <_ZN3tim4initEP12tim_config_t+0x1fc>)
	_conf = conf;
 8007a06:	610a      	str	r2, [r1, #16]
	stm_ret_t ret;
 8007a08:	2501      	movs	r5, #1
 8007a0a:	7005      	strb	r5, [r0, #0]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007a0c:	42a3      	cmp	r3, r4
	stm_ret_t ret;
 8007a0e:	f04f 0500 	mov.w	r5, #0
 8007a12:	6045      	str	r5, [r0, #4]
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007a14:	f000 8087 	beq.w	8007b26 <_ZN3tim4initEP12tim_config_t+0x126>
#endif
#if defined(TIM2)
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1c:	d033      	beq.n	8007a86 <_ZN3tim4initEP12tim_config_t+0x86>
#endif
#if defined(TIM3)
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8007a1e:	4c78      	ldr	r4, [pc, #480]	; (8007c00 <_ZN3tim4initEP12tim_config_t+0x200>)
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	f000 808f 	beq.w	8007b44 <_ZN3tim4initEP12tim_config_t+0x144>
#endif
#if defined(TIM4)
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007a26:	4c77      	ldr	r4, [pc, #476]	; (8007c04 <_ZN3tim4initEP12tim_config_t+0x204>)
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	f000 8095 	beq.w	8007b58 <_ZN3tim4initEP12tim_config_t+0x158>
#endif
#if defined(TIM5)
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8007a2e:	4c76      	ldr	r4, [pc, #472]	; (8007c08 <_ZN3tim4initEP12tim_config_t+0x208>)
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d07e      	beq.n	8007b32 <_ZN3tim4initEP12tim_config_t+0x132>
#endif
#if defined(TIM6)
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8007a34:	4c75      	ldr	r4, [pc, #468]	; (8007c0c <_ZN3tim4initEP12tim_config_t+0x20c>)
 8007a36:	42a3      	cmp	r3, r4
 8007a38:	f000 8094 	beq.w	8007b64 <_ZN3tim4initEP12tim_config_t+0x164>
#endif
#if defined(TIM7)
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8007a3c:	4c74      	ldr	r4, [pc, #464]	; (8007c10 <_ZN3tim4initEP12tim_config_t+0x210>)
 8007a3e:	42a3      	cmp	r3, r4
 8007a40:	f000 80a2 	beq.w	8007b88 <_ZN3tim4initEP12tim_config_t+0x188>
#endif
#if defined(TIM8)
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8007a44:	4c73      	ldr	r4, [pc, #460]	; (8007c14 <_ZN3tim4initEP12tim_config_t+0x214>)
 8007a46:	42a3      	cmp	r3, r4
 8007a48:	f000 80a7 	beq.w	8007b9a <_ZN3tim4initEP12tim_config_t+0x19a>
#endif
#if defined(TIM9)
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 8007a4c:	4c72      	ldr	r4, [pc, #456]	; (8007c18 <_ZN3tim4initEP12tim_config_t+0x218>)
 8007a4e:	42a3      	cmp	r3, r4
 8007a50:	f000 808e 	beq.w	8007b70 <_ZN3tim4initEP12tim_config_t+0x170>
#endif
#if defined(TIM10)
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8007a54:	4c71      	ldr	r4, [pc, #452]	; (8007c1c <_ZN3tim4initEP12tim_config_t+0x21c>)
 8007a56:	42a3      	cmp	r3, r4
 8007a58:	f000 80a8 	beq.w	8007bac <_ZN3tim4initEP12tim_config_t+0x1ac>
#endif
#if defined(TIM11)
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8007a5c:	4c70      	ldr	r4, [pc, #448]	; (8007c20 <_ZN3tim4initEP12tim_config_t+0x220>)
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	f000 80b0 	beq.w	8007bc4 <_ZN3tim4initEP12tim_config_t+0x1c4>
#endif
#if defined(TIM12)
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8007a64:	4c6f      	ldr	r4, [pc, #444]	; (8007c24 <_ZN3tim4initEP12tim_config_t+0x224>)
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	f000 80b5 	beq.w	8007bd6 <_ZN3tim4initEP12tim_config_t+0x1d6>
#endif
#if defined(TIM13)
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8007a6c:	4c6e      	ldr	r4, [pc, #440]	; (8007c28 <_ZN3tim4initEP12tim_config_t+0x228>)
 8007a6e:	42a3      	cmp	r3, r4
 8007a70:	f000 80b7 	beq.w	8007be2 <_ZN3tim4initEP12tim_config_t+0x1e2>
#endif
#if defined(TIM14)
	else if(_tim == TIM14) RCC -> APB1ENR |= RCC_APB1ENR_TIM14EN;
 8007a74:	4c6d      	ldr	r4, [pc, #436]	; (8007c2c <_ZN3tim4initEP12tim_config_t+0x22c>)
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	d10a      	bne.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
 8007a7a:	4d6d      	ldr	r5, [pc, #436]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007a7c:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007a7e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8007a82:	642c      	str	r4, [r5, #64]	; 0x40
 8007a84:	e004      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM2)  RCC -> APB1ENR |= RCC_APB1ENR_TIM2EN;
 8007a86:	4d6a      	ldr	r5, [pc, #424]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007a88:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007a8a:	f044 0401 	orr.w	r4, r4, #1
 8007a8e:	642c      	str	r4, [r5, #64]	; 0x40
#endif

	/* BASIC TIMER */
	_tim -> CR1 = 0U;
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8007a90:	7a94      	ldrb	r4, [r2, #10]
 8007a92:	7a16      	ldrb	r6, [r2, #8]
 8007a94:	01e4      	lsls	r4, r4, #7
	_tim -> CR1 = 0U;
 8007a96:	2500      	movs	r5, #0
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8007a98:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
 8007a9c:	7a56      	ldrb	r6, [r2, #9]
	_tim -> CR1 = 0U;
 8007a9e:	601d      	str	r5, [r3, #0]
	_tim -> CR1 |= (_conf -> direction << TIM_CR1_DIR_Pos) | (_conf -> autoreloadpreload << TIM_CR1_ARPE_Pos) | (_conf -> align << TIM_CR1_CMS_Pos);
 8007aa0:	ea44 1446 	orr.w	r4, r4, r6, lsl #5
 8007aa4:	681e      	ldr	r6, [r3, #0]
 8007aa6:	4334      	orrs	r4, r6
 8007aa8:	601c      	str	r4, [r3, #0]

	_tim -> ARR = 0U;
	_tim -> ARR = _conf -> reload - 1;
 8007aaa:	6854      	ldr	r4, [r2, #4]
	_tim -> ARR = 0U;
 8007aac:	62dd      	str	r5, [r3, #44]	; 0x2c
	_tim -> ARR = _conf -> reload - 1;
 8007aae:	3c01      	subs	r4, #1
 8007ab0:	62dc      	str	r4, [r3, #44]	; 0x2c
	_tim -> PSC = 0U;
	_tim -> PSC = _conf -> prescaler - 1;
 8007ab2:	6814      	ldr	r4, [r2, #0]
	_tim -> PSC = 0U;
 8007ab4:	629d      	str	r5, [r3, #40]	; 0x28

	_tim -> EGR = TIM_EGR_UG;

	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8007ab6:	7ad5      	ldrb	r5, [r2, #11]
	_tim -> EGR = TIM_EGR_UG;
 8007ab8:	2201      	movs	r2, #1
	_tim -> PSC = _conf -> prescaler - 1;
 8007aba:	3c01      	subs	r4, #1
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8007abc:	4295      	cmp	r5, r2
	_tim -> PSC = _conf -> prescaler - 1;
 8007abe:	629c      	str	r4, [r3, #40]	; 0x28
	_tim -> EGR = TIM_EGR_UG;
 8007ac0:	615a      	str	r2, [r3, #20]
	if(_conf -> interrupt == TIM_INTERRUPT_ENABLE){
 8007ac2:	d001      	beq.n	8007ac8 <_ZN3tim4initEP12tim_config_t+0xc8>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
#endif
	}

	return ret;
}
 8007ac4:	bc70      	pop	{r4, r5, r6}
 8007ac6:	4770      	bx	lr
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8007ac8:	4a4c      	ldr	r2, [pc, #304]	; (8007bfc <_ZN3tim4initEP12tim_config_t+0x1fc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 8007ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ad2:	d034      	beq.n	8007b3e <_ZN3tim4initEP12tim_config_t+0x13e>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 8007ad4:	4a4a      	ldr	r2, [pc, #296]	; (8007c00 <_ZN3tim4initEP12tim_config_t+0x200>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d053      	beq.n	8007b82 <_ZN3tim4initEP12tim_config_t+0x182>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8007ada:	4a4a      	ldr	r2, [pc, #296]	; (8007c04 <_ZN3tim4initEP12tim_config_t+0x204>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d059      	beq.n	8007b94 <_ZN3tim4initEP12tim_config_t+0x194>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8007ae0:	4a49      	ldr	r2, [pc, #292]	; (8007c08 <_ZN3tim4initEP12tim_config_t+0x208>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d05f      	beq.n	8007ba6 <_ZN3tim4initEP12tim_config_t+0x1a6>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8007ae6:	4a49      	ldr	r2, [pc, #292]	; (8007c0c <_ZN3tim4initEP12tim_config_t+0x20c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d047      	beq.n	8007b7c <_ZN3tim4initEP12tim_config_t+0x17c>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8007aec:	4a48      	ldr	r2, [pc, #288]	; (8007c10 <_ZN3tim4initEP12tim_config_t+0x210>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d062      	beq.n	8007bb8 <_ZN3tim4initEP12tim_config_t+0x1b8>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 8007af2:	4a48      	ldr	r2, [pc, #288]	; (8007c14 <_ZN3tim4initEP12tim_config_t+0x214>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d062      	beq.n	8007bbe <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8007af8:	4a47      	ldr	r2, [pc, #284]	; (8007c18 <_ZN3tim4initEP12tim_config_t+0x218>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d068      	beq.n	8007bd0 <_ZN3tim4initEP12tim_config_t+0x1d0>
		else if(_tim == TIM10) IRQn = TIM1_UP_TIM10_IRQn;
 8007afe:	4a47      	ldr	r2, [pc, #284]	; (8007c1c <_ZN3tim4initEP12tim_config_t+0x21c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d025      	beq.n	8007b50 <_ZN3tim4initEP12tim_config_t+0x150>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 8007b04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d070      	beq.n	8007bee <_ZN3tim4initEP12tim_config_t+0x1ee>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8007b0c:	4a45      	ldr	r2, [pc, #276]	; (8007c24 <_ZN3tim4initEP12tim_config_t+0x224>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d070      	beq.n	8007bf4 <_ZN3tim4initEP12tim_config_t+0x1f4>
		else if(_tim == TIM13) IRQn = TIM8_UP_TIM13_IRQn;
 8007b12:	4a45      	ldr	r2, [pc, #276]	; (8007c28 <_ZN3tim4initEP12tim_config_t+0x228>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d052      	beq.n	8007bbe <_ZN3tim4initEP12tim_config_t+0x1be>
		else if(_tim == TIM14) IRQn = TIM8_TRG_COM_TIM14_IRQn;
 8007b18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	bf04      	itt	eq
 8007b20:	232d      	moveq	r3, #45	; 0x2d
 8007b22:	750b      	strbeq	r3, [r1, #20]
	return ret;
 8007b24:	e7ce      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	if     (_tim == TIM1)  RCC -> APB2ENR |= RCC_APB2ENR_TIM1EN;
 8007b26:	4d42      	ldr	r5, [pc, #264]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b28:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007b2a:	f044 0401 	orr.w	r4, r4, #1
 8007b2e:	646c      	str	r4, [r5, #68]	; 0x44
 8007b30:	e7ae      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM5)  RCC -> APB1ENR |= RCC_APB1ENR_TIM5EN;
 8007b32:	4d3f      	ldr	r5, [pc, #252]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b34:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007b36:	f044 0408 	orr.w	r4, r4, #8
 8007b3a:	642c      	str	r4, [r5, #64]	; 0x40
 8007b3c:	e7a8      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM2)  IRQn = TIM2_IRQn;
 8007b3e:	231c      	movs	r3, #28
 8007b40:	750b      	strb	r3, [r1, #20]
 8007b42:	e7bf      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM3)  RCC -> APB1ENR |= RCC_APB1ENR_TIM3EN;
 8007b44:	4d3a      	ldr	r5, [pc, #232]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b46:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007b48:	f044 0402 	orr.w	r4, r4, #2
 8007b4c:	642c      	str	r4, [r5, #64]	; 0x40
 8007b4e:	e79f      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8007b50:	2319      	movs	r3, #25
}
 8007b52:	bc70      	pop	{r4, r5, r6}
		if	   (_tim == TIM1)  IRQn = TIM1_UP_TIM10_IRQn;
 8007b54:	750b      	strb	r3, [r1, #20]
}
 8007b56:	4770      	bx	lr
	else if(_tim == TIM4)  RCC -> APB1ENR |= RCC_APB1ENR_TIM4EN;
 8007b58:	4d35      	ldr	r5, [pc, #212]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b5a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007b5c:	f044 0404 	orr.w	r4, r4, #4
 8007b60:	642c      	str	r4, [r5, #64]	; 0x40
 8007b62:	e795      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM6)  RCC -> APB1ENR |= RCC_APB1ENR_TIM6EN;
 8007b64:	4d32      	ldr	r5, [pc, #200]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b66:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007b68:	f044 0410 	orr.w	r4, r4, #16
 8007b6c:	642c      	str	r4, [r5, #64]	; 0x40
 8007b6e:	e78f      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM9)  RCC -> APB2ENR |= RCC_APB2ENR_TIM9EN;
 8007b70:	4d2f      	ldr	r5, [pc, #188]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b72:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007b74:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8007b78:	646c      	str	r4, [r5, #68]	; 0x44
 8007b7a:	e789      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM6)  IRQn = TIM6_DAC_IRQn;
 8007b7c:	2336      	movs	r3, #54	; 0x36
 8007b7e:	750b      	strb	r3, [r1, #20]
 8007b80:	e7a0      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM3)  IRQn = TIM3_IRQn;
 8007b82:	231d      	movs	r3, #29
 8007b84:	750b      	strb	r3, [r1, #20]
 8007b86:	e79d      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM7)  RCC -> APB1ENR |= RCC_APB1ENR_TIM7EN;
 8007b88:	4d29      	ldr	r5, [pc, #164]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b8a:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007b8c:	f044 0420 	orr.w	r4, r4, #32
 8007b90:	642c      	str	r4, [r5, #64]	; 0x40
 8007b92:	e77d      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM4)  IRQn = TIM4_IRQn;
 8007b94:	231e      	movs	r3, #30
 8007b96:	750b      	strb	r3, [r1, #20]
 8007b98:	e794      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM8)  RCC -> APB2ENR |= RCC_APB2ENR_TIM8EN;
 8007b9a:	4d25      	ldr	r5, [pc, #148]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007b9c:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007b9e:	f044 0402 	orr.w	r4, r4, #2
 8007ba2:	646c      	str	r4, [r5, #68]	; 0x44
 8007ba4:	e774      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM5)  IRQn = TIM5_IRQn;
 8007ba6:	2332      	movs	r3, #50	; 0x32
 8007ba8:	750b      	strb	r3, [r1, #20]
 8007baa:	e78b      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM10) RCC -> APB2ENR |= RCC_APB2ENR_TIM10EN;
 8007bac:	4d20      	ldr	r5, [pc, #128]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007bae:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007bb0:	f444 3400 	orr.w	r4, r4, #131072	; 0x20000
 8007bb4:	646c      	str	r4, [r5, #68]	; 0x44
 8007bb6:	e76b      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM7)  IRQn = TIM7_IRQn;
 8007bb8:	2337      	movs	r3, #55	; 0x37
 8007bba:	750b      	strb	r3, [r1, #20]
 8007bbc:	e782      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM8)  IRQn = TIM8_UP_TIM13_IRQn;
 8007bbe:	232c      	movs	r3, #44	; 0x2c
 8007bc0:	750b      	strb	r3, [r1, #20]
 8007bc2:	e77f      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM11) RCC -> APB2ENR |= RCC_APB2ENR_TIM11EN;
 8007bc4:	4d1a      	ldr	r5, [pc, #104]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007bc6:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8007bc8:	f444 2480 	orr.w	r4, r4, #262144	; 0x40000
 8007bcc:	646c      	str	r4, [r5, #68]	; 0x44
 8007bce:	e75f      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM9)  IRQn = TIM1_BRK_TIM9_IRQn;
 8007bd0:	2318      	movs	r3, #24
 8007bd2:	750b      	strb	r3, [r1, #20]
 8007bd4:	e776      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
	else if(_tim == TIM12) RCC -> APB1ENR |= RCC_APB1ENR_TIM12EN;
 8007bd6:	4d16      	ldr	r5, [pc, #88]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007bd8:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007bda:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8007bde:	642c      	str	r4, [r5, #64]	; 0x40
 8007be0:	e756      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
	else if(_tim == TIM13) RCC -> APB1ENR |= RCC_APB1ENR_TIM13EN;
 8007be2:	4d13      	ldr	r5, [pc, #76]	; (8007c30 <_ZN3tim4initEP12tim_config_t+0x230>)
 8007be4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8007be6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8007bea:	642c      	str	r4, [r5, #64]	; 0x40
 8007bec:	e750      	b.n	8007a90 <_ZN3tim4initEP12tim_config_t+0x90>
		else if(_tim == TIM11) IRQn = TIM1_TRG_COM_TIM11_IRQn;
 8007bee:	231a      	movs	r3, #26
 8007bf0:	750b      	strb	r3, [r1, #20]
 8007bf2:	e767      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
		else if(_tim == TIM12) IRQn = TIM8_BRK_TIM12_IRQn;
 8007bf4:	232b      	movs	r3, #43	; 0x2b
 8007bf6:	750b      	strb	r3, [r1, #20]
 8007bf8:	e764      	b.n	8007ac4 <_ZN3tim4initEP12tim_config_t+0xc4>
 8007bfa:	bf00      	nop
 8007bfc:	40010000 	.word	0x40010000
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40000800 	.word	0x40000800
 8007c08:	40000c00 	.word	0x40000c00
 8007c0c:	40001000 	.word	0x40001000
 8007c10:	40001400 	.word	0x40001400
 8007c14:	40010400 	.word	0x40010400
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40014400 	.word	0x40014400
 8007c20:	40014800 	.word	0x40014800
 8007c24:	40001800 	.word	0x40001800
 8007c28:	40001c00 	.word	0x40001c00
 8007c2c:	40002000 	.word	0x40002000
 8007c30:	40023800 	.word	0x40023800

08007c34 <_ZN3tim13reset_counterEv>:
	_conf -> reload = arl;
	_tim -> ARR = arl;
}

void tim::reset_counter(void){
	_tim -> CNT = 0;
 8007c34:	6843      	ldr	r3, [r0, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007c3a:	4770      	bx	lr

08007c3c <_ZN3tim11get_counterEv>:

uint32_t tim::get_counter(void){
	return _tim -> CNT;
 8007c3c:	6843      	ldr	r3, [r0, #4]
 8007c3e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop

08007c44 <_ZN3tim5startEv>:
}

stm_ret_t tim::start(void){
	stm_ret_t ret;

	if(_tim -> CR1 & TIM_CR1_CEN){
 8007c44:	684b      	ldr	r3, [r1, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
	stm_ret_t ret;
 8007c48:	2101      	movs	r1, #1
stm_ret_t tim::start(void){
 8007c4a:	b510      	push	{r4, lr}
	if(_tim -> CR1 & TIM_CR1_CEN){
 8007c4c:	07d2      	lsls	r2, r2, #31
	stm_ret_t ret;
 8007c4e:	7001      	strb	r1, [r0, #0]
 8007c50:	f04f 0100 	mov.w	r1, #0
stm_ret_t tim::start(void){
 8007c54:	4604      	mov	r4, r0
	stm_ret_t ret;
 8007c56:	6041      	str	r1, [r0, #4]
	if(_tim -> CR1 & TIM_CR1_CEN){
 8007c58:	d405      	bmi.n	8007c66 <_ZN3tim5startEv+0x22>
#if CONFIG_USE_LOG_MONITOR && TIM_LOG
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}
	_tim -> CR1 |= TIM_CR1_CEN;
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	f042 0201 	orr.w	r2, r2, #1
 8007c60:	601a      	str	r2, [r3, #0]

	return ret;
}
 8007c62:	4620      	mov	r0, r4
 8007c64:	bd10      	pop	{r4, pc}
		set_return(&ret, STM_BUSY, __LINE__);
 8007c66:	22d3      	movs	r2, #211	; 0xd3
 8007c68:	2104      	movs	r1, #4
 8007c6a:	f001 f84f 	bl	8008d0c <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer started, can't restart.", __FILE__, __FUNCTION__);
 8007c6e:	4b04      	ldr	r3, [pc, #16]	; (8007c80 <_ZN3tim5startEv+0x3c>)
 8007c70:	4a04      	ldr	r2, [pc, #16]	; (8007c84 <_ZN3tim5startEv+0x40>)
 8007c72:	4905      	ldr	r1, [pc, #20]	; (8007c88 <_ZN3tim5startEv+0x44>)
 8007c74:	4805      	ldr	r0, [pc, #20]	; (8007c8c <_ZN3tim5startEv+0x48>)
 8007c76:	f000 ff53 	bl	8008b20 <LOG_WARN>
}
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	bd10      	pop	{r4, pc}
 8007c7e:	bf00      	nop
 8007c80:	0800ce2c 	.word	0x0800ce2c
 8007c84:	0800cdb4 	.word	0x0800cdb4
 8007c88:	0800ce34 	.word	0x0800ce34
 8007c8c:	0800ce28 	.word	0x0800ce28

08007c90 <_ZN3tim4stopEv>:

stm_ret_t tim::stop(void){
	stm_ret_t ret;

	if(!(_tim -> CR1 & TIM_CR1_CEN)){
 8007c90:	684b      	ldr	r3, [r1, #4]
 8007c92:	6819      	ldr	r1, [r3, #0]
	stm_ret_t ret;
 8007c94:	2201      	movs	r2, #1
stm_ret_t tim::stop(void){
 8007c96:	b510      	push	{r4, lr}
	if(!(_tim -> CR1 & TIM_CR1_CEN)){
 8007c98:	f011 0101 	ands.w	r1, r1, #1
	stm_ret_t ret;
 8007c9c:	7002      	strb	r2, [r0, #0]
 8007c9e:	f04f 0200 	mov.w	r2, #0
stm_ret_t tim::stop(void){
 8007ca2:	4604      	mov	r4, r0
	stm_ret_t ret;
 8007ca4:	6042      	str	r2, [r0, #4]
	if(!(_tim -> CR1 & TIM_CR1_CEN)){
 8007ca6:	d005      	beq.n	8007cb4 <_ZN3tim4stopEv+0x24>
#if CONFIG_USE_LOG_MONITOR && TIM_LOG
		LOG_WARN(TAG, "%s -> %s, Timer not started, can't stop.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */
		return ret;
	}
	_tim -> CR1 &=~ TIM_CR1_CEN;
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	f022 0201 	bic.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]

	return ret;
}
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	bd10      	pop	{r4, pc}
		set_return(&ret, STM_ERR, __LINE__);
 8007cb4:	22e2      	movs	r2, #226	; 0xe2
 8007cb6:	f001 f829 	bl	8008d0c <set_return>
		LOG_WARN(TAG, "%s -> %s, Timer not started, can't stop.", __FILE__, __FUNCTION__);
 8007cba:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <_ZN3tim4stopEv+0x3c>)
 8007cbc:	4a04      	ldr	r2, [pc, #16]	; (8007cd0 <_ZN3tim4stopEv+0x40>)
 8007cbe:	4905      	ldr	r1, [pc, #20]	; (8007cd4 <_ZN3tim4stopEv+0x44>)
 8007cc0:	4805      	ldr	r0, [pc, #20]	; (8007cd8 <_ZN3tim4stopEv+0x48>)
 8007cc2:	f000 ff2d 	bl	8008b20 <LOG_WARN>
}
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	bd10      	pop	{r4, pc}
 8007cca:	bf00      	nop
 8007ccc:	0800ce5c 	.word	0x0800ce5c
 8007cd0:	0800cdb4 	.word	0x0800cdb4
 8007cd4:	0800ce64 	.word	0x0800ce64
 8007cd8:	0800ce28 	.word	0x0800ce28

08007cdc <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
tim::tim(TIM_TypeDef *Timer){
 8007ce0:	f8df a154 	ldr.w	sl, [pc, #340]	; 8007e38 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x15c>
 8007ce4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8007e3c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x160>
 8007ce8:	4f4a      	ldr	r7, [pc, #296]	; (8007e14 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x138>)
	_tim = Timer;
 8007cea:	4a4b      	ldr	r2, [pc, #300]	; (8007e18 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x13c>)
tim::tim(TIM_TypeDef *Timer){
 8007cec:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8007e40 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x164>
	_tim = Timer;
 8007cf0:	f8ca 2004 	str.w	r2, [sl, #4]
tim::tim(TIM_TypeDef *Timer){
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f8ca 300c 	str.w	r3, [sl, #12]
 8007cfa:	f8ca 3000 	str.w	r3, [sl]
 8007cfe:	f8ca 3008 	str.w	r3, [sl, #8]
 8007d02:	f8ca 3010 	str.w	r3, [sl, #16]
	_tim = Timer;
 8007d06:	f8df a13c 	ldr.w	sl, [pc, #316]	; 8007e44 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x168>
tim::tim(TIM_TypeDef *Timer){
 8007d0a:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8007e48 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x16c>
 8007d0e:	60fb      	str	r3, [r7, #12]
	_tim = Timer;
 8007d10:	f8c9 a004 	str.w	sl, [r9, #4]
tim::tim(TIM_TypeDef *Timer){
 8007d14:	f8c9 300c 	str.w	r3, [r9, #12]
 8007d18:	f8c9 3000 	str.w	r3, [r9]
 8007d1c:	f8c9 3008 	str.w	r3, [r9, #8]
 8007d20:	f8c9 3010 	str.w	r3, [r9, #16]
	_tim = Timer;
 8007d24:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8007e4c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x170>
tim::tim(TIM_TypeDef *Timer){
 8007d28:	f8df c124 	ldr.w	ip, [pc, #292]	; 8007e50 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x174>
 8007d2c:	4e3b      	ldr	r6, [pc, #236]	; (8007e1c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x140>)
 8007d2e:	4d3c      	ldr	r5, [pc, #240]	; (8007e20 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x144>)
 8007d30:	f8c8 300c 	str.w	r3, [r8, #12]
	_tim = Timer;
 8007d34:	f8c8 9004 	str.w	r9, [r8, #4]
tim::tim(TIM_TypeDef *Timer){
 8007d38:	f8c8 3000 	str.w	r3, [r8]
 8007d3c:	f8c8 3008 	str.w	r3, [r8, #8]
 8007d40:	f8c8 3010 	str.w	r3, [r8, #16]
	_tim = Timer;
 8007d44:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8007e54 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x178>
tim::tim(TIM_TypeDef *Timer){
 8007d48:	4c36      	ldr	r4, [pc, #216]	; (8007e24 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x148>)
 8007d4a:	f8ce 300c 	str.w	r3, [lr, #12]
	_tim = Timer;
 8007d4e:	f8ce 8004 	str.w	r8, [lr, #4]
tim::tim(TIM_TypeDef *Timer){
 8007d52:	f8ce 3000 	str.w	r3, [lr]
 8007d56:	f8ce 3008 	str.w	r3, [lr, #8]
 8007d5a:	f8ce 3010 	str.w	r3, [lr, #16]
	_tim = Timer;
 8007d5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d62:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8007e58 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x17c>
tim::tim(TIM_TypeDef *Timer){
 8007d66:	4830      	ldr	r0, [pc, #192]	; (8007e28 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x14c>)
	_tim = Timer;
 8007d68:	f8cc e004 	str.w	lr, [ip, #4]
 8007d6c:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
tim::tim(TIM_TypeDef *Timer){
 8007d70:	f8cc 3000 	str.w	r3, [ip]
 8007d74:	f8cc 3008 	str.w	r3, [ip, #8]
 8007d78:	f8cc 300c 	str.w	r3, [ip, #12]
 8007d7c:	f8cc 3010 	str.w	r3, [ip, #16]
 8007d80:	6033      	str	r3, [r6, #0]
 8007d82:	60b3      	str	r3, [r6, #8]
 8007d84:	603b      	str	r3, [r7, #0]
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	613b      	str	r3, [r7, #16]
	_tim = Timer;
 8007d8a:	f8c7 9004 	str.w	r9, [r7, #4]
 8007d8e:	606a      	str	r2, [r5, #4]
 8007d90:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
tim::tim(TIM_TypeDef *Timer){
 8007d94:	4925      	ldr	r1, [pc, #148]	; (8007e2c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x150>)
	_tim = Timer;
 8007d96:	6062      	str	r2, [r4, #4]
 8007d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007d9c:	6042      	str	r2, [r0, #4]
 8007d9e:	f508 6800 	add.w	r8, r8, #2048	; 0x800
 8007da2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
tim::tim(TIM_TypeDef *Timer){
 8007da6:	60f3      	str	r3, [r6, #12]
 8007da8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8007e5c <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x180>
	_tim = Timer;
 8007dac:	f8c6 8004 	str.w	r8, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8007db0:	6133      	str	r3, [r6, #16]
	_tim = Timer;
 8007db2:	604a      	str	r2, [r1, #4]
 8007db4:	4e1e      	ldr	r6, [pc, #120]	; (8007e30 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x154>)
 8007db6:	4a1f      	ldr	r2, [pc, #124]	; (8007e34 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x158>)
 8007db8:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8007e60 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef+0x184>
tim::tim(TIM_TypeDef *Timer){
 8007dbc:	60eb      	str	r3, [r5, #12]
	_tim = Timer;
 8007dbe:	f50a 5aa0 	add.w	sl, sl, #5120	; 0x1400
 8007dc2:	f50e 6e40 	add.w	lr, lr, #3072	; 0xc00
tim::tim(TIM_TypeDef *Timer){
 8007dc6:	60e3      	str	r3, [r4, #12]
	_tim = Timer;
 8007dc8:	f8c2 a004 	str.w	sl, [r2, #4]
tim::tim(TIM_TypeDef *Timer){
 8007dcc:	60c3      	str	r3, [r0, #12]
	_tim = Timer;
 8007dce:	f8c6 e004 	str.w	lr, [r6, #4]
tim::tim(TIM_TypeDef *Timer){
 8007dd2:	60cb      	str	r3, [r1, #12]
 8007dd4:	602b      	str	r3, [r5, #0]
 8007dd6:	60d3      	str	r3, [r2, #12]
 8007dd8:	60ab      	str	r3, [r5, #8]
 8007dda:	612b      	str	r3, [r5, #16]
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	60a3      	str	r3, [r4, #8]
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	6003      	str	r3, [r0, #0]
 8007de4:	6083      	str	r3, [r0, #8]
 8007de6:	6103      	str	r3, [r0, #16]
 8007de8:	600b      	str	r3, [r1, #0]
 8007dea:	608b      	str	r3, [r1, #8]
 8007dec:	610b      	str	r3, [r1, #16]
 8007dee:	6013      	str	r3, [r2, #0]
 8007df0:	6093      	str	r3, [r2, #8]
 8007df2:	6113      	str	r3, [r2, #16]
 8007df4:	6033      	str	r3, [r6, #0]
 8007df6:	60b3      	str	r3, [r6, #8]
 8007df8:	60f3      	str	r3, [r6, #12]
 8007dfa:	6133      	str	r3, [r6, #16]
 8007dfc:	f8cb 3000 	str.w	r3, [fp]
 8007e00:	f8cb 3008 	str.w	r3, [fp, #8]
 8007e04:	f8cb 300c 	str.w	r3, [fp, #12]
 8007e08:	f8cb 3010 	str.w	r3, [fp, #16]
	_tim = Timer;
 8007e0c:	f8cb c004 	str.w	ip, [fp, #4]
}
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	2000b714 	.word	0x2000b714
 8007e18:	40010000 	.word	0x40010000
 8007e1c:	2000b78c 	.word	0x2000b78c
 8007e20:	2000b7a4 	.word	0x2000b7a4
 8007e24:	2000b7bc 	.word	0x2000b7bc
 8007e28:	2000b69c 	.word	0x2000b69c
 8007e2c:	2000b6b4 	.word	0x2000b6b4
 8007e30:	2000b6e4 	.word	0x2000b6e4
 8007e34:	2000b6cc 	.word	0x2000b6cc
 8007e38:	2000b684 	.word	0x2000b684
 8007e3c:	2000b72c 	.word	0x2000b72c
 8007e40:	2000b744 	.word	0x2000b744
 8007e44:	40000400 	.word	0x40000400
 8007e48:	2000b75c 	.word	0x2000b75c
 8007e4c:	40000800 	.word	0x40000800
 8007e50:	2000b774 	.word	0x2000b774
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40001000 	.word	0x40001000
 8007e5c:	2000b6fc 	.word	0x2000b6fc
 8007e60:	40002000 	.word	0x40002000

08007e64 <USART1_IRQHandler>:
}

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 8007e64:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8007e66:	4c3c      	ldr	r4, [pc, #240]	; (8007f58 <USART1_IRQHandler+0xf4>)
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8007e6e:	0690      	lsls	r0, r2, #26
void USART1_IRQHandler(void){
 8007e70:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8007e72:	d51a      	bpl.n	8007eaa <USART1_IRQHandler+0x46>
 8007e74:	068d      	lsls	r5, r1, #26
 8007e76:	d518      	bpl.n	8007eaa <USART1_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8007e7c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8007e7e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8007e80:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8007e82:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8007e84:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8007e88:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8007e8a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8007e8c:	d93a      	bls.n	8007f04 <USART1_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8007e8e:	6962      	ldr	r2, [r4, #20]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8007e94:	7f63      	ldrb	r3, [r4, #29]
 8007e96:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8007e98:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8007e9a:	d04c      	beq.n	8007f36 <USART1_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8007e9c:	2002      	movs	r0, #2
		usart -> rxcount++;
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8007ea2:	6923      	ldr	r3, [r4, #16]
 8007ea4:	b95b      	cbnz	r3, 8007ebe <USART1_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_1);
}
 8007ea6:	b005      	add	sp, #20
 8007ea8:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8007eaa:	0650      	lsls	r0, r2, #25
 8007eac:	d501      	bpl.n	8007eb2 <USART1_IRQHandler+0x4e>
 8007eae:	064d      	lsls	r5, r1, #25
 8007eb0:	d41d      	bmi.n	8007eee <USART1_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8007eb2:	06d0      	lsls	r0, r2, #27
 8007eb4:	d408      	bmi.n	8007ec8 <USART1_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8007eb6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0f3      	beq.n	8007ea6 <USART1_IRQHandler+0x42>
 8007ebe:	68e1      	ldr	r1, [r4, #12]
}
 8007ec0:	b005      	add	sp, #20
 8007ec2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8007ec6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8007ec8:	06ca      	lsls	r2, r1, #27
 8007eca:	d5f4      	bpl.n	8007eb6 <USART1_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8007ed0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8007ed2:	6859      	ldr	r1, [r3, #4]
 8007ed4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8007ed6:	2a02      	cmp	r2, #2
		(void)tmp;
 8007ed8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8007eda:	d1ec      	bne.n	8007eb6 <USART1_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007ee2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8007ee4:	695b      	ldr	r3, [r3, #20]
 8007ee6:	065b      	lsls	r3, r3, #25
 8007ee8:	d40e      	bmi.n	8007f08 <USART1_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8007eea:	2004      	movs	r0, #4
 8007eec:	e7e4      	b.n	8007eb8 <USART1_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8007ef6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8007efe:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8007f00:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8007f02:	e7d9      	b.n	8007eb8 <USART1_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8007f04:	2003      	movs	r0, #3
 8007f06:	e7d7      	b.n	8007eb8 <USART1_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8007f08:	68a0      	ldr	r0, [r4, #8]
 8007f0a:	8b25      	ldrh	r5, [r4, #24]
 8007f0c:	f7fd fd6a 	bl	80059e4 <_ZN3dma11get_counterEv>
 8007f10:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8007f12:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8007f14:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8007f16:	f7fd fd6b 	bl	80059f0 <_ZN3dma10get_configEv>
 8007f1a:	7983      	ldrb	r3, [r0, #6]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d0e4      	beq.n	8007eea <USART1_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8007f20:	a802      	add	r0, sp, #8
 8007f22:	68a1      	ldr	r1, [r4, #8]
 8007f24:	f7fd fd00 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8007f28:	6822      	ldr	r2, [r4, #0]
 8007f2a:	6953      	ldr	r3, [r2, #20]
 8007f2c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8007f30:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8007f32:	6153      	str	r3, [r2, #20]
 8007f34:	e7c0      	b.n	8007eb8 <USART1_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8007f36:	6961      	ldr	r1, [r4, #20]
 8007f38:	7f22      	ldrb	r2, [r4, #28]
 8007f3a:	5cc9      	ldrb	r1, [r1, r3]
 8007f3c:	4291      	cmp	r1, r2
 8007f3e:	d1ad      	bne.n	8007e9c <USART1_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8007f40:	6822      	ldr	r2, [r4, #0]
 8007f42:	68d1      	ldr	r1, [r2, #12]
 8007f44:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007f48:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8007f4a:	6951      	ldr	r1, [r2, #20]
 8007f4c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8007f50:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8007f52:	6151      	str	r1, [r2, #20]
 8007f54:	e7a3      	b.n	8007e9e <USART1_IRQHandler+0x3a>
 8007f56:	bf00      	nop
 8007f58:	2000b874 	.word	0x2000b874

08007f5c <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 8007f5c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8007f5e:	4c3c      	ldr	r4, [pc, #240]	; (8008050 <USART2_IRQHandler+0xf4>)
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8007f66:	0690      	lsls	r0, r2, #26
void USART2_IRQHandler(void){
 8007f68:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8007f6a:	d51a      	bpl.n	8007fa2 <USART2_IRQHandler+0x46>
 8007f6c:	068d      	lsls	r5, r1, #26
 8007f6e:	d518      	bpl.n	8007fa2 <USART2_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8007f74:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8007f76:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8007f78:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8007f7a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8007f7c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8007f80:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8007f82:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8007f84:	d93a      	bls.n	8007ffc <USART2_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8007f86:	6962      	ldr	r2, [r4, #20]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8007f8c:	7f63      	ldrb	r3, [r4, #29]
 8007f8e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8007f90:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8007f92:	d04c      	beq.n	800802e <USART2_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8007f94:	2002      	movs	r0, #2
		usart -> rxcount++;
 8007f96:	3301      	adds	r3, #1
 8007f98:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	b95b      	cbnz	r3, 8007fb6 <USART2_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_2);
}
 8007f9e:	b005      	add	sp, #20
 8007fa0:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8007fa2:	0650      	lsls	r0, r2, #25
 8007fa4:	d501      	bpl.n	8007faa <USART2_IRQHandler+0x4e>
 8007fa6:	064d      	lsls	r5, r1, #25
 8007fa8:	d41d      	bmi.n	8007fe6 <USART2_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8007faa:	06d0      	lsls	r0, r2, #27
 8007fac:	d408      	bmi.n	8007fc0 <USART2_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8007fae:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d0f3      	beq.n	8007f9e <USART2_IRQHandler+0x42>
 8007fb6:	68e1      	ldr	r1, [r4, #12]
}
 8007fb8:	b005      	add	sp, #20
 8007fba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8007fbe:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8007fc0:	06ca      	lsls	r2, r1, #27
 8007fc2:	d5f4      	bpl.n	8007fae <USART2_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8007fc8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 8007fca:	6859      	ldr	r1, [r3, #4]
 8007fcc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8007fce:	2a02      	cmp	r2, #2
		(void)tmp;
 8007fd0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8007fd2:	d1ec      	bne.n	8007fae <USART2_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8007fda:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	065b      	lsls	r3, r3, #25
 8007fe0:	d40e      	bmi.n	8008000 <USART2_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 8007fe2:	2004      	movs	r0, #4
 8007fe4:	e7e4      	b.n	8007fb0 <USART2_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	9202      	str	r2, [sp, #8]
		(void)tmp;
 8007fee:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 8007ff6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 8007ff8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 8007ffa:	e7d9      	b.n	8007fb0 <USART2_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 8007ffc:	2003      	movs	r0, #3
 8007ffe:	e7d7      	b.n	8007fb0 <USART2_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008000:	68a0      	ldr	r0, [r4, #8]
 8008002:	8b25      	ldrh	r5, [r4, #24]
 8008004:	f7fd fcee 	bl	80059e4 <_ZN3dma11get_counterEv>
 8008008:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800800a:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 800800c:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 800800e:	f7fd fcef 	bl	80059f0 <_ZN3dma10get_configEv>
 8008012:	7983      	ldrb	r3, [r0, #6]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d0e4      	beq.n	8007fe2 <USART2_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008018:	a802      	add	r0, sp, #8
 800801a:	68a1      	ldr	r1, [r4, #8]
 800801c:	f7fd fc84 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	6953      	ldr	r3, [r2, #20]
 8008024:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008028:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800802a:	6153      	str	r3, [r2, #20]
 800802c:	e7c0      	b.n	8007fb0 <USART2_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800802e:	6961      	ldr	r1, [r4, #20]
 8008030:	7f22      	ldrb	r2, [r4, #28]
 8008032:	5cc9      	ldrb	r1, [r1, r3]
 8008034:	4291      	cmp	r1, r2
 8008036:	d1ad      	bne.n	8007f94 <USART2_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008038:	6822      	ldr	r2, [r4, #0]
 800803a:	68d1      	ldr	r1, [r2, #12]
 800803c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008040:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008042:	6951      	ldr	r1, [r2, #20]
 8008044:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008048:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800804a:	6151      	str	r1, [r2, #20]
 800804c:	e7a3      	b.n	8007f96 <USART2_IRQHandler+0x3a>
 800804e:	bf00      	nop
 8008050:	2000b89c 	.word	0x2000b89c

08008054 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 8008054:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008056:	4c3c      	ldr	r4, [pc, #240]	; (8008148 <USART3_IRQHandler+0xf4>)
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800805e:	0690      	lsls	r0, r2, #26
void USART3_IRQHandler(void){
 8008060:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008062:	d51a      	bpl.n	800809a <USART3_IRQHandler+0x46>
 8008064:	068d      	lsls	r5, r1, #26
 8008066:	d518      	bpl.n	800809a <USART3_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800806c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800806e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008070:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008072:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008074:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008078:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800807a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800807c:	d93a      	bls.n	80080f4 <USART3_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800807e:	6962      	ldr	r2, [r4, #20]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008084:	7f63      	ldrb	r3, [r4, #29]
 8008086:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008088:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800808a:	d04c      	beq.n	8008126 <USART3_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800808c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800808e:	3301      	adds	r3, #1
 8008090:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	b95b      	cbnz	r3, 80080ae <USART3_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_3);
}
 8008096:	b005      	add	sp, #20
 8008098:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800809a:	0650      	lsls	r0, r2, #25
 800809c:	d501      	bpl.n	80080a2 <USART3_IRQHandler+0x4e>
 800809e:	064d      	lsls	r5, r1, #25
 80080a0:	d41d      	bmi.n	80080de <USART3_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80080a2:	06d0      	lsls	r0, r2, #27
 80080a4:	d408      	bmi.n	80080b8 <USART3_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 80080a6:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d0f3      	beq.n	8008096 <USART3_IRQHandler+0x42>
 80080ae:	68e1      	ldr	r1, [r4, #12]
}
 80080b0:	b005      	add	sp, #20
 80080b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80080b6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80080b8:	06ca      	lsls	r2, r1, #27
 80080ba:	d5f4      	bpl.n	80080a6 <USART3_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80080c0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80080c2:	6859      	ldr	r1, [r3, #4]
 80080c4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80080c6:	2a02      	cmp	r2, #2
		(void)tmp;
 80080c8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80080ca:	d1ec      	bne.n	80080a6 <USART3_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80080d2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	065b      	lsls	r3, r3, #25
 80080d8:	d40e      	bmi.n	80080f8 <USART3_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80080da:	2004      	movs	r0, #4
 80080dc:	e7e4      	b.n	80080a8 <USART3_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80080e6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 80080ee:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 80080f0:	601a      	str	r2, [r3, #0]
		goto EventCB;
 80080f2:	e7d9      	b.n	80080a8 <USART3_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80080f4:	2003      	movs	r0, #3
 80080f6:	e7d7      	b.n	80080a8 <USART3_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80080f8:	68a0      	ldr	r0, [r4, #8]
 80080fa:	8b25      	ldrh	r5, [r4, #24]
 80080fc:	f7fd fc72 	bl	80059e4 <_ZN3dma11get_counterEv>
 8008100:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008102:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 8008104:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 8008106:	f7fd fc73 	bl	80059f0 <_ZN3dma10get_configEv>
 800810a:	7983      	ldrb	r3, [r0, #6]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d0e4      	beq.n	80080da <USART3_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008110:	a802      	add	r0, sp, #8
 8008112:	68a1      	ldr	r1, [r4, #8]
 8008114:	f7fd fc08 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	6953      	ldr	r3, [r2, #20]
 800811c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008120:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008122:	6153      	str	r3, [r2, #20]
 8008124:	e7c0      	b.n	80080a8 <USART3_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008126:	6961      	ldr	r1, [r4, #20]
 8008128:	7f22      	ldrb	r2, [r4, #28]
 800812a:	5cc9      	ldrb	r1, [r1, r3]
 800812c:	4291      	cmp	r1, r2
 800812e:	d1ad      	bne.n	800808c <USART3_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008130:	6822      	ldr	r2, [r4, #0]
 8008132:	68d1      	ldr	r1, [r2, #12]
 8008134:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008138:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800813a:	6951      	ldr	r1, [r2, #20]
 800813c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008140:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008142:	6151      	str	r1, [r2, #20]
 8008144:	e7a3      	b.n	800808e <USART3_IRQHandler+0x3a>
 8008146:	bf00      	nop
 8008148:	2000b8c4 	.word	0x2000b8c4

0800814c <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 800814c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800814e:	4c3c      	ldr	r4, [pc, #240]	; (8008240 <UART4_IRQHandler+0xf4>)
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008156:	0690      	lsls	r0, r2, #26
void UART4_IRQHandler(void){
 8008158:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800815a:	d51a      	bpl.n	8008192 <UART4_IRQHandler+0x46>
 800815c:	068d      	lsls	r5, r1, #26
 800815e:	d518      	bpl.n	8008192 <UART4_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008164:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008166:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008168:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800816a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800816c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008170:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008172:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008174:	d93a      	bls.n	80081ec <UART4_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008176:	6962      	ldr	r2, [r4, #20]
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800817c:	7f63      	ldrb	r3, [r4, #29]
 800817e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008180:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008182:	d04c      	beq.n	800821e <UART4_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008184:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008186:	3301      	adds	r3, #1
 8008188:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800818a:	6923      	ldr	r3, [r4, #16]
 800818c:	b95b      	cbnz	r3, 80081a6 <UART4_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_4);
}
 800818e:	b005      	add	sp, #20
 8008190:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008192:	0650      	lsls	r0, r2, #25
 8008194:	d501      	bpl.n	800819a <UART4_IRQHandler+0x4e>
 8008196:	064d      	lsls	r5, r1, #25
 8008198:	d41d      	bmi.n	80081d6 <UART4_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800819a:	06d0      	lsls	r0, r2, #27
 800819c:	d408      	bmi.n	80081b0 <UART4_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800819e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80081a0:	6923      	ldr	r3, [r4, #16]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d0f3      	beq.n	800818e <UART4_IRQHandler+0x42>
 80081a6:	68e1      	ldr	r1, [r4, #12]
}
 80081a8:	b005      	add	sp, #20
 80081aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80081ae:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80081b0:	06ca      	lsls	r2, r1, #27
 80081b2:	d5f4      	bpl.n	800819e <UART4_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80081b8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80081ba:	6859      	ldr	r1, [r3, #4]
 80081bc:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80081be:	2a02      	cmp	r2, #2
		(void)tmp;
 80081c0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80081c2:	d1ec      	bne.n	800819e <UART4_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80081ca:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	065b      	lsls	r3, r3, #25
 80081d0:	d40e      	bmi.n	80081f0 <UART4_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80081d2:	2004      	movs	r0, #4
 80081d4:	e7e4      	b.n	80081a0 <UART4_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80081de:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 80081e6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 80081e8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 80081ea:	e7d9      	b.n	80081a0 <UART4_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80081ec:	2003      	movs	r0, #3
 80081ee:	e7d7      	b.n	80081a0 <UART4_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80081f0:	68a0      	ldr	r0, [r4, #8]
 80081f2:	8b25      	ldrh	r5, [r4, #24]
 80081f4:	f7fd fbf6 	bl	80059e4 <_ZN3dma11get_counterEv>
 80081f8:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80081fa:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80081fc:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80081fe:	f7fd fbf7 	bl	80059f0 <_ZN3dma10get_configEv>
 8008202:	7983      	ldrb	r3, [r0, #6]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d0e4      	beq.n	80081d2 <UART4_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008208:	a802      	add	r0, sp, #8
 800820a:	68a1      	ldr	r1, [r4, #8]
 800820c:	f7fd fb8c 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	6953      	ldr	r3, [r2, #20]
 8008214:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008218:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800821a:	6153      	str	r3, [r2, #20]
 800821c:	e7c0      	b.n	80081a0 <UART4_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800821e:	6961      	ldr	r1, [r4, #20]
 8008220:	7f22      	ldrb	r2, [r4, #28]
 8008222:	5cc9      	ldrb	r1, [r1, r3]
 8008224:	4291      	cmp	r1, r2
 8008226:	d1ad      	bne.n	8008184 <UART4_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008228:	6822      	ldr	r2, [r4, #0]
 800822a:	68d1      	ldr	r1, [r2, #12]
 800822c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008230:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008232:	6951      	ldr	r1, [r2, #20]
 8008234:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008238:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800823a:	6151      	str	r1, [r2, #20]
 800823c:	e7a3      	b.n	8008186 <UART4_IRQHandler+0x3a>
 800823e:	bf00      	nop
 8008240:	2000b7d4 	.word	0x2000b7d4

08008244 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 8008244:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008246:	4c3c      	ldr	r4, [pc, #240]	; (8008338 <UART5_IRQHandler+0xf4>)
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800824e:	0690      	lsls	r0, r2, #26
void UART5_IRQHandler(void){
 8008250:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008252:	d51a      	bpl.n	800828a <UART5_IRQHandler+0x46>
 8008254:	068d      	lsls	r5, r1, #26
 8008256:	d518      	bpl.n	800828a <UART5_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800825c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800825e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008260:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008262:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008264:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008268:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800826a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800826c:	d93a      	bls.n	80082e4 <UART5_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800826e:	6962      	ldr	r2, [r4, #20]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008274:	7f63      	ldrb	r3, [r4, #29]
 8008276:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008278:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800827a:	d04c      	beq.n	8008316 <UART5_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800827c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800827e:	3301      	adds	r3, #1
 8008280:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	b95b      	cbnz	r3, 800829e <UART5_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_5);
}
 8008286:	b005      	add	sp, #20
 8008288:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800828a:	0650      	lsls	r0, r2, #25
 800828c:	d501      	bpl.n	8008292 <UART5_IRQHandler+0x4e>
 800828e:	064d      	lsls	r5, r1, #25
 8008290:	d41d      	bmi.n	80082ce <UART5_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008292:	06d0      	lsls	r0, r2, #27
 8008294:	d408      	bmi.n	80082a8 <UART5_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008296:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0f3      	beq.n	8008286 <UART5_IRQHandler+0x42>
 800829e:	68e1      	ldr	r1, [r4, #12]
}
 80082a0:	b005      	add	sp, #20
 80082a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 80082a6:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80082a8:	06ca      	lsls	r2, r1, #27
 80082aa:	d5f4      	bpl.n	8008296 <UART5_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80082b0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80082b6:	2a02      	cmp	r2, #2
		(void)tmp;
 80082b8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80082ba:	d1ec      	bne.n	8008296 <UART5_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80082c2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	065b      	lsls	r3, r3, #25
 80082c8:	d40e      	bmi.n	80082e8 <UART5_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80082ca:	2004      	movs	r0, #4
 80082cc:	e7e4      	b.n	8008298 <UART5_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80082d6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 80082de:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 80082e0:	601a      	str	r2, [r3, #0]
		goto EventCB;
 80082e2:	e7d9      	b.n	8008298 <UART5_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80082e4:	2003      	movs	r0, #3
 80082e6:	e7d7      	b.n	8008298 <UART5_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80082e8:	68a0      	ldr	r0, [r4, #8]
 80082ea:	8b25      	ldrh	r5, [r4, #24]
 80082ec:	f7fd fb7a 	bl	80059e4 <_ZN3dma11get_counterEv>
 80082f0:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80082f2:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80082f4:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80082f6:	f7fd fb7b 	bl	80059f0 <_ZN3dma10get_configEv>
 80082fa:	7983      	ldrb	r3, [r0, #6]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d0e4      	beq.n	80082ca <UART5_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 8008300:	a802      	add	r0, sp, #8
 8008302:	68a1      	ldr	r1, [r4, #8]
 8008304:	f7fd fb10 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008308:	6822      	ldr	r2, [r4, #0]
 800830a:	6953      	ldr	r3, [r2, #20]
 800830c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008310:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008312:	6153      	str	r3, [r2, #20]
 8008314:	e7c0      	b.n	8008298 <UART5_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008316:	6961      	ldr	r1, [r4, #20]
 8008318:	7f22      	ldrb	r2, [r4, #28]
 800831a:	5cc9      	ldrb	r1, [r1, r3]
 800831c:	4291      	cmp	r1, r2
 800831e:	d1ad      	bne.n	800827c <UART5_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008320:	6822      	ldr	r2, [r4, #0]
 8008322:	68d1      	ldr	r1, [r2, #12]
 8008324:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008328:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800832a:	6951      	ldr	r1, [r2, #20]
 800832c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008330:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008332:	6151      	str	r1, [r2, #20]
 8008334:	e7a3      	b.n	800827e <UART5_IRQHandler+0x3a>
 8008336:	bf00      	nop
 8008338:	2000b7fc 	.word	0x2000b7fc

0800833c <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 800833c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800833e:	4c3c      	ldr	r4, [pc, #240]	; (8008430 <USART6_IRQHandler+0xf4>)
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008346:	0690      	lsls	r0, r2, #26
void USART6_IRQHandler(void){
 8008348:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800834a:	d51a      	bpl.n	8008382 <USART6_IRQHandler+0x46>
 800834c:	068d      	lsls	r5, r1, #26
 800834e:	d518      	bpl.n	8008382 <USART6_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008354:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008356:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008358:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800835a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800835c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008360:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008362:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008364:	d93a      	bls.n	80083dc <USART6_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008366:	6962      	ldr	r2, [r4, #20]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800836c:	7f63      	ldrb	r3, [r4, #29]
 800836e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008370:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008372:	d04c      	beq.n	800840e <USART6_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008374:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008376:	3301      	adds	r3, #1
 8008378:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	b95b      	cbnz	r3, 8008396 <USART6_IRQHandler+0x5a>
	USART_IRQ_Handler(&usart_6);
}
 800837e:	b005      	add	sp, #20
 8008380:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008382:	0650      	lsls	r0, r2, #25
 8008384:	d501      	bpl.n	800838a <USART6_IRQHandler+0x4e>
 8008386:	064d      	lsls	r5, r1, #25
 8008388:	d41d      	bmi.n	80083c6 <USART6_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800838a:	06d0      	lsls	r0, r2, #27
 800838c:	d408      	bmi.n	80083a0 <USART6_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800838e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d0f3      	beq.n	800837e <USART6_IRQHandler+0x42>
 8008396:	68e1      	ldr	r1, [r4, #12]
}
 8008398:	b005      	add	sp, #20
 800839a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800839e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 80083a0:	06ca      	lsls	r2, r1, #27
 80083a2:	d5f4      	bpl.n	800838e <USART6_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80083a8:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80083aa:	6859      	ldr	r1, [r3, #4]
 80083ac:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80083ae:	2a02      	cmp	r2, #2
		(void)tmp;
 80083b0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80083b2:	d1ec      	bne.n	800838e <USART6_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80083ba:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	065b      	lsls	r3, r3, #25
 80083c0:	d40e      	bmi.n	80083e0 <USART6_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80083c2:	2004      	movs	r0, #4
 80083c4:	e7e4      	b.n	8008390 <USART6_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80083ce:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 80083d6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 80083d8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 80083da:	e7d9      	b.n	8008390 <USART6_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80083dc:	2003      	movs	r0, #3
 80083de:	e7d7      	b.n	8008390 <USART6_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80083e0:	68a0      	ldr	r0, [r4, #8]
 80083e2:	8b25      	ldrh	r5, [r4, #24]
 80083e4:	f7fd fafe 	bl	80059e4 <_ZN3dma11get_counterEv>
 80083e8:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80083ea:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80083ec:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80083ee:	f7fd faff 	bl	80059f0 <_ZN3dma10get_configEv>
 80083f2:	7983      	ldrb	r3, [r0, #6]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d0e4      	beq.n	80083c2 <USART6_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 80083f8:	a802      	add	r0, sp, #8
 80083fa:	68a1      	ldr	r1, [r4, #8]
 80083fc:	f7fd fa94 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008400:	6822      	ldr	r2, [r4, #0]
 8008402:	6953      	ldr	r3, [r2, #20]
 8008404:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008408:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 800840a:	6153      	str	r3, [r2, #20]
 800840c:	e7c0      	b.n	8008390 <USART6_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 800840e:	6961      	ldr	r1, [r4, #20]
 8008410:	7f22      	ldrb	r2, [r4, #28]
 8008412:	5cc9      	ldrb	r1, [r1, r3]
 8008414:	4291      	cmp	r1, r2
 8008416:	d1ad      	bne.n	8008374 <USART6_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	68d1      	ldr	r1, [r2, #12]
 800841c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008420:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008422:	6951      	ldr	r1, [r2, #20]
 8008424:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008428:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800842a:	6151      	str	r1, [r2, #20]
 800842c:	e7a3      	b.n	8008376 <USART6_IRQHandler+0x3a>
 800842e:	bf00      	nop
 8008430:	2000b8ec 	.word	0x2000b8ec

08008434 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 8008434:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008436:	4c3c      	ldr	r4, [pc, #240]	; (8008528 <UART7_IRQHandler+0xf4>)
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800843e:	0690      	lsls	r0, r2, #26
void UART7_IRQHandler(void){
 8008440:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008442:	d51a      	bpl.n	800847a <UART7_IRQHandler+0x46>
 8008444:	068d      	lsls	r5, r1, #26
 8008446:	d518      	bpl.n	800847a <UART7_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	9200      	str	r2, [sp, #0]
		(void)tmp;
 800844c:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 800844e:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008450:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008452:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008454:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008458:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800845a:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800845c:	d93a      	bls.n	80084d4 <UART7_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 800845e:	6962      	ldr	r2, [r4, #20]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008464:	7f63      	ldrb	r3, [r4, #29]
 8008466:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008468:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800846a:	d04c      	beq.n	8008506 <UART7_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 800846c:	2002      	movs	r0, #2
		usart -> rxcount++;
 800846e:	3301      	adds	r3, #1
 8008470:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008472:	6923      	ldr	r3, [r4, #16]
 8008474:	b95b      	cbnz	r3, 800848e <UART7_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_7);
}
 8008476:	b005      	add	sp, #20
 8008478:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800847a:	0650      	lsls	r0, r2, #25
 800847c:	d501      	bpl.n	8008482 <UART7_IRQHandler+0x4e>
 800847e:	064d      	lsls	r5, r1, #25
 8008480:	d41d      	bmi.n	80084be <UART7_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008482:	06d0      	lsls	r0, r2, #27
 8008484:	d408      	bmi.n	8008498 <UART7_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 8008486:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008488:	6923      	ldr	r3, [r4, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0f3      	beq.n	8008476 <UART7_IRQHandler+0x42>
 800848e:	68e1      	ldr	r1, [r4, #12]
}
 8008490:	b005      	add	sp, #20
 8008492:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008496:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008498:	06ca      	lsls	r2, r1, #27
 800849a:	d5f4      	bpl.n	8008486 <UART7_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80084a0:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 80084a2:	6859      	ldr	r1, [r3, #4]
 80084a4:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80084a6:	2a02      	cmp	r2, #2
		(void)tmp;
 80084a8:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80084aa:	d1ec      	bne.n	8008486 <UART7_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80084b2:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	065b      	lsls	r3, r3, #25
 80084b8:	d40e      	bmi.n	80084d8 <UART7_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80084ba:	2004      	movs	r0, #4
 80084bc:	e7e4      	b.n	8008488 <UART7_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80084c6:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 80084ce:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 80084d0:	601a      	str	r2, [r3, #0]
		goto EventCB;
 80084d2:	e7d9      	b.n	8008488 <UART7_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80084d4:	2003      	movs	r0, #3
 80084d6:	e7d7      	b.n	8008488 <UART7_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80084d8:	68a0      	ldr	r0, [r4, #8]
 80084da:	8b25      	ldrh	r5, [r4, #24]
 80084dc:	f7fd fa82 	bl	80059e4 <_ZN3dma11get_counterEv>
 80084e0:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80084e2:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80084e4:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80084e6:	f7fd fa83 	bl	80059f0 <_ZN3dma10get_configEv>
 80084ea:	7983      	ldrb	r3, [r0, #6]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d0e4      	beq.n	80084ba <UART7_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 80084f0:	a802      	add	r0, sp, #8
 80084f2:	68a1      	ldr	r1, [r4, #8]
 80084f4:	f7fd fa18 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	6953      	ldr	r3, [r2, #20]
 80084fc:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 8008500:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008502:	6153      	str	r3, [r2, #20]
 8008504:	e7c0      	b.n	8008488 <UART7_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008506:	6961      	ldr	r1, [r4, #20]
 8008508:	7f22      	ldrb	r2, [r4, #28]
 800850a:	5cc9      	ldrb	r1, [r1, r3]
 800850c:	4291      	cmp	r1, r2
 800850e:	d1ad      	bne.n	800846c <UART7_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008510:	6822      	ldr	r2, [r4, #0]
 8008512:	68d1      	ldr	r1, [r2, #12]
 8008514:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008518:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800851a:	6951      	ldr	r1, [r2, #20]
 800851c:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008520:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008522:	6151      	str	r1, [r2, #20]
 8008524:	e7a3      	b.n	800846e <UART7_IRQHandler+0x3a>
 8008526:	bf00      	nop
 8008528:	2000b824 	.word	0x2000b824

0800852c <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 800852c:	b530      	push	{r4, r5, lr}
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 800852e:	4c3c      	ldr	r4, [pc, #240]	; (8008620 <UART8_IRQHandler+0xf4>)
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68d9      	ldr	r1, [r3, #12]
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 8008536:	0690      	lsls	r0, r2, #26
void UART8_IRQHandler(void){
 8008538:	b085      	sub	sp, #20
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800853a:	d51a      	bpl.n	8008572 <UART8_IRQHandler+0x46>
 800853c:	068d      	lsls	r5, r1, #26
 800853e:	d518      	bpl.n	8008572 <UART8_IRQHandler+0x46>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	9200      	str	r2, [sp, #0]
		(void)tmp;
 8008544:	9a00      	ldr	r2, [sp, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008546:	8b61      	ldrh	r1, [r4, #26]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008548:	681a      	ldr	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 800854a:	8b20      	ldrh	r0, [r4, #24]
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 800854c:	f022 0220 	bic.w	r2, r2, #32
		if(usart -> rxcount < usart -> rxlen)
 8008550:	4288      	cmp	r0, r1
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 8008552:	601a      	str	r2, [r3, #0]
		if(usart -> rxcount < usart -> rxlen)
 8008554:	d93a      	bls.n	80085cc <UART8_IRQHandler+0xa0>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 8008556:	6962      	ldr	r2, [r4, #20]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	5453      	strb	r3, [r2, r1]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 800855c:	7f63      	ldrb	r3, [r4, #29]
 800855e:	2b01      	cmp	r3, #1
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008560:	8b63      	ldrh	r3, [r4, #26]
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 8008562:	d04c      	beq.n	80085fe <UART8_IRQHandler+0xd2>
		event = USART_EVENT_RECEIVE_COMPLETE;
 8008564:	2002      	movs	r0, #2
		usart -> rxcount++;
 8008566:	3301      	adds	r3, #1
 8008568:	8363      	strh	r3, [r4, #26]
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800856a:	6923      	ldr	r3, [r4, #16]
 800856c:	b95b      	cbnz	r3, 8008586 <UART8_IRQHandler+0x5a>
	USART_IRQ_Handler(&uart_8);
}
 800856e:	b005      	add	sp, #20
 8008570:	bd30      	pop	{r4, r5, pc}
	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 8008572:	0650      	lsls	r0, r2, #25
 8008574:	d501      	bpl.n	800857a <UART8_IRQHandler+0x4e>
 8008576:	064d      	lsls	r5, r1, #25
 8008578:	d41d      	bmi.n	80085b6 <UART8_IRQHandler+0x8a>
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800857a:	06d0      	lsls	r0, r2, #27
 800857c:	d408      	bmi.n	8008590 <UART8_IRQHandler+0x64>
	usart_event_t event = USART_EVENT_NOEVENT;
 800857e:	2000      	movs	r0, #0
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008580:	6923      	ldr	r3, [r4, #16]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0f3      	beq.n	800856e <UART8_IRQHandler+0x42>
 8008586:	68e1      	ldr	r1, [r4, #12]
}
 8008588:	b005      	add	sp, #20
 800858a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 800858e:	4718      	bx	r3
	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 8008590:	06ca      	lsls	r2, r1, #27
 8008592:	d5f4      	bpl.n	800857e <UART8_IRQHandler+0x52>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	9201      	str	r2, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 8008598:	7f62      	ldrb	r2, [r4, #29]
		tmp = usart -> _usart -> DR;
 800859a:	6859      	ldr	r1, [r3, #4]
 800859c:	9101      	str	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 800859e:	2a02      	cmp	r2, #2
		(void)tmp;
 80085a0:	9901      	ldr	r1, [sp, #4]
		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80085a2:	d1ec      	bne.n	800857e <UART8_IRQHandler+0x52>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80085aa:	601a      	str	r2, [r3, #0]
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	065b      	lsls	r3, r3, #25
 80085b0:	d40e      	bmi.n	80085d0 <UART8_IRQHandler+0xa4>
				event = USART_EVENT_IDLE_STATE;
 80085b2:	2004      	movs	r0, #4
 80085b4:	e7e4      	b.n	8008580 <UART8_IRQHandler+0x54>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	9202      	str	r2, [sp, #8]
		tmp = usart -> _usart -> DR;
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	9202      	str	r2, [sp, #8]
		(void)tmp;
 80085be:	9a02      	ldr	r2, [sp, #8]
		usart -> _usart -> SR &=~ USART_SR_TC;
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		event = USART_EVENT_TRANSMIT_COMPLETE;
 80085c6:	2001      	movs	r0, #1
		usart -> _usart -> SR &=~ USART_SR_TC;
 80085c8:	601a      	str	r2, [r3, #0]
		goto EventCB;
 80085ca:	e7d9      	b.n	8008580 <UART8_IRQHandler+0x54>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80085cc:	2003      	movs	r0, #3
 80085ce:	e7d7      	b.n	8008580 <UART8_IRQHandler+0x54>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80085d0:	68a0      	ldr	r0, [r4, #8]
 80085d2:	8b25      	ldrh	r5, [r4, #24]
 80085d4:	f7fd fa06 	bl	80059e4 <_ZN3dma11get_counterEv>
 80085d8:	1a2d      	subs	r5, r5, r0
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80085da:	68a0      	ldr	r0, [r4, #8]
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80085dc:	8365      	strh	r5, [r4, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_MODE_CIRCULAR){
 80085de:	f7fd fa07 	bl	80059f0 <_ZN3dma10get_configEv>
 80085e2:	7983      	ldrb	r3, [r0, #6]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d0e4      	beq.n	80085b2 <UART8_IRQHandler+0x86>
					usart -> _rxdma -> stop();
 80085e8:	a802      	add	r0, sp, #8
 80085ea:	68a1      	ldr	r1, [r4, #8]
 80085ec:	f7fd f99c 	bl	8005928 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	6953      	ldr	r3, [r2, #20]
 80085f4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
				event = USART_EVENT_IDLE_STATE;
 80085f8:	2004      	movs	r0, #4
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 80085fa:	6153      	str	r3, [r2, #20]
 80085fc:	e7c0      	b.n	8008580 <UART8_IRQHandler+0x54>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 80085fe:	6961      	ldr	r1, [r4, #20]
 8008600:	7f22      	ldrb	r2, [r4, #28]
 8008602:	5cc9      	ldrb	r1, [r1, r3]
 8008604:	4291      	cmp	r1, r2
 8008606:	d1ad      	bne.n	8008564 <UART8_IRQHandler+0x38>
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 8008608:	6822      	ldr	r2, [r4, #0]
 800860a:	68d1      	ldr	r1, [r2, #12]
 800860c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008610:	60d1      	str	r1, [r2, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 8008612:	6951      	ldr	r1, [r2, #20]
 8008614:	f021 0101 	bic.w	r1, r1, #1
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008618:	2005      	movs	r0, #5
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800861a:	6151      	str	r1, [r2, #20]
 800861c:	e7a3      	b.n	8008566 <UART8_IRQHandler+0x3a>
 800861e:	bf00      	nop
 8008620:	2000b84c 	.word	0x2000b84c

08008624 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
usart::usart(USART_TypeDef *usart){
 8008624:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800870c <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe8>
 8008628:	482d      	ldr	r0, [pc, #180]	; (80086e0 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xbc>)
 800862a:	492e      	ldr	r1, [pc, #184]	; (80086e4 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc0>)
 800862c:	4a2e      	ldr	r2, [pc, #184]	; (80086e8 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc4>)
 800862e:	2300      	movs	r3, #0
}
 8008630:	b5f0      	push	{r4, r5, r6, r7, lr}
usart::usart(USART_TypeDef *usart){
 8008632:	4f2e      	ldr	r7, [pc, #184]	; (80086ec <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xc8>)
	_usart = usart;
 8008634:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 8008710 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xec>
usart::usart(USART_TypeDef *usart){
 8008638:	4e2d      	ldr	r6, [pc, #180]	; (80086f0 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xcc>)
 800863a:	f8cc 3014 	str.w	r3, [ip, #20]
 800863e:	e9cc 3301 	strd	r3, r3, [ip, #4]
 8008642:	e9cc 3303 	strd	r3, r3, [ip, #12]
 8008646:	f8ac 301c 	strh.w	r3, [ip, #28]
 800864a:	f8cc 3020 	str.w	r3, [ip, #32]
	_usart = usart;
 800864e:	f8cc e000 	str.w	lr, [ip]
 8008652:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8008714 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xf0>
usart::usart(USART_TypeDef *usart){
 8008656:	4c27      	ldr	r4, [pc, #156]	; (80086f4 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd0>)
 8008658:	4d27      	ldr	r5, [pc, #156]	; (80086f8 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd4>)
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e9c7 3301 	strd	r3, r3, [r7, #4]
 8008660:	e9c7 3303 	strd	r3, r3, [r7, #12]
 8008664:	83bb      	strh	r3, [r7, #28]
 8008666:	623b      	str	r3, [r7, #32]
	_usart = usart;
 8008668:	f8c7 c000 	str.w	ip, [r7]
 800866c:	4f23      	ldr	r7, [pc, #140]	; (80086fc <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xd8>)
usart::usart(USART_TypeDef *usart){
 800866e:	6173      	str	r3, [r6, #20]
 8008670:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8008674:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8008678:	83b3      	strh	r3, [r6, #28]
 800867a:	6233      	str	r3, [r6, #32]
	_usart = usart;
 800867c:	6037      	str	r7, [r6, #0]
 800867e:	4e20      	ldr	r6, [pc, #128]	; (8008700 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xdc>)
usart::usart(USART_TypeDef *usart){
 8008680:	616b      	str	r3, [r5, #20]
 8008682:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8008686:	e9c5 3303 	strd	r3, r3, [r5, #12]
 800868a:	83ab      	strh	r3, [r5, #28]
 800868c:	622b      	str	r3, [r5, #32]
	_usart = usart;
 800868e:	602e      	str	r6, [r5, #0]
usart::usart(USART_TypeDef *usart){
 8008690:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8008694:	e9c4 3303 	strd	r3, r3, [r4, #12]
 8008698:	6163      	str	r3, [r4, #20]
 800869a:	83a3      	strh	r3, [r4, #28]
 800869c:	6223      	str	r3, [r4, #32]
 800869e:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80086a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086a6:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80086aa:	e9c1 3303 	strd	r3, r3, [r1, #12]
 80086ae:	e9c2 3301 	strd	r3, r3, [r2, #4]
 80086b2:	e9c2 3303 	strd	r3, r3, [r2, #12]
 80086b6:	6143      	str	r3, [r0, #20]
 80086b8:	8383      	strh	r3, [r0, #28]
 80086ba:	6203      	str	r3, [r0, #32]
 80086bc:	614b      	str	r3, [r1, #20]
 80086be:	838b      	strh	r3, [r1, #28]
 80086c0:	620b      	str	r3, [r1, #32]
 80086c2:	6153      	str	r3, [r2, #20]
 80086c4:	8393      	strh	r3, [r2, #28]
 80086c6:	6213      	str	r3, [r2, #32]
	_usart = usart;
 80086c8:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe0>)
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	f5a3 5330 	sub.w	r3, r3, #11264	; 0x2c00
 80086d0:	4c0d      	ldr	r4, [pc, #52]	; (8008708 <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef+0xe4>)
 80086d2:	6003      	str	r3, [r0, #0]
 80086d4:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80086d8:	600c      	str	r4, [r1, #0]
 80086da:	6013      	str	r3, [r2, #0]
}
 80086dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086de:	bf00      	nop
 80086e0:	2000b7fc 	.word	0x2000b7fc
 80086e4:	2000b8ec 	.word	0x2000b8ec
 80086e8:	2000b824 	.word	0x2000b824
 80086ec:	2000b89c 	.word	0x2000b89c
 80086f0:	2000b8c4 	.word	0x2000b8c4
 80086f4:	2000b84c 	.word	0x2000b84c
 80086f8:	2000b7d4 	.word	0x2000b7d4
 80086fc:	40004800 	.word	0x40004800
 8008700:	40004c00 	.word	0x40004c00
 8008704:	40007c00 	.word	0x40007c00
 8008708:	40011400 	.word	0x40011400
 800870c:	2000b874 	.word	0x2000b874
 8008710:	40011000 	.word	0x40011000
 8008714:	40004400 	.word	0x40004400

08008718 <__NVIC_SystemReset>:
 8008718:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800871c:	4905      	ldr	r1, [pc, #20]	; (8008734 <__NVIC_SystemReset+0x1c>)
 800871e:	4b06      	ldr	r3, [pc, #24]	; (8008738 <__NVIC_SystemReset+0x20>)
 8008720:	68ca      	ldr	r2, [r1, #12]
 8008722:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8008726:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008728:	60cb      	str	r3, [r1, #12]
 800872a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800872e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008730:	e7fd      	b.n	800872e <__NVIC_SystemReset+0x16>
 8008732:	bf00      	nop
 8008734:	e000ed00 	.word	0xe000ed00
 8008738:	05fa0004 	.word	0x05fa0004

0800873c <app_main_task>:

	return (int)app_start_status;
}


void app_main_task(void *param){
 800873c:	b508      	push	{r3, lr}
	LOG_INFO(TAG, "Calling app_main().");
 800873e:	4807      	ldr	r0, [pc, #28]	; (800875c <app_main_task+0x20>)
 8008740:	4907      	ldr	r1, [pc, #28]	; (8008760 <app_main_task+0x24>)
 8008742:	f000 f9af 	bl	8008aa4 <LOG_INFO>
	extern void app_main(void);
	app_main();
 8008746:	f000 fd11 	bl	800916c <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 800874a:	4804      	ldr	r0, [pc, #16]	; (800875c <app_main_task+0x20>)
 800874c:	4905      	ldr	r1, [pc, #20]	; (8008764 <app_main_task+0x28>)
 800874e:	f000 f9a9 	bl	8008aa4 <LOG_INFO>
	vTaskDelete(NULL);
}
 8008752:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	vTaskDelete(NULL);
 8008756:	2000      	movs	r0, #0
 8008758:	f7fa ba3e 	b.w	8002bd8 <vTaskDelete>
 800875c:	0800cea4 	.word	0x0800cea4
 8008760:	0800ce90 	.word	0x0800ce90
 8008764:	0800ceac 	.word	0x0800ceac

08008768 <uart_log>:
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);

	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
}

static void uart_log(char *log){
 8008768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876a:	b083      	sub	sp, #12
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800876c:	2100      	movs	r1, #0
static void uart_log(char *log){
 800876e:	4606      	mov	r6, r0
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008770:	9101      	str	r1, [sp, #4]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008772:	f3ef 8405 	mrs	r4, IPSR
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 8008776:	4d19      	ldr	r5, [pc, #100]	; (80087dc <uart_log+0x74>)
	if( ulCurrentInterrupt == 0 )
 8008778:	b93c      	cbnz	r4, 800878a <uart_log+0x22>
 800877a:	6828      	ldr	r0, [r5, #0]
 800877c:	210a      	movs	r1, #10
 800877e:	f7f9 fc91 	bl	80020a4 <xQueueSemaphoreTake>

	if(ret == pdTRUE){
 8008782:	2801      	cmp	r0, #1
 8008784:	d01f      	beq.n	80087c6 <uart_log+0x5e>
			while(!(log_uart -> SR & USART_SR_TC));
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
	}
}
 8008786:	b003      	add	sp, #12
 8008788:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 800878a:	af01      	add	r7, sp, #4
 800878c:	6828      	ldr	r0, [r5, #0]
 800878e:	463a      	mov	r2, r7
 8008790:	f7f9 fe12 	bl	80023b8 <xQueueReceiveFromISR>
	if(ret == pdTRUE){
 8008794:	2801      	cmp	r0, #1
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 8008796:	4604      	mov	r4, r0
	if(ret == pdTRUE){
 8008798:	d1f5      	bne.n	8008786 <uart_log+0x1e>
		while(*log) {
 800879a:	7833      	ldrb	r3, [r6, #0]
 800879c:	b1c3      	cbz	r3, 80087d0 <uart_log+0x68>
			log_uart -> DR = *log++;
 800879e:	4a10      	ldr	r2, [pc, #64]	; (80087e0 <uart_log+0x78>)
 80087a0:	4631      	mov	r1, r6
 80087a2:	6053      	str	r3, [r2, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 80087a4:	6813      	ldr	r3, [r2, #0]
 80087a6:	065b      	lsls	r3, r3, #25
 80087a8:	d5fc      	bpl.n	80087a4 <uart_log+0x3c>
		while(*log) {
 80087aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1f7      	bne.n	80087a2 <uart_log+0x3a>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 80087b2:	2c01      	cmp	r4, #1
 80087b4:	d00b      	beq.n	80087ce <uart_log+0x66>
 80087b6:	2300      	movs	r3, #0
 80087b8:	6828      	ldr	r0, [r5, #0]
 80087ba:	461a      	mov	r2, r3
 80087bc:	4619      	mov	r1, r3
 80087be:	f7f9 f87b 	bl	80018b8 <xQueueGenericSend>
}
 80087c2:	b003      	add	sp, #12
 80087c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while(*log) {
 80087c6:	7833      	ldrb	r3, [r6, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1e8      	bne.n	800879e <uart_log+0x36>
 80087cc:	e7f3      	b.n	80087b6 <uart_log+0x4e>
 80087ce:	af01      	add	r7, sp, #4
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 80087d0:	6828      	ldr	r0, [r5, #0]
 80087d2:	4639      	mov	r1, r7
 80087d4:	f7f9 fa8c 	bl	8001cf0 <xQueueGiveFromISR>
}
 80087d8:	b003      	add	sp, #12
 80087da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087dc:	2000b914 	.word	0x2000b914
 80087e0:	40011400 	.word	0x40011400
 80087e4:	00000000 	.word	0x00000000

080087e8 <main_application>:
int main_application(void){
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	b085      	sub	sp, #20
	system_init();
 80087ec:	f000 fab8 	bl	8008d60 <system_init>
	rcc_init(&rcc);
 80087f0:	4979      	ldr	r1, [pc, #484]	; (80089d8 <main_application+0x1f0>)
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80087f2:	4e7a      	ldr	r6, [pc, #488]	; (80089dc <main_application+0x1f4>)
	rcc_init(&rcc);
 80087f4:	a802      	add	r0, sp, #8
 80087f6:	f7fe f84f 	bl	8006898 <rcc_init>
	gpio_port_clock_enable(GPIOH);
 80087fa:	4879      	ldr	r0, [pc, #484]	; (80089e0 <main_application+0x1f8>)
 80087fc:	f7fd fe90 	bl	8006520 <gpio_port_clock_enable>
	fmc_sdram_init(&sdram_conf);
 8008800:	4878      	ldr	r0, [pc, #480]	; (80089e4 <main_application+0x1fc>)
 8008802:	f7fd fdc5 	bl	8006390 <fmc_sdram_init>
	sdram_init();
 8008806:	f7fd fba3 	bl	8005f50 <sdram_init>
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 800880a:	2104      	movs	r1, #4
 800880c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008810:	a802      	add	r0, sp, #8
 8008812:	f7fe f813 	bl	800683c <iwdg_init>
	iwdg_disable_in_debugmode();
 8008816:	f7fe f82f 	bl	8006878 <iwdg_disable_in_debugmode>
	rng_init();
 800881a:	f7fe fa3b 	bl	8006c94 <rng_init>
	log_semaph = xSemaphoreCreateMutex();
 800881e:	2001      	movs	r0, #1
 8008820:	f7f9 f9c8 	bl	8001bb4 <xQueueCreateMutex>
 8008824:	4b70      	ldr	r3, [pc, #448]	; (80089e8 <main_application+0x200>)
 8008826:	4602      	mov	r2, r0
	__IO uint32_t USART_BusFreq = 0UL;
 8008828:	2500      	movs	r5, #0
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 800882a:	4870      	ldr	r0, [pc, #448]	; (80089ec <main_application+0x204>)
	log_semaph = xSemaphoreCreateMutex();
 800882c:	601a      	str	r2, [r3, #0]
	__IO uint32_t USART_BusFreq = 0UL;
 800882e:	9502      	str	r5, [sp, #8]
	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 8008830:	f7fd fe76 	bl	8006520 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 8008834:	486d      	ldr	r0, [pc, #436]	; (80089ec <main_application+0x204>)
 8008836:	f7fd fe73 	bl	8006520 <gpio_port_clock_enable>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 800883a:	486c      	ldr	r0, [pc, #432]	; (80089ec <main_application+0x204>)
 800883c:	2208      	movs	r2, #8
 800883e:	210e      	movs	r1, #14
 8008840:	f7fd ff56 	bl	80066f0 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 8008844:	2109      	movs	r1, #9
 8008846:	4869      	ldr	r0, [pc, #420]	; (80089ec <main_application+0x204>)
 8008848:	2208      	movs	r2, #8
 800884a:	f7fd ff51 	bl	80066f0 <gpio_set_alternatefunction>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 800884e:	4a68      	ldr	r2, [pc, #416]	; (80089f0 <main_application+0x208>)
 8008850:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8008852:	f043 0320 	orr.w	r3, r3, #32
 8008856:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 8008858:	2003      	movs	r0, #3
 800885a:	f7fe f9b3 	bl	8006bc4 <rcc_get_bus_frequency>
 800885e:	9002      	str	r0, [sp, #8]
	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008860:	68f3      	ldr	r3, [r6, #12]
 8008862:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008866:	f043 030c 	orr.w	r3, r3, #12
 800886a:	60f3      	str	r3, [r6, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 800886c:	9802      	ldr	r0, [sp, #8]
 800886e:	f7f7 fe69 	bl	8000544 <__aeabi_ui2d>
 8008872:	a355      	add	r3, pc, #340	; (adr r3, 80089c8 <main_application+0x1e0>)
 8008874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008878:	f7f7 fede 	bl	8000638 <__aeabi_dmul>
 800887c:	f7f8 f9d4 	bl	8000c28 <__aeabi_d2f>
 8008880:	ee07 0a90 	vmov	s15, r0
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 8008884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 8008888:	ee17 3a90 	vmov	r3, s15
 800888c:	b29c      	uxth	r4, r3
 800888e:	f7f7 fe7b 	bl	8000588 <__aeabi_f2d>
 8008892:	4b58      	ldr	r3, [pc, #352]	; (80089f4 <main_application+0x20c>)
 8008894:	2200      	movs	r2, #0
 8008896:	f7f7 fecf 	bl	8000638 <__aeabi_dmul>
 800889a:	f7f8 f9a5 	bl	8000be8 <__aeabi_d2uiz>
 800889e:	4607      	mov	r7, r0
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7f7 fe5f 	bl	8000564 <__aeabi_i2d>
 80088a6:	4b53      	ldr	r3, [pc, #332]	; (80089f4 <main_application+0x20c>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	f7f7 fec5 	bl	8000638 <__aeabi_dmul>
 80088ae:	f7f8 f99b 	bl	8000be8 <__aeabi_d2uiz>
 80088b2:	b2bf      	uxth	r7, r7
 80088b4:	b280      	uxth	r0, r0
 80088b6:	1a38      	subs	r0, r7, r0
 80088b8:	f7f7 fe54 	bl	8000564 <__aeabi_i2d>
 80088bc:	a344      	add	r3, pc, #272	; (adr r3, 80089d0 <main_application+0x1e8>)
 80088be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c2:	f7f7 feb9 	bl	8000638 <__aeabi_dmul>
 80088c6:	f7f8 f9af 	bl	8000c28 <__aeabi_d2f>
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 80088ca:	ee07 0a90 	vmov	s15, r0
 80088ce:	eeb3 0a00 	vmov.f32	s0, #48	; 0x41800000  16.0
 80088d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80088d6:	f000 fcc1 	bl	800925c <ceilf>
	DIV_Fraction = ceil(Fraction);
 80088da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 80088de:	4846      	ldr	r0, [pc, #280]	; (80089f8 <main_application+0x210>)
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 80088e0:	ee10 3a10 	vmov	r3, s0
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80088ea:	60b3      	str	r3, [r6, #8]
	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 80088ec:	f7ff ff3c 	bl	8008768 <uart_log>
	log_init(uart_log);
 80088f0:	4842      	ldr	r0, [pc, #264]	; (80089fc <main_application+0x214>)
 80088f2:	f000 f8d1 	bl	8008a98 <log_init>
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 80088f6:	4942      	ldr	r1, [pc, #264]	; (8008a00 <main_application+0x218>)
 80088f8:	4a42      	ldr	r2, [pc, #264]	; (8008a04 <main_application+0x21c>)
 80088fa:	4843      	ldr	r0, [pc, #268]	; (8008a08 <main_application+0x220>)
 80088fc:	f000 f8d2 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 8008900:	f000 fa1a 	bl	8008d38 <get_revid>
 8008904:	4941      	ldr	r1, [pc, #260]	; (8008a0c <main_application+0x224>)
 8008906:	4602      	mov	r2, r0
 8008908:	483f      	ldr	r0, [pc, #252]	; (8008a08 <main_application+0x220>)
 800890a:	f000 f8cb 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 800890e:	f000 fa19 	bl	8008d44 <get_devid>
 8008912:	493f      	ldr	r1, [pc, #252]	; (8008a10 <main_application+0x228>)
 8008914:	4602      	mov	r2, r0
 8008916:	483c      	ldr	r0, [pc, #240]	; (8008a08 <main_application+0x220>)
 8008918:	f000 f8c4 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 800891c:	f000 fa1a 	bl	8008d54 <get_flashsize>
 8008920:	493c      	ldr	r1, [pc, #240]	; (8008a14 <main_application+0x22c>)
 8008922:	4602      	mov	r2, r0
 8008924:	4838      	ldr	r0, [pc, #224]	; (8008a08 <main_application+0x220>)
 8008926:	f000 f8bd 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 800892a:	493b      	ldr	r1, [pc, #236]	; (8008a18 <main_application+0x230>)
 800892c:	4836      	ldr	r0, [pc, #216]	; (8008a08 <main_application+0x220>)
 800892e:	2280      	movs	r2, #128	; 0x80
 8008930:	f000 f8b8 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 8008934:	4939      	ldr	r1, [pc, #228]	; (8008a1c <main_application+0x234>)
 8008936:	4a3a      	ldr	r2, [pc, #232]	; (8008a20 <main_application+0x238>)
 8008938:	4833      	ldr	r0, [pc, #204]	; (8008a08 <main_application+0x220>)
 800893a:	f000 f8b3 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 800893e:	4628      	mov	r0, r5
 8008940:	f7fe f940 	bl	8006bc4 <rcc_get_bus_frequency>
 8008944:	4937      	ldr	r1, [pc, #220]	; (8008a24 <main_application+0x23c>)
 8008946:	4602      	mov	r2, r0
 8008948:	482f      	ldr	r0, [pc, #188]	; (8008a08 <main_application+0x220>)
 800894a:	f000 f8ab 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 800894e:	2001      	movs	r0, #1
 8008950:	f7fe f938 	bl	8006bc4 <rcc_get_bus_frequency>
 8008954:	4934      	ldr	r1, [pc, #208]	; (8008a28 <main_application+0x240>)
 8008956:	4602      	mov	r2, r0
 8008958:	482b      	ldr	r0, [pc, #172]	; (8008a08 <main_application+0x220>)
 800895a:	f000 f8a3 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 800895e:	2002      	movs	r0, #2
 8008960:	f7fe f930 	bl	8006bc4 <rcc_get_bus_frequency>
 8008964:	4931      	ldr	r1, [pc, #196]	; (8008a2c <main_application+0x244>)
 8008966:	4602      	mov	r2, r0
 8008968:	4827      	ldr	r0, [pc, #156]	; (8008a08 <main_application+0x220>)
 800896a:	f000 f89b 	bl	8008aa4 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 800896e:	2003      	movs	r0, #3
 8008970:	f7fe f928 	bl	8006bc4 <rcc_get_bus_frequency>
 8008974:	492e      	ldr	r1, [pc, #184]	; (8008a30 <main_application+0x248>)
 8008976:	4602      	mov	r2, r0
 8008978:	4823      	ldr	r0, [pc, #140]	; (8008a08 <main_application+0x220>)
 800897a:	f000 f893 	bl	8008aa4 <LOG_INFO>
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 800897e:	2301      	movs	r3, #1
 8008980:	e9cd 3500 	strd	r3, r5, [sp]
 8008984:	492b      	ldr	r1, [pc, #172]	; (8008a34 <main_application+0x24c>)
 8008986:	482c      	ldr	r0, [pc, #176]	; (8008a38 <main_application+0x250>)
 8008988:	462b      	mov	r3, r5
 800898a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800898e:	f7fa f8f1 	bl	8002b74 <xTaskCreate>
	if(app_start_status != pdTRUE) {
 8008992:	2801      	cmp	r0, #1
 8008994:	d00b      	beq.n	80089ae <main_application+0x1c6>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 8008996:	206a      	movs	r0, #106	; 0x6a
 8008998:	9000      	str	r0, [sp, #0]
 800899a:	4b28      	ldr	r3, [pc, #160]	; (8008a3c <main_application+0x254>)
 800899c:	4a28      	ldr	r2, [pc, #160]	; (8008a40 <main_application+0x258>)
 800899e:	4929      	ldr	r1, [pc, #164]	; (8008a44 <main_application+0x25c>)
 80089a0:	4819      	ldr	r0, [pc, #100]	; (8008a08 <main_application+0x220>)
 80089a2:	f000 f8fb 	bl	8008b9c <LOG_ERROR>
		return 0;
 80089a6:	462c      	mov	r4, r5
}
 80089a8:	4620      	mov	r0, r4
 80089aa:	b005      	add	sp, #20
 80089ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 80089ae:	4926      	ldr	r1, [pc, #152]	; (8008a48 <main_application+0x260>)
 80089b0:	4604      	mov	r4, r0
 80089b2:	4815      	ldr	r0, [pc, #84]	; (8008a08 <main_application+0x220>)
 80089b4:	f000 f876 	bl	8008aa4 <LOG_INFO>
	vTaskStartScheduler();
 80089b8:	f7fa f9ea 	bl	8002d90 <vTaskStartScheduler>
}
 80089bc:	4620      	mov	r0, r4
 80089be:	b005      	add	sp, #20
 80089c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c2:	bf00      	nop
 80089c4:	f3af 8000 	nop.w
 80089c8:	789abcdf 	.word	0x789abcdf
 80089cc:	3ea23456 	.word	0x3ea23456
 80089d0:	47ae147b 	.word	0x47ae147b
 80089d4:	3f847ae1 	.word	0x3f847ae1
 80089d8:	20000040 	.word	0x20000040
 80089dc:	40011400 	.word	0x40011400
 80089e0:	40021c00 	.word	0x40021c00
 80089e4:	20000068 	.word	0x20000068
 80089e8:	2000b914 	.word	0x2000b914
 80089ec:	40021800 	.word	0x40021800
 80089f0:	40023800 	.word	0x40023800
 80089f4:	40590000 	.word	0x40590000
 80089f8:	0800cec8 	.word	0x0800cec8
 80089fc:	08008769 	.word	0x08008769
 8008a00:	0800cf34 	.word	0x0800cf34
 8008a04:	0800cf28 	.word	0x0800cf28
 8008a08:	0800cea4 	.word	0x0800cea4
 8008a0c:	0800cf48 	.word	0x0800cf48
 8008a10:	0800cf60 	.word	0x0800cf60
 8008a14:	0800cf78 	.word	0x0800cf78
 8008a18:	0800cf90 	.word	0x0800cf90
 8008a1c:	0800cfb0 	.word	0x0800cfb0
 8008a20:	0800cfa8 	.word	0x0800cfa8
 8008a24:	0800cfc4 	.word	0x0800cfc4
 8008a28:	0800cfdc 	.word	0x0800cfdc
 8008a2c:	0800cff4 	.word	0x0800cff4
 8008a30:	0800d00c 	.word	0x0800d00c
 8008a34:	0800d024 	.word	0x0800d024
 8008a38:	0800873d 	.word	0x0800873d
 8008a3c:	0800d034 	.word	0x0800d034
 8008a40:	0800d048 	.word	0x0800d048
 8008a44:	0800d068 	.word	0x0800d068
 8008a48:	0800d0a0 	.word	0x0800d0a0

08008a4c <vApplicationIdleHook>:
	void vApplicationIdleHook(void){
 8008a4c:	b508      	push	{r3, lr}
		iwdg_refresh();
 8008a4e:	f7fd ff1b 	bl	8006888 <iwdg_refresh>
	}
 8008a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		sys_calculate_cpu_load_percent();
 8008a56:	f000 ba53 	b.w	8008f00 <sys_calculate_cpu_load_percent>
 8008a5a:	bf00      	nop

08008a5c <vApplicationStackOverflowHook>:
	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 8008a5c:	b508      	push	{r3, lr}
 8008a5e:	460a      	mov	r2, r1
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 8008a60:	4804      	ldr	r0, [pc, #16]	; (8008a74 <vApplicationStackOverflowHook+0x18>)
 8008a62:	4905      	ldr	r1, [pc, #20]	; (8008a78 <vApplicationStackOverflowHook+0x1c>)
 8008a64:	f000 f89a 	bl	8008b9c <LOG_ERROR>
 8008a68:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <vApplicationStackOverflowHook+0x20>)
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 8008a6a:	bf00      	nop
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	d1fc      	bne.n	8008a6a <vApplicationStackOverflowHook+0xe>
		__NVIC_SystemReset();
 8008a70:	f7ff fe52 	bl	8008718 <__NVIC_SystemReset>
 8008a74:	0800cea4 	.word	0x0800cea4
 8008a78:	0800d0bc 	.word	0x0800d0bc
 8008a7c:	003d0900 	.word	0x003d0900

08008a80 <vApplicationMallocFailedHook>:
	void vApplicationMallocFailedHook(void){
 8008a80:	b508      	push	{r3, lr}
		LOG_ERROR(TAG, "Memory allocation fail.");
 8008a82:	4903      	ldr	r1, [pc, #12]	; (8008a90 <vApplicationMallocFailedHook+0x10>)
 8008a84:	4803      	ldr	r0, [pc, #12]	; (8008a94 <vApplicationMallocFailedHook+0x14>)
 8008a86:	f000 f889 	bl	8008b9c <LOG_ERROR>
		__NVIC_SystemReset();
 8008a8a:	f7ff fe45 	bl	8008718 <__NVIC_SystemReset>
 8008a8e:	bf00      	nop
 8008a90:	0800d0d4 	.word	0x0800d0d4
 8008a94:	0800cea4 	.word	0x0800cea4

08008a98 <log_init>:
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
	plog = PrintString_Function;
 8008a98:	4b01      	ldr	r3, [pc, #4]	; (8008aa0 <log_init+0x8>)
 8008a9a:	6018      	str	r0, [r3, #0]
}
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	2000b918 	.word	0x2000b918

08008aa4 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8008aa4:	b40e      	push	{r1, r2, r3}
 8008aa6:	b570      	push	{r4, r5, r6, lr}
 8008aa8:	b08b      	sub	sp, #44	; 0x2c
 8008aaa:	ac0f      	add	r4, sp, #60	; 0x3c
 8008aac:	4606      	mov	r6, r0
 8008aae:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ab2:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008ab4:	f7fe ff5c 	bl	8007970 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008ab8:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008aba:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008abc:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008abe:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008ac4:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008ac6:	f001 fcab 	bl	800a420 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8008aca:	4b0f      	ldr	r3, [pc, #60]	; (8008b08 <LOG_INFO+0x64>)
 8008acc:	4a0f      	ldr	r2, [pc, #60]	; (8008b0c <LOG_INFO+0x68>)
 8008ace:	7819      	ldrb	r1, [r3, #0]
 8008ad0:	4b0f      	ldr	r3, [pc, #60]	; (8008b10 <LOG_INFO+0x6c>)
 8008ad2:	9303      	str	r3, [sp, #12]
 8008ad4:	9b07      	ldr	r3, [sp, #28]
 8008ad6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	490d      	ldr	r1, [pc, #52]	; (8008b14 <LOG_INFO+0x70>)
 8008ade:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <LOG_INFO+0x74>)
 8008ae0:	e9cd 5600 	strd	r5, r6, [sp]
 8008ae4:	a809      	add	r0, sp, #36	; 0x24
 8008ae6:	f000 fc03 	bl	80092f0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008aea:	4b0c      	ldr	r3, [pc, #48]	; (8008b1c <LOG_INFO+0x78>)
 8008aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4798      	blx	r3
	free(Temp_buffer);
 8008af2:	9807      	ldr	r0, [sp, #28]
 8008af4:	f000 fc4c 	bl	8009390 <free>
	free(Output_buffer);
 8008af8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008afa:	f000 fc49 	bl	8009390 <free>
}
 8008afe:	b00b      	add	sp, #44	; 0x2c
 8008b00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b04:	b003      	add	sp, #12
 8008b06:	4770      	bx	lr
 8008b08:	2000009e 	.word	0x2000009e
 8008b0c:	0800d274 	.word	0x0800d274
 8008b10:	0800d104 	.word	0x0800d104
 8008b14:	0800d110 	.word	0x0800d110
 8008b18:	0800d10c 	.word	0x0800d10c
 8008b1c:	2000b918 	.word	0x2000b918

08008b20 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8008b20:	b40e      	push	{r1, r2, r3}
 8008b22:	b570      	push	{r4, r5, r6, lr}
 8008b24:	b08b      	sub	sp, #44	; 0x2c
 8008b26:	ac0f      	add	r4, sp, #60	; 0x3c
 8008b28:	4606      	mov	r6, r0
 8008b2a:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b2e:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008b30:	f7fe ff1e 	bl	8007970 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008b34:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008b36:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008b38:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008b3a:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008b3c:	4622      	mov	r2, r4
 8008b3e:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008b40:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008b42:	f001 fc6d 	bl	800a420 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <LOG_WARN+0x64>)
 8008b48:	4a0f      	ldr	r2, [pc, #60]	; (8008b88 <LOG_WARN+0x68>)
 8008b4a:	7819      	ldrb	r1, [r3, #0]
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <LOG_WARN+0x6c>)
 8008b4e:	9303      	str	r3, [sp, #12]
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008b56:	9302      	str	r3, [sp, #8]
 8008b58:	490d      	ldr	r1, [pc, #52]	; (8008b90 <LOG_WARN+0x70>)
 8008b5a:	4b0e      	ldr	r3, [pc, #56]	; (8008b94 <LOG_WARN+0x74>)
 8008b5c:	e9cd 5600 	strd	r5, r6, [sp]
 8008b60:	a809      	add	r0, sp, #36	; 0x24
 8008b62:	f000 fbc5 	bl	80092f0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008b66:	4b0c      	ldr	r3, [pc, #48]	; (8008b98 <LOG_WARN+0x78>)
 8008b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4798      	blx	r3
	free(Temp_buffer);
 8008b6e:	9807      	ldr	r0, [sp, #28]
 8008b70:	f000 fc0e 	bl	8009390 <free>
	free(Output_buffer);
 8008b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b76:	f000 fc0b 	bl	8009390 <free>
}
 8008b7a:	b00b      	add	sp, #44	; 0x2c
 8008b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b80:	b003      	add	sp, #12
 8008b82:	4770      	bx	lr
 8008b84:	2000009f 	.word	0x2000009f
 8008b88:	0800d274 	.word	0x0800d274
 8008b8c:	0800d104 	.word	0x0800d104
 8008b90:	0800d110 	.word	0x0800d110
 8008b94:	0800d128 	.word	0x0800d128
 8008b98:	2000b918 	.word	0x2000b918

08008b9c <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8008b9c:	b40e      	push	{r1, r2, r3}
 8008b9e:	b570      	push	{r4, r5, r6, lr}
 8008ba0:	b08b      	sub	sp, #44	; 0x2c
 8008ba2:	ac0f      	add	r4, sp, #60	; 0x3c
 8008ba4:	4606      	mov	r6, r0
 8008ba6:	f854 1b04 	ldr.w	r1, [r4], #4
 8008baa:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008bac:	f7fe fee0 	bl	8007970 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008bb0:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008bb2:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008bb4:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008bb6:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008bb8:	4622      	mov	r2, r4
 8008bba:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008bbc:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008bbe:	f001 fc2f 	bl	800a420 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	; (8008c00 <LOG_ERROR+0x64>)
 8008bc4:	4a0f      	ldr	r2, [pc, #60]	; (8008c04 <LOG_ERROR+0x68>)
 8008bc6:	7819      	ldrb	r1, [r3, #0]
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <LOG_ERROR+0x6c>)
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	9b07      	ldr	r3, [sp, #28]
 8008bce:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	490d      	ldr	r1, [pc, #52]	; (8008c0c <LOG_ERROR+0x70>)
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	; (8008c10 <LOG_ERROR+0x74>)
 8008bd8:	e9cd 5600 	strd	r5, r6, [sp]
 8008bdc:	a809      	add	r0, sp, #36	; 0x24
 8008bde:	f000 fb87 	bl	80092f0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008be2:	4b0c      	ldr	r3, [pc, #48]	; (8008c14 <LOG_ERROR+0x78>)
 8008be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4798      	blx	r3
	free(Temp_buffer);
 8008bea:	9807      	ldr	r0, [sp, #28]
 8008bec:	f000 fbd0 	bl	8009390 <free>
	free(Output_buffer);
 8008bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bf2:	f000 fbcd 	bl	8009390 <free>
}
 8008bf6:	b00b      	add	sp, #44	; 0x2c
 8008bf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bfc:	b003      	add	sp, #12
 8008bfe:	4770      	bx	lr
 8008c00:	2000009d 	.word	0x2000009d
 8008c04:	0800d274 	.word	0x0800d274
 8008c08:	0800d104 	.word	0x0800d104
 8008c0c:	0800d110 	.word	0x0800d110
 8008c10:	0800ca80 	.word	0x0800ca80
 8008c14:	2000b918 	.word	0x2000b918

08008c18 <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 8008c18:	b40e      	push	{r1, r2, r3}
 8008c1a:	b570      	push	{r4, r5, r6, lr}
 8008c1c:	b08b      	sub	sp, #44	; 0x2c
 8008c1e:	ac0f      	add	r4, sp, #60	; 0x3c
 8008c20:	4606      	mov	r6, r0
 8008c22:	f854 1b04 	ldr.w	r1, [r4], #4
 8008c26:	9105      	str	r1, [sp, #20]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8008c28:	f7fe fea2 	bl	8007970 <get_tick>
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
	va_list args;
	va_start(args, format);
	vasprintf(&Temp_buffer, format, args);
 8008c2c:	9905      	ldr	r1, [sp, #20]
	va_start(args, format);
 8008c2e:	9408      	str	r4, [sp, #32]
	char *Temp_buffer = NULL;
 8008c30:	2300      	movs	r3, #0
	uint32_t time = get_tick();
 8008c32:	4605      	mov	r5, r0
	vasprintf(&Temp_buffer, format, args);
 8008c34:	4622      	mov	r2, r4
 8008c36:	a807      	add	r0, sp, #28
	char *Temp_buffer = NULL;
 8008c38:	9307      	str	r3, [sp, #28]
	vasprintf(&Temp_buffer, format, args);
 8008c3a:	f001 fbf1 	bl	800a420 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	; (8008c7c <LOG_DEBUG+0x64>)
 8008c40:	4a0f      	ldr	r2, [pc, #60]	; (8008c80 <LOG_DEBUG+0x68>)
 8008c42:	7819      	ldrb	r1, [r3, #0]
 8008c44:	4b0f      	ldr	r3, [pc, #60]	; (8008c84 <LOG_DEBUG+0x6c>)
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	9b07      	ldr	r3, [sp, #28]
 8008c4a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8008c4e:	9302      	str	r3, [sp, #8]
 8008c50:	490d      	ldr	r1, [pc, #52]	; (8008c88 <LOG_DEBUG+0x70>)
 8008c52:	4b0e      	ldr	r3, [pc, #56]	; (8008c8c <LOG_DEBUG+0x74>)
 8008c54:	e9cd 5600 	strd	r5, r6, [sp]
 8008c58:	a809      	add	r0, sp, #36	; 0x24
 8008c5a:	f000 fb49 	bl	80092f0 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8008c5e:	4b0c      	ldr	r3, [pc, #48]	; (8008c90 <LOG_DEBUG+0x78>)
 8008c60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4798      	blx	r3
	free(Temp_buffer);
 8008c66:	9807      	ldr	r0, [sp, #28]
 8008c68:	f000 fb92 	bl	8009390 <free>
	free(Output_buffer);
 8008c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6e:	f000 fb8f 	bl	8009390 <free>
}
 8008c72:	b00b      	add	sp, #44	; 0x2c
 8008c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c78:	b003      	add	sp, #12
 8008c7a:	4770      	bx	lr
 8008c7c:	2000009c 	.word	0x2000009c
 8008c80:	0800d274 	.word	0x0800d274
 8008c84:	0800d104 	.word	0x0800d104
 8008c88:	0800d110 	.word	0x0800d110
 8008c8c:	0800d12c 	.word	0x0800d12c
 8008c90:	2000b918 	.word	0x2000b918

08008c94 <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stm_ret_t res;

	__IO uint32_t time = GetCounterFunction();
 8008c98:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8008d08 <wait_flag_in_register_timeout+0x74>
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	461f      	mov	r7, r3
	stm_ret_t res;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	7003      	strb	r3, [r0, #0]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008ca4:	4614      	mov	r4, r2
	__IO uint32_t time = GetCounterFunction();
 8008ca6:	f8d9 3000 	ldr.w	r3, [r9]
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008caa:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
	stm_ret_t res;
 8008cae:	2200      	movs	r2, #0
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8008cb0:	4606      	mov	r6, r0
 8008cb2:	460d      	mov	r5, r1
	stm_ret_t res;
 8008cb4:	6042      	str	r2, [r0, #4]
	__IO uint32_t time = GetCounterFunction();
 8008cb6:	4798      	blx	r3
 8008cb8:	9001      	str	r0, [sp, #4]
 8008cba:	b14f      	cbz	r7, 8008cd0 <wait_flag_in_register_timeout+0x3c>
 8008cbc:	f1b8 0f00 	cmp.w	r8, #0
 8008cc0:	d110      	bne.n	8008ce4 <wait_flag_in_register_timeout+0x50>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008cc2:	682b      	ldr	r3, [r5, #0]
 8008cc4:	421c      	tst	r4, r3
 8008cc6:	d0fc      	beq.n	8008cc2 <wait_flag_in_register_timeout+0x2e>
				return res;
			}
		}
	}
	return res;
}
 8008cc8:	4630      	mov	r0, r6
 8008cca:	b003      	add	sp, #12
 8008ccc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cd0:	f1b8 0f00 	cmp.w	r8, #0
 8008cd4:	d113      	bne.n	8008cfe <wait_flag_in_register_timeout+0x6a>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008cd6:	682b      	ldr	r3, [r5, #0]
 8008cd8:	421c      	tst	r4, r3
 8008cda:	d1fc      	bne.n	8008cd6 <wait_flag_in_register_timeout+0x42>
}
 8008cdc:	4630      	mov	r0, r6
 8008cde:	b003      	add	sp, #12
 8008ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008ce4:	682b      	ldr	r3, [r5, #0]
 8008ce6:	4223      	tst	r3, r4
 8008ce8:	d1ee      	bne.n	8008cc8 <wait_flag_in_register_timeout+0x34>
			if(GetCounterFunction() - time >= TimeOut) {
 8008cea:	f8d9 3000 	ldr.w	r3, [r9]
 8008cee:	4798      	blx	r3
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	1ac0      	subs	r0, r0, r3
 8008cf4:	4540      	cmp	r0, r8
 8008cf6:	d3e0      	bcc.n	8008cba <wait_flag_in_register_timeout+0x26>
				res.Status  = STM_TIMEOUT;
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	7033      	strb	r3, [r6, #0]
				return res;
 8008cfc:	e7e4      	b.n	8008cc8 <wait_flag_in_register_timeout+0x34>
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8008cfe:	682b      	ldr	r3, [r5, #0]
 8008d00:	4223      	tst	r3, r4
 8008d02:	d1f2      	bne.n	8008cea <wait_flag_in_register_timeout+0x56>
 8008d04:	e7e0      	b.n	8008cc8 <wait_flag_in_register_timeout+0x34>
 8008d06:	bf00      	nop
 8008d08:	200000a0 	.word	0x200000a0

08008d0c <set_return>:
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
	res -> Status = Status;
 8008d0c:	7001      	strb	r1, [r0, #0]
	res -> Line = CodeLine;
 8008d0e:	6042      	str	r2, [r0, #4]
}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop

08008d14 <set_return_line>:
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
	res -> Line = line;
 8008d14:	6041      	str	r1, [r0, #4]
}
 8008d16:	4770      	bx	lr

08008d18 <is_oke>:
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
	if(res -> Status == STM_OKE) return true;
 8008d18:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8008d1a:	f1a0 0001 	sub.w	r0, r0, #1
 8008d1e:	fab0 f080 	clz	r0, r0
 8008d22:	0940      	lsrs	r0, r0, #5
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop

08008d28 <is_timeout>:
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
	if(res -> Status == STM_TIMEOUT) return true;
 8008d28:	7800      	ldrb	r0, [r0, #0]
	return false;
}
 8008d2a:	f1a0 0002 	sub.w	r0, r0, #2
 8008d2e:	fab0 f080 	clz	r0, r0
 8008d32:	0940      	lsrs	r0, r0, #5
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop

08008d38 <get_revid>:
static const char *Excep_TAG = "EXCEPTION";
static const char *Inter_TAG = "INTERRUPT";
#endif /* USE_HAL_DRIVER */

uint32_t get_revid(void){
	return((DBGMCU -> IDCODE) >> 16U);
 8008d38:	4b01      	ldr	r3, [pc, #4]	; (8008d40 <get_revid+0x8>)
 8008d3a:	6818      	ldr	r0, [r3, #0]
}
 8008d3c:	0c00      	lsrs	r0, r0, #16
 8008d3e:	4770      	bx	lr
 8008d40:	e0042000 	.word	0xe0042000

08008d44 <get_devid>:

uint32_t get_devid(void){
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 8008d44:	4b02      	ldr	r3, [pc, #8]	; (8008d50 <get_devid+0xc>)
 8008d46:	6818      	ldr	r0, [r3, #0]
}
 8008d48:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	e0042000 	.word	0xe0042000

08008d54 <get_flashsize>:

uint32_t get_flashsize(void){
#if defined(STM32F1)
	return (*(volatile uint16_t*)0x1FFFF7E0);
#elif defined(STM32F4)
	return (*(volatile uint16_t*)0x1FFF7A22);
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <get_flashsize+0x8>)
 8008d56:	8c58      	ldrh	r0, [r3, #34]	; 0x22
#endif /* STM32F4 */
}
 8008d58:	b280      	uxth	r0, r0
 8008d5a:	4770      	bx	lr
 8008d5c:	1fff7a00 	.word	0x1fff7a00

08008d60 <system_init>:
	/* FLASH LATENCY 2WS, PREFETCH BUFER ENABLE, DATA CACHE ENABLE */
	FLASH -> ACR |= FLASH_ACR_LATENCY_1 | FLASH_ACR_PRFTBE;
	while(!(FLASH -> ACR & FLASH_ACR_PRFTBS));
#elif defined(STM32F4)
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8008d60:	4b14      	ldr	r3, [pc, #80]	; (8008db4 <system_init+0x54>)
  reg_value  =  (reg_value                                   |
 8008d62:	4a15      	ldr	r2, [pc, #84]	; (8008db8 <system_init+0x58>)
 8008d64:	6819      	ldr	r1, [r3, #0]
 8008d66:	f441 7100 	orr.w	r1, r1, #512	; 0x200
void system_init(void){
 8008d6a:	b510      	push	{r4, lr}
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8008d6c:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 8008d6e:	6819      	ldr	r1, [r3, #0]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008d70:	4c12      	ldr	r4, [pc, #72]	; (8008dbc <system_init+0x5c>)
 8008d72:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008d76:	6019      	str	r1, [r3, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 8008d78:	6819      	ldr	r1, [r3, #0]
 8008d7a:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008d7e:	6019      	str	r1, [r3, #0]
 8008d80:	68e3      	ldr	r3, [r4, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008d82:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
 8008d86:	ea03 030c 	and.w	r3, r3, ip
  reg_value  =  (reg_value                                   |
 8008d8a:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8008d8c:	60e2      	str	r2, [r4, #12]
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 8008d8e:	200f      	movs	r0, #15
 8008d90:	f7fe fdcc 	bl	800792c <systick_init>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <system_init+0x60>)
	PWR -> CR |= PWR_CR_VOS;
 8008d96:	490b      	ldr	r1, [pc, #44]	; (8008dc4 <system_init+0x64>)
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8008d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d9a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008d9e:	641a      	str	r2, [r3, #64]	; 0x40
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8008da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008da6:	645a      	str	r2, [r3, #68]	; 0x44
	PWR -> CR |= PWR_CR_VOS;
 8008da8:	680b      	ldr	r3, [r1, #0]
 8008daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008dae:	600b      	str	r3, [r1, #0]
}
 8008db0:	bd10      	pop	{r4, pc}
 8008db2:	bf00      	nop
 8008db4:	40023c00 	.word	0x40023c00
 8008db8:	05fa0300 	.word	0x05fa0300
 8008dbc:	e000ed00 	.word	0xe000ed00
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	40007000 	.word	0x40007000

08008dc8 <embedded_flash_set_latency>:
#endif
#endif /* STM32F4 */
}

void embedded_flash_set_latency(uint32_t latency){
	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 8008dc8:	4a03      	ldr	r2, [pc, #12]	; (8008dd8 <embedded_flash_set_latency+0x10>)
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	f023 030f 	bic.w	r3, r3, #15
 8008dd0:	4318      	orrs	r0, r3
 8008dd2:	6010      	str	r0, [r2, #0]
}
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40023c00 	.word	0x40023c00

08008ddc <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8008ddc:	b410      	push	{r4}
#if defined(STM32F1)
	uint32_t latency= (uint32_t)(freq / 24000000U);
	if(freq == 24000000U || freq == 48000000U || freq == 72000000U) latency -= 1;
#elif defined(STM32F4)
	uint32_t latency= (uint32_t)(freq / 30000000U);
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8008dde:	490e      	ldr	r1, [pc, #56]	; (8008e18 <embedded_flash_calculate_latency+0x3c>)
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8008de0:	4c0e      	ldr	r4, [pc, #56]	; (8008e1c <embedded_flash_calculate_latency+0x40>)
uint32_t embedded_flash_calculate_latency(uint32_t freq){
 8008de2:	4602      	mov	r2, r0
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8008de4:	09c3      	lsrs	r3, r0, #7
 8008de6:	fba4 0303 	umull	r0, r3, r4, r3
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8008dea:	428a      	cmp	r2, r1
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8008dec:	ea4f 2093 	mov.w	r0, r3, lsr #10
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 8008df0:	d00e      	beq.n	8008e10 <embedded_flash_calculate_latency+0x34>
 8008df2:	4b0b      	ldr	r3, [pc, #44]	; (8008e20 <embedded_flash_calculate_latency+0x44>)
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d00b      	beq.n	8008e10 <embedded_flash_calculate_latency+0x34>
 8008df8:	4b0a      	ldr	r3, [pc, #40]	; (8008e24 <embedded_flash_calculate_latency+0x48>)
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d008      	beq.n	8008e10 <embedded_flash_calculate_latency+0x34>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 8008dfe:	4b0a      	ldr	r3, [pc, #40]	; (8008e28 <embedded_flash_calculate_latency+0x4c>)
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d005      	beq.n	8008e10 <embedded_flash_calculate_latency+0x34>
 8008e04:	4b09      	ldr	r3, [pc, #36]	; (8008e2c <embedded_flash_calculate_latency+0x50>)
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d002      	beq.n	8008e10 <embedded_flash_calculate_latency+0x34>
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <embedded_flash_calculate_latency+0x54>)
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d100      	bne.n	8008e12 <embedded_flash_calculate_latency+0x36>
 8008e10:	3801      	subs	r0, #1
#endif /* STM32F4 */

	return latency;
}
 8008e12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	01c9c380 	.word	0x01c9c380
 8008e1c:	011e54c7 	.word	0x011e54c7
 8008e20:	03938700 	.word	0x03938700
 8008e24:	055d4a80 	.word	0x055d4a80
 8008e28:	07270e00 	.word	0x07270e00
 8008e2c:	08f0d180 	.word	0x08f0d180
 8008e30:	0aba9500 	.word	0x0aba9500

08008e34 <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 8008e34:	4b02      	ldr	r3, [pc, #8]	; (8008e40 <embedded_flash_get_latency+0xc>)
 8008e36:	6818      	ldr	r0, [r3, #0]
}
 8008e38:	f000 000f 	and.w	r0, r0, #15
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	40023c00 	.word	0x40023c00

08008e44 <NVIC_Set_Priority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e44:	4b1f      	ldr	r3, [pc, #124]	; (8008ec4 <NVIC_Set_Priority+0x80>)
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008e4c:	290f      	cmp	r1, #15


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 8008e4e:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e50:	f1c3 0e07 	rsb	lr, r3, #7
 8008e54:	bf28      	it	cs
 8008e56:	210f      	movcs	r1, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e58:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008e5c:	f1be 0f04 	cmp.w	lr, #4
 8008e60:	bf28      	it	cs
 8008e62:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e66:	f1bc 0f06 	cmp.w	ip, #6
 8008e6a:	d91f      	bls.n	8008eac <NVIC_Set_Priority+0x68>
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e6c:	2a0f      	cmp	r2, #15
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008e6e:	f1a3 0303 	sub.w	r3, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008e72:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008e76:	bf28      	it	cs
 8008e78:	220f      	movcs	r2, #15
 8008e7a:	fa0c fc03 	lsl.w	ip, ip, r3
 8008e7e:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008e82:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008e86:	fa0c fc0e 	lsl.w	ip, ip, lr
 8008e8a:	ea21 010c 	bic.w	r1, r1, ip
 8008e8e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8008e90:	2800      	cmp	r0, #0
         );
 8008e92:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8008e96:	db0c      	blt.n	8008eb2 <NVIC_Set_Priority+0x6e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e98:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8008e9c:	0109      	lsls	r1, r1, #4
 8008e9e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8008ea2:	b2c9      	uxtb	r1, r1
 8008ea4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
	if(SubPriority > 15U) SubPriority = 15U;

	prioritygroup = __NVIC_GetPriorityGrouping();

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008ea8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008eac:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008eae:	4613      	mov	r3, r2
 8008eb0:	e7e7      	b.n	8008e82 <NVIC_Set_Priority+0x3e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eb2:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <NVIC_Set_Priority+0x84>)
 8008eb4:	f000 000f 	and.w	r0, r0, #15
 8008eb8:	0109      	lsls	r1, r1, #4
 8008eba:	4403      	add	r3, r0
 8008ebc:	b2c9      	uxtb	r1, r1
 8008ebe:	7619      	strb	r1, [r3, #24]
 8008ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8008ec4:	e000ed00 	.word	0xe000ed00
 8008ec8:	e000ecfc 	.word	0xe000ecfc

08008ecc <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 8008ecc:	b530      	push	{r4, r5, lr}
	char *heapend = (char*)sbrk(0);
 8008ece:	2000      	movs	r0, #0
uint32_t sys_get_free_heap_size(void){
 8008ed0:	b08b      	sub	sp, #44	; 0x2c
	char *heapend = (char*)sbrk(0);
 8008ed2:	f001 fa85 	bl	800a3e0 <sbrk>
 8008ed6:	4604      	mov	r4, r0
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8008ed8:	f3ef 8508 	mrs	r5, MSP
	char * stack_ptr = (char*)__get_MSP();
	struct mallinfo mi = mallinfo();
 8008edc:	4668      	mov	r0, sp
 8008ede:	f000 fa8f 	bl	8009400 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <sys_get_free_heap_size+0x30>)
 8008ee4:	9808      	ldr	r0, [sp, #32]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	42ab      	cmp	r3, r5
 8008eea:	bf94      	ite	ls
 8008eec:	ebc4 0403 	rsbls	r4, r4, r3
 8008ef0:	ebc4 0405 	rsbhi	r4, r4, r5
}
 8008ef4:	4420      	add	r0, r4
 8008ef6:	b00b      	add	sp, #44	; 0x2c
 8008ef8:	bd30      	pop	{r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	2000b91c 	.word	0x2000b91c

08008f00 <sys_calculate_cpu_load_percent>:

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 8008f00:	4a06      	ldr	r2, [pc, #24]	; (8008f1c <sys_calculate_cpu_load_percent+0x1c>)
 8008f02:	4b07      	ldr	r3, [pc, #28]	; (8008f20 <sys_calculate_cpu_load_percent+0x20>)
 8008f04:	6810      	ldr	r0, [r2, #0]
 8008f06:	6819      	ldr	r1, [r3, #0]
 8008f08:	4288      	cmp	r0, r1
 8008f0a:	d005      	beq.n	8008f18 <sys_calculate_cpu_load_percent+0x18>
    	systick_idle_ticks++;
 8008f0c:	4805      	ldr	r0, [pc, #20]	; (8008f24 <sys_calculate_cpu_load_percent+0x24>)
 8008f0e:	6801      	ldr	r1, [r0, #0]
 8008f10:	3101      	adds	r1, #1
 8008f12:	6001      	str	r1, [r0, #0]
    	last_systick_idle_ticks = sdk_tick;
 8008f14:	6812      	ldr	r2, [r2, #0]
 8008f16:	601a      	str	r2, [r3, #0]
    }
}
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	2000b680 	.word	0x2000b680
 8008f20:	2000b924 	.word	0x2000b924
 8008f24:	2000b928 	.word	0x2000b928

08008f28 <exception_interrupt_handler>:
}


void exception_interrupt_handler(const char *tag, char *message){
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 8008f28:	f7ff be38 	b.w	8008b9c <LOG_ERROR>

08008f2c <_GLOBAL__sub_I_systick_total_ticks>:
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 8008f2c:	4b02      	ldr	r3, [pc, #8]	; (8008f38 <_GLOBAL__sub_I_systick_total_ticks+0xc>)
 8008f2e:	4903      	ldr	r1, [pc, #12]	; (8008f3c <_GLOBAL__sub_I_systick_total_ticks+0x10>)
 8008f30:	4a03      	ldr	r2, [pc, #12]	; (8008f40 <_GLOBAL__sub_I_systick_total_ticks+0x14>)
 8008f32:	1a5b      	subs	r3, r3, r1
 8008f34:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_USE_LOG_MONITOR */
}
 8008f36:	4770      	bx	lr
 8008f38:	20030000 	.word	0x20030000
 8008f3c:	00000400 	.word	0x00000400
 8008f40:	2000b91c 	.word	0x2000b91c

08008f44 <_Z11task_loratxPv>:
	}
}



void task_loratx(void *){
 8008f44:	b508      	push	{r3, lr}

	while(1){
		loraif_request_data();
 8008f46:	f7fb fb39 	bl	80045bc <loraif_request_data>
		vTaskDelay(100);
 8008f4a:	2064      	movs	r0, #100	; 0x64
 8008f4c:	f7f9 fec6 	bl	8002cdc <vTaskDelay>
	while(1){
 8008f50:	e7f9      	b.n	8008f46 <_Z11task_loratxPv+0x2>
 8008f52:	bf00      	nop

08008f54 <_Z11task_lorarxPv>:
	}
}

void task_lorarx(void *){
 8008f54:	b500      	push	{lr}
	spi5->init(&spi5_conf);
 8008f56:	4c23      	ldr	r4, [pc, #140]	; (8008fe4 <_Z11task_lorarxPv+0x90>)
 8008f58:	4a23      	ldr	r2, [pc, #140]	; (8008fe8 <_Z11task_lorarxPv+0x94>)
 8008f5a:	6821      	ldr	r1, [r4, #0]
void task_lorarx(void *){
 8008f5c:	b085      	sub	sp, #20
	spi5->init(&spi5_conf);
 8008f5e:	a802      	add	r0, sp, #8
 8008f60:	f7fd fef0 	bl	8006d44 <_ZN3spi4initEP12spi_config_t>
	exti_register_event_handler(0, gpioA0_event_handler, NULL);
 8008f64:	2200      	movs	r2, #0
 8008f66:	4610      	mov	r0, r2
 8008f68:	4920      	ldr	r1, [pc, #128]	; (8008fec <_Z11task_lorarxPv+0x98>)
 8008f6a:	f7fc fedf 	bl	8005d2c <exti_register_event_handler>

	if(lora.init(spi5, 433E6, 20, 7)) LOG_INFO(TAG, "Lora Initialize OKE.");
 8008f6e:	2307      	movs	r3, #7
 8008f70:	6821      	ldr	r1, [r4, #0]
 8008f72:	4a1f      	ldr	r2, [pc, #124]	; (8008ff0 <_Z11task_lorarxPv+0x9c>)
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	481f      	ldr	r0, [pc, #124]	; (8008ff4 <_Z11task_lorarxPv+0xa0>)
 8008f78:	2314      	movs	r3, #20
 8008f7a:	f7fb fd09 	bl	8004990 <_ZN6sx127x4initEP3spilhm>
 8008f7e:	b358      	cbz	r0, 8008fd8 <_Z11task_lorarxPv+0x84>
 8008f80:	491d      	ldr	r1, [pc, #116]	; (8008ff8 <_Z11task_lorarxPv+0xa4>)
 8008f82:	481e      	ldr	r0, [pc, #120]	; (8008ffc <_Z11task_lorarxPv+0xa8>)
 8008f84:	f7ff fd8e 	bl	8008aa4 <LOG_INFO>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");

	lora_queue = xQueueCreate(10, sizeof(uint32_t));
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2104      	movs	r1, #4
 8008f8c:	200a      	movs	r0, #10
 8008f8e:	f7f8 fc51 	bl	8001834 <xQueueGenericCreate>
 8008f92:	4c1b      	ldr	r4, [pc, #108]	; (8009000 <_Z11task_lorarxPv+0xac>)
	loraif_init(&lora, tim2, 25000, 3);
 8008f94:	491b      	ldr	r1, [pc, #108]	; (8009004 <_Z11task_lorarxPv+0xb0>)
	lora_queue = xQueueCreate(10, sizeof(uint32_t));
 8008f96:	6020      	str	r0, [r4, #0]
	loraif_init(&lora, tim2, 25000, 3);
 8008f98:	2303      	movs	r3, #3
 8008f9a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8008f9e:	6809      	ldr	r1, [r1, #0]
 8008fa0:	4814      	ldr	r0, [pc, #80]	; (8008ff4 <_Z11task_lorarxPv+0xa0>)
 8008fa2:	f7fa ff49 	bl	8003e38 <loraif_init>
	loraif_register_event_handler(loraif_event_handler);
 8008fa6:	4818      	ldr	r0, [pc, #96]	; (8009008 <_Z11task_lorarxPv+0xb4>)
 8008fa8:	f7fa ff8a 	bl	8003ec0 <loraif_register_event_handler>

	lora.setSyncWord(0x3F);
 8008fac:	4811      	ldr	r0, [pc, #68]	; (8008ff4 <_Z11task_lorarxPv+0xa0>)
 8008fae:	213f      	movs	r1, #63	; 0x3f
 8008fb0:	f7fc fb9e 	bl	80056f0 <_ZN6sx127x11setSyncWordEh>
	lora.register_event_handler(NULL, lora_event_handler);
 8008fb4:	480f      	ldr	r0, [pc, #60]	; (8008ff4 <_Z11task_lorarxPv+0xa0>)
 8008fb6:	4a15      	ldr	r2, [pc, #84]	; (800900c <_Z11task_lorarxPv+0xb8>)
 8008fb8:	2100      	movs	r1, #0
 8008fba:	f7fb ff7b 	bl	8004eb4 <_ZN6sx127x22register_event_handlerEPFvPvEPFvS0_hE>
	lora.Receive(0);
 8008fbe:	480d      	ldr	r0, [pc, #52]	; (8008ff4 <_Z11task_lorarxPv+0xa0>)
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	f7fc fab1 	bl	8005528 <_ZN6sx127x7ReceiveEh>

	while(1){
		loraif_process(&lora_queue);
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f7fb f966 	bl	8004298 <loraif_process>
		loraif_response();
 8008fcc:	f7fa ffba 	bl	8003f44 <loraif_response>
		vTaskDelay(20);
 8008fd0:	2014      	movs	r0, #20
 8008fd2:	f7f9 fe83 	bl	8002cdc <vTaskDelay>
	while(1){
 8008fd6:	e7f6      	b.n	8008fc6 <_Z11task_lorarxPv+0x72>
	else LOG_ERROR(TAG, "Lora Initialize Failed.");
 8008fd8:	490d      	ldr	r1, [pc, #52]	; (8009010 <_Z11task_lorarxPv+0xbc>)
 8008fda:	4808      	ldr	r0, [pc, #32]	; (8008ffc <_Z11task_lorarxPv+0xa8>)
 8008fdc:	f7ff fdde 	bl	8008b9c <LOG_ERROR>
 8008fe0:	e7d2      	b.n	8008f88 <_Z11task_lorarxPv+0x34>
 8008fe2:	bf00      	nop
 8008fe4:	20000030 	.word	0x20000030
 8008fe8:	200000a4 	.word	0x200000a4
 8008fec:	08009015 	.word	0x08009015
 8008ff0:	19cf0e40 	.word	0x19cf0e40
 8008ff4:	2000b930 	.word	0x2000b930
 8008ff8:	0800d2f4 	.word	0x0800d2f4
 8008ffc:	0800d30c 	.word	0x0800d30c
 8009000:	2000b95c 	.word	0x2000b95c
 8009004:	2000003c 	.word	0x2000003c
 8009008:	08009021 	.word	0x08009021
 800900c:	080090c9 	.word	0x080090c9
 8009010:	0800d314 	.word	0x0800d314

08009014 <_Z20gpioA0_event_handlerPv>:
	}
}

void gpioA0_event_handler(void *){
	lora.IRQHandler();
 8009014:	4801      	ldr	r0, [pc, #4]	; (800901c <_Z20gpioA0_event_handlerPv+0x8>)
 8009016:	f7fc bb8f 	b.w	8005738 <_ZN6sx127x10IRQHandlerEv>
 800901a:	bf00      	nop
 800901c:	2000b930 	.word	0x2000b930

08009020 <_Z20loraif_event_handler12lora_event_tPc>:
	}
}

void loraif_event_handler(lora_event_t event, char *data){
//	if(data != NULL) LOG_WARN(TAG, "LoRa data: %s", data);
	switch(event){
 8009020:	3801      	subs	r0, #1
void loraif_event_handler(lora_event_t event, char *data){
 8009022:	b510      	push	{r4, lr}
 8009024:	460c      	mov	r4, r1
	switch(event){
 8009026:	2806      	cmp	r0, #6
 8009028:	d836      	bhi.n	8009098 <_Z20loraif_event_handler12lora_event_tPc+0x78>
 800902a:	e8df f000 	tbb	[pc, r0]
 800902e:	130d      	.short	0x130d
 8009030:	2f29231d 	.word	0x2f29231d
 8009034:	04          	.byte	0x04
 8009035:	00          	.byte	0x00
		break;
		case LORA_UPDATE_DATA:
			LOG_WARN(TAG, "LORA_UPDATE_DATA");
		break;
		case LORA_DEL_DEVICE:
			LOG_WARN(TAG, "LORA_DEL_DEVICE");
 8009036:	481b      	ldr	r0, [pc, #108]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009038:	491b      	ldr	r1, [pc, #108]	; (80090a8 <_Z20loraif_event_handler12lora_event_tPc+0x88>)
 800903a:	f7ff fd71 	bl	8008b20 <LOG_WARN>
			loraif_remove_device(data);
 800903e:	4620      	mov	r0, r4
		default:
			LOG_WARN(TAG, "LoRa other event.");
		break;

	}
}
 8009040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			loraif_remove_device(data);
 8009044:	f7fb b888 	b.w	8004158 <loraif_remove_device>
}
 8009048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_REQ_ADDRESS");
 800904c:	4917      	ldr	r1, [pc, #92]	; (80090ac <_Z20loraif_event_handler12lora_event_tPc+0x8c>)
 800904e:	4815      	ldr	r0, [pc, #84]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009050:	f7ff bd66 	b.w	8008b20 <LOG_WARN>
			LOG_WARN(TAG, "LORA_UPDATE_ADDRESS");
 8009054:	4916      	ldr	r1, [pc, #88]	; (80090b0 <_Z20loraif_event_handler12lora_event_tPc+0x90>)
 8009056:	4813      	ldr	r0, [pc, #76]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009058:	f7ff fd62 	bl	8008b20 <LOG_WARN>
			loraif_new_device(data, NULL);
 800905c:	4620      	mov	r0, r4
 800905e:	2100      	movs	r1, #0
}
 8009060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			loraif_new_device(data, NULL);
 8009064:	f7fb b81a 	b.w	800409c <loraif_new_device>
}
 8009068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_UPDATE_STATE");
 800906c:	4911      	ldr	r1, [pc, #68]	; (80090b4 <_Z20loraif_event_handler12lora_event_tPc+0x94>)
 800906e:	480d      	ldr	r0, [pc, #52]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009070:	f7ff bd56 	b.w	8008b20 <LOG_WARN>
}
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_UPDATE_SETTINGS");
 8009078:	490f      	ldr	r1, [pc, #60]	; (80090b8 <_Z20loraif_event_handler12lora_event_tPc+0x98>)
 800907a:	480a      	ldr	r0, [pc, #40]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 800907c:	f7ff bd50 	b.w	8008b20 <LOG_WARN>
}
 8009080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_REQ_DATA");
 8009084:	490d      	ldr	r1, [pc, #52]	; (80090bc <_Z20loraif_event_handler12lora_event_tPc+0x9c>)
 8009086:	4807      	ldr	r0, [pc, #28]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009088:	f7ff bd4a 	b.w	8008b20 <LOG_WARN>
}
 800908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LORA_UPDATE_DATA");
 8009090:	490b      	ldr	r1, [pc, #44]	; (80090c0 <_Z20loraif_event_handler12lora_event_tPc+0xa0>)
 8009092:	4804      	ldr	r0, [pc, #16]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 8009094:	f7ff bd44 	b.w	8008b20 <LOG_WARN>
}
 8009098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_WARN(TAG, "LoRa other event.");
 800909c:	4909      	ldr	r1, [pc, #36]	; (80090c4 <_Z20loraif_event_handler12lora_event_tPc+0xa4>)
 800909e:	4801      	ldr	r0, [pc, #4]	; (80090a4 <_Z20loraif_event_handler12lora_event_tPc+0x84>)
 80090a0:	f7ff bd3e 	b.w	8008b20 <LOG_WARN>
 80090a4:	0800d30c 	.word	0x0800d30c
 80090a8:	0800cac0 	.word	0x0800cac0
 80090ac:	0800ca48 	.word	0x0800ca48
 80090b0:	0800ca5c 	.word	0x0800ca5c
 80090b4:	0800ca70 	.word	0x0800ca70
 80090b8:	0800ca84 	.word	0x0800ca84
 80090bc:	0800ca9c 	.word	0x0800ca9c
 80090c0:	0800caac 	.word	0x0800caac
 80090c4:	0800d32c 	.word	0x0800d32c

080090c8 <_Z18lora_event_handlerPvh>:
	if(packetSize){
 80090c8:	b901      	cbnz	r1, 80090cc <_Z18lora_event_handlerPvh+0x4>
 80090ca:	4770      	bx	lr
void lora_event_handler(void *, uint8_t len){
 80090cc:	b530      	push	{r4, r5, lr}
		lora_RxBuf = (char *)malloc(packetSize+1);
 80090ce:	1c48      	adds	r0, r1, #1
void lora_event_handler(void *, uint8_t len){
 80090d0:	b089      	sub	sp, #36	; 0x24
 80090d2:	460c      	mov	r4, r1
		lora_RxBuf = (char *)malloc(packetSize+1);
 80090d4:	f000 f954 	bl	8009380 <malloc>
 80090d8:	4601      	mov	r1, r0
		lora.receive(lora_RxBuf);
 80090da:	481e      	ldr	r0, [pc, #120]	; (8009154 <_Z18lora_event_handlerPvh+0x8c>)
		lora_RxBuf = (char *)malloc(packetSize+1);
 80090dc:	9106      	str	r1, [sp, #24]
		lora.receive(lora_RxBuf);
 80090de:	f7fc f9cd 	bl	800547c <_ZN6sx127x7receiveEPc>
		lora_RxBuf[packetSize] = '\0';
 80090e2:	9b06      	ldr	r3, [sp, #24]
		LOG_INFO(TAG, "Receive: %s, packet RSSI = %d, SNR = %.02f, RSSI = %d", lora_RxBuf, lora.packetRssi(), lora.packetSnr(), lora.rssi());
 80090e4:	481b      	ldr	r0, [pc, #108]	; (8009154 <_Z18lora_event_handlerPvh+0x8c>)
		lora_RxBuf[packetSize] = '\0';
 80090e6:	2500      	movs	r5, #0
 80090e8:	551d      	strb	r5, [r3, r4]
		LOG_INFO(TAG, "Receive: %s, packet RSSI = %d, SNR = %.02f, RSSI = %d", lora_RxBuf, lora.packetRssi(), lora.packetSnr(), lora.rssi());
 80090ea:	9a06      	ldr	r2, [sp, #24]
 80090ec:	9205      	str	r2, [sp, #20]
 80090ee:	f7fc f8b5 	bl	800525c <_ZN6sx127x10packetRssiEv>
 80090f2:	4603      	mov	r3, r0
 80090f4:	4817      	ldr	r0, [pc, #92]	; (8009154 <_Z18lora_event_handlerPvh+0x8c>)
 80090f6:	9304      	str	r3, [sp, #16]
 80090f8:	f7fc f8e0 	bl	80052bc <_ZN6sx127x9packetSnrEv>
 80090fc:	4815      	ldr	r0, [pc, #84]	; (8009154 <_Z18lora_event_handlerPvh+0x8c>)
 80090fe:	ee10 4a10 	vmov	r4, s0
 8009102:	f7fc f90d 	bl	8005320 <_ZN6sx127x4rssiEv>
 8009106:	4601      	mov	r1, r0
 8009108:	4620      	mov	r0, r4
 800910a:	9102      	str	r1, [sp, #8]
 800910c:	f7f7 fa3c 	bl	8000588 <__aeabi_f2d>
 8009110:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8009114:	e9cd 0100 	strd	r0, r1, [sp]
 8009118:	480f      	ldr	r0, [pc, #60]	; (8009158 <_Z18lora_event_handlerPvh+0x90>)
 800911a:	4910      	ldr	r1, [pc, #64]	; (800915c <_Z18lora_event_handlerPvh+0x94>)
 800911c:	f7ff fcc2 	bl	8008aa4 <LOG_INFO>
		if(loraif_check_crc(lora_RxBuf) == true){
 8009120:	9806      	ldr	r0, [sp, #24]
 8009122:	f7fa fed3 	bl	8003ecc <loraif_check_crc>
 8009126:	b170      	cbz	r0, 8009146 <_Z18lora_event_handlerPvh+0x7e>
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 8009128:	4a0d      	ldr	r2, [pc, #52]	; (8009160 <_Z18lora_event_handlerPvh+0x98>)
			BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800912a:	9507      	str	r5, [sp, #28]
			if(xQueueSendFromISR(lora_queue, &lora_RxBuf, &pxHigherPriorityTaskWoken) != pdPASS){
 800912c:	6810      	ldr	r0, [r2, #0]
 800912e:	462b      	mov	r3, r5
 8009130:	aa07      	add	r2, sp, #28
 8009132:	a906      	add	r1, sp, #24
 8009134:	f7f8 fd76 	bl	8001c24 <xQueueGenericSendFromISR>
 8009138:	2801      	cmp	r0, #1
 800913a:	d008      	beq.n	800914e <_Z18lora_event_handlerPvh+0x86>
				LOG_ERROR(TAG, "LoRa error queue receive.");
 800913c:	4909      	ldr	r1, [pc, #36]	; (8009164 <_Z18lora_event_handlerPvh+0x9c>)
 800913e:	4806      	ldr	r0, [pc, #24]	; (8009158 <_Z18lora_event_handlerPvh+0x90>)
 8009140:	f7ff fd2c 	bl	8008b9c <LOG_ERROR>
 8009144:	e003      	b.n	800914e <_Z18lora_event_handlerPvh+0x86>
			LOG_ERROR(TAG, "LoRa received packet error CRC.");
 8009146:	4908      	ldr	r1, [pc, #32]	; (8009168 <_Z18lora_event_handlerPvh+0xa0>)
 8009148:	4803      	ldr	r0, [pc, #12]	; (8009158 <_Z18lora_event_handlerPvh+0x90>)
 800914a:	f7ff fd27 	bl	8008b9c <LOG_ERROR>
}
 800914e:	b009      	add	sp, #36	; 0x24
 8009150:	bd30      	pop	{r4, r5, pc}
 8009152:	bf00      	nop
 8009154:	2000b930 	.word	0x2000b930
 8009158:	0800d30c 	.word	0x0800d30c
 800915c:	0800d340 	.word	0x0800d340
 8009160:	2000b95c 	.word	0x2000b95c
 8009164:	0800d378 	.word	0x0800d378
 8009168:	0800d394 	.word	0x0800d394

0800916c <_Z8app_mainv>:
void app_main(void){
 800916c:	b500      	push	{lr}
 800916e:	b083      	sub	sp, #12
	HAL_Driver_Init();
 8009170:	f7f7 ff2c 	bl	8000fcc <HAL_Driver_Init>
	gpio_port_clock_enable(GPIOC);
 8009174:	4813      	ldr	r0, [pc, #76]	; (80091c4 <_Z8app_mainv+0x58>)
 8009176:	f7fd f9d3 	bl	8006520 <gpio_port_clock_enable>
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
 800917a:	2400      	movs	r4, #0
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 800917c:	4811      	ldr	r0, [pc, #68]	; (80091c4 <_Z8app_mainv+0x58>)
 800917e:	2207      	movs	r2, #7
 8009180:	210d      	movs	r1, #13
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
 8009182:	2505      	movs	r5, #5
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 8009184:	f7fd fa32 	bl	80065ec <gpio_set_mode>
	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
 8009188:	4623      	mov	r3, r4
 800918a:	e9cd 5400 	strd	r5, r4, [sp]
 800918e:	490e      	ldr	r1, [pc, #56]	; (80091c8 <_Z8app_mainv+0x5c>)
 8009190:	480e      	ldr	r0, [pc, #56]	; (80091cc <_Z8app_mainv+0x60>)
 8009192:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009196:	f7f9 fced 	bl	8002b74 <xTaskCreate>
	xTaskCreate(task_loratx, "task_loratx", byte_to_word(8192), NULL, 5, NULL);
 800919a:	e9cd 5400 	strd	r5, r4, [sp]
 800919e:	4623      	mov	r3, r4
 80091a0:	490b      	ldr	r1, [pc, #44]	; (80091d0 <_Z8app_mainv+0x64>)
 80091a2:	480c      	ldr	r0, [pc, #48]	; (80091d4 <_Z8app_mainv+0x68>)
 80091a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091a8:	f7f9 fce4 	bl	8002b74 <xTaskCreate>
		gpio_toggle(GPIOC, 13);
 80091ac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80091b0:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 80091b4:	4620      	mov	r0, r4
 80091b6:	210d      	movs	r1, #13
 80091b8:	f7fd fb0a 	bl	80067d0 <gpio_toggle>
		vTaskDelay(100);
 80091bc:	2064      	movs	r0, #100	; 0x64
 80091be:	f7f9 fd8d 	bl	8002cdc <vTaskDelay>
	while(1){
 80091c2:	e7f7      	b.n	80091b4 <_Z8app_mainv+0x48>
 80091c4:	40020800 	.word	0x40020800
 80091c8:	0800d3b4 	.word	0x0800d3b4
 80091cc:	08008f55 	.word	0x08008f55
 80091d0:	0800d3c0 	.word	0x0800d3c0
 80091d4:	08008f45 	.word	0x08008f45

080091d8 <_GLOBAL__sub_I_spi5_conf>:

		wifiif_set_response_state(rxdata);

		usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
	}
}
 80091d8:	b500      	push	{lr}
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 80091da:	4908      	ldr	r1, [pc, #32]	; (80091fc <_GLOBAL__sub_I_spi5_conf+0x24>)
 80091dc:	4b08      	ldr	r3, [pc, #32]	; (8009200 <_GLOBAL__sub_I_spi5_conf+0x28>)
}
 80091de:	b085      	sub	sp, #20
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 80091e0:	2000      	movs	r0, #0
 80091e2:	2203      	movs	r2, #3
 80091e4:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80091e8:	9200      	str	r2, [sp, #0]
 80091ea:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 80091ee:	2206      	movs	r2, #6
 80091f0:	4804      	ldr	r0, [pc, #16]	; (8009204 <_GLOBAL__sub_I_spi5_conf+0x2c>)
 80091f2:	f7fb fbbb 	bl	800496c <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 80091f6:	b005      	add	sp, #20
 80091f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80091fc:	40020000 	.word	0x40020000
 8009200:	40021000 	.word	0x40021000
 8009204:	2000b930 	.word	0x2000b930

08009208 <_ZdlPvj>:
 8009208:	f000 b81d 	b.w	8009246 <_ZdlPv>

0800920c <_Znwj>:
 800920c:	2801      	cmp	r0, #1
 800920e:	bf38      	it	cc
 8009210:	2001      	movcc	r0, #1
 8009212:	b510      	push	{r4, lr}
 8009214:	4604      	mov	r4, r0
 8009216:	4620      	mov	r0, r4
 8009218:	f000 f8b2 	bl	8009380 <malloc>
 800921c:	b930      	cbnz	r0, 800922c <_Znwj+0x20>
 800921e:	f000 f815 	bl	800924c <_ZSt15get_new_handlerv>
 8009222:	b908      	cbnz	r0, 8009228 <_Znwj+0x1c>
 8009224:	f000 f85c 	bl	80092e0 <abort>
 8009228:	4780      	blx	r0
 800922a:	e7f4      	b.n	8009216 <_Znwj+0xa>
 800922c:	bd10      	pop	{r4, pc}

0800922e <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 800922e:	684b      	ldr	r3, [r1, #4]
 8009230:	6043      	str	r3, [r0, #4]
 8009232:	684b      	ldr	r3, [r1, #4]
 8009234:	6001      	str	r1, [r0, #0]
 8009236:	6018      	str	r0, [r3, #0]
 8009238:	6048      	str	r0, [r1, #4]
 800923a:	4770      	bx	lr

0800923c <_ZNSt8__detail15_List_node_base9_M_unhookEv>:
 800923c:	e9d0 3200 	ldrd	r3, r2, [r0]
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	605a      	str	r2, [r3, #4]
 8009244:	4770      	bx	lr

08009246 <_ZdlPv>:
 8009246:	f000 b8a3 	b.w	8009390 <free>
	...

0800924c <_ZSt15get_new_handlerv>:
 800924c:	4b02      	ldr	r3, [pc, #8]	; (8009258 <_ZSt15get_new_handlerv+0xc>)
 800924e:	6818      	ldr	r0, [r3, #0]
 8009250:	f3bf 8f5b 	dmb	ish
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	2000b960 	.word	0x2000b960

0800925c <ceilf>:
 800925c:	ee10 3a10 	vmov	r3, s0
 8009260:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009264:	3a7f      	subs	r2, #127	; 0x7f
 8009266:	2a16      	cmp	r2, #22
 8009268:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800926c:	dc2a      	bgt.n	80092c4 <ceilf+0x68>
 800926e:	2a00      	cmp	r2, #0
 8009270:	da11      	bge.n	8009296 <ceilf+0x3a>
 8009272:	eddf 7a19 	vldr	s15, [pc, #100]	; 80092d8 <ceilf+0x7c>
 8009276:	ee30 0a27 	vadd.f32	s0, s0, s15
 800927a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009282:	dd05      	ble.n	8009290 <ceilf+0x34>
 8009284:	2b00      	cmp	r3, #0
 8009286:	db23      	blt.n	80092d0 <ceilf+0x74>
 8009288:	2900      	cmp	r1, #0
 800928a:	bf18      	it	ne
 800928c:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8009290:	ee00 3a10 	vmov	s0, r3
 8009294:	4770      	bx	lr
 8009296:	4911      	ldr	r1, [pc, #68]	; (80092dc <ceilf+0x80>)
 8009298:	4111      	asrs	r1, r2
 800929a:	420b      	tst	r3, r1
 800929c:	d0fa      	beq.n	8009294 <ceilf+0x38>
 800929e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80092d8 <ceilf+0x7c>
 80092a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80092a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80092aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ae:	ddef      	ble.n	8009290 <ceilf+0x34>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	bfc2      	ittt	gt
 80092b4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80092b8:	fa40 f202 	asrgt.w	r2, r0, r2
 80092bc:	189b      	addgt	r3, r3, r2
 80092be:	ea23 0301 	bic.w	r3, r3, r1
 80092c2:	e7e5      	b.n	8009290 <ceilf+0x34>
 80092c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80092c8:	d3e4      	bcc.n	8009294 <ceilf+0x38>
 80092ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80092ce:	4770      	bx	lr
 80092d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80092d4:	e7dc      	b.n	8009290 <ceilf+0x34>
 80092d6:	bf00      	nop
 80092d8:	7149f2ca 	.word	0x7149f2ca
 80092dc:	007fffff 	.word	0x007fffff

080092e0 <abort>:
 80092e0:	b508      	push	{r3, lr}
 80092e2:	2006      	movs	r0, #6
 80092e4:	f000 ffbe 	bl	800a264 <raise>
 80092e8:	2001      	movs	r0, #1
 80092ea:	f7f7 ff0f 	bl	800110c <_exit>
	...

080092f0 <asiprintf>:
 80092f0:	b40e      	push	{r1, r2, r3}
 80092f2:	b530      	push	{r4, r5, lr}
 80092f4:	b09c      	sub	sp, #112	; 0x70
 80092f6:	ab1f      	add	r3, sp, #124	; 0x7c
 80092f8:	4605      	mov	r5, r0
 80092fa:	490d      	ldr	r1, [pc, #52]	; (8009330 <asiprintf+0x40>)
 80092fc:	480d      	ldr	r0, [pc, #52]	; (8009334 <asiprintf+0x44>)
 80092fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009302:	6800      	ldr	r0, [r0, #0]
 8009304:	9301      	str	r3, [sp, #4]
 8009306:	2400      	movs	r4, #0
 8009308:	e9cd 1405 	strd	r1, r4, [sp, #20]
 800930c:	a902      	add	r1, sp, #8
 800930e:	9402      	str	r4, [sp, #8]
 8009310:	9404      	str	r4, [sp, #16]
 8009312:	9407      	str	r4, [sp, #28]
 8009314:	f000 fa04 	bl	8009720 <_svfiprintf_r>
 8009318:	2800      	cmp	r0, #0
 800931a:	bfa1      	itttt	ge
 800931c:	9b02      	ldrge	r3, [sp, #8]
 800931e:	701c      	strbge	r4, [r3, #0]
 8009320:	9b06      	ldrge	r3, [sp, #24]
 8009322:	602b      	strge	r3, [r5, #0]
 8009324:	b01c      	add	sp, #112	; 0x70
 8009326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800932a:	b003      	add	sp, #12
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	ffff0288 	.word	0xffff0288
 8009334:	200000dc 	.word	0x200000dc

08009338 <__libc_init_array>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	4d0d      	ldr	r5, [pc, #52]	; (8009370 <__libc_init_array+0x38>)
 800933c:	4c0d      	ldr	r4, [pc, #52]	; (8009374 <__libc_init_array+0x3c>)
 800933e:	1b64      	subs	r4, r4, r5
 8009340:	10a4      	asrs	r4, r4, #2
 8009342:	2600      	movs	r6, #0
 8009344:	42a6      	cmp	r6, r4
 8009346:	d109      	bne.n	800935c <__libc_init_array+0x24>
 8009348:	4d0b      	ldr	r5, [pc, #44]	; (8009378 <__libc_init_array+0x40>)
 800934a:	4c0c      	ldr	r4, [pc, #48]	; (800937c <__libc_init_array+0x44>)
 800934c:	f002 fff4 	bl	800c338 <_init>
 8009350:	1b64      	subs	r4, r4, r5
 8009352:	10a4      	asrs	r4, r4, #2
 8009354:	2600      	movs	r6, #0
 8009356:	42a6      	cmp	r6, r4
 8009358:	d105      	bne.n	8009366 <__libc_init_array+0x2e>
 800935a:	bd70      	pop	{r4, r5, r6, pc}
 800935c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009360:	4798      	blx	r3
 8009362:	3601      	adds	r6, #1
 8009364:	e7ee      	b.n	8009344 <__libc_init_array+0xc>
 8009366:	f855 3b04 	ldr.w	r3, [r5], #4
 800936a:	4798      	blx	r3
 800936c:	3601      	adds	r6, #1
 800936e:	e7f2      	b.n	8009356 <__libc_init_array+0x1e>
 8009370:	0800d7b8 	.word	0x0800d7b8
 8009374:	0800d7b8 	.word	0x0800d7b8
 8009378:	0800d7b8 	.word	0x0800d7b8
 800937c:	0800d7e0 	.word	0x0800d7e0

08009380 <malloc>:
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <malloc+0xc>)
 8009382:	4601      	mov	r1, r0
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	f000 b8fb 	b.w	8009580 <_malloc_r>
 800938a:	bf00      	nop
 800938c:	200000dc 	.word	0x200000dc

08009390 <free>:
 8009390:	4b02      	ldr	r3, [pc, #8]	; (800939c <free+0xc>)
 8009392:	4601      	mov	r1, r0
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	f000 b853 	b.w	8009440 <_free_r>
 800939a:	bf00      	nop
 800939c:	200000dc 	.word	0x200000dc

080093a0 <memcpy>:
 80093a0:	440a      	add	r2, r1
 80093a2:	4291      	cmp	r1, r2
 80093a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80093a8:	d100      	bne.n	80093ac <memcpy+0xc>
 80093aa:	4770      	bx	lr
 80093ac:	b510      	push	{r4, lr}
 80093ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093b6:	4291      	cmp	r1, r2
 80093b8:	d1f9      	bne.n	80093ae <memcpy+0xe>
 80093ba:	bd10      	pop	{r4, pc}

080093bc <memmove>:
 80093bc:	4288      	cmp	r0, r1
 80093be:	b510      	push	{r4, lr}
 80093c0:	eb01 0402 	add.w	r4, r1, r2
 80093c4:	d902      	bls.n	80093cc <memmove+0x10>
 80093c6:	4284      	cmp	r4, r0
 80093c8:	4623      	mov	r3, r4
 80093ca:	d807      	bhi.n	80093dc <memmove+0x20>
 80093cc:	1e43      	subs	r3, r0, #1
 80093ce:	42a1      	cmp	r1, r4
 80093d0:	d008      	beq.n	80093e4 <memmove+0x28>
 80093d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093da:	e7f8      	b.n	80093ce <memmove+0x12>
 80093dc:	4402      	add	r2, r0
 80093de:	4601      	mov	r1, r0
 80093e0:	428a      	cmp	r2, r1
 80093e2:	d100      	bne.n	80093e6 <memmove+0x2a>
 80093e4:	bd10      	pop	{r4, pc}
 80093e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093ee:	e7f7      	b.n	80093e0 <memmove+0x24>

080093f0 <memset>:
 80093f0:	4402      	add	r2, r0
 80093f2:	4603      	mov	r3, r0
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d100      	bne.n	80093fa <memset+0xa>
 80093f8:	4770      	bx	lr
 80093fa:	f803 1b01 	strb.w	r1, [r3], #1
 80093fe:	e7f9      	b.n	80093f4 <memset+0x4>

08009400 <mallinfo>:
 8009400:	b510      	push	{r4, lr}
 8009402:	4b03      	ldr	r3, [pc, #12]	; (8009410 <mallinfo+0x10>)
 8009404:	4604      	mov	r4, r0
 8009406:	6819      	ldr	r1, [r3, #0]
 8009408:	f000 f866 	bl	80094d8 <_mallinfo_r>
 800940c:	4620      	mov	r0, r4
 800940e:	bd10      	pop	{r4, pc}
 8009410:	200000dc 	.word	0x200000dc

08009414 <_calloc_r>:
 8009414:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009416:	fba1 2402 	umull	r2, r4, r1, r2
 800941a:	b94c      	cbnz	r4, 8009430 <_calloc_r+0x1c>
 800941c:	4611      	mov	r1, r2
 800941e:	9201      	str	r2, [sp, #4]
 8009420:	f000 f8ae 	bl	8009580 <_malloc_r>
 8009424:	9a01      	ldr	r2, [sp, #4]
 8009426:	4605      	mov	r5, r0
 8009428:	b930      	cbnz	r0, 8009438 <_calloc_r+0x24>
 800942a:	4628      	mov	r0, r5
 800942c:	b003      	add	sp, #12
 800942e:	bd30      	pop	{r4, r5, pc}
 8009430:	220c      	movs	r2, #12
 8009432:	6002      	str	r2, [r0, #0]
 8009434:	2500      	movs	r5, #0
 8009436:	e7f8      	b.n	800942a <_calloc_r+0x16>
 8009438:	4621      	mov	r1, r4
 800943a:	f7ff ffd9 	bl	80093f0 <memset>
 800943e:	e7f4      	b.n	800942a <_calloc_r+0x16>

08009440 <_free_r>:
 8009440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009442:	2900      	cmp	r1, #0
 8009444:	d044      	beq.n	80094d0 <_free_r+0x90>
 8009446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800944a:	9001      	str	r0, [sp, #4]
 800944c:	2b00      	cmp	r3, #0
 800944e:	f1a1 0404 	sub.w	r4, r1, #4
 8009452:	bfb8      	it	lt
 8009454:	18e4      	addlt	r4, r4, r3
 8009456:	f001 ff9b 	bl	800b390 <__malloc_lock>
 800945a:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <_free_r+0x94>)
 800945c:	9801      	ldr	r0, [sp, #4]
 800945e:	6813      	ldr	r3, [r2, #0]
 8009460:	b933      	cbnz	r3, 8009470 <_free_r+0x30>
 8009462:	6063      	str	r3, [r4, #4]
 8009464:	6014      	str	r4, [r2, #0]
 8009466:	b003      	add	sp, #12
 8009468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800946c:	f001 bf96 	b.w	800b39c <__malloc_unlock>
 8009470:	42a3      	cmp	r3, r4
 8009472:	d908      	bls.n	8009486 <_free_r+0x46>
 8009474:	6825      	ldr	r5, [r4, #0]
 8009476:	1961      	adds	r1, r4, r5
 8009478:	428b      	cmp	r3, r1
 800947a:	bf01      	itttt	eq
 800947c:	6819      	ldreq	r1, [r3, #0]
 800947e:	685b      	ldreq	r3, [r3, #4]
 8009480:	1949      	addeq	r1, r1, r5
 8009482:	6021      	streq	r1, [r4, #0]
 8009484:	e7ed      	b.n	8009462 <_free_r+0x22>
 8009486:	461a      	mov	r2, r3
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	b10b      	cbz	r3, 8009490 <_free_r+0x50>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d9fa      	bls.n	8009486 <_free_r+0x46>
 8009490:	6811      	ldr	r1, [r2, #0]
 8009492:	1855      	adds	r5, r2, r1
 8009494:	42a5      	cmp	r5, r4
 8009496:	d10b      	bne.n	80094b0 <_free_r+0x70>
 8009498:	6824      	ldr	r4, [r4, #0]
 800949a:	4421      	add	r1, r4
 800949c:	1854      	adds	r4, r2, r1
 800949e:	42a3      	cmp	r3, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	d1e0      	bne.n	8009466 <_free_r+0x26>
 80094a4:	681c      	ldr	r4, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	6053      	str	r3, [r2, #4]
 80094aa:	4421      	add	r1, r4
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	e7da      	b.n	8009466 <_free_r+0x26>
 80094b0:	d902      	bls.n	80094b8 <_free_r+0x78>
 80094b2:	230c      	movs	r3, #12
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	e7d6      	b.n	8009466 <_free_r+0x26>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf04      	itt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	bf04      	itt	eq
 80094c8:	1949      	addeq	r1, r1, r5
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	6054      	str	r4, [r2, #4]
 80094ce:	e7ca      	b.n	8009466 <_free_r+0x26>
 80094d0:	b003      	add	sp, #12
 80094d2:	bd30      	pop	{r4, r5, pc}
 80094d4:	2000b98c 	.word	0x2000b98c

080094d8 <_mallinfo_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	4c16      	ldr	r4, [pc, #88]	; (8009534 <_mallinfo_r+0x5c>)
 80094dc:	4605      	mov	r5, r0
 80094de:	4608      	mov	r0, r1
 80094e0:	460e      	mov	r6, r1
 80094e2:	f001 ff55 	bl	800b390 <__malloc_lock>
 80094e6:	6823      	ldr	r3, [r4, #0]
 80094e8:	b143      	cbz	r3, 80094fc <_mallinfo_r+0x24>
 80094ea:	2100      	movs	r1, #0
 80094ec:	4630      	mov	r0, r6
 80094ee:	f000 fe81 	bl	800a1f4 <_sbrk_r>
 80094f2:	1c42      	adds	r2, r0, #1
 80094f4:	4603      	mov	r3, r0
 80094f6:	bf1c      	itt	ne
 80094f8:	6820      	ldrne	r0, [r4, #0]
 80094fa:	1a1b      	subne	r3, r3, r0
 80094fc:	4a0e      	ldr	r2, [pc, #56]	; (8009538 <_mallinfo_r+0x60>)
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	2000      	movs	r0, #0
 8009502:	b992      	cbnz	r2, 800952a <_mallinfo_r+0x52>
 8009504:	4c0d      	ldr	r4, [pc, #52]	; (800953c <_mallinfo_r+0x64>)
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	6220      	str	r0, [r4, #32]
 800950a:	1a1b      	subs	r3, r3, r0
 800950c:	4630      	mov	r0, r6
 800950e:	61e3      	str	r3, [r4, #28]
 8009510:	f001 ff44 	bl	800b39c <__malloc_unlock>
 8009514:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009516:	462e      	mov	r6, r5
 8009518:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800951a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800951c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800951e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009522:	e886 0003 	stmia.w	r6, {r0, r1}
 8009526:	4628      	mov	r0, r5
 8009528:	bd70      	pop	{r4, r5, r6, pc}
 800952a:	6811      	ldr	r1, [r2, #0]
 800952c:	6852      	ldr	r2, [r2, #4]
 800952e:	4408      	add	r0, r1
 8009530:	e7e7      	b.n	8009502 <_mallinfo_r+0x2a>
 8009532:	bf00      	nop
 8009534:	2000b990 	.word	0x2000b990
 8009538:	2000b98c 	.word	0x2000b98c
 800953c:	2000b964 	.word	0x2000b964

08009540 <sbrk_aligned>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	4e0e      	ldr	r6, [pc, #56]	; (800957c <sbrk_aligned+0x3c>)
 8009544:	460c      	mov	r4, r1
 8009546:	6831      	ldr	r1, [r6, #0]
 8009548:	4605      	mov	r5, r0
 800954a:	b911      	cbnz	r1, 8009552 <sbrk_aligned+0x12>
 800954c:	f000 fe52 	bl	800a1f4 <_sbrk_r>
 8009550:	6030      	str	r0, [r6, #0]
 8009552:	4621      	mov	r1, r4
 8009554:	4628      	mov	r0, r5
 8009556:	f000 fe4d 	bl	800a1f4 <_sbrk_r>
 800955a:	1c43      	adds	r3, r0, #1
 800955c:	d00a      	beq.n	8009574 <sbrk_aligned+0x34>
 800955e:	1cc4      	adds	r4, r0, #3
 8009560:	f024 0403 	bic.w	r4, r4, #3
 8009564:	42a0      	cmp	r0, r4
 8009566:	d007      	beq.n	8009578 <sbrk_aligned+0x38>
 8009568:	1a21      	subs	r1, r4, r0
 800956a:	4628      	mov	r0, r5
 800956c:	f000 fe42 	bl	800a1f4 <_sbrk_r>
 8009570:	3001      	adds	r0, #1
 8009572:	d101      	bne.n	8009578 <sbrk_aligned+0x38>
 8009574:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009578:	4620      	mov	r0, r4
 800957a:	bd70      	pop	{r4, r5, r6, pc}
 800957c:	2000b990 	.word	0x2000b990

08009580 <_malloc_r>:
 8009580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009584:	1ccd      	adds	r5, r1, #3
 8009586:	f025 0503 	bic.w	r5, r5, #3
 800958a:	3508      	adds	r5, #8
 800958c:	2d0c      	cmp	r5, #12
 800958e:	bf38      	it	cc
 8009590:	250c      	movcc	r5, #12
 8009592:	2d00      	cmp	r5, #0
 8009594:	4607      	mov	r7, r0
 8009596:	db01      	blt.n	800959c <_malloc_r+0x1c>
 8009598:	42a9      	cmp	r1, r5
 800959a:	d905      	bls.n	80095a8 <_malloc_r+0x28>
 800959c:	230c      	movs	r3, #12
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	2600      	movs	r6, #0
 80095a2:	4630      	mov	r0, r6
 80095a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a8:	4e2e      	ldr	r6, [pc, #184]	; (8009664 <_malloc_r+0xe4>)
 80095aa:	f001 fef1 	bl	800b390 <__malloc_lock>
 80095ae:	6833      	ldr	r3, [r6, #0]
 80095b0:	461c      	mov	r4, r3
 80095b2:	bb34      	cbnz	r4, 8009602 <_malloc_r+0x82>
 80095b4:	4629      	mov	r1, r5
 80095b6:	4638      	mov	r0, r7
 80095b8:	f7ff ffc2 	bl	8009540 <sbrk_aligned>
 80095bc:	1c43      	adds	r3, r0, #1
 80095be:	4604      	mov	r4, r0
 80095c0:	d14d      	bne.n	800965e <_malloc_r+0xde>
 80095c2:	6834      	ldr	r4, [r6, #0]
 80095c4:	4626      	mov	r6, r4
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	d140      	bne.n	800964c <_malloc_r+0xcc>
 80095ca:	6823      	ldr	r3, [r4, #0]
 80095cc:	4631      	mov	r1, r6
 80095ce:	4638      	mov	r0, r7
 80095d0:	eb04 0803 	add.w	r8, r4, r3
 80095d4:	f000 fe0e 	bl	800a1f4 <_sbrk_r>
 80095d8:	4580      	cmp	r8, r0
 80095da:	d13a      	bne.n	8009652 <_malloc_r+0xd2>
 80095dc:	6821      	ldr	r1, [r4, #0]
 80095de:	3503      	adds	r5, #3
 80095e0:	1a6d      	subs	r5, r5, r1
 80095e2:	f025 0503 	bic.w	r5, r5, #3
 80095e6:	3508      	adds	r5, #8
 80095e8:	2d0c      	cmp	r5, #12
 80095ea:	bf38      	it	cc
 80095ec:	250c      	movcc	r5, #12
 80095ee:	4629      	mov	r1, r5
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ffa5 	bl	8009540 <sbrk_aligned>
 80095f6:	3001      	adds	r0, #1
 80095f8:	d02b      	beq.n	8009652 <_malloc_r+0xd2>
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	442b      	add	r3, r5
 80095fe:	6023      	str	r3, [r4, #0]
 8009600:	e00e      	b.n	8009620 <_malloc_r+0xa0>
 8009602:	6822      	ldr	r2, [r4, #0]
 8009604:	1b52      	subs	r2, r2, r5
 8009606:	d41e      	bmi.n	8009646 <_malloc_r+0xc6>
 8009608:	2a0b      	cmp	r2, #11
 800960a:	d916      	bls.n	800963a <_malloc_r+0xba>
 800960c:	1961      	adds	r1, r4, r5
 800960e:	42a3      	cmp	r3, r4
 8009610:	6025      	str	r5, [r4, #0]
 8009612:	bf18      	it	ne
 8009614:	6059      	strne	r1, [r3, #4]
 8009616:	6863      	ldr	r3, [r4, #4]
 8009618:	bf08      	it	eq
 800961a:	6031      	streq	r1, [r6, #0]
 800961c:	5162      	str	r2, [r4, r5]
 800961e:	604b      	str	r3, [r1, #4]
 8009620:	4638      	mov	r0, r7
 8009622:	f104 060b 	add.w	r6, r4, #11
 8009626:	f001 feb9 	bl	800b39c <__malloc_unlock>
 800962a:	f026 0607 	bic.w	r6, r6, #7
 800962e:	1d23      	adds	r3, r4, #4
 8009630:	1af2      	subs	r2, r6, r3
 8009632:	d0b6      	beq.n	80095a2 <_malloc_r+0x22>
 8009634:	1b9b      	subs	r3, r3, r6
 8009636:	50a3      	str	r3, [r4, r2]
 8009638:	e7b3      	b.n	80095a2 <_malloc_r+0x22>
 800963a:	6862      	ldr	r2, [r4, #4]
 800963c:	42a3      	cmp	r3, r4
 800963e:	bf0c      	ite	eq
 8009640:	6032      	streq	r2, [r6, #0]
 8009642:	605a      	strne	r2, [r3, #4]
 8009644:	e7ec      	b.n	8009620 <_malloc_r+0xa0>
 8009646:	4623      	mov	r3, r4
 8009648:	6864      	ldr	r4, [r4, #4]
 800964a:	e7b2      	b.n	80095b2 <_malloc_r+0x32>
 800964c:	4634      	mov	r4, r6
 800964e:	6876      	ldr	r6, [r6, #4]
 8009650:	e7b9      	b.n	80095c6 <_malloc_r+0x46>
 8009652:	230c      	movs	r3, #12
 8009654:	603b      	str	r3, [r7, #0]
 8009656:	4638      	mov	r0, r7
 8009658:	f001 fea0 	bl	800b39c <__malloc_unlock>
 800965c:	e7a1      	b.n	80095a2 <_malloc_r+0x22>
 800965e:	6025      	str	r5, [r4, #0]
 8009660:	e7de      	b.n	8009620 <_malloc_r+0xa0>
 8009662:	bf00      	nop
 8009664:	2000b98c 	.word	0x2000b98c

08009668 <__ssputs_r>:
 8009668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800966c:	688e      	ldr	r6, [r1, #8]
 800966e:	429e      	cmp	r6, r3
 8009670:	4682      	mov	sl, r0
 8009672:	460c      	mov	r4, r1
 8009674:	4690      	mov	r8, r2
 8009676:	461f      	mov	r7, r3
 8009678:	d838      	bhi.n	80096ec <__ssputs_r+0x84>
 800967a:	898a      	ldrh	r2, [r1, #12]
 800967c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009680:	d032      	beq.n	80096e8 <__ssputs_r+0x80>
 8009682:	6825      	ldr	r5, [r4, #0]
 8009684:	6909      	ldr	r1, [r1, #16]
 8009686:	eba5 0901 	sub.w	r9, r5, r1
 800968a:	6965      	ldr	r5, [r4, #20]
 800968c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009690:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009694:	3301      	adds	r3, #1
 8009696:	444b      	add	r3, r9
 8009698:	106d      	asrs	r5, r5, #1
 800969a:	429d      	cmp	r5, r3
 800969c:	bf38      	it	cc
 800969e:	461d      	movcc	r5, r3
 80096a0:	0553      	lsls	r3, r2, #21
 80096a2:	d531      	bpl.n	8009708 <__ssputs_r+0xa0>
 80096a4:	4629      	mov	r1, r5
 80096a6:	f7ff ff6b 	bl	8009580 <_malloc_r>
 80096aa:	4606      	mov	r6, r0
 80096ac:	b950      	cbnz	r0, 80096c4 <__ssputs_r+0x5c>
 80096ae:	230c      	movs	r3, #12
 80096b0:	f8ca 3000 	str.w	r3, [sl]
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ba:	81a3      	strh	r3, [r4, #12]
 80096bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c4:	6921      	ldr	r1, [r4, #16]
 80096c6:	464a      	mov	r2, r9
 80096c8:	f7ff fe6a 	bl	80093a0 <memcpy>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	6126      	str	r6, [r4, #16]
 80096da:	6165      	str	r5, [r4, #20]
 80096dc:	444e      	add	r6, r9
 80096de:	eba5 0509 	sub.w	r5, r5, r9
 80096e2:	6026      	str	r6, [r4, #0]
 80096e4:	60a5      	str	r5, [r4, #8]
 80096e6:	463e      	mov	r6, r7
 80096e8:	42be      	cmp	r6, r7
 80096ea:	d900      	bls.n	80096ee <__ssputs_r+0x86>
 80096ec:	463e      	mov	r6, r7
 80096ee:	6820      	ldr	r0, [r4, #0]
 80096f0:	4632      	mov	r2, r6
 80096f2:	4641      	mov	r1, r8
 80096f4:	f7ff fe62 	bl	80093bc <memmove>
 80096f8:	68a3      	ldr	r3, [r4, #8]
 80096fa:	1b9b      	subs	r3, r3, r6
 80096fc:	60a3      	str	r3, [r4, #8]
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	4433      	add	r3, r6
 8009702:	6023      	str	r3, [r4, #0]
 8009704:	2000      	movs	r0, #0
 8009706:	e7db      	b.n	80096c0 <__ssputs_r+0x58>
 8009708:	462a      	mov	r2, r5
 800970a:	f002 f9d1 	bl	800bab0 <_realloc_r>
 800970e:	4606      	mov	r6, r0
 8009710:	2800      	cmp	r0, #0
 8009712:	d1e1      	bne.n	80096d8 <__ssputs_r+0x70>
 8009714:	6921      	ldr	r1, [r4, #16]
 8009716:	4650      	mov	r0, sl
 8009718:	f7ff fe92 	bl	8009440 <_free_r>
 800971c:	e7c7      	b.n	80096ae <__ssputs_r+0x46>
	...

08009720 <_svfiprintf_r>:
 8009720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009724:	4698      	mov	r8, r3
 8009726:	898b      	ldrh	r3, [r1, #12]
 8009728:	061b      	lsls	r3, r3, #24
 800972a:	b09d      	sub	sp, #116	; 0x74
 800972c:	4607      	mov	r7, r0
 800972e:	460d      	mov	r5, r1
 8009730:	4614      	mov	r4, r2
 8009732:	d50e      	bpl.n	8009752 <_svfiprintf_r+0x32>
 8009734:	690b      	ldr	r3, [r1, #16]
 8009736:	b963      	cbnz	r3, 8009752 <_svfiprintf_r+0x32>
 8009738:	2140      	movs	r1, #64	; 0x40
 800973a:	f7ff ff21 	bl	8009580 <_malloc_r>
 800973e:	6028      	str	r0, [r5, #0]
 8009740:	6128      	str	r0, [r5, #16]
 8009742:	b920      	cbnz	r0, 800974e <_svfiprintf_r+0x2e>
 8009744:	230c      	movs	r3, #12
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800974c:	e0d1      	b.n	80098f2 <_svfiprintf_r+0x1d2>
 800974e:	2340      	movs	r3, #64	; 0x40
 8009750:	616b      	str	r3, [r5, #20]
 8009752:	2300      	movs	r3, #0
 8009754:	9309      	str	r3, [sp, #36]	; 0x24
 8009756:	2320      	movs	r3, #32
 8009758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800975c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009760:	2330      	movs	r3, #48	; 0x30
 8009762:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800990c <_svfiprintf_r+0x1ec>
 8009766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800976a:	f04f 0901 	mov.w	r9, #1
 800976e:	4623      	mov	r3, r4
 8009770:	469a      	mov	sl, r3
 8009772:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009776:	b10a      	cbz	r2, 800977c <_svfiprintf_r+0x5c>
 8009778:	2a25      	cmp	r2, #37	; 0x25
 800977a:	d1f9      	bne.n	8009770 <_svfiprintf_r+0x50>
 800977c:	ebba 0b04 	subs.w	fp, sl, r4
 8009780:	d00b      	beq.n	800979a <_svfiprintf_r+0x7a>
 8009782:	465b      	mov	r3, fp
 8009784:	4622      	mov	r2, r4
 8009786:	4629      	mov	r1, r5
 8009788:	4638      	mov	r0, r7
 800978a:	f7ff ff6d 	bl	8009668 <__ssputs_r>
 800978e:	3001      	adds	r0, #1
 8009790:	f000 80aa 	beq.w	80098e8 <_svfiprintf_r+0x1c8>
 8009794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009796:	445a      	add	r2, fp
 8009798:	9209      	str	r2, [sp, #36]	; 0x24
 800979a:	f89a 3000 	ldrb.w	r3, [sl]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	f000 80a2 	beq.w	80098e8 <_svfiprintf_r+0x1c8>
 80097a4:	2300      	movs	r3, #0
 80097a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097ae:	f10a 0a01 	add.w	sl, sl, #1
 80097b2:	9304      	str	r3, [sp, #16]
 80097b4:	9307      	str	r3, [sp, #28]
 80097b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80097ba:	931a      	str	r3, [sp, #104]	; 0x68
 80097bc:	4654      	mov	r4, sl
 80097be:	2205      	movs	r2, #5
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	4851      	ldr	r0, [pc, #324]	; (800990c <_svfiprintf_r+0x1ec>)
 80097c6:	f7f6 fd2b 	bl	8000220 <memchr>
 80097ca:	9a04      	ldr	r2, [sp, #16]
 80097cc:	b9d8      	cbnz	r0, 8009806 <_svfiprintf_r+0xe6>
 80097ce:	06d0      	lsls	r0, r2, #27
 80097d0:	bf44      	itt	mi
 80097d2:	2320      	movmi	r3, #32
 80097d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097d8:	0711      	lsls	r1, r2, #28
 80097da:	bf44      	itt	mi
 80097dc:	232b      	movmi	r3, #43	; 0x2b
 80097de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097e2:	f89a 3000 	ldrb.w	r3, [sl]
 80097e6:	2b2a      	cmp	r3, #42	; 0x2a
 80097e8:	d015      	beq.n	8009816 <_svfiprintf_r+0xf6>
 80097ea:	9a07      	ldr	r2, [sp, #28]
 80097ec:	4654      	mov	r4, sl
 80097ee:	2000      	movs	r0, #0
 80097f0:	f04f 0c0a 	mov.w	ip, #10
 80097f4:	4621      	mov	r1, r4
 80097f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097fa:	3b30      	subs	r3, #48	; 0x30
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d94e      	bls.n	800989e <_svfiprintf_r+0x17e>
 8009800:	b1b0      	cbz	r0, 8009830 <_svfiprintf_r+0x110>
 8009802:	9207      	str	r2, [sp, #28]
 8009804:	e014      	b.n	8009830 <_svfiprintf_r+0x110>
 8009806:	eba0 0308 	sub.w	r3, r0, r8
 800980a:	fa09 f303 	lsl.w	r3, r9, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	9304      	str	r3, [sp, #16]
 8009812:	46a2      	mov	sl, r4
 8009814:	e7d2      	b.n	80097bc <_svfiprintf_r+0x9c>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	1d19      	adds	r1, r3, #4
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	9103      	str	r1, [sp, #12]
 800981e:	2b00      	cmp	r3, #0
 8009820:	bfbb      	ittet	lt
 8009822:	425b      	neglt	r3, r3
 8009824:	f042 0202 	orrlt.w	r2, r2, #2
 8009828:	9307      	strge	r3, [sp, #28]
 800982a:	9307      	strlt	r3, [sp, #28]
 800982c:	bfb8      	it	lt
 800982e:	9204      	strlt	r2, [sp, #16]
 8009830:	7823      	ldrb	r3, [r4, #0]
 8009832:	2b2e      	cmp	r3, #46	; 0x2e
 8009834:	d10c      	bne.n	8009850 <_svfiprintf_r+0x130>
 8009836:	7863      	ldrb	r3, [r4, #1]
 8009838:	2b2a      	cmp	r3, #42	; 0x2a
 800983a:	d135      	bne.n	80098a8 <_svfiprintf_r+0x188>
 800983c:	9b03      	ldr	r3, [sp, #12]
 800983e:	1d1a      	adds	r2, r3, #4
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	9203      	str	r2, [sp, #12]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bfb8      	it	lt
 8009848:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800984c:	3402      	adds	r4, #2
 800984e:	9305      	str	r3, [sp, #20]
 8009850:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800991c <_svfiprintf_r+0x1fc>
 8009854:	7821      	ldrb	r1, [r4, #0]
 8009856:	2203      	movs	r2, #3
 8009858:	4650      	mov	r0, sl
 800985a:	f7f6 fce1 	bl	8000220 <memchr>
 800985e:	b140      	cbz	r0, 8009872 <_svfiprintf_r+0x152>
 8009860:	2340      	movs	r3, #64	; 0x40
 8009862:	eba0 000a 	sub.w	r0, r0, sl
 8009866:	fa03 f000 	lsl.w	r0, r3, r0
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	4303      	orrs	r3, r0
 800986e:	3401      	adds	r4, #1
 8009870:	9304      	str	r3, [sp, #16]
 8009872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009876:	4826      	ldr	r0, [pc, #152]	; (8009910 <_svfiprintf_r+0x1f0>)
 8009878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800987c:	2206      	movs	r2, #6
 800987e:	f7f6 fccf 	bl	8000220 <memchr>
 8009882:	2800      	cmp	r0, #0
 8009884:	d038      	beq.n	80098f8 <_svfiprintf_r+0x1d8>
 8009886:	4b23      	ldr	r3, [pc, #140]	; (8009914 <_svfiprintf_r+0x1f4>)
 8009888:	bb1b      	cbnz	r3, 80098d2 <_svfiprintf_r+0x1b2>
 800988a:	9b03      	ldr	r3, [sp, #12]
 800988c:	3307      	adds	r3, #7
 800988e:	f023 0307 	bic.w	r3, r3, #7
 8009892:	3308      	adds	r3, #8
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009898:	4433      	add	r3, r6
 800989a:	9309      	str	r3, [sp, #36]	; 0x24
 800989c:	e767      	b.n	800976e <_svfiprintf_r+0x4e>
 800989e:	fb0c 3202 	mla	r2, ip, r2, r3
 80098a2:	460c      	mov	r4, r1
 80098a4:	2001      	movs	r0, #1
 80098a6:	e7a5      	b.n	80097f4 <_svfiprintf_r+0xd4>
 80098a8:	2300      	movs	r3, #0
 80098aa:	3401      	adds	r4, #1
 80098ac:	9305      	str	r3, [sp, #20]
 80098ae:	4619      	mov	r1, r3
 80098b0:	f04f 0c0a 	mov.w	ip, #10
 80098b4:	4620      	mov	r0, r4
 80098b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ba:	3a30      	subs	r2, #48	; 0x30
 80098bc:	2a09      	cmp	r2, #9
 80098be:	d903      	bls.n	80098c8 <_svfiprintf_r+0x1a8>
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d0c5      	beq.n	8009850 <_svfiprintf_r+0x130>
 80098c4:	9105      	str	r1, [sp, #20]
 80098c6:	e7c3      	b.n	8009850 <_svfiprintf_r+0x130>
 80098c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80098cc:	4604      	mov	r4, r0
 80098ce:	2301      	movs	r3, #1
 80098d0:	e7f0      	b.n	80098b4 <_svfiprintf_r+0x194>
 80098d2:	ab03      	add	r3, sp, #12
 80098d4:	9300      	str	r3, [sp, #0]
 80098d6:	462a      	mov	r2, r5
 80098d8:	4b0f      	ldr	r3, [pc, #60]	; (8009918 <_svfiprintf_r+0x1f8>)
 80098da:	a904      	add	r1, sp, #16
 80098dc:	4638      	mov	r0, r7
 80098de:	f000 f8bf 	bl	8009a60 <_printf_float>
 80098e2:	1c42      	adds	r2, r0, #1
 80098e4:	4606      	mov	r6, r0
 80098e6:	d1d6      	bne.n	8009896 <_svfiprintf_r+0x176>
 80098e8:	89ab      	ldrh	r3, [r5, #12]
 80098ea:	065b      	lsls	r3, r3, #25
 80098ec:	f53f af2c 	bmi.w	8009748 <_svfiprintf_r+0x28>
 80098f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098f2:	b01d      	add	sp, #116	; 0x74
 80098f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f8:	ab03      	add	r3, sp, #12
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	462a      	mov	r2, r5
 80098fe:	4b06      	ldr	r3, [pc, #24]	; (8009918 <_svfiprintf_r+0x1f8>)
 8009900:	a904      	add	r1, sp, #16
 8009902:	4638      	mov	r0, r7
 8009904:	f000 fb50 	bl	8009fa8 <_printf_i>
 8009908:	e7eb      	b.n	80098e2 <_svfiprintf_r+0x1c2>
 800990a:	bf00      	nop
 800990c:	0800d4d4 	.word	0x0800d4d4
 8009910:	0800d4de 	.word	0x0800d4de
 8009914:	08009a61 	.word	0x08009a61
 8009918:	08009669 	.word	0x08009669
 800991c:	0800d4da 	.word	0x0800d4da

08009920 <__cvt>:
 8009920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	ec55 4b10 	vmov	r4, r5, d0
 8009928:	2d00      	cmp	r5, #0
 800992a:	460e      	mov	r6, r1
 800992c:	4619      	mov	r1, r3
 800992e:	462b      	mov	r3, r5
 8009930:	bfbb      	ittet	lt
 8009932:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009936:	461d      	movlt	r5, r3
 8009938:	2300      	movge	r3, #0
 800993a:	232d      	movlt	r3, #45	; 0x2d
 800993c:	700b      	strb	r3, [r1, #0]
 800993e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009940:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009944:	4691      	mov	r9, r2
 8009946:	f023 0820 	bic.w	r8, r3, #32
 800994a:	bfbc      	itt	lt
 800994c:	4622      	movlt	r2, r4
 800994e:	4614      	movlt	r4, r2
 8009950:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009954:	d005      	beq.n	8009962 <__cvt+0x42>
 8009956:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800995a:	d100      	bne.n	800995e <__cvt+0x3e>
 800995c:	3601      	adds	r6, #1
 800995e:	2102      	movs	r1, #2
 8009960:	e000      	b.n	8009964 <__cvt+0x44>
 8009962:	2103      	movs	r1, #3
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	ab02      	add	r3, sp, #8
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	ec45 4b10 	vmov	d0, r4, r5
 8009970:	4653      	mov	r3, sl
 8009972:	4632      	mov	r2, r6
 8009974:	f000 fe08 	bl	800a588 <_dtoa_r>
 8009978:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800997c:	4607      	mov	r7, r0
 800997e:	d102      	bne.n	8009986 <__cvt+0x66>
 8009980:	f019 0f01 	tst.w	r9, #1
 8009984:	d022      	beq.n	80099cc <__cvt+0xac>
 8009986:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800998a:	eb07 0906 	add.w	r9, r7, r6
 800998e:	d110      	bne.n	80099b2 <__cvt+0x92>
 8009990:	783b      	ldrb	r3, [r7, #0]
 8009992:	2b30      	cmp	r3, #48	; 0x30
 8009994:	d10a      	bne.n	80099ac <__cvt+0x8c>
 8009996:	2200      	movs	r2, #0
 8009998:	2300      	movs	r3, #0
 800999a:	4620      	mov	r0, r4
 800999c:	4629      	mov	r1, r5
 800999e:	f7f7 f8b3 	bl	8000b08 <__aeabi_dcmpeq>
 80099a2:	b918      	cbnz	r0, 80099ac <__cvt+0x8c>
 80099a4:	f1c6 0601 	rsb	r6, r6, #1
 80099a8:	f8ca 6000 	str.w	r6, [sl]
 80099ac:	f8da 3000 	ldr.w	r3, [sl]
 80099b0:	4499      	add	r9, r3
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 80099be:	b108      	cbz	r0, 80099c4 <__cvt+0xa4>
 80099c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80099c4:	2230      	movs	r2, #48	; 0x30
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	454b      	cmp	r3, r9
 80099ca:	d307      	bcc.n	80099dc <__cvt+0xbc>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099d0:	1bdb      	subs	r3, r3, r7
 80099d2:	4638      	mov	r0, r7
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	b004      	add	sp, #16
 80099d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099dc:	1c59      	adds	r1, r3, #1
 80099de:	9103      	str	r1, [sp, #12]
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	e7f0      	b.n	80099c6 <__cvt+0xa6>

080099e4 <__exponent>:
 80099e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e6:	4603      	mov	r3, r0
 80099e8:	2900      	cmp	r1, #0
 80099ea:	bfb8      	it	lt
 80099ec:	4249      	neglt	r1, r1
 80099ee:	f803 2b02 	strb.w	r2, [r3], #2
 80099f2:	bfb4      	ite	lt
 80099f4:	222d      	movlt	r2, #45	; 0x2d
 80099f6:	222b      	movge	r2, #43	; 0x2b
 80099f8:	2909      	cmp	r1, #9
 80099fa:	7042      	strb	r2, [r0, #1]
 80099fc:	dd2a      	ble.n	8009a54 <__exponent+0x70>
 80099fe:	f10d 0407 	add.w	r4, sp, #7
 8009a02:	46a4      	mov	ip, r4
 8009a04:	270a      	movs	r7, #10
 8009a06:	46a6      	mov	lr, r4
 8009a08:	460a      	mov	r2, r1
 8009a0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a0e:	fb07 1516 	mls	r5, r7, r6, r1
 8009a12:	3530      	adds	r5, #48	; 0x30
 8009a14:	2a63      	cmp	r2, #99	; 0x63
 8009a16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009a1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a1e:	4631      	mov	r1, r6
 8009a20:	dcf1      	bgt.n	8009a06 <__exponent+0x22>
 8009a22:	3130      	adds	r1, #48	; 0x30
 8009a24:	f1ae 0502 	sub.w	r5, lr, #2
 8009a28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a2c:	1c44      	adds	r4, r0, #1
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4561      	cmp	r1, ip
 8009a32:	d30a      	bcc.n	8009a4a <__exponent+0x66>
 8009a34:	f10d 0209 	add.w	r2, sp, #9
 8009a38:	eba2 020e 	sub.w	r2, r2, lr
 8009a3c:	4565      	cmp	r5, ip
 8009a3e:	bf88      	it	hi
 8009a40:	2200      	movhi	r2, #0
 8009a42:	4413      	add	r3, r2
 8009a44:	1a18      	subs	r0, r3, r0
 8009a46:	b003      	add	sp, #12
 8009a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a52:	e7ed      	b.n	8009a30 <__exponent+0x4c>
 8009a54:	2330      	movs	r3, #48	; 0x30
 8009a56:	3130      	adds	r1, #48	; 0x30
 8009a58:	7083      	strb	r3, [r0, #2]
 8009a5a:	70c1      	strb	r1, [r0, #3]
 8009a5c:	1d03      	adds	r3, r0, #4
 8009a5e:	e7f1      	b.n	8009a44 <__exponent+0x60>

08009a60 <_printf_float>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b02 	vpush	{d8}
 8009a68:	b08d      	sub	sp, #52	; 0x34
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a70:	4616      	mov	r6, r2
 8009a72:	461f      	mov	r7, r3
 8009a74:	4605      	mov	r5, r0
 8009a76:	f001 fc83 	bl	800b380 <_localeconv_r>
 8009a7a:	f8d0 a000 	ldr.w	sl, [r0]
 8009a7e:	4650      	mov	r0, sl
 8009a80:	f7f6 fbc0 	bl	8000204 <strlen>
 8009a84:	2300      	movs	r3, #0
 8009a86:	930a      	str	r3, [sp, #40]	; 0x28
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	9305      	str	r3, [sp, #20]
 8009a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a94:	3307      	adds	r3, #7
 8009a96:	f023 0307 	bic.w	r3, r3, #7
 8009a9a:	f103 0208 	add.w	r2, r3, #8
 8009a9e:	f8c8 2000 	str.w	r2, [r8]
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009aaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009aae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ab8:	ee08 0a10 	vmov	s16, r0
 8009abc:	4b9f      	ldr	r3, [pc, #636]	; (8009d3c <_printf_float+0x2dc>)
 8009abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ac6:	f7f7 f851 	bl	8000b6c <__aeabi_dcmpun>
 8009aca:	bb88      	cbnz	r0, 8009b30 <_printf_float+0xd0>
 8009acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ad0:	4b9a      	ldr	r3, [pc, #616]	; (8009d3c <_printf_float+0x2dc>)
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ad6:	f7f7 f82b 	bl	8000b30 <__aeabi_dcmple>
 8009ada:	bb48      	cbnz	r0, 8009b30 <_printf_float+0xd0>
 8009adc:	2200      	movs	r2, #0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	f7f7 f81a 	bl	8000b1c <__aeabi_dcmplt>
 8009ae8:	b110      	cbz	r0, 8009af0 <_printf_float+0x90>
 8009aea:	232d      	movs	r3, #45	; 0x2d
 8009aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af0:	4b93      	ldr	r3, [pc, #588]	; (8009d40 <_printf_float+0x2e0>)
 8009af2:	4894      	ldr	r0, [pc, #592]	; (8009d44 <_printf_float+0x2e4>)
 8009af4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009af8:	bf94      	ite	ls
 8009afa:	4698      	movls	r8, r3
 8009afc:	4680      	movhi	r8, r0
 8009afe:	2303      	movs	r3, #3
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	f023 0204 	bic.w	r2, r3, #4
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	f04f 0900 	mov.w	r9, #0
 8009b0e:	9700      	str	r7, [sp, #0]
 8009b10:	4633      	mov	r3, r6
 8009b12:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 f9d8 	bl	8009ecc <_printf_common>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f040 8090 	bne.w	8009c42 <_printf_float+0x1e2>
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b26:	b00d      	add	sp, #52	; 0x34
 8009b28:	ecbd 8b02 	vpop	{d8}
 8009b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f7 f818 	bl	8000b6c <__aeabi_dcmpun>
 8009b3c:	b140      	cbz	r0, 8009b50 <_printf_float+0xf0>
 8009b3e:	464b      	mov	r3, r9
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfbc      	itt	lt
 8009b44:	232d      	movlt	r3, #45	; 0x2d
 8009b46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b4a:	487f      	ldr	r0, [pc, #508]	; (8009d48 <_printf_float+0x2e8>)
 8009b4c:	4b7f      	ldr	r3, [pc, #508]	; (8009d4c <_printf_float+0x2ec>)
 8009b4e:	e7d1      	b.n	8009af4 <_printf_float+0x94>
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b56:	9206      	str	r2, [sp, #24]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	d13f      	bne.n	8009bdc <_printf_float+0x17c>
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	9b05      	ldr	r3, [sp, #20]
 8009b62:	6861      	ldr	r1, [r4, #4]
 8009b64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9303      	str	r3, [sp, #12]
 8009b6c:	ab0a      	add	r3, sp, #40	; 0x28
 8009b6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b72:	ab09      	add	r3, sp, #36	; 0x24
 8009b74:	ec49 8b10 	vmov	d0, r8, r9
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	6022      	str	r2, [r4, #0]
 8009b7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b80:	4628      	mov	r0, r5
 8009b82:	f7ff fecd 	bl	8009920 <__cvt>
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b8a:	2b47      	cmp	r3, #71	; 0x47
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	d108      	bne.n	8009ba2 <_printf_float+0x142>
 8009b90:	1cc8      	adds	r0, r1, #3
 8009b92:	db02      	blt.n	8009b9a <_printf_float+0x13a>
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	4299      	cmp	r1, r3
 8009b98:	dd41      	ble.n	8009c1e <_printf_float+0x1be>
 8009b9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b9e:	fa5f fb8b 	uxtb.w	fp, fp
 8009ba2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ba6:	d820      	bhi.n	8009bea <_printf_float+0x18a>
 8009ba8:	3901      	subs	r1, #1
 8009baa:	465a      	mov	r2, fp
 8009bac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bb0:	9109      	str	r1, [sp, #36]	; 0x24
 8009bb2:	f7ff ff17 	bl	80099e4 <__exponent>
 8009bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bb8:	1813      	adds	r3, r2, r0
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	4681      	mov	r9, r0
 8009bbe:	6123      	str	r3, [r4, #16]
 8009bc0:	dc02      	bgt.n	8009bc8 <_printf_float+0x168>
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	07d2      	lsls	r2, r2, #31
 8009bc6:	d501      	bpl.n	8009bcc <_printf_float+0x16c>
 8009bc8:	3301      	adds	r3, #1
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d09c      	beq.n	8009b0e <_printf_float+0xae>
 8009bd4:	232d      	movs	r3, #45	; 0x2d
 8009bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bda:	e798      	b.n	8009b0e <_printf_float+0xae>
 8009bdc:	9a06      	ldr	r2, [sp, #24]
 8009bde:	2a47      	cmp	r2, #71	; 0x47
 8009be0:	d1be      	bne.n	8009b60 <_printf_float+0x100>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1bc      	bne.n	8009b60 <_printf_float+0x100>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e7b9      	b.n	8009b5e <_printf_float+0xfe>
 8009bea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bee:	d118      	bne.n	8009c22 <_printf_float+0x1c2>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	dd0b      	ble.n	8009c0e <_printf_float+0x1ae>
 8009bf6:	6121      	str	r1, [r4, #16]
 8009bf8:	b913      	cbnz	r3, 8009c00 <_printf_float+0x1a0>
 8009bfa:	6822      	ldr	r2, [r4, #0]
 8009bfc:	07d0      	lsls	r0, r2, #31
 8009bfe:	d502      	bpl.n	8009c06 <_printf_float+0x1a6>
 8009c00:	3301      	adds	r3, #1
 8009c02:	440b      	add	r3, r1
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c08:	f04f 0900 	mov.w	r9, #0
 8009c0c:	e7de      	b.n	8009bcc <_printf_float+0x16c>
 8009c0e:	b913      	cbnz	r3, 8009c16 <_printf_float+0x1b6>
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	07d2      	lsls	r2, r2, #31
 8009c14:	d501      	bpl.n	8009c1a <_printf_float+0x1ba>
 8009c16:	3302      	adds	r3, #2
 8009c18:	e7f4      	b.n	8009c04 <_printf_float+0x1a4>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f2      	b.n	8009c04 <_printf_float+0x1a4>
 8009c1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c24:	4299      	cmp	r1, r3
 8009c26:	db05      	blt.n	8009c34 <_printf_float+0x1d4>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	6121      	str	r1, [r4, #16]
 8009c2c:	07d8      	lsls	r0, r3, #31
 8009c2e:	d5ea      	bpl.n	8009c06 <_printf_float+0x1a6>
 8009c30:	1c4b      	adds	r3, r1, #1
 8009c32:	e7e7      	b.n	8009c04 <_printf_float+0x1a4>
 8009c34:	2900      	cmp	r1, #0
 8009c36:	bfd4      	ite	le
 8009c38:	f1c1 0202 	rsble	r2, r1, #2
 8009c3c:	2201      	movgt	r2, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	e7e0      	b.n	8009c04 <_printf_float+0x1a4>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	055a      	lsls	r2, r3, #21
 8009c46:	d407      	bmi.n	8009c58 <_printf_float+0x1f8>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	d12c      	bne.n	8009cb0 <_printf_float+0x250>
 8009c56:	e764      	b.n	8009b22 <_printf_float+0xc2>
 8009c58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c5c:	f240 80e0 	bls.w	8009e20 <_printf_float+0x3c0>
 8009c60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	f7f6 ff4e 	bl	8000b08 <__aeabi_dcmpeq>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d034      	beq.n	8009cda <_printf_float+0x27a>
 8009c70:	4a37      	ldr	r2, [pc, #220]	; (8009d50 <_printf_float+0x2f0>)
 8009c72:	2301      	movs	r3, #1
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f af51 	beq.w	8009b22 <_printf_float+0xc2>
 8009c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c84:	429a      	cmp	r2, r3
 8009c86:	db02      	blt.n	8009c8e <_printf_float+0x22e>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	07d8      	lsls	r0, r3, #31
 8009c8c:	d510      	bpl.n	8009cb0 <_printf_float+0x250>
 8009c8e:	ee18 3a10 	vmov	r3, s16
 8009c92:	4652      	mov	r2, sl
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b8      	blx	r7
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f af41 	beq.w	8009b22 <_printf_float+0xc2>
 8009ca0:	f04f 0800 	mov.w	r8, #0
 8009ca4:	f104 091a 	add.w	r9, r4, #26
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4543      	cmp	r3, r8
 8009cae:	dc09      	bgt.n	8009cc4 <_printf_float+0x264>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	079b      	lsls	r3, r3, #30
 8009cb4:	f100 8105 	bmi.w	8009ec2 <_printf_float+0x462>
 8009cb8:	68e0      	ldr	r0, [r4, #12]
 8009cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cbc:	4298      	cmp	r0, r3
 8009cbe:	bfb8      	it	lt
 8009cc0:	4618      	movlt	r0, r3
 8009cc2:	e730      	b.n	8009b26 <_printf_float+0xc6>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	464a      	mov	r2, r9
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f af27 	beq.w	8009b22 <_printf_float+0xc2>
 8009cd4:	f108 0801 	add.w	r8, r8, #1
 8009cd8:	e7e6      	b.n	8009ca8 <_printf_float+0x248>
 8009cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dc39      	bgt.n	8009d54 <_printf_float+0x2f4>
 8009ce0:	4a1b      	ldr	r2, [pc, #108]	; (8009d50 <_printf_float+0x2f0>)
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af19 	beq.w	8009b22 <_printf_float+0xc2>
 8009cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	d102      	bne.n	8009cfe <_printf_float+0x29e>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	07d9      	lsls	r1, r3, #31
 8009cfc:	d5d8      	bpl.n	8009cb0 <_printf_float+0x250>
 8009cfe:	ee18 3a10 	vmov	r3, s16
 8009d02:	4652      	mov	r2, sl
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af09 	beq.w	8009b22 <_printf_float+0xc2>
 8009d10:	f04f 0900 	mov.w	r9, #0
 8009d14:	f104 0a1a 	add.w	sl, r4, #26
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	425b      	negs	r3, r3
 8009d1c:	454b      	cmp	r3, r9
 8009d1e:	dc01      	bgt.n	8009d24 <_printf_float+0x2c4>
 8009d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d22:	e792      	b.n	8009c4a <_printf_float+0x1ea>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4652      	mov	r2, sl
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	f43f aef7 	beq.w	8009b22 <_printf_float+0xc2>
 8009d34:	f109 0901 	add.w	r9, r9, #1
 8009d38:	e7ee      	b.n	8009d18 <_printf_float+0x2b8>
 8009d3a:	bf00      	nop
 8009d3c:	7fefffff 	.word	0x7fefffff
 8009d40:	0800d4e5 	.word	0x0800d4e5
 8009d44:	0800d4e9 	.word	0x0800d4e9
 8009d48:	0800d4f1 	.word	0x0800d4f1
 8009d4c:	0800d4ed 	.word	0x0800d4ed
 8009d50:	0800d4f5 	.word	0x0800d4f5
 8009d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bfa8      	it	ge
 8009d5c:	461a      	movge	r2, r3
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	4691      	mov	r9, r2
 8009d62:	dc37      	bgt.n	8009dd4 <_printf_float+0x374>
 8009d64:	f04f 0b00 	mov.w	fp, #0
 8009d68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d6c:	f104 021a 	add.w	r2, r4, #26
 8009d70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d72:	9305      	str	r3, [sp, #20]
 8009d74:	eba3 0309 	sub.w	r3, r3, r9
 8009d78:	455b      	cmp	r3, fp
 8009d7a:	dc33      	bgt.n	8009de4 <_printf_float+0x384>
 8009d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d80:	429a      	cmp	r2, r3
 8009d82:	db3b      	blt.n	8009dfc <_printf_float+0x39c>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	07da      	lsls	r2, r3, #31
 8009d88:	d438      	bmi.n	8009dfc <_printf_float+0x39c>
 8009d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8c:	9a05      	ldr	r2, [sp, #20]
 8009d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d90:	1a9a      	subs	r2, r3, r2
 8009d92:	eba3 0901 	sub.w	r9, r3, r1
 8009d96:	4591      	cmp	r9, r2
 8009d98:	bfa8      	it	ge
 8009d9a:	4691      	movge	r9, r2
 8009d9c:	f1b9 0f00 	cmp.w	r9, #0
 8009da0:	dc35      	bgt.n	8009e0e <_printf_float+0x3ae>
 8009da2:	f04f 0800 	mov.w	r8, #0
 8009da6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009daa:	f104 0a1a 	add.w	sl, r4, #26
 8009dae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	eba3 0309 	sub.w	r3, r3, r9
 8009db8:	4543      	cmp	r3, r8
 8009dba:	f77f af79 	ble.w	8009cb0 <_printf_float+0x250>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f aeaa 	beq.w	8009b22 <_printf_float+0xc2>
 8009dce:	f108 0801 	add.w	r8, r8, #1
 8009dd2:	e7ec      	b.n	8009dae <_printf_float+0x34e>
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	d1c0      	bne.n	8009d64 <_printf_float+0x304>
 8009de2:	e69e      	b.n	8009b22 <_printf_float+0xc2>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4631      	mov	r1, r6
 8009de8:	4628      	mov	r0, r5
 8009dea:	9205      	str	r2, [sp, #20]
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f ae97 	beq.w	8009b22 <_printf_float+0xc2>
 8009df4:	9a05      	ldr	r2, [sp, #20]
 8009df6:	f10b 0b01 	add.w	fp, fp, #1
 8009dfa:	e7b9      	b.n	8009d70 <_printf_float+0x310>
 8009dfc:	ee18 3a10 	vmov	r3, s16
 8009e00:	4652      	mov	r2, sl
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b8      	blx	r7
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d1be      	bne.n	8009d8a <_printf_float+0x32a>
 8009e0c:	e689      	b.n	8009b22 <_printf_float+0xc2>
 8009e0e:	9a05      	ldr	r2, [sp, #20]
 8009e10:	464b      	mov	r3, r9
 8009e12:	4442      	add	r2, r8
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d1c1      	bne.n	8009da2 <_printf_float+0x342>
 8009e1e:	e680      	b.n	8009b22 <_printf_float+0xc2>
 8009e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	dc01      	bgt.n	8009e2a <_printf_float+0x3ca>
 8009e26:	07db      	lsls	r3, r3, #31
 8009e28:	d538      	bpl.n	8009e9c <_printf_float+0x43c>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f ae74 	beq.w	8009b22 <_printf_float+0xc2>
 8009e3a:	ee18 3a10 	vmov	r3, s16
 8009e3e:	4652      	mov	r2, sl
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	f43f ae6b 	beq.w	8009b22 <_printf_float+0xc2>
 8009e4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e50:	2200      	movs	r2, #0
 8009e52:	2300      	movs	r3, #0
 8009e54:	f7f6 fe58 	bl	8000b08 <__aeabi_dcmpeq>
 8009e58:	b9d8      	cbnz	r0, 8009e92 <_printf_float+0x432>
 8009e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e5c:	f108 0201 	add.w	r2, r8, #1
 8009e60:	3b01      	subs	r3, #1
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d10e      	bne.n	8009e8a <_printf_float+0x42a>
 8009e6c:	e659      	b.n	8009b22 <_printf_float+0xc2>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f ae52 	beq.w	8009b22 <_printf_float+0xc2>
 8009e7e:	f108 0801 	add.w	r8, r8, #1
 8009e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e84:	3b01      	subs	r3, #1
 8009e86:	4543      	cmp	r3, r8
 8009e88:	dcf1      	bgt.n	8009e6e <_printf_float+0x40e>
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e90:	e6dc      	b.n	8009c4c <_printf_float+0x1ec>
 8009e92:	f04f 0800 	mov.w	r8, #0
 8009e96:	f104 0a1a 	add.w	sl, r4, #26
 8009e9a:	e7f2      	b.n	8009e82 <_printf_float+0x422>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	e7df      	b.n	8009e62 <_printf_float+0x402>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	464a      	mov	r2, r9
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f ae38 	beq.w	8009b22 <_printf_float+0xc2>
 8009eb2:	f108 0801 	add.w	r8, r8, #1
 8009eb6:	68e3      	ldr	r3, [r4, #12]
 8009eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eba:	1a5b      	subs	r3, r3, r1
 8009ebc:	4543      	cmp	r3, r8
 8009ebe:	dcf0      	bgt.n	8009ea2 <_printf_float+0x442>
 8009ec0:	e6fa      	b.n	8009cb8 <_printf_float+0x258>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	f104 0919 	add.w	r9, r4, #25
 8009eca:	e7f4      	b.n	8009eb6 <_printf_float+0x456>

08009ecc <_printf_common>:
 8009ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	4616      	mov	r6, r2
 8009ed2:	4699      	mov	r9, r3
 8009ed4:	688a      	ldr	r2, [r1, #8]
 8009ed6:	690b      	ldr	r3, [r1, #16]
 8009ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	bfb8      	it	lt
 8009ee0:	4613      	movlt	r3, r2
 8009ee2:	6033      	str	r3, [r6, #0]
 8009ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ee8:	4607      	mov	r7, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	b10a      	cbz	r2, 8009ef2 <_printf_common+0x26>
 8009eee:	3301      	adds	r3, #1
 8009ef0:	6033      	str	r3, [r6, #0]
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	0699      	lsls	r1, r3, #26
 8009ef6:	bf42      	ittt	mi
 8009ef8:	6833      	ldrmi	r3, [r6, #0]
 8009efa:	3302      	addmi	r3, #2
 8009efc:	6033      	strmi	r3, [r6, #0]
 8009efe:	6825      	ldr	r5, [r4, #0]
 8009f00:	f015 0506 	ands.w	r5, r5, #6
 8009f04:	d106      	bne.n	8009f14 <_printf_common+0x48>
 8009f06:	f104 0a19 	add.w	sl, r4, #25
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	6832      	ldr	r2, [r6, #0]
 8009f0e:	1a9b      	subs	r3, r3, r2
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dc26      	bgt.n	8009f62 <_printf_common+0x96>
 8009f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f18:	1e13      	subs	r3, r2, #0
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	bf18      	it	ne
 8009f1e:	2301      	movne	r3, #1
 8009f20:	0692      	lsls	r2, r2, #26
 8009f22:	d42b      	bmi.n	8009f7c <_printf_common+0xb0>
 8009f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	47c0      	blx	r8
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d01e      	beq.n	8009f70 <_printf_common+0xa4>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	68e5      	ldr	r5, [r4, #12]
 8009f36:	6832      	ldr	r2, [r6, #0]
 8009f38:	f003 0306 	and.w	r3, r3, #6
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	bf08      	it	eq
 8009f40:	1aad      	subeq	r5, r5, r2
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	bf0c      	ite	eq
 8009f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f4c:	2500      	movne	r5, #0
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	bfc4      	itt	gt
 8009f52:	1a9b      	subgt	r3, r3, r2
 8009f54:	18ed      	addgt	r5, r5, r3
 8009f56:	2600      	movs	r6, #0
 8009f58:	341a      	adds	r4, #26
 8009f5a:	42b5      	cmp	r5, r6
 8009f5c:	d11a      	bne.n	8009f94 <_printf_common+0xc8>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e008      	b.n	8009f74 <_printf_common+0xa8>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4652      	mov	r2, sl
 8009f66:	4649      	mov	r1, r9
 8009f68:	4638      	mov	r0, r7
 8009f6a:	47c0      	blx	r8
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d103      	bne.n	8009f78 <_printf_common+0xac>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f78:	3501      	adds	r5, #1
 8009f7a:	e7c6      	b.n	8009f0a <_printf_common+0x3e>
 8009f7c:	18e1      	adds	r1, r4, r3
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	2030      	movs	r0, #48	; 0x30
 8009f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f86:	4422      	add	r2, r4
 8009f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f90:	3302      	adds	r3, #2
 8009f92:	e7c7      	b.n	8009f24 <_printf_common+0x58>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4622      	mov	r2, r4
 8009f98:	4649      	mov	r1, r9
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	47c0      	blx	r8
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d0e6      	beq.n	8009f70 <_printf_common+0xa4>
 8009fa2:	3601      	adds	r6, #1
 8009fa4:	e7d9      	b.n	8009f5a <_printf_common+0x8e>
	...

08009fa8 <_printf_i>:
 8009fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	7e0f      	ldrb	r7, [r1, #24]
 8009fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fb0:	2f78      	cmp	r7, #120	; 0x78
 8009fb2:	4691      	mov	r9, r2
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	469a      	mov	sl, r3
 8009fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fbe:	d807      	bhi.n	8009fd0 <_printf_i+0x28>
 8009fc0:	2f62      	cmp	r7, #98	; 0x62
 8009fc2:	d80a      	bhi.n	8009fda <_printf_i+0x32>
 8009fc4:	2f00      	cmp	r7, #0
 8009fc6:	f000 80d8 	beq.w	800a17a <_printf_i+0x1d2>
 8009fca:	2f58      	cmp	r7, #88	; 0x58
 8009fcc:	f000 80a3 	beq.w	800a116 <_printf_i+0x16e>
 8009fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fd8:	e03a      	b.n	800a050 <_printf_i+0xa8>
 8009fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fde:	2b15      	cmp	r3, #21
 8009fe0:	d8f6      	bhi.n	8009fd0 <_printf_i+0x28>
 8009fe2:	a101      	add	r1, pc, #4	; (adr r1, 8009fe8 <_printf_i+0x40>)
 8009fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fe8:	0800a041 	.word	0x0800a041
 8009fec:	0800a055 	.word	0x0800a055
 8009ff0:	08009fd1 	.word	0x08009fd1
 8009ff4:	08009fd1 	.word	0x08009fd1
 8009ff8:	08009fd1 	.word	0x08009fd1
 8009ffc:	08009fd1 	.word	0x08009fd1
 800a000:	0800a055 	.word	0x0800a055
 800a004:	08009fd1 	.word	0x08009fd1
 800a008:	08009fd1 	.word	0x08009fd1
 800a00c:	08009fd1 	.word	0x08009fd1
 800a010:	08009fd1 	.word	0x08009fd1
 800a014:	0800a161 	.word	0x0800a161
 800a018:	0800a085 	.word	0x0800a085
 800a01c:	0800a143 	.word	0x0800a143
 800a020:	08009fd1 	.word	0x08009fd1
 800a024:	08009fd1 	.word	0x08009fd1
 800a028:	0800a183 	.word	0x0800a183
 800a02c:	08009fd1 	.word	0x08009fd1
 800a030:	0800a085 	.word	0x0800a085
 800a034:	08009fd1 	.word	0x08009fd1
 800a038:	08009fd1 	.word	0x08009fd1
 800a03c:	0800a14b 	.word	0x0800a14b
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	1d1a      	adds	r2, r3, #4
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	602a      	str	r2, [r5, #0]
 800a048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a04c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a050:	2301      	movs	r3, #1
 800a052:	e0a3      	b.n	800a19c <_printf_i+0x1f4>
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	6829      	ldr	r1, [r5, #0]
 800a058:	0606      	lsls	r6, r0, #24
 800a05a:	f101 0304 	add.w	r3, r1, #4
 800a05e:	d50a      	bpl.n	800a076 <_printf_i+0xce>
 800a060:	680e      	ldr	r6, [r1, #0]
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	2e00      	cmp	r6, #0
 800a066:	da03      	bge.n	800a070 <_printf_i+0xc8>
 800a068:	232d      	movs	r3, #45	; 0x2d
 800a06a:	4276      	negs	r6, r6
 800a06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a070:	485e      	ldr	r0, [pc, #376]	; (800a1ec <_printf_i+0x244>)
 800a072:	230a      	movs	r3, #10
 800a074:	e019      	b.n	800a0aa <_printf_i+0x102>
 800a076:	680e      	ldr	r6, [r1, #0]
 800a078:	602b      	str	r3, [r5, #0]
 800a07a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a07e:	bf18      	it	ne
 800a080:	b236      	sxthne	r6, r6
 800a082:	e7ef      	b.n	800a064 <_printf_i+0xbc>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	1d19      	adds	r1, r3, #4
 800a08a:	6029      	str	r1, [r5, #0]
 800a08c:	0601      	lsls	r1, r0, #24
 800a08e:	d501      	bpl.n	800a094 <_printf_i+0xec>
 800a090:	681e      	ldr	r6, [r3, #0]
 800a092:	e002      	b.n	800a09a <_printf_i+0xf2>
 800a094:	0646      	lsls	r6, r0, #25
 800a096:	d5fb      	bpl.n	800a090 <_printf_i+0xe8>
 800a098:	881e      	ldrh	r6, [r3, #0]
 800a09a:	4854      	ldr	r0, [pc, #336]	; (800a1ec <_printf_i+0x244>)
 800a09c:	2f6f      	cmp	r7, #111	; 0x6f
 800a09e:	bf0c      	ite	eq
 800a0a0:	2308      	moveq	r3, #8
 800a0a2:	230a      	movne	r3, #10
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0aa:	6865      	ldr	r5, [r4, #4]
 800a0ac:	60a5      	str	r5, [r4, #8]
 800a0ae:	2d00      	cmp	r5, #0
 800a0b0:	bfa2      	ittt	ge
 800a0b2:	6821      	ldrge	r1, [r4, #0]
 800a0b4:	f021 0104 	bicge.w	r1, r1, #4
 800a0b8:	6021      	strge	r1, [r4, #0]
 800a0ba:	b90e      	cbnz	r6, 800a0c0 <_printf_i+0x118>
 800a0bc:	2d00      	cmp	r5, #0
 800a0be:	d04d      	beq.n	800a15c <_printf_i+0x1b4>
 800a0c0:	4615      	mov	r5, r2
 800a0c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0c6:	fb03 6711 	mls	r7, r3, r1, r6
 800a0ca:	5dc7      	ldrb	r7, [r0, r7]
 800a0cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0d0:	4637      	mov	r7, r6
 800a0d2:	42bb      	cmp	r3, r7
 800a0d4:	460e      	mov	r6, r1
 800a0d6:	d9f4      	bls.n	800a0c2 <_printf_i+0x11a>
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d10b      	bne.n	800a0f4 <_printf_i+0x14c>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07de      	lsls	r6, r3, #31
 800a0e0:	d508      	bpl.n	800a0f4 <_printf_i+0x14c>
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	6861      	ldr	r1, [r4, #4]
 800a0e6:	4299      	cmp	r1, r3
 800a0e8:	bfde      	ittt	le
 800a0ea:	2330      	movle	r3, #48	; 0x30
 800a0ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0f4:	1b52      	subs	r2, r2, r5
 800a0f6:	6122      	str	r2, [r4, #16]
 800a0f8:	f8cd a000 	str.w	sl, [sp]
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	aa03      	add	r2, sp, #12
 800a100:	4621      	mov	r1, r4
 800a102:	4640      	mov	r0, r8
 800a104:	f7ff fee2 	bl	8009ecc <_printf_common>
 800a108:	3001      	adds	r0, #1
 800a10a:	d14c      	bne.n	800a1a6 <_printf_i+0x1fe>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a110:	b004      	add	sp, #16
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	4835      	ldr	r0, [pc, #212]	; (800a1ec <_printf_i+0x244>)
 800a118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a11c:	6829      	ldr	r1, [r5, #0]
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	f851 6b04 	ldr.w	r6, [r1], #4
 800a124:	6029      	str	r1, [r5, #0]
 800a126:	061d      	lsls	r5, r3, #24
 800a128:	d514      	bpl.n	800a154 <_printf_i+0x1ac>
 800a12a:	07df      	lsls	r7, r3, #31
 800a12c:	bf44      	itt	mi
 800a12e:	f043 0320 	orrmi.w	r3, r3, #32
 800a132:	6023      	strmi	r3, [r4, #0]
 800a134:	b91e      	cbnz	r6, 800a13e <_printf_i+0x196>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f023 0320 	bic.w	r3, r3, #32
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	2310      	movs	r3, #16
 800a140:	e7b0      	b.n	800a0a4 <_printf_i+0xfc>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f043 0320 	orr.w	r3, r3, #32
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	2378      	movs	r3, #120	; 0x78
 800a14c:	4828      	ldr	r0, [pc, #160]	; (800a1f0 <_printf_i+0x248>)
 800a14e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a152:	e7e3      	b.n	800a11c <_printf_i+0x174>
 800a154:	0659      	lsls	r1, r3, #25
 800a156:	bf48      	it	mi
 800a158:	b2b6      	uxthmi	r6, r6
 800a15a:	e7e6      	b.n	800a12a <_printf_i+0x182>
 800a15c:	4615      	mov	r5, r2
 800a15e:	e7bb      	b.n	800a0d8 <_printf_i+0x130>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	6826      	ldr	r6, [r4, #0]
 800a164:	6961      	ldr	r1, [r4, #20]
 800a166:	1d18      	adds	r0, r3, #4
 800a168:	6028      	str	r0, [r5, #0]
 800a16a:	0635      	lsls	r5, r6, #24
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	d501      	bpl.n	800a174 <_printf_i+0x1cc>
 800a170:	6019      	str	r1, [r3, #0]
 800a172:	e002      	b.n	800a17a <_printf_i+0x1d2>
 800a174:	0670      	lsls	r0, r6, #25
 800a176:	d5fb      	bpl.n	800a170 <_printf_i+0x1c8>
 800a178:	8019      	strh	r1, [r3, #0]
 800a17a:	2300      	movs	r3, #0
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	4615      	mov	r5, r2
 800a180:	e7ba      	b.n	800a0f8 <_printf_i+0x150>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	1d1a      	adds	r2, r3, #4
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	681d      	ldr	r5, [r3, #0]
 800a18a:	6862      	ldr	r2, [r4, #4]
 800a18c:	2100      	movs	r1, #0
 800a18e:	4628      	mov	r0, r5
 800a190:	f7f6 f846 	bl	8000220 <memchr>
 800a194:	b108      	cbz	r0, 800a19a <_printf_i+0x1f2>
 800a196:	1b40      	subs	r0, r0, r5
 800a198:	6060      	str	r0, [r4, #4]
 800a19a:	6863      	ldr	r3, [r4, #4]
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a4:	e7a8      	b.n	800a0f8 <_printf_i+0x150>
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	47d0      	blx	sl
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d0ab      	beq.n	800a10c <_printf_i+0x164>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	079b      	lsls	r3, r3, #30
 800a1b8:	d413      	bmi.n	800a1e2 <_printf_i+0x23a>
 800a1ba:	68e0      	ldr	r0, [r4, #12]
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	4298      	cmp	r0, r3
 800a1c0:	bfb8      	it	lt
 800a1c2:	4618      	movlt	r0, r3
 800a1c4:	e7a4      	b.n	800a110 <_printf_i+0x168>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	47d0      	blx	sl
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d09b      	beq.n	800a10c <_printf_i+0x164>
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	68e3      	ldr	r3, [r4, #12]
 800a1d8:	9903      	ldr	r1, [sp, #12]
 800a1da:	1a5b      	subs	r3, r3, r1
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dcf2      	bgt.n	800a1c6 <_printf_i+0x21e>
 800a1e0:	e7eb      	b.n	800a1ba <_printf_i+0x212>
 800a1e2:	2500      	movs	r5, #0
 800a1e4:	f104 0619 	add.w	r6, r4, #25
 800a1e8:	e7f5      	b.n	800a1d6 <_printf_i+0x22e>
 800a1ea:	bf00      	nop
 800a1ec:	0800d4f7 	.word	0x0800d4f7
 800a1f0:	0800d508 	.word	0x0800d508

0800a1f4 <_sbrk_r>:
 800a1f4:	b538      	push	{r3, r4, r5, lr}
 800a1f6:	4d06      	ldr	r5, [pc, #24]	; (800a210 <_sbrk_r+0x1c>)
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	4608      	mov	r0, r1
 800a1fe:	602b      	str	r3, [r5, #0]
 800a200:	f7f6 ffb4 	bl	800116c <_sbrk>
 800a204:	1c43      	adds	r3, r0, #1
 800a206:	d102      	bne.n	800a20e <_sbrk_r+0x1a>
 800a208:	682b      	ldr	r3, [r5, #0]
 800a20a:	b103      	cbz	r3, 800a20e <_sbrk_r+0x1a>
 800a20c:	6023      	str	r3, [r4, #0]
 800a20e:	bd38      	pop	{r3, r4, r5, pc}
 800a210:	2000b1b8 	.word	0x2000b1b8

0800a214 <_raise_r>:
 800a214:	291f      	cmp	r1, #31
 800a216:	b538      	push	{r3, r4, r5, lr}
 800a218:	4604      	mov	r4, r0
 800a21a:	460d      	mov	r5, r1
 800a21c:	d904      	bls.n	800a228 <_raise_r+0x14>
 800a21e:	2316      	movs	r3, #22
 800a220:	6003      	str	r3, [r0, #0]
 800a222:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a226:	bd38      	pop	{r3, r4, r5, pc}
 800a228:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a22a:	b112      	cbz	r2, 800a232 <_raise_r+0x1e>
 800a22c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a230:	b94b      	cbnz	r3, 800a246 <_raise_r+0x32>
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f830 	bl	800a298 <_getpid_r>
 800a238:	462a      	mov	r2, r5
 800a23a:	4601      	mov	r1, r0
 800a23c:	4620      	mov	r0, r4
 800a23e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a242:	f000 b817 	b.w	800a274 <_kill_r>
 800a246:	2b01      	cmp	r3, #1
 800a248:	d00a      	beq.n	800a260 <_raise_r+0x4c>
 800a24a:	1c59      	adds	r1, r3, #1
 800a24c:	d103      	bne.n	800a256 <_raise_r+0x42>
 800a24e:	2316      	movs	r3, #22
 800a250:	6003      	str	r3, [r0, #0]
 800a252:	2001      	movs	r0, #1
 800a254:	e7e7      	b.n	800a226 <_raise_r+0x12>
 800a256:	2400      	movs	r4, #0
 800a258:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a25c:	4628      	mov	r0, r5
 800a25e:	4798      	blx	r3
 800a260:	2000      	movs	r0, #0
 800a262:	e7e0      	b.n	800a226 <_raise_r+0x12>

0800a264 <raise>:
 800a264:	4b02      	ldr	r3, [pc, #8]	; (800a270 <raise+0xc>)
 800a266:	4601      	mov	r1, r0
 800a268:	6818      	ldr	r0, [r3, #0]
 800a26a:	f7ff bfd3 	b.w	800a214 <_raise_r>
 800a26e:	bf00      	nop
 800a270:	200000dc 	.word	0x200000dc

0800a274 <_kill_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4d07      	ldr	r5, [pc, #28]	; (800a294 <_kill_r+0x20>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4604      	mov	r4, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	4611      	mov	r1, r2
 800a280:	602b      	str	r3, [r5, #0]
 800a282:	f7f6 ff3b 	bl	80010fc <_kill>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d102      	bne.n	800a290 <_kill_r+0x1c>
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	b103      	cbz	r3, 800a290 <_kill_r+0x1c>
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	bd38      	pop	{r3, r4, r5, pc}
 800a292:	bf00      	nop
 800a294:	2000b1b8 	.word	0x2000b1b8

0800a298 <_getpid_r>:
 800a298:	f7f6 bf2e 	b.w	80010f8 <_getpid>

0800a29c <strstr>:
 800a29c:	780a      	ldrb	r2, [r1, #0]
 800a29e:	b570      	push	{r4, r5, r6, lr}
 800a2a0:	b96a      	cbnz	r2, 800a2be <strstr+0x22>
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d109      	bne.n	800a2bc <strstr+0x20>
 800a2a8:	460c      	mov	r4, r1
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d0f6      	beq.n	800a2a2 <strstr+0x6>
 800a2b4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a2b8:	429e      	cmp	r6, r3
 800a2ba:	d0f7      	beq.n	800a2ac <strstr+0x10>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	7803      	ldrb	r3, [r0, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1ef      	bne.n	800a2a4 <strstr+0x8>
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	e7ec      	b.n	800a2a2 <strstr+0x6>

0800a2c8 <_strtol_l.constprop.0>:
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ce:	d001      	beq.n	800a2d4 <_strtol_l.constprop.0+0xc>
 800a2d0:	2b24      	cmp	r3, #36	; 0x24
 800a2d2:	d906      	bls.n	800a2e2 <_strtol_l.constprop.0+0x1a>
 800a2d4:	f000 ff46 	bl	800b164 <__errno>
 800a2d8:	2316      	movs	r3, #22
 800a2da:	6003      	str	r3, [r0, #0]
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a3c8 <_strtol_l.constprop.0+0x100>
 800a2e6:	460d      	mov	r5, r1
 800a2e8:	462e      	mov	r6, r5
 800a2ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a2f2:	f017 0708 	ands.w	r7, r7, #8
 800a2f6:	d1f7      	bne.n	800a2e8 <_strtol_l.constprop.0+0x20>
 800a2f8:	2c2d      	cmp	r4, #45	; 0x2d
 800a2fa:	d132      	bne.n	800a362 <_strtol_l.constprop.0+0x9a>
 800a2fc:	782c      	ldrb	r4, [r5, #0]
 800a2fe:	2701      	movs	r7, #1
 800a300:	1cb5      	adds	r5, r6, #2
 800a302:	2b00      	cmp	r3, #0
 800a304:	d05b      	beq.n	800a3be <_strtol_l.constprop.0+0xf6>
 800a306:	2b10      	cmp	r3, #16
 800a308:	d109      	bne.n	800a31e <_strtol_l.constprop.0+0x56>
 800a30a:	2c30      	cmp	r4, #48	; 0x30
 800a30c:	d107      	bne.n	800a31e <_strtol_l.constprop.0+0x56>
 800a30e:	782c      	ldrb	r4, [r5, #0]
 800a310:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a314:	2c58      	cmp	r4, #88	; 0x58
 800a316:	d14d      	bne.n	800a3b4 <_strtol_l.constprop.0+0xec>
 800a318:	786c      	ldrb	r4, [r5, #1]
 800a31a:	2310      	movs	r3, #16
 800a31c:	3502      	adds	r5, #2
 800a31e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a322:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a326:	f04f 0c00 	mov.w	ip, #0
 800a32a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a32e:	4666      	mov	r6, ip
 800a330:	fb03 8a19 	mls	sl, r3, r9, r8
 800a334:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a338:	f1be 0f09 	cmp.w	lr, #9
 800a33c:	d816      	bhi.n	800a36c <_strtol_l.constprop.0+0xa4>
 800a33e:	4674      	mov	r4, lr
 800a340:	42a3      	cmp	r3, r4
 800a342:	dd24      	ble.n	800a38e <_strtol_l.constprop.0+0xc6>
 800a344:	f1bc 0f00 	cmp.w	ip, #0
 800a348:	db1e      	blt.n	800a388 <_strtol_l.constprop.0+0xc0>
 800a34a:	45b1      	cmp	r9, r6
 800a34c:	d31c      	bcc.n	800a388 <_strtol_l.constprop.0+0xc0>
 800a34e:	d101      	bne.n	800a354 <_strtol_l.constprop.0+0x8c>
 800a350:	45a2      	cmp	sl, r4
 800a352:	db19      	blt.n	800a388 <_strtol_l.constprop.0+0xc0>
 800a354:	fb06 4603 	mla	r6, r6, r3, r4
 800a358:	f04f 0c01 	mov.w	ip, #1
 800a35c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a360:	e7e8      	b.n	800a334 <_strtol_l.constprop.0+0x6c>
 800a362:	2c2b      	cmp	r4, #43	; 0x2b
 800a364:	bf04      	itt	eq
 800a366:	782c      	ldrbeq	r4, [r5, #0]
 800a368:	1cb5      	addeq	r5, r6, #2
 800a36a:	e7ca      	b.n	800a302 <_strtol_l.constprop.0+0x3a>
 800a36c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a370:	f1be 0f19 	cmp.w	lr, #25
 800a374:	d801      	bhi.n	800a37a <_strtol_l.constprop.0+0xb2>
 800a376:	3c37      	subs	r4, #55	; 0x37
 800a378:	e7e2      	b.n	800a340 <_strtol_l.constprop.0+0x78>
 800a37a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a37e:	f1be 0f19 	cmp.w	lr, #25
 800a382:	d804      	bhi.n	800a38e <_strtol_l.constprop.0+0xc6>
 800a384:	3c57      	subs	r4, #87	; 0x57
 800a386:	e7db      	b.n	800a340 <_strtol_l.constprop.0+0x78>
 800a388:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a38c:	e7e6      	b.n	800a35c <_strtol_l.constprop.0+0x94>
 800a38e:	f1bc 0f00 	cmp.w	ip, #0
 800a392:	da05      	bge.n	800a3a0 <_strtol_l.constprop.0+0xd8>
 800a394:	2322      	movs	r3, #34	; 0x22
 800a396:	6003      	str	r3, [r0, #0]
 800a398:	4646      	mov	r6, r8
 800a39a:	b942      	cbnz	r2, 800a3ae <_strtol_l.constprop.0+0xe6>
 800a39c:	4630      	mov	r0, r6
 800a39e:	e79e      	b.n	800a2de <_strtol_l.constprop.0+0x16>
 800a3a0:	b107      	cbz	r7, 800a3a4 <_strtol_l.constprop.0+0xdc>
 800a3a2:	4276      	negs	r6, r6
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d0f9      	beq.n	800a39c <_strtol_l.constprop.0+0xd4>
 800a3a8:	f1bc 0f00 	cmp.w	ip, #0
 800a3ac:	d000      	beq.n	800a3b0 <_strtol_l.constprop.0+0xe8>
 800a3ae:	1e69      	subs	r1, r5, #1
 800a3b0:	6011      	str	r1, [r2, #0]
 800a3b2:	e7f3      	b.n	800a39c <_strtol_l.constprop.0+0xd4>
 800a3b4:	2430      	movs	r4, #48	; 0x30
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1b1      	bne.n	800a31e <_strtol_l.constprop.0+0x56>
 800a3ba:	2308      	movs	r3, #8
 800a3bc:	e7af      	b.n	800a31e <_strtol_l.constprop.0+0x56>
 800a3be:	2c30      	cmp	r4, #48	; 0x30
 800a3c0:	d0a5      	beq.n	800a30e <_strtol_l.constprop.0+0x46>
 800a3c2:	230a      	movs	r3, #10
 800a3c4:	e7ab      	b.n	800a31e <_strtol_l.constprop.0+0x56>
 800a3c6:	bf00      	nop
 800a3c8:	0800d3cd 	.word	0x0800d3cd

0800a3cc <strtol>:
 800a3cc:	4613      	mov	r3, r2
 800a3ce:	460a      	mov	r2, r1
 800a3d0:	4601      	mov	r1, r0
 800a3d2:	4802      	ldr	r0, [pc, #8]	; (800a3dc <strtol+0x10>)
 800a3d4:	6800      	ldr	r0, [r0, #0]
 800a3d6:	f7ff bf77 	b.w	800a2c8 <_strtol_l.constprop.0>
 800a3da:	bf00      	nop
 800a3dc:	200000dc 	.word	0x200000dc

0800a3e0 <sbrk>:
 800a3e0:	4b02      	ldr	r3, [pc, #8]	; (800a3ec <sbrk+0xc>)
 800a3e2:	4601      	mov	r1, r0
 800a3e4:	6818      	ldr	r0, [r3, #0]
 800a3e6:	f7ff bf05 	b.w	800a1f4 <_sbrk_r>
 800a3ea:	bf00      	nop
 800a3ec:	200000dc 	.word	0x200000dc

0800a3f0 <_vasiprintf_r>:
 800a3f0:	b530      	push	{r4, r5, lr}
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	4909      	ldr	r1, [pc, #36]	; (800a41c <_vasiprintf_r+0x2c>)
 800a3f6:	b09b      	sub	sp, #108	; 0x6c
 800a3f8:	2400      	movs	r4, #0
 800a3fa:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800a3fe:	4669      	mov	r1, sp
 800a400:	9400      	str	r4, [sp, #0]
 800a402:	9402      	str	r4, [sp, #8]
 800a404:	9405      	str	r4, [sp, #20]
 800a406:	f7ff f98b 	bl	8009720 <_svfiprintf_r>
 800a40a:	2800      	cmp	r0, #0
 800a40c:	bfa1      	itttt	ge
 800a40e:	9b00      	ldrge	r3, [sp, #0]
 800a410:	701c      	strbge	r4, [r3, #0]
 800a412:	9b04      	ldrge	r3, [sp, #16]
 800a414:	602b      	strge	r3, [r5, #0]
 800a416:	b01b      	add	sp, #108	; 0x6c
 800a418:	bd30      	pop	{r4, r5, pc}
 800a41a:	bf00      	nop
 800a41c:	ffff0288 	.word	0xffff0288

0800a420 <vasiprintf>:
 800a420:	4613      	mov	r3, r2
 800a422:	460a      	mov	r2, r1
 800a424:	4601      	mov	r1, r0
 800a426:	4802      	ldr	r0, [pc, #8]	; (800a430 <vasiprintf+0x10>)
 800a428:	6800      	ldr	r0, [r0, #0]
 800a42a:	f7ff bfe1 	b.w	800a3f0 <_vasiprintf_r>
 800a42e:	bf00      	nop
 800a430:	200000dc 	.word	0x200000dc

0800a434 <__assert_func>:
 800a434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a436:	4614      	mov	r4, r2
 800a438:	461a      	mov	r2, r3
 800a43a:	4b09      	ldr	r3, [pc, #36]	; (800a460 <__assert_func+0x2c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4605      	mov	r5, r0
 800a440:	68d8      	ldr	r0, [r3, #12]
 800a442:	b14c      	cbz	r4, 800a458 <__assert_func+0x24>
 800a444:	4b07      	ldr	r3, [pc, #28]	; (800a464 <__assert_func+0x30>)
 800a446:	9100      	str	r1, [sp, #0]
 800a448:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a44c:	4906      	ldr	r1, [pc, #24]	; (800a468 <__assert_func+0x34>)
 800a44e:	462b      	mov	r3, r5
 800a450:	f000 ff64 	bl	800b31c <fiprintf>
 800a454:	f7fe ff44 	bl	80092e0 <abort>
 800a458:	4b04      	ldr	r3, [pc, #16]	; (800a46c <__assert_func+0x38>)
 800a45a:	461c      	mov	r4, r3
 800a45c:	e7f3      	b.n	800a446 <__assert_func+0x12>
 800a45e:	bf00      	nop
 800a460:	200000dc 	.word	0x200000dc
 800a464:	0800d519 	.word	0x0800d519
 800a468:	0800d526 	.word	0x0800d526
 800a46c:	0800d554 	.word	0x0800d554

0800a470 <quorem>:
 800a470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a474:	6903      	ldr	r3, [r0, #16]
 800a476:	690c      	ldr	r4, [r1, #16]
 800a478:	42a3      	cmp	r3, r4
 800a47a:	4607      	mov	r7, r0
 800a47c:	f2c0 8081 	blt.w	800a582 <quorem+0x112>
 800a480:	3c01      	subs	r4, #1
 800a482:	f101 0814 	add.w	r8, r1, #20
 800a486:	f100 0514 	add.w	r5, r0, #20
 800a48a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a48e:	9301      	str	r3, [sp, #4]
 800a490:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a494:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a498:	3301      	adds	r3, #1
 800a49a:	429a      	cmp	r2, r3
 800a49c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4a8:	d331      	bcc.n	800a50e <quorem+0x9e>
 800a4aa:	f04f 0e00 	mov.w	lr, #0
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	46ac      	mov	ip, r5
 800a4b2:	46f2      	mov	sl, lr
 800a4b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4b8:	b293      	uxth	r3, r2
 800a4ba:	fb06 e303 	mla	r3, r6, r3, lr
 800a4be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	ebaa 0303 	sub.w	r3, sl, r3
 800a4c8:	f8dc a000 	ldr.w	sl, [ip]
 800a4cc:	0c12      	lsrs	r2, r2, #16
 800a4ce:	fa13 f38a 	uxtah	r3, r3, sl
 800a4d2:	fb06 e202 	mla	r2, r6, r2, lr
 800a4d6:	9300      	str	r3, [sp, #0]
 800a4d8:	9b00      	ldr	r3, [sp, #0]
 800a4da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4de:	b292      	uxth	r2, r2
 800a4e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a4ec:	4581      	cmp	r9, r0
 800a4ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4f2:	f84c 3b04 	str.w	r3, [ip], #4
 800a4f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a4fa:	d2db      	bcs.n	800a4b4 <quorem+0x44>
 800a4fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a500:	b92b      	cbnz	r3, 800a50e <quorem+0x9e>
 800a502:	9b01      	ldr	r3, [sp, #4]
 800a504:	3b04      	subs	r3, #4
 800a506:	429d      	cmp	r5, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	d32e      	bcc.n	800a56a <quorem+0xfa>
 800a50c:	613c      	str	r4, [r7, #16]
 800a50e:	4638      	mov	r0, r7
 800a510:	f001 f9cc 	bl	800b8ac <__mcmp>
 800a514:	2800      	cmp	r0, #0
 800a516:	db24      	blt.n	800a562 <quorem+0xf2>
 800a518:	3601      	adds	r6, #1
 800a51a:	4628      	mov	r0, r5
 800a51c:	f04f 0c00 	mov.w	ip, #0
 800a520:	f858 2b04 	ldr.w	r2, [r8], #4
 800a524:	f8d0 e000 	ldr.w	lr, [r0]
 800a528:	b293      	uxth	r3, r2
 800a52a:	ebac 0303 	sub.w	r3, ip, r3
 800a52e:	0c12      	lsrs	r2, r2, #16
 800a530:	fa13 f38e 	uxtah	r3, r3, lr
 800a534:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a542:	45c1      	cmp	r9, r8
 800a544:	f840 3b04 	str.w	r3, [r0], #4
 800a548:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a54c:	d2e8      	bcs.n	800a520 <quorem+0xb0>
 800a54e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a556:	b922      	cbnz	r2, 800a562 <quorem+0xf2>
 800a558:	3b04      	subs	r3, #4
 800a55a:	429d      	cmp	r5, r3
 800a55c:	461a      	mov	r2, r3
 800a55e:	d30a      	bcc.n	800a576 <quorem+0x106>
 800a560:	613c      	str	r4, [r7, #16]
 800a562:	4630      	mov	r0, r6
 800a564:	b003      	add	sp, #12
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	6812      	ldr	r2, [r2, #0]
 800a56c:	3b04      	subs	r3, #4
 800a56e:	2a00      	cmp	r2, #0
 800a570:	d1cc      	bne.n	800a50c <quorem+0x9c>
 800a572:	3c01      	subs	r4, #1
 800a574:	e7c7      	b.n	800a506 <quorem+0x96>
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	3b04      	subs	r3, #4
 800a57a:	2a00      	cmp	r2, #0
 800a57c:	d1f0      	bne.n	800a560 <quorem+0xf0>
 800a57e:	3c01      	subs	r4, #1
 800a580:	e7eb      	b.n	800a55a <quorem+0xea>
 800a582:	2000      	movs	r0, #0
 800a584:	e7ee      	b.n	800a564 <quorem+0xf4>
	...

0800a588 <_dtoa_r>:
 800a588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a58c:	ed2d 8b04 	vpush	{d8-d9}
 800a590:	ec57 6b10 	vmov	r6, r7, d0
 800a594:	b093      	sub	sp, #76	; 0x4c
 800a596:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a598:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a59c:	9106      	str	r1, [sp, #24]
 800a59e:	ee10 aa10 	vmov	sl, s0
 800a5a2:	4604      	mov	r4, r0
 800a5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a5a8:	46bb      	mov	fp, r7
 800a5aa:	b975      	cbnz	r5, 800a5ca <_dtoa_r+0x42>
 800a5ac:	2010      	movs	r0, #16
 800a5ae:	f7fe fee7 	bl	8009380 <malloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a5b6:	b920      	cbnz	r0, 800a5c2 <_dtoa_r+0x3a>
 800a5b8:	4ba7      	ldr	r3, [pc, #668]	; (800a858 <_dtoa_r+0x2d0>)
 800a5ba:	21ea      	movs	r1, #234	; 0xea
 800a5bc:	48a7      	ldr	r0, [pc, #668]	; (800a85c <_dtoa_r+0x2d4>)
 800a5be:	f7ff ff39 	bl	800a434 <__assert_func>
 800a5c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5c6:	6005      	str	r5, [r0, #0]
 800a5c8:	60c5      	str	r5, [r0, #12]
 800a5ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5cc:	6819      	ldr	r1, [r3, #0]
 800a5ce:	b151      	cbz	r1, 800a5e6 <_dtoa_r+0x5e>
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	604a      	str	r2, [r1, #4]
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	4093      	lsls	r3, r2
 800a5d8:	608b      	str	r3, [r1, #8]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 ff24 	bl	800b428 <_Bfree>
 800a5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	1e3b      	subs	r3, r7, #0
 800a5e8:	bfaa      	itet	ge
 800a5ea:	2300      	movge	r3, #0
 800a5ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a5f0:	f8c8 3000 	strge.w	r3, [r8]
 800a5f4:	4b9a      	ldr	r3, [pc, #616]	; (800a860 <_dtoa_r+0x2d8>)
 800a5f6:	bfbc      	itt	lt
 800a5f8:	2201      	movlt	r2, #1
 800a5fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a5fe:	ea33 030b 	bics.w	r3, r3, fp
 800a602:	d11b      	bne.n	800a63c <_dtoa_r+0xb4>
 800a604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a606:	f242 730f 	movw	r3, #9999	; 0x270f
 800a60a:	6013      	str	r3, [r2, #0]
 800a60c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a610:	4333      	orrs	r3, r6
 800a612:	f000 8592 	beq.w	800b13a <_dtoa_r+0xbb2>
 800a616:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a618:	b963      	cbnz	r3, 800a634 <_dtoa_r+0xac>
 800a61a:	4b92      	ldr	r3, [pc, #584]	; (800a864 <_dtoa_r+0x2dc>)
 800a61c:	e022      	b.n	800a664 <_dtoa_r+0xdc>
 800a61e:	4b92      	ldr	r3, [pc, #584]	; (800a868 <_dtoa_r+0x2e0>)
 800a620:	9301      	str	r3, [sp, #4]
 800a622:	3308      	adds	r3, #8
 800a624:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a626:	6013      	str	r3, [r2, #0]
 800a628:	9801      	ldr	r0, [sp, #4]
 800a62a:	b013      	add	sp, #76	; 0x4c
 800a62c:	ecbd 8b04 	vpop	{d8-d9}
 800a630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a634:	4b8b      	ldr	r3, [pc, #556]	; (800a864 <_dtoa_r+0x2dc>)
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	3303      	adds	r3, #3
 800a63a:	e7f3      	b.n	800a624 <_dtoa_r+0x9c>
 800a63c:	2200      	movs	r2, #0
 800a63e:	2300      	movs	r3, #0
 800a640:	4650      	mov	r0, sl
 800a642:	4659      	mov	r1, fp
 800a644:	f7f6 fa60 	bl	8000b08 <__aeabi_dcmpeq>
 800a648:	ec4b ab19 	vmov	d9, sl, fp
 800a64c:	4680      	mov	r8, r0
 800a64e:	b158      	cbz	r0, 800a668 <_dtoa_r+0xe0>
 800a650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a652:	2301      	movs	r3, #1
 800a654:	6013      	str	r3, [r2, #0]
 800a656:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a658:	2b00      	cmp	r3, #0
 800a65a:	f000 856b 	beq.w	800b134 <_dtoa_r+0xbac>
 800a65e:	4883      	ldr	r0, [pc, #524]	; (800a86c <_dtoa_r+0x2e4>)
 800a660:	6018      	str	r0, [r3, #0]
 800a662:	1e43      	subs	r3, r0, #1
 800a664:	9301      	str	r3, [sp, #4]
 800a666:	e7df      	b.n	800a628 <_dtoa_r+0xa0>
 800a668:	ec4b ab10 	vmov	d0, sl, fp
 800a66c:	aa10      	add	r2, sp, #64	; 0x40
 800a66e:	a911      	add	r1, sp, #68	; 0x44
 800a670:	4620      	mov	r0, r4
 800a672:	f001 f9c1 	bl	800b9f8 <__d2b>
 800a676:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a67a:	ee08 0a10 	vmov	s16, r0
 800a67e:	2d00      	cmp	r5, #0
 800a680:	f000 8084 	beq.w	800a78c <_dtoa_r+0x204>
 800a684:	ee19 3a90 	vmov	r3, s19
 800a688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a68c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a690:	4656      	mov	r6, sl
 800a692:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a696:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a69a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a69e:	4b74      	ldr	r3, [pc, #464]	; (800a870 <_dtoa_r+0x2e8>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	4630      	mov	r0, r6
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	f7f5 fe0f 	bl	80002c8 <__aeabi_dsub>
 800a6aa:	a365      	add	r3, pc, #404	; (adr r3, 800a840 <_dtoa_r+0x2b8>)
 800a6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b0:	f7f5 ffc2 	bl	8000638 <__aeabi_dmul>
 800a6b4:	a364      	add	r3, pc, #400	; (adr r3, 800a848 <_dtoa_r+0x2c0>)
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	f7f5 fe07 	bl	80002cc <__adddf3>
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4628      	mov	r0, r5
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	f7f5 ff4e 	bl	8000564 <__aeabi_i2d>
 800a6c8:	a361      	add	r3, pc, #388	; (adr r3, 800a850 <_dtoa_r+0x2c8>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 ffb3 	bl	8000638 <__aeabi_dmul>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f5 fdf7 	bl	80002cc <__adddf3>
 800a6de:	4606      	mov	r6, r0
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	f7f6 fa59 	bl	8000b98 <__aeabi_d2iz>
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	9000      	str	r0, [sp, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	4639      	mov	r1, r7
 800a6f0:	f7f6 fa14 	bl	8000b1c <__aeabi_dcmplt>
 800a6f4:	b150      	cbz	r0, 800a70c <_dtoa_r+0x184>
 800a6f6:	9800      	ldr	r0, [sp, #0]
 800a6f8:	f7f5 ff34 	bl	8000564 <__aeabi_i2d>
 800a6fc:	4632      	mov	r2, r6
 800a6fe:	463b      	mov	r3, r7
 800a700:	f7f6 fa02 	bl	8000b08 <__aeabi_dcmpeq>
 800a704:	b910      	cbnz	r0, 800a70c <_dtoa_r+0x184>
 800a706:	9b00      	ldr	r3, [sp, #0]
 800a708:	3b01      	subs	r3, #1
 800a70a:	9300      	str	r3, [sp, #0]
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	2b16      	cmp	r3, #22
 800a710:	d85a      	bhi.n	800a7c8 <_dtoa_r+0x240>
 800a712:	9a00      	ldr	r2, [sp, #0]
 800a714:	4b57      	ldr	r3, [pc, #348]	; (800a874 <_dtoa_r+0x2ec>)
 800a716:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71e:	ec51 0b19 	vmov	r0, r1, d9
 800a722:	f7f6 f9fb 	bl	8000b1c <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d050      	beq.n	800a7cc <_dtoa_r+0x244>
 800a72a:	9b00      	ldr	r3, [sp, #0]
 800a72c:	3b01      	subs	r3, #1
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	930b      	str	r3, [sp, #44]	; 0x2c
 800a734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a736:	1b5d      	subs	r5, r3, r5
 800a738:	1e6b      	subs	r3, r5, #1
 800a73a:	9305      	str	r3, [sp, #20]
 800a73c:	bf45      	ittet	mi
 800a73e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a742:	9304      	strmi	r3, [sp, #16]
 800a744:	2300      	movpl	r3, #0
 800a746:	2300      	movmi	r3, #0
 800a748:	bf4c      	ite	mi
 800a74a:	9305      	strmi	r3, [sp, #20]
 800a74c:	9304      	strpl	r3, [sp, #16]
 800a74e:	9b00      	ldr	r3, [sp, #0]
 800a750:	2b00      	cmp	r3, #0
 800a752:	db3d      	blt.n	800a7d0 <_dtoa_r+0x248>
 800a754:	9b05      	ldr	r3, [sp, #20]
 800a756:	9a00      	ldr	r2, [sp, #0]
 800a758:	920a      	str	r2, [sp, #40]	; 0x28
 800a75a:	4413      	add	r3, r2
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	2300      	movs	r3, #0
 800a760:	9307      	str	r3, [sp, #28]
 800a762:	9b06      	ldr	r3, [sp, #24]
 800a764:	2b09      	cmp	r3, #9
 800a766:	f200 8089 	bhi.w	800a87c <_dtoa_r+0x2f4>
 800a76a:	2b05      	cmp	r3, #5
 800a76c:	bfc4      	itt	gt
 800a76e:	3b04      	subgt	r3, #4
 800a770:	9306      	strgt	r3, [sp, #24]
 800a772:	9b06      	ldr	r3, [sp, #24]
 800a774:	f1a3 0302 	sub.w	r3, r3, #2
 800a778:	bfcc      	ite	gt
 800a77a:	2500      	movgt	r5, #0
 800a77c:	2501      	movle	r5, #1
 800a77e:	2b03      	cmp	r3, #3
 800a780:	f200 8087 	bhi.w	800a892 <_dtoa_r+0x30a>
 800a784:	e8df f003 	tbb	[pc, r3]
 800a788:	59383a2d 	.word	0x59383a2d
 800a78c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a790:	441d      	add	r5, r3
 800a792:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a796:	2b20      	cmp	r3, #32
 800a798:	bfc1      	itttt	gt
 800a79a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a79e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a7a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a7a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a7aa:	bfda      	itte	le
 800a7ac:	f1c3 0320 	rsble	r3, r3, #32
 800a7b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a7b4:	4318      	orrgt	r0, r3
 800a7b6:	f7f5 fec5 	bl	8000544 <__aeabi_ui2d>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4606      	mov	r6, r0
 800a7be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a7c2:	3d01      	subs	r5, #1
 800a7c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a7c6:	e76a      	b.n	800a69e <_dtoa_r+0x116>
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e7b2      	b.n	800a732 <_dtoa_r+0x1aa>
 800a7cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7ce:	e7b1      	b.n	800a734 <_dtoa_r+0x1ac>
 800a7d0:	9b04      	ldr	r3, [sp, #16]
 800a7d2:	9a00      	ldr	r2, [sp, #0]
 800a7d4:	1a9b      	subs	r3, r3, r2
 800a7d6:	9304      	str	r3, [sp, #16]
 800a7d8:	4253      	negs	r3, r2
 800a7da:	9307      	str	r3, [sp, #28]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	930a      	str	r3, [sp, #40]	; 0x28
 800a7e0:	e7bf      	b.n	800a762 <_dtoa_r+0x1da>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9308      	str	r3, [sp, #32]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dc55      	bgt.n	800a898 <_dtoa_r+0x310>
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a7f6:	e00c      	b.n	800a812 <_dtoa_r+0x28a>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e7f3      	b.n	800a7e4 <_dtoa_r+0x25c>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a800:	9308      	str	r3, [sp, #32]
 800a802:	9b00      	ldr	r3, [sp, #0]
 800a804:	4413      	add	r3, r2
 800a806:	9302      	str	r3, [sp, #8]
 800a808:	3301      	adds	r3, #1
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	9303      	str	r3, [sp, #12]
 800a80e:	bfb8      	it	lt
 800a810:	2301      	movlt	r3, #1
 800a812:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a814:	2200      	movs	r2, #0
 800a816:	6042      	str	r2, [r0, #4]
 800a818:	2204      	movs	r2, #4
 800a81a:	f102 0614 	add.w	r6, r2, #20
 800a81e:	429e      	cmp	r6, r3
 800a820:	6841      	ldr	r1, [r0, #4]
 800a822:	d93d      	bls.n	800a8a0 <_dtoa_r+0x318>
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fdbf 	bl	800b3a8 <_Balloc>
 800a82a:	9001      	str	r0, [sp, #4]
 800a82c:	2800      	cmp	r0, #0
 800a82e:	d13b      	bne.n	800a8a8 <_dtoa_r+0x320>
 800a830:	4b11      	ldr	r3, [pc, #68]	; (800a878 <_dtoa_r+0x2f0>)
 800a832:	4602      	mov	r2, r0
 800a834:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a838:	e6c0      	b.n	800a5bc <_dtoa_r+0x34>
 800a83a:	2301      	movs	r3, #1
 800a83c:	e7df      	b.n	800a7fe <_dtoa_r+0x276>
 800a83e:	bf00      	nop
 800a840:	636f4361 	.word	0x636f4361
 800a844:	3fd287a7 	.word	0x3fd287a7
 800a848:	8b60c8b3 	.word	0x8b60c8b3
 800a84c:	3fc68a28 	.word	0x3fc68a28
 800a850:	509f79fb 	.word	0x509f79fb
 800a854:	3fd34413 	.word	0x3fd34413
 800a858:	0800d562 	.word	0x0800d562
 800a85c:	0800d579 	.word	0x0800d579
 800a860:	7ff00000 	.word	0x7ff00000
 800a864:	0800d55e 	.word	0x0800d55e
 800a868:	0800d555 	.word	0x0800d555
 800a86c:	0800d4f6 	.word	0x0800d4f6
 800a870:	3ff80000 	.word	0x3ff80000
 800a874:	0800d6d0 	.word	0x0800d6d0
 800a878:	0800d5d4 	.word	0x0800d5d4
 800a87c:	2501      	movs	r5, #1
 800a87e:	2300      	movs	r3, #0
 800a880:	9306      	str	r3, [sp, #24]
 800a882:	9508      	str	r5, [sp, #32]
 800a884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a888:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a88c:	2200      	movs	r2, #0
 800a88e:	2312      	movs	r3, #18
 800a890:	e7b0      	b.n	800a7f4 <_dtoa_r+0x26c>
 800a892:	2301      	movs	r3, #1
 800a894:	9308      	str	r3, [sp, #32]
 800a896:	e7f5      	b.n	800a884 <_dtoa_r+0x2fc>
 800a898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a89e:	e7b8      	b.n	800a812 <_dtoa_r+0x28a>
 800a8a0:	3101      	adds	r1, #1
 800a8a2:	6041      	str	r1, [r0, #4]
 800a8a4:	0052      	lsls	r2, r2, #1
 800a8a6:	e7b8      	b.n	800a81a <_dtoa_r+0x292>
 800a8a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8aa:	9a01      	ldr	r2, [sp, #4]
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	9b03      	ldr	r3, [sp, #12]
 800a8b0:	2b0e      	cmp	r3, #14
 800a8b2:	f200 809d 	bhi.w	800a9f0 <_dtoa_r+0x468>
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	f000 809a 	beq.w	800a9f0 <_dtoa_r+0x468>
 800a8bc:	9b00      	ldr	r3, [sp, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	dd32      	ble.n	800a928 <_dtoa_r+0x3a0>
 800a8c2:	4ab7      	ldr	r2, [pc, #732]	; (800aba0 <_dtoa_r+0x618>)
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a8cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a8d0:	9b00      	ldr	r3, [sp, #0]
 800a8d2:	05d8      	lsls	r0, r3, #23
 800a8d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a8d8:	d516      	bpl.n	800a908 <_dtoa_r+0x380>
 800a8da:	4bb2      	ldr	r3, [pc, #712]	; (800aba4 <_dtoa_r+0x61c>)
 800a8dc:	ec51 0b19 	vmov	r0, r1, d9
 800a8e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8e4:	f7f5 ffd2 	bl	800088c <__aeabi_ddiv>
 800a8e8:	f007 070f 	and.w	r7, r7, #15
 800a8ec:	4682      	mov	sl, r0
 800a8ee:	468b      	mov	fp, r1
 800a8f0:	2503      	movs	r5, #3
 800a8f2:	4eac      	ldr	r6, [pc, #688]	; (800aba4 <_dtoa_r+0x61c>)
 800a8f4:	b957      	cbnz	r7, 800a90c <_dtoa_r+0x384>
 800a8f6:	4642      	mov	r2, r8
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	4650      	mov	r0, sl
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	f7f5 ffc5 	bl	800088c <__aeabi_ddiv>
 800a902:	4682      	mov	sl, r0
 800a904:	468b      	mov	fp, r1
 800a906:	e028      	b.n	800a95a <_dtoa_r+0x3d2>
 800a908:	2502      	movs	r5, #2
 800a90a:	e7f2      	b.n	800a8f2 <_dtoa_r+0x36a>
 800a90c:	07f9      	lsls	r1, r7, #31
 800a90e:	d508      	bpl.n	800a922 <_dtoa_r+0x39a>
 800a910:	4640      	mov	r0, r8
 800a912:	4649      	mov	r1, r9
 800a914:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a918:	f7f5 fe8e 	bl	8000638 <__aeabi_dmul>
 800a91c:	3501      	adds	r5, #1
 800a91e:	4680      	mov	r8, r0
 800a920:	4689      	mov	r9, r1
 800a922:	107f      	asrs	r7, r7, #1
 800a924:	3608      	adds	r6, #8
 800a926:	e7e5      	b.n	800a8f4 <_dtoa_r+0x36c>
 800a928:	f000 809b 	beq.w	800aa62 <_dtoa_r+0x4da>
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	4f9d      	ldr	r7, [pc, #628]	; (800aba4 <_dtoa_r+0x61c>)
 800a930:	425e      	negs	r6, r3
 800a932:	4b9b      	ldr	r3, [pc, #620]	; (800aba0 <_dtoa_r+0x618>)
 800a934:	f006 020f 	and.w	r2, r6, #15
 800a938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	ec51 0b19 	vmov	r0, r1, d9
 800a944:	f7f5 fe78 	bl	8000638 <__aeabi_dmul>
 800a948:	1136      	asrs	r6, r6, #4
 800a94a:	4682      	mov	sl, r0
 800a94c:	468b      	mov	fp, r1
 800a94e:	2300      	movs	r3, #0
 800a950:	2502      	movs	r5, #2
 800a952:	2e00      	cmp	r6, #0
 800a954:	d17a      	bne.n	800aa4c <_dtoa_r+0x4c4>
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1d3      	bne.n	800a902 <_dtoa_r+0x37a>
 800a95a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	f000 8082 	beq.w	800aa66 <_dtoa_r+0x4de>
 800a962:	4b91      	ldr	r3, [pc, #580]	; (800aba8 <_dtoa_r+0x620>)
 800a964:	2200      	movs	r2, #0
 800a966:	4650      	mov	r0, sl
 800a968:	4659      	mov	r1, fp
 800a96a:	f7f6 f8d7 	bl	8000b1c <__aeabi_dcmplt>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d079      	beq.n	800aa66 <_dtoa_r+0x4de>
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d076      	beq.n	800aa66 <_dtoa_r+0x4de>
 800a978:	9b02      	ldr	r3, [sp, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dd36      	ble.n	800a9ec <_dtoa_r+0x464>
 800a97e:	9b00      	ldr	r3, [sp, #0]
 800a980:	4650      	mov	r0, sl
 800a982:	4659      	mov	r1, fp
 800a984:	1e5f      	subs	r7, r3, #1
 800a986:	2200      	movs	r2, #0
 800a988:	4b88      	ldr	r3, [pc, #544]	; (800abac <_dtoa_r+0x624>)
 800a98a:	f7f5 fe55 	bl	8000638 <__aeabi_dmul>
 800a98e:	9e02      	ldr	r6, [sp, #8]
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	3501      	adds	r5, #1
 800a996:	4628      	mov	r0, r5
 800a998:	f7f5 fde4 	bl	8000564 <__aeabi_i2d>
 800a99c:	4652      	mov	r2, sl
 800a99e:	465b      	mov	r3, fp
 800a9a0:	f7f5 fe4a 	bl	8000638 <__aeabi_dmul>
 800a9a4:	4b82      	ldr	r3, [pc, #520]	; (800abb0 <_dtoa_r+0x628>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f7f5 fc90 	bl	80002cc <__adddf3>
 800a9ac:	46d0      	mov	r8, sl
 800a9ae:	46d9      	mov	r9, fp
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a9b6:	2e00      	cmp	r6, #0
 800a9b8:	d158      	bne.n	800aa6c <_dtoa_r+0x4e4>
 800a9ba:	4b7e      	ldr	r3, [pc, #504]	; (800abb4 <_dtoa_r+0x62c>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4640      	mov	r0, r8
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	f7f5 fc81 	bl	80002c8 <__aeabi_dsub>
 800a9c6:	4652      	mov	r2, sl
 800a9c8:	465b      	mov	r3, fp
 800a9ca:	4680      	mov	r8, r0
 800a9cc:	4689      	mov	r9, r1
 800a9ce:	f7f6 f8c3 	bl	8000b58 <__aeabi_dcmpgt>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	f040 8295 	bne.w	800af02 <_dtoa_r+0x97a>
 800a9d8:	4652      	mov	r2, sl
 800a9da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a9de:	4640      	mov	r0, r8
 800a9e0:	4649      	mov	r1, r9
 800a9e2:	f7f6 f89b 	bl	8000b1c <__aeabi_dcmplt>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f040 8289 	bne.w	800aefe <_dtoa_r+0x976>
 800a9ec:	ec5b ab19 	vmov	sl, fp, d9
 800a9f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	f2c0 8148 	blt.w	800ac88 <_dtoa_r+0x700>
 800a9f8:	9a00      	ldr	r2, [sp, #0]
 800a9fa:	2a0e      	cmp	r2, #14
 800a9fc:	f300 8144 	bgt.w	800ac88 <_dtoa_r+0x700>
 800aa00:	4b67      	ldr	r3, [pc, #412]	; (800aba0 <_dtoa_r+0x618>)
 800aa02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f280 80d5 	bge.w	800abbc <_dtoa_r+0x634>
 800aa12:	9b03      	ldr	r3, [sp, #12]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f300 80d1 	bgt.w	800abbc <_dtoa_r+0x634>
 800aa1a:	f040 826f 	bne.w	800aefc <_dtoa_r+0x974>
 800aa1e:	4b65      	ldr	r3, [pc, #404]	; (800abb4 <_dtoa_r+0x62c>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	4640      	mov	r0, r8
 800aa24:	4649      	mov	r1, r9
 800aa26:	f7f5 fe07 	bl	8000638 <__aeabi_dmul>
 800aa2a:	4652      	mov	r2, sl
 800aa2c:	465b      	mov	r3, fp
 800aa2e:	f7f6 f889 	bl	8000b44 <__aeabi_dcmpge>
 800aa32:	9e03      	ldr	r6, [sp, #12]
 800aa34:	4637      	mov	r7, r6
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f040 8245 	bne.w	800aec6 <_dtoa_r+0x93e>
 800aa3c:	9d01      	ldr	r5, [sp, #4]
 800aa3e:	2331      	movs	r3, #49	; 0x31
 800aa40:	f805 3b01 	strb.w	r3, [r5], #1
 800aa44:	9b00      	ldr	r3, [sp, #0]
 800aa46:	3301      	adds	r3, #1
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	e240      	b.n	800aece <_dtoa_r+0x946>
 800aa4c:	07f2      	lsls	r2, r6, #31
 800aa4e:	d505      	bpl.n	800aa5c <_dtoa_r+0x4d4>
 800aa50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa54:	f7f5 fdf0 	bl	8000638 <__aeabi_dmul>
 800aa58:	3501      	adds	r5, #1
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	1076      	asrs	r6, r6, #1
 800aa5e:	3708      	adds	r7, #8
 800aa60:	e777      	b.n	800a952 <_dtoa_r+0x3ca>
 800aa62:	2502      	movs	r5, #2
 800aa64:	e779      	b.n	800a95a <_dtoa_r+0x3d2>
 800aa66:	9f00      	ldr	r7, [sp, #0]
 800aa68:	9e03      	ldr	r6, [sp, #12]
 800aa6a:	e794      	b.n	800a996 <_dtoa_r+0x40e>
 800aa6c:	9901      	ldr	r1, [sp, #4]
 800aa6e:	4b4c      	ldr	r3, [pc, #304]	; (800aba0 <_dtoa_r+0x618>)
 800aa70:	4431      	add	r1, r6
 800aa72:	910d      	str	r1, [sp, #52]	; 0x34
 800aa74:	9908      	ldr	r1, [sp, #32]
 800aa76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aa7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa7e:	2900      	cmp	r1, #0
 800aa80:	d043      	beq.n	800ab0a <_dtoa_r+0x582>
 800aa82:	494d      	ldr	r1, [pc, #308]	; (800abb8 <_dtoa_r+0x630>)
 800aa84:	2000      	movs	r0, #0
 800aa86:	f7f5 ff01 	bl	800088c <__aeabi_ddiv>
 800aa8a:	4652      	mov	r2, sl
 800aa8c:	465b      	mov	r3, fp
 800aa8e:	f7f5 fc1b 	bl	80002c8 <__aeabi_dsub>
 800aa92:	9d01      	ldr	r5, [sp, #4]
 800aa94:	4682      	mov	sl, r0
 800aa96:	468b      	mov	fp, r1
 800aa98:	4649      	mov	r1, r9
 800aa9a:	4640      	mov	r0, r8
 800aa9c:	f7f6 f87c 	bl	8000b98 <__aeabi_d2iz>
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	f7f5 fd5f 	bl	8000564 <__aeabi_i2d>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	4640      	mov	r0, r8
 800aaac:	4649      	mov	r1, r9
 800aaae:	f7f5 fc0b 	bl	80002c8 <__aeabi_dsub>
 800aab2:	3630      	adds	r6, #48	; 0x30
 800aab4:	f805 6b01 	strb.w	r6, [r5], #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	465b      	mov	r3, fp
 800aabc:	4680      	mov	r8, r0
 800aabe:	4689      	mov	r9, r1
 800aac0:	f7f6 f82c 	bl	8000b1c <__aeabi_dcmplt>
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d163      	bne.n	800ab90 <_dtoa_r+0x608>
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	4936      	ldr	r1, [pc, #216]	; (800aba8 <_dtoa_r+0x620>)
 800aace:	2000      	movs	r0, #0
 800aad0:	f7f5 fbfa 	bl	80002c8 <__aeabi_dsub>
 800aad4:	4652      	mov	r2, sl
 800aad6:	465b      	mov	r3, fp
 800aad8:	f7f6 f820 	bl	8000b1c <__aeabi_dcmplt>
 800aadc:	2800      	cmp	r0, #0
 800aade:	f040 80b5 	bne.w	800ac4c <_dtoa_r+0x6c4>
 800aae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aae4:	429d      	cmp	r5, r3
 800aae6:	d081      	beq.n	800a9ec <_dtoa_r+0x464>
 800aae8:	4b30      	ldr	r3, [pc, #192]	; (800abac <_dtoa_r+0x624>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	4650      	mov	r0, sl
 800aaee:	4659      	mov	r1, fp
 800aaf0:	f7f5 fda2 	bl	8000638 <__aeabi_dmul>
 800aaf4:	4b2d      	ldr	r3, [pc, #180]	; (800abac <_dtoa_r+0x624>)
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	468b      	mov	fp, r1
 800aafa:	4640      	mov	r0, r8
 800aafc:	4649      	mov	r1, r9
 800aafe:	2200      	movs	r2, #0
 800ab00:	f7f5 fd9a 	bl	8000638 <__aeabi_dmul>
 800ab04:	4680      	mov	r8, r0
 800ab06:	4689      	mov	r9, r1
 800ab08:	e7c6      	b.n	800aa98 <_dtoa_r+0x510>
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	4659      	mov	r1, fp
 800ab0e:	f7f5 fd93 	bl	8000638 <__aeabi_dmul>
 800ab12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab14:	9d01      	ldr	r5, [sp, #4]
 800ab16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab18:	4682      	mov	sl, r0
 800ab1a:	468b      	mov	fp, r1
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7f6 f83a 	bl	8000b98 <__aeabi_d2iz>
 800ab24:	4606      	mov	r6, r0
 800ab26:	f7f5 fd1d 	bl	8000564 <__aeabi_i2d>
 800ab2a:	3630      	adds	r6, #48	; 0x30
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	4640      	mov	r0, r8
 800ab32:	4649      	mov	r1, r9
 800ab34:	f7f5 fbc8 	bl	80002c8 <__aeabi_dsub>
 800ab38:	f805 6b01 	strb.w	r6, [r5], #1
 800ab3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab3e:	429d      	cmp	r5, r3
 800ab40:	4680      	mov	r8, r0
 800ab42:	4689      	mov	r9, r1
 800ab44:	f04f 0200 	mov.w	r2, #0
 800ab48:	d124      	bne.n	800ab94 <_dtoa_r+0x60c>
 800ab4a:	4b1b      	ldr	r3, [pc, #108]	; (800abb8 <_dtoa_r+0x630>)
 800ab4c:	4650      	mov	r0, sl
 800ab4e:	4659      	mov	r1, fp
 800ab50:	f7f5 fbbc 	bl	80002cc <__adddf3>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	f7f5 fffc 	bl	8000b58 <__aeabi_dcmpgt>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	d173      	bne.n	800ac4c <_dtoa_r+0x6c4>
 800ab64:	4652      	mov	r2, sl
 800ab66:	465b      	mov	r3, fp
 800ab68:	4913      	ldr	r1, [pc, #76]	; (800abb8 <_dtoa_r+0x630>)
 800ab6a:	2000      	movs	r0, #0
 800ab6c:	f7f5 fbac 	bl	80002c8 <__aeabi_dsub>
 800ab70:	4602      	mov	r2, r0
 800ab72:	460b      	mov	r3, r1
 800ab74:	4640      	mov	r0, r8
 800ab76:	4649      	mov	r1, r9
 800ab78:	f7f5 ffd0 	bl	8000b1c <__aeabi_dcmplt>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	f43f af35 	beq.w	800a9ec <_dtoa_r+0x464>
 800ab82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ab84:	1e6b      	subs	r3, r5, #1
 800ab86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab8c:	2b30      	cmp	r3, #48	; 0x30
 800ab8e:	d0f8      	beq.n	800ab82 <_dtoa_r+0x5fa>
 800ab90:	9700      	str	r7, [sp, #0]
 800ab92:	e049      	b.n	800ac28 <_dtoa_r+0x6a0>
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <_dtoa_r+0x624>)
 800ab96:	f7f5 fd4f 	bl	8000638 <__aeabi_dmul>
 800ab9a:	4680      	mov	r8, r0
 800ab9c:	4689      	mov	r9, r1
 800ab9e:	e7bd      	b.n	800ab1c <_dtoa_r+0x594>
 800aba0:	0800d6d0 	.word	0x0800d6d0
 800aba4:	0800d6a8 	.word	0x0800d6a8
 800aba8:	3ff00000 	.word	0x3ff00000
 800abac:	40240000 	.word	0x40240000
 800abb0:	401c0000 	.word	0x401c0000
 800abb4:	40140000 	.word	0x40140000
 800abb8:	3fe00000 	.word	0x3fe00000
 800abbc:	9d01      	ldr	r5, [sp, #4]
 800abbe:	4656      	mov	r6, sl
 800abc0:	465f      	mov	r7, fp
 800abc2:	4642      	mov	r2, r8
 800abc4:	464b      	mov	r3, r9
 800abc6:	4630      	mov	r0, r6
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f5 fe5f 	bl	800088c <__aeabi_ddiv>
 800abce:	f7f5 ffe3 	bl	8000b98 <__aeabi_d2iz>
 800abd2:	4682      	mov	sl, r0
 800abd4:	f7f5 fcc6 	bl	8000564 <__aeabi_i2d>
 800abd8:	4642      	mov	r2, r8
 800abda:	464b      	mov	r3, r9
 800abdc:	f7f5 fd2c 	bl	8000638 <__aeabi_dmul>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800abec:	f7f5 fb6c 	bl	80002c8 <__aeabi_dsub>
 800abf0:	f805 6b01 	strb.w	r6, [r5], #1
 800abf4:	9e01      	ldr	r6, [sp, #4]
 800abf6:	9f03      	ldr	r7, [sp, #12]
 800abf8:	1bae      	subs	r6, r5, r6
 800abfa:	42b7      	cmp	r7, r6
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	d135      	bne.n	800ac6e <_dtoa_r+0x6e6>
 800ac02:	f7f5 fb63 	bl	80002cc <__adddf3>
 800ac06:	4642      	mov	r2, r8
 800ac08:	464b      	mov	r3, r9
 800ac0a:	4606      	mov	r6, r0
 800ac0c:	460f      	mov	r7, r1
 800ac0e:	f7f5 ffa3 	bl	8000b58 <__aeabi_dcmpgt>
 800ac12:	b9d0      	cbnz	r0, 800ac4a <_dtoa_r+0x6c2>
 800ac14:	4642      	mov	r2, r8
 800ac16:	464b      	mov	r3, r9
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 ff74 	bl	8000b08 <__aeabi_dcmpeq>
 800ac20:	b110      	cbz	r0, 800ac28 <_dtoa_r+0x6a0>
 800ac22:	f01a 0f01 	tst.w	sl, #1
 800ac26:	d110      	bne.n	800ac4a <_dtoa_r+0x6c2>
 800ac28:	4620      	mov	r0, r4
 800ac2a:	ee18 1a10 	vmov	r1, s16
 800ac2e:	f000 fbfb 	bl	800b428 <_Bfree>
 800ac32:	2300      	movs	r3, #0
 800ac34:	9800      	ldr	r0, [sp, #0]
 800ac36:	702b      	strb	r3, [r5, #0]
 800ac38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	6018      	str	r0, [r3, #0]
 800ac3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f43f acf1 	beq.w	800a628 <_dtoa_r+0xa0>
 800ac46:	601d      	str	r5, [r3, #0]
 800ac48:	e4ee      	b.n	800a628 <_dtoa_r+0xa0>
 800ac4a:	9f00      	ldr	r7, [sp, #0]
 800ac4c:	462b      	mov	r3, r5
 800ac4e:	461d      	mov	r5, r3
 800ac50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac54:	2a39      	cmp	r2, #57	; 0x39
 800ac56:	d106      	bne.n	800ac66 <_dtoa_r+0x6de>
 800ac58:	9a01      	ldr	r2, [sp, #4]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d1f7      	bne.n	800ac4e <_dtoa_r+0x6c6>
 800ac5e:	9901      	ldr	r1, [sp, #4]
 800ac60:	2230      	movs	r2, #48	; 0x30
 800ac62:	3701      	adds	r7, #1
 800ac64:	700a      	strb	r2, [r1, #0]
 800ac66:	781a      	ldrb	r2, [r3, #0]
 800ac68:	3201      	adds	r2, #1
 800ac6a:	701a      	strb	r2, [r3, #0]
 800ac6c:	e790      	b.n	800ab90 <_dtoa_r+0x608>
 800ac6e:	4ba6      	ldr	r3, [pc, #664]	; (800af08 <_dtoa_r+0x980>)
 800ac70:	2200      	movs	r2, #0
 800ac72:	f7f5 fce1 	bl	8000638 <__aeabi_dmul>
 800ac76:	2200      	movs	r2, #0
 800ac78:	2300      	movs	r3, #0
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	f7f5 ff43 	bl	8000b08 <__aeabi_dcmpeq>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d09d      	beq.n	800abc2 <_dtoa_r+0x63a>
 800ac86:	e7cf      	b.n	800ac28 <_dtoa_r+0x6a0>
 800ac88:	9a08      	ldr	r2, [sp, #32]
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	f000 80d7 	beq.w	800ae3e <_dtoa_r+0x8b6>
 800ac90:	9a06      	ldr	r2, [sp, #24]
 800ac92:	2a01      	cmp	r2, #1
 800ac94:	f300 80ba 	bgt.w	800ae0c <_dtoa_r+0x884>
 800ac98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ac9a:	2a00      	cmp	r2, #0
 800ac9c:	f000 80b2 	beq.w	800ae04 <_dtoa_r+0x87c>
 800aca0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aca4:	9e07      	ldr	r6, [sp, #28]
 800aca6:	9d04      	ldr	r5, [sp, #16]
 800aca8:	9a04      	ldr	r2, [sp, #16]
 800acaa:	441a      	add	r2, r3
 800acac:	9204      	str	r2, [sp, #16]
 800acae:	9a05      	ldr	r2, [sp, #20]
 800acb0:	2101      	movs	r1, #1
 800acb2:	441a      	add	r2, r3
 800acb4:	4620      	mov	r0, r4
 800acb6:	9205      	str	r2, [sp, #20]
 800acb8:	f000 fc6e 	bl	800b598 <__i2b>
 800acbc:	4607      	mov	r7, r0
 800acbe:	2d00      	cmp	r5, #0
 800acc0:	dd0c      	ble.n	800acdc <_dtoa_r+0x754>
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dd09      	ble.n	800acdc <_dtoa_r+0x754>
 800acc8:	42ab      	cmp	r3, r5
 800acca:	9a04      	ldr	r2, [sp, #16]
 800accc:	bfa8      	it	ge
 800acce:	462b      	movge	r3, r5
 800acd0:	1ad2      	subs	r2, r2, r3
 800acd2:	9204      	str	r2, [sp, #16]
 800acd4:	9a05      	ldr	r2, [sp, #20]
 800acd6:	1aed      	subs	r5, r5, r3
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	9b07      	ldr	r3, [sp, #28]
 800acde:	b31b      	cbz	r3, 800ad28 <_dtoa_r+0x7a0>
 800ace0:	9b08      	ldr	r3, [sp, #32]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	f000 80af 	beq.w	800ae46 <_dtoa_r+0x8be>
 800ace8:	2e00      	cmp	r6, #0
 800acea:	dd13      	ble.n	800ad14 <_dtoa_r+0x78c>
 800acec:	4639      	mov	r1, r7
 800acee:	4632      	mov	r2, r6
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 fd11 	bl	800b718 <__pow5mult>
 800acf6:	ee18 2a10 	vmov	r2, s16
 800acfa:	4601      	mov	r1, r0
 800acfc:	4607      	mov	r7, r0
 800acfe:	4620      	mov	r0, r4
 800ad00:	f000 fc60 	bl	800b5c4 <__multiply>
 800ad04:	ee18 1a10 	vmov	r1, s16
 800ad08:	4680      	mov	r8, r0
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 fb8c 	bl	800b428 <_Bfree>
 800ad10:	ee08 8a10 	vmov	s16, r8
 800ad14:	9b07      	ldr	r3, [sp, #28]
 800ad16:	1b9a      	subs	r2, r3, r6
 800ad18:	d006      	beq.n	800ad28 <_dtoa_r+0x7a0>
 800ad1a:	ee18 1a10 	vmov	r1, s16
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f000 fcfa 	bl	800b718 <__pow5mult>
 800ad24:	ee08 0a10 	vmov	s16, r0
 800ad28:	2101      	movs	r1, #1
 800ad2a:	4620      	mov	r0, r4
 800ad2c:	f000 fc34 	bl	800b598 <__i2b>
 800ad30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	4606      	mov	r6, r0
 800ad36:	f340 8088 	ble.w	800ae4a <_dtoa_r+0x8c2>
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4601      	mov	r1, r0
 800ad3e:	4620      	mov	r0, r4
 800ad40:	f000 fcea 	bl	800b718 <__pow5mult>
 800ad44:	9b06      	ldr	r3, [sp, #24]
 800ad46:	2b01      	cmp	r3, #1
 800ad48:	4606      	mov	r6, r0
 800ad4a:	f340 8081 	ble.w	800ae50 <_dtoa_r+0x8c8>
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	6933      	ldr	r3, [r6, #16]
 800ad54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad58:	6918      	ldr	r0, [r3, #16]
 800ad5a:	f000 fbcd 	bl	800b4f8 <__hi0bits>
 800ad5e:	f1c0 0020 	rsb	r0, r0, #32
 800ad62:	9b05      	ldr	r3, [sp, #20]
 800ad64:	4418      	add	r0, r3
 800ad66:	f010 001f 	ands.w	r0, r0, #31
 800ad6a:	f000 8092 	beq.w	800ae92 <_dtoa_r+0x90a>
 800ad6e:	f1c0 0320 	rsb	r3, r0, #32
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	f340 808a 	ble.w	800ae8c <_dtoa_r+0x904>
 800ad78:	f1c0 001c 	rsb	r0, r0, #28
 800ad7c:	9b04      	ldr	r3, [sp, #16]
 800ad7e:	4403      	add	r3, r0
 800ad80:	9304      	str	r3, [sp, #16]
 800ad82:	9b05      	ldr	r3, [sp, #20]
 800ad84:	4403      	add	r3, r0
 800ad86:	4405      	add	r5, r0
 800ad88:	9305      	str	r3, [sp, #20]
 800ad8a:	9b04      	ldr	r3, [sp, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	dd07      	ble.n	800ada0 <_dtoa_r+0x818>
 800ad90:	ee18 1a10 	vmov	r1, s16
 800ad94:	461a      	mov	r2, r3
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fd18 	bl	800b7cc <__lshift>
 800ad9c:	ee08 0a10 	vmov	s16, r0
 800ada0:	9b05      	ldr	r3, [sp, #20]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	dd05      	ble.n	800adb2 <_dtoa_r+0x82a>
 800ada6:	4631      	mov	r1, r6
 800ada8:	461a      	mov	r2, r3
 800adaa:	4620      	mov	r0, r4
 800adac:	f000 fd0e 	bl	800b7cc <__lshift>
 800adb0:	4606      	mov	r6, r0
 800adb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d06e      	beq.n	800ae96 <_dtoa_r+0x90e>
 800adb8:	ee18 0a10 	vmov	r0, s16
 800adbc:	4631      	mov	r1, r6
 800adbe:	f000 fd75 	bl	800b8ac <__mcmp>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	da67      	bge.n	800ae96 <_dtoa_r+0x90e>
 800adc6:	9b00      	ldr	r3, [sp, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	ee18 1a10 	vmov	r1, s16
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	220a      	movs	r2, #10
 800add2:	2300      	movs	r3, #0
 800add4:	4620      	mov	r0, r4
 800add6:	f000 fb49 	bl	800b46c <__multadd>
 800adda:	9b08      	ldr	r3, [sp, #32]
 800addc:	ee08 0a10 	vmov	s16, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	f000 81b1 	beq.w	800b148 <_dtoa_r+0xbc0>
 800ade6:	2300      	movs	r3, #0
 800ade8:	4639      	mov	r1, r7
 800adea:	220a      	movs	r2, #10
 800adec:	4620      	mov	r0, r4
 800adee:	f000 fb3d 	bl	800b46c <__multadd>
 800adf2:	9b02      	ldr	r3, [sp, #8]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	4607      	mov	r7, r0
 800adf8:	f300 808e 	bgt.w	800af18 <_dtoa_r+0x990>
 800adfc:	9b06      	ldr	r3, [sp, #24]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	dc51      	bgt.n	800aea6 <_dtoa_r+0x91e>
 800ae02:	e089      	b.n	800af18 <_dtoa_r+0x990>
 800ae04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae0a:	e74b      	b.n	800aca4 <_dtoa_r+0x71c>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	1e5e      	subs	r6, r3, #1
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	42b3      	cmp	r3, r6
 800ae14:	bfbf      	itttt	lt
 800ae16:	9b07      	ldrlt	r3, [sp, #28]
 800ae18:	9607      	strlt	r6, [sp, #28]
 800ae1a:	1af2      	sublt	r2, r6, r3
 800ae1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae1e:	bfb6      	itet	lt
 800ae20:	189b      	addlt	r3, r3, r2
 800ae22:	1b9e      	subge	r6, r3, r6
 800ae24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae26:	9b03      	ldr	r3, [sp, #12]
 800ae28:	bfb8      	it	lt
 800ae2a:	2600      	movlt	r6, #0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bfb7      	itett	lt
 800ae30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ae34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ae38:	1a9d      	sublt	r5, r3, r2
 800ae3a:	2300      	movlt	r3, #0
 800ae3c:	e734      	b.n	800aca8 <_dtoa_r+0x720>
 800ae3e:	9e07      	ldr	r6, [sp, #28]
 800ae40:	9d04      	ldr	r5, [sp, #16]
 800ae42:	9f08      	ldr	r7, [sp, #32]
 800ae44:	e73b      	b.n	800acbe <_dtoa_r+0x736>
 800ae46:	9a07      	ldr	r2, [sp, #28]
 800ae48:	e767      	b.n	800ad1a <_dtoa_r+0x792>
 800ae4a:	9b06      	ldr	r3, [sp, #24]
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	dc18      	bgt.n	800ae82 <_dtoa_r+0x8fa>
 800ae50:	f1ba 0f00 	cmp.w	sl, #0
 800ae54:	d115      	bne.n	800ae82 <_dtoa_r+0x8fa>
 800ae56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae5a:	b993      	cbnz	r3, 800ae82 <_dtoa_r+0x8fa>
 800ae5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae60:	0d1b      	lsrs	r3, r3, #20
 800ae62:	051b      	lsls	r3, r3, #20
 800ae64:	b183      	cbz	r3, 800ae88 <_dtoa_r+0x900>
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	9b05      	ldr	r3, [sp, #20]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	9305      	str	r3, [sp, #20]
 800ae72:	f04f 0801 	mov.w	r8, #1
 800ae76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f47f af6a 	bne.w	800ad52 <_dtoa_r+0x7ca>
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e76f      	b.n	800ad62 <_dtoa_r+0x7da>
 800ae82:	f04f 0800 	mov.w	r8, #0
 800ae86:	e7f6      	b.n	800ae76 <_dtoa_r+0x8ee>
 800ae88:	4698      	mov	r8, r3
 800ae8a:	e7f4      	b.n	800ae76 <_dtoa_r+0x8ee>
 800ae8c:	f43f af7d 	beq.w	800ad8a <_dtoa_r+0x802>
 800ae90:	4618      	mov	r0, r3
 800ae92:	301c      	adds	r0, #28
 800ae94:	e772      	b.n	800ad7c <_dtoa_r+0x7f4>
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc37      	bgt.n	800af0c <_dtoa_r+0x984>
 800ae9c:	9b06      	ldr	r3, [sp, #24]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	dd34      	ble.n	800af0c <_dtoa_r+0x984>
 800aea2:	9b03      	ldr	r3, [sp, #12]
 800aea4:	9302      	str	r3, [sp, #8]
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	b96b      	cbnz	r3, 800aec6 <_dtoa_r+0x93e>
 800aeaa:	4631      	mov	r1, r6
 800aeac:	2205      	movs	r2, #5
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fadc 	bl	800b46c <__multadd>
 800aeb4:	4601      	mov	r1, r0
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	ee18 0a10 	vmov	r0, s16
 800aebc:	f000 fcf6 	bl	800b8ac <__mcmp>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	f73f adbb 	bgt.w	800aa3c <_dtoa_r+0x4b4>
 800aec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aec8:	9d01      	ldr	r5, [sp, #4]
 800aeca:	43db      	mvns	r3, r3
 800aecc:	9300      	str	r3, [sp, #0]
 800aece:	f04f 0800 	mov.w	r8, #0
 800aed2:	4631      	mov	r1, r6
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 faa7 	bl	800b428 <_Bfree>
 800aeda:	2f00      	cmp	r7, #0
 800aedc:	f43f aea4 	beq.w	800ac28 <_dtoa_r+0x6a0>
 800aee0:	f1b8 0f00 	cmp.w	r8, #0
 800aee4:	d005      	beq.n	800aef2 <_dtoa_r+0x96a>
 800aee6:	45b8      	cmp	r8, r7
 800aee8:	d003      	beq.n	800aef2 <_dtoa_r+0x96a>
 800aeea:	4641      	mov	r1, r8
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fa9b 	bl	800b428 <_Bfree>
 800aef2:	4639      	mov	r1, r7
 800aef4:	4620      	mov	r0, r4
 800aef6:	f000 fa97 	bl	800b428 <_Bfree>
 800aefa:	e695      	b.n	800ac28 <_dtoa_r+0x6a0>
 800aefc:	2600      	movs	r6, #0
 800aefe:	4637      	mov	r7, r6
 800af00:	e7e1      	b.n	800aec6 <_dtoa_r+0x93e>
 800af02:	9700      	str	r7, [sp, #0]
 800af04:	4637      	mov	r7, r6
 800af06:	e599      	b.n	800aa3c <_dtoa_r+0x4b4>
 800af08:	40240000 	.word	0x40240000
 800af0c:	9b08      	ldr	r3, [sp, #32]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 80ca 	beq.w	800b0a8 <_dtoa_r+0xb20>
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	9302      	str	r3, [sp, #8]
 800af18:	2d00      	cmp	r5, #0
 800af1a:	dd05      	ble.n	800af28 <_dtoa_r+0x9a0>
 800af1c:	4639      	mov	r1, r7
 800af1e:	462a      	mov	r2, r5
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fc53 	bl	800b7cc <__lshift>
 800af26:	4607      	mov	r7, r0
 800af28:	f1b8 0f00 	cmp.w	r8, #0
 800af2c:	d05b      	beq.n	800afe6 <_dtoa_r+0xa5e>
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4620      	mov	r0, r4
 800af32:	f000 fa39 	bl	800b3a8 <_Balloc>
 800af36:	4605      	mov	r5, r0
 800af38:	b928      	cbnz	r0, 800af46 <_dtoa_r+0x9be>
 800af3a:	4b87      	ldr	r3, [pc, #540]	; (800b158 <_dtoa_r+0xbd0>)
 800af3c:	4602      	mov	r2, r0
 800af3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800af42:	f7ff bb3b 	b.w	800a5bc <_dtoa_r+0x34>
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	3202      	adds	r2, #2
 800af4a:	0092      	lsls	r2, r2, #2
 800af4c:	f107 010c 	add.w	r1, r7, #12
 800af50:	300c      	adds	r0, #12
 800af52:	f7fe fa25 	bl	80093a0 <memcpy>
 800af56:	2201      	movs	r2, #1
 800af58:	4629      	mov	r1, r5
 800af5a:	4620      	mov	r0, r4
 800af5c:	f000 fc36 	bl	800b7cc <__lshift>
 800af60:	9b01      	ldr	r3, [sp, #4]
 800af62:	f103 0901 	add.w	r9, r3, #1
 800af66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800af6a:	4413      	add	r3, r2
 800af6c:	9305      	str	r3, [sp, #20]
 800af6e:	f00a 0301 	and.w	r3, sl, #1
 800af72:	46b8      	mov	r8, r7
 800af74:	9304      	str	r3, [sp, #16]
 800af76:	4607      	mov	r7, r0
 800af78:	4631      	mov	r1, r6
 800af7a:	ee18 0a10 	vmov	r0, s16
 800af7e:	f7ff fa77 	bl	800a470 <quorem>
 800af82:	4641      	mov	r1, r8
 800af84:	9002      	str	r0, [sp, #8]
 800af86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800af8a:	ee18 0a10 	vmov	r0, s16
 800af8e:	f000 fc8d 	bl	800b8ac <__mcmp>
 800af92:	463a      	mov	r2, r7
 800af94:	9003      	str	r0, [sp, #12]
 800af96:	4631      	mov	r1, r6
 800af98:	4620      	mov	r0, r4
 800af9a:	f000 fca3 	bl	800b8e4 <__mdiff>
 800af9e:	68c2      	ldr	r2, [r0, #12]
 800afa0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800afa4:	4605      	mov	r5, r0
 800afa6:	bb02      	cbnz	r2, 800afea <_dtoa_r+0xa62>
 800afa8:	4601      	mov	r1, r0
 800afaa:	ee18 0a10 	vmov	r0, s16
 800afae:	f000 fc7d 	bl	800b8ac <__mcmp>
 800afb2:	4602      	mov	r2, r0
 800afb4:	4629      	mov	r1, r5
 800afb6:	4620      	mov	r0, r4
 800afb8:	9207      	str	r2, [sp, #28]
 800afba:	f000 fa35 	bl	800b428 <_Bfree>
 800afbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800afc2:	ea43 0102 	orr.w	r1, r3, r2
 800afc6:	9b04      	ldr	r3, [sp, #16]
 800afc8:	430b      	orrs	r3, r1
 800afca:	464d      	mov	r5, r9
 800afcc:	d10f      	bne.n	800afee <_dtoa_r+0xa66>
 800afce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800afd2:	d02a      	beq.n	800b02a <_dtoa_r+0xaa2>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	dd02      	ble.n	800afe0 <_dtoa_r+0xa58>
 800afda:	9b02      	ldr	r3, [sp, #8]
 800afdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800afe0:	f88b a000 	strb.w	sl, [fp]
 800afe4:	e775      	b.n	800aed2 <_dtoa_r+0x94a>
 800afe6:	4638      	mov	r0, r7
 800afe8:	e7ba      	b.n	800af60 <_dtoa_r+0x9d8>
 800afea:	2201      	movs	r2, #1
 800afec:	e7e2      	b.n	800afb4 <_dtoa_r+0xa2c>
 800afee:	9b03      	ldr	r3, [sp, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	db04      	blt.n	800affe <_dtoa_r+0xa76>
 800aff4:	9906      	ldr	r1, [sp, #24]
 800aff6:	430b      	orrs	r3, r1
 800aff8:	9904      	ldr	r1, [sp, #16]
 800affa:	430b      	orrs	r3, r1
 800affc:	d122      	bne.n	800b044 <_dtoa_r+0xabc>
 800affe:	2a00      	cmp	r2, #0
 800b000:	ddee      	ble.n	800afe0 <_dtoa_r+0xa58>
 800b002:	ee18 1a10 	vmov	r1, s16
 800b006:	2201      	movs	r2, #1
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 fbdf 	bl	800b7cc <__lshift>
 800b00e:	4631      	mov	r1, r6
 800b010:	ee08 0a10 	vmov	s16, r0
 800b014:	f000 fc4a 	bl	800b8ac <__mcmp>
 800b018:	2800      	cmp	r0, #0
 800b01a:	dc03      	bgt.n	800b024 <_dtoa_r+0xa9c>
 800b01c:	d1e0      	bne.n	800afe0 <_dtoa_r+0xa58>
 800b01e:	f01a 0f01 	tst.w	sl, #1
 800b022:	d0dd      	beq.n	800afe0 <_dtoa_r+0xa58>
 800b024:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b028:	d1d7      	bne.n	800afda <_dtoa_r+0xa52>
 800b02a:	2339      	movs	r3, #57	; 0x39
 800b02c:	f88b 3000 	strb.w	r3, [fp]
 800b030:	462b      	mov	r3, r5
 800b032:	461d      	mov	r5, r3
 800b034:	3b01      	subs	r3, #1
 800b036:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b03a:	2a39      	cmp	r2, #57	; 0x39
 800b03c:	d071      	beq.n	800b122 <_dtoa_r+0xb9a>
 800b03e:	3201      	adds	r2, #1
 800b040:	701a      	strb	r2, [r3, #0]
 800b042:	e746      	b.n	800aed2 <_dtoa_r+0x94a>
 800b044:	2a00      	cmp	r2, #0
 800b046:	dd07      	ble.n	800b058 <_dtoa_r+0xad0>
 800b048:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b04c:	d0ed      	beq.n	800b02a <_dtoa_r+0xaa2>
 800b04e:	f10a 0301 	add.w	r3, sl, #1
 800b052:	f88b 3000 	strb.w	r3, [fp]
 800b056:	e73c      	b.n	800aed2 <_dtoa_r+0x94a>
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b05e:	4599      	cmp	r9, r3
 800b060:	d047      	beq.n	800b0f2 <_dtoa_r+0xb6a>
 800b062:	ee18 1a10 	vmov	r1, s16
 800b066:	2300      	movs	r3, #0
 800b068:	220a      	movs	r2, #10
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 f9fe 	bl	800b46c <__multadd>
 800b070:	45b8      	cmp	r8, r7
 800b072:	ee08 0a10 	vmov	s16, r0
 800b076:	f04f 0300 	mov.w	r3, #0
 800b07a:	f04f 020a 	mov.w	r2, #10
 800b07e:	4641      	mov	r1, r8
 800b080:	4620      	mov	r0, r4
 800b082:	d106      	bne.n	800b092 <_dtoa_r+0xb0a>
 800b084:	f000 f9f2 	bl	800b46c <__multadd>
 800b088:	4680      	mov	r8, r0
 800b08a:	4607      	mov	r7, r0
 800b08c:	f109 0901 	add.w	r9, r9, #1
 800b090:	e772      	b.n	800af78 <_dtoa_r+0x9f0>
 800b092:	f000 f9eb 	bl	800b46c <__multadd>
 800b096:	4639      	mov	r1, r7
 800b098:	4680      	mov	r8, r0
 800b09a:	2300      	movs	r3, #0
 800b09c:	220a      	movs	r2, #10
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f9e4 	bl	800b46c <__multadd>
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	e7f1      	b.n	800b08c <_dtoa_r+0xb04>
 800b0a8:	9b03      	ldr	r3, [sp, #12]
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	9d01      	ldr	r5, [sp, #4]
 800b0ae:	ee18 0a10 	vmov	r0, s16
 800b0b2:	4631      	mov	r1, r6
 800b0b4:	f7ff f9dc 	bl	800a470 <quorem>
 800b0b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0bc:	9b01      	ldr	r3, [sp, #4]
 800b0be:	f805 ab01 	strb.w	sl, [r5], #1
 800b0c2:	1aea      	subs	r2, r5, r3
 800b0c4:	9b02      	ldr	r3, [sp, #8]
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	dd09      	ble.n	800b0de <_dtoa_r+0xb56>
 800b0ca:	ee18 1a10 	vmov	r1, s16
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	220a      	movs	r2, #10
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 f9ca 	bl	800b46c <__multadd>
 800b0d8:	ee08 0a10 	vmov	s16, r0
 800b0dc:	e7e7      	b.n	800b0ae <_dtoa_r+0xb26>
 800b0de:	9b02      	ldr	r3, [sp, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	bfc8      	it	gt
 800b0e4:	461d      	movgt	r5, r3
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	bfd8      	it	le
 800b0ea:	2501      	movle	r5, #1
 800b0ec:	441d      	add	r5, r3
 800b0ee:	f04f 0800 	mov.w	r8, #0
 800b0f2:	ee18 1a10 	vmov	r1, s16
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4620      	mov	r0, r4
 800b0fa:	f000 fb67 	bl	800b7cc <__lshift>
 800b0fe:	4631      	mov	r1, r6
 800b100:	ee08 0a10 	vmov	s16, r0
 800b104:	f000 fbd2 	bl	800b8ac <__mcmp>
 800b108:	2800      	cmp	r0, #0
 800b10a:	dc91      	bgt.n	800b030 <_dtoa_r+0xaa8>
 800b10c:	d102      	bne.n	800b114 <_dtoa_r+0xb8c>
 800b10e:	f01a 0f01 	tst.w	sl, #1
 800b112:	d18d      	bne.n	800b030 <_dtoa_r+0xaa8>
 800b114:	462b      	mov	r3, r5
 800b116:	461d      	mov	r5, r3
 800b118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b11c:	2a30      	cmp	r2, #48	; 0x30
 800b11e:	d0fa      	beq.n	800b116 <_dtoa_r+0xb8e>
 800b120:	e6d7      	b.n	800aed2 <_dtoa_r+0x94a>
 800b122:	9a01      	ldr	r2, [sp, #4]
 800b124:	429a      	cmp	r2, r3
 800b126:	d184      	bne.n	800b032 <_dtoa_r+0xaaa>
 800b128:	9b00      	ldr	r3, [sp, #0]
 800b12a:	3301      	adds	r3, #1
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	2331      	movs	r3, #49	; 0x31
 800b130:	7013      	strb	r3, [r2, #0]
 800b132:	e6ce      	b.n	800aed2 <_dtoa_r+0x94a>
 800b134:	4b09      	ldr	r3, [pc, #36]	; (800b15c <_dtoa_r+0xbd4>)
 800b136:	f7ff ba95 	b.w	800a664 <_dtoa_r+0xdc>
 800b13a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f47f aa6e 	bne.w	800a61e <_dtoa_r+0x96>
 800b142:	4b07      	ldr	r3, [pc, #28]	; (800b160 <_dtoa_r+0xbd8>)
 800b144:	f7ff ba8e 	b.w	800a664 <_dtoa_r+0xdc>
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	dcae      	bgt.n	800b0ac <_dtoa_r+0xb24>
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	2b02      	cmp	r3, #2
 800b152:	f73f aea8 	bgt.w	800aea6 <_dtoa_r+0x91e>
 800b156:	e7a9      	b.n	800b0ac <_dtoa_r+0xb24>
 800b158:	0800d5d4 	.word	0x0800d5d4
 800b15c:	0800d4f5 	.word	0x0800d4f5
 800b160:	0800d555 	.word	0x0800d555

0800b164 <__errno>:
 800b164:	4b01      	ldr	r3, [pc, #4]	; (800b16c <__errno+0x8>)
 800b166:	6818      	ldr	r0, [r3, #0]
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	200000dc 	.word	0x200000dc

0800b170 <std>:
 800b170:	2300      	movs	r3, #0
 800b172:	b510      	push	{r4, lr}
 800b174:	4604      	mov	r4, r0
 800b176:	e9c0 3300 	strd	r3, r3, [r0]
 800b17a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b17e:	6083      	str	r3, [r0, #8]
 800b180:	8181      	strh	r1, [r0, #12]
 800b182:	6643      	str	r3, [r0, #100]	; 0x64
 800b184:	81c2      	strh	r2, [r0, #14]
 800b186:	6183      	str	r3, [r0, #24]
 800b188:	4619      	mov	r1, r3
 800b18a:	2208      	movs	r2, #8
 800b18c:	305c      	adds	r0, #92	; 0x5c
 800b18e:	f7fe f92f 	bl	80093f0 <memset>
 800b192:	4b05      	ldr	r3, [pc, #20]	; (800b1a8 <std+0x38>)
 800b194:	6263      	str	r3, [r4, #36]	; 0x24
 800b196:	4b05      	ldr	r3, [pc, #20]	; (800b1ac <std+0x3c>)
 800b198:	62a3      	str	r3, [r4, #40]	; 0x28
 800b19a:	4b05      	ldr	r3, [pc, #20]	; (800b1b0 <std+0x40>)
 800b19c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b19e:	4b05      	ldr	r3, [pc, #20]	; (800b1b4 <std+0x44>)
 800b1a0:	6224      	str	r4, [r4, #32]
 800b1a2:	6323      	str	r3, [r4, #48]	; 0x30
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	bf00      	nop
 800b1a8:	0800bdc1 	.word	0x0800bdc1
 800b1ac:	0800bde3 	.word	0x0800bde3
 800b1b0:	0800be1b 	.word	0x0800be1b
 800b1b4:	0800be3f 	.word	0x0800be3f

0800b1b8 <_cleanup_r>:
 800b1b8:	4901      	ldr	r1, [pc, #4]	; (800b1c0 <_cleanup_r+0x8>)
 800b1ba:	f000 b8c1 	b.w	800b340 <_fwalk_reent>
 800b1be:	bf00      	nop
 800b1c0:	0800c119 	.word	0x0800c119

0800b1c4 <__sfmoreglue>:
 800b1c4:	b570      	push	{r4, r5, r6, lr}
 800b1c6:	2268      	movs	r2, #104	; 0x68
 800b1c8:	1e4d      	subs	r5, r1, #1
 800b1ca:	4355      	muls	r5, r2
 800b1cc:	460e      	mov	r6, r1
 800b1ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1d2:	f7fe f9d5 	bl	8009580 <_malloc_r>
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	b140      	cbz	r0, 800b1ec <__sfmoreglue+0x28>
 800b1da:	2100      	movs	r1, #0
 800b1dc:	e9c0 1600 	strd	r1, r6, [r0]
 800b1e0:	300c      	adds	r0, #12
 800b1e2:	60a0      	str	r0, [r4, #8]
 800b1e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1e8:	f7fe f902 	bl	80093f0 <memset>
 800b1ec:	4620      	mov	r0, r4
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}

0800b1f0 <__sfp_lock_acquire>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sfp_lock_acquire+0x8>)
 800b1f2:	f000 b8ca 	b.w	800b38a <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	2000b995 	.word	0x2000b995

0800b1fc <__sfp_lock_release>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sfp_lock_release+0x8>)
 800b1fe:	f000 b8c5 	b.w	800b38c <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	2000b995 	.word	0x2000b995

0800b208 <__sinit_lock_acquire>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__sinit_lock_acquire+0x8>)
 800b20a:	f000 b8be 	b.w	800b38a <__retarget_lock_acquire_recursive>
 800b20e:	bf00      	nop
 800b210:	2000b996 	.word	0x2000b996

0800b214 <__sinit_lock_release>:
 800b214:	4801      	ldr	r0, [pc, #4]	; (800b21c <__sinit_lock_release+0x8>)
 800b216:	f000 b8b9 	b.w	800b38c <__retarget_lock_release_recursive>
 800b21a:	bf00      	nop
 800b21c:	2000b996 	.word	0x2000b996

0800b220 <__sinit>:
 800b220:	b510      	push	{r4, lr}
 800b222:	4604      	mov	r4, r0
 800b224:	f7ff fff0 	bl	800b208 <__sinit_lock_acquire>
 800b228:	69a3      	ldr	r3, [r4, #24]
 800b22a:	b11b      	cbz	r3, 800b234 <__sinit+0x14>
 800b22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b230:	f7ff bff0 	b.w	800b214 <__sinit_lock_release>
 800b234:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b238:	6523      	str	r3, [r4, #80]	; 0x50
 800b23a:	4b13      	ldr	r3, [pc, #76]	; (800b288 <__sinit+0x68>)
 800b23c:	4a13      	ldr	r2, [pc, #76]	; (800b28c <__sinit+0x6c>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	62a2      	str	r2, [r4, #40]	; 0x28
 800b242:	42a3      	cmp	r3, r4
 800b244:	bf04      	itt	eq
 800b246:	2301      	moveq	r3, #1
 800b248:	61a3      	streq	r3, [r4, #24]
 800b24a:	4620      	mov	r0, r4
 800b24c:	f000 f820 	bl	800b290 <__sfp>
 800b250:	6060      	str	r0, [r4, #4]
 800b252:	4620      	mov	r0, r4
 800b254:	f000 f81c 	bl	800b290 <__sfp>
 800b258:	60a0      	str	r0, [r4, #8]
 800b25a:	4620      	mov	r0, r4
 800b25c:	f000 f818 	bl	800b290 <__sfp>
 800b260:	2200      	movs	r2, #0
 800b262:	60e0      	str	r0, [r4, #12]
 800b264:	2104      	movs	r1, #4
 800b266:	6860      	ldr	r0, [r4, #4]
 800b268:	f7ff ff82 	bl	800b170 <std>
 800b26c:	68a0      	ldr	r0, [r4, #8]
 800b26e:	2201      	movs	r2, #1
 800b270:	2109      	movs	r1, #9
 800b272:	f7ff ff7d 	bl	800b170 <std>
 800b276:	68e0      	ldr	r0, [r4, #12]
 800b278:	2202      	movs	r2, #2
 800b27a:	2112      	movs	r1, #18
 800b27c:	f7ff ff78 	bl	800b170 <std>
 800b280:	2301      	movs	r3, #1
 800b282:	61a3      	str	r3, [r4, #24]
 800b284:	e7d2      	b.n	800b22c <__sinit+0xc>
 800b286:	bf00      	nop
 800b288:	0800d4d0 	.word	0x0800d4d0
 800b28c:	0800b1b9 	.word	0x0800b1b9

0800b290 <__sfp>:
 800b290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b292:	4607      	mov	r7, r0
 800b294:	f7ff ffac 	bl	800b1f0 <__sfp_lock_acquire>
 800b298:	4b1e      	ldr	r3, [pc, #120]	; (800b314 <__sfp+0x84>)
 800b29a:	681e      	ldr	r6, [r3, #0]
 800b29c:	69b3      	ldr	r3, [r6, #24]
 800b29e:	b913      	cbnz	r3, 800b2a6 <__sfp+0x16>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f7ff ffbd 	bl	800b220 <__sinit>
 800b2a6:	3648      	adds	r6, #72	; 0x48
 800b2a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	d503      	bpl.n	800b2b8 <__sfp+0x28>
 800b2b0:	6833      	ldr	r3, [r6, #0]
 800b2b2:	b30b      	cbz	r3, 800b2f8 <__sfp+0x68>
 800b2b4:	6836      	ldr	r6, [r6, #0]
 800b2b6:	e7f7      	b.n	800b2a8 <__sfp+0x18>
 800b2b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2bc:	b9d5      	cbnz	r5, 800b2f4 <__sfp+0x64>
 800b2be:	4b16      	ldr	r3, [pc, #88]	; (800b318 <__sfp+0x88>)
 800b2c0:	60e3      	str	r3, [r4, #12]
 800b2c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2c6:	6665      	str	r5, [r4, #100]	; 0x64
 800b2c8:	f000 f85e 	bl	800b388 <__retarget_lock_init_recursive>
 800b2cc:	f7ff ff96 	bl	800b1fc <__sfp_lock_release>
 800b2d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2d8:	6025      	str	r5, [r4, #0]
 800b2da:	61a5      	str	r5, [r4, #24]
 800b2dc:	2208      	movs	r2, #8
 800b2de:	4629      	mov	r1, r5
 800b2e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2e4:	f7fe f884 	bl	80093f0 <memset>
 800b2e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2f0:	4620      	mov	r0, r4
 800b2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f4:	3468      	adds	r4, #104	; 0x68
 800b2f6:	e7d9      	b.n	800b2ac <__sfp+0x1c>
 800b2f8:	2104      	movs	r1, #4
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	f7ff ff62 	bl	800b1c4 <__sfmoreglue>
 800b300:	4604      	mov	r4, r0
 800b302:	6030      	str	r0, [r6, #0]
 800b304:	2800      	cmp	r0, #0
 800b306:	d1d5      	bne.n	800b2b4 <__sfp+0x24>
 800b308:	f7ff ff78 	bl	800b1fc <__sfp_lock_release>
 800b30c:	230c      	movs	r3, #12
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	e7ee      	b.n	800b2f0 <__sfp+0x60>
 800b312:	bf00      	nop
 800b314:	0800d4d0 	.word	0x0800d4d0
 800b318:	ffff0001 	.word	0xffff0001

0800b31c <fiprintf>:
 800b31c:	b40e      	push	{r1, r2, r3}
 800b31e:	b503      	push	{r0, r1, lr}
 800b320:	4601      	mov	r1, r0
 800b322:	ab03      	add	r3, sp, #12
 800b324:	4805      	ldr	r0, [pc, #20]	; (800b33c <fiprintf+0x20>)
 800b326:	f853 2b04 	ldr.w	r2, [r3], #4
 800b32a:	6800      	ldr	r0, [r0, #0]
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	f000 fc17 	bl	800bb60 <_vfiprintf_r>
 800b332:	b002      	add	sp, #8
 800b334:	f85d eb04 	ldr.w	lr, [sp], #4
 800b338:	b003      	add	sp, #12
 800b33a:	4770      	bx	lr
 800b33c:	200000dc 	.word	0x200000dc

0800b340 <_fwalk_reent>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	4606      	mov	r6, r0
 800b346:	4688      	mov	r8, r1
 800b348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b34c:	2700      	movs	r7, #0
 800b34e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b352:	f1b9 0901 	subs.w	r9, r9, #1
 800b356:	d505      	bpl.n	800b364 <_fwalk_reent+0x24>
 800b358:	6824      	ldr	r4, [r4, #0]
 800b35a:	2c00      	cmp	r4, #0
 800b35c:	d1f7      	bne.n	800b34e <_fwalk_reent+0xe>
 800b35e:	4638      	mov	r0, r7
 800b360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b364:	89ab      	ldrh	r3, [r5, #12]
 800b366:	2b01      	cmp	r3, #1
 800b368:	d907      	bls.n	800b37a <_fwalk_reent+0x3a>
 800b36a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b36e:	3301      	adds	r3, #1
 800b370:	d003      	beq.n	800b37a <_fwalk_reent+0x3a>
 800b372:	4629      	mov	r1, r5
 800b374:	4630      	mov	r0, r6
 800b376:	47c0      	blx	r8
 800b378:	4307      	orrs	r7, r0
 800b37a:	3568      	adds	r5, #104	; 0x68
 800b37c:	e7e9      	b.n	800b352 <_fwalk_reent+0x12>
	...

0800b380 <_localeconv_r>:
 800b380:	4800      	ldr	r0, [pc, #0]	; (800b384 <_localeconv_r+0x4>)
 800b382:	4770      	bx	lr
 800b384:	20000230 	.word	0x20000230

0800b388 <__retarget_lock_init_recursive>:
 800b388:	4770      	bx	lr

0800b38a <__retarget_lock_acquire_recursive>:
 800b38a:	4770      	bx	lr

0800b38c <__retarget_lock_release_recursive>:
 800b38c:	4770      	bx	lr
	...

0800b390 <__malloc_lock>:
 800b390:	4801      	ldr	r0, [pc, #4]	; (800b398 <__malloc_lock+0x8>)
 800b392:	f7ff bffa 	b.w	800b38a <__retarget_lock_acquire_recursive>
 800b396:	bf00      	nop
 800b398:	2000b994 	.word	0x2000b994

0800b39c <__malloc_unlock>:
 800b39c:	4801      	ldr	r0, [pc, #4]	; (800b3a4 <__malloc_unlock+0x8>)
 800b39e:	f7ff bff5 	b.w	800b38c <__retarget_lock_release_recursive>
 800b3a2:	bf00      	nop
 800b3a4:	2000b994 	.word	0x2000b994

0800b3a8 <_Balloc>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	b976      	cbnz	r6, 800b3d0 <_Balloc+0x28>
 800b3b2:	2010      	movs	r0, #16
 800b3b4:	f7fd ffe4 	bl	8009380 <malloc>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	6260      	str	r0, [r4, #36]	; 0x24
 800b3bc:	b920      	cbnz	r0, 800b3c8 <_Balloc+0x20>
 800b3be:	4b18      	ldr	r3, [pc, #96]	; (800b420 <_Balloc+0x78>)
 800b3c0:	4818      	ldr	r0, [pc, #96]	; (800b424 <_Balloc+0x7c>)
 800b3c2:	2166      	movs	r1, #102	; 0x66
 800b3c4:	f7ff f836 	bl	800a434 <__assert_func>
 800b3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3cc:	6006      	str	r6, [r0, #0]
 800b3ce:	60c6      	str	r6, [r0, #12]
 800b3d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b3d2:	68f3      	ldr	r3, [r6, #12]
 800b3d4:	b183      	cbz	r3, 800b3f8 <_Balloc+0x50>
 800b3d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3de:	b9b8      	cbnz	r0, 800b410 <_Balloc+0x68>
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b3e6:	1d72      	adds	r2, r6, #5
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7fe f812 	bl	8009414 <_calloc_r>
 800b3f0:	b160      	cbz	r0, 800b40c <_Balloc+0x64>
 800b3f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3f6:	e00e      	b.n	800b416 <_Balloc+0x6e>
 800b3f8:	2221      	movs	r2, #33	; 0x21
 800b3fa:	2104      	movs	r1, #4
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f7fe f809 	bl	8009414 <_calloc_r>
 800b402:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b404:	60f0      	str	r0, [r6, #12]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e4      	bne.n	800b3d6 <_Balloc+0x2e>
 800b40c:	2000      	movs	r0, #0
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	6802      	ldr	r2, [r0, #0]
 800b412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b416:	2300      	movs	r3, #0
 800b418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b41c:	e7f7      	b.n	800b40e <_Balloc+0x66>
 800b41e:	bf00      	nop
 800b420:	0800d562 	.word	0x0800d562
 800b424:	0800d648 	.word	0x0800d648

0800b428 <_Bfree>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b42c:	4605      	mov	r5, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	b976      	cbnz	r6, 800b450 <_Bfree+0x28>
 800b432:	2010      	movs	r0, #16
 800b434:	f7fd ffa4 	bl	8009380 <malloc>
 800b438:	4602      	mov	r2, r0
 800b43a:	6268      	str	r0, [r5, #36]	; 0x24
 800b43c:	b920      	cbnz	r0, 800b448 <_Bfree+0x20>
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <_Bfree+0x3c>)
 800b440:	4809      	ldr	r0, [pc, #36]	; (800b468 <_Bfree+0x40>)
 800b442:	218a      	movs	r1, #138	; 0x8a
 800b444:	f7fe fff6 	bl	800a434 <__assert_func>
 800b448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b44c:	6006      	str	r6, [r0, #0]
 800b44e:	60c6      	str	r6, [r0, #12]
 800b450:	b13c      	cbz	r4, 800b462 <_Bfree+0x3a>
 800b452:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b454:	6862      	ldr	r2, [r4, #4]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b45c:	6021      	str	r1, [r4, #0]
 800b45e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	0800d562 	.word	0x0800d562
 800b468:	0800d648 	.word	0x0800d648

0800b46c <__multadd>:
 800b46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b470:	690d      	ldr	r5, [r1, #16]
 800b472:	4607      	mov	r7, r0
 800b474:	460c      	mov	r4, r1
 800b476:	461e      	mov	r6, r3
 800b478:	f101 0c14 	add.w	ip, r1, #20
 800b47c:	2000      	movs	r0, #0
 800b47e:	f8dc 3000 	ldr.w	r3, [ip]
 800b482:	b299      	uxth	r1, r3
 800b484:	fb02 6101 	mla	r1, r2, r1, r6
 800b488:	0c1e      	lsrs	r6, r3, #16
 800b48a:	0c0b      	lsrs	r3, r1, #16
 800b48c:	fb02 3306 	mla	r3, r2, r6, r3
 800b490:	b289      	uxth	r1, r1
 800b492:	3001      	adds	r0, #1
 800b494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b498:	4285      	cmp	r5, r0
 800b49a:	f84c 1b04 	str.w	r1, [ip], #4
 800b49e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4a2:	dcec      	bgt.n	800b47e <__multadd+0x12>
 800b4a4:	b30e      	cbz	r6, 800b4ea <__multadd+0x7e>
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	42ab      	cmp	r3, r5
 800b4aa:	dc19      	bgt.n	800b4e0 <__multadd+0x74>
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	f7ff ff79 	bl	800b3a8 <_Balloc>
 800b4b6:	4680      	mov	r8, r0
 800b4b8:	b928      	cbnz	r0, 800b4c6 <__multadd+0x5a>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <__multadd+0x84>)
 800b4be:	480d      	ldr	r0, [pc, #52]	; (800b4f4 <__multadd+0x88>)
 800b4c0:	21b5      	movs	r1, #181	; 0xb5
 800b4c2:	f7fe ffb7 	bl	800a434 <__assert_func>
 800b4c6:	6922      	ldr	r2, [r4, #16]
 800b4c8:	3202      	adds	r2, #2
 800b4ca:	f104 010c 	add.w	r1, r4, #12
 800b4ce:	0092      	lsls	r2, r2, #2
 800b4d0:	300c      	adds	r0, #12
 800b4d2:	f7fd ff65 	bl	80093a0 <memcpy>
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f7ff ffa5 	bl	800b428 <_Bfree>
 800b4de:	4644      	mov	r4, r8
 800b4e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	615e      	str	r6, [r3, #20]
 800b4e8:	6125      	str	r5, [r4, #16]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f0:	0800d5d4 	.word	0x0800d5d4
 800b4f4:	0800d648 	.word	0x0800d648

0800b4f8 <__hi0bits>:
 800b4f8:	0c03      	lsrs	r3, r0, #16
 800b4fa:	041b      	lsls	r3, r3, #16
 800b4fc:	b9d3      	cbnz	r3, 800b534 <__hi0bits+0x3c>
 800b4fe:	0400      	lsls	r0, r0, #16
 800b500:	2310      	movs	r3, #16
 800b502:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b506:	bf04      	itt	eq
 800b508:	0200      	lsleq	r0, r0, #8
 800b50a:	3308      	addeq	r3, #8
 800b50c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b510:	bf04      	itt	eq
 800b512:	0100      	lsleq	r0, r0, #4
 800b514:	3304      	addeq	r3, #4
 800b516:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b51a:	bf04      	itt	eq
 800b51c:	0080      	lsleq	r0, r0, #2
 800b51e:	3302      	addeq	r3, #2
 800b520:	2800      	cmp	r0, #0
 800b522:	db05      	blt.n	800b530 <__hi0bits+0x38>
 800b524:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b528:	f103 0301 	add.w	r3, r3, #1
 800b52c:	bf08      	it	eq
 800b52e:	2320      	moveq	r3, #32
 800b530:	4618      	mov	r0, r3
 800b532:	4770      	bx	lr
 800b534:	2300      	movs	r3, #0
 800b536:	e7e4      	b.n	800b502 <__hi0bits+0xa>

0800b538 <__lo0bits>:
 800b538:	6803      	ldr	r3, [r0, #0]
 800b53a:	f013 0207 	ands.w	r2, r3, #7
 800b53e:	4601      	mov	r1, r0
 800b540:	d00b      	beq.n	800b55a <__lo0bits+0x22>
 800b542:	07da      	lsls	r2, r3, #31
 800b544:	d423      	bmi.n	800b58e <__lo0bits+0x56>
 800b546:	0798      	lsls	r0, r3, #30
 800b548:	bf49      	itett	mi
 800b54a:	085b      	lsrmi	r3, r3, #1
 800b54c:	089b      	lsrpl	r3, r3, #2
 800b54e:	2001      	movmi	r0, #1
 800b550:	600b      	strmi	r3, [r1, #0]
 800b552:	bf5c      	itt	pl
 800b554:	600b      	strpl	r3, [r1, #0]
 800b556:	2002      	movpl	r0, #2
 800b558:	4770      	bx	lr
 800b55a:	b298      	uxth	r0, r3
 800b55c:	b9a8      	cbnz	r0, 800b58a <__lo0bits+0x52>
 800b55e:	0c1b      	lsrs	r3, r3, #16
 800b560:	2010      	movs	r0, #16
 800b562:	b2da      	uxtb	r2, r3
 800b564:	b90a      	cbnz	r2, 800b56a <__lo0bits+0x32>
 800b566:	3008      	adds	r0, #8
 800b568:	0a1b      	lsrs	r3, r3, #8
 800b56a:	071a      	lsls	r2, r3, #28
 800b56c:	bf04      	itt	eq
 800b56e:	091b      	lsreq	r3, r3, #4
 800b570:	3004      	addeq	r0, #4
 800b572:	079a      	lsls	r2, r3, #30
 800b574:	bf04      	itt	eq
 800b576:	089b      	lsreq	r3, r3, #2
 800b578:	3002      	addeq	r0, #2
 800b57a:	07da      	lsls	r2, r3, #31
 800b57c:	d403      	bmi.n	800b586 <__lo0bits+0x4e>
 800b57e:	085b      	lsrs	r3, r3, #1
 800b580:	f100 0001 	add.w	r0, r0, #1
 800b584:	d005      	beq.n	800b592 <__lo0bits+0x5a>
 800b586:	600b      	str	r3, [r1, #0]
 800b588:	4770      	bx	lr
 800b58a:	4610      	mov	r0, r2
 800b58c:	e7e9      	b.n	800b562 <__lo0bits+0x2a>
 800b58e:	2000      	movs	r0, #0
 800b590:	4770      	bx	lr
 800b592:	2020      	movs	r0, #32
 800b594:	4770      	bx	lr
	...

0800b598 <__i2b>:
 800b598:	b510      	push	{r4, lr}
 800b59a:	460c      	mov	r4, r1
 800b59c:	2101      	movs	r1, #1
 800b59e:	f7ff ff03 	bl	800b3a8 <_Balloc>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	b928      	cbnz	r0, 800b5b2 <__i2b+0x1a>
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <__i2b+0x24>)
 800b5a8:	4805      	ldr	r0, [pc, #20]	; (800b5c0 <__i2b+0x28>)
 800b5aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5ae:	f7fe ff41 	bl	800a434 <__assert_func>
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	6144      	str	r4, [r0, #20]
 800b5b6:	6103      	str	r3, [r0, #16]
 800b5b8:	bd10      	pop	{r4, pc}
 800b5ba:	bf00      	nop
 800b5bc:	0800d5d4 	.word	0x0800d5d4
 800b5c0:	0800d648 	.word	0x0800d648

0800b5c4 <__multiply>:
 800b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c8:	4691      	mov	r9, r2
 800b5ca:	690a      	ldr	r2, [r1, #16]
 800b5cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	bfb8      	it	lt
 800b5d4:	460b      	movlt	r3, r1
 800b5d6:	460c      	mov	r4, r1
 800b5d8:	bfbc      	itt	lt
 800b5da:	464c      	movlt	r4, r9
 800b5dc:	4699      	movlt	r9, r3
 800b5de:	6927      	ldr	r7, [r4, #16]
 800b5e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5e4:	68a3      	ldr	r3, [r4, #8]
 800b5e6:	6861      	ldr	r1, [r4, #4]
 800b5e8:	eb07 060a 	add.w	r6, r7, sl
 800b5ec:	42b3      	cmp	r3, r6
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	bfb8      	it	lt
 800b5f2:	3101      	addlt	r1, #1
 800b5f4:	f7ff fed8 	bl	800b3a8 <_Balloc>
 800b5f8:	b930      	cbnz	r0, 800b608 <__multiply+0x44>
 800b5fa:	4602      	mov	r2, r0
 800b5fc:	4b44      	ldr	r3, [pc, #272]	; (800b710 <__multiply+0x14c>)
 800b5fe:	4845      	ldr	r0, [pc, #276]	; (800b714 <__multiply+0x150>)
 800b600:	f240 115d 	movw	r1, #349	; 0x15d
 800b604:	f7fe ff16 	bl	800a434 <__assert_func>
 800b608:	f100 0514 	add.w	r5, r0, #20
 800b60c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b610:	462b      	mov	r3, r5
 800b612:	2200      	movs	r2, #0
 800b614:	4543      	cmp	r3, r8
 800b616:	d321      	bcc.n	800b65c <__multiply+0x98>
 800b618:	f104 0314 	add.w	r3, r4, #20
 800b61c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b620:	f109 0314 	add.w	r3, r9, #20
 800b624:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b628:	9202      	str	r2, [sp, #8]
 800b62a:	1b3a      	subs	r2, r7, r4
 800b62c:	3a15      	subs	r2, #21
 800b62e:	f022 0203 	bic.w	r2, r2, #3
 800b632:	3204      	adds	r2, #4
 800b634:	f104 0115 	add.w	r1, r4, #21
 800b638:	428f      	cmp	r7, r1
 800b63a:	bf38      	it	cc
 800b63c:	2204      	movcc	r2, #4
 800b63e:	9201      	str	r2, [sp, #4]
 800b640:	9a02      	ldr	r2, [sp, #8]
 800b642:	9303      	str	r3, [sp, #12]
 800b644:	429a      	cmp	r2, r3
 800b646:	d80c      	bhi.n	800b662 <__multiply+0x9e>
 800b648:	2e00      	cmp	r6, #0
 800b64a:	dd03      	ble.n	800b654 <__multiply+0x90>
 800b64c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b650:	2b00      	cmp	r3, #0
 800b652:	d05a      	beq.n	800b70a <__multiply+0x146>
 800b654:	6106      	str	r6, [r0, #16]
 800b656:	b005      	add	sp, #20
 800b658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b65c:	f843 2b04 	str.w	r2, [r3], #4
 800b660:	e7d8      	b.n	800b614 <__multiply+0x50>
 800b662:	f8b3 a000 	ldrh.w	sl, [r3]
 800b666:	f1ba 0f00 	cmp.w	sl, #0
 800b66a:	d024      	beq.n	800b6b6 <__multiply+0xf2>
 800b66c:	f104 0e14 	add.w	lr, r4, #20
 800b670:	46a9      	mov	r9, r5
 800b672:	f04f 0c00 	mov.w	ip, #0
 800b676:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b67a:	f8d9 1000 	ldr.w	r1, [r9]
 800b67e:	fa1f fb82 	uxth.w	fp, r2
 800b682:	b289      	uxth	r1, r1
 800b684:	fb0a 110b 	mla	r1, sl, fp, r1
 800b688:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b68c:	f8d9 2000 	ldr.w	r2, [r9]
 800b690:	4461      	add	r1, ip
 800b692:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b696:	fb0a c20b 	mla	r2, sl, fp, ip
 800b69a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b69e:	b289      	uxth	r1, r1
 800b6a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6a4:	4577      	cmp	r7, lr
 800b6a6:	f849 1b04 	str.w	r1, [r9], #4
 800b6aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b6ae:	d8e2      	bhi.n	800b676 <__multiply+0xb2>
 800b6b0:	9a01      	ldr	r2, [sp, #4]
 800b6b2:	f845 c002 	str.w	ip, [r5, r2]
 800b6b6:	9a03      	ldr	r2, [sp, #12]
 800b6b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	f1b9 0f00 	cmp.w	r9, #0
 800b6c2:	d020      	beq.n	800b706 <__multiply+0x142>
 800b6c4:	6829      	ldr	r1, [r5, #0]
 800b6c6:	f104 0c14 	add.w	ip, r4, #20
 800b6ca:	46ae      	mov	lr, r5
 800b6cc:	f04f 0a00 	mov.w	sl, #0
 800b6d0:	f8bc b000 	ldrh.w	fp, [ip]
 800b6d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6d8:	fb09 220b 	mla	r2, r9, fp, r2
 800b6dc:	4492      	add	sl, r2
 800b6de:	b289      	uxth	r1, r1
 800b6e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b6e4:	f84e 1b04 	str.w	r1, [lr], #4
 800b6e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b6ec:	f8be 1000 	ldrh.w	r1, [lr]
 800b6f0:	0c12      	lsrs	r2, r2, #16
 800b6f2:	fb09 1102 	mla	r1, r9, r2, r1
 800b6f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b6fa:	4567      	cmp	r7, ip
 800b6fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b700:	d8e6      	bhi.n	800b6d0 <__multiply+0x10c>
 800b702:	9a01      	ldr	r2, [sp, #4]
 800b704:	50a9      	str	r1, [r5, r2]
 800b706:	3504      	adds	r5, #4
 800b708:	e79a      	b.n	800b640 <__multiply+0x7c>
 800b70a:	3e01      	subs	r6, #1
 800b70c:	e79c      	b.n	800b648 <__multiply+0x84>
 800b70e:	bf00      	nop
 800b710:	0800d5d4 	.word	0x0800d5d4
 800b714:	0800d648 	.word	0x0800d648

0800b718 <__pow5mult>:
 800b718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	4615      	mov	r5, r2
 800b71e:	f012 0203 	ands.w	r2, r2, #3
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	d007      	beq.n	800b738 <__pow5mult+0x20>
 800b728:	4c25      	ldr	r4, [pc, #148]	; (800b7c0 <__pow5mult+0xa8>)
 800b72a:	3a01      	subs	r2, #1
 800b72c:	2300      	movs	r3, #0
 800b72e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b732:	f7ff fe9b 	bl	800b46c <__multadd>
 800b736:	4607      	mov	r7, r0
 800b738:	10ad      	asrs	r5, r5, #2
 800b73a:	d03d      	beq.n	800b7b8 <__pow5mult+0xa0>
 800b73c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b73e:	b97c      	cbnz	r4, 800b760 <__pow5mult+0x48>
 800b740:	2010      	movs	r0, #16
 800b742:	f7fd fe1d 	bl	8009380 <malloc>
 800b746:	4602      	mov	r2, r0
 800b748:	6270      	str	r0, [r6, #36]	; 0x24
 800b74a:	b928      	cbnz	r0, 800b758 <__pow5mult+0x40>
 800b74c:	4b1d      	ldr	r3, [pc, #116]	; (800b7c4 <__pow5mult+0xac>)
 800b74e:	481e      	ldr	r0, [pc, #120]	; (800b7c8 <__pow5mult+0xb0>)
 800b750:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b754:	f7fe fe6e 	bl	800a434 <__assert_func>
 800b758:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b75c:	6004      	str	r4, [r0, #0]
 800b75e:	60c4      	str	r4, [r0, #12]
 800b760:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b764:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b768:	b94c      	cbnz	r4, 800b77e <__pow5mult+0x66>
 800b76a:	f240 2171 	movw	r1, #625	; 0x271
 800b76e:	4630      	mov	r0, r6
 800b770:	f7ff ff12 	bl	800b598 <__i2b>
 800b774:	2300      	movs	r3, #0
 800b776:	f8c8 0008 	str.w	r0, [r8, #8]
 800b77a:	4604      	mov	r4, r0
 800b77c:	6003      	str	r3, [r0, #0]
 800b77e:	f04f 0900 	mov.w	r9, #0
 800b782:	07eb      	lsls	r3, r5, #31
 800b784:	d50a      	bpl.n	800b79c <__pow5mult+0x84>
 800b786:	4639      	mov	r1, r7
 800b788:	4622      	mov	r2, r4
 800b78a:	4630      	mov	r0, r6
 800b78c:	f7ff ff1a 	bl	800b5c4 <__multiply>
 800b790:	4639      	mov	r1, r7
 800b792:	4680      	mov	r8, r0
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff fe47 	bl	800b428 <_Bfree>
 800b79a:	4647      	mov	r7, r8
 800b79c:	106d      	asrs	r5, r5, #1
 800b79e:	d00b      	beq.n	800b7b8 <__pow5mult+0xa0>
 800b7a0:	6820      	ldr	r0, [r4, #0]
 800b7a2:	b938      	cbnz	r0, 800b7b4 <__pow5mult+0x9c>
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	4621      	mov	r1, r4
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f7ff ff0b 	bl	800b5c4 <__multiply>
 800b7ae:	6020      	str	r0, [r4, #0]
 800b7b0:	f8c0 9000 	str.w	r9, [r0]
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	e7e4      	b.n	800b782 <__pow5mult+0x6a>
 800b7b8:	4638      	mov	r0, r7
 800b7ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7be:	bf00      	nop
 800b7c0:	0800d798 	.word	0x0800d798
 800b7c4:	0800d562 	.word	0x0800d562
 800b7c8:	0800d648 	.word	0x0800d648

0800b7cc <__lshift>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	6849      	ldr	r1, [r1, #4]
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7da:	68a3      	ldr	r3, [r4, #8]
 800b7dc:	4607      	mov	r7, r0
 800b7de:	4691      	mov	r9, r2
 800b7e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7e4:	f108 0601 	add.w	r6, r8, #1
 800b7e8:	42b3      	cmp	r3, r6
 800b7ea:	db0b      	blt.n	800b804 <__lshift+0x38>
 800b7ec:	4638      	mov	r0, r7
 800b7ee:	f7ff fddb 	bl	800b3a8 <_Balloc>
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	b948      	cbnz	r0, 800b80a <__lshift+0x3e>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4b2a      	ldr	r3, [pc, #168]	; (800b8a4 <__lshift+0xd8>)
 800b7fa:	482b      	ldr	r0, [pc, #172]	; (800b8a8 <__lshift+0xdc>)
 800b7fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b800:	f7fe fe18 	bl	800a434 <__assert_func>
 800b804:	3101      	adds	r1, #1
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	e7ee      	b.n	800b7e8 <__lshift+0x1c>
 800b80a:	2300      	movs	r3, #0
 800b80c:	f100 0114 	add.w	r1, r0, #20
 800b810:	f100 0210 	add.w	r2, r0, #16
 800b814:	4618      	mov	r0, r3
 800b816:	4553      	cmp	r3, sl
 800b818:	db37      	blt.n	800b88a <__lshift+0xbe>
 800b81a:	6920      	ldr	r0, [r4, #16]
 800b81c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b820:	f104 0314 	add.w	r3, r4, #20
 800b824:	f019 091f 	ands.w	r9, r9, #31
 800b828:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b82c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b830:	d02f      	beq.n	800b892 <__lshift+0xc6>
 800b832:	f1c9 0e20 	rsb	lr, r9, #32
 800b836:	468a      	mov	sl, r1
 800b838:	f04f 0c00 	mov.w	ip, #0
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	fa02 f209 	lsl.w	r2, r2, r9
 800b842:	ea42 020c 	orr.w	r2, r2, ip
 800b846:	f84a 2b04 	str.w	r2, [sl], #4
 800b84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b84e:	4298      	cmp	r0, r3
 800b850:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b854:	d8f2      	bhi.n	800b83c <__lshift+0x70>
 800b856:	1b03      	subs	r3, r0, r4
 800b858:	3b15      	subs	r3, #21
 800b85a:	f023 0303 	bic.w	r3, r3, #3
 800b85e:	3304      	adds	r3, #4
 800b860:	f104 0215 	add.w	r2, r4, #21
 800b864:	4290      	cmp	r0, r2
 800b866:	bf38      	it	cc
 800b868:	2304      	movcc	r3, #4
 800b86a:	f841 c003 	str.w	ip, [r1, r3]
 800b86e:	f1bc 0f00 	cmp.w	ip, #0
 800b872:	d001      	beq.n	800b878 <__lshift+0xac>
 800b874:	f108 0602 	add.w	r6, r8, #2
 800b878:	3e01      	subs	r6, #1
 800b87a:	4638      	mov	r0, r7
 800b87c:	612e      	str	r6, [r5, #16]
 800b87e:	4621      	mov	r1, r4
 800b880:	f7ff fdd2 	bl	800b428 <_Bfree>
 800b884:	4628      	mov	r0, r5
 800b886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b88a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b88e:	3301      	adds	r3, #1
 800b890:	e7c1      	b.n	800b816 <__lshift+0x4a>
 800b892:	3904      	subs	r1, #4
 800b894:	f853 2b04 	ldr.w	r2, [r3], #4
 800b898:	f841 2f04 	str.w	r2, [r1, #4]!
 800b89c:	4298      	cmp	r0, r3
 800b89e:	d8f9      	bhi.n	800b894 <__lshift+0xc8>
 800b8a0:	e7ea      	b.n	800b878 <__lshift+0xac>
 800b8a2:	bf00      	nop
 800b8a4:	0800d5d4 	.word	0x0800d5d4
 800b8a8:	0800d648 	.word	0x0800d648

0800b8ac <__mcmp>:
 800b8ac:	b530      	push	{r4, r5, lr}
 800b8ae:	6902      	ldr	r2, [r0, #16]
 800b8b0:	690c      	ldr	r4, [r1, #16]
 800b8b2:	1b12      	subs	r2, r2, r4
 800b8b4:	d10e      	bne.n	800b8d4 <__mcmp+0x28>
 800b8b6:	f100 0314 	add.w	r3, r0, #20
 800b8ba:	3114      	adds	r1, #20
 800b8bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8cc:	42a5      	cmp	r5, r4
 800b8ce:	d003      	beq.n	800b8d8 <__mcmp+0x2c>
 800b8d0:	d305      	bcc.n	800b8de <__mcmp+0x32>
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	bd30      	pop	{r4, r5, pc}
 800b8d8:	4283      	cmp	r3, r0
 800b8da:	d3f3      	bcc.n	800b8c4 <__mcmp+0x18>
 800b8dc:	e7fa      	b.n	800b8d4 <__mcmp+0x28>
 800b8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b8e2:	e7f7      	b.n	800b8d4 <__mcmp+0x28>

0800b8e4 <__mdiff>:
 800b8e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	4690      	mov	r8, r2
 800b8f2:	f7ff ffdb 	bl	800b8ac <__mcmp>
 800b8f6:	1e05      	subs	r5, r0, #0
 800b8f8:	d110      	bne.n	800b91c <__mdiff+0x38>
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff fd53 	bl	800b3a8 <_Balloc>
 800b902:	b930      	cbnz	r0, 800b912 <__mdiff+0x2e>
 800b904:	4b3a      	ldr	r3, [pc, #232]	; (800b9f0 <__mdiff+0x10c>)
 800b906:	4602      	mov	r2, r0
 800b908:	f240 2132 	movw	r1, #562	; 0x232
 800b90c:	4839      	ldr	r0, [pc, #228]	; (800b9f4 <__mdiff+0x110>)
 800b90e:	f7fe fd91 	bl	800a434 <__assert_func>
 800b912:	2301      	movs	r3, #1
 800b914:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b91c:	bfa4      	itt	ge
 800b91e:	4643      	movge	r3, r8
 800b920:	46a0      	movge	r8, r4
 800b922:	4630      	mov	r0, r6
 800b924:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b928:	bfa6      	itte	ge
 800b92a:	461c      	movge	r4, r3
 800b92c:	2500      	movge	r5, #0
 800b92e:	2501      	movlt	r5, #1
 800b930:	f7ff fd3a 	bl	800b3a8 <_Balloc>
 800b934:	b920      	cbnz	r0, 800b940 <__mdiff+0x5c>
 800b936:	4b2e      	ldr	r3, [pc, #184]	; (800b9f0 <__mdiff+0x10c>)
 800b938:	4602      	mov	r2, r0
 800b93a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b93e:	e7e5      	b.n	800b90c <__mdiff+0x28>
 800b940:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b944:	6926      	ldr	r6, [r4, #16]
 800b946:	60c5      	str	r5, [r0, #12]
 800b948:	f104 0914 	add.w	r9, r4, #20
 800b94c:	f108 0514 	add.w	r5, r8, #20
 800b950:	f100 0e14 	add.w	lr, r0, #20
 800b954:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b958:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b95c:	f108 0210 	add.w	r2, r8, #16
 800b960:	46f2      	mov	sl, lr
 800b962:	2100      	movs	r1, #0
 800b964:	f859 3b04 	ldr.w	r3, [r9], #4
 800b968:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b96c:	fa1f f883 	uxth.w	r8, r3
 800b970:	fa11 f18b 	uxtah	r1, r1, fp
 800b974:	0c1b      	lsrs	r3, r3, #16
 800b976:	eba1 0808 	sub.w	r8, r1, r8
 800b97a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b97e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b982:	fa1f f888 	uxth.w	r8, r8
 800b986:	1419      	asrs	r1, r3, #16
 800b988:	454e      	cmp	r6, r9
 800b98a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b98e:	f84a 3b04 	str.w	r3, [sl], #4
 800b992:	d8e7      	bhi.n	800b964 <__mdiff+0x80>
 800b994:	1b33      	subs	r3, r6, r4
 800b996:	3b15      	subs	r3, #21
 800b998:	f023 0303 	bic.w	r3, r3, #3
 800b99c:	3304      	adds	r3, #4
 800b99e:	3415      	adds	r4, #21
 800b9a0:	42a6      	cmp	r6, r4
 800b9a2:	bf38      	it	cc
 800b9a4:	2304      	movcc	r3, #4
 800b9a6:	441d      	add	r5, r3
 800b9a8:	4473      	add	r3, lr
 800b9aa:	469e      	mov	lr, r3
 800b9ac:	462e      	mov	r6, r5
 800b9ae:	4566      	cmp	r6, ip
 800b9b0:	d30e      	bcc.n	800b9d0 <__mdiff+0xec>
 800b9b2:	f10c 0203 	add.w	r2, ip, #3
 800b9b6:	1b52      	subs	r2, r2, r5
 800b9b8:	f022 0203 	bic.w	r2, r2, #3
 800b9bc:	3d03      	subs	r5, #3
 800b9be:	45ac      	cmp	ip, r5
 800b9c0:	bf38      	it	cc
 800b9c2:	2200      	movcc	r2, #0
 800b9c4:	441a      	add	r2, r3
 800b9c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9ca:	b17b      	cbz	r3, 800b9ec <__mdiff+0x108>
 800b9cc:	6107      	str	r7, [r0, #16]
 800b9ce:	e7a3      	b.n	800b918 <__mdiff+0x34>
 800b9d0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b9d4:	fa11 f288 	uxtah	r2, r1, r8
 800b9d8:	1414      	asrs	r4, r2, #16
 800b9da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9de:	b292      	uxth	r2, r2
 800b9e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9e4:	f84e 2b04 	str.w	r2, [lr], #4
 800b9e8:	1421      	asrs	r1, r4, #16
 800b9ea:	e7e0      	b.n	800b9ae <__mdiff+0xca>
 800b9ec:	3f01      	subs	r7, #1
 800b9ee:	e7ea      	b.n	800b9c6 <__mdiff+0xe2>
 800b9f0:	0800d5d4 	.word	0x0800d5d4
 800b9f4:	0800d648 	.word	0x0800d648

0800b9f8 <__d2b>:
 800b9f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9fc:	4689      	mov	r9, r1
 800b9fe:	2101      	movs	r1, #1
 800ba00:	ec57 6b10 	vmov	r6, r7, d0
 800ba04:	4690      	mov	r8, r2
 800ba06:	f7ff fccf 	bl	800b3a8 <_Balloc>
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	b930      	cbnz	r0, 800ba1c <__d2b+0x24>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	4b25      	ldr	r3, [pc, #148]	; (800baa8 <__d2b+0xb0>)
 800ba12:	4826      	ldr	r0, [pc, #152]	; (800baac <__d2b+0xb4>)
 800ba14:	f240 310a 	movw	r1, #778	; 0x30a
 800ba18:	f7fe fd0c 	bl	800a434 <__assert_func>
 800ba1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ba20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ba24:	bb35      	cbnz	r5, 800ba74 <__d2b+0x7c>
 800ba26:	2e00      	cmp	r6, #0
 800ba28:	9301      	str	r3, [sp, #4]
 800ba2a:	d028      	beq.n	800ba7e <__d2b+0x86>
 800ba2c:	4668      	mov	r0, sp
 800ba2e:	9600      	str	r6, [sp, #0]
 800ba30:	f7ff fd82 	bl	800b538 <__lo0bits>
 800ba34:	9900      	ldr	r1, [sp, #0]
 800ba36:	b300      	cbz	r0, 800ba7a <__d2b+0x82>
 800ba38:	9a01      	ldr	r2, [sp, #4]
 800ba3a:	f1c0 0320 	rsb	r3, r0, #32
 800ba3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba42:	430b      	orrs	r3, r1
 800ba44:	40c2      	lsrs	r2, r0
 800ba46:	6163      	str	r3, [r4, #20]
 800ba48:	9201      	str	r2, [sp, #4]
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	61a3      	str	r3, [r4, #24]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bf14      	ite	ne
 800ba52:	2202      	movne	r2, #2
 800ba54:	2201      	moveq	r2, #1
 800ba56:	6122      	str	r2, [r4, #16]
 800ba58:	b1d5      	cbz	r5, 800ba90 <__d2b+0x98>
 800ba5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba5e:	4405      	add	r5, r0
 800ba60:	f8c9 5000 	str.w	r5, [r9]
 800ba64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba68:	f8c8 0000 	str.w	r0, [r8]
 800ba6c:	4620      	mov	r0, r4
 800ba6e:	b003      	add	sp, #12
 800ba70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba78:	e7d5      	b.n	800ba26 <__d2b+0x2e>
 800ba7a:	6161      	str	r1, [r4, #20]
 800ba7c:	e7e5      	b.n	800ba4a <__d2b+0x52>
 800ba7e:	a801      	add	r0, sp, #4
 800ba80:	f7ff fd5a 	bl	800b538 <__lo0bits>
 800ba84:	9b01      	ldr	r3, [sp, #4]
 800ba86:	6163      	str	r3, [r4, #20]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	6122      	str	r2, [r4, #16]
 800ba8c:	3020      	adds	r0, #32
 800ba8e:	e7e3      	b.n	800ba58 <__d2b+0x60>
 800ba90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba98:	f8c9 0000 	str.w	r0, [r9]
 800ba9c:	6918      	ldr	r0, [r3, #16]
 800ba9e:	f7ff fd2b 	bl	800b4f8 <__hi0bits>
 800baa2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800baa6:	e7df      	b.n	800ba68 <__d2b+0x70>
 800baa8:	0800d5d4 	.word	0x0800d5d4
 800baac:	0800d648 	.word	0x0800d648

0800bab0 <_realloc_r>:
 800bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab4:	4680      	mov	r8, r0
 800bab6:	4614      	mov	r4, r2
 800bab8:	460e      	mov	r6, r1
 800baba:	b921      	cbnz	r1, 800bac6 <_realloc_r+0x16>
 800babc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bac0:	4611      	mov	r1, r2
 800bac2:	f7fd bd5d 	b.w	8009580 <_malloc_r>
 800bac6:	b92a      	cbnz	r2, 800bad4 <_realloc_r+0x24>
 800bac8:	f7fd fcba 	bl	8009440 <_free_r>
 800bacc:	4625      	mov	r5, r4
 800bace:	4628      	mov	r0, r5
 800bad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bad4:	f000 fbe6 	bl	800c2a4 <_malloc_usable_size_r>
 800bad8:	4284      	cmp	r4, r0
 800bada:	4607      	mov	r7, r0
 800badc:	d802      	bhi.n	800bae4 <_realloc_r+0x34>
 800bade:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bae2:	d812      	bhi.n	800bb0a <_realloc_r+0x5a>
 800bae4:	4621      	mov	r1, r4
 800bae6:	4640      	mov	r0, r8
 800bae8:	f7fd fd4a 	bl	8009580 <_malloc_r>
 800baec:	4605      	mov	r5, r0
 800baee:	2800      	cmp	r0, #0
 800baf0:	d0ed      	beq.n	800bace <_realloc_r+0x1e>
 800baf2:	42bc      	cmp	r4, r7
 800baf4:	4622      	mov	r2, r4
 800baf6:	4631      	mov	r1, r6
 800baf8:	bf28      	it	cs
 800bafa:	463a      	movcs	r2, r7
 800bafc:	f7fd fc50 	bl	80093a0 <memcpy>
 800bb00:	4631      	mov	r1, r6
 800bb02:	4640      	mov	r0, r8
 800bb04:	f7fd fc9c 	bl	8009440 <_free_r>
 800bb08:	e7e1      	b.n	800bace <_realloc_r+0x1e>
 800bb0a:	4635      	mov	r5, r6
 800bb0c:	e7df      	b.n	800bace <_realloc_r+0x1e>

0800bb0e <__sfputc_r>:
 800bb0e:	6893      	ldr	r3, [r2, #8]
 800bb10:	3b01      	subs	r3, #1
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	b410      	push	{r4}
 800bb16:	6093      	str	r3, [r2, #8]
 800bb18:	da08      	bge.n	800bb2c <__sfputc_r+0x1e>
 800bb1a:	6994      	ldr	r4, [r2, #24]
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	db01      	blt.n	800bb24 <__sfputc_r+0x16>
 800bb20:	290a      	cmp	r1, #10
 800bb22:	d103      	bne.n	800bb2c <__sfputc_r+0x1e>
 800bb24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb28:	f000 b98e 	b.w	800be48 <__swbuf_r>
 800bb2c:	6813      	ldr	r3, [r2, #0]
 800bb2e:	1c58      	adds	r0, r3, #1
 800bb30:	6010      	str	r0, [r2, #0]
 800bb32:	7019      	strb	r1, [r3, #0]
 800bb34:	4608      	mov	r0, r1
 800bb36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3a:	4770      	bx	lr

0800bb3c <__sfputs_r>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	4614      	mov	r4, r2
 800bb44:	18d5      	adds	r5, r2, r3
 800bb46:	42ac      	cmp	r4, r5
 800bb48:	d101      	bne.n	800bb4e <__sfputs_r+0x12>
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	e007      	b.n	800bb5e <__sfputs_r+0x22>
 800bb4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb52:	463a      	mov	r2, r7
 800bb54:	4630      	mov	r0, r6
 800bb56:	f7ff ffda 	bl	800bb0e <__sfputc_r>
 800bb5a:	1c43      	adds	r3, r0, #1
 800bb5c:	d1f3      	bne.n	800bb46 <__sfputs_r+0xa>
 800bb5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb60 <_vfiprintf_r>:
 800bb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb64:	460d      	mov	r5, r1
 800bb66:	b09d      	sub	sp, #116	; 0x74
 800bb68:	4614      	mov	r4, r2
 800bb6a:	4698      	mov	r8, r3
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	b118      	cbz	r0, 800bb78 <_vfiprintf_r+0x18>
 800bb70:	6983      	ldr	r3, [r0, #24]
 800bb72:	b90b      	cbnz	r3, 800bb78 <_vfiprintf_r+0x18>
 800bb74:	f7ff fb54 	bl	800b220 <__sinit>
 800bb78:	4b89      	ldr	r3, [pc, #548]	; (800bda0 <_vfiprintf_r+0x240>)
 800bb7a:	429d      	cmp	r5, r3
 800bb7c:	d11b      	bne.n	800bbb6 <_vfiprintf_r+0x56>
 800bb7e:	6875      	ldr	r5, [r6, #4]
 800bb80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb82:	07d9      	lsls	r1, r3, #31
 800bb84:	d405      	bmi.n	800bb92 <_vfiprintf_r+0x32>
 800bb86:	89ab      	ldrh	r3, [r5, #12]
 800bb88:	059a      	lsls	r2, r3, #22
 800bb8a:	d402      	bmi.n	800bb92 <_vfiprintf_r+0x32>
 800bb8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb8e:	f7ff fbfc 	bl	800b38a <__retarget_lock_acquire_recursive>
 800bb92:	89ab      	ldrh	r3, [r5, #12]
 800bb94:	071b      	lsls	r3, r3, #28
 800bb96:	d501      	bpl.n	800bb9c <_vfiprintf_r+0x3c>
 800bb98:	692b      	ldr	r3, [r5, #16]
 800bb9a:	b9eb      	cbnz	r3, 800bbd8 <_vfiprintf_r+0x78>
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f000 f9b6 	bl	800bf10 <__swsetup_r>
 800bba4:	b1c0      	cbz	r0, 800bbd8 <_vfiprintf_r+0x78>
 800bba6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba8:	07dc      	lsls	r4, r3, #31
 800bbaa:	d50e      	bpl.n	800bbca <_vfiprintf_r+0x6a>
 800bbac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bbb0:	b01d      	add	sp, #116	; 0x74
 800bbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbb6:	4b7b      	ldr	r3, [pc, #492]	; (800bda4 <_vfiprintf_r+0x244>)
 800bbb8:	429d      	cmp	r5, r3
 800bbba:	d101      	bne.n	800bbc0 <_vfiprintf_r+0x60>
 800bbbc:	68b5      	ldr	r5, [r6, #8]
 800bbbe:	e7df      	b.n	800bb80 <_vfiprintf_r+0x20>
 800bbc0:	4b79      	ldr	r3, [pc, #484]	; (800bda8 <_vfiprintf_r+0x248>)
 800bbc2:	429d      	cmp	r5, r3
 800bbc4:	bf08      	it	eq
 800bbc6:	68f5      	ldreq	r5, [r6, #12]
 800bbc8:	e7da      	b.n	800bb80 <_vfiprintf_r+0x20>
 800bbca:	89ab      	ldrh	r3, [r5, #12]
 800bbcc:	0598      	lsls	r0, r3, #22
 800bbce:	d4ed      	bmi.n	800bbac <_vfiprintf_r+0x4c>
 800bbd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbd2:	f7ff fbdb 	bl	800b38c <__retarget_lock_release_recursive>
 800bbd6:	e7e9      	b.n	800bbac <_vfiprintf_r+0x4c>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	9309      	str	r3, [sp, #36]	; 0x24
 800bbdc:	2320      	movs	r3, #32
 800bbde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbe2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbe6:	2330      	movs	r3, #48	; 0x30
 800bbe8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bdac <_vfiprintf_r+0x24c>
 800bbec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbf0:	f04f 0901 	mov.w	r9, #1
 800bbf4:	4623      	mov	r3, r4
 800bbf6:	469a      	mov	sl, r3
 800bbf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbfc:	b10a      	cbz	r2, 800bc02 <_vfiprintf_r+0xa2>
 800bbfe:	2a25      	cmp	r2, #37	; 0x25
 800bc00:	d1f9      	bne.n	800bbf6 <_vfiprintf_r+0x96>
 800bc02:	ebba 0b04 	subs.w	fp, sl, r4
 800bc06:	d00b      	beq.n	800bc20 <_vfiprintf_r+0xc0>
 800bc08:	465b      	mov	r3, fp
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	4629      	mov	r1, r5
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f7ff ff94 	bl	800bb3c <__sfputs_r>
 800bc14:	3001      	adds	r0, #1
 800bc16:	f000 80aa 	beq.w	800bd6e <_vfiprintf_r+0x20e>
 800bc1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc1c:	445a      	add	r2, fp
 800bc1e:	9209      	str	r2, [sp, #36]	; 0x24
 800bc20:	f89a 3000 	ldrb.w	r3, [sl]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f000 80a2 	beq.w	800bd6e <_vfiprintf_r+0x20e>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc34:	f10a 0a01 	add.w	sl, sl, #1
 800bc38:	9304      	str	r3, [sp, #16]
 800bc3a:	9307      	str	r3, [sp, #28]
 800bc3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc40:	931a      	str	r3, [sp, #104]	; 0x68
 800bc42:	4654      	mov	r4, sl
 800bc44:	2205      	movs	r2, #5
 800bc46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc4a:	4858      	ldr	r0, [pc, #352]	; (800bdac <_vfiprintf_r+0x24c>)
 800bc4c:	f7f4 fae8 	bl	8000220 <memchr>
 800bc50:	9a04      	ldr	r2, [sp, #16]
 800bc52:	b9d8      	cbnz	r0, 800bc8c <_vfiprintf_r+0x12c>
 800bc54:	06d1      	lsls	r1, r2, #27
 800bc56:	bf44      	itt	mi
 800bc58:	2320      	movmi	r3, #32
 800bc5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc5e:	0713      	lsls	r3, r2, #28
 800bc60:	bf44      	itt	mi
 800bc62:	232b      	movmi	r3, #43	; 0x2b
 800bc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc68:	f89a 3000 	ldrb.w	r3, [sl]
 800bc6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc6e:	d015      	beq.n	800bc9c <_vfiprintf_r+0x13c>
 800bc70:	9a07      	ldr	r2, [sp, #28]
 800bc72:	4654      	mov	r4, sl
 800bc74:	2000      	movs	r0, #0
 800bc76:	f04f 0c0a 	mov.w	ip, #10
 800bc7a:	4621      	mov	r1, r4
 800bc7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc80:	3b30      	subs	r3, #48	; 0x30
 800bc82:	2b09      	cmp	r3, #9
 800bc84:	d94e      	bls.n	800bd24 <_vfiprintf_r+0x1c4>
 800bc86:	b1b0      	cbz	r0, 800bcb6 <_vfiprintf_r+0x156>
 800bc88:	9207      	str	r2, [sp, #28]
 800bc8a:	e014      	b.n	800bcb6 <_vfiprintf_r+0x156>
 800bc8c:	eba0 0308 	sub.w	r3, r0, r8
 800bc90:	fa09 f303 	lsl.w	r3, r9, r3
 800bc94:	4313      	orrs	r3, r2
 800bc96:	9304      	str	r3, [sp, #16]
 800bc98:	46a2      	mov	sl, r4
 800bc9a:	e7d2      	b.n	800bc42 <_vfiprintf_r+0xe2>
 800bc9c:	9b03      	ldr	r3, [sp, #12]
 800bc9e:	1d19      	adds	r1, r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	9103      	str	r1, [sp, #12]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	bfbb      	ittet	lt
 800bca8:	425b      	neglt	r3, r3
 800bcaa:	f042 0202 	orrlt.w	r2, r2, #2
 800bcae:	9307      	strge	r3, [sp, #28]
 800bcb0:	9307      	strlt	r3, [sp, #28]
 800bcb2:	bfb8      	it	lt
 800bcb4:	9204      	strlt	r2, [sp, #16]
 800bcb6:	7823      	ldrb	r3, [r4, #0]
 800bcb8:	2b2e      	cmp	r3, #46	; 0x2e
 800bcba:	d10c      	bne.n	800bcd6 <_vfiprintf_r+0x176>
 800bcbc:	7863      	ldrb	r3, [r4, #1]
 800bcbe:	2b2a      	cmp	r3, #42	; 0x2a
 800bcc0:	d135      	bne.n	800bd2e <_vfiprintf_r+0x1ce>
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	1d1a      	adds	r2, r3, #4
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	9203      	str	r2, [sp, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	bfb8      	it	lt
 800bcce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bcd2:	3402      	adds	r4, #2
 800bcd4:	9305      	str	r3, [sp, #20]
 800bcd6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdbc <_vfiprintf_r+0x25c>
 800bcda:	7821      	ldrb	r1, [r4, #0]
 800bcdc:	2203      	movs	r2, #3
 800bcde:	4650      	mov	r0, sl
 800bce0:	f7f4 fa9e 	bl	8000220 <memchr>
 800bce4:	b140      	cbz	r0, 800bcf8 <_vfiprintf_r+0x198>
 800bce6:	2340      	movs	r3, #64	; 0x40
 800bce8:	eba0 000a 	sub.w	r0, r0, sl
 800bcec:	fa03 f000 	lsl.w	r0, r3, r0
 800bcf0:	9b04      	ldr	r3, [sp, #16]
 800bcf2:	4303      	orrs	r3, r0
 800bcf4:	3401      	adds	r4, #1
 800bcf6:	9304      	str	r3, [sp, #16]
 800bcf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcfc:	482c      	ldr	r0, [pc, #176]	; (800bdb0 <_vfiprintf_r+0x250>)
 800bcfe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd02:	2206      	movs	r2, #6
 800bd04:	f7f4 fa8c 	bl	8000220 <memchr>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d03f      	beq.n	800bd8c <_vfiprintf_r+0x22c>
 800bd0c:	4b29      	ldr	r3, [pc, #164]	; (800bdb4 <_vfiprintf_r+0x254>)
 800bd0e:	bb1b      	cbnz	r3, 800bd58 <_vfiprintf_r+0x1f8>
 800bd10:	9b03      	ldr	r3, [sp, #12]
 800bd12:	3307      	adds	r3, #7
 800bd14:	f023 0307 	bic.w	r3, r3, #7
 800bd18:	3308      	adds	r3, #8
 800bd1a:	9303      	str	r3, [sp, #12]
 800bd1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd1e:	443b      	add	r3, r7
 800bd20:	9309      	str	r3, [sp, #36]	; 0x24
 800bd22:	e767      	b.n	800bbf4 <_vfiprintf_r+0x94>
 800bd24:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd28:	460c      	mov	r4, r1
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	e7a5      	b.n	800bc7a <_vfiprintf_r+0x11a>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	3401      	adds	r4, #1
 800bd32:	9305      	str	r3, [sp, #20]
 800bd34:	4619      	mov	r1, r3
 800bd36:	f04f 0c0a 	mov.w	ip, #10
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd40:	3a30      	subs	r2, #48	; 0x30
 800bd42:	2a09      	cmp	r2, #9
 800bd44:	d903      	bls.n	800bd4e <_vfiprintf_r+0x1ee>
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0c5      	beq.n	800bcd6 <_vfiprintf_r+0x176>
 800bd4a:	9105      	str	r1, [sp, #20]
 800bd4c:	e7c3      	b.n	800bcd6 <_vfiprintf_r+0x176>
 800bd4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd52:	4604      	mov	r4, r0
 800bd54:	2301      	movs	r3, #1
 800bd56:	e7f0      	b.n	800bd3a <_vfiprintf_r+0x1da>
 800bd58:	ab03      	add	r3, sp, #12
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	462a      	mov	r2, r5
 800bd5e:	4b16      	ldr	r3, [pc, #88]	; (800bdb8 <_vfiprintf_r+0x258>)
 800bd60:	a904      	add	r1, sp, #16
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7fd fe7c 	bl	8009a60 <_printf_float>
 800bd68:	4607      	mov	r7, r0
 800bd6a:	1c78      	adds	r0, r7, #1
 800bd6c:	d1d6      	bne.n	800bd1c <_vfiprintf_r+0x1bc>
 800bd6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd70:	07d9      	lsls	r1, r3, #31
 800bd72:	d405      	bmi.n	800bd80 <_vfiprintf_r+0x220>
 800bd74:	89ab      	ldrh	r3, [r5, #12]
 800bd76:	059a      	lsls	r2, r3, #22
 800bd78:	d402      	bmi.n	800bd80 <_vfiprintf_r+0x220>
 800bd7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd7c:	f7ff fb06 	bl	800b38c <__retarget_lock_release_recursive>
 800bd80:	89ab      	ldrh	r3, [r5, #12]
 800bd82:	065b      	lsls	r3, r3, #25
 800bd84:	f53f af12 	bmi.w	800bbac <_vfiprintf_r+0x4c>
 800bd88:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd8a:	e711      	b.n	800bbb0 <_vfiprintf_r+0x50>
 800bd8c:	ab03      	add	r3, sp, #12
 800bd8e:	9300      	str	r3, [sp, #0]
 800bd90:	462a      	mov	r2, r5
 800bd92:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <_vfiprintf_r+0x258>)
 800bd94:	a904      	add	r1, sp, #16
 800bd96:	4630      	mov	r0, r6
 800bd98:	f7fe f906 	bl	8009fa8 <_printf_i>
 800bd9c:	e7e4      	b.n	800bd68 <_vfiprintf_r+0x208>
 800bd9e:	bf00      	nop
 800bda0:	0800d608 	.word	0x0800d608
 800bda4:	0800d628 	.word	0x0800d628
 800bda8:	0800d5e8 	.word	0x0800d5e8
 800bdac:	0800d4d4 	.word	0x0800d4d4
 800bdb0:	0800d4de 	.word	0x0800d4de
 800bdb4:	08009a61 	.word	0x08009a61
 800bdb8:	0800bb3d 	.word	0x0800bb3d
 800bdbc:	0800d4da 	.word	0x0800d4da

0800bdc0 <__sread>:
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	f000 fa74 	bl	800c2b4 <_read_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	bfab      	itete	ge
 800bdd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bdd4:	181b      	addge	r3, r3, r0
 800bdd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdda:	bfac      	ite	ge
 800bddc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdde:	81a3      	strhlt	r3, [r4, #12]
 800bde0:	bd10      	pop	{r4, pc}

0800bde2 <__swrite>:
 800bde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde6:	461f      	mov	r7, r3
 800bde8:	898b      	ldrh	r3, [r1, #12]
 800bdea:	05db      	lsls	r3, r3, #23
 800bdec:	4605      	mov	r5, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	d505      	bpl.n	800be00 <__swrite+0x1e>
 800bdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f000 f9c8 	bl	800c190 <_lseek_r>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	4628      	mov	r0, r5
 800be12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	f000 b869 	b.w	800beec <_write_r>

0800be1a <__sseek>:
 800be1a:	b510      	push	{r4, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be22:	f000 f9b5 	bl	800c190 <_lseek_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	bf15      	itete	ne
 800be2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be36:	81a3      	strheq	r3, [r4, #12]
 800be38:	bf18      	it	ne
 800be3a:	81a3      	strhne	r3, [r4, #12]
 800be3c:	bd10      	pop	{r4, pc}

0800be3e <__sclose>:
 800be3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be42:	f000 b8d3 	b.w	800bfec <_close_r>
	...

0800be48 <__swbuf_r>:
 800be48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be4a:	460e      	mov	r6, r1
 800be4c:	4614      	mov	r4, r2
 800be4e:	4605      	mov	r5, r0
 800be50:	b118      	cbz	r0, 800be5a <__swbuf_r+0x12>
 800be52:	6983      	ldr	r3, [r0, #24]
 800be54:	b90b      	cbnz	r3, 800be5a <__swbuf_r+0x12>
 800be56:	f7ff f9e3 	bl	800b220 <__sinit>
 800be5a:	4b21      	ldr	r3, [pc, #132]	; (800bee0 <__swbuf_r+0x98>)
 800be5c:	429c      	cmp	r4, r3
 800be5e:	d12b      	bne.n	800beb8 <__swbuf_r+0x70>
 800be60:	686c      	ldr	r4, [r5, #4]
 800be62:	69a3      	ldr	r3, [r4, #24]
 800be64:	60a3      	str	r3, [r4, #8]
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	071a      	lsls	r2, r3, #28
 800be6a:	d52f      	bpl.n	800becc <__swbuf_r+0x84>
 800be6c:	6923      	ldr	r3, [r4, #16]
 800be6e:	b36b      	cbz	r3, 800becc <__swbuf_r+0x84>
 800be70:	6923      	ldr	r3, [r4, #16]
 800be72:	6820      	ldr	r0, [r4, #0]
 800be74:	1ac0      	subs	r0, r0, r3
 800be76:	6963      	ldr	r3, [r4, #20]
 800be78:	b2f6      	uxtb	r6, r6
 800be7a:	4283      	cmp	r3, r0
 800be7c:	4637      	mov	r7, r6
 800be7e:	dc04      	bgt.n	800be8a <__swbuf_r+0x42>
 800be80:	4621      	mov	r1, r4
 800be82:	4628      	mov	r0, r5
 800be84:	f000 f948 	bl	800c118 <_fflush_r>
 800be88:	bb30      	cbnz	r0, 800bed8 <__swbuf_r+0x90>
 800be8a:	68a3      	ldr	r3, [r4, #8]
 800be8c:	3b01      	subs	r3, #1
 800be8e:	60a3      	str	r3, [r4, #8]
 800be90:	6823      	ldr	r3, [r4, #0]
 800be92:	1c5a      	adds	r2, r3, #1
 800be94:	6022      	str	r2, [r4, #0]
 800be96:	701e      	strb	r6, [r3, #0]
 800be98:	6963      	ldr	r3, [r4, #20]
 800be9a:	3001      	adds	r0, #1
 800be9c:	4283      	cmp	r3, r0
 800be9e:	d004      	beq.n	800beaa <__swbuf_r+0x62>
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	07db      	lsls	r3, r3, #31
 800bea4:	d506      	bpl.n	800beb4 <__swbuf_r+0x6c>
 800bea6:	2e0a      	cmp	r6, #10
 800bea8:	d104      	bne.n	800beb4 <__swbuf_r+0x6c>
 800beaa:	4621      	mov	r1, r4
 800beac:	4628      	mov	r0, r5
 800beae:	f000 f933 	bl	800c118 <_fflush_r>
 800beb2:	b988      	cbnz	r0, 800bed8 <__swbuf_r+0x90>
 800beb4:	4638      	mov	r0, r7
 800beb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beb8:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <__swbuf_r+0x9c>)
 800beba:	429c      	cmp	r4, r3
 800bebc:	d101      	bne.n	800bec2 <__swbuf_r+0x7a>
 800bebe:	68ac      	ldr	r4, [r5, #8]
 800bec0:	e7cf      	b.n	800be62 <__swbuf_r+0x1a>
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <__swbuf_r+0xa0>)
 800bec4:	429c      	cmp	r4, r3
 800bec6:	bf08      	it	eq
 800bec8:	68ec      	ldreq	r4, [r5, #12]
 800beca:	e7ca      	b.n	800be62 <__swbuf_r+0x1a>
 800becc:	4621      	mov	r1, r4
 800bece:	4628      	mov	r0, r5
 800bed0:	f000 f81e 	bl	800bf10 <__swsetup_r>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d0cb      	beq.n	800be70 <__swbuf_r+0x28>
 800bed8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bedc:	e7ea      	b.n	800beb4 <__swbuf_r+0x6c>
 800bede:	bf00      	nop
 800bee0:	0800d608 	.word	0x0800d608
 800bee4:	0800d628 	.word	0x0800d628
 800bee8:	0800d5e8 	.word	0x0800d5e8

0800beec <_write_r>:
 800beec:	b538      	push	{r3, r4, r5, lr}
 800beee:	4d07      	ldr	r5, [pc, #28]	; (800bf0c <_write_r+0x20>)
 800bef0:	4604      	mov	r4, r0
 800bef2:	4608      	mov	r0, r1
 800bef4:	4611      	mov	r1, r2
 800bef6:	2200      	movs	r2, #0
 800bef8:	602a      	str	r2, [r5, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f7f5 f91a 	bl	8001134 <_write>
 800bf00:	1c43      	adds	r3, r0, #1
 800bf02:	d102      	bne.n	800bf0a <_write_r+0x1e>
 800bf04:	682b      	ldr	r3, [r5, #0]
 800bf06:	b103      	cbz	r3, 800bf0a <_write_r+0x1e>
 800bf08:	6023      	str	r3, [r4, #0]
 800bf0a:	bd38      	pop	{r3, r4, r5, pc}
 800bf0c:	2000b1b8 	.word	0x2000b1b8

0800bf10 <__swsetup_r>:
 800bf10:	4b32      	ldr	r3, [pc, #200]	; (800bfdc <__swsetup_r+0xcc>)
 800bf12:	b570      	push	{r4, r5, r6, lr}
 800bf14:	681d      	ldr	r5, [r3, #0]
 800bf16:	4606      	mov	r6, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	b125      	cbz	r5, 800bf26 <__swsetup_r+0x16>
 800bf1c:	69ab      	ldr	r3, [r5, #24]
 800bf1e:	b913      	cbnz	r3, 800bf26 <__swsetup_r+0x16>
 800bf20:	4628      	mov	r0, r5
 800bf22:	f7ff f97d 	bl	800b220 <__sinit>
 800bf26:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <__swsetup_r+0xd0>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	d10f      	bne.n	800bf4c <__swsetup_r+0x3c>
 800bf2c:	686c      	ldr	r4, [r5, #4]
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf34:	0719      	lsls	r1, r3, #28
 800bf36:	d42c      	bmi.n	800bf92 <__swsetup_r+0x82>
 800bf38:	06dd      	lsls	r5, r3, #27
 800bf3a:	d411      	bmi.n	800bf60 <__swsetup_r+0x50>
 800bf3c:	2309      	movs	r3, #9
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf4a:	e03e      	b.n	800bfca <__swsetup_r+0xba>
 800bf4c:	4b25      	ldr	r3, [pc, #148]	; (800bfe4 <__swsetup_r+0xd4>)
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d101      	bne.n	800bf56 <__swsetup_r+0x46>
 800bf52:	68ac      	ldr	r4, [r5, #8]
 800bf54:	e7eb      	b.n	800bf2e <__swsetup_r+0x1e>
 800bf56:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <__swsetup_r+0xd8>)
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	bf08      	it	eq
 800bf5c:	68ec      	ldreq	r4, [r5, #12]
 800bf5e:	e7e6      	b.n	800bf2e <__swsetup_r+0x1e>
 800bf60:	0758      	lsls	r0, r3, #29
 800bf62:	d512      	bpl.n	800bf8a <__swsetup_r+0x7a>
 800bf64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf66:	b141      	cbz	r1, 800bf7a <__swsetup_r+0x6a>
 800bf68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf6c:	4299      	cmp	r1, r3
 800bf6e:	d002      	beq.n	800bf76 <__swsetup_r+0x66>
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7fd fa65 	bl	8009440 <_free_r>
 800bf76:	2300      	movs	r3, #0
 800bf78:	6363      	str	r3, [r4, #52]	; 0x34
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	2300      	movs	r3, #0
 800bf84:	6063      	str	r3, [r4, #4]
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f043 0308 	orr.w	r3, r3, #8
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	b94b      	cbnz	r3, 800bfaa <__swsetup_r+0x9a>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa0:	d003      	beq.n	800bfaa <__swsetup_r+0x9a>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 f92b 	bl	800c200 <__smakebuf_r>
 800bfaa:	89a0      	ldrh	r0, [r4, #12]
 800bfac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfb0:	f010 0301 	ands.w	r3, r0, #1
 800bfb4:	d00a      	beq.n	800bfcc <__swsetup_r+0xbc>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60a3      	str	r3, [r4, #8]
 800bfba:	6963      	ldr	r3, [r4, #20]
 800bfbc:	425b      	negs	r3, r3
 800bfbe:	61a3      	str	r3, [r4, #24]
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	b943      	cbnz	r3, 800bfd6 <__swsetup_r+0xc6>
 800bfc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfc8:	d1ba      	bne.n	800bf40 <__swsetup_r+0x30>
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	0781      	lsls	r1, r0, #30
 800bfce:	bf58      	it	pl
 800bfd0:	6963      	ldrpl	r3, [r4, #20]
 800bfd2:	60a3      	str	r3, [r4, #8]
 800bfd4:	e7f4      	b.n	800bfc0 <__swsetup_r+0xb0>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e7f7      	b.n	800bfca <__swsetup_r+0xba>
 800bfda:	bf00      	nop
 800bfdc:	200000dc 	.word	0x200000dc
 800bfe0:	0800d608 	.word	0x0800d608
 800bfe4:	0800d628 	.word	0x0800d628
 800bfe8:	0800d5e8 	.word	0x0800d5e8

0800bfec <_close_r>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4d06      	ldr	r5, [pc, #24]	; (800c008 <_close_r+0x1c>)
 800bff0:	2300      	movs	r3, #0
 800bff2:	4604      	mov	r4, r0
 800bff4:	4608      	mov	r0, r1
 800bff6:	602b      	str	r3, [r5, #0]
 800bff8:	f7f5 f8aa 	bl	8001150 <_close>
 800bffc:	1c43      	adds	r3, r0, #1
 800bffe:	d102      	bne.n	800c006 <_close_r+0x1a>
 800c000:	682b      	ldr	r3, [r5, #0]
 800c002:	b103      	cbz	r3, 800c006 <_close_r+0x1a>
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	bd38      	pop	{r3, r4, r5, pc}
 800c008:	2000b1b8 	.word	0x2000b1b8

0800c00c <__sflush_r>:
 800c00c:	898a      	ldrh	r2, [r1, #12]
 800c00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c012:	4605      	mov	r5, r0
 800c014:	0710      	lsls	r0, r2, #28
 800c016:	460c      	mov	r4, r1
 800c018:	d458      	bmi.n	800c0cc <__sflush_r+0xc0>
 800c01a:	684b      	ldr	r3, [r1, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	dc05      	bgt.n	800c02c <__sflush_r+0x20>
 800c020:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c022:	2b00      	cmp	r3, #0
 800c024:	dc02      	bgt.n	800c02c <__sflush_r+0x20>
 800c026:	2000      	movs	r0, #0
 800c028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c02e:	2e00      	cmp	r6, #0
 800c030:	d0f9      	beq.n	800c026 <__sflush_r+0x1a>
 800c032:	2300      	movs	r3, #0
 800c034:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c038:	682f      	ldr	r7, [r5, #0]
 800c03a:	602b      	str	r3, [r5, #0]
 800c03c:	d032      	beq.n	800c0a4 <__sflush_r+0x98>
 800c03e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	075a      	lsls	r2, r3, #29
 800c044:	d505      	bpl.n	800c052 <__sflush_r+0x46>
 800c046:	6863      	ldr	r3, [r4, #4]
 800c048:	1ac0      	subs	r0, r0, r3
 800c04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c04c:	b10b      	cbz	r3, 800c052 <__sflush_r+0x46>
 800c04e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c050:	1ac0      	subs	r0, r0, r3
 800c052:	2300      	movs	r3, #0
 800c054:	4602      	mov	r2, r0
 800c056:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c058:	6a21      	ldr	r1, [r4, #32]
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b0      	blx	r6
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	d106      	bne.n	800c072 <__sflush_r+0x66>
 800c064:	6829      	ldr	r1, [r5, #0]
 800c066:	291d      	cmp	r1, #29
 800c068:	d82c      	bhi.n	800c0c4 <__sflush_r+0xb8>
 800c06a:	4a2a      	ldr	r2, [pc, #168]	; (800c114 <__sflush_r+0x108>)
 800c06c:	40ca      	lsrs	r2, r1
 800c06e:	07d6      	lsls	r6, r2, #31
 800c070:	d528      	bpl.n	800c0c4 <__sflush_r+0xb8>
 800c072:	2200      	movs	r2, #0
 800c074:	6062      	str	r2, [r4, #4]
 800c076:	04d9      	lsls	r1, r3, #19
 800c078:	6922      	ldr	r2, [r4, #16]
 800c07a:	6022      	str	r2, [r4, #0]
 800c07c:	d504      	bpl.n	800c088 <__sflush_r+0x7c>
 800c07e:	1c42      	adds	r2, r0, #1
 800c080:	d101      	bne.n	800c086 <__sflush_r+0x7a>
 800c082:	682b      	ldr	r3, [r5, #0]
 800c084:	b903      	cbnz	r3, 800c088 <__sflush_r+0x7c>
 800c086:	6560      	str	r0, [r4, #84]	; 0x54
 800c088:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c08a:	602f      	str	r7, [r5, #0]
 800c08c:	2900      	cmp	r1, #0
 800c08e:	d0ca      	beq.n	800c026 <__sflush_r+0x1a>
 800c090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c094:	4299      	cmp	r1, r3
 800c096:	d002      	beq.n	800c09e <__sflush_r+0x92>
 800c098:	4628      	mov	r0, r5
 800c09a:	f7fd f9d1 	bl	8009440 <_free_r>
 800c09e:	2000      	movs	r0, #0
 800c0a0:	6360      	str	r0, [r4, #52]	; 0x34
 800c0a2:	e7c1      	b.n	800c028 <__sflush_r+0x1c>
 800c0a4:	6a21      	ldr	r1, [r4, #32]
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	47b0      	blx	r6
 800c0ac:	1c41      	adds	r1, r0, #1
 800c0ae:	d1c7      	bne.n	800c040 <__sflush_r+0x34>
 800c0b0:	682b      	ldr	r3, [r5, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d0c4      	beq.n	800c040 <__sflush_r+0x34>
 800c0b6:	2b1d      	cmp	r3, #29
 800c0b8:	d001      	beq.n	800c0be <__sflush_r+0xb2>
 800c0ba:	2b16      	cmp	r3, #22
 800c0bc:	d101      	bne.n	800c0c2 <__sflush_r+0xb6>
 800c0be:	602f      	str	r7, [r5, #0]
 800c0c0:	e7b1      	b.n	800c026 <__sflush_r+0x1a>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0c8:	81a3      	strh	r3, [r4, #12]
 800c0ca:	e7ad      	b.n	800c028 <__sflush_r+0x1c>
 800c0cc:	690f      	ldr	r7, [r1, #16]
 800c0ce:	2f00      	cmp	r7, #0
 800c0d0:	d0a9      	beq.n	800c026 <__sflush_r+0x1a>
 800c0d2:	0793      	lsls	r3, r2, #30
 800c0d4:	680e      	ldr	r6, [r1, #0]
 800c0d6:	bf08      	it	eq
 800c0d8:	694b      	ldreq	r3, [r1, #20]
 800c0da:	600f      	str	r7, [r1, #0]
 800c0dc:	bf18      	it	ne
 800c0de:	2300      	movne	r3, #0
 800c0e0:	eba6 0807 	sub.w	r8, r6, r7
 800c0e4:	608b      	str	r3, [r1, #8]
 800c0e6:	f1b8 0f00 	cmp.w	r8, #0
 800c0ea:	dd9c      	ble.n	800c026 <__sflush_r+0x1a>
 800c0ec:	6a21      	ldr	r1, [r4, #32]
 800c0ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0f0:	4643      	mov	r3, r8
 800c0f2:	463a      	mov	r2, r7
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b0      	blx	r6
 800c0f8:	2800      	cmp	r0, #0
 800c0fa:	dc06      	bgt.n	800c10a <__sflush_r+0xfe>
 800c0fc:	89a3      	ldrh	r3, [r4, #12]
 800c0fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c102:	81a3      	strh	r3, [r4, #12]
 800c104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c108:	e78e      	b.n	800c028 <__sflush_r+0x1c>
 800c10a:	4407      	add	r7, r0
 800c10c:	eba8 0800 	sub.w	r8, r8, r0
 800c110:	e7e9      	b.n	800c0e6 <__sflush_r+0xda>
 800c112:	bf00      	nop
 800c114:	20400001 	.word	0x20400001

0800c118 <_fflush_r>:
 800c118:	b538      	push	{r3, r4, r5, lr}
 800c11a:	690b      	ldr	r3, [r1, #16]
 800c11c:	4605      	mov	r5, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	b913      	cbnz	r3, 800c128 <_fflush_r+0x10>
 800c122:	2500      	movs	r5, #0
 800c124:	4628      	mov	r0, r5
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	b118      	cbz	r0, 800c132 <_fflush_r+0x1a>
 800c12a:	6983      	ldr	r3, [r0, #24]
 800c12c:	b90b      	cbnz	r3, 800c132 <_fflush_r+0x1a>
 800c12e:	f7ff f877 	bl	800b220 <__sinit>
 800c132:	4b14      	ldr	r3, [pc, #80]	; (800c184 <_fflush_r+0x6c>)
 800c134:	429c      	cmp	r4, r3
 800c136:	d11b      	bne.n	800c170 <_fflush_r+0x58>
 800c138:	686c      	ldr	r4, [r5, #4]
 800c13a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d0ef      	beq.n	800c122 <_fflush_r+0xa>
 800c142:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c144:	07d0      	lsls	r0, r2, #31
 800c146:	d404      	bmi.n	800c152 <_fflush_r+0x3a>
 800c148:	0599      	lsls	r1, r3, #22
 800c14a:	d402      	bmi.n	800c152 <_fflush_r+0x3a>
 800c14c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c14e:	f7ff f91c 	bl	800b38a <__retarget_lock_acquire_recursive>
 800c152:	4628      	mov	r0, r5
 800c154:	4621      	mov	r1, r4
 800c156:	f7ff ff59 	bl	800c00c <__sflush_r>
 800c15a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c15c:	07da      	lsls	r2, r3, #31
 800c15e:	4605      	mov	r5, r0
 800c160:	d4e0      	bmi.n	800c124 <_fflush_r+0xc>
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	059b      	lsls	r3, r3, #22
 800c166:	d4dd      	bmi.n	800c124 <_fflush_r+0xc>
 800c168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c16a:	f7ff f90f 	bl	800b38c <__retarget_lock_release_recursive>
 800c16e:	e7d9      	b.n	800c124 <_fflush_r+0xc>
 800c170:	4b05      	ldr	r3, [pc, #20]	; (800c188 <_fflush_r+0x70>)
 800c172:	429c      	cmp	r4, r3
 800c174:	d101      	bne.n	800c17a <_fflush_r+0x62>
 800c176:	68ac      	ldr	r4, [r5, #8]
 800c178:	e7df      	b.n	800c13a <_fflush_r+0x22>
 800c17a:	4b04      	ldr	r3, [pc, #16]	; (800c18c <_fflush_r+0x74>)
 800c17c:	429c      	cmp	r4, r3
 800c17e:	bf08      	it	eq
 800c180:	68ec      	ldreq	r4, [r5, #12]
 800c182:	e7da      	b.n	800c13a <_fflush_r+0x22>
 800c184:	0800d608 	.word	0x0800d608
 800c188:	0800d628 	.word	0x0800d628
 800c18c:	0800d5e8 	.word	0x0800d5e8

0800c190 <_lseek_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	; (800c1b0 <_lseek_r+0x20>)
 800c194:	4604      	mov	r4, r0
 800c196:	4608      	mov	r0, r1
 800c198:	4611      	mov	r1, r2
 800c19a:	2200      	movs	r2, #0
 800c19c:	602a      	str	r2, [r5, #0]
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f7f4 ffe2 	bl	8001168 <_lseek>
 800c1a4:	1c43      	adds	r3, r0, #1
 800c1a6:	d102      	bne.n	800c1ae <_lseek_r+0x1e>
 800c1a8:	682b      	ldr	r3, [r5, #0]
 800c1aa:	b103      	cbz	r3, 800c1ae <_lseek_r+0x1e>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	2000b1b8 	.word	0x2000b1b8

0800c1b4 <__swhatbuf_r>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	460e      	mov	r6, r1
 800c1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1bc:	2900      	cmp	r1, #0
 800c1be:	b096      	sub	sp, #88	; 0x58
 800c1c0:	4614      	mov	r4, r2
 800c1c2:	461d      	mov	r5, r3
 800c1c4:	da08      	bge.n	800c1d8 <__swhatbuf_r+0x24>
 800c1c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	602a      	str	r2, [r5, #0]
 800c1ce:	061a      	lsls	r2, r3, #24
 800c1d0:	d410      	bmi.n	800c1f4 <__swhatbuf_r+0x40>
 800c1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1d6:	e00e      	b.n	800c1f6 <__swhatbuf_r+0x42>
 800c1d8:	466a      	mov	r2, sp
 800c1da:	f000 f88b 	bl	800c2f4 <_fstat_r>
 800c1de:	2800      	cmp	r0, #0
 800c1e0:	dbf1      	blt.n	800c1c6 <__swhatbuf_r+0x12>
 800c1e2:	9a01      	ldr	r2, [sp, #4]
 800c1e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1ec:	425a      	negs	r2, r3
 800c1ee:	415a      	adcs	r2, r3
 800c1f0:	602a      	str	r2, [r5, #0]
 800c1f2:	e7ee      	b.n	800c1d2 <__swhatbuf_r+0x1e>
 800c1f4:	2340      	movs	r3, #64	; 0x40
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	b016      	add	sp, #88	; 0x58
 800c1fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c200 <__smakebuf_r>:
 800c200:	898b      	ldrh	r3, [r1, #12]
 800c202:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c204:	079d      	lsls	r5, r3, #30
 800c206:	4606      	mov	r6, r0
 800c208:	460c      	mov	r4, r1
 800c20a:	d507      	bpl.n	800c21c <__smakebuf_r+0x1c>
 800c20c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c210:	6023      	str	r3, [r4, #0]
 800c212:	6123      	str	r3, [r4, #16]
 800c214:	2301      	movs	r3, #1
 800c216:	6163      	str	r3, [r4, #20]
 800c218:	b002      	add	sp, #8
 800c21a:	bd70      	pop	{r4, r5, r6, pc}
 800c21c:	ab01      	add	r3, sp, #4
 800c21e:	466a      	mov	r2, sp
 800c220:	f7ff ffc8 	bl	800c1b4 <__swhatbuf_r>
 800c224:	9900      	ldr	r1, [sp, #0]
 800c226:	4605      	mov	r5, r0
 800c228:	4630      	mov	r0, r6
 800c22a:	f7fd f9a9 	bl	8009580 <_malloc_r>
 800c22e:	b948      	cbnz	r0, 800c244 <__smakebuf_r+0x44>
 800c230:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c234:	059a      	lsls	r2, r3, #22
 800c236:	d4ef      	bmi.n	800c218 <__smakebuf_r+0x18>
 800c238:	f023 0303 	bic.w	r3, r3, #3
 800c23c:	f043 0302 	orr.w	r3, r3, #2
 800c240:	81a3      	strh	r3, [r4, #12]
 800c242:	e7e3      	b.n	800c20c <__smakebuf_r+0xc>
 800c244:	4b0d      	ldr	r3, [pc, #52]	; (800c27c <__smakebuf_r+0x7c>)
 800c246:	62b3      	str	r3, [r6, #40]	; 0x28
 800c248:	89a3      	ldrh	r3, [r4, #12]
 800c24a:	6020      	str	r0, [r4, #0]
 800c24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c250:	81a3      	strh	r3, [r4, #12]
 800c252:	9b00      	ldr	r3, [sp, #0]
 800c254:	6163      	str	r3, [r4, #20]
 800c256:	9b01      	ldr	r3, [sp, #4]
 800c258:	6120      	str	r0, [r4, #16]
 800c25a:	b15b      	cbz	r3, 800c274 <__smakebuf_r+0x74>
 800c25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c260:	4630      	mov	r0, r6
 800c262:	f000 f859 	bl	800c318 <_isatty_r>
 800c266:	b128      	cbz	r0, 800c274 <__smakebuf_r+0x74>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f023 0303 	bic.w	r3, r3, #3
 800c26e:	f043 0301 	orr.w	r3, r3, #1
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	89a0      	ldrh	r0, [r4, #12]
 800c276:	4305      	orrs	r5, r0
 800c278:	81a5      	strh	r5, [r4, #12]
 800c27a:	e7cd      	b.n	800c218 <__smakebuf_r+0x18>
 800c27c:	0800b1b9 	.word	0x0800b1b9

0800c280 <__ascii_mbtowc>:
 800c280:	b082      	sub	sp, #8
 800c282:	b901      	cbnz	r1, 800c286 <__ascii_mbtowc+0x6>
 800c284:	a901      	add	r1, sp, #4
 800c286:	b142      	cbz	r2, 800c29a <__ascii_mbtowc+0x1a>
 800c288:	b14b      	cbz	r3, 800c29e <__ascii_mbtowc+0x1e>
 800c28a:	7813      	ldrb	r3, [r2, #0]
 800c28c:	600b      	str	r3, [r1, #0]
 800c28e:	7812      	ldrb	r2, [r2, #0]
 800c290:	1e10      	subs	r0, r2, #0
 800c292:	bf18      	it	ne
 800c294:	2001      	movne	r0, #1
 800c296:	b002      	add	sp, #8
 800c298:	4770      	bx	lr
 800c29a:	4610      	mov	r0, r2
 800c29c:	e7fb      	b.n	800c296 <__ascii_mbtowc+0x16>
 800c29e:	f06f 0001 	mvn.w	r0, #1
 800c2a2:	e7f8      	b.n	800c296 <__ascii_mbtowc+0x16>

0800c2a4 <_malloc_usable_size_r>:
 800c2a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2a8:	1f18      	subs	r0, r3, #4
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	bfbc      	itt	lt
 800c2ae:	580b      	ldrlt	r3, [r1, r0]
 800c2b0:	18c0      	addlt	r0, r0, r3
 800c2b2:	4770      	bx	lr

0800c2b4 <_read_r>:
 800c2b4:	b538      	push	{r3, r4, r5, lr}
 800c2b6:	4d07      	ldr	r5, [pc, #28]	; (800c2d4 <_read_r+0x20>)
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	4608      	mov	r0, r1
 800c2bc:	4611      	mov	r1, r2
 800c2be:	2200      	movs	r2, #0
 800c2c0:	602a      	str	r2, [r5, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	f7f4 ff28 	bl	8001118 <_read>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_read_r+0x1e>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_read_r+0x1e>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	2000b1b8 	.word	0x2000b1b8

0800c2d8 <__ascii_wctomb>:
 800c2d8:	b149      	cbz	r1, 800c2ee <__ascii_wctomb+0x16>
 800c2da:	2aff      	cmp	r2, #255	; 0xff
 800c2dc:	bf85      	ittet	hi
 800c2de:	238a      	movhi	r3, #138	; 0x8a
 800c2e0:	6003      	strhi	r3, [r0, #0]
 800c2e2:	700a      	strbls	r2, [r1, #0]
 800c2e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c2e8:	bf98      	it	ls
 800c2ea:	2001      	movls	r0, #1
 800c2ec:	4770      	bx	lr
 800c2ee:	4608      	mov	r0, r1
 800c2f0:	4770      	bx	lr
	...

0800c2f4 <_fstat_r>:
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	4d07      	ldr	r5, [pc, #28]	; (800c314 <_fstat_r+0x20>)
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	4611      	mov	r1, r2
 800c300:	602b      	str	r3, [r5, #0]
 800c302:	f7f4 ff29 	bl	8001158 <_fstat>
 800c306:	1c43      	adds	r3, r0, #1
 800c308:	d102      	bne.n	800c310 <_fstat_r+0x1c>
 800c30a:	682b      	ldr	r3, [r5, #0]
 800c30c:	b103      	cbz	r3, 800c310 <_fstat_r+0x1c>
 800c30e:	6023      	str	r3, [r4, #0]
 800c310:	bd38      	pop	{r3, r4, r5, pc}
 800c312:	bf00      	nop
 800c314:	2000b1b8 	.word	0x2000b1b8

0800c318 <_isatty_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d06      	ldr	r5, [pc, #24]	; (800c334 <_isatty_r+0x1c>)
 800c31c:	2300      	movs	r3, #0
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	f7f4 ff1e 	bl	8001164 <_isatty>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_isatty_r+0x1a>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_isatty_r+0x1a>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	2000b1b8 	.word	0x2000b1b8

0800c338 <_init>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	bf00      	nop
 800c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33e:	bc08      	pop	{r3}
 800c340:	469e      	mov	lr, r3
 800c342:	4770      	bx	lr

0800c344 <_fini>:
 800c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c346:	bf00      	nop
 800c348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34a:	bc08      	pop	{r3}
 800c34c:	469e      	mov	lr, r3
 800c34e:	4770      	bx	lr
