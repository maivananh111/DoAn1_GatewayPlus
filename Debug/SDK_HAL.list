
SDK_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cda0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cf8  0800cf50  0800cf50  0001cf50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec48  0800ec48  000203c8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ec48  0800ec48  000203c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ec48  0800ec48  000203c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000024  0800ec48  0800ec48  0001ec48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800ec6c  0800ec6c  0001ec6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  0800ec74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203c8  2**0
                  CONTENTS
 10 .bss          0000b71c  200003c8  200003c8  000203c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000bae4  2000bae4  000203c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00040b9e  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000865c  00000000  00000000  00060f96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002528  00000000  00000000  000695f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002280  00000000  00000000  0006bb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000345b0  00000000  00000000  0006dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fa73  00000000  00000000  000a2350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001058fd  00000000  00000000  000d1dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001d76c0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000abfc  00000000  00000000  001d7710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003c8 	.word	0x200003c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cf38 	.word	0x0800cf38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003cc 	.word	0x200003cc
 80001ec:	0800cf38 	.word	0x0800cf38

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <vApplicationTickHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
__weak void vApplicationTickHook( void )
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_Driver_Init>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_Driver_Init(void){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000cda:	f000 f809 	bl	8000cf0 <MX_GPIO_Init>
//	MX_DMA_Init();
//	MX_SDIO_SD_Init();
//	MX_FATFS_Init();
//	MX_RNG_Init();
//	MX_RTC_Init();
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	extern int main_application(void);
	return main_application();
 8000ce6:	f007 ff7f 	bl	8008be8 <main_application>
 8000cea:	4603      	mov	r3, r0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
 8000d0a:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a38      	ldr	r2, [pc, #224]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a31      	ldr	r2, [pc, #196]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60bb      	str	r3, [r7, #8]
 8000d42:	4b2b      	ldr	r3, [pc, #172]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a2a      	ldr	r2, [pc, #168]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b28      	ldr	r3, [pc, #160]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	4b24      	ldr	r3, [pc, #144]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	607b      	str	r3, [r7, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_GPIO_Init+0x100>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0308 	and.w	r3, r3, #8
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000d9a:	f000 fe91 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_9, GPIO_PIN_SET);
 8000d9e:	2201      	movs	r2, #1
 8000da0:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000da4:	4814      	ldr	r0, [pc, #80]	; (8000df8 <MX_GPIO_Init+0x108>)
 8000da6:	f000 fe8b 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <MX_GPIO_Init+0x104>)
 8000dc4:	f000 fcd0 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_9;
 8000dc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0314 	add.w	r3, r7, #20
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_GPIO_Init+0x108>)
 8000de2:	f000 fcc1 	bl	8001768 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020000 	.word	0x40020000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"NonMaskable interrupt was unhandled(NMI_Handler)...");
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <NMI_Handler+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4903      	ldr	r1, [pc, #12]	; (8000e14 <NMI_Handler+0x18>)
 8000e06:	4618      	mov	r0, r3
 8000e08:	f008 fd76 	bl	80098f8 <exception_interrupt_handler>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <NMI_Handler+0x10>
 8000e0e:	bf00      	nop
 8000e10:	20000004 	.word	0x20000004
 8000e14:	0800cf68 	.word	0x0800cf68

08000e18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Hard fault exception was unhandled(call HardFault_Handler)...");
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HardFault_Handler+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4903      	ldr	r1, [pc, #12]	; (8000e30 <HardFault_Handler+0x18>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 fd68 	bl	80098f8 <exception_interrupt_handler>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <HardFault_Handler+0x10>
 8000e2a:	bf00      	nop
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	0800cf9c 	.word	0x0800cf9c

08000e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Memory management interrupt was unhandled(MemManage_Handler)...");
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <MemManage_Handler+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4903      	ldr	r1, [pc, #12]	; (8000e4c <MemManage_Handler+0x18>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 fd5a 	bl	80098f8 <exception_interrupt_handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler+0x10>
 8000e46:	bf00      	nop
 8000e48:	20000004 	.word	0x20000004
 8000e4c:	0800cfdc 	.word	0x0800cfdc

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Bus fault exception was unhandled(call BusFault_Handler)...");
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <BusFault_Handler+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4903      	ldr	r1, [pc, #12]	; (8000e68 <BusFault_Handler+0x18>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f008 fd4c 	bl	80098f8 <exception_interrupt_handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <BusFault_Handler+0x10>
 8000e62:	bf00      	nop
 8000e64:	20000000 	.word	0x20000000
 8000e68:	0800d01c 	.word	0x0800d01c

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	exception_interrupt_handler(Excep_TAG, (char *)"Usage fault exception was unhandled(call UsageFault_Handler)...");
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <UsageFault_Handler+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4903      	ldr	r1, [pc, #12]	; (8000e84 <UsageFault_Handler+0x18>)
 8000e76:	4618      	mov	r0, r3
 8000e78:	f008 fd3e 	bl	80098f8 <exception_interrupt_handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x10>
 8000e7e:	bf00      	nop
 8000e80:	20000000 	.word	0x20000000
 8000e84:	0800d058 	.word	0x0800d058

08000e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
	exception_interrupt_handler(Inter_TAG, (char *)"Debug monitor interrupt was unhandled(call DebugMon_Handler)...");
 8000e8c:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <DebugMon_Handler+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4903      	ldr	r1, [pc, #12]	; (8000ea0 <DebugMon_Handler+0x18>)
 8000e92:	4618      	mov	r0, r3
 8000e94:	f008 fd30 	bl	80098f8 <exception_interrupt_handler>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000004 	.word	0x20000004
 8000ea0:	0800d098 	.word	0x0800d098

08000ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	extern void app_systick_process(void);
	app_systick_process();
 8000ea8:	f006 ff86 	bl	8007db8 <app_systick_process>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f9b8 	bl	8001220 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000eb0:	f003 fae4 	bl	800447c <xTaskGetSchedulerState>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d001      	beq.n	8000ebe <SysTick_Handler+0x1a>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000eba:	f004 f9cd 	bl	8005258 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000ec8:	4802      	ldr	r0, [pc, #8]	; (8000ed4 <SDIO_IRQHandler+0x10>)
 8000eca:	f000 fe13 	bl	8001af4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200003e4 	.word	0x200003e4

08000ed8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <DMA2_Stream3_IRQHandler+0x10>)
 8000ede:	f000 f9d5 	bl	800128c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20000468 	.word	0x20000468

08000eec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <ETH_IRQHandler+0x10>)
 8000ef2:	f000 fb55 	bl	80015a0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	2000053c 	.word	0x2000053c

08000f00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <DMA2_Stream6_IRQHandler+0x10>)
 8000f06:	f000 f9c1 	bl	800128c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200004c8 	.word	0x200004c8

08000f14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_kill>:

int _kill(int pid, int sig)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f2e:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <_kill+0x20>)
 8000f30:	2216      	movs	r2, #22
 8000f32:	601a      	str	r2, [r3, #0]
  return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	2000b338 	.word	0x2000b338

08000f48 <_exit>:

void _exit (int status)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe5 	bl	8000f24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f5a:	e7fe      	b.n	8000f5a <_exit+0x12>

08000f5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e00a      	b.n	8000f84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f6e:	f3af 8000 	nop.w
 8000f72:	4601      	mov	r1, r0
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	60ba      	str	r2, [r7, #8]
 8000f7a:	b2ca      	uxtb	r2, r1
 8000f7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697a      	ldr	r2, [r7, #20]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	dbf0      	blt.n	8000f6e <_read+0x12>
  }

  return len;
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e009      	b.n	8000fbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbf1      	blt.n	8000fa8 <_write+0x12>
  }
  return len;
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_close>:

int _close(int file)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ff6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_isatty>:

int _isatty(int file)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800100e:	2301      	movs	r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001038:	b480      	push	{r7}
 800103a:	b087      	sub	sp, #28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <_sbrk+0x5c>)
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <_sbrk+0x60>)
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d102      	bne.n	800105a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <_sbrk+0x64>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <_sbrk+0x68>)
 8001058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	429a      	cmp	r2, r3
 8001066:	d205      	bcs.n	8001074 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <_sbrk+0x6c>)
 800106a:	220c      	movs	r2, #12
 800106c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001072:	e009      	b.n	8001088 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <_sbrk+0x64>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	4a06      	ldr	r2, [pc, #24]	; (800109c <_sbrk+0x64>)
 8001084:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001086:	68fb      	ldr	r3, [r7, #12]
}
 8001088:	4618      	mov	r0, r3
 800108a:	371c      	adds	r7, #28
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20030000 	.word	0x20030000
 8001098:	00000400 	.word	0x00000400
 800109c:	20000528 	.word	0x20000528
 80010a0:	2000bae8 	.word	0x2000bae8
 80010a4:	2000b338 	.word	0x2000b338

080010a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	; (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	2302      	movs	r3, #2
 80010e4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d011      	beq.n	800111a <SystemCoreClockUpdate+0x4e>
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d844      	bhi.n	8001186 <SystemCoreClockUpdate+0xba>
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <SystemCoreClockUpdate+0x3e>
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	2b04      	cmp	r3, #4
 8001106:	d004      	beq.n	8001112 <SystemCoreClockUpdate+0x46>
 8001108:	e03d      	b.n	8001186 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800110a:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <SystemCoreClockUpdate+0xf4>)
 800110e:	601a      	str	r2, [r3, #0]
      break;
 8001110:	e03d      	b.n	800118e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001112:	4b2a      	ldr	r3, [pc, #168]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 8001114:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <SystemCoreClockUpdate+0xf8>)
 8001116:	601a      	str	r2, [r3, #0]
      break;
 8001118:	e039      	b.n	800118e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	0d9b      	lsrs	r3, r3, #22
 8001120:	f003 0301 	and.w	r3, r3, #1
 8001124:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800112e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <SystemCoreClockUpdate+0xf8>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	fbb2 f3f3 	udiv	r3, r2, r3
 800113e:	4a1e      	ldr	r2, [pc, #120]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 8001140:	6852      	ldr	r2, [r2, #4]
 8001142:	0992      	lsrs	r2, r2, #6
 8001144:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001148:	fb02 f303 	mul.w	r3, r2, r3
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e00b      	b.n	8001168 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <SystemCoreClockUpdate+0xf4>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 800115a:	6852      	ldr	r2, [r2, #4]
 800115c:	0992      	lsrs	r2, r2, #6
 800115e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001168:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	0c1b      	lsrs	r3, r3, #16
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	3301      	adds	r3, #1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 8001182:	6013      	str	r3, [r2, #0]
      break;
 8001184:	e003      	b.n	800118e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 8001188:	4a0d      	ldr	r2, [pc, #52]	; (80011c0 <SystemCoreClockUpdate+0xf4>)
 800118a:	601a      	str	r2, [r3, #0]
      break;
 800118c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	091b      	lsrs	r3, r3, #4
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <SystemCoreClockUpdate+0xfc>)
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa22 f303 	lsr.w	r3, r2, r3
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40023800 	.word	0x40023800
 80011bc:	20000008 	.word	0x20000008
 80011c0:	00f42400 	.word	0x00f42400
 80011c4:	017d7840 	.word	0x017d7840
 80011c8:	0800e850 	.word	0x0800e850

080011cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001204 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011d0:	480d      	ldr	r0, [pc, #52]	; (8001208 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011d2:	490e      	ldr	r1, [pc, #56]	; (800120c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d4:	4a0e      	ldr	r2, [pc, #56]	; (8001210 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d8:	e002      	b.n	80011e0 <LoopCopyDataInit>

080011da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011de:	3304      	adds	r3, #4

080011e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e4:	d3f9      	bcc.n	80011da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e8:	4c0b      	ldr	r4, [pc, #44]	; (8001218 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ec:	e001      	b.n	80011f2 <LoopFillZerobss>

080011ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011f0:	3204      	adds	r2, #4

080011f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f4:	d3fb      	bcc.n	80011ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f6:	f7ff ff57 	bl	80010a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011fa:	f008 ff2f 	bl	800a05c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fe:	f7ff fd70 	bl	8000ce2 <main>
  bx  lr    
 8001202:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001204:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001208:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800120c:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8001210:	0800ec74 	.word	0x0800ec74
  ldr r2, =_sbss
 8001214:	200003c8 	.word	0x200003c8
  ldr r4, =_ebss
 8001218:	2000bae4 	.word	0x2000bae4

0800121c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800121c:	e7fe      	b.n	800121c <ADC_IRQHandler>
	...

08001220 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_IncTick+0x20>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_IncTick+0x24>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4413      	add	r3, r2
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_IncTick+0x24>)
 8001232:	6013      	str	r3, [r2, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	2000000c 	.word	0x2000000c
 8001244:	2000052c 	.word	0x2000052c

08001248 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d004      	beq.n	8001266 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e00c      	b.n	8001280 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2205      	movs	r2, #5
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0201 	bic.w	r2, r2, #1
 800127c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001298:	4b8e      	ldr	r3, [pc, #568]	; (80014d4 <HAL_DMA_IRQHandler+0x248>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a8e      	ldr	r2, [pc, #568]	; (80014d8 <HAL_DMA_IRQHandler+0x24c>)
 800129e:	fba2 2303 	umull	r2, r3, r2, r3
 80012a2:	0a9b      	lsrs	r3, r3, #10
 80012a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b6:	2208      	movs	r2, #8
 80012b8:	409a      	lsls	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4013      	ands	r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d01a      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d013      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0204 	bic.w	r2, r2, #4
 80012de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	2208      	movs	r2, #8
 80012e6:	409a      	lsls	r2, r3
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	f043 0201 	orr.w	r2, r3, #1
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fc:	2201      	movs	r2, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d012      	beq.n	800132e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131a:	2201      	movs	r2, #1
 800131c:	409a      	lsls	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001326:	f043 0202 	orr.w	r2, r3, #2
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	2204      	movs	r2, #4
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d012      	beq.n	8001364 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d00b      	beq.n	8001364 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001350:	2204      	movs	r2, #4
 8001352:	409a      	lsls	r2, r3
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800135c:	f043 0204 	orr.w	r2, r3, #4
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001368:	2210      	movs	r2, #16
 800136a:	409a      	lsls	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d043      	beq.n	80013fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d03c      	beq.n	80013fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	2210      	movs	r2, #16
 8001388:	409a      	lsls	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d018      	beq.n	80013ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d108      	bne.n	80013bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d024      	beq.n	80013fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	4798      	blx	r3
 80013ba:	e01f      	b.n	80013fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d01b      	beq.n	80013fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	4798      	blx	r3
 80013cc:	e016      	b.n	80013fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d107      	bne.n	80013ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0208 	bic.w	r2, r2, #8
 80013ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001400:	2220      	movs	r2, #32
 8001402:	409a      	lsls	r2, r3
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 808f 	beq.w	800152c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 8087 	beq.w	800152c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2220      	movs	r2, #32
 8001424:	409a      	lsls	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b05      	cmp	r3, #5
 8001434:	d136      	bne.n	80014a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0216 	bic.w	r2, r2, #22
 8001444:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	695a      	ldr	r2, [r3, #20]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001454:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	2b00      	cmp	r3, #0
 800145c:	d103      	bne.n	8001466 <HAL_DMA_IRQHandler+0x1da>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0208 	bic.w	r2, r2, #8
 8001474:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147a:	223f      	movs	r2, #63	; 0x3f
 800147c:	409a      	lsls	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001496:	2b00      	cmp	r3, #0
 8001498:	d07e      	beq.n	8001598 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	4798      	blx	r3
        }
        return;
 80014a2:	e079      	b.n	8001598 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d01d      	beq.n	80014ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10d      	bne.n	80014dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d031      	beq.n	800152c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	4798      	blx	r3
 80014d0:	e02c      	b.n	800152c <HAL_DMA_IRQHandler+0x2a0>
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d023      	beq.n	800152c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
 80014ec:	e01e      	b.n	800152c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10f      	bne.n	800151c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0210 	bic.w	r2, r2, #16
 800150a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001530:	2b00      	cmp	r3, #0
 8001532:	d032      	beq.n	800159a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d022      	beq.n	8001586 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3301      	adds	r3, #1
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	697a      	ldr	r2, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	d307      	bcc.n	8001574 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f2      	bne.n	8001558 <HAL_DMA_IRQHandler+0x2cc>
 8001572:	e000      	b.n	8001576 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001574:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
 8001596:	e000      	b.n	800159a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001598:	bf00      	nop
    }
  }
}
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b6:	2b40      	cmp	r3, #64	; 0x40
 80015b8:	d112      	bne.n	80015e0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015c8:	2b40      	cmp	r3, #64	; 0x40
 80015ca:	d109      	bne.n	80015e0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_ETH_IRQHandler+0x178>)
 80015d8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 ff5a 	bl	8002494 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d113      	bne.n	800161a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	2b01      	cmp	r3, #1
 8001602:	d10a      	bne.n	800161a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800160c:	461a      	mov	r2, r3
 800160e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001612:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 ff4d 	bl	80024b4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800162c:	d14c      	bne.n	80016c8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800163c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001640:	d142      	bne.n	80016c8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001648:	f043 0208 	orr.w	r2, r3, #8
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001664:	d11a      	bne.n	800169c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166e:	695a      	ldr	r2, [r3, #20]
 8001670:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_ETH_IRQHandler+0x17c>)
 8001672:	4013      	ands	r3, r2
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800168c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001690:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	22e0      	movs	r2, #224	; 0xe0
 8001696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800169a:	e012      	b.n	80016c2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	f248 6380 	movw	r3, #34432	; 0x8680
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ba:	461a      	mov	r2, r3
 80016bc:	f248 6380 	movw	r3, #34432	; 0x8680
 80016c0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 ff06 	bl	80024d4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b08      	cmp	r3, #8
 80016d4:	d10e      	bne.n	80016f4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 f81c 	bl	8001724 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_ETH_IRQHandler+0x180>)
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_ETH_IRQHandler+0x180>)
 8001702:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001706:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f815 	bl	8001738 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	00010040 	.word	0x00010040
 800171c:	007e2000 	.word	0x007e2000
 8001720:	40013c00 	.word	0x40013c00

08001724 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b089      	sub	sp, #36	; 0x24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e177      	b.n	8001a74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8166 	bne.w	8001a6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d005      	beq.n	80017ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d130      	bne.n	800181c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	2203      	movs	r2, #3
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4013      	ands	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f0:	2201      	movs	r2, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	091b      	lsrs	r3, r3, #4
 8001806:	f003 0201 	and.w	r2, r3, #1
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b03      	cmp	r3, #3
 8001826:	d017      	beq.n	8001858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d123      	bne.n	80018ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80c0 	beq.w	8001a6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b66      	ldr	r3, [pc, #408]	; (8001a8c <HAL_GPIO_Init+0x324>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	4a65      	ldr	r2, [pc, #404]	; (8001a8c <HAL_GPIO_Init+0x324>)
 80018f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018fc:	6453      	str	r3, [r2, #68]	; 0x44
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_GPIO_Init+0x324>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190a:	4a61      	ldr	r2, [pc, #388]	; (8001a90 <HAL_GPIO_Init+0x328>)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	089b      	lsrs	r3, r3, #2
 8001910:	3302      	adds	r3, #2
 8001912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	220f      	movs	r2, #15
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a58      	ldr	r2, [pc, #352]	; (8001a94 <HAL_GPIO_Init+0x32c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d037      	beq.n	80019a6 <HAL_GPIO_Init+0x23e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a57      	ldr	r2, [pc, #348]	; (8001a98 <HAL_GPIO_Init+0x330>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d031      	beq.n	80019a2 <HAL_GPIO_Init+0x23a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a56      	ldr	r2, [pc, #344]	; (8001a9c <HAL_GPIO_Init+0x334>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d02b      	beq.n	800199e <HAL_GPIO_Init+0x236>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a55      	ldr	r2, [pc, #340]	; (8001aa0 <HAL_GPIO_Init+0x338>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d025      	beq.n	800199a <HAL_GPIO_Init+0x232>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a54      	ldr	r2, [pc, #336]	; (8001aa4 <HAL_GPIO_Init+0x33c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01f      	beq.n	8001996 <HAL_GPIO_Init+0x22e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a53      	ldr	r2, [pc, #332]	; (8001aa8 <HAL_GPIO_Init+0x340>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0x22a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a52      	ldr	r2, [pc, #328]	; (8001aac <HAL_GPIO_Init+0x344>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d013      	beq.n	800198e <HAL_GPIO_Init+0x226>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <HAL_GPIO_Init+0x348>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00d      	beq.n	800198a <HAL_GPIO_Init+0x222>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_GPIO_Init+0x34c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <HAL_GPIO_Init+0x21e>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_GPIO_Init+0x350>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_GPIO_Init+0x21a>
 800197e:	2309      	movs	r3, #9
 8001980:	e012      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 8001982:	230a      	movs	r3, #10
 8001984:	e010      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 8001986:	2308      	movs	r3, #8
 8001988:	e00e      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 800198a:	2307      	movs	r3, #7
 800198c:	e00c      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 800198e:	2306      	movs	r3, #6
 8001990:	e00a      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 8001992:	2305      	movs	r3, #5
 8001994:	e008      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 8001996:	2304      	movs	r3, #4
 8001998:	e006      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 800199a:	2303      	movs	r3, #3
 800199c:	e004      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 800199e:	2302      	movs	r3, #2
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e000      	b.n	80019a8 <HAL_GPIO_Init+0x240>
 80019a6:	2300      	movs	r3, #0
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	f002 0203 	and.w	r2, r2, #3
 80019ae:	0092      	lsls	r2, r2, #2
 80019b0:	4093      	lsls	r3, r2
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019b8:	4935      	ldr	r1, [pc, #212]	; (8001a90 <HAL_GPIO_Init+0x328>)
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	3302      	adds	r3, #2
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019c6:	4b3d      	ldr	r3, [pc, #244]	; (8001abc <HAL_GPIO_Init+0x354>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ea:	4a34      	ldr	r2, [pc, #208]	; (8001abc <HAL_GPIO_Init+0x354>)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_GPIO_Init+0x354>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a14:	4a29      	ldr	r2, [pc, #164]	; (8001abc <HAL_GPIO_Init+0x354>)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1a:	4b28      	ldr	r3, [pc, #160]	; (8001abc <HAL_GPIO_Init+0x354>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a3e:	4a1f      	ldr	r2, [pc, #124]	; (8001abc <HAL_GPIO_Init+0x354>)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a44:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_GPIO_Init+0x354>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a68:	4a14      	ldr	r2, [pc, #80]	; (8001abc <HAL_GPIO_Init+0x354>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3301      	adds	r3, #1
 8001a72:	61fb      	str	r3, [r7, #28]
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	2b0f      	cmp	r3, #15
 8001a78:	f67f ae84 	bls.w	8001784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3724      	adds	r7, #36	; 0x24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40013800 	.word	0x40013800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40021400 	.word	0x40021400
 8001aac:	40021800 	.word	0x40021800
 8001ab0:	40021c00 	.word	0x40021c00
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	40022400 	.word	0x40022400
 8001abc:	40013c00 	.word	0x40013c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <HAL_SD_IRQHandler+0x2e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 fa30 	bl	8001f80 <SD_Read_IT>
 8001b20:	e165      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 808f 	beq.w	8001c50 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8001b4a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001b4e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d039      	beq.n	8001bde <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_SD_IRQHandler+0x8a>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d011      	beq.n	8001ba2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 fb0a 	bl	800219c <SDMMC_CmdStopTransfer>
 8001b88:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f92f 	bl	8001e00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f240 523a 	movw	r2, #1338	; 0x53a
 8001baa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <HAL_SD_IRQHandler+0xda>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fc2a 	bl	8002428 <HAL_SD_RxCpltCallback>
 8001bd4:	e10b      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fc1c 	bl	8002414 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001bdc:	e107      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 8102 	beq.w	8001dee <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d011      	beq.n	8001c18 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 facf 	bl	800219c <SDMMC_CmdStopTransfer>
 8001bfe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f8f4 	bl	8001e00 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 80e5 	bne.w	8001dee <HAL_SD_IRQHandler+0x2fa>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f040 80df 	bne.w	8001dee <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0208 	bic.w	r2, r2, #8
 8001c3e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 fbe3 	bl	8002414 <HAL_SD_TxCpltCallback>
}
 8001c4e:	e0ce      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_SD_IRQHandler+0x17c>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f9da 	bl	8002022 <SD_Write_IT>
 8001c6e:	e0be      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	f240 233a 	movw	r3, #570	; 0x23a
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80b6 	beq.w	8001dee <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d005      	beq.n	8001c9c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c94:	f043 0202 	orr.w	r2, r3, #2
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cae:	f043 0208 	orr.w	r2, r3, #8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc8:	f043 0220 	orr.w	r2, r3, #32
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d005      	beq.n	8001cea <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce2:	f043 0210 	orr.w	r2, r3, #16
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfc:	f043 0208 	orr.w	r2, r3, #8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f240 723a 	movw	r2, #1850	; 0x73a
 8001d0c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8001d1c:	f023 0302 	bic.w	r3, r3, #2
 8001d20:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f000 fa38 	bl	800219c <SDMMC_CmdStopTransfer>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f855 	bl	8001e00 <HAL_SD_ErrorCallback>
}
 8001d56:	e04a      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d045      	beq.n	8001dee <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0310 	and.w	r3, r3, #16
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d104      	bne.n	8001d76 <HAL_SD_IRQHandler+0x282>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d011      	beq.n	8001d9a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7a:	4a1f      	ldr	r2, [pc, #124]	; (8001df8 <HAL_SD_IRQHandler+0x304>)
 8001d7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fa60 	bl	8001248 <HAL_DMA_Abort_IT>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d02f      	beq.n	8001dee <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f85e 	bl	8001e54 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8001d98:	e029      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <HAL_SD_IRQHandler+0x2ba>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d011      	beq.n	8001dd2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_SD_IRQHandler+0x308>)
 8001db4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fa44 	bl	8001248 <HAL_DMA_Abort_IT>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d013      	beq.n	8001dee <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f879 	bl	8001ec2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8001dd0:	e00d      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 fb0a 	bl	8002400 <HAL_SD_AbortCallback>
}
 8001dec:	e7ff      	b.n	8001dee <HAL_SD_IRQHandler+0x2fa>
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	08001e55 	.word	0x08001e55
 8001dfc:	08001ec3 	.word	0x08001ec3

08001e00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f882 	bl	8001f30 <SD_SendStatus>
 8001e2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	0a5b      	lsrs	r3, r3, #9
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8001e4a:	693b      	ldr	r3, [r7, #16]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e60:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f240 523a 	movw	r2, #1338	; 0x53a
 8001e6a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f7ff ffd1 	bl	8001e14 <HAL_SD_GetCardState>
 8001e72:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	d002      	beq.n	8001e8e <SD_DMATxAbort+0x3a>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d10a      	bne.n	8001ea4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f982 	bl	800219c <SDMMC_CmdStopTransfer>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d103      	bne.n	8001eb4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8001eac:	68f8      	ldr	r0, [r7, #12]
 8001eae:	f000 faa7 	bl	8002400 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8001eb2:	e002      	b.n	8001eba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8001eb4:	68f8      	ldr	r0, [r7, #12]
 8001eb6:	f7ff ffa3 	bl	8001e00 <HAL_SD_ErrorCallback>
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f240 523a 	movw	r2, #1338	; 0x53a
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff ff9a 	bl	8001e14 <HAL_SD_GetCardState>
 8001ee0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d002      	beq.n	8001efc <SD_DMARxAbort+0x3a>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b05      	cmp	r3, #5
 8001efa:	d10a      	bne.n	8001f12 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 f94b 	bl	800219c <SDMMC_CmdStopTransfer>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d103      	bne.n	8001f22 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 fa70 	bl	8002400 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8001f20:	e002      	b.n	8001f28 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff ff6c 	bl	8001e00 <HAL_SD_ErrorCallback>
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8001f40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f44:	e018      	b.n	8001f78 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	4619      	mov	r1, r3
 8001f52:	4610      	mov	r0, r2
 8001f54:	f000 f944 	bl	80021e0 <SDMMC_CmdSendStatus>
 8001f58:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SD_SendStatus+0x34>
  {
    return errorstate;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	e009      	b.n	8001f78 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f000 f903 	bl	8002176 <SDIO_GetResponse>
 8001f70:	4602      	mov	r2, r0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03f      	beq.n	800201a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e033      	b.n	8002008 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 f891 	bl	80020cc <SDIO_ReadFIFO>
 8001faa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]
      tmp++;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	0e1b      	lsrs	r3, r3, #24
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b07      	cmp	r3, #7
 800200c:	d9c8      	bls.n	8001fa0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d043      	beq.n	80020c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e037      	b.n	80020b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	3301      	adds	r3, #1
 800204c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	3b01      	subs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	021a      	lsls	r2, r3, #8
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	4313      	orrs	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3301      	adds	r3, #1
 8002064:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	3b01      	subs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	4313      	orrs	r3, r2
 8002076:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	3b01      	subs	r3, #1
 8002082:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	061a      	lsls	r2, r3, #24
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4313      	orrs	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	3b01      	subs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f107 0208 	add.w	r2, r7, #8
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f81d 	bl	80020e6 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b07      	cmp	r3, #7
 80020b6:	d9c4      	bls.n	8002042 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80020c4:	bf00      	nop
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002126:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800212c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002132:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	4313      	orrs	r3, r2
 8002138:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002142:	f023 030f 	bic.w	r3, r3, #15
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	b2db      	uxtb	r3, r3
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002176:	b480      	push	{r7}
 8002178:	b085      	sub	sp, #20
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3314      	adds	r3, #20
 8002184:	461a      	mov	r2, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
}  
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b088      	sub	sp, #32
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80021a8:	230c      	movs	r3, #12
 80021aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80021b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80021ba:	f107 0308 	add.w	r3, r7, #8
 80021be:	4619      	mov	r1, r3
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ffa1 	bl	8002108 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80021c6:	4a05      	ldr	r2, [pc, #20]	; (80021dc <SDMMC_CmdStopTransfer+0x40>)
 80021c8:	210c      	movs	r1, #12
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f82a 	bl	8002224 <SDMMC_GetCmdResp1>
 80021d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80021d2:	69fb      	ldr	r3, [r7, #28]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	05f5e100 	.word	0x05f5e100

080021e0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80021ee:	230d      	movs	r3, #13
 80021f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80021f2:	2340      	movs	r3, #64	; 0x40
 80021f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80021fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	4619      	mov	r1, r3
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ff7e 	bl	8002108 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	210d      	movs	r1, #13
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f806 	bl	8002224 <SDMMC_GetCmdResp1>
 8002218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800221a:	69fb      	ldr	r3, [r7, #28]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	460b      	mov	r3, r1
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002232:	4b70      	ldr	r3, [pc, #448]	; (80023f4 <SDMMC_GetCmdResp1+0x1d0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a70      	ldr	r2, [pc, #448]	; (80023f8 <SDMMC_GetCmdResp1+0x1d4>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	0a5a      	lsrs	r2, r3, #9
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	61fa      	str	r2, [r7, #28]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002254:	e0c9      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0ef      	beq.n	8002246 <SDMMC_GetCmdResp1+0x22>
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1ea      	bne.n	8002246 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2204      	movs	r2, #4
 8002280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002282:	2304      	movs	r3, #4
 8002284:	e0b1      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	2b00      	cmp	r3, #0
 8002290:	d004      	beq.n	800229c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002298:	2301      	movs	r3, #1
 800229a:	e0a6      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	22c5      	movs	r2, #197	; 0xc5
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f7ff ff5a 	bl	800215c <SDIO_GetCommandResponse>
 80022a8:	4603      	mov	r3, r0
 80022aa:	461a      	mov	r2, r3
 80022ac:	7afb      	ldrb	r3, [r7, #11]
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d001      	beq.n	80022b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e099      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80022b6:	2100      	movs	r1, #0
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f7ff ff5c 	bl	8002176 <SDIO_GetResponse>
 80022be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <SDMMC_GetCmdResp1+0x1d8>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e08d      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da02      	bge.n	80022da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80022d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022d8:	e087      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80022e4:	2340      	movs	r3, #64	; 0x40
 80022e6:	e080      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	e079      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002300:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002304:	e071      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002314:	e069      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002324:	e061      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002334:	e059      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002344:	e051      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002354:	e049      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002360:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002364:	e041      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d002      	beq.n	8002376 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002370:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002374:	e039      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002384:	e031      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002390:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002394:	e029      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80023a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80023a4:	e021      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d002      	beq.n	80023b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80023b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80023b4:	e019      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80023c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c4:	e011      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80023d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d4:	e009      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80023e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80023e4:	e001      	b.n	80023ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80023e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3720      	adds	r7, #32
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000008 	.word	0x20000008
 80023f8:	10624dd3 	.word	0x10624dd3
 80023fc:	fdffe008 	.word	0xfdffe008

08002400 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8002408:	f000 f818 	bl	800243c <BSP_SD_AbortCallback>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800241c:	f000 f816 	bl	800244c <BSP_SD_WriteCpltCallback>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8002430:	f000 f81e 	bl	8002470 <BSP_SD_ReadCpltCallback>
}
 8002434:	bf00      	nop
 8002436:	3708      	adds	r7, #8
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0

}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8002452:	2302      	movs	r3, #2
 8002454:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <BSP_SD_WriteCpltCallback+0x20>)
 8002458:	6818      	ldr	r0, [r3, #0]
 800245a:	1db9      	adds	r1, r7, #6
 800245c:	2300      	movs	r3, #0
 800245e:	2200      	movs	r2, #0
 8002460:	f000 f894 	bl	800258c <osMessageQueuePut>
#endif
}
 8002464:	bf00      	nop
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20000530 	.word	0x20000530

08002470 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8002476:	2301      	movs	r3, #1
 8002478:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <BSP_SD_ReadCpltCallback+0x20>)
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	1db9      	adds	r1, r7, #6
 8002480:	2300      	movs	r3, #0
 8002482:	2200      	movs	r2, #0
 8002484:	f000 f882 	bl	800258c <osMessageQueuePut>
#endif
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000530 	.word	0x20000530

08002494 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_ETH_RxCpltCallback+0x1c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f82f 	bl	8002504 <osSemaphoreRelease>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000534 	.word	0x20000534

080024b4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_ETH_TxCpltCallback+0x1c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f81f 	bl	8002504 <osSemaphoreRelease>
}
 80024c6:	bf00      	nop
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000538 	.word	0x20000538

080024d4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f7ff f935 	bl	800174c <HAL_ETH_GetDMAError>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d104      	bne.n	80024f6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_ETH_ErrorCallback+0x2c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f807 	bl	8002504 <osSemaphoreRelease>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000534 	.word	0x20000534

08002504 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800251a:	f06f 0303 	mvn.w	r3, #3
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e02c      	b.n	800257c <osSemaphoreRelease+0x78>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002522:	f3ef 8305 	mrs	r3, IPSR
 8002526:	60fb      	str	r3, [r7, #12]
  return(result);
 8002528:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800252a:	2b00      	cmp	r3, #0
 800252c:	d01a      	beq.n	8002564 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	4619      	mov	r1, r3
 8002538:	6938      	ldr	r0, [r7, #16]
 800253a:	f000 fc78 	bl	8002e2e <xQueueGiveFromISR>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d003      	beq.n	800254c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002544:	f06f 0302 	mvn.w	r3, #2
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e017      	b.n	800257c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d014      	beq.n	800257c <osSemaphoreRelease+0x78>
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <osSemaphoreRelease+0x84>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	e00b      	b.n	800257c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002564:	2300      	movs	r3, #0
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	6938      	ldr	r0, [r7, #16]
 800256c:	f000 fac6 	bl	8002afc <xQueueGenericSend>
 8002570:	4603      	mov	r3, r0
 8002572:	2b01      	cmp	r3, #1
 8002574:	d002      	beq.n	800257c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002576:	f06f 0302 	mvn.w	r3, #2
 800257a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800257c:	697b      	ldr	r3, [r7, #20]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	e000ed04 	.word	0xe000ed04

0800258c <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	4613      	mov	r3, r2
 800259a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a4:	f3ef 8305 	mrs	r3, IPSR
 80025a8:	617b      	str	r3, [r7, #20]
  return(result);
 80025aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d028      	beq.n	8002602 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <osMessageQueuePut+0x36>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <osMessageQueuePut+0x36>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80025c2:	f06f 0303 	mvn.w	r3, #3
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	e038      	b.n	800263c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80025ca:	2300      	movs	r3, #0
 80025cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80025ce:	f107 0210 	add.w	r2, r7, #16
 80025d2:	2300      	movs	r3, #0
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	69b8      	ldr	r0, [r7, #24]
 80025d8:	f000 fb8e 	bl	8002cf8 <xQueueGenericSendFromISR>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d003      	beq.n	80025ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80025e2:	f06f 0302 	mvn.w	r3, #2
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	e028      	b.n	800263c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d025      	beq.n	800263c <osMessageQueuePut+0xb0>
 80025f0:	4b15      	ldr	r3, [pc, #84]	; (8002648 <osMessageQueuePut+0xbc>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	e01c      	b.n	800263c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <osMessageQueuePut+0x82>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d103      	bne.n	8002616 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800260e:	f06f 0303 	mvn.w	r3, #3
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	e012      	b.n	800263c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002616:	2300      	movs	r3, #0
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	68b9      	ldr	r1, [r7, #8]
 800261c:	69b8      	ldr	r0, [r7, #24]
 800261e:	f000 fa6d 	bl	8002afc <xQueueGenericSend>
 8002622:	4603      	mov	r3, r0
 8002624:	2b01      	cmp	r3, #1
 8002626:	d009      	beq.n	800263c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800262e:	f06f 0301 	mvn.w	r3, #1
 8002632:	61fb      	str	r3, [r7, #28]
 8002634:	e002      	b.n	800263c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002636:	f06f 0302 	mvn.w	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800263c:	69fb      	ldr	r3, [r7, #28]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3720      	adds	r7, #32
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	e000ed04 	.word	0xe000ed04

0800264c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <vApplicationGetIdleTaskMemory+0x2c>)
 800265c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <vApplicationGetIdleTaskMemory+0x30>)
 8002662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200005ec 	.word	0x200005ec
 800267c:	20000648 	.word	0x20000648

08002680 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <vApplicationGetTimerTaskMemory+0x2c>)
 8002690:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <vApplicationGetTimerTaskMemory+0x30>)
 8002696:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800269e:	601a      	str	r2, [r3, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	20000848 	.word	0x20000848
 80026b0:	200008a4 	.word	0x200008a4

080026b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f103 0208 	add.w	r2, r3, #8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f103 0208 	add.w	r2, r3, #8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f103 0208 	add.w	r2, r3, #8
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
 8002716:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	689a      	ldr	r2, [r3, #8]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3714      	adds	r7, #20
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276c:	d103      	bne.n	8002776 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	e00c      	b.n	8002790 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3308      	adds	r3, #8
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e002      	b.n	8002784 <vListInsert+0x2e>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	429a      	cmp	r2, r3
 800278e:	d2f6      	bcs.n	800277e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	601a      	str	r2, [r3, #0]
}
 80027bc:	bf00      	nop
 80027be:	3714      	adds	r7, #20
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6852      	ldr	r2, [r2, #4]
 80027e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d103      	bne.n	80027fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002846:	f002 fc75 	bl	8005134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	441a      	add	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	3b01      	subs	r3, #1
 8002878:	68f9      	ldr	r1, [r7, #12]
 800287a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	441a      	add	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	22ff      	movs	r2, #255	; 0xff
 800288a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d114      	bne.n	80028c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d01a      	beq.n	80028da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3310      	adds	r3, #16
 80028a8:	4618      	mov	r0, r3
 80028aa:	f001 fc27 	bl	80040fc <xTaskRemoveFromEventList>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <xQueueGenericReset+0xcc>)
 80028b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	f3bf 8f6f 	isb	sy
 80028c4:	e009      	b.n	80028da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3310      	adds	r3, #16
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fef2 	bl	80026b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	3324      	adds	r3, #36	; 0x24
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff feed 	bl	80026b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028da:	f002 fc5b 	bl	8005194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08e      	sub	sp, #56	; 0x38
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002912:	bf00      	nop
 8002914:	e7fe      	b.n	8002914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800291c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002920:	f383 8811 	msr	BASEPRI, r3
 8002924:	f3bf 8f6f 	isb	sy
 8002928:	f3bf 8f4f 	dsb	sy
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800292e:	bf00      	nop
 8002930:	e7fe      	b.n	8002930 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <xQueueGenericCreateStatic+0x52>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <xQueueGenericCreateStatic+0x56>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <xQueueGenericCreateStatic+0x58>
 8002942:	2300      	movs	r3, #0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	623b      	str	r3, [r7, #32]
}
 800295a:	bf00      	nop
 800295c:	e7fe      	b.n	800295c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <xQueueGenericCreateStatic+0x7e>
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <xQueueGenericCreateStatic+0x82>
 800296a:	2301      	movs	r3, #1
 800296c:	e000      	b.n	8002970 <xQueueGenericCreateStatic+0x84>
 800296e:	2300      	movs	r3, #0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10a      	bne.n	800298a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	f383 8811 	msr	BASEPRI, r3
 800297c:	f3bf 8f6f 	isb	sy
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	61fb      	str	r3, [r7, #28]
}
 8002986:	bf00      	nop
 8002988:	e7fe      	b.n	8002988 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800298a:	2350      	movs	r3, #80	; 0x50
 800298c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b50      	cmp	r3, #80	; 0x50
 8002992:	d00a      	beq.n	80029aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	61bb      	str	r3, [r7, #24]
}
 80029a6:	bf00      	nop
 80029a8:	e7fe      	b.n	80029a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	4613      	mov	r3, r2
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	68b9      	ldr	r1, [r7, #8]
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 f83f 	bl	8002a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3730      	adds	r7, #48	; 0x30
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b08a      	sub	sp, #40	; 0x28
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	4613      	mov	r3, r2
 80029e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10a      	bne.n	8002a06 <xQueueGenericCreate+0x2a>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	f383 8811 	msr	BASEPRI, r3
 80029f8:	f3bf 8f6f 	isb	sy
 80029fc:	f3bf 8f4f 	dsb	sy
 8002a00:	613b      	str	r3, [r7, #16]
}
 8002a02:	bf00      	nop
 8002a04:	e7fe      	b.n	8002a04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	fb02 f303 	mul.w	r3, r2, r3
 8002a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	3350      	adds	r3, #80	; 0x50
 8002a14:	4618      	mov	r0, r3
 8002a16:	f002 fcaf 	bl	8005378 <pvPortMalloc>
 8002a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d011      	beq.n	8002a46 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	3350      	adds	r3, #80	; 0x50
 8002a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a34:	79fa      	ldrb	r2, [r7, #7]
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f805 	bl	8002a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a46:	69bb      	ldr	r3, [r7, #24]
	}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d103      	bne.n	8002a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e002      	b.n	8002a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a7e:	2101      	movs	r1, #1
 8002a80:	69b8      	ldr	r0, [r7, #24]
 8002a82:	f7ff fecb 	bl	800281c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a8e:	bf00      	nop
 8002a90:	3710      	adds	r7, #16
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2100      	movs	r1, #0
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f81d 	bl	8002afc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6939      	ldr	r1, [r7, #16]
 8002ae2:	6978      	ldr	r0, [r7, #20]
 8002ae4:	f7ff ff7a 	bl	80029dc <xQueueGenericCreate>
 8002ae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002aea:	68f8      	ldr	r0, [r7, #12]
 8002aec:	f7ff ffd3 	bl	8002a96 <prvInitialiseMutex>

		return xNewQueue;
 8002af0:	68fb      	ldr	r3, [r7, #12]
	}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	; 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
 8002b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <xQueueGenericSend+0x32>
	__asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d103      	bne.n	8002b3c <xQueueGenericSend+0x40>
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <xQueueGenericSend+0x44>
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e000      	b.n	8002b42 <xQueueGenericSend+0x46>
 8002b40:	2300      	movs	r3, #0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <xQueueGenericSend+0x60>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d103      	bne.n	8002b6a <xQueueGenericSend+0x6e>
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d101      	bne.n	8002b6e <xQueueGenericSend+0x72>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e000      	b.n	8002b70 <xQueueGenericSend+0x74>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10a      	bne.n	8002b8a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	623b      	str	r3, [r7, #32]
}
 8002b86:	bf00      	nop
 8002b88:	e7fe      	b.n	8002b88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b8a:	f001 fc77 	bl	800447c <xTaskGetSchedulerState>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d102      	bne.n	8002b9a <xQueueGenericSend+0x9e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <xQueueGenericSend+0xa2>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <xQueueGenericSend+0xa4>
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <xQueueGenericSend+0xbe>
	__asm volatile
 8002ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba8:	f383 8811 	msr	BASEPRI, r3
 8002bac:	f3bf 8f6f 	isb	sy
 8002bb0:	f3bf 8f4f 	dsb	sy
 8002bb4:	61fb      	str	r3, [r7, #28]
}
 8002bb6:	bf00      	nop
 8002bb8:	e7fe      	b.n	8002bb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bba:	f002 fabb 	bl	8005134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d302      	bcc.n	8002bd0 <xQueueGenericSend+0xd4>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d129      	bne.n	8002c24 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd6:	f000 fc3b 	bl	8003450 <prvCopyDataToQueue>
 8002bda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d010      	beq.n	8002c06 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fa87 	bl	80040fc <xTaskRemoveFromEventList>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d013      	beq.n	8002c1c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bf4:	4b3f      	ldr	r3, [pc, #252]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	e00a      	b.n	8002c1c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002c0c:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002c1c:	f002 faba 	bl	8005194 <vPortExitCritical>
				return pdPASS;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e063      	b.n	8002cec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d103      	bne.n	8002c32 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c2a:	f002 fab3 	bl	8005194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	e05c      	b.n	8002cec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d106      	bne.n	8002c46 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 fac1 	bl	80041c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c42:	2301      	movs	r3, #1
 8002c44:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c46:	f002 faa5 	bl	8005194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c4a:	f001 f81d 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c4e:	f002 fa71 	bl	8005134 <vPortEnterCritical>
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c5e:	d103      	bne.n	8002c68 <xQueueGenericSend+0x16c>
 8002c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c6e:	b25b      	sxtb	r3, r3
 8002c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x182>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c7e:	f002 fa89 	bl	8005194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c82:	1d3a      	adds	r2, r7, #4
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f001 fab0 	bl	80041f0 <xTaskCheckForTimeOut>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d124      	bne.n	8002ce0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c98:	f000 fcd2 	bl	8003640 <prvIsQueueFull>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	3310      	adds	r3, #16
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f9d6 	bl	800405c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb2:	f000 fc5d 	bl	8003570 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002cb6:	f000 fff5 	bl	8003ca4 <xTaskResumeAll>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f47f af7c 	bne.w	8002bba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <xQueueGenericSend+0x1f8>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	e772      	b.n	8002bba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002cd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cd6:	f000 fc4b 	bl	8003570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cda:	f000 ffe3 	bl	8003ca4 <xTaskResumeAll>
 8002cde:	e76c      	b.n	8002bba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ce0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce2:	f000 fc45 	bl	8003570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ce6:	f000 ffdd 	bl	8003ca4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	e000ed04 	.word	0xe000ed04

08002cf8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b090      	sub	sp, #64	; 0x40
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d22:	bf00      	nop
 8002d24:	e7fe      	b.n	8002d24 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <xQueueGenericSendFromISR+0x3c>
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <xQueueGenericSendFromISR+0x40>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <xQueueGenericSendFromISR+0x42>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d42:	f383 8811 	msr	BASEPRI, r3
 8002d46:	f3bf 8f6f 	isb	sy
 8002d4a:	f3bf 8f4f 	dsb	sy
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002d50:	bf00      	nop
 8002d52:	e7fe      	b.n	8002d52 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d103      	bne.n	8002d62 <xQueueGenericSendFromISR+0x6a>
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <xQueueGenericSendFromISR+0x6e>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <xQueueGenericSendFromISR+0x70>
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	623b      	str	r3, [r7, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	e7fe      	b.n	8002d80 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d82:	f002 fab9 	bl	80052f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d86:	f3ef 8211 	mrs	r2, BASEPRI
 8002d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d8e:	f383 8811 	msr	BASEPRI, r3
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	f3bf 8f4f 	dsb	sy
 8002d9a:	61fa      	str	r2, [r7, #28]
 8002d9c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <xQueueGenericSendFromISR+0xbc>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d12f      	bne.n	8002e14 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002dca:	f000 fb41 	bl	8003450 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002dce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dd6:	d112      	bne.n	8002dfe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d016      	beq.n	8002e0e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	3324      	adds	r3, #36	; 0x24
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 f989 	bl	80040fc <xTaskRemoveFromEventList>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00e      	beq.n	8002e0e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	e007      	b.n	8002e0e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	b25a      	sxtb	r2, r3
 8002e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002e12:	e001      	b.n	8002e18 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e1a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002e22:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3740      	adds	r7, #64	; 0x40
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b08e      	sub	sp, #56	; 0x38
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10a      	bne.n	8002e58 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	623b      	str	r3, [r7, #32]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00a      	beq.n	8002e76 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	61fb      	str	r3, [r7, #28]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <xQueueGiveFromISR+0x58>
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <xQueueGiveFromISR+0x5c>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <xQueueGiveFromISR+0x5e>
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10a      	bne.n	8002ea6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e94:	f383 8811 	msr	BASEPRI, r3
 8002e98:	f3bf 8f6f 	isb	sy
 8002e9c:	f3bf 8f4f 	dsb	sy
 8002ea0:	61bb      	str	r3, [r7, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	e7fe      	b.n	8002ea4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ea6:	f002 fa27 	bl	80052f8 <vPortValidateInterruptPriority>
	__asm volatile
 8002eaa:	f3ef 8211 	mrs	r2, BASEPRI
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	617a      	str	r2, [r7, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002ec2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d22b      	bcs.n	8002f2e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ee8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ef0:	d112      	bne.n	8002f18 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002efc:	3324      	adds	r3, #36	; 0x24
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 f8fc 	bl	80040fc <xTaskRemoveFromEventList>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e007      	b.n	8002f28 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	b25a      	sxtb	r2, r3
 8002f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8002f2c:	e001      	b.n	8002f32 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	637b      	str	r3, [r7, #52]	; 0x34
 8002f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f34:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f383 8811 	msr	BASEPRI, r3
}
 8002f3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3738      	adds	r7, #56	; 0x38
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <xQueueReceive+0x30>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	623b      	str	r3, [r7, #32]
}
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <xQueueReceive+0x3e>
 8002f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <xQueueReceive+0x42>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <xQueueReceive+0x44>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xQueueReceive+0x5e>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	61fb      	str	r3, [r7, #28]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fa6:	f001 fa69 	bl	800447c <xTaskGetSchedulerState>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <xQueueReceive+0x6e>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <xQueueReceive+0x72>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <xQueueReceive+0x74>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <xQueueReceive+0x8e>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	61bb      	str	r3, [r7, #24]
}
 8002fd2:	bf00      	nop
 8002fd4:	e7fe      	b.n	8002fd4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fd6:	f002 f8ad 	bl	8005134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01f      	beq.n	8003026 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002fea:	f000 fa9b 	bl	8003524 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00f      	beq.n	800301e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	3310      	adds	r3, #16
 8003002:	4618      	mov	r0, r3
 8003004:	f001 f87a 	bl	80040fc <xTaskRemoveFromEventList>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800300e:	4b3d      	ldr	r3, [pc, #244]	; (8003104 <xQueueReceive+0x1bc>)
 8003010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800301e:	f002 f8b9 	bl	8005194 <vPortExitCritical>
				return pdPASS;
 8003022:	2301      	movs	r3, #1
 8003024:	e069      	b.n	80030fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d103      	bne.n	8003034 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800302c:	f002 f8b2 	bl	8005194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003030:	2300      	movs	r3, #0
 8003032:	e062      	b.n	80030fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f8c0 	bl	80041c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003044:	2301      	movs	r3, #1
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003048:	f002 f8a4 	bl	8005194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800304c:	f000 fe1c 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003050:	f002 f870 	bl	8005134 <vPortEnterCritical>
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800305a:	b25b      	sxtb	r3, r3
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003060:	d103      	bne.n	800306a <xQueueReceive+0x122>
 8003062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003070:	b25b      	sxtb	r3, r3
 8003072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003076:	d103      	bne.n	8003080 <xQueueReceive+0x138>
 8003078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003080:	f002 f888 	bl	8005194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003084:	1d3a      	adds	r2, r7, #4
 8003086:	f107 0310 	add.w	r3, r7, #16
 800308a:	4611      	mov	r1, r2
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f8af 	bl	80041f0 <xTaskCheckForTimeOut>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d123      	bne.n	80030e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800309a:	f000 fabb 	bl	8003614 <prvIsQueueEmpty>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d017      	beq.n	80030d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ffd5 	bl	800405c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030b4:	f000 fa5c 	bl	8003570 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030b8:	f000 fdf4 	bl	8003ca4 <xTaskResumeAll>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d189      	bne.n	8002fd6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <xQueueReceive+0x1bc>)
 80030c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	e780      	b.n	8002fd6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d6:	f000 fa4b 	bl	8003570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030da:	f000 fde3 	bl	8003ca4 <xTaskResumeAll>
 80030de:	e77a      	b.n	8002fd6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030e2:	f000 fa45 	bl	8003570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030e6:	f000 fddd 	bl	8003ca4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ec:	f000 fa92 	bl	8003614 <prvIsQueueEmpty>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f43f af6f 	beq.w	8002fd6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3730      	adds	r7, #48	; 0x30
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	e000ed04 	.word	0xe000ed04

08003108 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08e      	sub	sp, #56	; 0x38
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003112:	2300      	movs	r3, #0
 8003114:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800311e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	623b      	str	r3, [r7, #32]
}
 8003136:	bf00      	nop
 8003138:	e7fe      	b.n	8003138 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800313a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61fb      	str	r3, [r7, #28]
}
 8003154:	bf00      	nop
 8003156:	e7fe      	b.n	8003156 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003158:	f001 f990 	bl	800447c <xTaskGetSchedulerState>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <xQueueSemaphoreTake+0x60>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <xQueueSemaphoreTake+0x64>
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <xQueueSemaphoreTake+0x66>
 800316c:	2300      	movs	r3, #0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003176:	f383 8811 	msr	BASEPRI, r3
 800317a:	f3bf 8f6f 	isb	sy
 800317e:	f3bf 8f4f 	dsb	sy
 8003182:	61bb      	str	r3, [r7, #24]
}
 8003184:	bf00      	nop
 8003186:	e7fe      	b.n	8003186 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003188:	f001 ffd4 	bl	8005134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003190:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003194:	2b00      	cmp	r3, #0
 8003196:	d024      	beq.n	80031e2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319a:	1e5a      	subs	r2, r3, #1
 800319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800319e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d104      	bne.n	80031b2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031a8:	f001 fade 	bl	8004768 <pvTaskIncrementMutexHeldCount>
 80031ac:	4602      	mov	r2, r0
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00f      	beq.n	80031da <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031bc:	3310      	adds	r3, #16
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 ff9c 	bl	80040fc <xTaskRemoveFromEventList>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031ca:	4b54      	ldr	r3, [pc, #336]	; (800331c <xQueueSemaphoreTake+0x214>)
 80031cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031da:	f001 ffdb 	bl	8005194 <vPortExitCritical>
				return pdPASS;
 80031de:	2301      	movs	r3, #1
 80031e0:	e097      	b.n	8003312 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d111      	bne.n	800320c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	617b      	str	r3, [r7, #20]
}
 8003200:	bf00      	nop
 8003202:	e7fe      	b.n	8003202 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003204:	f001 ffc6 	bl	8005194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003208:	2300      	movs	r3, #0
 800320a:	e082      	b.n	8003312 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003212:	f107 030c 	add.w	r3, r7, #12
 8003216:	4618      	mov	r0, r3
 8003218:	f000 ffd4 	bl	80041c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800321c:	2301      	movs	r3, #1
 800321e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003220:	f001 ffb8 	bl	8005194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003224:	f000 fd30 	bl	8003c88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003228:	f001 ff84 	bl	8005134 <vPortEnterCritical>
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003232:	b25b      	sxtb	r3, r3
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003238:	d103      	bne.n	8003242 <xQueueSemaphoreTake+0x13a>
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003248:	b25b      	sxtb	r3, r3
 800324a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800324e:	d103      	bne.n	8003258 <xQueueSemaphoreTake+0x150>
 8003250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003258:	f001 ff9c 	bl	8005194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800325c:	463a      	mov	r2, r7
 800325e:	f107 030c 	add.w	r3, r7, #12
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f000 ffc3 	bl	80041f0 <xTaskCheckForTimeOut>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d132      	bne.n	80032d6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003270:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003272:	f000 f9cf 	bl	8003614 <prvIsQueueEmpty>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d026      	beq.n	80032ca <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003284:	f001 ff56 	bl	8005134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4618      	mov	r0, r3
 800328e:	f001 f913 	bl	80044b8 <xTaskPriorityInherit>
 8003292:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003294:	f001 ff7e 	bl	8005194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329a:	3324      	adds	r3, #36	; 0x24
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fedb 	bl	800405c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032a8:	f000 f962 	bl	8003570 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032ac:	f000 fcfa 	bl	8003ca4 <xTaskResumeAll>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f47f af68 	bne.w	8003188 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <xQueueSemaphoreTake+0x214>)
 80032ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	e75e      	b.n	8003188 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032cc:	f000 f950 	bl	8003570 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032d0:	f000 fce8 	bl	8003ca4 <xTaskResumeAll>
 80032d4:	e758      	b.n	8003188 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032d8:	f000 f94a 	bl	8003570 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032dc:	f000 fce2 	bl	8003ca4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032e2:	f000 f997 	bl	8003614 <prvIsQueueEmpty>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f43f af4d 	beq.w	8003188 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00d      	beq.n	8003310 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80032f4:	f001 ff1e 	bl	8005134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80032f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032fa:	f000 f891 	bl	8003420 <prvGetDisinheritPriorityAfterTimeout>
 80032fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003306:	4618      	mov	r0, r3
 8003308:	f001 f9ac 	bl	8004664 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800330c:	f001 ff42 	bl	8005194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003310:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003312:	4618      	mov	r0, r3
 8003314:	3738      	adds	r7, #56	; 0x38
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08e      	sub	sp, #56	; 0x38
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	623b      	str	r3, [r7, #32]
}
 8003348:	bf00      	nop
 800334a:	e7fe      	b.n	800334a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <xQueueReceiveFromISR+0x3a>
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <xQueueReceiveFromISR+0x3e>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xQueueReceiveFromISR+0x40>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61fb      	str	r3, [r7, #28]
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800337a:	f001 ffbd 	bl	80052f8 <vPortValidateInterruptPriority>
	__asm volatile
 800337e:	f3ef 8211 	mrs	r2, BASEPRI
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	61ba      	str	r2, [r7, #24]
 8003394:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003396:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d02f      	beq.n	8003406 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033b0:	68b9      	ldr	r1, [r7, #8]
 80033b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033b4:	f000 f8b6 	bl	8003524 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ba:	1e5a      	subs	r2, r3, #1
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80033c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80033c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033c8:	d112      	bne.n	80033f0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	3310      	adds	r3, #16
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fe90 	bl	80040fc <xTaskRemoveFromEventList>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00e      	beq.n	8003400 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00b      	beq.n	8003400 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80033f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f4:	3301      	adds	r3, #1
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	b25a      	sxtb	r2, r3
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003400:	2301      	movs	r3, #1
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
 8003404:	e001      	b.n	800340a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003406:	2300      	movs	r3, #0
 8003408:	637b      	str	r3, [r7, #52]	; 0x34
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f383 8811 	msr	BASEPRI, r3
}
 8003414:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003418:	4618      	mov	r0, r3
 800341a:	3738      	adds	r7, #56	; 0x38
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	e001      	b.n	8003442 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800343e:	2300      	movs	r3, #0
 8003440:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003442:	68fb      	ldr	r3, [r7, #12]
	}
 8003444:	4618      	mov	r0, r3
 8003446:	3714      	adds	r7, #20
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d14d      	bne.n	8003512 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	4618      	mov	r0, r3
 800347c:	f001 f884 	bl	8004588 <xTaskPriorityDisinherit>
 8003480:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	e043      	b.n	8003512 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d119      	bne.n	80034c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6858      	ldr	r0, [r3, #4]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	461a      	mov	r2, r3
 800349a:	68b9      	ldr	r1, [r7, #8]
 800349c:	f006 fe12 	bl	800a0c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	441a      	add	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d32b      	bcc.n	8003512 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]
 80034c2:	e026      	b.n	8003512 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68d8      	ldr	r0, [r3, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	461a      	mov	r2, r3
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	f006 fdf8 	bl	800a0c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	425b      	negs	r3, r3
 80034de:	441a      	add	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d207      	bcs.n	8003500 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	425b      	negs	r3, r3
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b02      	cmp	r3, #2
 8003504:	d105      	bne.n	8003512 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	3b01      	subs	r3, #1
 8003510:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800351a:	697b      	ldr	r3, [r7, #20]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	d303      	bcc.n	8003558 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68d9      	ldr	r1, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	461a      	mov	r2, r3
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f006 fdae 	bl	800a0c4 <memcpy>
	}
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003578:	f001 fddc 	bl	8005134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003582:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003584:	e011      	b.n	80035aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	d012      	beq.n	80035b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3324      	adds	r3, #36	; 0x24
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fdb2 	bl	80040fc <xTaskRemoveFromEventList>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d001      	beq.n	80035a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800359e:	f000 fe89 	bl	80042b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	dce9      	bgt.n	8003586 <prvUnlockQueue+0x16>
 80035b2:	e000      	b.n	80035b6 <prvUnlockQueue+0x46>
					break;
 80035b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	22ff      	movs	r2, #255	; 0xff
 80035ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80035be:	f001 fde9 	bl	8005194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035c2:	f001 fdb7 	bl	8005134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035ce:	e011      	b.n	80035f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d012      	beq.n	80035fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3310      	adds	r3, #16
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 fd8d 	bl	80040fc <xTaskRemoveFromEventList>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80035e8:	f000 fe64 	bl	80042b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80035ec:	7bbb      	ldrb	r3, [r7, #14]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	dce9      	bgt.n	80035d0 <prvUnlockQueue+0x60>
 80035fc:	e000      	b.n	8003600 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80035fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	22ff      	movs	r2, #255	; 0xff
 8003604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003608:	f001 fdc4 	bl	8005194 <vPortExitCritical>
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800361c:	f001 fd8a 	bl	8005134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	2b00      	cmp	r3, #0
 8003626:	d102      	bne.n	800362e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	60fb      	str	r3, [r7, #12]
 800362c:	e001      	b.n	8003632 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003632:	f001 fdaf 	bl	8005194 <vPortExitCritical>

	return xReturn;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003648:	f001 fd74 	bl	8005134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003654:	429a      	cmp	r2, r3
 8003656:	d102      	bne.n	800365e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003658:	2301      	movs	r3, #1
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	e001      	b.n	8003662 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800365e:	2300      	movs	r3, #0
 8003660:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003662:	f001 fd97 	bl	8005194 <vPortExitCritical>

	return xReturn;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]
 800367e:	e014      	b.n	80036aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003680:	4a0f      	ldr	r2, [pc, #60]	; (80036c0 <vQueueAddToRegistry+0x50>)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800368c:	490c      	ldr	r1, [pc, #48]	; (80036c0 <vQueueAddToRegistry+0x50>)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	683a      	ldr	r2, [r7, #0]
 8003692:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <vQueueAddToRegistry+0x50>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036a2:	e006      	b.n	80036b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2b07      	cmp	r3, #7
 80036ae:	d9e7      	bls.n	8003680 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20000ca4 	.word	0x20000ca4

080036c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80036d4:	f001 fd2e 	bl	8005134 <vPortEnterCritical>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036de:	b25b      	sxtb	r3, r3
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036e4:	d103      	bne.n	80036ee <vQueueWaitForMessageRestricted+0x2a>
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036f4:	b25b      	sxtb	r3, r3
 80036f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036fa:	d103      	bne.n	8003704 <vQueueWaitForMessageRestricted+0x40>
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003704:	f001 fd46 	bl	8005194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	2b00      	cmp	r3, #0
 800370e:	d106      	bne.n	800371e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	68b9      	ldr	r1, [r7, #8]
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fcc3 	bl	80040a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800371e:	6978      	ldr	r0, [r7, #20]
 8003720:	f7ff ff26 	bl	8003570 <prvUnlockQueue>
	}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800372c:	b580      	push	{r7, lr}
 800372e:	b08e      	sub	sp, #56	; 0x38
 8003730:	af04      	add	r7, sp, #16
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	623b      	str	r3, [r7, #32]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	2b00      	cmp	r3, #0
 800375a:	d10a      	bne.n	8003772 <xTaskCreateStatic+0x46>
	__asm volatile
 800375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	61fb      	str	r3, [r7, #28]
}
 800376e:	bf00      	nop
 8003770:	e7fe      	b.n	8003770 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003772:	235c      	movs	r3, #92	; 0x5c
 8003774:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b5c      	cmp	r3, #92	; 0x5c
 800377a:	d00a      	beq.n	8003792 <xTaskCreateStatic+0x66>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	61bb      	str	r3, [r7, #24]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003792:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	2b00      	cmp	r3, #0
 8003798:	d01e      	beq.n	80037d8 <xTaskCreateStatic+0xac>
 800379a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2202      	movs	r2, #2
 80037ae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80037b2:	2300      	movs	r3, #0
 80037b4:	9303      	str	r3, [sp, #12]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	9302      	str	r3, [sp, #8]
 80037ba:	f107 0314 	add.w	r3, r7, #20
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f850 	bl	8003870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037d2:	f000 f8dd 	bl	8003990 <prvAddNewTaskToReadyList>
 80037d6:	e001      	b.n	80037dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80037dc:	697b      	ldr	r3, [r7, #20]
	}
 80037de:	4618      	mov	r0, r3
 80037e0:	3728      	adds	r7, #40	; 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b08c      	sub	sp, #48	; 0x30
 80037ea:	af04      	add	r7, sp, #16
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	4613      	mov	r3, r2
 80037f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80037f6:	88fb      	ldrh	r3, [r7, #6]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f001 fdbc 	bl	8005378 <pvPortMalloc>
 8003800:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00e      	beq.n	8003826 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003808:	205c      	movs	r0, #92	; 0x5c
 800380a:	f001 fdb5 	bl	8005378 <pvPortMalloc>
 800380e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	631a      	str	r2, [r3, #48]	; 0x30
 800381c:	e005      	b.n	800382a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800381e:	6978      	ldr	r0, [r7, #20]
 8003820:	f001 fe7a 	bl	8005518 <vPortFree>
 8003824:	e001      	b.n	800382a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003838:	88fa      	ldrh	r2, [r7, #6]
 800383a:	2300      	movs	r3, #0
 800383c:	9303      	str	r3, [sp, #12]
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	9302      	str	r3, [sp, #8]
 8003842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003844:	9301      	str	r3, [sp, #4]
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f000 f80e 	bl	8003870 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003854:	69f8      	ldr	r0, [r7, #28]
 8003856:	f000 f89b 	bl	8003990 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800385a:	2301      	movs	r3, #1
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e002      	b.n	8003866 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003864:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003866:	69bb      	ldr	r3, [r7, #24]
	}
 8003868:	4618      	mov	r0, r3
 800386a:	3720      	adds	r7, #32
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
 800387c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800387e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003880:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	461a      	mov	r2, r3
 8003888:	21a5      	movs	r1, #165	; 0xa5
 800388a:	f006 fc43 	bl	800a114 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800388e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003898:	3b01      	subs	r3, #1
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f023 0307 	bic.w	r3, r3, #7
 80038a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80038b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	f3bf 8f4f 	dsb	sy
 80038c2:	617b      	str	r3, [r7, #20]
}
 80038c4:	bf00      	nop
 80038c6:	e7fe      	b.n	80038c6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01f      	beq.n	800390e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e012      	b.n	80038fa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	4413      	add	r3, r2
 80038da:	7819      	ldrb	r1, [r3, #0]
 80038dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	3334      	adds	r3, #52	; 0x34
 80038e4:	460a      	mov	r2, r1
 80038e6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	4413      	add	r3, r2
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3301      	adds	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	2b0f      	cmp	r3, #15
 80038fe:	d9e9      	bls.n	80038d4 <prvInitialiseNewTask+0x64>
 8003900:	e000      	b.n	8003904 <prvInitialiseNewTask+0x94>
			{
				break;
 8003902:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800390c:	e003      	b.n	8003916 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	2b37      	cmp	r3, #55	; 0x37
 800391a:	d901      	bls.n	8003920 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800391c:	2337      	movs	r3, #55	; 0x37
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003924:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800392a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392e:	2200      	movs	r2, #0
 8003930:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	3304      	adds	r3, #4
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe fedc 	bl	80026f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800393c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800393e:	3318      	adds	r3, #24
 8003940:	4618      	mov	r0, r3
 8003942:	f7fe fed7 	bl	80026f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800394a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003954:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395e:	2200      	movs	r2, #0
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68f9      	ldr	r1, [r7, #12]
 800396e:	69b8      	ldr	r0, [r7, #24]
 8003970:	f001 fab0 	bl	8004ed4 <pxPortInitialiseStack>
 8003974:	4602      	mov	r2, r0
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800397a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003986:	bf00      	nop
 8003988:	3720      	adds	r7, #32
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003998:	f001 fbcc 	bl	8005134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800399c:	4b2d      	ldr	r3, [pc, #180]	; (8003a54 <prvAddNewTaskToReadyList+0xc4>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	4a2c      	ldr	r2, [pc, #176]	; (8003a54 <prvAddNewTaskToReadyList+0xc4>)
 80039a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80039a6:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <prvAddNewTaskToReadyList+0xc8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80039ae:	4a2a      	ldr	r2, [pc, #168]	; (8003a58 <prvAddNewTaskToReadyList+0xc8>)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <prvAddNewTaskToReadyList+0xc4>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d110      	bne.n	80039de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80039bc:	f000 fca0 	bl	8004300 <prvInitialiseTaskLists>
 80039c0:	e00d      	b.n	80039de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80039c2:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <prvAddNewTaskToReadyList+0xcc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80039ca:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <prvAddNewTaskToReadyList+0xc8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d802      	bhi.n	80039de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80039d8:	4a1f      	ldr	r2, [pc, #124]	; (8003a58 <prvAddNewTaskToReadyList+0xc8>)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80039de:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <prvAddNewTaskToReadyList+0xd0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a1e      	ldr	r2, [pc, #120]	; (8003a60 <prvAddNewTaskToReadyList+0xd0>)
 80039e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80039e8:	4b1d      	ldr	r3, [pc, #116]	; (8003a60 <prvAddNewTaskToReadyList+0xd0>)
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <prvAddNewTaskToReadyList+0xd4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d903      	bls.n	8003a04 <prvAddNewTaskToReadyList+0x74>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <prvAddNewTaskToReadyList+0xd4>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4a15      	ldr	r2, [pc, #84]	; (8003a68 <prvAddNewTaskToReadyList+0xd8>)
 8003a12:	441a      	add	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	3304      	adds	r3, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	f7fe fe77 	bl	800270e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a20:	f001 fbb8 	bl	8005194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <prvAddNewTaskToReadyList+0xcc>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00e      	beq.n	8003a4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a2c:	4b0a      	ldr	r3, [pc, #40]	; (8003a58 <prvAddNewTaskToReadyList+0xc8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d207      	bcs.n	8003a4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003a3a:	4b0c      	ldr	r3, [pc, #48]	; (8003a6c <prvAddNewTaskToReadyList+0xdc>)
 8003a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	200011b8 	.word	0x200011b8
 8003a58:	20000ce4 	.word	0x20000ce4
 8003a5c:	200011c4 	.word	0x200011c4
 8003a60:	200011d4 	.word	0x200011d4
 8003a64:	200011c0 	.word	0x200011c0
 8003a68:	20000ce8 	.word	0x20000ce8
 8003a6c:	e000ed04 	.word	0xe000ed04

08003a70 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003a78:	f001 fb5c 	bl	8005134 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d102      	bne.n	8003a88 <vTaskDelete+0x18>
 8003a82:	4b2c      	ldr	r3, [pc, #176]	; (8003b34 <vTaskDelete+0xc4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e000      	b.n	8003a8a <vTaskDelete+0x1a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fe fe99 	bl	80027c8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d004      	beq.n	8003aa8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fe fe90 	bl	80027c8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003aa8:	4b23      	ldr	r3, [pc, #140]	; (8003b38 <vTaskDelete+0xc8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	4a22      	ldr	r2, [pc, #136]	; (8003b38 <vTaskDelete+0xc8>)
 8003ab0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003ab2:	4b20      	ldr	r3, [pc, #128]	; (8003b34 <vTaskDelete+0xc4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d10b      	bne.n	8003ad4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	481e      	ldr	r0, [pc, #120]	; (8003b3c <vTaskDelete+0xcc>)
 8003ac4:	f7fe fe23 	bl	800270e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003ac8:	4b1d      	ldr	r3, [pc, #116]	; (8003b40 <vTaskDelete+0xd0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	4a1c      	ldr	r2, [pc, #112]	; (8003b40 <vTaskDelete+0xd0>)
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	e009      	b.n	8003ae8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003ad4:	4b1b      	ldr	r3, [pc, #108]	; (8003b44 <vTaskDelete+0xd4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	4a1a      	ldr	r2, [pc, #104]	; (8003b44 <vTaskDelete+0xd4>)
 8003adc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fc7c 	bl	80043dc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003ae4:	f000 fcaa 	bl	800443c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003ae8:	f001 fb54 	bl	8005194 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <vTaskDelete+0xd8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d01b      	beq.n	8003b2c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8003af4:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <vTaskDelete+0xc4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d116      	bne.n	8003b2c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003afe:	4b13      	ldr	r3, [pc, #76]	; (8003b4c <vTaskDelete+0xdc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <vTaskDelete+0xac>
	__asm volatile
 8003b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b0a:	f383 8811 	msr	BASEPRI, r3
 8003b0e:	f3bf 8f6f 	isb	sy
 8003b12:	f3bf 8f4f 	dsb	sy
 8003b16:	60bb      	str	r3, [r7, #8]
}
 8003b18:	bf00      	nop
 8003b1a:	e7fe      	b.n	8003b1a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <vTaskDelete+0xe0>)
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b2c:	bf00      	nop
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	20000ce4 	.word	0x20000ce4
 8003b38:	200011d4 	.word	0x200011d4
 8003b3c:	2000118c 	.word	0x2000118c
 8003b40:	200011a0 	.word	0x200011a0
 8003b44:	200011b8 	.word	0x200011b8
 8003b48:	200011c4 	.word	0x200011c4
 8003b4c:	200011e0 	.word	0x200011e0
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d017      	beq.n	8003b96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <vTaskDelay+0x60>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <vTaskDelay+0x30>
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	60bb      	str	r3, [r7, #8]
}
 8003b80:	bf00      	nop
 8003b82:	e7fe      	b.n	8003b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b84:	f000 f880 	bl	8003c88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b88:	2100      	movs	r1, #0
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fe00 	bl	8004790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b90:	f000 f888 	bl	8003ca4 <xTaskResumeAll>
 8003b94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <vTaskDelay+0x64>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bac:	bf00      	nop
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200011e0 	.word	0x200011e0
 8003bb8:	e000ed04 	.word	0xe000ed04

08003bbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003bca:	463a      	mov	r2, r7
 8003bcc:	1d39      	adds	r1, r7, #4
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fd3a 	bl	800264c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003bd8:	6839      	ldr	r1, [r7, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	9202      	str	r2, [sp, #8]
 8003be0:	9301      	str	r3, [sp, #4]
 8003be2:	2300      	movs	r3, #0
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	460a      	mov	r2, r1
 8003bea:	4921      	ldr	r1, [pc, #132]	; (8003c70 <vTaskStartScheduler+0xb4>)
 8003bec:	4821      	ldr	r0, [pc, #132]	; (8003c74 <vTaskStartScheduler+0xb8>)
 8003bee:	f7ff fd9d 	bl	800372c <xTaskCreateStatic>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4a20      	ldr	r2, [pc, #128]	; (8003c78 <vTaskStartScheduler+0xbc>)
 8003bf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <vTaskStartScheduler+0xbc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c00:	2301      	movs	r3, #1
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e001      	b.n	8003c0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d102      	bne.n	8003c16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003c10:	f000 fe12 	bl	8004838 <xTimerCreateTimerTask>
 8003c14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d116      	bne.n	8003c4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	613b      	str	r3, [r7, #16]
}
 8003c2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <vTaskStartScheduler+0xc0>)
 8003c32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <vTaskStartScheduler+0xc4>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <vTaskStartScheduler+0xc8>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c44:	f001 f9d4 	bl	8004ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c48:	e00e      	b.n	8003c68 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c50:	d10a      	bne.n	8003c68 <vTaskStartScheduler+0xac>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60fb      	str	r3, [r7, #12]
}
 8003c64:	bf00      	nop
 8003c66:	e7fe      	b.n	8003c66 <vTaskStartScheduler+0xaa>
}
 8003c68:	bf00      	nop
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	0800d0d8 	.word	0x0800d0d8
 8003c74:	080042cd 	.word	0x080042cd
 8003c78:	200011dc 	.word	0x200011dc
 8003c7c:	200011d8 	.word	0x200011d8
 8003c80:	200011c4 	.word	0x200011c4
 8003c84:	200011bc 	.word	0x200011bc

08003c88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <vTaskSuspendAll+0x18>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	4a03      	ldr	r2, [pc, #12]	; (8003ca0 <vTaskSuspendAll+0x18>)
 8003c94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c96:	bf00      	nop
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	200011e0 	.word	0x200011e0

08003ca4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <xTaskResumeAll+0x118>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10a      	bne.n	8003cd0 <xTaskResumeAll+0x2c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	e7fe      	b.n	8003cce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cd0:	f001 fa30 	bl	8005134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <xTaskResumeAll+0x118>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	4a38      	ldr	r2, [pc, #224]	; (8003dbc <xTaskResumeAll+0x118>)
 8003cdc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cde:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <xTaskResumeAll+0x118>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d162      	bne.n	8003dac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ce6:	4b36      	ldr	r3, [pc, #216]	; (8003dc0 <xTaskResumeAll+0x11c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d05e      	beq.n	8003dac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cee:	e02f      	b.n	8003d50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <xTaskResumeAll+0x120>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fd63 	bl	80027c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fe fd5e 	bl	80027c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <xTaskResumeAll+0x124>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d903      	bls.n	8003d20 <xTaskResumeAll+0x7c>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1c:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <xTaskResumeAll+0x124>)
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	4613      	mov	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4413      	add	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <xTaskResumeAll+0x128>)
 8003d2e:	441a      	add	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe fce9 	bl	800270e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <xTaskResumeAll+0x12c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003d4a:	4b22      	ldr	r3, [pc, #136]	; (8003dd4 <xTaskResumeAll+0x130>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d50:	4b1c      	ldr	r3, [pc, #112]	; (8003dc4 <xTaskResumeAll+0x120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1cb      	bne.n	8003cf0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d5e:	f000 fb6d 	bl	800443c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <xTaskResumeAll+0x134>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d010      	beq.n	8003d90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d6e:	f000 f847 	bl	8003e00 <xTaskIncrementTick>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <xTaskResumeAll+0x130>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f1      	bne.n	8003d6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003d8a:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <xTaskResumeAll+0x134>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d90:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <xTaskResumeAll+0x130>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <xTaskResumeAll+0x138>)
 8003d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003dac:	f001 f9f2 	bl	8005194 <vPortExitCritical>

	return xAlreadyYielded;
 8003db0:	68bb      	ldr	r3, [r7, #8]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	200011e0 	.word	0x200011e0
 8003dc0:	200011b8 	.word	0x200011b8
 8003dc4:	20001178 	.word	0x20001178
 8003dc8:	200011c0 	.word	0x200011c0
 8003dcc:	20000ce8 	.word	0x20000ce8
 8003dd0:	20000ce4 	.word	0x20000ce4
 8003dd4:	200011cc 	.word	0x200011cc
 8003dd8:	200011c8 	.word	0x200011c8
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003de6:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <xTaskGetTickCount+0x1c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dec:	687b      	ldr	r3, [r7, #4]
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200011bc 	.word	0x200011bc

08003e00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e0a:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <xTaskIncrementTick+0x158>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 8095 	bne.w	8003f3e <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e14:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <xTaskIncrementTick+0x15c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e1c:	4a4f      	ldr	r2, [pc, #316]	; (8003f5c <xTaskIncrementTick+0x15c>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d120      	bne.n	8003e6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e28:	4b4d      	ldr	r3, [pc, #308]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	603b      	str	r3, [r7, #0]
}
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xTaskIncrementTick+0x46>
 8003e48:	4b45      	ldr	r3, [pc, #276]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	4b45      	ldr	r3, [pc, #276]	; (8003f64 <xTaskIncrementTick+0x164>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a43      	ldr	r2, [pc, #268]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	4a43      	ldr	r2, [pc, #268]	; (8003f64 <xTaskIncrementTick+0x164>)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6013      	str	r3, [r2, #0]
 8003e5c:	4b42      	ldr	r3, [pc, #264]	; (8003f68 <xTaskIncrementTick+0x168>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	4a41      	ldr	r2, [pc, #260]	; (8003f68 <xTaskIncrementTick+0x168>)
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	f000 fae9 	bl	800443c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e6a:	4b40      	ldr	r3, [pc, #256]	; (8003f6c <xTaskIncrementTick+0x16c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d349      	bcc.n	8003f08 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e74:	4b3a      	ldr	r3, [pc, #232]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e7e:	4b3b      	ldr	r3, [pc, #236]	; (8003f6c <xTaskIncrementTick+0x16c>)
 8003e80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e84:	601a      	str	r2, [r3, #0]
					break;
 8003e86:	e03f      	b.n	8003f08 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e88:	4b35      	ldr	r3, [pc, #212]	; (8003f60 <xTaskIncrementTick+0x160>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d203      	bcs.n	8003ea8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ea0:	4a32      	ldr	r2, [pc, #200]	; (8003f6c <xTaskIncrementTick+0x16c>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ea6:	e02f      	b.n	8003f08 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	3304      	adds	r3, #4
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fe fc8b 	bl	80027c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d004      	beq.n	8003ec4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fe fc82 	bl	80027c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec8:	4b29      	ldr	r3, [pc, #164]	; (8003f70 <xTaskIncrementTick+0x170>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d903      	bls.n	8003ed8 <xTaskIncrementTick+0xd8>
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <xTaskIncrementTick+0x170>)
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <xTaskIncrementTick+0x174>)
 8003ee6:	441a      	add	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4610      	mov	r0, r2
 8003ef0:	f7fe fc0d 	bl	800270e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <xTaskIncrementTick+0x178>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d3b8      	bcc.n	8003e74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f02:	2301      	movs	r3, #1
 8003f04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f06:	e7b5      	b.n	8003e74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f08:	4b1b      	ldr	r3, [pc, #108]	; (8003f78 <xTaskIncrementTick+0x178>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4919      	ldr	r1, [pc, #100]	; (8003f74 <xTaskIncrementTick+0x174>)
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d901      	bls.n	8003f24 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8003f24:	4b15      	ldr	r3, [pc, #84]	; (8003f7c <xTaskIncrementTick+0x17c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8003f2c:	f7fc fecc 	bl	8000cc8 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <xTaskIncrementTick+0x180>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d009      	beq.n	8003f4c <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	617b      	str	r3, [r7, #20]
 8003f3c:	e006      	b.n	8003f4c <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f3e:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <xTaskIncrementTick+0x17c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3301      	adds	r3, #1
 8003f44:	4a0d      	ldr	r2, [pc, #52]	; (8003f7c <xTaskIncrementTick+0x17c>)
 8003f46:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8003f48:	f7fc febe 	bl	8000cc8 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8003f4c:	697b      	ldr	r3, [r7, #20]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200011e0 	.word	0x200011e0
 8003f5c:	200011bc 	.word	0x200011bc
 8003f60:	20001170 	.word	0x20001170
 8003f64:	20001174 	.word	0x20001174
 8003f68:	200011d0 	.word	0x200011d0
 8003f6c:	200011d8 	.word	0x200011d8
 8003f70:	200011c0 	.word	0x200011c0
 8003f74:	20000ce8 	.word	0x20000ce8
 8003f78:	20000ce4 	.word	0x20000ce4
 8003f7c:	200011c8 	.word	0x200011c8
 8003f80:	200011cc 	.word	0x200011cc

08003f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <vTaskSwitchContext+0xc4>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <vTaskSwitchContext+0xc8>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f98:	e052      	b.n	8004040 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <vTaskSwitchContext+0xc8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <vTaskSwitchContext+0xcc>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <vTaskSwitchContext+0xcc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d808      	bhi.n	8003fc2 <vTaskSwitchContext+0x3e>
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <vTaskSwitchContext+0xcc>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b26      	ldr	r3, [pc, #152]	; (8004050 <vTaskSwitchContext+0xcc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3334      	adds	r3, #52	; 0x34
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f004 ff1b 	bl	8008df8 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <vTaskSwitchContext+0xd0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e010      	b.n	8003fec <vTaskSwitchContext+0x68>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10a      	bne.n	8003fe6 <vTaskSwitchContext+0x62>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	607b      	str	r3, [r7, #4]
}
 8003fe2:	bf00      	nop
 8003fe4:	e7fe      	b.n	8003fe4 <vTaskSwitchContext+0x60>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	491a      	ldr	r1, [pc, #104]	; (8004058 <vTaskSwitchContext+0xd4>)
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0e4      	beq.n	8003fca <vTaskSwitchContext+0x46>
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4a13      	ldr	r2, [pc, #76]	; (8004058 <vTaskSwitchContext+0xd4>)
 800400c:	4413      	add	r3, r2
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3308      	adds	r3, #8
 8004022:	429a      	cmp	r2, r3
 8004024:	d104      	bne.n	8004030 <vTaskSwitchContext+0xac>
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	4a06      	ldr	r2, [pc, #24]	; (8004050 <vTaskSwitchContext+0xcc>)
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	4a06      	ldr	r2, [pc, #24]	; (8004054 <vTaskSwitchContext+0xd0>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	200011e0 	.word	0x200011e0
 800404c:	200011cc 	.word	0x200011cc
 8004050:	20000ce4 	.word	0x20000ce4
 8004054:	200011c0 	.word	0x200011c0
 8004058:	20000ce8 	.word	0x20000ce8

0800405c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
}
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <vTaskPlaceOnEventList+0x44>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	3318      	adds	r3, #24
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fe fb63 	bl	8002756 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004090:	2101      	movs	r1, #1
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f000 fb7c 	bl	8004790 <prvAddCurrentTaskToDelayedList>
}
 8004098:	bf00      	nop
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	20000ce4 	.word	0x20000ce4

080040a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80040b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ba:	f383 8811 	msr	BASEPRI, r3
 80040be:	f3bf 8f6f 	isb	sy
 80040c2:	f3bf 8f4f 	dsb	sy
 80040c6:	617b      	str	r3, [r7, #20]
}
 80040c8:	bf00      	nop
 80040ca:	e7fe      	b.n	80040ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3318      	adds	r3, #24
 80040d2:	4619      	mov	r1, r3
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7fe fb1a 	bl	800270e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80040e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	68b8      	ldr	r0, [r7, #8]
 80040ea:	f000 fb51 	bl	8004790 <prvAddCurrentTaskToDelayedList>
	}
 80040ee:	bf00      	nop
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	20000ce4 	.word	0x20000ce4

080040fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	60fb      	str	r3, [r7, #12]
}
 8004124:	bf00      	nop
 8004126:	e7fe      	b.n	8004126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3318      	adds	r3, #24
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe fb4b 	bl	80027c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004132:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <xTaskRemoveFromEventList+0xb0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11d      	bne.n	8004176 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	3304      	adds	r3, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7fe fb42 	bl	80027c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <xTaskRemoveFromEventList+0xb4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d903      	bls.n	8004158 <xTaskRemoveFromEventList+0x5c>
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <xTaskRemoveFromEventList+0xb4>)
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <xTaskRemoveFromEventList+0xb8>)
 8004166:	441a      	add	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	3304      	adds	r3, #4
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f7fe facd 	bl	800270e <vListInsertEnd>
 8004174:	e005      	b.n	8004182 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	3318      	adds	r3, #24
 800417a:	4619      	mov	r1, r3
 800417c:	480e      	ldr	r0, [pc, #56]	; (80041b8 <xTaskRemoveFromEventList+0xbc>)
 800417e:	f7fe fac6 	bl	800270e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <xTaskRemoveFromEventList+0xc0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418c:	429a      	cmp	r2, r3
 800418e:	d905      	bls.n	800419c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004190:	2301      	movs	r3, #1
 8004192:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <xTaskRemoveFromEventList+0xc4>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e001      	b.n	80041a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80041a0:	697b      	ldr	r3, [r7, #20]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	200011e0 	.word	0x200011e0
 80041b0:	200011c0 	.word	0x200011c0
 80041b4:	20000ce8 	.word	0x20000ce8
 80041b8:	20001178 	.word	0x20001178
 80041bc:	20000ce4 	.word	0x20000ce4
 80041c0:	200011cc 	.word	0x200011cc

080041c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <vTaskInternalSetTimeOutState+0x24>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <vTaskInternalSetTimeOutState+0x28>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	605a      	str	r2, [r3, #4]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	200011d0 	.word	0x200011d0
 80041ec:	200011bc 	.word	0x200011bc

080041f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	613b      	str	r3, [r7, #16]
}
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	60fb      	str	r3, [r7, #12]
}
 800422e:	bf00      	nop
 8004230:	e7fe      	b.n	8004230 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004232:	f000 ff7f 	bl	8005134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <xTaskCheckForTimeOut+0xbc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800424e:	d102      	bne.n	8004256 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004250:	2300      	movs	r3, #0
 8004252:	61fb      	str	r3, [r7, #28]
 8004254:	e023      	b.n	800429e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b15      	ldr	r3, [pc, #84]	; (80042b0 <xTaskCheckForTimeOut+0xc0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d007      	beq.n	8004272 <xTaskCheckForTimeOut+0x82>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e015      	b.n	800429e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	429a      	cmp	r2, r3
 800427a:	d20b      	bcs.n	8004294 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff ff9b 	bl	80041c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800428e:	2300      	movs	r3, #0
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	e004      	b.n	800429e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800429a:	2301      	movs	r3, #1
 800429c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800429e:	f000 ff79 	bl	8005194 <vPortExitCritical>

	return xReturn;
 80042a2:	69fb      	ldr	r3, [r7, #28]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	200011bc 	.word	0x200011bc
 80042b0:	200011d0 	.word	0x200011d0

080042b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <vTaskMissedYield+0x14>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	200011cc 	.word	0x200011cc

080042cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042d4:	f000 f854 	bl	8004380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042d8:	4b07      	ldr	r3, [pc, #28]	; (80042f8 <prvIdleTask+0x2c>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d907      	bls.n	80042f0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80042e0:	4b06      	ldr	r3, [pc, #24]	; (80042fc <prvIdleTask+0x30>)
 80042e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	f3bf 8f4f 	dsb	sy
 80042ec:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80042f0:	f004 fd7a 	bl	8008de8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80042f4:	e7ee      	b.n	80042d4 <prvIdleTask+0x8>
 80042f6:	bf00      	nop
 80042f8:	20000ce8 	.word	0x20000ce8
 80042fc:	e000ed04 	.word	0xe000ed04

08004300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
 800430a:	e00c      	b.n	8004326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <prvInitialiseTaskLists+0x60>)
 8004318:	4413      	add	r3, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f7fe f9ca 	bl	80026b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3301      	adds	r3, #1
 8004324:	607b      	str	r3, [r7, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b37      	cmp	r3, #55	; 0x37
 800432a:	d9ef      	bls.n	800430c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800432c:	480d      	ldr	r0, [pc, #52]	; (8004364 <prvInitialiseTaskLists+0x64>)
 800432e:	f7fe f9c1 	bl	80026b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004332:	480d      	ldr	r0, [pc, #52]	; (8004368 <prvInitialiseTaskLists+0x68>)
 8004334:	f7fe f9be 	bl	80026b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004338:	480c      	ldr	r0, [pc, #48]	; (800436c <prvInitialiseTaskLists+0x6c>)
 800433a:	f7fe f9bb 	bl	80026b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800433e:	480c      	ldr	r0, [pc, #48]	; (8004370 <prvInitialiseTaskLists+0x70>)
 8004340:	f7fe f9b8 	bl	80026b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004344:	480b      	ldr	r0, [pc, #44]	; (8004374 <prvInitialiseTaskLists+0x74>)
 8004346:	f7fe f9b5 	bl	80026b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800434a:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <prvInitialiseTaskLists+0x78>)
 800434c:	4a05      	ldr	r2, [pc, #20]	; (8004364 <prvInitialiseTaskLists+0x64>)
 800434e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <prvInitialiseTaskLists+0x7c>)
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <prvInitialiseTaskLists+0x68>)
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000ce8 	.word	0x20000ce8
 8004364:	20001148 	.word	0x20001148
 8004368:	2000115c 	.word	0x2000115c
 800436c:	20001178 	.word	0x20001178
 8004370:	2000118c 	.word	0x2000118c
 8004374:	200011a4 	.word	0x200011a4
 8004378:	20001170 	.word	0x20001170
 800437c:	20001174 	.word	0x20001174

08004380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004386:	e019      	b.n	80043bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004388:	f000 fed4 	bl	8005134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800438c:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <prvCheckTasksWaitingTermination+0x50>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3304      	adds	r3, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f7fe fa15 	bl	80027c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <prvCheckTasksWaitingTermination+0x54>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	4a0b      	ldr	r2, [pc, #44]	; (80043d4 <prvCheckTasksWaitingTermination+0x54>)
 80043a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043a8:	4b0b      	ldr	r3, [pc, #44]	; (80043d8 <prvCheckTasksWaitingTermination+0x58>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <prvCheckTasksWaitingTermination+0x58>)
 80043b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043b2:	f000 feef 	bl	8005194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 f810 	bl	80043dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043bc:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <prvCheckTasksWaitingTermination+0x58>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e1      	bne.n	8004388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	2000118c 	.word	0x2000118c
 80043d4:	200011b8 	.word	0x200011b8
 80043d8:	200011a0 	.word	0x200011a0

080043dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d108      	bne.n	8004400 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 f890 	bl	8005518 <vPortFree>
				vPortFree( pxTCB );
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 f88d 	bl	8005518 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043fe:	e018      	b.n	8004432 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004406:	2b01      	cmp	r3, #1
 8004408:	d103      	bne.n	8004412 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f001 f884 	bl	8005518 <vPortFree>
	}
 8004410:	e00f      	b.n	8004432 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004418:	2b02      	cmp	r3, #2
 800441a:	d00a      	beq.n	8004432 <prvDeleteTCB+0x56>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <prvDeleteTCB+0x54>
	}
 8004432:	bf00      	nop
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004442:	4b0c      	ldr	r3, [pc, #48]	; (8004474 <prvResetNextTaskUnblockTime+0x38>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <prvResetNextTaskUnblockTime+0x3c>)
 800444e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004452:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004454:	e008      	b.n	8004468 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <prvResetNextTaskUnblockTime+0x38>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <prvResetNextTaskUnblockTime+0x3c>)
 8004466:	6013      	str	r3, [r2, #0]
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr
 8004474:	20001170 	.word	0x20001170
 8004478:	200011d8 	.word	0x200011d8

0800447c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004482:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <xTaskGetSchedulerState+0x34>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800448a:	2301      	movs	r3, #1
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e008      	b.n	80044a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004490:	4b08      	ldr	r3, [pc, #32]	; (80044b4 <xTaskGetSchedulerState+0x38>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d102      	bne.n	800449e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004498:	2302      	movs	r3, #2
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	e001      	b.n	80044a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800449e:	2300      	movs	r3, #0
 80044a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80044a2:	687b      	ldr	r3, [r7, #4]
	}
 80044a4:	4618      	mov	r0, r3
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	200011c4 	.word	0x200011c4
 80044b4:	200011e0 	.word	0x200011e0

080044b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d051      	beq.n	8004572 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	4b2a      	ldr	r3, [pc, #168]	; (800457c <xTaskPriorityInherit+0xc4>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d241      	bcs.n	8004560 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	db06      	blt.n	80044f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e4:	4b25      	ldr	r3, [pc, #148]	; (800457c <xTaskPriorityInherit+0xc4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	6959      	ldr	r1, [r3, #20]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <xTaskPriorityInherit+0xc8>)
 8004504:	4413      	add	r3, r2
 8004506:	4299      	cmp	r1, r3
 8004508:	d122      	bne.n	8004550 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	3304      	adds	r3, #4
 800450e:	4618      	mov	r0, r3
 8004510:	f7fe f95a 	bl	80027c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <xTaskPriorityInherit+0xc4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <xTaskPriorityInherit+0xcc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	429a      	cmp	r2, r3
 8004528:	d903      	bls.n	8004532 <xTaskPriorityInherit+0x7a>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	4a15      	ldr	r2, [pc, #84]	; (8004584 <xTaskPriorityInherit+0xcc>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004536:	4613      	mov	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <xTaskPriorityInherit+0xc8>)
 8004540:	441a      	add	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	3304      	adds	r3, #4
 8004546:	4619      	mov	r1, r3
 8004548:	4610      	mov	r0, r2
 800454a:	f7fe f8e0 	bl	800270e <vListInsertEnd>
 800454e:	e004      	b.n	800455a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <xTaskPriorityInherit+0xc4>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800455a:	2301      	movs	r3, #1
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	e008      	b.n	8004572 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004564:	4b05      	ldr	r3, [pc, #20]	; (800457c <xTaskPriorityInherit+0xc4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	429a      	cmp	r2, r3
 800456c:	d201      	bcs.n	8004572 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800456e:	2301      	movs	r3, #1
 8004570:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004572:	68fb      	ldr	r3, [r7, #12]
	}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000ce4 	.word	0x20000ce4
 8004580:	20000ce8 	.word	0x20000ce8
 8004584:	200011c0 	.word	0x200011c0

08004588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d056      	beq.n	800464c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800459e:	4b2e      	ldr	r3, [pc, #184]	; (8004658 <xTaskPriorityDisinherit+0xd0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d00a      	beq.n	80045be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60bb      	str	r3, [r7, #8]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d02c      	beq.n	800464c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d128      	bne.n	800464c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe f8e2 	bl	80027c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTaskPriorityDisinherit+0xd4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d903      	bls.n	800462c <xTaskPriorityDisinherit+0xa4>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a0c      	ldr	r2, [pc, #48]	; (800465c <xTaskPriorityDisinherit+0xd4>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a09      	ldr	r2, [pc, #36]	; (8004660 <xTaskPriorityDisinherit+0xd8>)
 800463a:	441a      	add	r2, r3
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7fe f863 	bl	800270e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800464c:	697b      	ldr	r3, [r7, #20]
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000ce4 	.word	0x20000ce4
 800465c:	200011c0 	.word	0x200011c0
 8004660:	20000ce8 	.word	0x20000ce8

08004664 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004672:	2301      	movs	r3, #1
 8004674:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d06a      	beq.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10a      	bne.n	800469a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8004684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004688:	f383 8811 	msr	BASEPRI, r3
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	60fb      	str	r3, [r7, #12]
}
 8004696:	bf00      	nop
 8004698:	e7fe      	b.n	8004698 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d902      	bls.n	80046aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	e002      	b.n	80046b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d04b      	beq.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d146      	bne.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046c4:	4b25      	ldr	r3, [pc, #148]	; (800475c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d10a      	bne.n	80046e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	60bb      	str	r3, [r7, #8]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	69fa      	ldr	r2, [r7, #28]
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	db04      	blt.n	8004702 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	6959      	ldr	r1, [r3, #20]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4a13      	ldr	r2, [pc, #76]	; (8004760 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004712:	4413      	add	r3, r2
 8004714:	4299      	cmp	r1, r3
 8004716:	d11c      	bne.n	8004752 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe f853 	bl	80027c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d903      	bls.n	8004736 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	4a0c      	ldr	r2, [pc, #48]	; (8004764 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a07      	ldr	r2, [pc, #28]	; (8004760 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004744:	441a      	add	r2, r3
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fd ffde 	bl	800270e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004752:	bf00      	nop
 8004754:	3720      	adds	r7, #32
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	20000ce4 	.word	0x20000ce4
 8004760:	20000ce8 	.word	0x20000ce8
 8004764:	200011c0 	.word	0x200011c0

08004768 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800476c:	4b07      	ldr	r3, [pc, #28]	; (800478c <pvTaskIncrementMutexHeldCount+0x24>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <pvTaskIncrementMutexHeldCount+0x24>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800477a:	3201      	adds	r2, #1
 800477c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800477e:	4b03      	ldr	r3, [pc, #12]	; (800478c <pvTaskIncrementMutexHeldCount+0x24>)
 8004780:	681b      	ldr	r3, [r3, #0]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	20000ce4 	.word	0x20000ce4

08004790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800479a:	4b21      	ldr	r3, [pc, #132]	; (8004820 <prvAddCurrentTaskToDelayedList+0x90>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a0:	4b20      	ldr	r3, [pc, #128]	; (8004824 <prvAddCurrentTaskToDelayedList+0x94>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe f80e 	bl	80027c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b2:	d10a      	bne.n	80047ca <prvAddCurrentTaskToDelayedList+0x3a>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <prvAddCurrentTaskToDelayedList+0x94>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4819      	ldr	r0, [pc, #100]	; (8004828 <prvAddCurrentTaskToDelayedList+0x98>)
 80047c4:	f7fd ffa3 	bl	800270e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047c8:	e026      	b.n	8004818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4413      	add	r3, r2
 80047d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047d2:	4b14      	ldr	r3, [pc, #80]	; (8004824 <prvAddCurrentTaskToDelayedList+0x94>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d209      	bcs.n	80047f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047e2:	4b12      	ldr	r3, [pc, #72]	; (800482c <prvAddCurrentTaskToDelayedList+0x9c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fd ffb1 	bl	8002756 <vListInsert>
}
 80047f4:	e010      	b.n	8004818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047f6:	4b0e      	ldr	r3, [pc, #56]	; (8004830 <prvAddCurrentTaskToDelayedList+0xa0>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <prvAddCurrentTaskToDelayedList+0x94>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fd ffa7 	bl	8002756 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	d202      	bcs.n	8004818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	6013      	str	r3, [r2, #0]
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	200011bc 	.word	0x200011bc
 8004824:	20000ce4 	.word	0x20000ce4
 8004828:	200011a4 	.word	0x200011a4
 800482c:	20001174 	.word	0x20001174
 8004830:	20001170 	.word	0x20001170
 8004834:	200011d8 	.word	0x200011d8

08004838 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004842:	f000 fb07 	bl	8004e54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <xTimerCreateTimerTask+0x80>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d021      	beq.n	8004892 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004856:	1d3a      	adds	r2, r7, #4
 8004858:	f107 0108 	add.w	r1, r7, #8
 800485c:	f107 030c 	add.w	r3, r7, #12
 8004860:	4618      	mov	r0, r3
 8004862:	f7fd ff0d 	bl	8002680 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	9202      	str	r2, [sp, #8]
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	2302      	movs	r3, #2
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2300      	movs	r3, #0
 8004876:	460a      	mov	r2, r1
 8004878:	4910      	ldr	r1, [pc, #64]	; (80048bc <xTimerCreateTimerTask+0x84>)
 800487a:	4811      	ldr	r0, [pc, #68]	; (80048c0 <xTimerCreateTimerTask+0x88>)
 800487c:	f7fe ff56 	bl	800372c <xTaskCreateStatic>
 8004880:	4603      	mov	r3, r0
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <xTimerCreateTimerTask+0x8c>)
 8004884:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <xTimerCreateTimerTask+0x8c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800488e:	2301      	movs	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	613b      	str	r3, [r7, #16]
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20001214 	.word	0x20001214
 80048bc:	0800d0e0 	.word	0x0800d0e0
 80048c0:	080049fd 	.word	0x080049fd
 80048c4:	20001218 	.word	0x20001218

080048c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	; 0x28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	623b      	str	r3, [r7, #32]
}
 80048f2:	bf00      	nop
 80048f4:	e7fe      	b.n	80048f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048f6:	4b1a      	ldr	r3, [pc, #104]	; (8004960 <xTimerGenericCommand+0x98>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d02a      	beq.n	8004954 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b05      	cmp	r3, #5
 800490e:	dc18      	bgt.n	8004942 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004910:	f7ff fdb4 	bl	800447c <xTaskGetSchedulerState>
 8004914:	4603      	mov	r3, r0
 8004916:	2b02      	cmp	r3, #2
 8004918:	d109      	bne.n	800492e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800491a:	4b11      	ldr	r3, [pc, #68]	; (8004960 <xTimerGenericCommand+0x98>)
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	f107 0110 	add.w	r1, r7, #16
 8004922:	2300      	movs	r3, #0
 8004924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004926:	f7fe f8e9 	bl	8002afc <xQueueGenericSend>
 800492a:	6278      	str	r0, [r7, #36]	; 0x24
 800492c:	e012      	b.n	8004954 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800492e:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <xTimerGenericCommand+0x98>)
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	f107 0110 	add.w	r1, r7, #16
 8004936:	2300      	movs	r3, #0
 8004938:	2200      	movs	r2, #0
 800493a:	f7fe f8df 	bl	8002afc <xQueueGenericSend>
 800493e:	6278      	str	r0, [r7, #36]	; 0x24
 8004940:	e008      	b.n	8004954 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004942:	4b07      	ldr	r3, [pc, #28]	; (8004960 <xTimerGenericCommand+0x98>)
 8004944:	6818      	ldr	r0, [r3, #0]
 8004946:	f107 0110 	add.w	r1, r7, #16
 800494a:	2300      	movs	r3, #0
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	f7fe f9d3 	bl	8002cf8 <xQueueGenericSendFromISR>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004956:	4618      	mov	r0, r3
 8004958:	3728      	adds	r7, #40	; 0x28
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20001214 	.word	0x20001214

08004964 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af02      	add	r7, sp, #8
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800496e:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <prvProcessExpiredTimer+0x94>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fd ff23 	bl	80027c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d022      	beq.n	80049d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	18d1      	adds	r1, r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	683a      	ldr	r2, [r7, #0]
 800499c:	6978      	ldr	r0, [r7, #20]
 800499e:	f000 f8d1 	bl	8004b44 <prvInsertTimerInActiveList>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d01f      	beq.n	80049e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049a8:	2300      	movs	r3, #0
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	2100      	movs	r1, #0
 80049b2:	6978      	ldr	r0, [r7, #20]
 80049b4:	f7ff ff88 	bl	80048c8 <xTimerGenericCommand>
 80049b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	60fb      	str	r3, [r7, #12]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	6978      	ldr	r0, [r7, #20]
 80049ee:	4798      	blx	r3
}
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	2000120c 	.word	0x2000120c

080049fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f857 	bl	8004abc <prvGetNextExpireTime>
 8004a0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4619      	mov	r1, r3
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 f803 	bl	8004a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a1a:	f000 f8d5 	bl	8004bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a1e:	e7f1      	b.n	8004a04 <prvTimerTask+0x8>

08004a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a2a:	f7ff f92d 	bl	8003c88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a2e:	f107 0308 	add.w	r3, r7, #8
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f866 	bl	8004b04 <prvSampleTimeNow>
 8004a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d130      	bne.n	8004aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <prvProcessTimerOrBlockTask+0x3c>
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d806      	bhi.n	8004a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a4e:	f7ff f929 	bl	8003ca4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff85 	bl	8004964 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a5a:	e024      	b.n	8004aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d008      	beq.n	8004a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <prvProcessTimerOrBlockTask+0x90>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <prvProcessTimerOrBlockTask+0x50>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <prvProcessTimerOrBlockTask+0x52>
 8004a70:	2300      	movs	r3, #0
 8004a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <prvProcessTimerOrBlockTask+0x94>)
 8004a76:	6818      	ldr	r0, [r3, #0]
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	f7fe fe1f 	bl	80036c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a86:	f7ff f90d 	bl	8003ca4 <xTaskResumeAll>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <prvProcessTimerOrBlockTask+0x98>)
 8004a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	f3bf 8f6f 	isb	sy
}
 8004aa0:	e001      	b.n	8004aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004aa2:	f7ff f8ff 	bl	8003ca4 <xTaskResumeAll>
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20001210 	.word	0x20001210
 8004ab4:	20001214 	.word	0x20001214
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ac4:	4b0e      	ldr	r3, [pc, #56]	; (8004b00 <prvGetNextExpireTime+0x44>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <prvGetNextExpireTime+0x16>
 8004ace:	2201      	movs	r2, #1
 8004ad0:	e000      	b.n	8004ad4 <prvGetNextExpireTime+0x18>
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d105      	bne.n	8004aec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <prvGetNextExpireTime+0x44>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e001      	b.n	8004af0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	2000120c 	.word	0x2000120c

08004b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b0c:	f7ff f968 	bl	8003de0 <xTaskGetTickCount>
 8004b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <prvSampleTimeNow+0x3c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d205      	bcs.n	8004b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b1c:	f000 f936 	bl	8004d8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b2e:	4a04      	ldr	r2, [pc, #16]	; (8004b40 <prvSampleTimeNow+0x3c>)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000121c 	.word	0x2000121c

08004b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	68ba      	ldr	r2, [r7, #8]
 8004b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d812      	bhi.n	8004b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d302      	bcc.n	8004b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
 8004b7c:	e01b      	b.n	8004bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b7e:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <prvInsertTimerInActiveList+0x7c>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	4610      	mov	r0, r2
 8004b8a:	f7fd fde4 	bl	8002756 <vListInsert>
 8004b8e:	e012      	b.n	8004bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d206      	bcs.n	8004ba6 <prvInsertTimerInActiveList+0x62>
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d302      	bcc.n	8004ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e007      	b.n	8004bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ba6:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <prvInsertTimerInActiveList+0x80>)
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3304      	adds	r3, #4
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4610      	mov	r0, r2
 8004bb2:	f7fd fdd0 	bl	8002756 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bb6:	697b      	ldr	r3, [r7, #20]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20001210 	.word	0x20001210
 8004bc4:	2000120c 	.word	0x2000120c

08004bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08e      	sub	sp, #56	; 0x38
 8004bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bce:	e0ca      	b.n	8004d66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da18      	bge.n	8004c08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bd6:	1d3b      	adds	r3, r7, #4
 8004bd8:	3304      	adds	r3, #4
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	61fb      	str	r3, [r7, #28]
}
 8004bf4:	bf00      	nop
 8004bf6:	e7fe      	b.n	8004bf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfe:	6850      	ldr	r0, [r2, #4]
 8004c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c02:	6892      	ldr	r2, [r2, #8]
 8004c04:	4611      	mov	r1, r2
 8004c06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f2c0 80aa 	blt.w	8004d64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	3304      	adds	r3, #4
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fd fdd1 	bl	80027c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c26:	463b      	mov	r3, r7
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff6b 	bl	8004b04 <prvSampleTimeNow>
 8004c2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	f200 8097 	bhi.w	8004d66 <prvProcessReceivedCommands+0x19e>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <prvProcessReceivedCommands+0x78>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c69 	.word	0x08004c69
 8004c48:	08004c69 	.word	0x08004c69
 8004c4c:	08004cdd 	.word	0x08004cdd
 8004c50:	08004cf1 	.word	0x08004cf1
 8004c54:	08004d3b 	.word	0x08004d3b
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c69 	.word	0x08004c69
 8004c60:	08004cdd 	.word	0x08004cdd
 8004c64:	08004cf1 	.word	0x08004cf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	18d1      	adds	r1, r2, r3
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c88:	f7ff ff5c 	bl	8004b44 <prvInsertTimerInActiveList>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d069      	beq.n	8004d66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05e      	beq.n	8004d66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	441a      	add	r2, r3
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cba:	f7ff fe05 	bl	80048c8 <xTimerGenericCommand>
 8004cbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d14f      	bne.n	8004d66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cca:	f383 8811 	msr	BASEPRI, r3
 8004cce:	f3bf 8f6f 	isb	sy
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	61bb      	str	r3, [r7, #24]
}
 8004cd8:	bf00      	nop
 8004cda:	e7fe      	b.n	8004cda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004cee:	e03a      	b.n	8004d66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d02:	68ba      	ldr	r2, [r7, #8]
 8004d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	617b      	str	r3, [r7, #20]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	18d1      	adds	r1, r2, r3
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d34:	f7ff ff06 	bl	8004b44 <prvInsertTimerInActiveList>
					break;
 8004d38:	e015      	b.n	8004d66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d4a:	f000 fbe5 	bl	8005518 <vPortFree>
 8004d4e:	e00a      	b.n	8004d66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d62:	e000      	b.n	8004d66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d66:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <prvProcessReceivedCommands+0x1c0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	1d39      	adds	r1, r7, #4
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe f8ea 	bl	8002f48 <xQueueReceive>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	f47f af2a 	bne.w	8004bd0 <prvProcessReceivedCommands+0x8>
	}
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3730      	adds	r7, #48	; 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20001214 	.word	0x20001214

08004d8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d92:	e048      	b.n	8004e26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d94:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <prvSwitchTimerLists+0xc0>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9e:	4b2b      	ldr	r3, [pc, #172]	; (8004e4c <prvSwitchTimerLists+0xc0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fd fd0b 	bl	80027c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d02e      	beq.n	8004e26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d90e      	bls.n	8004df8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004de6:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <prvSwitchTimerLists+0xc0>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fd fcb0 	bl	8002756 <vListInsert>
 8004df6:	e016      	b.n	8004e26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	2100      	movs	r1, #0
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f7ff fd60 	bl	80048c8 <xTimerGenericCommand>
 8004e08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	603b      	str	r3, [r7, #0]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e26:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <prvSwitchTimerLists+0xc0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1b1      	bne.n	8004d94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <prvSwitchTimerLists+0xc0>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <prvSwitchTimerLists+0xc4>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <prvSwitchTimerLists+0xc0>)
 8004e3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e3e:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <prvSwitchTimerLists+0xc4>)
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	6013      	str	r3, [r2, #0]
}
 8004e44:	bf00      	nop
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	2000120c 	.word	0x2000120c
 8004e50:	20001210 	.word	0x20001210

08004e54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e5a:	f000 f96b 	bl	8005134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e5e:	4b15      	ldr	r3, [pc, #84]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d120      	bne.n	8004ea8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e66:	4814      	ldr	r0, [pc, #80]	; (8004eb8 <prvCheckForValidListAndQueue+0x64>)
 8004e68:	f7fd fc24 	bl	80026b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e6c:	4813      	ldr	r0, [pc, #76]	; (8004ebc <prvCheckForValidListAndQueue+0x68>)
 8004e6e:	f7fd fc21 	bl	80026b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e72:	4b13      	ldr	r3, [pc, #76]	; (8004ec0 <prvCheckForValidListAndQueue+0x6c>)
 8004e74:	4a10      	ldr	r2, [pc, #64]	; (8004eb8 <prvCheckForValidListAndQueue+0x64>)
 8004e76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e78:	4b12      	ldr	r3, [pc, #72]	; (8004ec4 <prvCheckForValidListAndQueue+0x70>)
 8004e7a:	4a10      	ldr	r2, [pc, #64]	; (8004ebc <prvCheckForValidListAndQueue+0x68>)
 8004e7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e7e:	2300      	movs	r3, #0
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	4b11      	ldr	r3, [pc, #68]	; (8004ec8 <prvCheckForValidListAndQueue+0x74>)
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <prvCheckForValidListAndQueue+0x78>)
 8004e86:	2110      	movs	r1, #16
 8004e88:	200a      	movs	r0, #10
 8004e8a:	f7fd fd2f 	bl	80028ec <xQueueGenericCreateStatic>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4a08      	ldr	r2, [pc, #32]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e94:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e9c:	4b05      	ldr	r3, [pc, #20]	; (8004eb4 <prvCheckForValidListAndQueue+0x60>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	490b      	ldr	r1, [pc, #44]	; (8004ed0 <prvCheckForValidListAndQueue+0x7c>)
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fbe4 	bl	8003670 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ea8:	f000 f974 	bl	8005194 <vPortExitCritical>
}
 8004eac:	bf00      	nop
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20001214 	.word	0x20001214
 8004eb8:	200011e4 	.word	0x200011e4
 8004ebc:	200011f8 	.word	0x200011f8
 8004ec0:	2000120c 	.word	0x2000120c
 8004ec4:	20001210 	.word	0x20001210
 8004ec8:	200012c0 	.word	0x200012c0
 8004ecc:	20001220 	.word	0x20001220
 8004ed0:	0800d0e8 	.word	0x0800d0e8

08004ed4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f023 0201 	bic.w	r2, r3, #1
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	3b04      	subs	r3, #4
 8004f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f04:	4a0c      	ldr	r2, [pc, #48]	; (8004f38 <pxPortInitialiseStack+0x64>)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	3b14      	subs	r3, #20
 8004f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f06f 0202 	mvn.w	r2, #2
 8004f22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3b20      	subs	r3, #32
 8004f28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	08004f3d 	.word	0x08004f3d

08004f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f42:	2300      	movs	r3, #0
 8004f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <prvTaskExitError+0x54>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4e:	d00a      	beq.n	8004f66 <prvTaskExitError+0x2a>
	__asm volatile
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	f383 8811 	msr	BASEPRI, r3
 8004f58:	f3bf 8f6f 	isb	sy
 8004f5c:	f3bf 8f4f 	dsb	sy
 8004f60:	60fb      	str	r3, [r7, #12]
}
 8004f62:	bf00      	nop
 8004f64:	e7fe      	b.n	8004f64 <prvTaskExitError+0x28>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60bb      	str	r3, [r7, #8]
}
 8004f78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f7a:	bf00      	nop
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0fc      	beq.n	8004f7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	20000010 	.word	0x20000010
	...

08004fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	4770      	bx	lr
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst2>:
 8004fc0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fc8:	4808      	ldr	r0, [pc, #32]	; (8004fec <prvPortStartFirstTask+0x24>)
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f380 8808 	msr	MSP, r0
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8814 	msr	CONTROL, r0
 8004fda:	b662      	cpsie	i
 8004fdc:	b661      	cpsie	f
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	df00      	svc	0
 8004fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fea:	bf00      	nop
 8004fec:	e000ed08 	.word	0xe000ed08

08004ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ff6:	4b46      	ldr	r3, [pc, #280]	; (8005110 <xPortStartScheduler+0x120>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a46      	ldr	r2, [pc, #280]	; (8005114 <xPortStartScheduler+0x124>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10a      	bne.n	8005016 <xPortStartScheduler+0x26>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	613b      	str	r3, [r7, #16]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005016:	4b3e      	ldr	r3, [pc, #248]	; (8005110 <xPortStartScheduler+0x120>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a3f      	ldr	r2, [pc, #252]	; (8005118 <xPortStartScheduler+0x128>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10a      	bne.n	8005036 <xPortStartScheduler+0x46>
	__asm volatile
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	60fb      	str	r3, [r7, #12]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005036:	4b39      	ldr	r3, [pc, #228]	; (800511c <xPortStartScheduler+0x12c>)
 8005038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	22ff      	movs	r2, #255	; 0xff
 8005046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b2db      	uxtb	r3, r3
 800504e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005050:	78fb      	ldrb	r3, [r7, #3]
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005058:	b2da      	uxtb	r2, r3
 800505a:	4b31      	ldr	r3, [pc, #196]	; (8005120 <xPortStartScheduler+0x130>)
 800505c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <xPortStartScheduler+0x134>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005064:	e009      	b.n	800507a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <xPortStartScheduler+0x134>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <xPortStartScheduler+0x134>)
 800506e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	b2db      	uxtb	r3, r3
 8005078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507a:	78fb      	ldrb	r3, [r7, #3]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005082:	2b80      	cmp	r3, #128	; 0x80
 8005084:	d0ef      	beq.n	8005066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <xPortStartScheduler+0x134>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f1c3 0307 	rsb	r3, r3, #7
 800508e:	2b04      	cmp	r3, #4
 8005090:	d00a      	beq.n	80050a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	60bb      	str	r3, [r7, #8]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <xPortStartScheduler+0x134>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <xPortStartScheduler+0x134>)
 80050b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050b2:	4b1c      	ldr	r3, [pc, #112]	; (8005124 <xPortStartScheduler+0x134>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050ba:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <xPortStartScheduler+0x134>)
 80050bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050c6:	4b18      	ldr	r3, [pc, #96]	; (8005128 <xPortStartScheduler+0x138>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <xPortStartScheduler+0x138>)
 80050cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050d2:	4b15      	ldr	r3, [pc, #84]	; (8005128 <xPortStartScheduler+0x138>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a14      	ldr	r2, [pc, #80]	; (8005128 <xPortStartScheduler+0x138>)
 80050d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050de:	f000 f8dd 	bl	800529c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <xPortStartScheduler+0x13c>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050e8:	f000 f8fc 	bl	80052e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050ec:	4b10      	ldr	r3, [pc, #64]	; (8005130 <xPortStartScheduler+0x140>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0f      	ldr	r2, [pc, #60]	; (8005130 <xPortStartScheduler+0x140>)
 80050f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80050f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050f8:	f7ff ff66 	bl	8004fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050fc:	f7fe ff42 	bl	8003f84 <vTaskSwitchContext>
	prvTaskExitError();
 8005100:	f7ff ff1c 	bl	8004f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	e000ed00 	.word	0xe000ed00
 8005114:	410fc271 	.word	0x410fc271
 8005118:	410fc270 	.word	0x410fc270
 800511c:	e000e400 	.word	0xe000e400
 8005120:	20001310 	.word	0x20001310
 8005124:	20001314 	.word	0x20001314
 8005128:	e000ed20 	.word	0xe000ed20
 800512c:	20000010 	.word	0x20000010
 8005130:	e000ef34 	.word	0xe000ef34

08005134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
}
 800514c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <vPortEnterCritical+0x58>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3301      	adds	r3, #1
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <vPortEnterCritical+0x58>)
 8005156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <vPortEnterCritical+0x58>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10f      	bne.n	8005180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005160:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <vPortEnterCritical+0x5c>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00a      	beq.n	8005180 <vPortEnterCritical+0x4c>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	603b      	str	r3, [r7, #0]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vPortEnterCritical+0x4a>
	}
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000010 	.word	0x20000010
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800519a:	4b12      	ldr	r3, [pc, #72]	; (80051e4 <vPortExitCritical+0x50>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <vPortExitCritical+0x24>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	607b      	str	r3, [r7, #4]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	; (80051e4 <vPortExitCritical+0x50>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	4a09      	ldr	r2, [pc, #36]	; (80051e4 <vPortExitCritical+0x50>)
 80051c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051c2:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <vPortExitCritical+0x50>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d105      	bne.n	80051d6 <vPortExitCritical+0x42>
 80051ca:	2300      	movs	r3, #0
 80051cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	f383 8811 	msr	BASEPRI, r3
}
 80051d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000010 	.word	0x20000010
	...

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b15      	ldr	r3, [pc, #84]	; (8005250 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f01e 0f10 	tst.w	lr, #16
 8005200:	bf08      	it	eq
 8005202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005214:	f380 8811 	msr	BASEPRI, r0
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f7fe feb0 	bl	8003f84 <vTaskSwitchContext>
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f380 8811 	msr	BASEPRI, r0
 800522c:	bc09      	pop	{r0, r3}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	f01e 0f10 	tst.w	lr, #16
 800523a:	bf08      	it	eq
 800523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005240:	f380 8809 	msr	PSP, r0
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst>:
 8005250:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005272:	f7fe fdc5 	bl	8003e00 <xTaskIncrementTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <xPortSysTickHandler+0x40>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f383 8811 	msr	BASEPRI, r3
}
 800528e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <vPortSetupTimerInterrupt+0x38>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <vPortSetupTimerInterrupt+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	; (80052dc <vPortSetupTimerInterrupt+0x40>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <vPortSetupTimerInterrupt+0x44>)
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052be:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010
 80052d4:	e000e018 	.word	0xe000e018
 80052d8:	20000008 	.word	0x20000008
 80052dc:	10624dd3 	.word	0x10624dd3
 80052e0:	e000e014 	.word	0xe000e014

080052e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80052f4 <vPortEnableVFP+0x10>
 80052e8:	6801      	ldr	r1, [r0, #0]
 80052ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052ee:	6001      	str	r1, [r0, #0]
 80052f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052f2:	bf00      	nop
 80052f4:	e000ed88 	.word	0xe000ed88

080052f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80052fe:	f3ef 8305 	mrs	r3, IPSR
 8005302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b0f      	cmp	r3, #15
 8005308:	d914      	bls.n	8005334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800530a:	4a17      	ldr	r2, [pc, #92]	; (8005368 <vPortValidateInterruptPriority+0x70>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <vPortValidateInterruptPriority+0x74>)
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	7afa      	ldrb	r2, [r7, #11]
 800531a:	429a      	cmp	r2, r3
 800531c:	d20a      	bcs.n	8005334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
 8005332:	e7fe      	b.n	8005332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005334:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <vPortValidateInterruptPriority+0x78>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800533c:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <vPortValidateInterruptPriority+0x7c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d90a      	bls.n	800535a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	603b      	str	r3, [r7, #0]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <vPortValidateInterruptPriority+0x60>
	}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	e000e3f0 	.word	0xe000e3f0
 800536c:	20001310 	.word	0x20001310
 8005370:	e000ed0c 	.word	0xe000ed0c
 8005374:	20001314 	.word	0x20001314

08005378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005384:	f7fe fc80 	bl	8003c88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005388:	4b5d      	ldr	r3, [pc, #372]	; (8005500 <pvPortMalloc+0x188>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005390:	f000 f924 	bl	80055dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005394:	4b5b      	ldr	r3, [pc, #364]	; (8005504 <pvPortMalloc+0x18c>)
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8093 	bne.w	80054c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01d      	beq.n	80053e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80053a8:	2208      	movs	r2, #8
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4413      	add	r3, r2
 80053ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d014      	beq.n	80053e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f023 0307 	bic.w	r3, r3, #7
 80053c0:	3308      	adds	r3, #8
 80053c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00a      	beq.n	80053e4 <pvPortMalloc+0x6c>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	617b      	str	r3, [r7, #20]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d06e      	beq.n	80054c8 <pvPortMalloc+0x150>
 80053ea:	4b47      	ldr	r3, [pc, #284]	; (8005508 <pvPortMalloc+0x190>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d869      	bhi.n	80054c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053f4:	4b45      	ldr	r3, [pc, #276]	; (800550c <pvPortMalloc+0x194>)
 80053f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053f8:	4b44      	ldr	r3, [pc, #272]	; (800550c <pvPortMalloc+0x194>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053fe:	e004      	b.n	800540a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d903      	bls.n	800541c <pvPortMalloc+0xa4>
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f1      	bne.n	8005400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800541c:	4b38      	ldr	r3, [pc, #224]	; (8005500 <pvPortMalloc+0x188>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005422:	429a      	cmp	r2, r3
 8005424:	d050      	beq.n	80054c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2208      	movs	r2, #8
 800542c:	4413      	add	r3, r2
 800542e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	6a3b      	ldr	r3, [r7, #32]
 8005436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	2308      	movs	r3, #8
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	429a      	cmp	r2, r3
 8005446:	d91f      	bls.n	8005488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4413      	add	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <pvPortMalloc+0xf8>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	613b      	str	r3, [r7, #16]
}
 800546c:	bf00      	nop
 800546e:	e7fe      	b.n	800546e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005482:	69b8      	ldr	r0, [r7, #24]
 8005484:	f000 f90c 	bl	80056a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005488:	4b1f      	ldr	r3, [pc, #124]	; (8005508 <pvPortMalloc+0x190>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <pvPortMalloc+0x190>)
 8005494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005496:	4b1c      	ldr	r3, [pc, #112]	; (8005508 <pvPortMalloc+0x190>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b1d      	ldr	r3, [pc, #116]	; (8005510 <pvPortMalloc+0x198>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d203      	bcs.n	80054aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054a2:	4b19      	ldr	r3, [pc, #100]	; (8005508 <pvPortMalloc+0x190>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <pvPortMalloc+0x198>)
 80054a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <pvPortMalloc+0x18c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <pvPortMalloc+0x19c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a13      	ldr	r2, [pc, #76]	; (8005514 <pvPortMalloc+0x19c>)
 80054c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054c8:	f7fe fbec 	bl	8003ca4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80054d2:	f003 fcb1 	bl	8008e38 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00a      	beq.n	80054f6 <pvPortMalloc+0x17e>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	60fb      	str	r3, [r7, #12]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <pvPortMalloc+0x17c>
	return pvReturn;
 80054f6:	69fb      	ldr	r3, [r7, #28]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3728      	adds	r7, #40	; 0x28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	2000b320 	.word	0x2000b320
 8005504:	2000b334 	.word	0x2000b334
 8005508:	2000b324 	.word	0x2000b324
 800550c:	2000b318 	.word	0x2000b318
 8005510:	2000b328 	.word	0x2000b328
 8005514:	2000b32c 	.word	0x2000b32c

08005518 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d04d      	beq.n	80055c6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800552a:	2308      	movs	r3, #8
 800552c:	425b      	negs	r3, r3
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	4b24      	ldr	r3, [pc, #144]	; (80055d0 <vPortFree+0xb8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4013      	ands	r3, r2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10a      	bne.n	800555c <vPortFree+0x44>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60fb      	str	r3, [r7, #12]
}
 8005558:	bf00      	nop
 800555a:	e7fe      	b.n	800555a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <vPortFree+0x62>
	__asm volatile
 8005564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005568:	f383 8811 	msr	BASEPRI, r3
 800556c:	f3bf 8f6f 	isb	sy
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	60bb      	str	r3, [r7, #8]
}
 8005576:	bf00      	nop
 8005578:	e7fe      	b.n	8005578 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <vPortFree+0xb8>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4013      	ands	r3, r2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01e      	beq.n	80055c6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11a      	bne.n	80055c6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <vPortFree+0xb8>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055a0:	f7fe fb72 	bl	8003c88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <vPortFree+0xbc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	4a09      	ldr	r2, [pc, #36]	; (80055d4 <vPortFree+0xbc>)
 80055b0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f000 f874 	bl	80056a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055b8:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <vPortFree+0xc0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3301      	adds	r3, #1
 80055be:	4a06      	ldr	r2, [pc, #24]	; (80055d8 <vPortFree+0xc0>)
 80055c0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80055c2:	f7fe fb6f 	bl	8003ca4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055c6:	bf00      	nop
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	2000b334 	.word	0x2000b334
 80055d4:	2000b324 	.word	0x2000b324
 80055d8:	2000b330 	.word	0x2000b330

080055dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80055e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055e8:	4b27      	ldr	r3, [pc, #156]	; (8005688 <prvHeapInit+0xac>)
 80055ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	3307      	adds	r3, #7
 80055fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <prvHeapInit+0xac>)
 800560c:	4413      	add	r3, r2
 800560e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005614:	4a1d      	ldr	r2, [pc, #116]	; (800568c <prvHeapInit+0xb0>)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800561a:	4b1c      	ldr	r3, [pc, #112]	; (800568c <prvHeapInit+0xb0>)
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005628:	2208      	movs	r2, #8
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a15      	ldr	r2, [pc, #84]	; (8005690 <prvHeapInit+0xb4>)
 800563c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800563e:	4b14      	ldr	r3, [pc, #80]	; (8005690 <prvHeapInit+0xb4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2200      	movs	r2, #0
 8005644:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005646:	4b12      	ldr	r3, [pc, #72]	; (8005690 <prvHeapInit+0xb4>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	1ad2      	subs	r2, r2, r3
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800565c:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <prvHeapInit+0xb4>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	4a0a      	ldr	r2, [pc, #40]	; (8005694 <prvHeapInit+0xb8>)
 800566a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	4a09      	ldr	r2, [pc, #36]	; (8005698 <prvHeapInit+0xbc>)
 8005672:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <prvHeapInit+0xc0>)
 8005676:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800567a:	601a      	str	r2, [r3, #0]
}
 800567c:	bf00      	nop
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20001318 	.word	0x20001318
 800568c:	2000b318 	.word	0x2000b318
 8005690:	2000b320 	.word	0x2000b320
 8005694:	2000b328 	.word	0x2000b328
 8005698:	2000b324 	.word	0x2000b324
 800569c:	2000b334 	.word	0x2000b334

080056a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056a8:	4b28      	ldr	r3, [pc, #160]	; (800574c <prvInsertBlockIntoFreeList+0xac>)
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e002      	b.n	80056b4 <prvInsertBlockIntoFreeList+0x14>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d8f7      	bhi.n	80056ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d108      	bne.n	80056e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685a      	ldr	r2, [r3, #4]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	441a      	add	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	68ba      	ldr	r2, [r7, #8]
 80056ec:	441a      	add	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d118      	bne.n	8005728 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b15      	ldr	r3, [pc, #84]	; (8005750 <prvInsertBlockIntoFreeList+0xb0>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d00d      	beq.n	800571e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	441a      	add	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	601a      	str	r2, [r3, #0]
 800571c:	e008      	b.n	8005730 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800571e:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <prvInsertBlockIntoFreeList+0xb0>)
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	e003      	b.n	8005730 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	429a      	cmp	r2, r3
 8005736:	d002      	beq.n	800573e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	2000b318 	.word	0x2000b318
 8005750:	2000b320 	.word	0x2000b320

08005754 <_ZNSt8__detail17_List_node_headerC1Ev>:
    {
#if _GLIBCXX_USE_CXX11_ABI
      std::size_t _M_size;
#endif

      _List_node_header() _GLIBCXX_NOEXCEPT
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
      { _M_init(); }
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f000 f805 	bl	800576c <_ZNSt8__detail17_List_node_header7_M_initEv>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4618      	mov	r0, r3
 8005766:	3708      	adds	r7, #8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <_ZNSt8__detail17_List_node_header7_M_initEv>:
	  }
      }
#endif

      void
      _M_init() _GLIBCXX_NOEXCEPT
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
      {
	this->_M_next = this->_M_prev = this;
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	601a      	str	r2, [r3, #0]
#if _GLIBCXX_USE_CXX11_ABI
	this->_M_size = 0;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	609a      	str	r2, [r3, #8]
#endif
      }
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE10_List_implD1Ev>:
	  }
	return __n;
      }
#endif

      struct _List_impl
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f82f 	bl	8005800 <_ZNSaISt10_List_nodeIP12loraif_dev_tEED1Ev>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EEC1Ev>:
      const _Node_alloc_type&
      _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
      { return _M_impl; }

#if __cplusplus >= 201103L
      _List_base() = default;
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f812 	bl	80057e0 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE10_List_implC1Ev>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZNSt7__cxx114listIP12loraif_dev_tSaIS2_EEC1Ev>:

      /**
       *  @brief  Creates a %list with no elements.
       */
#if __cplusplus >= 201103L
      list() = default;
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff ffeb 	bl	80057ac <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EEC1Ev>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4618      	mov	r0, r3
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE10_List_implC1Ev>:
	_List_impl() _GLIBCXX_NOEXCEPT_IF(
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
	: _Node_alloc_type()
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f000 f825 	bl	8005838 <_ZNSaISt10_List_nodeIP12loraif_dev_tEEC1Ev>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff ffaf 	bl	8005754 <_ZNSt8__detail17_List_node_headerC1Ev>
	{ }
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <_ZNSaISt10_List_nodeIP12loraif_dev_tEED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f821 	bl	8005850 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEED1Ev>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4618      	mov	r0, r3
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EED1Ev>:
      ~_List_base() _GLIBCXX_NOEXCEPT
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
      { _M_clear(); }
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f820 	bl	8005866 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE8_M_clearEv>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff ffb3 	bl	8005794 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE10_List_implD1Ev>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <_ZNSaISt10_List_nodeIP12loraif_dev_tEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f843 	bl	80058cc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEEC1Ev>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4618      	mov	r0, r3
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE8_M_clearEv>:
_GLIBCXX_BEGIN_NAMESPACE_VERSION
_GLIBCXX_BEGIN_NAMESPACE_CONTAINER

  template<typename _Tp, typename _Alloc>
    void
    _List_base<_Tp, _Alloc>::
 8005866:	b580      	push	{r7, lr}
 8005868:	b086      	sub	sp, #24
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
      while (__cur != &_M_impl._M_node)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	429a      	cmp	r2, r3
 800587a:	d015      	beq.n	80058a8 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE8_M_clearEv+0x42>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	613b      	str	r3, [r7, #16]
	  __cur = __tmp->_M_next;
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	617b      	str	r3, [r7, #20]
	  _Tp* __val = __tmp->_M_valptr();
 8005886:	6938      	ldr	r0, [r7, #16]
 8005888:	f000 f812 	bl	80058b0 <_ZNSt10_List_nodeIP12loraif_dev_tE9_M_valptrEv>
 800588c:	60f8      	str	r0, [r7, #12]
#if __cplusplus >= 201103L
	  _Node_alloc_traits::destroy(_M_get_Node_allocator(), __val);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f827 	bl	80058e2 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE21_M_get_Node_allocatorEv>
 8005894:	4603      	mov	r3, r0
 8005896:	68f9      	ldr	r1, [r7, #12]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f82d 	bl	80058f8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP12loraif_dev_tEEE7destroyIS2_EEvRS4_PT_>
#else
	  _Tp_alloc_type(_M_get_Node_allocator()).destroy(__val);
#endif
	  _M_put_node(__tmp);
 800589e:	6939      	ldr	r1, [r7, #16]
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f836 	bl	8005912 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>
      while (__cur != &_M_impl._M_node)
 80058a6:	e7e5      	b.n	8005874 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE8_M_clearEv+0xe>
	}
    }
 80058a8:	bf00      	nop
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <_ZNSt10_List_nodeIP12loraif_dev_tE9_M_valptrEv>:
      _Tp*       _M_valptr()       { return _M_storage._M_ptr(); }
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3308      	adds	r3, #8
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 f837 	bl	8005930 <_ZN9__gnu_cxx16__aligned_membufIP12loraif_dev_tE6_M_ptrEv>
 80058c2:	4603      	mov	r3, r0
 80058c4:	4618      	mov	r0, r3
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4618      	mov	r0, r3
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr

080058e2 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
      { return _M_impl; }
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4618      	mov	r0, r3
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <_ZNSt16allocator_traitsISaISt10_List_nodeIP12loraif_dev_tEEE7destroyIS2_EEvRS4_PT_>:
       *
       *  Calls @c __a.destroy(__p).
      */
      template<typename _Up>
	static _GLIBCXX20_CONSTEXPR void
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	noexcept(is_nothrow_destructible<_Up>::value)
	{
#if __cplusplus <= 201703L
	  __a.destroy(__p);
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f81f 	bl	8005948 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEE7destroyIS3_EEvPT_>
#else
	  std::destroy_at(__p);
#endif
	}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EE11_M_put_nodeEPSt10_List_nodeIS2_E>:
      _M_put_node(typename _Node_alloc_traits::pointer __p) _GLIBCXX_NOEXCEPT
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	6039      	str	r1, [r7, #0]
      { _Node_alloc_traits::deallocate(_M_impl, __p, 1); }
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	6839      	ldr	r1, [r7, #0]
 8005922:	4618      	mov	r0, r3
 8005924:	f000 f81b 	bl	800595e <_ZNSt16allocator_traitsISaISt10_List_nodeIP12loraif_dev_tEEE10deallocateERS4_PS3_j>
 8005928:	bf00      	nop
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_ZN9__gnu_cxx16__aligned_membufIP12loraif_dev_tE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f81f 	bl	800597c <_ZN9__gnu_cxx16__aligned_membufIP12loraif_dev_tE7_M_addrEv>
 800593e:	4603      	mov	r3, r0
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEE7destroyIS3_EEvPT_>:
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
	void
	destroy(_Up* __p)
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8005952:	bf00      	nop
 8005954:	370c      	adds	r7, #12
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <_ZNSt16allocator_traitsISaISt10_List_nodeIP12loraif_dev_tEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800595e:	b580      	push	{r7, lr}
 8005960:	b084      	sub	sp, #16
 8005962:	af00      	add	r7, sp, #0
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 f80f 	bl	8005992 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEE10deallocateEPS4_j>
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <_ZN9__gnu_cxx16__aligned_membufIP12loraif_dev_tE7_M_addrEv>:
      _M_addr() noexcept
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4618      	mov	r0, r3
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP12loraif_dev_tEE10deallocateEPS4_j>:
      deallocate(_Tp* __p, size_type __t)
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	4613      	mov	r3, r2
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	4413      	add	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4619      	mov	r1, r3
 80059aa:	68b8      	ldr	r0, [r7, #8]
 80059ac:	f004 fae4 	bl	8009f78 <_ZdlPvj>
      }
 80059b0:	bf00      	nop
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZNSt7__cxx114listIP12loraif_dev_tSaIS2_EED1Ev>:
       *  things.  The _Base dtor only erases the elements, and note
       *  that if the elements themselves are pointers, the pointed-to
       *  memory is not touched in any way.  Managing the pointer is
       *  the user's responsibility.
       */
      ~list() = default;
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff ff28 	bl	8005818 <_ZNSt7__cxx1110_List_baseIP12loraif_dev_tSaIS2_EED1Ev>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4618      	mov	r0, r3
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
	...

080059d4 <_Z41__static_initialization_and_destruction_0ii>:
    	loraif_debug((char *)"This device not available in device list", __LINE__, __FUNCTION__);
        return NULL;
    }

    return (*device);
}
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d107      	bne.n	80059f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d102      	bne.n	80059f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
list<loraif_dev_t *> loraif_device_list;
 80059ee:	4809      	ldr	r0, [pc, #36]	; (8005a14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80059f0:	f7ff fee9 	bl	80057c6 <_ZNSt7__cxx114listIP12loraif_dev_tSaIS2_EEC1Ev>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d107      	bne.n	8005a0a <_Z41__static_initialization_and_destruction_0ii+0x36>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d102      	bne.n	8005a0a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8005a04:	4803      	ldr	r0, [pc, #12]	; (8005a14 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005a06:	f7ff ffd7 	bl	80059b8 <_ZNSt7__cxx114listIP12loraif_dev_tSaIS2_EED1Ev>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	2000b33c 	.word	0x2000b33c

08005a18 <_GLOBAL__sub_I_loraif>:
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a20:	2001      	movs	r0, #1
 8005a22:	f7ff ffd7 	bl	80059d4 <_Z41__static_initialization_and_destruction_0ii>
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <_GLOBAL__sub_D_loraif>:
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a30:	2000      	movs	r0, #0
 8005a32:	f7ff ffcf 	bl	80059d4 <_Z41__static_initialization_and_destruction_0ii>
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <_ZL19parse_error_handlerPciS_>:
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
static const char *TAG = "Parse packet";
#define LOG_LEVEL LOG_DEBUG
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */

static void parse_error_handler(char *str, int line, char *func){
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
#if ENABLE_COMPONENT_PARSE_PACKET_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <_ZL19parse_error_handlerPciS_+0x28>)
 8005a46:	6818      	ldr	r0, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4904      	ldr	r1, [pc, #16]	; (8005a64 <_ZL19parse_error_handlerPciS_+0x2c>)
 8005a52:	f003 fc6d 	bl	8009330 <LOG_DEBUG>
#endif /* ENABLE_COMPONENT_PARSE_PACKET_DEBUG */
}
 8005a56:	bf00      	nop
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000014 	.word	0x20000014
 8005a64:	0800d100 	.word	0x0800d100

08005a68 <parse_packet>:
	json->leaf = false;

	return PKT_ERR_OK;
}

pkt_err_t parse_packet(char *src, pkt_t *dest){
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
	pkt_err_t ret = PKT_ERR_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	77fb      	strb	r3, [r7, #31]
	char *src_cpy = src;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	61bb      	str	r3, [r7, #24]
	int cmd_len = 0, data_len = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
	char *pvstart;

	/** Get ": " */
	pvstart = strstr(src, ": ");
 8005a82:	4934      	ldr	r1, [pc, #208]	; (8005b54 <parse_packet+0xec>)
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f005 fa85 	bl	800af94 <strstr>
 8005a8a:	60f8      	str	r0, [r7, #12]
	if(pvstart == NULL){
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <parse_packet+0x3c>
		parse_error_handler((char *)"Error packet format", (int)__LINE__, (char *)__FUNCTION__);
 8005a92:	4a31      	ldr	r2, [pc, #196]	; (8005b58 <parse_packet+0xf0>)
 8005a94:	219a      	movs	r1, #154	; 0x9a
 8005a96:	4831      	ldr	r0, [pc, #196]	; (8005b5c <parse_packet+0xf4>)
 8005a98:	f7ff ffce 	bl	8005a38 <_ZL19parse_error_handlerPciS_>
		ret = PKT_ERR_FORMAT;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	77fb      	strb	r3, [r7, #31]
		return ret;
 8005aa0:	7ffb      	ldrb	r3, [r7, #31]
 8005aa2:	e052      	b.n	8005b4a <parse_packet+0xe2>
	}

	/** Get command length */
	cmd_len = (int)(pvstart - src_cpy);
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	617b      	str	r3, [r7, #20]

	/** Assign command string */
	dest->cmd_str = (char *)malloc((cmd_len + 1) * sizeof(char));
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f004 faf7 	bl	800a0a4 <malloc>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	601a      	str	r2, [r3, #0]
	if(dest->cmd_str == NULL){
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d108      	bne.n	8005ad8 <parse_packet+0x70>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
 8005ac6:	4a24      	ldr	r2, [pc, #144]	; (8005b58 <parse_packet+0xf0>)
 8005ac8:	21a5      	movs	r1, #165	; 0xa5
 8005aca:	4825      	ldr	r0, [pc, #148]	; (8005b60 <parse_packet+0xf8>)
 8005acc:	f7ff ffb4 	bl	8005a38 <_ZL19parse_error_handlerPciS_>
		ret = PKT_ERR_MEM;
 8005ad0:	2310      	movs	r3, #16
 8005ad2:	77fb      	strb	r3, [r7, #31]
		return ret;
 8005ad4:	7ffb      	ldrb	r3, [r7, #31]
 8005ad6:	e038      	b.n	8005b4a <parse_packet+0xe2>
	}
	memcpy(dest->cmd_str, src_cpy, cmd_len);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	69b9      	ldr	r1, [r7, #24]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f004 faef 	bl	800a0c4 <memcpy>
	dest->cmd_str[cmd_len] = '\0';
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	4413      	add	r3, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]


	/** Get data */
	pvstart = (char *)(pvstart + 2);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	3302      	adds	r3, #2
 8005af6:	60fb      	str	r3, [r7, #12]
	data_len = strlen(pvstart);
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f7fa fb83 	bl	8000204 <strlen>
 8005afe:	4603      	mov	r3, r0
 8005b00:	613b      	str	r3, [r7, #16]
	dest->data_str = (char *)malloc((data_len + 1) * sizeof(char));
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	3301      	adds	r3, #1
 8005b06:	4618      	mov	r0, r3
 8005b08:	f004 facc 	bl	800a0a4 <malloc>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
	if(dest->data_str == NULL){
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d108      	bne.n	8005b2e <parse_packet+0xc6>
		parse_error_handler((char *)"Error can't allocation memory", (int)__LINE__, (char *)__FUNCTION__);
 8005b1c:	4a0e      	ldr	r2, [pc, #56]	; (8005b58 <parse_packet+0xf0>)
 8005b1e:	21b2      	movs	r1, #178	; 0xb2
 8005b20:	480f      	ldr	r0, [pc, #60]	; (8005b60 <parse_packet+0xf8>)
 8005b22:	f7ff ff89 	bl	8005a38 <_ZL19parse_error_handlerPciS_>
		ret = PKT_ERR_MEM;
 8005b26:	2310      	movs	r3, #16
 8005b28:	77fb      	strb	r3, [r7, #31]
		return ret;
 8005b2a:	7ffb      	ldrb	r3, [r7, #31]
 8005b2c:	e00d      	b.n	8005b4a <parse_packet+0xe2>
	}
	memcpy(dest->data_str, pvstart, data_len);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	68f9      	ldr	r1, [r7, #12]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f004 fac4 	bl	800a0c4 <memcpy>
	dest->data_str[data_len] = '\0';
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]

	return ret;
 8005b48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3720      	adds	r7, #32
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	0800d1dc 	.word	0x0800d1dc
 8005b58:	0800d1e0 	.word	0x0800d1e0
 8005b5c:	0800d1f0 	.word	0x0800d1f0
 8005b60:	0800d1a8 	.word	0x0800d1a8

08005b64 <release_packet>:

pkt_err_t release_packet(pkt_t *packet){
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	if(packet->cmd_str != NULL) free(packet->cmd_str);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <release_packet+0x1a>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f004 fa9b 	bl	800a0b4 <free>
	if(packet->data_str != NULL) free(packet->data_str);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <release_packet+0x2c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f004 fa92 	bl	800a0b4 <free>

	return PKT_ERR_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <cmd_to_str>:
	}

	return cmd;
}

char *cmd_to_str(int cmd, const char *cmd_list[]){
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
	return (char *)cmd_list[cmd];
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	4413      	add	r3, r2
 8005bac:	681b      	ldr	r3, [r3, #0]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>:
#include "periph/exti.h"
#include "periph/systick.h"



sx127x::sx127x(GPIO_TypeDef *csport, uint16_t cspin, GPIO_TypeDef *rstport, uint16_t rstpin, GPIO_TypeDef *itport, uint16_t itpin){
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	60f8      	str	r0, [r7, #12]
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	603b      	str	r3, [r7, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bd0:	811a      	strh	r2, [r3, #8]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	615a      	str	r2, [r3, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	619a      	str	r2, [r3, #24]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	61da      	str	r2, [r3, #28]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	625a      	str	r2, [r3, #36]	; 0x24
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
	_csport = csport;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
	_rstport = rstport;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	611a      	str	r2, [r3, #16]
	_itport = itport;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	69fa      	ldr	r2, [r7, #28]
 8005c00:	615a      	str	r2, [r3, #20]

	_cs = cspin;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	809a      	strh	r2, [r3, #4]
	_rst = rstpin;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8b3a      	ldrh	r2, [r7, #24]
 8005c0c:	80da      	strh	r2, [r3, #6]
	_it = itpin;
 8005c0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	811a      	strh	r2, [r3, #8]
}
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <_ZL12wifiif_debugPciS_>:
static bool had_response = false;
static char *response_data;

static volatile bool wifi_state = false;

static void wifiif_debug(char *str, int line, char *func){
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b086      	sub	sp, #24
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
#if ENABLE_COMPONENT_WIFIIF_DEBUG
	LOG_LEVEL(TAG, "%s, Line: %d Function: %s", str, line, func);
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <_ZL12wifiif_debugPciS_+0x28>)
 8005c32:	6818      	ldr	r0, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	9300      	str	r3, [sp, #0]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4904      	ldr	r1, [pc, #16]	; (8005c50 <_ZL12wifiif_debugPciS_+0x2c>)
 8005c3e:	f003 fb77 	bl	8009330 <LOG_DEBUG>
#endif /* ENABLE_COMPONENT_WIFIIF_DEBUG */
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000018 	.word	0x20000018
 8005c50:	0800d388 	.word	0x0800d388

08005c54 <_ZL20wifiif_wait_responsev>:

static int wifiif_wait_response(void){
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
	__IO uint32_t tick = get_tick();
 8005c5a:	f002 f895 	bl	8007d88 <get_tick>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	607b      	str	r3, [r7, #4]

	while(!had_response){
 8005c62:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <_ZL20wifiif_wait_responsev+0x48>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d113      	bne.n	8005c92 <_ZL20wifiif_wait_responsev+0x3e>
		if(get_tick() - tick > WIFI_DEFAULT_TIMEOUT){
 8005c6a:	f002 f88d 	bl	8007d88 <get_tick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bf8c      	ite	hi
 8005c7c:	2301      	movhi	r3, #1
 8005c7e:	2300      	movls	r3, #0
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <_ZL20wifiif_wait_responsev+0x36>
			return 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	e004      	b.n	8005c94 <_ZL20wifiif_wait_responsev+0x40>
		}
		vTaskDelay(100);
 8005c8a:	2064      	movs	r0, #100	; 0x64
 8005c8c:	f7fd ff62 	bl	8003b54 <vTaskDelay>
	while(!had_response){
 8005c90:	e7e7      	b.n	8005c62 <_ZL20wifiif_wait_responsev+0xe>
	}

	return 1;
 8005c92:	2301      	movs	r3, #1
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	2000b350 	.word	0x2000b350

08005ca0 <_ZL13wifiif_is_errPc>:

static int wifiif_is_err(char *str){
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	return strcmp(str, "ERR");
 8005ca8:	4904      	ldr	r1, [pc, #16]	; (8005cbc <_ZL13wifiif_is_errPc+0x1c>)
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fa faa0 	bl	80001f0 <strcmp>
 8005cb0:	4603      	mov	r3, r0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	0800d3a4 	.word	0x0800d3a4

08005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>:

static void wifiif_request(wifi_cmd_t cmd, char *data){
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b08b      	sub	sp, #44	; 0x2c
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	6039      	str	r1, [r7, #0]
 8005cca:	71fb      	strb	r3, [r7, #7]
	char *cmd_str = cmd_to_str(cmd, command_string);
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	4956      	ldr	r1, [pc, #344]	; (8005e28 <_ZL14wifiif_request10wifi_cmd_tPc+0x168>)
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff ff62 	bl	8005b9a <cmd_to_str>
 8005cd6:	6238      	str	r0, [r7, #32]
	char *req_data;
	asprintf(&req_data, "%s: %s", cmd_str, data);
 8005cd8:	f107 0010 	add.w	r0, r7, #16
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	6a3a      	ldr	r2, [r7, #32]
 8005ce0:	4952      	ldr	r1, [pc, #328]	; (8005e2c <_ZL14wifiif_request10wifi_cmd_tPc+0x16c>)
 8005ce2:	f004 f997 	bl	800a014 <asiprintf>
	fprequest(req_data);
 8005ce6:	4b52      	ldr	r3, [pc, #328]	; (8005e30 <_ZL14wifiif_request10wifi_cmd_tPc+0x170>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4610      	mov	r0, r2
 8005cee:	4798      	blx	r3
#if ENABLE_COMPONENT_WIFIIF_DEBUG
	wifiif_debug(req_data, __LINE__, (char *)__FUNCTION__);
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4a50      	ldr	r2, [pc, #320]	; (8005e34 <_ZL14wifiif_request10wifi_cmd_tPc+0x174>)
 8005cf4:	215f      	movs	r1, #95	; 0x5f
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff ff94 	bl	8005c24 <_ZL12wifiif_debugPciS_>
#endif /* ENABLE_COMPONENT_WIFIIF_DEBUG */
	free(req_data);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f004 f9d8 	bl	800a0b4 <free>

	int resp_stt = wifiif_wait_response();
 8005d04:	f7ff ffa6 	bl	8005c54 <_ZL20wifiif_wait_responsev>
 8005d08:	61f8      	str	r0, [r7, #28]
	if(resp_stt){
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d078      	beq.n	8005e02 <_ZL14wifiif_request10wifi_cmd_tPc+0x142>
		pkt_t pkt;
 8005d10:	2300      	movs	r3, #0
 8005d12:	60bb      	str	r3, [r7, #8]
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
		pkt_err_t err = parse_packet(response_data, &pkt);
 8005d18:	4b47      	ldr	r3, [pc, #284]	; (8005e38 <_ZL14wifiif_request10wifi_cmd_tPc+0x178>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f107 0208 	add.w	r2, r7, #8
 8005d20:	4611      	mov	r1, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fea0 	bl	8005a68 <parse_packet>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	76fb      	strb	r3, [r7, #27]
		if(err != PKT_ERR_OK){
 8005d2c:	7efb      	ldrb	r3, [r7, #27]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <_ZL14wifiif_request10wifi_cmd_tPc+0x8c>
			wifiif_debug((char *)"Can't parse response.", __LINE__, (char *)__FUNCTION__);
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <_ZL14wifiif_request10wifi_cmd_tPc+0x174>)
 8005d34:	2168      	movs	r1, #104	; 0x68
 8005d36:	4841      	ldr	r0, [pc, #260]	; (8005e3c <_ZL14wifiif_request10wifi_cmd_tPc+0x17c>)
 8005d38:	f7ff ff74 	bl	8005c24 <_ZL12wifiif_debugPciS_>

			release_packet(&pkt);
 8005d3c:	f107 0308 	add.w	r3, r7, #8
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff ff0f 	bl	8005b64 <release_packet>
			wifiif_reset_response_state();
 8005d46:	f000 f8b5 	bl	8005eb4 <wifiif_reset_response_state>
 8005d4a:	e06a      	b.n	8005e22 <_ZL14wifiif_request10wifi_cmd_tPc+0x162>

			return;
		}
		if(wifiif_is_err(pkt.data_str) != 0){
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff ffa6 	bl	8005ca0 <_ZL13wifiif_is_errPc>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf14      	ite	ne
 8005d5a:	2301      	movne	r3, #1
 8005d5c:	2300      	moveq	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d03a      	beq.n	8005dda <_ZL14wifiif_request10wifi_cmd_tPc+0x11a>
			char *data = (char *)malloc(strlen(pkt.data_str)+1);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fa fa4c 	bl	8000204 <strlen>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	3301      	adds	r3, #1
 8005d70:	4618      	mov	r0, r3
 8005d72:	f004 f997 	bl	800a0a4 <malloc>
 8005d76:	4603      	mov	r3, r0
 8005d78:	617b      	str	r3, [r7, #20]
			memcpy(data, pkt.data_str, strlen(pkt.data_str));
 8005d7a:	68fc      	ldr	r4, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f7fa fa40 	bl	8000204 <strlen>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	4621      	mov	r1, r4
 8005d8a:	6978      	ldr	r0, [r7, #20]
 8005d8c:	f004 f99a 	bl	800a0c4 <memcpy>
			data[strlen(pkt.data_str)] = '\0';
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa fa36 	bl	8000204 <strlen>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]

			wifi_cmd_t command = cmd;
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(command == WIFI_HTTP_CLIENT_REQUEST) command = WIFI_HTTP_CLIENT_RESPONSE;
 8005da8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dac:	2b0f      	cmp	r3, #15
 8005dae:	d102      	bne.n	8005db6 <_ZL14wifiif_request10wifi_cmd_tPc+0xf6>
 8005db0:	2310      	movs	r3, #16
 8005db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(fpcommand_handler) fpcommand_handler(command, data);
 8005db6:	4b22      	ldr	r3, [pc, #136]	; (8005e40 <_ZL14wifiif_request10wifi_cmd_tPc+0x180>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d006      	beq.n	8005dcc <_ZL14wifiif_request10wifi_cmd_tPc+0x10c>
 8005dbe:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <_ZL14wifiif_request10wifi_cmd_tPc+0x180>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005dc6:	6979      	ldr	r1, [r7, #20]
 8005dc8:	4610      	mov	r0, r2
 8005dca:	4798      	blx	r3

			if(data != NULL) free(data);
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <_ZL14wifiif_request10wifi_cmd_tPc+0x136>
 8005dd2:	6978      	ldr	r0, [r7, #20]
 8005dd4:	f004 f96e 	bl	800a0b4 <free>
 8005dd8:	e00d      	b.n	8005df6 <_ZL14wifiif_request10wifi_cmd_tPc+0x136>
		}
		else{
			wifiif_debug((char *)"WiFi module error.", __LINE__, (char *)__FUNCTION__);
 8005dda:	4a16      	ldr	r2, [pc, #88]	; (8005e34 <_ZL14wifiif_request10wifi_cmd_tPc+0x174>)
 8005ddc:	217b      	movs	r1, #123	; 0x7b
 8005dde:	4819      	ldr	r0, [pc, #100]	; (8005e44 <_ZL14wifiif_request10wifi_cmd_tPc+0x184>)
 8005de0:	f7ff ff20 	bl	8005c24 <_ZL12wifiif_debugPciS_>
			if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8005de4:	4b16      	ldr	r3, [pc, #88]	; (8005e40 <_ZL14wifiif_request10wifi_cmd_tPc+0x180>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <_ZL14wifiif_request10wifi_cmd_tPc+0x136>
 8005dec:	4b14      	ldr	r3, [pc, #80]	; (8005e40 <_ZL14wifiif_request10wifi_cmd_tPc+0x180>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2100      	movs	r1, #0
 8005df2:	2000      	movs	r0, #0
 8005df4:	4798      	blx	r3
		}
		release_packet(&pkt);
 8005df6:	f107 0308 	add.w	r3, r7, #8
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff feb2 	bl	8005b64 <release_packet>
 8005e00:	e00d      	b.n	8005e1e <_ZL14wifiif_request10wifi_cmd_tPc+0x15e>
	}
	else{
		wifiif_debug((char *)"WiFi module not response the request.", __LINE__, (char *)__FUNCTION__);
 8005e02:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <_ZL14wifiif_request10wifi_cmd_tPc+0x174>)
 8005e04:	2181      	movs	r1, #129	; 0x81
 8005e06:	4810      	ldr	r0, [pc, #64]	; (8005e48 <_ZL14wifiif_request10wifi_cmd_tPc+0x188>)
 8005e08:	f7ff ff0c 	bl	8005c24 <_ZL12wifiif_debugPciS_>
		if(fpcommand_handler) fpcommand_handler(WIFI_ERR, NULL);
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <_ZL14wifiif_request10wifi_cmd_tPc+0x180>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <_ZL14wifiif_request10wifi_cmd_tPc+0x15e>
 8005e14:	4b0a      	ldr	r3, [pc, #40]	; (8005e40 <_ZL14wifiif_request10wifi_cmd_tPc+0x180>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	4798      	blx	r3
	}

	wifiif_reset_response_state();
 8005e1e:	f000 f849 	bl	8005eb4 <wifiif_reset_response_state>
}
 8005e22:	372c      	adds	r7, #44	; 0x2c
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd90      	pop	{r4, r7, pc}
 8005e28:	2000001c 	.word	0x2000001c
 8005e2c:	0800d3a8 	.word	0x0800d3a8
 8005e30:	2000b348 	.word	0x2000b348
 8005e34:	0800d3b0 	.word	0x0800d3b0
 8005e38:	2000b354 	.word	0x2000b354
 8005e3c:	0800d3c0 	.word	0x0800d3c0
 8005e40:	2000b34c 	.word	0x2000b34c
 8005e44:	0800d3d8 	.word	0x0800d3d8
 8005e48:	0800d3ec 	.word	0x0800d3ec

08005e4c <wifiif_register_request_function>:
/**
 * WiFi setup function.
 */
void wifiif_register_request_function(void (*prequest)(char *)){
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	fprequest = prequest;
 8005e54:	4a04      	ldr	r2, [pc, #16]	; (8005e68 <wifiif_register_request_function+0x1c>)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6013      	str	r3, [r2, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	2000b348 	.word	0x2000b348

08005e6c <wifiif_register_command_handler>:

void wifiif_register_command_handler(void (*pcommand_handler)(wifi_cmd_t cmd, void *param)){
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
	fpcommand_handler = pcommand_handler;
 8005e74:	4a04      	ldr	r2, [pc, #16]	; (8005e88 <wifiif_register_command_handler+0x1c>)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6013      	str	r3, [r2, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	2000b34c 	.word	0x2000b34c

08005e8c <wifiif_set_response_state>:

void wifiif_set_response_state(char *resp_data){
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
	had_response = true;
 8005e94:	4b05      	ldr	r3, [pc, #20]	; (8005eac <wifiif_set_response_state+0x20>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]
	response_data = resp_data;
 8005e9a:	4a05      	ldr	r2, [pc, #20]	; (8005eb0 <wifiif_set_response_state+0x24>)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6013      	str	r3, [r2, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000b350 	.word	0x2000b350
 8005eb0:	2000b354 	.word	0x2000b354

08005eb4 <wifiif_reset_response_state>:

void wifiif_reset_response_state(void){
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
	had_response = false;
 8005eb8:	4b08      	ldr	r3, [pc, #32]	; (8005edc <wifiif_reset_response_state+0x28>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
	if(response_data != NULL){
 8005ebe:	4b08      	ldr	r3, [pc, #32]	; (8005ee0 <wifiif_reset_response_state+0x2c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <wifiif_reset_response_state+0x22>
		free(response_data);
 8005ec6:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <wifiif_reset_response_state+0x2c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f004 f8f2 	bl	800a0b4 <free>
		response_data = NULL;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <wifiif_reset_response_state+0x2c>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
	}
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	2000b350 	.word	0x2000b350
 8005ee0:	2000b354 	.word	0x2000b354

08005ee4 <wifiif_restart>:

/**
 * WiFi control.
 */
void wifiif_restart(void){
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
	wifiif_request(WIFI_RESTART, (char *)"{}");
 8005ee8:	4902      	ldr	r1, [pc, #8]	; (8005ef4 <wifiif_restart+0x10>)
 8005eea:	2001      	movs	r0, #1
 8005eec:	f7ff fee8 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>
}
 8005ef0:	bf00      	nop
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	0800d414 	.word	0x0800d414

08005ef8 <wifiif_connect>:
	wifiif_request(WIFI_SCAN, (char *)"{}");
}
void wifiif_isconnect(void){
	wifiif_request(WIFI_ISCONNECTED, (char *)"{}");
}
void wifiif_connect(char *ssid, char *pass, char *auth){
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b088      	sub	sp, #32
 8005efc:	af02      	add	r7, sp, #8
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
	char *data;
	asprintf(&data, "{\"ssid\":\"%s\",\"pass\":\"%s\",\"auth\":\"%s\"}", ssid, pass, auth);
 8005f04:	f107 0014 	add.w	r0, r7, #20
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4907      	ldr	r1, [pc, #28]	; (8005f30 <wifiif_connect+0x38>)
 8005f12:	f004 f87f 	bl	800a014 <asiprintf>

	wifiif_request(WIFI_CONN, data);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	4619      	mov	r1, r3
 8005f1a:	2004      	movs	r0, #4
 8005f1c:	f7ff fed0 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 f8c6 	bl	800a0b4 <free>
}
 8005f28:	bf00      	nop
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	0800d418 	.word	0x0800d418

08005f34 <wifiif_http_client_new>:


/**
 * HTTP Client.
 */
void wifiif_http_client_new(void){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
	wifiif_request(WIFI_HTTP_CLIENT_NEW, (char *)"{}");
 8005f38:	4902      	ldr	r1, [pc, #8]	; (8005f44 <wifiif_http_client_new+0x10>)
 8005f3a:	2007      	movs	r0, #7
 8005f3c:	f7ff fec0 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>
}
 8005f40:	bf00      	nop
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	0800d414 	.word	0x0800d414

08005f48 <wifiif_http_client_config>:

void wifiif_http_client_config(char *config){
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	wifiif_request(WIFI_HTTP_CLIENT_CONFIG, config);
 8005f50:	6879      	ldr	r1, [r7, #4]
 8005f52:	2008      	movs	r0, #8
 8005f54:	f7ff feb4 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>
}
 8005f58:	bf00      	nop
 8005f5a:	3708      	adds	r7, #8
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <wifiif_http_client_init>:

void wifiif_http_client_init(void){
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
	wifiif_request(WIFI_HTTP_CLIENT_INIT, (char *)"{}");
 8005f64:	4902      	ldr	r1, [pc, #8]	; (8005f70 <wifiif_http_client_init+0x10>)
 8005f66:	2009      	movs	r0, #9
 8005f68:	f7ff feaa 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>
}
 8005f6c:	bf00      	nop
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	0800d414 	.word	0x0800d414

08005f74 <wifiif_http_client_set_header>:

void wifiif_http_client_clean(void){
	wifiif_request(WIFI_HTTP_CLIENT_CLEAN, (char *)"{}");
}

void wifiif_http_client_set_header(char *key, char *value){
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	char *data;
	asprintf(&data, "{\"key\":\"%s\",\"value\":\"%s\"}", key, value);
 8005f7e:	f107 000c 	add.w	r0, r7, #12
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	4908      	ldr	r1, [pc, #32]	; (8005fa8 <wifiif_http_client_set_header+0x34>)
 8005f88:	f004 f844 	bl	800a014 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_HEADER, data);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	200b      	movs	r0, #11
 8005f92:	f7ff fe95 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(data);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f004 f88b 	bl	800a0b4 <free>
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	0800d440 	.word	0x0800d440

08005fac <wifiif_http_client_set_url>:

void wifiif_http_client_set_url(char *url){
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	char *tmp;
	asprintf(&tmp, "{\"url\":\"%s\"}", url);
 8005fb4:	f107 030c 	add.w	r3, r7, #12
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4908      	ldr	r1, [pc, #32]	; (8005fdc <wifiif_http_client_set_url+0x30>)
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f004 f829 	bl	800a014 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_URL, tmp);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	200c      	movs	r0, #12
 8005fc8:	f7ff fe7a 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f004 f870 	bl	800a0b4 <free>
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	0800d45c 	.word	0x0800d45c

08005fe0 <wifiif_http_client_set_method>:

void wifiif_http_client_set_method(char *method){
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
	char *tmp;
	asprintf(&tmp, "{\"method\":\"%s\"}", method);
 8005fe8:	f107 030c 	add.w	r3, r7, #12
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	4908      	ldr	r1, [pc, #32]	; (8006010 <wifiif_http_client_set_method+0x30>)
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f004 f80f 	bl	800a014 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_METHOD, tmp);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	200d      	movs	r0, #13
 8005ffc:	f7ff fe60 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4618      	mov	r0, r3
 8006004:	f004 f856 	bl	800a0b4 <free>
}
 8006008:	bf00      	nop
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	0800d46c 	.word	0x0800d46c

08006014 <wifiif_http_client_set_data>:

void wifiif_http_client_set_data(char *data){
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
	char *tmp;
	asprintf(&tmp, "{\"data\":%s}", data);
 800601c:	f107 030c 	add.w	r3, r7, #12
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4908      	ldr	r1, [pc, #32]	; (8006044 <wifiif_http_client_set_data+0x30>)
 8006024:	4618      	mov	r0, r3
 8006026:	f003 fff5 	bl	800a014 <asiprintf>

	wifiif_request(WIFI_HTTP_CLIENT_SET_DATA, tmp);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4619      	mov	r1, r3
 800602e:	200e      	movs	r0, #14
 8006030:	f7ff fe46 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>

	free(tmp);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4618      	mov	r0, r3
 8006038:	f004 f83c 	bl	800a0b4 <free>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	0800d47c 	.word	0x0800d47c

08006048 <wifiif_http_client_request>:

void wifiif_http_client_request(void){
 8006048:	b580      	push	{r7, lr}
 800604a:	af00      	add	r7, sp, #0
	wifiif_request(WIFI_HTTP_CLIENT_REQUEST, (char *)"{}");
 800604c:	4902      	ldr	r1, [pc, #8]	; (8006058 <wifiif_http_client_request+0x10>)
 800604e:	200f      	movs	r0, #15
 8006050:	f7ff fe36 	bl	8005cc0 <_ZL14wifiif_request10wifi_cmd_tPc>
}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	0800d414 	.word	0x0800d414

0800605c <wifiif_state_running>:


void wifiif_state_running(bool state){
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	4603      	mov	r3, r0
 8006064:	71fb      	strb	r3, [r7, #7]
	wifi_state = state;
 8006066:	4a04      	ldr	r2, [pc, #16]	; (8006078 <wifiif_state_running+0x1c>)
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	7013      	strb	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	2000b358 	.word	0x2000b358

0800607c <wifiif_state_is_running>:
bool wifiif_state_is_running(void){
 800607c:	b480      	push	{r7}
 800607e:	af00      	add	r7, sp, #0
	return wifi_state;
 8006080:	4b03      	ldr	r3, [pc, #12]	; (8006090 <wifiif_state_is_running+0x14>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	b2db      	uxtb	r3, r3
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	2000b358 	.word	0x2000b358

08006094 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800609e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	db12      	blt.n	80060cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060a6:	79fb      	ldrb	r3, [r7, #7]
 80060a8:	f003 021f 	and.w	r2, r3, #31
 80060ac:	490a      	ldr	r1, [pc, #40]	; (80060d8 <__NVIC_DisableIRQ+0x44>)
 80060ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	2001      	movs	r0, #1
 80060b6:	fa00 f202 	lsl.w	r2, r0, r2
 80060ba:	3320      	adds	r3, #32
 80060bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80060c0:	f3bf 8f4f 	dsb	sy
}
 80060c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060c6:	f3bf 8f6f 	isb	sy
}
 80060ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	e000e100 	.word	0xe000e100

080060dc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	4603      	mov	r3, r0
 80060e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	db0c      	blt.n	8006108 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f003 021f 	and.w	r2, r3, #31
 80060f4:	4907      	ldr	r1, [pc, #28]	; (8006114 <__NVIC_ClearPendingIRQ+0x38>)
 80060f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2001      	movs	r0, #1
 80060fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006102:	3360      	adds	r3, #96	; 0x60
 8006104:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr
 8006114:	e000e100 	.word	0xe000e100

08006118 <_ZN3dmaC1EP11DMA_TypeDef>:
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
static const char *TAG = "DMA";
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
static const uint8_t Channel_Index[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};

dma::dma(DMA_TypeDef *dma){
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2205      	movs	r2, #5
 8006126:	741a      	strb	r2, [r3, #16]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	220b      	movs	r2, #11
 800612c:	745a      	strb	r2, [r3, #17]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	615a      	str	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	619a      	str	r2, [r3, #24]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	771a      	strb	r2, [r3, #28]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	621a      	str	r2, [r3, #32]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	625a      	str	r2, [r3, #36]	; 0x24
	_dma = dma;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	609a      	str	r2, [r3, #8]
}
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4618      	mov	r0, r3
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <_ZN3dma9ClearIFCREm>:

void dma::ClearIFCR(__IO uint32_t Value){
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b03      	cmp	r3, #3
 8006170:	d804      	bhi.n	800617c <_ZN3dma9ClearIFCREm+0x1c>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	683a      	ldr	r2, [r7, #0]
 8006178:	609a      	str	r2, [r3, #8]
}
 800617a:	e003      	b.n	8006184 <_ZN3dma9ClearIFCREm+0x24>
	(Stream < 4)? (_dma -> LIFCR = Value) : (_dma -> HIFCR = Value);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	60da      	str	r2, [r3, #12]
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <_ZN3dma16ClearAllIntrFlagEv>:
void dma::ClearAllIntrFlag(void){
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	ClearIFCR((0x3FU << _Intr_Index));
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	223f      	movs	r2, #63	; 0x3f
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f7ff ffdb 	bl	8006160 <_ZN3dma9ClearIFCREm>
}
 80061aa:	bf00      	nop
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_ZN3dma4stopEv>:
	}

	return ret;
}

stm_ret_t dma::stop(void){
 80061b2:	b590      	push	{r4, r7, lr}
 80061b4:	b087      	sub	sp, #28
 80061b6:	af02      	add	r7, sp, #8
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
	stm_ret_t ret;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	605a      	str	r2, [r3, #4]

	if(_state == STM_BUSY){
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	7c1b      	ldrb	r3, [r3, #16]
 80061cc:	2b04      	cmp	r3, #4
 80061ce:	d14d      	bne.n	800626c <_ZN3dma4stopEv+0xba>
		_state = STM_READY;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	2205      	movs	r2, #5
 80061d4:	741a      	strb	r2, [r3, #16]
		_conf -> stream -> CR  &= ~(DMA_SxCR_TCIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE | DMA_SxCR_HTIE);
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	68db      	ldr	r3, [r3, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 021e 	bic.w	r2, r2, #30
 80061e8:	601a      	str	r2, [r3, #0]
		_conf -> stream -> FCR &=~ DMA_SxFCR_FEIE;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695a      	ldr	r2, [r3, #20]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061fc:	615a      	str	r2, [r3, #20]
		_conf -> stream -> CR  &=~ DMA_SxCR_EN;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

		ret = wait_flag_in_register_timeout(&(_conf -> stream -> CR), DMA_SxCR_EN, FLAG_RESET, 5U);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	68fc      	ldr	r4, [r7, #12]
 800621c:	4638      	mov	r0, r7
 800621e:	2305      	movs	r3, #5
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	2300      	movs	r3, #0
 8006224:	2201      	movs	r2, #1
 8006226:	f003 f91b 	bl	8009460 <wait_flag_in_register_timeout>
 800622a:	4622      	mov	r2, r4
 800622c:	463b      	mov	r3, r7
 800622e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006232:	e882 0003 	stmia.w	r2, {r0, r1}
		if(is_timeout(&ret)){
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	f003 f98b 	bl	8009552 <is_timeout>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <_ZN3dma4stopEv+0x9a>
#if CONFIG_USE_LOG_MONITOR && DMA_LOG
			STM_LOGE(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
			set_return_line(&ret, __LINE__);
 8006242:	21b8      	movs	r1, #184	; 0xb8
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f003 f964 	bl	8009512 <set_return_line>
			return ret;
 800624a:	e015      	b.n	8006278 <_ZN3dma4stopEv+0xc6>
		}

		ClearAllIntrFlag();
 800624c:	68b8      	ldr	r0, [r7, #8]
 800624e:	f7ff ff9f 	bl	8006190 <_ZN3dma16ClearAllIntrFlagEv>

		__NVIC_ClearPendingIRQ(_IRQn);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff ff3f 	bl	80060dc <__NVIC_ClearPendingIRQ>
		__NVIC_DisableIRQ(_IRQn);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff ff15 	bl	8006094 <__NVIC_DisableIRQ>
#endif /* CONFIG_USE_LOG_MONITOR && DMA_LOG */
		set_return(&ret, STM_ERR, __LINE__);
		return ret;
	}

	return ret;
 800626a:	e005      	b.n	8006278 <_ZN3dma4stopEv+0xc6>
		set_return(&ret, STM_ERR, __LINE__);
 800626c:	22c9      	movs	r2, #201	; 0xc9
 800626e:	2100      	movs	r1, #0
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f003 f93b 	bl	80094ec <set_return>
		return ret;
 8006276:	bf00      	nop
}
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bd90      	pop	{r4, r7, pc}

08006280 <_ZN3dma11get_counterEv>:
	}

	return ret;
}

uint16_t dma::get_counter(void){
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	return _conf -> stream -> NDTR;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	b29b      	uxth	r3, r3
}
 8006292:	4618      	mov	r0, r3
 8006294:	370c      	adds	r7, #12
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr

0800629e <_ZN3dma10get_configEv>:

dma_config_t *dma::get_config(void){
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return _conf;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68db      	ldr	r3, [r3, #12]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
	...

080062b8 <_Z41__static_initialization_and_destruction_0ii>:
dma dma2_7(DMA2);
dma_t dma2_stream7 = &dma2_7;
void DMA2_Stream7_IRQHandler(void);
void DMA2_Stream7_IRQHandler(void){
	DMA_IRQ_Handler(DMA2, DMA2_Stream7, &dma2_7);
}
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d144      	bne.n	8006352 <_Z41__static_initialization_and_destruction_0ii+0x9a>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d13f      	bne.n	8006352 <_Z41__static_initialization_and_destruction_0ii+0x9a>
dma dma1_0(DMA1);
 80062d2:	4922      	ldr	r1, [pc, #136]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062d4:	4822      	ldr	r0, [pc, #136]	; (8006360 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80062d6:	f7ff ff1f 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_1(DMA1);
 80062da:	4920      	ldr	r1, [pc, #128]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062dc:	4821      	ldr	r0, [pc, #132]	; (8006364 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80062de:	f7ff ff1b 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_2(DMA1);
 80062e2:	491e      	ldr	r1, [pc, #120]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062e4:	4820      	ldr	r0, [pc, #128]	; (8006368 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80062e6:	f7ff ff17 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_3(DMA1);
 80062ea:	491c      	ldr	r1, [pc, #112]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062ec:	481f      	ldr	r0, [pc, #124]	; (800636c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80062ee:	f7ff ff13 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_4(DMA1);
 80062f2:	491a      	ldr	r1, [pc, #104]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062f4:	481e      	ldr	r0, [pc, #120]	; (8006370 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80062f6:	f7ff ff0f 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_5(DMA1);
 80062fa:	4918      	ldr	r1, [pc, #96]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062fc:	481d      	ldr	r0, [pc, #116]	; (8006374 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80062fe:	f7ff ff0b 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_6(DMA1);
 8006302:	4916      	ldr	r1, [pc, #88]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8006304:	481c      	ldr	r0, [pc, #112]	; (8006378 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8006306:	f7ff ff07 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma1_7(DMA1);
 800630a:	4914      	ldr	r1, [pc, #80]	; (800635c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800630c:	481b      	ldr	r0, [pc, #108]	; (800637c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800630e:	f7ff ff03 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_0(DMA2);
 8006312:	491b      	ldr	r1, [pc, #108]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8006314:	481b      	ldr	r0, [pc, #108]	; (8006384 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8006316:	f7ff feff 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_1(DMA2);
 800631a:	4919      	ldr	r1, [pc, #100]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800631c:	481a      	ldr	r0, [pc, #104]	; (8006388 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 800631e:	f7ff fefb 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_2(DMA2);
 8006322:	4917      	ldr	r1, [pc, #92]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8006324:	4819      	ldr	r0, [pc, #100]	; (800638c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8006326:	f7ff fef7 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_3(DMA2);
 800632a:	4915      	ldr	r1, [pc, #84]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800632c:	4818      	ldr	r0, [pc, #96]	; (8006390 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 800632e:	f7ff fef3 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_4(DMA2);
 8006332:	4913      	ldr	r1, [pc, #76]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8006334:	4817      	ldr	r0, [pc, #92]	; (8006394 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8006336:	f7ff feef 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_5(DMA2);
 800633a:	4911      	ldr	r1, [pc, #68]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800633c:	4816      	ldr	r0, [pc, #88]	; (8006398 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800633e:	f7ff feeb 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_6(DMA2);
 8006342:	490f      	ldr	r1, [pc, #60]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8006344:	4815      	ldr	r0, [pc, #84]	; (800639c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8006346:	f7ff fee7 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
dma dma2_7(DMA2);
 800634a:	490d      	ldr	r1, [pc, #52]	; (8006380 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800634c:	4814      	ldr	r0, [pc, #80]	; (80063a0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 800634e:	f7ff fee3 	bl	8006118 <_ZN3dmaC1EP11DMA_TypeDef>
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	40026000 	.word	0x40026000
 8006360:	2000b35c 	.word	0x2000b35c
 8006364:	2000b384 	.word	0x2000b384
 8006368:	2000b3ac 	.word	0x2000b3ac
 800636c:	2000b3d4 	.word	0x2000b3d4
 8006370:	2000b3fc 	.word	0x2000b3fc
 8006374:	2000b424 	.word	0x2000b424
 8006378:	2000b44c 	.word	0x2000b44c
 800637c:	2000b474 	.word	0x2000b474
 8006380:	40026400 	.word	0x40026400
 8006384:	2000b49c 	.word	0x2000b49c
 8006388:	2000b4c4 	.word	0x2000b4c4
 800638c:	2000b4ec 	.word	0x2000b4ec
 8006390:	2000b514 	.word	0x2000b514
 8006394:	2000b53c 	.word	0x2000b53c
 8006398:	2000b564 	.word	0x2000b564
 800639c:	2000b58c 	.word	0x2000b58c
 80063a0:	2000b5b4 	.word	0x2000b5b4

080063a4 <_GLOBAL__sub_I__ZN3dmaC2EP11DMA_TypeDef>:
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80063ac:	2001      	movs	r0, #1
 80063ae:	f7ff ff83 	bl	80062b8 <_Z41__static_initialization_and_destruction_0ii>
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <EXTI_IRQHandler>:
void exti_unregister_event_handler(uint16_t pin){
	handler_callback[pin] = NULL;
}

extern "C"{
void EXTI_IRQHandler(uint16_t Pin){
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	80fb      	strh	r3, [r7, #6]
	if(EXTI -> PR & (1U << Pin)){
 80063be:	4b14      	ldr	r3, [pc, #80]	; (8006410 <EXTI_IRQHandler+0x5c>)
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	2101      	movs	r1, #1
 80063c6:	fa01 f303 	lsl.w	r3, r1, r3
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bf14      	ite	ne
 80063d0:	2301      	movne	r3, #1
 80063d2:	2300      	moveq	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d015      	beq.n	8006406 <EXTI_IRQHandler+0x52>
		EXTI -> PR = (1U << Pin);
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	4a0c      	ldr	r2, [pc, #48]	; (8006410 <EXTI_IRQHandler+0x5c>)
 80063de:	2101      	movs	r1, #1
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	6153      	str	r3, [r2, #20]
		if(handler_callback[Pin] != NULL) handler_callback[Pin](parameter[Pin]);
 80063e6:	88fb      	ldrh	r3, [r7, #6]
 80063e8:	4a0a      	ldr	r2, [pc, #40]	; (8006414 <EXTI_IRQHandler+0x60>)
 80063ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d009      	beq.n	8006406 <EXTI_IRQHandler+0x52>
 80063f2:	88fb      	ldrh	r3, [r7, #6]
 80063f4:	4a07      	ldr	r2, [pc, #28]	; (8006414 <EXTI_IRQHandler+0x60>)
 80063f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063fa:	88fa      	ldrh	r2, [r7, #6]
 80063fc:	4906      	ldr	r1, [pc, #24]	; (8006418 <EXTI_IRQHandler+0x64>)
 80063fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006402:	4610      	mov	r0, r2
 8006404:	4798      	blx	r3
	}
}
 8006406:	bf00      	nop
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	40013c00 	.word	0x40013c00
 8006414:	2000b5dc 	.word	0x2000b5dc
 8006418:	2000b61c 	.word	0x2000b61c

0800641c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void){
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(0);
 8006420:	2000      	movs	r0, #0
 8006422:	f7ff ffc7 	bl	80063b4 <EXTI_IRQHandler>
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}

0800642a <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800642a:	b580      	push	{r7, lr}
 800642c:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(1);
 800642e:	2001      	movs	r0, #1
 8006430:	f7ff ffc0 	bl	80063b4 <EXTI_IRQHandler>
}
 8006434:	bf00      	nop
 8006436:	bd80      	pop	{r7, pc}

08006438 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(2);
 800643c:	2002      	movs	r0, #2
 800643e:	f7ff ffb9 	bl	80063b4 <EXTI_IRQHandler>
}
 8006442:	bf00      	nop
 8006444:	bd80      	pop	{r7, pc}

08006446 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8006446:	b580      	push	{r7, lr}
 8006448:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(3);
 800644a:	2003      	movs	r0, #3
 800644c:	f7ff ffb2 	bl	80063b4 <EXTI_IRQHandler>
}
 8006450:	bf00      	nop
 8006452:	bd80      	pop	{r7, pc}

08006454 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(4);
 8006458:	2004      	movs	r0, #4
 800645a:	f7ff ffab 	bl	80063b4 <EXTI_IRQHandler>
}
 800645e:	bf00      	nop
 8006460:	bd80      	pop	{r7, pc}

08006462 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8006462:	b580      	push	{r7, lr}
 8006464:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(5);
 8006466:	2005      	movs	r0, #5
 8006468:	f7ff ffa4 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(6);
 800646c:	2006      	movs	r0, #6
 800646e:	f7ff ffa1 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(7);
 8006472:	2007      	movs	r0, #7
 8006474:	f7ff ff9e 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(8);
 8006478:	2008      	movs	r0, #8
 800647a:	f7ff ff9b 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(9);
 800647e:	2009      	movs	r0, #9
 8006480:	f7ff ff98 	bl	80063b4 <EXTI_IRQHandler>
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}

08006488 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
	EXTI_IRQHandler(10);
 800648c:	200a      	movs	r0, #10
 800648e:	f7ff ff91 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(11);
 8006492:	200b      	movs	r0, #11
 8006494:	f7ff ff8e 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(12);
 8006498:	200c      	movs	r0, #12
 800649a:	f7ff ff8b 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(13);
 800649e:	200d      	movs	r0, #13
 80064a0:	f7ff ff88 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(14);
 80064a4:	200e      	movs	r0, #14
 80064a6:	f7ff ff85 	bl	80063b4 <EXTI_IRQHandler>
	EXTI_IRQHandler(15);
 80064aa:	200f      	movs	r0, #15
 80064ac:	f7ff ff82 	bl	80063b4 <EXTI_IRQHandler>
}
 80064b0:	bf00      	nop
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <fmc_sdram_init>:
#define FMC_SDRAM_CMD_TARGET_BANK1              FMC_SDCMR_CTB1
#define FMC_SDRAM_CMD_TARGET_BANK1_2            (0x00000018U)

static sdram_config_t *_conf;
void fmc_sdram_hardware_init(void);
void fmc_sdram_init(sdram_config_t *conf){
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
	_conf = conf;
 80064bc:	4a89      	ldr	r2, [pc, #548]	; (80066e4 <fmc_sdram_init+0x230>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6013      	str	r3, [r2, #0]

	fmc_sdram_hardware_init();
 80064c2:	f000 f9c3 	bl	800684c <_Z23fmc_sdram_hardware_initv>

	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;
 80064c6:	4b88      	ldr	r3, [pc, #544]	; (80066e8 <fmc_sdram_init+0x234>)
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	4a87      	ldr	r2, [pc, #540]	; (80066e8 <fmc_sdram_init+0x234>)
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	6393      	str	r3, [r2, #56]	; 0x38

	if(_conf -> bank == SDRAM_BANK1){
 80064d2:	4b84      	ldr	r3, [pc, #528]	; (80066e4 <fmc_sdram_init+0x230>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d170      	bne.n	80065be <fmc_sdram_init+0x10a>
		/**
		 * Configure control register.
		*/
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 80064dc:	4b83      	ldr	r3, [pc, #524]	; (80066ec <fmc_sdram_init+0x238>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
		tmpreg &=~ 0xFFFFU;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	0c1b      	lsrs	r3, r3, #16
 80064e6:	041b      	lsls	r3, r3, #16
 80064e8:	60fb      	str	r3, [r7, #12]

		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 80064ea:	4b7e      	ldr	r3, [pc, #504]	; (80066e4 <fmc_sdram_init+0x230>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	891b      	ldrh	r3, [r3, #8]
 80064f0:	461a      	mov	r2, r3
 80064f2:	4b7c      	ldr	r3, [pc, #496]	; (80066e4 <fmc_sdram_init+0x230>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	7a9b      	ldrb	r3, [r3, #10]
 80064f8:	4313      	orrs	r3, r2
				| _conf -> rowaddr_size | _conf -> data_size
 80064fa:	4a7a      	ldr	r2, [pc, #488]	; (80066e4 <fmc_sdram_init+0x230>)
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	7ad2      	ldrb	r2, [r2, #11]
 8006500:	4313      	orrs	r3, r2
 8006502:	4a78      	ldr	r2, [pc, #480]	; (80066e4 <fmc_sdram_init+0x230>)
 8006504:	6812      	ldr	r2, [r2, #0]
 8006506:	7b12      	ldrb	r2, [r2, #12]
 8006508:	4313      	orrs	r3, r2
				| _conf -> num_banks | _conf -> cas_latency
 800650a:	4a76      	ldr	r2, [pc, #472]	; (80066e4 <fmc_sdram_init+0x230>)
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	7b52      	ldrb	r2, [r2, #13]
 8006510:	4313      	orrs	r3, r2
 8006512:	4a74      	ldr	r2, [pc, #464]	; (80066e4 <fmc_sdram_init+0x230>)
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	89d2      	ldrh	r2, [r2, #14]
 8006518:	4313      	orrs	r3, r2
			    | _conf ->read_delay;
 800651a:	4a72      	ldr	r2, [pc, #456]	; (80066e4 <fmc_sdram_init+0x230>)
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	8a12      	ldrh	r2, [r2, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	461a      	mov	r2, r3
		tmpreg |= _conf -> clock_cycle | _conf -> coladdr_size
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 800652a:	4b6e      	ldr	r3, [pc, #440]	; (80066e4 <fmc_sdram_init+0x230>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	7c9b      	ldrb	r3, [r3, #18]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d003      	beq.n	800653c <fmc_sdram_init+0x88>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800653a:	60fb      	str	r3, [r7, #12]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 800653c:	4b69      	ldr	r3, [pc, #420]	; (80066e4 <fmc_sdram_init+0x230>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	7cdb      	ldrb	r3, [r3, #19]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <fmc_sdram_init+0x9a>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800654c:	60fb      	str	r3, [r7, #12]

		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 800654e:	4a67      	ldr	r2, [pc, #412]	; (80066ec <fmc_sdram_init+0x238>)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6013      	str	r3, [r2, #0]

		/**
		 * Configure timing register.
		*/
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006554:	4b65      	ldr	r3, [pc, #404]	; (80066ec <fmc_sdram_init+0x238>)
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	60fb      	str	r3, [r7, #12]
		tmpreg &=~ 0xFFFFFFFF;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2300      	movs	r3, #0
 800655e:	60fb      	str	r3, [r7, #12]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006560:	4b60      	ldr	r3, [pc, #384]	; (80066e4 <fmc_sdram_init+0x230>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	1e5a      	subs	r2, r3, #1
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 8006568:	4b5e      	ldr	r3, [pc, #376]	; (80066e4 <fmc_sdram_init+0x230>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	3b01      	subs	r3, #1
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	431a      	orrs	r2, r3
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 8006574:	4b5b      	ldr	r3, [pc, #364]	; (80066e4 <fmc_sdram_init+0x230>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	3b01      	subs	r3, #1
 800657c:	021b      	lsls	r3, r3, #8
 800657e:	431a      	orrs	r2, r3
				| ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006580:	4b58      	ldr	r3, [pc, #352]	; (80066e4 <fmc_sdram_init+0x230>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	3b01      	subs	r3, #1
 8006588:	031b      	lsls	r3, r3, #12
 800658a:	431a      	orrs	r2, r3
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 800658c:	4b55      	ldr	r3, [pc, #340]	; (80066e4 <fmc_sdram_init+0x230>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	3b01      	subs	r3, #1
 8006594:	041b      	lsls	r3, r3, #16
 8006596:	431a      	orrs	r2, r3
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos)
 8006598:	4b52      	ldr	r3, [pc, #328]	; (80066e4 <fmc_sdram_init+0x230>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659e:	3b01      	subs	r3, #1
 80065a0:	051b      	lsls	r3, r3, #20
 80065a2:	431a      	orrs	r2, r3
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80065a4:	4b4f      	ldr	r3, [pc, #316]	; (80066e4 <fmc_sdram_init+0x230>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065aa:	3b01      	subs	r3, #1
 80065ac:	061b      	lsls	r3, r3, #24
 80065ae:	431a      	orrs	r2, r3
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 80065b6:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <fmc_sdram_init+0x238>)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6093      	str	r3, [r2, #8]
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);

		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
	}
}
 80065bc:	e08e      	b.n	80066dc <fmc_sdram_init+0x228>
		__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK1];
 80065be:	4b4b      	ldr	r3, [pc, #300]	; (80066ec <fmc_sdram_init+0x238>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60bb      	str	r3, [r7, #8]
		tmpreg &=~ (FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ca:	60bb      	str	r3, [r7, #8]
		tmpreg |= _conf -> clock_cycle | _conf ->read_delay;
 80065cc:	4b45      	ldr	r3, [pc, #276]	; (80066e4 <fmc_sdram_init+0x230>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	891a      	ldrh	r2, [r3, #8]
 80065d2:	4b44      	ldr	r3, [pc, #272]	; (80066e4 <fmc_sdram_init+0x230>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	8a1b      	ldrh	r3, [r3, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60bb      	str	r3, [r7, #8]
		if(_conf -> read_burst) tmpreg |= FMC_SDCR1_RBURST;
 80065e4:	4b3f      	ldr	r3, [pc, #252]	; (80066e4 <fmc_sdram_init+0x230>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	7cdb      	ldrb	r3, [r3, #19]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <fmc_sdram_init+0x142>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80065f4:	60bb      	str	r3, [r7, #8]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK1] = tmpreg;
 80065f6:	4a3d      	ldr	r2, [pc, #244]	; (80066ec <fmc_sdram_init+0x238>)
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6013      	str	r3, [r2, #0]
		tmpreg = SDRAM_DEVICE -> SDCR[SDRAM_BANK2];
 80065fc:	4b3b      	ldr	r3, [pc, #236]	; (80066ec <fmc_sdram_init+0x238>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	60bb      	str	r3, [r7, #8]
		tmpreg &=~ 0xFFFFU;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	041b      	lsls	r3, r3, #16
 8006608:	60bb      	str	r3, [r7, #8]
		tmpreg |= _conf -> coladdr_size
 800660a:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <fmc_sdram_init+0x230>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	7a9a      	ldrb	r2, [r3, #10]
				| _conf -> rowaddr_size | _conf -> data_size
 8006610:	4b34      	ldr	r3, [pc, #208]	; (80066e4 <fmc_sdram_init+0x230>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	7adb      	ldrb	r3, [r3, #11]
 8006616:	4313      	orrs	r3, r2
 8006618:	b2da      	uxtb	r2, r3
 800661a:	4b32      	ldr	r3, [pc, #200]	; (80066e4 <fmc_sdram_init+0x230>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	7b1b      	ldrb	r3, [r3, #12]
 8006620:	4313      	orrs	r3, r2
 8006622:	b2da      	uxtb	r2, r3
				| _conf -> num_banks | _conf -> cas_latency;
 8006624:	4b2f      	ldr	r3, [pc, #188]	; (80066e4 <fmc_sdram_init+0x230>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	7b5b      	ldrb	r3, [r3, #13]
 800662a:	4313      	orrs	r3, r2
 800662c:	b2db      	uxtb	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	4b2c      	ldr	r3, [pc, #176]	; (80066e4 <fmc_sdram_init+0x230>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	89db      	ldrh	r3, [r3, #14]
 8006636:	4313      	orrs	r3, r2
 8006638:	461a      	mov	r2, r3
		tmpreg |= _conf -> coladdr_size
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4313      	orrs	r3, r2
 800663e:	60bb      	str	r3, [r7, #8]
		if(_conf -> write_protection) tmpreg |= FMC_SDCR1_WP;
 8006640:	4b28      	ldr	r3, [pc, #160]	; (80066e4 <fmc_sdram_init+0x230>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	7c9b      	ldrb	r3, [r3, #18]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <fmc_sdram_init+0x19e>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006650:	60bb      	str	r3, [r7, #8]
		SDRAM_DEVICE -> SDCR[SDRAM_BANK2] = tmpreg;
 8006652:	4a26      	ldr	r2, [pc, #152]	; (80066ec <fmc_sdram_init+0x238>)
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	6053      	str	r3, [r2, #4]
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK1];
 8006658:	4b24      	ldr	r3, [pc, #144]	; (80066ec <fmc_sdram_init+0x238>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	60bb      	str	r3, [r7, #8]
		tmpreg &=~ (FMC_SDTR1_TRC | FMC_SDTR1_TRP);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006668:	60bb      	str	r3, [r7, #8]
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 800666a:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <fmc_sdram_init+0x230>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	3b01      	subs	r3, #1
 8006672:	031a      	lsls	r2, r3, #12
				| ((_conf -> timing.tRP -1U) << FMC_SDTR1_TRP_Pos);
 8006674:	4b1b      	ldr	r3, [pc, #108]	; (80066e4 <fmc_sdram_init+0x230>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667a:	3b01      	subs	r3, #1
 800667c:	051b      	lsls	r3, r3, #20
 800667e:	431a      	orrs	r2, r3
		tmpreg |= ((_conf -> timing.tRC -1U) << FMC_SDTR1_TRC_Pos)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4313      	orrs	r3, r2
 8006684:	60bb      	str	r3, [r7, #8]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK1] = tmpreg;
 8006686:	4a19      	ldr	r2, [pc, #100]	; (80066ec <fmc_sdram_init+0x238>)
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6093      	str	r3, [r2, #8]
		tmpreg = SDRAM_DEVICE ->SDTR[SDRAM_BANK2];
 800668c:	4b17      	ldr	r3, [pc, #92]	; (80066ec <fmc_sdram_init+0x238>)
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	60bb      	str	r3, [r7, #8]
		tmpreg &=~ 0xFFFFFFFF;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2300      	movs	r3, #0
 8006696:	60bb      	str	r3, [r7, #8]
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 8006698:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <fmc_sdram_init+0x230>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	1e5a      	subs	r2, r3, #1
				| ((_conf -> timing.tXSR-1U) << FMC_SDTR1_TXSR_Pos)
 80066a0:	4b10      	ldr	r3, [pc, #64]	; (80066e4 <fmc_sdram_init+0x230>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	3b01      	subs	r3, #1
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	431a      	orrs	r2, r3
				| ((_conf -> timing.tRAS-1U) << FMC_SDTR1_TRAS_Pos)
 80066ac:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <fmc_sdram_init+0x230>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	431a      	orrs	r2, r3
				| ((_conf -> timing.tDPL-1U) << FMC_SDTR1_TWR_Pos)
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <fmc_sdram_init+0x230>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	3b01      	subs	r3, #1
 80066c0:	041b      	lsls	r3, r3, #16
 80066c2:	431a      	orrs	r2, r3
				| ((_conf -> timing.tRCD-1U) << FMC_SDTR1_TRCD_Pos);
 80066c4:	4b07      	ldr	r3, [pc, #28]	; (80066e4 <fmc_sdram_init+0x230>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	3b01      	subs	r3, #1
 80066cc:	061b      	lsls	r3, r3, #24
 80066ce:	431a      	orrs	r2, r3
		tmpreg |= ((_conf -> timing.tMRD-1U) << FMC_SDTR1_TMRD_Pos)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60bb      	str	r3, [r7, #8]
		SDRAM_DEVICE ->SDTR[SDRAM_BANK2] = tmpreg;
 80066d6:	4a05      	ldr	r2, [pc, #20]	; (80066ec <fmc_sdram_init+0x238>)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	60d3      	str	r3, [r2, #12]
}
 80066dc:	bf00      	nop
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	2000b65c 	.word	0x2000b65c
 80066e8:	40023800 	.word	0x40023800
 80066ec:	a0000140 	.word	0xa0000140

080066f0 <fmc_sdram_sendcommand>:

stm_ret_t fmc_sdram_sendcommand(sdram_command_t cmd){
 80066f0:	b084      	sub	sp, #16
 80066f2:	b590      	push	{r4, r7, lr}
 80066f4:	b089      	sub	sp, #36	; 0x24
 80066f6:	af02      	add	r7, sp, #8
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80066fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	stm_ret_t ret;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]

	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDCMR;
 800670e:	4b17      	ldr	r3, [pc, #92]	; (800676c <fmc_sdram_sendcommand+0x7c>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	617b      	str	r3, [r7, #20]
	tmpreg &=~ (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	0d9b      	lsrs	r3, r3, #22
 8006718:	059b      	lsls	r3, r3, #22
 800671a:	617b      	str	r3, [r7, #20]

	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 800671c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800671e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006720:	431a      	orrs	r2, r3
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	3b01      	subs	r3, #1
 8006726:	015b      	lsls	r3, r3, #5
 8006728:	431a      	orrs	r2, r3
		   | (cmd.registermode << FMC_SDCMR_MRD_Pos);
 800672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672c:	025b      	lsls	r3, r3, #9
 800672e:	431a      	orrs	r2, r3
	tmpreg |= cmd.mode | cmd.targer | ((cmd.autorefresh_num-1U) << FMC_SDCMR_NRFS_Pos)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]

	SDRAM_DEVICE -> SDCMR = tmpreg;
 8006736:	4a0d      	ldr	r2, [pc, #52]	; (800676c <fmc_sdram_sendcommand+0x7c>)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	6113      	str	r3, [r2, #16]

	ret = wait_flag_in_register_timeout(&(SDRAM_DEVICE -> SDSR), FMC_SDSR_BUSY, FLAG_RESET, FMC_SDRAM_TIMEOUT);
 800673c:	68fc      	ldr	r4, [r7, #12]
 800673e:	4638      	mov	r0, r7
 8006740:	f241 3388 	movw	r3, #5000	; 0x1388
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	2300      	movs	r3, #0
 8006748:	2220      	movs	r2, #32
 800674a:	4909      	ldr	r1, [pc, #36]	; (8006770 <fmc_sdram_sendcommand+0x80>)
 800674c:	f002 fe88 	bl	8009460 <wait_flag_in_register_timeout>
 8006750:	4622      	mov	r2, r4
 8006752:	463b      	mov	r3, r7
 8006754:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006758:	e882 0003 	stmia.w	r2, {r0, r1}

	return ret;
 800675c:	bf00      	nop
}
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006768:	b004      	add	sp, #16
 800676a:	4770      	bx	lr
 800676c:	a0000140 	.word	0xa0000140
 8006770:	a0000158 	.word	0xa0000158

08006774 <fmc_sdram_setrefreshrate>:

void fmc_sdram_setrefreshrate(uint32_t refreshrate){
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpreg = SDRAM_DEVICE -> SDRTR;
 800677c:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <fmc_sdram_setrefreshrate+0x38>)
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	60fb      	str	r3, [r7, #12]
	tmpreg &=~ FMC_SDRTR_COUNT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006788:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800678c:	60fb      	str	r3, [r7, #12]

	tmpreg |= (refreshrate << FMC_SDRTR_COUNT_Pos);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	005a      	lsls	r2, r3, #1
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

	SDRAM_DEVICE -> SDRTR = tmpreg;
 8006798:	4a04      	ldr	r2, [pc, #16]	; (80067ac <fmc_sdram_setrefreshrate+0x38>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6153      	str	r3, [r2, #20]
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	a0000140 	.word	0xa0000140

080067b0 <sdram_init>:
 * @brief
 *
 * @pre
 * @post
 */
void sdram_init(void){
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08e      	sub	sp, #56	; 0x38
 80067b4:	af02      	add	r7, sp, #8
	sdram_command_t Command;

	Command.mode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80067b6:	2301      	movs	r3, #1
 80067b8:	603b      	str	r3, [r7, #0]
	if(_conf -> bank == SDRAM_BANK1)
 80067ba:	4b23      	ldr	r3, [pc, #140]	; (8006848 <sdram_init+0x98>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d102      	bne.n	80067ca <sdram_init+0x1a>
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK1;
 80067c4:	2310      	movs	r3, #16
 80067c6:	607b      	str	r3, [r7, #4]
 80067c8:	e001      	b.n	80067ce <sdram_init+0x1e>
	else
		Command.targer      = FMC_SDRAM_CMD_TARGET_BANK2;
 80067ca:	2308      	movs	r3, #8
 80067cc:	607b      	str	r3, [r7, #4]
	Command.autorefresh_num = 1;
 80067ce:	2301      	movs	r3, #1
 80067d0:	60bb      	str	r3, [r7, #8]
	Command.registermode    = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	60fb      	str	r3, [r7, #12]
	fmc_sdram_sendcommand(Command);
 80067d6:	f107 0010 	add.w	r0, r7, #16
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	463b      	mov	r3, r7
 80067e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067e2:	f7ff ff85 	bl	80066f0 <fmc_sdram_sendcommand>
	delay_ms(1);
 80067e6:	2001      	movs	r0, #1
 80067e8:	f001 fad8 	bl	8007d9c <delay_ms>
	Command.mode            = FMC_SDRAM_CMD_PALL;
 80067ec:	2302      	movs	r3, #2
 80067ee:	603b      	str	r3, [r7, #0]
	fmc_sdram_sendcommand(Command);
 80067f0:	f107 0018 	add.w	r0, r7, #24
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	463b      	mov	r3, r7
 80067fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067fc:	f7ff ff78 	bl	80066f0 <fmc_sdram_sendcommand>
	Command.mode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006800:	2303      	movs	r3, #3
 8006802:	603b      	str	r3, [r7, #0]
	Command.autorefresh_num      = 2;
 8006804:	2302      	movs	r3, #2
 8006806:	60bb      	str	r3, [r7, #8]
	fmc_sdram_sendcommand(Command);
 8006808:	f107 0020 	add.w	r0, r7, #32
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	463b      	mov	r3, r7
 8006812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006814:	f7ff ff6c 	bl	80066f0 <fmc_sdram_sendcommand>
	Command.mode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006818:	2304      	movs	r3, #4
 800681a:	603b      	str	r3, [r7, #0]
	Command.registermode =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 800681c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8006820:	60fb      	str	r3, [r7, #12]
	fmc_sdram_sendcommand(Command);
 8006822:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	463b      	mov	r3, r7
 800682c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800682e:	f7ff ff5f 	bl	80066f0 <fmc_sdram_sendcommand>
	/* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
		  = [(64ms/4096) * 100MHz] - 20 = 1562.5 - 20 ~ 1542 */
	fmc_sdram_setrefreshrate(_conf -> refreshrate);
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <sdram_init+0x98>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff ff9b 	bl	8006774 <fmc_sdram_setrefreshrate>
}
 800683e:	bf00      	nop
 8006840:	3730      	adds	r7, #48	; 0x30
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	2000b65c 	.word	0x2000b65c

0800684c <_Z23fmc_sdram_hardware_initv>:
 * @brief
 *
 * @pre
 * @post
 */
void fmc_sdram_hardware_init(void){
 800684c:	b580      	push	{r7, lr}
 800684e:	af00      	add	r7, sp, #0
	gpio_port_clock_enable(GPIOC);
 8006850:	48c6      	ldr	r0, [pc, #792]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006852:	f000 f995 	bl	8006b80 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOD);
 8006856:	48c6      	ldr	r0, [pc, #792]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006858:	f000 f992 	bl	8006b80 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOE);
 800685c:	48c5      	ldr	r0, [pc, #788]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 800685e:	f000 f98f 	bl	8006b80 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOF);
 8006862:	48c5      	ldr	r0, [pc, #788]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006864:	f000 f98c 	bl	8006b80 <gpio_port_clock_enable>
	gpio_port_clock_enable(GPIOG);
 8006868:	48c4      	ldr	r0, [pc, #784]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 800686a:	f000 f989 	bl	8006b80 <gpio_port_clock_enable>


/**
 * Initialize Address pin.
 */
	gpio_set_alternatefunction(FMC_A0_P, FMC_A0, AF12_FSMC_SDIO_USB);
 800686e:	220c      	movs	r2, #12
 8006870:	2100      	movs	r1, #0
 8006872:	48c1      	ldr	r0, [pc, #772]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006874:	f000 facd 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A0_P, FMC_A0, GPIO_OUTPUT_PUSHPULL);
 8006878:	2206      	movs	r2, #6
 800687a:	2100      	movs	r1, #0
 800687c:	48be      	ldr	r0, [pc, #760]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 800687e:	f000 fb3a 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A1_P, FMC_A1, AF12_FSMC_SDIO_USB);
 8006882:	220c      	movs	r2, #12
 8006884:	2101      	movs	r1, #1
 8006886:	48bc      	ldr	r0, [pc, #752]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006888:	f000 fac3 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A1_P, FMC_A1, GPIO_OUTPUT_PUSHPULL);
 800688c:	2206      	movs	r2, #6
 800688e:	2101      	movs	r1, #1
 8006890:	48b9      	ldr	r0, [pc, #740]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006892:	f000 fb30 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A2_P, FMC_A2, AF12_FSMC_SDIO_USB);
 8006896:	220c      	movs	r2, #12
 8006898:	2102      	movs	r1, #2
 800689a:	48b7      	ldr	r0, [pc, #732]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 800689c:	f000 fab9 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A2_P, FMC_A2, GPIO_OUTPUT_PUSHPULL);
 80068a0:	2206      	movs	r2, #6
 80068a2:	2102      	movs	r1, #2
 80068a4:	48b4      	ldr	r0, [pc, #720]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068a6:	f000 fb26 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A3_P, FMC_A3, AF12_FSMC_SDIO_USB);
 80068aa:	220c      	movs	r2, #12
 80068ac:	2103      	movs	r1, #3
 80068ae:	48b2      	ldr	r0, [pc, #712]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068b0:	f000 faaf 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A3_P, FMC_A3, GPIO_OUTPUT_PUSHPULL);
 80068b4:	2206      	movs	r2, #6
 80068b6:	2103      	movs	r1, #3
 80068b8:	48af      	ldr	r0, [pc, #700]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068ba:	f000 fb1c 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A4_P, FMC_A4, AF12_FSMC_SDIO_USB);
 80068be:	220c      	movs	r2, #12
 80068c0:	2104      	movs	r1, #4
 80068c2:	48ad      	ldr	r0, [pc, #692]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068c4:	f000 faa5 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A4_P, FMC_A4, GPIO_OUTPUT_PUSHPULL);
 80068c8:	2206      	movs	r2, #6
 80068ca:	2104      	movs	r1, #4
 80068cc:	48aa      	ldr	r0, [pc, #680]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068ce:	f000 fb12 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A5_P, FMC_A5, AF12_FSMC_SDIO_USB);
 80068d2:	220c      	movs	r2, #12
 80068d4:	2105      	movs	r1, #5
 80068d6:	48a8      	ldr	r0, [pc, #672]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068d8:	f000 fa9b 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A5_P, FMC_A5, GPIO_OUTPUT_PUSHPULL);
 80068dc:	2206      	movs	r2, #6
 80068de:	2105      	movs	r1, #5
 80068e0:	48a5      	ldr	r0, [pc, #660]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068e2:	f000 fb08 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A6_P, FMC_A6, AF12_FSMC_SDIO_USB);
 80068e6:	220c      	movs	r2, #12
 80068e8:	210c      	movs	r1, #12
 80068ea:	48a3      	ldr	r0, [pc, #652]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068ec:	f000 fa91 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A6_P, FMC_A6, GPIO_OUTPUT_PUSHPULL);
 80068f0:	2206      	movs	r2, #6
 80068f2:	210c      	movs	r1, #12
 80068f4:	48a0      	ldr	r0, [pc, #640]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 80068f6:	f000 fafe 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A7_P, FMC_A7, AF12_FSMC_SDIO_USB);
 80068fa:	220c      	movs	r2, #12
 80068fc:	210d      	movs	r1, #13
 80068fe:	489e      	ldr	r0, [pc, #632]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006900:	f000 fa87 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A7_P, FMC_A7, GPIO_OUTPUT_PUSHPULL);
 8006904:	2206      	movs	r2, #6
 8006906:	210d      	movs	r1, #13
 8006908:	489b      	ldr	r0, [pc, #620]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 800690a:	f000 faf4 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A8_P, FMC_A8, AF12_FSMC_SDIO_USB);
 800690e:	220c      	movs	r2, #12
 8006910:	210e      	movs	r1, #14
 8006912:	4899      	ldr	r0, [pc, #612]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006914:	f000 fa7d 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A8_P, FMC_A8, GPIO_OUTPUT_PUSHPULL);
 8006918:	2206      	movs	r2, #6
 800691a:	210e      	movs	r1, #14
 800691c:	4896      	ldr	r0, [pc, #600]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 800691e:	f000 faea 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A9_P, FMC_A9, AF12_FSMC_SDIO_USB);
 8006922:	220c      	movs	r2, #12
 8006924:	210f      	movs	r1, #15
 8006926:	4894      	ldr	r0, [pc, #592]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006928:	f000 fa73 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A9_P, FMC_A9, GPIO_OUTPUT_PUSHPULL);
 800692c:	2206      	movs	r2, #6
 800692e:	210f      	movs	r1, #15
 8006930:	4891      	ldr	r0, [pc, #580]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006932:	f000 fae0 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A10_P, FMC_A10, AF12_FSMC_SDIO_USB);
 8006936:	220c      	movs	r2, #12
 8006938:	2100      	movs	r1, #0
 800693a:	4890      	ldr	r0, [pc, #576]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 800693c:	f000 fa69 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A10_P, FMC_A10, GPIO_OUTPUT_PUSHPULL);
 8006940:	2206      	movs	r2, #6
 8006942:	2100      	movs	r1, #0
 8006944:	488d      	ldr	r0, [pc, #564]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006946:	f000 fad6 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_A11_P, FMC_A11, AF12_FSMC_SDIO_USB);
 800694a:	220c      	movs	r2, #12
 800694c:	2101      	movs	r1, #1
 800694e:	488b      	ldr	r0, [pc, #556]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006950:	f000 fa5f 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_A11_P, FMC_A11, GPIO_OUTPUT_PUSHPULL);
 8006954:	2206      	movs	r2, #6
 8006956:	2101      	movs	r1, #1
 8006958:	4888      	ldr	r0, [pc, #544]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 800695a:	f000 facc 	bl	8006ef6 <gpio_set_alternatefunction_type>

/**
 * Initialize dataI/O pin.
 */
	gpio_set_alternatefunction(FMC_D0_P, FMC_D0, AF12_FSMC_SDIO_USB);
 800695e:	220c      	movs	r2, #12
 8006960:	210e      	movs	r1, #14
 8006962:	4883      	ldr	r0, [pc, #524]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006964:	f000 fa55 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D0_P, FMC_D0, GPIO_OUTPUT_PUSHPULL);
 8006968:	2206      	movs	r2, #6
 800696a:	210e      	movs	r1, #14
 800696c:	4880      	ldr	r0, [pc, #512]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 800696e:	f000 fac2 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D1_P, FMC_D1, AF12_FSMC_SDIO_USB);
 8006972:	220c      	movs	r2, #12
 8006974:	210f      	movs	r1, #15
 8006976:	487e      	ldr	r0, [pc, #504]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006978:	f000 fa4b 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D1_P, FMC_D1, GPIO_OUTPUT_PUSHPULL);
 800697c:	2206      	movs	r2, #6
 800697e:	210f      	movs	r1, #15
 8006980:	487b      	ldr	r0, [pc, #492]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006982:	f000 fab8 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D2_P, FMC_D2, AF12_FSMC_SDIO_USB);
 8006986:	220c      	movs	r2, #12
 8006988:	2100      	movs	r1, #0
 800698a:	4879      	ldr	r0, [pc, #484]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 800698c:	f000 fa41 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D2_P, FMC_D2, GPIO_OUTPUT_PUSHPULL);
 8006990:	2206      	movs	r2, #6
 8006992:	2100      	movs	r1, #0
 8006994:	4876      	ldr	r0, [pc, #472]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006996:	f000 faae 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D3_P, FMC_D3, AF12_FSMC_SDIO_USB);
 800699a:	220c      	movs	r2, #12
 800699c:	2101      	movs	r1, #1
 800699e:	4874      	ldr	r0, [pc, #464]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 80069a0:	f000 fa37 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D3_P, FMC_D3, GPIO_OUTPUT_PUSHPULL);
 80069a4:	2206      	movs	r2, #6
 80069a6:	2101      	movs	r1, #1
 80069a8:	4871      	ldr	r0, [pc, #452]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 80069aa:	f000 faa4 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D4_P, FMC_D4, AF12_FSMC_SDIO_USB);
 80069ae:	220c      	movs	r2, #12
 80069b0:	2107      	movs	r1, #7
 80069b2:	4870      	ldr	r0, [pc, #448]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069b4:	f000 fa2d 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D4_P, FMC_D4, GPIO_OUTPUT_PUSHPULL);
 80069b8:	2206      	movs	r2, #6
 80069ba:	2107      	movs	r1, #7
 80069bc:	486d      	ldr	r0, [pc, #436]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069be:	f000 fa9a 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D5_P, FMC_D5, AF12_FSMC_SDIO_USB);
 80069c2:	220c      	movs	r2, #12
 80069c4:	2108      	movs	r1, #8
 80069c6:	486b      	ldr	r0, [pc, #428]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069c8:	f000 fa23 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D5_P, FMC_D5, GPIO_OUTPUT_PUSHPULL);
 80069cc:	2206      	movs	r2, #6
 80069ce:	2108      	movs	r1, #8
 80069d0:	4868      	ldr	r0, [pc, #416]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069d2:	f000 fa90 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D6_P, FMC_D6, AF12_FSMC_SDIO_USB);
 80069d6:	220c      	movs	r2, #12
 80069d8:	2109      	movs	r1, #9
 80069da:	4866      	ldr	r0, [pc, #408]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069dc:	f000 fa19 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D6_P, FMC_D6, GPIO_OUTPUT_PUSHPULL);
 80069e0:	2206      	movs	r2, #6
 80069e2:	2109      	movs	r1, #9
 80069e4:	4863      	ldr	r0, [pc, #396]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069e6:	f000 fa86 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D7_P, FMC_D7, AF12_FSMC_SDIO_USB);
 80069ea:	220c      	movs	r2, #12
 80069ec:	210a      	movs	r1, #10
 80069ee:	4861      	ldr	r0, [pc, #388]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069f0:	f000 fa0f 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D7_P, FMC_D7, GPIO_OUTPUT_PUSHPULL);
 80069f4:	2206      	movs	r2, #6
 80069f6:	210a      	movs	r1, #10
 80069f8:	485e      	ldr	r0, [pc, #376]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 80069fa:	f000 fa7c 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D8_P, FMC_D8, AF12_FSMC_SDIO_USB);
 80069fe:	220c      	movs	r2, #12
 8006a00:	210b      	movs	r1, #11
 8006a02:	485c      	ldr	r0, [pc, #368]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a04:	f000 fa05 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D8_P, FMC_D8, GPIO_OUTPUT_PUSHPULL);
 8006a08:	2206      	movs	r2, #6
 8006a0a:	210b      	movs	r1, #11
 8006a0c:	4859      	ldr	r0, [pc, #356]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a0e:	f000 fa72 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D9_P, FMC_D9, AF12_FSMC_SDIO_USB);
 8006a12:	220c      	movs	r2, #12
 8006a14:	210c      	movs	r1, #12
 8006a16:	4857      	ldr	r0, [pc, #348]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a18:	f000 f9fb 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D9_P, FMC_D9, GPIO_OUTPUT_PUSHPULL);
 8006a1c:	2206      	movs	r2, #6
 8006a1e:	210c      	movs	r1, #12
 8006a20:	4854      	ldr	r0, [pc, #336]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a22:	f000 fa68 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D10_P, FMC_D10, AF12_FSMC_SDIO_USB);
 8006a26:	220c      	movs	r2, #12
 8006a28:	210d      	movs	r1, #13
 8006a2a:	4852      	ldr	r0, [pc, #328]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a2c:	f000 f9f1 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D10_P, FMC_D10, GPIO_OUTPUT_PUSHPULL);
 8006a30:	2206      	movs	r2, #6
 8006a32:	210d      	movs	r1, #13
 8006a34:	484f      	ldr	r0, [pc, #316]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a36:	f000 fa5e 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D11_P, FMC_D11, AF12_FSMC_SDIO_USB);
 8006a3a:	220c      	movs	r2, #12
 8006a3c:	210e      	movs	r1, #14
 8006a3e:	484d      	ldr	r0, [pc, #308]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a40:	f000 f9e7 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D11_P, FMC_D11, GPIO_OUTPUT_PUSHPULL);
 8006a44:	2206      	movs	r2, #6
 8006a46:	210e      	movs	r1, #14
 8006a48:	484a      	ldr	r0, [pc, #296]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a4a:	f000 fa54 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D12_P, FMC_D12, AF12_FSMC_SDIO_USB);
 8006a4e:	220c      	movs	r2, #12
 8006a50:	210f      	movs	r1, #15
 8006a52:	4848      	ldr	r0, [pc, #288]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a54:	f000 f9dd 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D12_P, FMC_D12, GPIO_OUTPUT_PUSHPULL);
 8006a58:	2206      	movs	r2, #6
 8006a5a:	210f      	movs	r1, #15
 8006a5c:	4845      	ldr	r0, [pc, #276]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006a5e:	f000 fa4a 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D13_P, FMC_D13, AF12_FSMC_SDIO_USB);
 8006a62:	220c      	movs	r2, #12
 8006a64:	2108      	movs	r1, #8
 8006a66:	4842      	ldr	r0, [pc, #264]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006a68:	f000 f9d3 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D13_P, FMC_D13, GPIO_OUTPUT_PUSHPULL);
 8006a6c:	2206      	movs	r2, #6
 8006a6e:	2108      	movs	r1, #8
 8006a70:	483f      	ldr	r0, [pc, #252]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006a72:	f000 fa40 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D14_P, FMC_D14, AF12_FSMC_SDIO_USB);
 8006a76:	220c      	movs	r2, #12
 8006a78:	2109      	movs	r1, #9
 8006a7a:	483d      	ldr	r0, [pc, #244]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006a7c:	f000 f9c9 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D14_P, FMC_D14, GPIO_OUTPUT_PUSHPULL);
 8006a80:	2206      	movs	r2, #6
 8006a82:	2109      	movs	r1, #9
 8006a84:	483a      	ldr	r0, [pc, #232]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006a86:	f000 fa36 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_D15_P, FMC_D15, AF12_FSMC_SDIO_USB);
 8006a8a:	220c      	movs	r2, #12
 8006a8c:	210a      	movs	r1, #10
 8006a8e:	4838      	ldr	r0, [pc, #224]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006a90:	f000 f9bf 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_D15_P, FMC_D15, GPIO_OUTPUT_PUSHPULL);
 8006a94:	2206      	movs	r2, #6
 8006a96:	210a      	movs	r1, #10
 8006a98:	4835      	ldr	r0, [pc, #212]	; (8006b70 <_Z23fmc_sdram_hardware_initv+0x324>)
 8006a9a:	f000 fa2c 	bl	8006ef6 <gpio_set_alternatefunction_type>

/**
 * Initialize control pin.
 */
	gpio_set_alternatefunction(FMC_NBL0_P, FMC_NBL0, AF12_FSMC_SDIO_USB);
 8006a9e:	220c      	movs	r2, #12
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4834      	ldr	r0, [pc, #208]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006aa4:	f000 f9b5 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL0_P, FMC_NBL0, GPIO_OUTPUT_PUSHPULL);
 8006aa8:	2206      	movs	r2, #6
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4831      	ldr	r0, [pc, #196]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006aae:	f000 fa22 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NBL1_P, FMC_NBL1, AF12_FSMC_SDIO_USB);
 8006ab2:	220c      	movs	r2, #12
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	482f      	ldr	r0, [pc, #188]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006ab8:	f000 f9ab 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NBL1_P, FMC_NBL1, GPIO_OUTPUT_PUSHPULL);
 8006abc:	2206      	movs	r2, #6
 8006abe:	2101      	movs	r1, #1
 8006ac0:	482c      	ldr	r0, [pc, #176]	; (8006b74 <_Z23fmc_sdram_hardware_initv+0x328>)
 8006ac2:	f000 fa18 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA0_P, FMC_BA0, AF12_FSMC_SDIO_USB);
 8006ac6:	220c      	movs	r2, #12
 8006ac8:	2104      	movs	r1, #4
 8006aca:	482c      	ldr	r0, [pc, #176]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006acc:	f000 f9a1 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA0_P, FMC_BA0, GPIO_OUTPUT_PUSHPULL);
 8006ad0:	2206      	movs	r2, #6
 8006ad2:	2104      	movs	r1, #4
 8006ad4:	4829      	ldr	r0, [pc, #164]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006ad6:	f000 fa0e 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_BA1_P, FMC_BA1, AF12_FSMC_SDIO_USB);
 8006ada:	220c      	movs	r2, #12
 8006adc:	2105      	movs	r1, #5
 8006ade:	4827      	ldr	r0, [pc, #156]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006ae0:	f000 f997 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_BA1_P, FMC_BA1, GPIO_OUTPUT_PUSHPULL);
 8006ae4:	2206      	movs	r2, #6
 8006ae6:	2105      	movs	r1, #5
 8006ae8:	4824      	ldr	r0, [pc, #144]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006aea:	f000 fa04 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CAS_P, FMC_CAS, AF12_FSMC_SDIO_USB);
 8006aee:	220c      	movs	r2, #12
 8006af0:	210f      	movs	r1, #15
 8006af2:	4822      	ldr	r0, [pc, #136]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006af4:	f000 f98d 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CAS_P, FMC_CAS, GPIO_OUTPUT_PUSHPULL);
 8006af8:	2206      	movs	r2, #6
 8006afa:	210f      	movs	r1, #15
 8006afc:	481f      	ldr	r0, [pc, #124]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006afe:	f000 f9fa 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_RAS_P, FMC_RAS, AF12_FSMC_SDIO_USB);
 8006b02:	220c      	movs	r2, #12
 8006b04:	210b      	movs	r1, #11
 8006b06:	481c      	ldr	r0, [pc, #112]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006b08:	f000 f983 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_RAS_P, FMC_RAS, GPIO_OUTPUT_PUSHPULL);
 8006b0c:	2206      	movs	r2, #6
 8006b0e:	210b      	movs	r1, #11
 8006b10:	4819      	ldr	r0, [pc, #100]	; (8006b78 <_Z23fmc_sdram_hardware_initv+0x32c>)
 8006b12:	f000 f9f0 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CLK_P, FMC_CLK, AF12_FSMC_SDIO_USB);
 8006b16:	220c      	movs	r2, #12
 8006b18:	2108      	movs	r1, #8
 8006b1a:	4818      	ldr	r0, [pc, #96]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006b1c:	f000 f979 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CLK_P, FMC_CLK, GPIO_OUTPUT_PUSHPULL);
 8006b20:	2206      	movs	r2, #6
 8006b22:	2108      	movs	r1, #8
 8006b24:	4815      	ldr	r0, [pc, #84]	; (8006b7c <_Z23fmc_sdram_hardware_initv+0x330>)
 8006b26:	f000 f9e6 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NWE_P, FMC_NWE, AF12_FSMC_SDIO_USB);
 8006b2a:	220c      	movs	r2, #12
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	480f      	ldr	r0, [pc, #60]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006b30:	f000 f96f 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NWE_P, FMC_NWE, GPIO_OUTPUT_PUSHPULL);
 8006b34:	2206      	movs	r2, #6
 8006b36:	2100      	movs	r1, #0
 8006b38:	480c      	ldr	r0, [pc, #48]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006b3a:	f000 f9dc 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_NE_P, FMC_NE, AF12_FSMC_SDIO_USB);
 8006b3e:	220c      	movs	r2, #12
 8006b40:	2102      	movs	r1, #2
 8006b42:	480a      	ldr	r0, [pc, #40]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006b44:	f000 f965 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_NE_P, FMC_NE, GPIO_OUTPUT_PUSHPULL);
 8006b48:	2206      	movs	r2, #6
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	4807      	ldr	r0, [pc, #28]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006b4e:	f000 f9d2 	bl	8006ef6 <gpio_set_alternatefunction_type>

	gpio_set_alternatefunction(FMC_CKE_P, FMC_CKE, AF12_FSMC_SDIO_USB);
 8006b52:	220c      	movs	r2, #12
 8006b54:	2103      	movs	r1, #3
 8006b56:	4805      	ldr	r0, [pc, #20]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006b58:	f000 f95b 	bl	8006e12 <gpio_set_alternatefunction>
	gpio_set_alternatefunction_type(FMC_CKE_P, FMC_CKE, GPIO_OUTPUT_PUSHPULL);
 8006b5c:	2206      	movs	r2, #6
 8006b5e:	2103      	movs	r1, #3
 8006b60:	4802      	ldr	r0, [pc, #8]	; (8006b6c <_Z23fmc_sdram_hardware_initv+0x320>)
 8006b62:	f000 f9c8 	bl	8006ef6 <gpio_set_alternatefunction_type>

}
 8006b66:	bf00      	nop
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40020800 	.word	0x40020800
 8006b70:	40020c00 	.word	0x40020c00
 8006b74:	40021000 	.word	0x40021000
 8006b78:	40021400 	.word	0x40021400
 8006b7c:	40021800 	.word	0x40021800

08006b80 <gpio_port_clock_enable>:
 *
 * @pre
 * @post
 * @param port gpio port selected.
 */
void gpio_port_clock_enable(GPIO_TypeDef *port){
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
#if defined(GPIOA)
	if(port == GPIOA) {GPIOA_CLOCKENABLE(); return;}
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a33      	ldr	r2, [pc, #204]	; (8006c58 <gpio_port_clock_enable+0xd8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d106      	bne.n	8006b9e <gpio_port_clock_enable+0x1e>
 8006b90:	4b32      	ldr	r3, [pc, #200]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b94:	4a31      	ldr	r2, [pc, #196]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9c:	e057      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOA */
#if defined(GPIOB)
	if(port == GPIOB) {GPIOB_CLOCKENABLE(); return;}
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a2f      	ldr	r2, [pc, #188]	; (8006c60 <gpio_port_clock_enable+0xe0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d106      	bne.n	8006bb4 <gpio_port_clock_enable+0x34>
 8006ba6:	4b2d      	ldr	r3, [pc, #180]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006baa:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bac:	f043 0302 	orr.w	r3, r3, #2
 8006bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bb2:	e04c      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOB */
#if defined(GPIOC)
	if(port == GPIOC) {GPIOC_CLOCKENABLE(); return;}
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a2b      	ldr	r2, [pc, #172]	; (8006c64 <gpio_port_clock_enable+0xe4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d106      	bne.n	8006bca <gpio_port_clock_enable+0x4a>
 8006bbc:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc0:	4a26      	ldr	r2, [pc, #152]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bc2:	f043 0304 	orr.w	r3, r3, #4
 8006bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8006bc8:	e041      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOC */
#if defined(GPIOD)
	if(port == GPIOD) {GPIOD_CLOCKENABLE(); return;}
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a26      	ldr	r2, [pc, #152]	; (8006c68 <gpio_port_clock_enable+0xe8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d106      	bne.n	8006be0 <gpio_port_clock_enable+0x60>
 8006bd2:	4b22      	ldr	r3, [pc, #136]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	4a21      	ldr	r2, [pc, #132]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bd8:	f043 0308 	orr.w	r3, r3, #8
 8006bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bde:	e036      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOD */
#if defined(GPIOE)
	if(port == GPIOE) {GPIOE_CLOCKENABLE(); return;}
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a22      	ldr	r2, [pc, #136]	; (8006c6c <gpio_port_clock_enable+0xec>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d106      	bne.n	8006bf6 <gpio_port_clock_enable+0x76>
 8006be8:	4b1c      	ldr	r3, [pc, #112]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bec:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006bee:	f043 0310 	orr.w	r3, r3, #16
 8006bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf4:	e02b      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOE */
#if defined(GPIOF)
	if(port == GPIOF) {GPIOF_CLOCKENABLE(); return;}
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a1d      	ldr	r2, [pc, #116]	; (8006c70 <gpio_port_clock_enable+0xf0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d106      	bne.n	8006c0c <gpio_port_clock_enable+0x8c>
 8006bfe:	4b17      	ldr	r3, [pc, #92]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c04:	f043 0320 	orr.w	r3, r3, #32
 8006c08:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0a:	e020      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOF */
#if defined(GPIOG)
	if(port == GPIOG) {GPIOG_CLOCKENABLE(); return;}
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <gpio_port_clock_enable+0xf4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d106      	bne.n	8006c22 <gpio_port_clock_enable+0xa2>
 8006c14:	4b11      	ldr	r3, [pc, #68]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c20:	e015      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOG */
#if defined(GPIOH)
	if(port == GPIOH) {GPIOH_CLOCKENABLE(); return;}
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <gpio_port_clock_enable+0xf8>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d106      	bne.n	8006c38 <gpio_port_clock_enable+0xb8>
 8006c2a:	4b0c      	ldr	r3, [pc, #48]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2e:	4a0b      	ldr	r2, [pc, #44]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c34:	6313      	str	r3, [r2, #48]	; 0x30
 8006c36:	e00a      	b.n	8006c4e <gpio_port_clock_enable+0xce>
#endif /* defined(GPIOH */
#if defined(GPIOI)
	if(port == GPIOI) {GPIOI_CLOCKENABLE(); return;}
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	4a10      	ldr	r2, [pc, #64]	; (8006c7c <gpio_port_clock_enable+0xfc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d106      	bne.n	8006c4e <gpio_port_clock_enable+0xce>
 8006c40:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c44:	4a05      	ldr	r2, [pc, #20]	; (8006c5c <gpio_port_clock_enable+0xdc>)
 8006c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c4c:	bf00      	nop
#endif /* defined(GPIO */

}
 8006c4e:	370c      	adds	r7, #12
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40020000 	.word	0x40020000
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	40020400 	.word	0x40020400
 8006c64:	40020800 	.word	0x40020800
 8006c68:	40020c00 	.word	0x40020c00
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	40021400 	.word	0x40021400
 8006c74:	40021800 	.word	0x40021800
 8006c78:	40021c00 	.word	0x40021c00
 8006c7c:	40022000 	.word	0x40022000

08006c80 <gpio_set_mode>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio pin mode.
 */
void gpio_set_mode(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	707b      	strb	r3, [r7, #1]
	__IO uint32_t tmpreg = 0U;
 8006c90:	2300      	movs	r3, #0
 8006c92:	60fb      	str	r3, [r7, #12]
	/* *************************************************** */
	if(mode <=  GPIO_INPUT_PULLDOWN){ // GPIO_INPUT.
 8006c94:	787b      	ldrb	r3, [r7, #1]
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d833      	bhi.n	8006d02 <gpio_set_mode+0x82>
		port -> MODER &=~ (3U << (pin * 2));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	2103      	movs	r1, #3
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	401a      	ands	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	601a      	str	r2, [r3, #0]

		tmpreg = port -> PUPDR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	60fb      	str	r3, [r7, #12]
		tmpreg &=~ (3U << (pin * 2));
 8006cb6:	887b      	ldrh	r3, [r7, #2]
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	2203      	movs	r2, #3
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	43da      	mvns	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
		switch(mode){
 8006cc8:	787b      	ldrb	r3, [r7, #1]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d002      	beq.n	8006cd4 <gpio_set_mode+0x54>
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d008      	beq.n	8006ce4 <gpio_set_mode+0x64>
			break;
			case GPIO_INPUT_PULLDOWN:
				tmpreg |=  (2U << (pin * 2));
			break;
			default:
			break;
 8006cd2:	e00f      	b.n	8006cf4 <gpio_set_mode+0x74>
				tmpreg |=  (1U << (pin * 2));
 8006cd4:	887b      	ldrh	r3, [r7, #2]
 8006cd6:	005b      	lsls	r3, r3, #1
 8006cd8:	2201      	movs	r2, #1
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	60fb      	str	r3, [r7, #12]
			break;
 8006ce2:	e007      	b.n	8006cf4 <gpio_set_mode+0x74>
				tmpreg |=  (2U << (pin * 2));
 8006ce4:	887b      	ldrh	r3, [r7, #2]
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	2202      	movs	r2, #2
 8006cea:	409a      	lsls	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
			break;
 8006cf2:	bf00      	nop
		}
		port -> PUPDR |=tmpreg;
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	431a      	orrs	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	60da      	str	r2, [r3, #12]
	}
	/* *************************************************** */
	else{ // GPIO_ANALOG.
		port -> MODER |= (3U << (pin * 2));
	}
}
 8006d00:	e081      	b.n	8006e06 <gpio_set_mode+0x186>
	else if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_PUSHPULL_PULLDOWN){ // GPIO_OUTPUT.
 8006d02:	787b      	ldrb	r3, [r7, #1]
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d974      	bls.n	8006df2 <gpio_set_mode+0x172>
 8006d08:	787b      	ldrb	r3, [r7, #1]
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d871      	bhi.n	8006df2 <gpio_set_mode+0x172>
		port -> MODER &=~ (3U << (pin * 2));
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	2103      	movs	r1, #3
 8006d18:	fa01 f303 	lsl.w	r3, r1, r3
 8006d1c:	43db      	mvns	r3, r3
 8006d1e:	401a      	ands	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	601a      	str	r2, [r3, #0]
		port -> MODER |=  (1U << (pin * 2));
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	887b      	ldrh	r3, [r7, #2]
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	601a      	str	r2, [r3, #0]
		if(mode >= GPIO_OUTPUT_OPENDRAIN && mode <=  GPIO_OUTPUT_OPENDRAIN_PULLDOWN) port -> OTYPER |= (1U << pin);
 8006d38:	787b      	ldrb	r3, [r7, #1]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d90c      	bls.n	8006d58 <gpio_set_mode+0xd8>
 8006d3e:	787b      	ldrb	r3, [r7, #1]
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	d809      	bhi.n	8006d58 <gpio_set_mode+0xd8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	887b      	ldrh	r3, [r7, #2]
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	605a      	str	r2, [r3, #4]
 8006d56:	e009      	b.n	8006d6c <gpio_set_mode+0xec>
		else port -> OTYPER &=~ (1U << pin);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	887b      	ldrh	r3, [r7, #2]
 8006d5e:	2101      	movs	r1, #1
 8006d60:	fa01 f303 	lsl.w	r3, r1, r3
 8006d64:	43db      	mvns	r3, r3
 8006d66:	401a      	ands	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	605a      	str	r2, [r3, #4]
		port -> OSPEEDR &=~ (3U << (pin * 2));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689a      	ldr	r2, [r3, #8]
 8006d70:	887b      	ldrh	r3, [r7, #2]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	2103      	movs	r1, #3
 8006d76:	fa01 f303 	lsl.w	r3, r1, r3
 8006d7a:	43db      	mvns	r3, r3
 8006d7c:	401a      	ands	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	609a      	str	r2, [r3, #8]
		port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	887a      	ldrh	r2, [r7, #2]
 8006d88:	0052      	lsls	r2, r2, #1
 8006d8a:	2103      	movs	r1, #3
 8006d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d90:	431a      	orrs	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	609a      	str	r2, [r3, #8]
		tmpreg = port -> PUPDR;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	60fb      	str	r3, [r7, #12]
		tmpreg &=~ (3U << (pin * 2));
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	2203      	movs	r2, #3
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43da      	mvns	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4013      	ands	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
		if(mode == GPIO_OUTPUT_OPENDRAIN_PULLUP || mode == GPIO_OUTPUT_PUSHPULL_PULLUP) tmpreg |=  (1U << (pin * 2));
 8006dae:	787b      	ldrb	r3, [r7, #1]
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d002      	beq.n	8006dba <gpio_set_mode+0x13a>
 8006db4:	787b      	ldrb	r3, [r7, #1]
 8006db6:	2b07      	cmp	r3, #7
 8006db8:	d107      	bne.n	8006dca <gpio_set_mode+0x14a>
 8006dba:	887b      	ldrh	r3, [r7, #2]
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e00c      	b.n	8006de4 <gpio_set_mode+0x164>
		else if(mode == GPIO_OUTPUT_OPENDRAIN_PULLDOWN || mode == GPIO_OUTPUT_PUSHPULL_PULLDOWN) tmpreg |=  (2U << (pin * 2));
 8006dca:	787b      	ldrb	r3, [r7, #1]
 8006dcc:	2b05      	cmp	r3, #5
 8006dce:	d002      	beq.n	8006dd6 <gpio_set_mode+0x156>
 8006dd0:	787b      	ldrb	r3, [r7, #1]
 8006dd2:	2b08      	cmp	r3, #8
 8006dd4:	d106      	bne.n	8006de4 <gpio_set_mode+0x164>
 8006dd6:	887b      	ldrh	r3, [r7, #2]
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	2202      	movs	r2, #2
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
		port -> PUPDR |=tmpreg;
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	431a      	orrs	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
}
 8006df0:	e009      	b.n	8006e06 <gpio_set_mode+0x186>
		port -> MODER |= (3U << (pin * 2));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	2103      	movs	r1, #3
 8006dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8006e00:	431a      	orrs	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
}
 8006e06:	bf00      	nop
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <gpio_set_alternatefunction>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param function Alternate function for gpio pin.
 */
void gpio_set_alternatefunction(GPIO_TypeDef *port, uint16_t pin, gpio_alternatefunction_t function){
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	807b      	strh	r3, [r7, #2]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	707b      	strb	r3, [r7, #1]
	port -> MODER &=~ (3U << (pin*2));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	887b      	ldrh	r3, [r7, #2]
 8006e28:	005b      	lsls	r3, r3, #1
 8006e2a:	2103      	movs	r1, #3
 8006e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e30:	43db      	mvns	r3, r3
 8006e32:	401a      	ands	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]
	port -> MODER |=  (2U << (pin*2));
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	887b      	ldrh	r3, [r7, #2]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	2102      	movs	r1, #2
 8006e42:	fa01 f303 	lsl.w	r3, r1, r3
 8006e46:	431a      	orrs	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]

	port -> OTYPER &=~ (1U<<pin);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	887b      	ldrh	r3, [r7, #2]
 8006e52:	2101      	movs	r1, #1
 8006e54:	fa01 f303 	lsl.w	r3, r1, r3
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	401a      	ands	r2, r3
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	605a      	str	r2, [r3, #4]

	port -> OSPEEDR &=~ (3U << (pin * 2));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	887b      	ldrh	r3, [r7, #2]
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	2103      	movs	r1, #3
 8006e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	401a      	ands	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	609a      	str	r2, [r3, #8]
	port -> OSPEEDR |=  (GPIO_OUTPUTSPEED_DEFAULT << (pin * 2));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	887a      	ldrh	r2, [r7, #2]
 8006e7c:	0052      	lsls	r2, r2, #1
 8006e7e:	2103      	movs	r1, #3
 8006e80:	fa01 f202 	lsl.w	r2, r1, r2
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	609a      	str	r2, [r3, #8]

	if(pin < 8){
 8006e8a:	887b      	ldrh	r3, [r7, #2]
 8006e8c:	2b07      	cmp	r3, #7
 8006e8e:	d815      	bhi.n	8006ebc <gpio_set_alternatefunction+0xaa>
		port -> AFR[0] &=~ (0x0FU << (pin*4));
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a1a      	ldr	r2, [r3, #32]
 8006e94:	887b      	ldrh	r3, [r7, #2]
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	210f      	movs	r1, #15
 8006e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9e:	43db      	mvns	r3, r3
 8006ea0:	401a      	ands	r2, r3
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	621a      	str	r2, [r3, #32]
		port -> AFR[0] |=  (function  << (pin*4));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	7879      	ldrb	r1, [r7, #1]
 8006eac:	887a      	ldrh	r2, [r7, #2]
 8006eae:	0092      	lsls	r2, r2, #2
 8006eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	621a      	str	r2, [r3, #32]
	}
	else{
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
		port -> AFR[1] |=  (function  << ((pin-8)*4));
	}
}
 8006eba:	e016      	b.n	8006eea <gpio_set_alternatefunction+0xd8>
		port -> AFR[1] &=~ (0x0FU << ((pin-8)*4));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ec0:	887b      	ldrh	r3, [r7, #2]
 8006ec2:	3b08      	subs	r3, #8
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	210f      	movs	r1, #15
 8006ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8006ecc:	43db      	mvns	r3, r3
 8006ece:	401a      	ands	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	625a      	str	r2, [r3, #36]	; 0x24
		port -> AFR[1] |=  (function  << ((pin-8)*4));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	7879      	ldrb	r1, [r7, #1]
 8006eda:	887a      	ldrh	r2, [r7, #2]
 8006edc:	3a08      	subs	r2, #8
 8006ede:	0092      	lsls	r2, r2, #2
 8006ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006eea:	bf00      	nop
 8006eec:	370c      	adds	r7, #12
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef4:	4770      	bx	lr

08006ef6 <gpio_set_alternatefunction_type>:
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 * @param mode gpio mode(type).
 */
void gpio_set_alternatefunction_type(GPIO_TypeDef *port, uint16_t pin, gpio_mode_t mode){
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	807b      	strh	r3, [r7, #2]
 8006f02:	4613      	mov	r3, r2
 8006f04:	707b      	strb	r3, [r7, #1]
	if(mode == GPIO_OUTPUT_OPENDRAIN) port -> OTYPER |= (1U<<pin);
 8006f06:	787b      	ldrb	r3, [r7, #1]
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d109      	bne.n	8006f20 <gpio_set_alternatefunction_type+0x2a>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685a      	ldr	r2, [r3, #4]
 8006f10:	887b      	ldrh	r3, [r7, #2]
 8006f12:	2101      	movs	r1, #1
 8006f14:	fa01 f303 	lsl.w	r3, r1, r3
 8006f18:	431a      	orrs	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	605a      	str	r2, [r3, #4]
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
}
 8006f1e:	e00c      	b.n	8006f3a <gpio_set_alternatefunction_type+0x44>
	else if(mode == GPIO_OUTPUT_PUSHPULL) port -> OTYPER &=~ (1U<<pin);
 8006f20:	787b      	ldrb	r3, [r7, #1]
 8006f22:	2b06      	cmp	r3, #6
 8006f24:	d109      	bne.n	8006f3a <gpio_set_alternatefunction_type+0x44>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	887b      	ldrh	r3, [r7, #2]
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f32:	43db      	mvns	r3, r3
 8006f34:	401a      	ands	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <gpio_set>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_set(GPIO_TypeDef *port, uint16_t pin){
 8006f46:	b480      	push	{r7}
 8006f48:	b083      	sub	sp, #12
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
 8006f4e:	460b      	mov	r3, r1
 8006f50:	807b      	strh	r3, [r7, #2]
	port -> BSRR |= (1 << pin);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	887a      	ldrh	r2, [r7, #2]
 8006f58:	2101      	movs	r1, #1
 8006f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8006f5e:	431a      	orrs	r2, r3
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	619a      	str	r2, [r3, #24]
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <gpio_reset>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_reset(GPIO_TypeDef *port, uint16_t pin){
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	807b      	strh	r3, [r7, #2]
	port -> BSRR |= (1 << (pin + 16));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	699b      	ldr	r3, [r3, #24]
 8006f80:	887a      	ldrh	r2, [r7, #2]
 8006f82:	3210      	adds	r2, #16
 8006f84:	2101      	movs	r1, #1
 8006f86:	fa01 f202 	lsl.w	r2, r1, r2
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	619a      	str	r2, [r3, #24]
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <gpio_toggle>:
 * @pre
 * @post
 * @param port gpio port selected.
 * @param pin  gpio pin selected.
 */
void gpio_toggle(GPIO_TypeDef *port, uint16_t pin){
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	807b      	strh	r3, [r7, #2]
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	887a      	ldrh	r2, [r7, #2]
 8006fae:	2101      	movs	r1, #1
 8006fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d005      	beq.n	8006fc6 <gpio_toggle+0x2a>
 8006fba:	887b      	ldrh	r3, [r7, #2]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff ffd6 	bl	8006f70 <gpio_reset>
}
 8006fc4:	e004      	b.n	8006fd0 <gpio_toggle+0x34>
	(port -> ODR & (1<<pin))? gpio_reset(port, pin) : gpio_set(port, pin);
 8006fc6:	887b      	ldrh	r3, [r7, #2]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff ffbb 	bl	8006f46 <gpio_set>
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <_ZN3i2cC1EP11I2C_TypeDef>:
#define I2C_MIN_FREQ_FAST           4000000U // Minimum is 4MHz of APB1 bus in standard mode.

void I2C_IRQHandler(i2c *i2c);


i2c::i2c(I2C_TypeDef *i2c){
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]
	_i2c = i2c;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	609a      	str	r2, [r3, #8]
}
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <_Z41__static_initialization_and_destruction_0ii>:
i2c i2c_3(I2C3);
i2c_t i2c3 = &i2c_3;
void I2C3_IRQHandler(void);
void I2C3_IRQHandler(void){

}
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d110      	bne.n	8007036 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800701a:	4293      	cmp	r3, r2
 800701c:	d10b      	bne.n	8007036 <_Z41__static_initialization_and_destruction_0ii+0x32>
i2c i2c_1(I2C1);
 800701e:	4908      	ldr	r1, [pc, #32]	; (8007040 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8007020:	4808      	ldr	r0, [pc, #32]	; (8007044 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007022:	f7ff ffd9 	bl	8006fd8 <_ZN3i2cC1EP11I2C_TypeDef>
i2c i2c_2(I2C2);
 8007026:	4908      	ldr	r1, [pc, #32]	; (8007048 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8007028:	4808      	ldr	r0, [pc, #32]	; (800704c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800702a:	f7ff ffd5 	bl	8006fd8 <_ZN3i2cC1EP11I2C_TypeDef>
i2c i2c_3(I2C3);
 800702e:	4908      	ldr	r1, [pc, #32]	; (8007050 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007030:	4808      	ldr	r0, [pc, #32]	; (8007054 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007032:	f7ff ffd1 	bl	8006fd8 <_ZN3i2cC1EP11I2C_TypeDef>
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40005400 	.word	0x40005400
 8007044:	2000b660 	.word	0x2000b660
 8007048:	40005800 	.word	0x40005800
 800704c:	2000b670 	.word	0x2000b670
 8007050:	40005c00 	.word	0x40005c00
 8007054:	2000b680 	.word	0x2000b680

08007058 <_GLOBAL__sub_I__ZN3i2cC2EP11I2C_TypeDef>:
 8007058:	b580      	push	{r7, lr}
 800705a:	af00      	add	r7, sp, #0
 800705c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007060:	2001      	movs	r0, #1
 8007062:	f7ff ffcf 	bl	8007004 <_Z41__static_initialization_and_destruction_0ii>
 8007066:	bd80      	pop	{r7, pc}

08007068 <iwdg_init>:
#define IWDG_PRESCALER_32               (IWDG_PR_PR_1 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_64               IWDG_PR_PR_2
#define IWDG_PRESCALER_128              (IWDG_PR_PR_2 | IWDG_PR_PR_0)
#define IWDG_PRESCALER_256              (IWDG_PR_PR_2 | IWDG_PR_PR_1)

stm_ret_t iwdg_init(uint32_t psc, uint32_t arr){
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b089      	sub	sp, #36	; 0x24
 800706c:	af02      	add	r7, sp, #8
 800706e:	6178      	str	r0, [r7, #20]
 8007070:	6139      	str	r1, [r7, #16]
 8007072:	60fa      	str	r2, [r7, #12]
	stm_ret_t ret;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2201      	movs	r2, #1
 8007078:	701a      	strb	r2, [r3, #0]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2200      	movs	r2, #0
 800707e:	605a      	str	r2, [r3, #4]

	IWDG -> KR = IWDG_KEY_ENABLE;
 8007080:	4b13      	ldr	r3, [pc, #76]	; (80070d0 <iwdg_init+0x68>)
 8007082:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007086:	601a      	str	r2, [r3, #0]

	IWDG -> KR = IWDG_KEY_WRITE_ACCESS_ENABLE;
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <iwdg_init+0x68>)
 800708a:	f245 5255 	movw	r2, #21845	; 0x5555
 800708e:	601a      	str	r2, [r3, #0]

	IWDG -> PR = psc;
 8007090:	4a0f      	ldr	r2, [pc, #60]	; (80070d0 <iwdg_init+0x68>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	6053      	str	r3, [r2, #4]
	IWDG -> RLR = arr-1;
 8007096:	4a0e      	ldr	r2, [pc, #56]	; (80070d0 <iwdg_init+0x68>)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3b01      	subs	r3, #1
 800709c:	6093      	str	r3, [r2, #8]

	ret = wait_flag_in_register_timeout(&(IWDG->SR), (IWDG_SR_RVU | IWDG_SR_PVU), FLAG_RESET, IWDG_DEFAULT_TIMEOUT);
 800709e:	697c      	ldr	r4, [r7, #20]
 80070a0:	4638      	mov	r0, r7
 80070a2:	2331      	movs	r3, #49	; 0x31
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	2300      	movs	r3, #0
 80070a8:	2203      	movs	r2, #3
 80070aa:	490a      	ldr	r1, [pc, #40]	; (80070d4 <iwdg_init+0x6c>)
 80070ac:	f002 f9d8 	bl	8009460 <wait_flag_in_register_timeout>
 80070b0:	4622      	mov	r2, r4
 80070b2:	463b      	mov	r3, r7
 80070b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80070b8:	e882 0003 	stmia.w	r2, {r0, r1}

	IWDG -> KR = IWDG_KEY_RELOAD;
 80070bc:	4b04      	ldr	r3, [pc, #16]	; (80070d0 <iwdg_init+0x68>)
 80070be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80070c2:	601a      	str	r2, [r3, #0]

	return ret;
 80070c4:	bf00      	nop
}
 80070c6:	6978      	ldr	r0, [r7, #20]
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40003000 	.word	0x40003000
 80070d4:	4000300c 	.word	0x4000300c

080070d8 <iwdg_disable_in_debugmode>:

void iwdg_enable_in_debugmode(void){
	DBGMCU->APB1FZ &=~ DBGMCU_APB1_FZ_DBG_IWDG_STOP;
}

void iwdg_disable_in_debugmode(void){
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
	DBGMCU->APB1FZ |= DBGMCU_APB1_FZ_DBG_IWDG_STOP;
 80070dc:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <iwdg_disable_in_debugmode+0x1c>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	4a04      	ldr	r2, [pc, #16]	; (80070f4 <iwdg_disable_in_debugmode+0x1c>)
 80070e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070e6:	6093      	str	r3, [r2, #8]
}
 80070e8:	bf00      	nop
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	e0042000 	.word	0xe0042000

080070f8 <iwdg_refresh>:

void iwdg_refresh(void){
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
	IWDG -> KR = IWDG_KEY_RELOAD;
 80070fc:	4b04      	ldr	r3, [pc, #16]	; (8007110 <iwdg_refresh+0x18>)
 80070fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007102:	601a      	str	r2, [r3, #0]
}
 8007104:	bf00      	nop
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	40003000 	.word	0x40003000

08007114 <rcc_init>:
#include "math.h"


static rcc_config_t *_conf;

stm_ret_t rcc_init(rcc_config_t *rcc_conf){
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b08b      	sub	sp, #44	; 0x2c
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
#error "APB2_CLOCK_FREQUENCY out of range. Modify APB2 clock frequency less than or equal to CONFIG_MAX_APB2_CLOCK_FREQUENCY in sdkconfig.h file."
#endif
#endif


	stm_ret_t ret;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2201      	movs	r2, #1
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	605a      	str	r2, [r3, #4]
	__IO uint32_t tmpreg = 0;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
	_conf = rcc_conf;
 800712e:	4a9a      	ldr	r2, [pc, #616]	; (8007398 <rcc_init+0x284>)
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	6013      	str	r3, [r2, #0]

	/**
	 * OSC Configuration.
	 */
	if((RCC -> CFGR & RCC_CFGR_SWS_HSE) || ((RCC -> CFGR & RCC_CFGR_SWS_PLL) && (RCC -> PLLCFGR & RCC_PLLCFGR_PLLSRC_HSE))){
 8007134:	4b99      	ldr	r3, [pc, #612]	; (800739c <rcc_init+0x288>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <rcc_init+0x44>
 8007140:	4b96      	ldr	r3, [pc, #600]	; (800739c <rcc_init+0x288>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0308 	and.w	r3, r3, #8
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <rcc_init+0x48>
 800714c:	4b93      	ldr	r3, [pc, #588]	; (800739c <rcc_init+0x288>)
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d001      	beq.n	800715c <rcc_init+0x48>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <rcc_init+0x4a>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d010      	beq.n	8007184 <rcc_init+0x70>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8007162:	4b8e      	ldr	r3, [pc, #568]	; (800739c <rcc_init+0x288>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716a:	2b00      	cmp	r3, #0
 800716c:	bf0c      	ite	eq
 800716e:	2301      	moveq	r3, #1
 8007170:	2300      	movne	r3, #0
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <rcc_init+0x70>
			set_return(&ret, STM_ERR, __LINE__);
 8007178:	222f      	movs	r2, #47	; 0x2f
 800717a:	2100      	movs	r1, #0
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f002 f9b5 	bl	80094ec <set_return>
			return ret;
 8007182:	e1c8      	b.n	8007516 <rcc_init+0x402>
		}
	}

	if(_conf -> osc_source == HSI_CRYSTAL){
 8007184:	4b84      	ldr	r3, [pc, #528]	; (8007398 <rcc_init+0x284>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	7b1b      	ldrb	r3, [r3, #12]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d12f      	bne.n	80071ee <rcc_init+0xda>
		RCC -> CR |= RCC_CR_HSION;
 800718e:	4b83      	ldr	r3, [pc, #524]	; (800739c <rcc_init+0x288>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a82      	ldr	r2, [pc, #520]	; (800739c <rcc_init+0x288>)
 8007194:	f043 0301 	orr.w	r3, r3, #1
 8007198:	6013      	str	r3, [r2, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSIRDY, FLAG_SET, RCC_HSI_TIMEOUT);
 800719a:	68fc      	ldr	r4, [r7, #12]
 800719c:	4638      	mov	r0, r7
 800719e:	2364      	movs	r3, #100	; 0x64
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	2301      	movs	r3, #1
 80071a4:	2202      	movs	r2, #2
 80071a6:	497d      	ldr	r1, [pc, #500]	; (800739c <rcc_init+0x288>)
 80071a8:	f002 f95a 	bl	8009460 <wait_flag_in_register_timeout>
 80071ac:	4622      	mov	r2, r4
 80071ae:	463b      	mov	r3, r7
 80071b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80071b4:	e882 0003 	stmia.w	r2, {r0, r1}
		if(is_timeout(&ret)) {
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f002 f9ca 	bl	8009552 <is_timeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <rcc_init+0xba>
			set_return_line(&ret, __LINE__);
 80071c4:	2138      	movs	r1, #56	; 0x38
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f002 f9a3 	bl	8009512 <set_return_line>
			return ret;
 80071cc:	e1a3      	b.n	8007516 <rcc_init+0x402>
		}
		RCC -> CR &= ~RCC_CR_HSITRIM_Msk;
 80071ce:	4b73      	ldr	r3, [pc, #460]	; (800739c <rcc_init+0x288>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a72      	ldr	r2, [pc, #456]	; (800739c <rcc_init+0x288>)
 80071d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80071d8:	6013      	str	r3, [r2, #0]
		RCC -> CR |= (_conf -> hsi_trim << RCC_CR_HSITRIM_Pos);
 80071da:	4b70      	ldr	r3, [pc, #448]	; (800739c <rcc_init+0x288>)
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4b6e      	ldr	r3, [pc, #440]	; (8007398 <rcc_init+0x284>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	00db      	lsls	r3, r3, #3
 80071e6:	496d      	ldr	r1, [pc, #436]	; (800739c <rcc_init+0x288>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	600b      	str	r3, [r1, #0]
 80071ec:	e02b      	b.n	8007246 <rcc_init+0x132>

	}
	else if(_conf -> osc_source == HSE_CRYSTAL){
 80071ee:	4b6a      	ldr	r3, [pc, #424]	; (8007398 <rcc_init+0x284>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	7b1b      	ldrb	r3, [r3, #12]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d120      	bne.n	800723a <rcc_init+0x126>
		RCC -> CR |= RCC_CR_HSEON;
 80071f8:	4b68      	ldr	r3, [pc, #416]	; (800739c <rcc_init+0x288>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a67      	ldr	r2, [pc, #412]	; (800739c <rcc_init+0x288>)
 80071fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007202:	6013      	str	r3, [r2, #0]
		ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_HSERDY, FLAG_SET, RCC_HSE_TIMEOUT);
 8007204:	68fc      	ldr	r4, [r7, #12]
 8007206:	4638      	mov	r0, r7
 8007208:	23c8      	movs	r3, #200	; 0xc8
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	2301      	movs	r3, #1
 800720e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007212:	4962      	ldr	r1, [pc, #392]	; (800739c <rcc_init+0x288>)
 8007214:	f002 f924 	bl	8009460 <wait_flag_in_register_timeout>
 8007218:	4622      	mov	r2, r4
 800721a:	463b      	mov	r3, r7
 800721c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007220:	e882 0003 	stmia.w	r2, {r0, r1}
		if(is_timeout(&ret)) {
 8007224:	68f8      	ldr	r0, [r7, #12]
 8007226:	f002 f994 	bl	8009552 <is_timeout>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <rcc_init+0x132>
			set_return_line(&ret, __LINE__);
 8007230:	2143      	movs	r1, #67	; 0x43
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f002 f96d 	bl	8009512 <set_return_line>
			return ret;
 8007238:	e16d      	b.n	8007516 <rcc_init+0x402>
		}
	}
	else{
		set_return(&ret, STM_ERR, __LINE__);
 800723a:	2248      	movs	r2, #72	; 0x48
 800723c:	2100      	movs	r1, #0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f002 f954 	bl	80094ec <set_return>
		return ret;
 8007244:	e167      	b.n	8007516 <rcc_init+0x402>
	}

	/**
	 * PLL Configuration.
	 */
	if(_conf -> sysclock_source == PLLCLK){
 8007246:	4b54      	ldr	r3, [pc, #336]	; (8007398 <rcc_init+0x284>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	7b5b      	ldrb	r3, [r3, #13]
 800724c:	2b02      	cmp	r3, #2
 800724e:	d172      	bne.n	8007336 <rcc_init+0x222>
		if(!(RCC -> CFGR & RCC_CFGR_SWS_PLL)){
 8007250:	4b52      	ldr	r3, [pc, #328]	; (800739c <rcc_init+0x288>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf0c      	ite	eq
 800725c:	2301      	moveq	r3, #1
 800725e:	2300      	movne	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d067      	beq.n	8007336 <rcc_init+0x222>
			RCC -> CR &=~ RCC_CR_PLLON;
 8007266:	4b4d      	ldr	r3, [pc, #308]	; (800739c <rcc_init+0x288>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a4c      	ldr	r2, [pc, #304]	; (800739c <rcc_init+0x288>)
 800726c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007270:	6013      	str	r3, [r2, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_RESET, RCC_PLL_TIMEOUT);
 8007272:	68fc      	ldr	r4, [r7, #12]
 8007274:	4638      	mov	r0, r7
 8007276:	2364      	movs	r3, #100	; 0x64
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	2300      	movs	r3, #0
 800727c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007280:	4946      	ldr	r1, [pc, #280]	; (800739c <rcc_init+0x288>)
 8007282:	f002 f8ed 	bl	8009460 <wait_flag_in_register_timeout>
 8007286:	4622      	mov	r2, r4
 8007288:	463b      	mov	r3, r7
 800728a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800728e:	e882 0003 	stmia.w	r2, {r0, r1}
			if(is_timeout(&ret)) {
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f002 f95d 	bl	8009552 <is_timeout>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d004      	beq.n	80072a8 <rcc_init+0x194>
				set_return_line(&ret, __LINE__);
 800729e:	2154      	movs	r1, #84	; 0x54
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f002 f936 	bl	8009512 <set_return_line>
				return ret;
 80072a6:	e136      	b.n	8007516 <rcc_init+0x402>
			}

			tmpreg = RCC -> PLLCFGR;
 80072a8:	4b3c      	ldr	r3, [pc, #240]	; (800739c <rcc_init+0x288>)
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	617b      	str	r3, [r7, #20]
			tmpreg &= ~(RCC_PLLCFGR_PLLM_Msk | RCC_PLLCFGR_PLLN_Msk | RCC_PLLCFGR_PLLP_Msk | RCC_PLLCFGR_PLLQ_Msk | RCC_PLLCFGR_PLLSRC_Msk);
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	4b3b      	ldr	r3, [pc, #236]	; (80073a0 <rcc_init+0x28c>)
 80072b2:	4013      	ands	r3, r2
 80072b4:	617b      	str	r3, [r7, #20]
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80072b6:	4b38      	ldr	r3, [pc, #224]	; (8007398 <rcc_init+0x284>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699a      	ldr	r2, [r3, #24]
 80072bc:	4b36      	ldr	r3, [pc, #216]	; (8007398 <rcc_init+0x284>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	019b      	lsls	r3, r3, #6
 80072c4:	431a      	orrs	r2, r3
 80072c6:	4b34      	ldr	r3, [pc, #208]	; (8007398 <rcc_init+0x284>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6a1b      	ldr	r3, [r3, #32]
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	3b01      	subs	r3, #1
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	431a      	orrs	r2, r3
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 80072d4:	4b30      	ldr	r3, [pc, #192]	; (8007398 <rcc_init+0x284>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072da:	061b      	lsls	r3, r3, #24
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80072dc:	4313      	orrs	r3, r2
					  ((_conf -> pll.pllq) << RCC_PLLCFGR_PLLQ_Pos) | ((_conf -> pll_source) << RCC_PLLCFGR_PLLSRC_Pos);
 80072de:	4a2e      	ldr	r2, [pc, #184]	; (8007398 <rcc_init+0x284>)
 80072e0:	6812      	ldr	r2, [r2, #0]
 80072e2:	7b92      	ldrb	r2, [r2, #14]
 80072e4:	0592      	lsls	r2, r2, #22
 80072e6:	431a      	orrs	r2, r3
			tmpreg |= ((_conf -> pll.pllm) << RCC_PLLCFGR_PLLM_Pos) | ((_conf -> pll.plln) << RCC_PLLCFGR_PLLN_Pos) | ((((_conf -> pll.pllp) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) |
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]
			RCC -> PLLCFGR = tmpreg;
 80072ee:	4a2b      	ldr	r2, [pc, #172]	; (800739c <rcc_init+0x288>)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6053      	str	r3, [r2, #4]

			RCC -> CR |= RCC_CR_PLLON;
 80072f4:	4b29      	ldr	r3, [pc, #164]	; (800739c <rcc_init+0x288>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a28      	ldr	r2, [pc, #160]	; (800739c <rcc_init+0x288>)
 80072fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072fe:	6013      	str	r3, [r2, #0]
			ret = wait_flag_in_register_timeout(&(RCC -> CR), RCC_CR_PLLRDY, FLAG_SET, RCC_PLL_TIMEOUT);
 8007300:	68fc      	ldr	r4, [r7, #12]
 8007302:	4638      	mov	r0, r7
 8007304:	2364      	movs	r3, #100	; 0x64
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	2301      	movs	r3, #1
 800730a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800730e:	4923      	ldr	r1, [pc, #140]	; (800739c <rcc_init+0x288>)
 8007310:	f002 f8a6 	bl	8009460 <wait_flag_in_register_timeout>
 8007314:	4622      	mov	r2, r4
 8007316:	463b      	mov	r3, r7
 8007318:	e893 0003 	ldmia.w	r3, {r0, r1}
 800731c:	e882 0003 	stmia.w	r2, {r0, r1}
			if(is_timeout(&ret)) {
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f002 f916 	bl	8009552 <is_timeout>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d004      	beq.n	8007336 <rcc_init+0x222>
				set_return_line(&ret, __LINE__);
 800732c:	2161      	movs	r1, #97	; 0x61
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f002 f8ef 	bl	8009512 <set_return_line>
				return ret;
 8007334:	e0ef      	b.n	8007516 <rcc_init+0x402>


	/**
	 * Calculation flash latency and update latency if new latency great than current latency.
	 */
	uint32_t latency = embedded_flash_calculate_latency(CONFIG_AHB_CLOCK_FREQUENCY);
 8007336:	481b      	ldr	r0, [pc, #108]	; (80073a4 <rcc_init+0x290>)
 8007338:	f002 fa28 	bl	800978c <embedded_flash_calculate_latency>
 800733c:	61f8      	str	r0, [r7, #28]
	uint32_t current_latency = embedded_flash_get_latency();
 800733e:	f002 fa61 	bl	8009804 <embedded_flash_get_latency>
 8007342:	61b8      	str	r0, [r7, #24]
	if(latency > current_latency) embedded_flash_set_latency(latency);
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	429a      	cmp	r2, r3
 800734a:	d902      	bls.n	8007352 <rcc_init+0x23e>
 800734c:	69f8      	ldr	r0, [r7, #28]
 800734e:	f002 fa03 	bl	8009758 <embedded_flash_set_latency>

	/**
	 * Check over clock to enable Over-drive mode.
	 */
#if CONFIG_OVER_CLOCK
	PWR -> CR |= PWR_CR_ODEN;
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <rcc_init+0x294>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <rcc_init+0x294>)
 8007358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800735c:	6013      	str	r3, [r2, #0]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODRDY, FLAG_SET, 1000U);
 800735e:	68fc      	ldr	r4, [r7, #12]
 8007360:	4638      	mov	r0, r7
 8007362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2301      	movs	r3, #1
 800736a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800736e:	490f      	ldr	r1, [pc, #60]	; (80073ac <rcc_init+0x298>)
 8007370:	f002 f876 	bl	8009460 <wait_flag_in_register_timeout>
 8007374:	4622      	mov	r2, r4
 8007376:	463b      	mov	r3, r7
 8007378:	e893 0003 	ldmia.w	r3, {r0, r1}
 800737c:	e882 0003 	stmia.w	r2, {r0, r1}
	if(is_timeout(&ret)) {
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f002 f8e6 	bl	8009552 <is_timeout>
 8007386:	4603      	mov	r3, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <rcc_init+0x29c>
		set_return_line(&ret, __LINE__);
 800738c:	2177      	movs	r1, #119	; 0x77
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f002 f8bf 	bl	8009512 <set_return_line>
		return ret;
 8007394:	e0bf      	b.n	8007516 <rcc_init+0x402>
 8007396:	bf00      	nop
 8007398:	2000b690 	.word	0x2000b690
 800739c:	40023800 	.word	0x40023800
 80073a0:	f0bc8000 	.word	0xf0bc8000
 80073a4:	0cdfe600 	.word	0x0cdfe600
 80073a8:	40007000 	.word	0x40007000
 80073ac:	40007004 	.word	0x40007004
	}

	PWR -> CR |= PWR_CR_ODSWEN;
 80073b0:	4b5b      	ldr	r3, [pc, #364]	; (8007520 <rcc_init+0x40c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a5a      	ldr	r2, [pc, #360]	; (8007520 <rcc_init+0x40c>)
 80073b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ba:	6013      	str	r3, [r2, #0]
	ret = wait_flag_in_register_timeout(&(PWR -> CSR), PWR_CSR_ODSWRDY, FLAG_SET, 1000U);
 80073bc:	68fc      	ldr	r4, [r7, #12]
 80073be:	4638      	mov	r0, r7
 80073c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2301      	movs	r3, #1
 80073c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80073cc:	4955      	ldr	r1, [pc, #340]	; (8007524 <rcc_init+0x410>)
 80073ce:	f002 f847 	bl	8009460 <wait_flag_in_register_timeout>
 80073d2:	4622      	mov	r2, r4
 80073d4:	463b      	mov	r3, r7
 80073d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80073da:	e882 0003 	stmia.w	r2, {r0, r1}
	if(is_timeout(&ret)) {
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f002 f8b7 	bl	8009552 <is_timeout>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d004      	beq.n	80073f4 <rcc_init+0x2e0>
		set_return_line(&ret, __LINE__);
 80073ea:	217e      	movs	r1, #126	; 0x7e
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f002 f890 	bl	8009512 <set_return_line>
		return ret;
 80073f2:	e090      	b.n	8007516 <rcc_init+0x402>
#endif /* CONFIG_OVER_CLOCK */

	/**
	 * Check and set system clock source.
	 */
	if(_conf -> sysclock_source == HSI){
 80073f4:	4b4c      	ldr	r3, [pc, #304]	; (8007528 <rcc_init+0x414>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	7b5b      	ldrb	r3, [r3, #13]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10f      	bne.n	800741e <rcc_init+0x30a>
		if(!(RCC -> CR & RCC_CR_HSIRDY)){
 80073fe:	4b4b      	ldr	r3, [pc, #300]	; (800752c <rcc_init+0x418>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b00      	cmp	r3, #0
 8007408:	bf0c      	ite	eq
 800740a:	2301      	moveq	r3, #1
 800740c:	2300      	movne	r3, #0
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b00      	cmp	r3, #0
 8007412:	d02e      	beq.n	8007472 <rcc_init+0x35e>
			set_return_line(&ret, __LINE__);
 8007414:	2188      	movs	r1, #136	; 0x88
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f002 f87b 	bl	8009512 <set_return_line>
			return ret;
 800741c:	e07b      	b.n	8007516 <rcc_init+0x402>
		}
	}
	else if(_conf -> sysclock_source == HSE){
 800741e:	4b42      	ldr	r3, [pc, #264]	; (8007528 <rcc_init+0x414>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	7b5b      	ldrb	r3, [r3, #13]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d10f      	bne.n	8007448 <rcc_init+0x334>
		if(!(RCC -> CR & RCC_CR_HSERDY)){
 8007428:	4b40      	ldr	r3, [pc, #256]	; (800752c <rcc_init+0x418>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007430:	2b00      	cmp	r3, #0
 8007432:	bf0c      	ite	eq
 8007434:	2301      	moveq	r3, #1
 8007436:	2300      	movne	r3, #0
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d019      	beq.n	8007472 <rcc_init+0x35e>
			set_return_line(&ret, __LINE__);
 800743e:	218e      	movs	r1, #142	; 0x8e
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f002 f866 	bl	8009512 <set_return_line>
			return ret;
 8007446:	e066      	b.n	8007516 <rcc_init+0x402>
		}
	}
	else if(_conf -> sysclock_source == PLLCLK){
 8007448:	4b37      	ldr	r3, [pc, #220]	; (8007528 <rcc_init+0x414>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	7b5b      	ldrb	r3, [r3, #13]
 800744e:	2b02      	cmp	r3, #2
 8007450:	d10f      	bne.n	8007472 <rcc_init+0x35e>
		if(!(RCC -> CR & RCC_CR_PLLRDY)){
 8007452:	4b36      	ldr	r3, [pc, #216]	; (800752c <rcc_init+0x418>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	bf0c      	ite	eq
 800745e:	2301      	moveq	r3, #1
 8007460:	2300      	movne	r3, #0
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <rcc_init+0x35e>
			set_return_line(&ret, __LINE__);
 8007468:	2194      	movs	r1, #148	; 0x94
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f002 f851 	bl	8009512 <set_return_line>
			return ret;
 8007470:	e051      	b.n	8007516 <rcc_init+0x402>
		}
	}

	RCC -> CFGR = ((RCC -> CFGR & !RCC_CFGR_SW_Msk) | (_conf -> sysclock_source << RCC_CFGR_SW_Pos));
 8007472:	4b2e      	ldr	r3, [pc, #184]	; (800752c <rcc_init+0x418>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <rcc_init+0x414>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	7b5a      	ldrb	r2, [r3, #13]
 800747c:	4b2b      	ldr	r3, [pc, #172]	; (800752c <rcc_init+0x418>)
 800747e:	609a      	str	r2, [r3, #8]
	ret = wait_flag_in_register_timeout(&(RCC -> CFGR), (_conf -> sysclock_source << RCC_CFGR_SW_Pos), FLAG_SET, RCC_SWS_TIMEOUT);
 8007480:	4b29      	ldr	r3, [pc, #164]	; (8007528 <rcc_init+0x414>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	7b5b      	ldrb	r3, [r3, #13]
 8007486:	461a      	mov	r2, r3
 8007488:	68fc      	ldr	r4, [r7, #12]
 800748a:	4638      	mov	r0, r7
 800748c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007490:	9300      	str	r3, [sp, #0]
 8007492:	2301      	movs	r3, #1
 8007494:	4926      	ldr	r1, [pc, #152]	; (8007530 <rcc_init+0x41c>)
 8007496:	f001 ffe3 	bl	8009460 <wait_flag_in_register_timeout>
 800749a:	4622      	mov	r2, r4
 800749c:	463b      	mov	r3, r7
 800749e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80074a2:	e882 0003 	stmia.w	r2, {r0, r1}
	if(is_timeout(&ret)) {
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f002 f853 	bl	8009552 <is_timeout>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <rcc_init+0x3a8>
		set_return_line(&ret, __LINE__);
 80074b2:	219c      	movs	r1, #156	; 0x9c
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f002 f82c 	bl	8009512 <set_return_line>
		return ret;
 80074ba:	e02c      	b.n	8007516 <rcc_init+0x402>
	}

	/**
	 * SYSCLK, AHB, APB1, APB2 frequency configuration.
	 */
	tmpreg = RCC -> CFGR;
 80074bc:	4b1b      	ldr	r3, [pc, #108]	; (800752c <rcc_init+0x418>)
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	617b      	str	r3, [r7, #20]
	tmpreg &= ~(RCC_CFGR_HPRE_Msk | RCC_CFGR_PPRE1_Msk | RCC_CFGR_PPRE2_Msk);
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80074c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074cc:	617b      	str	r3, [r7, #20]
	tmpreg |= ((_conf -> ahb_prescaler + 7U) << RCC_CFGR_HPRE_Pos) | ((_conf -> apb1_prescaler + 3U) << RCC_CFGR_PPRE1_Pos) | ((_conf -> apb2_prescaler + 3U) << RCC_CFGR_PPRE2_Pos);
 80074ce:	4b16      	ldr	r3, [pc, #88]	; (8007528 <rcc_init+0x414>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	7d1b      	ldrb	r3, [r3, #20]
 80074d4:	3307      	adds	r3, #7
 80074d6:	011a      	lsls	r2, r3, #4
 80074d8:	4b13      	ldr	r3, [pc, #76]	; (8007528 <rcc_init+0x414>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	7d5b      	ldrb	r3, [r3, #21]
 80074de:	3303      	adds	r3, #3
 80074e0:	029b      	lsls	r3, r3, #10
 80074e2:	431a      	orrs	r2, r3
 80074e4:	4b10      	ldr	r3, [pc, #64]	; (8007528 <rcc_init+0x414>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	7d9b      	ldrb	r3, [r3, #22]
 80074ea:	3303      	adds	r3, #3
 80074ec:	035b      	lsls	r3, r3, #13
 80074ee:	431a      	orrs	r2, r3
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
	RCC -> CFGR = tmpreg;
 80074f6:	4a0d      	ldr	r2, [pc, #52]	; (800752c <rcc_init+0x418>)
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	6093      	str	r3, [r2, #8]

	/**
	 * Update system core clock..
	 */
	SystemCoreClockUpdate();
 80074fc:	f7f9 fde6 	bl	80010cc <SystemCoreClockUpdate>

	/**
	 * Update latency if new latency less than current latency.
	 */
	if(latency < current_latency) embedded_flash_set_latency(latency);
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	69bb      	ldr	r3, [r7, #24]
 8007504:	429a      	cmp	r2, r3
 8007506:	d202      	bcs.n	800750e <rcc_init+0x3fa>
 8007508:	69f8      	ldr	r0, [r7, #28]
 800750a:	f002 f925 	bl	8009758 <embedded_flash_set_latency>

	/**
	 * ReInit system tick.
	 */
	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 800750e:	200f      	movs	r0, #15
 8007510:	f000 fbde 	bl	8007cd0 <systick_init>

	return ret;
 8007514:	bf00      	nop
}
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	3724      	adds	r7, #36	; 0x24
 800751a:	46bd      	mov	sp, r7
 800751c:	bd90      	pop	{r4, r7, pc}
 800751e:	bf00      	nop
 8007520:	40007000 	.word	0x40007000
 8007524:	40007004 	.word	0x40007004
 8007528:	2000b690 	.word	0x2000b690
 800752c:	40023800 	.word	0x40023800
 8007530:	40023808 	.word	0x40023808

08007534 <rcc_get_bus_frequency>:


	return ret;
}

uint32_t rcc_get_bus_frequency(rcc_busclock_t bus){
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	4603      	mov	r3, r0
 800753c:	71fb      	strb	r3, [r7, #7]
	switch(bus){
 800753e:	79fb      	ldrb	r3, [r7, #7]
 8007540:	2b05      	cmp	r3, #5
 8007542:	f200 8091 	bhi.w	8007668 <rcc_get_bus_frequency+0x134>
 8007546:	a201      	add	r2, pc, #4	; (adr r2, 800754c <rcc_get_bus_frequency+0x18>)
 8007548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754c:	08007565 	.word	0x08007565
 8007550:	080075e3 	.word	0x080075e3
 8007554:	0800760b 	.word	0x0800760b
 8007558:	08007621 	.word	0x08007621
 800755c:	08007637 	.word	0x08007637
 8007560:	0800764f 	.word	0x0800764f
		case SYSCLK:
			if(_conf -> osc_source == HSE_CRYSTAL){ // HSE.
 8007564:	4b44      	ldr	r3, [pc, #272]	; (8007678 <rcc_get_bus_frequency+0x144>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	7b1b      	ldrb	r3, [r3, #12]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d11c      	bne.n	80075a8 <rcc_get_bus_frequency+0x74>
				if(_conf -> sysclock_source == HSE) return (uint32_t)HSE_VALUE;
 800756e:	4b42      	ldr	r3, [pc, #264]	; (8007678 <rcc_get_bus_frequency+0x144>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	7b5b      	ldrb	r3, [r3, #13]
 8007574:	2b01      	cmp	r3, #1
 8007576:	d101      	bne.n	800757c <rcc_get_bus_frequency+0x48>
 8007578:	4b40      	ldr	r3, [pc, #256]	; (800767c <rcc_get_bus_frequency+0x148>)
 800757a:	e076      	b.n	800766a <rcc_get_bus_frequency+0x136>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 800757c:	4b3e      	ldr	r3, [pc, #248]	; (8007678 <rcc_get_bus_frequency+0x144>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	7b5b      	ldrb	r3, [r3, #13]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d16f      	bne.n	8007666 <rcc_get_bus_frequency+0x132>
 8007586:	4b3c      	ldr	r3, [pc, #240]	; (8007678 <rcc_get_bus_frequency+0x144>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	4a3b      	ldr	r2, [pc, #236]	; (800767c <rcc_get_bus_frequency+0x148>)
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	4a39      	ldr	r2, [pc, #228]	; (8007678 <rcc_get_bus_frequency+0x144>)
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	69d2      	ldr	r2, [r2, #28]
 8007598:	fb03 f202 	mul.w	r2, r3, r2
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <rcc_get_bus_frequency+0x144>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075a6:	e060      	b.n	800766a <rcc_get_bus_frequency+0x136>
			}
			else{ // HSI.
				if(_conf -> sysclock_source == HSI) return (uint32_t)HSI_VALUE;
 80075a8:	4b33      	ldr	r3, [pc, #204]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	7b5b      	ldrb	r3, [r3, #13]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <rcc_get_bus_frequency+0x82>
 80075b2:	4b33      	ldr	r3, [pc, #204]	; (8007680 <rcc_get_bus_frequency+0x14c>)
 80075b4:	e059      	b.n	800766a <rcc_get_bus_frequency+0x136>
				else if(_conf -> sysclock_source == PLLCLK) return (uint32_t)(((HSE_VALUE / _conf -> pll.pllm) * _conf -> pll.plln) / _conf -> pll.pllp);
 80075b6:	4b30      	ldr	r3, [pc, #192]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	7b5b      	ldrb	r3, [r3, #13]
 80075bc:	2b02      	cmp	r3, #2
 80075be:	d152      	bne.n	8007666 <rcc_get_bus_frequency+0x132>
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	4a2d      	ldr	r2, [pc, #180]	; (800767c <rcc_get_bus_frequency+0x148>)
 80075c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80075cc:	4a2a      	ldr	r2, [pc, #168]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075ce:	6812      	ldr	r2, [r2, #0]
 80075d0:	69d2      	ldr	r2, [r2, #28]
 80075d2:	fb03 f202 	mul.w	r2, r3, r2
 80075d6:	4b28      	ldr	r3, [pc, #160]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6a1b      	ldr	r3, [r3, #32]
 80075dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80075e0:	e043      	b.n	800766a <rcc_get_bus_frequency+0x136>
			}
		break;

		case AHB:
			if(_conf -> ahb_prescaler <= 7) return (uint32_t)SystemCoreClock;
 80075e2:	4b25      	ldr	r3, [pc, #148]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	7d1b      	ldrb	r3, [r3, #20]
 80075e8:	2b07      	cmp	r3, #7
 80075ea:	d802      	bhi.n	80075f2 <rcc_get_bus_frequency+0xbe>
 80075ec:	4b25      	ldr	r3, [pc, #148]	; (8007684 <rcc_get_bus_frequency+0x150>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	e03b      	b.n	800766a <rcc_get_bus_frequency+0x136>
			return (uint32_t)(SystemCoreClock / (uint32_t)abs((int)(_conf -> ahb_prescaler - 6U)));
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <rcc_get_bus_frequency+0x150>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a20      	ldr	r2, [pc, #128]	; (8007678 <rcc_get_bus_frequency+0x144>)
 80075f8:	6812      	ldr	r2, [r2, #0]
 80075fa:	7d12      	ldrb	r2, [r2, #20]
 80075fc:	3a06      	subs	r2, #6
 80075fe:	2a00      	cmp	r2, #0
 8007600:	bfb8      	it	lt
 8007602:	4252      	neglt	r2, r2
 8007604:	fbb3 f3f2 	udiv	r3, r3, r2
 8007608:	e02f      	b.n	800766a <rcc_get_bus_frequency+0x136>
		break;

		case APB1:
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800760a:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <rcc_get_bus_frequency+0x150>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <rcc_get_bus_frequency+0x154>)
 8007610:	6892      	ldr	r2, [r2, #8]
 8007612:	0a92      	lsrs	r2, r2, #10
 8007614:	f002 0207 	and.w	r2, r2, #7
 8007618:	491c      	ldr	r1, [pc, #112]	; (800768c <rcc_get_bus_frequency+0x158>)
 800761a:	5c8a      	ldrb	r2, [r1, r2]
 800761c:	40d3      	lsrs	r3, r2
 800761e:	e024      	b.n	800766a <rcc_get_bus_frequency+0x136>
		break;

		case APB2:
			return (uint32_t)(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007620:	4b18      	ldr	r3, [pc, #96]	; (8007684 <rcc_get_bus_frequency+0x150>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a18      	ldr	r2, [pc, #96]	; (8007688 <rcc_get_bus_frequency+0x154>)
 8007626:	6892      	ldr	r2, [r2, #8]
 8007628:	0b52      	lsrs	r2, r2, #13
 800762a:	f002 0207 	and.w	r2, r2, #7
 800762e:	4917      	ldr	r1, [pc, #92]	; (800768c <rcc_get_bus_frequency+0x158>)
 8007630:	5c8a      	ldrb	r2, [r1, r2]
 8007632:	40d3      	lsrs	r3, r2
 8007634:	e019      	b.n	800766a <rcc_get_bus_frequency+0x136>
		break;

		case APB1_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]));
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <rcc_get_bus_frequency+0x150>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a13      	ldr	r2, [pc, #76]	; (8007688 <rcc_get_bus_frequency+0x154>)
 800763c:	6892      	ldr	r2, [r2, #8]
 800763e:	0a92      	lsrs	r2, r2, #10
 8007640:	f002 0207 	and.w	r2, r2, #7
 8007644:	4911      	ldr	r1, [pc, #68]	; (800768c <rcc_get_bus_frequency+0x158>)
 8007646:	5c8a      	ldrb	r2, [r1, r2]
 8007648:	40d3      	lsrs	r3, r2
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	e00d      	b.n	800766a <rcc_get_bus_frequency+0x136>
		break;

		case APB2_TIMER:
			return (uint32_t)(2*(SystemCoreClock >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]));
 800764e:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <rcc_get_bus_frequency+0x150>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a0d      	ldr	r2, [pc, #52]	; (8007688 <rcc_get_bus_frequency+0x154>)
 8007654:	6892      	ldr	r2, [r2, #8]
 8007656:	0b52      	lsrs	r2, r2, #13
 8007658:	f002 0207 	and.w	r2, r2, #7
 800765c:	490b      	ldr	r1, [pc, #44]	; (800768c <rcc_get_bus_frequency+0x158>)
 800765e:	5c8a      	ldrb	r2, [r1, r2]
 8007660:	40d3      	lsrs	r3, r2
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	e001      	b.n	800766a <rcc_get_bus_frequency+0x136>
		break;
 8007666:	bf00      	nop
		break;

	}
	return 0;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	2000b690 	.word	0x2000b690
 800767c:	017d7840 	.word	0x017d7840
 8007680:	00f42400 	.word	0x00f42400
 8007684:	20000008 	.word	0x20000008
 8007688:	40023800 	.word	0x40023800
 800768c:	0800e860 	.word	0x0800e860

08007690 <rng_init>:
#include "periph/systick.h"
#include "system/system.h"


uint32_t _seed = 0;
void rng_init(void){
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
	RCC -> AHB2ENR |= RCC_AHB2ENR_RNGEN;
 8007694:	4b09      	ldr	r3, [pc, #36]	; (80076bc <rng_init+0x2c>)
 8007696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007698:	4a08      	ldr	r2, [pc, #32]	; (80076bc <rng_init+0x2c>)
 800769a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800769e:	6353      	str	r3, [r2, #52]	; 0x34

	RNG -> CR |=  RNG_CR_RNGEN;
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <rng_init+0x30>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a06      	ldr	r2, [pc, #24]	; (80076c0 <rng_init+0x30>)
 80076a6:	f043 0304 	orr.w	r3, r3, #4
 80076aa:	6013      	str	r3, [r2, #0]

	rng_set_seed(sys_get_free_heap_size());
 80076ac:	f002 f8de 	bl	800986c <sys_get_free_heap_size>
 80076b0:	4603      	mov	r3, r0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f806 	bl	80076c4 <rng_set_seed>
}
 80076b8:	bf00      	nop
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	50060800 	.word	0x50060800

080076c4 <rng_set_seed>:

uint32_t rng_random_invert(void){
	return ~rng_random();
}

void rng_set_seed(uint32_t seed){
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	_seed = seed;
 80076cc:	4a04      	ldr	r2, [pc, #16]	; (80076e0 <rng_set_seed+0x1c>)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6013      	str	r3, [r2, #0]
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	2000b694 	.word	0x2000b694

080076e4 <_ZN3spiC1EP11SPI_TypeDef>:
stm_ret_t SPI_Tx_ISR(spi *spi);
stm_ret_t SPI_Rx_ISR(spi *spi);

void SPI_IRQHandler(spi *spi);

spi::spi(SPI_TypeDef *Spi){
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	605a      	str	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	609a      	str	r2, [r3, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	611a      	str	r2, [r3, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	615a      	str	r2, [r3, #20]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	619a      	str	r2, [r3, #24]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	61da      	str	r2, [r3, #28]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	621a      	str	r2, [r3, #32]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	625a      	str	r2, [r3, #36]	; 0x24
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	629a      	str	r2, [r3, #40]	; 0x28
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	62da      	str	r2, [r3, #44]	; 0x2c
	_spi = Spi;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	60da      	str	r2, [r3, #12]
}
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4618      	mov	r0, r3
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <_Z10SPI_Tx_ISRP3spi>:
}
#endif /* ENABLE_DMA */



stm_ret_t SPI_Tx_ISR(spi *spi){
 8007744:	b580      	push	{r7, lr}
 8007746:	b08c      	sub	sp, #48	; 0x30
 8007748:	af02      	add	r7, sp, #8
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
	stm_ret_t ret;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3020 	strb.w	r3, [r7, #32]
 8007754:	2300      	movs	r3, #0
 8007756:	627b      	str	r3, [r7, #36]	; 0x24

	spi -> _spi -> DR = *(uint32_t *)(spi -> txbuf);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	461a      	mov	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	60da      	str	r2, [r3, #12]
	spi -> txcount++;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	621a      	str	r2, [r3, #32]

	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	689b      	ldr	r3, [r3, #8]
 8007774:	78db      	ldrb	r3, [r3, #3]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d105      	bne.n	8007786 <_Z10SPI_Tx_ISRP3spi+0x42>
		spi -> txbuf += sizeof(uint8_t);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	619a      	str	r2, [r3, #24]
 8007784:	e009      	b.n	800779a <_Z10SPI_Tx_ISRP3spi+0x56>
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	78db      	ldrb	r3, [r3, #3]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d104      	bne.n	800779a <_Z10SPI_Tx_ISRP3spi+0x56>
		spi -> txbuf += sizeof(uint16_t);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	1c9a      	adds	r2, r3, #2
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	619a      	str	r2, [r3, #24]

	if(spi -> txcount == spi -> txlen){
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f040 8098 	bne.w	80078d8 <_Z10SPI_Tx_ISRP3spi+0x194>
		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_TXE, FLAG_SET, SPI_TIMEOUT);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f103 0108 	add.w	r1, r3, #8
 80077b0:	f107 0018 	add.w	r0, r7, #24
 80077b4:	2364      	movs	r3, #100	; 0x64
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	2301      	movs	r3, #1
 80077ba:	2202      	movs	r2, #2
 80077bc:	f001 fe50 	bl	8009460 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 80077c0:	f107 0318 	add.w	r3, r7, #24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 feb3 	bl	8009530 <is_oke>
 80077ca:	4603      	mov	r3, r0
 80077cc:	f083 0301 	eor.w	r3, r3, #1
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d016      	beq.n	8007804 <_Z10SPI_Tx_ISRP3spi+0xc0>
			set_return_line(&ret, __LINE__);
 80077d6:	f107 0318 	add.w	r3, r7, #24
 80077da:	f240 3115 	movw	r1, #789	; 0x315
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 fe97 	bl	8009512 <set_return_line>
#if CONFIG_USE_LOG_MONITOR && SPI_LOG
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <_Z10SPI_Tx_ISRP3spi+0x1ac>)
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	4b42      	ldr	r3, [pc, #264]	; (80078f4 <_Z10SPI_Tx_ISRP3spi+0x1b0>)
 80077ea:	4a43      	ldr	r2, [pc, #268]	; (80078f8 <_Z10SPI_Tx_ISRP3spi+0x1b4>)
 80077ec:	4943      	ldr	r1, [pc, #268]	; (80078fc <_Z10SPI_Tx_ISRP3spi+0x1b8>)
 80077ee:	f001 fd53 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
			return ret;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	461a      	mov	r2, r3
 80077f6:	f107 0318 	add.w	r3, r7, #24
 80077fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80077fe:	e882 0003 	stmia.w	r2, {r0, r1}
 8007802:	e071      	b.n	80078e8 <_Z10SPI_Tx_ISRP3spi+0x1a4>
		}

		spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_CR2_ERRIE);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	685a      	ldr	r2, [r3, #4]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007812:	605a      	str	r2, [r3, #4]

		ret = wait_flag_in_register_timeout(&(spi->_spi-> SR), SPI_SR_BSY, FLAG_RESET, SPI_TIMEOUT);
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f103 0108 	add.w	r1, r3, #8
 800781c:	4638      	mov	r0, r7
 800781e:	2364      	movs	r3, #100	; 0x64
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	2280      	movs	r2, #128	; 0x80
 8007826:	f001 fe1b 	bl	8009460 <wait_flag_in_register_timeout>
 800782a:	f107 0318 	add.w	r3, r7, #24
 800782e:	463a      	mov	r2, r7
 8007830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007834:	e883 0003 	stmia.w	r3, {r0, r1}
		if(spi -> _conf -> mode & (SPI_FULLDUPLEX_MASTER | SPI_HALFDUPLEX_MASTER)){
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b00      	cmp	r3, #0
 8007844:	d038      	beq.n	80078b8 <_Z10SPI_Tx_ISRP3spi+0x174>
			if(!is_oke(&ret)) {
 8007846:	f107 0318 	add.w	r3, r7, #24
 800784a:	4618      	mov	r0, r3
 800784c:	f001 fe70 	bl	8009530 <is_oke>
 8007850:	4603      	mov	r3, r0
 8007852:	f083 0301 	eor.w	r3, r3, #1
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d02d      	beq.n	80078b8 <_Z10SPI_Tx_ISRP3spi+0x174>
#if CONFIG_USE_LOG_MONITOR && SPI_LOG
				LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 800785c:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <_Z10SPI_Tx_ISRP3spi+0x1ac>)
 800785e:	6818      	ldr	r0, [r3, #0]
 8007860:	4b24      	ldr	r3, [pc, #144]	; (80078f4 <_Z10SPI_Tx_ISRP3spi+0x1b0>)
 8007862:	4a25      	ldr	r2, [pc, #148]	; (80078f8 <_Z10SPI_Tx_ISRP3spi+0x1b4>)
 8007864:	4925      	ldr	r1, [pc, #148]	; (80078fc <_Z10SPI_Tx_ISRP3spi+0x1b8>)
 8007866:	f001 fd17 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
				set_return_line(&ret, __LINE__);
 800786a:	f107 0318 	add.w	r3, r7, #24
 800786e:	f44f 7149 	mov.w	r1, #804	; 0x324
 8007872:	4618      	mov	r0, r3
 8007874:	f001 fe4d 	bl	8009512 <set_return_line>

				spi -> _spi -> CR2 &=~ (SPI_CR2_TXEIE | SPI_SR_RXNE | SPI_CR2_ERRIE);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	685a      	ldr	r2, [r3, #4]
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	f022 02a1 	bic.w	r2, r2, #161	; 0xa1
 8007886:	605a      	str	r2, [r3, #4]
				if(spi -> _conf -> mode & (SPI_HALFDUPLEX_MASTER)) spi -> _spi -> CR1 &=~ SPI_CR1_SPE;
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 0302 	and.w	r3, r3, #2
 8007892:	2b00      	cmp	r3, #0
 8007894:	d007      	beq.n	80078a6 <_Z10SPI_Tx_ISRP3spi+0x162>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078a4:	601a      	str	r2, [r3, #0]

				return ret;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	461a      	mov	r2, r3
 80078aa:	f107 0318 	add.w	r3, r7, #24
 80078ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078b2:	e882 0003 	stmia.w	r2, {r0, r1}
			(void)tmp;
		}
	}

	return ret;
}
 80078b6:	e017      	b.n	80078e8 <_Z10SPI_Tx_ISRP3spi+0x1a4>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	f003 030a 	and.w	r3, r3, #10
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d108      	bne.n	80078d8 <_Z10SPI_Tx_ISRP3spi+0x194>
			__IO uint32_t tmp = spi -> _spi -> DR;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	617b      	str	r3, [r7, #20]
			tmp = spi -> _spi -> SR;
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	617b      	str	r3, [r7, #20]
			(void)tmp;
 80078d6:	697b      	ldr	r3, [r7, #20]
	return ret;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	461a      	mov	r2, r3
 80078dc:	f107 0320 	add.w	r3, r7, #32
 80078e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	3728      	adds	r7, #40	; 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	20000064 	.word	0x20000064
 80078f4:	0800d9ec 	.word	0x0800d9ec
 80078f8:	0800d494 	.word	0x0800d494
 80078fc:	0800d5c8 	.word	0x0800d5c8

08007900 <_Z10SPI_Rx_ISRP3spi>:

stm_ret_t SPI_Rx_ISR(spi *spi){
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	; 0x28
 8007904:	af02      	add	r7, sp, #8
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
	stm_ret_t ret;
 800790a:	2301      	movs	r3, #1
 800790c:	763b      	strb	r3, [r7, #24]
 800790e:	2300      	movs	r3, #0
 8007910:	61fb      	str	r3, [r7, #28]

	*(uint32_t *)(spi -> rxbuf) = spi -> _spi -> DR ;
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	69d2      	ldr	r2, [r2, #28]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	6013      	str	r3, [r2, #0]
	spi -> rxcount++;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	629a      	str	r2, [r3, #40]	; 0x28
	if(spi -> _conf -> datasize ==  SPI_DATASIZE_8BIT)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	78db      	ldrb	r3, [r3, #3]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d105      	bne.n	800793e <_Z10SPI_Rx_ISRP3spi+0x3e>
		spi -> rxbuf += sizeof(uint8_t);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	1c5a      	adds	r2, r3, #1
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	61da      	str	r2, [r3, #28]
 800793c:	e009      	b.n	8007952 <_Z10SPI_Rx_ISRP3spi+0x52>
	else if(spi -> _conf -> datasize ==  SPI_DATASIZE_16BIT)
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	78db      	ldrb	r3, [r3, #3]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d104      	bne.n	8007952 <_Z10SPI_Rx_ISRP3spi+0x52>
		spi -> rxbuf += sizeof(uint16_t);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	69db      	ldr	r3, [r3, #28]
 800794c:	1c9a      	adds	r2, r3, #2
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	61da      	str	r2, [r3, #28]

	if(spi -> rxcount == spi -> rxlen){
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795a:	429a      	cmp	r2, r3
 800795c:	d145      	bne.n	80079ea <_Z10SPI_Rx_ISRP3spi+0xea>
		spi -> _spi -> CR2 &=~ (SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	685a      	ldr	r2, [r3, #4]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800796c:	605a      	str	r2, [r3, #4]

		stm_ret_t ret = wait_flag_in_register_timeout(&(spi->_spi->SR), SPI_SR_RXNE, FLAG_RESET, SPI_TIMEOUT);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f103 0108 	add.w	r1, r3, #8
 8007976:	f107 0010 	add.w	r0, r7, #16
 800797a:	2364      	movs	r3, #100	; 0x64
 800797c:	9300      	str	r3, [sp, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	2201      	movs	r2, #1
 8007982:	f001 fd6d 	bl	8009460 <wait_flag_in_register_timeout>
		if(!is_oke(&ret)) {
 8007986:	f107 0310 	add.w	r3, r7, #16
 800798a:	4618      	mov	r0, r3
 800798c:	f001 fdd0 	bl	8009530 <is_oke>
 8007990:	4603      	mov	r3, r0
 8007992:	f083 0301 	eor.w	r3, r3, #1
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b00      	cmp	r3, #0
 800799a:	d016      	beq.n	80079ca <_Z10SPI_Rx_ISRP3spi+0xca>
#if CONFIG_USE_LOG_MONITOR && SPI_LOG
			LOG_ERROR(TAG, "%s -> %s -> Wait flag timeout.", __FILE__, __FUNCTION__);
 800799c:	4b19      	ldr	r3, [pc, #100]	; (8007a04 <_Z10SPI_Rx_ISRP3spi+0x104>)
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	4b19      	ldr	r3, [pc, #100]	; (8007a08 <_Z10SPI_Rx_ISRP3spi+0x108>)
 80079a2:	4a1a      	ldr	r2, [pc, #104]	; (8007a0c <_Z10SPI_Rx_ISRP3spi+0x10c>)
 80079a4:	491a      	ldr	r1, [pc, #104]	; (8007a10 <_Z10SPI_Rx_ISRP3spi+0x110>)
 80079a6:	f001 fc77 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR && SPI_LOG */
			set_return_line(&ret, __LINE__);
 80079aa:	f107 0310 	add.w	r3, r7, #16
 80079ae:	f240 3149 	movw	r1, #841	; 0x349
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 fdad 	bl	8009512 <set_return_line>
			return ret;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f107 0310 	add.w	r3, r7, #16
 80079c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079c4:	e882 0003 	stmia.w	r2, {r0, r1}
			(void)tmp;
		}
	}

	return ret;
}
 80079c8:	e017      	b.n	80079fa <_Z10SPI_Rx_ISRP3spi+0xfa>
		if(!(spi->_conf->mode & (SPI_HALFDUPLEX_MASTER | SPI_HALFDUPLEX_SLAVE))){
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 030a 	and.w	r3, r3, #10
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d108      	bne.n	80079ea <_Z10SPI_Rx_ISRP3spi+0xea>
			__IO uint32_t tmp = spi -> _spi -> DR;
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	60fb      	str	r3, [r7, #12]
			tmp = spi -> _spi -> SR;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	689b      	ldr	r3, [r3, #8]
 80079e6:	60fb      	str	r3, [r7, #12]
			(void)tmp;
 80079e8:	68fb      	ldr	r3, [r7, #12]
	return ret;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	461a      	mov	r2, r3
 80079ee:	f107 0318 	add.w	r3, r7, #24
 80079f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80079f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	3720      	adds	r7, #32
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000064 	.word	0x20000064
 8007a08:	0800d9f8 	.word	0x0800d9f8
 8007a0c:	0800d494 	.word	0x0800d494
 8007a10:	0800d5c8 	.word	0x0800d5c8

08007a14 <_Z14SPI_IRQHandlerP3spi>:

void SPI_IRQHandler(spi *spi){
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
	spi_event_t event = SPI_EVENT_NOEVENT;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	__IO uint32_t cr2_reg = spi -> _spi -> CR2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	623b      	str	r3, [r7, #32]
	__IO uint32_t sr_reg  = spi -> _spi -> SR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	61fb      	str	r3, [r7, #28]

	if((cr2_reg & SPI_CR2_TXEIE) && (sr_reg & SPI_SR_TXE)){
 8007a32:	6a3b      	ldr	r3, [r7, #32]
 8007a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d006      	beq.n	8007a4a <_Z14SPI_IRQHandlerP3spi+0x36>
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <_Z14SPI_IRQHandlerP3spi+0x36>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e000      	b.n	8007a4c <_Z14SPI_IRQHandlerP3spi+0x38>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d018      	beq.n	8007a82 <_Z14SPI_IRQHandlerP3spi+0x6e>
		stm_ret_t ret = SPI_Tx_ISR(spi);
 8007a50:	f107 0314 	add.w	r3, r7, #20
 8007a54:	6879      	ldr	r1, [r7, #4]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fe74 	bl	8007744 <_Z10SPI_Tx_ISRP3spi>
		if(!is_oke(&ret)){
 8007a5c:	f107 0314 	add.w	r3, r7, #20
 8007a60:	4618      	mov	r0, r3
 8007a62:	f001 fd65 	bl	8009530 <is_oke>
 8007a66:	4603      	mov	r3, r0
 8007a68:	f083 0301 	eor.w	r3, r3, #1
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <_Z14SPI_IRQHandlerP3spi+0x66>
			event = SPI_EVENT_ERROR;
 8007a72:	2303      	movs	r3, #3
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto EventCB;
 8007a78:	e048      	b.n	8007b0c <_Z14SPI_IRQHandlerP3spi+0xf8>
		}
		event = SPI_EVENT_TRANSMIT_COMPLETE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto EventCB;
 8007a80:	e044      	b.n	8007b0c <_Z14SPI_IRQHandlerP3spi+0xf8>
	}
	if((cr2_reg & SPI_CR2_RXNEIE) && (sr_reg & SPI_SR_RXNE)){
 8007a82:	6a3b      	ldr	r3, [r7, #32]
 8007a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d006      	beq.n	8007a9a <_Z14SPI_IRQHandlerP3spi+0x86>
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <_Z14SPI_IRQHandlerP3spi+0x86>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <_Z14SPI_IRQHandlerP3spi+0x88>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d018      	beq.n	8007ad2 <_Z14SPI_IRQHandlerP3spi+0xbe>
		stm_ret_t ret = SPI_Rx_ISR(spi);
 8007aa0:	f107 030c 	add.w	r3, r7, #12
 8007aa4:	6879      	ldr	r1, [r7, #4]
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7ff ff2a 	bl	8007900 <_Z10SPI_Rx_ISRP3spi>
		if(!is_oke(&ret)){
 8007aac:	f107 030c 	add.w	r3, r7, #12
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f001 fd3d 	bl	8009530 <is_oke>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f083 0301 	eor.w	r3, r3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d003      	beq.n	8007aca <_Z14SPI_IRQHandlerP3spi+0xb6>
			event = SPI_EVENT_ERROR;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto EventCB;
 8007ac8:	e020      	b.n	8007b0c <_Z14SPI_IRQHandlerP3spi+0xf8>
		}
		event = SPI_EVENT_RECEIVE_COMPLETE;
 8007aca:	2302      	movs	r3, #2
 8007acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		goto EventCB;
 8007ad0:	e01c      	b.n	8007b0c <_Z14SPI_IRQHandlerP3spi+0xf8>
	}
	if((sr_reg & SPI_SR_OVR) || (sr_reg & SPI_SR_FRE)) {
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <_Z14SPI_IRQHandlerP3spi+0xd2>
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <_Z14SPI_IRQHandlerP3spi+0xd6>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e000      	b.n	8007aec <_Z14SPI_IRQHandlerP3spi+0xd8>
 8007aea:	2300      	movs	r3, #0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00c      	beq.n	8007b0a <_Z14SPI_IRQHandlerP3spi+0xf6>
		event = SPI_EVENT_ERROR;
 8007af0:	2303      	movs	r3, #3
 8007af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		__IO uint32_t tmp = spi -> _spi -> DR;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	60bb      	str	r3, [r7, #8]
		tmp = spi -> _spi -> SR;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	60bb      	str	r3, [r7, #8]
		(void)tmp;
 8007b06:	68bb      	ldr	r3, [r7, #8]
		goto EventCB;
 8007b08:	e000      	b.n	8007b0c <_Z14SPI_IRQHandlerP3spi+0xf8>
	}


	EventCB:
 8007b0a:	bf00      	nop
	if(spi -> handler_callback != NULL) spi -> handler_callback(event, spi -> parameter);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d007      	beq.n	8007b24 <_Z14SPI_IRQHandlerP3spi+0x110>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	6911      	ldr	r1, [r2, #16]
 8007b1c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
}
 8007b24:	bf00      	nop
 8007b26:	3728      	adds	r7, #40	; 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <SPI1_IRQHandler>:


#if defined(SPI1)
spi spi_1(SPI1);
spi_t spi1 = &spi_1;
void SPI1_IRQHandler(void){
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
	SPI_IRQHandler(&spi_1);
 8007b30:	4802      	ldr	r0, [pc, #8]	; (8007b3c <SPI1_IRQHandler+0x10>)
 8007b32:	f7ff ff6f 	bl	8007a14 <_Z14SPI_IRQHandlerP3spi>
}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	2000b698 	.word	0x2000b698

08007b40 <SPI2_IRQHandler>:
#endif /* defined(SPI1) */
#if defined(SPI2)
spi spi_2(SPI2);
spi_t spi2 = &spi_2;
void SPI2_IRQHandler(void){
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
	SPI_IRQHandler(&spi_2);
 8007b44:	4802      	ldr	r0, [pc, #8]	; (8007b50 <SPI2_IRQHandler+0x10>)
 8007b46:	f7ff ff65 	bl	8007a14 <_Z14SPI_IRQHandlerP3spi>
}
 8007b4a:	bf00      	nop
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000b6cc 	.word	0x2000b6cc

08007b54 <SPI3_IRQHandler>:
#endif /* defined(SPI2) */
#if defined(SPI3)
spi spi_3(SPI3);
spi_t spi3 = &spi_3;
void SPI3_IRQHandler(void){
 8007b54:	b580      	push	{r7, lr}
 8007b56:	af00      	add	r7, sp, #0
	SPI_IRQHandler(&spi_3);
 8007b58:	4802      	ldr	r0, [pc, #8]	; (8007b64 <SPI3_IRQHandler+0x10>)
 8007b5a:	f7ff ff5b 	bl	8007a14 <_Z14SPI_IRQHandlerP3spi>
}
 8007b5e:	bf00      	nop
 8007b60:	bd80      	pop	{r7, pc}
 8007b62:	bf00      	nop
 8007b64:	2000b700 	.word	0x2000b700

08007b68 <SPI4_IRQHandler>:
#endif /* defined(SPI3) */
#if defined(SPI4)
spi spi_4(SPI4);
spi_t spi4 = &spi_4;
void SPI4_IRQHandler(void){
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
	SPI_IRQHandler(&spi_4);
 8007b6c:	4802      	ldr	r0, [pc, #8]	; (8007b78 <SPI4_IRQHandler+0x10>)
 8007b6e:	f7ff ff51 	bl	8007a14 <_Z14SPI_IRQHandlerP3spi>
}
 8007b72:	bf00      	nop
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	2000b734 	.word	0x2000b734

08007b7c <SPI5_IRQHandler>:
#endif /* defined(SPI4) */
#if defined(SPI5)
spi spi_5(SPI5);
spi_t spi5 = &spi_5;
void SPI5_IRQHandler(void){
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
	SPI_IRQHandler(&spi_5);
 8007b80:	4802      	ldr	r0, [pc, #8]	; (8007b8c <SPI5_IRQHandler+0x10>)
 8007b82:	f7ff ff47 	bl	8007a14 <_Z14SPI_IRQHandlerP3spi>
}
 8007b86:	bf00      	nop
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	2000b768 	.word	0x2000b768

08007b90 <SPI6_IRQHandler>:
#endif /* defined(SPI5) */
#if defined(SPI6)
spi spi_6(SPI6);
spi_t spi6 = &spi_6;
void SPI6_IRQHandler(void){
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
	SPI_IRQHandler(&spi_6);
 8007b94:	4802      	ldr	r0, [pc, #8]	; (8007ba0 <SPI6_IRQHandler+0x10>)
 8007b96:	f7ff ff3d 	bl	8007a14 <_Z14SPI_IRQHandlerP3spi>
}
 8007b9a:	bf00      	nop
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	2000b79c 	.word	0x2000b79c

08007ba4 <_Z41__static_initialization_and_destruction_0ii>:
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	6039      	str	r1, [r7, #0]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d11c      	bne.n	8007bee <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d117      	bne.n	8007bee <_Z41__static_initialization_and_destruction_0ii+0x4a>
spi spi_1(SPI1);
 8007bbe:	490e      	ldr	r1, [pc, #56]	; (8007bf8 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8007bc0:	480e      	ldr	r0, [pc, #56]	; (8007bfc <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8007bc2:	f7ff fd8f 	bl	80076e4 <_ZN3spiC1EP11SPI_TypeDef>
spi spi_2(SPI2);
 8007bc6:	490e      	ldr	r1, [pc, #56]	; (8007c00 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8007bc8:	480e      	ldr	r0, [pc, #56]	; (8007c04 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8007bca:	f7ff fd8b 	bl	80076e4 <_ZN3spiC1EP11SPI_TypeDef>
spi spi_3(SPI3);
 8007bce:	490e      	ldr	r1, [pc, #56]	; (8007c08 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8007bd0:	480e      	ldr	r0, [pc, #56]	; (8007c0c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8007bd2:	f7ff fd87 	bl	80076e4 <_ZN3spiC1EP11SPI_TypeDef>
spi spi_4(SPI4);
 8007bd6:	490e      	ldr	r1, [pc, #56]	; (8007c10 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8007bd8:	480e      	ldr	r0, [pc, #56]	; (8007c14 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8007bda:	f7ff fd83 	bl	80076e4 <_ZN3spiC1EP11SPI_TypeDef>
spi spi_5(SPI5);
 8007bde:	490e      	ldr	r1, [pc, #56]	; (8007c18 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007be0:	480e      	ldr	r0, [pc, #56]	; (8007c1c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007be2:	f7ff fd7f 	bl	80076e4 <_ZN3spiC1EP11SPI_TypeDef>
spi spi_6(SPI6);
 8007be6:	490e      	ldr	r1, [pc, #56]	; (8007c20 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8007be8:	480e      	ldr	r0, [pc, #56]	; (8007c24 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007bea:	f7ff fd7b 	bl	80076e4 <_ZN3spiC1EP11SPI_TypeDef>
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40013000 	.word	0x40013000
 8007bfc:	2000b698 	.word	0x2000b698
 8007c00:	40003800 	.word	0x40003800
 8007c04:	2000b6cc 	.word	0x2000b6cc
 8007c08:	40003c00 	.word	0x40003c00
 8007c0c:	2000b700 	.word	0x2000b700
 8007c10:	40013400 	.word	0x40013400
 8007c14:	2000b734 	.word	0x2000b734
 8007c18:	40015000 	.word	0x40015000
 8007c1c:	2000b768 	.word	0x2000b768
 8007c20:	40015400 	.word	0x40015400
 8007c24:	2000b79c 	.word	0x2000b79c

08007c28 <_GLOBAL__sub_I_cc>:
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c30:	2001      	movs	r0, #1
 8007c32:	f7ff ffb7 	bl	8007ba4 <_Z41__static_initialization_and_destruction_0ii>
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	db0a      	blt.n	8007c62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	490c      	ldr	r1, [pc, #48]	; (8007c84 <__NVIC_SetPriority+0x4c>)
 8007c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c56:	0112      	lsls	r2, r2, #4
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c60:	e00a      	b.n	8007c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	4908      	ldr	r1, [pc, #32]	; (8007c88 <__NVIC_SetPriority+0x50>)
 8007c68:	79fb      	ldrb	r3, [r7, #7]
 8007c6a:	f003 030f 	and.w	r3, r3, #15
 8007c6e:	3b04      	subs	r3, #4
 8007c70:	0112      	lsls	r2, r2, #4
 8007c72:	b2d2      	uxtb	r2, r2
 8007c74:	440b      	add	r3, r1
 8007c76:	761a      	strb	r2, [r3, #24]
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	e000e100 	.word	0xe000e100
 8007c88:	e000ed00 	.word	0xe000ed00

08007c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c9c:	d301      	bcc.n	8007ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e00f      	b.n	8007cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007ca2:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <SysTick_Config+0x40>)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007caa:	210f      	movs	r1, #15
 8007cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cb0:	f7ff ffc2 	bl	8007c38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cb4:	4b05      	ldr	r3, [pc, #20]	; (8007ccc <SysTick_Config+0x40>)
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cba:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <SysTick_Config+0x40>)
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	e000e010 	.word	0xe000e010

08007cd0 <systick_init>:
extern volatile uint32_t systick_total_ticks;
extern volatile uint32_t systick_idle_ticks;
extern volatile float cpu_load_percent;


void systick_init(uint32_t systick_priority){
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	SysTick_Config(SystemCoreClock / CONFIG_SYSTICK_RATE);
 8007cd8:	4b09      	ldr	r3, [pc, #36]	; (8007d00 <systick_init+0x30>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <systick_init+0x34>)
 8007cde:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce2:	099b      	lsrs	r3, r3, #6
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff ffd1 	bl	8007c8c <SysTick_Config>

	NVIC_Set_Priority(SysTick_IRQn, systick_priority, 0U);
 8007cea:	2200      	movs	r2, #0
 8007cec:	6879      	ldr	r1, [r7, #4]
 8007cee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007cf2:	f001 fd95 	bl	8009820 <NVIC_Set_Priority>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000008 	.word	0x20000008
 8007d04:	10624dd3 	.word	0x10624dd3

08007d08 <increment_tick>:

void increment_tick(void){
 8007d08:	b480      	push	{r7}
 8007d0a:	af00      	add	r7, sp, #0
	sdk_tick++;
 8007d0c:	4b04      	ldr	r3, [pc, #16]	; (8007d20 <increment_tick+0x18>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3301      	adds	r3, #1
 8007d12:	4a03      	ldr	r2, [pc, #12]	; (8007d20 <increment_tick+0x18>)
 8007d14:	6013      	str	r3, [r2, #0]
}
 8007d16:	bf00      	nop
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	2000b7d0 	.word	0x2000b7d0

08007d24 <systick_get_tick>:

uint32_t systick_get_tick(void){
 8007d24:	b480      	push	{r7}
 8007d26:	af00      	add	r7, sp, #0
	return sdk_tick;
 8007d28:	4b03      	ldr	r3, [pc, #12]	; (8007d38 <systick_get_tick+0x14>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	2000b7d0 	.word	0x2000b7d0

08007d3c <systick_delay_ms>:

void systick_delay_ms(uint32_t ms){
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = sdk_tick;
 8007d44:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <systick_delay_ms+0x48>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60bb      	str	r3, [r7, #8]
	uint32_t wait = ms;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	60fb      	str	r3, [r7, #12]

	if (wait < 0xFFFFFFU) wait += 1UL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d202      	bcs.n	8007d5e <systick_delay_ms+0x22>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]

	while((sdk_tick - tickstart) < wait);
 8007d5e:	4b09      	ldr	r3, [pc, #36]	; (8007d84 <systick_delay_ms+0x48>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	bf8c      	ite	hi
 8007d6c:	2301      	movhi	r3, #1
 8007d6e:	2300      	movls	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d000      	beq.n	8007d78 <systick_delay_ms+0x3c>
 8007d76:	e7f2      	b.n	8007d5e <systick_delay_ms+0x22>
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	2000b7d0 	.word	0x2000b7d0

08007d88 <get_tick>:

uint32_t get_tick(void){
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0
	return get_tick_func();
 8007d8c:	4b02      	ldr	r3, [pc, #8]	; (8007d98 <get_tick+0x10>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4798      	blx	r3
 8007d92:	4603      	mov	r3, r0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	2000006c 	.word	0x2000006c

08007d9c <delay_ms>:

void delay_ms(uint32_t ms){
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b082      	sub	sp, #8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
	delay_ms_func(ms);
 8007da4:	4b03      	ldr	r3, [pc, #12]	; (8007db4 <delay_ms+0x18>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	4798      	blx	r3
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000068 	.word	0x20000068

08007db8 <app_systick_process>:
void set_function_delay_ms(void(*func_ptr)(uint32_t)){
	delay_ms_func = func_ptr;
}

extern "C"{
	void app_systick_process(void){
 8007db8:	b580      	push	{r7, lr}
 8007dba:	af00      	add	r7, sp, #0
		increment_tick();
 8007dbc:	f7ff ffa4 	bl	8007d08 <increment_tick>

		systick_total_ticks++;
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <app_systick_process+0x84>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	4a1d      	ldr	r2, [pc, #116]	; (8007e3c <app_systick_process+0x84>)
 8007dc8:	6013      	str	r3, [r2, #0]
		if(systick_total_ticks == 1000){
 8007dca:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <app_systick_process+0x84>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2301      	moveq	r3, #1
 8007dd6:	2300      	movne	r3, #0
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d02c      	beq.n	8007e38 <app_systick_process+0x80>
			cpu_load_percent = (float)(100.0 - (((float)systick_idle_ticks/(float)systick_total_ticks)*100.0));
 8007dde:	4b18      	ldr	r3, [pc, #96]	; (8007e40 <app_systick_process+0x88>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007dea:	4b14      	ldr	r3, [pc, #80]	; (8007e3c <app_systick_process+0x84>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007dfa:	ee16 0a90 	vmov	r0, s13
 8007dfe:	f7f8 fbc3 	bl	8000588 <__aeabi_f2d>
 8007e02:	f04f 0200 	mov.w	r2, #0
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <app_systick_process+0x8c>)
 8007e08:	f7f8 fc16 	bl	8000638 <__aeabi_dmul>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	f04f 0000 	mov.w	r0, #0
 8007e14:	490b      	ldr	r1, [pc, #44]	; (8007e44 <app_systick_process+0x8c>)
 8007e16:	f7f8 fa57 	bl	80002c8 <__aeabi_dsub>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	f7f8 ff01 	bl	8000c28 <__aeabi_d2f>
 8007e26:	4603      	mov	r3, r0
 8007e28:	4a07      	ldr	r2, [pc, #28]	; (8007e48 <app_systick_process+0x90>)
 8007e2a:	6013      	str	r3, [r2, #0]
			systick_total_ticks = 0;
 8007e2c:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <app_systick_process+0x84>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
			systick_idle_ticks = 0;
 8007e32:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <app_systick_process+0x88>)
 8007e34:	2200      	movs	r2, #0
 8007e36:	601a      	str	r2, [r3, #0]
		}

	}
 8007e38:	bf00      	nop
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	2000ba70 	.word	0x2000ba70
 8007e40:	2000ba74 	.word	0x2000ba74
 8007e44:	40590000 	.word	0x40590000
 8007e48:	2000ba7c 	.word	0x2000ba7c

08007e4c <_ZN3timC1EP11TIM_TypeDef>:
static const char *TAG = "TIM";
#endif /* CONFIG_USE_LOG_MONITOR && TIM_LOG */

void TIM_IRQHandler(tim *timptr);

tim::tim(TIM_TypeDef *Timer){
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	601a      	str	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	609a      	str	r2, [r3, #8]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	60da      	str	r2, [r3, #12]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	611a      	str	r2, [r3, #16]
	_tim = Timer;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	605a      	str	r2, [r3, #4]
}
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4618      	mov	r0, r3
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
	...

08007e84 <_Z41__static_initialization_and_destruction_0ii>:
void TIM8_TRG_COM_TIM14_IRQHandler(void){
#if USE_TIM8
	TIM_IRQHandler(&tim_8);
#endif
	TIM_IRQHandler(&tim_14);
}
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d13d      	bne.n	8007f10 <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d138      	bne.n	8007f10 <_Z41__static_initialization_and_destruction_0ii+0x8c>
tim tim_1(TIM1);
 8007e9e:	491e      	ldr	r1, [pc, #120]	; (8007f18 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007ea0:	481e      	ldr	r0, [pc, #120]	; (8007f1c <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007ea2:	f7ff ffd3 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_2(TIM2);
 8007ea6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007eaa:	481d      	ldr	r0, [pc, #116]	; (8007f20 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007eac:	f7ff ffce 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_3(TIM3);
 8007eb0:	491c      	ldr	r1, [pc, #112]	; (8007f24 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007eb2:	481d      	ldr	r0, [pc, #116]	; (8007f28 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007eb4:	f7ff ffca 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_4(TIM4);
 8007eb8:	491c      	ldr	r1, [pc, #112]	; (8007f2c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007eba:	481d      	ldr	r0, [pc, #116]	; (8007f30 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007ebc:	f7ff ffc6 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_5(TIM5);
 8007ec0:	491c      	ldr	r1, [pc, #112]	; (8007f34 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8007ec2:	481d      	ldr	r0, [pc, #116]	; (8007f38 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8007ec4:	f7ff ffc2 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_6(TIM6);
 8007ec8:	491c      	ldr	r1, [pc, #112]	; (8007f3c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8007eca:	481d      	ldr	r0, [pc, #116]	; (8007f40 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8007ecc:	f7ff ffbe 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_7(TIM7);
 8007ed0:	491c      	ldr	r1, [pc, #112]	; (8007f44 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8007ed2:	481d      	ldr	r0, [pc, #116]	; (8007f48 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8007ed4:	f7ff ffba 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_8(TIM8);
 8007ed8:	491c      	ldr	r1, [pc, #112]	; (8007f4c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8007eda:	481d      	ldr	r0, [pc, #116]	; (8007f50 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8007edc:	f7ff ffb6 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_9(TIM9);
 8007ee0:	491c      	ldr	r1, [pc, #112]	; (8007f54 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8007ee2:	481d      	ldr	r0, [pc, #116]	; (8007f58 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8007ee4:	f7ff ffb2 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_10(TIM10);
 8007ee8:	491c      	ldr	r1, [pc, #112]	; (8007f5c <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8007eea:	481d      	ldr	r0, [pc, #116]	; (8007f60 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8007eec:	f7ff ffae 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_11(TIM11);
 8007ef0:	491c      	ldr	r1, [pc, #112]	; (8007f64 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8007ef2:	481d      	ldr	r0, [pc, #116]	; (8007f68 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8007ef4:	f7ff ffaa 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_12(TIM12);
 8007ef8:	491c      	ldr	r1, [pc, #112]	; (8007f6c <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8007efa:	481d      	ldr	r0, [pc, #116]	; (8007f70 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8007efc:	f7ff ffa6 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_13(TIM13);
 8007f00:	491c      	ldr	r1, [pc, #112]	; (8007f74 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8007f02:	481d      	ldr	r0, [pc, #116]	; (8007f78 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8007f04:	f7ff ffa2 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
tim tim_14(TIM14);
 8007f08:	491c      	ldr	r1, [pc, #112]	; (8007f7c <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8007f0a:	481d      	ldr	r0, [pc, #116]	; (8007f80 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8007f0c:	f7ff ff9e 	bl	8007e4c <_ZN3timC1EP11TIM_TypeDef>
}
 8007f10:	bf00      	nop
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	40010000 	.word	0x40010000
 8007f1c:	2000b7d4 	.word	0x2000b7d4
 8007f20:	2000b7ec 	.word	0x2000b7ec
 8007f24:	40000400 	.word	0x40000400
 8007f28:	2000b804 	.word	0x2000b804
 8007f2c:	40000800 	.word	0x40000800
 8007f30:	2000b81c 	.word	0x2000b81c
 8007f34:	40000c00 	.word	0x40000c00
 8007f38:	2000b834 	.word	0x2000b834
 8007f3c:	40001000 	.word	0x40001000
 8007f40:	2000b84c 	.word	0x2000b84c
 8007f44:	40001400 	.word	0x40001400
 8007f48:	2000b864 	.word	0x2000b864
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	2000b87c 	.word	0x2000b87c
 8007f54:	40014000 	.word	0x40014000
 8007f58:	2000b894 	.word	0x2000b894
 8007f5c:	40014400 	.word	0x40014400
 8007f60:	2000b8ac 	.word	0x2000b8ac
 8007f64:	40014800 	.word	0x40014800
 8007f68:	2000b8c4 	.word	0x2000b8c4
 8007f6c:	40001800 	.word	0x40001800
 8007f70:	2000b8dc 	.word	0x2000b8dc
 8007f74:	40001c00 	.word	0x40001c00
 8007f78:	2000b8f4 	.word	0x2000b8f4
 8007f7c:	40002000 	.word	0x40002000
 8007f80:	2000b90c 	.word	0x2000b90c

08007f84 <_GLOBAL__sub_I__ZN3timC2EP11TIM_TypeDef>:
 8007f84:	b580      	push	{r7, lr}
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	f7ff ff79 	bl	8007e84 <_Z41__static_initialization_and_destruction_0ii>
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <__NVIC_EnableIRQ>:
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	db0b      	blt.n	8007fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	f003 021f 	and.w	r2, r3, #31
 8007fac:	4907      	ldr	r1, [pc, #28]	; (8007fcc <__NVIC_EnableIRQ+0x38>)
 8007fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8007fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	e000e100 	.word	0xe000e100

08007fd0 <__NVIC_ClearPendingIRQ>:
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	db0c      	blt.n	8007ffc <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fe2:	79fb      	ldrb	r3, [r7, #7]
 8007fe4:	f003 021f 	and.w	r2, r3, #31
 8007fe8:	4907      	ldr	r1, [pc, #28]	; (8008008 <__NVIC_ClearPendingIRQ+0x38>)
 8007fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fee:	095b      	lsrs	r3, r3, #5
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ff6:	3360      	adds	r3, #96	; 0x60
 8007ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr
 8008008:	e000e100 	.word	0xe000e100

0800800c <__NVIC_SetPriority>:
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800801c:	2b00      	cmp	r3, #0
 800801e:	db0a      	blt.n	8008036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b2da      	uxtb	r2, r3
 8008024:	490c      	ldr	r1, [pc, #48]	; (8008058 <__NVIC_SetPriority+0x4c>)
 8008026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800802a:	0112      	lsls	r2, r2, #4
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	440b      	add	r3, r1
 8008030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008034:	e00a      	b.n	800804c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4908      	ldr	r1, [pc, #32]	; (800805c <__NVIC_SetPriority+0x50>)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	3b04      	subs	r3, #4
 8008044:	0112      	lsls	r2, r2, #4
 8008046:	b2d2      	uxtb	r2, r2
 8008048:	440b      	add	r3, r1
 800804a:	761a      	strb	r2, [r3, #24]
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	e000e100 	.word	0xe000e100
 800805c:	e000ed00 	.word	0xe000ed00

08008060 <__NVIC_SystemReset>:
{
 8008060:	b480      	push	{r7}
 8008062:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008064:	f3bf 8f4f 	dsb	sy
}
 8008068:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800806a:	4b06      	ldr	r3, [pc, #24]	; (8008084 <__NVIC_SystemReset+0x24>)
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008072:	4904      	ldr	r1, [pc, #16]	; (8008084 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008074:	4b04      	ldr	r3, [pc, #16]	; (8008088 <__NVIC_SystemReset+0x28>)
 8008076:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008078:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800807a:	f3bf 8f4f 	dsb	sy
}
 800807e:	bf00      	nop
    __NOP();
 8008080:	bf00      	nop
 8008082:	e7fd      	b.n	8008080 <__NVIC_SystemReset+0x20>
 8008084:	e000ed00 	.word	0xe000ed00
 8008088:	05fa0004 	.word	0x05fa0004

0800808c <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	ed87 0a01 	vstr	s0, [r7, #4]
 8008096:	ed97 0a01 	vldr	s0, [r7, #4]
 800809a:	f001 ff71 	bl	8009f80 <ceilf>
 800809e:	eef0 7a40 	vmov.f32	s15, s0
 80080a2:	eeb0 0a67 	vmov.f32	s0, s15
 80080a6:	3708      	adds	r7, #8
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <_ZN5usartC1EP13USART_TypeDef>:
static const char *TAG = "USART";
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */

void USART_IRQ_Handler(usart *usart);

usart::usart(USART_TypeDef *usart){
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	605a      	str	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	609a      	str	r2, [r3, #8]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	60da      	str	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	611a      	str	r2, [r3, #16]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	615a      	str	r2, [r3, #20]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	771a      	strb	r2, [r3, #28]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	775a      	strb	r2, [r3, #29]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	621a      	str	r2, [r3, #32]
	_usart = usart;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	601a      	str	r2, [r3, #0]
}
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4618      	mov	r0, r3
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <_ZN5usart4initEP14usart_config_t>:

stm_ret_t usart::init(usart_config_t *conf){
 80080fc:	b5b0      	push	{r4, r5, r7, lr}
 80080fe:	b08c      	sub	sp, #48	; 0x30
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
	stm_ret_t ret;
 8008108:	2301      	movs	r3, #1
 800810a:	753b      	strb	r3, [r7, #20]
 800810c:	2300      	movs	r3, #0
 800810e:	61bb      	str	r3, [r7, #24]
	_conf = conf;
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	621a      	str	r2, [r3, #32]
#if ENABLE_DMA
	_rxdma = _conf -> rxdma;
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6a1b      	ldr	r3, [r3, #32]
 800811a:	6a1a      	ldr	r2, [r3, #32]
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	609a      	str	r2, [r3, #8]
	_txdma = _conf -> txdma;
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	69da      	ldr	r2, [r3, #28]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	605a      	str	r2, [r3, #4]
#endif /* ENABLE_DMA */
	__IO uint32_t usart_bus_frequency = 0UL;
 800812a:	2300      	movs	r3, #0
 800812c:	613b      	str	r3, [r7, #16]

	gpio_port_clock_enable(_conf -> txport);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	4618      	mov	r0, r3
 8008136:	f7fe fd23 	bl	8006b80 <gpio_port_clock_enable>
	gpio_port_clock_enable(_conf -> rxport);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	6a1b      	ldr	r3, [r3, #32]
 800813e:	695b      	ldr	r3, [r3, #20]
 8008140:	4618      	mov	r0, r3
 8008142:	f7fe fd1d 	bl	8006b80 <gpio_port_clock_enable>
	if(
#if defined(USART1)
			_usart == USART1
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	681b      	ldr	r3, [r3, #0]
	if(
 800814a:	4a11      	ldr	r2, [pc, #68]	; (8008190 <_ZN5usart4initEP14usart_config_t+0x94>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d009      	beq.n	8008164 <_ZN5usart4initEP14usart_config_t+0x68>
#endif /* defined(USART1) */
			||
#if defined(USART2)
			_usart == USART2
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	681b      	ldr	r3, [r3, #0]
			||
 8008154:	4a0f      	ldr	r2, [pc, #60]	; (8008194 <_ZN5usart4initEP14usart_config_t+0x98>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <_ZN5usart4initEP14usart_config_t+0x68>
#endif /* defined(USART2) */
			||
#if defined(USART3)
			_usart == USART3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	681b      	ldr	r3, [r3, #0]
			||
 800815e:	4a0e      	ldr	r2, [pc, #56]	; (8008198 <_ZN5usart4initEP14usart_config_t+0x9c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d11b      	bne.n	800819c <_ZN5usart4initEP14usart_config_t+0xa0>
#endif /* defined(USART3) */
			){
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF7_USART1_3);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	6a1b      	ldr	r3, [r3, #32]
 8008168:	68d8      	ldr	r0, [r3, #12]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	8a1b      	ldrh	r3, [r3, #16]
 8008170:	2207      	movs	r2, #7
 8008172:	4619      	mov	r1, r3
 8008174:	f7fe fe4d 	bl	8006e12 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF7_USART1_3);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	6958      	ldr	r0, [r3, #20]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	8b1b      	ldrh	r3, [r3, #24]
 8008184:	2207      	movs	r2, #7
 8008186:	4619      	mov	r1, r3
 8008188:	f7fe fe43 	bl	8006e12 <gpio_set_alternatefunction>
 800818c:	e01a      	b.n	80081c4 <_ZN5usart4initEP14usart_config_t+0xc8>
 800818e:	bf00      	nop
 8008190:	40011000 	.word	0x40011000
 8008194:	40004400 	.word	0x40004400
 8008198:	40004800 	.word	0x40004800
	}
	else{
#if defined(UART7) & defined(UART8)
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_8);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	68d8      	ldr	r0, [r3, #12]
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	8a1b      	ldrh	r3, [r3, #16]
 80081a8:	2208      	movs	r2, #8
 80081aa:	4619      	mov	r1, r3
 80081ac:	f7fe fe31 	bl	8006e12 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_8);
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	6958      	ldr	r0, [r3, #20]
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	8b1b      	ldrh	r3, [r3, #24]
 80081bc:	2208      	movs	r2, #8
 80081be:	4619      	mov	r1, r3
 80081c0:	f7fe fe27 	bl	8006e12 <gpio_set_alternatefunction>
#else
		gpio_set_alternatefunction(_conf -> txport, _conf -> txpin, AF8_USART4_6);
		gpio_set_alternatefunction(_conf -> rxport, _conf -> rxpin, AF8_USART4_6);
#endif /* defined(UART7) & defined(UART8) */
	}
	gpio_set_alternatefunction_type(_conf -> txport, _conf -> txpin, GPIO_OUTPUT_PUSHPULL);
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	68d8      	ldr	r0, [r3, #12]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	8a1b      	ldrh	r3, [r3, #16]
 80081d0:	2206      	movs	r2, #6
 80081d2:	4619      	mov	r1, r3
 80081d4:	f7fe fe8f 	bl	8006ef6 <gpio_set_alternatefunction_type>
	gpio_set_alternatefunction_type(_conf -> rxport, _conf -> rxpin, GPIO_OUTPUT_PUSHPULL);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	6a1b      	ldr	r3, [r3, #32]
 80081dc:	6958      	ldr	r0, [r3, #20]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	8b1b      	ldrh	r3, [r3, #24]
 80081e4:	2206      	movs	r2, #6
 80081e6:	4619      	mov	r1, r3
 80081e8:	f7fe fe85 	bl	8006ef6 <gpio_set_alternatefunction_type>

#if defined(USART1)
	if(_usart == USART1){
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4aa9      	ldr	r2, [pc, #676]	; (8008498 <_ZN5usart4initEP14usart_config_t+0x39c>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d10a      	bne.n	800820c <_ZN5usart4initEP14usart_config_t+0x110>
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80081f6:	4ba9      	ldr	r3, [pc, #676]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 80081f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fa:	4aa8      	ldr	r2, [pc, #672]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 80081fc:	f043 0310 	orr.w	r3, r3, #16
 8008200:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 8008202:	2003      	movs	r0, #3
 8008204:	f7ff f996 	bl	8007534 <rcc_get_bus_frequency>
 8008208:	4603      	mov	r3, r0
 800820a:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(USART1) */
#if defined(USART2)
	if(_usart == USART2){
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4aa3      	ldr	r2, [pc, #652]	; (80084a0 <_ZN5usart4initEP14usart_config_t+0x3a4>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d10a      	bne.n	800822c <_ZN5usart4initEP14usart_config_t+0x130>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8008216:	4ba1      	ldr	r3, [pc, #644]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 8008218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821a:	4aa0      	ldr	r2, [pc, #640]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 800821c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008220:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008222:	2002      	movs	r0, #2
 8008224:	f7ff f986 	bl	8007534 <rcc_get_bus_frequency>
 8008228:	4603      	mov	r3, r0
 800822a:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(USART2) */
#if defined(USART3)
	if(_usart == USART3){
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a9c      	ldr	r2, [pc, #624]	; (80084a4 <_ZN5usart4initEP14usart_config_t+0x3a8>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d10a      	bne.n	800824c <_ZN5usart4initEP14usart_config_t+0x150>
		RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8008236:	4b99      	ldr	r3, [pc, #612]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 8008238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823a:	4a98      	ldr	r2, [pc, #608]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 800823c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008240:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008242:	2002      	movs	r0, #2
 8008244:	f7ff f976 	bl	8007534 <rcc_get_bus_frequency>
 8008248:	4603      	mov	r3, r0
 800824a:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(USART3) */
#if defined(UART4)
	if(_usart == UART4){
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a95      	ldr	r2, [pc, #596]	; (80084a8 <_ZN5usart4initEP14usart_config_t+0x3ac>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d10a      	bne.n	800826c <_ZN5usart4initEP14usart_config_t+0x170>
		RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8008256:	4b91      	ldr	r3, [pc, #580]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 8008258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825a:	4a90      	ldr	r2, [pc, #576]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 800825c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008260:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008262:	2002      	movs	r0, #2
 8008264:	f7ff f966 	bl	8007534 <rcc_get_bus_frequency>
 8008268:	4603      	mov	r3, r0
 800826a:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(UART4) */
#if defined(UART5)
	if(_usart == UART5){
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a8e      	ldr	r2, [pc, #568]	; (80084ac <_ZN5usart4initEP14usart_config_t+0x3b0>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d10a      	bne.n	800828c <_ZN5usart4initEP14usart_config_t+0x190>
		RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8008276:	4b89      	ldr	r3, [pc, #548]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 8008278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827a:	4a88      	ldr	r2, [pc, #544]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 800827c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008280:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 8008282:	2002      	movs	r0, #2
 8008284:	f7ff f956 	bl	8007534 <rcc_get_bus_frequency>
 8008288:	4603      	mov	r3, r0
 800828a:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(UART5) */
#if defined(USART6)
	if(_usart == USART6){
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a87      	ldr	r2, [pc, #540]	; (80084b0 <_ZN5usart4initEP14usart_config_t+0x3b4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d10a      	bne.n	80082ac <_ZN5usart4initEP14usart_config_t+0x1b0>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8008296:	4b81      	ldr	r3, [pc, #516]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 8008298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829a:	4a80      	ldr	r2, [pc, #512]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 800829c:	f043 0320 	orr.w	r3, r3, #32
 80082a0:	6453      	str	r3, [r2, #68]	; 0x44
		usart_bus_frequency = rcc_get_bus_frequency(APB2);
 80082a2:	2003      	movs	r0, #3
 80082a4:	f7ff f946 	bl	8007534 <rcc_get_bus_frequency>
 80082a8:	4603      	mov	r3, r0
 80082aa:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(USART6) */
#if defined(UART7)
	if(_usart == UART7){
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a80      	ldr	r2, [pc, #512]	; (80084b4 <_ZN5usart4initEP14usart_config_t+0x3b8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d10a      	bne.n	80082cc <_ZN5usart4initEP14usart_config_t+0x1d0>
		RCC -> APB1ENR |= RCC_APB1ENR_UART7EN;
 80082b6:	4b79      	ldr	r3, [pc, #484]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	4a78      	ldr	r2, [pc, #480]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 80082bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082c0:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 80082c2:	2002      	movs	r0, #2
 80082c4:	f7ff f936 	bl	8007534 <rcc_get_bus_frequency>
 80082c8:	4603      	mov	r3, r0
 80082ca:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(UART7) */
#if defined(UART8)
	if(_usart == UART8){
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a79      	ldr	r2, [pc, #484]	; (80084b8 <_ZN5usart4initEP14usart_config_t+0x3bc>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d10a      	bne.n	80082ec <_ZN5usart4initEP14usart_config_t+0x1f0>
		RCC -> APB1ENR |= RCC_APB1ENR_UART8EN;
 80082d6:	4b71      	ldr	r3, [pc, #452]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 80082d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082da:	4a70      	ldr	r2, [pc, #448]	; (800849c <_ZN5usart4initEP14usart_config_t+0x3a0>)
 80082dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80082e0:	6413      	str	r3, [r2, #64]	; 0x40
		usart_bus_frequency = rcc_get_bus_frequency(APB1);
 80082e2:	2002      	movs	r0, #2
 80082e4:	f7ff f926 	bl	8007534 <rcc_get_bus_frequency>
 80082e8:	4603      	mov	r3, r0
 80082ea:	613b      	str	r3, [r7, #16]
	}
#endif /* defined(UART8) */


	_usart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082fa:	f043 030c 	orr.w	r3, r3, #12
 80082fe:	60d3      	str	r3, [r2, #12]

	float USARTDIV = (float)(usart_bus_frequency/(_conf -> baudrate * 16.0));
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	4618      	mov	r0, r3
 8008304:	f7f8 f91e 	bl	8000544 <__aeabi_ui2d>
 8008308:	4604      	mov	r4, r0
 800830a:	460d      	mov	r5, r1
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	6a1b      	ldr	r3, [r3, #32]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4618      	mov	r0, r3
 8008314:	f7f8 f916 	bl	8000544 <__aeabi_ui2d>
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	4b67      	ldr	r3, [pc, #412]	; (80084bc <_ZN5usart4initEP14usart_config_t+0x3c0>)
 800831e:	f7f8 f98b 	bl	8000638 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4620      	mov	r0, r4
 8008328:	4629      	mov	r1, r5
 800832a:	f7f8 faaf 	bl	800088c <__aeabi_ddiv>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	4610      	mov	r0, r2
 8008334:	4619      	mov	r1, r3
 8008336:	f7f8 fc77 	bl	8000c28 <__aeabi_d2f>
 800833a:	4603      	mov	r3, r0
 800833c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t DIV_Fraction = 0x00UL;
 800833e:	2300      	movs	r3, #0
 8008340:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 8008342:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800834a:	ee17 3a90 	vmov	r3, s15
 800834e:	853b      	strh	r3, [r7, #40]	; 0x28

	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 8008350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008352:	f7f8 f919 	bl	8000588 <__aeabi_f2d>
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <_ZN5usart4initEP14usart_config_t+0x3c4>)
 800835c:	f7f8 f96c 	bl	8000638 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4610      	mov	r0, r2
 8008366:	4619      	mov	r1, r3
 8008368:	f7f8 fc3e 	bl	8000be8 <__aeabi_d2uiz>
 800836c:	4603      	mov	r3, r0
 800836e:	b29b      	uxth	r3, r3
 8008370:	461c      	mov	r4, r3
 8008372:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008374:	4618      	mov	r0, r3
 8008376:	f7f8 f8f5 	bl	8000564 <__aeabi_i2d>
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	4b50      	ldr	r3, [pc, #320]	; (80084c0 <_ZN5usart4initEP14usart_config_t+0x3c4>)
 8008380:	f7f8 f95a 	bl	8000638 <__aeabi_dmul>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4610      	mov	r0, r2
 800838a:	4619      	mov	r1, r3
 800838c:	f7f8 fc2c 	bl	8000be8 <__aeabi_d2uiz>
 8008390:	4603      	mov	r3, r0
 8008392:	b29b      	uxth	r3, r3
 8008394:	1ae3      	subs	r3, r4, r3
 8008396:	4618      	mov	r0, r3
 8008398:	f7f8 f8e4 	bl	8000564 <__aeabi_i2d>
 800839c:	f04f 0200 	mov.w	r2, #0
 80083a0:	4b47      	ldr	r3, [pc, #284]	; (80084c0 <_ZN5usart4initEP14usart_config_t+0x3c4>)
 80083a2:	f7f8 fa73 	bl	800088c <__aeabi_ddiv>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4610      	mov	r0, r2
 80083ac:	4619      	mov	r1, r3
 80083ae:	f7f8 fc3b 	bl	8000c28 <__aeabi_d2f>
 80083b2:	ee07 0a10 	vmov	s14, r0
 80083b6:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 80083ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083be:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	DIV_Fraction = ceil(Fraction);
 80083c2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80083c6:	f7ff fe61 	bl	800808c <_ZSt4ceilf>
 80083ca:	eef0 7a40 	vmov.f32	s15, s0
 80083ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d2:	ee17 3a90 	vmov	r3, s15
 80083d6:	857b      	strh	r3, [r7, #42]	; 0x2a
	_usart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 80083d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083da:	011a      	lsls	r2, r3, #4
 80083dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80083de:	431a      	orrs	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	609a      	str	r2, [r3, #8]

	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)){
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	6a1b      	ldr	r3, [r3, #32]
 80083ea:	791b      	ldrb	r3, [r3, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 809a 	beq.w	8008526 <_ZN5usart4initEP14usart_config_t+0x42a>

		if(_conf -> interruptpriority < CONFIG_RTOS_MAX_SYSTEM_INTERRUPT_PRIORITY){
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d81a      	bhi.n	8008432 <_ZN5usart4initEP14usart_config_t+0x336>
			set_return(&ret, STM_ERR, __LINE__);
 80083fc:	f107 0314 	add.w	r3, r7, #20
 8008400:	2286      	movs	r2, #134	; 0x86
 8008402:	2100      	movs	r1, #0
 8008404:	4618      	mov	r0, r3
 8008406:	f001 f871 	bl	80094ec <set_return>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
			LOG_ERROR(TAG, "%s -> %s -> Invalid priority, please increase the priority value.", __FILE__, __FUNCTION__);
 800840a:	4b2e      	ldr	r3, [pc, #184]	; (80084c4 <_ZN5usart4initEP14usart_config_t+0x3c8>)
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	4b2e      	ldr	r3, [pc, #184]	; (80084c8 <_ZN5usart4initEP14usart_config_t+0x3cc>)
 8008410:	4a2e      	ldr	r2, [pc, #184]	; (80084cc <_ZN5usart4initEP14usart_config_t+0x3d0>)
 8008412:	492f      	ldr	r1, [pc, #188]	; (80084d0 <_ZN5usart4initEP14usart_config_t+0x3d4>)
 8008414:	f000 ff40 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */
#if CONFIG_FAIL_CHIP_RESET
#if CONFIG_USE_LOG_MONITOR && USART_LOG
			LOG_INFO(TAG, "Chip will reset after %ds.", CONFIG_WAIT_FOR_RESET_TIME);
 8008418:	4b2a      	ldr	r3, [pc, #168]	; (80084c4 <_ZN5usart4initEP14usart_config_t+0x3c8>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2205      	movs	r2, #5
 800841e:	492d      	ldr	r1, [pc, #180]	; (80084d4 <_ZN5usart4initEP14usart_config_t+0x3d8>)
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fea1 	bl	8009168 <LOG_INFO>
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */
			systick_delay_ms(CONFIG_WAIT_FOR_RESET_TIME*1000U);
 8008426:	f241 3088 	movw	r0, #5000	; 0x1388
 800842a:	f7ff fc87 	bl	8007d3c <systick_delay_ms>
			__NVIC_SystemReset();
 800842e:	f7ff fe17 	bl	8008060 <__NVIC_SystemReset>
#endif /* CONFIG_FAIL_CHIP_RESET */
			return ret;
		}

#if defined(USART1)
		if	   (_usart == USART1) IRQn = USART1_IRQn;
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a18      	ldr	r2, [pc, #96]	; (8008498 <_ZN5usart4initEP14usart_config_t+0x39c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d104      	bne.n	8008446 <_ZN5usart4initEP14usart_config_t+0x34a>
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2225      	movs	r2, #37	; 0x25
 8008440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008444:	e065      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
#endif /* defined(USART1) */
#if defined(USART2)
		else if(_usart == USART2) IRQn = USART2_IRQn;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <_ZN5usart4initEP14usart_config_t+0x3a4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d104      	bne.n	800845a <_ZN5usart4initEP14usart_config_t+0x35e>
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2226      	movs	r2, #38	; 0x26
 8008454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008458:	e05b      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
#endif /* defined(USART2) */
#if defined(USART3)
		else if(_usart == USART3) IRQn = USART3_IRQn;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a11      	ldr	r2, [pc, #68]	; (80084a4 <_ZN5usart4initEP14usart_config_t+0x3a8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d104      	bne.n	800846e <_ZN5usart4initEP14usart_config_t+0x372>
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2227      	movs	r2, #39	; 0x27
 8008468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800846c:	e051      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
#endif /* defined(USART3) */
#if defined(UART4)
		else if(_usart == UART4)  IRQn = UART4_IRQn;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a0d      	ldr	r2, [pc, #52]	; (80084a8 <_ZN5usart4initEP14usart_config_t+0x3ac>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d104      	bne.n	8008482 <_ZN5usart4initEP14usart_config_t+0x386>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	2234      	movs	r2, #52	; 0x34
 800847c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008480:	e047      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
#endif /* defined(USART4) */
#if defined(UART5)
		else if(_usart == UART5)  IRQn = UART5_IRQn;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a09      	ldr	r2, [pc, #36]	; (80084ac <_ZN5usart4initEP14usart_config_t+0x3b0>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d125      	bne.n	80084d8 <_ZN5usart4initEP14usart_config_t+0x3dc>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2235      	movs	r2, #53	; 0x35
 8008490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008494:	e03d      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
 8008496:	bf00      	nop
 8008498:	40011000 	.word	0x40011000
 800849c:	40023800 	.word	0x40023800
 80084a0:	40004400 	.word	0x40004400
 80084a4:	40004800 	.word	0x40004800
 80084a8:	40004c00 	.word	0x40004c00
 80084ac:	40005000 	.word	0x40005000
 80084b0:	40011400 	.word	0x40011400
 80084b4:	40007800 	.word	0x40007800
 80084b8:	40007c00 	.word	0x40007c00
 80084bc:	40300000 	.word	0x40300000
 80084c0:	40590000 	.word	0x40590000
 80084c4:	20000070 	.word	0x20000070
 80084c8:	0800da0c 	.word	0x0800da0c
 80084cc:	0800da14 	.word	0x0800da14
 80084d0:	0800da3c 	.word	0x0800da3c
 80084d4:	0800da80 	.word	0x0800da80
#endif /* defined(USART5) */
#if defined(USART6)
		else if(_usart == USART6) IRQn = USART6_IRQn;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a1a      	ldr	r2, [pc, #104]	; (8008548 <_ZN5usart4initEP14usart_config_t+0x44c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d104      	bne.n	80084ec <_ZN5usart4initEP14usart_config_t+0x3f0>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2247      	movs	r2, #71	; 0x47
 80084e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80084ea:	e012      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
#endif /* defined(USART6) */
#if defined(UART7)
		else if(_usart == UART7) IRQn = UART7_IRQn;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a16      	ldr	r2, [pc, #88]	; (800854c <_ZN5usart4initEP14usart_config_t+0x450>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d104      	bne.n	8008500 <_ZN5usart4initEP14usart_config_t+0x404>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2252      	movs	r2, #82	; 0x52
 80084fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80084fe:	e008      	b.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
#endif /* defined(USART7) */
#if defined(UART8)
		else if(_usart == UART8) IRQn = UART8_IRQn;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a12      	ldr	r2, [pc, #72]	; (8008550 <_ZN5usart4initEP14usart_config_t+0x454>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d103      	bne.n	8008512 <_ZN5usart4initEP14usart_config_t+0x416>
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	2253      	movs	r2, #83	; 0x53
 800850e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* defined(UART8) */
		__NVIC_SetPriority(IRQn, _conf -> interruptpriority);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f993 2024 	ldrsb.w	r2, [r3, #36]	; 0x24
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	6a1b      	ldr	r3, [r3, #32]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	4619      	mov	r1, r3
 8008520:	4610      	mov	r0, r2
 8008522:	f7ff fd73 	bl	800800c <__NVIC_SetPriority>
	}
	transmit('\n');
 8008526:	f107 031c 	add.w	r3, r7, #28
 800852a:	220a      	movs	r2, #10
 800852c:	68b9      	ldr	r1, [r7, #8]
 800852e:	4618      	mov	r0, r3
 8008530:	f000 f842 	bl	80085b8 <_ZN5usart8transmitEh>

	return {STM_OKE, 0};
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2201      	movs	r2, #1
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	605a      	str	r2, [r3, #4]
}
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	3730      	adds	r7, #48	; 0x30
 8008544:	46bd      	mov	sp, r7
 8008546:	bdb0      	pop	{r4, r5, r7, pc}
 8008548:	40011400 	.word	0x40011400
 800854c:	40007800 	.word	0x40007800
 8008550:	40007c00 	.word	0x40007c00

08008554 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>:
	}

	return {STM_OKE, 0};
}

stm_ret_t usart::register_event_handler(void (*function_ptr)(usart_event_t event, void *param), void *param){
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
	stm_ret_t ret;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	605a      	str	r2, [r3, #4]
	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	791b      	ldrb	r3, [r3, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d006      	beq.n	8008586 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x32>
		handler_callback = function_ptr;
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	611a      	str	r2, [r3, #16]
		parameter = param;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	60da      	str	r2, [r3, #12]

		return ret;
 8008584:	e00c      	b.n	80085a0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x4c>
	}
	else{
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8008586:	22e7      	movs	r2, #231	; 0xe7
 8008588:	2103      	movs	r1, #3
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 ffae 	bl	80094ec <set_return>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
		LOG_WARN(TAG, "%s -> %s, USART peripheral control unsuported register event handler.", __FILE__, __FUNCTION__ );
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x54>)
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x58>)
 8008596:	4a06      	ldr	r2, [pc, #24]	; (80085b0 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x5c>)
 8008598:	4906      	ldr	r1, [pc, #24]	; (80085b4 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_+0x60>)
 800859a:	f000 fe31 	bl	8009200 <LOG_WARN>
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */
	}

	return ret;
 800859e:	bf00      	nop
}
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000070 	.word	0x20000070
 80085ac:	0800da9c 	.word	0x0800da9c
 80085b0:	0800da14 	.word	0x0800da14
 80085b4:	0800dab4 	.word	0x0800dab4

080085b8 <_ZN5usart8transmitEh>:


stm_ret_t usart::transmit(uint8_t data){
 80085b8:	b590      	push	{r4, r7, lr}
 80085ba:	b08b      	sub	sp, #44	; 0x2c
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6178      	str	r0, [r7, #20]
 80085c0:	6139      	str	r1, [r7, #16]
 80085c2:	4613      	mov	r3, r2
 80085c4:	73fb      	strb	r3, [r7, #15]
	stm_ret_t ret;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2201      	movs	r2, #1
 80085ca:	701a      	strb	r2, [r3, #0]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2200      	movs	r2, #0
 80085d0:	605a      	str	r2, [r3, #4]

	_usart -> DR = data;
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	7bfa      	ldrb	r2, [r7, #15]
 80085d8:	605a      	str	r2, [r3, #4]

	ret = wait_flag_in_register_timeout(&(_usart -> SR), USART_SR_TC, FLAG_SET, USART_TIMEOUT);
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	697c      	ldr	r4, [r7, #20]
 80085e2:	4638      	mov	r0, r7
 80085e4:	2364      	movs	r3, #100	; 0x64
 80085e6:	9300      	str	r3, [sp, #0]
 80085e8:	2301      	movs	r3, #1
 80085ea:	2240      	movs	r2, #64	; 0x40
 80085ec:	f000 ff38 	bl	8009460 <wait_flag_in_register_timeout>
 80085f0:	4622      	mov	r2, r4
 80085f2:	463b      	mov	r3, r7
 80085f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80085f8:	e882 0003 	stmia.w	r2, {r0, r1}
	if(!is_oke(&ret)){
 80085fc:	6978      	ldr	r0, [r7, #20]
 80085fe:	f000 ff97 	bl	8009530 <is_oke>
 8008602:	4603      	mov	r3, r0
 8008604:	f083 0301 	eor.w	r3, r3, #1
 8008608:	b2db      	uxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	d004      	beq.n	8008618 <_ZN5usart8transmitEh+0x60>
		set_return_line(&ret, __LINE__);
 800860e:	21f8      	movs	r1, #248	; 0xf8
 8008610:	6978      	ldr	r0, [r7, #20]
 8008612:	f000 ff7e 	bl	8009512 <set_return_line>
		return ret;
 8008616:	e009      	b.n	800862c <_ZN5usart8transmitEh+0x74>
	}

	volatile uint32_t tmp = _usart -> SR;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	61fb      	str	r3, [r7, #28]
	tmp = _usart -> DR;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	61fb      	str	r3, [r7, #28]
	(void)tmp;
 8008628:	69fb      	ldr	r3, [r7, #28]

	return ret;
 800862a:	bf00      	nop
}
 800862c:	6978      	ldr	r0, [r7, #20]
 800862e:	3724      	adds	r7, #36	; 0x24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd90      	pop	{r4, r7, pc}

08008634 <_ZN5usart16receive_start_itEt>:
	return ret;
}



stm_ret_t usart::receive_start_it(uint16_t buffer_size){
 8008634:	b580      	push	{r7, lr}
 8008636:	b086      	sub	sp, #24
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
	stm_ret_t ret;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	701a      	strb	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	605a      	str	r2, [r3, #4]

	if(_conf -> control && (USART_INTERRUPT_CONTROL | USART_INTERRUPT_DMA_CONTROL)) {
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	6a1b      	ldr	r3, [r3, #32]
 8008652:	791b      	ldrb	r3, [r3, #4]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d015      	beq.n	8008684 <_ZN5usart16receive_start_itEt+0x50>
		if(_conf -> interruptselect && (USART_RECEIVE_INTERRUPT | USART_TRANSMIT_RECEIVE_INTERRUPT))
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	795b      	ldrb	r3, [r3, #5]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d008      	beq.n	8008674 <_ZN5usart16receive_start_itEt+0x40>
			_usart -> CR1 |= USART_CR1_RXNEIE;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68da      	ldr	r2, [r3, #12]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f042 0220 	orr.w	r2, r2, #32
 8008670:	60da      	str	r2, [r3, #12]
 8008672:	e015      	b.n	80086a0 <_ZN5usart16receive_start_itEt+0x6c>
		else {
#if CONFIG_USE_LOG_MONITOR && USART_LOG
			LOG_ERROR(TAG, "%s -> %s, USART not selected receive interrupt.", __FILE__, __FUNCTION__ );
 8008674:	4b3c      	ldr	r3, [pc, #240]	; (8008768 <_ZN5usart16receive_start_itEt+0x134>)
 8008676:	6818      	ldr	r0, [r3, #0]
 8008678:	4b3c      	ldr	r3, [pc, #240]	; (800876c <_ZN5usart16receive_start_itEt+0x138>)
 800867a:	4a3d      	ldr	r2, [pc, #244]	; (8008770 <_ZN5usart16receive_start_itEt+0x13c>)
 800867c:	493d      	ldr	r1, [pc, #244]	; (8008774 <_ZN5usart16receive_start_itEt+0x140>)
 800867e:	f000 fe0b 	bl	8009298 <LOG_ERROR>
 8008682:	e00d      	b.n	80086a0 <_ZN5usart16receive_start_itEt+0x6c>
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */
		}
	}
	else{
		set_return(&ret, STM_UNSUPPORTED, __LINE__);
 8008684:	f240 129f 	movw	r2, #415	; 0x19f
 8008688:	2103      	movs	r1, #3
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 ff2e 	bl	80094ec <set_return>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
		LOG_ERROR(TAG, "%s -> %s, USART not selected interrupt control.", __FILE__, __FUNCTION__ );
 8008690:	4b35      	ldr	r3, [pc, #212]	; (8008768 <_ZN5usart16receive_start_itEt+0x134>)
 8008692:	6818      	ldr	r0, [r3, #0]
 8008694:	4b35      	ldr	r3, [pc, #212]	; (800876c <_ZN5usart16receive_start_itEt+0x138>)
 8008696:	4a36      	ldr	r2, [pc, #216]	; (8008770 <_ZN5usart16receive_start_itEt+0x13c>)
 8008698:	4937      	ldr	r1, [pc, #220]	; (8008778 <_ZN5usart16receive_start_itEt+0x144>)
 800869a:	f000 fdfd 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */
		return ret;
 800869e:	e05f      	b.n	8008760 <_ZN5usart16receive_start_itEt+0x12c>
	}

	rxlen = buffer_size;
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	88fa      	ldrh	r2, [r7, #6]
 80086a4:	831a      	strh	r2, [r3, #24]
	rxcount = 0;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	835a      	strh	r2, [r3, #26]
	reception = USART_RECEPTION_NORMAL;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2200      	movs	r2, #0
 80086b0:	775a      	strb	r2, [r3, #29]
	if(rxbuffer != NULL) {
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d007      	beq.n	80086ca <_ZN5usart16receive_start_itEt+0x96>
		free(rxbuffer);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	4618      	mov	r0, r3
 80086c0:	f001 fcf8 	bl	800a0b4 <free>
		rxbuffer = NULL;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	615a      	str	r2, [r3, #20]
	}
	rxbuffer = (uint8_t *)malloc((rxlen +1) * sizeof(uint8_t));
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	8b1b      	ldrh	r3, [r3, #24]
 80086ce:	3301      	adds	r3, #1
 80086d0:	4618      	mov	r0, r3
 80086d2:	f001 fce7 	bl	800a0a4 <malloc>
 80086d6:	4603      	mov	r3, r0
 80086d8:	461a      	mov	r2, r3
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	615a      	str	r2, [r3, #20]
	if(rxbuffer == NULL){
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10d      	bne.n	8008702 <_ZN5usart16receive_start_itEt+0xce>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
		LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
 80086e6:	4b20      	ldr	r3, [pc, #128]	; (8008768 <_ZN5usart16receive_start_itEt+0x134>)
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	4b20      	ldr	r3, [pc, #128]	; (800876c <_ZN5usart16receive_start_itEt+0x138>)
 80086ec:	4a20      	ldr	r2, [pc, #128]	; (8008770 <_ZN5usart16receive_start_itEt+0x13c>)
 80086ee:	4923      	ldr	r1, [pc, #140]	; (800877c <_ZN5usart16receive_start_itEt+0x148>)
 80086f0:	f000 fdd2 	bl	8009298 <LOG_ERROR>
#endif
		set_return(&ret, STM_ERR, __LINE__);
 80086f4:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 80086f8:	2100      	movs	r1, #0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fef6 	bl	80094ec <set_return>
		return ret;
 8008700:	e02e      	b.n	8008760 <_ZN5usart16receive_start_itEt+0x12c>
	}
	memset(rxbuffer, '\0', rxlen+1);
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6958      	ldr	r0, [r3, #20]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	8b1b      	ldrh	r3, [r3, #24]
 800870a:	3301      	adds	r3, #1
 800870c:	461a      	mov	r2, r3
 800870e:	2100      	movs	r1, #0
 8008710:	f001 fd00 	bl	800a114 <memset>
	_usart -> CR1 |= USART_CR1_PEIE;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008722:	60da      	str	r2, [r3, #12]
	_usart -> CR3 |= USART_CR3_EIE;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	695a      	ldr	r2, [r3, #20]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f042 0201 	orr.w	r2, r2, #1
 8008732:	615a      	str	r2, [r3, #20]

	__NVIC_ClearPendingIRQ(IRQn);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 800873a:	4618      	mov	r0, r3
 800873c:	f7ff fc48 	bl	8007fd0 <__NVIC_ClearPendingIRQ>
	__NVIC_EnableIRQ(IRQn);
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8008746:	4618      	mov	r0, r3
 8008748:	f7ff fc24 	bl	8007f94 <__NVIC_EnableIRQ>

	volatile uint32_t tmp = _usart -> SR;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	617b      	str	r3, [r7, #20]
	tmp = _usart -> DR;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	617b      	str	r3, [r7, #20]
	(void)tmp;
 800875c:	697b      	ldr	r3, [r7, #20]

	return ret;
 800875e:	bf00      	nop
}
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}
 8008768:	20000070 	.word	0x20000070
 800876c:	0800dba4 	.word	0x0800dba4
 8008770:	0800da14 	.word	0x0800da14
 8008774:	0800dbb8 	.word	0x0800dbb8
 8008778:	0800db74 	.word	0x0800db74
 800877c:	0800db04 	.word	0x0800db04

08008780 <_ZN5usart24receive_to_idle_start_itEt>:
}
#endif /* ENABLE_DMA */



stm_ret_t usart::receive_to_idle_start_it(uint16_t buffer_size){
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	4613      	mov	r3, r2
 800878c:	80fb      	strh	r3, [r7, #6]
	stm_ret_t ret = receive_start_it(buffer_size);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	88fa      	ldrh	r2, [r7, #6]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff ff4d 	bl	8008634 <_ZN5usart16receive_start_itEt>

	reception = USART_RECEPTION_TOIDLE;
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2202      	movs	r2, #2
 800879e:	775a      	strb	r2, [r3, #29]

	_usart -> CR1 |= USART_CR1_IDLEIE;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68da      	ldr	r2, [r3, #12]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0210 	orr.w	r2, r2, #16
 80087ae:	60da      	str	r2, [r3, #12]

	return ret;
 80087b0:	bf00      	nop
}
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <_ZN5usart10get_bufferEPPh>:
	this->endchar = '\0';
	return receive_stop_dma();
}
#endif /* ENABLE_DMA */

stm_ret_t usart::get_buffer(uint8_t **data){
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
	stm_ret_t ret;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	701a      	strb	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	605a      	str	r2, [r3, #4]

	if(rxbuffer != NULL){
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	695b      	ldr	r3, [r3, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d035      	beq.n	8008848 <_ZN5usart10get_bufferEPPh+0x8c>
		rxbuffer[rxcount+1] = '\0';
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	695a      	ldr	r2, [r3, #20]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	8b5b      	ldrh	r3, [r3, #26]
 80087e4:	3301      	adds	r3, #1
 80087e6:	4413      	add	r3, r2
 80087e8:	2200      	movs	r2, #0
 80087ea:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t *)malloc(rxcount+1);
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	8b5b      	ldrh	r3, [r3, #26]
 80087f0:	3301      	adds	r3, #1
 80087f2:	4618      	mov	r0, r3
 80087f4:	f001 fc56 	bl	800a0a4 <malloc>
 80087f8:	4603      	mov	r3, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	601a      	str	r2, [r3, #0]
		if(data == NULL){
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10d      	bne.n	8008822 <_ZN5usart10get_bufferEPPh+0x66>
	#if CONFIG_USE_LOG_MONITOR && USART_LOG
			LOG_ERROR(TAG, "%s -> %s, USART memory allocation fail.", __FILE__, __FUNCTION__ );
 8008806:	4b19      	ldr	r3, [pc, #100]	; (800886c <_ZN5usart10get_bufferEPPh+0xb0>)
 8008808:	6818      	ldr	r0, [r3, #0]
 800880a:	4b19      	ldr	r3, [pc, #100]	; (8008870 <_ZN5usart10get_bufferEPPh+0xb4>)
 800880c:	4a19      	ldr	r2, [pc, #100]	; (8008874 <_ZN5usart10get_bufferEPPh+0xb8>)
 800880e:	491a      	ldr	r1, [pc, #104]	; (8008878 <_ZN5usart10get_bufferEPPh+0xbc>)
 8008810:	f000 fd42 	bl	8009298 <LOG_ERROR>
	#endif
			set_return(&ret, STM_ERR, __LINE__);
 8008814:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8008818:	2100      	movs	r1, #0
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fe66 	bl	80094ec <set_return>
			return ret;
 8008820:	e020      	b.n	8008864 <_ZN5usart10get_bufferEPPh+0xa8>
		}
		memcpy(*data, rxbuffer, rxcount+1);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6818      	ldr	r0, [r3, #0]
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	6959      	ldr	r1, [r3, #20]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	8b5b      	ldrh	r3, [r3, #26]
 800882e:	3301      	adds	r3, #1
 8008830:	461a      	mov	r2, r3
 8008832:	f001 fc47 	bl	800a0c4 <memcpy>

		free(rxbuffer);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	4618      	mov	r0, r3
 800883c:	f001 fc3a 	bl	800a0b4 <free>
		rxbuffer = NULL;
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	615a      	str	r2, [r3, #20]

		return ret;
 8008846:	e00d      	b.n	8008864 <_ZN5usart10get_bufferEPPh+0xa8>
	}

	set_return(&ret, STM_ERR, __LINE__);
 8008848:	f240 22f3 	movw	r2, #755	; 0x2f3
 800884c:	2100      	movs	r1, #0
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fe4c 	bl	80094ec <set_return>
#if CONFIG_USE_LOG_MONITOR && USART_LOG
	LOG_ERROR(TAG, "%s -> %s, USART receive buffer empty.", __FILE__, __FUNCTION__ );
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <_ZN5usart10get_bufferEPPh+0xb0>)
 8008856:	6818      	ldr	r0, [r3, #0]
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <_ZN5usart10get_bufferEPPh+0xb4>)
 800885a:	4a06      	ldr	r2, [pc, #24]	; (8008874 <_ZN5usart10get_bufferEPPh+0xb8>)
 800885c:	4907      	ldr	r1, [pc, #28]	; (800887c <_ZN5usart10get_bufferEPPh+0xc0>)
 800885e:	f000 fd1b 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR && USART_LOG */

	return ret;
 8008862:	bf00      	nop
}
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20000070 	.word	0x20000070
 8008870:	0800dd40 	.word	0x0800dd40
 8008874:	0800da14 	.word	0x0800da14
 8008878:	0800db04 	.word	0x0800db04
 800887c:	0800dd4c 	.word	0x0800dd4c

08008880 <_Z17USART_IRQ_HandlerP5usart>:
usart_config_t *usart::get_config(void){
	return _conf;
}


void USART_IRQ_Handler(usart *usart){
 8008880:	b590      	push	{r4, r7, lr}
 8008882:	b08b      	sub	sp, #44	; 0x2c
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	uint32_t StatusReg = usart -> _usart -> SR, CR1Reg = usart -> _usart -> CR1;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	623b      	str	r3, [r7, #32]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	61fb      	str	r3, [r7, #28]
	usart_event_t event = USART_EVENT_NOEVENT;
 8008898:	2300      	movs	r3, #0
 800889a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(StatusReg & USART_SR_RXNE && CR1Reg & USART_CR1_RXNEIE) {
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d051      	beq.n	800894c <_Z17USART_IRQ_HandlerP5usart+0xcc>
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	f003 0320 	and.w	r3, r3, #32
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d04c      	beq.n	800894c <_Z17USART_IRQ_HandlerP5usart+0xcc>
		volatile uint32_t tmp = usart -> _usart -> SR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	613b      	str	r3, [r7, #16]
//		tmp = usart -> _usart -> DR;
		(void)tmp;
 80088ba:	693b      	ldr	r3, [r7, #16]

		event = USART_EVENT_RECEIVE_COMPLETE;
 80088bc:	2302      	movs	r3, #2
 80088be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		usart -> _usart -> SR &=~ USART_SR_RXNE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0220 	bic.w	r2, r2, #32
 80088d0:	601a      	str	r2, [r3, #0]

		if(usart -> rxcount < usart -> rxlen)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	8b5a      	ldrh	r2, [r3, #26]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	8b1b      	ldrh	r3, [r3, #24]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d20e      	bcs.n	80088fc <_Z17USART_IRQ_HandlerP5usart+0x7c>
			usart -> rxbuffer[usart -> rxcount] = usart -> _usart -> DR;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	6859      	ldr	r1, [r3, #4]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	695b      	ldr	r3, [r3, #20]
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	8b52      	ldrh	r2, [r2, #26]
 80088ec:	4413      	add	r3, r2
 80088ee:	b2ca      	uxtb	r2, r1
 80088f0:	701a      	strb	r2, [r3, #0]
		else{
			event = USART_EVENT_BUFFER_OVERFLOW;
			goto EventCB;
		}
		if(usart -> reception == USART_RECEPTION_TOENDCHAR){
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	7f5b      	ldrb	r3, [r3, #29]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d121      	bne.n	800893e <_Z17USART_IRQ_HandlerP5usart+0xbe>
 80088fa:	e003      	b.n	8008904 <_Z17USART_IRQ_HandlerP5usart+0x84>
			event = USART_EVENT_BUFFER_OVERFLOW;
 80088fc:	2303      	movs	r3, #3
 80088fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto EventCB;
 8008902:	e0a1      	b.n	8008a48 <_Z17USART_IRQ_HandlerP5usart+0x1c8>
			if(usart -> rxbuffer[usart -> rxcount] == usart -> endchar) {
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	695b      	ldr	r3, [r3, #20]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	8b52      	ldrh	r2, [r2, #26]
 800890c:	4413      	add	r3, r2
 800890e:	781a      	ldrb	r2, [r3, #0]
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	7f1b      	ldrb	r3, [r3, #28]
 8008914:	429a      	cmp	r2, r3
 8008916:	d112      	bne.n	800893e <_Z17USART_IRQ_HandlerP5usart+0xbe>
				event = USART_EVENT_RECEIVE_ENDCHAR;
 8008918:	2305      	movs	r3, #5
 800891a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				usart -> _usart -> CR1 &=~ USART_CR1_PEIE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800892c:	60da      	str	r2, [r3, #12]
				usart -> _usart -> CR3 &=~ USART_CR3_EIE;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	615a      	str	r2, [r3, #20]
			}
		}
		usart -> rxcount++;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8b5b      	ldrh	r3, [r3, #26]
 8008942:	3301      	adds	r3, #1
 8008944:	b29a      	uxth	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	835a      	strh	r2, [r3, #26]
		goto EventCB;
 800894a:	e07d      	b.n	8008a48 <_Z17USART_IRQ_HandlerP5usart+0x1c8>
	}

	if(StatusReg & USART_SR_TC&& CR1Reg & USART_CR1_TCIE) {
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d019      	beq.n	800898a <_Z17USART_IRQ_HandlerP5usart+0x10a>
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d014      	beq.n	800898a <_Z17USART_IRQ_HandlerP5usart+0x10a>
		volatile uint32_t tmp = usart -> _usart -> SR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
		tmp = usart -> _usart -> DR;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	60fb      	str	r3, [r7, #12]
		(void)tmp;
 8008970:	68fb      	ldr	r3, [r7, #12]

		event = USART_EVENT_TRANSMIT_COMPLETE;
 8008972:	2301      	movs	r3, #1
 8008974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		usart -> _usart -> SR &=~ USART_SR_TC;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008986:	601a      	str	r2, [r3, #0]

		goto EventCB;
 8008988:	e05e      	b.n	8008a48 <_Z17USART_IRQ_HandlerP5usart+0x1c8>
	}

	if(StatusReg & USART_SR_IDLE && CR1Reg & USART_CR1_IDLEIE) {
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	d058      	beq.n	8008a46 <_Z17USART_IRQ_HandlerP5usart+0x1c6>
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	f003 0310 	and.w	r3, r3, #16
 800899a:	2b00      	cmp	r3, #0
 800899c:	d053      	beq.n	8008a46 <_Z17USART_IRQ_HandlerP5usart+0x1c6>
		volatile uint32_t tmp = usart -> _usart -> SR;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	60bb      	str	r3, [r7, #8]
		tmp = usart -> _usart -> DR;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	60bb      	str	r3, [r7, #8]
		(void)tmp;
 80089ae:	68bb      	ldr	r3, [r7, #8]

		if(usart -> reception == USART_RECEPTION_TOIDLE){
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	7f5b      	ldrb	r3, [r3, #29]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d147      	bne.n	8008a48 <_Z17USART_IRQ_HandlerP5usart+0x1c8>
			usart -> _usart -> SR &=~ (USART_SR_IDLE | USART_SR_RXNE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80089c6:	601a      	str	r2, [r3, #0]
#if ENABLE_DMA
			if(usart -> _usart -> CR3 & USART_CR3_DMAR){
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	bf14      	ite	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	2300      	moveq	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02e      	beq.n	8008a3e <_Z17USART_IRQ_HandlerP5usart+0x1be>
				usart -> rxcount = usart -> rxlen - usart -> _rxdma -> get_counter();
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	8b1c      	ldrh	r4, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7fd fc49 	bl	8006280 <_ZN3dma11get_counterEv>
 80089ee:	4603      	mov	r3, r0
 80089f0:	1ae3      	subs	r3, r4, r3
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	835a      	strh	r2, [r3, #26]
				if(usart -> _rxdma -> get_config() -> mode != DMA_CIRCULAR){
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fd fc4e 	bl	800629e <_ZN3dma10get_configEv>
 8008a02:	4603      	mov	r3, r0
 8008a04:	799b      	ldrb	r3, [r3, #6]
 8008a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a0a:	bf14      	ite	ne
 8008a0c:	2301      	movne	r3, #1
 8008a0e:	2300      	moveq	r3, #0
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00f      	beq.n	8008a36 <_Z17USART_IRQ_HandlerP5usart+0x1b6>
					usart -> _rxdma -> stop();
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	f107 0314 	add.w	r3, r7, #20
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fd fbc6 	bl	80061b2 <_ZN3dma4stopEv>
					usart -> _usart -> CR3 &=~ (USART_CR3_EIE | USART_CR3_DMAR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	695a      	ldr	r2, [r3, #20]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0241 	bic.w	r2, r2, #65	; 0x41
 8008a34:	615a      	str	r2, [r3, #20]
				}
				event = USART_EVENT_IDLE_STATE;
 8008a36:	2304      	movs	r3, #4
 8008a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				goto EventCB;
 8008a3c:	e004      	b.n	8008a48 <_Z17USART_IRQ_HandlerP5usart+0x1c8>
			}
			else{
#endif /* ENABLE_DMA */
				event = USART_EVENT_IDLE_STATE;
 8008a3e:	2304      	movs	r3, #4
 8008a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				goto EventCB;
 8008a44:	e000      	b.n	8008a48 <_Z17USART_IRQ_HandlerP5usart+0x1c8>
			}
#endif /* ENABLE_DMA */
		}
	}

	EventCB:
 8008a46:	bf00      	nop
	if(usart -> handler_callback != NULL) usart -> handler_callback(event, usart -> parameter);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <_Z17USART_IRQ_HandlerP5usart+0x1e0>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	68d1      	ldr	r1, [r2, #12]
 8008a58:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3

}
 8008a60:	bf00      	nop
 8008a62:	372c      	adds	r7, #44	; 0x2c
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd90      	pop	{r4, r7, pc}

08008a68 <USART1_IRQHandler>:

#if defined(USART1)
usart usart_1(USART1);
usart_t usart1 = &usart_1;
void USART1_IRQHandler(void){
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&usart_1);
 8008a6c:	4802      	ldr	r0, [pc, #8]	; (8008a78 <USART1_IRQHandler+0x10>)
 8008a6e:	f7ff ff07 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008a72:	bf00      	nop
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2000b924 	.word	0x2000b924

08008a7c <USART2_IRQHandler>:
#endif /* defined(USART1) */
#if defined(USART2)
usart usart_2(USART2);
usart_t usart2 = &usart_2;
void USART2_IRQHandler(void){
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&usart_2);
 8008a80:	4802      	ldr	r0, [pc, #8]	; (8008a8c <USART2_IRQHandler+0x10>)
 8008a82:	f7ff fefd 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008a86:	bf00      	nop
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	2000b94c 	.word	0x2000b94c

08008a90 <USART3_IRQHandler>:
#endif /* defined(USART2) */
#if defined(USART3)
usart usart_3(USART3);
usart_t usart3 = &usart_3;
void USART3_IRQHandler(void){
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&usart_3);
 8008a94:	4802      	ldr	r0, [pc, #8]	; (8008aa0 <USART3_IRQHandler+0x10>)
 8008a96:	f7ff fef3 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008a9a:	bf00      	nop
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	2000b974 	.word	0x2000b974

08008aa4 <UART4_IRQHandler>:
#endif /* defined(USART3) */
#if defined(UART4)
usart uart_4 (UART4);
usart_t uart4 = &uart_4;
void UART4_IRQHandler(void){
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&uart_4);
 8008aa8:	4802      	ldr	r0, [pc, #8]	; (8008ab4 <UART4_IRQHandler+0x10>)
 8008aaa:	f7ff fee9 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008aae:	bf00      	nop
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	2000b99c 	.word	0x2000b99c

08008ab8 <UART5_IRQHandler>:
#endif /* defined(UART4) */
#if defined(UART5)
usart uart_5 (UART5);
usart_t uart5 = &uart_5;
void UART5_IRQHandler(void){
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&uart_5);
 8008abc:	4802      	ldr	r0, [pc, #8]	; (8008ac8 <UART5_IRQHandler+0x10>)
 8008abe:	f7ff fedf 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008ac2:	bf00      	nop
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	2000b9c4 	.word	0x2000b9c4

08008acc <USART6_IRQHandler>:
#endif /* defined(UART5) */
#if defined(USART6)
usart usart_6(USART6);
usart_t usart6 = &usart_6;
void USART6_IRQHandler(void){
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&usart_6);
 8008ad0:	4802      	ldr	r0, [pc, #8]	; (8008adc <USART6_IRQHandler+0x10>)
 8008ad2:	f7ff fed5 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	2000b9ec 	.word	0x2000b9ec

08008ae0 <UART7_IRQHandler>:
#endif /* defined(USART6) */
#if defined(UART7)
usart uart_7 (UART7);
usart_t uart7 = &uart_7;
void UART7_IRQHandler(void){
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&uart_7);
 8008ae4:	4802      	ldr	r0, [pc, #8]	; (8008af0 <UART7_IRQHandler+0x10>)
 8008ae6:	f7ff fecb 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008aea:	bf00      	nop
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	2000ba14 	.word	0x2000ba14

08008af4 <UART8_IRQHandler>:
#endif /* defined(UART7) */
#if defined(UART8)
usart uart_8 (UART8);
usart_t uart8 = &uart_8;
void UART8_IRQHandler(void){
 8008af4:	b580      	push	{r7, lr}
 8008af6:	af00      	add	r7, sp, #0
	USART_IRQ_Handler(&uart_8);
 8008af8:	4802      	ldr	r0, [pc, #8]	; (8008b04 <UART8_IRQHandler+0x10>)
 8008afa:	f7ff fec1 	bl	8008880 <_Z17USART_IRQ_HandlerP5usart>
}
 8008afe:	bf00      	nop
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	2000ba3c 	.word	0x2000ba3c

08008b08 <_Z41__static_initialization_and_destruction_0ii>:
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b082      	sub	sp, #8
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d124      	bne.n	8008b62 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d11f      	bne.n	8008b62 <_Z41__static_initialization_and_destruction_0ii+0x5a>
usart usart_1(USART1);
 8008b22:	4912      	ldr	r1, [pc, #72]	; (8008b6c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8008b24:	4812      	ldr	r0, [pc, #72]	; (8008b70 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8008b26:	f7ff fac1 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart usart_2(USART2);
 8008b2a:	4912      	ldr	r1, [pc, #72]	; (8008b74 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8008b2c:	4812      	ldr	r0, [pc, #72]	; (8008b78 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8008b2e:	f7ff fabd 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart usart_3(USART3);
 8008b32:	4912      	ldr	r1, [pc, #72]	; (8008b7c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8008b34:	4812      	ldr	r0, [pc, #72]	; (8008b80 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8008b36:	f7ff fab9 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart uart_4 (UART4);
 8008b3a:	4912      	ldr	r1, [pc, #72]	; (8008b84 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8008b3c:	4812      	ldr	r0, [pc, #72]	; (8008b88 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8008b3e:	f7ff fab5 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart uart_5 (UART5);
 8008b42:	4912      	ldr	r1, [pc, #72]	; (8008b8c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8008b44:	4812      	ldr	r0, [pc, #72]	; (8008b90 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8008b46:	f7ff fab1 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart usart_6(USART6);
 8008b4a:	4912      	ldr	r1, [pc, #72]	; (8008b94 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8008b4c:	4812      	ldr	r0, [pc, #72]	; (8008b98 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8008b4e:	f7ff faad 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart uart_7 (UART7);
 8008b52:	4912      	ldr	r1, [pc, #72]	; (8008b9c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8008b54:	4812      	ldr	r0, [pc, #72]	; (8008ba0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8008b56:	f7ff faa9 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
usart uart_8 (UART8);
 8008b5a:	4912      	ldr	r1, [pc, #72]	; (8008ba4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8008b5c:	4812      	ldr	r0, [pc, #72]	; (8008ba8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8008b5e:	f7ff faa5 	bl	80080ac <_ZN5usartC1EP13USART_TypeDef>
}
 8008b62:	bf00      	nop
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	40011000 	.word	0x40011000
 8008b70:	2000b924 	.word	0x2000b924
 8008b74:	40004400 	.word	0x40004400
 8008b78:	2000b94c 	.word	0x2000b94c
 8008b7c:	40004800 	.word	0x40004800
 8008b80:	2000b974 	.word	0x2000b974
 8008b84:	40004c00 	.word	0x40004c00
 8008b88:	2000b99c 	.word	0x2000b99c
 8008b8c:	40005000 	.word	0x40005000
 8008b90:	2000b9c4 	.word	0x2000b9c4
 8008b94:	40011400 	.word	0x40011400
 8008b98:	2000b9ec 	.word	0x2000b9ec
 8008b9c:	40007800 	.word	0x40007800
 8008ba0:	2000ba14 	.word	0x2000ba14
 8008ba4:	40007c00 	.word	0x40007c00
 8008ba8:	2000ba3c 	.word	0x2000ba3c

08008bac <_GLOBAL__sub_I__ZN5usartC2EP13USART_TypeDef>:
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bb4:	2001      	movs	r0, #1
 8008bb6:	f7ff ffa7 	bl	8008b08 <_Z41__static_initialization_and_destruction_0ii>
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <__NVIC_SystemReset>:
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8008bc0:	f3bf 8f4f 	dsb	sy
}
 8008bc4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <__NVIC_SystemReset+0x24>)
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008bce:	4904      	ldr	r1, [pc, #16]	; (8008be0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8008bd0:	4b04      	ldr	r3, [pc, #16]	; (8008be4 <__NVIC_SystemReset+0x28>)
 8008bd2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008bd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8008bd6:	f3bf 8f4f 	dsb	sy
}
 8008bda:	bf00      	nop
    __NOP();
 8008bdc:	bf00      	nop
 8008bde:	e7fd      	b.n	8008bdc <__NVIC_SystemReset+0x20>
 8008be0:	e000ed00 	.word	0xe000ed00
 8008be4:	05fa0004 	.word	0x05fa0004

08008be8 <main_application>:
SemaphoreHandle_t log_semaph;
#endif /* ENABLE_USART && LOG_UART */
#endif /* LOG_MONITOR */

#if defined(USE_HAL_DRIVER)
int main_application(void){
 8008be8:	b590      	push	{r4, r7, lr}
 8008bea:	b089      	sub	sp, #36	; 0x24
 8008bec:	af02      	add	r7, sp, #8
#else
int main(void){
#endif /* USE_HAL_DRIVER */
	system_init();
 8008bee:	f000 fd75 	bl	80096dc <system_init>
	rcc_init(&rcc);
 8008bf2:	1d3b      	adds	r3, r7, #4
 8008bf4:	4954      	ldr	r1, [pc, #336]	; (8008d48 <main_application+0x160>)
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fe fa8c 	bl	8007114 <rcc_init>

	gpio_port_clock_enable(GPIOH);
 8008bfc:	4853      	ldr	r0, [pc, #332]	; (8008d4c <main_application+0x164>)
 8008bfe:	f7fd ffbf 	bl	8006b80 <gpio_port_clock_enable>

#if CONFIG_USE_SDRAM && ENABLE_FMC
	fmc_sdram_init(&sdram_conf);
 8008c02:	4853      	ldr	r0, [pc, #332]	; (8008d50 <main_application+0x168>)
 8008c04:	f7fd fc56 	bl	80064b4 <fmc_sdram_init>
	sdram_init();
 8008c08:	f7fd fdd2 	bl	80067b0 <sdram_init>
#endif /* CONFIG_USE_SDRAM && ENABLE_FMC */

#if CONFIG_RTOS_USE_IWDG && ENABLE_IWDG
	iwdg_init(CONFIG_IWDG_PRESCALER, CONFIG_IWDG_AUTORELOAD);
 8008c0c:	f107 030c 	add.w	r3, r7, #12
 8008c10:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8008c14:	2104      	movs	r1, #4
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7fe fa26 	bl	8007068 <iwdg_init>
	iwdg_disable_in_debugmode();
 8008c1c:	f7fe fa5c 	bl	80070d8 <iwdg_disable_in_debugmode>
#endif /* CONFIG_RTOS_USE_IWDG && ENABLE_IWDG */

#if	ENABLE_RNG && defined(RNG)
	rng_init();
 8008c20:	f7fe fd36 	bl	8007690 <rng_init>
#endif /* ENABLE_RNG && defined(RNG) */

#if CONFIG_USE_LOG_MONITOR
	log_semaph = xSemaphoreCreateMutex();
 8008c24:	2001      	movs	r0, #1
 8008c26:	f7f9 ff50 	bl	8002aca <xQueueCreateMutex>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4a49      	ldr	r2, [pc, #292]	; (8008d54 <main_application+0x16c>)
 8008c2e:	6013      	str	r3, [r2, #0]
#if ENABLE_USART && CONFIG_LOG_OVER_UART
	uart_log_init();
 8008c30:	f000 f912 	bl	8008e58 <uart_log_init>
	log_init(uart_log);
 8008c34:	4848      	ldr	r0, [pc, #288]	; (8008d58 <main_application+0x170>)
 8008c36:	f000 fa87 	bl	8009148 <log_init>
#endif
#if ENABLE_USB && CONFIG_LOG_OVER_USB
	MX_USB_DEVICE_Init();
	stm_log_init(usb_log);
#endif
	LOG_INFO(TAG, "Target        : %s",     mkstr(STM32F429xx));
 8008c3a:	4b48      	ldr	r3, [pc, #288]	; (8008d5c <main_application+0x174>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a48      	ldr	r2, [pc, #288]	; (8008d60 <main_application+0x178>)
 8008c40:	4948      	ldr	r1, [pc, #288]	; (8008d64 <main_application+0x17c>)
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fa90 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "Revision ID   : 0x%04x", get_revid());
 8008c48:	4b44      	ldr	r3, [pc, #272]	; (8008d5c <main_application+0x174>)
 8008c4a:	681c      	ldr	r4, [r3, #0]
 8008c4c:	f000 fd20 	bl	8009690 <get_revid>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	4944      	ldr	r1, [pc, #272]	; (8008d68 <main_application+0x180>)
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 fa86 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "Device ID     : 0x%04x", get_devid());
 8008c5c:	4b3f      	ldr	r3, [pc, #252]	; (8008d5c <main_application+0x174>)
 8008c5e:	681c      	ldr	r4, [r3, #0]
 8008c60:	f000 fd22 	bl	80096a8 <get_devid>
 8008c64:	4603      	mov	r3, r0
 8008c66:	461a      	mov	r2, r3
 8008c68:	4940      	ldr	r1, [pc, #256]	; (8008d6c <main_application+0x184>)
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f000 fa7c 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "Flash size    : %dKb",   get_flashsize());
 8008c70:	4b3a      	ldr	r3, [pc, #232]	; (8008d5c <main_application+0x174>)
 8008c72:	681c      	ldr	r4, [r3, #0]
 8008c74:	f000 fd26 	bl	80096c4 <get_flashsize>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	493c      	ldr	r1, [pc, #240]	; (8008d70 <main_application+0x188>)
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f000 fa72 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "Ram size      : %dKb",   CONFIG_TOTAL_HEAP_SIZE/1024);
 8008c84:	4b35      	ldr	r3, [pc, #212]	; (8008d5c <main_application+0x174>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2280      	movs	r2, #128	; 0x80
 8008c8a:	493a      	ldr	r1, [pc, #232]	; (8008d74 <main_application+0x18c>)
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fa6b 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "SDK version   : %s",     SDK_VERSION);
 8008c92:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <main_application+0x174>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a38      	ldr	r2, [pc, #224]	; (8008d78 <main_application+0x190>)
 8008c98:	4938      	ldr	r1, [pc, #224]	; (8008d7c <main_application+0x194>)
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fa64 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "Core frequency: %luHz",  rcc_get_bus_frequency(SYSCLK));
 8008ca0:	4b2e      	ldr	r3, [pc, #184]	; (8008d5c <main_application+0x174>)
 8008ca2:	681c      	ldr	r4, [r3, #0]
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	f7fe fc45 	bl	8007534 <rcc_get_bus_frequency>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	4934      	ldr	r1, [pc, #208]	; (8008d80 <main_application+0x198>)
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fa59 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "AHB frequency : %luHz",  rcc_get_bus_frequency(AHB));
 8008cb6:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <main_application+0x174>)
 8008cb8:	681c      	ldr	r4, [r3, #0]
 8008cba:	2001      	movs	r0, #1
 8008cbc:	f7fe fc3a 	bl	8007534 <rcc_get_bus_frequency>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	492f      	ldr	r1, [pc, #188]	; (8008d84 <main_application+0x19c>)
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fa4e 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "APB1 frequency: %luHz",  rcc_get_bus_frequency(APB1));
 8008ccc:	4b23      	ldr	r3, [pc, #140]	; (8008d5c <main_application+0x174>)
 8008cce:	681c      	ldr	r4, [r3, #0]
 8008cd0:	2002      	movs	r0, #2
 8008cd2:	f7fe fc2f 	bl	8007534 <rcc_get_bus_frequency>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	461a      	mov	r2, r3
 8008cda:	492b      	ldr	r1, [pc, #172]	; (8008d88 <main_application+0x1a0>)
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 fa43 	bl	8009168 <LOG_INFO>
	LOG_INFO(TAG, "APB2 frequency: %luHz",  rcc_get_bus_frequency(APB2));
 8008ce2:	4b1e      	ldr	r3, [pc, #120]	; (8008d5c <main_application+0x174>)
 8008ce4:	681c      	ldr	r4, [r3, #0]
 8008ce6:	2003      	movs	r0, #3
 8008ce8:	f7fe fc24 	bl	8007534 <rcc_get_bus_frequency>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	4926      	ldr	r1, [pc, #152]	; (8008d8c <main_application+0x1a4>)
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	f000 fa38 	bl	8009168 <LOG_INFO>

#endif
	BaseType_t app_start_status = xTaskCreate(app_main_task, "app_main_task", CONFIG_RTOS_APP_MAIN_TASK_SIZE, NULL, CONFIG_RTOS_APP_MAIN_TASK_PRIO, NULL);
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	2300      	movs	r3, #0
 8008d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008d06:	4922      	ldr	r1, [pc, #136]	; (8008d90 <main_application+0x1a8>)
 8008d08:	4822      	ldr	r0, [pc, #136]	; (8008d94 <main_application+0x1ac>)
 8008d0a:	f7fa fd6c 	bl	80037e6 <xTaskCreate>
 8008d0e:	6178      	str	r0, [r7, #20]
	if(app_start_status != pdTRUE) {
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d00a      	beq.n	8008d2c <main_application+0x144>
		LOG_ERROR(TAG, "Error when start main application at %s -> %s Line: %d", __FILE__, __FUNCTION__, __LINE__);
 8008d16:	4b11      	ldr	r3, [pc, #68]	; (8008d5c <main_application+0x174>)
 8008d18:	6818      	ldr	r0, [r3, #0]
 8008d1a:	235b      	movs	r3, #91	; 0x5b
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4b1e      	ldr	r3, [pc, #120]	; (8008d98 <main_application+0x1b0>)
 8008d20:	4a1e      	ldr	r2, [pc, #120]	; (8008d9c <main_application+0x1b4>)
 8008d22:	491f      	ldr	r1, [pc, #124]	; (8008da0 <main_application+0x1b8>)
 8008d24:	f000 fab8 	bl	8009298 <LOG_ERROR>
		return 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	e008      	b.n	8008d3e <main_application+0x156>
	}
	LOG_INFO(TAG, "Starting scheduler on CPU.");
 8008d2c:	4b0b      	ldr	r3, [pc, #44]	; (8008d5c <main_application+0x174>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	491c      	ldr	r1, [pc, #112]	; (8008da4 <main_application+0x1bc>)
 8008d32:	4618      	mov	r0, r3
 8008d34:	f000 fa18 	bl	8009168 <LOG_INFO>
	vTaskStartScheduler();
 8008d38:	f7fa ff40 	bl	8003bbc <vTaskStartScheduler>

	return (int)app_start_status;
 8008d3c:	697b      	ldr	r3, [r7, #20]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	371c      	adds	r7, #28
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd90      	pop	{r4, r7, pc}
 8008d46:	bf00      	nop
 8008d48:	20000078 	.word	0x20000078
 8008d4c:	40021c00 	.word	0x40021c00
 8008d50:	200000a0 	.word	0x200000a0
 8008d54:	2000ba64 	.word	0x2000ba64
 8008d58:	0800908d 	.word	0x0800908d
 8008d5c:	200000d4 	.word	0x200000d4
 8008d60:	0800dd7c 	.word	0x0800dd7c
 8008d64:	0800dd88 	.word	0x0800dd88
 8008d68:	0800dd9c 	.word	0x0800dd9c
 8008d6c:	0800ddb4 	.word	0x0800ddb4
 8008d70:	0800ddcc 	.word	0x0800ddcc
 8008d74:	0800dde4 	.word	0x0800dde4
 8008d78:	0800ddfc 	.word	0x0800ddfc
 8008d7c:	0800de04 	.word	0x0800de04
 8008d80:	0800de18 	.word	0x0800de18
 8008d84:	0800de30 	.word	0x0800de30
 8008d88:	0800de48 	.word	0x0800de48
 8008d8c:	0800de60 	.word	0x0800de60
 8008d90:	0800de78 	.word	0x0800de78
 8008d94:	08008da9 	.word	0x08008da9
 8008d98:	0800de88 	.word	0x0800de88
 8008d9c:	0800de9c 	.word	0x0800de9c
 8008da0:	0800debc 	.word	0x0800debc
 8008da4:	0800def4 	.word	0x0800def4

08008da8 <app_main_task>:


void app_main_task(void *param){
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	LOG_INFO(TAG, "Calling app_main().");
 8008db0:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <app_main_task+0x34>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	490a      	ldr	r1, [pc, #40]	; (8008de0 <app_main_task+0x38>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 f9d6 	bl	8009168 <LOG_INFO>
	extern void app_main(void);
	app_main();
 8008dbc:	f000 ff46 	bl	8009c4c <_Z8app_mainv>
	LOG_INFO(TAG, "Returned from app_main().");
 8008dc0:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <app_main_task+0x34>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4907      	ldr	r1, [pc, #28]	; (8008de4 <app_main_task+0x3c>)
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 f9ce 	bl	8009168 <LOG_INFO>
	vTaskDelete(NULL);
 8008dcc:	2000      	movs	r0, #0
 8008dce:	f7fa fe4f 	bl	8003a70 <vTaskDelete>
}
 8008dd2:	bf00      	nop
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200000d4 	.word	0x200000d4
 8008de0:	0800df10 	.word	0x0800df10
 8008de4:	0800df24 	.word	0x0800df24

08008de8 <vApplicationIdleHook>:
extern"C"{
	void vApplicationIdleHook(void){
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
		/** Do something while cpu idle. */
#if CONFIG_RTOS_USE_IWDG && ENABLE_IWDG
		/* Reset Independent Watchdog timer */
		iwdg_refresh();
 8008dec:	f7fe f984 	bl	80070f8 <iwdg_refresh>
#endif /* CONFIG_RTOS_USE_IWDG */
		sys_calculate_cpu_load_percent();
 8008df0:	f000 fd60 	bl	80098b4 <sys_calculate_cpu_load_percent>
	}
 8008df4:	bf00      	nop
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <vApplicationStackOverflowHook>:

	void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName){
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
		LOG_ERROR(TAG, "Stack overflow on %s.", pcTaskName);
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <vApplicationStackOverflowHook+0x34>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	4909      	ldr	r1, [pc, #36]	; (8008e30 <vApplicationStackOverflowHook+0x38>)
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f000 fa44 	bl	8009298 <LOG_ERROR>
		for(uint32_t i=0; i< 4000000; i++) __NOP();
 8008e10:	2300      	movs	r3, #0
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4a07      	ldr	r2, [pc, #28]	; (8008e34 <vApplicationStackOverflowHook+0x3c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d804      	bhi.n	8008e26 <vApplicationStackOverflowHook+0x2e>
 8008e1c:	bf00      	nop
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3301      	adds	r3, #1
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e7f6      	b.n	8008e14 <vApplicationStackOverflowHook+0x1c>
		__NVIC_SystemReset();
 8008e26:	f7ff fec9 	bl	8008bbc <__NVIC_SystemReset>
 8008e2a:	bf00      	nop
 8008e2c:	200000d4 	.word	0x200000d4
 8008e30:	0800df40 	.word	0x0800df40
 8008e34:	003d08ff 	.word	0x003d08ff

08008e38 <vApplicationMallocFailedHook>:
	}

	void vApplicationMallocFailedHook(void){
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	af00      	add	r7, sp, #0
		LOG_ERROR(TAG, "Memory allocation fail.");
 8008e3c:	4b03      	ldr	r3, [pc, #12]	; (8008e4c <vApplicationMallocFailedHook+0x14>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4903      	ldr	r1, [pc, #12]	; (8008e50 <vApplicationMallocFailedHook+0x18>)
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 fa28 	bl	8009298 <LOG_ERROR>
		__NVIC_SystemReset();
 8008e48:	f7ff feb8 	bl	8008bbc <__NVIC_SystemReset>
 8008e4c:	200000d4 	.word	0x200000d4
 8008e50:	0800df58 	.word	0x0800df58
 8008e54:	00000000 	.word	0x00000000

08008e58 <uart_log_init>:
	}
}

#if CONFIG_USE_LOG_MONITOR
#if ENABLE_USART && CONFIG_LOG_OVER_UART
static void uart_log_init(void){
 8008e58:	b590      	push	{r4, r7, lr}
 8008e5a:	b085      	sub	sp, #20
 8008e5c:	af00      	add	r7, sp, #0
	__IO uint32_t USART_BusFreq = 0UL;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	603b      	str	r3, [r7, #0]

	gpio_port_clock_enable(CONFIG_LOG_UART_TXP);
 8008e62:	487f      	ldr	r0, [pc, #508]	; (8009060 <uart_log_init+0x208>)
 8008e64:	f7fd fe8c 	bl	8006b80 <gpio_port_clock_enable>
	gpio_port_clock_enable(CONFIG_LOG_UART_RXP);
 8008e68:	487d      	ldr	r0, [pc, #500]	; (8009060 <uart_log_init+0x208>)
 8008e6a:	f7fd fe89 	bl	8006b80 <gpio_port_clock_enable>
	if(log_uart == USART1 || log_uart == USART2 || log_uart == USART3){
 8008e6e:	4b7d      	ldr	r3, [pc, #500]	; (8009064 <uart_log_init+0x20c>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a7d      	ldr	r2, [pc, #500]	; (8009068 <uart_log_init+0x210>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d009      	beq.n	8008e8c <uart_log_init+0x34>
 8008e78:	4b7a      	ldr	r3, [pc, #488]	; (8009064 <uart_log_init+0x20c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a7b      	ldr	r2, [pc, #492]	; (800906c <uart_log_init+0x214>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d004      	beq.n	8008e8c <uart_log_init+0x34>
 8008e82:	4b78      	ldr	r3, [pc, #480]	; (8009064 <uart_log_init+0x20c>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a7a      	ldr	r2, [pc, #488]	; (8009070 <uart_log_init+0x218>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d10a      	bne.n	8008ea2 <uart_log_init+0x4a>
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF7_USART1_3);
 8008e8c:	2207      	movs	r2, #7
 8008e8e:	210e      	movs	r1, #14
 8008e90:	4873      	ldr	r0, [pc, #460]	; (8009060 <uart_log_init+0x208>)
 8008e92:	f7fd ffbe 	bl	8006e12 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF7_USART1_3);
 8008e96:	2207      	movs	r2, #7
 8008e98:	2109      	movs	r1, #9
 8008e9a:	4871      	ldr	r0, [pc, #452]	; (8009060 <uart_log_init+0x208>)
 8008e9c:	f7fd ffb9 	bl	8006e12 <gpio_set_alternatefunction>
 8008ea0:	e009      	b.n	8008eb6 <uart_log_init+0x5e>
	}
	else{
		gpio_set_alternatefunction(CONFIG_LOG_UART_TXP, CONFIG_LOG_UART_TX, AF8_USART4_8);
 8008ea2:	2208      	movs	r2, #8
 8008ea4:	210e      	movs	r1, #14
 8008ea6:	486e      	ldr	r0, [pc, #440]	; (8009060 <uart_log_init+0x208>)
 8008ea8:	f7fd ffb3 	bl	8006e12 <gpio_set_alternatefunction>
		gpio_set_alternatefunction(CONFIG_LOG_UART_RXP, CONFIG_LOG_UART_RX, AF8_USART4_8);
 8008eac:	2208      	movs	r2, #8
 8008eae:	2109      	movs	r1, #9
 8008eb0:	486b      	ldr	r0, [pc, #428]	; (8009060 <uart_log_init+0x208>)
 8008eb2:	f7fd ffae 	bl	8006e12 <gpio_set_alternatefunction>
	}
	if(log_uart == USART1 || log_uart == USART6) {
 8008eb6:	4b6b      	ldr	r3, [pc, #428]	; (8009064 <uart_log_init+0x20c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a6b      	ldr	r2, [pc, #428]	; (8009068 <uart_log_init+0x210>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d004      	beq.n	8008eca <uart_log_init+0x72>
 8008ec0:	4b68      	ldr	r3, [pc, #416]	; (8009064 <uart_log_init+0x20c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a6b      	ldr	r2, [pc, #428]	; (8009074 <uart_log_init+0x21c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d11c      	bne.n	8008f04 <uart_log_init+0xac>
		if(log_uart == USART1) 		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8008eca:	4b66      	ldr	r3, [pc, #408]	; (8009064 <uart_log_init+0x20c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a66      	ldr	r2, [pc, #408]	; (8009068 <uart_log_init+0x210>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d106      	bne.n	8008ee2 <uart_log_init+0x8a>
 8008ed4:	4b68      	ldr	r3, [pc, #416]	; (8009078 <uart_log_init+0x220>)
 8008ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed8:	4a67      	ldr	r2, [pc, #412]	; (8009078 <uart_log_init+0x220>)
 8008eda:	f043 0310 	orr.w	r3, r3, #16
 8008ede:	6453      	str	r3, [r2, #68]	; 0x44
 8008ee0:	e00a      	b.n	8008ef8 <uart_log_init+0xa0>
		else if(log_uart == USART6) RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8008ee2:	4b60      	ldr	r3, [pc, #384]	; (8009064 <uart_log_init+0x20c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4a63      	ldr	r2, [pc, #396]	; (8009074 <uart_log_init+0x21c>)
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d105      	bne.n	8008ef8 <uart_log_init+0xa0>
 8008eec:	4b62      	ldr	r3, [pc, #392]	; (8009078 <uart_log_init+0x220>)
 8008eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef0:	4a61      	ldr	r2, [pc, #388]	; (8009078 <uart_log_init+0x220>)
 8008ef2:	f043 0320 	orr.w	r3, r3, #32
 8008ef6:	6453      	str	r3, [r2, #68]	; 0x44
		USART_BusFreq = rcc_get_bus_frequency(APB2);
 8008ef8:	2003      	movs	r0, #3
 8008efa:	f7fe fb1b 	bl	8007534 <rcc_get_bus_frequency>
 8008efe:	4603      	mov	r3, r0
 8008f00:	603b      	str	r3, [r7, #0]
 8008f02:	e033      	b.n	8008f6c <uart_log_init+0x114>
	}
	else {
		if(log_uart == USART2) 		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8008f04:	4b57      	ldr	r3, [pc, #348]	; (8009064 <uart_log_init+0x20c>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a58      	ldr	r2, [pc, #352]	; (800906c <uart_log_init+0x214>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d106      	bne.n	8008f1c <uart_log_init+0xc4>
 8008f0e:	4b5a      	ldr	r3, [pc, #360]	; (8009078 <uart_log_init+0x220>)
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	4a59      	ldr	r2, [pc, #356]	; (8009078 <uart_log_init+0x220>)
 8008f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f18:	6413      	str	r3, [r2, #64]	; 0x40
 8008f1a:	e022      	b.n	8008f62 <uart_log_init+0x10a>
		else if(log_uart == USART3) RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8008f1c:	4b51      	ldr	r3, [pc, #324]	; (8009064 <uart_log_init+0x20c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a53      	ldr	r2, [pc, #332]	; (8009070 <uart_log_init+0x218>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d106      	bne.n	8008f34 <uart_log_init+0xdc>
 8008f26:	4b54      	ldr	r3, [pc, #336]	; (8009078 <uart_log_init+0x220>)
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	4a53      	ldr	r2, [pc, #332]	; (8009078 <uart_log_init+0x220>)
 8008f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f30:	6413      	str	r3, [r2, #64]	; 0x40
 8008f32:	e016      	b.n	8008f62 <uart_log_init+0x10a>
		else if(log_uart == UART4)  RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8008f34:	4b4b      	ldr	r3, [pc, #300]	; (8009064 <uart_log_init+0x20c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a50      	ldr	r2, [pc, #320]	; (800907c <uart_log_init+0x224>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d106      	bne.n	8008f4c <uart_log_init+0xf4>
 8008f3e:	4b4e      	ldr	r3, [pc, #312]	; (8009078 <uart_log_init+0x220>)
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	4a4d      	ldr	r2, [pc, #308]	; (8009078 <uart_log_init+0x220>)
 8008f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f48:	6413      	str	r3, [r2, #64]	; 0x40
 8008f4a:	e00a      	b.n	8008f62 <uart_log_init+0x10a>
		else if(log_uart == UART5)  RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8008f4c:	4b45      	ldr	r3, [pc, #276]	; (8009064 <uart_log_init+0x20c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a4b      	ldr	r2, [pc, #300]	; (8009080 <uart_log_init+0x228>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d105      	bne.n	8008f62 <uart_log_init+0x10a>
 8008f56:	4b48      	ldr	r3, [pc, #288]	; (8009078 <uart_log_init+0x220>)
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	4a47      	ldr	r2, [pc, #284]	; (8009078 <uart_log_init+0x220>)
 8008f5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f60:	6413      	str	r3, [r2, #64]	; 0x40
		USART_BusFreq = rcc_get_bus_frequency(APB1);
 8008f62:	2002      	movs	r0, #2
 8008f64:	f7fe fae6 	bl	8007534 <rcc_get_bus_frequency>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	603b      	str	r3, [r7, #0]
	}

	log_uart -> CR1 |= USART_CR1_UE | USART_CR1_TE | USART_CR1_RE;
 8008f6c:	4b3d      	ldr	r3, [pc, #244]	; (8009064 <uart_log_init+0x20c>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	4a3c      	ldr	r2, [pc, #240]	; (8009064 <uart_log_init+0x20c>)
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f7a:	f043 030c 	orr.w	r3, r3, #12
 8008f7e:	60d3      	str	r3, [r2, #12]
	float USARTDIV = (float)(USART_BusFreq/(CONFIG_LOG_UART_BAUDRATE * 16.0));
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f7 fade 	bl	8000544 <__aeabi_ui2d>
 8008f88:	a333      	add	r3, pc, #204	; (adr r3, 8009058 <uart_log_init+0x200>)
 8008f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f8e:	f7f7 fc7d 	bl	800088c <__aeabi_ddiv>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	4610      	mov	r0, r2
 8008f98:	4619      	mov	r1, r3
 8008f9a:	f7f7 fe45 	bl	8000c28 <__aeabi_d2f>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	60fb      	str	r3, [r7, #12]
	uint16_t DIV_Fraction = 0x00UL;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	817b      	strh	r3, [r7, #10]
	uint16_t DIV_Mantissa = (uint16_t)USARTDIV;
 8008fa6:	edd7 7a03 	vldr	s15, [r7, #12]
 8008faa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fae:	ee17 3a90 	vmov	r3, s15
 8008fb2:	813b      	strh	r3, [r7, #8]

	float Fraction = (float)(((float)(((uint16_t)(USARTDIV * 100.0) - (uint16_t)(DIV_Mantissa * 100.0)) / 100.0)) * 16.0);
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f7f7 fae7 	bl	8000588 <__aeabi_f2d>
 8008fba:	f04f 0200 	mov.w	r2, #0
 8008fbe:	4b31      	ldr	r3, [pc, #196]	; (8009084 <uart_log_init+0x22c>)
 8008fc0:	f7f7 fb3a 	bl	8000638 <__aeabi_dmul>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4610      	mov	r0, r2
 8008fca:	4619      	mov	r1, r3
 8008fcc:	f7f7 fe0c 	bl	8000be8 <__aeabi_d2uiz>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	461c      	mov	r4, r3
 8008fd6:	893b      	ldrh	r3, [r7, #8]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7f7 fac3 	bl	8000564 <__aeabi_i2d>
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	4b28      	ldr	r3, [pc, #160]	; (8009084 <uart_log_init+0x22c>)
 8008fe4:	f7f7 fb28 	bl	8000638 <__aeabi_dmul>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4610      	mov	r0, r2
 8008fee:	4619      	mov	r1, r3
 8008ff0:	f7f7 fdfa 	bl	8000be8 <__aeabi_d2uiz>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	1ae3      	subs	r3, r4, r3
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7f7 fab2 	bl	8000564 <__aeabi_i2d>
 8009000:	f04f 0200 	mov.w	r2, #0
 8009004:	4b1f      	ldr	r3, [pc, #124]	; (8009084 <uart_log_init+0x22c>)
 8009006:	f7f7 fc41 	bl	800088c <__aeabi_ddiv>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	4610      	mov	r0, r2
 8009010:	4619      	mov	r1, r3
 8009012:	f7f7 fe09 	bl	8000c28 <__aeabi_d2f>
 8009016:	ee07 0a10 	vmov	s14, r0
 800901a:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	edc7 7a01 	vstr	s15, [r7, #4]
	DIV_Fraction = ceil(Fraction);
 8009026:	ed97 0a01 	vldr	s0, [r7, #4]
 800902a:	f7ff f82f 	bl	800808c <_ZSt4ceilf>
 800902e:	eef0 7a40 	vmov.f32	s15, s0
 8009032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009036:	ee17 3a90 	vmov	r3, s15
 800903a:	817b      	strh	r3, [r7, #10]
	log_uart -> BRR = (DIV_Mantissa << 4) | (DIV_Fraction << 0);
 800903c:	893b      	ldrh	r3, [r7, #8]
 800903e:	011a      	lsls	r2, r3, #4
 8009040:	897b      	ldrh	r3, [r7, #10]
 8009042:	431a      	orrs	r2, r3
 8009044:	4b07      	ldr	r3, [pc, #28]	; (8009064 <uart_log_init+0x20c>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	609a      	str	r2, [r3, #8]

	uart_log((char *)"\r\n\r\n*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*Target starting*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\r\n");
 800904a:	480f      	ldr	r0, [pc, #60]	; (8009088 <uart_log_init+0x230>)
 800904c:	f000 f81e 	bl	800908c <uart_log>
}
 8009050:	bf00      	nop
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	bd90      	pop	{r4, r7, pc}
 8009058:	00000000 	.word	0x00000000
 800905c:	413c2000 	.word	0x413c2000
 8009060:	40021800 	.word	0x40021800
 8009064:	200000d8 	.word	0x200000d8
 8009068:	40011000 	.word	0x40011000
 800906c:	40004400 	.word	0x40004400
 8009070:	40004800 	.word	0x40004800
 8009074:	40011400 	.word	0x40011400
 8009078:	40023800 	.word	0x40023800
 800907c:	40004c00 	.word	0x40004c00
 8009080:	40005000 	.word	0x40005000
 8009084:	40590000 	.word	0x40590000
 8009088:	0800df70 	.word	0x0800df70

0800908c <uart_log>:

static void uart_log(char *log){
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009094:	2300      	movs	r3, #0
 8009096:	60fb      	str	r3, [r7, #12]
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009098:	f3ef 8305 	mrs	r3, IPSR
 800909c:	617b      	str	r3, [r7, #20]
	if( ulCurrentInterrupt == 0 )
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <uart_log+0x1e>
		xReturn = pdFALSE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e001      	b.n	80090ae <uart_log+0x22>
		xReturn = pdTRUE;
 80090aa:	2301      	movs	r3, #1
 80090ac:	613b      	str	r3, [r7, #16]
	return xReturn;
 80090ae:	693b      	ldr	r3, [r7, #16]
	BaseType_t ret, in_it = xPortIsInsideInterrupt();
 80090b0:	61bb      	str	r3, [r7, #24]
	(in_it == pdTRUE)? (ret = xSemaphoreTakeFromISR(log_semaph, &xHigherPriorityTaskWoken)) : (ret = xSemaphoreTake(log_semaph, 10));
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d109      	bne.n	80090cc <uart_log+0x40>
 80090b8:	4b21      	ldr	r3, [pc, #132]	; (8009140 <uart_log+0xb4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f107 020c 	add.w	r2, r7, #12
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fa f92c 	bl	8003320 <xQueueReceiveFromISR>
 80090c8:	61f8      	str	r0, [r7, #28]
 80090ca:	e006      	b.n	80090da <uart_log+0x4e>
 80090cc:	4b1c      	ldr	r3, [pc, #112]	; (8009140 <uart_log+0xb4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	210a      	movs	r1, #10
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fa f818 	bl	8003108 <xQueueSemaphoreTake>
 80090d8:	61f8      	str	r0, [r7, #28]

	if(ret == pdTRUE){
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d12a      	bne.n	8009136 <uart_log+0xaa>
		while(*log) {
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d013      	beq.n	8009110 <uart_log+0x84>
			log_uart -> DR = *log++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	781a      	ldrb	r2, [r3, #0]
 80090f0:	4b14      	ldr	r3, [pc, #80]	; (8009144 <uart_log+0xb8>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	605a      	str	r2, [r3, #4]
			while(!(log_uart -> SR & USART_SR_TC));
 80090f6:	4b13      	ldr	r3, [pc, #76]	; (8009144 <uart_log+0xb8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009100:	2b00      	cmp	r3, #0
 8009102:	bf0c      	ite	eq
 8009104:	2301      	moveq	r3, #1
 8009106:	2300      	movne	r3, #0
 8009108:	b2db      	uxtb	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d0e8      	beq.n	80090e0 <uart_log+0x54>
 800910e:	e7f2      	b.n	80090f6 <uart_log+0x6a>
		}

		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d108      	bne.n	8009128 <uart_log+0x9c>
 8009116:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <uart_log+0xb4>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f107 020c 	add.w	r2, r7, #12
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7f9 fe84 	bl	8002e2e <xQueueGiveFromISR>
	}
}
 8009126:	e006      	b.n	8009136 <uart_log+0xaa>
		(in_it == pdTRUE)? xSemaphoreGiveFromISR(log_semaph, &xHigherPriorityTaskWoken) : xSemaphoreGive(log_semaph);
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <uart_log+0xb4>)
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	2300      	movs	r3, #0
 800912e:	2200      	movs	r2, #0
 8009130:	2100      	movs	r1, #0
 8009132:	f7f9 fce3 	bl	8002afc <xQueueGenericSend>
}
 8009136:	bf00      	nop
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	2000ba64 	.word	0x2000ba64
 8009144:	200000d8 	.word	0x200000d8

08009148 <log_init>:
 *
 * @pre
 * @post
 * @param PrintString_Function
 */
void log_init(void (*PrintString_Function)(char*)){
 8009148:	b480      	push	{r7}
 800914a:	b083      	sub	sp, #12
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	plog = PrintString_Function;
 8009150:	4a04      	ldr	r2, [pc, #16]	; (8009164 <log_init+0x1c>)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6013      	str	r3, [r2, #0]
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	2000ba68 	.word	0x2000ba68

08009168 <LOG_INFO>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_INFO(const char *tag,  const char *format, ...){
 8009168:	b40e      	push	{r1, r2, r3}
 800916a:	b590      	push	{r4, r7, lr}
 800916c:	b08a      	sub	sp, #40	; 0x28
 800916e:	af04      	add	r7, sp, #16
 8009170:	6078      	str	r0, [r7, #4]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 8009172:	f7fe fe09 	bl	8007d88 <get_tick>
 8009176:	6178      	str	r0, [r7, #20]
#else
	uint32_t time = HAL_GetTick();
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 800917c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009180:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 8009182:	f107 0310 	add.w	r3, r7, #16
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800918a:	4618      	mov	r0, r3
 800918c:	f001 ff38 	bl	800b000 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logi], log_level_str[0], time, tag, Temp_buffer, COLOR_END);
 8009190:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <LOG_INFO+0x80>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	4b15      	ldr	r3, [pc, #84]	; (80091ec <LOG_INFO+0x84>)
 8009198:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800919c:	4b14      	ldr	r3, [pc, #80]	; (80091f0 <LOG_INFO+0x88>)
 800919e:	681c      	ldr	r4, [r3, #0]
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	4a14      	ldr	r2, [pc, #80]	; (80091f4 <LOG_INFO+0x8c>)
 80091a4:	6812      	ldr	r2, [r2, #0]
 80091a6:	f107 0008 	add.w	r0, r7, #8
 80091aa:	9203      	str	r2, [sp, #12]
 80091ac:	9302      	str	r3, [sp, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	9300      	str	r3, [sp, #0]
 80091b6:	4623      	mov	r3, r4
 80091b8:	460a      	mov	r2, r1
 80091ba:	490f      	ldr	r1, [pc, #60]	; (80091f8 <LOG_INFO+0x90>)
 80091bc:	f000 ff2a 	bl	800a014 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logi], log_level_str[0], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <LOG_INFO+0x94>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	4610      	mov	r0, r2
 80091c8:	4798      	blx	r3
	free(Temp_buffer);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 ff71 	bl	800a0b4 <free>
	free(Output_buffer);
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f000 ff6d 	bl	800a0b4 <free>
}
 80091da:	bf00      	nop
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80091e4:	b003      	add	sp, #12
 80091e6:	4770      	bx	lr
 80091e8:	200000dc 	.word	0x200000dc
 80091ec:	20000104 	.word	0x20000104
 80091f0:	200000e4 	.word	0x200000e4
 80091f4:	20000100 	.word	0x20000100
 80091f8:	0800e1b0 	.word	0x0800e1b0
 80091fc:	2000ba68 	.word	0x2000ba68

08009200 <LOG_WARN>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_WARN(const char *tag,  const char *format, ...){
 8009200:	b40e      	push	{r1, r2, r3}
 8009202:	b590      	push	{r4, r7, lr}
 8009204:	b08a      	sub	sp, #40	; 0x28
 8009206:	af04      	add	r7, sp, #16
 8009208:	6078      	str	r0, [r7, #4]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800920a:	f7fe fdbd 	bl	8007d88 <get_tick>
 800920e:	6178      	str	r0, [r7, #20]
#else
	uint32_t time = HAL_GetTick();
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
 8009210:	2300      	movs	r3, #0
 8009212:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8009214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009218:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	68fa      	ldr	r2, [r7, #12]
 8009220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009222:	4618      	mov	r0, r3
 8009224:	f001 feec 	bl	800b000 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logw], log_level_str[1], time, tag, Temp_buffer, COLOR_END);
 8009228:	4b15      	ldr	r3, [pc, #84]	; (8009280 <LOG_WARN+0x80>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <LOG_WARN+0x84>)
 8009230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009234:	4b14      	ldr	r3, [pc, #80]	; (8009288 <LOG_WARN+0x88>)
 8009236:	685c      	ldr	r4, [r3, #4]
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	4a14      	ldr	r2, [pc, #80]	; (800928c <LOG_WARN+0x8c>)
 800923c:	6812      	ldr	r2, [r2, #0]
 800923e:	f107 0008 	add.w	r0, r7, #8
 8009242:	9203      	str	r2, [sp, #12]
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	4623      	mov	r3, r4
 8009250:	460a      	mov	r2, r1
 8009252:	490f      	ldr	r1, [pc, #60]	; (8009290 <LOG_WARN+0x90>)
 8009254:	f000 fede 	bl	800a014 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logw], log_level_str[1], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009258:	4b0e      	ldr	r3, [pc, #56]	; (8009294 <LOG_WARN+0x94>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	4610      	mov	r0, r2
 8009260:	4798      	blx	r3
	free(Temp_buffer);
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	4618      	mov	r0, r3
 8009266:	f000 ff25 	bl	800a0b4 <free>
	free(Output_buffer);
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 ff21 	bl	800a0b4 <free>
}
 8009272:	bf00      	nop
 8009274:	3718      	adds	r7, #24
 8009276:	46bd      	mov	sp, r7
 8009278:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800927c:	b003      	add	sp, #12
 800927e:	4770      	bx	lr
 8009280:	200000dd 	.word	0x200000dd
 8009284:	20000104 	.word	0x20000104
 8009288:	200000e4 	.word	0x200000e4
 800928c:	20000100 	.word	0x20000100
 8009290:	0800e1b0 	.word	0x0800e1b0
 8009294:	2000ba68 	.word	0x2000ba68

08009298 <LOG_ERROR>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_ERROR(const char *tag,  const char *format, ...){
 8009298:	b40e      	push	{r1, r2, r3}
 800929a:	b590      	push	{r4, r7, lr}
 800929c:	b08a      	sub	sp, #40	; 0x28
 800929e:	af04      	add	r7, sp, #16
 80092a0:	6078      	str	r0, [r7, #4]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 80092a2:	f7fe fd71 	bl	8007d88 <get_tick>
 80092a6:	6178      	str	r0, [r7, #20]
#else
	uint32_t time = HAL_GetTick();
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 80092ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092b0:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 80092b2:	f107 0310 	add.w	r3, r7, #16
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 fea0 	bl	800b000 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[loge], log_level_str[2], time, tag, Temp_buffer, COLOR_END);
 80092c0:	4b15      	ldr	r3, [pc, #84]	; (8009318 <LOG_ERROR+0x80>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	461a      	mov	r2, r3
 80092c6:	4b15      	ldr	r3, [pc, #84]	; (800931c <LOG_ERROR+0x84>)
 80092c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092cc:	4b14      	ldr	r3, [pc, #80]	; (8009320 <LOG_ERROR+0x88>)
 80092ce:	689c      	ldr	r4, [r3, #8]
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	4a14      	ldr	r2, [pc, #80]	; (8009324 <LOG_ERROR+0x8c>)
 80092d4:	6812      	ldr	r2, [r2, #0]
 80092d6:	f107 0008 	add.w	r0, r7, #8
 80092da:	9203      	str	r2, [sp, #12]
 80092dc:	9302      	str	r3, [sp, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	4623      	mov	r3, r4
 80092e8:	460a      	mov	r2, r1
 80092ea:	490f      	ldr	r1, [pc, #60]	; (8009328 <LOG_ERROR+0x90>)
 80092ec:	f000 fe92 	bl	800a014 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[loge], log_level_str[2], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 80092f0:	4b0e      	ldr	r3, [pc, #56]	; (800932c <LOG_ERROR+0x94>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	4610      	mov	r0, r2
 80092f8:	4798      	blx	r3
	free(Temp_buffer);
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f000 fed9 	bl	800a0b4 <free>
	free(Output_buffer);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 fed5 	bl	800a0b4 <free>
}
 800930a:	bf00      	nop
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009314:	b003      	add	sp, #12
 8009316:	4770      	bx	lr
 8009318:	200000de 	.word	0x200000de
 800931c:	20000104 	.word	0x20000104
 8009320:	200000e4 	.word	0x200000e4
 8009324:	20000100 	.word	0x20000100
 8009328:	0800e1b0 	.word	0x0800e1b0
 800932c:	2000ba68 	.word	0x2000ba68

08009330 <LOG_DEBUG>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_DEBUG(const char *tag,  const char *format, ...){
 8009330:	b40e      	push	{r1, r2, r3}
 8009332:	b590      	push	{r4, r7, lr}
 8009334:	b08a      	sub	sp, #40	; 0x28
 8009336:	af04      	add	r7, sp, #16
 8009338:	6078      	str	r0, [r7, #4]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 800933a:	f7fe fd25 	bl	8007d88 <get_tick>
 800933e:	6178      	str	r0, [r7, #20]
#else
	uint32_t time = HAL_GetTick();
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
 8009340:	2300      	movs	r3, #0
 8009342:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 8009344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009348:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 800934a:	f107 0310 	add.w	r3, r7, #16
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fe54 	bl	800b000 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logd], log_level_str[3], time, tag, Temp_buffer, COLOR_END);
 8009358:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <LOG_DEBUG+0x80>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	461a      	mov	r2, r3
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <LOG_DEBUG+0x84>)
 8009360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009364:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <LOG_DEBUG+0x88>)
 8009366:	68dc      	ldr	r4, [r3, #12]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4a14      	ldr	r2, [pc, #80]	; (80093bc <LOG_DEBUG+0x8c>)
 800936c:	6812      	ldr	r2, [r2, #0]
 800936e:	f107 0008 	add.w	r0, r7, #8
 8009372:	9203      	str	r2, [sp, #12]
 8009374:	9302      	str	r3, [sp, #8]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4623      	mov	r3, r4
 8009380:	460a      	mov	r2, r1
 8009382:	490f      	ldr	r1, [pc, #60]	; (80093c0 <LOG_DEBUG+0x90>)
 8009384:	f000 fe46 	bl	800a014 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logd], log_level_str[3], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <LOG_DEBUG+0x94>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	4610      	mov	r0, r2
 8009390:	4798      	blx	r3
	free(Temp_buffer);
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	4618      	mov	r0, r3
 8009396:	f000 fe8d 	bl	800a0b4 <free>
	free(Output_buffer);
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fe89 	bl	800a0b4 <free>
}
 80093a2:	bf00      	nop
 80093a4:	3718      	adds	r7, #24
 80093a6:	46bd      	mov	sp, r7
 80093a8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80093ac:	b003      	add	sp, #12
 80093ae:	4770      	bx	lr
 80093b0:	200000df 	.word	0x200000df
 80093b4:	20000104 	.word	0x20000104
 80093b8:	200000e4 	.word	0x200000e4
 80093bc:	20000100 	.word	0x20000100
 80093c0:	0800e1b0 	.word	0x0800e1b0
 80093c4:	2000ba68 	.word	0x2000ba68

080093c8 <LOG_MEM>:
 * @pre
 * @post
 * @param tag
 * @param format
 */
void LOG_MEM(const char *tag,  const char *format, ...){
 80093c8:	b40e      	push	{r1, r2, r3}
 80093ca:	b590      	push	{r4, r7, lr}
 80093cc:	b08a      	sub	sp, #40	; 0x28
 80093ce:	af04      	add	r7, sp, #16
 80093d0:	6078      	str	r0, [r7, #4]
#if CONFIG_LOG_TICK_TIME
#if !defined(HAL_TICK)
	uint32_t time = get_tick();
 80093d2:	f7fe fcd9 	bl	8007d88 <get_tick>
 80093d6:	6178      	str	r0, [r7, #20]
#else
	uint32_t time = HAL_GetTick();
#endif /* defined(USE_HAL_DRIVER) */
#endif
	char *Temp_buffer = NULL;
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
	va_list args;
	va_start(args, format);
 80093dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093e0:	60fb      	str	r3, [r7, #12]
	vasprintf(&Temp_buffer, format, args);
 80093e2:	f107 0310 	add.w	r3, r7, #16
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 fe08 	bl	800b000 <vasiprintf>
	va_end(args);

	char *Output_buffer;
#if CONFIG_LOG_TICK_TIME
	asprintf(&Output_buffer, "\r\n%s%s [%lu] %s: %s%s", LOG_COLOR[logm], log_level_str[4], time, tag, Temp_buffer, COLOR_END);
 80093f0:	4b15      	ldr	r3, [pc, #84]	; (8009448 <LOG_MEM+0x80>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	461a      	mov	r2, r3
 80093f6:	4b15      	ldr	r3, [pc, #84]	; (800944c <LOG_MEM+0x84>)
 80093f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093fc:	4b14      	ldr	r3, [pc, #80]	; (8009450 <LOG_MEM+0x88>)
 80093fe:	691c      	ldr	r4, [r3, #16]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4a14      	ldr	r2, [pc, #80]	; (8009454 <LOG_MEM+0x8c>)
 8009404:	6812      	ldr	r2, [r2, #0]
 8009406:	f107 0008 	add.w	r0, r7, #8
 800940a:	9203      	str	r2, [sp, #12]
 800940c:	9302      	str	r3, [sp, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	9301      	str	r3, [sp, #4]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	4623      	mov	r3, r4
 8009418:	460a      	mov	r2, r1
 800941a:	490f      	ldr	r1, [pc, #60]	; (8009458 <LOG_MEM+0x90>)
 800941c:	f000 fdfa 	bl	800a014 <asiprintf>
#else
	asprintf(&Output_buffer, "\r\n%s%s %s: %s%s", LOG_COLOR[logm], log_level_str[4], tag, Temp_buffer, COLOR_END);
#endif

	plog(Output_buffer);
 8009420:	4b0e      	ldr	r3, [pc, #56]	; (800945c <LOG_MEM+0x94>)
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68ba      	ldr	r2, [r7, #8]
 8009426:	4610      	mov	r0, r2
 8009428:	4798      	blx	r3
	free(Temp_buffer);
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 fe41 	bl	800a0b4 <free>
	free(Output_buffer);
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fe3d 	bl	800a0b4 <free>
}
 800943a:	bf00      	nop
 800943c:	3718      	adds	r7, #24
 800943e:	46bd      	mov	sp, r7
 8009440:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009444:	b003      	add	sp, #12
 8009446:	4770      	bx	lr
 8009448:	200000e0 	.word	0x200000e0
 800944c:	20000104 	.word	0x20000104
 8009450:	200000e4 	.word	0x200000e4
 8009454:	20000100 	.word	0x20000100
 8009458:	0800e1b0 	.word	0x0800e1b0
 800945c:	2000ba68 	.word	0x2000ba68

08009460 <wait_flag_in_register_timeout>:
 * @param Flag
 * @param Level
 * @param TimeOut
 * @return
 */
stm_ret_t wait_flag_in_register_timeout(__IO uint32_t *Register, uint32_t Flag, flaglevel_t Level, uint16_t TimeOut){
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	70fb      	strb	r3, [r7, #3]
	stm_ret_t res;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2201      	movs	r2, #1
 8009472:	701a      	strb	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	605a      	str	r2, [r3, #4]

	__IO uint32_t time = GetCounterFunction();
 800947a:	4b1b      	ldr	r3, [pc, #108]	; (80094e8 <wait_flag_in_register_timeout+0x88>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4798      	blx	r3
 8009480:	4603      	mov	r3, r0
 8009482:	617b      	str	r3, [r7, #20]
	while((Level == FLAG_RESET)?(*Register & Flag) : (!(*Register & Flag))){
 8009484:	78fb      	ldrb	r3, [r7, #3]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <wait_flag_in_register_timeout+0x34>
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	4013      	ands	r3, r2
 8009492:	e008      	b.n	80094a6 <wait_flag_in_register_timeout+0x46>
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4013      	ands	r3, r2
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2301      	moveq	r3, #1
 80094a2:	2300      	movne	r3, #0
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	bf14      	ite	ne
 80094aa:	2301      	movne	r3, #1
 80094ac:	2300      	moveq	r3, #0
 80094ae:	b2db      	uxtb	r3, r3
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d014      	beq.n	80094de <wait_flag_in_register_timeout+0x7e>
		if(TimeOut != NO_TIMEOUT){
 80094b4:	8c3b      	ldrh	r3, [r7, #32]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0e4      	beq.n	8009484 <wait_flag_in_register_timeout+0x24>
			if(GetCounterFunction() - time >= TimeOut) {
 80094ba:	4b0b      	ldr	r3, [pc, #44]	; (80094e8 <wait_flag_in_register_timeout+0x88>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4798      	blx	r3
 80094c0:	4602      	mov	r2, r0
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	1ad2      	subs	r2, r2, r3
 80094c6:	8c3b      	ldrh	r3, [r7, #32]
 80094c8:	429a      	cmp	r2, r3
 80094ca:	bf2c      	ite	cs
 80094cc:	2301      	movcs	r3, #1
 80094ce:	2300      	movcc	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0d6      	beq.n	8009484 <wait_flag_in_register_timeout+0x24>
				res.Status  = STM_TIMEOUT;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2202      	movs	r2, #2
 80094da:	701a      	strb	r2, [r3, #0]
				return res;
 80094dc:	e000      	b.n	80094e0 <wait_flag_in_register_timeout+0x80>
			}
		}
	}
	return res;
 80094de:	bf00      	nop
}
 80094e0:	68f8      	ldr	r0, [r7, #12]
 80094e2:	3718      	adds	r7, #24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000184 	.word	0x20000184

080094ec <set_return>:
 * @post
 * @param res
 * @param Status
 * @param CodeLine
 */
void set_return(stm_ret_t *res, stm_err_t Status, uint32_t CodeLine){
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	460b      	mov	r3, r1
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	72fb      	strb	r3, [r7, #11]
	res -> Status = Status;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	7afa      	ldrb	r2, [r7, #11]
 80094fe:	701a      	strb	r2, [r3, #0]
	res -> Line = CodeLine;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	605a      	str	r2, [r3, #4]
}
 8009506:	bf00      	nop
 8009508:	3714      	adds	r7, #20
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <set_return_line>:
 * @pre
 * @post
 * @param res
 * @param line
 */
void set_return_line(stm_ret_t *res, uint16_t line){
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	460b      	mov	r3, r1
 800951c:	807b      	strh	r3, [r7, #2]
	res -> Line = line;
 800951e:	887a      	ldrh	r2, [r7, #2]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	605a      	str	r2, [r3, #4]
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <is_oke>:
 * @pre
 * @post
 * @param res
 * @return
 */
bool is_oke(stm_ret_t *res){
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
	if(res -> Status == STM_OKE) return true;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d101      	bne.n	8009544 <is_oke+0x14>
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <is_oke+0x16>
	return false;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <is_timeout>:
 * @pre
 * @post
 * @param res
 * @return
 */
bool is_timeout(stm_ret_t *res){
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
	if(res -> Status == STM_TIMEOUT) return true;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d101      	bne.n	8009566 <is_timeout+0x14>
 8009562:	2301      	movs	r3, #1
 8009564:	e000      	b.n	8009568 <is_timeout+0x16>
	return false;
 8009566:	2300      	movs	r3, #0
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <__NVIC_SetPriorityGrouping>:
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f003 0307 	and.w	r3, r3, #7
 8009582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009584:	4b0c      	ldr	r3, [pc, #48]	; (80095b8 <__NVIC_SetPriorityGrouping+0x44>)
 8009586:	68db      	ldr	r3, [r3, #12]
 8009588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009590:	4013      	ands	r3, r2
 8009592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800959c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80095a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80095a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80095a6:	4a04      	ldr	r2, [pc, #16]	; (80095b8 <__NVIC_SetPriorityGrouping+0x44>)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	60d3      	str	r3, [r2, #12]
}
 80095ac:	bf00      	nop
 80095ae:	3714      	adds	r7, #20
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr
 80095b8:	e000ed00 	.word	0xe000ed00

080095bc <__NVIC_GetPriorityGrouping>:
{
 80095bc:	b480      	push	{r7}
 80095be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80095c0:	4b04      	ldr	r3, [pc, #16]	; (80095d4 <__NVIC_GetPriorityGrouping+0x18>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	0a1b      	lsrs	r3, r3, #8
 80095c6:	f003 0307 	and.w	r3, r3, #7
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr
 80095d4:	e000ed00 	.word	0xe000ed00

080095d8 <__NVIC_SetPriority>:
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	6039      	str	r1, [r7, #0]
 80095e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	db0a      	blt.n	8009602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	b2da      	uxtb	r2, r3
 80095f0:	490c      	ldr	r1, [pc, #48]	; (8009624 <__NVIC_SetPriority+0x4c>)
 80095f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095f6:	0112      	lsls	r2, r2, #4
 80095f8:	b2d2      	uxtb	r2, r2
 80095fa:	440b      	add	r3, r1
 80095fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009600:	e00a      	b.n	8009618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	b2da      	uxtb	r2, r3
 8009606:	4908      	ldr	r1, [pc, #32]	; (8009628 <__NVIC_SetPriority+0x50>)
 8009608:	79fb      	ldrb	r3, [r7, #7]
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	3b04      	subs	r3, #4
 8009610:	0112      	lsls	r2, r2, #4
 8009612:	b2d2      	uxtb	r2, r2
 8009614:	440b      	add	r3, r1
 8009616:	761a      	strb	r2, [r3, #24]
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	e000e100 	.word	0xe000e100
 8009628:	e000ed00 	.word	0xe000ed00

0800962c <NVIC_EncodePriority>:
{
 800962c:	b480      	push	{r7}
 800962e:	b089      	sub	sp, #36	; 0x24
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f003 0307 	and.w	r3, r3, #7
 800963e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f1c3 0307 	rsb	r3, r3, #7
 8009646:	2b04      	cmp	r3, #4
 8009648:	bf28      	it	cs
 800964a:	2304      	movcs	r3, #4
 800964c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	3304      	adds	r3, #4
 8009652:	2b06      	cmp	r3, #6
 8009654:	d902      	bls.n	800965c <NVIC_EncodePriority+0x30>
 8009656:	69fb      	ldr	r3, [r7, #28]
 8009658:	3b03      	subs	r3, #3
 800965a:	e000      	b.n	800965e <NVIC_EncodePriority+0x32>
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009660:	2201      	movs	r2, #1
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	fa02 f303 	lsl.w	r3, r2, r3
 8009668:	1e5a      	subs	r2, r3, #1
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	401a      	ands	r2, r3
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009672:	2101      	movs	r1, #1
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	fa01 f303 	lsl.w	r3, r1, r3
 800967a:	1e59      	subs	r1, r3, #1
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	400b      	ands	r3, r1
         );
 8009680:	4313      	orrs	r3, r2
}
 8009682:	4618      	mov	r0, r3
 8009684:	3724      	adds	r7, #36	; 0x24
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
	...

08009690 <get_revid>:
volatile uint32_t systick_idle_ticks = 0;
volatile uint32_t last_systick_idle_ticks = 0;
volatile float cpu_load_percent = 0.0;


uint32_t get_revid(void){
 8009690:	b480      	push	{r7}
 8009692:	af00      	add	r7, sp, #0
	return((DBGMCU -> IDCODE) >> 16U);
 8009694:	4b03      	ldr	r3, [pc, #12]	; (80096a4 <get_revid+0x14>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	0c1b      	lsrs	r3, r3, #16
}
 800969a:	4618      	mov	r0, r3
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	e0042000 	.word	0xe0042000

080096a8 <get_devid>:

uint32_t get_devid(void){
 80096a8:	b480      	push	{r7}
 80096aa:	af00      	add	r7, sp, #0
	return((DBGMCU -> IDCODE) & 0x0FFFU);
 80096ac:	4b04      	ldr	r3, [pc, #16]	; (80096c0 <get_devid+0x18>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	e0042000 	.word	0xe0042000

080096c4 <get_flashsize>:

uint32_t get_flashsize(void){
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
	return (*(volatile uint16_t*)0x1FFF7A22);
 80096c8:	4b03      	ldr	r3, [pc, #12]	; (80096d8 <get_flashsize+0x14>)
 80096ca:	881b      	ldrh	r3, [r3, #0]
 80096cc:	b29b      	uxth	r3, r3
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr
 80096d8:	1fff7a22 	.word	0x1fff7a22

080096dc <system_init>:

void system_init(void){
 80096dc:	b580      	push	{r7, lr}
 80096de:	af00      	add	r7, sp, #0
	embedded_flash_init();
 80096e0:	f000 f81e 	bl	8009720 <embedded_flash_init>

	__NVIC_SetPriorityGrouping(0x03U);
 80096e4:	2003      	movs	r0, #3
 80096e6:	f7ff ff45 	bl	8009574 <__NVIC_SetPriorityGrouping>

	systick_init(CONFIG_SYSTICK_INTERRUPT_PRIORITY);
 80096ea:	200f      	movs	r0, #15
 80096ec:	f7fe faf0 	bl	8007cd0 <systick_init>

	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <system_init+0x3c>)
 80096f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096f4:	4a08      	ldr	r2, [pc, #32]	; (8009718 <system_init+0x3c>)
 80096f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096fa:	6453      	str	r3, [r2, #68]	; 0x44
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 80096fc:	4b06      	ldr	r3, [pc, #24]	; (8009718 <system_init+0x3c>)
 80096fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009700:	4a05      	ldr	r2, [pc, #20]	; (8009718 <system_init+0x3c>)
 8009702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009706:	6413      	str	r3, [r2, #64]	; 0x40

	PWR -> CR |= PWR_CR_VOS;
 8009708:	4b04      	ldr	r3, [pc, #16]	; (800971c <system_init+0x40>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a03      	ldr	r2, [pc, #12]	; (800971c <system_init+0x40>)
 800970e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009712:	6013      	str	r3, [r2, #0]
}
 8009714:	bf00      	nop
 8009716:	bd80      	pop	{r7, pc}
 8009718:	40023800 	.word	0x40023800
 800971c:	40007000 	.word	0x40007000

08009720 <embedded_flash_init>:

void embedded_flash_init(void){
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
#if CONFIG_FLASH_INSTRUCTION_CACHE
	FLASH -> ACR |= FLASH_ACR_ICEN;
 8009724:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <embedded_flash_init+0x34>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <embedded_flash_init+0x34>)
 800972a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800972e:	6013      	str	r3, [r2, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_ICEN;
#endif

#if CONFIG_FLASH_DATA_CACHE
	FLASH -> ACR |= FLASH_ACR_DCEN;
 8009730:	4b08      	ldr	r3, [pc, #32]	; (8009754 <embedded_flash_init+0x34>)
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a07      	ldr	r2, [pc, #28]	; (8009754 <embedded_flash_init+0x34>)
 8009736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800973a:	6013      	str	r3, [r2, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_DCEN;
#endif

#if CONFIG_FLASH_PREFETCH_MODE
	FLASH -> ACR |= FLASH_ACR_PRFTEN;
 800973c:	4b05      	ldr	r3, [pc, #20]	; (8009754 <embedded_flash_init+0x34>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a04      	ldr	r2, [pc, #16]	; (8009754 <embedded_flash_init+0x34>)
 8009742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009746:	6013      	str	r3, [r2, #0]
#else
	FLASH -> ACR &=~ FLASH_ACR_PRFTEN;
#endif

}
 8009748:	bf00      	nop
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	40023c00 	.word	0x40023c00

08009758 <embedded_flash_set_latency>:

void embedded_flash_set_latency(uint32_t latency){
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	if(latency > FLASH_ACR_LATENCY_7WS) latency = FLASH_ACR_LATENCY_7WS;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2b07      	cmp	r3, #7
 8009764:	d901      	bls.n	800976a <embedded_flash_set_latency+0x12>
 8009766:	2307      	movs	r3, #7
 8009768:	607b      	str	r3, [r7, #4]

	FLASH -> ACR = ((FLASH -> ACR & (~FLASH_ACR_LATENCY_Msk)) | (latency << FLASH_ACR_LATENCY_Pos));
 800976a:	4b07      	ldr	r3, [pc, #28]	; (8009788 <embedded_flash_set_latency+0x30>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f023 020f 	bic.w	r2, r3, #15
 8009772:	4905      	ldr	r1, [pc, #20]	; (8009788 <embedded_flash_set_latency+0x30>)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4313      	orrs	r3, r2
 8009778:	600b      	str	r3, [r1, #0]
}
 800977a:	bf00      	nop
 800977c:	370c      	adds	r7, #12
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	40023c00 	.word	0x40023c00

0800978c <embedded_flash_calculate_latency>:

	tmpreg |= (uint32_t)(latency << FLASH_ACR_LATENCY_Pos);
	FLASH -> ACR |= tmpreg;
}

uint32_t embedded_flash_calculate_latency(uint32_t freq){
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	uint32_t latency= (uint32_t)(freq / 30000000U);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	09db      	lsrs	r3, r3, #7
 8009798:	4a13      	ldr	r2, [pc, #76]	; (80097e8 <embedded_flash_calculate_latency+0x5c>)
 800979a:	fba2 2303 	umull	r2, r3, r2, r3
 800979e:	0a9b      	lsrs	r3, r3, #10
 80097a0:	60fb      	str	r3, [r7, #12]
	if(freq == 30000000U || freq == 60000000U || freq == 90000000U
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a11      	ldr	r2, [pc, #68]	; (80097ec <embedded_flash_calculate_latency+0x60>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d013      	beq.n	80097d2 <embedded_flash_calculate_latency+0x46>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a10      	ldr	r2, [pc, #64]	; (80097f0 <embedded_flash_calculate_latency+0x64>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d00f      	beq.n	80097d2 <embedded_flash_calculate_latency+0x46>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a0f      	ldr	r2, [pc, #60]	; (80097f4 <embedded_flash_calculate_latency+0x68>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00b      	beq.n	80097d2 <embedded_flash_calculate_latency+0x46>
    || freq == 120000000U || freq == 150000000U || freq == 180000000U) latency -= 1;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a0e      	ldr	r2, [pc, #56]	; (80097f8 <embedded_flash_calculate_latency+0x6c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d007      	beq.n	80097d2 <embedded_flash_calculate_latency+0x46>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a0d      	ldr	r2, [pc, #52]	; (80097fc <embedded_flash_calculate_latency+0x70>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d003      	beq.n	80097d2 <embedded_flash_calculate_latency+0x46>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a0c      	ldr	r2, [pc, #48]	; (8009800 <embedded_flash_calculate_latency+0x74>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d102      	bne.n	80097d8 <embedded_flash_calculate_latency+0x4c>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	3b01      	subs	r3, #1
 80097d6:	60fb      	str	r3, [r7, #12]

	return latency;
 80097d8:	68fb      	ldr	r3, [r7, #12]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	011e54c7 	.word	0x011e54c7
 80097ec:	01c9c380 	.word	0x01c9c380
 80097f0:	03938700 	.word	0x03938700
 80097f4:	055d4a80 	.word	0x055d4a80
 80097f8:	07270e00 	.word	0x07270e00
 80097fc:	08f0d180 	.word	0x08f0d180
 8009800:	0aba9500 	.word	0x0aba9500

08009804 <embedded_flash_get_latency>:

uint32_t embedded_flash_get_latency(void){
 8009804:	b480      	push	{r7}
 8009806:	af00      	add	r7, sp, #0
	return (FLASH -> ACR & FLASH_ACR_LATENCY_Msk >> FLASH_ACR_LATENCY_Pos);
 8009808:	4b04      	ldr	r3, [pc, #16]	; (800981c <embedded_flash_get_latency+0x18>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 030f 	and.w	r3, r3, #15
}
 8009810:	4618      	mov	r0, r3
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40023c00 	.word	0x40023c00

08009820 <NVIC_Set_Priority>:


void NVIC_Set_Priority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority){
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 800982e:	2300      	movs	r3, #0
 8009830:	617b      	str	r3, [r7, #20]

	if(PreemptPriority > 15U) PreemptPriority = 15U;
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b0f      	cmp	r3, #15
 8009836:	d901      	bls.n	800983c <NVIC_Set_Priority+0x1c>
 8009838:	230f      	movs	r3, #15
 800983a:	60bb      	str	r3, [r7, #8]
	if(SubPriority > 15U) SubPriority = 15U;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b0f      	cmp	r3, #15
 8009840:	d901      	bls.n	8009846 <NVIC_Set_Priority+0x26>
 8009842:	230f      	movs	r3, #15
 8009844:	607b      	str	r3, [r7, #4]

	prioritygroup = __NVIC_GetPriorityGrouping();
 8009846:	f7ff feb9 	bl	80095bc <__NVIC_GetPriorityGrouping>
 800984a:	6178      	str	r0, [r7, #20]

	__NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	6978      	ldr	r0, [r7, #20]
 8009852:	f7ff feeb 	bl	800962c <NVIC_EncodePriority>
 8009856:	4602      	mov	r2, r0
 8009858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff feba 	bl	80095d8 <__NVIC_SetPriority>
}
 8009864:	bf00      	nop
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <sys_get_free_heap_size>:
	mem.total_free_ram = mi.fordblks;

	return mem;
}

uint32_t sys_get_free_heap_size(void){
 800986c:	b580      	push	{r7, lr}
 800986e:	b08e      	sub	sp, #56	; 0x38
 8009870:	af00      	add	r7, sp, #0
	char *heapend = (char*)sbrk(0);
 8009872:	2000      	movs	r0, #0
 8009874:	f001 fba4 	bl	800afc0 <sbrk>
 8009878:	6378      	str	r0, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 800987a:	f3ef 8308 	mrs	r3, MSP
 800987e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	char * stack_ptr = (char*)__get_MSP();
 8009882:	633b      	str	r3, [r7, #48]	; 0x30
	struct mallinfo mi = mallinfo();
 8009884:	1d3b      	adds	r3, r7, #4
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fc4c 	bl	800a124 <mallinfo>

	return ((stack_ptr < minSP) ? stack_ptr : minSP) - heapend + mi.fordblks;
 800988c:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <sys_get_free_heap_size+0x44>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009892:	429a      	cmp	r2, r3
 8009894:	d201      	bcs.n	800989a <sys_get_free_heap_size+0x2e>
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	e001      	b.n	800989e <sys_get_free_heap_size+0x32>
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <sys_get_free_heap_size+0x44>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098a0:	1a9b      	subs	r3, r3, r2
 80098a2:	461a      	mov	r2, r3
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	4413      	add	r3, r2
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3738      	adds	r7, #56	; 0x38
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	2000ba6c 	.word	0x2000ba6c

080098b4 <sys_calculate_cpu_load_percent>:
	struct mallinfo mi = mallinfo();

	return mi.uordblks;
}

void sys_calculate_cpu_load_percent(void){
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
    if((sdk_tick - last_systick_idle_ticks) >= 1){
 80098b8:	4b0c      	ldr	r3, [pc, #48]	; (80098ec <sys_calculate_cpu_load_percent+0x38>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <sys_calculate_cpu_load_percent+0x3c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	bf14      	ite	ne
 80098c4:	2301      	movne	r3, #1
 80098c6:	2300      	moveq	r3, #0
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d008      	beq.n	80098e0 <sys_calculate_cpu_load_percent+0x2c>
    	systick_idle_ticks++;
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <sys_calculate_cpu_load_percent+0x40>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <sys_calculate_cpu_load_percent+0x40>)
 80098d6:	6013      	str	r3, [r2, #0]
    	last_systick_idle_ticks = sdk_tick;
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <sys_calculate_cpu_load_percent+0x38>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a04      	ldr	r2, [pc, #16]	; (80098f0 <sys_calculate_cpu_load_percent+0x3c>)
 80098de:	6013      	str	r3, [r2, #0]
    }
}
 80098e0:	bf00      	nop
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	2000b7d0 	.word	0x2000b7d0
 80098f0:	2000ba78 	.word	0x2000ba78
 80098f4:	2000ba74 	.word	0x2000ba74

080098f8 <exception_interrupt_handler>:

	return (float)(((float)total_ram_use / (float)total_ram_size) * 100.0F);
}


void exception_interrupt_handler(const char *tag, char *message){
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
#if CONFIG_USE_LOG_MONITOR
	LOG_ERROR(tag, message);
 8009902:	6839      	ldr	r1, [r7, #0]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f7ff fcc7 	bl	8009298 <LOG_ERROR>
#endif /* CONFIG_USE_LOG_MONITOR */
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <_Z41__static_initialization_and_destruction_0ii>:
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d10b      	bne.n	800993c <_Z41__static_initialization_and_destruction_0ii+0x28>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800992a:	4293      	cmp	r3, r2
 800992c:	d106      	bne.n	800993c <_Z41__static_initialization_and_destruction_0ii+0x28>
static char *minSP = (char*)(ramend - &_Min_Stack_Size);
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a06      	ldr	r2, [pc, #24]	; (800994c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	461a      	mov	r2, r3
 8009938:	4b05      	ldr	r3, [pc, #20]	; (8009950 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800993a:	601a      	str	r2, [r3, #0]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20000188 	.word	0x20000188
 800994c:	00000400 	.word	0x00000400
 8009950:	2000ba6c 	.word	0x2000ba6c

08009954 <_GLOBAL__sub_I_systick_total_ticks>:
 8009954:	b580      	push	{r7, lr}
 8009956:	af00      	add	r7, sp, #0
 8009958:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800995c:	2001      	movs	r0, #1
 800995e:	f7ff ffd9 	bl	8009914 <_Z41__static_initialization_and_destruction_0ii>
 8009962:	bd80      	pop	{r7, pc}

08009964 <firebase_init>:
char *set2_struct = (char *)"{\"time_start\":\"10:25:15\",\"time_stop\":\"11:30:00\"}";
char *prop_struct = (char *)"{\"properties\":{\"address\":\"0x%08x\",\"name\":\"%s\"}}";



void firebase_init(char *url, char *secret_key){
 8009964:	b580      	push	{r7, lr}
 8009966:	b084      	sub	sp, #16
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
	char *tmp;

	asprintf(&tmp, "{\"url\":\"%s\"}", url);
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4912      	ldr	r1, [pc, #72]	; (80099c0 <firebase_init+0x5c>)
 8009976:	4618      	mov	r0, r3
 8009978:	f000 fb4c 	bl	800a014 <asiprintf>
	if(secret_key != NULL) asprintf(&secret, "%s", secret_key);
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <firebase_init+0x28>
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	490f      	ldr	r1, [pc, #60]	; (80099c4 <firebase_init+0x60>)
 8009986:	4810      	ldr	r0, [pc, #64]	; (80099c8 <firebase_init+0x64>)
 8009988:	f000 fb44 	bl	800a014 <asiprintf>

	wifiif_http_client_new();
 800998c:	f7fc fad2 	bl	8005f34 <wifiif_http_client_new>
	wifiif_http_client_config(tmp);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	4618      	mov	r0, r3
 8009994:	f7fc fad8 	bl	8005f48 <wifiif_http_client_config>
	wifiif_http_client_config((char *)"{\"transport_ssl\":1}");
 8009998:	480c      	ldr	r0, [pc, #48]	; (80099cc <firebase_init+0x68>)
 800999a:	f7fc fad5 	bl	8005f48 <wifiif_http_client_config>
	wifiif_http_client_config((char *)"{\"crt_bundle\":1}");
 800999e:	480c      	ldr	r0, [pc, #48]	; (80099d0 <firebase_init+0x6c>)
 80099a0:	f7fc fad2 	bl	8005f48 <wifiif_http_client_config>
	wifiif_http_client_init();
 80099a4:	f7fc fadc 	bl	8005f60 <wifiif_http_client_init>

	wifiif_http_client_set_header((char *)"Content-Type", (char *)"application/json");
 80099a8:	490a      	ldr	r1, [pc, #40]	; (80099d4 <firebase_init+0x70>)
 80099aa:	480b      	ldr	r0, [pc, #44]	; (80099d8 <firebase_init+0x74>)
 80099ac:	f7fc fae2 	bl	8005f74 <wifiif_http_client_set_header>

	free(tmp);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 fb7e 	bl	800a0b4 <free>
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	0800e380 	.word	0x0800e380
 80099c4:	0800e390 	.word	0x0800e390
 80099c8:	2000ba80 	.word	0x2000ba80
 80099cc:	0800e394 	.word	0x0800e394
 80099d0:	0800e3a8 	.word	0x0800e3a8
 80099d4:	0800e3bc 	.word	0x0800e3bc
 80099d8:	0800e3d0 	.word	0x0800e3d0

080099dc <firebase_new_device>:

void firebase_new_device(dev_struct_t *dev){
 80099dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099e0:	b08b      	sub	sp, #44	; 0x2c
 80099e2:	af06      	add	r7, sp, #24
 80099e4:	6078      	str	r0, [r7, #4]
	char *path, *data;

	wifiif_http_client_set_method((char *)"HTTP_METHOD_PATCH");
 80099e6:	4872      	ldr	r0, [pc, #456]	; (8009bb0 <firebase_new_device+0x1d4>)
 80099e8:	f7fc fafa 	bl	8005fe0 <wifiif_http_client_set_method>

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 80099ec:	4b71      	ldr	r3, [pc, #452]	; (8009bb4 <firebase_new_device+0x1d8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d009      	beq.n	8009a08 <firebase_new_device+0x2c>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4b6e      	ldr	r3, [pc, #440]	; (8009bb4 <firebase_new_device+0x1d8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f107 000c 	add.w	r0, r7, #12
 8009a00:	496d      	ldr	r1, [pc, #436]	; (8009bb8 <firebase_new_device+0x1dc>)
 8009a02:	f000 fb07 	bl	800a014 <asiprintf>
 8009a06:	e007      	b.n	8009a18 <firebase_new_device+0x3c>
	else asprintf(&path, "/%s/.json", dev->prop.name);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	f107 030c 	add.w	r3, r7, #12
 8009a10:	496a      	ldr	r1, [pc, #424]	; (8009bbc <firebase_new_device+0x1e0>)
 8009a12:	4618      	mov	r0, r3
 8009a14:	f000 fafe 	bl	800a014 <asiprintf>
	wifiif_http_client_set_url(path);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7fc fac6 	bl	8005fac <wifiif_http_client_set_url>

	asprintf(&data, data_struct, dev->env.temp, dev->env.humi, dev->env.curr, dev->env.time);
 8009a20:	4b67      	ldr	r3, [pc, #412]	; (8009bc0 <firebase_new_device+0x1e4>)
 8009a22:	681e      	ldr	r6, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7f6 fdad 	bl	8000588 <__aeabi_f2d>
 8009a2e:	4680      	mov	r8, r0
 8009a30:	4689      	mov	r9, r1
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f6 fda6 	bl	8000588 <__aeabi_f2d>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	460d      	mov	r5, r1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f7f6 fd9f 	bl	8000588 <__aeabi_f2d>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	68c9      	ldr	r1, [r1, #12]
 8009a52:	f107 0008 	add.w	r0, r7, #8
 8009a56:	9104      	str	r1, [sp, #16]
 8009a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a5c:	e9cd 4500 	strd	r4, r5, [sp]
 8009a60:	4642      	mov	r2, r8
 8009a62:	464b      	mov	r3, r9
 8009a64:	4631      	mov	r1, r6
 8009a66:	f000 fad5 	bl	800a014 <asiprintf>
	wifiif_http_client_set_data(data);
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fc fad1 	bl	8006014 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 8009a72:	f7fc fae9 	bl	8006048 <wifiif_http_client_request>
	free(data);
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 fb1b 	bl	800a0b4 <free>

	asprintf(&data, ctrl_struct, dev->ctrl.relay1, dev->ctrl.relay2, dev->ctrl.relay3, dev->ctrl.relay4);
 8009a7e:	4b51      	ldr	r3, [pc, #324]	; (8009bc4 <firebase_new_device+0x1e8>)
 8009a80:	6819      	ldr	r1, [r3, #0]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	7c1b      	ldrb	r3, [r3, #16]
 8009a86:	461c      	mov	r4, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	7c5b      	ldrb	r3, [r3, #17]
 8009a8c:	461d      	mov	r5, r3
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	7c9b      	ldrb	r3, [r3, #18]
 8009a92:	461a      	mov	r2, r3
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	7cdb      	ldrb	r3, [r3, #19]
 8009a98:	f107 0008 	add.w	r0, r7, #8
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	9200      	str	r2, [sp, #0]
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	4622      	mov	r2, r4
 8009aa4:	f000 fab6 	bl	800a014 <asiprintf>
	wifiif_http_client_set_data(data);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fc fab2 	bl	8006014 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 8009ab0:	f7fc faca 	bl	8006048 <wifiif_http_client_request>
	free(data);
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fafc 	bl	800a0b4 <free>

	asprintf(&data, prop_struct, dev->prop.address, dev->prop.name);
 8009abc:	4b42      	ldr	r3, [pc, #264]	; (8009bc8 <firebase_new_device+0x1ec>)
 8009abe:	6819      	ldr	r1, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac8:	f107 0008 	add.w	r0, r7, #8
 8009acc:	f000 faa2 	bl	800a014 <asiprintf>
	wifiif_http_client_set_data(data);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7fc fa9e 	bl	8006014 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 8009ad8:	f7fc fab6 	bl	8006048 <wifiif_http_client_request>
	free(data);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f000 fae8 	bl	800a0b4 <free>

	free(path);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f000 fae4 	bl	800a0b4 <free>
	if(secret != NULL) asprintf(&path, "/%s/settings/.json?auth=%s", dev->prop.name, secret);
 8009aec:	4b31      	ldr	r3, [pc, #196]	; (8009bb4 <firebase_new_device+0x1d8>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d009      	beq.n	8009b08 <firebase_new_device+0x12c>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4b2e      	ldr	r3, [pc, #184]	; (8009bb4 <firebase_new_device+0x1d8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f107 000c 	add.w	r0, r7, #12
 8009b00:	4932      	ldr	r1, [pc, #200]	; (8009bcc <firebase_new_device+0x1f0>)
 8009b02:	f000 fa87 	bl	800a014 <asiprintf>
 8009b06:	e007      	b.n	8009b18 <firebase_new_device+0x13c>
	else asprintf(&path, "/%s/settings/.json", dev->prop.name);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0c:	f107 030c 	add.w	r3, r7, #12
 8009b10:	492f      	ldr	r1, [pc, #188]	; (8009bd0 <firebase_new_device+0x1f4>)
 8009b12:	4618      	mov	r0, r3
 8009b14:	f000 fa7e 	bl	800a014 <asiprintf>

	wifiif_http_client_set_url(path);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fc fa46 	bl	8005fac <wifiif_http_client_set_url>
	asprintf(&data, set1_struct, dev->sett.mode, dev->sett.type, dev->sett.max_temp, dev->sett.min_temp);
 8009b20:	4b2c      	ldr	r3, [pc, #176]	; (8009bd4 <firebase_new_device+0x1f8>)
 8009b22:	681e      	ldr	r6, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7d1b      	ldrb	r3, [r3, #20]
 8009b28:	4698      	mov	r8, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7d5b      	ldrb	r3, [r3, #21]
 8009b2e:	4699      	mov	r9, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	699b      	ldr	r3, [r3, #24]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7f6 fd27 	bl	8000588 <__aeabi_f2d>
 8009b3a:	4604      	mov	r4, r0
 8009b3c:	460d      	mov	r5, r1
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f6 fd20 	bl	8000588 <__aeabi_f2d>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	f107 0008 	add.w	r0, r7, #8
 8009b50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b54:	e9cd 4500 	strd	r4, r5, [sp]
 8009b58:	464b      	mov	r3, r9
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	f000 fa59 	bl	800a014 <asiprintf>
	wifiif_http_client_set_data(data);
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fc fa55 	bl	8006014 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 8009b6a:	f7fc fa6d 	bl	8006048 <wifiif_http_client_request>
	free(data);
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	4618      	mov	r0, r3
 8009b72:	f000 fa9f 	bl	800a0b4 <free>
	asprintf(&data, set2_struct, dev->sett.time_start, dev->sett.time_stop);
 8009b76:	4b18      	ldr	r3, [pc, #96]	; (8009bd8 <firebase_new_device+0x1fc>)
 8009b78:	6819      	ldr	r1, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a1a      	ldr	r2, [r3, #32]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	f107 0008 	add.w	r0, r7, #8
 8009b86:	f000 fa45 	bl	800a014 <asiprintf>
	wifiif_http_client_set_data(data);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7fc fa41 	bl	8006014 <wifiif_http_client_set_data>
	wifiif_http_client_request();
 8009b92:	f7fc fa59 	bl	8006048 <wifiif_http_client_request>

	free(data);
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fa8b 	bl	800a0b4 <free>
	free(path);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f000 fa87 	bl	800a0b4 <free>
}
 8009ba6:	bf00      	nop
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bb0:	0800e3e0 	.word	0x0800e3e0
 8009bb4:	2000ba80 	.word	0x2000ba80
 8009bb8:	0800e3f4 	.word	0x0800e3f4
 8009bbc:	0800e408 	.word	0x0800e408
 8009bc0:	2000018c 	.word	0x2000018c
 8009bc4:	20000190 	.word	0x20000190
 8009bc8:	2000019c 	.word	0x2000019c
 8009bcc:	0800e414 	.word	0x0800e414
 8009bd0:	0800e430 	.word	0x0800e430
 8009bd4:	20000194 	.word	0x20000194
 8009bd8:	20000198 	.word	0x20000198

08009bdc <firebase_remove_device>:

void firebase_remove_device(dev_struct_t *dev){
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b084      	sub	sp, #16
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
	char *path;

	wifiif_http_client_set_method((char *)"HTTP_METHOD_DELETE");
 8009be4:	4814      	ldr	r0, [pc, #80]	; (8009c38 <firebase_remove_device+0x5c>)
 8009be6:	f7fc f9fb 	bl	8005fe0 <wifiif_http_client_set_method>
	wifiif_http_client_set_data((char *)"{}");
 8009bea:	4814      	ldr	r0, [pc, #80]	; (8009c3c <firebase_remove_device+0x60>)
 8009bec:	f7fc fa12 	bl	8006014 <wifiif_http_client_set_data>

	if(secret != NULL) asprintf(&path, "/%s/.json?auth=%s", dev->prop.name, secret);
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <firebase_remove_device+0x64>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d009      	beq.n	8009c0c <firebase_remove_device+0x30>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bfc:	4b10      	ldr	r3, [pc, #64]	; (8009c40 <firebase_remove_device+0x64>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f107 000c 	add.w	r0, r7, #12
 8009c04:	490f      	ldr	r1, [pc, #60]	; (8009c44 <firebase_remove_device+0x68>)
 8009c06:	f000 fa05 	bl	800a014 <asiprintf>
 8009c0a:	e007      	b.n	8009c1c <firebase_remove_device+0x40>
	else asprintf(&path, "/%s/.json", dev->prop.name);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c10:	f107 030c 	add.w	r3, r7, #12
 8009c14:	490c      	ldr	r1, [pc, #48]	; (8009c48 <firebase_remove_device+0x6c>)
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 f9fc 	bl	800a014 <asiprintf>
	wifiif_http_client_set_url(path);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fc f9c4 	bl	8005fac <wifiif_http_client_set_url>

	wifiif_http_client_request();
 8009c24:	f7fc fa10 	bl	8006048 <wifiif_http_client_request>
	free(path);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fa42 	bl	800a0b4 <free>
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	0800e444 	.word	0x0800e444
 8009c3c:	0800e458 	.word	0x0800e458
 8009c40:	2000ba80 	.word	0x2000ba80
 8009c44:	0800e3f4 	.word	0x0800e3f4
 8009c48:	0800e408 	.word	0x0800e408

08009c4c <_Z8app_mainv>:
	kho3.sett.time_stop = (char *)"00:00:00",
	kho3.prop.address = 0xFDEA15DE,
	kho3.prop.name = (char *)"Kho3",
};

void app_main(void){
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af02      	add	r7, sp, #8
	extern void HAL_Driver_Init(void);
	HAL_Driver_Init();
 8009c52:	f7f7 f840 	bl	8000cd6 <HAL_Driver_Init>

	gpio_port_clock_enable(GPIOC);
 8009c56:	480d      	ldr	r0, [pc, #52]	; (8009c8c <_Z8app_mainv+0x40>)
 8009c58:	f7fc ff92 	bl	8006b80 <gpio_port_clock_enable>
	gpio_set_mode(GPIOC, 13, GPIO_OUTPUT_PUSHPULL);
 8009c5c:	2206      	movs	r2, #6
 8009c5e:	210d      	movs	r1, #13
 8009c60:	480a      	ldr	r0, [pc, #40]	; (8009c8c <_Z8app_mainv+0x40>)
 8009c62:	f7fd f80d 	bl	8006c80 <gpio_set_mode>

//	xTaskCreate(task_lorarx, "task_lorarx", byte_to_word(8192), NULL, 5, NULL);
//	xTaskCreate(task_loratx, "task_loratx", byte_to_word(8192), NULL, 5, NULL);
	xTaskCreate(task_wifi, "task_wifi", byte_to_word(8192), NULL, 6, NULL);
 8009c66:	2300      	movs	r3, #0
 8009c68:	9301      	str	r3, [sp, #4]
 8009c6a:	2306      	movs	r3, #6
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c74:	4906      	ldr	r1, [pc, #24]	; (8009c90 <_Z8app_mainv+0x44>)
 8009c76:	4807      	ldr	r0, [pc, #28]	; (8009c94 <_Z8app_mainv+0x48>)
 8009c78:	f7f9 fdb5 	bl	80037e6 <xTaskCreate>

	while(1){
		gpio_toggle(GPIOC, 13);
 8009c7c:	210d      	movs	r1, #13
 8009c7e:	4803      	ldr	r0, [pc, #12]	; (8009c8c <_Z8app_mainv+0x40>)
 8009c80:	f7fd f98c 	bl	8006f9c <gpio_toggle>
		vTaskDelay(100);
 8009c84:	2064      	movs	r0, #100	; 0x64
 8009c86:	f7f9 ff65 	bl	8003b54 <vTaskDelay>
		gpio_toggle(GPIOC, 13);
 8009c8a:	e7f7      	b.n	8009c7c <_Z8app_mainv+0x30>
 8009c8c:	40020800 	.word	0x40020800
 8009c90:	0800e4cc 	.word	0x0800e4cc
 8009c94:	08009c99 	.word	0x08009c99

08009c98 <_Z9task_wifiPv>:
	}
}



void task_wifi(void *){
 8009c98:	b590      	push	{r4, r7, lr}
 8009c9a:	b089      	sub	sp, #36	; 0x24
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
	usart1->init(&wf_uart_conf);
 8009ca0:	4b37      	ldr	r3, [pc, #220]	; (8009d80 <_Z9task_wifiPv+0xe8>)
 8009ca2:	6819      	ldr	r1, [r3, #0]
 8009ca4:	f107 0308 	add.w	r3, r7, #8
 8009ca8:	4a36      	ldr	r2, [pc, #216]	; (8009d84 <_Z9task_wifiPv+0xec>)
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fa26 	bl	80080fc <_ZN5usart4initEP14usart_config_t>
	usart1->register_event_handler(wifi_uart_handler, NULL);
 8009cb0:	4b33      	ldr	r3, [pc, #204]	; (8009d80 <_Z9task_wifiPv+0xe8>)
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	f107 0010 	add.w	r0, r7, #16
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4a33      	ldr	r2, [pc, #204]	; (8009d88 <_Z9task_wifiPv+0xf0>)
 8009cbc:	f7fe fc4a 	bl	8008554 <_ZN5usart22register_event_handlerEPFv13usart_event_tPvES1_>
	usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 8009cc0:	4b2f      	ldr	r3, [pc, #188]	; (8009d80 <_Z9task_wifiPv+0xe8>)
 8009cc2:	6819      	ldr	r1, [r3, #0]
 8009cc4:	f107 0318 	add.w	r3, r7, #24
 8009cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fe fd57 	bl	8008780 <_ZN5usart24receive_to_idle_start_itEt>

	wifiif_register_request_function(wifi_request);
 8009cd2:	482e      	ldr	r0, [pc, #184]	; (8009d8c <_Z9task_wifiPv+0xf4>)
 8009cd4:	f7fc f8ba 	bl	8005e4c <wifiif_register_request_function>
	wifiif_register_command_handler(wifi_command_handler);
 8009cd8:	482d      	ldr	r0, [pc, #180]	; (8009d90 <_Z9task_wifiPv+0xf8>)
 8009cda:	f7fc f8c7 	bl	8005e6c <wifiif_register_command_handler>

	wifiif_restart();
 8009cde:	f7fc f901 	bl	8005ee4 <wifiif_restart>
	restart_wifi:
	if(!wifiif_state_is_running()) wifiif_restart();
 8009ce2:	f7fc f9cb 	bl	800607c <wifiif_state_is_running>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	f083 0301 	eor.w	r3, r3, #1
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d001      	beq.n	8009cf6 <_Z9task_wifiPv+0x5e>
 8009cf2:	f7fc f8f7 	bl	8005ee4 <wifiif_restart>
	vTaskDelay(1000);
 8009cf6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cfa:	f7f9 ff2b 	bl	8003b54 <vTaskDelay>
	wifiif_connect((char *)"FREE", (char *)"0986382835", (char *)"WIFI_AUTH_WPA2_PSK");
 8009cfe:	4a25      	ldr	r2, [pc, #148]	; (8009d94 <_Z9task_wifiPv+0xfc>)
 8009d00:	4925      	ldr	r1, [pc, #148]	; (8009d98 <_Z9task_wifiPv+0x100>)
 8009d02:	4826      	ldr	r0, [pc, #152]	; (8009d9c <_Z9task_wifiPv+0x104>)
 8009d04:	f7fc f8f8 	bl	8005ef8 <wifiif_connect>
	wifiif_state_running(true);
 8009d08:	2001      	movs	r0, #1
 8009d0a:	f7fc f9a7 	bl	800605c <wifiif_state_running>

	firebase_init((char *)"https://iotnhakho-default-rtdb.asia-southeast1.firebasedatabase.app", (char *)"YAg8QGH48Xlbjpk9UMh5JkjgYCCbeMSM4Ak5SNHp");
 8009d0e:	4924      	ldr	r1, [pc, #144]	; (8009da0 <_Z9task_wifiPv+0x108>)
 8009d10:	4824      	ldr	r0, [pc, #144]	; (8009da4 <_Z9task_wifiPv+0x10c>)
 8009d12:	f7ff fe27 	bl	8009964 <firebase_init>

	firebase_new_device(&kho3);
 8009d16:	4824      	ldr	r0, [pc, #144]	; (8009da8 <_Z9task_wifiPv+0x110>)
 8009d18:	f7ff fe60 	bl	80099dc <firebase_new_device>
	firebase_remove_device(&kho3);
 8009d1c:	4822      	ldr	r0, [pc, #136]	; (8009da8 <_Z9task_wifiPv+0x110>)
 8009d1e:	f7ff ff5d 	bl	8009bdc <firebase_remove_device>
	wifiif_http_client_set_url((char *)"/.json?auth=YAg8QGH48Xlbjpk9UMh5JkjgYCCbeMSM4Ak5SNHp");
 8009d22:	4822      	ldr	r0, [pc, #136]	; (8009dac <_Z9task_wifiPv+0x114>)
 8009d24:	f7fc f942 	bl	8005fac <wifiif_http_client_set_url>
	wifiif_http_client_set_url((char *)"/.json?auth=YAg8QGH48Xlbjpk9UMh5JkjgYCCbeMSM4Ak5SNHpsdgdfgsfdhfgdsvhjfvbygv cygfjsduygcevhbjdygfduvcbhjsxdygfvchbxsjuyfdgvch bwsxcdygvfch wbsxhcydgfvcwbshcgdvytdhfbjycdugfvhbxycgfvc bdshxcgydvt bhdcgyvydb tvg xhfdvt");
 8009d28:	4821      	ldr	r0, [pc, #132]	; (8009db0 <_Z9task_wifiPv+0x118>)
 8009d2a:	f7fc f93f 	bl	8005fac <wifiif_http_client_set_url>

	while(1){
		if(!wifiif_state_is_running()) {
 8009d2e:	f7fc f9a5 	bl	800607c <wifiif_state_is_running>
 8009d32:	4603      	mov	r3, r0
 8009d34:	f083 0301 	eor.w	r3, r3, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d008      	beq.n	8009d50 <_Z9task_wifiPv+0xb8>
			LOG_ERROR(TAG, "WiFi module error reset.");
 8009d3e:	4b1d      	ldr	r3, [pc, #116]	; (8009db4 <_Z9task_wifiPv+0x11c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	491d      	ldr	r1, [pc, #116]	; (8009db8 <_Z9task_wifiPv+0x120>)
 8009d44:	4618      	mov	r0, r3
 8009d46:	f7ff faa7 	bl	8009298 <LOG_ERROR>
			wifiif_reset_response_state();
 8009d4a:	f7fc f8b3 	bl	8005eb4 <wifiif_reset_response_state>
			goto restart_wifi;
 8009d4e:	e7c8      	b.n	8009ce2 <_Z9task_wifiPv+0x4a>
		}

		wifiif_http_client_set_data((char *)"{}");
 8009d50:	481a      	ldr	r0, [pc, #104]	; (8009dbc <_Z9task_wifiPv+0x124>)
 8009d52:	f7fc f95f 	bl	8006014 <wifiif_http_client_set_data>
		wifiif_http_client_set_method((char *)"HTTP_METHOD_GET");
 8009d56:	481a      	ldr	r0, [pc, #104]	; (8009dc0 <_Z9task_wifiPv+0x128>)
 8009d58:	f7fc f942 	bl	8005fe0 <wifiif_http_client_set_method>
		wifiif_http_client_request();
 8009d5c:	f7fc f974 	bl	8006048 <wifiif_http_client_request>

		LOG_MEM(TAG, "Free heap size: %lu", sys_get_free_heap_size());
 8009d60:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <_Z9task_wifiPv+0x11c>)
 8009d62:	681c      	ldr	r4, [r3, #0]
 8009d64:	f7ff fd82 	bl	800986c <sys_get_free_heap_size>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4915      	ldr	r1, [pc, #84]	; (8009dc4 <_Z9task_wifiPv+0x12c>)
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f7ff fb2a 	bl	80093c8 <LOG_MEM>

		vTaskDelay(5000);
 8009d74:	f241 3088 	movw	r0, #5000	; 0x1388
 8009d78:	f7f9 feec 	bl	8003b54 <vTaskDelay>
		if(!wifiif_state_is_running()) {
 8009d7c:	e7d7      	b.n	8009d2e <_Z9task_wifiPv+0x96>
 8009d7e:	bf00      	nop
 8009d80:	20000074 	.word	0x20000074
 8009d84:	200001a4 	.word	0x200001a4
 8009d88:	08009e8d 	.word	0x08009e8d
 8009d8c:	08009dc9 	.word	0x08009dc9
 8009d90:	08009e0d 	.word	0x08009e0d
 8009d94:	0800e5f8 	.word	0x0800e5f8
 8009d98:	0800e60c 	.word	0x0800e60c
 8009d9c:	0800e618 	.word	0x0800e618
 8009da0:	0800e620 	.word	0x0800e620
 8009da4:	0800e64c 	.word	0x0800e64c
 8009da8:	200001c8 	.word	0x200001c8
 8009dac:	0800e690 	.word	0x0800e690
 8009db0:	0800e6c8 	.word	0x0800e6c8
 8009db4:	200001a0 	.word	0x200001a0
 8009db8:	0800e7a0 	.word	0x0800e7a0
 8009dbc:	0800e7bc 	.word	0x0800e7bc
 8009dc0:	0800e7c0 	.word	0x0800e7c0
 8009dc4:	0800e7d0 	.word	0x0800e7d0

08009dc8 <_Z12wifi_requestPc>:
	}
}
void wifi_request(char *str){
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	while(*str) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d011      	beq.n	8009dfc <_Z12wifi_requestPc+0x34>
		USART1 -> DR = *str++;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	1c5a      	adds	r2, r3, #1
 8009ddc:	607a      	str	r2, [r7, #4]
 8009dde:	781a      	ldrb	r2, [r3, #0]
 8009de0:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <_Z12wifi_requestPc+0x40>)
 8009de2:	605a      	str	r2, [r3, #4]
		while(!(USART1 -> SR & USART_SR_TC));
 8009de4:	4b08      	ldr	r3, [pc, #32]	; (8009e08 <_Z12wifi_requestPc+0x40>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	bf0c      	ite	eq
 8009df0:	2301      	moveq	r3, #1
 8009df2:	2300      	movne	r3, #0
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0ea      	beq.n	8009dd0 <_Z12wifi_requestPc+0x8>
 8009dfa:	e7f3      	b.n	8009de4 <_Z12wifi_requestPc+0x1c>
	}
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	40011000 	.word	0x40011000

08009e0c <_Z20wifi_command_handler10wifi_cmd_tPv>:
void wifi_command_handler(wifi_cmd_t cmd, void *param){
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	4603      	mov	r3, r0
 8009e14:	6039      	str	r1, [r7, #0]
 8009e16:	71fb      	strb	r3, [r7, #7]
	char *resp_data = (char *)param;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	60fb      	str	r3, [r7, #12]

	switch(cmd){
 8009e1c:	79fb      	ldrb	r3, [r7, #7]
 8009e1e:	2b10      	cmp	r3, #16
 8009e20:	d016      	beq.n	8009e50 <_Z20wifi_command_handler10wifi_cmd_tPv+0x44>
 8009e22:	2b10      	cmp	r3, #16
 8009e24:	dc1a      	bgt.n	8009e5c <_Z20wifi_command_handler10wifi_cmd_tPv+0x50>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d002      	beq.n	8009e30 <_Z20wifi_command_handler10wifi_cmd_tPv+0x24>
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d00a      	beq.n	8009e44 <_Z20wifi_command_handler10wifi_cmd_tPv+0x38>
 8009e2e:	e015      	b.n	8009e5c <_Z20wifi_command_handler10wifi_cmd_tPv+0x50>
		case WIFI_ERR:
			wifiif_state_running(false);
 8009e30:	2000      	movs	r0, #0
 8009e32:	f7fc f913 	bl	800605c <wifiif_state_running>
			LOG_WARN(TAG, "WiFi module error reset.");
 8009e36:	4b0f      	ldr	r3, [pc, #60]	; (8009e74 <_Z20wifi_command_handler10wifi_cmd_tPv+0x68>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	490f      	ldr	r1, [pc, #60]	; (8009e78 <_Z20wifi_command_handler10wifi_cmd_tPv+0x6c>)
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7ff f9df 	bl	8009200 <LOG_WARN>
		break;
 8009e42:	e013      	b.n	8009e6c <_Z20wifi_command_handler10wifi_cmd_tPv+0x60>
		case WIFI_SCAN:
			LOG_INFO("WIFI_CMD_WIFI_SCAN", "%s.", resp_data);
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	490d      	ldr	r1, [pc, #52]	; (8009e7c <_Z20wifi_command_handler10wifi_cmd_tPv+0x70>)
 8009e48:	480d      	ldr	r0, [pc, #52]	; (8009e80 <_Z20wifi_command_handler10wifi_cmd_tPv+0x74>)
 8009e4a:	f7ff f98d 	bl	8009168 <LOG_INFO>
		break;
 8009e4e:	e00d      	b.n	8009e6c <_Z20wifi_command_handler10wifi_cmd_tPv+0x60>
		case WIFI_HTTP_CLIENT_RESPONSE:
			LOG_INFO("HTTP DATA", "%s.", resp_data);
 8009e50:	68fa      	ldr	r2, [r7, #12]
 8009e52:	490a      	ldr	r1, [pc, #40]	; (8009e7c <_Z20wifi_command_handler10wifi_cmd_tPv+0x70>)
 8009e54:	480b      	ldr	r0, [pc, #44]	; (8009e84 <_Z20wifi_command_handler10wifi_cmd_tPv+0x78>)
 8009e56:	f7ff f987 	bl	8009168 <LOG_INFO>
		break;
 8009e5a:	e007      	b.n	8009e6c <_Z20wifi_command_handler10wifi_cmd_tPv+0x60>

		default:
			LOG_INFO(TAG, "WiFi module responded: %s.", resp_data);
 8009e5c:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <_Z20wifi_command_handler10wifi_cmd_tPv+0x68>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68fa      	ldr	r2, [r7, #12]
 8009e62:	4909      	ldr	r1, [pc, #36]	; (8009e88 <_Z20wifi_command_handler10wifi_cmd_tPv+0x7c>)
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff f97f 	bl	8009168 <LOG_INFO>
		break;
 8009e6a:	bf00      	nop
	}
}
 8009e6c:	bf00      	nop
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	200001a0 	.word	0x200001a0
 8009e78:	0800e7a0 	.word	0x0800e7a0
 8009e7c:	0800e7e4 	.word	0x0800e7e4
 8009e80:	0800e7e8 	.word	0x0800e7e8
 8009e84:	0800e7fc 	.word	0x0800e7fc
 8009e88:	0800e808 	.word	0x0800e808

08009e8c <_Z17wifi_uart_handler13usart_event_tPv>:
void wifi_uart_handler(usart_event_t event, void *param){
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
	if(event == (USART_EVENT_IDLE_STATE)){
 8009e98:	79fb      	ldrb	r3, [r7, #7]
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d132      	bne.n	8009f04 <_Z17wifi_uart_handler13usart_event_tPv+0x78>
		char *rxdata;
		stm_ret_t ret = usart1->get_buffer((uint8_t **)&rxdata);
 8009e9e:	4b1b      	ldr	r3, [pc, #108]	; (8009f0c <_Z17wifi_uart_handler13usart_event_tPv+0x80>)
 8009ea0:	6819      	ldr	r1, [r3, #0]
 8009ea2:	f107 030c 	add.w	r3, r7, #12
 8009ea6:	f107 0214 	add.w	r2, r7, #20
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fc86 	bl	80087bc <_ZN5usart10get_bufferEPPh>
		if(!is_oke(&ret)){
 8009eb0:	f107 030c 	add.w	r3, r7, #12
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f7ff fb3b 	bl	8009530 <is_oke>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f083 0301 	eor.w	r3, r3, #1
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d006      	beq.n	8009ed4 <_Z17wifi_uart_handler13usart_event_tPv+0x48>
			LOG_ERROR(TAG, "Can't get UART data.");
 8009ec6:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <_Z17wifi_uart_handler13usart_event_tPv+0x84>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4912      	ldr	r1, [pc, #72]	; (8009f14 <_Z17wifi_uart_handler13usart_event_tPv+0x88>)
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f7ff f9e3 	bl	8009298 <LOG_ERROR>
 8009ed2:	e017      	b.n	8009f04 <_Z17wifi_uart_handler13usart_event_tPv+0x78>
			return;
		}
//		LOG_WARN(TAG, "%s", rxdata);
		if(strcmp(rxdata, "WIFI_RESTART: OK") == 0) wifiif_state_running(false);
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	4910      	ldr	r1, [pc, #64]	; (8009f18 <_Z17wifi_uart_handler13usart_event_tPv+0x8c>)
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f6 f989 	bl	80001f0 <strcmp>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d102      	bne.n	8009eea <_Z17wifi_uart_handler13usart_event_tPv+0x5e>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f7fc f8b9 	bl	800605c <wifiif_state_running>

		wifiif_set_response_state(rxdata);
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7fb ffcd 	bl	8005e8c <wifiif_set_response_state>

		usart1->receive_to_idle_start_it(WF_BUFF_SIZE);
 8009ef2:	4b06      	ldr	r3, [pc, #24]	; (8009f0c <_Z17wifi_uart_handler13usart_event_tPv+0x80>)
 8009ef4:	6819      	ldr	r1, [r3, #0]
 8009ef6:	f107 0318 	add.w	r3, r7, #24
 8009efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fe fc3e 	bl	8008780 <_ZN5usart24receive_to_idle_start_itEt>
	}
}
 8009f04:	3720      	adds	r7, #32
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000074 	.word	0x20000074
 8009f10:	200001a0 	.word	0x200001a0
 8009f14:	0800e824 	.word	0x0800e824
 8009f18:	0800e83c 	.word	0x0800e83c

08009f1c <_Z41__static_initialization_and_destruction_0ii>:
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af04      	add	r7, sp, #16
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	6039      	str	r1, [r7, #0]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d110      	bne.n	8009f4e <_Z41__static_initialization_and_destruction_0ii+0x32>
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d10b      	bne.n	8009f4e <_Z41__static_initialization_and_destruction_0ii+0x32>
sx127x lora(GPIOF, 6, GPIOE, 3, GPIOA, 0);
 8009f36:	2300      	movs	r3, #0
 8009f38:	9302      	str	r3, [sp, #8]
 8009f3a:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8009f3c:	9301      	str	r3, [sp, #4]
 8009f3e:	2303      	movs	r3, #3
 8009f40:	9300      	str	r3, [sp, #0]
 8009f42:	4b06      	ldr	r3, [pc, #24]	; (8009f5c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8009f44:	2206      	movs	r2, #6
 8009f46:	4906      	ldr	r1, [pc, #24]	; (8009f60 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8009f48:	4806      	ldr	r0, [pc, #24]	; (8009f64 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8009f4a:	f7fb fe36 	bl	8005bba <_ZN6sx127xC1EP12GPIO_TypeDeftS1_tS1_t>
}
 8009f4e:	bf00      	nop
 8009f50:	3708      	adds	r7, #8
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	40020000 	.word	0x40020000
 8009f5c:	40021000 	.word	0x40021000
 8009f60:	40021400 	.word	0x40021400
 8009f64:	2000ba84 	.word	0x2000ba84

08009f68 <_GLOBAL__sub_I_spi5_conf>:
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009f70:	2001      	movs	r0, #1
 8009f72:	f7ff ffd3 	bl	8009f1c <_Z41__static_initialization_and_destruction_0ii>
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <_ZdlPvj>:
 8009f78:	f000 b800 	b.w	8009f7c <_ZdlPv>

08009f7c <_ZdlPv>:
 8009f7c:	f000 b89a 	b.w	800a0b4 <free>

08009f80 <ceilf>:
 8009f80:	ee10 3a10 	vmov	r3, s0
 8009f84:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f88:	3a7f      	subs	r2, #127	; 0x7f
 8009f8a:	2a16      	cmp	r2, #22
 8009f8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f90:	dc2a      	bgt.n	8009fe8 <ceilf+0x68>
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	da11      	bge.n	8009fba <ceilf+0x3a>
 8009f96:	eddf 7a19 	vldr	s15, [pc, #100]	; 8009ffc <ceilf+0x7c>
 8009f9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009f9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fa6:	dd05      	ble.n	8009fb4 <ceilf+0x34>
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	db23      	blt.n	8009ff4 <ceilf+0x74>
 8009fac:	2900      	cmp	r1, #0
 8009fae:	bf18      	it	ne
 8009fb0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8009fb4:	ee00 3a10 	vmov	s0, r3
 8009fb8:	4770      	bx	lr
 8009fba:	4911      	ldr	r1, [pc, #68]	; (800a000 <ceilf+0x80>)
 8009fbc:	4111      	asrs	r1, r2
 8009fbe:	420b      	tst	r3, r1
 8009fc0:	d0fa      	beq.n	8009fb8 <ceilf+0x38>
 8009fc2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8009ffc <ceilf+0x7c>
 8009fc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009fca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd2:	ddef      	ble.n	8009fb4 <ceilf+0x34>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bfc2      	ittt	gt
 8009fd8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8009fdc:	fa40 f202 	asrgt.w	r2, r0, r2
 8009fe0:	189b      	addgt	r3, r3, r2
 8009fe2:	ea23 0301 	bic.w	r3, r3, r1
 8009fe6:	e7e5      	b.n	8009fb4 <ceilf+0x34>
 8009fe8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009fec:	d3e4      	bcc.n	8009fb8 <ceilf+0x38>
 8009fee:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ff2:	4770      	bx	lr
 8009ff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ff8:	e7dc      	b.n	8009fb4 <ceilf+0x34>
 8009ffa:	bf00      	nop
 8009ffc:	7149f2ca 	.word	0x7149f2ca
 800a000:	007fffff 	.word	0x007fffff

0800a004 <abort>:
 800a004:	b508      	push	{r3, lr}
 800a006:	2006      	movs	r0, #6
 800a008:	f000 ffa8 	bl	800af5c <raise>
 800a00c:	2001      	movs	r0, #1
 800a00e:	f7f6 ff9b 	bl	8000f48 <_exit>
	...

0800a014 <asiprintf>:
 800a014:	b40e      	push	{r1, r2, r3}
 800a016:	b530      	push	{r4, r5, lr}
 800a018:	b09c      	sub	sp, #112	; 0x70
 800a01a:	ab1f      	add	r3, sp, #124	; 0x7c
 800a01c:	4605      	mov	r5, r0
 800a01e:	490d      	ldr	r1, [pc, #52]	; (800a054 <asiprintf+0x40>)
 800a020:	480d      	ldr	r0, [pc, #52]	; (800a058 <asiprintf+0x44>)
 800a022:	f853 2b04 	ldr.w	r2, [r3], #4
 800a026:	6800      	ldr	r0, [r0, #0]
 800a028:	9301      	str	r3, [sp, #4]
 800a02a:	2400      	movs	r4, #0
 800a02c:	e9cd 1405 	strd	r1, r4, [sp, #20]
 800a030:	a902      	add	r1, sp, #8
 800a032:	9402      	str	r4, [sp, #8]
 800a034:	9404      	str	r4, [sp, #16]
 800a036:	9407      	str	r4, [sp, #28]
 800a038:	f000 f9ee 	bl	800a418 <_svfiprintf_r>
 800a03c:	2800      	cmp	r0, #0
 800a03e:	bfa1      	itttt	ge
 800a040:	9b02      	ldrge	r3, [sp, #8]
 800a042:	701c      	strbge	r4, [r3, #0]
 800a044:	9b06      	ldrge	r3, [sp, #24]
 800a046:	602b      	strge	r3, [r5, #0]
 800a048:	b01c      	add	sp, #112	; 0x70
 800a04a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a04e:	b003      	add	sp, #12
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	ffff0288 	.word	0xffff0288
 800a058:	200001f8 	.word	0x200001f8

0800a05c <__libc_init_array>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	4d0d      	ldr	r5, [pc, #52]	; (800a094 <__libc_init_array+0x38>)
 800a060:	4c0d      	ldr	r4, [pc, #52]	; (800a098 <__libc_init_array+0x3c>)
 800a062:	1b64      	subs	r4, r4, r5
 800a064:	10a4      	asrs	r4, r4, #2
 800a066:	2600      	movs	r6, #0
 800a068:	42a6      	cmp	r6, r4
 800a06a:	d109      	bne.n	800a080 <__libc_init_array+0x24>
 800a06c:	4d0b      	ldr	r5, [pc, #44]	; (800a09c <__libc_init_array+0x40>)
 800a06e:	4c0c      	ldr	r4, [pc, #48]	; (800a0a0 <__libc_init_array+0x44>)
 800a070:	f002 ff62 	bl	800cf38 <_init>
 800a074:	1b64      	subs	r4, r4, r5
 800a076:	10a4      	asrs	r4, r4, #2
 800a078:	2600      	movs	r6, #0
 800a07a:	42a6      	cmp	r6, r4
 800a07c:	d105      	bne.n	800a08a <__libc_init_array+0x2e>
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	f855 3b04 	ldr.w	r3, [r5], #4
 800a084:	4798      	blx	r3
 800a086:	3601      	adds	r6, #1
 800a088:	e7ee      	b.n	800a068 <__libc_init_array+0xc>
 800a08a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a08e:	4798      	blx	r3
 800a090:	3601      	adds	r6, #1
 800a092:	e7f2      	b.n	800a07a <__libc_init_array+0x1e>
 800a094:	0800ec48 	.word	0x0800ec48
 800a098:	0800ec48 	.word	0x0800ec48
 800a09c:	0800ec48 	.word	0x0800ec48
 800a0a0:	0800ec6c 	.word	0x0800ec6c

0800a0a4 <malloc>:
 800a0a4:	4b02      	ldr	r3, [pc, #8]	; (800a0b0 <malloc+0xc>)
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f000 b8e5 	b.w	800a278 <_malloc_r>
 800a0ae:	bf00      	nop
 800a0b0:	200001f8 	.word	0x200001f8

0800a0b4 <free>:
 800a0b4:	4b02      	ldr	r3, [pc, #8]	; (800a0c0 <free+0xc>)
 800a0b6:	4601      	mov	r1, r0
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	f000 b83d 	b.w	800a138 <_free_r>
 800a0be:	bf00      	nop
 800a0c0:	200001f8 	.word	0x200001f8

0800a0c4 <memcpy>:
 800a0c4:	440a      	add	r2, r1
 800a0c6:	4291      	cmp	r1, r2
 800a0c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0cc:	d100      	bne.n	800a0d0 <memcpy+0xc>
 800a0ce:	4770      	bx	lr
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0da:	4291      	cmp	r1, r2
 800a0dc:	d1f9      	bne.n	800a0d2 <memcpy+0xe>
 800a0de:	bd10      	pop	{r4, pc}

0800a0e0 <memmove>:
 800a0e0:	4288      	cmp	r0, r1
 800a0e2:	b510      	push	{r4, lr}
 800a0e4:	eb01 0402 	add.w	r4, r1, r2
 800a0e8:	d902      	bls.n	800a0f0 <memmove+0x10>
 800a0ea:	4284      	cmp	r4, r0
 800a0ec:	4623      	mov	r3, r4
 800a0ee:	d807      	bhi.n	800a100 <memmove+0x20>
 800a0f0:	1e43      	subs	r3, r0, #1
 800a0f2:	42a1      	cmp	r1, r4
 800a0f4:	d008      	beq.n	800a108 <memmove+0x28>
 800a0f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0fe:	e7f8      	b.n	800a0f2 <memmove+0x12>
 800a100:	4402      	add	r2, r0
 800a102:	4601      	mov	r1, r0
 800a104:	428a      	cmp	r2, r1
 800a106:	d100      	bne.n	800a10a <memmove+0x2a>
 800a108:	bd10      	pop	{r4, pc}
 800a10a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a10e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a112:	e7f7      	b.n	800a104 <memmove+0x24>

0800a114 <memset>:
 800a114:	4402      	add	r2, r0
 800a116:	4603      	mov	r3, r0
 800a118:	4293      	cmp	r3, r2
 800a11a:	d100      	bne.n	800a11e <memset+0xa>
 800a11c:	4770      	bx	lr
 800a11e:	f803 1b01 	strb.w	r1, [r3], #1
 800a122:	e7f9      	b.n	800a118 <memset+0x4>

0800a124 <mallinfo>:
 800a124:	b510      	push	{r4, lr}
 800a126:	4b03      	ldr	r3, [pc, #12]	; (800a134 <mallinfo+0x10>)
 800a128:	4604      	mov	r4, r0
 800a12a:	6819      	ldr	r1, [r3, #0]
 800a12c:	f000 f850 	bl	800a1d0 <_mallinfo_r>
 800a130:	4620      	mov	r0, r4
 800a132:	bd10      	pop	{r4, pc}
 800a134:	200001f8 	.word	0x200001f8

0800a138 <_free_r>:
 800a138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13a:	2900      	cmp	r1, #0
 800a13c:	d044      	beq.n	800a1c8 <_free_r+0x90>
 800a13e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a142:	9001      	str	r0, [sp, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	f1a1 0404 	sub.w	r4, r1, #4
 800a14a:	bfb8      	it	lt
 800a14c:	18e4      	addlt	r4, r4, r3
 800a14e:	f001 ff09 	bl	800bf64 <__malloc_lock>
 800a152:	4a1e      	ldr	r2, [pc, #120]	; (800a1cc <_free_r+0x94>)
 800a154:	9801      	ldr	r0, [sp, #4]
 800a156:	6813      	ldr	r3, [r2, #0]
 800a158:	b933      	cbnz	r3, 800a168 <_free_r+0x30>
 800a15a:	6063      	str	r3, [r4, #4]
 800a15c:	6014      	str	r4, [r2, #0]
 800a15e:	b003      	add	sp, #12
 800a160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a164:	f001 bf04 	b.w	800bf70 <__malloc_unlock>
 800a168:	42a3      	cmp	r3, r4
 800a16a:	d908      	bls.n	800a17e <_free_r+0x46>
 800a16c:	6825      	ldr	r5, [r4, #0]
 800a16e:	1961      	adds	r1, r4, r5
 800a170:	428b      	cmp	r3, r1
 800a172:	bf01      	itttt	eq
 800a174:	6819      	ldreq	r1, [r3, #0]
 800a176:	685b      	ldreq	r3, [r3, #4]
 800a178:	1949      	addeq	r1, r1, r5
 800a17a:	6021      	streq	r1, [r4, #0]
 800a17c:	e7ed      	b.n	800a15a <_free_r+0x22>
 800a17e:	461a      	mov	r2, r3
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	b10b      	cbz	r3, 800a188 <_free_r+0x50>
 800a184:	42a3      	cmp	r3, r4
 800a186:	d9fa      	bls.n	800a17e <_free_r+0x46>
 800a188:	6811      	ldr	r1, [r2, #0]
 800a18a:	1855      	adds	r5, r2, r1
 800a18c:	42a5      	cmp	r5, r4
 800a18e:	d10b      	bne.n	800a1a8 <_free_r+0x70>
 800a190:	6824      	ldr	r4, [r4, #0]
 800a192:	4421      	add	r1, r4
 800a194:	1854      	adds	r4, r2, r1
 800a196:	42a3      	cmp	r3, r4
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	d1e0      	bne.n	800a15e <_free_r+0x26>
 800a19c:	681c      	ldr	r4, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	6053      	str	r3, [r2, #4]
 800a1a2:	4421      	add	r1, r4
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	e7da      	b.n	800a15e <_free_r+0x26>
 800a1a8:	d902      	bls.n	800a1b0 <_free_r+0x78>
 800a1aa:	230c      	movs	r3, #12
 800a1ac:	6003      	str	r3, [r0, #0]
 800a1ae:	e7d6      	b.n	800a15e <_free_r+0x26>
 800a1b0:	6825      	ldr	r5, [r4, #0]
 800a1b2:	1961      	adds	r1, r4, r5
 800a1b4:	428b      	cmp	r3, r1
 800a1b6:	bf04      	itt	eq
 800a1b8:	6819      	ldreq	r1, [r3, #0]
 800a1ba:	685b      	ldreq	r3, [r3, #4]
 800a1bc:	6063      	str	r3, [r4, #4]
 800a1be:	bf04      	itt	eq
 800a1c0:	1949      	addeq	r1, r1, r5
 800a1c2:	6021      	streq	r1, [r4, #0]
 800a1c4:	6054      	str	r4, [r2, #4]
 800a1c6:	e7ca      	b.n	800a15e <_free_r+0x26>
 800a1c8:	b003      	add	sp, #12
 800a1ca:	bd30      	pop	{r4, r5, pc}
 800a1cc:	2000bad8 	.word	0x2000bad8

0800a1d0 <_mallinfo_r>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	4c16      	ldr	r4, [pc, #88]	; (800a22c <_mallinfo_r+0x5c>)
 800a1d4:	4605      	mov	r5, r0
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	460e      	mov	r6, r1
 800a1da:	f001 fec3 	bl	800bf64 <__malloc_lock>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	b143      	cbz	r3, 800a1f4 <_mallinfo_r+0x24>
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 fe81 	bl	800aeec <_sbrk_r>
 800a1ea:	1c42      	adds	r2, r0, #1
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	bf1c      	itt	ne
 800a1f0:	6820      	ldrne	r0, [r4, #0]
 800a1f2:	1a1b      	subne	r3, r3, r0
 800a1f4:	4a0e      	ldr	r2, [pc, #56]	; (800a230 <_mallinfo_r+0x60>)
 800a1f6:	6812      	ldr	r2, [r2, #0]
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	b992      	cbnz	r2, 800a222 <_mallinfo_r+0x52>
 800a1fc:	4c0d      	ldr	r4, [pc, #52]	; (800a234 <_mallinfo_r+0x64>)
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	6220      	str	r0, [r4, #32]
 800a202:	1a1b      	subs	r3, r3, r0
 800a204:	4630      	mov	r0, r6
 800a206:	61e3      	str	r3, [r4, #28]
 800a208:	f001 feb2 	bl	800bf70 <__malloc_unlock>
 800a20c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a20e:	462e      	mov	r6, r5
 800a210:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a214:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a21a:	e886 0003 	stmia.w	r6, {r0, r1}
 800a21e:	4628      	mov	r0, r5
 800a220:	bd70      	pop	{r4, r5, r6, pc}
 800a222:	6811      	ldr	r1, [r2, #0]
 800a224:	6852      	ldr	r2, [r2, #4]
 800a226:	4408      	add	r0, r1
 800a228:	e7e7      	b.n	800a1fa <_mallinfo_r+0x2a>
 800a22a:	bf00      	nop
 800a22c:	2000badc 	.word	0x2000badc
 800a230:	2000bad8 	.word	0x2000bad8
 800a234:	2000bab0 	.word	0x2000bab0

0800a238 <sbrk_aligned>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	4e0e      	ldr	r6, [pc, #56]	; (800a274 <sbrk_aligned+0x3c>)
 800a23c:	460c      	mov	r4, r1
 800a23e:	6831      	ldr	r1, [r6, #0]
 800a240:	4605      	mov	r5, r0
 800a242:	b911      	cbnz	r1, 800a24a <sbrk_aligned+0x12>
 800a244:	f000 fe52 	bl	800aeec <_sbrk_r>
 800a248:	6030      	str	r0, [r6, #0]
 800a24a:	4621      	mov	r1, r4
 800a24c:	4628      	mov	r0, r5
 800a24e:	f000 fe4d 	bl	800aeec <_sbrk_r>
 800a252:	1c43      	adds	r3, r0, #1
 800a254:	d00a      	beq.n	800a26c <sbrk_aligned+0x34>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d007      	beq.n	800a270 <sbrk_aligned+0x38>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fe42 	bl	800aeec <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d101      	bne.n	800a270 <sbrk_aligned+0x38>
 800a26c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a270:	4620      	mov	r0, r4
 800a272:	bd70      	pop	{r4, r5, r6, pc}
 800a274:	2000badc 	.word	0x2000badc

0800a278 <_malloc_r>:
 800a278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	1ccd      	adds	r5, r1, #3
 800a27e:	f025 0503 	bic.w	r5, r5, #3
 800a282:	3508      	adds	r5, #8
 800a284:	2d0c      	cmp	r5, #12
 800a286:	bf38      	it	cc
 800a288:	250c      	movcc	r5, #12
 800a28a:	2d00      	cmp	r5, #0
 800a28c:	4607      	mov	r7, r0
 800a28e:	db01      	blt.n	800a294 <_malloc_r+0x1c>
 800a290:	42a9      	cmp	r1, r5
 800a292:	d905      	bls.n	800a2a0 <_malloc_r+0x28>
 800a294:	230c      	movs	r3, #12
 800a296:	603b      	str	r3, [r7, #0]
 800a298:	2600      	movs	r6, #0
 800a29a:	4630      	mov	r0, r6
 800a29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2a0:	4e2e      	ldr	r6, [pc, #184]	; (800a35c <_malloc_r+0xe4>)
 800a2a2:	f001 fe5f 	bl	800bf64 <__malloc_lock>
 800a2a6:	6833      	ldr	r3, [r6, #0]
 800a2a8:	461c      	mov	r4, r3
 800a2aa:	bb34      	cbnz	r4, 800a2fa <_malloc_r+0x82>
 800a2ac:	4629      	mov	r1, r5
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	f7ff ffc2 	bl	800a238 <sbrk_aligned>
 800a2b4:	1c43      	adds	r3, r0, #1
 800a2b6:	4604      	mov	r4, r0
 800a2b8:	d14d      	bne.n	800a356 <_malloc_r+0xde>
 800a2ba:	6834      	ldr	r4, [r6, #0]
 800a2bc:	4626      	mov	r6, r4
 800a2be:	2e00      	cmp	r6, #0
 800a2c0:	d140      	bne.n	800a344 <_malloc_r+0xcc>
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	4631      	mov	r1, r6
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	eb04 0803 	add.w	r8, r4, r3
 800a2cc:	f000 fe0e 	bl	800aeec <_sbrk_r>
 800a2d0:	4580      	cmp	r8, r0
 800a2d2:	d13a      	bne.n	800a34a <_malloc_r+0xd2>
 800a2d4:	6821      	ldr	r1, [r4, #0]
 800a2d6:	3503      	adds	r5, #3
 800a2d8:	1a6d      	subs	r5, r5, r1
 800a2da:	f025 0503 	bic.w	r5, r5, #3
 800a2de:	3508      	adds	r5, #8
 800a2e0:	2d0c      	cmp	r5, #12
 800a2e2:	bf38      	it	cc
 800a2e4:	250c      	movcc	r5, #12
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7ff ffa5 	bl	800a238 <sbrk_aligned>
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d02b      	beq.n	800a34a <_malloc_r+0xd2>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	442b      	add	r3, r5
 800a2f6:	6023      	str	r3, [r4, #0]
 800a2f8:	e00e      	b.n	800a318 <_malloc_r+0xa0>
 800a2fa:	6822      	ldr	r2, [r4, #0]
 800a2fc:	1b52      	subs	r2, r2, r5
 800a2fe:	d41e      	bmi.n	800a33e <_malloc_r+0xc6>
 800a300:	2a0b      	cmp	r2, #11
 800a302:	d916      	bls.n	800a332 <_malloc_r+0xba>
 800a304:	1961      	adds	r1, r4, r5
 800a306:	42a3      	cmp	r3, r4
 800a308:	6025      	str	r5, [r4, #0]
 800a30a:	bf18      	it	ne
 800a30c:	6059      	strne	r1, [r3, #4]
 800a30e:	6863      	ldr	r3, [r4, #4]
 800a310:	bf08      	it	eq
 800a312:	6031      	streq	r1, [r6, #0]
 800a314:	5162      	str	r2, [r4, r5]
 800a316:	604b      	str	r3, [r1, #4]
 800a318:	4638      	mov	r0, r7
 800a31a:	f104 060b 	add.w	r6, r4, #11
 800a31e:	f001 fe27 	bl	800bf70 <__malloc_unlock>
 800a322:	f026 0607 	bic.w	r6, r6, #7
 800a326:	1d23      	adds	r3, r4, #4
 800a328:	1af2      	subs	r2, r6, r3
 800a32a:	d0b6      	beq.n	800a29a <_malloc_r+0x22>
 800a32c:	1b9b      	subs	r3, r3, r6
 800a32e:	50a3      	str	r3, [r4, r2]
 800a330:	e7b3      	b.n	800a29a <_malloc_r+0x22>
 800a332:	6862      	ldr	r2, [r4, #4]
 800a334:	42a3      	cmp	r3, r4
 800a336:	bf0c      	ite	eq
 800a338:	6032      	streq	r2, [r6, #0]
 800a33a:	605a      	strne	r2, [r3, #4]
 800a33c:	e7ec      	b.n	800a318 <_malloc_r+0xa0>
 800a33e:	4623      	mov	r3, r4
 800a340:	6864      	ldr	r4, [r4, #4]
 800a342:	e7b2      	b.n	800a2aa <_malloc_r+0x32>
 800a344:	4634      	mov	r4, r6
 800a346:	6876      	ldr	r6, [r6, #4]
 800a348:	e7b9      	b.n	800a2be <_malloc_r+0x46>
 800a34a:	230c      	movs	r3, #12
 800a34c:	603b      	str	r3, [r7, #0]
 800a34e:	4638      	mov	r0, r7
 800a350:	f001 fe0e 	bl	800bf70 <__malloc_unlock>
 800a354:	e7a1      	b.n	800a29a <_malloc_r+0x22>
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	e7de      	b.n	800a318 <_malloc_r+0xa0>
 800a35a:	bf00      	nop
 800a35c:	2000bad8 	.word	0x2000bad8

0800a360 <__ssputs_r>:
 800a360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a364:	688e      	ldr	r6, [r1, #8]
 800a366:	429e      	cmp	r6, r3
 800a368:	4682      	mov	sl, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	4690      	mov	r8, r2
 800a36e:	461f      	mov	r7, r3
 800a370:	d838      	bhi.n	800a3e4 <__ssputs_r+0x84>
 800a372:	898a      	ldrh	r2, [r1, #12]
 800a374:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a378:	d032      	beq.n	800a3e0 <__ssputs_r+0x80>
 800a37a:	6825      	ldr	r5, [r4, #0]
 800a37c:	6909      	ldr	r1, [r1, #16]
 800a37e:	eba5 0901 	sub.w	r9, r5, r1
 800a382:	6965      	ldr	r5, [r4, #20]
 800a384:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a38c:	3301      	adds	r3, #1
 800a38e:	444b      	add	r3, r9
 800a390:	106d      	asrs	r5, r5, #1
 800a392:	429d      	cmp	r5, r3
 800a394:	bf38      	it	cc
 800a396:	461d      	movcc	r5, r3
 800a398:	0553      	lsls	r3, r2, #21
 800a39a:	d531      	bpl.n	800a400 <__ssputs_r+0xa0>
 800a39c:	4629      	mov	r1, r5
 800a39e:	f7ff ff6b 	bl	800a278 <_malloc_r>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	b950      	cbnz	r0, 800a3bc <__ssputs_r+0x5c>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	f8ca 3000 	str.w	r3, [sl]
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3b2:	81a3      	strh	r3, [r4, #12]
 800a3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3bc:	6921      	ldr	r1, [r4, #16]
 800a3be:	464a      	mov	r2, r9
 800a3c0:	f7ff fe80 	bl	800a0c4 <memcpy>
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3ce:	81a3      	strh	r3, [r4, #12]
 800a3d0:	6126      	str	r6, [r4, #16]
 800a3d2:	6165      	str	r5, [r4, #20]
 800a3d4:	444e      	add	r6, r9
 800a3d6:	eba5 0509 	sub.w	r5, r5, r9
 800a3da:	6026      	str	r6, [r4, #0]
 800a3dc:	60a5      	str	r5, [r4, #8]
 800a3de:	463e      	mov	r6, r7
 800a3e0:	42be      	cmp	r6, r7
 800a3e2:	d900      	bls.n	800a3e6 <__ssputs_r+0x86>
 800a3e4:	463e      	mov	r6, r7
 800a3e6:	6820      	ldr	r0, [r4, #0]
 800a3e8:	4632      	mov	r2, r6
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	f7ff fe78 	bl	800a0e0 <memmove>
 800a3f0:	68a3      	ldr	r3, [r4, #8]
 800a3f2:	1b9b      	subs	r3, r3, r6
 800a3f4:	60a3      	str	r3, [r4, #8]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	4433      	add	r3, r6
 800a3fa:	6023      	str	r3, [r4, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e7db      	b.n	800a3b8 <__ssputs_r+0x58>
 800a400:	462a      	mov	r2, r5
 800a402:	f002 f955 	bl	800c6b0 <_realloc_r>
 800a406:	4606      	mov	r6, r0
 800a408:	2800      	cmp	r0, #0
 800a40a:	d1e1      	bne.n	800a3d0 <__ssputs_r+0x70>
 800a40c:	6921      	ldr	r1, [r4, #16]
 800a40e:	4650      	mov	r0, sl
 800a410:	f7ff fe92 	bl	800a138 <_free_r>
 800a414:	e7c7      	b.n	800a3a6 <__ssputs_r+0x46>
	...

0800a418 <_svfiprintf_r>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	4698      	mov	r8, r3
 800a41e:	898b      	ldrh	r3, [r1, #12]
 800a420:	061b      	lsls	r3, r3, #24
 800a422:	b09d      	sub	sp, #116	; 0x74
 800a424:	4607      	mov	r7, r0
 800a426:	460d      	mov	r5, r1
 800a428:	4614      	mov	r4, r2
 800a42a:	d50e      	bpl.n	800a44a <_svfiprintf_r+0x32>
 800a42c:	690b      	ldr	r3, [r1, #16]
 800a42e:	b963      	cbnz	r3, 800a44a <_svfiprintf_r+0x32>
 800a430:	2140      	movs	r1, #64	; 0x40
 800a432:	f7ff ff21 	bl	800a278 <_malloc_r>
 800a436:	6028      	str	r0, [r5, #0]
 800a438:	6128      	str	r0, [r5, #16]
 800a43a:	b920      	cbnz	r0, 800a446 <_svfiprintf_r+0x2e>
 800a43c:	230c      	movs	r3, #12
 800a43e:	603b      	str	r3, [r7, #0]
 800a440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a444:	e0d1      	b.n	800a5ea <_svfiprintf_r+0x1d2>
 800a446:	2340      	movs	r3, #64	; 0x40
 800a448:	616b      	str	r3, [r5, #20]
 800a44a:	2300      	movs	r3, #0
 800a44c:	9309      	str	r3, [sp, #36]	; 0x24
 800a44e:	2320      	movs	r3, #32
 800a450:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a454:	f8cd 800c 	str.w	r8, [sp, #12]
 800a458:	2330      	movs	r3, #48	; 0x30
 800a45a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a604 <_svfiprintf_r+0x1ec>
 800a45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a462:	f04f 0901 	mov.w	r9, #1
 800a466:	4623      	mov	r3, r4
 800a468:	469a      	mov	sl, r3
 800a46a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a46e:	b10a      	cbz	r2, 800a474 <_svfiprintf_r+0x5c>
 800a470:	2a25      	cmp	r2, #37	; 0x25
 800a472:	d1f9      	bne.n	800a468 <_svfiprintf_r+0x50>
 800a474:	ebba 0b04 	subs.w	fp, sl, r4
 800a478:	d00b      	beq.n	800a492 <_svfiprintf_r+0x7a>
 800a47a:	465b      	mov	r3, fp
 800a47c:	4622      	mov	r2, r4
 800a47e:	4629      	mov	r1, r5
 800a480:	4638      	mov	r0, r7
 800a482:	f7ff ff6d 	bl	800a360 <__ssputs_r>
 800a486:	3001      	adds	r0, #1
 800a488:	f000 80aa 	beq.w	800a5e0 <_svfiprintf_r+0x1c8>
 800a48c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a48e:	445a      	add	r2, fp
 800a490:	9209      	str	r2, [sp, #36]	; 0x24
 800a492:	f89a 3000 	ldrb.w	r3, [sl]
 800a496:	2b00      	cmp	r3, #0
 800a498:	f000 80a2 	beq.w	800a5e0 <_svfiprintf_r+0x1c8>
 800a49c:	2300      	movs	r3, #0
 800a49e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4a6:	f10a 0a01 	add.w	sl, sl, #1
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	9307      	str	r3, [sp, #28]
 800a4ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b2:	931a      	str	r3, [sp, #104]	; 0x68
 800a4b4:	4654      	mov	r4, sl
 800a4b6:	2205      	movs	r2, #5
 800a4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4bc:	4851      	ldr	r0, [pc, #324]	; (800a604 <_svfiprintf_r+0x1ec>)
 800a4be:	f7f5 feaf 	bl	8000220 <memchr>
 800a4c2:	9a04      	ldr	r2, [sp, #16]
 800a4c4:	b9d8      	cbnz	r0, 800a4fe <_svfiprintf_r+0xe6>
 800a4c6:	06d0      	lsls	r0, r2, #27
 800a4c8:	bf44      	itt	mi
 800a4ca:	2320      	movmi	r3, #32
 800a4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d0:	0711      	lsls	r1, r2, #28
 800a4d2:	bf44      	itt	mi
 800a4d4:	232b      	movmi	r3, #43	; 0x2b
 800a4d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4da:	f89a 3000 	ldrb.w	r3, [sl]
 800a4de:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e0:	d015      	beq.n	800a50e <_svfiprintf_r+0xf6>
 800a4e2:	9a07      	ldr	r2, [sp, #28]
 800a4e4:	4654      	mov	r4, sl
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	f04f 0c0a 	mov.w	ip, #10
 800a4ec:	4621      	mov	r1, r4
 800a4ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f2:	3b30      	subs	r3, #48	; 0x30
 800a4f4:	2b09      	cmp	r3, #9
 800a4f6:	d94e      	bls.n	800a596 <_svfiprintf_r+0x17e>
 800a4f8:	b1b0      	cbz	r0, 800a528 <_svfiprintf_r+0x110>
 800a4fa:	9207      	str	r2, [sp, #28]
 800a4fc:	e014      	b.n	800a528 <_svfiprintf_r+0x110>
 800a4fe:	eba0 0308 	sub.w	r3, r0, r8
 800a502:	fa09 f303 	lsl.w	r3, r9, r3
 800a506:	4313      	orrs	r3, r2
 800a508:	9304      	str	r3, [sp, #16]
 800a50a:	46a2      	mov	sl, r4
 800a50c:	e7d2      	b.n	800a4b4 <_svfiprintf_r+0x9c>
 800a50e:	9b03      	ldr	r3, [sp, #12]
 800a510:	1d19      	adds	r1, r3, #4
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	9103      	str	r1, [sp, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	bfbb      	ittet	lt
 800a51a:	425b      	neglt	r3, r3
 800a51c:	f042 0202 	orrlt.w	r2, r2, #2
 800a520:	9307      	strge	r3, [sp, #28]
 800a522:	9307      	strlt	r3, [sp, #28]
 800a524:	bfb8      	it	lt
 800a526:	9204      	strlt	r2, [sp, #16]
 800a528:	7823      	ldrb	r3, [r4, #0]
 800a52a:	2b2e      	cmp	r3, #46	; 0x2e
 800a52c:	d10c      	bne.n	800a548 <_svfiprintf_r+0x130>
 800a52e:	7863      	ldrb	r3, [r4, #1]
 800a530:	2b2a      	cmp	r3, #42	; 0x2a
 800a532:	d135      	bne.n	800a5a0 <_svfiprintf_r+0x188>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	9203      	str	r2, [sp, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	bfb8      	it	lt
 800a540:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a544:	3402      	adds	r4, #2
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a614 <_svfiprintf_r+0x1fc>
 800a54c:	7821      	ldrb	r1, [r4, #0]
 800a54e:	2203      	movs	r2, #3
 800a550:	4650      	mov	r0, sl
 800a552:	f7f5 fe65 	bl	8000220 <memchr>
 800a556:	b140      	cbz	r0, 800a56a <_svfiprintf_r+0x152>
 800a558:	2340      	movs	r3, #64	; 0x40
 800a55a:	eba0 000a 	sub.w	r0, r0, sl
 800a55e:	fa03 f000 	lsl.w	r0, r3, r0
 800a562:	9b04      	ldr	r3, [sp, #16]
 800a564:	4303      	orrs	r3, r0
 800a566:	3401      	adds	r4, #1
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56e:	4826      	ldr	r0, [pc, #152]	; (800a608 <_svfiprintf_r+0x1f0>)
 800a570:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a574:	2206      	movs	r2, #6
 800a576:	f7f5 fe53 	bl	8000220 <memchr>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d038      	beq.n	800a5f0 <_svfiprintf_r+0x1d8>
 800a57e:	4b23      	ldr	r3, [pc, #140]	; (800a60c <_svfiprintf_r+0x1f4>)
 800a580:	bb1b      	cbnz	r3, 800a5ca <_svfiprintf_r+0x1b2>
 800a582:	9b03      	ldr	r3, [sp, #12]
 800a584:	3307      	adds	r3, #7
 800a586:	f023 0307 	bic.w	r3, r3, #7
 800a58a:	3308      	adds	r3, #8
 800a58c:	9303      	str	r3, [sp, #12]
 800a58e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a590:	4433      	add	r3, r6
 800a592:	9309      	str	r3, [sp, #36]	; 0x24
 800a594:	e767      	b.n	800a466 <_svfiprintf_r+0x4e>
 800a596:	fb0c 3202 	mla	r2, ip, r2, r3
 800a59a:	460c      	mov	r4, r1
 800a59c:	2001      	movs	r0, #1
 800a59e:	e7a5      	b.n	800a4ec <_svfiprintf_r+0xd4>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	3401      	adds	r4, #1
 800a5a4:	9305      	str	r3, [sp, #20]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	f04f 0c0a 	mov.w	ip, #10
 800a5ac:	4620      	mov	r0, r4
 800a5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b2:	3a30      	subs	r2, #48	; 0x30
 800a5b4:	2a09      	cmp	r2, #9
 800a5b6:	d903      	bls.n	800a5c0 <_svfiprintf_r+0x1a8>
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0c5      	beq.n	800a548 <_svfiprintf_r+0x130>
 800a5bc:	9105      	str	r1, [sp, #20]
 800a5be:	e7c3      	b.n	800a548 <_svfiprintf_r+0x130>
 800a5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e7f0      	b.n	800a5ac <_svfiprintf_r+0x194>
 800a5ca:	ab03      	add	r3, sp, #12
 800a5cc:	9300      	str	r3, [sp, #0]
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	4b0f      	ldr	r3, [pc, #60]	; (800a610 <_svfiprintf_r+0x1f8>)
 800a5d2:	a904      	add	r1, sp, #16
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	f000 f8bf 	bl	800a758 <_printf_float>
 800a5da:	1c42      	adds	r2, r0, #1
 800a5dc:	4606      	mov	r6, r0
 800a5de:	d1d6      	bne.n	800a58e <_svfiprintf_r+0x176>
 800a5e0:	89ab      	ldrh	r3, [r5, #12]
 800a5e2:	065b      	lsls	r3, r3, #25
 800a5e4:	f53f af2c 	bmi.w	800a440 <_svfiprintf_r+0x28>
 800a5e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ea:	b01d      	add	sp, #116	; 0x74
 800a5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f0:	ab03      	add	r3, sp, #12
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	4b06      	ldr	r3, [pc, #24]	; (800a610 <_svfiprintf_r+0x1f8>)
 800a5f8:	a904      	add	r1, sp, #16
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f000 fb50 	bl	800aca0 <_printf_i>
 800a600:	e7eb      	b.n	800a5da <_svfiprintf_r+0x1c2>
 800a602:	bf00      	nop
 800a604:	0800e970 	.word	0x0800e970
 800a608:	0800e97a 	.word	0x0800e97a
 800a60c:	0800a759 	.word	0x0800a759
 800a610:	0800a361 	.word	0x0800a361
 800a614:	0800e976 	.word	0x0800e976

0800a618 <__cvt>:
 800a618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a61c:	ec55 4b10 	vmov	r4, r5, d0
 800a620:	2d00      	cmp	r5, #0
 800a622:	460e      	mov	r6, r1
 800a624:	4619      	mov	r1, r3
 800a626:	462b      	mov	r3, r5
 800a628:	bfbb      	ittet	lt
 800a62a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a62e:	461d      	movlt	r5, r3
 800a630:	2300      	movge	r3, #0
 800a632:	232d      	movlt	r3, #45	; 0x2d
 800a634:	700b      	strb	r3, [r1, #0]
 800a636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a63c:	4691      	mov	r9, r2
 800a63e:	f023 0820 	bic.w	r8, r3, #32
 800a642:	bfbc      	itt	lt
 800a644:	4622      	movlt	r2, r4
 800a646:	4614      	movlt	r4, r2
 800a648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a64c:	d005      	beq.n	800a65a <__cvt+0x42>
 800a64e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a652:	d100      	bne.n	800a656 <__cvt+0x3e>
 800a654:	3601      	adds	r6, #1
 800a656:	2102      	movs	r1, #2
 800a658:	e000      	b.n	800a65c <__cvt+0x44>
 800a65a:	2103      	movs	r1, #3
 800a65c:	ab03      	add	r3, sp, #12
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	ab02      	add	r3, sp, #8
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	ec45 4b10 	vmov	d0, r4, r5
 800a668:	4653      	mov	r3, sl
 800a66a:	4632      	mov	r2, r6
 800a66c:	f000 fd7c 	bl	800b168 <_dtoa_r>
 800a670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a674:	4607      	mov	r7, r0
 800a676:	d102      	bne.n	800a67e <__cvt+0x66>
 800a678:	f019 0f01 	tst.w	r9, #1
 800a67c:	d022      	beq.n	800a6c4 <__cvt+0xac>
 800a67e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a682:	eb07 0906 	add.w	r9, r7, r6
 800a686:	d110      	bne.n	800a6aa <__cvt+0x92>
 800a688:	783b      	ldrb	r3, [r7, #0]
 800a68a:	2b30      	cmp	r3, #48	; 0x30
 800a68c:	d10a      	bne.n	800a6a4 <__cvt+0x8c>
 800a68e:	2200      	movs	r2, #0
 800a690:	2300      	movs	r3, #0
 800a692:	4620      	mov	r0, r4
 800a694:	4629      	mov	r1, r5
 800a696:	f7f6 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800a69a:	b918      	cbnz	r0, 800a6a4 <__cvt+0x8c>
 800a69c:	f1c6 0601 	rsb	r6, r6, #1
 800a6a0:	f8ca 6000 	str.w	r6, [sl]
 800a6a4:	f8da 3000 	ldr.w	r3, [sl]
 800a6a8:	4499      	add	r9, r3
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	4620      	mov	r0, r4
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	f7f6 fa29 	bl	8000b08 <__aeabi_dcmpeq>
 800a6b6:	b108      	cbz	r0, 800a6bc <__cvt+0xa4>
 800a6b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6bc:	2230      	movs	r2, #48	; 0x30
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	454b      	cmp	r3, r9
 800a6c2:	d307      	bcc.n	800a6d4 <__cvt+0xbc>
 800a6c4:	9b03      	ldr	r3, [sp, #12]
 800a6c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6c8:	1bdb      	subs	r3, r3, r7
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	b004      	add	sp, #16
 800a6d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d4:	1c59      	adds	r1, r3, #1
 800a6d6:	9103      	str	r1, [sp, #12]
 800a6d8:	701a      	strb	r2, [r3, #0]
 800a6da:	e7f0      	b.n	800a6be <__cvt+0xa6>

0800a6dc <__exponent>:
 800a6dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2900      	cmp	r1, #0
 800a6e2:	bfb8      	it	lt
 800a6e4:	4249      	neglt	r1, r1
 800a6e6:	f803 2b02 	strb.w	r2, [r3], #2
 800a6ea:	bfb4      	ite	lt
 800a6ec:	222d      	movlt	r2, #45	; 0x2d
 800a6ee:	222b      	movge	r2, #43	; 0x2b
 800a6f0:	2909      	cmp	r1, #9
 800a6f2:	7042      	strb	r2, [r0, #1]
 800a6f4:	dd2a      	ble.n	800a74c <__exponent+0x70>
 800a6f6:	f10d 0407 	add.w	r4, sp, #7
 800a6fa:	46a4      	mov	ip, r4
 800a6fc:	270a      	movs	r7, #10
 800a6fe:	46a6      	mov	lr, r4
 800a700:	460a      	mov	r2, r1
 800a702:	fb91 f6f7 	sdiv	r6, r1, r7
 800a706:	fb07 1516 	mls	r5, r7, r6, r1
 800a70a:	3530      	adds	r5, #48	; 0x30
 800a70c:	2a63      	cmp	r2, #99	; 0x63
 800a70e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a716:	4631      	mov	r1, r6
 800a718:	dcf1      	bgt.n	800a6fe <__exponent+0x22>
 800a71a:	3130      	adds	r1, #48	; 0x30
 800a71c:	f1ae 0502 	sub.w	r5, lr, #2
 800a720:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a724:	1c44      	adds	r4, r0, #1
 800a726:	4629      	mov	r1, r5
 800a728:	4561      	cmp	r1, ip
 800a72a:	d30a      	bcc.n	800a742 <__exponent+0x66>
 800a72c:	f10d 0209 	add.w	r2, sp, #9
 800a730:	eba2 020e 	sub.w	r2, r2, lr
 800a734:	4565      	cmp	r5, ip
 800a736:	bf88      	it	hi
 800a738:	2200      	movhi	r2, #0
 800a73a:	4413      	add	r3, r2
 800a73c:	1a18      	subs	r0, r3, r0
 800a73e:	b003      	add	sp, #12
 800a740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a74a:	e7ed      	b.n	800a728 <__exponent+0x4c>
 800a74c:	2330      	movs	r3, #48	; 0x30
 800a74e:	3130      	adds	r1, #48	; 0x30
 800a750:	7083      	strb	r3, [r0, #2]
 800a752:	70c1      	strb	r1, [r0, #3]
 800a754:	1d03      	adds	r3, r0, #4
 800a756:	e7f1      	b.n	800a73c <__exponent+0x60>

0800a758 <_printf_float>:
 800a758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a75c:	ed2d 8b02 	vpush	{d8}
 800a760:	b08d      	sub	sp, #52	; 0x34
 800a762:	460c      	mov	r4, r1
 800a764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a768:	4616      	mov	r6, r2
 800a76a:	461f      	mov	r7, r3
 800a76c:	4605      	mov	r5, r0
 800a76e:	f001 fbf1 	bl	800bf54 <_localeconv_r>
 800a772:	f8d0 a000 	ldr.w	sl, [r0]
 800a776:	4650      	mov	r0, sl
 800a778:	f7f5 fd44 	bl	8000204 <strlen>
 800a77c:	2300      	movs	r3, #0
 800a77e:	930a      	str	r3, [sp, #40]	; 0x28
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	f8d8 3000 	ldr.w	r3, [r8]
 800a788:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a78c:	3307      	adds	r3, #7
 800a78e:	f023 0307 	bic.w	r3, r3, #7
 800a792:	f103 0208 	add.w	r2, r3, #8
 800a796:	f8c8 2000 	str.w	r2, [r8]
 800a79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7aa:	9307      	str	r3, [sp, #28]
 800a7ac:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7b0:	ee08 0a10 	vmov	s16, r0
 800a7b4:	4b9f      	ldr	r3, [pc, #636]	; (800aa34 <_printf_float+0x2dc>)
 800a7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7be:	f7f6 f9d5 	bl	8000b6c <__aeabi_dcmpun>
 800a7c2:	bb88      	cbnz	r0, 800a828 <_printf_float+0xd0>
 800a7c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7c8:	4b9a      	ldr	r3, [pc, #616]	; (800aa34 <_printf_float+0x2dc>)
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7ce:	f7f6 f9af 	bl	8000b30 <__aeabi_dcmple>
 800a7d2:	bb48      	cbnz	r0, 800a828 <_printf_float+0xd0>
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4640      	mov	r0, r8
 800a7da:	4649      	mov	r1, r9
 800a7dc:	f7f6 f99e 	bl	8000b1c <__aeabi_dcmplt>
 800a7e0:	b110      	cbz	r0, 800a7e8 <_printf_float+0x90>
 800a7e2:	232d      	movs	r3, #45	; 0x2d
 800a7e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7e8:	4b93      	ldr	r3, [pc, #588]	; (800aa38 <_printf_float+0x2e0>)
 800a7ea:	4894      	ldr	r0, [pc, #592]	; (800aa3c <_printf_float+0x2e4>)
 800a7ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7f0:	bf94      	ite	ls
 800a7f2:	4698      	movls	r8, r3
 800a7f4:	4680      	movhi	r8, r0
 800a7f6:	2303      	movs	r3, #3
 800a7f8:	6123      	str	r3, [r4, #16]
 800a7fa:	9b05      	ldr	r3, [sp, #20]
 800a7fc:	f023 0204 	bic.w	r2, r3, #4
 800a800:	6022      	str	r2, [r4, #0]
 800a802:	f04f 0900 	mov.w	r9, #0
 800a806:	9700      	str	r7, [sp, #0]
 800a808:	4633      	mov	r3, r6
 800a80a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a80c:	4621      	mov	r1, r4
 800a80e:	4628      	mov	r0, r5
 800a810:	f000 f9d8 	bl	800abc4 <_printf_common>
 800a814:	3001      	adds	r0, #1
 800a816:	f040 8090 	bne.w	800a93a <_printf_float+0x1e2>
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a81e:	b00d      	add	sp, #52	; 0x34
 800a820:	ecbd 8b02 	vpop	{d8}
 800a824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a828:	4642      	mov	r2, r8
 800a82a:	464b      	mov	r3, r9
 800a82c:	4640      	mov	r0, r8
 800a82e:	4649      	mov	r1, r9
 800a830:	f7f6 f99c 	bl	8000b6c <__aeabi_dcmpun>
 800a834:	b140      	cbz	r0, 800a848 <_printf_float+0xf0>
 800a836:	464b      	mov	r3, r9
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bfbc      	itt	lt
 800a83c:	232d      	movlt	r3, #45	; 0x2d
 800a83e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a842:	487f      	ldr	r0, [pc, #508]	; (800aa40 <_printf_float+0x2e8>)
 800a844:	4b7f      	ldr	r3, [pc, #508]	; (800aa44 <_printf_float+0x2ec>)
 800a846:	e7d1      	b.n	800a7ec <_printf_float+0x94>
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a84e:	9206      	str	r2, [sp, #24]
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	d13f      	bne.n	800a8d4 <_printf_float+0x17c>
 800a854:	2306      	movs	r3, #6
 800a856:	6063      	str	r3, [r4, #4]
 800a858:	9b05      	ldr	r3, [sp, #20]
 800a85a:	6861      	ldr	r1, [r4, #4]
 800a85c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a860:	2300      	movs	r3, #0
 800a862:	9303      	str	r3, [sp, #12]
 800a864:	ab0a      	add	r3, sp, #40	; 0x28
 800a866:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a86a:	ab09      	add	r3, sp, #36	; 0x24
 800a86c:	ec49 8b10 	vmov	d0, r8, r9
 800a870:	9300      	str	r3, [sp, #0]
 800a872:	6022      	str	r2, [r4, #0]
 800a874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a878:	4628      	mov	r0, r5
 800a87a:	f7ff fecd 	bl	800a618 <__cvt>
 800a87e:	9b06      	ldr	r3, [sp, #24]
 800a880:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a882:	2b47      	cmp	r3, #71	; 0x47
 800a884:	4680      	mov	r8, r0
 800a886:	d108      	bne.n	800a89a <_printf_float+0x142>
 800a888:	1cc8      	adds	r0, r1, #3
 800a88a:	db02      	blt.n	800a892 <_printf_float+0x13a>
 800a88c:	6863      	ldr	r3, [r4, #4]
 800a88e:	4299      	cmp	r1, r3
 800a890:	dd41      	ble.n	800a916 <_printf_float+0x1be>
 800a892:	f1ab 0b02 	sub.w	fp, fp, #2
 800a896:	fa5f fb8b 	uxtb.w	fp, fp
 800a89a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a89e:	d820      	bhi.n	800a8e2 <_printf_float+0x18a>
 800a8a0:	3901      	subs	r1, #1
 800a8a2:	465a      	mov	r2, fp
 800a8a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a8aa:	f7ff ff17 	bl	800a6dc <__exponent>
 800a8ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8b0:	1813      	adds	r3, r2, r0
 800a8b2:	2a01      	cmp	r2, #1
 800a8b4:	4681      	mov	r9, r0
 800a8b6:	6123      	str	r3, [r4, #16]
 800a8b8:	dc02      	bgt.n	800a8c0 <_printf_float+0x168>
 800a8ba:	6822      	ldr	r2, [r4, #0]
 800a8bc:	07d2      	lsls	r2, r2, #31
 800a8be:	d501      	bpl.n	800a8c4 <_printf_float+0x16c>
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	6123      	str	r3, [r4, #16]
 800a8c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d09c      	beq.n	800a806 <_printf_float+0xae>
 800a8cc:	232d      	movs	r3, #45	; 0x2d
 800a8ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d2:	e798      	b.n	800a806 <_printf_float+0xae>
 800a8d4:	9a06      	ldr	r2, [sp, #24]
 800a8d6:	2a47      	cmp	r2, #71	; 0x47
 800a8d8:	d1be      	bne.n	800a858 <_printf_float+0x100>
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1bc      	bne.n	800a858 <_printf_float+0x100>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e7b9      	b.n	800a856 <_printf_float+0xfe>
 800a8e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8e6:	d118      	bne.n	800a91a <_printf_float+0x1c2>
 800a8e8:	2900      	cmp	r1, #0
 800a8ea:	6863      	ldr	r3, [r4, #4]
 800a8ec:	dd0b      	ble.n	800a906 <_printf_float+0x1ae>
 800a8ee:	6121      	str	r1, [r4, #16]
 800a8f0:	b913      	cbnz	r3, 800a8f8 <_printf_float+0x1a0>
 800a8f2:	6822      	ldr	r2, [r4, #0]
 800a8f4:	07d0      	lsls	r0, r2, #31
 800a8f6:	d502      	bpl.n	800a8fe <_printf_float+0x1a6>
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	440b      	add	r3, r1
 800a8fc:	6123      	str	r3, [r4, #16]
 800a8fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	e7de      	b.n	800a8c4 <_printf_float+0x16c>
 800a906:	b913      	cbnz	r3, 800a90e <_printf_float+0x1b6>
 800a908:	6822      	ldr	r2, [r4, #0]
 800a90a:	07d2      	lsls	r2, r2, #31
 800a90c:	d501      	bpl.n	800a912 <_printf_float+0x1ba>
 800a90e:	3302      	adds	r3, #2
 800a910:	e7f4      	b.n	800a8fc <_printf_float+0x1a4>
 800a912:	2301      	movs	r3, #1
 800a914:	e7f2      	b.n	800a8fc <_printf_float+0x1a4>
 800a916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a91a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a91c:	4299      	cmp	r1, r3
 800a91e:	db05      	blt.n	800a92c <_printf_float+0x1d4>
 800a920:	6823      	ldr	r3, [r4, #0]
 800a922:	6121      	str	r1, [r4, #16]
 800a924:	07d8      	lsls	r0, r3, #31
 800a926:	d5ea      	bpl.n	800a8fe <_printf_float+0x1a6>
 800a928:	1c4b      	adds	r3, r1, #1
 800a92a:	e7e7      	b.n	800a8fc <_printf_float+0x1a4>
 800a92c:	2900      	cmp	r1, #0
 800a92e:	bfd4      	ite	le
 800a930:	f1c1 0202 	rsble	r2, r1, #2
 800a934:	2201      	movgt	r2, #1
 800a936:	4413      	add	r3, r2
 800a938:	e7e0      	b.n	800a8fc <_printf_float+0x1a4>
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	055a      	lsls	r2, r3, #21
 800a93e:	d407      	bmi.n	800a950 <_printf_float+0x1f8>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	4642      	mov	r2, r8
 800a944:	4631      	mov	r1, r6
 800a946:	4628      	mov	r0, r5
 800a948:	47b8      	blx	r7
 800a94a:	3001      	adds	r0, #1
 800a94c:	d12c      	bne.n	800a9a8 <_printf_float+0x250>
 800a94e:	e764      	b.n	800a81a <_printf_float+0xc2>
 800a950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a954:	f240 80e0 	bls.w	800ab18 <_printf_float+0x3c0>
 800a958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a95c:	2200      	movs	r2, #0
 800a95e:	2300      	movs	r3, #0
 800a960:	f7f6 f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 800a964:	2800      	cmp	r0, #0
 800a966:	d034      	beq.n	800a9d2 <_printf_float+0x27a>
 800a968:	4a37      	ldr	r2, [pc, #220]	; (800aa48 <_printf_float+0x2f0>)
 800a96a:	2301      	movs	r3, #1
 800a96c:	4631      	mov	r1, r6
 800a96e:	4628      	mov	r0, r5
 800a970:	47b8      	blx	r7
 800a972:	3001      	adds	r0, #1
 800a974:	f43f af51 	beq.w	800a81a <_printf_float+0xc2>
 800a978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a97c:	429a      	cmp	r2, r3
 800a97e:	db02      	blt.n	800a986 <_printf_float+0x22e>
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	07d8      	lsls	r0, r3, #31
 800a984:	d510      	bpl.n	800a9a8 <_printf_float+0x250>
 800a986:	ee18 3a10 	vmov	r3, s16
 800a98a:	4652      	mov	r2, sl
 800a98c:	4631      	mov	r1, r6
 800a98e:	4628      	mov	r0, r5
 800a990:	47b8      	blx	r7
 800a992:	3001      	adds	r0, #1
 800a994:	f43f af41 	beq.w	800a81a <_printf_float+0xc2>
 800a998:	f04f 0800 	mov.w	r8, #0
 800a99c:	f104 091a 	add.w	r9, r4, #26
 800a9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	4543      	cmp	r3, r8
 800a9a6:	dc09      	bgt.n	800a9bc <_printf_float+0x264>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	079b      	lsls	r3, r3, #30
 800a9ac:	f100 8105 	bmi.w	800abba <_printf_float+0x462>
 800a9b0:	68e0      	ldr	r0, [r4, #12]
 800a9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b4:	4298      	cmp	r0, r3
 800a9b6:	bfb8      	it	lt
 800a9b8:	4618      	movlt	r0, r3
 800a9ba:	e730      	b.n	800a81e <_printf_float+0xc6>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	464a      	mov	r2, r9
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	47b8      	blx	r7
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	f43f af27 	beq.w	800a81a <_printf_float+0xc2>
 800a9cc:	f108 0801 	add.w	r8, r8, #1
 800a9d0:	e7e6      	b.n	800a9a0 <_printf_float+0x248>
 800a9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	dc39      	bgt.n	800aa4c <_printf_float+0x2f4>
 800a9d8:	4a1b      	ldr	r2, [pc, #108]	; (800aa48 <_printf_float+0x2f0>)
 800a9da:	2301      	movs	r3, #1
 800a9dc:	4631      	mov	r1, r6
 800a9de:	4628      	mov	r0, r5
 800a9e0:	47b8      	blx	r7
 800a9e2:	3001      	adds	r0, #1
 800a9e4:	f43f af19 	beq.w	800a81a <_printf_float+0xc2>
 800a9e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	d102      	bne.n	800a9f6 <_printf_float+0x29e>
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	07d9      	lsls	r1, r3, #31
 800a9f4:	d5d8      	bpl.n	800a9a8 <_printf_float+0x250>
 800a9f6:	ee18 3a10 	vmov	r3, s16
 800a9fa:	4652      	mov	r2, sl
 800a9fc:	4631      	mov	r1, r6
 800a9fe:	4628      	mov	r0, r5
 800aa00:	47b8      	blx	r7
 800aa02:	3001      	adds	r0, #1
 800aa04:	f43f af09 	beq.w	800a81a <_printf_float+0xc2>
 800aa08:	f04f 0900 	mov.w	r9, #0
 800aa0c:	f104 0a1a 	add.w	sl, r4, #26
 800aa10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa12:	425b      	negs	r3, r3
 800aa14:	454b      	cmp	r3, r9
 800aa16:	dc01      	bgt.n	800aa1c <_printf_float+0x2c4>
 800aa18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1a:	e792      	b.n	800a942 <_printf_float+0x1ea>
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	4652      	mov	r2, sl
 800aa20:	4631      	mov	r1, r6
 800aa22:	4628      	mov	r0, r5
 800aa24:	47b8      	blx	r7
 800aa26:	3001      	adds	r0, #1
 800aa28:	f43f aef7 	beq.w	800a81a <_printf_float+0xc2>
 800aa2c:	f109 0901 	add.w	r9, r9, #1
 800aa30:	e7ee      	b.n	800aa10 <_printf_float+0x2b8>
 800aa32:	bf00      	nop
 800aa34:	7fefffff 	.word	0x7fefffff
 800aa38:	0800e981 	.word	0x0800e981
 800aa3c:	0800e985 	.word	0x0800e985
 800aa40:	0800e98d 	.word	0x0800e98d
 800aa44:	0800e989 	.word	0x0800e989
 800aa48:	0800e991 	.word	0x0800e991
 800aa4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa50:	429a      	cmp	r2, r3
 800aa52:	bfa8      	it	ge
 800aa54:	461a      	movge	r2, r3
 800aa56:	2a00      	cmp	r2, #0
 800aa58:	4691      	mov	r9, r2
 800aa5a:	dc37      	bgt.n	800aacc <_printf_float+0x374>
 800aa5c:	f04f 0b00 	mov.w	fp, #0
 800aa60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa64:	f104 021a 	add.w	r2, r4, #26
 800aa68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	eba3 0309 	sub.w	r3, r3, r9
 800aa70:	455b      	cmp	r3, fp
 800aa72:	dc33      	bgt.n	800aadc <_printf_float+0x384>
 800aa74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	db3b      	blt.n	800aaf4 <_printf_float+0x39c>
 800aa7c:	6823      	ldr	r3, [r4, #0]
 800aa7e:	07da      	lsls	r2, r3, #31
 800aa80:	d438      	bmi.n	800aaf4 <_printf_float+0x39c>
 800aa82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa84:	9a05      	ldr	r2, [sp, #20]
 800aa86:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa88:	1a9a      	subs	r2, r3, r2
 800aa8a:	eba3 0901 	sub.w	r9, r3, r1
 800aa8e:	4591      	cmp	r9, r2
 800aa90:	bfa8      	it	ge
 800aa92:	4691      	movge	r9, r2
 800aa94:	f1b9 0f00 	cmp.w	r9, #0
 800aa98:	dc35      	bgt.n	800ab06 <_printf_float+0x3ae>
 800aa9a:	f04f 0800 	mov.w	r8, #0
 800aa9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaa2:	f104 0a1a 	add.w	sl, r4, #26
 800aaa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaaa:	1a9b      	subs	r3, r3, r2
 800aaac:	eba3 0309 	sub.w	r3, r3, r9
 800aab0:	4543      	cmp	r3, r8
 800aab2:	f77f af79 	ble.w	800a9a8 <_printf_float+0x250>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f aeaa 	beq.w	800a81a <_printf_float+0xc2>
 800aac6:	f108 0801 	add.w	r8, r8, #1
 800aaca:	e7ec      	b.n	800aaa6 <_printf_float+0x34e>
 800aacc:	4613      	mov	r3, r2
 800aace:	4631      	mov	r1, r6
 800aad0:	4642      	mov	r2, r8
 800aad2:	4628      	mov	r0, r5
 800aad4:	47b8      	blx	r7
 800aad6:	3001      	adds	r0, #1
 800aad8:	d1c0      	bne.n	800aa5c <_printf_float+0x304>
 800aada:	e69e      	b.n	800a81a <_printf_float+0xc2>
 800aadc:	2301      	movs	r3, #1
 800aade:	4631      	mov	r1, r6
 800aae0:	4628      	mov	r0, r5
 800aae2:	9205      	str	r2, [sp, #20]
 800aae4:	47b8      	blx	r7
 800aae6:	3001      	adds	r0, #1
 800aae8:	f43f ae97 	beq.w	800a81a <_printf_float+0xc2>
 800aaec:	9a05      	ldr	r2, [sp, #20]
 800aaee:	f10b 0b01 	add.w	fp, fp, #1
 800aaf2:	e7b9      	b.n	800aa68 <_printf_float+0x310>
 800aaf4:	ee18 3a10 	vmov	r3, s16
 800aaf8:	4652      	mov	r2, sl
 800aafa:	4631      	mov	r1, r6
 800aafc:	4628      	mov	r0, r5
 800aafe:	47b8      	blx	r7
 800ab00:	3001      	adds	r0, #1
 800ab02:	d1be      	bne.n	800aa82 <_printf_float+0x32a>
 800ab04:	e689      	b.n	800a81a <_printf_float+0xc2>
 800ab06:	9a05      	ldr	r2, [sp, #20]
 800ab08:	464b      	mov	r3, r9
 800ab0a:	4442      	add	r2, r8
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4628      	mov	r0, r5
 800ab10:	47b8      	blx	r7
 800ab12:	3001      	adds	r0, #1
 800ab14:	d1c1      	bne.n	800aa9a <_printf_float+0x342>
 800ab16:	e680      	b.n	800a81a <_printf_float+0xc2>
 800ab18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab1a:	2a01      	cmp	r2, #1
 800ab1c:	dc01      	bgt.n	800ab22 <_printf_float+0x3ca>
 800ab1e:	07db      	lsls	r3, r3, #31
 800ab20:	d538      	bpl.n	800ab94 <_printf_float+0x43c>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4642      	mov	r2, r8
 800ab26:	4631      	mov	r1, r6
 800ab28:	4628      	mov	r0, r5
 800ab2a:	47b8      	blx	r7
 800ab2c:	3001      	adds	r0, #1
 800ab2e:	f43f ae74 	beq.w	800a81a <_printf_float+0xc2>
 800ab32:	ee18 3a10 	vmov	r3, s16
 800ab36:	4652      	mov	r2, sl
 800ab38:	4631      	mov	r1, r6
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	47b8      	blx	r7
 800ab3e:	3001      	adds	r0, #1
 800ab40:	f43f ae6b 	beq.w	800a81a <_printf_float+0xc2>
 800ab44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	f7f5 ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 800ab50:	b9d8      	cbnz	r0, 800ab8a <_printf_float+0x432>
 800ab52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab54:	f108 0201 	add.w	r2, r8, #1
 800ab58:	3b01      	subs	r3, #1
 800ab5a:	4631      	mov	r1, r6
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b8      	blx	r7
 800ab60:	3001      	adds	r0, #1
 800ab62:	d10e      	bne.n	800ab82 <_printf_float+0x42a>
 800ab64:	e659      	b.n	800a81a <_printf_float+0xc2>
 800ab66:	2301      	movs	r3, #1
 800ab68:	4652      	mov	r2, sl
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	47b8      	blx	r7
 800ab70:	3001      	adds	r0, #1
 800ab72:	f43f ae52 	beq.w	800a81a <_printf_float+0xc2>
 800ab76:	f108 0801 	add.w	r8, r8, #1
 800ab7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	4543      	cmp	r3, r8
 800ab80:	dcf1      	bgt.n	800ab66 <_printf_float+0x40e>
 800ab82:	464b      	mov	r3, r9
 800ab84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab88:	e6dc      	b.n	800a944 <_printf_float+0x1ec>
 800ab8a:	f04f 0800 	mov.w	r8, #0
 800ab8e:	f104 0a1a 	add.w	sl, r4, #26
 800ab92:	e7f2      	b.n	800ab7a <_printf_float+0x422>
 800ab94:	2301      	movs	r3, #1
 800ab96:	4642      	mov	r2, r8
 800ab98:	e7df      	b.n	800ab5a <_printf_float+0x402>
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	464a      	mov	r2, r9
 800ab9e:	4631      	mov	r1, r6
 800aba0:	4628      	mov	r0, r5
 800aba2:	47b8      	blx	r7
 800aba4:	3001      	adds	r0, #1
 800aba6:	f43f ae38 	beq.w	800a81a <_printf_float+0xc2>
 800abaa:	f108 0801 	add.w	r8, r8, #1
 800abae:	68e3      	ldr	r3, [r4, #12]
 800abb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abb2:	1a5b      	subs	r3, r3, r1
 800abb4:	4543      	cmp	r3, r8
 800abb6:	dcf0      	bgt.n	800ab9a <_printf_float+0x442>
 800abb8:	e6fa      	b.n	800a9b0 <_printf_float+0x258>
 800abba:	f04f 0800 	mov.w	r8, #0
 800abbe:	f104 0919 	add.w	r9, r4, #25
 800abc2:	e7f4      	b.n	800abae <_printf_float+0x456>

0800abc4 <_printf_common>:
 800abc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abc8:	4616      	mov	r6, r2
 800abca:	4699      	mov	r9, r3
 800abcc:	688a      	ldr	r2, [r1, #8]
 800abce:	690b      	ldr	r3, [r1, #16]
 800abd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abd4:	4293      	cmp	r3, r2
 800abd6:	bfb8      	it	lt
 800abd8:	4613      	movlt	r3, r2
 800abda:	6033      	str	r3, [r6, #0]
 800abdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abe0:	4607      	mov	r7, r0
 800abe2:	460c      	mov	r4, r1
 800abe4:	b10a      	cbz	r2, 800abea <_printf_common+0x26>
 800abe6:	3301      	adds	r3, #1
 800abe8:	6033      	str	r3, [r6, #0]
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	0699      	lsls	r1, r3, #26
 800abee:	bf42      	ittt	mi
 800abf0:	6833      	ldrmi	r3, [r6, #0]
 800abf2:	3302      	addmi	r3, #2
 800abf4:	6033      	strmi	r3, [r6, #0]
 800abf6:	6825      	ldr	r5, [r4, #0]
 800abf8:	f015 0506 	ands.w	r5, r5, #6
 800abfc:	d106      	bne.n	800ac0c <_printf_common+0x48>
 800abfe:	f104 0a19 	add.w	sl, r4, #25
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	6832      	ldr	r2, [r6, #0]
 800ac06:	1a9b      	subs	r3, r3, r2
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	dc26      	bgt.n	800ac5a <_printf_common+0x96>
 800ac0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac10:	1e13      	subs	r3, r2, #0
 800ac12:	6822      	ldr	r2, [r4, #0]
 800ac14:	bf18      	it	ne
 800ac16:	2301      	movne	r3, #1
 800ac18:	0692      	lsls	r2, r2, #26
 800ac1a:	d42b      	bmi.n	800ac74 <_printf_common+0xb0>
 800ac1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac20:	4649      	mov	r1, r9
 800ac22:	4638      	mov	r0, r7
 800ac24:	47c0      	blx	r8
 800ac26:	3001      	adds	r0, #1
 800ac28:	d01e      	beq.n	800ac68 <_printf_common+0xa4>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	68e5      	ldr	r5, [r4, #12]
 800ac2e:	6832      	ldr	r2, [r6, #0]
 800ac30:	f003 0306 	and.w	r3, r3, #6
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	bf08      	it	eq
 800ac38:	1aad      	subeq	r5, r5, r2
 800ac3a:	68a3      	ldr	r3, [r4, #8]
 800ac3c:	6922      	ldr	r2, [r4, #16]
 800ac3e:	bf0c      	ite	eq
 800ac40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac44:	2500      	movne	r5, #0
 800ac46:	4293      	cmp	r3, r2
 800ac48:	bfc4      	itt	gt
 800ac4a:	1a9b      	subgt	r3, r3, r2
 800ac4c:	18ed      	addgt	r5, r5, r3
 800ac4e:	2600      	movs	r6, #0
 800ac50:	341a      	adds	r4, #26
 800ac52:	42b5      	cmp	r5, r6
 800ac54:	d11a      	bne.n	800ac8c <_printf_common+0xc8>
 800ac56:	2000      	movs	r0, #0
 800ac58:	e008      	b.n	800ac6c <_printf_common+0xa8>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4652      	mov	r2, sl
 800ac5e:	4649      	mov	r1, r9
 800ac60:	4638      	mov	r0, r7
 800ac62:	47c0      	blx	r8
 800ac64:	3001      	adds	r0, #1
 800ac66:	d103      	bne.n	800ac70 <_printf_common+0xac>
 800ac68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac70:	3501      	adds	r5, #1
 800ac72:	e7c6      	b.n	800ac02 <_printf_common+0x3e>
 800ac74:	18e1      	adds	r1, r4, r3
 800ac76:	1c5a      	adds	r2, r3, #1
 800ac78:	2030      	movs	r0, #48	; 0x30
 800ac7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac7e:	4422      	add	r2, r4
 800ac80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac88:	3302      	adds	r3, #2
 800ac8a:	e7c7      	b.n	800ac1c <_printf_common+0x58>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	4622      	mov	r2, r4
 800ac90:	4649      	mov	r1, r9
 800ac92:	4638      	mov	r0, r7
 800ac94:	47c0      	blx	r8
 800ac96:	3001      	adds	r0, #1
 800ac98:	d0e6      	beq.n	800ac68 <_printf_common+0xa4>
 800ac9a:	3601      	adds	r6, #1
 800ac9c:	e7d9      	b.n	800ac52 <_printf_common+0x8e>
	...

0800aca0 <_printf_i>:
 800aca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca4:	7e0f      	ldrb	r7, [r1, #24]
 800aca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aca8:	2f78      	cmp	r7, #120	; 0x78
 800acaa:	4691      	mov	r9, r2
 800acac:	4680      	mov	r8, r0
 800acae:	460c      	mov	r4, r1
 800acb0:	469a      	mov	sl, r3
 800acb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800acb6:	d807      	bhi.n	800acc8 <_printf_i+0x28>
 800acb8:	2f62      	cmp	r7, #98	; 0x62
 800acba:	d80a      	bhi.n	800acd2 <_printf_i+0x32>
 800acbc:	2f00      	cmp	r7, #0
 800acbe:	f000 80d8 	beq.w	800ae72 <_printf_i+0x1d2>
 800acc2:	2f58      	cmp	r7, #88	; 0x58
 800acc4:	f000 80a3 	beq.w	800ae0e <_printf_i+0x16e>
 800acc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800accc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acd0:	e03a      	b.n	800ad48 <_printf_i+0xa8>
 800acd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acd6:	2b15      	cmp	r3, #21
 800acd8:	d8f6      	bhi.n	800acc8 <_printf_i+0x28>
 800acda:	a101      	add	r1, pc, #4	; (adr r1, 800ace0 <_printf_i+0x40>)
 800acdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ace0:	0800ad39 	.word	0x0800ad39
 800ace4:	0800ad4d 	.word	0x0800ad4d
 800ace8:	0800acc9 	.word	0x0800acc9
 800acec:	0800acc9 	.word	0x0800acc9
 800acf0:	0800acc9 	.word	0x0800acc9
 800acf4:	0800acc9 	.word	0x0800acc9
 800acf8:	0800ad4d 	.word	0x0800ad4d
 800acfc:	0800acc9 	.word	0x0800acc9
 800ad00:	0800acc9 	.word	0x0800acc9
 800ad04:	0800acc9 	.word	0x0800acc9
 800ad08:	0800acc9 	.word	0x0800acc9
 800ad0c:	0800ae59 	.word	0x0800ae59
 800ad10:	0800ad7d 	.word	0x0800ad7d
 800ad14:	0800ae3b 	.word	0x0800ae3b
 800ad18:	0800acc9 	.word	0x0800acc9
 800ad1c:	0800acc9 	.word	0x0800acc9
 800ad20:	0800ae7b 	.word	0x0800ae7b
 800ad24:	0800acc9 	.word	0x0800acc9
 800ad28:	0800ad7d 	.word	0x0800ad7d
 800ad2c:	0800acc9 	.word	0x0800acc9
 800ad30:	0800acc9 	.word	0x0800acc9
 800ad34:	0800ae43 	.word	0x0800ae43
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	602a      	str	r2, [r5, #0]
 800ad40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e0a3      	b.n	800ae94 <_printf_i+0x1f4>
 800ad4c:	6820      	ldr	r0, [r4, #0]
 800ad4e:	6829      	ldr	r1, [r5, #0]
 800ad50:	0606      	lsls	r6, r0, #24
 800ad52:	f101 0304 	add.w	r3, r1, #4
 800ad56:	d50a      	bpl.n	800ad6e <_printf_i+0xce>
 800ad58:	680e      	ldr	r6, [r1, #0]
 800ad5a:	602b      	str	r3, [r5, #0]
 800ad5c:	2e00      	cmp	r6, #0
 800ad5e:	da03      	bge.n	800ad68 <_printf_i+0xc8>
 800ad60:	232d      	movs	r3, #45	; 0x2d
 800ad62:	4276      	negs	r6, r6
 800ad64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad68:	485e      	ldr	r0, [pc, #376]	; (800aee4 <_printf_i+0x244>)
 800ad6a:	230a      	movs	r3, #10
 800ad6c:	e019      	b.n	800ada2 <_printf_i+0x102>
 800ad6e:	680e      	ldr	r6, [r1, #0]
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad76:	bf18      	it	ne
 800ad78:	b236      	sxthne	r6, r6
 800ad7a:	e7ef      	b.n	800ad5c <_printf_i+0xbc>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	6820      	ldr	r0, [r4, #0]
 800ad80:	1d19      	adds	r1, r3, #4
 800ad82:	6029      	str	r1, [r5, #0]
 800ad84:	0601      	lsls	r1, r0, #24
 800ad86:	d501      	bpl.n	800ad8c <_printf_i+0xec>
 800ad88:	681e      	ldr	r6, [r3, #0]
 800ad8a:	e002      	b.n	800ad92 <_printf_i+0xf2>
 800ad8c:	0646      	lsls	r6, r0, #25
 800ad8e:	d5fb      	bpl.n	800ad88 <_printf_i+0xe8>
 800ad90:	881e      	ldrh	r6, [r3, #0]
 800ad92:	4854      	ldr	r0, [pc, #336]	; (800aee4 <_printf_i+0x244>)
 800ad94:	2f6f      	cmp	r7, #111	; 0x6f
 800ad96:	bf0c      	ite	eq
 800ad98:	2308      	moveq	r3, #8
 800ad9a:	230a      	movne	r3, #10
 800ad9c:	2100      	movs	r1, #0
 800ad9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ada2:	6865      	ldr	r5, [r4, #4]
 800ada4:	60a5      	str	r5, [r4, #8]
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	bfa2      	ittt	ge
 800adaa:	6821      	ldrge	r1, [r4, #0]
 800adac:	f021 0104 	bicge.w	r1, r1, #4
 800adb0:	6021      	strge	r1, [r4, #0]
 800adb2:	b90e      	cbnz	r6, 800adb8 <_printf_i+0x118>
 800adb4:	2d00      	cmp	r5, #0
 800adb6:	d04d      	beq.n	800ae54 <_printf_i+0x1b4>
 800adb8:	4615      	mov	r5, r2
 800adba:	fbb6 f1f3 	udiv	r1, r6, r3
 800adbe:	fb03 6711 	mls	r7, r3, r1, r6
 800adc2:	5dc7      	ldrb	r7, [r0, r7]
 800adc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800adc8:	4637      	mov	r7, r6
 800adca:	42bb      	cmp	r3, r7
 800adcc:	460e      	mov	r6, r1
 800adce:	d9f4      	bls.n	800adba <_printf_i+0x11a>
 800add0:	2b08      	cmp	r3, #8
 800add2:	d10b      	bne.n	800adec <_printf_i+0x14c>
 800add4:	6823      	ldr	r3, [r4, #0]
 800add6:	07de      	lsls	r6, r3, #31
 800add8:	d508      	bpl.n	800adec <_printf_i+0x14c>
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	6861      	ldr	r1, [r4, #4]
 800adde:	4299      	cmp	r1, r3
 800ade0:	bfde      	ittt	le
 800ade2:	2330      	movle	r3, #48	; 0x30
 800ade4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ade8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800adec:	1b52      	subs	r2, r2, r5
 800adee:	6122      	str	r2, [r4, #16]
 800adf0:	f8cd a000 	str.w	sl, [sp]
 800adf4:	464b      	mov	r3, r9
 800adf6:	aa03      	add	r2, sp, #12
 800adf8:	4621      	mov	r1, r4
 800adfa:	4640      	mov	r0, r8
 800adfc:	f7ff fee2 	bl	800abc4 <_printf_common>
 800ae00:	3001      	adds	r0, #1
 800ae02:	d14c      	bne.n	800ae9e <_printf_i+0x1fe>
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae08:	b004      	add	sp, #16
 800ae0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0e:	4835      	ldr	r0, [pc, #212]	; (800aee4 <_printf_i+0x244>)
 800ae10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ae14:	6829      	ldr	r1, [r5, #0]
 800ae16:	6823      	ldr	r3, [r4, #0]
 800ae18:	f851 6b04 	ldr.w	r6, [r1], #4
 800ae1c:	6029      	str	r1, [r5, #0]
 800ae1e:	061d      	lsls	r5, r3, #24
 800ae20:	d514      	bpl.n	800ae4c <_printf_i+0x1ac>
 800ae22:	07df      	lsls	r7, r3, #31
 800ae24:	bf44      	itt	mi
 800ae26:	f043 0320 	orrmi.w	r3, r3, #32
 800ae2a:	6023      	strmi	r3, [r4, #0]
 800ae2c:	b91e      	cbnz	r6, 800ae36 <_printf_i+0x196>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	f023 0320 	bic.w	r3, r3, #32
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	2310      	movs	r3, #16
 800ae38:	e7b0      	b.n	800ad9c <_printf_i+0xfc>
 800ae3a:	6823      	ldr	r3, [r4, #0]
 800ae3c:	f043 0320 	orr.w	r3, r3, #32
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	2378      	movs	r3, #120	; 0x78
 800ae44:	4828      	ldr	r0, [pc, #160]	; (800aee8 <_printf_i+0x248>)
 800ae46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae4a:	e7e3      	b.n	800ae14 <_printf_i+0x174>
 800ae4c:	0659      	lsls	r1, r3, #25
 800ae4e:	bf48      	it	mi
 800ae50:	b2b6      	uxthmi	r6, r6
 800ae52:	e7e6      	b.n	800ae22 <_printf_i+0x182>
 800ae54:	4615      	mov	r5, r2
 800ae56:	e7bb      	b.n	800add0 <_printf_i+0x130>
 800ae58:	682b      	ldr	r3, [r5, #0]
 800ae5a:	6826      	ldr	r6, [r4, #0]
 800ae5c:	6961      	ldr	r1, [r4, #20]
 800ae5e:	1d18      	adds	r0, r3, #4
 800ae60:	6028      	str	r0, [r5, #0]
 800ae62:	0635      	lsls	r5, r6, #24
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	d501      	bpl.n	800ae6c <_printf_i+0x1cc>
 800ae68:	6019      	str	r1, [r3, #0]
 800ae6a:	e002      	b.n	800ae72 <_printf_i+0x1d2>
 800ae6c:	0670      	lsls	r0, r6, #25
 800ae6e:	d5fb      	bpl.n	800ae68 <_printf_i+0x1c8>
 800ae70:	8019      	strh	r1, [r3, #0]
 800ae72:	2300      	movs	r3, #0
 800ae74:	6123      	str	r3, [r4, #16]
 800ae76:	4615      	mov	r5, r2
 800ae78:	e7ba      	b.n	800adf0 <_printf_i+0x150>
 800ae7a:	682b      	ldr	r3, [r5, #0]
 800ae7c:	1d1a      	adds	r2, r3, #4
 800ae7e:	602a      	str	r2, [r5, #0]
 800ae80:	681d      	ldr	r5, [r3, #0]
 800ae82:	6862      	ldr	r2, [r4, #4]
 800ae84:	2100      	movs	r1, #0
 800ae86:	4628      	mov	r0, r5
 800ae88:	f7f5 f9ca 	bl	8000220 <memchr>
 800ae8c:	b108      	cbz	r0, 800ae92 <_printf_i+0x1f2>
 800ae8e:	1b40      	subs	r0, r0, r5
 800ae90:	6060      	str	r0, [r4, #4]
 800ae92:	6863      	ldr	r3, [r4, #4]
 800ae94:	6123      	str	r3, [r4, #16]
 800ae96:	2300      	movs	r3, #0
 800ae98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae9c:	e7a8      	b.n	800adf0 <_printf_i+0x150>
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	462a      	mov	r2, r5
 800aea2:	4649      	mov	r1, r9
 800aea4:	4640      	mov	r0, r8
 800aea6:	47d0      	blx	sl
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d0ab      	beq.n	800ae04 <_printf_i+0x164>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	079b      	lsls	r3, r3, #30
 800aeb0:	d413      	bmi.n	800aeda <_printf_i+0x23a>
 800aeb2:	68e0      	ldr	r0, [r4, #12]
 800aeb4:	9b03      	ldr	r3, [sp, #12]
 800aeb6:	4298      	cmp	r0, r3
 800aeb8:	bfb8      	it	lt
 800aeba:	4618      	movlt	r0, r3
 800aebc:	e7a4      	b.n	800ae08 <_printf_i+0x168>
 800aebe:	2301      	movs	r3, #1
 800aec0:	4632      	mov	r2, r6
 800aec2:	4649      	mov	r1, r9
 800aec4:	4640      	mov	r0, r8
 800aec6:	47d0      	blx	sl
 800aec8:	3001      	adds	r0, #1
 800aeca:	d09b      	beq.n	800ae04 <_printf_i+0x164>
 800aecc:	3501      	adds	r5, #1
 800aece:	68e3      	ldr	r3, [r4, #12]
 800aed0:	9903      	ldr	r1, [sp, #12]
 800aed2:	1a5b      	subs	r3, r3, r1
 800aed4:	42ab      	cmp	r3, r5
 800aed6:	dcf2      	bgt.n	800aebe <_printf_i+0x21e>
 800aed8:	e7eb      	b.n	800aeb2 <_printf_i+0x212>
 800aeda:	2500      	movs	r5, #0
 800aedc:	f104 0619 	add.w	r6, r4, #25
 800aee0:	e7f5      	b.n	800aece <_printf_i+0x22e>
 800aee2:	bf00      	nop
 800aee4:	0800e993 	.word	0x0800e993
 800aee8:	0800e9a4 	.word	0x0800e9a4

0800aeec <_sbrk_r>:
 800aeec:	b538      	push	{r3, r4, r5, lr}
 800aeee:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_sbrk_r+0x1c>)
 800aef0:	2300      	movs	r3, #0
 800aef2:	4604      	mov	r4, r0
 800aef4:	4608      	mov	r0, r1
 800aef6:	602b      	str	r3, [r5, #0]
 800aef8:	f7f6 f89e 	bl	8001038 <_sbrk>
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d102      	bne.n	800af06 <_sbrk_r+0x1a>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b103      	cbz	r3, 800af06 <_sbrk_r+0x1a>
 800af04:	6023      	str	r3, [r4, #0]
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	2000b338 	.word	0x2000b338

0800af0c <_raise_r>:
 800af0c:	291f      	cmp	r1, #31
 800af0e:	b538      	push	{r3, r4, r5, lr}
 800af10:	4604      	mov	r4, r0
 800af12:	460d      	mov	r5, r1
 800af14:	d904      	bls.n	800af20 <_raise_r+0x14>
 800af16:	2316      	movs	r3, #22
 800af18:	6003      	str	r3, [r0, #0]
 800af1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af1e:	bd38      	pop	{r3, r4, r5, pc}
 800af20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af22:	b112      	cbz	r2, 800af2a <_raise_r+0x1e>
 800af24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af28:	b94b      	cbnz	r3, 800af3e <_raise_r+0x32>
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 f830 	bl	800af90 <_getpid_r>
 800af30:	462a      	mov	r2, r5
 800af32:	4601      	mov	r1, r0
 800af34:	4620      	mov	r0, r4
 800af36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af3a:	f000 b817 	b.w	800af6c <_kill_r>
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d00a      	beq.n	800af58 <_raise_r+0x4c>
 800af42:	1c59      	adds	r1, r3, #1
 800af44:	d103      	bne.n	800af4e <_raise_r+0x42>
 800af46:	2316      	movs	r3, #22
 800af48:	6003      	str	r3, [r0, #0]
 800af4a:	2001      	movs	r0, #1
 800af4c:	e7e7      	b.n	800af1e <_raise_r+0x12>
 800af4e:	2400      	movs	r4, #0
 800af50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af54:	4628      	mov	r0, r5
 800af56:	4798      	blx	r3
 800af58:	2000      	movs	r0, #0
 800af5a:	e7e0      	b.n	800af1e <_raise_r+0x12>

0800af5c <raise>:
 800af5c:	4b02      	ldr	r3, [pc, #8]	; (800af68 <raise+0xc>)
 800af5e:	4601      	mov	r1, r0
 800af60:	6818      	ldr	r0, [r3, #0]
 800af62:	f7ff bfd3 	b.w	800af0c <_raise_r>
 800af66:	bf00      	nop
 800af68:	200001f8 	.word	0x200001f8

0800af6c <_kill_r>:
 800af6c:	b538      	push	{r3, r4, r5, lr}
 800af6e:	4d07      	ldr	r5, [pc, #28]	; (800af8c <_kill_r+0x20>)
 800af70:	2300      	movs	r3, #0
 800af72:	4604      	mov	r4, r0
 800af74:	4608      	mov	r0, r1
 800af76:	4611      	mov	r1, r2
 800af78:	602b      	str	r3, [r5, #0]
 800af7a:	f7f5 ffd3 	bl	8000f24 <_kill>
 800af7e:	1c43      	adds	r3, r0, #1
 800af80:	d102      	bne.n	800af88 <_kill_r+0x1c>
 800af82:	682b      	ldr	r3, [r5, #0]
 800af84:	b103      	cbz	r3, 800af88 <_kill_r+0x1c>
 800af86:	6023      	str	r3, [r4, #0]
 800af88:	bd38      	pop	{r3, r4, r5, pc}
 800af8a:	bf00      	nop
 800af8c:	2000b338 	.word	0x2000b338

0800af90 <_getpid_r>:
 800af90:	f7f5 bfc0 	b.w	8000f14 <_getpid>

0800af94 <strstr>:
 800af94:	780a      	ldrb	r2, [r1, #0]
 800af96:	b570      	push	{r4, r5, r6, lr}
 800af98:	b96a      	cbnz	r2, 800afb6 <strstr+0x22>
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d109      	bne.n	800afb4 <strstr+0x20>
 800afa0:	460c      	mov	r4, r1
 800afa2:	4605      	mov	r5, r0
 800afa4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0f6      	beq.n	800af9a <strstr+0x6>
 800afac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800afb0:	429e      	cmp	r6, r3
 800afb2:	d0f7      	beq.n	800afa4 <strstr+0x10>
 800afb4:	3001      	adds	r0, #1
 800afb6:	7803      	ldrb	r3, [r0, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1ef      	bne.n	800af9c <strstr+0x8>
 800afbc:	4618      	mov	r0, r3
 800afbe:	e7ec      	b.n	800af9a <strstr+0x6>

0800afc0 <sbrk>:
 800afc0:	4b02      	ldr	r3, [pc, #8]	; (800afcc <sbrk+0xc>)
 800afc2:	4601      	mov	r1, r0
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	f7ff bf91 	b.w	800aeec <_sbrk_r>
 800afca:	bf00      	nop
 800afcc:	200001f8 	.word	0x200001f8

0800afd0 <_vasiprintf_r>:
 800afd0:	b530      	push	{r4, r5, lr}
 800afd2:	460d      	mov	r5, r1
 800afd4:	4909      	ldr	r1, [pc, #36]	; (800affc <_vasiprintf_r+0x2c>)
 800afd6:	b09b      	sub	sp, #108	; 0x6c
 800afd8:	2400      	movs	r4, #0
 800afda:	e9cd 1403 	strd	r1, r4, [sp, #12]
 800afde:	4669      	mov	r1, sp
 800afe0:	9400      	str	r4, [sp, #0]
 800afe2:	9402      	str	r4, [sp, #8]
 800afe4:	9405      	str	r4, [sp, #20]
 800afe6:	f7ff fa17 	bl	800a418 <_svfiprintf_r>
 800afea:	2800      	cmp	r0, #0
 800afec:	bfa1      	itttt	ge
 800afee:	9b00      	ldrge	r3, [sp, #0]
 800aff0:	701c      	strbge	r4, [r3, #0]
 800aff2:	9b04      	ldrge	r3, [sp, #16]
 800aff4:	602b      	strge	r3, [r5, #0]
 800aff6:	b01b      	add	sp, #108	; 0x6c
 800aff8:	bd30      	pop	{r4, r5, pc}
 800affa:	bf00      	nop
 800affc:	ffff0288 	.word	0xffff0288

0800b000 <vasiprintf>:
 800b000:	4613      	mov	r3, r2
 800b002:	460a      	mov	r2, r1
 800b004:	4601      	mov	r1, r0
 800b006:	4802      	ldr	r0, [pc, #8]	; (800b010 <vasiprintf+0x10>)
 800b008:	6800      	ldr	r0, [r0, #0]
 800b00a:	f7ff bfe1 	b.w	800afd0 <_vasiprintf_r>
 800b00e:	bf00      	nop
 800b010:	200001f8 	.word	0x200001f8

0800b014 <__assert_func>:
 800b014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b016:	4614      	mov	r4, r2
 800b018:	461a      	mov	r2, r3
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <__assert_func+0x2c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4605      	mov	r5, r0
 800b020:	68d8      	ldr	r0, [r3, #12]
 800b022:	b14c      	cbz	r4, 800b038 <__assert_func+0x24>
 800b024:	4b07      	ldr	r3, [pc, #28]	; (800b044 <__assert_func+0x30>)
 800b026:	9100      	str	r1, [sp, #0]
 800b028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b02c:	4906      	ldr	r1, [pc, #24]	; (800b048 <__assert_func+0x34>)
 800b02e:	462b      	mov	r3, r5
 800b030:	f000 ff5e 	bl	800bef0 <fiprintf>
 800b034:	f7fe ffe6 	bl	800a004 <abort>
 800b038:	4b04      	ldr	r3, [pc, #16]	; (800b04c <__assert_func+0x38>)
 800b03a:	461c      	mov	r4, r3
 800b03c:	e7f3      	b.n	800b026 <__assert_func+0x12>
 800b03e:	bf00      	nop
 800b040:	200001f8 	.word	0x200001f8
 800b044:	0800e9b5 	.word	0x0800e9b5
 800b048:	0800e9c2 	.word	0x0800e9c2
 800b04c:	0800e9f0 	.word	0x0800e9f0

0800b050 <quorem>:
 800b050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b054:	6903      	ldr	r3, [r0, #16]
 800b056:	690c      	ldr	r4, [r1, #16]
 800b058:	42a3      	cmp	r3, r4
 800b05a:	4607      	mov	r7, r0
 800b05c:	f2c0 8081 	blt.w	800b162 <quorem+0x112>
 800b060:	3c01      	subs	r4, #1
 800b062:	f101 0814 	add.w	r8, r1, #20
 800b066:	f100 0514 	add.w	r5, r0, #20
 800b06a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b078:	3301      	adds	r3, #1
 800b07a:	429a      	cmp	r2, r3
 800b07c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b080:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b084:	fbb2 f6f3 	udiv	r6, r2, r3
 800b088:	d331      	bcc.n	800b0ee <quorem+0x9e>
 800b08a:	f04f 0e00 	mov.w	lr, #0
 800b08e:	4640      	mov	r0, r8
 800b090:	46ac      	mov	ip, r5
 800b092:	46f2      	mov	sl, lr
 800b094:	f850 2b04 	ldr.w	r2, [r0], #4
 800b098:	b293      	uxth	r3, r2
 800b09a:	fb06 e303 	mla	r3, r6, r3, lr
 800b09e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	ebaa 0303 	sub.w	r3, sl, r3
 800b0a8:	f8dc a000 	ldr.w	sl, [ip]
 800b0ac:	0c12      	lsrs	r2, r2, #16
 800b0ae:	fa13 f38a 	uxtah	r3, r3, sl
 800b0b2:	fb06 e202 	mla	r2, r6, r2, lr
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	9b00      	ldr	r3, [sp, #0]
 800b0ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b0be:	b292      	uxth	r2, r2
 800b0c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b0c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b0cc:	4581      	cmp	r9, r0
 800b0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0d2:	f84c 3b04 	str.w	r3, [ip], #4
 800b0d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b0da:	d2db      	bcs.n	800b094 <quorem+0x44>
 800b0dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b0e0:	b92b      	cbnz	r3, 800b0ee <quorem+0x9e>
 800b0e2:	9b01      	ldr	r3, [sp, #4]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	429d      	cmp	r5, r3
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	d32e      	bcc.n	800b14a <quorem+0xfa>
 800b0ec:	613c      	str	r4, [r7, #16]
 800b0ee:	4638      	mov	r0, r7
 800b0f0:	f001 f9c6 	bl	800c480 <__mcmp>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	db24      	blt.n	800b142 <quorem+0xf2>
 800b0f8:	3601      	adds	r6, #1
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f04f 0c00 	mov.w	ip, #0
 800b100:	f858 2b04 	ldr.w	r2, [r8], #4
 800b104:	f8d0 e000 	ldr.w	lr, [r0]
 800b108:	b293      	uxth	r3, r2
 800b10a:	ebac 0303 	sub.w	r3, ip, r3
 800b10e:	0c12      	lsrs	r2, r2, #16
 800b110:	fa13 f38e 	uxtah	r3, r3, lr
 800b114:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b118:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b122:	45c1      	cmp	r9, r8
 800b124:	f840 3b04 	str.w	r3, [r0], #4
 800b128:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b12c:	d2e8      	bcs.n	800b100 <quorem+0xb0>
 800b12e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b132:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b136:	b922      	cbnz	r2, 800b142 <quorem+0xf2>
 800b138:	3b04      	subs	r3, #4
 800b13a:	429d      	cmp	r5, r3
 800b13c:	461a      	mov	r2, r3
 800b13e:	d30a      	bcc.n	800b156 <quorem+0x106>
 800b140:	613c      	str	r4, [r7, #16]
 800b142:	4630      	mov	r0, r6
 800b144:	b003      	add	sp, #12
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	6812      	ldr	r2, [r2, #0]
 800b14c:	3b04      	subs	r3, #4
 800b14e:	2a00      	cmp	r2, #0
 800b150:	d1cc      	bne.n	800b0ec <quorem+0x9c>
 800b152:	3c01      	subs	r4, #1
 800b154:	e7c7      	b.n	800b0e6 <quorem+0x96>
 800b156:	6812      	ldr	r2, [r2, #0]
 800b158:	3b04      	subs	r3, #4
 800b15a:	2a00      	cmp	r2, #0
 800b15c:	d1f0      	bne.n	800b140 <quorem+0xf0>
 800b15e:	3c01      	subs	r4, #1
 800b160:	e7eb      	b.n	800b13a <quorem+0xea>
 800b162:	2000      	movs	r0, #0
 800b164:	e7ee      	b.n	800b144 <quorem+0xf4>
	...

0800b168 <_dtoa_r>:
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	ed2d 8b04 	vpush	{d8-d9}
 800b170:	ec57 6b10 	vmov	r6, r7, d0
 800b174:	b093      	sub	sp, #76	; 0x4c
 800b176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b178:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b17c:	9106      	str	r1, [sp, #24]
 800b17e:	ee10 aa10 	vmov	sl, s0
 800b182:	4604      	mov	r4, r0
 800b184:	9209      	str	r2, [sp, #36]	; 0x24
 800b186:	930c      	str	r3, [sp, #48]	; 0x30
 800b188:	46bb      	mov	fp, r7
 800b18a:	b975      	cbnz	r5, 800b1aa <_dtoa_r+0x42>
 800b18c:	2010      	movs	r0, #16
 800b18e:	f7fe ff89 	bl	800a0a4 <malloc>
 800b192:	4602      	mov	r2, r0
 800b194:	6260      	str	r0, [r4, #36]	; 0x24
 800b196:	b920      	cbnz	r0, 800b1a2 <_dtoa_r+0x3a>
 800b198:	4ba7      	ldr	r3, [pc, #668]	; (800b438 <_dtoa_r+0x2d0>)
 800b19a:	21ea      	movs	r1, #234	; 0xea
 800b19c:	48a7      	ldr	r0, [pc, #668]	; (800b43c <_dtoa_r+0x2d4>)
 800b19e:	f7ff ff39 	bl	800b014 <__assert_func>
 800b1a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b1a6:	6005      	str	r5, [r0, #0]
 800b1a8:	60c5      	str	r5, [r0, #12]
 800b1aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1ac:	6819      	ldr	r1, [r3, #0]
 800b1ae:	b151      	cbz	r1, 800b1c6 <_dtoa_r+0x5e>
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	604a      	str	r2, [r1, #4]
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	4093      	lsls	r3, r2
 800b1b8:	608b      	str	r3, [r1, #8]
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 ff1e 	bl	800bffc <_Bfree>
 800b1c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	1e3b      	subs	r3, r7, #0
 800b1c8:	bfaa      	itet	ge
 800b1ca:	2300      	movge	r3, #0
 800b1cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b1d0:	f8c8 3000 	strge.w	r3, [r8]
 800b1d4:	4b9a      	ldr	r3, [pc, #616]	; (800b440 <_dtoa_r+0x2d8>)
 800b1d6:	bfbc      	itt	lt
 800b1d8:	2201      	movlt	r2, #1
 800b1da:	f8c8 2000 	strlt.w	r2, [r8]
 800b1de:	ea33 030b 	bics.w	r3, r3, fp
 800b1e2:	d11b      	bne.n	800b21c <_dtoa_r+0xb4>
 800b1e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1e6:	f242 730f 	movw	r3, #9999	; 0x270f
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b1f0:	4333      	orrs	r3, r6
 800b1f2:	f000 8592 	beq.w	800bd1a <_dtoa_r+0xbb2>
 800b1f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1f8:	b963      	cbnz	r3, 800b214 <_dtoa_r+0xac>
 800b1fa:	4b92      	ldr	r3, [pc, #584]	; (800b444 <_dtoa_r+0x2dc>)
 800b1fc:	e022      	b.n	800b244 <_dtoa_r+0xdc>
 800b1fe:	4b92      	ldr	r3, [pc, #584]	; (800b448 <_dtoa_r+0x2e0>)
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	3308      	adds	r3, #8
 800b204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	9801      	ldr	r0, [sp, #4]
 800b20a:	b013      	add	sp, #76	; 0x4c
 800b20c:	ecbd 8b04 	vpop	{d8-d9}
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	4b8b      	ldr	r3, [pc, #556]	; (800b444 <_dtoa_r+0x2dc>)
 800b216:	9301      	str	r3, [sp, #4]
 800b218:	3303      	adds	r3, #3
 800b21a:	e7f3      	b.n	800b204 <_dtoa_r+0x9c>
 800b21c:	2200      	movs	r2, #0
 800b21e:	2300      	movs	r3, #0
 800b220:	4650      	mov	r0, sl
 800b222:	4659      	mov	r1, fp
 800b224:	f7f5 fc70 	bl	8000b08 <__aeabi_dcmpeq>
 800b228:	ec4b ab19 	vmov	d9, sl, fp
 800b22c:	4680      	mov	r8, r0
 800b22e:	b158      	cbz	r0, 800b248 <_dtoa_r+0xe0>
 800b230:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b232:	2301      	movs	r3, #1
 800b234:	6013      	str	r3, [r2, #0]
 800b236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b238:	2b00      	cmp	r3, #0
 800b23a:	f000 856b 	beq.w	800bd14 <_dtoa_r+0xbac>
 800b23e:	4883      	ldr	r0, [pc, #524]	; (800b44c <_dtoa_r+0x2e4>)
 800b240:	6018      	str	r0, [r3, #0]
 800b242:	1e43      	subs	r3, r0, #1
 800b244:	9301      	str	r3, [sp, #4]
 800b246:	e7df      	b.n	800b208 <_dtoa_r+0xa0>
 800b248:	ec4b ab10 	vmov	d0, sl, fp
 800b24c:	aa10      	add	r2, sp, #64	; 0x40
 800b24e:	a911      	add	r1, sp, #68	; 0x44
 800b250:	4620      	mov	r0, r4
 800b252:	f001 f9bb 	bl	800c5cc <__d2b>
 800b256:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b25a:	ee08 0a10 	vmov	s16, r0
 800b25e:	2d00      	cmp	r5, #0
 800b260:	f000 8084 	beq.w	800b36c <_dtoa_r+0x204>
 800b264:	ee19 3a90 	vmov	r3, s19
 800b268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b26c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b270:	4656      	mov	r6, sl
 800b272:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b276:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b27a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b27e:	4b74      	ldr	r3, [pc, #464]	; (800b450 <_dtoa_r+0x2e8>)
 800b280:	2200      	movs	r2, #0
 800b282:	4630      	mov	r0, r6
 800b284:	4639      	mov	r1, r7
 800b286:	f7f5 f81f 	bl	80002c8 <__aeabi_dsub>
 800b28a:	a365      	add	r3, pc, #404	; (adr r3, 800b420 <_dtoa_r+0x2b8>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f9d2 	bl	8000638 <__aeabi_dmul>
 800b294:	a364      	add	r3, pc, #400	; (adr r3, 800b428 <_dtoa_r+0x2c0>)
 800b296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29a:	f7f5 f817 	bl	80002cc <__adddf3>
 800b29e:	4606      	mov	r6, r0
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	460f      	mov	r7, r1
 800b2a4:	f7f5 f95e 	bl	8000564 <__aeabi_i2d>
 800b2a8:	a361      	add	r3, pc, #388	; (adr r3, 800b430 <_dtoa_r+0x2c8>)
 800b2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ae:	f7f5 f9c3 	bl	8000638 <__aeabi_dmul>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4639      	mov	r1, r7
 800b2ba:	f7f5 f807 	bl	80002cc <__adddf3>
 800b2be:	4606      	mov	r6, r0
 800b2c0:	460f      	mov	r7, r1
 800b2c2:	f7f5 fc69 	bl	8000b98 <__aeabi_d2iz>
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	9000      	str	r0, [sp, #0]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	4639      	mov	r1, r7
 800b2d0:	f7f5 fc24 	bl	8000b1c <__aeabi_dcmplt>
 800b2d4:	b150      	cbz	r0, 800b2ec <_dtoa_r+0x184>
 800b2d6:	9800      	ldr	r0, [sp, #0]
 800b2d8:	f7f5 f944 	bl	8000564 <__aeabi_i2d>
 800b2dc:	4632      	mov	r2, r6
 800b2de:	463b      	mov	r3, r7
 800b2e0:	f7f5 fc12 	bl	8000b08 <__aeabi_dcmpeq>
 800b2e4:	b910      	cbnz	r0, 800b2ec <_dtoa_r+0x184>
 800b2e6:	9b00      	ldr	r3, [sp, #0]
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	9b00      	ldr	r3, [sp, #0]
 800b2ee:	2b16      	cmp	r3, #22
 800b2f0:	d85a      	bhi.n	800b3a8 <_dtoa_r+0x240>
 800b2f2:	9a00      	ldr	r2, [sp, #0]
 800b2f4:	4b57      	ldr	r3, [pc, #348]	; (800b454 <_dtoa_r+0x2ec>)
 800b2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2fe:	ec51 0b19 	vmov	r0, r1, d9
 800b302:	f7f5 fc0b 	bl	8000b1c <__aeabi_dcmplt>
 800b306:	2800      	cmp	r0, #0
 800b308:	d050      	beq.n	800b3ac <_dtoa_r+0x244>
 800b30a:	9b00      	ldr	r3, [sp, #0]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	9300      	str	r3, [sp, #0]
 800b310:	2300      	movs	r3, #0
 800b312:	930b      	str	r3, [sp, #44]	; 0x2c
 800b314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b316:	1b5d      	subs	r5, r3, r5
 800b318:	1e6b      	subs	r3, r5, #1
 800b31a:	9305      	str	r3, [sp, #20]
 800b31c:	bf45      	ittet	mi
 800b31e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b322:	9304      	strmi	r3, [sp, #16]
 800b324:	2300      	movpl	r3, #0
 800b326:	2300      	movmi	r3, #0
 800b328:	bf4c      	ite	mi
 800b32a:	9305      	strmi	r3, [sp, #20]
 800b32c:	9304      	strpl	r3, [sp, #16]
 800b32e:	9b00      	ldr	r3, [sp, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	db3d      	blt.n	800b3b0 <_dtoa_r+0x248>
 800b334:	9b05      	ldr	r3, [sp, #20]
 800b336:	9a00      	ldr	r2, [sp, #0]
 800b338:	920a      	str	r2, [sp, #40]	; 0x28
 800b33a:	4413      	add	r3, r2
 800b33c:	9305      	str	r3, [sp, #20]
 800b33e:	2300      	movs	r3, #0
 800b340:	9307      	str	r3, [sp, #28]
 800b342:	9b06      	ldr	r3, [sp, #24]
 800b344:	2b09      	cmp	r3, #9
 800b346:	f200 8089 	bhi.w	800b45c <_dtoa_r+0x2f4>
 800b34a:	2b05      	cmp	r3, #5
 800b34c:	bfc4      	itt	gt
 800b34e:	3b04      	subgt	r3, #4
 800b350:	9306      	strgt	r3, [sp, #24]
 800b352:	9b06      	ldr	r3, [sp, #24]
 800b354:	f1a3 0302 	sub.w	r3, r3, #2
 800b358:	bfcc      	ite	gt
 800b35a:	2500      	movgt	r5, #0
 800b35c:	2501      	movle	r5, #1
 800b35e:	2b03      	cmp	r3, #3
 800b360:	f200 8087 	bhi.w	800b472 <_dtoa_r+0x30a>
 800b364:	e8df f003 	tbb	[pc, r3]
 800b368:	59383a2d 	.word	0x59383a2d
 800b36c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b370:	441d      	add	r5, r3
 800b372:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b376:	2b20      	cmp	r3, #32
 800b378:	bfc1      	itttt	gt
 800b37a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b37e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b382:	fa0b f303 	lslgt.w	r3, fp, r3
 800b386:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b38a:	bfda      	itte	le
 800b38c:	f1c3 0320 	rsble	r3, r3, #32
 800b390:	fa06 f003 	lslle.w	r0, r6, r3
 800b394:	4318      	orrgt	r0, r3
 800b396:	f7f5 f8d5 	bl	8000544 <__aeabi_ui2d>
 800b39a:	2301      	movs	r3, #1
 800b39c:	4606      	mov	r6, r0
 800b39e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b3a2:	3d01      	subs	r5, #1
 800b3a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b3a6:	e76a      	b.n	800b27e <_dtoa_r+0x116>
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e7b2      	b.n	800b312 <_dtoa_r+0x1aa>
 800b3ac:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3ae:	e7b1      	b.n	800b314 <_dtoa_r+0x1ac>
 800b3b0:	9b04      	ldr	r3, [sp, #16]
 800b3b2:	9a00      	ldr	r2, [sp, #0]
 800b3b4:	1a9b      	subs	r3, r3, r2
 800b3b6:	9304      	str	r3, [sp, #16]
 800b3b8:	4253      	negs	r3, r2
 800b3ba:	9307      	str	r3, [sp, #28]
 800b3bc:	2300      	movs	r3, #0
 800b3be:	930a      	str	r3, [sp, #40]	; 0x28
 800b3c0:	e7bf      	b.n	800b342 <_dtoa_r+0x1da>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	9308      	str	r3, [sp, #32]
 800b3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	dc55      	bgt.n	800b478 <_dtoa_r+0x310>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800b3d6:	e00c      	b.n	800b3f2 <_dtoa_r+0x28a>
 800b3d8:	2301      	movs	r3, #1
 800b3da:	e7f3      	b.n	800b3c4 <_dtoa_r+0x25c>
 800b3dc:	2300      	movs	r3, #0
 800b3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e0:	9308      	str	r3, [sp, #32]
 800b3e2:	9b00      	ldr	r3, [sp, #0]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	9302      	str	r3, [sp, #8]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	bfb8      	it	lt
 800b3f0:	2301      	movlt	r3, #1
 800b3f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	6042      	str	r2, [r0, #4]
 800b3f8:	2204      	movs	r2, #4
 800b3fa:	f102 0614 	add.w	r6, r2, #20
 800b3fe:	429e      	cmp	r6, r3
 800b400:	6841      	ldr	r1, [r0, #4]
 800b402:	d93d      	bls.n	800b480 <_dtoa_r+0x318>
 800b404:	4620      	mov	r0, r4
 800b406:	f000 fdb9 	bl	800bf7c <_Balloc>
 800b40a:	9001      	str	r0, [sp, #4]
 800b40c:	2800      	cmp	r0, #0
 800b40e:	d13b      	bne.n	800b488 <_dtoa_r+0x320>
 800b410:	4b11      	ldr	r3, [pc, #68]	; (800b458 <_dtoa_r+0x2f0>)
 800b412:	4602      	mov	r2, r0
 800b414:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b418:	e6c0      	b.n	800b19c <_dtoa_r+0x34>
 800b41a:	2301      	movs	r3, #1
 800b41c:	e7df      	b.n	800b3de <_dtoa_r+0x276>
 800b41e:	bf00      	nop
 800b420:	636f4361 	.word	0x636f4361
 800b424:	3fd287a7 	.word	0x3fd287a7
 800b428:	8b60c8b3 	.word	0x8b60c8b3
 800b42c:	3fc68a28 	.word	0x3fc68a28
 800b430:	509f79fb 	.word	0x509f79fb
 800b434:	3fd34413 	.word	0x3fd34413
 800b438:	0800e9fe 	.word	0x0800e9fe
 800b43c:	0800ea15 	.word	0x0800ea15
 800b440:	7ff00000 	.word	0x7ff00000
 800b444:	0800e9fa 	.word	0x0800e9fa
 800b448:	0800e9f1 	.word	0x0800e9f1
 800b44c:	0800e992 	.word	0x0800e992
 800b450:	3ff80000 	.word	0x3ff80000
 800b454:	0800eb68 	.word	0x0800eb68
 800b458:	0800ea70 	.word	0x0800ea70
 800b45c:	2501      	movs	r5, #1
 800b45e:	2300      	movs	r3, #0
 800b460:	9306      	str	r3, [sp, #24]
 800b462:	9508      	str	r5, [sp, #32]
 800b464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b468:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b46c:	2200      	movs	r2, #0
 800b46e:	2312      	movs	r3, #18
 800b470:	e7b0      	b.n	800b3d4 <_dtoa_r+0x26c>
 800b472:	2301      	movs	r3, #1
 800b474:	9308      	str	r3, [sp, #32]
 800b476:	e7f5      	b.n	800b464 <_dtoa_r+0x2fc>
 800b478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b47a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b47e:	e7b8      	b.n	800b3f2 <_dtoa_r+0x28a>
 800b480:	3101      	adds	r1, #1
 800b482:	6041      	str	r1, [r0, #4]
 800b484:	0052      	lsls	r2, r2, #1
 800b486:	e7b8      	b.n	800b3fa <_dtoa_r+0x292>
 800b488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b48a:	9a01      	ldr	r2, [sp, #4]
 800b48c:	601a      	str	r2, [r3, #0]
 800b48e:	9b03      	ldr	r3, [sp, #12]
 800b490:	2b0e      	cmp	r3, #14
 800b492:	f200 809d 	bhi.w	800b5d0 <_dtoa_r+0x468>
 800b496:	2d00      	cmp	r5, #0
 800b498:	f000 809a 	beq.w	800b5d0 <_dtoa_r+0x468>
 800b49c:	9b00      	ldr	r3, [sp, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	dd32      	ble.n	800b508 <_dtoa_r+0x3a0>
 800b4a2:	4ab7      	ldr	r2, [pc, #732]	; (800b780 <_dtoa_r+0x618>)
 800b4a4:	f003 030f 	and.w	r3, r3, #15
 800b4a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b4ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4b0:	9b00      	ldr	r3, [sp, #0]
 800b4b2:	05d8      	lsls	r0, r3, #23
 800b4b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b4b8:	d516      	bpl.n	800b4e8 <_dtoa_r+0x380>
 800b4ba:	4bb2      	ldr	r3, [pc, #712]	; (800b784 <_dtoa_r+0x61c>)
 800b4bc:	ec51 0b19 	vmov	r0, r1, d9
 800b4c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b4c4:	f7f5 f9e2 	bl	800088c <__aeabi_ddiv>
 800b4c8:	f007 070f 	and.w	r7, r7, #15
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	468b      	mov	fp, r1
 800b4d0:	2503      	movs	r5, #3
 800b4d2:	4eac      	ldr	r6, [pc, #688]	; (800b784 <_dtoa_r+0x61c>)
 800b4d4:	b957      	cbnz	r7, 800b4ec <_dtoa_r+0x384>
 800b4d6:	4642      	mov	r2, r8
 800b4d8:	464b      	mov	r3, r9
 800b4da:	4650      	mov	r0, sl
 800b4dc:	4659      	mov	r1, fp
 800b4de:	f7f5 f9d5 	bl	800088c <__aeabi_ddiv>
 800b4e2:	4682      	mov	sl, r0
 800b4e4:	468b      	mov	fp, r1
 800b4e6:	e028      	b.n	800b53a <_dtoa_r+0x3d2>
 800b4e8:	2502      	movs	r5, #2
 800b4ea:	e7f2      	b.n	800b4d2 <_dtoa_r+0x36a>
 800b4ec:	07f9      	lsls	r1, r7, #31
 800b4ee:	d508      	bpl.n	800b502 <_dtoa_r+0x39a>
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b4f8:	f7f5 f89e 	bl	8000638 <__aeabi_dmul>
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	4680      	mov	r8, r0
 800b500:	4689      	mov	r9, r1
 800b502:	107f      	asrs	r7, r7, #1
 800b504:	3608      	adds	r6, #8
 800b506:	e7e5      	b.n	800b4d4 <_dtoa_r+0x36c>
 800b508:	f000 809b 	beq.w	800b642 <_dtoa_r+0x4da>
 800b50c:	9b00      	ldr	r3, [sp, #0]
 800b50e:	4f9d      	ldr	r7, [pc, #628]	; (800b784 <_dtoa_r+0x61c>)
 800b510:	425e      	negs	r6, r3
 800b512:	4b9b      	ldr	r3, [pc, #620]	; (800b780 <_dtoa_r+0x618>)
 800b514:	f006 020f 	and.w	r2, r6, #15
 800b518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	ec51 0b19 	vmov	r0, r1, d9
 800b524:	f7f5 f888 	bl	8000638 <__aeabi_dmul>
 800b528:	1136      	asrs	r6, r6, #4
 800b52a:	4682      	mov	sl, r0
 800b52c:	468b      	mov	fp, r1
 800b52e:	2300      	movs	r3, #0
 800b530:	2502      	movs	r5, #2
 800b532:	2e00      	cmp	r6, #0
 800b534:	d17a      	bne.n	800b62c <_dtoa_r+0x4c4>
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1d3      	bne.n	800b4e2 <_dtoa_r+0x37a>
 800b53a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	f000 8082 	beq.w	800b646 <_dtoa_r+0x4de>
 800b542:	4b91      	ldr	r3, [pc, #580]	; (800b788 <_dtoa_r+0x620>)
 800b544:	2200      	movs	r2, #0
 800b546:	4650      	mov	r0, sl
 800b548:	4659      	mov	r1, fp
 800b54a:	f7f5 fae7 	bl	8000b1c <__aeabi_dcmplt>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d079      	beq.n	800b646 <_dtoa_r+0x4de>
 800b552:	9b03      	ldr	r3, [sp, #12]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d076      	beq.n	800b646 <_dtoa_r+0x4de>
 800b558:	9b02      	ldr	r3, [sp, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	dd36      	ble.n	800b5cc <_dtoa_r+0x464>
 800b55e:	9b00      	ldr	r3, [sp, #0]
 800b560:	4650      	mov	r0, sl
 800b562:	4659      	mov	r1, fp
 800b564:	1e5f      	subs	r7, r3, #1
 800b566:	2200      	movs	r2, #0
 800b568:	4b88      	ldr	r3, [pc, #544]	; (800b78c <_dtoa_r+0x624>)
 800b56a:	f7f5 f865 	bl	8000638 <__aeabi_dmul>
 800b56e:	9e02      	ldr	r6, [sp, #8]
 800b570:	4682      	mov	sl, r0
 800b572:	468b      	mov	fp, r1
 800b574:	3501      	adds	r5, #1
 800b576:	4628      	mov	r0, r5
 800b578:	f7f4 fff4 	bl	8000564 <__aeabi_i2d>
 800b57c:	4652      	mov	r2, sl
 800b57e:	465b      	mov	r3, fp
 800b580:	f7f5 f85a 	bl	8000638 <__aeabi_dmul>
 800b584:	4b82      	ldr	r3, [pc, #520]	; (800b790 <_dtoa_r+0x628>)
 800b586:	2200      	movs	r2, #0
 800b588:	f7f4 fea0 	bl	80002cc <__adddf3>
 800b58c:	46d0      	mov	r8, sl
 800b58e:	46d9      	mov	r9, fp
 800b590:	4682      	mov	sl, r0
 800b592:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b596:	2e00      	cmp	r6, #0
 800b598:	d158      	bne.n	800b64c <_dtoa_r+0x4e4>
 800b59a:	4b7e      	ldr	r3, [pc, #504]	; (800b794 <_dtoa_r+0x62c>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f4 fe91 	bl	80002c8 <__aeabi_dsub>
 800b5a6:	4652      	mov	r2, sl
 800b5a8:	465b      	mov	r3, fp
 800b5aa:	4680      	mov	r8, r0
 800b5ac:	4689      	mov	r9, r1
 800b5ae:	f7f5 fad3 	bl	8000b58 <__aeabi_dcmpgt>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	f040 8295 	bne.w	800bae2 <_dtoa_r+0x97a>
 800b5b8:	4652      	mov	r2, sl
 800b5ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b5be:	4640      	mov	r0, r8
 800b5c0:	4649      	mov	r1, r9
 800b5c2:	f7f5 faab 	bl	8000b1c <__aeabi_dcmplt>
 800b5c6:	2800      	cmp	r0, #0
 800b5c8:	f040 8289 	bne.w	800bade <_dtoa_r+0x976>
 800b5cc:	ec5b ab19 	vmov	sl, fp, d9
 800b5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f2c0 8148 	blt.w	800b868 <_dtoa_r+0x700>
 800b5d8:	9a00      	ldr	r2, [sp, #0]
 800b5da:	2a0e      	cmp	r2, #14
 800b5dc:	f300 8144 	bgt.w	800b868 <_dtoa_r+0x700>
 800b5e0:	4b67      	ldr	r3, [pc, #412]	; (800b780 <_dtoa_r+0x618>)
 800b5e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b5e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b5ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f280 80d5 	bge.w	800b79c <_dtoa_r+0x634>
 800b5f2:	9b03      	ldr	r3, [sp, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f300 80d1 	bgt.w	800b79c <_dtoa_r+0x634>
 800b5fa:	f040 826f 	bne.w	800badc <_dtoa_r+0x974>
 800b5fe:	4b65      	ldr	r3, [pc, #404]	; (800b794 <_dtoa_r+0x62c>)
 800b600:	2200      	movs	r2, #0
 800b602:	4640      	mov	r0, r8
 800b604:	4649      	mov	r1, r9
 800b606:	f7f5 f817 	bl	8000638 <__aeabi_dmul>
 800b60a:	4652      	mov	r2, sl
 800b60c:	465b      	mov	r3, fp
 800b60e:	f7f5 fa99 	bl	8000b44 <__aeabi_dcmpge>
 800b612:	9e03      	ldr	r6, [sp, #12]
 800b614:	4637      	mov	r7, r6
 800b616:	2800      	cmp	r0, #0
 800b618:	f040 8245 	bne.w	800baa6 <_dtoa_r+0x93e>
 800b61c:	9d01      	ldr	r5, [sp, #4]
 800b61e:	2331      	movs	r3, #49	; 0x31
 800b620:	f805 3b01 	strb.w	r3, [r5], #1
 800b624:	9b00      	ldr	r3, [sp, #0]
 800b626:	3301      	adds	r3, #1
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	e240      	b.n	800baae <_dtoa_r+0x946>
 800b62c:	07f2      	lsls	r2, r6, #31
 800b62e:	d505      	bpl.n	800b63c <_dtoa_r+0x4d4>
 800b630:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b634:	f7f5 f800 	bl	8000638 <__aeabi_dmul>
 800b638:	3501      	adds	r5, #1
 800b63a:	2301      	movs	r3, #1
 800b63c:	1076      	asrs	r6, r6, #1
 800b63e:	3708      	adds	r7, #8
 800b640:	e777      	b.n	800b532 <_dtoa_r+0x3ca>
 800b642:	2502      	movs	r5, #2
 800b644:	e779      	b.n	800b53a <_dtoa_r+0x3d2>
 800b646:	9f00      	ldr	r7, [sp, #0]
 800b648:	9e03      	ldr	r6, [sp, #12]
 800b64a:	e794      	b.n	800b576 <_dtoa_r+0x40e>
 800b64c:	9901      	ldr	r1, [sp, #4]
 800b64e:	4b4c      	ldr	r3, [pc, #304]	; (800b780 <_dtoa_r+0x618>)
 800b650:	4431      	add	r1, r6
 800b652:	910d      	str	r1, [sp, #52]	; 0x34
 800b654:	9908      	ldr	r1, [sp, #32]
 800b656:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b65a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b65e:	2900      	cmp	r1, #0
 800b660:	d043      	beq.n	800b6ea <_dtoa_r+0x582>
 800b662:	494d      	ldr	r1, [pc, #308]	; (800b798 <_dtoa_r+0x630>)
 800b664:	2000      	movs	r0, #0
 800b666:	f7f5 f911 	bl	800088c <__aeabi_ddiv>
 800b66a:	4652      	mov	r2, sl
 800b66c:	465b      	mov	r3, fp
 800b66e:	f7f4 fe2b 	bl	80002c8 <__aeabi_dsub>
 800b672:	9d01      	ldr	r5, [sp, #4]
 800b674:	4682      	mov	sl, r0
 800b676:	468b      	mov	fp, r1
 800b678:	4649      	mov	r1, r9
 800b67a:	4640      	mov	r0, r8
 800b67c:	f7f5 fa8c 	bl	8000b98 <__aeabi_d2iz>
 800b680:	4606      	mov	r6, r0
 800b682:	f7f4 ff6f 	bl	8000564 <__aeabi_i2d>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4640      	mov	r0, r8
 800b68c:	4649      	mov	r1, r9
 800b68e:	f7f4 fe1b 	bl	80002c8 <__aeabi_dsub>
 800b692:	3630      	adds	r6, #48	; 0x30
 800b694:	f805 6b01 	strb.w	r6, [r5], #1
 800b698:	4652      	mov	r2, sl
 800b69a:	465b      	mov	r3, fp
 800b69c:	4680      	mov	r8, r0
 800b69e:	4689      	mov	r9, r1
 800b6a0:	f7f5 fa3c 	bl	8000b1c <__aeabi_dcmplt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d163      	bne.n	800b770 <_dtoa_r+0x608>
 800b6a8:	4642      	mov	r2, r8
 800b6aa:	464b      	mov	r3, r9
 800b6ac:	4936      	ldr	r1, [pc, #216]	; (800b788 <_dtoa_r+0x620>)
 800b6ae:	2000      	movs	r0, #0
 800b6b0:	f7f4 fe0a 	bl	80002c8 <__aeabi_dsub>
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	465b      	mov	r3, fp
 800b6b8:	f7f5 fa30 	bl	8000b1c <__aeabi_dcmplt>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	f040 80b5 	bne.w	800b82c <_dtoa_r+0x6c4>
 800b6c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6c4:	429d      	cmp	r5, r3
 800b6c6:	d081      	beq.n	800b5cc <_dtoa_r+0x464>
 800b6c8:	4b30      	ldr	r3, [pc, #192]	; (800b78c <_dtoa_r+0x624>)
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	4650      	mov	r0, sl
 800b6ce:	4659      	mov	r1, fp
 800b6d0:	f7f4 ffb2 	bl	8000638 <__aeabi_dmul>
 800b6d4:	4b2d      	ldr	r3, [pc, #180]	; (800b78c <_dtoa_r+0x624>)
 800b6d6:	4682      	mov	sl, r0
 800b6d8:	468b      	mov	fp, r1
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4649      	mov	r1, r9
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f7f4 ffaa 	bl	8000638 <__aeabi_dmul>
 800b6e4:	4680      	mov	r8, r0
 800b6e6:	4689      	mov	r9, r1
 800b6e8:	e7c6      	b.n	800b678 <_dtoa_r+0x510>
 800b6ea:	4650      	mov	r0, sl
 800b6ec:	4659      	mov	r1, fp
 800b6ee:	f7f4 ffa3 	bl	8000638 <__aeabi_dmul>
 800b6f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6f4:	9d01      	ldr	r5, [sp, #4]
 800b6f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6f8:	4682      	mov	sl, r0
 800b6fa:	468b      	mov	fp, r1
 800b6fc:	4649      	mov	r1, r9
 800b6fe:	4640      	mov	r0, r8
 800b700:	f7f5 fa4a 	bl	8000b98 <__aeabi_d2iz>
 800b704:	4606      	mov	r6, r0
 800b706:	f7f4 ff2d 	bl	8000564 <__aeabi_i2d>
 800b70a:	3630      	adds	r6, #48	; 0x30
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4640      	mov	r0, r8
 800b712:	4649      	mov	r1, r9
 800b714:	f7f4 fdd8 	bl	80002c8 <__aeabi_dsub>
 800b718:	f805 6b01 	strb.w	r6, [r5], #1
 800b71c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b71e:	429d      	cmp	r5, r3
 800b720:	4680      	mov	r8, r0
 800b722:	4689      	mov	r9, r1
 800b724:	f04f 0200 	mov.w	r2, #0
 800b728:	d124      	bne.n	800b774 <_dtoa_r+0x60c>
 800b72a:	4b1b      	ldr	r3, [pc, #108]	; (800b798 <_dtoa_r+0x630>)
 800b72c:	4650      	mov	r0, sl
 800b72e:	4659      	mov	r1, fp
 800b730:	f7f4 fdcc 	bl	80002cc <__adddf3>
 800b734:	4602      	mov	r2, r0
 800b736:	460b      	mov	r3, r1
 800b738:	4640      	mov	r0, r8
 800b73a:	4649      	mov	r1, r9
 800b73c:	f7f5 fa0c 	bl	8000b58 <__aeabi_dcmpgt>
 800b740:	2800      	cmp	r0, #0
 800b742:	d173      	bne.n	800b82c <_dtoa_r+0x6c4>
 800b744:	4652      	mov	r2, sl
 800b746:	465b      	mov	r3, fp
 800b748:	4913      	ldr	r1, [pc, #76]	; (800b798 <_dtoa_r+0x630>)
 800b74a:	2000      	movs	r0, #0
 800b74c:	f7f4 fdbc 	bl	80002c8 <__aeabi_dsub>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	4640      	mov	r0, r8
 800b756:	4649      	mov	r1, r9
 800b758:	f7f5 f9e0 	bl	8000b1c <__aeabi_dcmplt>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f43f af35 	beq.w	800b5cc <_dtoa_r+0x464>
 800b762:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b764:	1e6b      	subs	r3, r5, #1
 800b766:	930f      	str	r3, [sp, #60]	; 0x3c
 800b768:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b76c:	2b30      	cmp	r3, #48	; 0x30
 800b76e:	d0f8      	beq.n	800b762 <_dtoa_r+0x5fa>
 800b770:	9700      	str	r7, [sp, #0]
 800b772:	e049      	b.n	800b808 <_dtoa_r+0x6a0>
 800b774:	4b05      	ldr	r3, [pc, #20]	; (800b78c <_dtoa_r+0x624>)
 800b776:	f7f4 ff5f 	bl	8000638 <__aeabi_dmul>
 800b77a:	4680      	mov	r8, r0
 800b77c:	4689      	mov	r9, r1
 800b77e:	e7bd      	b.n	800b6fc <_dtoa_r+0x594>
 800b780:	0800eb68 	.word	0x0800eb68
 800b784:	0800eb40 	.word	0x0800eb40
 800b788:	3ff00000 	.word	0x3ff00000
 800b78c:	40240000 	.word	0x40240000
 800b790:	401c0000 	.word	0x401c0000
 800b794:	40140000 	.word	0x40140000
 800b798:	3fe00000 	.word	0x3fe00000
 800b79c:	9d01      	ldr	r5, [sp, #4]
 800b79e:	4656      	mov	r6, sl
 800b7a0:	465f      	mov	r7, fp
 800b7a2:	4642      	mov	r2, r8
 800b7a4:	464b      	mov	r3, r9
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	f7f5 f86f 	bl	800088c <__aeabi_ddiv>
 800b7ae:	f7f5 f9f3 	bl	8000b98 <__aeabi_d2iz>
 800b7b2:	4682      	mov	sl, r0
 800b7b4:	f7f4 fed6 	bl	8000564 <__aeabi_i2d>
 800b7b8:	4642      	mov	r2, r8
 800b7ba:	464b      	mov	r3, r9
 800b7bc:	f7f4 ff3c 	bl	8000638 <__aeabi_dmul>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b7cc:	f7f4 fd7c 	bl	80002c8 <__aeabi_dsub>
 800b7d0:	f805 6b01 	strb.w	r6, [r5], #1
 800b7d4:	9e01      	ldr	r6, [sp, #4]
 800b7d6:	9f03      	ldr	r7, [sp, #12]
 800b7d8:	1bae      	subs	r6, r5, r6
 800b7da:	42b7      	cmp	r7, r6
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	d135      	bne.n	800b84e <_dtoa_r+0x6e6>
 800b7e2:	f7f4 fd73 	bl	80002cc <__adddf3>
 800b7e6:	4642      	mov	r2, r8
 800b7e8:	464b      	mov	r3, r9
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	460f      	mov	r7, r1
 800b7ee:	f7f5 f9b3 	bl	8000b58 <__aeabi_dcmpgt>
 800b7f2:	b9d0      	cbnz	r0, 800b82a <_dtoa_r+0x6c2>
 800b7f4:	4642      	mov	r2, r8
 800b7f6:	464b      	mov	r3, r9
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f7f5 f984 	bl	8000b08 <__aeabi_dcmpeq>
 800b800:	b110      	cbz	r0, 800b808 <_dtoa_r+0x6a0>
 800b802:	f01a 0f01 	tst.w	sl, #1
 800b806:	d110      	bne.n	800b82a <_dtoa_r+0x6c2>
 800b808:	4620      	mov	r0, r4
 800b80a:	ee18 1a10 	vmov	r1, s16
 800b80e:	f000 fbf5 	bl	800bffc <_Bfree>
 800b812:	2300      	movs	r3, #0
 800b814:	9800      	ldr	r0, [sp, #0]
 800b816:	702b      	strb	r3, [r5, #0]
 800b818:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b81a:	3001      	adds	r0, #1
 800b81c:	6018      	str	r0, [r3, #0]
 800b81e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b820:	2b00      	cmp	r3, #0
 800b822:	f43f acf1 	beq.w	800b208 <_dtoa_r+0xa0>
 800b826:	601d      	str	r5, [r3, #0]
 800b828:	e4ee      	b.n	800b208 <_dtoa_r+0xa0>
 800b82a:	9f00      	ldr	r7, [sp, #0]
 800b82c:	462b      	mov	r3, r5
 800b82e:	461d      	mov	r5, r3
 800b830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b834:	2a39      	cmp	r2, #57	; 0x39
 800b836:	d106      	bne.n	800b846 <_dtoa_r+0x6de>
 800b838:	9a01      	ldr	r2, [sp, #4]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d1f7      	bne.n	800b82e <_dtoa_r+0x6c6>
 800b83e:	9901      	ldr	r1, [sp, #4]
 800b840:	2230      	movs	r2, #48	; 0x30
 800b842:	3701      	adds	r7, #1
 800b844:	700a      	strb	r2, [r1, #0]
 800b846:	781a      	ldrb	r2, [r3, #0]
 800b848:	3201      	adds	r2, #1
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	e790      	b.n	800b770 <_dtoa_r+0x608>
 800b84e:	4ba6      	ldr	r3, [pc, #664]	; (800bae8 <_dtoa_r+0x980>)
 800b850:	2200      	movs	r2, #0
 800b852:	f7f4 fef1 	bl	8000638 <__aeabi_dmul>
 800b856:	2200      	movs	r2, #0
 800b858:	2300      	movs	r3, #0
 800b85a:	4606      	mov	r6, r0
 800b85c:	460f      	mov	r7, r1
 800b85e:	f7f5 f953 	bl	8000b08 <__aeabi_dcmpeq>
 800b862:	2800      	cmp	r0, #0
 800b864:	d09d      	beq.n	800b7a2 <_dtoa_r+0x63a>
 800b866:	e7cf      	b.n	800b808 <_dtoa_r+0x6a0>
 800b868:	9a08      	ldr	r2, [sp, #32]
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	f000 80d7 	beq.w	800ba1e <_dtoa_r+0x8b6>
 800b870:	9a06      	ldr	r2, [sp, #24]
 800b872:	2a01      	cmp	r2, #1
 800b874:	f300 80ba 	bgt.w	800b9ec <_dtoa_r+0x884>
 800b878:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b87a:	2a00      	cmp	r2, #0
 800b87c:	f000 80b2 	beq.w	800b9e4 <_dtoa_r+0x87c>
 800b880:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b884:	9e07      	ldr	r6, [sp, #28]
 800b886:	9d04      	ldr	r5, [sp, #16]
 800b888:	9a04      	ldr	r2, [sp, #16]
 800b88a:	441a      	add	r2, r3
 800b88c:	9204      	str	r2, [sp, #16]
 800b88e:	9a05      	ldr	r2, [sp, #20]
 800b890:	2101      	movs	r1, #1
 800b892:	441a      	add	r2, r3
 800b894:	4620      	mov	r0, r4
 800b896:	9205      	str	r2, [sp, #20]
 800b898:	f000 fc68 	bl	800c16c <__i2b>
 800b89c:	4607      	mov	r7, r0
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	dd0c      	ble.n	800b8bc <_dtoa_r+0x754>
 800b8a2:	9b05      	ldr	r3, [sp, #20]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dd09      	ble.n	800b8bc <_dtoa_r+0x754>
 800b8a8:	42ab      	cmp	r3, r5
 800b8aa:	9a04      	ldr	r2, [sp, #16]
 800b8ac:	bfa8      	it	ge
 800b8ae:	462b      	movge	r3, r5
 800b8b0:	1ad2      	subs	r2, r2, r3
 800b8b2:	9204      	str	r2, [sp, #16]
 800b8b4:	9a05      	ldr	r2, [sp, #20]
 800b8b6:	1aed      	subs	r5, r5, r3
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	9305      	str	r3, [sp, #20]
 800b8bc:	9b07      	ldr	r3, [sp, #28]
 800b8be:	b31b      	cbz	r3, 800b908 <_dtoa_r+0x7a0>
 800b8c0:	9b08      	ldr	r3, [sp, #32]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f000 80af 	beq.w	800ba26 <_dtoa_r+0x8be>
 800b8c8:	2e00      	cmp	r6, #0
 800b8ca:	dd13      	ble.n	800b8f4 <_dtoa_r+0x78c>
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	4632      	mov	r2, r6
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fd0b 	bl	800c2ec <__pow5mult>
 800b8d6:	ee18 2a10 	vmov	r2, s16
 800b8da:	4601      	mov	r1, r0
 800b8dc:	4607      	mov	r7, r0
 800b8de:	4620      	mov	r0, r4
 800b8e0:	f000 fc5a 	bl	800c198 <__multiply>
 800b8e4:	ee18 1a10 	vmov	r1, s16
 800b8e8:	4680      	mov	r8, r0
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fb86 	bl	800bffc <_Bfree>
 800b8f0:	ee08 8a10 	vmov	s16, r8
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	1b9a      	subs	r2, r3, r6
 800b8f8:	d006      	beq.n	800b908 <_dtoa_r+0x7a0>
 800b8fa:	ee18 1a10 	vmov	r1, s16
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 fcf4 	bl	800c2ec <__pow5mult>
 800b904:	ee08 0a10 	vmov	s16, r0
 800b908:	2101      	movs	r1, #1
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fc2e 	bl	800c16c <__i2b>
 800b910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b912:	2b00      	cmp	r3, #0
 800b914:	4606      	mov	r6, r0
 800b916:	f340 8088 	ble.w	800ba2a <_dtoa_r+0x8c2>
 800b91a:	461a      	mov	r2, r3
 800b91c:	4601      	mov	r1, r0
 800b91e:	4620      	mov	r0, r4
 800b920:	f000 fce4 	bl	800c2ec <__pow5mult>
 800b924:	9b06      	ldr	r3, [sp, #24]
 800b926:	2b01      	cmp	r3, #1
 800b928:	4606      	mov	r6, r0
 800b92a:	f340 8081 	ble.w	800ba30 <_dtoa_r+0x8c8>
 800b92e:	f04f 0800 	mov.w	r8, #0
 800b932:	6933      	ldr	r3, [r6, #16]
 800b934:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b938:	6918      	ldr	r0, [r3, #16]
 800b93a:	f000 fbc7 	bl	800c0cc <__hi0bits>
 800b93e:	f1c0 0020 	rsb	r0, r0, #32
 800b942:	9b05      	ldr	r3, [sp, #20]
 800b944:	4418      	add	r0, r3
 800b946:	f010 001f 	ands.w	r0, r0, #31
 800b94a:	f000 8092 	beq.w	800ba72 <_dtoa_r+0x90a>
 800b94e:	f1c0 0320 	rsb	r3, r0, #32
 800b952:	2b04      	cmp	r3, #4
 800b954:	f340 808a 	ble.w	800ba6c <_dtoa_r+0x904>
 800b958:	f1c0 001c 	rsb	r0, r0, #28
 800b95c:	9b04      	ldr	r3, [sp, #16]
 800b95e:	4403      	add	r3, r0
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	9b05      	ldr	r3, [sp, #20]
 800b964:	4403      	add	r3, r0
 800b966:	4405      	add	r5, r0
 800b968:	9305      	str	r3, [sp, #20]
 800b96a:	9b04      	ldr	r3, [sp, #16]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	dd07      	ble.n	800b980 <_dtoa_r+0x818>
 800b970:	ee18 1a10 	vmov	r1, s16
 800b974:	461a      	mov	r2, r3
 800b976:	4620      	mov	r0, r4
 800b978:	f000 fd12 	bl	800c3a0 <__lshift>
 800b97c:	ee08 0a10 	vmov	s16, r0
 800b980:	9b05      	ldr	r3, [sp, #20]
 800b982:	2b00      	cmp	r3, #0
 800b984:	dd05      	ble.n	800b992 <_dtoa_r+0x82a>
 800b986:	4631      	mov	r1, r6
 800b988:	461a      	mov	r2, r3
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 fd08 	bl	800c3a0 <__lshift>
 800b990:	4606      	mov	r6, r0
 800b992:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b994:	2b00      	cmp	r3, #0
 800b996:	d06e      	beq.n	800ba76 <_dtoa_r+0x90e>
 800b998:	ee18 0a10 	vmov	r0, s16
 800b99c:	4631      	mov	r1, r6
 800b99e:	f000 fd6f 	bl	800c480 <__mcmp>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	da67      	bge.n	800ba76 <_dtoa_r+0x90e>
 800b9a6:	9b00      	ldr	r3, [sp, #0]
 800b9a8:	3b01      	subs	r3, #1
 800b9aa:	ee18 1a10 	vmov	r1, s16
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	220a      	movs	r2, #10
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fb43 	bl	800c040 <__multadd>
 800b9ba:	9b08      	ldr	r3, [sp, #32]
 800b9bc:	ee08 0a10 	vmov	s16, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	f000 81b1 	beq.w	800bd28 <_dtoa_r+0xbc0>
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	220a      	movs	r2, #10
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f000 fb37 	bl	800c040 <__multadd>
 800b9d2:	9b02      	ldr	r3, [sp, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	f300 808e 	bgt.w	800baf8 <_dtoa_r+0x990>
 800b9dc:	9b06      	ldr	r3, [sp, #24]
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	dc51      	bgt.n	800ba86 <_dtoa_r+0x91e>
 800b9e2:	e089      	b.n	800baf8 <_dtoa_r+0x990>
 800b9e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b9e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b9ea:	e74b      	b.n	800b884 <_dtoa_r+0x71c>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	1e5e      	subs	r6, r3, #1
 800b9f0:	9b07      	ldr	r3, [sp, #28]
 800b9f2:	42b3      	cmp	r3, r6
 800b9f4:	bfbf      	itttt	lt
 800b9f6:	9b07      	ldrlt	r3, [sp, #28]
 800b9f8:	9607      	strlt	r6, [sp, #28]
 800b9fa:	1af2      	sublt	r2, r6, r3
 800b9fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b9fe:	bfb6      	itet	lt
 800ba00:	189b      	addlt	r3, r3, r2
 800ba02:	1b9e      	subge	r6, r3, r6
 800ba04:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	bfb8      	it	lt
 800ba0a:	2600      	movlt	r6, #0
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	bfb7      	itett	lt
 800ba10:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ba14:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ba18:	1a9d      	sublt	r5, r3, r2
 800ba1a:	2300      	movlt	r3, #0
 800ba1c:	e734      	b.n	800b888 <_dtoa_r+0x720>
 800ba1e:	9e07      	ldr	r6, [sp, #28]
 800ba20:	9d04      	ldr	r5, [sp, #16]
 800ba22:	9f08      	ldr	r7, [sp, #32]
 800ba24:	e73b      	b.n	800b89e <_dtoa_r+0x736>
 800ba26:	9a07      	ldr	r2, [sp, #28]
 800ba28:	e767      	b.n	800b8fa <_dtoa_r+0x792>
 800ba2a:	9b06      	ldr	r3, [sp, #24]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	dc18      	bgt.n	800ba62 <_dtoa_r+0x8fa>
 800ba30:	f1ba 0f00 	cmp.w	sl, #0
 800ba34:	d115      	bne.n	800ba62 <_dtoa_r+0x8fa>
 800ba36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ba3a:	b993      	cbnz	r3, 800ba62 <_dtoa_r+0x8fa>
 800ba3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ba40:	0d1b      	lsrs	r3, r3, #20
 800ba42:	051b      	lsls	r3, r3, #20
 800ba44:	b183      	cbz	r3, 800ba68 <_dtoa_r+0x900>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	9b05      	ldr	r3, [sp, #20]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	9305      	str	r3, [sp, #20]
 800ba52:	f04f 0801 	mov.w	r8, #1
 800ba56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f47f af6a 	bne.w	800b932 <_dtoa_r+0x7ca>
 800ba5e:	2001      	movs	r0, #1
 800ba60:	e76f      	b.n	800b942 <_dtoa_r+0x7da>
 800ba62:	f04f 0800 	mov.w	r8, #0
 800ba66:	e7f6      	b.n	800ba56 <_dtoa_r+0x8ee>
 800ba68:	4698      	mov	r8, r3
 800ba6a:	e7f4      	b.n	800ba56 <_dtoa_r+0x8ee>
 800ba6c:	f43f af7d 	beq.w	800b96a <_dtoa_r+0x802>
 800ba70:	4618      	mov	r0, r3
 800ba72:	301c      	adds	r0, #28
 800ba74:	e772      	b.n	800b95c <_dtoa_r+0x7f4>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	dc37      	bgt.n	800baec <_dtoa_r+0x984>
 800ba7c:	9b06      	ldr	r3, [sp, #24]
 800ba7e:	2b02      	cmp	r3, #2
 800ba80:	dd34      	ble.n	800baec <_dtoa_r+0x984>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	9302      	str	r3, [sp, #8]
 800ba86:	9b02      	ldr	r3, [sp, #8]
 800ba88:	b96b      	cbnz	r3, 800baa6 <_dtoa_r+0x93e>
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	2205      	movs	r2, #5
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fad6 	bl	800c040 <__multadd>
 800ba94:	4601      	mov	r1, r0
 800ba96:	4606      	mov	r6, r0
 800ba98:	ee18 0a10 	vmov	r0, s16
 800ba9c:	f000 fcf0 	bl	800c480 <__mcmp>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	f73f adbb 	bgt.w	800b61c <_dtoa_r+0x4b4>
 800baa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baa8:	9d01      	ldr	r5, [sp, #4]
 800baaa:	43db      	mvns	r3, r3
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	f04f 0800 	mov.w	r8, #0
 800bab2:	4631      	mov	r1, r6
 800bab4:	4620      	mov	r0, r4
 800bab6:	f000 faa1 	bl	800bffc <_Bfree>
 800baba:	2f00      	cmp	r7, #0
 800babc:	f43f aea4 	beq.w	800b808 <_dtoa_r+0x6a0>
 800bac0:	f1b8 0f00 	cmp.w	r8, #0
 800bac4:	d005      	beq.n	800bad2 <_dtoa_r+0x96a>
 800bac6:	45b8      	cmp	r8, r7
 800bac8:	d003      	beq.n	800bad2 <_dtoa_r+0x96a>
 800baca:	4641      	mov	r1, r8
 800bacc:	4620      	mov	r0, r4
 800bace:	f000 fa95 	bl	800bffc <_Bfree>
 800bad2:	4639      	mov	r1, r7
 800bad4:	4620      	mov	r0, r4
 800bad6:	f000 fa91 	bl	800bffc <_Bfree>
 800bada:	e695      	b.n	800b808 <_dtoa_r+0x6a0>
 800badc:	2600      	movs	r6, #0
 800bade:	4637      	mov	r7, r6
 800bae0:	e7e1      	b.n	800baa6 <_dtoa_r+0x93e>
 800bae2:	9700      	str	r7, [sp, #0]
 800bae4:	4637      	mov	r7, r6
 800bae6:	e599      	b.n	800b61c <_dtoa_r+0x4b4>
 800bae8:	40240000 	.word	0x40240000
 800baec:	9b08      	ldr	r3, [sp, #32]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 80ca 	beq.w	800bc88 <_dtoa_r+0xb20>
 800baf4:	9b03      	ldr	r3, [sp, #12]
 800baf6:	9302      	str	r3, [sp, #8]
 800baf8:	2d00      	cmp	r5, #0
 800bafa:	dd05      	ble.n	800bb08 <_dtoa_r+0x9a0>
 800bafc:	4639      	mov	r1, r7
 800bafe:	462a      	mov	r2, r5
 800bb00:	4620      	mov	r0, r4
 800bb02:	f000 fc4d 	bl	800c3a0 <__lshift>
 800bb06:	4607      	mov	r7, r0
 800bb08:	f1b8 0f00 	cmp.w	r8, #0
 800bb0c:	d05b      	beq.n	800bbc6 <_dtoa_r+0xa5e>
 800bb0e:	6879      	ldr	r1, [r7, #4]
 800bb10:	4620      	mov	r0, r4
 800bb12:	f000 fa33 	bl	800bf7c <_Balloc>
 800bb16:	4605      	mov	r5, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <_dtoa_r+0x9be>
 800bb1a:	4b87      	ldr	r3, [pc, #540]	; (800bd38 <_dtoa_r+0xbd0>)
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bb22:	f7ff bb3b 	b.w	800b19c <_dtoa_r+0x34>
 800bb26:	693a      	ldr	r2, [r7, #16]
 800bb28:	3202      	adds	r2, #2
 800bb2a:	0092      	lsls	r2, r2, #2
 800bb2c:	f107 010c 	add.w	r1, r7, #12
 800bb30:	300c      	adds	r0, #12
 800bb32:	f7fe fac7 	bl	800a0c4 <memcpy>
 800bb36:	2201      	movs	r2, #1
 800bb38:	4629      	mov	r1, r5
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	f000 fc30 	bl	800c3a0 <__lshift>
 800bb40:	9b01      	ldr	r3, [sp, #4]
 800bb42:	f103 0901 	add.w	r9, r3, #1
 800bb46:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	f00a 0301 	and.w	r3, sl, #1
 800bb52:	46b8      	mov	r8, r7
 800bb54:	9304      	str	r3, [sp, #16]
 800bb56:	4607      	mov	r7, r0
 800bb58:	4631      	mov	r1, r6
 800bb5a:	ee18 0a10 	vmov	r0, s16
 800bb5e:	f7ff fa77 	bl	800b050 <quorem>
 800bb62:	4641      	mov	r1, r8
 800bb64:	9002      	str	r0, [sp, #8]
 800bb66:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb6a:	ee18 0a10 	vmov	r0, s16
 800bb6e:	f000 fc87 	bl	800c480 <__mcmp>
 800bb72:	463a      	mov	r2, r7
 800bb74:	9003      	str	r0, [sp, #12]
 800bb76:	4631      	mov	r1, r6
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 fc9d 	bl	800c4b8 <__mdiff>
 800bb7e:	68c2      	ldr	r2, [r0, #12]
 800bb80:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800bb84:	4605      	mov	r5, r0
 800bb86:	bb02      	cbnz	r2, 800bbca <_dtoa_r+0xa62>
 800bb88:	4601      	mov	r1, r0
 800bb8a:	ee18 0a10 	vmov	r0, s16
 800bb8e:	f000 fc77 	bl	800c480 <__mcmp>
 800bb92:	4602      	mov	r2, r0
 800bb94:	4629      	mov	r1, r5
 800bb96:	4620      	mov	r0, r4
 800bb98:	9207      	str	r2, [sp, #28]
 800bb9a:	f000 fa2f 	bl	800bffc <_Bfree>
 800bb9e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bba2:	ea43 0102 	orr.w	r1, r3, r2
 800bba6:	9b04      	ldr	r3, [sp, #16]
 800bba8:	430b      	orrs	r3, r1
 800bbaa:	464d      	mov	r5, r9
 800bbac:	d10f      	bne.n	800bbce <_dtoa_r+0xa66>
 800bbae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bbb2:	d02a      	beq.n	800bc0a <_dtoa_r+0xaa2>
 800bbb4:	9b03      	ldr	r3, [sp, #12]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	dd02      	ble.n	800bbc0 <_dtoa_r+0xa58>
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bbc0:	f88b a000 	strb.w	sl, [fp]
 800bbc4:	e775      	b.n	800bab2 <_dtoa_r+0x94a>
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	e7ba      	b.n	800bb40 <_dtoa_r+0x9d8>
 800bbca:	2201      	movs	r2, #1
 800bbcc:	e7e2      	b.n	800bb94 <_dtoa_r+0xa2c>
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	db04      	blt.n	800bbde <_dtoa_r+0xa76>
 800bbd4:	9906      	ldr	r1, [sp, #24]
 800bbd6:	430b      	orrs	r3, r1
 800bbd8:	9904      	ldr	r1, [sp, #16]
 800bbda:	430b      	orrs	r3, r1
 800bbdc:	d122      	bne.n	800bc24 <_dtoa_r+0xabc>
 800bbde:	2a00      	cmp	r2, #0
 800bbe0:	ddee      	ble.n	800bbc0 <_dtoa_r+0xa58>
 800bbe2:	ee18 1a10 	vmov	r1, s16
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 fbd9 	bl	800c3a0 <__lshift>
 800bbee:	4631      	mov	r1, r6
 800bbf0:	ee08 0a10 	vmov	s16, r0
 800bbf4:	f000 fc44 	bl	800c480 <__mcmp>
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	dc03      	bgt.n	800bc04 <_dtoa_r+0xa9c>
 800bbfc:	d1e0      	bne.n	800bbc0 <_dtoa_r+0xa58>
 800bbfe:	f01a 0f01 	tst.w	sl, #1
 800bc02:	d0dd      	beq.n	800bbc0 <_dtoa_r+0xa58>
 800bc04:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc08:	d1d7      	bne.n	800bbba <_dtoa_r+0xa52>
 800bc0a:	2339      	movs	r3, #57	; 0x39
 800bc0c:	f88b 3000 	strb.w	r3, [fp]
 800bc10:	462b      	mov	r3, r5
 800bc12:	461d      	mov	r5, r3
 800bc14:	3b01      	subs	r3, #1
 800bc16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bc1a:	2a39      	cmp	r2, #57	; 0x39
 800bc1c:	d071      	beq.n	800bd02 <_dtoa_r+0xb9a>
 800bc1e:	3201      	adds	r2, #1
 800bc20:	701a      	strb	r2, [r3, #0]
 800bc22:	e746      	b.n	800bab2 <_dtoa_r+0x94a>
 800bc24:	2a00      	cmp	r2, #0
 800bc26:	dd07      	ble.n	800bc38 <_dtoa_r+0xad0>
 800bc28:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bc2c:	d0ed      	beq.n	800bc0a <_dtoa_r+0xaa2>
 800bc2e:	f10a 0301 	add.w	r3, sl, #1
 800bc32:	f88b 3000 	strb.w	r3, [fp]
 800bc36:	e73c      	b.n	800bab2 <_dtoa_r+0x94a>
 800bc38:	9b05      	ldr	r3, [sp, #20]
 800bc3a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bc3e:	4599      	cmp	r9, r3
 800bc40:	d047      	beq.n	800bcd2 <_dtoa_r+0xb6a>
 800bc42:	ee18 1a10 	vmov	r1, s16
 800bc46:	2300      	movs	r3, #0
 800bc48:	220a      	movs	r2, #10
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	f000 f9f8 	bl	800c040 <__multadd>
 800bc50:	45b8      	cmp	r8, r7
 800bc52:	ee08 0a10 	vmov	s16, r0
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	f04f 020a 	mov.w	r2, #10
 800bc5e:	4641      	mov	r1, r8
 800bc60:	4620      	mov	r0, r4
 800bc62:	d106      	bne.n	800bc72 <_dtoa_r+0xb0a>
 800bc64:	f000 f9ec 	bl	800c040 <__multadd>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	f109 0901 	add.w	r9, r9, #1
 800bc70:	e772      	b.n	800bb58 <_dtoa_r+0x9f0>
 800bc72:	f000 f9e5 	bl	800c040 <__multadd>
 800bc76:	4639      	mov	r1, r7
 800bc78:	4680      	mov	r8, r0
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	220a      	movs	r2, #10
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f000 f9de 	bl	800c040 <__multadd>
 800bc84:	4607      	mov	r7, r0
 800bc86:	e7f1      	b.n	800bc6c <_dtoa_r+0xb04>
 800bc88:	9b03      	ldr	r3, [sp, #12]
 800bc8a:	9302      	str	r3, [sp, #8]
 800bc8c:	9d01      	ldr	r5, [sp, #4]
 800bc8e:	ee18 0a10 	vmov	r0, s16
 800bc92:	4631      	mov	r1, r6
 800bc94:	f7ff f9dc 	bl	800b050 <quorem>
 800bc98:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bc9c:	9b01      	ldr	r3, [sp, #4]
 800bc9e:	f805 ab01 	strb.w	sl, [r5], #1
 800bca2:	1aea      	subs	r2, r5, r3
 800bca4:	9b02      	ldr	r3, [sp, #8]
 800bca6:	4293      	cmp	r3, r2
 800bca8:	dd09      	ble.n	800bcbe <_dtoa_r+0xb56>
 800bcaa:	ee18 1a10 	vmov	r1, s16
 800bcae:	2300      	movs	r3, #0
 800bcb0:	220a      	movs	r2, #10
 800bcb2:	4620      	mov	r0, r4
 800bcb4:	f000 f9c4 	bl	800c040 <__multadd>
 800bcb8:	ee08 0a10 	vmov	s16, r0
 800bcbc:	e7e7      	b.n	800bc8e <_dtoa_r+0xb26>
 800bcbe:	9b02      	ldr	r3, [sp, #8]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	bfc8      	it	gt
 800bcc4:	461d      	movgt	r5, r3
 800bcc6:	9b01      	ldr	r3, [sp, #4]
 800bcc8:	bfd8      	it	le
 800bcca:	2501      	movle	r5, #1
 800bccc:	441d      	add	r5, r3
 800bcce:	f04f 0800 	mov.w	r8, #0
 800bcd2:	ee18 1a10 	vmov	r1, s16
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fb61 	bl	800c3a0 <__lshift>
 800bcde:	4631      	mov	r1, r6
 800bce0:	ee08 0a10 	vmov	s16, r0
 800bce4:	f000 fbcc 	bl	800c480 <__mcmp>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	dc91      	bgt.n	800bc10 <_dtoa_r+0xaa8>
 800bcec:	d102      	bne.n	800bcf4 <_dtoa_r+0xb8c>
 800bcee:	f01a 0f01 	tst.w	sl, #1
 800bcf2:	d18d      	bne.n	800bc10 <_dtoa_r+0xaa8>
 800bcf4:	462b      	mov	r3, r5
 800bcf6:	461d      	mov	r5, r3
 800bcf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bcfc:	2a30      	cmp	r2, #48	; 0x30
 800bcfe:	d0fa      	beq.n	800bcf6 <_dtoa_r+0xb8e>
 800bd00:	e6d7      	b.n	800bab2 <_dtoa_r+0x94a>
 800bd02:	9a01      	ldr	r2, [sp, #4]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d184      	bne.n	800bc12 <_dtoa_r+0xaaa>
 800bd08:	9b00      	ldr	r3, [sp, #0]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	9300      	str	r3, [sp, #0]
 800bd0e:	2331      	movs	r3, #49	; 0x31
 800bd10:	7013      	strb	r3, [r2, #0]
 800bd12:	e6ce      	b.n	800bab2 <_dtoa_r+0x94a>
 800bd14:	4b09      	ldr	r3, [pc, #36]	; (800bd3c <_dtoa_r+0xbd4>)
 800bd16:	f7ff ba95 	b.w	800b244 <_dtoa_r+0xdc>
 800bd1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f47f aa6e 	bne.w	800b1fe <_dtoa_r+0x96>
 800bd22:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <_dtoa_r+0xbd8>)
 800bd24:	f7ff ba8e 	b.w	800b244 <_dtoa_r+0xdc>
 800bd28:	9b02      	ldr	r3, [sp, #8]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	dcae      	bgt.n	800bc8c <_dtoa_r+0xb24>
 800bd2e:	9b06      	ldr	r3, [sp, #24]
 800bd30:	2b02      	cmp	r3, #2
 800bd32:	f73f aea8 	bgt.w	800ba86 <_dtoa_r+0x91e>
 800bd36:	e7a9      	b.n	800bc8c <_dtoa_r+0xb24>
 800bd38:	0800ea70 	.word	0x0800ea70
 800bd3c:	0800e991 	.word	0x0800e991
 800bd40:	0800e9f1 	.word	0x0800e9f1

0800bd44 <std>:
 800bd44:	2300      	movs	r3, #0
 800bd46:	b510      	push	{r4, lr}
 800bd48:	4604      	mov	r4, r0
 800bd4a:	e9c0 3300 	strd	r3, r3, [r0]
 800bd4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd52:	6083      	str	r3, [r0, #8]
 800bd54:	8181      	strh	r1, [r0, #12]
 800bd56:	6643      	str	r3, [r0, #100]	; 0x64
 800bd58:	81c2      	strh	r2, [r0, #14]
 800bd5a:	6183      	str	r3, [r0, #24]
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	2208      	movs	r2, #8
 800bd60:	305c      	adds	r0, #92	; 0x5c
 800bd62:	f7fe f9d7 	bl	800a114 <memset>
 800bd66:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <std+0x38>)
 800bd68:	6263      	str	r3, [r4, #36]	; 0x24
 800bd6a:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <std+0x3c>)
 800bd6c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd6e:	4b05      	ldr	r3, [pc, #20]	; (800bd84 <std+0x40>)
 800bd70:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd72:	4b05      	ldr	r3, [pc, #20]	; (800bd88 <std+0x44>)
 800bd74:	6224      	str	r4, [r4, #32]
 800bd76:	6323      	str	r3, [r4, #48]	; 0x30
 800bd78:	bd10      	pop	{r4, pc}
 800bd7a:	bf00      	nop
 800bd7c:	0800c9c1 	.word	0x0800c9c1
 800bd80:	0800c9e3 	.word	0x0800c9e3
 800bd84:	0800ca1b 	.word	0x0800ca1b
 800bd88:	0800ca3f 	.word	0x0800ca3f

0800bd8c <_cleanup_r>:
 800bd8c:	4901      	ldr	r1, [pc, #4]	; (800bd94 <_cleanup_r+0x8>)
 800bd8e:	f000 b8c1 	b.w	800bf14 <_fwalk_reent>
 800bd92:	bf00      	nop
 800bd94:	0800cd19 	.word	0x0800cd19

0800bd98 <__sfmoreglue>:
 800bd98:	b570      	push	{r4, r5, r6, lr}
 800bd9a:	2268      	movs	r2, #104	; 0x68
 800bd9c:	1e4d      	subs	r5, r1, #1
 800bd9e:	4355      	muls	r5, r2
 800bda0:	460e      	mov	r6, r1
 800bda2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bda6:	f7fe fa67 	bl	800a278 <_malloc_r>
 800bdaa:	4604      	mov	r4, r0
 800bdac:	b140      	cbz	r0, 800bdc0 <__sfmoreglue+0x28>
 800bdae:	2100      	movs	r1, #0
 800bdb0:	e9c0 1600 	strd	r1, r6, [r0]
 800bdb4:	300c      	adds	r0, #12
 800bdb6:	60a0      	str	r0, [r4, #8]
 800bdb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bdbc:	f7fe f9aa 	bl	800a114 <memset>
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	bd70      	pop	{r4, r5, r6, pc}

0800bdc4 <__sfp_lock_acquire>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__sfp_lock_acquire+0x8>)
 800bdc6:	f000 b8ca 	b.w	800bf5e <__retarget_lock_acquire_recursive>
 800bdca:	bf00      	nop
 800bdcc:	2000bae1 	.word	0x2000bae1

0800bdd0 <__sfp_lock_release>:
 800bdd0:	4801      	ldr	r0, [pc, #4]	; (800bdd8 <__sfp_lock_release+0x8>)
 800bdd2:	f000 b8c5 	b.w	800bf60 <__retarget_lock_release_recursive>
 800bdd6:	bf00      	nop
 800bdd8:	2000bae1 	.word	0x2000bae1

0800bddc <__sinit_lock_acquire>:
 800bddc:	4801      	ldr	r0, [pc, #4]	; (800bde4 <__sinit_lock_acquire+0x8>)
 800bdde:	f000 b8be 	b.w	800bf5e <__retarget_lock_acquire_recursive>
 800bde2:	bf00      	nop
 800bde4:	2000bae2 	.word	0x2000bae2

0800bde8 <__sinit_lock_release>:
 800bde8:	4801      	ldr	r0, [pc, #4]	; (800bdf0 <__sinit_lock_release+0x8>)
 800bdea:	f000 b8b9 	b.w	800bf60 <__retarget_lock_release_recursive>
 800bdee:	bf00      	nop
 800bdf0:	2000bae2 	.word	0x2000bae2

0800bdf4 <__sinit>:
 800bdf4:	b510      	push	{r4, lr}
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	f7ff fff0 	bl	800bddc <__sinit_lock_acquire>
 800bdfc:	69a3      	ldr	r3, [r4, #24]
 800bdfe:	b11b      	cbz	r3, 800be08 <__sinit+0x14>
 800be00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be04:	f7ff bff0 	b.w	800bde8 <__sinit_lock_release>
 800be08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800be0c:	6523      	str	r3, [r4, #80]	; 0x50
 800be0e:	4b13      	ldr	r3, [pc, #76]	; (800be5c <__sinit+0x68>)
 800be10:	4a13      	ldr	r2, [pc, #76]	; (800be60 <__sinit+0x6c>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	62a2      	str	r2, [r4, #40]	; 0x28
 800be16:	42a3      	cmp	r3, r4
 800be18:	bf04      	itt	eq
 800be1a:	2301      	moveq	r3, #1
 800be1c:	61a3      	streq	r3, [r4, #24]
 800be1e:	4620      	mov	r0, r4
 800be20:	f000 f820 	bl	800be64 <__sfp>
 800be24:	6060      	str	r0, [r4, #4]
 800be26:	4620      	mov	r0, r4
 800be28:	f000 f81c 	bl	800be64 <__sfp>
 800be2c:	60a0      	str	r0, [r4, #8]
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f818 	bl	800be64 <__sfp>
 800be34:	2200      	movs	r2, #0
 800be36:	60e0      	str	r0, [r4, #12]
 800be38:	2104      	movs	r1, #4
 800be3a:	6860      	ldr	r0, [r4, #4]
 800be3c:	f7ff ff82 	bl	800bd44 <std>
 800be40:	68a0      	ldr	r0, [r4, #8]
 800be42:	2201      	movs	r2, #1
 800be44:	2109      	movs	r1, #9
 800be46:	f7ff ff7d 	bl	800bd44 <std>
 800be4a:	68e0      	ldr	r0, [r4, #12]
 800be4c:	2202      	movs	r2, #2
 800be4e:	2112      	movs	r1, #18
 800be50:	f7ff ff78 	bl	800bd44 <std>
 800be54:	2301      	movs	r3, #1
 800be56:	61a3      	str	r3, [r4, #24]
 800be58:	e7d2      	b.n	800be00 <__sinit+0xc>
 800be5a:	bf00      	nop
 800be5c:	0800e96c 	.word	0x0800e96c
 800be60:	0800bd8d 	.word	0x0800bd8d

0800be64 <__sfp>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	4607      	mov	r7, r0
 800be68:	f7ff ffac 	bl	800bdc4 <__sfp_lock_acquire>
 800be6c:	4b1e      	ldr	r3, [pc, #120]	; (800bee8 <__sfp+0x84>)
 800be6e:	681e      	ldr	r6, [r3, #0]
 800be70:	69b3      	ldr	r3, [r6, #24]
 800be72:	b913      	cbnz	r3, 800be7a <__sfp+0x16>
 800be74:	4630      	mov	r0, r6
 800be76:	f7ff ffbd 	bl	800bdf4 <__sinit>
 800be7a:	3648      	adds	r6, #72	; 0x48
 800be7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be80:	3b01      	subs	r3, #1
 800be82:	d503      	bpl.n	800be8c <__sfp+0x28>
 800be84:	6833      	ldr	r3, [r6, #0]
 800be86:	b30b      	cbz	r3, 800becc <__sfp+0x68>
 800be88:	6836      	ldr	r6, [r6, #0]
 800be8a:	e7f7      	b.n	800be7c <__sfp+0x18>
 800be8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be90:	b9d5      	cbnz	r5, 800bec8 <__sfp+0x64>
 800be92:	4b16      	ldr	r3, [pc, #88]	; (800beec <__sfp+0x88>)
 800be94:	60e3      	str	r3, [r4, #12]
 800be96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be9a:	6665      	str	r5, [r4, #100]	; 0x64
 800be9c:	f000 f85e 	bl	800bf5c <__retarget_lock_init_recursive>
 800bea0:	f7ff ff96 	bl	800bdd0 <__sfp_lock_release>
 800bea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800beac:	6025      	str	r5, [r4, #0]
 800beae:	61a5      	str	r5, [r4, #24]
 800beb0:	2208      	movs	r2, #8
 800beb2:	4629      	mov	r1, r5
 800beb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800beb8:	f7fe f92c 	bl	800a114 <memset>
 800bebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bec4:	4620      	mov	r0, r4
 800bec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec8:	3468      	adds	r4, #104	; 0x68
 800beca:	e7d9      	b.n	800be80 <__sfp+0x1c>
 800becc:	2104      	movs	r1, #4
 800bece:	4638      	mov	r0, r7
 800bed0:	f7ff ff62 	bl	800bd98 <__sfmoreglue>
 800bed4:	4604      	mov	r4, r0
 800bed6:	6030      	str	r0, [r6, #0]
 800bed8:	2800      	cmp	r0, #0
 800beda:	d1d5      	bne.n	800be88 <__sfp+0x24>
 800bedc:	f7ff ff78 	bl	800bdd0 <__sfp_lock_release>
 800bee0:	230c      	movs	r3, #12
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	e7ee      	b.n	800bec4 <__sfp+0x60>
 800bee6:	bf00      	nop
 800bee8:	0800e96c 	.word	0x0800e96c
 800beec:	ffff0001 	.word	0xffff0001

0800bef0 <fiprintf>:
 800bef0:	b40e      	push	{r1, r2, r3}
 800bef2:	b503      	push	{r0, r1, lr}
 800bef4:	4601      	mov	r1, r0
 800bef6:	ab03      	add	r3, sp, #12
 800bef8:	4805      	ldr	r0, [pc, #20]	; (800bf10 <fiprintf+0x20>)
 800befa:	f853 2b04 	ldr.w	r2, [r3], #4
 800befe:	6800      	ldr	r0, [r0, #0]
 800bf00:	9301      	str	r3, [sp, #4]
 800bf02:	f000 fc2d 	bl	800c760 <_vfiprintf_r>
 800bf06:	b002      	add	sp, #8
 800bf08:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf0c:	b003      	add	sp, #12
 800bf0e:	4770      	bx	lr
 800bf10:	200001f8 	.word	0x200001f8

0800bf14 <_fwalk_reent>:
 800bf14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf18:	4606      	mov	r6, r0
 800bf1a:	4688      	mov	r8, r1
 800bf1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf20:	2700      	movs	r7, #0
 800bf22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bf26:	f1b9 0901 	subs.w	r9, r9, #1
 800bf2a:	d505      	bpl.n	800bf38 <_fwalk_reent+0x24>
 800bf2c:	6824      	ldr	r4, [r4, #0]
 800bf2e:	2c00      	cmp	r4, #0
 800bf30:	d1f7      	bne.n	800bf22 <_fwalk_reent+0xe>
 800bf32:	4638      	mov	r0, r7
 800bf34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf38:	89ab      	ldrh	r3, [r5, #12]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d907      	bls.n	800bf4e <_fwalk_reent+0x3a>
 800bf3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bf42:	3301      	adds	r3, #1
 800bf44:	d003      	beq.n	800bf4e <_fwalk_reent+0x3a>
 800bf46:	4629      	mov	r1, r5
 800bf48:	4630      	mov	r0, r6
 800bf4a:	47c0      	blx	r8
 800bf4c:	4307      	orrs	r7, r0
 800bf4e:	3568      	adds	r5, #104	; 0x68
 800bf50:	e7e9      	b.n	800bf26 <_fwalk_reent+0x12>
	...

0800bf54 <_localeconv_r>:
 800bf54:	4800      	ldr	r0, [pc, #0]	; (800bf58 <_localeconv_r+0x4>)
 800bf56:	4770      	bx	lr
 800bf58:	2000034c 	.word	0x2000034c

0800bf5c <__retarget_lock_init_recursive>:
 800bf5c:	4770      	bx	lr

0800bf5e <__retarget_lock_acquire_recursive>:
 800bf5e:	4770      	bx	lr

0800bf60 <__retarget_lock_release_recursive>:
 800bf60:	4770      	bx	lr
	...

0800bf64 <__malloc_lock>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__malloc_lock+0x8>)
 800bf66:	f7ff bffa 	b.w	800bf5e <__retarget_lock_acquire_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	2000bae0 	.word	0x2000bae0

0800bf70 <__malloc_unlock>:
 800bf70:	4801      	ldr	r0, [pc, #4]	; (800bf78 <__malloc_unlock+0x8>)
 800bf72:	f7ff bff5 	b.w	800bf60 <__retarget_lock_release_recursive>
 800bf76:	bf00      	nop
 800bf78:	2000bae0 	.word	0x2000bae0

0800bf7c <_Balloc>:
 800bf7c:	b570      	push	{r4, r5, r6, lr}
 800bf7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf80:	4604      	mov	r4, r0
 800bf82:	460d      	mov	r5, r1
 800bf84:	b976      	cbnz	r6, 800bfa4 <_Balloc+0x28>
 800bf86:	2010      	movs	r0, #16
 800bf88:	f7fe f88c 	bl	800a0a4 <malloc>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	6260      	str	r0, [r4, #36]	; 0x24
 800bf90:	b920      	cbnz	r0, 800bf9c <_Balloc+0x20>
 800bf92:	4b18      	ldr	r3, [pc, #96]	; (800bff4 <_Balloc+0x78>)
 800bf94:	4818      	ldr	r0, [pc, #96]	; (800bff8 <_Balloc+0x7c>)
 800bf96:	2166      	movs	r1, #102	; 0x66
 800bf98:	f7ff f83c 	bl	800b014 <__assert_func>
 800bf9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfa0:	6006      	str	r6, [r0, #0]
 800bfa2:	60c6      	str	r6, [r0, #12]
 800bfa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfa6:	68f3      	ldr	r3, [r6, #12]
 800bfa8:	b183      	cbz	r3, 800bfcc <_Balloc+0x50>
 800bfaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfac:	68db      	ldr	r3, [r3, #12]
 800bfae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfb2:	b9b8      	cbnz	r0, 800bfe4 <_Balloc+0x68>
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	fa01 f605 	lsl.w	r6, r1, r5
 800bfba:	1d72      	adds	r2, r6, #5
 800bfbc:	0092      	lsls	r2, r2, #2
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 fb60 	bl	800c684 <_calloc_r>
 800bfc4:	b160      	cbz	r0, 800bfe0 <_Balloc+0x64>
 800bfc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfca:	e00e      	b.n	800bfea <_Balloc+0x6e>
 800bfcc:	2221      	movs	r2, #33	; 0x21
 800bfce:	2104      	movs	r1, #4
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	f000 fb57 	bl	800c684 <_calloc_r>
 800bfd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd8:	60f0      	str	r0, [r6, #12]
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d1e4      	bne.n	800bfaa <_Balloc+0x2e>
 800bfe0:	2000      	movs	r0, #0
 800bfe2:	bd70      	pop	{r4, r5, r6, pc}
 800bfe4:	6802      	ldr	r2, [r0, #0]
 800bfe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfea:	2300      	movs	r3, #0
 800bfec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bff0:	e7f7      	b.n	800bfe2 <_Balloc+0x66>
 800bff2:	bf00      	nop
 800bff4:	0800e9fe 	.word	0x0800e9fe
 800bff8:	0800eae4 	.word	0x0800eae4

0800bffc <_Bfree>:
 800bffc:	b570      	push	{r4, r5, r6, lr}
 800bffe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c000:	4605      	mov	r5, r0
 800c002:	460c      	mov	r4, r1
 800c004:	b976      	cbnz	r6, 800c024 <_Bfree+0x28>
 800c006:	2010      	movs	r0, #16
 800c008:	f7fe f84c 	bl	800a0a4 <malloc>
 800c00c:	4602      	mov	r2, r0
 800c00e:	6268      	str	r0, [r5, #36]	; 0x24
 800c010:	b920      	cbnz	r0, 800c01c <_Bfree+0x20>
 800c012:	4b09      	ldr	r3, [pc, #36]	; (800c038 <_Bfree+0x3c>)
 800c014:	4809      	ldr	r0, [pc, #36]	; (800c03c <_Bfree+0x40>)
 800c016:	218a      	movs	r1, #138	; 0x8a
 800c018:	f7fe fffc 	bl	800b014 <__assert_func>
 800c01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c020:	6006      	str	r6, [r0, #0]
 800c022:	60c6      	str	r6, [r0, #12]
 800c024:	b13c      	cbz	r4, 800c036 <_Bfree+0x3a>
 800c026:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c028:	6862      	ldr	r2, [r4, #4]
 800c02a:	68db      	ldr	r3, [r3, #12]
 800c02c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c030:	6021      	str	r1, [r4, #0]
 800c032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c036:	bd70      	pop	{r4, r5, r6, pc}
 800c038:	0800e9fe 	.word	0x0800e9fe
 800c03c:	0800eae4 	.word	0x0800eae4

0800c040 <__multadd>:
 800c040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c044:	690d      	ldr	r5, [r1, #16]
 800c046:	4607      	mov	r7, r0
 800c048:	460c      	mov	r4, r1
 800c04a:	461e      	mov	r6, r3
 800c04c:	f101 0c14 	add.w	ip, r1, #20
 800c050:	2000      	movs	r0, #0
 800c052:	f8dc 3000 	ldr.w	r3, [ip]
 800c056:	b299      	uxth	r1, r3
 800c058:	fb02 6101 	mla	r1, r2, r1, r6
 800c05c:	0c1e      	lsrs	r6, r3, #16
 800c05e:	0c0b      	lsrs	r3, r1, #16
 800c060:	fb02 3306 	mla	r3, r2, r6, r3
 800c064:	b289      	uxth	r1, r1
 800c066:	3001      	adds	r0, #1
 800c068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c06c:	4285      	cmp	r5, r0
 800c06e:	f84c 1b04 	str.w	r1, [ip], #4
 800c072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c076:	dcec      	bgt.n	800c052 <__multadd+0x12>
 800c078:	b30e      	cbz	r6, 800c0be <__multadd+0x7e>
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	42ab      	cmp	r3, r5
 800c07e:	dc19      	bgt.n	800c0b4 <__multadd+0x74>
 800c080:	6861      	ldr	r1, [r4, #4]
 800c082:	4638      	mov	r0, r7
 800c084:	3101      	adds	r1, #1
 800c086:	f7ff ff79 	bl	800bf7c <_Balloc>
 800c08a:	4680      	mov	r8, r0
 800c08c:	b928      	cbnz	r0, 800c09a <__multadd+0x5a>
 800c08e:	4602      	mov	r2, r0
 800c090:	4b0c      	ldr	r3, [pc, #48]	; (800c0c4 <__multadd+0x84>)
 800c092:	480d      	ldr	r0, [pc, #52]	; (800c0c8 <__multadd+0x88>)
 800c094:	21b5      	movs	r1, #181	; 0xb5
 800c096:	f7fe ffbd 	bl	800b014 <__assert_func>
 800c09a:	6922      	ldr	r2, [r4, #16]
 800c09c:	3202      	adds	r2, #2
 800c09e:	f104 010c 	add.w	r1, r4, #12
 800c0a2:	0092      	lsls	r2, r2, #2
 800c0a4:	300c      	adds	r0, #12
 800c0a6:	f7fe f80d 	bl	800a0c4 <memcpy>
 800c0aa:	4621      	mov	r1, r4
 800c0ac:	4638      	mov	r0, r7
 800c0ae:	f7ff ffa5 	bl	800bffc <_Bfree>
 800c0b2:	4644      	mov	r4, r8
 800c0b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0b8:	3501      	adds	r5, #1
 800c0ba:	615e      	str	r6, [r3, #20]
 800c0bc:	6125      	str	r5, [r4, #16]
 800c0be:	4620      	mov	r0, r4
 800c0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0c4:	0800ea70 	.word	0x0800ea70
 800c0c8:	0800eae4 	.word	0x0800eae4

0800c0cc <__hi0bits>:
 800c0cc:	0c03      	lsrs	r3, r0, #16
 800c0ce:	041b      	lsls	r3, r3, #16
 800c0d0:	b9d3      	cbnz	r3, 800c108 <__hi0bits+0x3c>
 800c0d2:	0400      	lsls	r0, r0, #16
 800c0d4:	2310      	movs	r3, #16
 800c0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c0da:	bf04      	itt	eq
 800c0dc:	0200      	lsleq	r0, r0, #8
 800c0de:	3308      	addeq	r3, #8
 800c0e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c0e4:	bf04      	itt	eq
 800c0e6:	0100      	lsleq	r0, r0, #4
 800c0e8:	3304      	addeq	r3, #4
 800c0ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c0ee:	bf04      	itt	eq
 800c0f0:	0080      	lsleq	r0, r0, #2
 800c0f2:	3302      	addeq	r3, #2
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	db05      	blt.n	800c104 <__hi0bits+0x38>
 800c0f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c0fc:	f103 0301 	add.w	r3, r3, #1
 800c100:	bf08      	it	eq
 800c102:	2320      	moveq	r3, #32
 800c104:	4618      	mov	r0, r3
 800c106:	4770      	bx	lr
 800c108:	2300      	movs	r3, #0
 800c10a:	e7e4      	b.n	800c0d6 <__hi0bits+0xa>

0800c10c <__lo0bits>:
 800c10c:	6803      	ldr	r3, [r0, #0]
 800c10e:	f013 0207 	ands.w	r2, r3, #7
 800c112:	4601      	mov	r1, r0
 800c114:	d00b      	beq.n	800c12e <__lo0bits+0x22>
 800c116:	07da      	lsls	r2, r3, #31
 800c118:	d423      	bmi.n	800c162 <__lo0bits+0x56>
 800c11a:	0798      	lsls	r0, r3, #30
 800c11c:	bf49      	itett	mi
 800c11e:	085b      	lsrmi	r3, r3, #1
 800c120:	089b      	lsrpl	r3, r3, #2
 800c122:	2001      	movmi	r0, #1
 800c124:	600b      	strmi	r3, [r1, #0]
 800c126:	bf5c      	itt	pl
 800c128:	600b      	strpl	r3, [r1, #0]
 800c12a:	2002      	movpl	r0, #2
 800c12c:	4770      	bx	lr
 800c12e:	b298      	uxth	r0, r3
 800c130:	b9a8      	cbnz	r0, 800c15e <__lo0bits+0x52>
 800c132:	0c1b      	lsrs	r3, r3, #16
 800c134:	2010      	movs	r0, #16
 800c136:	b2da      	uxtb	r2, r3
 800c138:	b90a      	cbnz	r2, 800c13e <__lo0bits+0x32>
 800c13a:	3008      	adds	r0, #8
 800c13c:	0a1b      	lsrs	r3, r3, #8
 800c13e:	071a      	lsls	r2, r3, #28
 800c140:	bf04      	itt	eq
 800c142:	091b      	lsreq	r3, r3, #4
 800c144:	3004      	addeq	r0, #4
 800c146:	079a      	lsls	r2, r3, #30
 800c148:	bf04      	itt	eq
 800c14a:	089b      	lsreq	r3, r3, #2
 800c14c:	3002      	addeq	r0, #2
 800c14e:	07da      	lsls	r2, r3, #31
 800c150:	d403      	bmi.n	800c15a <__lo0bits+0x4e>
 800c152:	085b      	lsrs	r3, r3, #1
 800c154:	f100 0001 	add.w	r0, r0, #1
 800c158:	d005      	beq.n	800c166 <__lo0bits+0x5a>
 800c15a:	600b      	str	r3, [r1, #0]
 800c15c:	4770      	bx	lr
 800c15e:	4610      	mov	r0, r2
 800c160:	e7e9      	b.n	800c136 <__lo0bits+0x2a>
 800c162:	2000      	movs	r0, #0
 800c164:	4770      	bx	lr
 800c166:	2020      	movs	r0, #32
 800c168:	4770      	bx	lr
	...

0800c16c <__i2b>:
 800c16c:	b510      	push	{r4, lr}
 800c16e:	460c      	mov	r4, r1
 800c170:	2101      	movs	r1, #1
 800c172:	f7ff ff03 	bl	800bf7c <_Balloc>
 800c176:	4602      	mov	r2, r0
 800c178:	b928      	cbnz	r0, 800c186 <__i2b+0x1a>
 800c17a:	4b05      	ldr	r3, [pc, #20]	; (800c190 <__i2b+0x24>)
 800c17c:	4805      	ldr	r0, [pc, #20]	; (800c194 <__i2b+0x28>)
 800c17e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c182:	f7fe ff47 	bl	800b014 <__assert_func>
 800c186:	2301      	movs	r3, #1
 800c188:	6144      	str	r4, [r0, #20]
 800c18a:	6103      	str	r3, [r0, #16]
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	bf00      	nop
 800c190:	0800ea70 	.word	0x0800ea70
 800c194:	0800eae4 	.word	0x0800eae4

0800c198 <__multiply>:
 800c198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19c:	4691      	mov	r9, r2
 800c19e:	690a      	ldr	r2, [r1, #16]
 800c1a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	bfb8      	it	lt
 800c1a8:	460b      	movlt	r3, r1
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	bfbc      	itt	lt
 800c1ae:	464c      	movlt	r4, r9
 800c1b0:	4699      	movlt	r9, r3
 800c1b2:	6927      	ldr	r7, [r4, #16]
 800c1b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c1b8:	68a3      	ldr	r3, [r4, #8]
 800c1ba:	6861      	ldr	r1, [r4, #4]
 800c1bc:	eb07 060a 	add.w	r6, r7, sl
 800c1c0:	42b3      	cmp	r3, r6
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	bfb8      	it	lt
 800c1c6:	3101      	addlt	r1, #1
 800c1c8:	f7ff fed8 	bl	800bf7c <_Balloc>
 800c1cc:	b930      	cbnz	r0, 800c1dc <__multiply+0x44>
 800c1ce:	4602      	mov	r2, r0
 800c1d0:	4b44      	ldr	r3, [pc, #272]	; (800c2e4 <__multiply+0x14c>)
 800c1d2:	4845      	ldr	r0, [pc, #276]	; (800c2e8 <__multiply+0x150>)
 800c1d4:	f240 115d 	movw	r1, #349	; 0x15d
 800c1d8:	f7fe ff1c 	bl	800b014 <__assert_func>
 800c1dc:	f100 0514 	add.w	r5, r0, #20
 800c1e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1e4:	462b      	mov	r3, r5
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4543      	cmp	r3, r8
 800c1ea:	d321      	bcc.n	800c230 <__multiply+0x98>
 800c1ec:	f104 0314 	add.w	r3, r4, #20
 800c1f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c1f4:	f109 0314 	add.w	r3, r9, #20
 800c1f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c1fc:	9202      	str	r2, [sp, #8]
 800c1fe:	1b3a      	subs	r2, r7, r4
 800c200:	3a15      	subs	r2, #21
 800c202:	f022 0203 	bic.w	r2, r2, #3
 800c206:	3204      	adds	r2, #4
 800c208:	f104 0115 	add.w	r1, r4, #21
 800c20c:	428f      	cmp	r7, r1
 800c20e:	bf38      	it	cc
 800c210:	2204      	movcc	r2, #4
 800c212:	9201      	str	r2, [sp, #4]
 800c214:	9a02      	ldr	r2, [sp, #8]
 800c216:	9303      	str	r3, [sp, #12]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d80c      	bhi.n	800c236 <__multiply+0x9e>
 800c21c:	2e00      	cmp	r6, #0
 800c21e:	dd03      	ble.n	800c228 <__multiply+0x90>
 800c220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c224:	2b00      	cmp	r3, #0
 800c226:	d05a      	beq.n	800c2de <__multiply+0x146>
 800c228:	6106      	str	r6, [r0, #16]
 800c22a:	b005      	add	sp, #20
 800c22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c230:	f843 2b04 	str.w	r2, [r3], #4
 800c234:	e7d8      	b.n	800c1e8 <__multiply+0x50>
 800c236:	f8b3 a000 	ldrh.w	sl, [r3]
 800c23a:	f1ba 0f00 	cmp.w	sl, #0
 800c23e:	d024      	beq.n	800c28a <__multiply+0xf2>
 800c240:	f104 0e14 	add.w	lr, r4, #20
 800c244:	46a9      	mov	r9, r5
 800c246:	f04f 0c00 	mov.w	ip, #0
 800c24a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c24e:	f8d9 1000 	ldr.w	r1, [r9]
 800c252:	fa1f fb82 	uxth.w	fp, r2
 800c256:	b289      	uxth	r1, r1
 800c258:	fb0a 110b 	mla	r1, sl, fp, r1
 800c25c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c260:	f8d9 2000 	ldr.w	r2, [r9]
 800c264:	4461      	add	r1, ip
 800c266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c26a:	fb0a c20b 	mla	r2, sl, fp, ip
 800c26e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c272:	b289      	uxth	r1, r1
 800c274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c278:	4577      	cmp	r7, lr
 800c27a:	f849 1b04 	str.w	r1, [r9], #4
 800c27e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c282:	d8e2      	bhi.n	800c24a <__multiply+0xb2>
 800c284:	9a01      	ldr	r2, [sp, #4]
 800c286:	f845 c002 	str.w	ip, [r5, r2]
 800c28a:	9a03      	ldr	r2, [sp, #12]
 800c28c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c290:	3304      	adds	r3, #4
 800c292:	f1b9 0f00 	cmp.w	r9, #0
 800c296:	d020      	beq.n	800c2da <__multiply+0x142>
 800c298:	6829      	ldr	r1, [r5, #0]
 800c29a:	f104 0c14 	add.w	ip, r4, #20
 800c29e:	46ae      	mov	lr, r5
 800c2a0:	f04f 0a00 	mov.w	sl, #0
 800c2a4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2ac:	fb09 220b 	mla	r2, r9, fp, r2
 800c2b0:	4492      	add	sl, r2
 800c2b2:	b289      	uxth	r1, r1
 800c2b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c2b8:	f84e 1b04 	str.w	r1, [lr], #4
 800c2bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c2c0:	f8be 1000 	ldrh.w	r1, [lr]
 800c2c4:	0c12      	lsrs	r2, r2, #16
 800c2c6:	fb09 1102 	mla	r1, r9, r2, r1
 800c2ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c2ce:	4567      	cmp	r7, ip
 800c2d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c2d4:	d8e6      	bhi.n	800c2a4 <__multiply+0x10c>
 800c2d6:	9a01      	ldr	r2, [sp, #4]
 800c2d8:	50a9      	str	r1, [r5, r2]
 800c2da:	3504      	adds	r5, #4
 800c2dc:	e79a      	b.n	800c214 <__multiply+0x7c>
 800c2de:	3e01      	subs	r6, #1
 800c2e0:	e79c      	b.n	800c21c <__multiply+0x84>
 800c2e2:	bf00      	nop
 800c2e4:	0800ea70 	.word	0x0800ea70
 800c2e8:	0800eae4 	.word	0x0800eae4

0800c2ec <__pow5mult>:
 800c2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f0:	4615      	mov	r5, r2
 800c2f2:	f012 0203 	ands.w	r2, r2, #3
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	460f      	mov	r7, r1
 800c2fa:	d007      	beq.n	800c30c <__pow5mult+0x20>
 800c2fc:	4c25      	ldr	r4, [pc, #148]	; (800c394 <__pow5mult+0xa8>)
 800c2fe:	3a01      	subs	r2, #1
 800c300:	2300      	movs	r3, #0
 800c302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c306:	f7ff fe9b 	bl	800c040 <__multadd>
 800c30a:	4607      	mov	r7, r0
 800c30c:	10ad      	asrs	r5, r5, #2
 800c30e:	d03d      	beq.n	800c38c <__pow5mult+0xa0>
 800c310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c312:	b97c      	cbnz	r4, 800c334 <__pow5mult+0x48>
 800c314:	2010      	movs	r0, #16
 800c316:	f7fd fec5 	bl	800a0a4 <malloc>
 800c31a:	4602      	mov	r2, r0
 800c31c:	6270      	str	r0, [r6, #36]	; 0x24
 800c31e:	b928      	cbnz	r0, 800c32c <__pow5mult+0x40>
 800c320:	4b1d      	ldr	r3, [pc, #116]	; (800c398 <__pow5mult+0xac>)
 800c322:	481e      	ldr	r0, [pc, #120]	; (800c39c <__pow5mult+0xb0>)
 800c324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c328:	f7fe fe74 	bl	800b014 <__assert_func>
 800c32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c330:	6004      	str	r4, [r0, #0]
 800c332:	60c4      	str	r4, [r0, #12]
 800c334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c33c:	b94c      	cbnz	r4, 800c352 <__pow5mult+0x66>
 800c33e:	f240 2171 	movw	r1, #625	; 0x271
 800c342:	4630      	mov	r0, r6
 800c344:	f7ff ff12 	bl	800c16c <__i2b>
 800c348:	2300      	movs	r3, #0
 800c34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c34e:	4604      	mov	r4, r0
 800c350:	6003      	str	r3, [r0, #0]
 800c352:	f04f 0900 	mov.w	r9, #0
 800c356:	07eb      	lsls	r3, r5, #31
 800c358:	d50a      	bpl.n	800c370 <__pow5mult+0x84>
 800c35a:	4639      	mov	r1, r7
 800c35c:	4622      	mov	r2, r4
 800c35e:	4630      	mov	r0, r6
 800c360:	f7ff ff1a 	bl	800c198 <__multiply>
 800c364:	4639      	mov	r1, r7
 800c366:	4680      	mov	r8, r0
 800c368:	4630      	mov	r0, r6
 800c36a:	f7ff fe47 	bl	800bffc <_Bfree>
 800c36e:	4647      	mov	r7, r8
 800c370:	106d      	asrs	r5, r5, #1
 800c372:	d00b      	beq.n	800c38c <__pow5mult+0xa0>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	b938      	cbnz	r0, 800c388 <__pow5mult+0x9c>
 800c378:	4622      	mov	r2, r4
 800c37a:	4621      	mov	r1, r4
 800c37c:	4630      	mov	r0, r6
 800c37e:	f7ff ff0b 	bl	800c198 <__multiply>
 800c382:	6020      	str	r0, [r4, #0]
 800c384:	f8c0 9000 	str.w	r9, [r0]
 800c388:	4604      	mov	r4, r0
 800c38a:	e7e4      	b.n	800c356 <__pow5mult+0x6a>
 800c38c:	4638      	mov	r0, r7
 800c38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c392:	bf00      	nop
 800c394:	0800ec30 	.word	0x0800ec30
 800c398:	0800e9fe 	.word	0x0800e9fe
 800c39c:	0800eae4 	.word	0x0800eae4

0800c3a0 <__lshift>:
 800c3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	6849      	ldr	r1, [r1, #4]
 800c3a8:	6923      	ldr	r3, [r4, #16]
 800c3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3ae:	68a3      	ldr	r3, [r4, #8]
 800c3b0:	4607      	mov	r7, r0
 800c3b2:	4691      	mov	r9, r2
 800c3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3b8:	f108 0601 	add.w	r6, r8, #1
 800c3bc:	42b3      	cmp	r3, r6
 800c3be:	db0b      	blt.n	800c3d8 <__lshift+0x38>
 800c3c0:	4638      	mov	r0, r7
 800c3c2:	f7ff fddb 	bl	800bf7c <_Balloc>
 800c3c6:	4605      	mov	r5, r0
 800c3c8:	b948      	cbnz	r0, 800c3de <__lshift+0x3e>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	4b2a      	ldr	r3, [pc, #168]	; (800c478 <__lshift+0xd8>)
 800c3ce:	482b      	ldr	r0, [pc, #172]	; (800c47c <__lshift+0xdc>)
 800c3d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c3d4:	f7fe fe1e 	bl	800b014 <__assert_func>
 800c3d8:	3101      	adds	r1, #1
 800c3da:	005b      	lsls	r3, r3, #1
 800c3dc:	e7ee      	b.n	800c3bc <__lshift+0x1c>
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f100 0114 	add.w	r1, r0, #20
 800c3e4:	f100 0210 	add.w	r2, r0, #16
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	4553      	cmp	r3, sl
 800c3ec:	db37      	blt.n	800c45e <__lshift+0xbe>
 800c3ee:	6920      	ldr	r0, [r4, #16]
 800c3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3f4:	f104 0314 	add.w	r3, r4, #20
 800c3f8:	f019 091f 	ands.w	r9, r9, #31
 800c3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c404:	d02f      	beq.n	800c466 <__lshift+0xc6>
 800c406:	f1c9 0e20 	rsb	lr, r9, #32
 800c40a:	468a      	mov	sl, r1
 800c40c:	f04f 0c00 	mov.w	ip, #0
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	fa02 f209 	lsl.w	r2, r2, r9
 800c416:	ea42 020c 	orr.w	r2, r2, ip
 800c41a:	f84a 2b04 	str.w	r2, [sl], #4
 800c41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c422:	4298      	cmp	r0, r3
 800c424:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c428:	d8f2      	bhi.n	800c410 <__lshift+0x70>
 800c42a:	1b03      	subs	r3, r0, r4
 800c42c:	3b15      	subs	r3, #21
 800c42e:	f023 0303 	bic.w	r3, r3, #3
 800c432:	3304      	adds	r3, #4
 800c434:	f104 0215 	add.w	r2, r4, #21
 800c438:	4290      	cmp	r0, r2
 800c43a:	bf38      	it	cc
 800c43c:	2304      	movcc	r3, #4
 800c43e:	f841 c003 	str.w	ip, [r1, r3]
 800c442:	f1bc 0f00 	cmp.w	ip, #0
 800c446:	d001      	beq.n	800c44c <__lshift+0xac>
 800c448:	f108 0602 	add.w	r6, r8, #2
 800c44c:	3e01      	subs	r6, #1
 800c44e:	4638      	mov	r0, r7
 800c450:	612e      	str	r6, [r5, #16]
 800c452:	4621      	mov	r1, r4
 800c454:	f7ff fdd2 	bl	800bffc <_Bfree>
 800c458:	4628      	mov	r0, r5
 800c45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c45e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c462:	3301      	adds	r3, #1
 800c464:	e7c1      	b.n	800c3ea <__lshift+0x4a>
 800c466:	3904      	subs	r1, #4
 800c468:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c470:	4298      	cmp	r0, r3
 800c472:	d8f9      	bhi.n	800c468 <__lshift+0xc8>
 800c474:	e7ea      	b.n	800c44c <__lshift+0xac>
 800c476:	bf00      	nop
 800c478:	0800ea70 	.word	0x0800ea70
 800c47c:	0800eae4 	.word	0x0800eae4

0800c480 <__mcmp>:
 800c480:	b530      	push	{r4, r5, lr}
 800c482:	6902      	ldr	r2, [r0, #16]
 800c484:	690c      	ldr	r4, [r1, #16]
 800c486:	1b12      	subs	r2, r2, r4
 800c488:	d10e      	bne.n	800c4a8 <__mcmp+0x28>
 800c48a:	f100 0314 	add.w	r3, r0, #20
 800c48e:	3114      	adds	r1, #20
 800c490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c49c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4a0:	42a5      	cmp	r5, r4
 800c4a2:	d003      	beq.n	800c4ac <__mcmp+0x2c>
 800c4a4:	d305      	bcc.n	800c4b2 <__mcmp+0x32>
 800c4a6:	2201      	movs	r2, #1
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	bd30      	pop	{r4, r5, pc}
 800c4ac:	4283      	cmp	r3, r0
 800c4ae:	d3f3      	bcc.n	800c498 <__mcmp+0x18>
 800c4b0:	e7fa      	b.n	800c4a8 <__mcmp+0x28>
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4b6:	e7f7      	b.n	800c4a8 <__mcmp+0x28>

0800c4b8 <__mdiff>:
 800c4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4bc:	460c      	mov	r4, r1
 800c4be:	4606      	mov	r6, r0
 800c4c0:	4611      	mov	r1, r2
 800c4c2:	4620      	mov	r0, r4
 800c4c4:	4690      	mov	r8, r2
 800c4c6:	f7ff ffdb 	bl	800c480 <__mcmp>
 800c4ca:	1e05      	subs	r5, r0, #0
 800c4cc:	d110      	bne.n	800c4f0 <__mdiff+0x38>
 800c4ce:	4629      	mov	r1, r5
 800c4d0:	4630      	mov	r0, r6
 800c4d2:	f7ff fd53 	bl	800bf7c <_Balloc>
 800c4d6:	b930      	cbnz	r0, 800c4e6 <__mdiff+0x2e>
 800c4d8:	4b3a      	ldr	r3, [pc, #232]	; (800c5c4 <__mdiff+0x10c>)
 800c4da:	4602      	mov	r2, r0
 800c4dc:	f240 2132 	movw	r1, #562	; 0x232
 800c4e0:	4839      	ldr	r0, [pc, #228]	; (800c5c8 <__mdiff+0x110>)
 800c4e2:	f7fe fd97 	bl	800b014 <__assert_func>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f0:	bfa4      	itt	ge
 800c4f2:	4643      	movge	r3, r8
 800c4f4:	46a0      	movge	r8, r4
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c4fc:	bfa6      	itte	ge
 800c4fe:	461c      	movge	r4, r3
 800c500:	2500      	movge	r5, #0
 800c502:	2501      	movlt	r5, #1
 800c504:	f7ff fd3a 	bl	800bf7c <_Balloc>
 800c508:	b920      	cbnz	r0, 800c514 <__mdiff+0x5c>
 800c50a:	4b2e      	ldr	r3, [pc, #184]	; (800c5c4 <__mdiff+0x10c>)
 800c50c:	4602      	mov	r2, r0
 800c50e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c512:	e7e5      	b.n	800c4e0 <__mdiff+0x28>
 800c514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c518:	6926      	ldr	r6, [r4, #16]
 800c51a:	60c5      	str	r5, [r0, #12]
 800c51c:	f104 0914 	add.w	r9, r4, #20
 800c520:	f108 0514 	add.w	r5, r8, #20
 800c524:	f100 0e14 	add.w	lr, r0, #20
 800c528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c52c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c530:	f108 0210 	add.w	r2, r8, #16
 800c534:	46f2      	mov	sl, lr
 800c536:	2100      	movs	r1, #0
 800c538:	f859 3b04 	ldr.w	r3, [r9], #4
 800c53c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c540:	fa1f f883 	uxth.w	r8, r3
 800c544:	fa11 f18b 	uxtah	r1, r1, fp
 800c548:	0c1b      	lsrs	r3, r3, #16
 800c54a:	eba1 0808 	sub.w	r8, r1, r8
 800c54e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c556:	fa1f f888 	uxth.w	r8, r8
 800c55a:	1419      	asrs	r1, r3, #16
 800c55c:	454e      	cmp	r6, r9
 800c55e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c562:	f84a 3b04 	str.w	r3, [sl], #4
 800c566:	d8e7      	bhi.n	800c538 <__mdiff+0x80>
 800c568:	1b33      	subs	r3, r6, r4
 800c56a:	3b15      	subs	r3, #21
 800c56c:	f023 0303 	bic.w	r3, r3, #3
 800c570:	3304      	adds	r3, #4
 800c572:	3415      	adds	r4, #21
 800c574:	42a6      	cmp	r6, r4
 800c576:	bf38      	it	cc
 800c578:	2304      	movcc	r3, #4
 800c57a:	441d      	add	r5, r3
 800c57c:	4473      	add	r3, lr
 800c57e:	469e      	mov	lr, r3
 800c580:	462e      	mov	r6, r5
 800c582:	4566      	cmp	r6, ip
 800c584:	d30e      	bcc.n	800c5a4 <__mdiff+0xec>
 800c586:	f10c 0203 	add.w	r2, ip, #3
 800c58a:	1b52      	subs	r2, r2, r5
 800c58c:	f022 0203 	bic.w	r2, r2, #3
 800c590:	3d03      	subs	r5, #3
 800c592:	45ac      	cmp	ip, r5
 800c594:	bf38      	it	cc
 800c596:	2200      	movcc	r2, #0
 800c598:	441a      	add	r2, r3
 800c59a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c59e:	b17b      	cbz	r3, 800c5c0 <__mdiff+0x108>
 800c5a0:	6107      	str	r7, [r0, #16]
 800c5a2:	e7a3      	b.n	800c4ec <__mdiff+0x34>
 800c5a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5a8:	fa11 f288 	uxtah	r2, r1, r8
 800c5ac:	1414      	asrs	r4, r2, #16
 800c5ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5b2:	b292      	uxth	r2, r2
 800c5b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c5b8:	f84e 2b04 	str.w	r2, [lr], #4
 800c5bc:	1421      	asrs	r1, r4, #16
 800c5be:	e7e0      	b.n	800c582 <__mdiff+0xca>
 800c5c0:	3f01      	subs	r7, #1
 800c5c2:	e7ea      	b.n	800c59a <__mdiff+0xe2>
 800c5c4:	0800ea70 	.word	0x0800ea70
 800c5c8:	0800eae4 	.word	0x0800eae4

0800c5cc <__d2b>:
 800c5cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5d0:	4689      	mov	r9, r1
 800c5d2:	2101      	movs	r1, #1
 800c5d4:	ec57 6b10 	vmov	r6, r7, d0
 800c5d8:	4690      	mov	r8, r2
 800c5da:	f7ff fccf 	bl	800bf7c <_Balloc>
 800c5de:	4604      	mov	r4, r0
 800c5e0:	b930      	cbnz	r0, 800c5f0 <__d2b+0x24>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	4b25      	ldr	r3, [pc, #148]	; (800c67c <__d2b+0xb0>)
 800c5e6:	4826      	ldr	r0, [pc, #152]	; (800c680 <__d2b+0xb4>)
 800c5e8:	f240 310a 	movw	r1, #778	; 0x30a
 800c5ec:	f7fe fd12 	bl	800b014 <__assert_func>
 800c5f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c5f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c5f8:	bb35      	cbnz	r5, 800c648 <__d2b+0x7c>
 800c5fa:	2e00      	cmp	r6, #0
 800c5fc:	9301      	str	r3, [sp, #4]
 800c5fe:	d028      	beq.n	800c652 <__d2b+0x86>
 800c600:	4668      	mov	r0, sp
 800c602:	9600      	str	r6, [sp, #0]
 800c604:	f7ff fd82 	bl	800c10c <__lo0bits>
 800c608:	9900      	ldr	r1, [sp, #0]
 800c60a:	b300      	cbz	r0, 800c64e <__d2b+0x82>
 800c60c:	9a01      	ldr	r2, [sp, #4]
 800c60e:	f1c0 0320 	rsb	r3, r0, #32
 800c612:	fa02 f303 	lsl.w	r3, r2, r3
 800c616:	430b      	orrs	r3, r1
 800c618:	40c2      	lsrs	r2, r0
 800c61a:	6163      	str	r3, [r4, #20]
 800c61c:	9201      	str	r2, [sp, #4]
 800c61e:	9b01      	ldr	r3, [sp, #4]
 800c620:	61a3      	str	r3, [r4, #24]
 800c622:	2b00      	cmp	r3, #0
 800c624:	bf14      	ite	ne
 800c626:	2202      	movne	r2, #2
 800c628:	2201      	moveq	r2, #1
 800c62a:	6122      	str	r2, [r4, #16]
 800c62c:	b1d5      	cbz	r5, 800c664 <__d2b+0x98>
 800c62e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c632:	4405      	add	r5, r0
 800c634:	f8c9 5000 	str.w	r5, [r9]
 800c638:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c63c:	f8c8 0000 	str.w	r0, [r8]
 800c640:	4620      	mov	r0, r4
 800c642:	b003      	add	sp, #12
 800c644:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c648:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c64c:	e7d5      	b.n	800c5fa <__d2b+0x2e>
 800c64e:	6161      	str	r1, [r4, #20]
 800c650:	e7e5      	b.n	800c61e <__d2b+0x52>
 800c652:	a801      	add	r0, sp, #4
 800c654:	f7ff fd5a 	bl	800c10c <__lo0bits>
 800c658:	9b01      	ldr	r3, [sp, #4]
 800c65a:	6163      	str	r3, [r4, #20]
 800c65c:	2201      	movs	r2, #1
 800c65e:	6122      	str	r2, [r4, #16]
 800c660:	3020      	adds	r0, #32
 800c662:	e7e3      	b.n	800c62c <__d2b+0x60>
 800c664:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c668:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c66c:	f8c9 0000 	str.w	r0, [r9]
 800c670:	6918      	ldr	r0, [r3, #16]
 800c672:	f7ff fd2b 	bl	800c0cc <__hi0bits>
 800c676:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c67a:	e7df      	b.n	800c63c <__d2b+0x70>
 800c67c:	0800ea70 	.word	0x0800ea70
 800c680:	0800eae4 	.word	0x0800eae4

0800c684 <_calloc_r>:
 800c684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c686:	fba1 2402 	umull	r2, r4, r1, r2
 800c68a:	b94c      	cbnz	r4, 800c6a0 <_calloc_r+0x1c>
 800c68c:	4611      	mov	r1, r2
 800c68e:	9201      	str	r2, [sp, #4]
 800c690:	f7fd fdf2 	bl	800a278 <_malloc_r>
 800c694:	9a01      	ldr	r2, [sp, #4]
 800c696:	4605      	mov	r5, r0
 800c698:	b930      	cbnz	r0, 800c6a8 <_calloc_r+0x24>
 800c69a:	4628      	mov	r0, r5
 800c69c:	b003      	add	sp, #12
 800c69e:	bd30      	pop	{r4, r5, pc}
 800c6a0:	220c      	movs	r2, #12
 800c6a2:	6002      	str	r2, [r0, #0]
 800c6a4:	2500      	movs	r5, #0
 800c6a6:	e7f8      	b.n	800c69a <_calloc_r+0x16>
 800c6a8:	4621      	mov	r1, r4
 800c6aa:	f7fd fd33 	bl	800a114 <memset>
 800c6ae:	e7f4      	b.n	800c69a <_calloc_r+0x16>

0800c6b0 <_realloc_r>:
 800c6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6b4:	4680      	mov	r8, r0
 800c6b6:	4614      	mov	r4, r2
 800c6b8:	460e      	mov	r6, r1
 800c6ba:	b921      	cbnz	r1, 800c6c6 <_realloc_r+0x16>
 800c6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	f7fd bdd9 	b.w	800a278 <_malloc_r>
 800c6c6:	b92a      	cbnz	r2, 800c6d4 <_realloc_r+0x24>
 800c6c8:	f7fd fd36 	bl	800a138 <_free_r>
 800c6cc:	4625      	mov	r5, r4
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6d4:	f000 fbe6 	bl	800cea4 <_malloc_usable_size_r>
 800c6d8:	4284      	cmp	r4, r0
 800c6da:	4607      	mov	r7, r0
 800c6dc:	d802      	bhi.n	800c6e4 <_realloc_r+0x34>
 800c6de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6e2:	d812      	bhi.n	800c70a <_realloc_r+0x5a>
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	f7fd fdc6 	bl	800a278 <_malloc_r>
 800c6ec:	4605      	mov	r5, r0
 800c6ee:	2800      	cmp	r0, #0
 800c6f0:	d0ed      	beq.n	800c6ce <_realloc_r+0x1e>
 800c6f2:	42bc      	cmp	r4, r7
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	bf28      	it	cs
 800c6fa:	463a      	movcs	r2, r7
 800c6fc:	f7fd fce2 	bl	800a0c4 <memcpy>
 800c700:	4631      	mov	r1, r6
 800c702:	4640      	mov	r0, r8
 800c704:	f7fd fd18 	bl	800a138 <_free_r>
 800c708:	e7e1      	b.n	800c6ce <_realloc_r+0x1e>
 800c70a:	4635      	mov	r5, r6
 800c70c:	e7df      	b.n	800c6ce <_realloc_r+0x1e>

0800c70e <__sfputc_r>:
 800c70e:	6893      	ldr	r3, [r2, #8]
 800c710:	3b01      	subs	r3, #1
 800c712:	2b00      	cmp	r3, #0
 800c714:	b410      	push	{r4}
 800c716:	6093      	str	r3, [r2, #8]
 800c718:	da08      	bge.n	800c72c <__sfputc_r+0x1e>
 800c71a:	6994      	ldr	r4, [r2, #24]
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	db01      	blt.n	800c724 <__sfputc_r+0x16>
 800c720:	290a      	cmp	r1, #10
 800c722:	d103      	bne.n	800c72c <__sfputc_r+0x1e>
 800c724:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c728:	f000 b98e 	b.w	800ca48 <__swbuf_r>
 800c72c:	6813      	ldr	r3, [r2, #0]
 800c72e:	1c58      	adds	r0, r3, #1
 800c730:	6010      	str	r0, [r2, #0]
 800c732:	7019      	strb	r1, [r3, #0]
 800c734:	4608      	mov	r0, r1
 800c736:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <__sfputs_r>:
 800c73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c73e:	4606      	mov	r6, r0
 800c740:	460f      	mov	r7, r1
 800c742:	4614      	mov	r4, r2
 800c744:	18d5      	adds	r5, r2, r3
 800c746:	42ac      	cmp	r4, r5
 800c748:	d101      	bne.n	800c74e <__sfputs_r+0x12>
 800c74a:	2000      	movs	r0, #0
 800c74c:	e007      	b.n	800c75e <__sfputs_r+0x22>
 800c74e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c752:	463a      	mov	r2, r7
 800c754:	4630      	mov	r0, r6
 800c756:	f7ff ffda 	bl	800c70e <__sfputc_r>
 800c75a:	1c43      	adds	r3, r0, #1
 800c75c:	d1f3      	bne.n	800c746 <__sfputs_r+0xa>
 800c75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c760 <_vfiprintf_r>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	460d      	mov	r5, r1
 800c766:	b09d      	sub	sp, #116	; 0x74
 800c768:	4614      	mov	r4, r2
 800c76a:	4698      	mov	r8, r3
 800c76c:	4606      	mov	r6, r0
 800c76e:	b118      	cbz	r0, 800c778 <_vfiprintf_r+0x18>
 800c770:	6983      	ldr	r3, [r0, #24]
 800c772:	b90b      	cbnz	r3, 800c778 <_vfiprintf_r+0x18>
 800c774:	f7ff fb3e 	bl	800bdf4 <__sinit>
 800c778:	4b89      	ldr	r3, [pc, #548]	; (800c9a0 <_vfiprintf_r+0x240>)
 800c77a:	429d      	cmp	r5, r3
 800c77c:	d11b      	bne.n	800c7b6 <_vfiprintf_r+0x56>
 800c77e:	6875      	ldr	r5, [r6, #4]
 800c780:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c782:	07d9      	lsls	r1, r3, #31
 800c784:	d405      	bmi.n	800c792 <_vfiprintf_r+0x32>
 800c786:	89ab      	ldrh	r3, [r5, #12]
 800c788:	059a      	lsls	r2, r3, #22
 800c78a:	d402      	bmi.n	800c792 <_vfiprintf_r+0x32>
 800c78c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78e:	f7ff fbe6 	bl	800bf5e <__retarget_lock_acquire_recursive>
 800c792:	89ab      	ldrh	r3, [r5, #12]
 800c794:	071b      	lsls	r3, r3, #28
 800c796:	d501      	bpl.n	800c79c <_vfiprintf_r+0x3c>
 800c798:	692b      	ldr	r3, [r5, #16]
 800c79a:	b9eb      	cbnz	r3, 800c7d8 <_vfiprintf_r+0x78>
 800c79c:	4629      	mov	r1, r5
 800c79e:	4630      	mov	r0, r6
 800c7a0:	f000 f9b6 	bl	800cb10 <__swsetup_r>
 800c7a4:	b1c0      	cbz	r0, 800c7d8 <_vfiprintf_r+0x78>
 800c7a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a8:	07dc      	lsls	r4, r3, #31
 800c7aa:	d50e      	bpl.n	800c7ca <_vfiprintf_r+0x6a>
 800c7ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7b0:	b01d      	add	sp, #116	; 0x74
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b6:	4b7b      	ldr	r3, [pc, #492]	; (800c9a4 <_vfiprintf_r+0x244>)
 800c7b8:	429d      	cmp	r5, r3
 800c7ba:	d101      	bne.n	800c7c0 <_vfiprintf_r+0x60>
 800c7bc:	68b5      	ldr	r5, [r6, #8]
 800c7be:	e7df      	b.n	800c780 <_vfiprintf_r+0x20>
 800c7c0:	4b79      	ldr	r3, [pc, #484]	; (800c9a8 <_vfiprintf_r+0x248>)
 800c7c2:	429d      	cmp	r5, r3
 800c7c4:	bf08      	it	eq
 800c7c6:	68f5      	ldreq	r5, [r6, #12]
 800c7c8:	e7da      	b.n	800c780 <_vfiprintf_r+0x20>
 800c7ca:	89ab      	ldrh	r3, [r5, #12]
 800c7cc:	0598      	lsls	r0, r3, #22
 800c7ce:	d4ed      	bmi.n	800c7ac <_vfiprintf_r+0x4c>
 800c7d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7d2:	f7ff fbc5 	bl	800bf60 <__retarget_lock_release_recursive>
 800c7d6:	e7e9      	b.n	800c7ac <_vfiprintf_r+0x4c>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	9309      	str	r3, [sp, #36]	; 0x24
 800c7dc:	2320      	movs	r3, #32
 800c7de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7e2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7e6:	2330      	movs	r3, #48	; 0x30
 800c7e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c9ac <_vfiprintf_r+0x24c>
 800c7ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7f0:	f04f 0901 	mov.w	r9, #1
 800c7f4:	4623      	mov	r3, r4
 800c7f6:	469a      	mov	sl, r3
 800c7f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7fc:	b10a      	cbz	r2, 800c802 <_vfiprintf_r+0xa2>
 800c7fe:	2a25      	cmp	r2, #37	; 0x25
 800c800:	d1f9      	bne.n	800c7f6 <_vfiprintf_r+0x96>
 800c802:	ebba 0b04 	subs.w	fp, sl, r4
 800c806:	d00b      	beq.n	800c820 <_vfiprintf_r+0xc0>
 800c808:	465b      	mov	r3, fp
 800c80a:	4622      	mov	r2, r4
 800c80c:	4629      	mov	r1, r5
 800c80e:	4630      	mov	r0, r6
 800c810:	f7ff ff94 	bl	800c73c <__sfputs_r>
 800c814:	3001      	adds	r0, #1
 800c816:	f000 80aa 	beq.w	800c96e <_vfiprintf_r+0x20e>
 800c81a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c81c:	445a      	add	r2, fp
 800c81e:	9209      	str	r2, [sp, #36]	; 0x24
 800c820:	f89a 3000 	ldrb.w	r3, [sl]
 800c824:	2b00      	cmp	r3, #0
 800c826:	f000 80a2 	beq.w	800c96e <_vfiprintf_r+0x20e>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c834:	f10a 0a01 	add.w	sl, sl, #1
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	9307      	str	r3, [sp, #28]
 800c83c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c840:	931a      	str	r3, [sp, #104]	; 0x68
 800c842:	4654      	mov	r4, sl
 800c844:	2205      	movs	r2, #5
 800c846:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c84a:	4858      	ldr	r0, [pc, #352]	; (800c9ac <_vfiprintf_r+0x24c>)
 800c84c:	f7f3 fce8 	bl	8000220 <memchr>
 800c850:	9a04      	ldr	r2, [sp, #16]
 800c852:	b9d8      	cbnz	r0, 800c88c <_vfiprintf_r+0x12c>
 800c854:	06d1      	lsls	r1, r2, #27
 800c856:	bf44      	itt	mi
 800c858:	2320      	movmi	r3, #32
 800c85a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c85e:	0713      	lsls	r3, r2, #28
 800c860:	bf44      	itt	mi
 800c862:	232b      	movmi	r3, #43	; 0x2b
 800c864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c868:	f89a 3000 	ldrb.w	r3, [sl]
 800c86c:	2b2a      	cmp	r3, #42	; 0x2a
 800c86e:	d015      	beq.n	800c89c <_vfiprintf_r+0x13c>
 800c870:	9a07      	ldr	r2, [sp, #28]
 800c872:	4654      	mov	r4, sl
 800c874:	2000      	movs	r0, #0
 800c876:	f04f 0c0a 	mov.w	ip, #10
 800c87a:	4621      	mov	r1, r4
 800c87c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c880:	3b30      	subs	r3, #48	; 0x30
 800c882:	2b09      	cmp	r3, #9
 800c884:	d94e      	bls.n	800c924 <_vfiprintf_r+0x1c4>
 800c886:	b1b0      	cbz	r0, 800c8b6 <_vfiprintf_r+0x156>
 800c888:	9207      	str	r2, [sp, #28]
 800c88a:	e014      	b.n	800c8b6 <_vfiprintf_r+0x156>
 800c88c:	eba0 0308 	sub.w	r3, r0, r8
 800c890:	fa09 f303 	lsl.w	r3, r9, r3
 800c894:	4313      	orrs	r3, r2
 800c896:	9304      	str	r3, [sp, #16]
 800c898:	46a2      	mov	sl, r4
 800c89a:	e7d2      	b.n	800c842 <_vfiprintf_r+0xe2>
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	1d19      	adds	r1, r3, #4
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	9103      	str	r1, [sp, #12]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	bfbb      	ittet	lt
 800c8a8:	425b      	neglt	r3, r3
 800c8aa:	f042 0202 	orrlt.w	r2, r2, #2
 800c8ae:	9307      	strge	r3, [sp, #28]
 800c8b0:	9307      	strlt	r3, [sp, #28]
 800c8b2:	bfb8      	it	lt
 800c8b4:	9204      	strlt	r2, [sp, #16]
 800c8b6:	7823      	ldrb	r3, [r4, #0]
 800c8b8:	2b2e      	cmp	r3, #46	; 0x2e
 800c8ba:	d10c      	bne.n	800c8d6 <_vfiprintf_r+0x176>
 800c8bc:	7863      	ldrb	r3, [r4, #1]
 800c8be:	2b2a      	cmp	r3, #42	; 0x2a
 800c8c0:	d135      	bne.n	800c92e <_vfiprintf_r+0x1ce>
 800c8c2:	9b03      	ldr	r3, [sp, #12]
 800c8c4:	1d1a      	adds	r2, r3, #4
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	9203      	str	r2, [sp, #12]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	bfb8      	it	lt
 800c8ce:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c8d2:	3402      	adds	r4, #2
 800c8d4:	9305      	str	r3, [sp, #20]
 800c8d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c9bc <_vfiprintf_r+0x25c>
 800c8da:	7821      	ldrb	r1, [r4, #0]
 800c8dc:	2203      	movs	r2, #3
 800c8de:	4650      	mov	r0, sl
 800c8e0:	f7f3 fc9e 	bl	8000220 <memchr>
 800c8e4:	b140      	cbz	r0, 800c8f8 <_vfiprintf_r+0x198>
 800c8e6:	2340      	movs	r3, #64	; 0x40
 800c8e8:	eba0 000a 	sub.w	r0, r0, sl
 800c8ec:	fa03 f000 	lsl.w	r0, r3, r0
 800c8f0:	9b04      	ldr	r3, [sp, #16]
 800c8f2:	4303      	orrs	r3, r0
 800c8f4:	3401      	adds	r4, #1
 800c8f6:	9304      	str	r3, [sp, #16]
 800c8f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8fc:	482c      	ldr	r0, [pc, #176]	; (800c9b0 <_vfiprintf_r+0x250>)
 800c8fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c902:	2206      	movs	r2, #6
 800c904:	f7f3 fc8c 	bl	8000220 <memchr>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d03f      	beq.n	800c98c <_vfiprintf_r+0x22c>
 800c90c:	4b29      	ldr	r3, [pc, #164]	; (800c9b4 <_vfiprintf_r+0x254>)
 800c90e:	bb1b      	cbnz	r3, 800c958 <_vfiprintf_r+0x1f8>
 800c910:	9b03      	ldr	r3, [sp, #12]
 800c912:	3307      	adds	r3, #7
 800c914:	f023 0307 	bic.w	r3, r3, #7
 800c918:	3308      	adds	r3, #8
 800c91a:	9303      	str	r3, [sp, #12]
 800c91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c91e:	443b      	add	r3, r7
 800c920:	9309      	str	r3, [sp, #36]	; 0x24
 800c922:	e767      	b.n	800c7f4 <_vfiprintf_r+0x94>
 800c924:	fb0c 3202 	mla	r2, ip, r2, r3
 800c928:	460c      	mov	r4, r1
 800c92a:	2001      	movs	r0, #1
 800c92c:	e7a5      	b.n	800c87a <_vfiprintf_r+0x11a>
 800c92e:	2300      	movs	r3, #0
 800c930:	3401      	adds	r4, #1
 800c932:	9305      	str	r3, [sp, #20]
 800c934:	4619      	mov	r1, r3
 800c936:	f04f 0c0a 	mov.w	ip, #10
 800c93a:	4620      	mov	r0, r4
 800c93c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c940:	3a30      	subs	r2, #48	; 0x30
 800c942:	2a09      	cmp	r2, #9
 800c944:	d903      	bls.n	800c94e <_vfiprintf_r+0x1ee>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d0c5      	beq.n	800c8d6 <_vfiprintf_r+0x176>
 800c94a:	9105      	str	r1, [sp, #20]
 800c94c:	e7c3      	b.n	800c8d6 <_vfiprintf_r+0x176>
 800c94e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c952:	4604      	mov	r4, r0
 800c954:	2301      	movs	r3, #1
 800c956:	e7f0      	b.n	800c93a <_vfiprintf_r+0x1da>
 800c958:	ab03      	add	r3, sp, #12
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	462a      	mov	r2, r5
 800c95e:	4b16      	ldr	r3, [pc, #88]	; (800c9b8 <_vfiprintf_r+0x258>)
 800c960:	a904      	add	r1, sp, #16
 800c962:	4630      	mov	r0, r6
 800c964:	f7fd fef8 	bl	800a758 <_printf_float>
 800c968:	4607      	mov	r7, r0
 800c96a:	1c78      	adds	r0, r7, #1
 800c96c:	d1d6      	bne.n	800c91c <_vfiprintf_r+0x1bc>
 800c96e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c970:	07d9      	lsls	r1, r3, #31
 800c972:	d405      	bmi.n	800c980 <_vfiprintf_r+0x220>
 800c974:	89ab      	ldrh	r3, [r5, #12]
 800c976:	059a      	lsls	r2, r3, #22
 800c978:	d402      	bmi.n	800c980 <_vfiprintf_r+0x220>
 800c97a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c97c:	f7ff faf0 	bl	800bf60 <__retarget_lock_release_recursive>
 800c980:	89ab      	ldrh	r3, [r5, #12]
 800c982:	065b      	lsls	r3, r3, #25
 800c984:	f53f af12 	bmi.w	800c7ac <_vfiprintf_r+0x4c>
 800c988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c98a:	e711      	b.n	800c7b0 <_vfiprintf_r+0x50>
 800c98c:	ab03      	add	r3, sp, #12
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	462a      	mov	r2, r5
 800c992:	4b09      	ldr	r3, [pc, #36]	; (800c9b8 <_vfiprintf_r+0x258>)
 800c994:	a904      	add	r1, sp, #16
 800c996:	4630      	mov	r0, r6
 800c998:	f7fe f982 	bl	800aca0 <_printf_i>
 800c99c:	e7e4      	b.n	800c968 <_vfiprintf_r+0x208>
 800c99e:	bf00      	nop
 800c9a0:	0800eaa4 	.word	0x0800eaa4
 800c9a4:	0800eac4 	.word	0x0800eac4
 800c9a8:	0800ea84 	.word	0x0800ea84
 800c9ac:	0800e970 	.word	0x0800e970
 800c9b0:	0800e97a 	.word	0x0800e97a
 800c9b4:	0800a759 	.word	0x0800a759
 800c9b8:	0800c73d 	.word	0x0800c73d
 800c9bc:	0800e976 	.word	0x0800e976

0800c9c0 <__sread>:
 800c9c0:	b510      	push	{r4, lr}
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9c8:	f000 fa74 	bl	800ceb4 <_read_r>
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	bfab      	itete	ge
 800c9d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9d2:	89a3      	ldrhlt	r3, [r4, #12]
 800c9d4:	181b      	addge	r3, r3, r0
 800c9d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9da:	bfac      	ite	ge
 800c9dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800c9de:	81a3      	strhlt	r3, [r4, #12]
 800c9e0:	bd10      	pop	{r4, pc}

0800c9e2 <__swrite>:
 800c9e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e6:	461f      	mov	r7, r3
 800c9e8:	898b      	ldrh	r3, [r1, #12]
 800c9ea:	05db      	lsls	r3, r3, #23
 800c9ec:	4605      	mov	r5, r0
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	4616      	mov	r6, r2
 800c9f2:	d505      	bpl.n	800ca00 <__swrite+0x1e>
 800c9f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	f000 f9c8 	bl	800cd90 <_lseek_r>
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca0a:	81a3      	strh	r3, [r4, #12]
 800ca0c:	4632      	mov	r2, r6
 800ca0e:	463b      	mov	r3, r7
 800ca10:	4628      	mov	r0, r5
 800ca12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca16:	f000 b869 	b.w	800caec <_write_r>

0800ca1a <__sseek>:
 800ca1a:	b510      	push	{r4, lr}
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca22:	f000 f9b5 	bl	800cd90 <_lseek_r>
 800ca26:	1c43      	adds	r3, r0, #1
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	bf15      	itete	ne
 800ca2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca36:	81a3      	strheq	r3, [r4, #12]
 800ca38:	bf18      	it	ne
 800ca3a:	81a3      	strhne	r3, [r4, #12]
 800ca3c:	bd10      	pop	{r4, pc}

0800ca3e <__sclose>:
 800ca3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca42:	f000 b8d3 	b.w	800cbec <_close_r>
	...

0800ca48 <__swbuf_r>:
 800ca48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca4a:	460e      	mov	r6, r1
 800ca4c:	4614      	mov	r4, r2
 800ca4e:	4605      	mov	r5, r0
 800ca50:	b118      	cbz	r0, 800ca5a <__swbuf_r+0x12>
 800ca52:	6983      	ldr	r3, [r0, #24]
 800ca54:	b90b      	cbnz	r3, 800ca5a <__swbuf_r+0x12>
 800ca56:	f7ff f9cd 	bl	800bdf4 <__sinit>
 800ca5a:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <__swbuf_r+0x98>)
 800ca5c:	429c      	cmp	r4, r3
 800ca5e:	d12b      	bne.n	800cab8 <__swbuf_r+0x70>
 800ca60:	686c      	ldr	r4, [r5, #4]
 800ca62:	69a3      	ldr	r3, [r4, #24]
 800ca64:	60a3      	str	r3, [r4, #8]
 800ca66:	89a3      	ldrh	r3, [r4, #12]
 800ca68:	071a      	lsls	r2, r3, #28
 800ca6a:	d52f      	bpl.n	800cacc <__swbuf_r+0x84>
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	b36b      	cbz	r3, 800cacc <__swbuf_r+0x84>
 800ca70:	6923      	ldr	r3, [r4, #16]
 800ca72:	6820      	ldr	r0, [r4, #0]
 800ca74:	1ac0      	subs	r0, r0, r3
 800ca76:	6963      	ldr	r3, [r4, #20]
 800ca78:	b2f6      	uxtb	r6, r6
 800ca7a:	4283      	cmp	r3, r0
 800ca7c:	4637      	mov	r7, r6
 800ca7e:	dc04      	bgt.n	800ca8a <__swbuf_r+0x42>
 800ca80:	4621      	mov	r1, r4
 800ca82:	4628      	mov	r0, r5
 800ca84:	f000 f948 	bl	800cd18 <_fflush_r>
 800ca88:	bb30      	cbnz	r0, 800cad8 <__swbuf_r+0x90>
 800ca8a:	68a3      	ldr	r3, [r4, #8]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	60a3      	str	r3, [r4, #8]
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	1c5a      	adds	r2, r3, #1
 800ca94:	6022      	str	r2, [r4, #0]
 800ca96:	701e      	strb	r6, [r3, #0]
 800ca98:	6963      	ldr	r3, [r4, #20]
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	4283      	cmp	r3, r0
 800ca9e:	d004      	beq.n	800caaa <__swbuf_r+0x62>
 800caa0:	89a3      	ldrh	r3, [r4, #12]
 800caa2:	07db      	lsls	r3, r3, #31
 800caa4:	d506      	bpl.n	800cab4 <__swbuf_r+0x6c>
 800caa6:	2e0a      	cmp	r6, #10
 800caa8:	d104      	bne.n	800cab4 <__swbuf_r+0x6c>
 800caaa:	4621      	mov	r1, r4
 800caac:	4628      	mov	r0, r5
 800caae:	f000 f933 	bl	800cd18 <_fflush_r>
 800cab2:	b988      	cbnz	r0, 800cad8 <__swbuf_r+0x90>
 800cab4:	4638      	mov	r0, r7
 800cab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab8:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <__swbuf_r+0x9c>)
 800caba:	429c      	cmp	r4, r3
 800cabc:	d101      	bne.n	800cac2 <__swbuf_r+0x7a>
 800cabe:	68ac      	ldr	r4, [r5, #8]
 800cac0:	e7cf      	b.n	800ca62 <__swbuf_r+0x1a>
 800cac2:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <__swbuf_r+0xa0>)
 800cac4:	429c      	cmp	r4, r3
 800cac6:	bf08      	it	eq
 800cac8:	68ec      	ldreq	r4, [r5, #12]
 800caca:	e7ca      	b.n	800ca62 <__swbuf_r+0x1a>
 800cacc:	4621      	mov	r1, r4
 800cace:	4628      	mov	r0, r5
 800cad0:	f000 f81e 	bl	800cb10 <__swsetup_r>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	d0cb      	beq.n	800ca70 <__swbuf_r+0x28>
 800cad8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800cadc:	e7ea      	b.n	800cab4 <__swbuf_r+0x6c>
 800cade:	bf00      	nop
 800cae0:	0800eaa4 	.word	0x0800eaa4
 800cae4:	0800eac4 	.word	0x0800eac4
 800cae8:	0800ea84 	.word	0x0800ea84

0800caec <_write_r>:
 800caec:	b538      	push	{r3, r4, r5, lr}
 800caee:	4d07      	ldr	r5, [pc, #28]	; (800cb0c <_write_r+0x20>)
 800caf0:	4604      	mov	r4, r0
 800caf2:	4608      	mov	r0, r1
 800caf4:	4611      	mov	r1, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	602a      	str	r2, [r5, #0]
 800cafa:	461a      	mov	r2, r3
 800cafc:	f7f4 fa4b 	bl	8000f96 <_write>
 800cb00:	1c43      	adds	r3, r0, #1
 800cb02:	d102      	bne.n	800cb0a <_write_r+0x1e>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b103      	cbz	r3, 800cb0a <_write_r+0x1e>
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	bd38      	pop	{r3, r4, r5, pc}
 800cb0c:	2000b338 	.word	0x2000b338

0800cb10 <__swsetup_r>:
 800cb10:	4b32      	ldr	r3, [pc, #200]	; (800cbdc <__swsetup_r+0xcc>)
 800cb12:	b570      	push	{r4, r5, r6, lr}
 800cb14:	681d      	ldr	r5, [r3, #0]
 800cb16:	4606      	mov	r6, r0
 800cb18:	460c      	mov	r4, r1
 800cb1a:	b125      	cbz	r5, 800cb26 <__swsetup_r+0x16>
 800cb1c:	69ab      	ldr	r3, [r5, #24]
 800cb1e:	b913      	cbnz	r3, 800cb26 <__swsetup_r+0x16>
 800cb20:	4628      	mov	r0, r5
 800cb22:	f7ff f967 	bl	800bdf4 <__sinit>
 800cb26:	4b2e      	ldr	r3, [pc, #184]	; (800cbe0 <__swsetup_r+0xd0>)
 800cb28:	429c      	cmp	r4, r3
 800cb2a:	d10f      	bne.n	800cb4c <__swsetup_r+0x3c>
 800cb2c:	686c      	ldr	r4, [r5, #4]
 800cb2e:	89a3      	ldrh	r3, [r4, #12]
 800cb30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb34:	0719      	lsls	r1, r3, #28
 800cb36:	d42c      	bmi.n	800cb92 <__swsetup_r+0x82>
 800cb38:	06dd      	lsls	r5, r3, #27
 800cb3a:	d411      	bmi.n	800cb60 <__swsetup_r+0x50>
 800cb3c:	2309      	movs	r3, #9
 800cb3e:	6033      	str	r3, [r6, #0]
 800cb40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb44:	81a3      	strh	r3, [r4, #12]
 800cb46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb4a:	e03e      	b.n	800cbca <__swsetup_r+0xba>
 800cb4c:	4b25      	ldr	r3, [pc, #148]	; (800cbe4 <__swsetup_r+0xd4>)
 800cb4e:	429c      	cmp	r4, r3
 800cb50:	d101      	bne.n	800cb56 <__swsetup_r+0x46>
 800cb52:	68ac      	ldr	r4, [r5, #8]
 800cb54:	e7eb      	b.n	800cb2e <__swsetup_r+0x1e>
 800cb56:	4b24      	ldr	r3, [pc, #144]	; (800cbe8 <__swsetup_r+0xd8>)
 800cb58:	429c      	cmp	r4, r3
 800cb5a:	bf08      	it	eq
 800cb5c:	68ec      	ldreq	r4, [r5, #12]
 800cb5e:	e7e6      	b.n	800cb2e <__swsetup_r+0x1e>
 800cb60:	0758      	lsls	r0, r3, #29
 800cb62:	d512      	bpl.n	800cb8a <__swsetup_r+0x7a>
 800cb64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb66:	b141      	cbz	r1, 800cb7a <__swsetup_r+0x6a>
 800cb68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb6c:	4299      	cmp	r1, r3
 800cb6e:	d002      	beq.n	800cb76 <__swsetup_r+0x66>
 800cb70:	4630      	mov	r0, r6
 800cb72:	f7fd fae1 	bl	800a138 <_free_r>
 800cb76:	2300      	movs	r3, #0
 800cb78:	6363      	str	r3, [r4, #52]	; 0x34
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb80:	81a3      	strh	r3, [r4, #12]
 800cb82:	2300      	movs	r3, #0
 800cb84:	6063      	str	r3, [r4, #4]
 800cb86:	6923      	ldr	r3, [r4, #16]
 800cb88:	6023      	str	r3, [r4, #0]
 800cb8a:	89a3      	ldrh	r3, [r4, #12]
 800cb8c:	f043 0308 	orr.w	r3, r3, #8
 800cb90:	81a3      	strh	r3, [r4, #12]
 800cb92:	6923      	ldr	r3, [r4, #16]
 800cb94:	b94b      	cbnz	r3, 800cbaa <__swsetup_r+0x9a>
 800cb96:	89a3      	ldrh	r3, [r4, #12]
 800cb98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cba0:	d003      	beq.n	800cbaa <__swsetup_r+0x9a>
 800cba2:	4621      	mov	r1, r4
 800cba4:	4630      	mov	r0, r6
 800cba6:	f000 f92b 	bl	800ce00 <__smakebuf_r>
 800cbaa:	89a0      	ldrh	r0, [r4, #12]
 800cbac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbb0:	f010 0301 	ands.w	r3, r0, #1
 800cbb4:	d00a      	beq.n	800cbcc <__swsetup_r+0xbc>
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	60a3      	str	r3, [r4, #8]
 800cbba:	6963      	ldr	r3, [r4, #20]
 800cbbc:	425b      	negs	r3, r3
 800cbbe:	61a3      	str	r3, [r4, #24]
 800cbc0:	6923      	ldr	r3, [r4, #16]
 800cbc2:	b943      	cbnz	r3, 800cbd6 <__swsetup_r+0xc6>
 800cbc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbc8:	d1ba      	bne.n	800cb40 <__swsetup_r+0x30>
 800cbca:	bd70      	pop	{r4, r5, r6, pc}
 800cbcc:	0781      	lsls	r1, r0, #30
 800cbce:	bf58      	it	pl
 800cbd0:	6963      	ldrpl	r3, [r4, #20]
 800cbd2:	60a3      	str	r3, [r4, #8]
 800cbd4:	e7f4      	b.n	800cbc0 <__swsetup_r+0xb0>
 800cbd6:	2000      	movs	r0, #0
 800cbd8:	e7f7      	b.n	800cbca <__swsetup_r+0xba>
 800cbda:	bf00      	nop
 800cbdc:	200001f8 	.word	0x200001f8
 800cbe0:	0800eaa4 	.word	0x0800eaa4
 800cbe4:	0800eac4 	.word	0x0800eac4
 800cbe8:	0800ea84 	.word	0x0800ea84

0800cbec <_close_r>:
 800cbec:	b538      	push	{r3, r4, r5, lr}
 800cbee:	4d06      	ldr	r5, [pc, #24]	; (800cc08 <_close_r+0x1c>)
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	4604      	mov	r4, r0
 800cbf4:	4608      	mov	r0, r1
 800cbf6:	602b      	str	r3, [r5, #0]
 800cbf8:	f7f4 f9e9 	bl	8000fce <_close>
 800cbfc:	1c43      	adds	r3, r0, #1
 800cbfe:	d102      	bne.n	800cc06 <_close_r+0x1a>
 800cc00:	682b      	ldr	r3, [r5, #0]
 800cc02:	b103      	cbz	r3, 800cc06 <_close_r+0x1a>
 800cc04:	6023      	str	r3, [r4, #0]
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	2000b338 	.word	0x2000b338

0800cc0c <__sflush_r>:
 800cc0c:	898a      	ldrh	r2, [r1, #12]
 800cc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	4605      	mov	r5, r0
 800cc14:	0710      	lsls	r0, r2, #28
 800cc16:	460c      	mov	r4, r1
 800cc18:	d458      	bmi.n	800cccc <__sflush_r+0xc0>
 800cc1a:	684b      	ldr	r3, [r1, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dc05      	bgt.n	800cc2c <__sflush_r+0x20>
 800cc20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	dc02      	bgt.n	800cc2c <__sflush_r+0x20>
 800cc26:	2000      	movs	r0, #0
 800cc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc2e:	2e00      	cmp	r6, #0
 800cc30:	d0f9      	beq.n	800cc26 <__sflush_r+0x1a>
 800cc32:	2300      	movs	r3, #0
 800cc34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc38:	682f      	ldr	r7, [r5, #0]
 800cc3a:	602b      	str	r3, [r5, #0]
 800cc3c:	d032      	beq.n	800cca4 <__sflush_r+0x98>
 800cc3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	075a      	lsls	r2, r3, #29
 800cc44:	d505      	bpl.n	800cc52 <__sflush_r+0x46>
 800cc46:	6863      	ldr	r3, [r4, #4]
 800cc48:	1ac0      	subs	r0, r0, r3
 800cc4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc4c:	b10b      	cbz	r3, 800cc52 <__sflush_r+0x46>
 800cc4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc50:	1ac0      	subs	r0, r0, r3
 800cc52:	2300      	movs	r3, #0
 800cc54:	4602      	mov	r2, r0
 800cc56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc58:	6a21      	ldr	r1, [r4, #32]
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b0      	blx	r6
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	89a3      	ldrh	r3, [r4, #12]
 800cc62:	d106      	bne.n	800cc72 <__sflush_r+0x66>
 800cc64:	6829      	ldr	r1, [r5, #0]
 800cc66:	291d      	cmp	r1, #29
 800cc68:	d82c      	bhi.n	800ccc4 <__sflush_r+0xb8>
 800cc6a:	4a2a      	ldr	r2, [pc, #168]	; (800cd14 <__sflush_r+0x108>)
 800cc6c:	40ca      	lsrs	r2, r1
 800cc6e:	07d6      	lsls	r6, r2, #31
 800cc70:	d528      	bpl.n	800ccc4 <__sflush_r+0xb8>
 800cc72:	2200      	movs	r2, #0
 800cc74:	6062      	str	r2, [r4, #4]
 800cc76:	04d9      	lsls	r1, r3, #19
 800cc78:	6922      	ldr	r2, [r4, #16]
 800cc7a:	6022      	str	r2, [r4, #0]
 800cc7c:	d504      	bpl.n	800cc88 <__sflush_r+0x7c>
 800cc7e:	1c42      	adds	r2, r0, #1
 800cc80:	d101      	bne.n	800cc86 <__sflush_r+0x7a>
 800cc82:	682b      	ldr	r3, [r5, #0]
 800cc84:	b903      	cbnz	r3, 800cc88 <__sflush_r+0x7c>
 800cc86:	6560      	str	r0, [r4, #84]	; 0x54
 800cc88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc8a:	602f      	str	r7, [r5, #0]
 800cc8c:	2900      	cmp	r1, #0
 800cc8e:	d0ca      	beq.n	800cc26 <__sflush_r+0x1a>
 800cc90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc94:	4299      	cmp	r1, r3
 800cc96:	d002      	beq.n	800cc9e <__sflush_r+0x92>
 800cc98:	4628      	mov	r0, r5
 800cc9a:	f7fd fa4d 	bl	800a138 <_free_r>
 800cc9e:	2000      	movs	r0, #0
 800cca0:	6360      	str	r0, [r4, #52]	; 0x34
 800cca2:	e7c1      	b.n	800cc28 <__sflush_r+0x1c>
 800cca4:	6a21      	ldr	r1, [r4, #32]
 800cca6:	2301      	movs	r3, #1
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b0      	blx	r6
 800ccac:	1c41      	adds	r1, r0, #1
 800ccae:	d1c7      	bne.n	800cc40 <__sflush_r+0x34>
 800ccb0:	682b      	ldr	r3, [r5, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d0c4      	beq.n	800cc40 <__sflush_r+0x34>
 800ccb6:	2b1d      	cmp	r3, #29
 800ccb8:	d001      	beq.n	800ccbe <__sflush_r+0xb2>
 800ccba:	2b16      	cmp	r3, #22
 800ccbc:	d101      	bne.n	800ccc2 <__sflush_r+0xb6>
 800ccbe:	602f      	str	r7, [r5, #0]
 800ccc0:	e7b1      	b.n	800cc26 <__sflush_r+0x1a>
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc8:	81a3      	strh	r3, [r4, #12]
 800ccca:	e7ad      	b.n	800cc28 <__sflush_r+0x1c>
 800cccc:	690f      	ldr	r7, [r1, #16]
 800ccce:	2f00      	cmp	r7, #0
 800ccd0:	d0a9      	beq.n	800cc26 <__sflush_r+0x1a>
 800ccd2:	0793      	lsls	r3, r2, #30
 800ccd4:	680e      	ldr	r6, [r1, #0]
 800ccd6:	bf08      	it	eq
 800ccd8:	694b      	ldreq	r3, [r1, #20]
 800ccda:	600f      	str	r7, [r1, #0]
 800ccdc:	bf18      	it	ne
 800ccde:	2300      	movne	r3, #0
 800cce0:	eba6 0807 	sub.w	r8, r6, r7
 800cce4:	608b      	str	r3, [r1, #8]
 800cce6:	f1b8 0f00 	cmp.w	r8, #0
 800ccea:	dd9c      	ble.n	800cc26 <__sflush_r+0x1a>
 800ccec:	6a21      	ldr	r1, [r4, #32]
 800ccee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccf0:	4643      	mov	r3, r8
 800ccf2:	463a      	mov	r2, r7
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	47b0      	blx	r6
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	dc06      	bgt.n	800cd0a <__sflush_r+0xfe>
 800ccfc:	89a3      	ldrh	r3, [r4, #12]
 800ccfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd02:	81a3      	strh	r3, [r4, #12]
 800cd04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd08:	e78e      	b.n	800cc28 <__sflush_r+0x1c>
 800cd0a:	4407      	add	r7, r0
 800cd0c:	eba8 0800 	sub.w	r8, r8, r0
 800cd10:	e7e9      	b.n	800cce6 <__sflush_r+0xda>
 800cd12:	bf00      	nop
 800cd14:	20400001 	.word	0x20400001

0800cd18 <_fflush_r>:
 800cd18:	b538      	push	{r3, r4, r5, lr}
 800cd1a:	690b      	ldr	r3, [r1, #16]
 800cd1c:	4605      	mov	r5, r0
 800cd1e:	460c      	mov	r4, r1
 800cd20:	b913      	cbnz	r3, 800cd28 <_fflush_r+0x10>
 800cd22:	2500      	movs	r5, #0
 800cd24:	4628      	mov	r0, r5
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	b118      	cbz	r0, 800cd32 <_fflush_r+0x1a>
 800cd2a:	6983      	ldr	r3, [r0, #24]
 800cd2c:	b90b      	cbnz	r3, 800cd32 <_fflush_r+0x1a>
 800cd2e:	f7ff f861 	bl	800bdf4 <__sinit>
 800cd32:	4b14      	ldr	r3, [pc, #80]	; (800cd84 <_fflush_r+0x6c>)
 800cd34:	429c      	cmp	r4, r3
 800cd36:	d11b      	bne.n	800cd70 <_fflush_r+0x58>
 800cd38:	686c      	ldr	r4, [r5, #4]
 800cd3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d0ef      	beq.n	800cd22 <_fflush_r+0xa>
 800cd42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd44:	07d0      	lsls	r0, r2, #31
 800cd46:	d404      	bmi.n	800cd52 <_fflush_r+0x3a>
 800cd48:	0599      	lsls	r1, r3, #22
 800cd4a:	d402      	bmi.n	800cd52 <_fflush_r+0x3a>
 800cd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd4e:	f7ff f906 	bl	800bf5e <__retarget_lock_acquire_recursive>
 800cd52:	4628      	mov	r0, r5
 800cd54:	4621      	mov	r1, r4
 800cd56:	f7ff ff59 	bl	800cc0c <__sflush_r>
 800cd5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd5c:	07da      	lsls	r2, r3, #31
 800cd5e:	4605      	mov	r5, r0
 800cd60:	d4e0      	bmi.n	800cd24 <_fflush_r+0xc>
 800cd62:	89a3      	ldrh	r3, [r4, #12]
 800cd64:	059b      	lsls	r3, r3, #22
 800cd66:	d4dd      	bmi.n	800cd24 <_fflush_r+0xc>
 800cd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd6a:	f7ff f8f9 	bl	800bf60 <__retarget_lock_release_recursive>
 800cd6e:	e7d9      	b.n	800cd24 <_fflush_r+0xc>
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <_fflush_r+0x70>)
 800cd72:	429c      	cmp	r4, r3
 800cd74:	d101      	bne.n	800cd7a <_fflush_r+0x62>
 800cd76:	68ac      	ldr	r4, [r5, #8]
 800cd78:	e7df      	b.n	800cd3a <_fflush_r+0x22>
 800cd7a:	4b04      	ldr	r3, [pc, #16]	; (800cd8c <_fflush_r+0x74>)
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	bf08      	it	eq
 800cd80:	68ec      	ldreq	r4, [r5, #12]
 800cd82:	e7da      	b.n	800cd3a <_fflush_r+0x22>
 800cd84:	0800eaa4 	.word	0x0800eaa4
 800cd88:	0800eac4 	.word	0x0800eac4
 800cd8c:	0800ea84 	.word	0x0800ea84

0800cd90 <_lseek_r>:
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	4d07      	ldr	r5, [pc, #28]	; (800cdb0 <_lseek_r+0x20>)
 800cd94:	4604      	mov	r4, r0
 800cd96:	4608      	mov	r0, r1
 800cd98:	4611      	mov	r1, r2
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	602a      	str	r2, [r5, #0]
 800cd9e:	461a      	mov	r2, r3
 800cda0:	f7f4 f93c 	bl	800101c <_lseek>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	d102      	bne.n	800cdae <_lseek_r+0x1e>
 800cda8:	682b      	ldr	r3, [r5, #0]
 800cdaa:	b103      	cbz	r3, 800cdae <_lseek_r+0x1e>
 800cdac:	6023      	str	r3, [r4, #0]
 800cdae:	bd38      	pop	{r3, r4, r5, pc}
 800cdb0:	2000b338 	.word	0x2000b338

0800cdb4 <__swhatbuf_r>:
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	460e      	mov	r6, r1
 800cdb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	b096      	sub	sp, #88	; 0x58
 800cdc0:	4614      	mov	r4, r2
 800cdc2:	461d      	mov	r5, r3
 800cdc4:	da08      	bge.n	800cdd8 <__swhatbuf_r+0x24>
 800cdc6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	602a      	str	r2, [r5, #0]
 800cdce:	061a      	lsls	r2, r3, #24
 800cdd0:	d410      	bmi.n	800cdf4 <__swhatbuf_r+0x40>
 800cdd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdd6:	e00e      	b.n	800cdf6 <__swhatbuf_r+0x42>
 800cdd8:	466a      	mov	r2, sp
 800cdda:	f000 f88b 	bl	800cef4 <_fstat_r>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	dbf1      	blt.n	800cdc6 <__swhatbuf_r+0x12>
 800cde2:	9a01      	ldr	r2, [sp, #4]
 800cde4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cde8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdec:	425a      	negs	r2, r3
 800cdee:	415a      	adcs	r2, r3
 800cdf0:	602a      	str	r2, [r5, #0]
 800cdf2:	e7ee      	b.n	800cdd2 <__swhatbuf_r+0x1e>
 800cdf4:	2340      	movs	r3, #64	; 0x40
 800cdf6:	2000      	movs	r0, #0
 800cdf8:	6023      	str	r3, [r4, #0]
 800cdfa:	b016      	add	sp, #88	; 0x58
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce00 <__smakebuf_r>:
 800ce00:	898b      	ldrh	r3, [r1, #12]
 800ce02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce04:	079d      	lsls	r5, r3, #30
 800ce06:	4606      	mov	r6, r0
 800ce08:	460c      	mov	r4, r1
 800ce0a:	d507      	bpl.n	800ce1c <__smakebuf_r+0x1c>
 800ce0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	6123      	str	r3, [r4, #16]
 800ce14:	2301      	movs	r3, #1
 800ce16:	6163      	str	r3, [r4, #20]
 800ce18:	b002      	add	sp, #8
 800ce1a:	bd70      	pop	{r4, r5, r6, pc}
 800ce1c:	ab01      	add	r3, sp, #4
 800ce1e:	466a      	mov	r2, sp
 800ce20:	f7ff ffc8 	bl	800cdb4 <__swhatbuf_r>
 800ce24:	9900      	ldr	r1, [sp, #0]
 800ce26:	4605      	mov	r5, r0
 800ce28:	4630      	mov	r0, r6
 800ce2a:	f7fd fa25 	bl	800a278 <_malloc_r>
 800ce2e:	b948      	cbnz	r0, 800ce44 <__smakebuf_r+0x44>
 800ce30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce34:	059a      	lsls	r2, r3, #22
 800ce36:	d4ef      	bmi.n	800ce18 <__smakebuf_r+0x18>
 800ce38:	f023 0303 	bic.w	r3, r3, #3
 800ce3c:	f043 0302 	orr.w	r3, r3, #2
 800ce40:	81a3      	strh	r3, [r4, #12]
 800ce42:	e7e3      	b.n	800ce0c <__smakebuf_r+0xc>
 800ce44:	4b0d      	ldr	r3, [pc, #52]	; (800ce7c <__smakebuf_r+0x7c>)
 800ce46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce48:	89a3      	ldrh	r3, [r4, #12]
 800ce4a:	6020      	str	r0, [r4, #0]
 800ce4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	9b00      	ldr	r3, [sp, #0]
 800ce54:	6163      	str	r3, [r4, #20]
 800ce56:	9b01      	ldr	r3, [sp, #4]
 800ce58:	6120      	str	r0, [r4, #16]
 800ce5a:	b15b      	cbz	r3, 800ce74 <__smakebuf_r+0x74>
 800ce5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce60:	4630      	mov	r0, r6
 800ce62:	f000 f859 	bl	800cf18 <_isatty_r>
 800ce66:	b128      	cbz	r0, 800ce74 <__smakebuf_r+0x74>
 800ce68:	89a3      	ldrh	r3, [r4, #12]
 800ce6a:	f023 0303 	bic.w	r3, r3, #3
 800ce6e:	f043 0301 	orr.w	r3, r3, #1
 800ce72:	81a3      	strh	r3, [r4, #12]
 800ce74:	89a0      	ldrh	r0, [r4, #12]
 800ce76:	4305      	orrs	r5, r0
 800ce78:	81a5      	strh	r5, [r4, #12]
 800ce7a:	e7cd      	b.n	800ce18 <__smakebuf_r+0x18>
 800ce7c:	0800bd8d 	.word	0x0800bd8d

0800ce80 <__ascii_mbtowc>:
 800ce80:	b082      	sub	sp, #8
 800ce82:	b901      	cbnz	r1, 800ce86 <__ascii_mbtowc+0x6>
 800ce84:	a901      	add	r1, sp, #4
 800ce86:	b142      	cbz	r2, 800ce9a <__ascii_mbtowc+0x1a>
 800ce88:	b14b      	cbz	r3, 800ce9e <__ascii_mbtowc+0x1e>
 800ce8a:	7813      	ldrb	r3, [r2, #0]
 800ce8c:	600b      	str	r3, [r1, #0]
 800ce8e:	7812      	ldrb	r2, [r2, #0]
 800ce90:	1e10      	subs	r0, r2, #0
 800ce92:	bf18      	it	ne
 800ce94:	2001      	movne	r0, #1
 800ce96:	b002      	add	sp, #8
 800ce98:	4770      	bx	lr
 800ce9a:	4610      	mov	r0, r2
 800ce9c:	e7fb      	b.n	800ce96 <__ascii_mbtowc+0x16>
 800ce9e:	f06f 0001 	mvn.w	r0, #1
 800cea2:	e7f8      	b.n	800ce96 <__ascii_mbtowc+0x16>

0800cea4 <_malloc_usable_size_r>:
 800cea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cea8:	1f18      	subs	r0, r3, #4
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	bfbc      	itt	lt
 800ceae:	580b      	ldrlt	r3, [r1, r0]
 800ceb0:	18c0      	addlt	r0, r0, r3
 800ceb2:	4770      	bx	lr

0800ceb4 <_read_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d07      	ldr	r5, [pc, #28]	; (800ced4 <_read_r+0x20>)
 800ceb8:	4604      	mov	r4, r0
 800ceba:	4608      	mov	r0, r1
 800cebc:	4611      	mov	r1, r2
 800cebe:	2200      	movs	r2, #0
 800cec0:	602a      	str	r2, [r5, #0]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f7f4 f84a 	bl	8000f5c <_read>
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	d102      	bne.n	800ced2 <_read_r+0x1e>
 800cecc:	682b      	ldr	r3, [r5, #0]
 800cece:	b103      	cbz	r3, 800ced2 <_read_r+0x1e>
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	bd38      	pop	{r3, r4, r5, pc}
 800ced4:	2000b338 	.word	0x2000b338

0800ced8 <__ascii_wctomb>:
 800ced8:	b149      	cbz	r1, 800ceee <__ascii_wctomb+0x16>
 800ceda:	2aff      	cmp	r2, #255	; 0xff
 800cedc:	bf85      	ittet	hi
 800cede:	238a      	movhi	r3, #138	; 0x8a
 800cee0:	6003      	strhi	r3, [r0, #0]
 800cee2:	700a      	strbls	r2, [r1, #0]
 800cee4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cee8:	bf98      	it	ls
 800ceea:	2001      	movls	r0, #1
 800ceec:	4770      	bx	lr
 800ceee:	4608      	mov	r0, r1
 800cef0:	4770      	bx	lr
	...

0800cef4 <_fstat_r>:
 800cef4:	b538      	push	{r3, r4, r5, lr}
 800cef6:	4d07      	ldr	r5, [pc, #28]	; (800cf14 <_fstat_r+0x20>)
 800cef8:	2300      	movs	r3, #0
 800cefa:	4604      	mov	r4, r0
 800cefc:	4608      	mov	r0, r1
 800cefe:	4611      	mov	r1, r2
 800cf00:	602b      	str	r3, [r5, #0]
 800cf02:	f7f4 f870 	bl	8000fe6 <_fstat>
 800cf06:	1c43      	adds	r3, r0, #1
 800cf08:	d102      	bne.n	800cf10 <_fstat_r+0x1c>
 800cf0a:	682b      	ldr	r3, [r5, #0]
 800cf0c:	b103      	cbz	r3, 800cf10 <_fstat_r+0x1c>
 800cf0e:	6023      	str	r3, [r4, #0]
 800cf10:	bd38      	pop	{r3, r4, r5, pc}
 800cf12:	bf00      	nop
 800cf14:	2000b338 	.word	0x2000b338

0800cf18 <_isatty_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d06      	ldr	r5, [pc, #24]	; (800cf34 <_isatty_r+0x1c>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	602b      	str	r3, [r5, #0]
 800cf24:	f7f4 f86f 	bl	8001006 <_isatty>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_isatty_r+0x1a>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_isatty_r+0x1a>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	2000b338 	.word	0x2000b338

0800cf38 <_init>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	bf00      	nop
 800cf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3e:	bc08      	pop	{r3}
 800cf40:	469e      	mov	lr, r3
 800cf42:	4770      	bx	lr

0800cf44 <_fini>:
 800cf44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf46:	bf00      	nop
 800cf48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf4a:	bc08      	pop	{r3}
 800cf4c:	469e      	mov	lr, r3
 800cf4e:	4770      	bx	lr
